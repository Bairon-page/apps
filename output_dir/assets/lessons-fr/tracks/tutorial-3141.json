{
  "tutorial": {
    "id": 3141,
    "version": 3,
    "type": "guidedProject",
    "isNew": false,
    "codeLanguage": "jsx",
    "title": "Grille de pixels - Partie 4",
    "descriptionContent": "Dans la dernière partie, tu vas étendre le front-end pour permettre aux utilisateurs de peindre sur la toile numérique et d'afficher le dessin mis à jour.",
    "shortDescriptionContent": "",
    "showInTrack": true,
    "iconBanner": "tutorial-3141-icon-banner.svg",
    "chapters": [
      {
        "id": 15460,
        "title": "Chapitre #1",
        "type": "practiceLevel3",
        "lessons": [
          {
            "title": "Lesson #1",
            "id": 135926,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Bienvenue dans le projet **Pixel Grid**. Dans la dernière partie, nous allons étendre le front-end pour permettre aux utilisateurs de peindre sur la toile numérique.\n\n1. Dans le fichier `Toolbar.jsx`, crée un nouveau composant React appelé `Toolbar`. Assure-toi d'importer `React` et d'exporter également le composant.\n2. Assure-toi que le composant prend `selectedColor` et `setSelectedColor` comme props.\n3. À l'intérieur du composant, définis un tableau appelé `colors`, avec 8 couleurs CSS : `\"black\"`, `\"red\"`, `\"green\"`, `\"blue\"`, `\"yellow\"`, `\"purple\"`, `\"orange\"`, et `\"pink\"`.\n4. Retourne un élément `div` avec le `className` défini sur `\"toolbar\"`.\n5. À l'intérieur du `div`, boucle sur le tableau `colors`.\n   - Affiche un `button` pour chaque élément du tableau.\n   - Défini une clé unique pour chaque bouton rendu.\n   - Utilise la propriété `style` pour définir la couleur de fond de l'élément, qui doit être une couleur CSS.\n   - Assure-toi que lorsqu'un bouton est cliqué, la fonction passée `setSelectedColor` est appelée avec la couleur du bouton comme argument.",
              "preselectedFileIndex": 6,
              "hasVisualOutput": true,
              "files": [
                {
                  "name": "index.html",
                  "codeLanguage": "html",
                  "content": "<!doctype html>\n<html>\n  <head>\n    <script type=\"module\" src=\"./index.js\"></script>\n    <link rel=\"stylesheet\" href=\"./index.css\" />\n    <title>Pixel Grid</title>\n  </head>\n  <body>\n    <div id=\"root\">loading</div>\n  </body>\n</html>",
                  "solvedContent": null
                },
                {
                  "name": "index.jsx",
                  "codeLanguage": "jsx",
                  "content": "import React from \"react\";\nimport { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nconst root = createRoot(rootElement);\nroot.render(<App />);",
                  "solvedContent": null
                },
                {
                  "name": "App.jsx",
                  "codeLanguage": "jsx",
                  "content": "import React, { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport PixelGrid from \"./PixelGrid\";\n\nconst URL = process.env.BACKEND_URL;\n\nconst App = () => {\n  const [grid, setGrid] = useState([]);\n\n  useEffect(() => {\n    fetch(`${URL}/grid`)\n      .then((response) => response.json())\n      .then((data) => setGrid(data.grid))\n      .catch((error) => console.error(\"Error fetching grid data:\", error));\n  }, []);\n\n  return (\n    <div className=\"content-wrapper\">\n      <h1>Pixel Grid</h1>\n      <PixelGrid grid={grid} />\n    </div>\n  );\n};\n\nexport default App;",
                  "solvedContent": null
                },
                {
                  "name": "App.css",
                  "codeLanguage": "css",
                  "content": "html,\nbody,\n.content-wrapper {\n  height: 100%;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n}",
                  "solvedContent": null
                },
                {
                  "name": "PixelGrid.jsx",
                  "codeLanguage": "jsx",
                  "content": "import React from \"react\";\nimport \"./PixelGrid.css\";\n\nconst PixelGrid = ({ grid }) => {\n  return (\n    <div className=\"grid\">\n      {grid.map((cell) => (\n        <div\n          key={`${cell.x}-${cell.y}`}\n          className=\"gridItem\"\n          style={{\n            backgroundColor: cell.color,\n            gridColumnStart: cell.x + 1,\n            gridRowStart: cell.y + 1,\n          }}\n        ></div>\n      ))}\n    </div>\n  );\n};\n\nexport default PixelGrid;",
                  "solvedContent": null
                },
                {
                  "name": "PixelGrid.css",
                  "codeLanguage": "css",
                  "content": ".grid {\n  display: grid;\n  grid-template-columns: repeat(20, 20px);\n  grid-template-rows: repeat(20, 20px);\n}\n\n.gridItem {\n  width: 20px;\n  height: 20px;\n  border: 1px solid lightgray;\n}\n\n@media (max-width: 440px) {\n  .grid {\n    grid-template-columns: repeat(20, 4vw);\n    grid-template-rows: repeat(20, 4vw);\n  }\n\n  .gridItem {\n    width: 4vw;\n    height: 4vw;\n  }\n}\n",
                  "solvedContent": null
                },
                {
                  "name": "Toolbar.jsx",
                  "codeLanguage": "jsx",
                  "content": "",
                  "solvedContent": "import React from \"react\";\n\nconst Toolbar = ({ selectedColor, setSelectedColor }) => {\n  const colors = [\n    \"black\",\n    \"red\",\n    \"green\",\n    \"blue\",\n    \"yellow\",\n    \"purple\",\n    \"orange\",\n    \"pink\",\n  ];\n  return (\n    <div className=\"toolbar\">\n      {colors.map((color) => (\n        <button\n          key={color}\n          style={{ backgroundColor: color }}\n          onClick={() => setSelectedColor(color)}\n        ></button>\n      ))}\n    </div>\n  );\n};\n\nexport default Toolbar;"
                },
                {
                  "name": "Toolbar.css",
                  "codeLanguage": "css",
                  "content": "",
                  "solvedContent": null
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Lesson #2",
            "id": 135927,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Il est temps d'intégrer le nouveau composant Toolbar.\n\n1. Importe le composant `Toolbar` dans le composant `App`.\n2. Définit un nouveau hook `useState` pour stocker `selectedColor` dans le composant `App`. Définit sa valeur par défaut à `\"black\"`.\n3. Rends le composant `Toolbar` en dessous du composant `PixelGrid`.\n4. Passe `selectedColor` et `setSelectedColor` en tant que props au composant `Toolbar`.",
              "preselectedFileIndex": 2,
              "hasVisualOutput": true,
              "files": [
                {
                  "name": "index.html",
                  "codeLanguage": "html",
                  "content": "<!doctype html>\n<html>\n  <head>\n    <script type=\"module\" src=\"./index.js\"></script>\n    <link rel=\"stylesheet\" href=\"./index.css\" />\n    <title>Pixel Grid</title>\n  </head>\n  <body>\n    <div id=\"root\">loading</div>\n  </body>\n</html>",
                  "solvedContent": null
                },
                {
                  "name": "index.jsx",
                  "codeLanguage": "jsx",
                  "content": "import React from \"react\";\nimport { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nconst root = createRoot(rootElement);\nroot.render(<App />);",
                  "solvedContent": null
                },
                {
                  "name": "App.jsx",
                  "codeLanguage": "jsx",
                  "content": "import React, { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport PixelGrid from \"./PixelGrid\";\n\nconst URL = process.env.BACKEND_URL;\n\nconst App = () => {\n  const [grid, setGrid] = useState([]);\n\n  useEffect(() => {\n    fetch(`${URL}/grid`)\n      .then((response) => response.json())\n      .then((data) => setGrid(data.grid))\n      .catch((error) => console.error(\"Error fetching grid data:\", error));\n  }, []);\n\n  return (\n    <div className=\"content-wrapper\">\n      <h1>Pixel Grid</h1>\n      <PixelGrid grid={grid} />\n    </div>\n  );\n};\n\nexport default App;",
                  "solvedContent": "import React, { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport PixelGrid from \"./PixelGrid\";\nimport Toolbar from \"./Toolbar\";\n\nconst URL = process.env.BACKEND_URL;\n\nconst App = () => {\n  const [selectedColor, setSelectedColor] = useState(\"black\");\n  const [grid, setGrid] = useState([]);\n\n  useEffect(() => {\n    fetch(`${URL}/grid`)\n      .then((response) => response.json())\n      .then((data) => setGrid(data.grid))\n      .catch((error) => console.error(\"Error fetching grid data:\", error));\n  }, []);\n\n  return (\n    <div className=\"content-wrapper\">\n      <h1>Pixel Grid</h1>\n      <PixelGrid grid={grid} />\n      <Toolbar\n        selectedColor={selectedColor}\n        setSelectedColor={setSelectedColor}\n      />\n    </div>\n  );\n};\n\nexport default App;"
                },
                {
                  "name": "App.css",
                  "codeLanguage": "css",
                  "content": "html,\nbody,\n.content-wrapper {\n  height: 100%;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n}",
                  "solvedContent": null
                },
                {
                  "name": "PixelGrid.jsx",
                  "codeLanguage": "jsx",
                  "content": "import React from \"react\";\nimport \"./PixelGrid.css\";\n\nconst PixelGrid = ({ grid }) => {\n  return (\n    <div className=\"grid\">\n      {grid.map((cell) => (\n        <div\n          key={`${cell.x}-${cell.y}`}\n          className=\"gridItem\"\n          style={{\n            backgroundColor: cell.color,\n            gridColumnStart: cell.x + 1,\n            gridRowStart: cell.y + 1,\n          }}\n        ></div>\n      ))}\n    </div>\n  );\n};\n\nexport default PixelGrid;",
                  "solvedContent": null
                },
                {
                  "name": "PixelGrid.css",
                  "codeLanguage": "css",
                  "content": ".grid {\n  display: grid;\n  grid-template-columns: repeat(20, 20px);\n  grid-template-rows: repeat(20, 20px);\n}\n\n.gridItem {\n  width: 20px;\n  height: 20px;\n  border: 1px solid lightgray;\n}\n\n@media (max-width: 440px) {\n  .grid {\n    grid-template-columns: repeat(20, 4vw);\n    grid-template-rows: repeat(20, 4vw);\n  }\n\n  .gridItem {\n    width: 4vw;\n    height: 4vw;\n  }\n}\n",
                  "solvedContent": null
                },
                {
                  "name": "Toolbar.jsx",
                  "codeLanguage": "jsx",
                  "content": "import React from \"react\";\n\nconst Toolbar = ({ selectedColor, setSelectedColor }) => {\n  const colors = [\n    \"black\",\n    \"red\",\n    \"green\",\n    \"blue\",\n    \"yellow\",\n    \"purple\",\n    \"orange\",\n    \"pink\",\n  ];\n  return (\n    <div className=\"toolbar\">\n      {colors.map((color) => (\n        <button\n          key={color}\n          className={selectedColor === color ? \"selected-color\" : \"\"}\n          style={{ backgroundColor: color }}\n          onClick={() => setSelectedColor(color)}\n        ></button>\n      ))}\n    </div>\n  );\n};\n\nexport default Toolbar;",
                  "solvedContent": null
                },
                {
                  "name": "Toolbar.css",
                  "codeLanguage": "css",
                  "content": "",
                  "solvedContent": null
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Lesson #2 - Copy",
            "id": 135933,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Ajoutons des styles pour le composant `Toolbar` afin de le rendre plus agréable.\n\n1. Importe le fichier `Toolbar.css` dans le fichier `Toolbar.jsx`.\n2. Dans le fichier `Toolbar.css`, crée une règle `.toolbar` :\n   - Définit `display` à `flex`.\n   - Définit `margin` à `40px auto`.\n   - Définit `padding` à `12px`.\n   - Définit `border` à `1px solid lightgray`.\n   - Définit `border-radius` à `32px`.\n   - Définit `gap` à `8px`.\n3. Crée une règle `.toolbar > button` :\n   - Définit `width` à `40px`.\n   - Définit `height` à `40px`.\n   - Définit `border-radius` à `20px`.\n   - Définit `border` à `2px solid white`.\n   - Définit `cursor` à `pointer`.\n4. Crée une règle `.selected-color` :\n   - Définit `outline` à `outline: 3px solid black;`.\n   - Définit `box-shadow` à `0 4px 8px rgba(0, 0, 0, 0.3)`.",
              "preselectedFileIndex": 6,
              "hasVisualOutput": true,
              "files": [
                {
                  "name": "index.html",
                  "codeLanguage": "html",
                  "content": "<!doctype html>\n<html>\n  <head>\n    <script type=\"module\" src=\"./index.js\"></script>\n    <link rel=\"stylesheet\" href=\"./index.css\" />\n    <title>Pixel Grid</title>\n  </head>\n  <body>\n    <div id=\"root\">loading</div>\n  </body>\n</html>",
                  "solvedContent": null
                },
                {
                  "name": "index.jsx",
                  "codeLanguage": "jsx",
                  "content": "import React from \"react\";\nimport { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nconst root = createRoot(rootElement);\nroot.render(<App />);",
                  "solvedContent": null
                },
                {
                  "name": "App.jsx",
                  "codeLanguage": "jsx",
                  "content": "import React, { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport PixelGrid from \"./PixelGrid\";\nimport Toolbar from \"./Toolbar\";\n\nconst URL = process.env.BACKEND_URL;\n\nconst App = () => {\n  const [selectedColor, setSelectedColor] = useState(\"black\");\n  const [grid, setGrid] = useState([]);\n\n  useEffect(() => {\n    fetch(`${URL}/grid`)\n      .then((response) => response.json())\n      .then((data) => setGrid(data.grid))\n      .catch((error) => console.error(\"Error fetching grid data:\", error));\n  }, []);\n\n  return (\n    <div className=\"content-wrapper\">\n      <h1>Pixel Grid</h1>\n      <PixelGrid grid={grid} />\n      <Toolbar\n        selectedColor={selectedColor}\n        setSelectedColor={setSelectedColor}\n      />\n    </div>\n  );\n};\n\nexport default App;",
                  "solvedContent": null
                },
                {
                  "name": "App.css",
                  "codeLanguage": "css",
                  "content": "html,\nbody,\n.content-wrapper {\n  height: 100%;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n}",
                  "solvedContent": null
                },
                {
                  "name": "PixelGrid.jsx",
                  "codeLanguage": "jsx",
                  "content": "import React from \"react\";\nimport \"./PixelGrid.css\";\n\nconst PixelGrid = ({ grid }) => {\n  return (\n    <div className=\"grid\">\n      {grid.map((cell) => (\n        <div\n          key={`${cell.x}-${cell.y}`}\n          className=\"gridItem\"\n          style={{\n            backgroundColor: cell.color,\n            gridColumnStart: cell.x + 1,\n            gridRowStart: cell.y + 1,\n          }}\n        ></div>\n      ))}\n    </div>\n  );\n};\n\nexport default PixelGrid;",
                  "solvedContent": null
                },
                {
                  "name": "PixelGrid.css",
                  "codeLanguage": "css",
                  "content": ".grid {\n  display: grid;\n  grid-template-columns: repeat(20, 20px);\n  grid-template-rows: repeat(20, 20px);\n}\n\n.gridItem {\n  width: 20px;\n  height: 20px;\n  border: 1px solid lightgray;\n}\n\n@media (max-width: 440px) {\n  .grid {\n    grid-template-columns: repeat(20, 4vw);\n    grid-template-rows: repeat(20, 4vw);\n  }\n\n  .gridItem {\n    width: 4vw;\n    height: 4vw;\n  }\n}\n",
                  "solvedContent": null
                },
                {
                  "name": "Toolbar.jsx",
                  "codeLanguage": "jsx",
                  "content": "import React from \"react\";\n\nconst Toolbar = ({ selectedColor, setSelectedColor }) => {\n  const colors = [\n    \"black\",\n    \"red\",\n    \"green\",\n    \"blue\",\n    \"yellow\",\n    \"purple\",\n    \"orange\",\n    \"pink\",\n  ];\n  return (\n    <div className=\"toolbar\">\n      {colors.map((color) => (\n        <button\n          key={color}\n          className={selectedColor === color ? \"selected-color\" : \"\"}\n          style={{ backgroundColor: color }}\n          onClick={() => setSelectedColor(color)}\n        ></button>\n      ))}\n    </div>\n  );\n};\n\nexport default Toolbar;",
                  "solvedContent": "import React from \"react\";\nimport \"./Toolbar.css\";\n\nconst Toolbar = ({ selectedColor, setSelectedColor }) => {\n  const colors = [\n    \"black\",\n    \"red\",\n    \"green\",\n    \"blue\",\n    \"yellow\",\n    \"purple\",\n    \"orange\",\n    \"pink\",\n  ];\n  return (\n    <div className=\"toolbar\">\n      {colors.map((color) => (\n        <button\n          key={color}\n          className={selectedColor === color ? \"selected-color\" : \"\"}\n          style={{ backgroundColor: color }}\n          onClick={() => setSelectedColor(color)}\n        ></button>\n      ))}\n    </div>\n  );\n};\n\nexport default Toolbar;"
                },
                {
                  "name": "Toolbar.css",
                  "codeLanguage": "css",
                  "content": "",
                  "solvedContent": ".toolbar {\n  display: flex;\n  margin: 40px auto;\n  padding: 12px;\n  border: 1px solid lightgray;\n  border-radius: 32px;\n  gap: 8px;\n}\n\n.toolbar > button {\n  width: 40px;\n  height: 40px;\n  border-radius: 20px;\n  border: 2px solid white;\n  cursor: pointer;\n}\n\n.selected-color {\n  outline: 3px solid black;\n  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.3);\n}"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Lesson #2 - Copy - Copy",
            "id": 135936,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Nous avons optimisé la grille pour les appareils mobiles, et nous devrions faire de même pour la barre d'outils.\n\n1. Dans le fichier `Toolbar.css`, ajoute une media query pour cibler les fichiers avec une largeur maximale de 440px.\n2. Cible la classe `.toolbar` à l'intérieur de la media query :\n   - Définit `padding` à `2vw`.\n   - Définit `gap` à `1vw`.\n3. Crée une règle `.toolbar > button` :\n   - Définit `width` à `10vw`.\n   - Définit `height` à `10vw`.",
              "preselectedFileIndex": 7,
              "hasVisualOutput": true,
              "files": [
                {
                  "name": "index.html",
                  "codeLanguage": "html",
                  "content": "<!doctype html>\n<html>\n  <head>\n    <script type=\"module\" src=\"./index.js\"></script>\n    <link rel=\"stylesheet\" href=\"./index.css\" />\n    <title>Pixel Grid</title>\n  </head>\n  <body>\n    <div id=\"root\">loading</div>\n  </body>\n</html>",
                  "solvedContent": null
                },
                {
                  "name": "index.jsx",
                  "codeLanguage": "jsx",
                  "content": "import React from \"react\";\nimport { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nconst root = createRoot(rootElement);\nroot.render(<App />);",
                  "solvedContent": null
                },
                {
                  "name": "App.jsx",
                  "codeLanguage": "jsx",
                  "content": "import React, { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport PixelGrid from \"./PixelGrid\";\nimport Toolbar from \"./Toolbar\";\n\nconst URL = process.env.BACKEND_URL;\n\nconst App = () => {\n  const [selectedColor, setSelectedColor] = useState(\"black\");\n  const [grid, setGrid] = useState([]);\n\n  useEffect(() => {\n    fetch(`${URL}/grid`)\n      .then((response) => response.json())\n      .then((data) => setGrid(data.grid))\n      .catch((error) => console.error(\"Error fetching grid data:\", error));\n  }, []);\n\n  return (\n    <div className=\"content-wrapper\">\n      <h1>Pixel Grid</h1>\n      <PixelGrid grid={grid} />\n      <Toolbar\n        selectedColor={selectedColor}\n        setSelectedColor={setSelectedColor}\n      />\n    </div>\n  );\n};\n\nexport default App;",
                  "solvedContent": null
                },
                {
                  "name": "App.css",
                  "codeLanguage": "css",
                  "content": "html,\nbody,\n.content-wrapper {\n  height: 100%;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n}",
                  "solvedContent": null
                },
                {
                  "name": "PixelGrid.jsx",
                  "codeLanguage": "jsx",
                  "content": "import React from \"react\";\nimport \"./PixelGrid.css\";\n\nconst PixelGrid = ({ grid }) => {\n  return (\n    <div className=\"grid\">\n      {grid.map((cell) => (\n        <div\n          key={`${cell.x}-${cell.y}`}\n          className=\"gridItem\"\n          style={{\n            backgroundColor: cell.color,\n            gridColumnStart: cell.x + 1,\n            gridRowStart: cell.y + 1,\n          }}\n        ></div>\n      ))}\n    </div>\n  );\n};\n\nexport default PixelGrid;",
                  "solvedContent": null
                },
                {
                  "name": "PixelGrid.css",
                  "codeLanguage": "css",
                  "content": ".grid {\n  display: grid;\n  grid-template-columns: repeat(20, 20px);\n  grid-template-rows: repeat(20, 20px);\n}\n\n.gridItem {\n  width: 20px;\n  height: 20px;\n  border: 1px solid lightgray;\n}\n\n@media (max-width: 440px) {\n  .grid {\n    grid-template-columns: repeat(20, 4vw);\n    grid-template-rows: repeat(20, 4vw);\n  }\n\n  .gridItem {\n    width: 4vw;\n    height: 4vw;\n  }\n}\n",
                  "solvedContent": null
                },
                {
                  "name": "Toolbar.jsx",
                  "codeLanguage": "jsx",
                  "content": "import React from \"react\";\nimport \"./Toolbar.css\";\n\nconst Toolbar = ({ selectedColor, setSelectedColor }) => {\n  const colors = [\n    \"black\",\n    \"red\",\n    \"green\",\n    \"blue\",\n    \"yellow\",\n    \"purple\",\n    \"orange\",\n    \"pink\",\n  ];\n  return (\n    <div className=\"toolbar\">\n      {colors.map((color) => (\n        <button\n          key={color}\n          className={selectedColor === color ? \"selected-color\" : \"\"}\n          style={{ backgroundColor: color }}\n          onClick={() => setSelectedColor(color)}\n        ></button>\n      ))}\n    </div>\n  );\n};\n\nexport default Toolbar;",
                  "solvedContent": null
                },
                {
                  "name": "Toolbar.css",
                  "codeLanguage": "css",
                  "content": ".toolbar {\n  display: flex;\n  margin: 40px auto;\n  padding: 12px;\n  border: 1px solid lightgray;\n  border-radius: 32px;\n  gap: 8px;\n}\n\n.toolbar > button {\n  width: 40px;\n  height: 40px;\n  border-radius: 20px;\n  border: 2px solid white;\n  cursor: pointer;\n}\n\n.selected-color {\n  outline: 3px solid black;\n  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.3);\n}\n",
                  "solvedContent": ".toolbar {\n  display: flex;\n  margin: 40px auto;\n  padding: 12px;\n  border: 1px solid lightgray;\n  border-radius: 32px;\n  gap: 8px;\n}\n\n.toolbar > button {\n  width: 40px;\n  height: 40px;\n  border-radius: 20px;\n  border: 2px solid white;\n  cursor: pointer;\n}\n\n.selected-color {\n  outline: 3px solid black;\n  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.3);\n}\n\n@media (max-width: 440px) {\n.toolbar {\n    padding: 2vw;\n    gap: 1vw;\n}\n\n  .toolbar > button {\n    width: 10vw;\n    height: 10vw;\n  }\n}"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Lesson #3",
            "id": 135928,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Nous avons ajouté la fonctionnalité de sélection de couleur. Cependant, nous devons encore savoir quel pixel doit être mis à jour. Rendons possible l'interaction avec chaque élément de la grille et changeons sa couleur.\n\n1. Ajoute un événement `onClick` à chaque élément de la grille. Lorsqu'il est cliqué, appelle la fonction `updateColor` avec les coordonnées de l'élément. Passe la valeur x comme premier argument et la valeur y comme second argument.\n2. La fonction `updateColor` doit être passée via les props.",
              "preselectedFileIndex": 4,
              "hasVisualOutput": true,
              "files": [
                {
                  "name": "index.html",
                  "codeLanguage": "html",
                  "content": "<!doctype html>\n<html>\n  <head>\n    <script type=\"module\" src=\"./index.js\"></script>\n    <link rel=\"stylesheet\" href=\"./index.css\" />\n    <title>Pixel Grid</title>\n  </head>\n  <body>\n    <div id=\"root\">loading</div>\n  </body>\n</html>",
                  "solvedContent": null
                },
                {
                  "name": "index.jsx",
                  "codeLanguage": "jsx",
                  "content": "import React from \"react\";\nimport { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nconst root = createRoot(rootElement);\nroot.render(<App />);",
                  "solvedContent": null
                },
                {
                  "name": "App.jsx",
                  "codeLanguage": "jsx",
                  "content": "import React, { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport PixelGrid from \"./PixelGrid\";\nimport Toolbar from \"./Toolbar\";\n\nconst URL = process.env.BACKEND_URL;\n\nconst App = () => {\n  const [selectedColor, setSelectedColor] = useState(\"black\");\n  const [grid, setGrid] = useState([]);\n\n  useEffect(() => {\n    fetch(`${URL}/grid`)\n      .then((response) => response.json())\n      .then((data) => setGrid(data.grid))\n      .catch((error) => console.error(\"Error fetching grid data:\", error));\n  }, []);\n\n  return (\n    <div className=\"content-wrapper\">\n      <h1>Pixel Grid</h1>\n      <PixelGrid grid={grid} />\n      <Toolbar\n        selectedColor={selectedColor}\n        setSelectedColor={setSelectedColor}\n      />\n    </div>\n  );\n};\n\nexport default App;",
                  "solvedContent": null
                },
                {
                  "name": "App.css",
                  "codeLanguage": "css",
                  "content": "html,\nbody,\n.content-wrapper {\n  height: 100%;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n}",
                  "solvedContent": null
                },
                {
                  "name": "PixelGrid.jsx",
                  "codeLanguage": "jsx",
                  "content": "import React from \"react\";\nimport \"./PixelGrid.css\";\n\nconst PixelGrid = ({ grid }) => {\n  return (\n    <div className=\"grid\">\n      {grid.map((cell) => (\n        <div\n          key={`${cell.x}-${cell.y}`}\n          className=\"gridItem\"\n          style={{\n            backgroundColor: cell.color,\n            gridColumnStart: cell.x + 1,\n            gridRowStart: cell.y + 1,\n          }}\n        ></div>\n      ))}\n    </div>\n  );\n};\n\nexport default PixelGrid;",
                  "solvedContent": "import React from \"react\";\nimport \"./PixelGrid.css\";\n\nconst PixelGrid = ({ grid, updateColor }) => {\n  return (\n    <div className=\"grid\">\n      {grid.map((cell) => (\n        <div\n          key={`${cell.x}-${cell.y}`}\n          className=\"gridItem\"\n          style={{\n            backgroundColor: cell.color,\n            gridColumnStart: cell.x + 1,\n            gridRowStart: cell.y + 1,\n          }}\n          onClick={() => updateColor(cell.x, cell.y)}\n        ></div>\n      ))}\n    </div>\n  );\n};\n\nexport default PixelGrid;"
                },
                {
                  "name": "PixelGrid.css",
                  "codeLanguage": "css",
                  "content": ".grid {\n  display: grid;\n  grid-template-columns: repeat(20, 20px);\n  grid-template-rows: repeat(20, 20px);\n}\n\n.gridItem {\n  width: 20px;\n  height: 20px;\n  border: 1px solid lightgray;\n}\n\n@media (max-width: 440px) {\n  .grid {\n    grid-template-columns: repeat(20, 4vw);\n    grid-template-rows: repeat(20, 4vw);\n  }\n\n  .gridItem {\n    width: 4vw;\n    height: 4vw;\n  }\n}\n",
                  "solvedContent": null
                },
                {
                  "name": "Toolbar.jsx",
                  "codeLanguage": "jsx",
                  "content": "import React from \"react\";\nimport \"./Toolbar.css\";\n\nconst Toolbar = ({ selectedColor, setSelectedColor }) => {\n  const colors = [\n    \"black\",\n    \"red\",\n    \"green\",\n    \"blue\",\n    \"yellow\",\n    \"purple\",\n    \"orange\",\n    \"pink\",\n  ];\n  return (\n    <div className=\"toolbar\">\n      {colors.map((color) => (\n        <button\n          key={color}\n          className={selectedColor === color ? \"selected-color\" : \"\"}\n          style={{ backgroundColor: color }}\n          onClick={() => setSelectedColor(color)}\n        ></button>\n      ))}\n    </div>\n  );\n};\n\nexport default Toolbar;",
                  "solvedContent": null
                },
                {
                  "name": "Toolbar.css",
                  "codeLanguage": "css",
                  "content": ".toolbar {\n  display: flex;\n  margin: 40px auto;\n  padding: 12px;\n  border: 1px solid lightgray;\n  border-radius: 32px;\n  gap: 8px;\n}\n\n.toolbar > button {\n  width: 40px;\n  height: 40px;\n  border-radius: 20px;\n  border: 2px solid white;\n  cursor: pointer;\n}\n\n.selected-color {\n  outline: 3px solid black;\n  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.3);\n}\n\n@media (max-width: 440px) {\n.toolbar {\n    padding: 2vw;\n    gap: 1vw;\n}\n\n  .toolbar > button {\n    width: 10vw;\n    height: 10vw;\n  }\n}",
                  "solvedContent": null
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Lesson #4",
            "id": 135929,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Une fois que nous cliquons sur un pixel, nous appelons la fonction passée `updateColor`. Mais cette fonction n'existe pas encore. Il est temps de changer cela.\n\n1. Ajoute une nouvelle fonction `updateColor` au composant `App` qui accepte deux arguments, `x` et `y`.\n2. Passe cette fonction pour la propriété `updateColor` au composant `PixelGrid`.\n3. Fais une requête `fetch` pour mettre à jour la couleur de la grille en appelant le point de terminaison `\"/setGridColor\"` de notre backend.\n   - Définit la `method` à `\"POST\"`.\n   - Définit les `headers` à `{ \"Content-Type\": \"application/json\" }`.\n   - Définit le `body` à `JSON.stringify({ x, y, color: selectedColor })` où `x` et `y` sont les arguments de la fonction et `selectedColor` est la variable d'état.\n4. La réponse du point de terminaison `\"/setGridColor\"` sera un JSON contenant la clé `grid`. Accède à la valeur de cette clé et mets à jour la variable d'état `grid` avec celle-ci.\n5. En cas d'erreur, enregistre l'erreur dans le log.",
              "preselectedFileIndex": 2,
              "hasVisualOutput": true,
              "files": [
                {
                  "name": "index.html",
                  "codeLanguage": "html",
                  "content": "<!doctype html>\n<html>\n  <head>\n    <script type=\"module\" src=\"./index.js\"></script>\n    <link rel=\"stylesheet\" href=\"./index.css\" />\n    <title>Pixel Grid</title>\n  </head>\n  <body>\n    <div id=\"root\">loading</div>\n  </body>\n</html>",
                  "solvedContent": null
                },
                {
                  "name": "index.jsx",
                  "codeLanguage": "jsx",
                  "content": "import React from \"react\";\nimport { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nconst root = createRoot(rootElement);\nroot.render(<App />);",
                  "solvedContent": null
                },
                {
                  "name": "App.jsx",
                  "codeLanguage": "jsx",
                  "content": "import React, { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport PixelGrid from \"./PixelGrid\";\nimport Toolbar from \"./Toolbar\";\n\nconst URL = process.env.BACKEND_URL;\n\nconst App = () => {\n  const [selectedColor, setSelectedColor] = useState(\"black\");\n  const [grid, setGrid] = useState([]);\n\n  useEffect(() => {\n    fetch(`${URL}/grid`)\n      .then((response) => response.json())\n      .then((data) => setGrid(data.grid))\n      .catch((error) => console.error(\"Error fetching grid data:\", error));\n  }, []);\n\n  return (\n    <div className=\"content-wrapper\">\n      <h1>Pixel Grid</h1>\n      <PixelGrid grid={grid} />\n      <Toolbar\n        selectedColor={selectedColor}\n        setSelectedColor={setSelectedColor}\n      />\n    </div>\n  );\n};\n\nexport default App;",
                  "solvedContent": "import React, { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport PixelGrid from \"./PixelGrid\";\nimport Toolbar from \"./Toolbar\";\n\nconst URL = process.env.BACKEND_URL;\n\nconst App = () => {\n  const [selectedColor, setSelectedColor] = useState(\"black\");\n  const [grid, setGrid] = useState([]);\n\n  useEffect(() => {\n    fetch(`${URL}/grid`)\n      .then((response) => response.json())\n      .then((data) => setGrid(data.grid))\n      .catch((error) => console.error(\"Error fetching grid data:\", error));\n  }, []);\n\n  const updateColor = async (x, y) => {\n    try {\n      const response = await fetch(`${URL}/setGridColor`, {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({ x, y, color: selectedColor }),\n      });\n      const { grid: updatedGrid } = await response.json();\n      setGrid(updatedGrid);\n    } catch (error) {\n      console.error(\"Error updating grid color:\", error);\n    }\n  };\n\n  return (\n    <div className=\"content-wrapper\">\n      <h1>Pixel Grid</h1>\n      <PixelGrid grid={grid} updateColor={updateColor} />\n      <Toolbar\n        selectedColor={selectedColor}\n        setSelectedColor={setSelectedColor}\n      />\n    </div>\n  );\n};\n\nexport default App;"
                },
                {
                  "name": "App.css",
                  "codeLanguage": "css",
                  "content": "html,\nbody,\n.content-wrapper {\n  height: 100%;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n}",
                  "solvedContent": null
                },
                {
                  "name": "PixelGrid.jsx",
                  "codeLanguage": "jsx",
                  "content": "import React from \"react\";\nimport \"./PixelGrid.css\";\n\nconst PixelGrid = ({ grid, updateColor }) => {\n  return (\n    <div className=\"grid\">\n      {grid.map((cell) => (\n        <div\n          key={`${cell.x}-${cell.y}`}\n          className=\"gridItem\"\n          style={{\n            backgroundColor: cell.color,\n            gridColumnStart: cell.x + 1,\n            gridRowStart: cell.y + 1,\n          }}\n          onClick={() => updateColor(cell.x, cell.y)}\n        ></div>\n      ))}\n    </div>\n  );\n};\n\nexport default PixelGrid;",
                  "solvedContent": null
                },
                {
                  "name": "PixelGrid.css",
                  "codeLanguage": "css",
                  "content": ".grid {\n  display: grid;\n  grid-template-columns: repeat(20, 20px);\n  grid-template-rows: repeat(20, 20px);\n}\n\n.gridItem {\n  width: 20px;\n  height: 20px;\n  border: 1px solid lightgray;\n}\n\n@media (max-width: 440px) {\n  .grid {\n    grid-template-columns: repeat(20, 4vw);\n    grid-template-rows: repeat(20, 4vw);\n  }\n\n  .gridItem {\n    width: 4vw;\n    height: 4vw;\n  }\n}\n",
                  "solvedContent": null
                },
                {
                  "name": "Toolbar.jsx",
                  "codeLanguage": "jsx",
                  "content": "import React from \"react\";\nimport \"./Toolbar.css\";\n\nconst Toolbar = ({ selectedColor, setSelectedColor }) => {\n  const colors = [\n    \"black\",\n    \"red\",\n    \"green\",\n    \"blue\",\n    \"yellow\",\n    \"purple\",\n    \"orange\",\n    \"pink\",\n  ];\n  return (\n    <div className=\"toolbar\">\n      {colors.map((color) => (\n        <button\n          key={color}\n          className={selectedColor === color ? \"selected-color\" : \"\"}\n          style={{ backgroundColor: color }}\n          onClick={() => setSelectedColor(color)}\n        ></button>\n      ))}\n    </div>\n  );\n};\n\nexport default Toolbar;",
                  "solvedContent": null
                },
                {
                  "name": "Toolbar.css",
                  "codeLanguage": "css",
                  "content": ".toolbar {\n  display: flex;\n  margin: 40px auto;\n  padding: 12px;\n  border: 1px solid lightgray;\n  border-radius: 32px;\n  gap: 8px;\n}\n\n.toolbar > button {\n  width: 40px;\n  height: 40px;\n  border-radius: 20px;\n  border: 2px solid white;\n  cursor: pointer;\n}\n\n.selected-color {\n  outline: 3px solid black;\n  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.3);\n}\n\n@media (max-width: 440px) {\n.toolbar {\n    padding: 2vw;\n    gap: 1vw;\n}\n\n  .toolbar > button {\n    width: 10vw;\n    height: 10vw;\n  }\n}",
                  "solvedContent": null
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Lesson #6",
            "id": 135931,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Terminons en améliorant les styles des éléments de la grille pour fournir un retour utilisateur lors de l'interaction.\n\n1. Dans le fichier `PixelGrid.css`, cible le `.gridItem:hover` :\n   - Définit `border` à `1px solid gray`.\n   - Définit `transform` à `scale(1.25)`.\n   - Définit `box-shadow` à `0 4px 8px rgba(0, 0, 0, 0.3)`.\n2. À la règle `.gridItem`, ajoute ce qui suit :\n   - Définit `cursor` à `pointer`.",
              "preselectedFileIndex": 5,
              "hasVisualOutput": true,
              "files": [
                {
                  "name": "index.html",
                  "codeLanguage": "html",
                  "content": "<!doctype html>\n<html>\n  <head>\n    <script type=\"module\" src=\"./index.js\"></script>\n    <link rel=\"stylesheet\" href=\"./index.css\" />\n    <title>Pixel Grid</title>\n  </head>\n  <body>\n    <div id=\"root\">loading</div>\n  </body>\n</html>",
                  "solvedContent": null
                },
                {
                  "name": "index.jsx",
                  "codeLanguage": "jsx",
                  "content": "import React from \"react\";\nimport { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nconst root = createRoot(rootElement);\nroot.render(<App />);",
                  "solvedContent": null
                },
                {
                  "name": "App.jsx",
                  "codeLanguage": "jsx",
                  "content": "import React, { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport PixelGrid from \"./PixelGrid\";\nimport Toolbar from \"./Toolbar\";\n\nconst URL = process.env.BACKEND_URL;\n\nconst App = () => {\n  const [selectedColor, setSelectedColor] = useState(\"black\");\n  const [grid, setGrid] = useState([]);\n\n  useEffect(() => {\n    fetch(`${URL}/grid`)\n      .then((response) => response.json())\n      .then((data) => setGrid(data.grid))\n      .catch((error) => console.error(\"Error fetching grid data:\", error));\n  }, []);\n\n  const updateColor = async (x, y) => {\n    try {\n      const response = await fetch(`${URL}/setGridColor`, {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({ x, y, color: selectedColor }),\n      });\n      const { grid: updatedGrid } = await response.json();\n      setGrid(updatedGrid);\n    } catch (error) {\n      console.error(\"Error updating grid color:\", error);\n    }\n  };\n\n  return (\n    <div className=\"content-wrapper\">\n      <h1>Pixel Grid</h1>\n      <PixelGrid grid={grid} updateColor={updateColor} />\n      <Toolbar\n        selectedColor={selectedColor}\n        setSelectedColor={setSelectedColor}\n      />\n    </div>\n  );\n};\n\nexport default App;",
                  "solvedContent": null
                },
                {
                  "name": "App.css",
                  "codeLanguage": "css",
                  "content": "html,\nbody,\n.content-wrapper {\n  height: 100%;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n}",
                  "solvedContent": null
                },
                {
                  "name": "PixelGrid.jsx",
                  "codeLanguage": "jsx",
                  "content": "import React from \"react\";\nimport \"./PixelGrid.css\";\n\nconst PixelGrid = ({ grid, updateColor }) => {\n  return (\n    <div className=\"grid\">\n      {grid.map((cell) => (\n        <div\n          key={`${cell.x}-${cell.y}`}\n          className=\"gridItem\"\n          style={{\n            backgroundColor: cell.color,\n            gridColumnStart: cell.x + 1,\n            gridRowStart: cell.y + 1,\n          }}\n          onClick={() => updateColor(cell.x, cell.y)}\n        ></div>\n      ))}\n    </div>\n  );\n};\n\nexport default PixelGrid;",
                  "solvedContent": null
                },
                {
                  "name": "PixelGrid.css",
                  "codeLanguage": "css",
                  "content": ".grid {\n  display: grid;\n  grid-template-columns: repeat(20, 20px);\n  grid-template-rows: repeat(20, 20px);\n}\n\n.gridItem {\n  width: 20px;\n  height: 20px;\n  border: 1px solid lightgray;\n}\n\n@media (max-width: 440px) {\n  .grid {\n    grid-template-columns: repeat(20, 4vw);\n    grid-template-rows: repeat(20, 4vw);\n  }\n\n  .gridItem {\n    width: 4vw;\n    height: 4vw;\n  }\n}\n",
                  "solvedContent": ".grid {\n  display: grid;\n  grid-template-columns: repeat(20, 20px);\n  grid-template-rows: repeat(20, 20px);\n}\n\n.gridItem {\n  width: 20px;\n  height: 20px;\n  border: 1px solid lightgray;\n  cursor: pointer;\n}\n\n@media (max-width: 440px) {\n  .grid {\n    grid-template-columns: repeat(20, 4vw);\n    grid-template-rows: repeat(20, 4vw);\n  }\n\n  .gridItem {\n    width: 4vw;\n    height: 4vw;\n  }\n}\n\n.gridItem:hover {\n  border: 1px solid gray;\n  transform: scale(1.25);\n  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.3);\n}\n"
                },
                {
                  "name": "Toolbar.jsx",
                  "codeLanguage": "jsx",
                  "content": "import React from \"react\";\nimport \"./Toolbar.css\";\n\nconst Toolbar = ({ selectedColor, setSelectedColor }) => {\n  const colors = [\n    \"black\",\n    \"red\",\n    \"green\",\n    \"blue\",\n    \"yellow\",\n    \"purple\",\n    \"orange\",\n    \"pink\",\n  ];\n  return (\n    <div className=\"toolbar\">\n      {colors.map((color) => (\n        <button\n          key={color}\n          className={selectedColor === color ? \"selected-color\" : \"\"}\n          style={{ backgroundColor: color }}\n          onClick={() => setSelectedColor(color)}\n        ></button>\n      ))}\n    </div>\n  );\n};\n\nexport default Toolbar;",
                  "solvedContent": null
                },
                {
                  "name": "Toolbar.css",
                  "codeLanguage": "css",
                  "content": ".toolbar {\n  display: flex;\n  margin: 40px auto;\n  padding: 12px;\n  border: 1px solid lightgray;\n  border-radius: 32px;\n  gap: 8px;\n}\n\n.toolbar > button {\n  width: 40px;\n  height: 40px;\n  border-radius: 20px;\n  border: 2px solid white;\n  cursor: pointer;\n}\n\n.selected-color {\n  outline: 3px solid black;\n  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.3);\n}\n\n@media (max-width: 440px) {\n.toolbar {\n    padding: 2vw;\n    gap: 1vw;\n}\n\n  .toolbar > button {\n    width: 10vw;\n    height: 10vw;\n  }\n}",
                  "solvedContent": null
                }
              ],
              "hints": []
            }
          }
        ]
      }
    ]
  }
}