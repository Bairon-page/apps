{
  "tutorial": {
    "id": 2670,
    "version": 5,
    "type": "guidedProject",
    "isNew": false,
    "codeLanguage": "python",
    "title": "Analyseur de transactions - Partie 2",
    "descriptionContent": "Approfondis tes finances en réalisant une analyse approfondie de tes activités bancaires, en découvrant des insights",
    "shortDescriptionContent": "",
    "showInTrack": true,
    "iconBanner": "tutorial-2670-icon-banner.svg",
    "chapters": [
      {
        "id": 14645,
        "title": "Chapitre #1",
        "type": "practiceLevel3",
        "lessons": [
          {
            "title": "Lesson #1",
            "id": 129530,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Bienvenue dans la deuxième partie du projet **Transaction Analyzer**. Ici, nous allons analyser plus en profondeur les transactions et laisser l'utilisateur décider de la suite.\n\n1. Crée une nouvelle fonction appelée `analyze_transactions`.\n   - La fonction doit prendre un paramètre, `transactions`.\n   - À l'intérieur de la nouvelle fonction, trie la liste des transactions avec la fonction `sort`.\n   - Après le tri, stocke la première transaction comme `largest_withdrawal` et la dernière transaction comme `largest_deposit` puisque les transactions sont maintenant triées. Cela devrait nous donner les transactions correctes.\n   - Imprime le plus grand retrait et le plus grand dépôt.\n2. Appelle `analyze_transactions` avec `data` comme argument.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "data = [\n  (749.17, \"Investment Return\"),\n  (-11.54, \"Utilities\"),\n  (-247.58, \"Online Shopping\"),\n  (981.17, \"Investment Return\"),\n  (-410.65, \"Rent\"),\n  (310.60, \"Rent\"),\n  (563.70, \"Gift\"),\n  (220.79, \"Salary\"),\n  (-49.85, \"Car Maintenance\"),\n  (308.49, \"Salary\"),\n  (-205.55, \"Car Maintenance\"),\n  (870.64, \"Salary\"),\n  (-881.51, \"Utilities\"),\n  (518.14, \"Salary\"),\n  (-264.66, \"Groceries\")\n]\n\ndef print_transactions(transactions):\n  for transaction in transactions:\n    amount, statement = transaction\n    print(f\"${amount} - {statement}\")\n\nprint_transactions(data)\n\ndef print_summary(transactions):\n  deposits = [transaction[0] for transaction in transactions if transaction[0] >= 0]\n  total_deposited = sum(deposits)\n  print(total_deposited)\n  withdrawals = [transaction[0] for transaction in transactions if transaction[0] < 0]\n  total_withdrawn = sum(withdrawals)\n  print(total_withdrawn)\n  balance = total_deposited + total_withdrawn\n  print(f\"Balance: {balance}\")\n\nprint_summary(data)",
                  "solvedContent": "data = [\n  (749.17, \"Investment Return\"),\n  (-11.54, \"Utilities\"),\n  (-247.58, \"Online Shopping\"),\n  (981.17, \"Investment Return\"),\n  (-410.65, \"Rent\"),\n  (310.60, \"Rent\"),\n  (563.70, \"Gift\"),\n  (220.79, \"Salary\"),\n  (-49.85, \"Car Maintenance\"),\n  (308.49, \"Salary\"),\n  (-205.55, \"Car Maintenance\"),\n  (870.64, \"Salary\"),\n  (-881.51, \"Utilities\"),\n  (518.14, \"Salary\"),\n  (-264.66, \"Groceries\")\n]\n\ndef print_transactions(transactions):\n  for transaction in transactions:\n    amount, statement = transaction\n    print(f\"${amount} - {statement}\")\n\nprint_transactions(data)\n\ndef print_summary(transactions):\n  deposits = [transaction[0] for transaction in transactions if transaction[0] >= 0]\n  total_deposited = sum(deposits)\n  print(total_deposited)\n  withdrawals = [transaction[0] for transaction in transactions if transaction[0] < 0]\n  total_withdrawn = sum(withdrawals)\n  print(total_withdrawn)\n  balance = total_deposited + total_withdrawn\n  print(f\"Balance: {balance}\")\n\nprint_summary(data)\n\ndef analyze_transactions(transactions):\n  transactions.sort()\n  largest_withdrawal = transactions[0]\n  largest_deposit = transactions[-1]\n  print(f\"Largest withdrawals: {largest_withdrawal}\")\n  print(f\"Largest deposit: {largest_deposit}\")\n\nanalyze_transactions(data)"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Lesson #2",
            "id": 129531,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Calculons quelques métriques supplémentaires. Commençons par analyser les dépôts plus en détail.\n\n1. À l'intérieur de la fonction `analyze_transactions`, filtre tous les éléments positifs de la liste `transactions` passée pour obtenir les dépôts comme nous l'avons fait dans la fonction `print_summary`.\n2. Utilise la fonction `sum` sur la liste des dépôts et enregistre le résultat dans une variable appelée `total_deposit`.\n3. Pour obtenir la valeur moyenne des dépôts, divise le montant total des dépôts par le nombre de dépôts.\n4. Assure-toi que la moyenne est `0` s'il n'existe aucun dépôt.\n5. Imprime la moyenne des dépôts.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "data = [\n  (749.17, \"Investment Return\"),\n  (-11.54, \"Utilities\"),\n  (-247.58, \"Online Shopping\"),\n  (981.17, \"Investment Return\"),\n  (-410.65, \"Rent\"),\n  (310.60, \"Rent\"),\n  (563.70, \"Gift\"),\n  (220.79, \"Salary\"),\n  (-49.85, \"Car Maintenance\"),\n  (308.49, \"Salary\"),\n  (-205.55, \"Car Maintenance\"),\n  (870.64, \"Salary\"),\n  (-881.51, \"Utilities\"),\n  (518.14, \"Salary\"),\n  (-264.66, \"Groceries\")\n]\n\ndef print_transactions(transactions):\n  for transaction in transactions:\n    amount, statement = transaction\n    print(f\"${amount} - {statement}\")\n\nprint_transactions(data)\n\ndef print_summary(transactions):\n  deposits = [transaction[0] for transaction in transactions if transaction[0] >= 0]\n  total_deposited = sum(deposits)\n  print(total_deposited)\n  withdrawals = [transaction[0] for transaction in transactions if transaction[0] < 0]\n  total_withdrawn = sum(withdrawals)\n  print(total_withdrawn)\n  balance = total_deposited + total_withdrawn\n  print(f\"Balance: {balance}\")\n\nprint_summary(data)\n\ndef analyze_transactions(transactions):\n  transactions.sort()\n  largest_withdrawal = transactions[0]\n  largest_deposit = transactions[-1]\n  print(f\"Largest witdrawals: {largest_withdrawal}\")\n  print(f\"Largest deposit: {largest_deposit}\")\n\nanalyze_transactions(data)",
                  "solvedContent": "data = [\n  (749.17, \"Investment Return\"),\n  (-11.54, \"Utilities\"),\n  (-247.58, \"Online Shopping\"),\n  (981.17, \"Investment Return\"),\n  (-410.65, \"Rent\"),\n  (310.60, \"Rent\"),\n  (563.70, \"Gift\"),\n  (220.79, \"Salary\"),\n  (-49.85, \"Car Maintenance\"),\n  (308.49, \"Salary\"),\n  (-205.55, \"Car Maintenance\"),\n  (870.64, \"Salary\"),\n  (-881.51, \"Utilities\"),\n  (518.14, \"Salary\"),\n  (-264.66, \"Groceries\")\n]\n\ndef print_transactions(transactions):\n  for transaction in transactions:\n    amount, statement = transaction\n    print(f\"${amount} - {statement}\")\n\nprint_transactions(data)\n\ndef print_summary(transactions):\n  deposits = [transaction[0] for transaction in transactions if transaction[0] >= 0]\n  total_deposited = sum(deposits)\n  print(total_deposited)\n  withdrawals = [transaction[0] for transaction in transactions if transaction[0] < 0]\n  total_withdrawn = sum(withdrawals)\n  print(total_withdrawn)\n  balance = total_deposited + total_withdrawn\n  print(f\"Balance: {balance}\")\n\nprint_summary(data)\n\ndef analyze_transactions(transactions):\n  transactions.sort()\n  largest_withdrawal = transactions[0]\n  largest_deposit = transactions[-1]\n  print(f\"Largest witdrawals: {largest_withdrawal}\")\n  print(f\"Largest deposit: {largest_deposit}\")\n\n  deposits = [transaction[0] for transaction in transactions if transaction[0] >= 0]\n  total_deposit = sum(deposits)\n  average_deposit = total_deposit / len(deposits) if deposits else 0\n  print(f\"Average deposit: {average_deposit}\")\n\nanalyze_transactions(data)"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Lesson #3",
            "id": 129532,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Calculons également la moyenne des retraits.\n\n1. À l'intérieur de la fonction `analyze_transactions`, filtre tous les éléments négatifs de la liste passée `withdrawals` pour obtenir les retraits.\n2. Utilise la fonction `sum` sur la liste des retraits et enregistre le résultat dans une variable appelée `total_withdrawals`.\n3. Calcule le montant moyen des retraits. Pour cela, divise le montant total des retraits par le nombre de retraits. S'il n'y a pas de retraits, alors la moyenne doit être `0`.\n4. Imprime la moyenne des retraits.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "data = [\n  (749.17, \"Investment Return\"),\n  (-11.54, \"Utilities\"),\n  (-247.58, \"Online Shopping\"),\n  (981.17, \"Investment Return\"),\n  (-410.65, \"Rent\"),\n  (310.60, \"Rent\"),\n  (563.70, \"Gift\"),\n  (220.79, \"Salary\"),\n  (-49.85, \"Car Maintenance\"),\n  (308.49, \"Salary\"),\n  (-205.55, \"Car Maintenance\"),\n  (870.64, \"Salary\"),\n  (-881.51, \"Utilities\"),\n  (518.14, \"Salary\"),\n  (-264.66, \"Groceries\")\n]\n\ndef print_transactions(transactions):\n  for transaction in transactions:\n    amount, statement = transaction\n    print(f\"${amount} - {statement}\")\n\nprint_transactions(data)\n\ndef print_summary(transactions):\n  deposits = [transaction[0] for transaction in transactions if transaction[0] >= 0]\n  total_deposited = sum(deposits)\n  print(total_deposited)\n  withdrawals = [transaction[0] for transaction in transactions if transaction[0] < 0]\n  total_withdrawn = sum(withdrawals)\n  print(total_withdrawn)\n  balance = total_deposited + total_withdrawn\n  print(f\"Balance: {balance}\")\n\nprint_summary(data)\n\ndef analyze_transactions(transactions):\n  transactions.sort()\n  largest_withdrawal = transactions[0]\n  largest_deposit = transactions[-1]\n  print(f\"Largest witdrawals: {largest_withdrawal}\")\n  print(f\"Largest deposit: {largest_deposit}\")\n\n  deposits = [transaction[0] for transaction in transactions if transaction[0] >= 0]\n  total_deposit = sum(deposits)\n  average_deposit = total_deposit / len(deposits) if deposits else 0\n  print(f\"Average deposit: {average_deposit}\")\n\nanalyze_transactions(data)",
                  "solvedContent": "data = [\n  (749.17, \"Investment Return\"),\n  (-11.54, \"Utilities\"),\n  (-247.58, \"Online Shopping\"),\n  (981.17, \"Investment Return\"),\n  (-410.65, \"Rent\"),\n  (310.60, \"Rent\"),\n  (563.70, \"Gift\"),\n  (220.79, \"Salary\"),\n  (-49.85, \"Car Maintenance\"),\n  (308.49, \"Salary\"),\n  (-205.55, \"Car Maintenance\"),\n  (870.64, \"Salary\"),\n  (-881.51, \"Utilities\"),\n  (518.14, \"Salary\"),\n  (-264.66, \"Groceries\")\n]\n\ndef print_transactions(transactions):\n  for transaction in transactions:\n    amount, statement = transaction\n    print(f\"${amount} - {statement}\")\n\nprint_transactions(data)\n\ndef print_summary(transactions):\n  deposits = [transaction[0] for transaction in transactions if transaction[0] >= 0]\n  total_deposited = sum(deposits)\n  print(total_deposited)\n  withdrawals = [transaction[0] for transaction in transactions if transaction[0] < 0]\n  total_withdrawn = sum(withdrawals)\n  print(total_withdrawn)\n  balance = total_deposited + total_withdrawn\n  print(f\"Balance: {balance}\")\n\nprint_summary(data)\n\ndef analyze_transactions(transactions):\n  transactions.sort()\n  largest_withdrawal = transactions[0]\n  largest_deposit = transactions[-1]\n  print(f\"Largest witdrawals: {largest_withdrawal}\")\n  print(f\"Largest deposit: {largest_deposit}\")\n\n  deposits = [transaction[0] for transaction in transactions if transaction[0] >= 0]\n  total_deposit = sum(deposits)\n  average_deposit = total_deposit / len(deposits) if deposits else 0\n  print(f\"Average deposit: {average_deposit}\")\n\n  withdrawals = [transaction[0] for transaction in transactions if transaction[0] < 0]\n  total_withdrawal = sum(withdrawals)\n  average_withdrawal = total_withdrawal / len(withdrawals) if withdrawals else 0\n  print(f\"Average witdrawal: {average_withdrawal}\")\n\nanalyze_transactions(data)"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Lesson #4",
            "id": 129533,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Enfin, nous allons offrir aux utilisateurs des options pour soit imprimer un relevé résumé, soit obtenir une analyse des transactions.\n\n1. Supprime toutes les appels de fonction pour éviter d'appeler une fonction que l'utilisateur ne souhaite pas appeler.\n2. Crée une boucle `while True:`. À l'intérieur de la boucle, donne à l'utilisateur l'option de taper soit `\"print\"`, `\"analyze\"`, ou `\"stop\"`. Utilise des instructions `print` pour afficher les options.\n3. Récupère l'entrée de l'utilisateur et enregistre-la dans une variable appelée `choice`.\n4. Si `choice` contient la valeur `\"print\"`, appelle la fonction `print_summary`.\n5. Si `choice` contient la valeur `\"analyze\"`, appelle la fonction `analyze_transactions`.\n6. Si `choice` contient la valeur `\"stop\"`, arrête la boucle `while` en appelant `break`.\n7. Sinon, imprime `\"Invalid choice\"`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "data = [\n  (749.17, \"Investment Return\"),\n  (-11.54, \"Utilities\"),\n  (-247.58, \"Online Shopping\"),\n  (981.17, \"Investment Return\"),\n  (-410.65, \"Rent\"),\n  (310.60, \"Rent\"),\n  (563.70, \"Gift\"),\n  (220.79, \"Salary\"),\n  (-49.85, \"Car Maintenance\"),\n  (308.49, \"Salary\"),\n  (-205.55, \"Car Maintenance\"),\n  (870.64, \"Salary\"),\n  (-881.51, \"Utilities\"),\n  (518.14, \"Salary\"),\n  (-264.66, \"Groceries\")\n]\n\ndef print_transactions(transactions):\n  for transaction in transactions:\n    amount, statement = transaction\n    print(f\"${amount} - {statement}\")\n\nprint_transactions(data)\n\ndef print_summary(transactions):\n  deposits = [transaction[0] for transaction in transactions if transaction[0] >= 0]\n  total_deposited = sum(deposits)\n  print(total_deposited)\n  withdrawals = [transaction[0] for transaction in transactions if transaction[0] < 0]\n  total_withdrawn = sum(withdrawals)\n  print(total_withdrawn)\n  balance = total_deposited + total_withdrawn\n  print(f\"Balance: {balance}\")\n\nprint_summary(data)\n\ndef analyze_transactions(transactions):\n  transactions.sort()\n  largest_withdrawal = transactions[0]\n  largest_deposit = transactions[-1]\n  print(f\"Largest witdrawals: {largest_withdrawal}\")\n  print(f\"Largest deposit: {largest_deposit}\")\n\n  deposits = [transaction[0] for transaction in transactions if transaction[0] >= 0]\n  total_deposit = sum(deposits)\n  average_deposit = total_deposit / len(deposits) if deposits else 0\n  print(f\"Average deposit: {average_deposit}\")\n\n  withdrawals = [transaction[0] for transaction in transactions if transaction[0] < 0]\n  total_withdrawal = sum(withdrawals)\n  average_withdrawal = total_withdrawal / len(withdrawals) if withdrawals else 0\n  print(f\"Average witdrawal: {average_withdrawal}\")\n\nanalyze_transactions(data)",
                  "solvedContent": "data = [\n  (749.17, \"Investment Return\"),\n  (-11.54, \"Utilities\"),\n  (-247.58, \"Online Shopping\"),\n  (981.17, \"Investment Return\"),\n  (-410.65, \"Rent\"),\n  (310.60, \"Rent\"),\n  (563.70, \"Gift\"),\n  (220.79, \"Salary\"),\n  (-49.85, \"Car Maintenance\"),\n  (308.49, \"Salary\"),\n  (-205.55, \"Car Maintenance\"),\n  (870.64, \"Salary\"),\n  (-881.51, \"Utilities\"),\n  (518.14, \"Salary\"),\n  (-264.66, \"Groceries\")\n]\n\ndef print_transactions(transactions):\n  for transaction in transactions:\n    amount, statement = transaction\n    print(f\"${amount} - {statement}\")\n\nprint_transactions(data)\n\ndef print_summary(transactions):\n  deposits = [transaction[0] for transaction in transactions if transaction[0] >= 0]\n  total_deposited = sum(deposits)\n  print(total_deposited)\n  withdrawals = [transaction[0] for transaction in transactions if transaction[0] < 0]\n  total_withdrawn = sum(withdrawals)\n  print(total_withdrawn)\n  balance = total_deposited + total_withdrawn\n  print(f\"Balance: {balance}\")\n\nprint_summary(data)\n\ndef analyze_transactions(transactions):\n  transactions.sort()\n  largest_withdrawal = transactions[0]\n  largest_deposit = transactions[-1]\n  print(f\"Largest witdrawals: {largest_withdrawal}\")\n  print(f\"Largest deposit: {largest_deposit}\")\n\n  deposits = [transaction[0] for transaction in transactions if transaction[0] >= 0]\n  total_deposit = sum(deposits)\n  average_deposit = total_deposit / len(deposits) if deposits else 0\n  print(f\"Average deposit: {average_deposit}\")\n\n  withdrawals = [transaction[0] for transaction in transactions if transaction[0] < 0]\n  total_withdrawal = sum(withdrawals)\n  average_withdrawal = total_withdrawal / len(withdrawals) if withdrawals else 0\n  print(f\"Average witdrawal: {average_withdrawal}\")\n\nanalyze_transactions(data)\n\nprint(\"\\nTransaction Analyzer\")\nwhile True:\n  print(\"\\nChoose an option:\")\n  print(\"1. Print summary (type 'print')\")\n  print(\"2. Analyze transactions (type 'analyze')\")\n  print(\"3. Stop program (type 'stop')\")\n  choice = input(\"Enter your option: \")\n  if choice.lower() == \"print\":\n    print_summary(data)\n  elif choice.lower() == \"analyze\":\n    analyze_transactions(data)\n  elif choice.lower() == \"stop\":\n    break\n  else:\n    print(\"Invalid choice\")"
                }
              ],
              "hints": []
            }
          }
        ]
      }
    ]
  }
}