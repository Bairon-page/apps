{
  "tutorial": {
    "id": 2655,
    "version": 4,
    "type": "challenges",
    "isNew": false,
    "codeLanguage": "python",
    "title": "Programmation orientée objet",
    "descriptionContent": "Défis basés sur la programmation orientée objet",
    "shortDescriptionContent": "",
    "showInTrack": true,
    "iconBanner": null,
    "chapters": [
      {
        "id": 14688,
        "title": "Limite d'âge pour les manèges de foire",
        "type": "challengeLevel0",
        "lessons": [
          {
            "title": "Fair Ride Age Limit",
            "id": 129716,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "En tant que bénévole à un festival, tu suis les manèges en cours d'installation. Nous avons une classe nommée `Ride` qui stocke le nom du manège et le groupe d'âge approprié. Utilise des instances de cette classe pour suivre les manèges installés aujourd'hui.\n\n1. Crée une nouvelle instance de la classe `Ride` nommée `roller_coaster` et spécifie que son nom est `Roller coaster` et qu'il s'agit d'un manège pour `adults`.\n2. Crée une nouvelle instance de la classe `Ride` nommée `ferris_wheel` et spécifie que son nom est `Ferris wheel` et qu'il s'agit d'un manège pour `kids`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "class Ride:\r\n    def __init__(self, name, age_group):\r\n        self.name = name\r\n        self.age_group = age_group\r\n\r\n\r\nprint(roller_coaster.age_group)\r\nprint(ferris_wheel.name)",
                  "solvedContent": "class Ride:\r\n    def __init__(self, name, age_group):\r\n        self.name = name\r\n        self.age_group = age_group\r\nroller_coaster = Ride(\"Roller coaster\", \"adults\")\r\nferris_wheel = Ride(\"Ferris wheel\", \"kids\")\r\nprint(roller_coaster.age_group)\r\nprint(ferris_wheel.name)"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 14689,
        "title": "Menu des boissons du café",
        "type": "challengeLevel0",
        "lessons": [
          {
            "title": "Cafe Drink Menu",
            "id": 129717,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Il y a un café à proximité qui propose une nouvelle variété de boissons chaque jour. Nous avons une classe `Beverage` et deux instances : `fruity` et `cocoa`. Découvre ce qu'il y a dans les boissons d'aujourd'hui.\n\n1. Accède à la propriété `name` de la boisson `fruity` et affiche-la dans la console.\n2. Accède à la propriété `is_alcoholic` de la boisson `cocoa` et affiche-la dans la console.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "class Beverage:\r\n    def __init__(self, name, is_alcoholic):\r\n        self.name = name\r\n        self.is_alcoholic = is_alcoholic\r\n\r\nfruity = Beverage(\"Fruit punch\", False)\r\ncocoa = Beverage(\"Hot chocolate\", False)",
                  "solvedContent": "class Beverage:\r\n    def __init__(self, name, is_alcoholic):\r\n        self.name = name\r\n        self.is_alcoholic = is_alcoholic\r\n\r\nfruity = Beverage(\"Fruit punch\", False)\r\ncocoa = Beverage(\"Hot chocolate\", False)\r\nprint(fruity.name)\r\nprint(cocoa.is_alcoholic)"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 14690,
        "title": "Détails de l'animal de compagnie",
        "type": "challengeLevel0",
        "lessons": [
          {
            "title": "Pet Details",
            "id": 129718,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Tu es un amoureux des animaux et tu as différents animaux de compagnie à la maison. Ton frère ou ta sœur te rend visite et il ou elle ne se souvient pas des noms de tes animaux. Complète la classe `Pet` pour aider ton frère ou ta sœur à associer le nom d'un animal à ses propriétés, comme sa famille ou sa couleur.\n\n1. Dans la classe `Pet`, crée des variables d'instance `name`, `family`, `animal_type`, et `color` pour stocker les informations spécifiques reçues dans les paramètres.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "class Pet:\r\n    def __init__(self, name, family, animal_type, color):\r\n        \r\n        \r\nrio = Pet(\"Rio\", \"Macaw\", \"Parrot\", \"Blue\")\r\ncoco = Pet(\"Coco\", \"Poodle\", \"Dog\", \"White\")\r\nbud = Pet(\"Bud\", \"Labrador\", \"Dog\", \"Brown\")\r\ndaisy = Pet(\"Daisy\", \"Burmese\", \"Cat\", \"Grey\")\r\nprint(f\"{rio.name} is a {rio.color} colored {rio.family} {rio.animal_type}\")",
                  "solvedContent": "class Pet:\r\n    def __init__(self, name, family, animal_type, color):\r\n        self.name = name\r\n        self.family = family\r\n        self.animal_type = animal_type\r\n        self.color = color\r\n\r\nrio = Pet(\"Rio\", \"Macaw\", \"Parrot\", \"Blue\")\r\ncoco = Pet(\"Coco\", \"Poodle\", \"Dog\", \"White\")\r\nbud = Pet(\"Bud\", \"Labrador\", \"Dog\", \"Brown\")\r\ndaisy = Pet(\"Daisy\", \"Burmese\", \"Cat\", \"Grey\")\r\nprint(f\"{rio.name} is a {rio.color} colored {rio.family} {rio.animal_type}\")"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 14692,
        "title": "Instructions pour l'ascenseur",
        "type": "challengeLevel0",
        "lessons": [
          {
            "title": "Elevator Instructions",
            "id": 129720,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Cet ascenseur indique aux personnes qu'il se déplace, mais en réalité, il reste toujours au même étage.\n\n1. Mets à jour la propriété `current_floor` afin que l'ascenseur se déplace chaque fois qu'il est appelé à le faire.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "class Elevator:\r\n    def __init__(self):\r\n        self.current_floor = 0\r\n\r\n    def go_to_floor(self, floor):\r\n        if self.current_floor == floor:\r\n            print(f\"Elevator is in floor {floor}\")\r\n        else:\r\n            print(f\"Going to floor {floor}\")\r\n\r\nelevator = Elevator()\r\nelevator.go_to_floor(3)\r\nelevator.go_to_floor(3)",
                  "solvedContent": "class Elevator:\r\n    def __init__(self):\r\n        self.current_floor = 0\r\n\r\n    def go_to_floor(self, floor):\r\n        if self.current_floor == floor:\r\n            print(f\"Elevator is in floor {floor}\")\r\n        else:\r\n            print(f\"Going to floor {floor}\")\r\n            self.current_floor = floor\r\n\r\nelevator = Elevator()\r\nelevator.go_to_floor(3)\r\nelevator.go_to_floor(3)"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 14693,
        "title": "Machine à café",
        "type": "challengeLevel0",
        "lessons": [
          {
            "title": "Coffee Machine",
            "id": 129721,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Les machines à café peuvent préparer un nombre limité de types de café.\n\n1. Vérifie si le `coffee_type` est valide pour notre machine et stocke le résultat dans la variable `is_valid_coffee_type`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "class CoffeeMachine:\r\n    def __init__(self):\r\n        self.coffee_options = {\"Capuccino\", \"Espresso\"}\r\n        \r\n    def make_coffee(self, coffee_type):\r\n        is_valid_coffee_type = \r\n        if is_valid_coffee_type:\r\n            return f\"{coffee_type} made!\"\r\n        else:\r\n            return f\"{coffee_type} is not a valid option!\"\r\n\r\nmachine = CoffeeMachine()\r\nprint(machine.make_coffee(\"Espresso\"))\r\nprint(machine.make_coffee(\"Moka\"))",
                  "solvedContent": "class CoffeeMachine:\r\n    def __init__(self):\r\n        self.coffee_options = {\"Capuccino\", \"Espresso\"}\r\n        \r\n    def make_coffee(self, coffee_type):\r\n        is_valid_coffee_type = coffee_type in self.coffee_options\r\n        if is_valid_coffee_type:\r\n            return f\"{coffee_type} made!\"\r\n        else:\r\n            return f\"{coffee_type} is not a valid option!\"\r\n\r\nmachine = CoffeeMachine()\r\nprint(machine.make_coffee(\"Espresso\"))\r\nprint(machine.make_coffee(\"Moka\"))"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 14694,
        "title": "Châteaux",
        "type": "challengeLevel0",
        "lessons": [
          {
            "title": "Castles",
            "id": 129722,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Les châteaux peuvent être construits à partir de différents matériaux, aide-nous à décrire la classe `WoodCastle`.\n\n1. Crée la méthode appropriée pour décrire `WoodCastle`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "class Castle:\r\n    def description(self):\r\n        return \"This is a generic castle.\"\r\n\r\nclass StoneCastle(Castle):\r\n    def description(self):\r\n        return \"This is a stone castle.\"\r\n\r\nclass WoodCastle(Castle):\r\n\r\nstone_castle = StoneCastle()\r\nstone_castle_description = stone_castle.description()\r\nprint(stone_castle_description)\r\n\r\nwood_castle = WoodCastle()\r\nwood_castle_description = wood_castle.description()\r\nprint(wood_castle_description)\r\n",
                  "solvedContent": "class Castle:\r\n    def description(self):\r\n        return \"This is a generic castle.\"\r\n\r\nclass StoneCastle(Castle):\r\n    def description(self):\r\n        return \"This is a stone castle.\"\r\n\r\nclass WoodCastle(Castle):\r\n    def description(self):\r\n        return \"This is a wood castle\"\r\n\r\nstone_castle = StoneCastle()\r\nstone_castle_description = stone_castle.description()\r\nprint(stone_castle_description)\r\n\r\nwood_castle = WoodCastle()\r\nwood_castle_description = wood_castle.description()\r\nprint(wood_castle_description)\r\n"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 13903,
        "title": "Créer une méthode",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "Creating a method",
            "id": 123716,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Tu aimes voyager et tu explores de nouvelles destinations chaque année. Pour t'aider à rester organisé, tu as créé une classe `Destination` qui suit les détails de voyage pour chaque endroit que tu visites.\n\n1. Crée une méthode `detail` dans la classe `Destination` qui utilise toutes ses propriétés pour retourner les détails du voyage dans le format suivant :\n```\nTraveling to <country> by <mode> for 15 <number_of_days>\n```",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "class Destination:\r\n    def __init__(self, country, mode, number_of_days):\r\n        self.country = country\r\n        self.mode = mode\r\n        self.number_of_days = number_of_days\r\n        \r\n    \r\n        \r\ndestination_one = Destination(\"Italy\", \"plane\", 10)\r\ndestination_two = Destination(\"England\", \"plane\", 5)",
                  "solvedContent": "class Destination:\r\n    def __init__(self, country, mode, number_of_days):\r\n        self.country = country\r\n        self.mode = mode\r\n        self.number_of_days = number_of_days\r\n        \r\n    def detail(self):\r\n        return f\"Traveling to {self.country} by {self.mode} for {self.number_of_days} days\"\r\n\r\ndestination_one = Destination(\"Italy\", \"plane\", 10)\r\ndestination_two = Destination(\"England\", \"plane\", 5)"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 13904,
        "title": "Créer plusieurs méthodes",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "Creating multiple methods",
            "id": 123717,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Tu organises un atelier annuel pour les étudiants. Leurs données sont stockées dans une instance de classe avec la propriété `is_registered` initialement définie sur `False`. Crée deux méthodes dans la classe `Register` pour permettre aux étudiants de s'inscrire et d'annuler les inscriptions selon les besoins.\n\n1. Crée une méthode de classe `register_student` qui définit la propriété `is_registered` sur `True` et retourne `<name> is registered!`\n2. Crée une méthode de classe `cancel_registration` qui définit la propriété `is_registered` sur `False` et retourne un texte au format suivant :\n ```\n<name>'s registration canceled!\n```",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "class Register:\r\n def __init__(self, name, is_registered):\r\n  self.name = name\r\n  self.is_registered = is_registered\r\n\r\n\r\n\r\n\r\n\r\n\r\ntooba = Register(\"Tooba\", False)\r\nprint(tooba.register_student())\r\nprint(tooba.cancel_registration())",
                  "solvedContent": "class Register:\r\n def __init__(self, name, is_registered):\r\n  self.name = name\r\n  self.is_registered = is_registered\r\n     \r\n def register_student(self):\r\n  self.is_registered = True\r\n  return f\"{self.name} is registered!\"\r\n     \r\n def cancel_registration(self):\r\n  self.is_registered = False\r\n  return f\"{self.name}'s registration canceled!\"\r\ntooba = Register(\"Tooba\", False)\r\nprint(tooba.register_student())\r\nprint(tooba.cancel_registration())"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 13966,
        "title": "Classes et méthodes",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "Classes and methods",
            "id": 124062,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Il existe de nombreux types de bateaux. Chaque type différent a une manière différente de se préparer à naviguer, mais tous les bateaux ont une chose en commun. Le capitaine est le premier à se préparer à naviguer.\n\n1. Remplis la classe `Sailboat` qui stocke le nombre de voiles que le bateau possède et crée la méthode appropriée pour que le Sailboat puisse se préparer à naviguer ! Souviens-toi que la préparation de chaque bateau pour naviguer commence de la même manière ! Tu pourrais utiliser la classe `Rowboat` comme guide pour le défi.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "class Boat:\r\n    def __init__(self, captain):\r\n        self.captain = captain\r\n\r\n    def prepare_to_sail(self):\r\n        print(f\"Captain {self.captain} is preparing to sail!\")\r\n\r\nclass Rowboat(Boat):\r\n    def __init__(self, captain, row_amount):\r\n        self.captain = captain\r\n        self.row_amount = row_amount\r\n\r\n    def prepare_to_sail(self):\r\n        super().prepare_to_sail()\r\n        print(f\"Preparing {self.row_amount} rows!\")\r\n\r\nclass Sailboat(Boat):\r\n\r\nrowboat = Rowboat(captain=\"Hook\", row_amount=4)\r\nrowboat.prepare_to_sail()\r\n\r\nsailboat = Sailboat(captain=\"Jack Sparrow\", sail_amount=5)\r\nsailboat.prepare_to_sail()",
                  "solvedContent": "class Boat:\r\n    def __init__(self, captain):\r\n        self.captain = captain\r\n\r\n    def prepare_to_sail(self):\r\n        print(f\"Captain {self.captain} is preparing to sail!\")\r\n\r\nclass Rowboat(Boat):\r\n    def __init__(self, captain, row_amount):\r\n        self.captain = captain\r\n        self.row_amount = row_amount\r\n\r\n    def prepare_to_sail(self):\r\n        super().prepare_to_sail()\r\n        print(f\"Preparing {self.row_amount} rows!\")\r\n\r\nclass Sailboat(Boat):\r\n    def __init__(self, captain, sail_amount):\r\n        self.captain = captain\r\n        self.sail_amount = sail_amount\r\n    \r\n    def prepare_to_sail(self):\r\n        super().prepare_to_sail()\r\n        print(f\"Preparing {self.sail_amount} sails!\")\r\n\r\nrowboat = Rowboat(captain=\"Hook\", row_amount=4)\r\nrowboat.prepare_to_sail()\r\n\r\nsailboat = Sailboat(captain=\"Jack Sparrow\", sail_amount=5)\r\nsailboat.prepare_to_sail()"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 13965,
        "title": "Utilisation de self",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "Using self",
            "id": 124131,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Un groupe est une synergie captivante d'esprits musicaux, avec des individus talentueux maniant différents instruments, créant des harmonies qui enflamment nos âmes.\n\n1. Remplis les méthodes `add_musician` qui ajoute un musicien au groupe et `perform` qui informe tout le monde que le groupe commence à jouer. N'oublie pas que pour qu'un groupe commence une performance, chaque musicien appartenant au groupe doit jouer de son instrument correspondant !",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "class Musician:\r\n    def __init__(self, name, instrument):\r\n        self.name = name\r\n        self.instrument = instrument\r\n\r\n    def play_instrument(self):\r\n        print(f\"{self.name} is playing the {self.instrument}.\")\r\n\r\nclass Band:\r\n    def __init__(self, name):\r\n        self.name = name\r\n        self.musicians = []\r\n\r\n    def add_musician(self, musician):\r\n\r\n    def perform(self):\r\n        print(f\"{self.name} is starting the performance!\")\r\n\r\nguitarist = Musician(\"John\", \"guitar\")\r\ndrummer = Musician(\"Sarah\", \"drums\")\r\n\r\nband = Band(\"Baangtron\")\r\nband.add_musician(guitarist)\r\nband.add_musician(drummer)\r\n\r\nband.perform()",
                  "solvedContent": "class Musician:\r\n    def __init__(self, name, instrument):\r\n        self.name = name\r\n        self.instrument = instrument\r\n\r\n    def play_instrument(self):\r\n        print(f\"{self.name} is playing the {self.instrument}.\")\r\n\r\nclass Band:\r\n    def __init__(self, name):\r\n        self.name = name\r\n        self.musicians = []\r\n\r\n    def add_musician(self, musician):\r\n        self.musicians.append(musician)\r\n\r\n    def perform(self):\r\n        print(f\"{self.name} is starting the performance!\")\r\n        for musician in self.musicians:\r\n            musician.play_instrument()\r\n\r\nguitarist = Musician(\"John\", \"guitar\")\r\ndrummer = Musician(\"Sarah\", \"drums\")\r\n\r\nband = Band(\"Baangtron\")\r\nband.add_musician(guitarist)\r\nband.add_musician(drummer)\r\n\r\nband.perform()"
                }
              ],
              "hints": []
            }
          }
        ]
      }
    ]
  }
}