{
  "tutorial": {
    "id": 2893,
    "version": 2,
    "type": "guidedProject",
    "isNew": false,
    "codeLanguage": "node",
    "title": "Bibliothèque multimédia - Partie 2",
    "descriptionContent": "Dans la deuxième partie du projet, nous allons optimiser la structure de données pour la rendre évolutive.",
    "shortDescriptionContent": "",
    "showInTrack": true,
    "iconBanner": "tutorial-2893-icon-banner.svg",
    "chapters": [
      {
        "id": 14984,
        "title": "Chapitre #1",
        "type": "practiceLevel3",
        "lessons": [
          {
            "title": "Lesson #1",
            "id": 132109,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Bienvenue dans la deuxième partie du projet **Bibliothèque Multimédia**.\n\nIci, nous allons créer une classe pour les éléments multimédias au lieu d'ajouter directement les objets à notre bibliothèque. Nous commencerons par la classe `Movie`.\n\n1. Crée la classe `Movie` avec un constructeur qui prend `id`, `title` et `director` comme paramètres.\n2. À l'intérieur du constructeur, initialise les variables d'instance `id`, `title` et `director` avec les valeurs passées au constructeur.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "MediaItem.js",
                  "codeLanguage": "javascript",
                  "content": "",
                  "solvedContent": "class Movie {\n  constructor(id, title, director) {\n    this.id = id;\n    this.title = title;\n    this.director = director;\n  }\n}"
                },
                {
                  "name": "Library.js",
                  "codeLanguage": "javascript",
                  "content": "class Library {\n  constructor() {\n    this.movies = [{\n      id: 1,\n      title: 'Pulp Fiction',\n      director: 'Quentin Tarantino'\n    }, {\n      id: 2,\n      title: 'Inception',\n      director: 'Christopher Nolan'\n    }, {\n      id: 3,\n      title: 'The Matrix',\n      director: 'The Wachowskis'\n    }];\n  }\n  getAllMovies() {\n    return this.movies;\n  }\n  getMovieById(id) {\n    return this.movies.find(movie => movie.id === parseInt(id));\n  }\n}\nmodule.exports = new Library();",
                  "solvedContent": null
                },
                {
                  "name": "app.js",
                  "codeLanguage": "javascript",
                  "content": "const express = require('express');\nconst library = require('./Library');\n\nconst app = express();\nconst port = 3000;\n\napp.listen(port, function() {\n  console.log(`App is listening on port ${port}`);\n});\n\napp.get('/movies', (req, res) => {\n  res.status(200).json({\n   movies: library.getAllMovies()\n  });\n});\n\napp.get('/movies/:id', (req, res) => {\n  const id = req.params.id;\n  const movie = library.getMovieById(id);\n  if (movie) {\n    res.status(200).json(movie);\n  } else {\n    res.status(404).json({error: 'Movie not found'});\n  }\n});",
                  "solvedContent": null
                }
              ],
              "hints": [],
              "httpOptions": {
                "method": "GET",
                "path": "/movies",
                "body": null
              }
            }
          },
          {
            "title": "Lesson #2",
            "id": 132110,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Maintenant, ajoutons une méthode à l'intérieur de la classe `Movie` pour obtenir les détails du film.\n\n1. Ajoute une méthode `getDetails` à la classe `Movie` qui retourne une chaîne formatée avec le titre et le réalisateur du film.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "MediaItem.js",
                  "codeLanguage": "javascript",
                  "content": "class Movie {\n  constructor(id, title, director) {\n    this.id = id;\n    this.title = title;\n    this.director = director;\n  }\n}",
                  "solvedContent": "class Movie {\n  constructor(id, title, director) {\n    this.id = id;\n    this.title = title;\n    this.director = director;\n  }\n  getDetails() {\n    return `${this.title} directed by ${this.director}`;\n  }\n}"
                },
                {
                  "name": "Library.js",
                  "codeLanguage": "javascript",
                  "content": "class Library {\n  constructor() {\n    this.movies = [{\n      id: 1,\n      title: 'Pulp Fiction',\n      director: 'Quentin Tarantino'\n    }, {\n      id: 2,\n      title: 'Inception',\n      director: 'Christopher Nolan'\n    }, {\n      id: 3,\n      title: 'The Matrix',\n      director: 'The Wachowskis'\n    }];\n  }\n  getAllMovies() {\n    return this.movies;\n  }\n  getMovieById(id) {\n    return this.movies.find(movie => movie.id === parseInt(id));\n  }\n}\nmodule.exports = new Library();",
                  "solvedContent": null
                },
                {
                  "name": "app.js",
                  "codeLanguage": "javascript",
                  "content": "const express = require('express');\nconst library = require('./Library');\n\nconst app = express();\nconst port = 3000;\n\napp.listen(port, function() {\n  console.log(`App is listening on port ${port}`);\n});\n\napp.get('/movies', (req, res) => {\n  res.status(200).json({\n   movies: library.getAllMovies()\n  });\n});\n\napp.get('/movies/:id', (req, res) => {\n  const id = req.params.id;\n  const movie = library.getMovieById(id);\n  if (movie) {\n    res.status(200).json(movie);\n  } else {\n    res.status(404).json({error: 'Movie not found'});\n  }\n});",
                  "solvedContent": null
                }
              ],
              "hints": [],
              "httpOptions": {
                "method": "GET",
                "path": "/movies",
                "body": null
              }
            }
          },
          {
            "title": "Lesson #3",
            "id": 132111,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Dans de nombreuses bibliothèques multimédias, il est courant d'avoir des films qui font partie d'une franchise. Nous allons introduire une classe `FranchiseFilm` qui étend la classe `Movie`.\n\nUn film de franchise est fondamentalement un film qui fait partie d'une série plus large, il est donc logique que `FranchiseFilm` hérite de `Movie`. En plus des détails de base du film, un film de franchise a également des informations sur la franchise à laquelle il appartient, sa position dans la série, et le nombre total d'épisodes dans la série.\n\n1. Définis une nouvelle classe `FranchiseFilm` qui étend la classe `Movie`.\n2. Le constructeur de `FranchiseFilm` doit accepter des paramètres pour `id`, `title`, `director`, `franchiseName`, `installmentNumber`, et `totalInstallments`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "MediaItem.js",
                  "codeLanguage": "javascript",
                  "content": "class Movie {\n  constructor(id, title, director) {\n    this.id = id;\n    this.title = title;\n    this.director = director;\n  }\n  getDetails() {\n    return `${this.title} directed by ${this.director}`;\n  }\n}",
                  "solvedContent": "class Movie {\n  constructor(id, title, director) {\n    this.id = id;\n    this.title = title;\n    this.director = director;\n  }\n  getDetails() {\n    return `${this.title} directed by ${this.director}`;\n  }\n}\nclass FranchiseFilm extends Movie {\n  constructor(id, title, director, franchiseName, installmentNumber,\n    totalInstallments) {\n    super(id, title, director);\n    this.franchiseName = franchiseName;\n    this.installmentNumber = installmentNumber;\n    this.totalInstallments = totalInstallments;\n  }\n}"
                },
                {
                  "name": "Library.js",
                  "codeLanguage": "javascript",
                  "content": "class Library {\n  constructor() {\n    this.movies = [{\n      id: 1,\n      title: 'Pulp Fiction',\n      director: 'Quentin Tarantino'\n    }, {\n      id: 2,\n      title: 'Inception',\n      director: 'Christopher Nolan'\n    }, {\n      id: 3,\n      title: 'The Matrix',\n      director: 'The Wachowskis'\n    }];\n  }\n  getAllMovies() {\n    return this.movies;\n  }\n  getMovieById(id) {\n    return this.movies.find(movie => movie.id === parseInt(id));\n  }\n}\nmodule.exports = new Library();",
                  "solvedContent": null
                },
                {
                  "name": "app.js",
                  "codeLanguage": "javascript",
                  "content": "const express = require('express');\nconst library = require('./Library');\n\nconst app = express();\nconst port = 3000;\n\napp.listen(port, function() {\n  console.log(`App is listening on port ${port}`);\n});\n\napp.get('/movies', (req, res) => {\n  res.status(200).json({\n   movies: library.getAllMovies()\n  });\n});\n\napp.get('/movies/:id', (req, res) => {\n  const id = req.params.id;\n  const movie = library.getMovieById(id);\n  if (movie) {\n    res.status(200).json(movie);\n  } else {\n    res.status(404).json({error: 'Movie not found'});\n  }\n});",
                  "solvedContent": null
                }
              ],
              "hints": [],
              "httpOptions": {
                "method": "GET",
                "path": "/movies",
                "body": null
              }
            }
          },
          {
            "title": "Lesson #4",
            "id": 132112,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Enfin, ajoutons une méthode `getDetails` à la classe `FranchiseFilm`.\n\nCette méthode doit inclure les détails de base du film dans la sortie, et ajouter également des informations sur la franchise et la place du film dans la série.\n\n1. Ajoute une méthode `getDetails` à la classe `FranchiseFilm` qui utilise le mot-clé `super` pour inclure les détails de base du film retournés par la méthode `getDetails` de la classe `Movie`.\n2. Ajoute des informations sur la franchise dans la méthode `getDetails` de la sous-classe.\n   - Inclure la valeur de la variable `franchiseName` dans la chaîne retournée.\n   - Inclure la valeur de la variable `installmentNumber` dans la chaîne retournée.\n   - Inclure la valeur de la variable `totalInstallments` dans la chaîne retournée.\n3. Retourne une chaîne qui contient toutes ces informations dans la méthode `getDetails`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "MediaItem.js",
                  "codeLanguage": "javascript",
                  "content": "class Movie {\n  constructor(id, title, director) {\n    this.id = id;\n    this.title = title;\n    this.director = director;\n  }\n  getDetails() {\n    return `${this.title} directed by ${this.director}`;\n  }\n}\nclass FranchiseFilm extends Movie {\n  constructor(id, title, director, franchiseName, installmentNumber,\n    totalInstallments) {\n    super(id, title, director);\n    this.franchiseName = franchiseName;\n    this.installmentNumber = installmentNumber;\n    this.totalInstallments = totalInstallments;\n  }\n}",
                  "solvedContent": "class Movie {\n  constructor(id, title, director) {\n    this.id = id;\n    this.title = title;\n    this.director = director;\n  }\n  getDetails() {\n    return `${this.title} directed by ${this.director}`;\n  }\n}\nclass FranchiseFilm extends Movie {\n  constructor(id, title, director, franchiseName, installmentNumber,\n    totalInstallments) {\n    super(id, title, director);\n    this.franchiseName = franchiseName;\n    this.installmentNumber = installmentNumber;\n    this.totalInstallments = totalInstallments;\n  }\n  getDetails() {\n    return `${this.franchiseName} - Installment ${this.installmentNumber} of ${this.totalInstallments}: ${super.getDetails()}`;\n  }\n}"
                },
                {
                  "name": "Library.js",
                  "codeLanguage": "javascript",
                  "content": "class Library {\n  constructor() {\n    this.movies = [{\n      id: 1,\n      title: 'Pulp Fiction',\n      director: 'Quentin Tarantino'\n    }, {\n      id: 2,\n      title: 'Inception',\n      director: 'Christopher Nolan'\n    }, {\n      id: 3,\n      title: 'The Matrix',\n      director: 'The Wachowskis'\n    }];\n  }\n  getAllMovies() {\n    return this.movies;\n  }\n  getMovieById(id) {\n    return this.movies.find(movie => movie.id === parseInt(id));\n  }\n}\nmodule.exports = new Library();",
                  "solvedContent": null
                },
                {
                  "name": "app.js",
                  "codeLanguage": "javascript",
                  "content": "const express = require('express');\nconst library = require('./Library');\n\nconst app = express();\nconst port = 3000;\n\napp.listen(port, function() {\n  console.log(`App is listening on port ${port}`);\n});\n\napp.get('/movies', (req, res) => {\n  res.status(200).json({\n   movies: library.getAllMovies()\n  });\n});\n\napp.get('/movies/:id', (req, res) => {\n  const id = req.params.id;\n  const movie = library.getMovieById(id);\n  if (movie) {\n    res.status(200).json(movie);\n  } else {\n    res.status(404).json({error: 'Movie not found'});\n  }\n});",
                  "solvedContent": null
                }
              ],
              "hints": [],
              "httpOptions": {
                "method": "GET",
                "path": "/movies",
                "body": null
              }
            }
          },
          {
            "title": "Lesson #5",
            "id": 132113,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Nous allons utiliser le mot-clé `module.exports` pour exporter les deux classes afin qu'elles puissent être importées dans d'autres fichiers.\n\n1. À la fin du fichier `MediaItem.js`, ajoute une ligne pour exporter les deux classes en tant qu'objet avec les propriétés `Movie` et `FranchiseFilm`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "MediaItem.js",
                  "codeLanguage": "javascript",
                  "content": "class Movie {\n  constructor(id, title, director) {\n    this.id = id;\n    this.title = title;\n    this.director = director;\n  }\n  getDetails() {\n    return `${this.title} directed by ${this.director}`;\n  }\n}\nclass FranchiseFilm extends Movie {\n  constructor(id, title, director, franchiseName, installmentNumber,\n    totalInstallments) {\n    super(id, title, director);\n    this.franchiseName = franchiseName;\n    this.installmentNumber = installmentNumber;\n    this.totalInstallments = totalInstallments;\n  }\n  getDetails() {\n    return `${this.franchiseName} - Installment ${this.installmentNumber} of ${this.totalInstallments}: ${super.getDetails()}`;\n  }\n}",
                  "solvedContent": "class Movie {\n  constructor(id, title, director) {\n    this.id = id;\n    this.title = title;\n    this.director = director;\n  }\n  getDetails() {\n    return `${this.title} directed by ${this.director}`;\n  }\n}\nclass FranchiseFilm extends Movie {\n  constructor(id, title, director, franchiseName, installmentNumber,\n    totalInstallments) {\n    super(id, title, director);\n    this.franchiseName = franchiseName;\n    this.installmentNumber = installmentNumber;\n    this.totalInstallments = totalInstallments;\n  }\n  getDetails() {\n    return `${this.franchiseName} - Installment ${this.installmentNumber} of ${this.totalInstallments}: ${super.getDetails()}`;\n  }\n}\nmodule.exports = {\n  Movie,\n  FranchiseFilm\n};"
                },
                {
                  "name": "Library.js",
                  "codeLanguage": "javascript",
                  "content": "class Library {\n  constructor() {\n    this.movies = [{\n      id: 1,\n      title: 'Pulp Fiction',\n      director: 'Quentin Tarantino'\n    }, {\n      id: 2,\n      title: 'Inception',\n      director: 'Christopher Nolan'\n    }, {\n      id: 3,\n      title: 'The Matrix',\n      director: 'The Wachowskis'\n    }];\n  }\n  getAllMovies() {\n    return this.movies;\n  }\n  getMovieById(id) {\n    return this.movies.find(movie => movie.id === parseInt(id));\n  }\n}\nmodule.exports = new Library();",
                  "solvedContent": null
                },
                {
                  "name": "app.js",
                  "codeLanguage": "javascript",
                  "content": "const express = require('express');\nconst library = require('./Library');\n\nconst app = express();\nconst port = 3000;\n\napp.listen(port, function() {\n  console.log(`App is listening on port ${port}`);\n});\n\napp.get('/movies', (req, res) => {\n  res.status(200).json({\n   movies: library.getAllMovies()\n  });\n});\n\napp.get('/movies/:id', (req, res) => {\n  const id = req.params.id;\n  const movie = library.getMovieById(id);\n  if (movie) {\n    res.status(200).json(movie);\n  } else {\n    res.status(404).json({error: 'Movie not found'});\n  }\n});",
                  "solvedContent": null
                }
              ],
              "hints": [],
              "httpOptions": {
                "method": "GET",
                "path": "/movies",
                "body": null
              }
            }
          },
          {
            "title": "Lesson #6",
            "id": 132114,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Maintenant, nous allons mettre à jour notre classe `Library` pour utiliser ces nouvelles classes.\n\n1. En haut du fichier `Library.js`, crée deux nouvelles variables, `Movie` et `FranchiseFilm`, et assigne-leur les valeurs importées du fichier `MediaItem.js` en utilisant `require`.",
              "preselectedFileIndex": 1,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "MediaItem.js",
                  "codeLanguage": "javascript",
                  "content": "class Movie {\n  constructor(id, title, director) {\n    this.id = id;\n    this.title = title;\n    this.director = director;\n  }\n  getDetails() {\n    return `${this.title} directed by ${this.director}`;\n  }\n}\nclass FranchiseFilm extends Movie {\n  constructor(id, title, director, franchiseName, installmentNumber,\n    totalInstallments) {\n    super(id, title, director);\n    this.franchiseName = franchiseName;\n    this.installmentNumber = installmentNumber;\n    this.totalInstallments = totalInstallments;\n  }\n  getDetails() {\n    return `${this.franchiseName} - Installment ${this.installmentNumber} of ${this.totalInstallments}: ${super.getDetails()}`;\n  }\n}\nmodule.exports = {\n  Movie,\n  FranchiseFilm\n};",
                  "solvedContent": null
                },
                {
                  "name": "Library.js",
                  "codeLanguage": "javascript",
                  "content": "class Library {\n  constructor() {\n    this.movies = [{\n      id: 1,\n      title: 'Pulp Fiction',\n      director: 'Quentin Tarantino'\n    }, {\n      id: 2,\n      title: 'Inception',\n      director: 'Christopher Nolan'\n    }, {\n      id: 3,\n      title: 'The Matrix',\n      director: 'The Wachowskis'\n    }];\n  }\n  getAllMovies() {\n    return this.movies;\n  }\n  getMovieById(id) {\n    return this.movies.find(movie => movie.id === parseInt(id));\n  }\n}\nmodule.exports = new Library();",
                  "solvedContent": "const {\n  Movie,\n  FranchiseFilm\n} = require('./MediaItem');\nclass Library {\n  constructor() {\n    this.movies = [{\n      id: 1,\n      title: 'Pulp Fiction',\n      director: 'Quentin Tarantino'\n    }, {\n      id: 2,\n      title: 'Inception',\n      director: 'Christopher Nolan'\n    }, {\n      id: 3,\n      title: 'The Matrix',\n      director: 'The Wachowskis'\n    }];\n  }\n  getAllMovies() {\n    return this.movies;\n  }\n  getMovieById(id) {\n    return this.movies.find(movie => movie.id === parseInt(id));\n  }\n}\nmodule.exports = new Library();"
                },
                {
                  "name": "app.js",
                  "codeLanguage": "javascript",
                  "content": "const express = require('express');\nconst library = require('./Library');\n\nconst app = express();\nconst port = 3000;\n\napp.listen(port, function() {\n  console.log(`App is listening on port ${port}`);\n});\n\napp.get('/movies', (req, res) => {\n  res.status(200).json({\n   movies: library.getAllMovies()\n  });\n});\n\napp.get('/movies/:id', (req, res) => {\n  const id = req.params.id;\n  const movie = library.getMovieById(id);\n  if (movie) {\n    res.status(200).json(movie);\n  } else {\n    res.status(404).json({error: 'Movie not found'});\n  }\n});",
                  "solvedContent": null
                }
              ],
              "hints": [],
              "httpOptions": {
                "method": "GET",
                "path": "/movies",
                "body": null
              }
            }
          },
          {
            "title": "Lesson #7",
            "id": 132115,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Ensuite, utilisons les classes nouvellement importées pour créer des instances de films et de films de franchise au lieu d'objets simples.\n\n1. Dans le constructeur de la `Library`, remplace les objets à l'intérieur du tableau `movies` par des instances des classes `Movie` et `FranchiseFilm`.\n2. Utilise le mot-clé `new` avec le nom de la classe pour créer de nouvelles instances. Fournis les arguments appropriés en fonction des constructeurs des classes `Movie` et `FranchiseFilm`. Les données `id`, `title` et `director` pour chaque film sont les mêmes qu'auparavant.\n3. Ajoute au moins 3 films et 3 films de franchise.\n\nN'hésite pas à utiliser les films suivants si tu ne veux pas ajouter tes propres idées :\n```JavaScript\n[\nnew Movie(1, 'Pulp Fiction', 'Quentin Tarantino'),\nnew Movie(2, 'Inception', 'Christopher Nolan'),\nnew Movie(3, 'The Matrix', 'The Wachowskis'),\nnew FranchiseFilm(4, 'The Fellowship of the Ring', 'Peter Jackson', 'The Lord of the Rings', 1, 3),\nnew FranchiseFilm(5, 'The Two Towers', 'Peter Jackson', 'The Lord of the Rings', 2, 3),\nnew FranchiseFilm(6, 'The Return of the King', 'Peter Jackson', 'The Lord of the Rings', 3, 3)\n]\n```",
              "preselectedFileIndex": 1,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "MediaItem.js",
                  "codeLanguage": "javascript",
                  "content": "class Movie {\n  constructor(id, title, director) {\n    this.id = id;\n    this.title = title;\n    this.director = director;\n  }\n  getDetails() {\n    return `${this.title} directed by ${this.director}`;\n  }\n}\nclass FranchiseFilm extends Movie {\n  constructor(id, title, director, franchiseName, installmentNumber,\n    totalInstallments) {\n    super(id, title, director);\n    this.franchiseName = franchiseName;\n    this.installmentNumber = installmentNumber;\n    this.totalInstallments = totalInstallments;\n  }\n  getDetails() {\n    return `${this.franchiseName} - Installment ${this.installmentNumber} of ${this.totalInstallments}: ${super.getDetails()}`;\n  }\n}\nmodule.exports = {\n  Movie,\n  FranchiseFilm\n};",
                  "solvedContent": null
                },
                {
                  "name": "Library.js",
                  "codeLanguage": "javascript",
                  "content": "const {\n  Movie,\n  FranchiseFilm\n} = require('./MediaItem');\nclass Library {\n  constructor() {\n    this.movies = [{\n      id: 1,\n      title: 'Pulp Fiction',\n      director: 'Quentin Tarantino'\n    }, {\n      id: 2,\n      title: 'Inception',\n      director: 'Christopher Nolan'\n    }, {\n      id: 3,\n      title: 'The Matrix',\n      director: 'The Wachowskis'\n    }];\n  }\n  getAllMovies() {\n    return this.movies;\n  }\n  getMovieById(id) {\n    return this.movies.find(movie => movie.id === parseInt(id));\n  }\n}\nmodule.exports = new Library();",
                  "solvedContent": "const {\n  Movie,\n  FranchiseFilm\n} = require('./MediaItem');\nclass Library {\n  constructor() {\n    this.movies = [\n      new Movie(1, 'Pulp Fiction', 'Quentin Tarantino'),\n      new Movie(2, 'Inception', 'Christopher Nolan'),\n      new Movie(3, 'The Matrix', 'The Wachowskis'),\n      new FranchiseFilm(4, 'The Fellowship of the Ring', 'Peter Jackson',\n        'The Lord of the Rings', 1, 3),\n      new FranchiseFilm(5, 'The Two Towers', 'Peter Jackson',\n        'The Lord of the Rings', 2, 3),\n      new FranchiseFilm(6, 'The Return of the King', 'Peter Jackson',\n        'The Lord of the Rings', 3, 3)\n    ];\n  }\n  getAllMovies() {\n    return this.movies;\n  }\n  getMovieById(id) {\n    return this.movies.find(movie => movie.id === parseInt(id));\n  }\n}\nmodule.exports = new Library();"
                },
                {
                  "name": "app.js",
                  "codeLanguage": "javascript",
                  "content": "const express = require('express');\nconst library = require('./Library');\n\nconst app = express();\nconst port = 3000;\n\napp.listen(port, function() {\n  console.log(`App is listening on port ${port}`);\n});\n\napp.get('/movies', (req, res) => {\n  res.status(200).json({\n   movies: library.getAllMovies()\n  });\n});\n\napp.get('/movies/:id', (req, res) => {\n  const id = req.params.id;\n  const movie = library.getMovieById(id);\n  if (movie) {\n    res.status(200).json(movie);\n  } else {\n    res.status(404).json({error: 'Movie not found'});\n  }\n});",
                  "solvedContent": null
                }
              ],
              "hints": [],
              "httpOptions": {
                "method": "GET",
                "path": "/movies",
                "body": null
              }
            }
          },
          {
            "title": "Lesson #8",
            "id": 132116,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Enfin, appliquons notre nouvelle méthode `getDetails` dans l'application Express.\n\nNous allons d'abord mettre à jour la route `/movies`.\n\n1. Dans la fonction de rappel pour la route `/movies`, convertis le tableau d'objets de films retourné par `getAllMovies` en un tableau de chaînes de détails de films avant de l'envoyer en réponse. Envoie le tableau comme valeur pour la clé `movies` dans le JSON. Tu peux y parvenir en utilisant soit la méthode map, soit une boucle pour parcourir le tableau.",
              "preselectedFileIndex": 2,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "MediaItem.js",
                  "codeLanguage": "javascript",
                  "content": "class Movie {\n    constructor(id, title, director) {\n        this.id = id;\n        this.title = title;\n        this.director = director;\n    }\n\n    getDetails() {\n        return `${this.title} directed by ${this.director}`;\n    }\n}\n\nclass FranchiseFilm extends Movie {\n    constructor(id, title, director, franchiseName, installmentNumber, totalInstallments) {\n        super(id, title, director);\n        this.franchiseName = franchiseName;\n        this.installmentNumber = installmentNumber;\n        this.totalInstallments = totalInstallments;\n    }\n\n    getDetails() {\n        return `${this.franchiseName} - Installment ${this.installmentNumber} of ${this.totalInstallments}: ${super.getDetails()}`;\n    }\n}\n\nmodule.exports = { Movie, FranchiseFilm };",
                  "solvedContent": null
                },
                {
                  "name": "Library.js",
                  "codeLanguage": "javascript",
                  "content": "const { Movie, FranchiseFilm } = require('./MediaItem');\n\nclass Library {\n    constructor() {\n        this.movies = [\n            new Movie(1, 'Pulp Fiction', 'Quentin Tarantino'),\n            new Movie(2, 'Inception', 'Christopher Nolan'),\n            new Movie(3, 'The Matrix', 'The Wachowskis'),\n            new FranchiseFilm(4, 'The Fellowship of the Ring', 'Peter Jackson', 'The Lord of the Rings', 1, 3),\n            new FranchiseFilm(5, 'The Two Towers', 'Peter Jackson', 'The Lord of the Rings', 2, 3),\n            new FranchiseFilm(6, 'The Return of the King', 'Peter Jackson', 'The Lord of the Rings', 3, 3)\n        ];\n    }\n\n    getAllMovies() {\n        return this.movies;\n    }\n\n    getMovieById(id) {\n        return this.movies.find(movie => movie.id === parseInt(id));\n    }\n}\n\nmodule.exports = new Library();",
                  "solvedContent": null
                },
                {
                  "name": "app.js",
                  "codeLanguage": "javascript",
                  "content": "const express = require('express');\nconst library = require('./Library');\n\nconst app = express();\nconst port = 3000;\n\napp.listen(port, function() {\n  console.log(`App is listening on port ${port}`);\n});\n\napp.get('/movies', (req, res) => {\n  res.status(200).json({\n   movies: library.getAllMovies()\n  });\n});\n\napp.get('/movies/:id', (req, res) => {\n  const id = req.params.id;\n  const movie = library.getMovieById(id);\n  if (movie) {\n    res.status(200).json(movie);\n  } else {\n    res.status(404).json({error: 'Movie not found'});\n  }\n});",
                  "solvedContent": "const express = require('express');\nconst library = require('./Library');\n\nconst app = express();\nconst port = 3000;\n\napp.listen(port, function() {\n  console.log(`App is listening on port ${port}`);\n});\n\napp.get('/movies', (req, res) => {\n const movies = library.getAllMovies().map(movie => movie.getDetails());\n  res.status(200).json({\n   movies: movies\n  });\n});\n\napp.get('/movies/:id', (req, res) => {\n  const id = req.params.id;\n  const movie = library.getMovieById(id);\n  if (movie) {\n    res.status(200).json(movie);\n  } else {\n    res.status(404).json({error: 'Movie not found'});\n  }\n});"
                }
              ],
              "hints": [],
              "httpOptions": {
                "method": "GET",
                "path": "/movies",
                "body": null
              }
            }
          },
          {
            "title": "Lesson #9",
            "id": 132117,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Maintenant, faisons la même chose pour la route `/movies/:id`.\n\n1. Dans la fonction de rappel pour la route `/movies/:id`, appelle la méthode `getDetails` sur l'objet film retourné par `getMovieById` avant de l'envoyer comme valeur de la clé `movie` dans l'objet de réponse.",
              "preselectedFileIndex": 2,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "MediaItem.js",
                  "codeLanguage": "javascript",
                  "content": "class Movie {\n    constructor(id, title, director) {\n        this.id = id;\n        this.title = title;\n        this.director = director;\n    }\n\n    getDetails() {\n        return `${this.title} directed by ${this.director}`;\n    }\n}\n\nclass FranchiseFilm extends Movie {\n    constructor(id, title, director, franchiseName, installmentNumber, totalInstallments) {\n        super(id, title, director);\n        this.franchiseName = franchiseName;\n        this.installmentNumber = installmentNumber;\n        this.totalInstallments = totalInstallments;\n    }\n\n    getDetails() {\n        return `${this.franchiseName} - Installment ${this.installmentNumber} of ${this.totalInstallments}: ${super.getDetails()}`;\n    }\n}\n\nmodule.exports = { Movie, FranchiseFilm };",
                  "solvedContent": null
                },
                {
                  "name": "Library.js",
                  "codeLanguage": "javascript",
                  "content": "const { Movie, FranchiseFilm } = require('./MediaItem');\n\nclass Library {\n    constructor() {\n        this.movies = [\n            new Movie(1, 'Pulp Fiction', 'Quentin Tarantino'),\n            new Movie(2, 'Inception', 'Christopher Nolan'),\n            new Movie(3, 'The Matrix', 'The Wachowskis'),\n            new FranchiseFilm(4, 'The Fellowship of the Ring', 'Peter Jackson', 'The Lord of the Rings', 1, 3),\n            new FranchiseFilm(5, 'The Two Towers', 'Peter Jackson', 'The Lord of the Rings', 2, 3),\n            new FranchiseFilm(6, 'The Return of the King', 'Peter Jackson', 'The Lord of the Rings', 3, 3)\n        ];\n    }\n\n    getAllMovies() {\n        return this.movies;\n    }\n\n    getMovieById(id) {\n        return this.movies.find(movie => movie.id === parseInt(id));\n    }\n}\n\nmodule.exports = new Library();",
                  "solvedContent": null
                },
                {
                  "name": "app.js",
                  "codeLanguage": "javascript",
                  "content": "const express = require('express');\nconst library = require('./Library');\n\nconst app = express();\nconst port = 3000;\n\napp.listen(port, function() {\n  console.log(`App is listening on port ${port}`);\n});\n\napp.get('/movies', (req, res) => {\n const movies = library.getAllMovies().map(movie => movie.getDetails());\n  res.status(200).json({\n   movies: movies\n  });\n});\n\napp.get('/movies/:id', (req, res) => {\n  const id = req.params.id;\n  const movie = library.getMovieById(id);\n  if (movie) {\n    res.status(200).json(movie);\n  } else {\n    res.status(404).json({error: 'Movie not found'});\n  }\n});",
                  "solvedContent": "const express = require('express');\nconst library = require('./Library');\n\nconst app = express();\nconst port = 3000;\n\napp.listen(port, function() {\n  console.log(`App is listening on port ${port}`);\n});\n\napp.get('/movies', (req, res) => {\n const movies = library.getAllMovies().map(movie => movie.getDetails());\n  res.status(200).json({\n   movies: movies\n  });\n});\n\napp.get('/movies/:id', (req, res) => {\n  const id = req.params.id;\n  const movie = library.getMovieById(id);\n  if (movie) {\n    res.status(200).json({movie: movie.getDetails()});\n  } else {\n    res.status(404).json({error: 'Movie not found'});\n  }\n});"
                }
              ],
              "hints": [],
              "httpOptions": {
                "method": "GET",
                "path": "/movies/1",
                "body": null
              }
            }
          }
        ]
      }
    ]
  }
}