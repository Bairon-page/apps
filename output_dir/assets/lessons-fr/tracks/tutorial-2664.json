{
  "tutorial": {
    "id": 2664,
    "version": 5,
    "type": "guidedProject",
    "isNew": false,
    "codeLanguage": "python",
    "title": "Système de commande - Partie 2",
    "descriptionContent": "Étends ton système de commande de nourriture pour inclure un monde de saveurs ! Dans cette partie, nous ajoutons des cuisines diverses, faisant de ton système une destination culinaire mondiale.",
    "shortDescriptionContent": "",
    "showInTrack": true,
    "iconBanner": "tutorial-2664-icon-banner.svg",
    "chapters": [
      {
        "id": 14639,
        "title": "Chapitre #1",
        "type": "practiceLevel3",
        "lessons": [
          {
            "title": "Lesson #1",
            "id": 129477,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Bienvenue de retour dans le projet **Système de Commande de Nourriture** ! Nous allons maintenant faire en sorte que nos utilisateurs choisissent entre différentes cuisines. Tout d'abord, ajoutons un autre menu de nourriture. Dans cet exemple, nous allons ajouter un menu de nourriture indienne.\n\n1. En dessous de `italian_food`, définis `indian_food` comme une liste et remplis-la avec des chaînes représentant des plats indiens. Ajoute au moins 4 éléments de chaîne à la liste `indian_food` comme `\"Curry\"`, `\"Chutney\"`, `\"Samosa\"`, et `\"Naan\"`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "italian_food = [\n  \"Pasta Bolognese\",\n  \"Pepperoni pizza\",\n  \"Margherita pizza\",\n  \"Lasagna\"\n]\n\ndef find_meal(name, menu):\n  return name if name in menu else None\n\ndef select_meal(name):\n  return find_meal(name, italian_food)\n\ndef display_available_meals():\n  print(\"Available Italian Meals:\")\n  for meal in italian_food:\n    print(meal)\n\ndef create_summary(name, amount):\n  order = select_meal(name)\n  if order:\n    return f\"You ordered {amount} {name}\"\n  else:\n    return \"Meal not found\"\n\nprint(\"Welcome to the Food Order System!\")\ndisplay_available_meals()\nname_input = input(\"Enter the name of the meal you want to order: \")\namount_input = int(input(\"Enter the quantity you want to order: \"))\n\nresult = create_summary(name_input, amount_input)\nprint(result)",
                  "solvedContent": "italian_food = [\n  \"Pasta Bolognese\",\n  \"Pepperoni pizza\",\n  \"Margherita pizza\",\n  \"Lasagna\"\n]\n\nindian_food = [\n  \"Curry\",\n  \"Chutney\",\n  \"Samosa\",\n  \"Naan\"\n]\n\ndef find_meal(name, menu):\n  return name if name in menu else None\n\ndef select_meal(name):\n  return find_meal(name, italian_food)\n\ndef display_available_meals():\n  print(\"Available Italian Meals:\")\n  for meal in italian_food:\n    print(meal)\n\ndef create_summary(name, amount):\n  order = select_meal(name)\n  if order:\n    return f\"You ordered {amount} {name}\"\n  else:\n    return \"Meal not found\"\n\nprint(\"Welcome to the Food Order System!\")\ndisplay_available_meals()\nname_input = input(\"Enter the name of the meal you want to order: \")\namount_input = int(input(\"Enter the quantity you want to order: \"))\n\nresult = create_summary(name_input, amount_input)\nprint(result)"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Lesson #1 - Copy",
            "id": 129482,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Laissons d'abord nos utilisateurs choisir la cuisine à partir de laquelle ils souhaitent sélectionner un repas.\n\n1. Après le message de bienvenue que tu imprimes, avant les autres déclarations `input`, ajoute un nouvel `input`.\n   - Demande le type de nourriture que l'utilisateur souhaite choisir.\n   - Enregistre la saisie de l'utilisateur dans une variable appelée `type_input`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "italian_food = [\n  \"Pasta Bolognese\",\n  \"Pepperoni pizza\",\n  \"Margherita pizza\",\n  \"Lasagna\"\n]\n\nindian_food = [\n  \"Curry\",\n  \"Chutney\",\n  \"Samosa\",\n  \"Naan\"\n]\n\ndef find_meal(name, menu):\n  return name if name in menu else None\n\ndef select_meal(name):\n  return find_meal(name, italian_food)\n\ndef display_available_meals():\n  print(\"Available Italian Meals:\")\n  for meal in italian_food:\n    print(meal)\n\ndef create_summary(name, amount):\n  order = select_meal(name)\n  if order:\n    return f\"You ordered {amount} {name}\"\n  else:\n    return \"Meal not found\"\n\nprint(\"Welcome to the Food Order System!\")\ndisplay_available_meals()\nname_input = input(\"Enter the name of the meal you want to order: \")\namount_input = int(input(\"Enter the quantity you want to order: \"))\n\nresult = create_summary(name_input, amount_input)\nprint(result)",
                  "solvedContent": "italian_food = [\n  \"Pasta Bolognese\",\n  \"Pepperoni pizza\",\n  \"Margherita pizza\",\n  \"Lasagna\"\n]\n\nindian_food = [\n  \"Curry\",\n  \"Chutney\",\n  \"Samosa\",\n  \"Naan\"\n]\n\ndef find_meal(name, menu):\n  return name if name in menu else None\n\ndef select_meal(name):\n  return find_meal(name, italian_food)\n\ndef display_available_meals():\n  print(\"Available Italian Meals:\")\n  for meal in italian_food:\n    print(meal)\n\ndef create_summary(name, amount):\n  order = select_meal(name)\n  if order:\n    return f\"You ordered {amount} {name}\"\n  else:\n    return \"Meal not found\"\n\nprint(\"Welcome to the Food Order System!\")\ntype_input = input(\"Enter the type of food you want to order: \") \ndisplay_available_meals()\nname_input = input(\"Enter the name of the meal you want to order: \")\namount_input = int(input(\"Enter the quantity you want to order: \"))\n\nresult = create_summary(name_input, amount_input)\nprint(result)"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Lesson #1 - Copy - Copy",
            "id": 129483,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Nous avons maintenant différentes cuisines, donc nous devrions afficher uniquement celle sélectionnée. Pour ce faire, modifie la fonction `display_available_meals`.\n\n1. Passe un paramètre appelé `food_type` à la fonction.\n2. Utilise une instruction `if` pour comparer si l'argument passé est égal à `\"Italian\"`.\n3. Ajoute une instruction `elif` pour vérifier si l'argument passé est égal à `\"Indian\"`.\n4. Ajoute une instruction `else`.\n5. Déplace le code que tu avais avant dans le bloc `if` pour afficher `\"Available Italian Meals\"` puis boucle à travers la liste pour imprimer tous les repas individuels.\n6. Fais de même pour le bloc elif mais pour les plats indiens.\n7. Dans le bloc `else`, imprime `\"Invalid food type\"`.\n8. Enfin, passe l'entrée de l'utilisateur que nous avons sauvegardée dans `type_input` lorsque tu appelles la fonction `display_available_meals`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "italian_food = [\n  \"Pasta Bolognese\",\n  \"Pepperoni pizza\",\n  \"Margherita pizza\",\n  \"Lasagna\"\n]\n\nindian_food = [\n  \"Curry\",\n  \"Chutney\",\n  \"Samosa\",\n  \"Naan\"\n]\n\ndef find_meal(name, menu):\n  return name if name in menu else None\n\ndef select_meal(name):\n  return find_meal(name, italian_food)\n\ndef display_available_meals():\n  print(\"Available Italian Meals:\")\n  for meal in italian_food:\n    print(meal)\n\ndef create_summary(name, amount):\n  order = select_meal(name)\n  if order:\n    return f\"You ordered {amount} {name}\"\n  else:\n    return \"Meal not found\"\n\nprint(\"Welcome to the Food Order System!\")\ntype_input = input(\"Enter the type of food you want to order: \") \ndisplay_available_meals()\nname_input = input(\"Enter the name of the meal you want to order: \")\namount_input = int(input(\"Enter the quantity you want to order: \"))\n\nresult = create_summary(name_input, amount_input)\nprint(result)",
                  "solvedContent": "italian_food = [\n  \"Pasta Bolognese\",\n  \"Pepperoni pizza\",\n  \"Margherita pizza\",\n  \"Lasagna\"\n]\n\nindian_food = [\n  \"Curry\",\n  \"Chutney\",\n  \"Samosa\",\n  \"Naan\"\n]\n\ndef find_meal(name, menu):\n  return name if name in menu else None\n\ndef select_meal(name):\n  return find_meal(name, italian_food)\n\ndef display_available_meals(food_type):\n  if food_type == \"Italian\":\n    print(\"Available Italian Meals:\")\n    for meal in italian_food:\n      print(meal)\n  elif food_type == \"Indian\":\n    print(\"Available Indian Meals:\")\n    for meal in indian_food:\n      print(meal)\n  else:\n    print(\"Invalid food type\")\n\ndef create_summary(name, amount):\n  order = select_meal(name)\n  if order:\n    return f\"You ordered {amount} {name}\"\n  else:\n    return \"Meal not found\"\n\nprint(\"Welcome to the Food Order System!\")\ntype_input = input(\"Enter the type of food you want to order: \") \ndisplay_available_meals(type_input)\nname_input = input(\"Enter the name of the meal you want to order: \")\namount_input = int(input(\"Enter the quantity you want to order: \"))\n\nresult = create_summary(name_input, amount_input)\nprint(result)"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Lesson #2",
            "id": 129478,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Enfin, nous devons mettre à jour notre fonction `select_meal` pour permettre aux utilisateurs de choisir un plat qui leur plaît.\n\n1. Ajoute un deuxième paramètre appelé `food_type` à la fonction.\n2. Comme nous l'avons fait auparavant, ajoute un bloc `if`, un bloc `elif` et un bloc `else`.\n3. La condition du bloc `if` doit vérifier si la variable passée `food_type` est égale à `\"Italian\"`.\n4. La condition du bloc `elif` doit vérifier si la variable passée `food_type` est égale à `\"Indian\"`.\n5. Déplace le code déjà existant dans le bloc `if` pour obtenir et retourner la nourriture italienne via `return find_meal(name, italian_food)`.\n6. Fais de même pour le bloc `elif` mais pour la nourriture indienne.\n7. Retourne `None` dans le bloc `else`.\n8. Nous devons ajouter un autre paramètre à `create_summary` que nous pouvons appeler `food_type`.\n9. Lors de l'appel de `create_summary`, passe la variable `type_input` comme `food_type`.\n10. Lors de l'appel de `select_meal` à l'intérieur de `create_summary`, passe le paramètre reçu.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "italian_food = [\n  \"Pasta Bolognese\",\n  \"Pepperoni pizza\",\n  \"Margherita pizza\",\n  \"Lasagna\"\n]\n\nindian_food = [\n  \"Curry\",\n  \"Chutney\",\n  \"Samosa\",\n  \"Naan\"\n]\n\ndef find_meal(name, menu):\n  return name if name in menu else None\n\ndef select_meal(name):\n  return find_meal(name, italian_food)\n\ndef display_available_meals(food_type):\n  if food_type == \"Italian\":\n    print(\"Available Italian Meals:\")\n    for meal in italian_food:\n      print(meal)\n  elif food_type == \"Indian\":\n    print(\"Available Indian Meals:\")\n    for meal in indian_food:\n      print(meal)\n  else:\n    print(\"Invalid food type\")\n\ndef create_summary(name, amount):\n  order = select_meal(name)\n  if order:\n    return f\"You ordered {amount} {name}\"\n  else:\n    return \"Meal not found\"\n\nprint(\"Welcome to the Food Order System!\")\ntype_input = input(\"Enter the type of food you want to order: \") \ndisplay_available_meals(type_input)\nname_input = input(\"Enter the name of the meal you want to order: \")\namount_input = int(input(\"Enter the quantity you want to order: \"))\n\nresult = create_summary(name_input, amount_input)\nprint(result)",
                  "solvedContent": "italian_food = [\n  \"Pasta Bolognese\",\n  \"Pepperoni pizza\",\n  \"Margherita pizza\",\n  \"Lasagna\"\n]\n\nindian_food = [\n  \"Curry\",\n  \"Chutney\",\n  \"Samosa\",\n  \"Naan\"\n]\n\ndef find_meal(name, menu):\n  return name if name in menu else None\n\ndef select_meal(name, food_type):\n  if food_type == \"Italian\":\n    return find_meal(name, italian_food)\n  elif food_type == \"Indian\":\n    return find_meal(name, indian_food)\n  else:\n    return None \n\n\ndef display_available_meals(food_type):\n  if food_type == \"Italian\":\n    print(\"Available Italian Meals:\")\n    for meal in italian_food:\n      print(meal)\n  elif food_type == \"Indian\":\n    print(\"Available Indian Meals:\")\n    for meal in indian_food:\n      print(meal)\n  else:\n    print(\"Invalid food type\")\n\ndef create_summary(name, amount, food_type):\n  order = select_meal(name, food_type)\n  if order:\n    return f\"You ordered {amount} {name}\"\n  else:\n    return \"Meal not found\"\n\nprint(\"Welcome to the Food Order System!\")\ntype_input = input(\"Enter the type of food you want to order: \") \ndisplay_available_meals(type_input)\nname_input = input(\"Enter the name of the meal you want to order: \")\namount_input = int(input(\"Enter the quantity you want to order: \"))\n\nresult = create_summary(name_input, amount_input, type_input)\nprint(result)"
                }
              ],
              "hints": []
            }
          }
        ]
      }
    ]
  }
}