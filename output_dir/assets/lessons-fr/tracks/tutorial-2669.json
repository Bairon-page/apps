{
  "tutorial": {
    "id": 2669,
    "version": 4,
    "type": "guidedProject",
    "isNew": false,
    "codeLanguage": "python",
    "title": "Analyseur de transactions - Partie 1",
    "descriptionContent": "Pose les bases pour une compréhension financière en mettant en place un système pour analyser tes transactions bancaires",
    "shortDescriptionContent": "",
    "showInTrack": true,
    "iconBanner": "tutorial-2669-icon-banner.svg",
    "chapters": [
      {
        "id": 14644,
        "title": "Chapitre #1",
        "type": "practiceLevel3",
        "lessons": [
          {
            "title": "Lesson #3 - Copy",
            "id": 129946,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Bienvenue dans le projet **Transaction Analyzer** ! Nous allons créer un script Python pour analyser les transactions bancaires.\n\nCommençons par créer une variable qui contient des données avec lesquelles travailler.\n\n1. Crée une nouvelle variable appelée `data`. Assigne des données de démonstration à la variable. La structure devrait ressembler à ceci :\n   ```\n   data = [\n     (749.17, \"Investment Return\"),\n     (-11.54, \"Utilities\"),\n     (-247.58, \"Online Shopping\"),\n     (981.17, \"Investment Return\"),\n     (-410.65, \"Rent\"),\n     (310.60, \"Rent\"),\n     (563.70, \"Gift\"),\n     (220.79, \"Salary\"),\n     (-49.85, \"Car Maintenance\"),\n     (308.49, \"Salary\"),\n     (-205.55, \"Car Maintenance\"),\n     (870.64, \"Salary\"),\n     (-881.51, \"Utilities\"),\n     (518.14, \"Salary\"),\n     (-264.66, \"Groceries\")\n   ]\n   ```",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "",
                  "solvedContent": "data = [\n  (749.17, \"Investment Return\"),\n  (-11.54, \"Utilities\"),\n  (-247.58, \"Online Shopping\"),\n  (981.17, \"Investment Return\"),\n  (-410.65, \"Rent\"),\n  (310.60, \"Rent\"),\n  (563.70, \"Gift\"),\n  (220.79, \"Salary\"),\n  (-49.85, \"Car Maintenance\"),\n  (308.49, \"Salary\"),\n  (-205.55, \"Car Maintenance\"),\n  (870.64, \"Salary\"),\n  (-881.51, \"Utilities\"),\n  (518.14, \"Salary\"),\n  (-264.66, \"Groceries\")\n]"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Lesson #2",
            "id": 129523,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Maintenant, écrivons une fonction qui affichera toutes les transactions bancaires dans un format spécifique.\n\n1. Définit une nouvelle fonction nommée `print_transactions`.\n   - La fonction doit prendre un paramètre : `transactions`, qui sera la liste que nous venons de définir.\n   - À l'intérieur de la fonction, utilise une boucle `for` pour itérer sur la liste `transactions` passée.\n   - Pour chaque transaction dans `transactions`, accède aux deux valeurs pour le montant et l'énoncé.\n   - À l'intérieur de la boucle, affiche le `amount` et l'`statement` comme `print(f\"${amount} - {statement}\")`.\n2. Appelle la fonction nouvellement définie et passe `data` comme argument.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "data = [\n  (749.17, \"Investment Return\"),\n  (-11.54, \"Utilities\"),\n  (-247.58, \"Online Shopping\"),\n  (981.17, \"Investment Return\"),\n  (-410.65, \"Rent\"),\n  (310.60, \"Rent\"),\n  (563.70, \"Gift\"),\n  (220.79, \"Salary\"),\n  (-49.85, \"Car Maintenance\"),\n  (308.49, \"Salary\"),\n  (-205.55, \"Car Maintenance\"),\n  (870.64, \"Salary\"),\n  (-881.51, \"Utilities\"),\n  (518.14, \"Salary\"),\n  (-264.66, \"Groceries\")\n]",
                  "solvedContent": "data = [\n  (749.17, \"Investment Return\"),\n  (-11.54, \"Utilities\"),\n  (-247.58, \"Online Shopping\"),\n  (981.17, \"Investment Return\"),\n  (-410.65, \"Rent\"),\n  (310.60, \"Rent\"),\n  (563.70, \"Gift\"),\n  (220.79, \"Salary\"),\n  (-49.85, \"Car Maintenance\"),\n  (308.49, \"Salary\"),\n  (-205.55, \"Car Maintenance\"),\n  (870.64, \"Salary\"),\n  (-881.51, \"Utilities\"),\n  (518.14, \"Salary\"),\n  (-264.66, \"Groceries\")\n]\n\ndef print_transactions(transactions):\n  for transaction in transactions:\n    amount, statement = transaction\n    print(f\"${amount} - {statement}\")\n\nprint_transactions(data)"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Lesson #3",
            "id": 129524,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Ensuite, définissons une fonction qui imprimera un résumé de toutes les transactions bancaires.\n\n1. Définit une nouvelle fonction nommée `print_summary`.\n   - La fonction doit prendre un paramètre : `transactions`.\n   - À l'intérieur de la fonction, utilise une compréhension de liste pour créer une liste de tous les montants des dépôts, qui sont des transactions avec un montant supérieur ou égal à zéro. Assigne cette liste à une variable appelée `deposits` :\n   ``` \n   deposits = [transaction[0] for transaction in transactions if transaction[0] >= 0]\n   ```\n   - Utilise la fonction `sum` sur la liste des dépôts et enregistre le résultat dans une variable appelée `total_deposited`.\n   - Imprime la valeur de `total_deposited`.\n2. Appelle `print_summary` avec `data` comme argument.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "data = [\n  (749.17, \"Investment Return\"),\n  (-11.54, \"Utilities\"),\n  (-247.58, \"Online Shopping\"),\n  (981.17, \"Investment Return\"),\n  (-410.65, \"Rent\"),\n  (310.60, \"Rent\"),\n  (563.70, \"Gift\"),\n  (220.79, \"Salary\"),\n  (-49.85, \"Car Maintenance\"),\n  (308.49, \"Salary\"),\n  (-205.55, \"Car Maintenance\"),\n  (870.64, \"Salary\"),\n  (-881.51, \"Utilities\"),\n  (518.14, \"Salary\"),\n  (-264.66, \"Groceries\")\n]\n\ndef print_transactions(transactions):\n  for transaction in transactions:\n    amount, statement = transaction\n    print(f\"${amount} - {statement}\")\n\nprint_transactions(data)",
                  "solvedContent": "data = [\n  (749.17, \"Investment Return\"),\n  (-11.54, \"Utilities\"),\n  (-247.58, \"Online Shopping\"),\n  (981.17, \"Investment Return\"),\n  (-410.65, \"Rent\"),\n  (310.60, \"Rent\"),\n  (563.70, \"Gift\"),\n  (220.79, \"Salary\"),\n  (-49.85, \"Car Maintenance\"),\n  (308.49, \"Salary\"),\n  (-205.55, \"Car Maintenance\"),\n  (870.64, \"Salary\"),\n  (-881.51, \"Utilities\"),\n  (518.14, \"Salary\"),\n  (-264.66, \"Groceries\")\n]\n\ndef print_transactions(transactions):\n  for transaction in transactions:\n    amount, statement = transaction\n    print(f\"${amount} - {statement}\")\n\nprint_transactions(data)\n\ndef print_summary(transactions):\n  deposits = [transaction[0] for transaction in transactions if transaction[0] >= 0]\n  total_deposited = sum(deposits)\n  print(total_deposited)\n\nprint_summary(data)"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Lesson #3 - Copy",
            "id": 129948,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Nous voulons également examiner les retraits.\n\n1. À l'intérieur de la fonction `print_summary`, utilise une compréhension de liste pour créer une liste de tous les montants des retraits, qui sont des transactions avec un montant inférieur à zéro. Assigne cette liste à une variable appelée `withdrawals`.\n2. Utilise la fonction `sum` sur la liste des retraits et enregistre le résultat dans une variable appelée `total_withdrawn`.\n3. Imprime la valeur de `total_withdrawn`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "data = [\n  (749.17, \"Investment Return\"),\n  (-11.54, \"Utilities\"),\n  (-247.58, \"Online Shopping\"),\n  (981.17, \"Investment Return\"),\n  (-410.65, \"Rent\"),\n  (310.60, \"Rent\"),\n  (563.70, \"Gift\"),\n  (220.79, \"Salary\"),\n  (-49.85, \"Car Maintenance\"),\n  (308.49, \"Salary\"),\n  (-205.55, \"Car Maintenance\"),\n  (870.64, \"Salary\"),\n  (-881.51, \"Utilities\"),\n  (518.14, \"Salary\"),\n  (-264.66, \"Groceries\")\n]\n\ndef print_transactions(transactions):\n  for transaction in transactions:\n    amount, statement = transaction\n    print(f\"${amount} - {statement}\")\n\nprint_transactions(data)\n\ndef print_summary(transactions):\n  deposits = [transaction[0] for transaction in transactions if transaction[0] >= 0]\n  total_deposited = sum(deposits)\n  print(total_deposited)\n\nprint_summary(data)",
                  "solvedContent": "data = [\n  (749.17, \"Investment Return\"),\n  (-11.54, \"Utilities\"),\n  (-247.58, \"Online Shopping\"),\n  (981.17, \"Investment Return\"),\n  (-410.65, \"Rent\"),\n  (310.60, \"Rent\"),\n  (563.70, \"Gift\"),\n  (220.79, \"Salary\"),\n  (-49.85, \"Car Maintenance\"),\n  (308.49, \"Salary\"),\n  (-205.55, \"Car Maintenance\"),\n  (870.64, \"Salary\"),\n  (-881.51, \"Utilities\"),\n  (518.14, \"Salary\"),\n  (-264.66, \"Groceries\")\n]\n\ndef print_transactions(transactions):\n  for transaction in transactions:\n    amount, statement = transaction\n    print(f\"${amount} - {statement}\")\n\nprint_transactions(data)\n\ndef print_summary(transactions):\n  deposits = [transaction[0] for transaction in transactions if transaction[0] >= 0]\n  total_deposited = sum(deposits)\n  print(total_deposited)\n  withdrawals = [transaction[0] for transaction in transactions if transaction[0] < 0]\n  total_withdrawn = sum(withdrawals)\n  print(total_withdrawn)\n\nprint_summary(data)"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Lesson #3 - Copy - Copy",
            "id": 129949,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Enfin, nous voulons calculer le solde.\n\n1. À l'intérieur de la fonction `print_summary`, crée une nouvelle variable appelée `balance`. Additionne `total_deposited` et `total_withdrawn` pour calculer le solde. Assigne la valeur à la nouvelle variable `balance`.\n3. Imprime le solde.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "data = [\n  (749.17, \"Investment Return\"),\n  (-11.54, \"Utilities\"),\n  (-247.58, \"Online Shopping\"),\n  (981.17, \"Investment Return\"),\n  (-410.65, \"Rent\"),\n  (310.60, \"Rent\"),\n  (563.70, \"Gift\"),\n  (220.79, \"Salary\"),\n  (-49.85, \"Car Maintenance\"),\n  (308.49, \"Salary\"),\n  (-205.55, \"Car Maintenance\"),\n  (870.64, \"Salary\"),\n  (-881.51, \"Utilities\"),\n  (518.14, \"Salary\"),\n  (-264.66, \"Groceries\")\n]\n\ndef print_transactions(transactions):\n  for transaction in transactions:\n    amount, statement = transaction\n    print(f\"${amount} - {statement}\")\n\nprint_transactions(data)\n\ndef print_summary(transactions):\n  deposits = [transaction[0] for transaction in transactions if transaction[0] >= 0]\n  total_deposited = sum(deposits)\n  print(total_deposited)\n  withdrawals = [transaction[0] for transaction in transactions if transaction[0] < 0]\n  total_withdrawn = sum(withdrawals)\n  print(total_withdrawn)\n\nprint_summary(data)",
                  "solvedContent": "data = [\n  (749.17, \"Investment Return\"),\n  (-11.54, \"Utilities\"),\n  (-247.58, \"Online Shopping\"),\n  (981.17, \"Investment Return\"),\n  (-410.65, \"Rent\"),\n  (310.60, \"Rent\"),\n  (563.70, \"Gift\"),\n  (220.79, \"Salary\"),\n  (-49.85, \"Car Maintenance\"),\n  (308.49, \"Salary\"),\n  (-205.55, \"Car Maintenance\"),\n  (870.64, \"Salary\"),\n  (-881.51, \"Utilities\"),\n  (518.14, \"Salary\"),\n  (-264.66, \"Groceries\")\n]\n\ndef print_transactions(transactions):\n  for transaction in transactions:\n    amount, statement = transaction\n    print(f\"${amount} - {statement}\")\n\nprint_transactions(data)\n\ndef print_summary(transactions):\n  deposits = [transaction[0] for transaction in transactions if transaction[0] >= 0]\n  total_deposited = sum(deposits)\n  print(total_deposited)\n  withdrawals = [transaction[0] for transaction in transactions if transaction[0] < 0]\n  total_withdrawn = sum(withdrawals)\n  print(total_withdrawn)\n  balance = total_deposited + total_withdrawn\n  print(f\"Balance: {balance}\")\n\nprint_summary(data)"
                }
              ],
              "hints": []
            }
          }
        ]
      }
    ]
  }
}