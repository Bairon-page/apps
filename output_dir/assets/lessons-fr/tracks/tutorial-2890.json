{
  "tutorial": {
    "id": 2890,
    "version": 3,
    "type": "guidedProject",
    "isNew": false,
    "codeLanguage": "node",
    "title": "Gestionnaire de tâches - Partie 2",
    "descriptionContent": "Dans la deuxième partie du projet, nous permettrons à nos utilisateurs de marquer les tâches comme terminées, et ainsi, faire du gestionnaire de tâches un outil utile.",
    "shortDescriptionContent": "",
    "showInTrack": true,
    "iconBanner": "tutorial-2890-icon-banner.svg",
    "chapters": [
      {
        "id": 14981,
        "title": "Chapitre #1",
        "type": "practiceLevel3",
        "lessons": [
          {
            "title": "Lesson #1",
            "id": 132085,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Bienvenue dans le projet **Task Manager**. Dans la deuxième partie du projet, nous permettrons aux utilisateurs d'ajouter de nouvelles tâches et de changer le statut des tâches.\n\n1. Sous le point de terminaison `GET /tasks/:id` dans votre fichier `app.js`, créez un nouveau point de terminaison pour une requête POST à `/tasks`.\n2. Dans la fonction de rappel, extrayez le `title` et la `description` de `req.body` en utilisant la déconstruction d'objet.\n3. S'il n'y a pas de titre, envoyez une réponse 400 avec un message d'erreur JSON disant `\"Title is required\"`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "app.js",
                  "codeLanguage": "javascript",
                  "content": "const db = require(\"./database\");\nconst express = require(\"express\");\nconst app = express();\nconst port = 3000;\n\napp.use(express.json());\n\napp.listen(port, () => {\n  console.log(`App is running on port ${port}`);\n});\n\napp.get(\"/tasks\", (req, res) => {\n  const tasks = db.prepare(\"SELECT * FROM tasks\").all();\n  res.status(200).json({\n    tasks: tasks,\n  });\n});\n",
                  "solvedContent": "const db = require(\"./database\");\nconst express = require(\"express\");\nconst app = express();\nconst port = 3000;\n\napp.use(express.json());\n\napp.listen(port, () => {\n  console.log(`App is running on port ${port}`);\n});\n\napp.get(\"/tasks\", (req, res) => {\n  const tasks = db.prepare(\"SELECT * FROM tasks\").all();\n  res.status(200).json({\n    tasks: tasks,\n  });\n});\n\napp.post(\"/tasks\", (req, res) => {\n  const { title, description } = req.body;\n  if (!title) {\n    return res.status(400).json({ error: \"Title is required\" });\n  }\n});\n"
                },
                {
                  "name": "database.js",
                  "codeLanguage": "javascript",
                  "content": "const Database = require(\"better-sqlite3\");\nconst db = new Database(\"/tmp/tasks.db\");\n\ndb.exec(`\n    CREATE TABLE IF NOT EXISTS tasks (\n      id INTEGER PRIMARY KEY AUTOINCREMENT,\n      title TEXT NOT NULL,\n      description TEXT,\n      status TEXT NOT NULL DEFAULT 'pending' CHECK(status IN ('pending', 'completed'))\n    )\n`);\n\ndb.exec(`\n    INSERT INTO tasks (title, description, status)\n    VALUES \n    ('Buy groceries', 'Milk, Bread, Eggs', 'pending'),\n    ('Clean the house', 'Vacuum and dust the living room', 'completed'),\n    ('Finish the report', 'Complete the annual financial report', 'pending')\n`);\n\nmodule.exports = db;\n",
                  "solvedContent": null
                }
              ],
              "hints": [],
              "httpOptions": {
                "method": "POST",
                "path": "/tasks",
                "body": "{}"
              }
            }
          },
          {
            "title": "Lesson #2",
            "id": 132086,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Allons-y et implémentons le code pour insérer la nouvelle tâche dans la base de données.\n\n1. En utilisant le `title` et la `description` passés, ajoute une nouvelle tâche à la table des tâches.\n2. Retourne l'identifiant de la tâche nouvellement créée dans le JSON sous `taskId` et définis le statut à 201.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "app.js",
                  "codeLanguage": "javascript",
                  "content": "const db = require(\"./database\");\nconst express = require(\"express\");\nconst app = express();\nconst port = 3000;\n\napp.use(express.json());\n\napp.listen(port, () => {\n  console.log(`App is running on port ${port}`);\n});\n\napp.get(\"/tasks\", (req, res) => {\n  const tasks = db.prepare(\"SELECT * FROM tasks\").all();\n  res.status(200).json({\n    tasks: tasks,\n  });\n});\n\napp.post(\"/tasks\", (req, res) => {\n  const { title, description } = req.body;\n  if (!title) {\n    return res.status(400).json({ error: \"Title is required\" });\n  }\n});\n",
                  "solvedContent": "const db = require(\"./database\");\nconst express = require(\"express\");\nconst app = express();\nconst port = 3000;\n\napp.use(express.json());\n\napp.listen(port, () => {\n  console.log(`App is running on port ${port}`);\n});\n\napp.get(\"/tasks\", (req, res) => {\n  const tasks = db.prepare(\"SELECT * FROM tasks\").all();\n  res.status(200).json({\n    tasks: tasks,\n  });\n});\n\napp.post(\"/tasks\", (req, res) => {\n  const { title, description } = req.body;\n  if (!title) {\n    return res.status(400).json({ error: \"Title is required\" });\n  }\n\n  const insert = db.prepare(\n    \"INSERT INTO tasks (title, description) VALUES (?, ?)\",\n  );\n  const result = insert.run(title, description);\n\n  res.status(201).json({\n    taskId: result.lastInsertRowid,\n    message: \"Task created successfully\",\n  });\n});\n"
                },
                {
                  "name": "database.js",
                  "codeLanguage": "javascript",
                  "content": "const Database = require(\"better-sqlite3\");\nconst db = new Database(\"/tmp/tasks.db\");\n\ndb.exec(`\n    CREATE TABLE IF NOT EXISTS tasks (\n      id INTEGER PRIMARY KEY AUTOINCREMENT,\n      title TEXT NOT NULL,\n      description TEXT,\n      status TEXT NOT NULL DEFAULT 'pending' CHECK(status IN ('pending', 'completed'))\n    )\n`);\n\ndb.exec(`\n    INSERT INTO tasks (title, description, status)\n    VALUES \n    ('Buy groceries', 'Milk, Bread, Eggs', 'pending'),\n    ('Clean the house', 'Vacuum and dust the living room', 'completed'),\n    ('Finish the report', 'Complete the annual financial report', 'pending')\n`);\n\nmodule.exports = db;\n",
                  "solvedContent": null
                }
              ],
              "hints": [],
              "httpOptions": {
                "method": "POST",
                "path": "/tasks",
                "body": "{\n  \"title\": \"Read a book\",\n  \"description\": \"I really want to read 'Catch-22' or a similar book.\"\n}"
              }
            }
          },
          {
            "title": "Lesson #3",
            "id": 132087,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Pour mettre à jour le statut d'une tâche existante, créons un endpoint qui gère une requête PUT.\n\n1. Définit un nouvel endpoint pour une requête `PUT` à l'URI `/tasks/:id`.\n2. Dans la fonction de rappel, extrait l'`id` de `req.params` et le `status` de `req.body`.\n3. Si le statut n'a pas la valeur `\"completed\"` ou `\"pending\"`, réponds avec le code de statut 400 et un message d'erreur au format JSON disant `\"Invalid status\"`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "app.js",
                  "codeLanguage": "javascript",
                  "content": "const db = require(\"./database\");\nconst express = require(\"express\");\nconst app = express();\nconst port = 3000;\n\napp.use(express.json());\n\napp.listen(port, () => {\n  console.log(`App is running on port ${port}`);\n});\n\napp.get(\"/tasks\", (req, res) => {\n  const tasks = db.prepare(\"SELECT * FROM tasks\").all();\n  res.status(200).json({\n    tasks: tasks,\n  });\n});\n\napp.post(\"/tasks\", (req, res) => {\n  const { title, description } = req.body;\n  if (!title) {\n    return res.status(400).json({ error: \"Title is required\" });\n  }\n\n  const insert = db.prepare(\n    \"INSERT INTO tasks (title, description) VALUES (?, ?)\",\n  );\n  const result = insert.run(title, description);\n\n  res.status(201).json({\n    taskId: result.lastInsertRowid,\n    message: \"Task created successfully\",\n  });\n});\n",
                  "solvedContent": "const db = require(\"./database\");\nconst express = require(\"express\");\nconst app = express();\nconst port = 3000;\n\napp.use(express.json());\n\napp.listen(port, () => {\n  console.log(`App is running on port ${port}`);\n});\n\napp.get(\"/tasks\", (req, res) => {\n  const tasks = db.prepare(\"SELECT * FROM tasks\").all();\n  res.status(200).json({\n    tasks: tasks,\n  });\n});\n\napp.post(\"/tasks\", (req, res) => {\n  const { title, description } = req.body;\n  if (!title) {\n    return res.status(400).json({ error: \"Title is required\" });\n  }\n\n  const insert = db.prepare(\n    \"INSERT INTO tasks (title, description) VALUES (?, ?)\",\n  );\n  const result = insert.run(title, description);\n\n  res.status(201).json({\n    taskId: result.lastInsertRowid,\n    message: \"Task created successfully\",\n  });\n});\n\napp.put(\"/tasks/:id\", (req, res) => {\n  const { id } = req.params;\n  const { status } = req.body;\n  if (status !== \"completed\" && status !== \"pending\") {\n    return res.status(400).json({ error: \"Invalid status\" });\n  }\n});\n"
                },
                {
                  "name": "database.js",
                  "codeLanguage": "javascript",
                  "content": "const Database = require(\"better-sqlite3\");\nconst db = new Database(\"/tmp/tasks.db\");\n\ndb.exec(`\n    CREATE TABLE IF NOT EXISTS tasks (\n      id INTEGER PRIMARY KEY AUTOINCREMENT,\n      title TEXT NOT NULL,\n      description TEXT,\n      status TEXT NOT NULL DEFAULT 'pending' CHECK(status IN ('pending', 'completed'))\n    )\n`);\n\ndb.exec(`\n    INSERT INTO tasks (title, description, status)\n    VALUES \n    ('Buy groceries', 'Milk, Bread, Eggs', 'pending'),\n    ('Clean the house', 'Vacuum and dust the living room', 'completed'),\n    ('Finish the report', 'Complete the annual financial report', 'pending')\n`);\n\nmodule.exports = db;\n",
                  "solvedContent": null
                }
              ],
              "hints": [],
              "httpOptions": {
                "method": "PUT",
                "path": "/tasks/1",
                "body": "{\n  \"status\": \"Invalid status\"\n}"
              }
            }
          },
          {
            "title": "Lesson #4",
            "id": 132088,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Terminons la route en mettant à jour la base de données avec le nouveau statut de la tâche.\n\n1. Mets à jour le statut de la tâche avec l'identifiant donné en le définissant soit sur `\"completed\"` soit sur `\"pending\"`.\n2. Si aucune tâche avec l'ID donné n'a été trouvée, retourne le code de statut `404` avec un message d'erreur.\n3. Si la tâche a été mise à jour avec succès, retourne le code de statut `200`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "app.js",
                  "codeLanguage": "javascript",
                  "content": "const db = require(\"./database\");\nconst express = require(\"express\");\nconst app = express();\nconst port = 3000;\n\napp.use(express.json());\n\napp.listen(port, () => {\n  console.log(`App is running on port ${port}`);\n});\n\napp.get(\"/tasks\", (req, res) => {\n  const tasks = db.prepare(\"SELECT * FROM tasks\").all();\n  res.status(200).json({\n    tasks: tasks,\n  });\n});\n\napp.post(\"/tasks\", (req, res) => {\n  const { title, description } = req.body;\n  if (!title) {\n    return res.status(400).json({ error: \"Title is required\" });\n  }\n\n  const insert = db.prepare(\n    \"INSERT INTO tasks (title, description) VALUES (?, ?)\",\n  );\n  const result = insert.run(title, description);\n\n  res.status(201).json({\n    taskId: result.lastInsertRowid,\n    message: \"Task created successfully\",\n  });\n});\n\napp.put(\"/tasks/:id\", (req, res) => {\n  const { id } = req.params;\n  const { status } = req.body;\n  if (status !== \"completed\" && status !== \"pending\") {\n    return res.status(400).json({ error: \"Invalid status\" });\n  }\n});\n",
                  "solvedContent": "const db = require(\"./database\");\nconst express = require(\"express\");\nconst app = express();\nconst port = 3000;\n\napp.use(express.json());\n\napp.listen(port, () => {\n  console.log(`App is running on port ${port}`);\n});\n\napp.get(\"/tasks\", (req, res) => {\n  const tasks = db.prepare(\"SELECT * FROM tasks\").all();\n  res.status(200).json({\n    tasks: tasks,\n  });\n});\n\napp.post(\"/tasks\", (req, res) => {\n  const { title, description } = req.body;\n  if (!title) {\n    return res.status(400).json({ error: \"Title is required\" });\n  }\n\n  const insert = db.prepare(\n    \"INSERT INTO tasks (title, description) VALUES (?, ?)\",\n  );\n  const result = insert.run(title, description);\n\n  res.status(201).json({\n    taskId: result.lastInsertRowid,\n    message: \"Task created successfully\",\n  });\n});\n\napp.put(\"/tasks/:id\", (req, res) => {\n  const { id } = req.params;\n  const { status } = req.body;\n  if (status !== \"completed\" && status !== \"pending\") {\n    return res.status(400).json({ error: \"Invalid status\" });\n  }\n\n  const update = db.prepare(\"UPDATE tasks SET status = ? WHERE id = ?\");\n  const result = update.run(status, id);\n\n  if (result.changes === 0) {\n    return res.status(404).json({ error: \"Task not found\" });\n  }\n\n  res.status(200).json({\n    message: `Task with id ${id} updated successfully.`,\n    updatedStatus: status,\n  });\n});\n"
                },
                {
                  "name": "database.js",
                  "codeLanguage": "javascript",
                  "content": "const Database = require(\"better-sqlite3\");\nconst db = new Database(\"/tmp/tasks.db\");\n\ndb.exec(`\n    CREATE TABLE IF NOT EXISTS tasks (\n      id INTEGER PRIMARY KEY AUTOINCREMENT,\n      title TEXT NOT NULL,\n      description TEXT,\n      status TEXT NOT NULL DEFAULT 'pending' CHECK(status IN ('pending', 'completed'))\n    )\n`);\n\ndb.exec(`\n    INSERT INTO tasks (title, description, status)\n    VALUES \n    ('Buy groceries', 'Milk, Bread, Eggs', 'pending'),\n    ('Clean the house', 'Vacuum and dust the living room', 'completed'),\n    ('Finish the report', 'Complete the annual financial report', 'pending')\n`);\n\nmodule.exports = db;\n",
                  "solvedContent": null
                }
              ],
              "hints": [],
              "httpOptions": {
                "method": "PUT",
                "path": "/tasks/1",
                "body": "{\n  \"status\": \"completed\"\n}"
              }
            }
          }
        ]
      }
    ]
  }
}