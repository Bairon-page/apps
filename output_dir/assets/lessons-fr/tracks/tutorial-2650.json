{
  "tutorial": {
    "id": 2650,
    "version": 6,
    "type": "challenges",
    "isNew": false,
    "codeLanguage": "python",
    "title": "Introduction à Python",
    "descriptionContent": "Exercices de défi basés sur l'introduction à Python",
    "shortDescriptionContent": "",
    "showInTrack": true,
    "iconBanner": null,
    "chapters": [
      {
        "id": 14658,
        "title": "Bonjour - Python",
        "type": "challengeLevel0",
        "lessons": [
          {
            "title": "How Challenges Work",
            "id": 129686,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Chaque défi te demandera d'écrire le code selon les instructions.\n\nTon code sera automatiquement testé lorsque tu appuieras sur le bouton de soumission. Tu verras des retours pour savoir si c'est correct. Tu peux aussi exécuter ton code avant de le soumettre en appuyant sur le bouton Exécuter le code. Essayons-le !\n\n1. Termine l'instruction d'impression en codant `print`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "(\"Hello!\")",
                  "solvedContent": "print(\"Hello!\")"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 14659,
        "title": "Déclaration de chaînes",
        "type": "challengeLevel0",
        "lessons": [
          {
            "title": "Declaring Variables with String Values",
            "id": 129687,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Ton ami t'a demandé de découvrir comment se porte sa chaîne YouTube. Trouvons leurs meilleures et pires vidéos !\n\n1. Crée une variable `most_viewed`, et assigne-lui la valeur `\"7 Amazing Mugs I CANNOT live without\"`.\n2. Crée une variable `least_viewed`, et assigne-lui la valeur `\"The Best Mug to Take Scuba Diving\"`.\n3. Utilise la fonction `print` pour afficher les variables dans la console, chacune sur une ligne différente.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "",
                  "solvedContent": "most_viewed = \"7 Amazing Mugs I CANNOT live without\"\nleast_viewed = \"The Best Mug to Take Scuba Diving\"\n\nprint(most_viewed)\nprint(least_viewed)"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 14660,
        "title": "Déclarer des nombres",
        "type": "challengeLevel0",
        "lessons": [
          {
            "title": "Declaring Variables with Number Values",
            "id": 129688,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Votre groupe préféré a mis en ligne une nouvelle vidéo ! Voyons combien de personnes l'ont regardée et commentée.\n\n1. Crée une variable `views` et assigne-lui la valeur `1145`.\n2. Crée une variable `comments` et assigne-lui la valeur `200`.\n3. Utilise une instruction `print` pour afficher la variable `views` dans la console.\n4. Utilise une instruction `print` pour afficher la variable `comments` dans la console.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "",
                  "solvedContent": "views = 1145\ncomments = 200\n\nprint(views)\nprint(comments)"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 14661,
        "title": "Âge légal pour conduire",
        "type": "challengeLevel0",
        "lessons": [
          {
            "title": "Legal Driving Age",
            "id": 129689,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Sam a 16 ans et veut savoir si elle est assez âgée pour conduire une voiture. Complète les opérateurs manquants pour montrer que toute personne de moins de 17 ans n'est pas autorisée à conduire.\n\n1. Termine la comparaison `too_young` pour répondre à la question dans la console avec un `Boolean` qui indique que Sam est trop jeune pour conduire.\n2. Termine la comparaison `car_driver` pour montrer qu'elle ne peut pas conduire une voiture.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "sams_age = 16\r\ntoo_young = sams_age  17\r\ncar_driver = sams_age  17\r\n\r\nprint(f\"Is Sam too young to drive? {too_young}\")\r\nprint(f\"Can Sam drive a car? {car_driver}\")",
                  "solvedContent": "sams_age = 16\r\ntoo_young = sams_age < 17\r\ncar_driver = sams_age > 17\r\n\r\nprint(f\"Is Sam too young to drive? {too_young}\")\r\nprint(f\"Can Sam drive a car? {car_driver}\")"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 14662,
        "title": "Vérification de l'ancien mot de passe",
        "type": "challengeLevel0",
        "lessons": [
          {
            "title": "Old Password Check",
            "id": 129690,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Lorde a oublié son mot de passe et elle utilise un programme pour le restaurer. Le programme vérifie si son nouveau mot de passe est différent de l'ancien. Il oblige également Lorde à entrer le nouveau mot de passe deux fois pour s'assurer qu'il est écrit correctement. Finissons ce programme !\n\n1. Utilise l'opérateur d'inégalité dans `compare_old_new` pour montrer que les mots de passe ne sont **pas** les mêmes.\n2. Assure-toi que le `new_password` correspond au `repeat_new_password`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "old_password = \"hello123\"\r\nnew_password = \"goodbye321\"\r\ncompare_old_new = old_password new_password\r\nrepeat_new_password = \"goodbye321\"\r\ncompare_new = new_password repeat_new_password\r\n\r\nprint(f\"Is new password different from old password? {compare_old_new}\")\r\nprint(f\"Has new password been introduced correctly? {compare_new}\")",
                  "solvedContent": "old_password = \"hello123\"\r\nnew_password = \"goodbye321\"\r\ncompare_old_new = old_password != new_password\r\nrepeat_new_password = \"goodbye321\"\r\ncompare_new = new_password == repeat_new_password\r\n\r\nprint(f\"Is new password different from old password? {compare_old_new}\")\r\nprint(f\"Has new password been introduced correctly? {compare_new}\")"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 14663,
        "title": "Prix du billet de cinéma",
        "type": "challengeLevel0",
        "lessons": [
          {
            "title": "Movie Ticket Price",
            "id": 129691,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Jonas va au cinéma. Il a vérifié les prix et il aura besoin d'un billet pour un adulte.\n\n1. Complète la f-string pour montrer qu'il achètera un billet pour un adulte en utilisant la variable correcte.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "age = 15\r\nadult_ticket = age >= 12\r\n\r\nprint( \"Buy one adult ticket: {}\")",
                  "solvedContent": "age = 15\r\nadult_ticket= age >= 12\r\n\r\nprint(f\"Buy one adult ticket: {adult_ticket}\")"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 13124,
        "title": "Opérateur d'inégalité",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "Inequality Operator with Variables",
            "id": 118105,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Aidons notre ami YouTuber à déterminer quand il devrait demander à son audience de s'abonner !\n\n1. Utilise `views` et `subscribers` pour créer une nouvelle variable appelée `askToSubscribe` qui contient le résultat d'une comparaison d'inégalité entre les deux.\n2. Affiche le résultat.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "views = 1533\nsubscribers = 123\n",
                  "solvedContent": "views = 1533\nsubscribers = 123\n\naskToSubscribe = views != subscribers\n\nprint(askToSubscribe)"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 13119,
        "title": "Utilisation des variables : Nombres",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "Using variables that have numbers",
            "id": 118100,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Tu es le batteur d'un nouveau groupe génial. Calculons le temps total que les gens ont passé à écouter ta chanson la plus populaire !\n\n1. Crée une variable `totalListenTime`. Multiplie `bestSongLength` par `bestSongListens` et stocke le résultat dans la variable.\n2. Utilise une instruction `print` pour afficher la nouvelle variable.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "bestSongLength = 3.5\nbestSongListens = 456",
                  "solvedContent": "bestSongLength = 3.5\nbestSongListens = 456\n\ntotalListenTime = bestSongLength * bestSongListens\nprint(totalListenTime)"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 13121,
        "title": "Opérateur d'égalité avec des nombres",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "Checking for equality with numbers",
            "id": 118102,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Tu as décidé de partager tes blagues incroyables avec le monde et tu as créé un compte Twitter ! Utilisons l'opérateur d'égalité pour voir si tu as atteint 1000 abonnés.\n\n1. Crée une variable appelée `celebrationTime` et assigne-lui le résultat de la comparaison entre `followers` et `1000`.\n2. Utilise une instruction `print` pour afficher le résultat.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "followers = 900",
                  "solvedContent": "followers = 900\ncelebrationTime = followers == 1000\n\nprint(celebrationTime)"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 13122,
        "title": "Opérateur d'égalité avec des strings",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "Checking for equality with strings",
            "id": 118103,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Tu viens de découvrir la vidéo d'animal la plus mignonne ! Mais elle te semble un peu familière. Découvrons si elle a été réalisée par ton créateur de contenu préféré.\n\n1. Crée une variable `madeByFavorite` et assigne-lui le résultat d'une comparaison entre `newCreator` et `favoriteCreator`. Assure-toi d'utiliser l'opérateur d'égalité.\n2. Affiche la nouvelle variable.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "newCreator = \"Bunnies4Ever\"\nfavoriteCreator = \"BestBunnies\"",
                  "solvedContent": "newCreator = \"Bunnies4Ever\"\nfavoriteCreator = \"BestBunnies\"\n\nmadeByFavorite = newCreator == favoriteCreator\n\nprint(madeByFavorite)"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 13118,
        "title": "Mise à jour des variables",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "Updating variables with new values",
            "id": 118099,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Tu as décidé de commencer une carrière sur YouTube et tu as posté ta première vidéo. Voyons combien de likes elle obtient.\n\n1. Augmente la variable `likes` de 1.\n2. Utilise l'instruction `print` pour afficher la valeur de la variable `likes`.\n3. Augmente à nouveau la variable `likes` de 1.\n4. Utilise l'instruction `print` pour afficher à nouveau la valeur de la variable `likes`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "likes = 1145\nlikes = 1146",
                  "solvedContent": "likes = 1145\nlikes = 1146\nlikes = 1147\nprint (likes)\nlikes = 1148\nprint (likes)"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 13123,
        "title": "Opérateur d'égalité avec des variables",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "Equality with numbers in variables",
            "id": 118104,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Ton petit cousin a créé sa propre plateforme de médias sociaux ! Ils t'ont convaincu de les rejoindre. Vérifions si ton premier post a obtenu le même nombre de vues et de commentaires.\n\n1. Crée une variable `everyoneComments` et assigne-lui le résultat d'une comparaison entre `views` et `comments`.\n2. Affiche le résultat.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "views = 1511\ncomments = 1511",
                  "solvedContent": "views = 1511\ncomments = 1511\n\neveryoneComments = views == comments\n\nprint(everyoneComments)"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 13113,
        "title": "Opérateur supérieur à",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "Greater than operator",
            "id": 118090,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Deux personnes jouent au bowling. Bowler1 fait 5 strikes et 5 spares. Bowler2 fait 4 strikes et six spares. Il n'y a pas d'égalité !\n\n1. Après `\"bowler1 wins:\"`, crée une instruction print pour vérifier si le score de bowler1 est supérieur à celui de bowler2.\n2. Après `\"bowler2 wins:\"`, imprime la comparaison pour vérifier si le score de bowler2 est supérieur à celui de bowler1.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "sam_strikes = 5\r\nsam_spares = 5\r\nleo_strikes = 4\r\nleo_spares = 6\r\nsam_score = sam_strikes * 30 + sam_spares * 20\r\nleo_score = leo_strikes * 30 + leo_spares * 20\r\n\r\n#Decide winner\r\nprint(\"Sam wins:\")\r\n\r\nprint(\"Leo wins:\")",
                  "solvedContent": "sam_strikes = 5\r\nsam_spares = 5\r\nleo_strikes = 4\r\nleo_spares = 6\r\nsam_score = sam_strikes * 30 + sam_spares * 20\r\nleo_score = leo_strikes * 30 + leo_spares * 20\r\n\r\n#Decide winner\r\nprint(\"Sam wins:\")\r\nprint(sam_score > leo_score)\r\n\r\nprint(\"Leo wins:\")\r\nprint(leo_score > sam_score)"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 13111,
        "title": "Opérateurs",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "Operators",
            "id": 118088,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Anne utilise un distributeur automatique pour ajouter un `deposit` de 200 $ à son compte. Elle veut effectuer un `withdrawal` de 100 $.\n\n1. Complète le code pour montrer que le `withdrawal` d'Anne est `approved` si elle a suffisamment d'argent dans son `account_balance`, ou `denied` sinon.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "deposit  200\r\nwithdrawal  100\r\naccount_balance = deposit - withdrawal\r\nprint(\"Account balance is:\")\r\nprint(account_balance)\r\nprint(\"Withdrawal is:\")\r\nprint(withdrawal)\r\n\r\napproved  withdrawal  account_balance\r\ndenied  withdrawal  account_balance\r\n\r\nprint(\"Withdrawal approved. \") \r\nprint(approved)\r\n\r\nprint(\"Withdrawal denied. \")\r\nprint(denied)",
                  "solvedContent": "deposit = 200\r\nwithdrawal = 100\r\naccount_balance = deposit - withdrawal\r\nprint(\"Account balance is:\")\r\nprint(account_balance)\r\nprint(\"Withdrawal is:\")\r\nprint(withdrawal)\r\n\r\napproved = withdrawal <= account_balance\r\ndenied = withdrawal > account_balance\r\n\r\nprint(\"Withdrawal approved. \") \r\nprint(approved)\r\n\r\nprint(\"Withdrawal denied. \")\r\nprint(denied)"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 13112,
        "title": "Opérateurs d'égalité et d'inégalité",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "Equality and inequality operators",
            "id": 118089,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "L'identifiant d'un électeur est comparé au registre des électeurs avant qu'un bulletin de vote ne soit remis à quelqu'un.\n\n1. Crée une variable `valid_voter` qui stocke la comparaison entre le `ID_name` de l'électeur et le `voter_register_name`.\n2. Imprime la comparaison de `valid_voter` avec `True` pour voir si l'électeur obtient un bulletin de vote ou doit s'inscrire.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "#voter_id_match_registry\r\nID_name = \"Kristen Stewart\"\r\nvoter_register_name = \"Kristen Jaymes Stewart\"\r\n\r\n\r\nprint(\"Here's your ballot.\")\r\nprint(valid_voter  True)\r\n\r\nprint(\"You must register to vote first.\")\r\nprint(valid_voter  True)",
                  "solvedContent": "#voter_id_match_registry\r\nID_name = \"Kristen Stewart\"\r\nvoter_register_name = \"Kristen Jaymes Stewart\"\r\nvalid_voter = ID_name == voter_register_name\r\n\r\nprint(\"Here's your ballot.\")\r\nprint(valid_voter == True)\r\n\r\nprint(\"You must register to vote first.\")\r\nprint(valid_voter != True)"
                }
              ],
              "hints": []
            }
          }
        ]
      }
    ]
  }
}