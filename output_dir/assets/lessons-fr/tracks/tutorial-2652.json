{
  "tutorial": {
    "id": 2652,
    "version": 5,
    "type": "challenges",
    "isNew": false,
    "codeLanguage": "python",
    "title": "Listes",
    "descriptionContent": "Exercices de défi basés sur les listes",
    "shortDescriptionContent": "",
    "showInTrack": true,
    "iconBanner": null,
    "chapters": [
      {
        "id": 14670,
        "title": "Planification des repas",
        "type": "challengeLevel0",
        "lessons": [
          {
            "title": "Meal Planning",
            "id": 129698,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Tu décides de planifier tes repas quotidiens en utilisant des listes Python.\n\n1. Dans la variable `meals`, crée une liste contenant tes repas pour le petit-déjeuner, le déjeuner et le dîner dans cet ordre : `\"omelet\"`, `\"salad\"`, et `\"chicken\"`.\n2. Modifie la première instruction print pour inclure le menu du déjeuner.\n3. Un ami passe avec de la pizza ! Change la valeur du dîner (la dernière valeur) dans la liste `meals` en `\"pizza\"`.\n4. Modifie la deuxième instruction print pour inclure l'élément actuel du menu du dîner !",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "meals = \n\nprint(f\"Lunch menu: {}\")\n\nprint(f\"Dinner menu: {}\")",
                  "solvedContent": "meals = [\"omelet\", \"salad\", \"chicken\"]\n\nprint(f\"Lunch menu: {meals[1]}\")\nmeals[2] = \"pizza\"\nprint(f\"Dinner menu: {meals[2]}\")"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 14671,
        "title": "Remplaçants de volleyball",
        "type": "challengeLevel0",
        "lessons": [
          {
            "title": "Volleyball Subs",
            "id": 129699,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "C'est le moment du tournoi pour ta ligue de volleyball, mais beaucoup de tes coéquipiers sont hors de la ville pour le long week-end. On dirait qu'on va devoir faire quelques remplacements !\n\n1. Utilise une opération de liste pour remplacer `\"Iliana\"` par `\"Jack\"` ( `sub_1` ).\n2. Remplace `\"Anders\"` par `\"Celeste\"` ( `sub_2` ).\n3. Remplace `\"Gabrielle\"` par `\"Mary\"` ( `sub_3` ).\n\nC'est l'heure du match. Allez l'équipe !",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "players = [\"Iliana\", \"Samuel\", \"Anders\", \"Teresa\", \"Gabrielle\", \"Alejandro\"]\nsub1 = \"Jack\"\nsub2 = \"Celeste\"\nsub3 = \"Mary\"\n\n",
                  "solvedContent": "players = [\"Iliana\", \"Samuel\", \"Anders\", \"Teresa\", \"Gabrielle\", \"Alejandro\"]\nsub1 = \"Jack\"\nsub2 = \"Celeste\"\nsub3 = \"Mary\"\n\nplayers[0] = sub1\nplayers[2] = sub2\nplayers[4] = sub3"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 14672,
        "title": "Rappels de liste de courses",
        "type": "challengeLevel0",
        "lessons": [
          {
            "title": "Shopping List Reminders",
            "id": 129700,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Utilisons les boucles `for` pour nous aider à suivre notre liste `shopping_list` !\n\n1. Pour chaque article, imprime une phrase de rappel suivant ce format : `\"N'oublie pas d'acheter <...>!\"`.\n2. Remplace `<...>` par la valeur de l'article actuel de la liste de courses dans ta boucle.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "shopping_list = [\"dish soap\", \"kleenex\", \"batteries\", \"aluminum foil\", \"pet food\", \"toothpaste\", \"lightbulbs\"]\n\n",
                  "solvedContent": "shopping_list = [\"dish soap\", \"kleenex\", \"batteries\", \"aluminum foil\", \"pet food\", \"toothpaste\", \"lightbulbs\"]\n\nfor item in shopping_list:\n print(f\"Don't forget to buy {item}!\")"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 14673,
        "title": "Indice d'humidité de la forêt",
        "type": "challengeLevel0",
        "lessons": [
          {
            "title": "Forest Humidity Index",
            "id": 129701,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Gab est un géographe qui étudie les niveaux d'humidité des forêts. Gab a recueilli des données sur les niveaux d'humidité de 50 sections de la forêt et veut savoir quels sont les niveaux d'humidité les plus élevés et les plus bas de la forêt. En utilisant `min()` et `max()`, trouve et affiche ces niveaux à partir de la liste `humidity` pour Gab.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "humidity = [77.78, 65.51, 74.42, 80.48, 71.71, 68.39, 65.10, 71.26, 75.95, 81.29, 71.54, 80.85, 84.45, 84.23, 83.18, 68.59, 80.83, 84.72, 78.23, 74.44, 83.20, 74.90, 80.59, 75.09, 82.46, 67.96, 77.65, 69.51, 74.57, 72.98, 66.01, 67.89, 82.52, 65.15, 70.07, 66.84, 74.74, 82.16, 73.73, 82.23, 66.47, 68.70, 71.28, 67.42, 82.87, 66.41, 80.43, 83.42, 74.70, 83.97]",
                  "solvedContent": "humidity = [77.78, 65.51, 74.42, 80.48, 71.71, 68.39, 65.10, 71.26, 75.95, 81.29, 71.54, 80.85, 84.45, 84.23, 83.18, 68.59, 80.83, 84.72, 78.23, 74.44, 83.20, 74.90, 80.59, 75.09, 82.46, 67.96, 77.65, 69.51, 74.57, 72.98, 66.01, 67.89, 82.52, 65.15, 70.07, 66.84, 74.74, 82.16, 73.73, 82.23, 66.47, 68.70, 71.28, 67.42, 82.87, 66.41, 80.43, 83.42, 74.70, 83.97]\r\nprint(min(humidity))\r\nprint(max(humidity))"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 14674,
        "title": "Participant disqualifié",
        "type": "challengeLevel0",
        "lessons": [
          {
            "title": "Disqualified Participant",
            "id": 129702,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Nous avons un tournoi mensuel et nous avons enregistré le nom du champion dans la liste `champions`. Récemment, nous avons découvert qu'un participant régulier, `\"Tooti3\"`, trichait. Nous devons vérifier si `\"Tooti3\"` a gagné des tournois et le retirer de la liste. Trouve combien de fois `\"Tooti3\"` apparaît dans la liste `champions` en utilisant `count()` puis affiche le résultat dans la console.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "champions = [\"Miracle+\", \"Tooti3\", \"Orustat\", \"Emkay\", \"mizuhana\", \"CaptainSpark\", \"NichMercs\", \"mizuhana\", \"dabian\", \"Cyle\",  \"Tooti3\", \"Flaker\"]",
                  "solvedContent": "champions = [\"Miracle+\", \"Tooti3\", \"Orustat\", \"Emkay\", \"mizuhana\", \"CaptainSpark\", \"NichMercs\", \"mizuhana\", \"dabian\", \"Cyle\",  \"Tooti3\", \"Flaker\"]\r\nprint(champions.count(\"Tooti3\"))"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 14675,
        "title": "Compte d'épargne",
        "type": "challengeLevel0",
        "lessons": [
          {
            "title": "Savings Account",
            "id": 129703,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Joe enregistre combien d'argent il a économisé chaque mois dans une liste appelée `savings`. Aide Joe à calculer ses économies totales pour l'année en utilisant `sum()` et affiche le résultat dans la console.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "savings = [122, 50, 102, 103, 79, 46, 107, 9, 13, 91, 193, 4]",
                  "solvedContent": "savings = [122, 50, 102, 103, 79, 46, 107, 9, 13, 91, 193, 4]\r\nprint(sum(savings))"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 13970,
        "title": "Filtrer les gros retraits",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "Filtering Large Withdrawals",
            "id": 124070,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Pour mieux comprendre tes habitudes de dépenses, tu veux un moyen de voir tous les retraits supérieurs ou égaux à un seuil de retrait défini.\n\n1. Parcours la liste `withdrawals`.\n2. Si le montant du retrait est supérieur ou égal à `withdrawal_threshold`, ajoute-le à la liste `large_withdrawals`.\n4. Enfin, affiche le nombre d'éléments dans la liste finale `large_withdrawals`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "withdrawals = [25, 195, 6, 34, 18, 99, 110, 7, 87, 38, 101, 77, 250]\nwithdrawal_threshold = 100\nlarge_withdrawals = []\n\n",
                  "solvedContent": "withdrawals = [25, 195, 6, 34, 18, 99, 110, 7, 87, 38, 101, 77, 250]\nwithdrawal_threshold = 100\nlarge_withdrawals = []\n\nfor withdrawal in withdrawals:\n if withdrawal >= withdrawal_threshold:\n  large_withdrawals.append(withdrawal)\n\nprint(len(large_withdrawals))"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 13951,
        "title": "Tri",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "Sorting",
            "id": 123980,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Les listes `students_1E` et `students_1F` contiennent les noms des élèves des classes `1E` et `1F` respectivement. En raison d'une restructuration de l'école, les élèves des deux classes vont être regroupés. Joins `students_1F` avec `students_1E` et trie leurs noms par ordre alphabétique. Affiche la liste fusionnée dans la console.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "students_1E = [\"Leslie\", \"Shyanne\", \"Cayden\", \"Karla\", \"Monika\", \"Abigale\", \"Tristen\", \"Salena\", \"Rosalie\", \"Francisca\", \"Harris\"]\r\nstudents_1F = [\"Mackenzie\", \"Trey\", \"Dashawn\", \"Jamia\", \"Emilio\", \"Desean\", \"Lucero\", \"Lilly\", \"Justice\", \"Cale\"]",
                  "solvedContent": "students_1E = [\"Leslie\", \"Shyanne\", \"Cayden\", \"Karla\", \"Monika\", \"Abigale\", \"Tristen\", \"Salena\", \"Rosalie\", \"Francisca\", \"Harris\"]\r\nstudents_1F = [\"Mackenzie\", \"Trey\", \"Dashawn\", \"Jamia\", \"Emilio\", \"Desean\", \"Lucero\", \"Lilly\", \"Justice\", \"Cale\"]\r\nstudents_1E += students_1F\r\nstudents_1E.sort()\r\nprint(students_1E)"
                }
              ],
              "hints": []
            }
          }
        ]
      }
    ]
  }
}