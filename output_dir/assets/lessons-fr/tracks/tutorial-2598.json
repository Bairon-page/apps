{
  "tutorial": {
    "id": 2598,
    "version": 16,
    "type": "guidedProject",
    "isNew": false,
    "codeLanguage": "css",
    "title": "Galerie - Partie 1",
    "descriptionContent": "Prêt à créer une galerie en ligne ? Dans ce segment, nous allons poser les bases en installant une toile pour présenter des images captivantes dans une mise en page harmonieuse.",
    "shortDescriptionContent": "",
    "showInTrack": true,
    "iconBanner": "tutorial-2598-icon-banner.svg",
    "chapters": [
      {
        "id": 14385,
        "title": "Galerie",
        "type": "practiceLevel3",
        "lessons": [
          {
            "title": "Start",
            "id": 128015,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Bienvenue dans le projet **Galerie**. Tu vas construire une galerie d'images visuellement attrayante.\n\nMais ce n'est pas tout ! En cliquant sur l'image de chaque chat, une version plus grande de l'image apparaîtra dans une fenêtre modale (une fenêtre pop-up). C'est une fonctionnalité courante sur de nombreux sites web, en particulier les plateformes de commerce électronique, les sites d'actualités et les portfolios.\n\n1. Commence avec la structure HTML de base, incluant `<!doctype html>`, `html`, `head`, et `body` tag.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": true,
              "files": [
                {
                  "name": "index.html",
                  "codeLanguage": "html",
                  "content": "",
                  "solvedContent": "<!doctype html>\n<html>\n  <head>\n  </head>\n  <body>\n  </body>\n</html>"
                },
                {
                  "name": "style.css",
                  "codeLanguage": "css",
                  "content": "",
                  "solvedContent": null
                },
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "",
                  "solvedContent": ""
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Linking",
            "id": 128016,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Ajoutons un titre. Nous devrons également lier nos fichiers JS et CSS.\n\n1. Ajoute un titre à la page web à l'intérieur de la balise `head`.\n2. Inclue une balise `title` avec du texte.\n3. Ajoute un lien vers le fichier CSS en ajoutant `<link rel=\"stylesheet\" href=\"style.css\">`.\n4. Ajoute un lien vers le fichier JS en ajoutant `  <script src=\"script.js\"></script>`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": true,
              "files": [
                {
                  "name": "index.html",
                  "codeLanguage": "html",
                  "content": "<!doctype html>\n<html>\n  <head>\n  </head>\n  <body>\n  </body>\n</html>",
                  "solvedContent": "<!doctype html>\n<html>\n  <head>\n    <title>Modal Gallery</title>\n    <link rel=\"stylesheet\" href=\"style.css\">\n  </head>\n  <body>\n    <script src=\"script.js\"></script>\n  </body>\n</html>"
                },
                {
                  "name": "style.css",
                  "codeLanguage": "css",
                  "content": "",
                  "solvedContent": null
                },
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "",
                  "solvedContent": ""
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Header and container",
            "id": 128017,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Chaque page web bénéficie d'un en-tête clair qui informe les utilisateurs du sujet de la page. Nous devons également créer un conteneur pour nos images.\n\n1. À l'intérieur des balises `<body>`, ajoute une balise `<h1>` avec le texte de ton choix.\n2. Après le `<h1>`, crée un `div` avec une classe `\"gallery\"`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": true,
              "files": [
                {
                  "name": "index.html",
                  "codeLanguage": "html",
                  "content": "<!doctype html>\n<html>\n  <head>\n    <title>Modal Gallery</title>\n    <link rel=\"stylesheet\" href=\"style.css\">\n  </head>\n  <body>\n  </body>\n  <script src=\"script.js\"></script>\n</html>",
                  "solvedContent": "<!doctype html>\n<html>\n  <head>\n    <title>Modal Gallery</title>\n    <link rel=\"stylesheet\" href=\"style.css\">\n  </head>\n  <body>\n    <h1>Welcome to my gallery!</h1>\n    <div class=\"gallery\">\n    </div>\n  </body>\n  <script src=\"script.js\"></script>\n</html>"
                },
                {
                  "name": "style.css",
                  "codeLanguage": "css",
                  "content": "",
                  "solvedContent": null
                },
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "",
                  "solvedContent": ""
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Adding an item",
            "id": 128018,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Dans notre galerie, nous aurons des entrées pour chaque élément. Nous utiliserons les chats comme exemple, mais n'hésite pas à utiliser ce que tu veux. Commençons par ajouter un titre et une image pour le premier chat.\n\n1. À l'intérieur de notre conteneur (le `div` avec la classe `\"gallery\"`), crée un `div` avec une classe de `\"item\"`.\n2. À l'intérieur de l'élément, ajoute une image de ton choix. (Ou utilise `https://mimo.app/i/whispurr.png`.)\n3. Sous l'image, ajoute un élément `<h2>` et donne-lui un titre. (Ou utilise `Whispurr` si tu veux suivre l'exemple du chat.)\n4. Si tu le souhaites, tu peux aussi ajouter un paragraphe pour une description de l'image.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": true,
              "files": [
                {
                  "name": "index.html",
                  "codeLanguage": "html",
                  "content": "<!doctype html>\n<html>\n  <head>\n    <title>Modal Gallery</title>\n    <link rel=\"stylesheet\" href=\"style.css\">\n  </head>\n  <body>\n    <h1>Welcome to my gallery!</h1>\n    <div class=\"gallery\">\n    </div>\n  </body>\n  <script src=\"script.js\"></script>\n</html>",
                  "solvedContent": "<!doctype html>\n<html>\n  <head>\n    <title>Modal Gallery</title>\n    <link rel=\"stylesheet\" href=\"style.css\">\n  </head>\n  <body>\n    <h1>Welcome to my gallery!</h1>\n    <div class=\"gallery\">\n      <div class=\"item\">\n       <img src=\"https://mimo.app/i/whispurr.png\">\n        <h2>Whispurr</h2>\n      </div>\n    </div>\n  </body>\n  <script src=\"script.js\"></script>\n</html>"
                },
                {
                  "name": "style.css",
                  "codeLanguage": "css",
                  "content": "",
                  "solvedContent": null
                },
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "",
                  "solvedContent": ""
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Image attributes",
            "id": 128019,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Ajoutons plus d'informations à l'élément image.\n\n1. Ajoute la classe `\"thumbnail\"` à l'image pour la référencer dans notre code CSS.\n3. Ajoute un attribut `alt` à l'image qui décrit l'image.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": true,
              "files": [
                {
                  "name": "index.html",
                  "codeLanguage": "html",
                  "content": "<!doctype html>\n<html>\n  <head>\n    <title>Modal Gallery</title>\n    <link rel=\"stylesheet\" href=\"style.css\">\n  </head>\n  <body>\n    <h1>Welcome to my gallery!</h1>\n    <div class=\"gallery\">\n      <div class=\"item\">\n       <img src=\"https://mimo.app/i/whispurr.png\">\n        <h2>Whispurr</h2>\n      </div>\n    </div>\n  </body>\n  <script src=\"script.js\"></script>\n</html>",
                  "solvedContent": "<!doctype html>\n<html>\n  <head>\n    <title>Modal Gallery</title>\n    <link rel=\"stylesheet\" href=\"style.css\">\n  </head>\n  <body>\n    <h1>Welcome to my gallery!</h1>\n    <div class=\"gallery\">\n      <div class=\"item\">\n        <img src=\"https://mimo.app/i/whispurr.png\" alt=\"Whispurr\" class=\"thumbnail\">\n        <h2>Whispurr</h2>\n      </div>\n    </div>\n  </body>\n  <script src=\"script.js\"></script>\n</html>"
                },
                {
                  "name": "style.css",
                  "codeLanguage": "css",
                  "content": "",
                  "solvedContent": null
                },
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "",
                  "solvedContent": ""
                }
              ],
              "hints": [
                {
                  "title": "Why use alt?",
                  "content": "Using the alt attribute for images in HTML is best practice because it:\n1. Improves accessibility by providing a textual description for visually impaired users using screen readers.\n2. Enhances SEO by helping search engines understand the image content.\n3. Ensures usability by displaying the alt text in case the image fails to load.\n\nIn essence, the alt attribute makes web content more inclusive, searchable, and user-friendly."
                }
              ]
            }
          },
          {
            "title": "More items",
            "id": 128020,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Ajoutons plus d'éléments à la galerie.\n\nSi tu veux continuer avec l'exemple du chat, n'hésite pas à utiliser les entrées suivantes :\n- Babaganoosh : `https://mimo.app/i/babaganoosh.png`\n- Nacho : `https://mimo.app/i/nacho.png`\n\n1. Ajoute autant d'éléments que tu veux.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": true,
              "files": [
                {
                  "name": "index.html",
                  "codeLanguage": "html",
                  "content": "<!doctype html>\n<html>\n  <head>\n    <title>Modal Gallery</title>\n    <link rel=\"stylesheet\" href=\"style.css\">\n  </head>\n  <body>\n    <h1>Welcome to my gallery!</h1>\n    <div class=\"gallery\">\n      <div class=\"item\">\n        <img src=\"https://mimo.app/i/whispurr.png\" alt=\"Whispurr\" class=\"thumbnail\">\n        <h2>Whispurr</h2>\n      </div>\n    </div>\n  </body>\n  <script src=\"script.js\"></script>\n</html>",
                  "solvedContent": "<!doctype html>\n<html>\n  <head>\n    <title>Modal Gallery</title>\n    <link rel=\"stylesheet\" href=\"style.css\">\n  </head>\n  <body>\n    <h1>Welcome to my gallery!</h1>\n    <div class=\"gallery\">\n      <div class=\"item\">\n        <img src=\"https://mimo.app/i/whispurr.png\" alt=\"Whispurr\" class=\"thumbnail\">\n        <h2>Whispurr</h2>\n      </div>\n      <div class=\"item\">\n        <img src=\"https://mimo.app/i/babaganoosh.png\" alt=\"Babaganoosh\" class=\"thumbnail\">\n        <h2>Babaganoosh</h2>\n      </div>\n      <div class=\"item\">\n        <img src=\"https://mimo.app/i/nacho.png\" alt=\"Nacho\" class=\"thumbnail\">\n        <h2>Nacho</h2>\n      </div>\n    </div>\n  </body>\n  <script src=\"script.js\"></script>\n</html>"
                },
                {
                  "name": "style.css",
                  "codeLanguage": "css",
                  "content": "",
                  "solvedContent": null
                },
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "",
                  "solvedContent": ""
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Styling the body",
            "id": 128021,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Il est temps d'ajouter un peu de CSS.\n\n1. Définissons la `font-family` du `body` et de tous ses enfants à `Arial, sans-serif`.\n2. Définis le `padding` et la `margin` pour le `body` à `0`.",
              "preselectedFileIndex": 1,
              "hasVisualOutput": true,
              "files": [
                {
                  "name": "index.html",
                  "codeLanguage": "html",
                  "content": "<!doctype html>\n<html>\n  <head>\n    <title>Modal Gallery</title>\n    <link rel=\"stylesheet\" href=\"style.css\">\n  </head>\n  <body>\n    <h1>Welcome to my gallery!</h1>\n    <div class=\"gallery\">\n      <div class=\"item\">\n        <img src=\"https://mimo.app/i/whispurr.png\" alt=\"Whispurr\" class=\"thumbnail\">\n        <h2>Whispurr</h2>\n      </div>\n      <div class=\"item\">\n        <img src=\"https://mimo.app/i/babaganoosh.png\" alt=\"Babaganoosh\" class=\"thumbnail\">\n        <h2>Babaganoosh</h2>\n      </div>\n      <div class=\"item\">\n        <img src=\"https://mimo.app/i/nacho.png\" alt=\"Nacho\" class=\"thumbnail\">\n        <h2>Nacho</h2>\n      </div>\n    </div>\n  </body>\n  <script src=\"script.js\"></script>\n</html>",
                  "solvedContent": null
                },
                {
                  "name": "style.css",
                  "codeLanguage": "css",
                  "content": "",
                  "solvedContent": "body {\n    font-family: Arial, sans-serif;\n    margin: 0px;\n    padding: 0;\n}"
                },
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "",
                  "solvedContent": ""
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Styling the header",
            "id": 128022,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Les en-têtes sont essentiels pour attirer l'attention. Stylisons les nôtres.\n\n1. Ajoute du style pour centrer l'élément `h1` en utilisant `text-align: center`.\n2. Ajoute un peu d'espace en dessous. `40px` semble bien, mais fais comme tu le sens.",
              "preselectedFileIndex": 1,
              "hasVisualOutput": true,
              "files": [
                {
                  "name": "index.html",
                  "codeLanguage": "html",
                  "content": "<!doctype html>\n<html>\n  <head>\n    <title>Modal Gallery</title>\n    <link rel=\"stylesheet\" href=\"style.css\">\n  </head>\n  <body>\n    <h1>Welcome to my gallery!</h1>\n    <div class=\"gallery\">\n      <div class=\"item\">\n        <img src=\"https://mimo.app/i/whispurr.png\" alt=\"Whispurr\" class=\"thumbnail\">\n        <h2>Whispurr</h2>\n      </div>\n      <div class=\"item\">\n        <img src=\"https://mimo.app/i/babaganoosh.png\" alt=\"Babaganoosh\" class=\"thumbnail\">\n        <h2>Babaganoosh</h2>\n      </div>\n      <div class=\"item\">\n        <img src=\"https://mimo.app/i/nacho.png\" alt=\"Nacho\" class=\"thumbnail\">\n        <h2>Nacho</h2>\n      </div>\n    </div>\n  </body>\n  <script src=\"script.js\"></script>\n</html>",
                  "solvedContent": null
                },
                {
                  "name": "style.css",
                  "codeLanguage": "css",
                  "content": "body {\n    font-family: Arial, sans-serif;\n    margin: 0;\n    padding: 0;\n}",
                  "solvedContent": "body {\n    font-family: Arial, sans-serif;\n    margin: 0;\n    padding: 0;\n}\n\nh1 {\n    text-align: center;\n    margin-bottom: 30px;\n}"
                },
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "",
                  "solvedContent": ""
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Flexbox",
            "id": 128023,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Flexbox est un modèle de mise en page moderne qui permet aux éléments d'un conteneur d'être arrangés de manière dynamique. Utilisons-le pour notre galerie.\n\n1. Stylise la classe `.gallery` pour afficher ses enfants dans une mise en page flex en utilisant `display: flex;`.\n2. Centre les éléments horizontalement en utilisant `justify-content`.\n3. Permets aux éléments de passer à la ligne suivante s'il n'y a pas assez d'espace en définissant `flex-wrap` à `wrap`.\n4. Enfin, définis un `gap` de `20px`.",
              "preselectedFileIndex": 1,
              "hasVisualOutput": true,
              "files": [
                {
                  "name": "index.html",
                  "codeLanguage": "html",
                  "content": "<!doctype html>\n<html>\n  <head>\n    <title>Modal Gallery</title>\n    <link rel=\"stylesheet\" href=\"style.css\">\n  </head>\n  <body>\n    <h1>Welcome to my gallery!</h1>\n    <div class=\"gallery\">\n      <div class=\"item\">\n        <img src=\"https://mimo.app/i/whispurr.png\" alt=\"Whispurr\" class=\"thumbnail\">\n        <h2>Whispurr</h2>\n      </div>\n      <div class=\"item\">\n        <img src=\"https://mimo.app/i/babaganoosh.png\" alt=\"Babaganoosh\" class=\"thumbnail\">\n        <h2>Babaganoosh</h2>\n      </div>\n      <div class=\"item\">\n        <img src=\"https://mimo.app/i/nacho.png\" alt=\"Nacho\" class=\"thumbnail\">\n        <h2>Nacho</h2>\n      </div>\n    </div>\n  </body>\n  <script src=\"script.js\"></script>\n</html>",
                  "solvedContent": null
                },
                {
                  "name": "style.css",
                  "codeLanguage": "css",
                  "content": "body {\n    font-family: Arial, sans-serif;\n    margin: 0;\n    padding: 0;\n}\n\nh1 {\n    text-align: center;\n    margin-bottom: 30px;\n}",
                  "solvedContent": "body {\n    font-family: Arial, sans-serif;\n    margin: 0;\n    padding: 0;\n}\n\nh1 {\n    text-align: center;\n    margin-bottom: 30px;\n}\n\n.gallery {\n    display: flex;\n    justify-content: center;\n    flex-wrap: wrap;\n    gap: 20px;\n}"
                },
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "",
                  "solvedContent": ""
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Animation",
            "id": 128024,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Les images attirent l'œil ! Donnons-leur un peu de style et faisons en sorte que nos vignettes grandissent légèrement au survol.\n\n1. Crée une règle `.thumbnail` et définis `transition: transform 0.3s;` pour indiquer à CSS d'animer les changements.\n2. Crée une règle `.thumbnail:hover` et ajoute une propriété transform en codant `transform: scale(1.1);`.",
              "preselectedFileIndex": 1,
              "hasVisualOutput": true,
              "files": [
                {
                  "name": "index.html",
                  "codeLanguage": "html",
                  "content": "<!doctype html>\n<html>\n  <head>\n    <title>Modal Gallery</title>\n    <link rel=\"stylesheet\" href=\"style.css\">\n  </head>\n  <body>\n    <h1>Welcome to my gallery!</h1>\n    <div class=\"gallery\">\n      <div class=\"item\">\n        <img src=\"https://mimo.app/i/whispurr.png\" alt=\"Whispurr\" class=\"thumbnail\">\n        <h2>Whispurr</h2>\n      </div>\n      <div class=\"item\">\n        <img src=\"https://mimo.app/i/babaganoosh.png\" alt=\"Babaganoosh\" class=\"thumbnail\">\n        <h2>Babaganoosh</h2>\n      </div>\n      <div class=\"item\">\n        <img src=\"https://mimo.app/i/nacho.png\" alt=\"Nacho\" class=\"thumbnail\">\n        <h2>Nacho</h2>\n      </div>\n    </div>\n  </body>\n  <script src=\"script.js\"></script>\n</html>",
                  "solvedContent": null
                },
                {
                  "name": "style.css",
                  "codeLanguage": "css",
                  "content": "body {\n    font-family: Arial, sans-serif;\n    margin: 0;\n    padding: 0;\n}\n\nh1 {\n    text-align: center;\n    margin-bottom: 30px;\n}\n\n.gallery {\n    display: flex;\n    justify-content: center;\n    flex-wrap: wrap;\n    gap: 20px;\n}",
                  "solvedContent": "body {\n    font-family: Arial, sans-serif;\n    margin: 0;\n    padding: 0;\n}\n\nh1 {\n    text-align: center;\n    margin-bottom: 30px;\n}\n\n.gallery {\n    display: flex;\n    justify-content: center;\n    flex-wrap: wrap;\n    gap: 20px;\n}\n\n.thumbnail {\n    transition: transform 0.3s;\n}\n\n.thumbnail:hover {\n    transform: scale(1.1);\n}"
                },
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "",
                  "solvedContent": ""
                }
              ],
              "hints": [
                {
                  "title": "What am I supposed to do?",
                  "content": "You want to add two rules that both target the `.thumbnail` class. The first one sets the `transition` and the second the `transform` attribute for the `hover` state.\n\nThis is how your code should look like:\n\n```CSS\n.thumbnail {\n    transition: transform 0.3s;\n}\n.thumbnail:hover {\n    transform: scale(1.1);\n}\n```"
                }
              ]
            }
          }
        ]
      }
    ]
  }
}