{
  "tutorial": {
    "id": 3138,
    "version": 3,
    "type": "guidedProject",
    "isNew": true,
    "codeLanguage": "node",
    "title": "Grille de pixels - Partie 1",
    "descriptionContent": "Crée une application de dessin collaborative qui permet à tes utilisateurs d'être créatifs. Dans la première partie, tu configureras le back-end initial.",
    "shortDescriptionContent": "",
    "showInTrack": true,
    "iconBanner": "tutorial-3138-icon-banner.svg",
    "chapters": [
      {
        "id": 15457,
        "title": "Chapitre #1",
        "type": "practiceLevel3",
        "lessons": [
          {
            "title": "Lesson #1",
            "id": 135904,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Bienvenue dans le projet **Pixel Grid**. Nous allons construire le back-end et le front-end d'une application de dessin collaborative qui permet à tes utilisateurs d'être créatifs. Le back-end stockera la grille de 20 x 20 pixels et la couleur de chaque case de la grille. Le front-end consommera l'API du back-end pour afficher la grille et mettre à jour les valeurs des pixels en fonction des entrées des utilisateurs.\n\nNous allons commencer par configurer le back-end en utilisant un serveur Express.\n\n1. Déclare une variable `express` et requiers le module `express`.\n2. Déclare une variable `app` et initialise-la en appelant la fonction `express`.\n3. Déclare une variable `PORT` et assigne-lui la valeur `3000`.\n4. Utilise la fonction `listen` sur `app` pour que l'application écoute sur le port spécifié par la variable `PORT`.\n5. Log un message dans la console à l'intérieur du callback de la fonction `listen` pour que nous sachions que notre serveur fonctionne correctement.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "app.js",
                  "codeLanguage": "javascript",
                  "content": "",
                  "solvedContent": "const express = require(\"express\");\nconst app = express();\nconst PORT = 3000;\n\napp.listen(PORT, () => {\n  console.log(`Server is running on port ${PORT}`);\n});"
                },
                {
                  "name": "database.js",
                  "codeLanguage": "javascript",
                  "content": "",
                  "solvedContent": null
                }
              ],
              "hints": [],
              "httpOptions": {
                "method": "GET",
                "path": "/",
                "body": null
              }
            }
          },
          {
            "title": "Lesson #2",
            "id": 135905,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Nous allons enregistrer les dessins de nos utilisateurs dans une base de données SQLite. Pour cela, nous utiliserons la bibliothèque `better-sqlite3`.\n\n1. Dans `database.js`, importe le module `better-sqlite3` en utilisant `require(\"better-sqlite3\")`. Assigne l'objet résultant à une constante nommée `Database`.\n2. Crée une nouvelle base de données SQLite nommée `grid.db` en invoquant `new Database(\"/tmp/grid.db\")`. Enregistre l'objet de la base de données dans une constante nommée `db`.",
              "preselectedFileIndex": 1,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "app.js",
                  "codeLanguage": "javascript",
                  "content": "const express = require(\"express\");\nconst app = express();\nconst PORT = 3000;\n\napp.listen(PORT, () => {\n  console.log(`Server is running on port ${PORT}`);\n});\n",
                  "solvedContent": null
                },
                {
                  "name": "database.js",
                  "codeLanguage": "javascript",
                  "content": "",
                  "solvedContent": "const Database = require(\"better-sqlite3\");\nconst db = new Database(\"/tmp/grid.db\");\n"
                }
              ],
              "hints": [],
              "httpOptions": {
                "method": "GET",
                "path": "/",
                "body": null
              }
            }
          },
          {
            "title": "Lesson #3",
            "id": 135906,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Une fois la base de données configurée, nous allons créer une table `grid` pour stocker les données de la grille. Chaque entrée dans cette table représentera un pixel. Nous avons besoin de colonnes pour les coordonnées `x` et `y` ainsi que pour la couleur que le pixel doit afficher.\n\n1. Utilise la méthode `db.exec` pour exécuter une commande SQL.\n2. En tant qu'argument de la méthode `db.exec`, ajoute une commande SQL pour créer une table `grid` avec les colonnes suivantes :\n   - `x`: int\n   - `y`: int\n   - `color`: text\n3. Pour éviter d'ajouter de plus en plus de pixels à la base de données chaque fois que le fichier `database.js` est exécuté, modifie la commande SQL pour créer la table uniquement si elle n'existe pas déjà.",
              "preselectedFileIndex": 1,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "app.js",
                  "codeLanguage": "javascript",
                  "content": "const express = require(\"express\");\nconst app = express();\nconst PORT = 3000;\n\napp.listen(PORT, () => {\n  console.log(`Server is running on port ${PORT}`);\n});\n",
                  "solvedContent": null
                },
                {
                  "name": "database.js",
                  "codeLanguage": "javascript",
                  "content": "const Database = require(\"better-sqlite3\");\nconst db = new Database(\"/tmp/grid.db\");\n",
                  "solvedContent": "const Database = require(\"better-sqlite3\");\nconst db = new Database(\"/tmp/grid.db\");\n\ndb.exec(`\n  CREATE TABLE IF NOT EXISTS grid (\n    x INT,\n    y INT,\n    color TEXT\n  )\n`);\n"
                }
              ],
              "hints": [],
              "httpOptions": {
                "method": "GET",
                "path": "/",
                "body": null
              }
            }
          },
          {
            "title": "Lesson #5",
            "id": 135908,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Pour permettre à la connexion de la base de données d'être utilisée dans d'autres fichiers, nous devons l'exporter.\n\n1. En utilisant `module.exports`, exporte `db` à la fin du fichier.",
              "preselectedFileIndex": 1,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "app.js",
                  "codeLanguage": "javascript",
                  "content": "const express = require(\"express\");\nconst app = express();\nconst PORT = 3000;\n\napp.listen(PORT, () => {\n  console.log(`Server is running on port ${PORT}`);\n});\n",
                  "solvedContent": null
                },
                {
                  "name": "database.js",
                  "codeLanguage": "javascript",
                  "content": "const Database = require(\"better-sqlite3\");\nconst db = new Database(\"/tmp/grid.db\");\n\ndb.exec(`\n  CREATE TABLE IF NOT EXISTS grid (\n    x INT,\n    y INT,\n    color TEXT\n  )\n`);\n",
                  "solvedContent": "const Database = require(\"better-sqlite3\");\nconst db = new Database(\"/tmp/grid.db\");\n\ndb.exec(`\n  CREATE TABLE IF NOT EXISTS grid (\n    x INT,\n    y INT,\n    color TEXT\n  )\n`);\n\nmodule.exports = db;\n"
                }
              ],
              "hints": [],
              "httpOptions": {
                "method": "GET",
                "path": "/",
                "body": null
              }
            }
          },
          {
            "title": "Lesson #6",
            "id": 135909,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Dans notre application Express, nous allons nous connecter à la base de données SQLite en utilisant le fichier `database.js`.\n\n1. Importe le module `db` que tu as exporté depuis le fichier de base de données avec l'instruction `require` dans le fichier de l'application.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "app.js",
                  "codeLanguage": "javascript",
                  "content": "const express = require(\"express\");\nconst app = express();\nconst PORT = 3000;\n\napp.listen(PORT, () => {\n  console.log(`Server is running on port ${PORT}`);\n});\n",
                  "solvedContent": "const express = require(\"express\");\nconst db = require(\"./database\");\nconst app = express();\nconst PORT = 3000;\n\napp.listen(PORT, () => {\n  console.log(`Server is running on port ${PORT}`);\n});\n"
                },
                {
                  "name": "database.js",
                  "codeLanguage": "javascript",
                  "content": "const Database = require(\"better-sqlite3\");\nconst db = new Database(\"/tmp/grid.db\");\n\ndb.exec(`\n  CREATE TABLE IF NOT EXISTS grid (\n    x INT,\n    y INT,\n    color TEXT\n  )\n`);\n\nmodule.exports = db;\n",
                  "solvedContent": null
                }
              ],
              "hints": [],
              "httpOptions": {
                "method": "GET",
                "path": "/",
                "body": null
              }
            }
          },
          {
            "title": "Lesson #4",
            "id": 135907,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Nous pouvons accéder à la base de données, et la table de la grille est prête. Ensuite, nous allons remplir la table avec quelques points de grille par défaut comme données initiales. Bien sûr, nous n'aurons besoin de remplir la table que si elle est encore vide.\n\n1. Pour vérifier si nous devons remplir la table avec des données initiales, utilisez une instruction SQL pour compter le nombre de lignes existantes dans la table et stockez la valeur de retour dans une constante comme `rowCount`.\n2. Créez une grille avec 400 objets de points de grille. Chaque objet doit avoir une propriété *x* et une propriété *y* représentant les coordonnées, ainsi qu'une propriété *color*.\n   - Utilisez deux boucles `for` imbriquées pour créer une grille de 400 objets.\n   - La boucle extérieure doit représenter les lignes (valeurs x de `0` à `19`).\n   - La boucle intérieure doit représenter les colonnes (valeurs y de `0` à `19`).\n   - Chaque objet de la grille doit avoir la couleur \"white\".\n   - Stockez tous ces objets dans un seul tableau.\n3. Insérez la grille dans la base de données s'il n'y a pas encore de lignes dans la table de la grille.\n   - Préparez une instruction `INSERT INTO` comme `INSERT INTO grid (x, y, color) VALUES (?, ?, ?)`.\n   - Utilisez `db.transaction` pour regrouper toutes les insertions pour une meilleure performance et fiabilité.\n   - Exécutez la transaction définie et passez-lui le tableau des objets de la grille pour insérer les 400 points de grille dans la base de données en une seule opération.",
              "preselectedFileIndex": 1,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "app.js",
                  "codeLanguage": "javascript",
                  "content": "const express = require(\"express\");\nconst db = require(\"./database\");\nconst app = express();\nconst PORT = 3000;\n\napp.listen(PORT, () => {\n  console.log(`Server is running on port ${PORT}`);\n});\n",
                  "solvedContent": null
                },
                {
                  "name": "database.js",
                  "codeLanguage": "javascript",
                  "content": "const Database = require(\"better-sqlite3\");\nconst db = new Database(\"/tmp/grid.db\");\n\ndb.exec(`\n  CREATE TABLE IF NOT EXISTS grid (\n    x INT,\n    y INT,\n    color TEXT\n  )\n`);\n\nmodule.exports = db;\n",
                  "solvedContent": "const Database = require(\"better-sqlite3\");\nconst db = new Database(\"/tmp/grid.db\");\n\ndb.exec(`\n  CREATE TABLE IF NOT EXISTS grid (\n    x INT,\n    y INT,\n    color TEXT\n  )\n`);\n\nconst rowCount = db.prepare(\"SELECT COUNT(*) AS count FROM grid\").get().count;\n\nif (rowCount === 0) {\n  const grid = [];\n  for (let x = 0; x < 20; x++) {\n    for (let y = 0; y < 20; y++) {\n      grid.push({ x, y, color: \"white\" });\n    }\n  }\n\n  const insertStatement = db.prepare(\n    `INSERT INTO grid (x, y, color) VALUES (?, ?, ?)`,\n  );\n  const insertTransaction = db.transaction((rows) => {\n    for (const row of rows) {\n      insertStatement.run(row.x, row.y, row.color);\n    }\n  });\n\n  insertTransaction(grid);\n}\n\nmodule.exports = db;\n"
                }
              ],
              "hints": [],
              "httpOptions": {
                "method": "GET",
                "path": "/",
                "body": null
              }
            }
          },
          {
            "title": "Lesson #7",
            "id": 135910,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Ensuite, configurons une route `\"/grid\"` pour obtenir les données de la grille, permettant ainsi au front-end d'accéder aux données de la base de données. Nous utiliserons ce point de terminaison pour récupérer toutes les lignes de notre table de grille et les envoyer sous forme de réponse JSON.\n\n1. Définis un nouveau point de terminaison `\"/grid\"`.\n2. À l'intérieur de la route, écris une commande SQL `SELECT` avec `db.prepare(\"SELECT ...\").all()` pour récupérer toutes les lignes de la grille.\n3. Envoie les lignes récupérées en tant que réponse JSON avec une propriété appelée *grid*. Assure-toi de définir le statut à `200`.\n4. Utilise un bloc `try-catch` pour gérer les erreurs potentielles. Si tu rencontres une erreur, définis le statut à `500` et renvoie une réponse JSON avec une propriété *message* qui informe le client qu'il y a eu un problème.\n\nDans la prochaine partie du projet, nous utiliserons ce point de terminaison pour afficher la grille.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "app.js",
                  "codeLanguage": "javascript",
                  "content": "const express = require(\"express\");\nconst db = require(\"./database\");\nconst app = express();\nconst PORT = 3000;\n\n\napp.listen(PORT, () => {\n  console.log(`Server is running on port ${PORT}`);\n});\n",
                  "solvedContent": "const express = require(\"express\");\nconst db = require(\"./database\");\nconst app = express();\nconst PORT = 3000;\n\napp.get(\"/grid\", (req, res) => {\n  try {\n    const rows = db.prepare(\"SELECT * FROM grid\").all();\n    res.status(200).json({ grid: rows });\n  } catch (error) {\n    res.status(500).json({ message: \"Error fetching grid data\", error });\n  }\n});\n\napp.listen(PORT, () => {\n  console.log(`Server is running on port ${PORT}`);\n});\n"
                },
                {
                  "name": "database.js",
                  "codeLanguage": "javascript",
                  "content": "const Database = require(\"better-sqlite3\");\nconst db = new Database(\"/tmp/grid.db\");\n\ndb.exec(`\n  CREATE TABLE IF NOT EXISTS grid (\n    x INT,\n    y INT,\n    color TEXT\n  )\n`);\n\nconst rowCount = db.prepare(\"SELECT COUNT(*) AS count FROM grid\").get().count;\n\nif (rowCount === 0) {\n  const grid = [];\n  for (let x = 0; x < 20; x++) {\n    for (let y = 0; y < 20; y++) {\n      grid.push({ x, y, color: \"white\" });\n    }\n  }\n\n  const insertStatement = db.prepare(\n    `INSERT INTO grid (x, y, color) VALUES (?, ?, ?)`,\n  );\n  const insertTransaction = db.transaction((rows) => {\n    for (const row of rows) {\n      insertStatement.run(row.x, row.y, row.color);\n    }\n  });\n\n  insertTransaction(grid);\n}\n\nmodule.exports = db;\n",
                  "solvedContent": null
                }
              ],
              "hints": [],
              "httpOptions": {
                "method": "GET",
                "path": "/grid",
                "body": null
              }
            }
          },
          {
            "title": "Lesson #7 - Copy",
            "id": 135937,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Avant de pouvoir passer au front-end, nous devons autoriser CORS, qui signifie *Cross-Origin Resource Sharing*. CORS est un mécanisme qui permet à un serveur d'accepter des requêtes provenant d'un domaine différent tout en assurant des interactions sécurisées entre les serveurs et les clients front-end hébergés sur des origines différentes. Nous aurons besoin de CORS car le back-end sera hébergé sur un domaine différent de celui du front-end, ce que les navigateurs restreignent par défaut pour des raisons de sécurité.\n\nEn important le package CORS, nous pouvons autoriser CORS et activer les requêtes cross-origin sur notre serveur.\n\n1. Requiers le package `\"cors\"` et assigne-le à une variable appelée `cors`.\n2. Fais en sorte que l'application utilise le middleware importé `cors` en appelant `app.use` et en passant la fonction `cors()` comme paramètre.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "app.js",
                  "codeLanguage": "javascript",
                  "content": "const express = require(\"express\");\nconst db = require(\"./database\");\nconst app = express();\nconst PORT = 3000;\n\napp.get(\"/grid\", (req, res) => {\n  try {\n    const rows = db.prepare(\"SELECT * FROM grid\").all();\n    res.status(200).json({ grid: rows });\n  } catch (error) {\n    res.status(500).json({ message: \"Error fetching grid data\", error });\n  }\n});\n\napp.listen(PORT, () => {\n  console.log(`Server is running on port ${PORT}`);\n});\n",
                  "solvedContent": "const express = require(\"express\");\nconst cors = require(\"cors\");\nconst db = require(\"./database\");\nconst app = express();\nconst PORT = 3000;\n\napp.use(cors());\n\napp.get(\"/grid\", (req, res) => {\n  try {\n    const rows = db.prepare(\"SELECT * FROM grid\").all();\n    res.status(200).json({ grid: rows });\n  } catch (error) {\n    res.status(500).json({ message: \"Error fetching grid data\", error });\n  }\n});\n\napp.listen(PORT, () => {\n  console.log(`Server is running on port ${PORT}`);\n});\n"
                },
                {
                  "name": "database.js",
                  "codeLanguage": "javascript",
                  "content": "const Database = require(\"better-sqlite3\");\nconst db = new Database(\"/tmp/grid.db\");\n\ndb.exec(`\n  CREATE TABLE IF NOT EXISTS grid (\n    x INT,\n    y INT,\n    color TEXT\n  )\n`);\n\nconst rowCount = db.prepare(\"SELECT COUNT(*) AS count FROM grid\").get().count;\n\nif (rowCount === 0) {\n  const grid = [];\n  for (let x = 0; x < 20; x++) {\n    for (let y = 0; y < 20; y++) {\n      grid.push({ x, y, color: \"white\" });\n    }\n  }\n\n  const insertStatement = db.prepare(\n    `INSERT INTO grid (x, y, color) VALUES (?, ?, ?)`,\n  );\n  const insertTransaction = db.transaction((rows) => {\n    for (const row of rows) {\n      insertStatement.run(row.x, row.y, row.color);\n    }\n  });\n\n  insertTransaction(grid);\n}\n\nmodule.exports = db;\n",
                  "solvedContent": null
                }
              ],
              "hints": [],
              "httpOptions": {
                "method": "GET",
                "path": "/grid",
                "body": null
              }
            }
          }
        ]
      }
    ]
  }
}