{
  "tutorial": {
    "id": 2654,
    "version": 5,
    "type": "challenges",
    "isNew": false,
    "codeLanguage": "python",
    "title": "Opérations sur les chaînes et les listes",
    "descriptionContent": "Défis basés sur les opérations sur les chaînes et les listes",
    "shortDescriptionContent": "",
    "showInTrack": true,
    "iconBanner": null,
    "chapters": [
      {
        "id": 14682,
        "title": "Listes d'étudiants",
        "type": "challengeLevel0",
        "lessons": [
          {
            "title": "Students Lists",
            "id": 129710,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Un enseignant souhaite créer une liste avec tous les noms des élèves de sa classe. Il a reçu une longue chaîne contenant tous les noms, chaque nom étant séparé par une virgule `,`.\n\nAide-le à créer une liste `names_list` qui stocke les noms individuels séparés par une virgule. Ensuite, affiche la liste.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "student_names = \"Samantha,Mcgrath,Peyton,Kerim,Nadia,Sandra,Sarah,Alex\"",
                  "solvedContent": "student_names = \"Samantha,Mcgrath,Peyton,Kerim,Nadia,Sandra,Sarah,Alex\"\nnames_list = student_names.split(\",\");\nprint(names_list)"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 14683,
        "title": "Changement de stack technologique",
        "type": "challengeLevel0",
        "lessons": [
          {
            "title": "Tech Stack Change",
            "id": 129711,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Tu travailles comme développeur de logiciels et tu as décidé d'utiliser un ensemble spécifique de technologies de programmation pour ta prochaine application. Dans une demande de dernière minute du client, tu as accepté d'utiliser React au lieu d'Angular.\n\n1. Réassigne `tech_stack` et utilise une opération sur les chaînes de caractères pour remplacer \"Angular\" par \"React\".\n2. Crée une variable `tech_stack_list` qui stocke les noms de `tech_stack` sous forme de liste.\n3. Imprime `tech_stack_list`",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "tech_stack = \"Angular Node Mongo Express\"",
                  "solvedContent": "tech_stack = \"Angular Node Mongo Express\"\ntech_stack = tech_stack.replace(\"Angular\", \"React\")\ntech_stack_list = tech_stack.split()\nprint(tech_stack_list)"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 14684,
        "title": "DVDs les plus vendus",
        "type": "challengeLevel0",
        "lessons": [
          {
            "title": "Top Selling DVDs",
            "id": 129712,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Un magasin de location de DVD souhaite mettre à jour son site web avec un en-tête qui liste leurs films les plus vendus.\n\n1. Crée une nouvelle variable `new_top_movies` qui remplace la valeur `\"Trapped\"` de `old_top_movies` par `\"Moonfall\"`. Garde à l'esprit que ces titres sont sensibles à la casse.\n2. Imprime la nouvelle liste.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "old_top_movies = \"The Power of the Dog - Trapped - Tenet\"\n",
                  "solvedContent": "old_top_movies = \"The Power of the Dog - Trapped - Tenet\"\nnew_top_movies = old_top_movies.replace(\"Trapped\", \"Moonfall\")\nprint(new_top_movies)\n"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 14685,
        "title": "Liste recommandée de films",
        "type": "challengeLevel0",
        "lessons": [
          {
            "title": "Recommended List of Movies",
            "id": 129713,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Les sites de films recommandent des films en fonction des notes, de la popularité, des options personnalisées, etc. Utilisons les compréhensions de liste pour recommander des films avec une note supérieure à 4.\n\n1. Code une compréhension de liste et assigne-la à la variable `recommended`.\n2. La compréhension de liste doit itérer à travers chaque élément de la liste `ratings`.\n3. Code l'expression à l'intérieur de la compréhension de liste pour vérifier si la note est supérieure à 4. Le résultat doit être une liste de valeurs booléennes.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "ratings = [4.3, 3.1, 5, 1.1]\r\n\r\nrecommended =\r\n\r\nprint(recommended)",
                  "solvedContent": "ratings = [4.3, 3.1, 5, 1.1]\r\n\r\nrecommended = [rating > 4 for rating in ratings]\r\nprint(recommended)"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 14686,
        "title": "Ajout de Https:// avant les sites",
        "type": "challengeLevel0",
        "lessons": [
          {
            "title": "Adding https:// Before Sites",
            "id": 129714,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "As-tu déjà remarqué comment les navigateurs ajoutent automatiquement `\"https://\"` à une URL de site ? Utilisons la compréhension de liste pour ajouter `\"https://\"` à la liste de sites dans `websites`.\n\n1. Crée une fonction `add_https` qui prend `site` comme paramètre. La fonction doit retourner `\"https://\"` ajouté au paramètre `site`.\n2. Après la fonction, crée une variable `auto_add` qui stockera une compréhension de liste.\n3. La compréhension de liste doit itérer à travers chaque élément de la liste `websites`.\n3. Code l'expression à l'intérieur de la compréhension de liste qui appelle la fonction `add_https` sur les éléments de la liste.\n4. Imprime `auto_add`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "websites = [\"mimo.com\", \"coding.com\", \"food.org\"]",
                  "solvedContent": "websites = [\"mimo.com\", \"coding.com\", \"food.org\"]\r\n\r\ndef add_https(site):\r\n    return \"https://\" + site\r\n\r\nauto_add = [add_https(site) for site in websites]\r\n    \r\nprint(auto_add)"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 14687,
        "title": "Suppression des informations inutiles",
        "type": "challengeLevel0",
        "lessons": [
          {
            "title": "Deleting Unnecessary Information",
            "id": 129715,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Parfois, nous stockons des informations dans des bases de données dont nous n'avons pas besoin. Par exemple, dans le dictionnaire `product` donné, nous n'avons pas besoin de la clé et de la valeur `color`.\n\n1. Supprime la clé `color` avec sa valeur du dictionnaire `product` en utilisant le bon mot-clé.\n2. Imprime `product`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "product = {\r\n 'name': 'pencil',\r\n 'type': 'stationery',\r\n 'price': 1.99,\r\n 'color': 'blue',\r\n 'availability': False\r\n}",
                  "solvedContent": "product = {\r\n 'name': 'pencil',\r\n 'type': 'stationery',\r\n 'price': 1.99,\r\n 'color': 'blue',\r\n 'availability': False\r\n}\r\n\r\ndel product['color']\r\n\r\nprint(product)"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 13973,
        "title": "La boutique de fleurs de Juliette",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "Juliette's Flower Shop",
            "id": 124075,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Juliette possède un magasin de fleurs. Le magasin offre déjà une réduction de 5% pour tous les clients afin de célébrer le 3ème anniversaire du magasin.\n\nRécemment, Juliette a eu un nouveau bébé né le 15 juillet. À cette occasion, elle décide d'offrir une réduction encore plus grande de 10% pour tous les clients nés à la même date. Elle a une chaîne contenant ces anniversaires au format JJ-MM qui sont séparés par `|`.\n\n1. Crée une variable `birthdays_list` et stocke-y les dates de naissance comme éléments d'une liste à partir de `birthdays_string`.\n2. Parcours `birthdays_list` et vérifie si la date est `\"15-07\"`. Si c'est le cas, réassigne `special_discount` pour **remplacer** `5%` par `10%`.\n3. Imprime `special_discount` en dehors de la boucle for à la fin.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "birthdays_string = \"23-09|25-04|05-09|15-07|01-06\"\nspecial_discount = \"You are eligible for a 5% discount\"\n",
                  "solvedContent": "birthdays_string = \"23-09|25-04|05-09|15-07|01-06\"\nspecial_discount = \"You are eligible for a 5% discount\"\nbirthdays_list = birthdays_string.split(\"|\")\n\nfor birthday in birthdays_list:\n if (birthday == \"15-07\"):\n  special_discount = special_discount.replace(\"5%\", \"10%\")\n\nprint(special_discount)"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 13976,
        "title": "Vérification des notes",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "Grade Check",
            "id": 124079,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Un instructeur de cours a reçu les notes d'un étudiant sous forme de chaîne de caractères. Les notes sont séparées par un `-`. Elle veut calculer la somme de toutes ces notes et vérifier si l'étudiant a réussi.\n\n1. Crée une variable `grades_list` et stocke-y les notes que tu extrais de `grades_string` sous forme de liste d'éléments.\n2. Parcours `grades_list`, convertis chaque élément en entier, puis ajoute-le à `total_grade`.\n\nAssure-toi d'effectuer ces opérations **avant** l'instruction print.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "grades_string = \"88-77-59-63\"\ntotal_grade = 0\n\nprint(total_grade)",
                  "solvedContent": "grades_string = \"88-77-59-63\"\ntotal_grade = 0\ngrades_list = grades_string.split(\"-\")\n\nfor grade in grades_list:\n grade = int(grade)\n total_grade += grade\n\nprint(total_grade)"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 13837,
        "title": "Filtrer les résultats de recherche",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "Filtering search results",
            "id": 123319,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Les moteurs de recherche, les sites de streaming, etc. filtrent les résultats de recherche par mots-clés. Utilisons la compréhension de liste pour filtrer une liste de manière à ce que le résultat n'affiche que les éléments de la liste contenant le mot-clé.\n\n1. Stocke une compréhension de liste dans la variable `results`.\n2. Itère à travers chaque élément de la liste dans la compréhension de liste. L'expression n'aura aucune opération.\n3. Ajoute une instruction `if` à la compréhension de liste qui vérifie si un élément de la liste contient `\"cats\"`.\n4. Imprime `results`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "archive = [\"Amazing cats\", \"Top 10 Dances\", \"Breaking news\", \"How to: Tips\", \"cats dance\"]\r\n\r\nresults =",
                  "solvedContent": "archive = [\"Amazing cats\", \"Top 10 Dances\", \"Breaking news\", \"How to: Tips\", \"cats dance\"]\r\n\r\nresults = [result for result in archive if result.count(\"cats\") > 0]\r\n\r\nprint(results)"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 13839,
        "title": "Effacement de la liste des tâches",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "Clear a task list",
            "id": 123321,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Utilisons la notation de tranche pour effacer une liste de tâches simples.\n\n1. Supprime `grocery` et `laundry` de la liste `daily_tasks` en utilisant le mot-clé `del` et la notation de tranche.\n2. Imprime `daily_tasks`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "daily_tasks = ['grocery', 'laundry', 'dusting']",
                  "solvedContent": "daily_tasks = ['grocery', 'laundry', 'dusting']\r\ndel daily_tasks[1::-1]\r\nprint(daily_tasks)"
                }
              ],
              "hints": []
            }
          }
        ]
      }
    ]
  }
}