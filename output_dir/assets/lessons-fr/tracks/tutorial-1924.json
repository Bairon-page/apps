{
  "tutorial": {
    "id": 1924,
    "version": 15,
    "type": "guidedProjectOptional",
    "isNew": false,
    "codeLanguage": "javascript",
    "title": "Commandes de restaurant",
    "descriptionContent": "Utilise tes connaissances en Javascript pour créer un programme qui passe des commandes aux restaurants.",
    "shortDescriptionContent": "",
    "showInTrack": true,
    "iconBanner": "tutorial-1924-icon-banner.svg",
    "chapters": [
      {
        "id": 12511,
        "title": "Commandes de restaurant",
        "type": "practiceLevel3",
        "lessons": [
          {
            "title": "Starter Code ",
            "id": 113174,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Utilisons nos connaissances des conditionnelles et des boucles pour créer des fonctions qui effectueront des actions pour un client cherchant à commander de la nourriture dans un restaurant.\n\nCommençons par jeter un œil à notre code de départ afin de comprendre vers quoi nous allons travailler.\n\nIl y a trois listes de menus, chacune est une liste avec des représentations de repas disponibles. Chaque repas est un objet qui a `mealName`, `quantity` et `price` comme propriétés.\n\nNous avons également trois fonctions vides `findMeal`, `selectMeal` et `createSummary`.\n\nEn utilisant tes connaissances en Javascript, tu vas définir chaque fonction afin qu'elles puissent accomplir leurs tâches respectives.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const italianFood = [{\n  mealName: \"Pasta Bolognese\",\n  quantity: 3,\n  price: 7\n}, {\n  mealName: \"Pepperoni pizza\",\n  quantity: 2,\n  price: 10\n}];\nconst thaiFood = [{\n  mealName: \"Pad Thai\",\n  quantity: 1,\n  price: 8\n}];\nconst indianFood = [{\n  mealName: \"Chapati\",\n  quantity: 8,\n  price: 7\n}, {\n  mealName: \"Chicken Massala\",\n  quantity: 5,\n  price: 9\n}, {\n  mealName: \"Tandoori Chicken\",\n  quantity: 5,\n  price: 9\n}];\n\nfunction findMeal(name, menu) {}\n\nfunction selectMeal(name, type) {}\n\nfunction createSummary(name, type, amount) {}",
                  "solvedContent": "const italianFood = [{\n  mealName: \"Pasta Bolognese\",\n  quantity: 3,\n  price: 7\n}, {\n  mealName: \"Pepperoni pizza\",\n  quantity: 2,\n  price: 10\n}];\nconst thaiFood = [{\n  mealName: \"Pad Thai\",\n  quantity: 1,\n  price: 8\n}];\nconst indianFood = [{\n  mealName: \"Chapati\",\n  quantity: 8,\n  price: 7\n}, {\n  mealName: \"Chicken Massala\",\n  quantity: 5,\n  price: 9\n}, {\n  mealName: \"Tandoori Chicken\",\n  quantity: 5,\n  price: 9\n}];\n\nfunction findMeal(name, menu) {}\n\nfunction selectMeal(name, type) {}\n\nfunction createSummary(name, type, amount) {}"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Define findMeal",
            "id": 113175,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Maintenant que nous avons passé en revue notre code de départ, commençons par créer une fonction `findMeal` qui renvoie les détails d'un plat à partir d'un menu après avoir entré son nom.\n\n1. Commence par créer une boucle `for` qui itère à travers le tableau `menu`, un paramètre de la fonction `findMeal`.\n2. Dans le corps de la boucle `for`, ajoute une condition qui vérifie si le `mealName` de l'élément actuel du `menu` est égal à la chaîne `name`. Cela nous aidera à vérifier si le `menu` sélectionné contient un plat avec ce `name`.\n3. Retourne l'élément actuel du menu si la condition est `true`. Cela signifie que nous avons trouvé ce plat dans le menu.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const italianFood = [{\n  mealName: \"Pasta Bolognese\",\n  quantity: 3,\n  price: 7\n}, {\n  mealName: \"Pepperoni pizza\",\n  quantity: 2,\n  price: 10\n}];\nconst thaiFood = [{\n  mealName: \"Pad Thai\",\n  quantity: 1,\n  price: 8\n}];\nconst indianFood = [{\n  mealName: \"Chapati\",\n  quantity: 8,\n  price: 7\n}, {\n  mealName: \"Chicken Massala\",\n  quantity: 5,\n  price: 9\n}, {\n  mealName: \"Tandoori Chicken\",\n  quantity: 5,\n  price: 9\n}];\n\nfunction findMeal(name, menu) {}\n\nfunction selectMeal(name, type) {}\n\nfunction createSummary(name, type, amount) {}",
                  "solvedContent": "const italianFood = [{\n  mealName: \"Pasta Bolognese\",\n  quantity: 3,\n  price: 7\n}, {\n  mealName: \"Pepperoni pizza\",\n  quantity: 2,\n  price: 10\n}];\nconst thaiFood = [{\n  mealName: \"Pad Thai\",\n  quantity: 1,\n  price: 8\n}];\nconst indianFood = [{\n  mealName: \"Chapati\",\n  quantity: 8,\n  price: 7\n}, {\n  mealName: \"Chicken Massala\",\n  quantity: 5,\n  price: 9\n}, {\n  mealName: \"Tandoori Chicken\",\n  quantity: 5,\n  price: 9\n}];\n\nfunction findMeal(name, menu) {\n  for (let i = 0; i < menu.length; i++) {\n    if (menu[i].mealName === name) {\n      return menu[i];\n    }\n  }\n}\n\nfunction selectMeal(name, type) {}\n\nfunction createSummary(name, type, amount) {}"
                }
              ],
              "hints": [
                {
                  "title": "Hint",
                  "content": "1. Make sure the `for` loop looks like `for(let i = 0; i < menu.length; i++){}`\n2. Use an `if` statement inside the `for` loop. Use `menu[i].mealName` to access the `mealName` property of the current menu item.\n3. Use a `return` keyword."
                }
              ]
            }
          },
          {
            "title": "Define selectMeal pt 1",
            "id": 113176,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Bon travail ! Maintenant, commençons à définir une fonction `selectMeal` qui extraira les informations sur le repas en fonction du `name` du repas et de son `type`.\n\n1. Ajoute une condition où si `type` est égal à `\"italian\"`, `\"italian order\"` est retourné.\n2. Ajoute une autre condition où si `type` est égal à `\"indian\"`, `\"indian order\"` est retourné.\n3. Ajoute une autre condition où si `type` est égal à `\"thai\"`, `\"thai order\"` est retourné.\n4. Lorsque toutes les conditions échouent, retourne `\"not found\"`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const italianFood = [{\n  mealName: \"Pasta Bolognese\",\n  quantity: 3,\n  price: 7\n}, {\n  mealName: \"Pepperoni pizza\",\n  quantity: 2,\n  price: 10\n}];\nconst thaiFood = [{\n  mealName: \"Pad Thai\",\n  quantity: 1,\n  price: 8\n}];\nconst indianFood = [{\n  mealName: \"Chapati\",\n  quantity: 8,\n  price: 7\n}, {\n  mealName: \"Chicken Massala\",\n  quantity: 5,\n  price: 9\n}, {\n  mealName: \"Tandoori Chicken\",\n  quantity: 5,\n  price: 9\n}];\n\nfunction findMeal(name, menu) {\n  for (let i = 0; i < menu.length; i++) {\n    if (menu[i].mealName === name) {\n      return menu[i];\n    }\n  }\n}\n\nfunction selectMeal(name, type) {}\n\nfunction createSummary(name, type, amount) {}",
                  "solvedContent": "const italianFood = [{\n  mealName: \"Pasta Bolognese\",\n  quantity: 3,\n  price: 7\n}, {\n  mealName: \"Pepperoni pizza\",\n  quantity: 2,\n  price: 10\n}];\nconst thaiFood = [{\n  mealName: \"Pad Thai\",\n  quantity: 1,\n  price: 8\n}];\nconst indianFood = [{\n  mealName: \"Chapati\",\n  quantity: 8,\n  price: 7\n}, {\n  mealName: \"Chicken Massala\",\n  quantity: 5,\n  price: 9\n}, {\n  mealName: \"Tandoori Chicken\",\n  quantity: 5,\n  price: 9\n}];\n\nfunction findMeal(name, menu) {\n  for (let i = 0; i < menu.length; i++) {\n    if (menu[i].mealName === name) {\n      return menu[i];\n    }\n  }\n}\n\nfunction selectMeal(name, type) {\n  if (type === 'italian') {\n    return \"italian order\";\n  } else if (type === 'indian') {\n    return \"indian order\";\n  } else if (type === 'thai') {\n    return \"thai order\";\n  } else {\n    return \"not found\";\n  }\n}\n\nfunction createSummary(name, type, amount) {}"
                }
              ],
              "hints": [
                {
                  "title": "Hint",
                  "content": "Use `if`, `else if` and `else` statements."
                }
              ]
            }
          },
          {
            "title": "Define selectMeal pt 2",
            "id": 113177,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Bien joué ! Améliorons notre fonction `selectMeal` pour qu'elle retourne un repas avant de passer à notre dernière fonction.\n\nÉtant donné que notre fonction `findMeal()` est conçue pour retourner un repas spécifique en fonction d'un `menu` et du `name` du repas, nous pouvons l'appeler à l'intérieur de `selectMeal()` pour nous aider à trouver le repas demandé.\n\n1. Remplace `\"italian order\"` par un appel de fonction `findMeal`, en lui donnant `name` et `italianFood` comme arguments.\n2. Remplace `\"indian order\"` par un appel de fonction `findMeal`, en lui donnant `name` et `indianFood` comme arguments.\n3. Remplace `\"thai order\"` par un appel de fonction `findMeal`, en lui donnant `name` et `thaiFood` comme arguments.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const italianFood = [{\n  mealName: \"Pasta Bolognese\",\n  quantity: 3,\n  price: 7\n}, {\n  mealName: \"Pepperoni pizza\",\n  quantity: 2,\n  price: 10\n}];\nconst thaiFood = [{\n  mealName: \"Pad Thai\",\n  quantity: 1,\n  price: 8\n}];\nconst indianFood = [{\n  mealName: \"Chapati\",\n  quantity: 8,\n  price: 7\n}, {\n  mealName: \"Chicken Massala\",\n  quantity: 5,\n  price: 9\n}, {\n  mealName: \"Tandoori Chicken\",\n  quantity: 5,\n  price: 9\n}];\n\nfunction findMeal(name, menu) {\n  for (let i = 0; i < menu.length; i++) {\n    if (menu[i].mealName === name) {\n      return menu[i];\n    }\n  }\n}\n\nfunction selectMeal(name, type) {\n  if (type === 'italian') {\n    return \"italian order\";\n  } else if (type === 'indian') {\n    return \"indian order\";\n  } else if (type === 'thai') {\n    return \"thai order\";\n  } else {\n    return \"not found\";\n  }\n}\n\nfunction createSummary(name, type, amount) {}",
                  "solvedContent": "const italianFood = [{\n  mealName: \"Pasta Bolognese\",\n  quantity: 3,\n  price: 7\n}, {\n  mealName: \"Pepperoni pizza\",\n  quantity: 2,\n  price: 10\n}];\nconst thaiFood = [{\n  mealName: \"Pad Thai\",\n  quantity: 1,\n  price: 8\n}];\nconst indianFood = [{\n  mealName: \"Chapati\",\n  quantity: 8,\n  price: 7\n}, {\n  mealName: \"Chicken Massala\",\n  quantity: 5,\n  price: 9\n}, {\n  mealName: \"Tandoori Chicken\",\n  quantity: 5,\n  price: 9\n}];\n\nfunction findMeal(name, menu) {\n  for (let i = 0; i < menu.length; i++) {\n    if (menu[i].mealName === name) {\n      return menu[i];\n    }\n  }\n}\n\nfunction selectMeal(name, type) {\n  if (type === 'italian') {\n    return findMeal(name, italianFood);\n  } else if (type === 'indian') {\n    return findMeal(name, indianFood);\n  } else if (type === 'thai') {\n    return findMeal(name, thaiFood);\n  } else {\n    return \"not found\";\n  }\n}\n\nfunction createSummary(name, type, amount) {}"
                }
              ],
              "hints": [
                {
                  "title": "Hint",
                  "content": "Use `return findMeal()` with the arguments mentioned above."
                }
              ]
            }
          },
          {
            "title": "Define createSummary pt 1",
            "id": 113178,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Très bien ! Commençons à travailler sur la fonction `createSummary` afin de fournir au client un résumé de sa commande passée.\n\n1. Ajoute une variable `order` et assigne-lui le résultat de l'appel de la fonction `selectMeal()`.\n2. Ajoute `name` et `type` comme paramètres à l'appel de la fonction `selectMeal()`. Cela passe les arguments `name` et `type` de `createSummary()` à `selectMeal()`.\n3. Affiche la propriété `mealName` de la variable `order`.  \n4. Vérifie ce que fait actuellement ta fonction `createSummary()` en l'appelant avec `\"Pasta Bolognese\"`, `\"italian\"` et `3` comme arguments.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const italianFood = [{\n  mealName: \"Pasta Bolognese\",\n  quantity: 3,\n  price: 7\n}, {\n  mealName: \"Pepperoni pizza\",\n  quantity: 2,\n  price: 10\n}];\nconst thaiFood = [{\n  mealName: \"Pad Thai\",\n  quantity: 1,\n  price: 8\n}];\nconst indianFood = [{\n  mealName: \"Chapati\",\n  quantity: 8,\n  price: 7\n}, {\n  mealName: \"Chicken Massala\",\n  quantity: 5,\n  price: 9\n}, {\n  mealName: \"Tandoori Chicken\",\n  quantity: 5,\n  price: 9\n}];\n\nfunction findMeal(name, menu) {\n  for (let i = 0; i < menu.length; i++) {\n    if (menu[i].mealName === name) {\n      return menu[i];\n    }\n  }\n}\n\nfunction selectMeal(name, type) {\n  if (type === 'italian') {\n    return findMeal(name, italianFood);\n  } else if (type === 'indian') {\n    return findMeal(name, indianFood);\n  } else if (type === 'thai') {\n    return findMeal(name, thaiFood);\n  } else {\n    return \"not found\";\n  }\n}\n\nfunction createSummary(name, type, amount) {}",
                  "solvedContent": "const italianFood = [{\n  mealName: \"Pasta Bolognese\",\n  quantity: 3,\n  price: 7\n}, {\n  mealName: \"Pepperoni pizza\",\n  quantity: 2,\n  price: 10\n}];\nconst thaiFood = [{\n  mealName: \"Pad Thai\",\n  quantity: 1,\n  price: 8\n}];\nconst indianFood = [{\n  mealName: \"Chapati\",\n  quantity: 8,\n  price: 7\n}, {\n  mealName: \"Chicken Massala\",\n  quantity: 5,\n  price: 9\n}, {\n  mealName: \"Tandoori Chicken\",\n  quantity: 5,\n  price: 9\n}];\n\nfunction findMeal(name, menu) {\n  for (let i = 0; i < menu.length; i++) {\n    if (menu[i].mealName === name) {\n      return menu[i];\n    }\n  }\n}\n\nfunction selectMeal(name, type) {\n  if (type === 'italian') {\n    return findMeal(name, italianFood);\n  } else if (type === 'indian') {\n    return findMeal(name, indianFood);\n  } else if (type === 'thai') {\n    return findMeal(name, thaiFood);\n  } else {\n    return \"not found\";\n  }\n}\n\nfunction createSummary(name, type, amount) {\n  const order = selectMeal(name, type);\n  console.log(order.mealName);\n}\ncreateSummary('Pasta Bolognese', 'italian', 3);"
                }
              ],
              "hints": [
                {
                  "title": "Hint",
                  "content": "The function call for `createSummary()` should be placed after the code block where it is defined."
                }
              ]
            }
          },
          {
            "title": "Define createSummary pt 2",
            "id": 113179,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Bon travail ! Continuons à définir `createSummary`\n\n1. Ajoute une variable `orderPossible`, assigne-lui une expression logique pour vérifier si notre variable `order` n'est pas égale à `\"not found\"`.\n2. Utilise `&&` pour enchaîner une condition à `orderPossible` afin de vérifier si `amount` est inférieur ou égal à la propriété `quantity` de `order`.\n3. Ajoute une variable `errorMessage` et assigne-lui `\"Something went wrong, please try again later'\"`.\n4. Affiche la valeur de la variable `orderPossible`.  \n5. Affiche la valeur de la variable `errorMessage`.  ",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const italianFood = [{\n  mealName: \"Pasta Bolognese\",\n  quantity: 3,\n  price: 7\n}, {\n  mealName: \"Pepperoni pizza\",\n  quantity: 2,\n  price: 10\n}];\nconst thaiFood = [{\n  mealName: \"Pad Thai\",\n  quantity: 1,\n  price: 8\n}];\nconst indianFood = [{\n  mealName: \"Chapati\",\n  quantity: 8,\n  price: 7\n}, {\n  mealName: \"Chicken Massala\",\n  quantity: 5,\n  price: 9\n}, {\n  mealName: \"Tandoori Chicken\",\n  quantity: 5,\n  price: 9\n}];\n\nfunction findMeal(name, menu) {\n  for (let i = 0; i < menu.length; i++) {\n    if (menu[i].mealName === name) {\n      return menu[i];\n    }\n  }\n}\n\nfunction selectMeal(name, type) {\n  if (type === 'italian') {\n    return findMeal(name, italianFood);\n  } else if (type === 'indian') {\n    return findMeal(name, indianFood);\n  } else if (type === 'thai') {\n    return findMeal(name, thaiFood);\n  } else {\n    return \"not found\";\n  }\n}\n\nfunction createSummary(name, type, amount) {\n  const order = selectMeal(name, type);\n  console.log(order.mealName);\n}\ncreateSummary('Pasta Bolognese', 'italian', 3);",
                  "solvedContent": "const italianFood = [{\n  mealName: \"Pasta Bolognese\",\n  quantity: 3,\n  price: 7\n}, {\n  mealName: \"Pepperoni pizza\",\n  quantity: 2,\n  price: 10\n}];\nconst thaiFood = [{\n  mealName: \"Pad Thai\",\n  quantity: 1,\n  price: 8\n}];\nconst indianFood = [{\n  mealName: \"Chapati\",\n  quantity: 8,\n  price: 7\n}, {\n  mealName: \"Chicken Massala\",\n  quantity: 5,\n  price: 9\n}, {\n  mealName: \"Tandoori Chicken\",\n  quantity: 5,\n  price: 9\n}];\n\nfunction findMeal(name, menu) {\n  for (let i = 0; i < menu.length; i++) {\n    if (menu[i].mealName === name) {\n      return menu[i];\n    }\n  }\n}\n\nfunction selectMeal(name, type) {\n  if (type === 'italian') {\n    return findMeal(name, italianFood);\n  } else if (type === 'indian') {\n    return findMeal(name, indianFood);\n  } else if (type === 'thai') {\n    return findMeal(name, thaiFood);\n  } else {\n    return \"not found\";\n  }\n}\n\nfunction createSummary(name, type, amount) {\n  const order = selectMeal(name, type);\n  console.log(order.mealName);\n  const orderPossible = order !== 'not found' && amount <= order.quantity;\n  const errorMessage = 'Something went wrong, please try again later';\n  console.log(orderPossible);\n  console.log(errorMessage);\n}\ncreateSummary('Pasta Bolognese', 'italian', 3);"
                }
              ],
              "hints": [
                {
                  "title": "Hint",
                  "content": "1. You must define two logical expressions and chain them `condition1 && condition 2`. \n2. Use comparators such as `<=` `===` or` !==`to define each expression."
                }
              ]
            }
          },
          {
            "title": "Define createSummary pt3",
            "id": 113180,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Dans cette étape, nous allons terminer la construction de la fonction `createSummary` en ajoutant d'abord une condition pour s'assurer que le repas saisi a été trouvé. Ensuite, nous afficherons un résumé de la commande.\n\n1. Comme ils ne sont plus nécessaires, tu peux supprimer toutes les déclarations console.\n2. Ajoute une instruction conditionnelle pour vérifier si `orderPossible` est `true`.\n3. Dans le corps de la condition, ajoute une variable `total` et assigne-lui le produit de l'argument `amount` avec la propriété `price` de l'objet `order`.\n4. Ta condition doit retourner une chaîne qui indique au client le nombre de repas commandés, quel repas ils ont commandé et combien cela coûte. Tu *dois* utiliser `amount`, `name` et `total` dans la chaîne.\n5. Retourne `errorMessage` si `orderPossible` est `false`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const italianFood = [{\n  mealName: \"Pasta Bolognese\",\n  quantity: 3,\n  price: 7\n}, {\n  mealName: \"Pepperoni pizza\",\n  quantity: 2,\n  price: 10\n}];\nconst thaiFood = [{\n  mealName: \"Pad Thai\",\n  quantity: 1,\n  price: 8\n}];\nconst indianFood = [{\n  mealName: \"Chapati\",\n  quantity: 8,\n  price: 7\n}, {\n  mealName: \"Chicken Massala\",\n  quantity: 5,\n  price: 9\n}, {\n  mealName: \"Tandoori Chicken\",\n  quantity: 5,\n  price: 9\n}];\n\nfunction findMeal(name, menu) {\n  for (let i = 0; i < menu.length; i++) {\n    if (menu[i].mealName === name) {\n      return menu[i];\n    }\n  }\n}\n\nfunction selectMeal(name, type) {\n  if (type === 'italian') {\n    return findMeal(name, italianFood);\n  } else if (type === 'indian') {\n    return findMeal(name, indianFood);\n  } else if (type === 'thai') {\n    return findMeal(name, thaiFood);\n  } else {\n    return \"not found\";\n  }\n}\n\nfunction createSummary(name, type, amount) {\n  const order = selectMeal(name, type);\n  console.log(order.mealName);\n  const orderPossible = order !== 'not found' && amount <= order.quantity;\n  const errorMessage = 'Something went wrong, please try again later';\n  console.log(orderPossible);\n  console.log(errorMessage);\n}\ncreateSummary('Pasta Bolognese', 'italian', 3);",
                  "solvedContent": "const italianFood = [{\n  mealName: \"Pasta Bolognese\",\n  quantity: 3,\n  price: 7\n}, {\n  mealName: \"Pepperoni pizza\",\n  quantity: 2,\n  price: 10\n}];\nconst thaiFood = [{\n  mealName: \"Pad Thai\",\n  quantity: 1,\n  price: 8\n}];\nconst indianFood = [{\n  mealName: \"Chapati\",\n  quantity: 8,\n  price: 7\n}, {\n  mealName: \"Chicken Massala\",\n  quantity: 5,\n  price: 9\n}, {\n  mealName: \"Tandoori Chicken\",\n  quantity: 5,\n  price: 9\n}];\n\nfunction findMeal(name, menu) {\n  for (let i = 0; i < menu.length; i++) {\n    if (menu[i].mealName === name) {\n      return menu[i];\n    }\n  }\n}\n\nfunction selectMeal(name, type) {\n  if (type === 'italian') {\n    return findMeal(name, italianFood);\n  } else if (type === 'indian') {\n    return findMeal(name, indianFood);\n  } else if (type === 'thai') {\n    return findMeal(name, thaiFood);\n  } else {\n    return \"not found\";\n  }\n}\n\nfunction createSummary(name, type, amount) {\n  const order = selectMeal(name, type);\n  const orderPossible = order !== 'not found' && amount <= order.quantity;\n  const errorMessage = 'Something went wrong, please try again later';\n  if (orderPossible) {\n    const total = amount * order.price;\n    return \"You ordered \" + amount + \" \" + name + \" for a total of \" + total +\n      \" euros\";\n  } else {\n    return errorMessage;\n  }\n}"
                }
              ],
              "hints": [
                {
                  "title": "Hint",
                  "content": "1. Use `object.propertyName `syntax to access a property value of an object.\n2. Make sure and include the `amount`, `name`, and `total` arguments from the `createSummary()` function in the return string."
                }
              ]
            }
          }
        ]
      }
    ]
  }
}