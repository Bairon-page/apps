{
  "tutorial": {
    "id": 1798,
    "version": 11,
    "type": "challenges",
    "isNew": false,
    "codeLanguage": "javascript",
    "title": "Classes JavaScript",
    "descriptionContent": "Les défis sont des exercices plus difficiles qui mettront tes compétences à l'épreuve.",
    "shortDescriptionContent": "",
    "showInTrack": true,
    "iconBanner": "tutorial-1798-icon-banner.svg",
    "chapters": [
      {
        "id": 11990,
        "title": "Instance de voiture",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "Car Instance",
            "id": 109261,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "En utilisant la classe `Car` du défi précédent, construisons une nouvelle instance de cette classe.\n\n1. Crée un nouvel objet appelé `myCar`, et spécifie que c'est une voiture construite en `2021`, avec un moteur `V8`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "index.js",
                  "codeLanguage": "javascript",
                  "content": "class Car {\r\n constructor(year, engine) {\r\n  this.year = year;\r\n  this.engine = engine;\r\n }\r\n}",
                  "solvedContent": "class Car {\r\n constructor(year, engine) {\r\n  this.year = year;\r\n  this.engine = engine;\r\n }\r\n}\r\nconst myCar = new Car(2021, 'V8');"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 11986,
        "title": "Détails de la voiture ancienne",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "Old Timer Car Details",
            "id": 109259,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Continuons à partir du défi précédent en utilisant la classe `Car`.\n\n1. Crée une instance de la classe `Car`. Nomme l'instance `oldTimer`. Cette voiture a été construite en `1980`, et elle a un moteur `diesel`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "index.js",
                  "codeLanguage": "javascript",
                  "content": "class Car {\r\n constructor(year, engine) {\r\n  this.year = year;\r\n  this.engine = engine;\r\n }\r\n}\r\nconst myCar = new Car(2021, 'V8');",
                  "solvedContent": "class Car {\r\n constructor(year, engine) {\r\n  this.year = year;\r\n  this.engine = engine;\r\n }\r\n}\r\nconst myCar = new Car(2021, 'V8');\r\nconst oldTimer = new Car(1980, 'diesel');"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 11987,
        "title": "Classe de véhicule",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "Vehicle Class",
            "id": 109258,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Créons une toute nouvelle classe.\n\n1. Crée une classe appelée `Vehicle`.\n2. Code la classe `Vehicle` de sorte qu'elle accepte trois paramètres dans le constructeur : `year`, `mileage`, `speed`.\n3. Assigne les paramètres aux propriétés correctes à l'intérieur du constructeur, en utilisant le mot-clé `this`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "index.js",
                  "codeLanguage": "javascript",
                  "content": "class Vehicle",
                  "solvedContent": "class Vehicle {\n constructor(year, mileage, speed) {\n  this.year = year;\n  this.mileage = mileage;\n  this.speed = speed;\n }\n}"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 11984,
        "title": "Hériter des propriétés",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "Inheriting properties",
            "id": 109255,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Créons une autre classe qui hérite des propriétés d'une super-classe.\n\n1. Crée une toute nouvelle classe et nomme-la : `Boat`.\n2. Code la classe `Boat` de manière à ce qu'elle hérite de toutes les propriétés de la classe `Vehicle`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "index.js",
                  "codeLanguage": "javascript",
                  "content": "class Vehicle {\r\n constructor(year, mileage, speed) {\r\n  this.year = year;\r\n  this.mileage = mileage;\r\n  this.speed = speed;\r\n }\r\n}\r\nclass {\r\n\r\n\r\n\r\n}",
                  "solvedContent": "class Vehicle {\r\n constructor(year, mileage, speed) {\r\n  this.year = year;\r\n  this.mileage = mileage;\r\n  this.speed = speed;\r\n }\r\n}\r\nclass Boat extends Vehicle {\r\n constructor(year, mileage, speed) {\r\n  super(year, mileage, speed);\r\n }\r\n}"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 11982,
        "title": "Ajouter une méthode à une classe",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "Add method to a class",
            "id": 109256,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Ajoutons une méthode à une classe.\n\n1. Mets à jour la super-classe `Vehicle` avec une méthode nommée `turnOn`. À l'intérieur de la méthode `turnOn`, exécute `console.log(\"It's on!\")`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "index.js",
                  "codeLanguage": "javascript",
                  "content": "class Vehicle {\n constructor(year, mileage, speed) {\n  this.year = year;\n  this.mileage = mileage;\n  this.speed = speed;\n }\n}\nclass Boat extends Vehicle {\n constructor(year, mileage, speed) {\n  super(year, mileage, speed);\n }\n}\n",
                  "solvedContent": "class Vehicle {\n constructor(year, mileage, speed) {\n  this.year = year;\n  this.mileage = mileage;\n  this.speed = speed;\n }\n turnOn() {\n  console.log(\"It's on!\");\n }\n}\nclass Boat extends Vehicle {\n constructor(year, mileage, speed) {\n  super(year, mileage, speed);\n }\n}\n"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 11983,
        "title": "Redéfinir une méthode en sous-classe",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "Overriding method in method in sub-class",
            "id": 109262,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Il y a une seule méthode dans la super-classe. Maintenant, surchargeons cette méthode dans la sous-classe.\n\n1. Mets à jour la sous-classe `Boat` avec une méthode nommée `turnOn`.\n2. À l'intérieur de la méthode `turnOn`, utilise `console.log()` pour afficher la propriété `this.message`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "index.js",
                  "codeLanguage": "javascript",
                  "content": "class Vehicle {\n constructor(year, mileage, speed) {\n  this.year = year;\n  this.mileage = mileage;\n  this.speed = speed;\n }\n turnOn() {\n  console.log(\"It's on!\");\n }\n}\nclass Boat extends Vehicle {\n constructor(year, mileage, speed) {\n  super(year, mileage, speed);\n  this.message = \"Sailing!\";\n }\n}",
                  "solvedContent": "class Vehicle {\n constructor(year, mileage, speed) {\n  this.year = year;\n  this.mileage = mileage;\n  this.speed = speed;\n }\n turnOn() {\n  console.log(\"It's on!\");\n }\n}\nclass Boat extends Vehicle {\n constructor(year, mileage, speed) {\n  super(year, mileage, speed);\n  this.message = \"Sailing!\";\n }\n turnOn() {\n  console.log(this.message);\n }\n}"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 11991,
        "title": "Jeu de stratégie spatiale 1",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "Space strategy game",
            "id": 109254,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Nous construisons un jeu de stratégie spatiale. Nous devons coder la classe `Character`, puis l'étendre avec `Earthling`, puis étendre cette sous-classe avec une autre, nommée `Builder`.\n\n1. Ajoute à la classe `Character` un seul paramètre, `health`.\n2. Fais en sorte que la sous-classe `Earthling` hérite du paramètre `health` de `Character`.\n3. Ajoute un nouveau paramètre à `Earthling` et nomme-le : `iq`.\n4. Crée une sous-classe appelée `Builder` et hérite de toutes les propriétés de la classe `Earthling`.\n5. Ajoute un paramètre à la classe `Builder`. Nomme le paramètre : `tool`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "index.js",
                  "codeLanguage": "javascript",
                  "content": "class Character {\n}\nclass Earthling extends Character {\n constructor(health) {}\n}",
                  "solvedContent": "class Character {\n constructor(health) {\n  this.health = health;\n }\n}\nclass Earthling extends Character {\n constructor(health, iq) {\n  super(health);\n  this.iq = iq;\n }\n}\nclass Builder extends Earthling {\n constructor(health, iq, tool) {\n  super(health, iq);\n  this.tool = tool;\n }\n}"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 11985,
        "title": "Jeu de stratégie spatiale 2",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "Challenge #8: Hard",
            "id": 109253,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Nous sommes toujours en train de développer notre jeu de stratégie spatiale. Nous devons coder la classe `Vehicle`, puis créer deux sous-classes : `Spaceship` et `MoonBuggy`.\n\n1. Inclure un seul paramètre, `fuel` dans la classe `Vehicle`.\n2. Faire en sorte que la sous-classe `Spaceship` hérite du paramètre `fuel` de `Vehicle`.\n3. Ajouter un nouveau paramètre à `Spaceship`, et le nommer `speed`.\n4. Créer une sous-classe appelée `MoonBuggy` qui hérite du paramètre `fuel` de `Vehicle`.\n5. Ajouter le paramètre `doors` à la classe `MoonBuggy`. Nous avons besoin de portes sur un moon buggy, après tout.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "index.js",
                  "codeLanguage": "javascript",
                  "content": "class Vehicle {\n\n}\nclass Spaceship extends Vehicle {\n\n}",
                  "solvedContent": "class Vehicle {\n constructor(fuel) {\n  this.fuel = fuel;\n }\n}\nclass Spaceship extends Vehicle {\n constructor(fuel, speed) {\n  super(fuel);\n  this.speed = speed;\n }\n}\nclass MoonBuggy extends Vehicle {\n constructor(fuel, doors) {\n  super(fuel);\n  this.doors = doors;\n }\n}"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 11989,
        "title": "Jeu de stratégie spatiale 3",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "Challenge #9: Hard",
            "id": 109263,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Nous étendons les classes dans notre jeu de stratégie spatiale avec certains comportements, sous forme de méthodes.\n\n1. Dans `Vehicle`, ajoutez une nouvelle fonctionnalité. Appelez-la `turnOn`, et faites en sorte qu'elle `console.log` cette chaîne : `Engine on`.\n2. Dans la sous-classe `Spaceship`, héritez de la fonctionnalité de la méthode `turnOn`, puis étendez-la en affichant dans la console `Hyperspace engine on`.\n3. Construisez un nouveau `Vehicle` appelé `firstPrototype`, et définissez sa valeur de `fuel` à `100`.\n4. Construisez un nouvel objet `Spaceship` nommé `endeavor`, et définissez sa valeur de `fuel` à `100` et sa vitesse à `fast`.\n5. Appelez la méthode `turnOn` sur le `firstPrototype`.\n6. Appelez la méthode `turnOn` sur le `endeavor`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "index.js",
                  "codeLanguage": "javascript",
                  "content": "class Vehicle {\n constructor(fuel) {\n  this.fuel = fuel;\n }\n\n}\nclass Spaceship extends Vehicle {\n constructor(fuel, speed) {\n  super(fuel);\n  this.speed = speed;\n }\n\n}\n\n\n\n",
                  "solvedContent": "class Vehicle {\n constructor(fuel) {\n  this.fuel = fuel;\n }\n turnOn() {\n  console.log('Engine on');\n }\n}\nclass Spaceship extends Vehicle {\n constructor(fuel, speed) {\n  super(fuel);\n  this.speed = speed;\n }\n turnOn() {\n  super.turnOn();\n  console.log('Hyperspace engine on');\n }\n}\nconst firstPrototype = new Vehicle(100);\nconst endeavor = new Spaceship(100, 'fast');\nfirstPrototype.turnOn();\nendeavor.turnOn();"
                }
              ],
              "hints": []
            }
          }
        ]
      }
    ]
  }
}