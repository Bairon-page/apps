{
  "tutorial": {
    "id": 2813,
    "version": 2,
    "type": "course",
    "isNew": false,
    "codeLanguage": "typescript",
    "title": "Introduction aux génériques",
    "descriptionContent": "Apprends les generics en TypeScript",
    "shortDescriptionContent": "",
    "showInTrack": true,
    "iconBanner": null,
    "chapters": [
      {
        "id": 14841,
        "title": "Introduction aux génériques 1",
        "type": "practiceLevel1",
        "lessons": [
          {
            "title": "Lesson #13",
            "id": 131075,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Les génériques nous permettent d'écrire du code flexible et réutilisable qui peut fonctionner avec n'importe quel type de données tout en maintenant la sécurité des types.</p><p>Ils nous permettent de créer du code qui peut fonctionner avec divers types sans sacrifier les avantages du typage fort.</p></body></html>"
          },
          {
            "title": "Lesson #14",
            "id": 131076,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Pour te montrer l'avantage des generics, regardons une fonction simple qui trouve le plus grand nombre dans un tableau.</p><code version=\"2\" codelang=\"typescript\" name=\"script.ts\" visible-if=\"always\"><content><text value=\"function\" class=\"keyword\" /><text value=\" \" /><text value=\"findMaxNumber\" class=\"title\" /><text value=\"(\" /><text value=\"array: \" /><text value=\"number\" class=\"built_in\" /><text value=\"[]\" /><text value=\"): \" /><text value=\"number\" class=\"title\" /><text value=\" \" /><text value=\"{\" /><text type=\"break\" /><text value=\" \" /><text value=\"return\" class=\"keyword\" /><text value=\" array.reduce(\" /><text value=\"(\" /><text value=\"max, item\" class=\"params\" /><text value=\") =&gt;\" /><text value=\" (item &gt; max ? item : max));\" /><text type=\"break\" /><text value=\"}\" /><text type=\"break\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" maxNumber = findMaxNumber([\" /><text value=\"1\" class=\"number\" /><text value=\", \" /><text value=\"3\" class=\"number\" /><text value=\", \" /><text value=\"2\" class=\"number\" /><text value=\"]);\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(maxNumber);\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"0\" endIndex=\"8\" /><option startIndex=\"9\" endIndex=\"22\" /><option startIndex=\"135\" endIndex=\"148\" /></options></interaction></interactions><output><content><text value=\"3\" /></content></output></code><p visible-if=\"wrong\">Assurez-vous de choisir <code>function</code> suivi de <code>findMaxNumber</code> et enfin <code>findMaxNumber</code>.</p></body></html>"
          },
          {
            "title": "Lesson #14 - Copy",
            "id": 131077,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Si nous voulons faire la même chose avec des chaînes où nous recherchons la valeur maximale par ordre alphabétique, nous pourrions définir une autre fonction.</p><code version=\"2\" codelang=\"typescript\" name=\"script.ts\" visible-if=\"always\"><content><text value=\"function\" class=\"keyword\" /><text value=\" \" /><text value=\"findMaxNumber\" class=\"title\" /><text value=\"(\" /><text value=\"array: \" /><text value=\"number\" class=\"built_in\" /><text value=\"[]\" /><text value=\"): \" /><text value=\"number\" class=\"title\" /><text value=\" \" /><text value=\"{\" /><text type=\"break\" /><text value=\" \" /><text value=\"return\" class=\"keyword\" /><text value=\" array.reduce(\" /><text value=\"(\" /><text value=\"max, item\" class=\"params\" /><text value=\") =&gt;\" /><text value=\" (item &gt; max ? item : max));\" /><text type=\"break\" /><text value=\"}\" /><text type=\"break\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" maxNumber = findMaxNumber([\" /><text value=\"1\" class=\"number\" /><text value=\", \" /><text value=\"3\" class=\"number\" /><text value=\", \" /><text value=\"2\" class=\"number\" /><text value=\"]);\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(maxNumber);\" /><text type=\"break\" /><text type=\"break\" /><text value=\"function\" class=\"keyword\" /><text value=\" \" /><text value=\"findMaxString\" class=\"title\" /><text value=\"(\" /><text value=\"array: \" /><text value=\"string\" class=\"built_in\" /><text value=\"[]\" /><text value=\"): \" /><text value=\"string\" class=\"title\" /><text value=\" \" /><text value=\"{\" /><text type=\"break\" /><text value=\" \" /><text value=\"return\" class=\"keyword\" /><text value=\" array.reduce(\" /><text value=\"(\" /><text value=\"max, item\" class=\"params\" /><text value=\") =&gt;\" /><text value=\" (item &gt; max ? item : max));\" /><text type=\"break\" /><text value=\"}\" /><text type=\"break\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" maxString = findMaxString([\" /><text value=\"&quot;a&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;b&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;c&quot;\" class=\"string\" /><text value=\"]);\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(maxString);\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"186\" endIndex=\"194\" /><option startIndex=\"195\" endIndex=\"208\" /><option startIndex=\"321\" endIndex=\"334\" /></options></interaction></interactions><output><content><text value=\"c\" /></content></output></code><p visible-if=\"wrong\">Assurez-vous de choisir <code>function</code> suivi de <code>findMaxString</code> et enfin <code>findMaxString</code>.</p></body></html>"
          },
          {
            "title": "Lesson #14 - Copy - Copy - Copy",
            "id": 131293,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Au lieu de définir la fonction deux fois, nous pouvons utiliser des génériques pour permettre n'importe quel type plus tard. Pour l'instant, nous utilisons <code>T</code> comme un espace réservé pour n'importe quel type.</p><code version=\"2\" codelang=\"typescript\" name=\"script.ts\" visible-if=\"always\"><content><text value=\"function\" class=\"keyword\" /><text value=\" \" /><text value=\"findMax\" class=\"title\" /><text value=\"&lt;\" /><text value=\"T\" class=\"title\" /><text value=\"&gt;(\" /><text value=\"array: T[]\" class=\"params\" /><text value=\"): \" /><text value=\"T\" class=\"title\" /><text value=\" \" /><text value=\"{\" /><text type=\"break\" /><text value=\"  \" /><text value=\"return\" class=\"keyword\" /><text value=\" array.reduce(\" /><text value=\"(\" /><text value=\"max, item\" class=\"params\" /><text value=\") =&gt;\" /><text value=\" (item &gt; max ? item : max));\" /><text type=\"break\" /><text value=\"}\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"17\" endIndex=\"18\" /><option startIndex=\"27\" endIndex=\"28\" /><option startIndex=\"33\" endIndex=\"34\" /></options></interaction></interactions></code><p visible-if=\"wrong\">Assurez-vous de choisir <code>T</code> suivi de <code>T</code> et enfin <code>T</code>.</p></body></html>"
          },
          {
            "title": "123",
            "id": 131079,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Tout d'abord, nous devons indiquer que nous allons utiliser un type générique. Nous le faisons avec des crochets autour d'une lettre générique comme <code>T</code>.</p><code version=\"2\" codelang=\"typescript\" name=\"script.ts\" visible-if=\"always\"><content><text value=\"function\" class=\"keyword\" /><text value=\" \" /><text value=\"findMax\" class=\"title\" /><text value=\" &lt;\" /><text value=\"T\" class=\"title\" /><text value=\"&gt; (\" /><text value=\"array: T[]\" class=\"params\" /><text value=\"): \" /><text value=\"T\" class=\"title\" /><text value=\" \" /><text value=\"{\" /><text type=\"break\" /><text value=\" \" /><text value=\"return\" class=\"keyword\" /><text value=\" array.reduce(\" /><text value=\"(\" /><text value=\"max, item\" class=\"params\" /><text value=\") =&gt;\" /><text value=\" (item &gt; max ? item : max));\" /><text type=\"break\" /><text value=\"}\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"17\" endIndex=\"18\" /><option startIndex=\"18\" endIndex=\"19\" /><option startIndex=\"19\" endIndex=\"20\" /></options></interaction></interactions></code><p visible-if=\"wrong\">Assurez-vous de choisir <code>&lt;</code> suivi de <code>T</code> et enfin <code>&gt;</code>.</p></body></html>"
          },
          {
            "title": "123 - Copy",
            "id": 131080,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Après avoir déclaré le type générique, nous pouvons l'appeler avec n'importe quel type.</p><code version=\"2\" codelang=\"typescript\" name=\"script.ts\" visible-if=\"always\"><content><text value=\"function\" class=\"keyword\" /><text value=\" \" /><text value=\"findMax\" class=\"title\" /><text value=\" &lt;\" /><text value=\"T\" class=\"title\" /><text value=\"&gt; (\" /><text value=\"array: T[]\" class=\"params\" /><text value=\"): \" /><text value=\"T\" class=\"title\" /><text value=\" \" /><text value=\"{\" /><text type=\"break\" /><text value=\" \" /><text value=\"return\" class=\"keyword\" /><text value=\" array.reduce(\" /><text value=\"(\" /><text value=\"max, item\" class=\"params\" /><text value=\") =&gt;\" /><text value=\" (item &gt; max ? item : max));\" /><text type=\"break\" /><text value=\"}\" /><text type=\"break\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" maxNumber = findMax&lt;\" /><text value=\"number\" class=\"built_in\" /><text value=\"&gt;([\" /><text value=\"1\" class=\"number\" /><text value=\", \" /><text value=\"3\" class=\"number\" /><text value=\", \" /><text value=\"2\" class=\"number\" /><text value=\"]);\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(maxNumber);\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"140\" endIndex=\"149\" /><option startIndex=\"131\" endIndex=\"132\" /><option startIndex=\"132\" endIndex=\"138\" /><option startIndex=\"138\" endIndex=\"139\" /></options></interaction></interactions><output><content><text value=\"3\" /></content></output></code><p visible-if=\"wrong\">Assurez-vous de choisir <code>&lt;</code> suivi de <code>number</code> puis <code>&gt;</code>, <code>[1, 3, 2]</code>.</p></body></html>"
          },
          {
            "title": "123 - Copy - Copy",
            "id": 131298,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Si nous voulons utiliser un type différent pour le générique, nous pouvons le spécifier.</p><code version=\"2\" codelang=\"typescript\" name=\"script.ts\" visible-if=\"always\"><content><text value=\"function\" class=\"keyword\" /><text value=\" \" /><text value=\"findMax\" class=\"title\" /><text value=\" &lt;\" /><text value=\"T\" class=\"title\" /><text value=\"&gt; (\" /><text value=\"array: T[]\" class=\"params\" /><text value=\"): \" /><text value=\"T\" class=\"title\" /><text value=\" \" /><text value=\"{\" /><text type=\"break\" /><text value=\" \" /><text value=\"return\" class=\"keyword\" /><text value=\" array.reduce(\" /><text value=\"(\" /><text value=\"max, item\" class=\"params\" /><text value=\") =&gt;\" /><text value=\" (item &gt; max ? item : max));\" /><text type=\"break\" /><text value=\"}\" /><text type=\"break\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" maxNumber = findMax&lt;\" /><text value=\"number\" class=\"built_in\" /><text value=\"&gt;([\" /><text value=\"1\" class=\"number\" /><text value=\", \" /><text value=\"3\" class=\"number\" /><text value=\", \" /><text value=\"2\" class=\"number\" /><text value=\"]);\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(maxNumber);\" /><text type=\"break\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" maxString = findMax&lt;\" /><text value=\"string\" class=\"built_in\" /><text value=\"&gt;([\" /><text value=\"&quot;a&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;b&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;c&quot;\" class=\"string\" /><text value=\"]);\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(maxString);\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"202\" endIndex=\"203\" /><option startIndex=\"203\" endIndex=\"209\" /><option startIndex=\"209\" endIndex=\"210\" /><option startIndex=\"211\" endIndex=\"226\" /></options></interaction></interactions><output><content><text value=\"3\" /><text type=\"break\" /><text value=\"c\" /></content></output></code><p visible-if=\"wrong\">Assurez-vous de choisir <code>&lt;</code> suivi de <code>string</code> puis <code>&gt;</code>, <code>[\"a\", \"b\", \"c\"]</code>.</p></body></html>"
          },
          {
            "title": "123 - Copy - Copy - Copy",
            "id": 131299,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Comme TypeScript est assez bon pour inférer les types, nous pouvons omettre la déclaration de type générique à l'intérieur des crochets pointus.</p><p>Appelle la fonction sans spécifier explicitement le type générique.</p><code version=\"2\" codelang=\"typescript\" name=\"script.ts\" visible-if=\"always\"><content><text value=\"function\" class=\"keyword\" /><text value=\" \" /><text value=\"findMax\" class=\"title\" /><text value=\" &lt;\" /><text value=\"T\" class=\"title\" /><text value=\"&gt; (\" /><text value=\"array: T[]\" class=\"params\" /><text value=\"): \" /><text value=\"T\" class=\"title\" /><text value=\" \" /><text value=\"{\" /><text type=\"break\" /><text value=\" \" /><text value=\"return\" class=\"keyword\" /><text value=\" array.reduce(\" /><text value=\"(\" /><text value=\"max, item\" class=\"params\" /><text value=\") =&gt;\" /><text value=\" (item &gt; max ? item : max));\" /><text type=\"break\" /><text value=\"}\" /><text type=\"break\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" maxNumber = findMax([\" /><text value=\"1\" class=\"number\" /><text value=\", \" /><text value=\"3\" class=\"number\" /><text value=\", \" /><text value=\"2\" class=\"number\" /><text value=\"]);\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(maxNumber);\" /><text type=\"break\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" maxString = findMax([\" /><text value=\"&quot;a&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;b&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;c&quot;\" class=\"string\" /><text value=\"]);\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(maxString);\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"124\" endIndex=\"131\" /><option startIndex=\"187\" endIndex=\"194\" /><option correct=\"false\"><content><text value=\"findMax&lt;number&gt;\" /></content></option><option correct=\"false\"><content><text value=\"findMax&lt;string&gt;\" /></content></option></options></interaction></interactions><output><content><text value=\"3\" /><text type=\"break\" /><text value=\"c\" /></content></output></code><p visible-if=\"wrong\">Assurez-vous de choisir <code>findMax</code> suivi de <code>findMax</code>.</p></body></html>"
          },
          {
            "title": "Lesson #9",
            "id": 131088,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Nous pouvons également utiliser des génériques lors de la création d'une classe. Nous définissons la classe générique avec <code>&lt;T&gt;</code> que nous pouvons ensuite utiliser dans toute la classe.</p><code version=\"2\" codelang=\"typescript\" name=\"script.ts\" visible-if=\"always\"><content><text value=\"class\" class=\"keyword\" /><text value=\" Container&lt;T&gt; {\" /><text type=\"break\" /><text type=\"break\" /><text value=\"}\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"15\" endIndex=\"16\" /><option startIndex=\"16\" endIndex=\"17\" /><option startIndex=\"17\" endIndex=\"18\" /><option correct=\"false\"><content><text value=\"(\" /></content></option><option correct=\"false\"><content><text value=\")\" /></content></option></options></interaction></interactions></code><p visible-if=\"wrong\">Assurez-vous de choisir <code>&lt;</code> suivi de <code>T</code> et enfin <code>&gt;</code>.</p></body></html>"
          },
          {
            "title": "Lesson #9 - Copy",
            "id": 131089,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Après avoir défini la classe générique <code>T</code>, nous pouvons maintenant l'utiliser comme type de la variable <code>value</code>.</p><code version=\"2\" codelang=\"typescript\" name=\"script.ts\" visible-if=\"always\"><content><text value=\"class\" class=\"keyword\" /><text value=\" Container &lt;T&gt; {\" /><text type=\"break\" /><text value=\" \" /><text value=\"constructor\" class=\"keyword\" /><text value=\"(\" /><text value=\"public\" class=\"keyword\" /><text value=\" value: T\" /><text value=\") {}\" /><text type=\"break\" /><text value=\"}\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"17\" endIndex=\"18\" /><option startIndex=\"49\" endIndex=\"50\" /><option correct=\"false\"><content><text value=\"number\" /></content></option><option correct=\"false\"><content><text value=\"string\" /></content></option></options></interaction></interactions></code><p visible-if=\"wrong\">Assurez-vous de choisir <code>T</code> suivi de <code>T</code>.</p></body></html>"
          },
          {
            "title": "Lesson #9 - Copy - Copy",
            "id": 131090,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Si notre classe utilise un type générique, nous pouvons l'utiliser avec n'importe quel type que nous voulons. Nous ajoutons le type que nous voulons à l'intérieur des crochets pointus.</p><code version=\"2\" codelang=\"typescript\" name=\"script.ts\" visible-if=\"always\"><content><text value=\"class\" class=\"keyword\" /><text value=\" Container &lt;T&gt; {\" /><text type=\"break\" /><text value=\" \" /><text value=\"constructor\" class=\"keyword\" /><text value=\"(\" /><text value=\"public\" class=\"keyword\" /><text value=\" value: T\" /><text value=\") {}\" /><text type=\"break\" /><text value=\"}\" /><text type=\"break\" /><text type=\"break\" /><text value=\"let\" class=\"keyword\" /><text value=\" numberContainer = \" /><text value=\"new\" class=\"keyword\" /><text value=\" Container&lt;\" /><text value=\"number\" class=\"built_in\" /><text value=\"&gt;(\" /><text value=\"42\" class=\"number\" /><text value=\");\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(numberContainer.value);\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"80\" endIndex=\"83\" /><option startIndex=\"84\" endIndex=\"101\" /><option correct=\"false\"><content><text value=\"class\" /></content></option><option correct=\"false\"><content><text value=\"class\" /></content></option></options></interaction></interactions><output><content><text value=\"42\" /></content></output></code><p visible-if=\"wrong\">Assurez-vous de choisir <code>new</code> suivi de <code>Container&lt;number&gt;</code>.</p></body></html>"
          },
          {
            "title": "Lesson #9 - Copy - Copy - Copy",
            "id": 131294,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Nous pouvons utiliser <code>Container</code> pour créer également un conteneur avec le type <code>string</code>.</p><code version=\"2\" codelang=\"typescript\" name=\"script.ts\" visible-if=\"always\"><content><text value=\"class\" class=\"keyword\" /><text value=\" Container &lt;T&gt; {\" /><text type=\"break\" /><text value=\" \" /><text value=\"constructor\" class=\"keyword\" /><text value=\"(\" /><text value=\"public\" class=\"keyword\" /><text value=\" value: T\" /><text value=\") {}\" /><text type=\"break\" /><text value=\"}\" /><text type=\"break\" /><text type=\"break\" /><text value=\"let\" class=\"keyword\" /><text value=\" numberContainer = \" /><text value=\"new\" class=\"keyword\" /><text value=\" Container&lt;\" /><text value=\"number\" class=\"built_in\" /><text value=\"&gt;(\" /><text value=\"42\" class=\"number\" /><text value=\");\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(numberContainer.value);\" /><text type=\"break\" /><text type=\"break\" /><text value=\"let\" class=\"keyword\" /><text value=\" stringContainer = \" /><text value=\"new\" class=\"keyword\" /><text value=\" Container&lt;\" /><text value=\"string\" class=\"built_in\" /><text value=\"&gt;(\" /><text value=\"&quot;Hello&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(stringContainer.value);\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"166\" endIndex=\"169\" /><option startIndex=\"170\" endIndex=\"179\" /><option startIndex=\"179\" endIndex=\"180\" /><option startIndex=\"180\" endIndex=\"186\" /><option startIndex=\"186\" endIndex=\"187\" /><option correct=\"false\"><content><text value=\"number\" /></content></option></options></interaction></interactions><output><content><text value=\"42\" /><text type=\"break\" /><text value=\"Hello\" /></content></output></code><p visible-if=\"wrong\">Assurez-vous de choisir <code>new</code> suivi de <code>Container</code> puis <code>&lt;</code>, <code>string</code>, <code>&gt;</code>.</p></body></html>"
          },
          {
            "title": "Lesson #9 - Copy - ",
            "id": 131295,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Cependant, une fois que nous définissons une instance de Container avec un type spécifique, comme un nombre, nous ne pouvons pas lui attribuer une valeur d'un type différent.</p><p>Essaie d'assigner une valeur de type string pour voir l'erreur.</p><code version=\"2\" codelang=\"typescript\" name=\"script.ts\" visible-if=\"always\"><content><text value=\"class\" class=\"keyword\" /><text value=\" Container &lt;T&gt; {\" /><text type=\"break\" /><text value=\" \" /><text value=\"constructor\" class=\"keyword\" /><text value=\"(\" /><text value=\"public\" class=\"keyword\" /><text value=\" value: T\" /><text value=\") {}\" /><text type=\"break\" /><text value=\"}\" /><text type=\"break\" /><text type=\"break\" /><text value=\"let\" class=\"keyword\" /><text value=\" numberContainer = \" /><text value=\"new\" class=\"keyword\" /><text value=\" Container&lt;\" /><text value=\"number\" class=\"built_in\" /><text value=\"&gt;(\" /><text value=\"42\" class=\"number\" /><text value=\");\" /><text type=\"break\" /><text value=\"numberContainer = \" /><text value=\"&quot;Let me in!&quot;\" class=\"string\" /><text value=\"; \" /><text value=\"// Error\" class=\"comment\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"125\" endIndex=\"137\" /><option correct=\"false\"><content><text value=\"42\" /></content></option></options></interaction></interactions><output><content><text value=\"Error: Type &quot;string&quot; is not assignable to type &quot;Container&lt;number&gt;&quot;.\" /></content></output></code><p visible-if=\"wrong\">Assurez-vous de choisir <code>\"Let me in!\"</code>.</p></body></html>"
          },
          {
            "title": "Lesson #9 - Copy -  - Copy",
            "id": 131297,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Enfin et surtout, nous pouvons omettre la spécification du type pour le générique car TypeScript peut l'inférer.</p><code version=\"2\" codelang=\"typescript\" name=\"script.ts\" visible-if=\"always\"><content><text value=\"class\" class=\"keyword\" /><text value=\" Container &lt;T&gt; {\" /><text type=\"break\" /><text value=\" \" /><text value=\"constructor\" class=\"keyword\" /><text value=\"(\" /><text value=\"public\" class=\"keyword\" /><text value=\" value: T\" /><text value=\") {}\" /><text type=\"break\" /><text value=\"}\" /><text type=\"break\" /><text type=\"break\" /><text value=\"let\" class=\"keyword\" /><text value=\" numberContainer = \" /><text value=\"new\" class=\"keyword\" /><text value=\" Container(\" /><text value=\"42\" class=\"number\" /><text value=\");\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(numberContainer.value);\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"80\" endIndex=\"93\" /><option correct=\"false\"><content><text value=\"new Container&lt;number&gt;\" /></content></option></options></interaction></interactions><output><content><text value=\"42\" /></content></output></code><p visible-if=\"wrong\">Assurez-vous de choisir <code>new Container</code>.</p></body></html>"
          },
          {
            "title": "Lesson #6",
            "id": 131002,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Que voulons-nous dire par <code>&lt;T&gt;</code> dans la déclaration de générique en TypeScript ?</p><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\">C'est un espace réservé pour n'importe quel type</item><item value=\"2\" correct=\"false\">C'est un type spécifique</item></selection><p visible-if=\"wrong\">C'est un espace réservé pour n'importe quel type.</p></body></html>"
          },
          {
            "title": "Lesson #12",
            "id": 131091,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Complète le code en utilisant des generics.</p><code version=\"2\" codelang=\"typescript\" name=\"script.ts\" visible-if=\"always\"><content><text value=\"class\" class=\"keyword\" /><text value=\" Wrapper &lt;T&gt; {\" /><text type=\"break\" /><text value=\" \" /><text value=\"constructor\" class=\"keyword\" /><text value=\"(\" /><text value=\"private\" class=\"keyword\" /><text value=\" value: T\" /><text value=\") {}\" /><text type=\"break\" /><text type=\"break\" /><text value=\" getValue(): T {\" /><text type=\"break\" /><text value=\"  \" /><text value=\"return\" class=\"keyword\" /><text value=\" \" /><text value=\"this\" class=\"keyword\" /><text value=\".value;\" /><text type=\"break\" /><text value=\" }\" /><text type=\"break\" /><text value=\"}\" /><text type=\"break\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" bubbleWrap = \" /><text value=\"new\" class=\"keyword\" /><text value=\" Wrapper(\" /><text value=\"&quot;Bubbles&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(bubbleWrap.getValue());\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"15\" endIndex=\"16\" /><option startIndex=\"48\" endIndex=\"49\" /><option startIndex=\"68\" endIndex=\"69\" /><option correct=\"false\"><content><text value=\"string\" /></content></option><option correct=\"false\"><content><text value=\"string\" /></content></option><option correct=\"false\"><content><text value=\"string\" /></content></option></options></interaction></interactions><output><content><text value=\"Bubbles\" /></content></output></code><p visible-if=\"wrong\">Assurez-vous de choisir <code>T</code> suivi de <code>T</code> et enfin <code>T</code>.</p></body></html>"
          },
          {
            "title": "Lesson #7",
            "id": 131003,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Quel est l'avantage d'utiliser des generics en TypeScript ?</p><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\">Ça rend le code plus réutilisable</item><item value=\"2\" correct=\"false\">Il réduit la flexibilité du code</item></selection><p visible-if=\"wrong\">Ça rend le code plus réutilisable.</p></body></html>"
          },
          {
            "title": "Lesson #13",
            "id": 131092,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Assure-toi que la fonction <code>repeat</code> fonctionne avec n'importe quel type en utilisant un type générique.</p><code version=\"2\" codelang=\"typescript\" name=\"script.ts\" visible-if=\"always\"><content><text value=\"function\" class=\"keyword\" /><text value=\" \" /><text value=\"repeat\" class=\"title\" /><text value=\"&lt;\" /><text value=\"T\" class=\"title\" /><text value=\"&gt;(\" /><text value=\"item: T, count: \" /><text value=\"number\" class=\"built_in\" /><text value=\"): \" /><text value=\"T\" class=\"title\" /><text value=\"[] \" /><text value=\"{\" /><text type=\"break\" /><text value=\"  \" /><text value=\"const\" class=\"keyword\" /><text value=\" result: T[] = [];\" /><text type=\"break\" /><text value=\"  \" /><text value=\"for\" class=\"keyword\" /><text value=\" (\" /><text value=\"let\" class=\"keyword\" /><text value=\" i = \" /><text value=\"0\" class=\"number\" /><text value=\"; i &lt; count; i++) {\" /><text type=\"break\" /><text value=\"    result.push(item);\" /><text type=\"break\" /><text value=\"  }\" /><text type=\"break\" /><text value=\"  \" /><text value=\"return\" class=\"keyword\" /><text value=\" result;\" /><text type=\"break\" /><text value=\"}\" /><text type=\"break\" /><text type=\"break\" /><text value=\"function\" class=\"keyword\" /><text value=\" \" /><text value=\"printPyramid\" class=\"title\" /><text value=\"(\" /><text value=\"height: \" /><text value=\"number\" class=\"built_in\" /><text value=\"): \" /><text value=\"void\" class=\"title\" /><text value=\" \" /><text value=\"{\" /><text type=\"break\" /><text value=\"  \" /><text value=\"for\" class=\"keyword\" /><text value=\" (\" /><text value=\"let\" class=\"keyword\" /><text value=\" i = \" /><text value=\"0\" class=\"number\" /><text value=\"; i &lt; height; i++) {\" /><text type=\"break\" /><text value=\"    \" /><text value=\"const\" class=\"keyword\" /><text value=\" spaces = repeat(\" /><text value=\"' '\" class=\"string\" /><text value=\", height - i - \" /><text value=\"1\" class=\"number\" /><text value=\").join(\" /><text value=\"''\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\"    \" /><text value=\"const\" class=\"keyword\" /><text value=\" stars = repeat(\" /><text value=\"'*'\" class=\"string\" /><text value=\", \" /><text value=\"2\" class=\"number\" /><text value=\" * i + \" /><text value=\"1\" class=\"number\" /><text value=\").join(\" /><text value=\"''\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\"    \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(spaces + stars + spaces);\" /><text type=\"break\" /><text value=\"  }\" /><text type=\"break\" /><text value=\"}\" /><text type=\"break\" /><text type=\"break\" /><text value=\"printPyramid(\" /><text value=\"10\" class=\"number\" /><text value=\");\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"15\" endIndex=\"16\" /><option startIndex=\"16\" endIndex=\"17\" /><option startIndex=\"17\" endIndex=\"18\" /><option startIndex=\"25\" endIndex=\"26\" /><option startIndex=\"44\" endIndex=\"45\" /><option startIndex=\"66\" endIndex=\"67\" /></options></interaction></interactions><output><content><text value=\"         *         \" /><text type=\"break\" /><text value=\"        ***        \" /><text type=\"break\" /><text value=\"       *****       \" /><text type=\"break\" /><text value=\"      *******      \" /><text type=\"break\" /><text value=\"     *********     \" /><text type=\"break\" /><text value=\"    ***********    \" /><text type=\"break\" /><text value=\"   *************   \" /><text type=\"break\" /><text value=\"  ***************  \" /><text type=\"break\" /><text value=\" ***************** \" /><text type=\"break\" /><text value=\"*******************\" /></content></output></code><p visible-if=\"wrong\">Assurez-vous de choisir <code>&lt;</code> suivi de <code>T</code> puis <code>&gt;</code>, <code>T</code>, <code>T</code>, <code>T</code>.</p></body></html>"
          }
        ]
      },
      {
        "id": 14839,
        "title": "Introduction aux génériques 2",
        "type": "practiceLevel1",
        "lessons": [
          {
            "title": "move - 1",
            "id": 130998,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Revisitons les tableaux avec notre nouvelle connaissance des génériques. Comme tu le vois, il y a deux façons de définir un tableau en TypeScript.</p><code version=\"2\" codelang=\"typescript\" name=\"script.ts\" visible-if=\"always\"><content><text value=\"let\" class=\"keyword\" /><text value=\" numbers1: \" /><text value=\"number\" class=\"built_in\" /><text value=\"[] = [\" /><text value=\"1\" class=\"number\" /><text value=\", \" /><text value=\"2\" class=\"number\" /><text value=\", \" /><text value=\"3\" class=\"number\" /><text value=\"];\" /><text type=\"break\" /><text value=\"let\" class=\"keyword\" /><text value=\" numbers2: \" /><text value=\"Array\" class=\"built_in\" /><text value=\"&lt;\" /><text value=\"number\" class=\"built_in\" /><text value=\"&gt; = [\" /><text value=\"1\" class=\"number\" /><text value=\", \" /><text value=\"2\" class=\"number\" /><text value=\", \" /><text value=\"3\" class=\"number\" /><text value=\"];\" /><text type=\"break\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(numbers1);\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(numbers2);\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"50\" endIndex=\"55\" /><option startIndex=\"55\" endIndex=\"63\" /></options></interaction></interactions><output><content><text value=\"[1, 2, 3]\" /><text type=\"break\" /><text value=\"[1, 2, 3]\" /></content></output></code><p visible-if=\"wrong\">Assurez-vous de choisir <code>Array</code> suivi de <code>&lt;number&gt;</code>.</p></body></html>"
          },
          {
            "title": "move - 1 - Copy",
            "id": 131093,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Un tableau est une collection d'éléments stockés dans une seule variable. Cette collection <code>Array&lt;T&gt;</code> utilise un type générique.</p><code version=\"2\" codelang=\"typescript\" name=\"script.ts\" visible-if=\"always\"><content><text value=\"let\" class=\"keyword\" /><text value=\" numbers: \" /><text value=\"Array\" class=\"built_in\" /><text value=\"&lt;\" /><text value=\"number\" class=\"built_in\" /><text value=\"&gt; = [\" /><text value=\"1\" class=\"number\" /><text value=\", \" /><text value=\"2\" class=\"number\" /><text value=\", \" /><text value=\"3\" class=\"number\" /><text value=\"];\" /><text type=\"break\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(numbers);\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"13\" endIndex=\"18\" /><option startIndex=\"18\" endIndex=\"19\" /><option startIndex=\"19\" endIndex=\"25\" /><option startIndex=\"25\" endIndex=\"26\" /></options></interaction></interactions><output><content><text value=\"[1, 2, 3]\" /></content></output></code><p visible-if=\"wrong\">Assurez-vous de choisir <code>Array</code> suivi de <code>&lt;</code> puis <code>number</code>, <code>&gt;</code>.</p></body></html>"
          },
          {
            "title": "move - 2",
            "id": 130999,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Comme tu le sais, nous pouvons également définir un tableau de chaînes de caractères. Cela fonctionne aussi avec la méthode générique de définition des types de tableaux.</p><code version=\"2\" codelang=\"typescript\" name=\"script.ts\" visible-if=\"always\"><content><text value=\"let\" class=\"keyword\" /><text value=\" names: \" /><text value=\"Array\" class=\"built_in\" /><text value=\"&lt;\" /><text value=\"string\" class=\"built_in\" /><text value=\"&gt; = [\" /><text value=\"&quot;Hello&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;TypeScript&quot;\" class=\"string\" /><text value=\"];\" /><text type=\"break\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(names);\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"11\" endIndex=\"16\" /><option startIndex=\"16\" endIndex=\"17\" /><option startIndex=\"17\" endIndex=\"23\" /><option startIndex=\"23\" endIndex=\"24\" /><option correct=\"false\"><content><text value=\"number\" /></content></option><option correct=\"false\"><content><text value=\"T\" /></content></option></options></interaction></interactions><output><content><text value=\"[&quot;Hello&quot;, &quot;TypeScript&quot;]\" /></content></output></code><p visible-if=\"wrong\">Assurez-vous de choisir <code>Array</code> suivi de <code>&lt;</code> puis <code>string</code>, <code>&gt;</code>.</p></body></html>"
          },
          {
            "title": "move -3",
            "id": 131082,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Nous pouvons également créer des interfaces avec un type générique. La syntaxe initiale ressemble à celle des classes avec des génériques que nous avons vues auparavant.</p><code version=\"2\" codelang=\"typescript\" name=\"script.ts\" visible-if=\"always\"><content><text value=\"class\" class=\"keyword\" /><text value=\" BoxClass&lt;T&gt; {\" /><text type=\"break\" /><text value=\" contents: T;\" /><text type=\"break\" /><text value=\"}\" /><text type=\"break\" /><text type=\"break\" /><text value=\"interface\" class=\"keyword\" /><text value=\" BoxInterface &lt;T&gt; {\" /><text type=\"break\" /><text value=\" contents: T;\" /><text type=\"break\" /><text value=\"}\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"14\" endIndex=\"15\" /><option startIndex=\"15\" endIndex=\"16\" /><option startIndex=\"16\" endIndex=\"17\" /><option startIndex=\"31\" endIndex=\"32\" /><option startIndex=\"60\" endIndex=\"61\" /><option startIndex=\"61\" endIndex=\"62\" /><option startIndex=\"62\" endIndex=\"63\" /><option startIndex=\"77\" endIndex=\"78\" /></options></interaction></interactions></code><p visible-if=\"wrong\">Assurez-vous de choisir <code>&lt;</code> suivi de <code>T</code> puis <code>&gt;</code>, <code>T</code>, <code>&lt;</code>, <code>T</code>, <code>&gt;</code>, <code>T</code>.</p></body></html>"
          },
          {
            "title": "move -3 - Copy",
            "id": 131094,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Créer une variable de type <code>BoxClass</code> et une qui implémente l'interface <code>BoxInterface</code> semble également similaire.</p><code version=\"2\" codelang=\"typescript\" name=\"script.ts\" visible-if=\"always\"><content><text value=\"class\" class=\"keyword\" /><text value=\" BoxClass &lt;T&gt; {\" /><text type=\"break\" /><text value=\" contents: T;\" /><text type=\"break\" /><text type=\"break\" /><text value=\" \" /><text value=\"constructor\" class=\"keyword\" /><text value=\"(\" /><text value=\"contents: T\" class=\"params\" /><text value=\") {\" /><text type=\"break\" /><text value=\"  \" /><text value=\"this\" class=\"keyword\" /><text value=\".contents = contents;\" /><text type=\"break\" /><text value=\" }\" /><text type=\"break\" /><text value=\"}\" /><text type=\"break\" /><text type=\"break\" /><text value=\"interface\" class=\"keyword\" /><text value=\" BoxInterface &lt;T&gt; {\" /><text type=\"break\" /><text value=\" contents: T;\" /><text type=\"break\" /><text value=\"}\" /><text type=\"break\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" stringBoxClass: BoxClass&lt;\" /><text value=\"string\" class=\"built_in\" /><text value=\"&gt; = \" /><text value=\"new\" class=\"keyword\" /><text value=\" BoxClass(\" /><text value=\"&quot;Hello&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" stringBoxInterface: BoxInterface&lt;\" /><text value=\"string\" class=\"built_in\" /><text value=\"&gt; = {\" /><text type=\"break\" /><text value=\"  contents: \" /><text value=\"&quot;Hello&quot;\" class=\"string\" /><text type=\"break\" /><text value=\"};\" /><text type=\"break\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(stringBoxClass.contents);\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(stringBoxInterface.contents);\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"174\" endIndex=\"175\" /><option startIndex=\"175\" endIndex=\"181\" /><option startIndex=\"181\" endIndex=\"182\" /><option startIndex=\"247\" endIndex=\"248\" /><option startIndex=\"248\" endIndex=\"254\" /><option startIndex=\"254\" endIndex=\"255\" /></options></interaction></interactions><output><content><text value=\"Hello\" /><text type=\"break\" /><text value=\"Hello\" /></content></output></code><p visible-if=\"wrong\">Assurez-vous de choisir <code>&lt;</code> suivi de <code>string</code> puis <code>&gt;</code>, <code>&lt;</code>, <code>string</code>, <code>&gt;</code>.</p></body></html>"
          },
          {
            "title": "move -3 - Copy - Copy",
            "id": 131095,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Nous pouvons également omettre d'ajouter explicitement le type pour la classe <code>BoxClass</code> car TypeScript sera capable de l'inférer.</p><code version=\"2\" codelang=\"typescript\" name=\"script.ts\" visible-if=\"always\"><content><text value=\"class\" class=\"keyword\" /><text value=\" BoxClass &lt;T&gt; {\" /><text type=\"break\" /><text value=\" contents: T;\" /><text type=\"break\" /><text type=\"break\" /><text value=\" \" /><text value=\"constructor\" class=\"keyword\" /><text value=\"(\" /><text value=\"contents: T\" class=\"params\" /><text value=\") {\" /><text type=\"break\" /><text value=\"  \" /><text value=\"this\" class=\"keyword\" /><text value=\".contents = contents;\" /><text type=\"break\" /><text value=\" }\" /><text type=\"break\" /><text value=\"}\" /><text type=\"break\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" stringBoxClass1: BoxClass&lt;\" /><text value=\"string\" class=\"built_in\" /><text value=\"&gt; = \" /><text value=\"new\" class=\"keyword\" /><text value=\" BoxClass(\" /><text value=\"&quot;Hello&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" stringBoxClass2 = \" /><text value=\"new\" class=\"keyword\" /><text value=\" BoxClass(\" /><text value=\"&quot;Hello&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(stringBoxClass1.contents)\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(stringBoxClass2.contents)\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"185\" endIndex=\"186\" /><option startIndex=\"187\" endIndex=\"190\" /><option startIndex=\"191\" endIndex=\"199\" /><option correct=\"false\"><content><text value=\":\" /></content></option><option correct=\"false\"><content><text value=\"BoxClass&lt;string&gt;\" /></content></option></options></interaction></interactions><output><content><text value=\"Hello\" /><text type=\"break\" /><text value=\"Hello\" /></content></output></code><p visible-if=\"wrong\">Assurez-vous de choisir <code>=</code> suivi de <code>new</code> et enfin <code>BoxClass</code>.</p></body></html>"
          },
          {
            "title": "Lesson #2",
            "id": 131011,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Maintenant, regardons les fonctions. Voici une fonction simple nommée <code>getId</code> qui renvoie l'id d'un objet.</p><code version=\"2\" codelang=\"typescript\" name=\"script.ts\" visible-if=\"always\"><content><text value=\"function\" class=\"keyword\" /><text value=\" \" /><text value=\"getId\" class=\"title\" /><text value=\"(\" /><text value=\"object: \" /><text value=\"any\" class=\"built_in\" /><text value=\"): \" /><text value=\"any\" class=\"title\" /><text value=\" \" /><text value=\"{\" /><text type=\"break\" /><text value=\" \" /><text value=\"return\" class=\"keyword\" /><text value=\" object.id;\" /><text type=\"break\" /><text value=\"}\" /><text type=\"break\" /><text type=\"break\" /><text value=\"let\" class=\"keyword\" /><text value=\" employee = {\" /><text type=\"break\" /><text value=\" id: \" /><text value=\"1\" class=\"number\" /><text value=\",\" /><text type=\"break\" /><text value=\" name: \" /><text value=\"'Io'\" class=\"string\" /><text type=\"break\" /><text value=\"};\" /><text type=\"break\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(getId(employee));\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"43\" endIndex=\"52\" /><option correct=\"false\"><content><text value=\"&quot;1&quot;\" /></content></option><option correct=\"false\"><content><text value=\"employee\" /></content></option></options></interaction></interactions><output><content><text value=\"1\" /></content></output></code><p visible-if=\"wrong\">Assurez-vous de choisir <code>object.id</code>.</p></body></html>"
          },
          {
            "title": "Lesson #4",
            "id": 131013,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Nous pouvons remplacer le type <code>any</code> par <code>T</code>, ce qui permet à notre fonction de prendre n'importe quel type de données.</p><code version=\"2\" codelang=\"typescript\" name=\"script.ts\" visible-if=\"always\"><content><text value=\"function\" class=\"keyword\" /><text value=\" \" /><text value=\"getId\" class=\"title\" /><text value=\" &lt;\" /><text value=\"T\" class=\"title\" /><text value=\"&gt; (\" /><text value=\"object: T\" class=\"params\" /><text value=\"): \" /><text value=\"T\" class=\"title\" /><text value=\" \" /><text value=\"{\" /><text type=\"break\" /><text value=\" \" /><text value=\"return\" class=\"keyword\" /><text value=\" object.id;\" /><text type=\"break\" /><text value=\"}\" /><text type=\"break\" /><text type=\"break\" /><text value=\"let\" class=\"keyword\" /><text value=\" employee = {\" /><text type=\"break\" /><text value=\" id: \" /><text value=\"1\" class=\"number\" /><text value=\",\" /><text type=\"break\" /><text value=\" name: \" /><text value=\"'Io'\" class=\"string\" /><text type=\"break\" /><text value=\"};\" /><text type=\"break\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(getId(employee));\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"16\" endIndex=\"17\" /><option startIndex=\"28\" endIndex=\"29\" /><option startIndex=\"32\" endIndex=\"33\" /></options></interaction></interactions><output><content><text value=\"1\" /></content></output></code><p visible-if=\"wrong\">Assurez-vous de choisir <code>T</code> suivi de <code>T</code> et enfin <code>T</code>.</p></body></html>"
          },
          {
            "title": "Lesson #6",
            "id": 131015,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Si nous voulons que notre type de retour soit toujours un type spécifique, nous pouvons également le définir.</p><code version=\"2\" codelang=\"typescript\" name=\"script.ts\" visible-if=\"always\"><content><text value=\"function\" class=\"keyword\" /><text value=\" \" /><text value=\"getId\" class=\"title\" /><text value=\"&lt;\" /><text value=\"T\" class=\"title\" /><text value=\"&gt;(\" /><text value=\"object: T\" class=\"params\" /><text value=\"): \" /><text value=\"string\" class=\"title\" /><text value=\" \" /><text value=\"{\" /><text type=\"break\" /><text value=\"    \" /><text value=\"return\" class=\"keyword\" /><text value=\" object.id.toString();\" /><text type=\"break\" /><text value=\"}\" /><text type=\"break\" /><text type=\"break\" /><text value=\"let\" class=\"keyword\" /><text value=\" employee = {\" /><text type=\"break\" /><text value=\"    id: \" /><text value=\"1\" class=\"number\" /><text value=\",\" /><text type=\"break\" /><text value=\"    name: \" /><text value=\"'Io'\" class=\"string\" /><text type=\"break\" /><text value=\"};\" /><text type=\"break\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(getId(employee));\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"30\" endIndex=\"36\" /><option startIndex=\"60\" endIndex=\"70\" /><option correct=\"false\"><content><text value=\"toNumber()\" /></content></option></options></interaction></interactions><output><content><text value=\"1\" /></content></output></code><p visible-if=\"wrong\">Assurez-vous de choisir <code>string</code> suivi de <code>toString()</code>.</p></body></html>"
          },
          {
            "title": "move - 4",
            "id": 131004,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Comment vas-tu déclarer un tableau de nombres dans les génériques TypeScript ?</p><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\"><code>let numbers: Array&lt;number&gt; = [1, 2, 3];</code></item><item value=\"2\" correct=\"false\"><code>let numbers: Array = [1, 2, 3];</code></item></selection><p visible-if=\"wrong\"><code>let numbers: Array&lt;number&gt; = [1, 2, 3];</code>.</p></body></html>"
          },
          {
            "title": "move -5",
            "id": 131007,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Créons une interface avec des generics.</p><code version=\"2\" codelang=\"typescript\" name=\"script.ts\" visible-if=\"always\"><content><text value=\"interface\" class=\"keyword\" /><text value=\" GenericInterface &lt;T&gt; {\" /><text type=\"break\" /><text type=\"break\" /><text value=\"}\" /></content><interactions><interaction type=\"validatedInput\" isDefault=\"true\" startIndex=\"27\" endIndex=\"30\" /></interactions></code><p visible-if=\"wrong\">Assurez-vous de rentrer <code>&lt;T&gt;</code>.</p></body></html>"
          },
          {
            "title": "Lesson #5",
            "id": 130990,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Crée une classe appelée <code>GenericClass</code> en utilisant des generics.</p><code version=\"2\" codelang=\"typescript\" name=\"script.ts\" visible-if=\"always\"><content><text value=\"class\" class=\"keyword\" /><text value=\" GenericClass &lt;T&gt; {\" /><text type=\"break\" /><text value=\" value: T;\" /><text type=\"break\" /><text value=\" add: \" /><text value=\"(\" /><text value=\"x: T, y: T\" class=\"params\" /><text value=\") =&gt;\" /><text value=\" T;\" /><text type=\"break\" /><text value=\"}\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"6\" endIndex=\"22\" /><option correct=\"false\"><content><text value=\"Generic&lt;T&gt;\" /></content></option><option correct=\"false\"><content><text value=\"GenericClass\" /></content></option></options></interaction></interactions></code><p visible-if=\"wrong\">Assurez-vous de choisir <code>GenericClass &lt;T&gt;</code>.</p></body></html>"
          },
          {
            "title": "Lesson #6",
            "id": 130991,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>À quoi ressemble la définition de l'interface <code>GenericClass</code> ?</p><code version=\"2\" codelang=\"typescript\" name=\"script.ts\" visible-if=\"always\"><content><text value=\"let\" class=\"keyword\" /><text value=\" numClass: GenericClass&lt;\" /><text value=\"number\" class=\"built_in\" /><text value=\"&gt; = {\" /><text type=\"break\" /><text value=\" value: \" /><text value=\"12\" class=\"number\" /><text value=\",\" /><text type=\"break\" /><text value=\" add: \" /><text value=\"function\" class=\"keyword\" /><text value=\"(\" /><text value=\"x, y\" class=\"params\" /><text value=\") \" /><text value=\"{\" /><text type=\"break\" /><text value=\"  \" /><text value=\"return\" class=\"keyword\" /><text value=\" x + y;\" /><text type=\"break\" /><text value=\" }\" /><text type=\"break\" /><text value=\"};\" /><text type=\"break\" /><text type=\"break\" /><text value=\"let\" class=\"keyword\" /><text value=\" strClass: GenericClass&lt;\" /><text value=\"string\" class=\"built_in\" /><text value=\"&gt; = {\" /><text type=\"break\" /><text value=\" value: \" /><text value=\"'Hello'\" class=\"string\" /><text value=\",\" /><text type=\"break\" /><text value=\" add: \" /><text value=\"function\" class=\"keyword\" /><text value=\"(\" /><text value=\"x, y\" class=\"params\" /><text value=\") \" /><text value=\"{\" /><text type=\"break\" /><text value=\"  \" /><text value=\"return\" class=\"keyword\" /><text value=\" x.concat(y);\" /><text type=\"break\" /><text value=\" }\" /><text type=\"break\" /><text value=\"};\" /><text type=\"break\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(numClass.add(\" /><text value=\"10\" class=\"number\" /><text value=\", \" /><text value=\"12\" class=\"number\" /><text value=\"));\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(strClass.add(\" /><text value=\"'Hello'\" class=\"string\" /><text value=\", \" /><text value=\"', world!'\" class=\"string\" /><text value=\"));\" /></content><output><content><text value=\"22\" /><text type=\"break\" /><text value=\"Hello, world!\" /></content></output></code><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\"><code>interface GenericClass&lt;T&gt; { ... }</code></item><item value=\"2\" correct=\"false\"><code>interface GenericClass { ... }</code></item></selection><p visible-if=\"wrong\"><code>interface GenericClass&lt;T&gt; { ... }</code>.</p></body></html>"
          },
          {
            "title": "Lesson #15",
            "id": 131096,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Appelle la fonction <code>identity</code> en utilisant le type correct.</p><code version=\"2\" codelang=\"typescript\" name=\"script.ts\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" identity = &lt;T&gt;(arg: T): \" /><text value=\"T\" class=\"params\" /><text value=\" =&gt;\" /><text value=\" {\" /><text type=\"break\" /><text value=\" \" /><text value=\"return\" class=\"keyword\" /><text value=\" arg;\" /><text type=\"break\" /><text value=\"};\" /><text type=\"break\" /><text type=\"break\" /><text value=\"let\" class=\"keyword\" /><text value=\" element = identity&lt;\" /><text value=\"number\" class=\"built_in\" /><text value=\"&gt;(\" /><text value=\"42\" class=\"number\" /><text value=\");\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(element);\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"68\" endIndex=\"76\" /><option startIndex=\"76\" endIndex=\"84\" /><option correct=\"false\"><content><text value=\"&lt;string&gt;\" /></content></option><option correct=\"false\"><content><text value=\"&lt;T&gt;\" /></content></option></options></interaction></interactions><output><content><text value=\"42\" /></content></output></code><p visible-if=\"wrong\">Assurez-vous de choisir <code>identity</code> suivi de <code>&lt;number&gt;</code>.</p></body></html>"
          }
        ]
      }
    ]
  }
}