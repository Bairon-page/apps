{
  "tutorial": {
    "id": 2260,
    "version": 1,
    "type": "practiceOptional",
    "isNew": false,
    "codeLanguage": "javascript",
    "title": "ES6 2",
    "descriptionContent": "ES6 2",
    "shortDescriptionContent": "",
    "showInTrack": true,
    "iconBanner": null,
    "chapters": [
      {
        "id": 12265,
        "title": "Littéraux de gabarits",
        "type": "practiceLevel3",
        "lessons": [
          {
            "title": "Code: Literal String",
            "id": 111442,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Crée une variable nommée `favoriteIceCream` et assigne-lui une chaîne de caractères littérale `chocolate`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "console.log(favoriteIceCream);",
                  "solvedContent": "const favoriteIceCream = `chocolate`;\r\nconsole.log(favoriteIceCream);"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Code: Variables",
            "id": 111443,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Combine les littéraux de chaîne pour que `bestDessert` soit égal à `vanilla ice cream`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const favoriteIceCream = `vanilla`;\r\nconst bestDessert = ``;\r\nconsole.log(bestDessert);",
                  "solvedContent": "const favoriteIceCream = `vanilla`;\r\nconst bestDessert = `${favoriteIceCream} ice cream`;\r\nconsole.log(bestDessert);"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Code: Expressions",
            "id": 111444,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "À l'intérieur de la chaîne `students` et après le `:`, code une expression qui additionne tous les numéros des étudiants de l'école. Tu voudras une chaîne qui s'affiche comme `# of Students: 260`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const elementarySchool = 90;\r\nconst middleSchool = 70;\r\nconst highSchool = 100;\r\nconst students = `# of Students:`;",
                  "solvedContent": "const elementarySchool = 90;\r\nconst middleSchool = 70;\r\nconst highSchool = 100;\r\nconst students =\r\n `# of Students: ${elementarySchool + middleSchool + highSchool}`;"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Code: Functions",
            "id": 111441,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Code le `${color}` dans la ligne de retour et appelle la fonction pour que le message soit `Jerry always wears blue shirts.` . Passe le paramètre sans parenthèses.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const bestColor = (color) => {\r\n const name = `Jerry`;\r\n return `${name} always wears  shirts.`;\r\n};\r\nconsole.log();",
                  "solvedContent": "const bestColor = (color) => {\r\n const name = `Jerry`;\r\n return `${name} always wears ${color} shirts.`;\r\n};\r\nconsole.log(bestColor`blue`);"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 13605,
        "title": "Déstructuration",
        "type": "practiceLevel3",
        "lessons": [
          {
            "title": "Code 1: Basic Array Destructuring",
            "id": 122394,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Nous avons prévu une liste de vêtements fabuleux et nous devons l'imprimer ! Déstructure le tableau et stocke ses éléments dans les variables `top`, `bottom`, `outerwear`, et `footwear`. Garde l'ordre à l'intérieur de `[]`. Ensuite, `console.log` chaque variable.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const [, , , ] = [\"Baseball top\", \"kilt\", \"Blazer\", \"Boots\"];\nconsole.log();\nconsole.log();\nconsole.log();\nconsole.log();",
                  "solvedContent": "const [top, bottom, outerwear, footwear] = [\"Baseball top\", \"kilt\",\n \"Blazer\", \"Boots\"\n];\nconsole.log(top);\nconsole.log(bottom);\nconsole.log(outerwear);\nconsole.log(footwear);"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Code 2: The rest in Array Destructuring",
            "id": 122395,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Dans cette liste de thés, nous trouvons différentes saveurs. Nous voulons imprimer une phrase sur les bienfaits du thé aux baies, mais nous voulons conserver les autres thés. Stocke `Berry` dans la variable `berryTea` et les thés restants dans `otherTeas`. Ensuite, inclue la variable liée à `Berry` dans le premier `console.log` et imprime les thés restants dans le second.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const [] = ['Berry', 'Chai', 'Chamomile', 'Citrus', 'Fruity'];\nconsole.log(`The ${} tea has Sun-proofing and Nourishing effects.`);\nconsole.log();",
                  "solvedContent": "const [berryTea, ...otherTeas] = ['Berry', 'Chai', 'Chamomile',\n 'Citrus', 'Fruity'\n];\nconsole.log(\n `The ${berryTea} tea has Sun-proofing and Nourishing effects.`);\nconsole.log(otherTeas);"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Code 3: Extract Values in Destructuring",
            "id": 122396,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Dans la boulangerie de notre voisin, nous avons différents types de pain. Cette fois, nous devons choisir la `Focaccia` pour imprimer une phrase informative qui fera vendre ce pain comme des petits pains ! Extrait et stocke cette valeur dans la variable `italianBread`, puis utilise-la dans le `console.log`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const [] = ['Sourdough', 'Baguette', 'Brioche', 'Focaccia',\n 'Multigrain'\n];\nconsole.log(\n `${} is leavened bread than produces a fluffy appearance.`);",
                  "solvedContent": "const [, , , italianBread] = ['Sourdough', 'Baguette', 'Brioche',\n 'Focaccia', 'Multigrain'\n];\nconsole.log(\n `${italianBread} is leavened bread than produces a fluffy appearance.`\n );"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Code 4: Basic Object Destructuring",
            "id": 122397,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Voler est une aventure fantastique ! Passons en revue certaines caractéristiques de Boeing dans cet objet. Déstructure toutes ses propriétés pour les utiliser dans le `console.log`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const aircrafts = {\n brand: 'Boeing',\n nose: 'Pointed nose',\n windshield: 'V-shaped windshield',\n tail: 'Sloped Tail',\n};\nconst {} = aircrafts;\nconsole.log(`The ${brand} Company was founded on July 15, 1916.`);\nconsole.log(`This aircraft has a ${nose}, and a ${windshield}`);\nconsole.log(`And at least but not last a ${tail}`);",
                  "solvedContent": "const aircrafts = {\n brand: 'Boeing',\n nose: 'Pointed nose',\n windshield: 'V-shaped windshield',\n tail: 'Sloped Tail',\n};\nconst {\n brand,\n nose,\n windshield,\n tail\n} = aircrafts;\nconsole.log(`The ${brand} Company was founded on July 15, 1916.`);\nconsole.log(`This aircraft has a ${nose}, and a ${windshield}`);\nconsole.log(`And at least but not last a ${tail}`);"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Code 5: Different variable name",
            "id": 122398,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Nous devons vérifier les propriétés de la `smartTV` avant d'aller au centre commercial et d'en acheter une nouvelle. En regardant les noms des propriétés, les deux premiers sont trop généraux pour être utiles ; changeons donc `type` pour `screenType` et `shape` pour `screenShape` dans la déstructuration de l'objet.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const smartTV = {\n type: \"QLED\",\n shape: \"Flat\",\n ports: \"HDMI\",\n connectivity: 'Wi-Fi'\n};\nconst {} = smartTV;\nconsole.log(screenType);\nconsole.log(screenShape);",
                  "solvedContent": "const smartTV = {\n type: \"QLED\",\n shape: \"Flat\",\n ports: \"HDMI\",\n connectivity: 'Wi-Fi'\n};\nconst {\n type: screenType,\n shape: screenShape,\n} = smartTV;\nconsole.log(screenType);\nconsole.log(screenShape);"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Code 6: The rest in Object destructuring",
            "id": 122399,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Nous avons un objet avec les meilleures séries télévisées par décennie. Nous voulons stocker la propriété `eighties` mais conserver les autres propriétés dans `otherOldShows`. Ajoute ces variables à la déstructuration d'objet, et inclut `eighties` dans le premier `console.log`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const oldShows = {\n fifties: \"Maverick\",\n sixties: \"The Saint\",\n seventies: \"The Love Boat\",\n eighties: \"Manimal\",\n nineties: \"Dawson's Creek\"\n};\nconst {} = oldShows;\nconsole.log(`The best tv show in the 80s was ${}`);\nconsole.log(otherOldShows);",
                  "solvedContent": "const oldShows = {\n fifties: \"Maverick\",\n sixties: \"The Saint\",\n seventies: \"The Love Boat\",\n eighties: \"Manimal\",\n nineties: \"Dawson's Creek\"\n};\nconst {\n eighties,\n ...otherOldShows\n} = oldShows;\nconsole.log(`The best tv show in the 80s was ${eighties}`);\nconsole.log(otherOldShows);"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Code 7: Default Values in Destructuring",
            "id": 122400,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Le monde de la bière est fascinant avec tous les différents types et la quantité considérable que l'on peut trouver. Nous avons un objet contenant des informations sur une bière spécifique. Il est nécessaire de définir une valeur par défaut pour la propriété `brand` car elle est manquante dans `beer`. Définit `\"N/A\"` comme valeur par défaut pour `brand` dans la déstructuration de l'objet. Ensuite, imprime `brand`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const beer = {\n name: '\tBlue Moon White',\n alcoholPercentage: 5.4,\n calories: 171,\n carbs: 12.9\n};\nconst {} = beer;\nconsole.log();",
                  "solvedContent": "const beer = {\n name: '\tBlue Moon White',\n alcoholPercentage: 5.4,\n calories: 171,\n carbs: 12.9\n};\nconst {\n brand = \"N/A\"\n} = beer;\nconsole.log(brand);"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Code 8: Parameters in Functions",
            "id": 122401,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Déstructure les deux premiers éléments de `mountains` en tant que paramètres pour `getMountainsNickname`. Utilise les noms de variables `alps` et `logan`. Ensuite, imprime-les à l'intérieur de la fonction dans le même ordre.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const mountains = [\"Swiss Alps\", \"Mount Logan\", \"Mount Fuji\",\n \"Mauna Kea\", \"Jotunheimen Mountains\"\n];\n\nfunction getMountainsNickname() {\n console.log(`The ${} are The Magical Mountains.`);\n console.log(`The ${} is The Snowy Paradise.`);\n}\ngetMountainsNickname(mountains);",
                  "solvedContent": "const mountains = [\"Swiss Alps\", \"Mount Logan\", \"Mount Fuji\",\n \"Mauna Kea\", \"Jotunheimen Mountains\"\n];\n\nfunction getMountainsNickname([alps, logan]) {\n console.log(`The ${alps} are The Magical Mountains.`);\n console.log(`The ${logan} is The Snowy Paradise.`);\n}\ngetMountainsNickname(mountains);"
                }
              ],
              "hints": []
            }
          }
        ]
      }
    ]
  }
}