{
  "tutorial": {
    "id": 2113,
    "version": 15,
    "type": "course",
    "isNew": false,
    "codeLanguage": "node",
    "title": "Communiquer avec une API",
    "descriptionContent": "Apprends-en plus sur les APIs. Ce qu'elles sont, comment elles fonctionnent, et pourquoi nous les utilisons.",
    "shortDescriptionContent": "",
    "showInTrack": true,
    "iconBanner": null,
    "chapters": [
      {
        "id": 13266,
        "title": "Votre premier Endpoint",
        "type": "practiceLevel1",
        "lessons": [
          {
            "title": "Intro",
            "id": 119226,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p><em>Interfaces de programmation d'applications</em>, également connues sous le nom de <code>API</code>, permettent la communication entre deux programmes.</p><p>Ils permettent à un programme d'envoyer des requêtes et de recevoir des réponses d'un autre, permettant ainsi aux systèmes d'interagir et de partager des données efficacement.</p></body></html>"
          },
          {
            "title": "Intro: Similar real life example I",
            "id": 119237,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>De nombreux systèmes du monde réel fonctionnent comme une <strong>API</strong>. Une API est comme un serveur qui prend ta commande (<em>requête</em>) pour la cuisine.</p><p>La cuisine (serveur) le traite et renvoie le repas (<em>réponse</em>) par l'intermédiaire du serveur.</p></body></html>"
          },
          {
            "title": "GET",
            "id": 132243,
            "contentType": "interactive",
            "images": [
              {
                "id": "906453c7-49b9-498a-a1e9-217d327dccf9"
              }
            ],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Une requête API courante est une requête <code>GET</code>, comme demander le menu à un serveur.</p><p>Une requête <code>GET</code> demande des informations au serveur. Le serveur répond ensuite avec les données nécessaires.</p><img src=\"906453c7-49b9-498a-a1e9-217d327dccf9\" visible-if=\"always\" /></body></html>"
          },
          {
            "title": "Express - Copy",
            "id": 132289,
            "contentType": "interactive",
            "images": [
              {
                "id": "696c8f33-dd3d-4182-b8ae-71f0a5e912e1"
              }
            ],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Nous utilisons <strong>Node</strong> pour exécuter JavaScript sur le serveur et le framework <strong>Express</strong> pour construire des fonctionnalités serveur, telles que les requêtes et les réponses.</p><p>Express est un framework web populaire pour Node qui simplifie la création de serveurs.</p><img src=\"696c8f33-dd3d-4182-b8ae-71f0a5e912e1\" visible-if=\"always\" /></body></html>"
          },
          {
            "title": "GET requests",
            "id": 119239,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Voici le premier endpoint dans Express. Beaucoup de choses se passent ici, mais tu comprends déjà qu'il s'agit d'une requête <code>GET</code>.</p><code version=\"2\" codelang=\"javascript\" name=\"app.js\" visible-if=\"always\"><content><text value=\"app.get(\" /><text value=\"&quot;/menu&quot;\" class=\"string\" /><text value=\", (req, res) =&gt; {\" /><text type=\"break\" /><text type=\"break\" /><text value=\"});\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"4\" endIndex=\"7\" /></options></interaction></interactions><output><content><text value=\"Here is your menu!\" /></content></output></code><p visible-if=\"wrong\">Assurez-vous de choisir <code>get</code>.</p></body></html>"
          },
          {
            "title": "GET requests - Copy",
            "id": 132301,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Comme tu le sais, une API est censée retourner quelque chose. Faisons-le ici aussi et renvoyons <code>\"Here is your menu!\"</code>.</p><p>Le serveur renvoie une réponse via <code>res</code>.</p><code version=\"2\" codelang=\"javascript\" name=\"app.js\" visible-if=\"always\"><content><text value=\"app.get(\" /><text value=\"&quot;/menu&quot;\" class=\"string\" /><text value=\", (req, res) =&gt; {\" /><text type=\"break\" /><text value=\" res.send(\" /><text value=\"&quot;Here is your menu!&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\"});\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"43\" endIndex=\"63\" /></options></interaction></interactions><output><content><text value=\"Here is your menu!\" /></content></output></code><p visible-if=\"wrong\">Assurez-vous de choisir <code>\"Here is your menu!\"</code>.</p></body></html>"
          },
          {
            "title": "GET requests - Copy",
            "id": 132287,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Le <code>GET</code> dans une requête <code>GET</code> fait référence à la méthode HTTP utilisée. C'est l'une des plusieurs méthodes utilisées pour récupérer des données du serveur.</p><code version=\"2\" codelang=\"javascript\" name=\"app.js\" visible-if=\"always\"><content><text value=\"app.get(\" /><text value=\"&quot;/menu&quot;\" class=\"string\" /><text value=\", (req, res) =&gt; {\" /><text type=\"break\" /><text value=\" res.send(\" /><text value=\"&quot;Here is your menu!&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\"});\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"4\" endIndex=\"7\" /><option correct=\"false\"><content><text value=\"retrieve\" /></content></option></options></interaction></interactions><output><content><text value=\"Here is your menu!\" /></content></output></code><p visible-if=\"wrong\">Assurez-vous de choisir <code>get</code>.</p></body></html>"
          },
          {
            "title": "GET requests 2",
            "id": 132246,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Un <em>itinéraire</em> est un chemin sur le serveur qui envoie une réponse spécifique lorsqu'il est demandé, comme <code>/menu</code> retournant un menu.</p><code version=\"2\" codelang=\"javascript\" name=\"app.js\" visible-if=\"always\"><content><text value=\"app.get(\" /><text value=\"&quot;/menu&quot;\" class=\"string\" /><text value=\", (req, res) =&gt; {\" /><text type=\"break\" /><text value=\" res.send(\" /><text value=\"&quot;Here is your menu!&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\"});\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"8\" endIndex=\"15\" /></options></interaction></interactions><output><content><text value=\"Here is your menu!\" /></content></output></code><p visible-if=\"wrong\">Assurez-vous de choisir <code>\"/menu\"</code>.</p></body></html>"
          },
          {
            "title": "GET requests 3",
            "id": 132247,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Chaque endpoint définit une route, comme <code>/menu</code>, et a une fonction qui prend <code>req</code> (requête) et <code>res</code> (réponse) pour gérer la requête et répondre.</p><code version=\"2\" codelang=\"javascript\" name=\"app.js\" visible-if=\"always\"><content><text value=\"app.get(\" /><text value=\"&quot;/menu&quot;\" class=\"string\" /><text value=\", (req, res) =&gt; {\" /><text type=\"break\" /><text value=\" res.send(\" /><text value=\"&quot;Here is your menu!&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\"});\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"18\" endIndex=\"22\" /><option startIndex=\"23\" endIndex=\"26\" /><option startIndex=\"34\" endIndex=\"37\" /></options></interaction></interactions><output><content><text value=\"Here is your menu!\" /></content></output></code><p visible-if=\"wrong\">Assurez-vous de choisir <code>req,</code> suivi de <code>res</code> et enfin <code>res</code>.</p></body></html>"
          },
          {
            "title": "GET requests 4",
            "id": 132248,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Dans cet exemple, nous n'avons pas besoin d'utiliser le paramètre <code>req</code>, mais nous utilisons <code>res</code> pour envoyer une réponse au client, comme livrer le menu.</p><code version=\"2\" codelang=\"javascript\" name=\"app.js\" visible-if=\"always\"><content><text value=\"app.get(\" /><text value=\"&quot;/menu&quot;\" class=\"string\" /><text value=\", (req, res) =&gt; {\" /><text type=\"break\" /><text value=\" res.send(\" /><text value=\"&quot;Here is your menu!&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\"});\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"23\" endIndex=\"26\" /><option startIndex=\"34\" endIndex=\"37\" /><option startIndex=\"37\" endIndex=\"42\" /></options></interaction></interactions><output><content><text value=\"Here is your menu!\" /></content></output></code><p visible-if=\"wrong\">Assurez-vous de choisir <code>res</code> suivi de <code>res</code> et enfin <code>.send</code>.</p></body></html>"
          },
          {
            "title": "Example 1",
            "id": 119248,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Écris une requête <code>GET</code>.</p><code version=\"2\" codelang=\"javascript\" name=\"app.js\" visible-if=\"always\"><content><text value=\"app.get(\" /><text value=\"&quot;/menu&quot;\" class=\"string\" /><text value=\", (req, res) =&gt; {\" /><text type=\"break\" /><text value=\" res.send(\" /><text value=\"&quot;Here is your menu!&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\"});\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"0\" endIndex=\"3\" /><option startIndex=\"4\" endIndex=\"7\" /></options></interaction></interactions><output><content><text value=\"Here is your menu!\" /></content></output></code><p visible-if=\"wrong\">Assurez-vous de choisir <code>app</code> suivi de <code>get</code>.</p></body></html>"
          },
          {
            "title": "Question 1",
            "id": 119227,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Que signifie <code>API</code> ?</p><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\">Interface de Programmation d'Applications</item><item value=\"2\" correct=\"false\">Interface de programmation d'assistance</item></selection><p visible-if=\"wrong\">Interface de Programmation d'Applications.</p></body></html>"
          },
          {
            "title": "Example 2",
            "id": 119249,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Assure-toi que le endpoint <code>/menu</code> renvoie une réponse.</p><code version=\"2\" codelang=\"javascript\" name=\"app.js\" visible-if=\"always\"><content><text value=\"app.get(\" /><text value=\"&quot;/menu&quot;\" class=\"string\" /><text value=\", (req, res) =&gt; { \" /><text type=\"break\" /><text value=\" res.send(\" /><text value=\"&quot;Here is your menu!&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"});\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"35\" endIndex=\"38\" /><option startIndex=\"38\" endIndex=\"39\" /><option startIndex=\"39\" endIndex=\"43\" /></options></interaction></interactions><output><content><text value=\"Here is your menu!\" /></content></output></code><p visible-if=\"wrong\">Assurez-vous de choisir <code>res</code> suivi de <code>.</code> et enfin <code>send</code>.</p></body></html>"
          },
          {
            "title": "Question 2",
            "id": 119243,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Voici un autre exemple de la vie réelle. Tu remplis un formulaire de demande en ligne pour un prêt bancaire, quel est le rôle correct pour chaque partie impliquée ?</p><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\">Tu es l'expéditeur, le formulaire de demande en ligne est l'<code>API</code>, la banque est le récepteur</item><item value=\"2\" correct=\"false\">Tu es l'<code>API</code>, le formulaire de demande en ligne est l'expéditeur, la banque est le destinataire</item><item value=\"3\" correct=\"false\">Tu es l'expéditeur, le formulaire de demande en ligne est le récepteur, la banque est l'<code>API</code></item></selection><p visible-if=\"wrong\">Tu es l'expéditeur, le formulaire de demande en ligne est l'<code>API</code>, la banque est le récepteur.</p></body></html>"
          },
          {
            "title": "Example 3",
            "id": 132249,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Définis la route <code>/menu</code>.</p><code version=\"2\" codelang=\"javascript\" name=\"app.js\" visible-if=\"always\"><content><text value=\"app.get(\" /><text value=\"&quot;/menu&quot;\" class=\"string\" /><text value=\", (req, res) =&gt; { \" /><text type=\"break\" /><text value=\" res.send(\" /><text value=\"&quot;Here is your menu!&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"});\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"8\" endIndex=\"15\" /><option correct=\"false\"><content><text value=\"&quot;/&quot;\" /></content></option></options></interaction></interactions><output><content><text value=\"Here is your menu!\" /></content></output></code><p visible-if=\"wrong\">Assurez-vous de choisir <code>\"/menu\"</code>.</p></body></html>"
          },
          {
            "title": "Question 3",
            "id": 119244,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Comment fonctionne une <code>API</code> ?</p><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\">Il envoie la demande de l'expéditeur au récepteur et la réponse du récepteur à l'expéditeur</item><item value=\"2\" correct=\"false\">Il connecte simplement l'expéditeur et le destinataire et les laisse faire leur truc</item><item value=\"3\" correct=\"false\">Il surveille simplement pour s'assurer que l'expéditeur et le destinataire s'envoient des messages</item></selection><p visible-if=\"wrong\">Il envoie la demande de l'expéditeur au récepteur et la réponse du récepteur à l'expéditeur.</p></body></html>"
          },
          {
            "title": "Example 4",
            "id": 132250,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Assure-toi que la route <code>/menu</code> peut gérer une requête <code>GET</code> et envoyer une réponse au client.</p><code version=\"2\" codelang=\"javascript\" name=\"app.js\" visible-if=\"always\"><content><text value=\"app.get(\" /><text value=\"&quot;/menu&quot;\" class=\"string\" /><text value=\", (req, res) =&gt; { \" /><text type=\"break\" /><text value=\" res.send(\" /><text value=\"&quot;Here is your menu!&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"});\" /></content><interactions><interaction type=\"validatedInput\" isDefault=\"true\" startIndex=\"4\" endIndex=\"7\" /></interactions><output><content><text value=\"Here is your menu!\" /></content></output></code><p visible-if=\"wrong\">Assurez-vous de rentrer <code>get</code>.</p></body></html>"
          }
        ]
      },
      {
        "id": 13269,
        "title": "Démarrer un serveur",
        "type": "practiceLevel1",
        "lessons": [
          {
            "title": "APIs",
            "id": 119251,
            "contentType": "interactive",
            "images": [
              {
                "id": "9e38976a-0aca-4e11-8369-1243822de4d5"
              }
            ],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Maintenant que tu sais ce qu'est une <code>API</code>, parlons de démarrer ton propre serveur.</p><img src=\"9e38976a-0aca-4e11-8369-1243822de4d5\" visible-if=\"always\" /></body></html>"
          },
          {
            "title": "npm init",
            "id": 132302,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Exécute <code>node app.js</code> dans le terminal pour démarrer un serveur local, où app.js est le fichier contenant ton code serveur.</p><p>Cependant, chez Mimo, nous nous en occupons pour toi. Si tu te rends dans la section des projets, tu peux créer un nouveau serveur en cliquant sur un bouton.</p><code version=\"2\" codelang=\"bash\" name=\"Console Editor\" visible-if=\"always\"><content><text value=\"node app.js\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"0\" endIndex=\"4\" /><option startIndex=\"5\" endIndex=\"11\" /></options></interaction></interactions><output><content><text value=\"Server is running on port 3000\" /></content></output></code><p visible-if=\"wrong\">Assurez-vous de choisir <code>node</code> suivi de <code>app.js</code>.</p></body></html>"
          },
          {
            "title": "Localhost",
            "id": 132258,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p><code>http://localhost:3000</code> fait référence à la machine locale (ton ordinateur) exécutant le serveur sur le port 3000, te permettant d'accéder à l'application.</p><p>Chez Mimo, nous nous occupons de cela pour toi. Nous gérons le serveur et le rendons facilement accessible pour toi.</p><code version=\"2\" codelang=\"bash\" name=\"Console Editor\" visible-if=\"always\"><content><text value=\"http://localhost:3000\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"0\" endIndex=\"21\" /></options></interaction></interactions><output><content><text value=\"Server is running on port 3000\" /></content></output></code><p visible-if=\"wrong\">Assurez-vous de choisir <code>http://localhost:3000</code>.</p></body></html>"
          },
          {
            "title": "Lesson #18 - Copy - Copy",
            "id": 132253,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Une fois que ton serveur est démarré, tu peux utiliser un navigateur pour appeler un endpoint. Pour obtenir une réponse, entre <code>http://localhost:3000/menu</code> dans le navigateur.</p><p>Dans notre cas, le serveur répond avec <code>\"Here is your menu!\"</code>.</p><webview version=\"2\" visible-if=\"always\" content=\"&lt;html&gt;&lt;body&gt;&lt;p&gt;Here is your menu!&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;\" /></body></html>"
          },
          {
            "title": "API Tools - Copy",
            "id": 132276,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Les navigateurs peuvent appeler un endpoint d'API. Cependant, il est parfois plus efficace d'utiliser un testeur d'API.</p><p>En utilisant un testeur d'API, tu définis le type de requête (comme <code>GET</code>), l'URL de l'endpoint, et plus encore. Chez Mimo, nous en fournissons un facile à utiliser.</p><webview version=\"2\" visible-if=\"always\" content=\"&lt;!doctype html&gt;&#xA;&lt;html lang=&quot;en&quot;&gt;&#xA;&lt;head&gt;&#xA;  &lt;meta charset=&quot;UTF-8&quot;&gt;&#xA;  &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;&#xA;  &lt;title&gt;Simple API Tester&lt;/title&gt;&#xA;  &lt;link href=&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.2.2/dist/css/bootstrap.min.css&quot; rel=&quot;stylesheet&quot;&gt;&#xA;  &lt;style&gt;&#xA;    body {&#xA;      padding: 20px;&#xA;    }&#xA;    .response-box {&#xA;      margin-top: 20px;&#xA;      padding: 15px;&#xA;      background-color: #f8f9fa;&#xA;      border-radius: 5px;&#xA;    }&#xA;  &lt;/style&gt;&#xA;&lt;/head&gt;&#xA;&lt;body&gt;&#xA;&#xA;  &lt;div class=&quot;container&quot;&gt;&#xA;    &lt;h1&gt;API Request Tester&lt;/h1&gt;&#xA;&#xA;    &lt;form id=&quot;apiForm&quot;&gt;&#xA;      &lt;div class=&quot;input-group mb-4&quot;&gt;&#xA;        &lt;select class=&quot;form-select flex-grow-0 w-auto&quot; id=&quot;methodSelect&quot;&gt;&#xA;          &lt;option value=&quot;GET&quot; selected&gt;GET&lt;/option&gt;&#xA;          &lt;option value=&quot;POST&quot; disabled&gt;POST&lt;/option&gt;&#xA;          &lt;option value=&quot;PUT&quot; disabled&gt;PUT&lt;/option&gt;&#xA;          &lt;option value=&quot;DELETE&quot; disabled&gt;DELETE&lt;/option&gt;&#xA;        &lt;/select&gt;&#xA;        &lt;input id=&quot;urlInput&quot; required class=&quot;form-control&quot; type=&quot;url&quot; value=&quot;http://localhost:3000/menu&quot; /&gt;&#xA;        &lt;button id=&quot;sendRequest&quot; type=&quot;submit&quot; class=&quot;btn btn-primary&quot;&gt;Send&lt;/button&gt;&#xA;      &lt;/div&gt;&#xA;    &lt;/form&gt;&#xA;&#xA;    &lt;div id=&quot;response&quot; class=&quot;response-box d-none&quot;&gt;&#xA;      &lt;h3&gt;Response&lt;/h3&gt;&#xA;      &lt;br&gt;&#xA;      &lt;p&gt;&lt;strong&gt;Status:&lt;/strong&gt; &lt;span id=&quot;status&quot;&gt;200 OK&lt;/span&gt;&lt;/p&gt;&#xA;      &lt;p&gt;&lt;strong&gt;Response:&lt;/strong&gt; &lt;span id=&quot;responseBody&quot;&gt;200 OK&lt;/span&gt;&lt;/p&gt;&#xA;    &lt;/div&gt;&#xA;  &lt;/div&gt;&#xA;&#xA;  &lt;script&gt;&#xA;    document.getElementById('apiForm').addEventListener('submit', function(e) {&#xA;      e.preventDefault();&#xA;&#xA;      // Get the selected method and URL&#xA;      const method = document.getElementById('methodSelect').value;&#xA;      const url = document.getElementById('urlInput').value;&#xA;&#xA;      if (method === 'GET') {&#xA;        // Simulate a GET request and a simple string response&#xA;        const responseBody = &quot;Here is your menu!&quot;;&#xA;&#xA;        // Display the simulated response&#xA;        document.getElementById('responseBody').innerText = responseBody;&#xA;        document.getElementById('status').innerText = '200 OK';&#xA;        document.getElementById('response').classList.remove('d-none');&#xA;      } else {&#xA;        alert('Only GET requests are supported in this example.');&#xA;      }&#xA;    });&#xA;  &lt;/script&gt;&#xA;&#xA;&lt;/body&gt;&#xA;&lt;/html&gt;&#xA;\" /></body></html>"
          },
          {
            "title": "API Tools",
            "id": 119260,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Si tu analyses la réponse que le testeur d'API nous renvoie, tu vois un <em>status</em> qui est réglé sur <code>200 OK</code>.</p><p>Les APIs renvoient un code de statut pour identifier rapidement si tout s'est déroulé comme prévu. <code>200 OK</code> est la réponse standard pour les requêtes <code>GET</code>.</p><webview version=\"2\" visible-if=\"always\" content=\"&lt;!doctype html&gt;&#xA;&lt;html lang=&quot;en&quot;&gt;&#xA;&lt;head&gt;&#xA;  &lt;meta charset=&quot;UTF-8&quot;&gt;&#xA;  &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;&#xA;  &lt;title&gt;Simple API Tester&lt;/title&gt;&#xA;  &lt;link href=&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.2.2/dist/css/bootstrap.min.css&quot; rel=&quot;stylesheet&quot;&gt;&#xA;  &lt;style&gt;&#xA;    body {&#xA;      padding: 20px;&#xA;    }&#xA;    .response-box {&#xA;      margin-top: 20px;&#xA;      padding: 15px;&#xA;      background-color: #f8f9fa;&#xA;      border-radius: 5px;&#xA;    }&#xA;  &lt;/style&gt;&#xA;&lt;/head&gt;&#xA;&lt;body&gt;&#xA;&#xA;  &lt;div class=&quot;container&quot;&gt;&#xA;    &lt;h1&gt;API Request Tester&lt;/h1&gt;&#xA;&#xA;    &lt;form id=&quot;apiForm&quot;&gt;&#xA;      &lt;div class=&quot;input-group mb-4&quot;&gt;&#xA;        &lt;select class=&quot;form-select flex-grow-0 w-auto&quot; id=&quot;methodSelect&quot;&gt;&#xA;          &lt;option value=&quot;GET&quot; selected&gt;GET&lt;/option&gt;&#xA;          &lt;option value=&quot;POST&quot; disabled&gt;POST&lt;/option&gt;&#xA;          &lt;option value=&quot;PUT&quot; disabled&gt;PUT&lt;/option&gt;&#xA;          &lt;option value=&quot;DELETE&quot; disabled&gt;DELETE&lt;/option&gt;&#xA;        &lt;/select&gt;&#xA;        &lt;input id=&quot;urlInput&quot; required class=&quot;form-control&quot; type=&quot;url&quot; value=&quot;http://localhost:3000/menu&quot; /&gt;&#xA;        &lt;button id=&quot;sendRequest&quot; type=&quot;submit&quot; class=&quot;btn btn-primary&quot;&gt;Send&lt;/button&gt;&#xA;      &lt;/div&gt;&#xA;    &lt;/form&gt;&#xA;&#xA;    &lt;div id=&quot;response&quot; class=&quot;response-box d-none&quot;&gt;&#xA;      &lt;h3&gt;Response&lt;/h3&gt;&#xA;      &lt;br&gt;&#xA;      &lt;p&gt;&lt;strong&gt;Status:&lt;/strong&gt; &lt;span id=&quot;status&quot;&gt;200 OK&lt;/span&gt;&lt;/p&gt;&#xA;      &lt;p&gt;&lt;strong&gt;Response:&lt;/strong&gt; &lt;span id=&quot;responseBody&quot;&gt;200 OK&lt;/span&gt;&lt;/p&gt;&#xA;    &lt;/div&gt;&#xA;  &lt;/div&gt;&#xA;&#xA;  &lt;script&gt;&#xA;    document.getElementById('apiForm').addEventListener('submit', function(e) {&#xA;      e.preventDefault();&#xA;&#xA;      // Get the selected method and URL&#xA;      const method = document.getElementById('methodSelect').value;&#xA;      const url = document.getElementById('urlInput').value;&#xA;&#xA;      if (method === 'GET') {&#xA;        // Simulate a GET request and a simple string response&#xA;        const responseBody = &quot;Here is your menu!&quot;;&#xA;&#xA;        // Display the simulated response&#xA;        document.getElementById('responseBody').innerText = responseBody;&#xA;        document.getElementById('status').innerText = '200 OK';&#xA;        document.getElementById('response').classList.remove('d-none');&#xA;      } else {&#xA;        alert('Only GET requests are supported in this example.');&#xA;      }&#xA;    });&#xA;  &lt;/script&gt;&#xA;&#xA;&lt;/body&gt;&#xA;&lt;/html&gt;&#xA;\" /></body></html>"
          },
          {
            "title": "Lesson #11",
            "id": 132274,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Quel est le rôle de l'appelant de l'API ?</p><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\">Le programme ou l'utilisateur faisant la demande à l'API</item><item value=\"2\" correct=\"false\">Le serveur recevant la requête</item><item value=\"3\" correct=\"false\">La fonction de gestion des erreurs d'API</item></selection><p visible-if=\"wrong\">Le programme ou l'utilisateur faisant la demande à l'API.</p></body></html>"
          },
          {
            "title": "Lesson #11",
            "id": 132275,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Comment démarrer un serveur Express depuis le terminal ?</p><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\"><code>node app.js</code></item><item value=\"2\" correct=\"false\"><code>npm install</code></item><item value=\"3\" correct=\"false\"><code>express start</code></item></selection><p visible-if=\"wrong\"><code>node app.js</code>.</p></body></html>"
          },
          {
            "title": "Lesson #13",
            "id": 132277,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Que signifie un code de statut <code>200 OK</code> dans une réponse d'API ?</p><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\">La demande a été réussie, et le serveur a envoyé les données demandées</item><item value=\"2\" correct=\"false\">La demande était invalide</item><item value=\"3\" correct=\"false\">Le serveur ne peut pas trouver la ressource demandée</item></selection><p visible-if=\"wrong\">La demande a été réussie, et le serveur a envoyé les données demandées.</p></body></html>"
          }
        ]
      },
      {
        "id": 13270,
        "title": "Appeler une API avec fetch",
        "type": "practiceLevel1",
        "lessons": [
          {
            "title": "Intro",
            "id": 119529,
            "contentType": "interactive",
            "images": [
              {
                "id": "51cdb5e9-febe-4d11-a6a4-2f8761c9b60e"
              }
            ],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Maintenant que tu sais comment fonctionne une API, il est temps d'apprendre à envoyer une requête à celle-ci.</p><img src=\"51cdb5e9-febe-4d11-a6a4-2f8761c9b60e\" visible-if=\"always\" /></body></html>"
          },
          {
            "title": "fetch()",
            "id": 119262,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Node a une méthode intégrée pour envoyer des requêtes aux APIs : <code>fetch</code>. Essaie de compléter la requête <code>GET</code> en utilisant <code>fetch</code>.</p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"fetch(\" /><text value=\"&quot;http://localhost:3000/menu&quot;\" class=\"string\" /><text value=\");\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"0\" endIndex=\"5\" /></options></interaction></interactions></code><p visible-if=\"wrong\">Assurez-vous de choisir <code>fetch</code>.</p></body></html>"
          },
          {
            "title": "fetch() 2",
            "id": 119343,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p><code>fetch</code> utilise <code>GET</code> par défaut, mais nous pouvons changer la <code>method</code> ou définir explicitement <code>GET</code>.</p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"fetch(\" /><text value=\"&quot;http://localhost:3000/menu&quot;\" class=\"string\" /><text value=\", { \" /><text type=\"break\" /><text value=\" \" /><text value=\"method\" class=\"attr\" /><text value=\": \" /><text value=\"&quot;GET&quot;\" class=\"string\" /><text value=\" \" /><text type=\"break\" /><text value=\"});\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"0\" endIndex=\"5\" /><option startIndex=\"49\" endIndex=\"52\" /></options></interaction></interactions></code><p visible-if=\"wrong\">Assurez-vous de choisir <code>fetch</code> suivi de <code>GET</code>.</p></body></html>"
          },
          {
            "title": "fetch() 2 - Copy",
            "id": 132278,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Lors de l'utilisation de <code>fetch</code>, nous définissons d'abord le point de terminaison que nous voulons appeler.</p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"fetch(\" /><text value=\"&quot;http://localhost:3000/menu&quot;\" class=\"string\" /><text value=\");\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"0\" endIndex=\"5\" /><option startIndex=\"6\" endIndex=\"34\" /></options></interaction></interactions></code><p visible-if=\"wrong\">Assurez-vous de choisir <code>fetch</code> suivi de <code>\"http://localhost:3000/menu\"</code>.</p></body></html>"
          },
          {
            "title": "fetch() 2 - Copy - Copy",
            "id": 132279,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Ensuite, nous utilisons <code>.then</code> pour gérer la réponse du serveur. Une fois que la requête est réussie, la méthode de rappel est appelée.</p><p>Une méthode de rappel est une fonction que tu donnes à une autre fonction pour qu'elle soit appelée plus tard.</p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"fetch(\" /><text value=\"&quot;http://localhost:3000/menu&quot;\" class=\"string\" /><text value=\") \" /><text type=\"break\" /><text value=\" .then(\" /><text value=\"(\" /><text value=\"response\" class=\"params\" /><text value=\") =&gt;\" /><text value=\" { });\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"38\" endIndex=\"43\" /><option startIndex=\"44\" endIndex=\"61\" /></options></interaction></interactions><output><content><text value=\"API Request successfully sent!\" /></content></output></code><p visible-if=\"wrong\">Assurez-vous de choisir <code>.then</code> suivi de <code>(response) =&gt; { }</code>.</p></body></html>"
          },
          {
            "title": "fetch() 2 - Copy - Copy - Copy",
            "id": 132303,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Une fois la requête réussie, nous enregistrons la requête API envoyée avec succès en utilisant la méthode de rappel.</p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"fetch(\" /><text value=\"&quot;http://localhost:3000/menu&quot;\" class=\"string\" /><text value=\") \" /><text type=\"break\" /><text value=\" .then(\" /><text value=\"(\" /><text value=\"response\" class=\"params\" /><text value=\") =&gt;\" /><text value=\" { \" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;API Request successfully sent!&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"});\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"62\" endIndex=\"108\" /><option startIndex=\"44\" endIndex=\"59\" /><option startIndex=\"110\" endIndex=\"111\" /></options></interaction></interactions><output><content><text value=\"API Request successfully sent!\" /></content></output></code><p visible-if=\"wrong\">Assurez-vous de choisir <code>(response) =&gt; {</code> suivi de <code>console.log(\"API Request successfully sent!\");</code> et enfin <code>}</code>.</p></body></html>"
          },
          {
            "title": "fetch() 2 - Copy - Copy - Copy",
            "id": 132280,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Nous recevons un objet <code>response</code> en retour. Il contient des informations sur la requête, telles que son statut et toutes les données renvoyées par le serveur.</p><p>Enregistre l'objet de réponse pour voir ce qu'il contient.</p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"fetch(\" /><text value=\"&quot;http://localhost:3000/menu&quot;\" class=\"string\" /><text value=\") \" /><text type=\"break\" /><text value=\" .then(\" /><text value=\"(\" /><text value=\"response\" class=\"params\" /><text value=\") =&gt;\" /><text value=\" { \" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(response); \" /><text type=\"break\" /><text value=\"});\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"62\" endIndex=\"74\" /><option startIndex=\"74\" endIndex=\"82\" /><option startIndex=\"82\" endIndex=\"84\" /></options></interaction></interactions><output><content><text value=\"{type: &quot;cors&quot;, url: &quot;http://localhost:3000/menu&quot;, status: 200, statusText: &quot;OK&quot;, ...}\" /></content></output></code><p visible-if=\"wrong\">Assurez-vous de choisir <code>console.log(</code> suivi de <code>response</code> et enfin <code>);</code>.</p></body></html>"
          },
          {
            "title": "Question 3",
            "id": 119346,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>À quoi pouvons-nous utiliser <code>fetch</code> ?</p><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\">Effectuer des appels API vers des serveurs externes</item><item value=\"2\" correct=\"false\">Accéder aux données du système de fichiers local<br /></item><item value=\"3\" correct=\"false\">Exécution des requêtes de base de données</item><item value=\"4\" correct=\"false\">Manipulation des éléments DOM</item></selection><p visible-if=\"wrong\">Effectuer des appels API vers des serveurs externes.</p></body></html>"
          },
          {
            "title": "Example 1",
            "id": 119347,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Écris le code pour envoyer une requête <code>GET</code> à l'endpoint <code>/menu</code> sur localhost en utilisant <code>fetch</code>.</p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"fetch(\" /><text value=\"&quot;http://localhost:3000/menu&quot;\" class=\"string\" /><text value=\") \" /><text type=\"break\" /><text value=\" .then(\" /><text value=\"(\" /><text value=\"response\" class=\"params\" /><text value=\") =&gt;\" /><text value=\" { \" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;API Request successfully sent!&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"});\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"0\" endIndex=\"5\" /><option startIndex=\"7\" endIndex=\"28\" /><option startIndex=\"28\" endIndex=\"33\" /><option correct=\"false\"><content><text value=\"GET\" /></content></option><option correct=\"false\"><content><text value=\"/users\" /></content></option></options></interaction></interactions><output><content><text value=\"API Request successfully sent!\" /></content></output></code><p visible-if=\"wrong\">Assurez-vous de choisir <code>fetch</code> suivi de <code>http://localhost:3000</code> et enfin <code>/menu</code>.</p></body></html>"
          },
          {
            "title": "Lesson #10",
            "id": 132281,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Dans le contexte de <code>fetch</code>, quel est le but de la méthode <code>.then</code> ?</p><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\">Pour traiter la réponse du serveur lorsqu'elle est reçue</item><item value=\"2\" correct=\"false\">Pour envoyer la requête au serveur</item><item value=\"3\" correct=\"false\">Pour vérifier si le serveur est en panne</item></selection><p visible-if=\"wrong\">Pour traiter la réponse du serveur lorsqu'elle est reçue.</p></body></html>"
          },
          {
            "title": "Example 2",
            "id": 119348,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Écris le code pour envoyer une requête <code>GET</code> à <code>http://localhost:3000/menu</code> en utilisant <code>fetch</code>.</p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"fetch(\" /><text value=\"&quot;http://localhost:3000/menu&quot;\" class=\"string\" /><text value=\", { \" /><text type=\"break\" /><text value=\" \" /><text value=\"method\" class=\"attr\" /><text value=\": \" /><text value=\"&quot;GET&quot;\" class=\"string\" /><text value=\" \" /><text type=\"break\" /><text value=\"}).then(\" /><text value=\"(\" /><text value=\"response\" class=\"params\" /><text value=\") =&gt;\" /><text value=\" { \" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;API Request successfully sent!&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"});\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"40\" endIndex=\"46\" /><option startIndex=\"48\" endIndex=\"49\" /><option startIndex=\"49\" endIndex=\"52\" /><option startIndex=\"52\" endIndex=\"53\" /><option correct=\"false\"><content><text value=\"endpoint\" /></content></option></options></interaction></interactions></code><p visible-if=\"wrong\">Assurez-vous de choisir <code>method</code> suivi de <code>\"</code> puis <code>GET</code>, <code>\"</code>.</p></body></html>"
          },
          {
            "title": "Lesson #11",
            "id": 132282,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Lequel des éléments suivants peut être accédé à partir de l'objet <code>response</code> dans une requête <code>fetch</code> ?</p><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\">Le code d'état du serveur (par exemple, <code>200</code>)</item><item value=\"2\" correct=\"false\">La méthode de requête (par exemple, <code>GET</code>)</item></selection><p visible-if=\"wrong\">Le code d'état du serveur (par exemple, <code>200</code>).</p></body></html>"
          }
        ]
      }
    ]
  }
}