{
  "tutorial": {
    "id": 2646,
    "version": 6,
    "type": "guidedProject",
    "isNew": false,
    "codeLanguage": "node",
    "title": "Nombres aléatoires - Partie 1",
    "descriptionContent": "Crée un backend qui peut aider si tu n'as pas de pièce ou de dé à disposition",
    "shortDescriptionContent": "",
    "showInTrack": true,
    "iconBanner": "tutorial-2646-icon-banner.svg",
    "chapters": [
      {
        "id": 14609,
        "title": "Chapitre #1",
        "type": "practiceLevel3",
        "lessons": [
          {
            "title": "Lesson #1",
            "id": 129321,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Bienvenue dans le projet **Nombres Aléatoires**. Nous allons construire une application serveur simple qui génère des nombres aléatoires.\n\nNous allons commencer par configurer le serveur Express.\n\n1. Déclare une variable `express` et importe le module `express`.\n2. Déclare une variable `app` et initialise-la en appelant la fonction `express`.\n3. Déclare une variable `port` et assigne-lui la valeur `3000`.\n4. Utilise la fonction `listen` sur `app` pour que l'application écoute sur le port spécifié par la variable `port`.\n5. Affiche un message dans la console à l'intérieur du callback de la fonction `listen` pour que nous sachions que notre serveur fonctionne correctement.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "app.js",
                  "codeLanguage": "javascript",
                  "content": "",
                  "solvedContent": "const express = require('express');\nconst app = express();\nconst port = 3000;\n\napp.listen(port, function() {\n  console.log(`App is listening on port ${port}`);\n});"
                }
              ],
              "hints": [
                {
                  "title": "Give your hint a title",
                  "content": "Give your hint some content"
                }
              ],
              "httpOptions": {
                "method": "GET",
                "path": "/",
                "body": null
              }
            }
          },
          {
            "title": "Lesson #2",
            "id": 129323,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Nous commençons par créer une route qui simulera un lancer de pièce. Nous utiliserons la méthode `get` de `app` pour gérer la requête GET au chemin `/coinFlip`.\n\n1. Utilise la fonction `app.get` pour créer un nouveau point de terminaison à `/coinFlip`.\n2. À l'intérieur de la fonction de rappel (qui prend les paramètres `req` et `res`), calcule un nombre aléatoire de 0 ou 1 (pile ou face).\n3. Réponds avec un objet JSON, en utilisant la méthode `json` de `res`, où `result` est `\"Heads\"` si le lancer de pièce est 0 et `\"Tails\"` sinon.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "app.js",
                  "codeLanguage": "javascript",
                  "content": "const express = require('express');\nconst app = express();\nconst port = 3000;\n\napp.listen(port, function() {\n  console.log(`App is listening on port ${port}`);\n});",
                  "solvedContent": "const express = require('express');\nconst app = express();\nconst port = 3000;\n\napp.listen(port, function() {\n  console.log(`App is listening on port ${port}`);\n});\n\napp.get('/coinFlip', function(req, res) {\n  const result = Math.floor(Math.random() * 2);\n  res.status(200).json({ result: result === 0 ? 'Heads' : 'Tails' });\n});"
                }
              ],
              "hints": [],
              "httpOptions": {
                "method": "GET",
                "path": "/coinFlip",
                "body": null
              }
            }
          },
          {
            "title": "Lesson #3",
            "id": 129324,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Maintenant, ajoutons une autre route pour lancer un dé à six faces.\n\n1. Comme pour le lancer de pièce, crée une route `GET` au chemin `/diceRoll`.\n2. Mets à jour le calcul du nombre aléatoire pour donner un résultat entre 1 et 6 (inclus).\n3. Réponds avec du JSON où `result` est le nombre tiré au hasard.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "app.js",
                  "codeLanguage": "javascript",
                  "content": "const express = require('express');\nconst app = express();\nconst port = 3000;\n\napp.listen(port, function() {\n  console.log(`App is listening on port ${port}`);\n});\n\napp.get('/coinFlip', function(req, res) {\n  const result = Math.floor(Math.random() * 2);\n  res.status(200).json({ result: result === 0 ? 'Heads' : 'Tails' });\n});",
                  "solvedContent": "const express = require('express');\nconst app = express();\nconst port = 3000;\n\napp.listen(port, function() {\n  console.log(`App is listening on port ${port}`);\n});\n\napp.get('/coinFlip', function(req, res) {\n  const result = Math.floor(Math.random() * 2);\n  res.status(200).json({ result: result === 0 ? 'Heads' : 'Tails' });\n});\n\napp.get('/diceRoll', function(req, res) {\n  const result = Math.floor(Math.random() * 6) + 1;\n  res.status(200).json({ result: result });\n});"
                }
              ],
              "hints": [],
              "httpOptions": {
                "method": "GET",
                "path": "/diceRoll",
                "body": null
              }
            }
          },
          {
            "title": "Lesson #4",
            "id": 129325,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Enfin, créons une route qui générera un nombre aléatoire entre 1 et 100.\n\n1. Crée une autre route `GET` au chemin '/randomNumber'.\n2. Modifie le calcul du nombre aléatoire pour donner un résultat entre 1 et 100 (inclus).\n3. Réponds avec du JSON où `result` est le nombre généré aléatoirement.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "app.js",
                  "codeLanguage": "javascript",
                  "content": "const express = require('express');\nconst app = express();\nconst port = 3000;\n\napp.listen(port, function() {\n  console.log(`App is listening on port ${port}`);\n});\n\napp.get('/coinFlip', function(req, res) {\n  const result = Math.floor(Math.random() * 2);\n  res.status(200).json({ result: result === 0 ? 'Heads' : 'Tails' });\n});\n\napp.get('/diceRoll', function(req, res) {\n  const result = Math.floor(Math.random() * 6) + 1;\n  res.status(200).json({ result: result });\n});",
                  "solvedContent": "const express = require('express');\nconst app = express();\nconst port = 3000;\n\napp.listen(port, function() {\n  console.log(`App is listening on port ${port}`);\n});\n\napp.get('/coinFlip', function(req, res) {\n  const result = Math.floor(Math.random() * 2);\n  res.status(200).json({ result: result === 0 ? 'Heads' : 'Tails' });\n});\n\napp.get('/diceRoll', function(req, res) {\n  const result = Math.floor(Math.random() * 6) + 1;\n  res.status(200).json({ result: result });\n});\n\napp.get('/randomNumber', function(req, res) {\n  const result = Math.floor(Math.random() * 100) + 1;\n  res.status(200).json({ result: result });\n});"
                }
              ],
              "hints": [],
              "httpOptions": {
                "method": "GET",
                "path": "/randomNumber",
                "body": null
              }
            }
          }
        ]
      }
    ]
  }
}