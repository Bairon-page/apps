{
  "tutorial": {
    "id": 1786,
    "version": 9,
    "type": "guidedProjectOptional",
    "isNew": false,
    "codeLanguage": "javascript",
    "title": "Jeu d'aventure",
    "descriptionContent": "Utilise tes connaissances sur la redéfinition des méthodes pour simuler une interaction de personnage dans un jeu",
    "shortDescriptionContent": "",
    "showInTrack": true,
    "iconBanner": "tutorial-1786-icon-banner.svg",
    "chapters": [
      {
        "id": 11785,
        "title": "Jeu d'aventure",
        "type": "practiceLevel3",
        "lessons": [
          {
            "title": "Create a class",
            "id": 108520,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Joe participe au développement d'un jeu d'aventure. Il est responsable des personnages humains et pirates. Nous allons l'aider à personnaliser les comportements des personnages.\n\nCommençons par créer une classe pour nos personnages.\n\n1. Crée une classe `Human` pour représenter tous les personnages.\n2. Donne-lui un constructeur vide.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "",
                  "solvedContent": "class Human {\n  constructor() {}\n}"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Class Properties",
            "id": 108521,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Ajoutons une propriété à notre classe définie afin de pouvoir identifier nos personnages.\n\n1. Ajoute un paramètre `name` à ton constructeur.\n2. Donne à la classe `Human` une propriété `name`, et assigne-lui la valeur du paramètre `name`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "class Human {\n  constructor() {}\n}",
                  "solvedContent": "class Human {\n  constructor(name) {\n    this.name = name;\n  }\n}"
                }
              ],
              "hints": [
                {
                  "title": "Hint",
                  "content": "The syntax for adding a property to a class is:\n```JS\nclass className {\n   constructor(property){\n     this.property = property;\n    }\n}\n```"
                }
              ]
            }
          },
          {
            "title": "Class Methods",
            "id": 108522,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Puisqu'il s'agit d'un jeu multijoueur, nous voulons que les personnages interagissent entre eux. Créons une méthode pour gérer cela.\n\n1. Crée une méthode `say` qui prend `stuff` comme paramètre.\n2. Ajoute une instruction qui affiche `stuff`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "class Human {\n  constructor(name) {\n    this.name = name;\n  }\n}",
                  "solvedContent": "class Human {\n  constructor(name) {\n    this.name = name;\n  }\n  say(stuff) {\n    console.log(stuff);\n  }\n}"
                }
              ],
              "hints": [
                {
                  "title": "Hint",
                  "content": "The syntax for adding a method to a class is:\n```JS\nclass className {\n   constructor(){}\n   method(parameter){\n   }\n}"
                }
              ]
            }
          },
          {
            "title": "Display contents",
            "id": 108524,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Pour mieux suivre le dialogue entre les personnages, nous voulons afficher leur nom pour savoir qui a parlé.\n\n1. Mets à jour `say` pour qu'il affiche le nom de l'utilisateur ainsi que ce que l'utilisateur dit. Par exemple, pour un utilisateur `\"Joe\"` disant `\"hi\"`, nous devrions lire :\n\n```\nJoe: hi\n```",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "class Human {\n  constructor(name) {\n    this.name = name;\n  }\n  say(stuff) {\n    console.log(stuff);\n  }\n}",
                  "solvedContent": "class Human {\n  constructor(name) {\n    this.name = name;\n  }\n  say(stuff) {\n    console.log(this.name + \": \" + stuff);\n  }\n}"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Pirate",
            "id": 108525,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Ensuite, nous allons travailler sur le personnage pirate. Commençons par créer une classe pour les pirates.\n\n1. Crée une classe `Pirate` comme une extension directe de la classe `Human`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "class Human {\n  constructor(name) {\n    this.name = name;\n  }\n  say(stuff) {\n    console.log(this.name + \": \" + stuff);\n  }\n}",
                  "solvedContent": "class Human {\n  constructor(name) {\n    this.name = name;\n  }\n  say(stuff) {\n    console.log(this.name + \": \" + stuff);\n  }\n}\nclass Pirate extends Human {}"
                }
              ],
              "hints": [
                {
                  "title": "Hint",
                  "content": "The syntax for creating an extended class is:\n```JS\nclass className extends extendedClass {\n}\n```"
                }
              ]
            }
          },
          {
            "title": "Override",
            "id": 108526,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Ensuite, nous allons travailler sur la personnalisation de notre classe `Pirate`.\n\n1. Redéfinis la méthode `say` dans la classe `Pirate`.\n2. Utilise `super` pour ajouter la fonctionnalité de la méthode `say` de la superclasse dans la redéfinition.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "class Human {\n  constructor(name) {\n    this.name = name;\n  }\n  say(stuff) {\n    console.log(this.name + \": \" + stuff);\n  }\n}\nclass Pirate extends Human {}",
                  "solvedContent": "class Human {\n  constructor(name) {\n    this.name = name;\n  }\n  say(stuff) {\n    console.log(this.name + \": \" + stuff);\n  }\n}\nclass Pirate extends Human {\n  say(stuff) {\n   super.say(stuff);\n  }\n}"
                }
              ],
              "hints": [
                {
                  "title": "Hint",
                  "content": "To override a method, you should redefine it again in one of its extended class.\n```JS\nclass extendedClass {\n   method(parameter){\n    }\n}\n\nclass className extends extendedClass {\n  method(parameter){\n   }\n}\n```"
                }
              ]
            }
          },
          {
            "title": "Yarr!",
            "id": 108528,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Chaque fois qu'un pirate dit quelque chose, il termine par `\"Yarr!\"`. Mettons à jour notre méthode `say` pour refléter cette particularité.\n\n1. Ajoute une ligne pour afficher la propriété `name` avec `\"Yarr!\"`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "class Human {\n  constructor(name) {\n    this.name = name;\n  }\n  say(stuff) {\n    console.log(this.name + \": \" + stuff);\n  }\n}\nclass Pirate extends Human {\n  say(stuff) {\n    super.say(stuff);\n  }\n}",
                  "solvedContent": "class Human {\n  constructor(name) {\n    this.name = name;\n  }\n  say(stuff) {\n    console.log(this.name + \": \" + stuff);\n  }\n}\nclass Pirate extends Human {\n  say(stuff) {\n    super.say(stuff);\n    console.log(this.name + \": Yarr!\");\n  }\n}"
                }
              ],
              "hints": [
                {
                  "title": "Hint",
                  "content": "For a pirate 'John' saying 'I am the captain', we should read :\n\n'John: I am the captain '\n'John: Yarr!'"
                }
              ]
            }
          },
          {
            "title": "Frances",
            "id": 108529,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Créons notre premier personnage.\n\n1. Crée une variable appelée `human`.\n2. Crée une instance de `Human` nommée `\"Frances\"` et stocke-la dans la variable.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "class Human {\n  constructor(name) {\n    this.name = name;\n  }\n  say(stuff) {\n    console.log(this.name + \": \" + stuff);\n  }\n}\nclass Pirate extends Human {\n  say(stuff) {\n    super.say(stuff);\n    console.log(this.name + \": Yarr!\");\n  }\n}",
                  "solvedContent": "class Human {\n  constructor(name) {\n    this.name = name;\n  }\n  say(stuff) {\n    console.log(this.name + \": \" + stuff);\n  }\n}\nclass Pirate extends Human {\n  say(stuff) {\n    super.say(stuff);\n    console.log(this.name + \": Yarr!\");\n  }\n}\nconst human = new Human(\"Frances\");"
                }
              ],
              "hints": [
                {
                  "title": "Hint",
                  "content": "The syntax for adding an instance of a class is:\n```JS\nconst instance = new className();\n```"
                }
              ]
            }
          },
          {
            "title": "Long John",
            "id": 108530,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Maintenant, créons notre premier pirate.\n\n1. Ensuite, crée une variable appelée `pirate`.\n2. Crée une instance de `Pirate` nommée `\"Long John\"` et stocke-la dans la variable.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "class Human {\n  constructor(name) {\n    this.name = name;\n  }\n  say(stuff) {\n    console.log(this.name + \": \" + stuff);\n  }\n}\nclass Pirate extends Human {\n  say(stuff) {\n    super.say(stuff);\n    console.log(this.name + \": Yarr!\");\n  }\n}\nconst human = new Human(\"Frances\");",
                  "solvedContent": "class Human {\n  constructor(name) {\n    this.name = name;\n  }\n  say(stuff) {\n    console.log(this.name + \": \" + stuff);\n  }\n}\nclass Pirate extends Human {\n  say(stuff) {\n    super.say(stuff);\n    console.log(this.name + \": Yarr!\");\n  }\n}\nconst human = new Human(\"Frances\");\nconst pirate = new Pirate(\"Long John\");"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Frances says",
            "id": 108531,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Maintenant, faisons en sorte que les personnages communiquent entre eux.\n\n1. Utilise une méthode pour que Frances dise `\"G'day, Sir!\"`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "class Human {\n  constructor(name) {\n    this.name = name;\n  }\n  say(stuff) {\n    console.log(this.name + \": \" + stuff);\n  }\n}\nclass Pirate extends Human {\n  say(stuff) {\n    super.say(stuff);\n    console.log(this.name + \": Yarr!\");\n  }\n}\nconst human = new Human(\"Frances\");\nconst pirate = new Pirate(\"Long John\");",
                  "solvedContent": "class Human {\n  constructor(name) {\n    this.name = name;\n  }\n  say(stuff) {\n    console.log(this.name + \": \" + stuff);\n  }\n}\nclass Pirate extends Human {\n  say(stuff) {\n    super.say(stuff);\n    console.log(this.name + \": Yarr!\");\n  }\n}\nconst human = new Human(\"Frances\");\nconst pirate = new Pirate(\"Long John\");\nhuman.say(\"Good day, Sir!\");"
                }
              ],
              "hints": [
                {
                  "title": "Hint",
                  "content": "The syntax for using a method is:\n```JS\n    instance.method(value)\n```"
                }
              ]
            }
          },
          {
            "title": "Long John says",
            "id": 108532,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Répondons au salut de Frances.\n\n1. Utilise une méthode pour que ton pirate réponde `\"Ahoy!\"`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "class Human {\n  constructor(name) {\n    this.name = name;\n  }\n  say(stuff) {\n    console.log(this.name + \": \" + stuff);\n  }\n}\nclass Pirate extends Human {\n  say(stuff) {\n    super.say(stuff);\n    console.log(this.name + \": Yarr!\");\n  }\n}\nconst human = new Human(\"Frances\");\nconst pirate = new Pirate(\"Long John\");\nhuman.say(\"Good day, sir!\");",
                  "solvedContent": "class Human {\n  constructor(name) {\n    this.name = name;\n  }\n  say(stuff) {\n    console.log(this.name + \": \" + stuff);\n  }\n}\nclass Pirate extends Human {\n  say(stuff) {\n    super.say(stuff);\n    console.log(this.name + \": Yarr!\");\n  }\n}\nconst human = new Human(\"Frances\");\nconst pirate = new Pirate(\"Long John\");\nhuman.say(\"Good day, sir!\");\npirate.say(\"Ahoy!\");"
                }
              ],
              "hints": []
            }
          }
        ]
      }
    ]
  }
}