{
  "tutorial": {
    "id": 1779,
    "version": 10,
    "type": "guidedProjectOptional",
    "isNew": false,
    "codeLanguage": "javascript",
    "title": "Diffuse-le à nouveau",
    "descriptionContent": "Utilise des objets et des méthodes d'objet pour imiter une plateforme de streaming",
    "shortDescriptionContent": "",
    "showInTrack": true,
    "iconBanner": "tutorial-1779-icon-banner.svg",
    "chapters": [
      {
        "id": 11743,
        "title": "Diffuse-le à nouveau",
        "type": "practiceLevel3",
        "lessons": [
          {
            "title": "Starter code",
            "id": 107846,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Notre service de streaming produit sa propre émission. Ajoutons quelques méthodes pour commencer le streaming et augmenter ces `\"views\"`.\n\nNous avons déjà ajouté du code pour t'aider à démarrer.\n\nNous avons défini un objet nommé `show` avec deux propriétés : `name` et `views`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const show = {\r\n  name: \"Pick and Shorty\",\r\n  views: 10\r\n};",
                  "solvedContent": null
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Play it",
            "id": 107579,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Tout d'abord, nous allons commencer par créer une méthode.\n\n1. Donne à l'objet `show` une méthode appelée `play`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const show = {\r\n  name: \"Pick and Shorty\",\r\n  views: 10\r\n};",
                  "solvedContent": "const show = {\r\n  name: \"Pick and Shorty\",\r\n  views: 10,\r\n  play: function() {}\r\n};"
                }
              ],
              "hints": [
                {
                  "title": "Hint",
                  "content": "Use `play: function ( ) { }` to create a method in `show` object. \nRemember to add a comma after `views`, before the method."
                }
              ]
            }
          },
          {
            "title": "Getting properties with \"this\"",
            "id": 107575,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Mettons également le nom de l'émission à l'intérieur de la fonction.\n\n1. Crée une `const showName` à l'intérieur de la méthode `play` et assigne-lui la propriété `name` de l'objet.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const show = {\n name: \"Pick and Shorty\",\n views: 10,\n play : function () {\n\n }\n};",
                  "solvedContent": "const show = {\n name: \"Pick and Shorty\",\n views: 10,\n play : function () {\n  const showName = this.name;\n }\n};"
                }
              ],
              "hints": [
                {
                  "title": "Hint",
                  "content": "Use `this` keyword to refer to the show's name inside an object."
                }
              ]
            }
          },
          {
            "title": "Displaying properties",
            "id": 107580,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Maintenant que nous avons le nom de l'émission dans la fonction, affichons-le dans la console.\n\n1. À l'intérieur de la méthode `play`, affiche la phrase `\"Now Playing \"` suivie de la valeur de la variable `showName`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const show = {\n  name: \"Pick and Shorty\",\n  views: 10,\n  play: function() {\n    const showName = this.name;\n  }\n};",
                  "solvedContent": "const show = {\n  name: \"Pick and Shorty\",\n  views: 10,\n  play: function() {\n    const showName = this.name;\n    console.log(\"Now Playing \" + showName);\n  }\n};"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Calling a method",
            "id": 107569,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Maintenant que notre méthode est définie, appelons la méthode et lançons le spectacle.\n\n1. Appelle la méthode `play` de l'objet `show` en dessous de l'objet.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const show = {\n  name: \"Pick and Shorty\",\n  views: 10,\n  play: function() {\n    const showName = this.name;\n    console.log(\"Now Playing \" + showName);\n  }\n};",
                  "solvedContent": "const show = {\n  name: \"Pick and Shorty\",\n  views: 10,\n  play: function() {\n    const showName = this.name;\n    console.log(\"Now Playing \" + showName);\n  }\n};\nshow.play();"
                }
              ],
              "hints": [
                {
                  "title": "Hint",
                  "content": "To call a method, the syntax is : `objectName.methodName()`."
                }
              ]
            }
          },
          {
            "title": "Add views",
            "id": 107581,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Mais jouer seulement ne suffira pas. Nous devons aussi ajouter des vues !\n\n1. Donne à l'objet `show` une deuxième méthode appelée `addViews`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const show = {\n  name: \"Pick and Shorty\",\n  views: 10,\n  play: function() {\n    const showName = this.name;\n    console.log(\"Now Playing \" + showName);\n  }\n};\nshow.play();",
                  "solvedContent": "const show = {\n  name: \"Pick and Shorty\",\n  views: 10,\n  play: function() {\n    const showName = this.name;\n    console.log(\"Now Playing \" + showName);\n  },\n  addViews: function() {}\n};\nshow.play();"
                }
              ],
              "hints": [
                {
                  "title": "Hint",
                  "content": "To create a method, the syntax is : `methodName : function ( ) { }`. \nRemember to add a comma `,` before the new method."
                }
              ]
            }
          },
          {
            "title": "Adding a parameter",
            "id": 107577,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Ensuite, nous allons ajouter un paramètre à la méthode `addViews`. Ce paramètre transmettra le nombre de vues.\n\n1. Modifie la méthode `addViews` pour qu'elle prenne un paramètre, `numberViews`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const show = {\n  name: \"Pick and Shorty\",\n  views: 10,\n  play: function() {\n    const showName = this.name;\n    console.log(\"Now Playing \" + showName);\n  },\n  addViews: function() {}\n};\nshow.play();",
                  "solvedContent": "const show = {\n  name: \"Pick and Shorty\",\n  views: 10,\n  play: function() {\n    const showName = this.name;\n    console.log(\"Now Playing \" + showName);\n  },\n  addViews: function(numberViews) {}\n};\nshow.play();"
                }
              ],
              "hints": [
                {
                  "title": "Hint",
                  "content": "Specify parameters inside the parentheses after the `function` keyword. "
                }
              ]
            }
          },
          {
            "title": "Updating properties with \"this\"",
            "id": 107567,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "La valeur passée en tant que `numberViews` doit s'ajouter à la propriété `views`.\n\n1. À l'intérieur de la méthode `addViews`, utilise l'auto-affectation pour augmenter la valeur de la propriété `views` par le `numberViews`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const show = {\n  name: \"Pick and Shorty\",\n  views: 10,\n  play: function() {\n    const showName = this.name;\n    console.log(\"Now Playing \" + showName);\n  },\n  addViews: function(numberViews) {}\n};\nshow.play();",
                  "solvedContent": "const show = {\n  name: \"Pick and Shorty\",\n  views: 10,\n  play: function() {\n    const showName = this.name;\n    console.log(\"Now Playing \" + showName);\n  },\n  addViews: function(numberViews) {\n    this.views = this.views + numberViews;\n  }\n};\nshow.play();"
                }
              ],
              "hints": [
                {
                  "title": "Hint",
                  "content": "Access an object's property using `this`, like `this.views`."
                }
              ]
            }
          },
          {
            "title": "Calling a method",
            "id": 107570,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Après avoir joué le spectacle, le nombre de `views` devrait augmenter de `1`.\n\n1. Ajoute une ligne après `show.play();` pour appeler `addViews` en passant `1` comme argument.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const show = {\n  name: \"Pick and Shorty\",\n  views: 10,\n  play: function() {\n    const showName = this.name;\n    console.log(\"Now Playing \" + showName);\n  },\n  addViews: function(numberViews) {\n    this.views = this.views + numberViews;\n  }\n};\nshow.play();",
                  "solvedContent": "const show = {\n  name: \"Pick and Shorty\",\n  views: 10,\n  play: function() {\n    const showName = this.name;\n    console.log(\"Now Playing \" + showName);\n  },\n  addViews: function(numberViews) {\n    this.views = this.views + numberViews;\n  }\n};\nshow.play();\nshow.addViews(1);"
                }
              ],
              "hints": [
                {
                  "title": "Hint",
                  "content": "To pass a value while calling a method, the syntax is : `objectName.methodName(value1, value2...)`."
                }
              ]
            }
          },
          {
            "title": "Returning a value",
            "id": 107578,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Nous retournerons également le nombre total de vues.\n\n1. Ajoute une ligne pour retourner `this.views` à la fin de `addViews`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const show = {\n  name: \"Pick and Shorty\",\n  views: 10,\n  play: function() {\n    const showName = this.name;\n    console.log(\"Now Playing \" + showName);\n  },\n  addViews: function(numberViews) {\n    this.views = this.views + numberViews;\n  }\n};\nshow.play();\nshow.addViews(1);",
                  "solvedContent": "const show = {\n  name: \"Pick and Shorty\",\n  views: 10,\n  play: function() {\n    const showName = this.name;\n    console.log(\"Now Playing \" + showName);\n  },\n  addViews: function(numberViews) {\n    this.views = this.views + numberViews;\n    return this.views;\n  }\n};\nshow.play();\nshow.addViews(1);"
                }
              ],
              "hints": [
                {
                  "title": "Hint",
                  "content": "Use the `return` keyword to return values. "
                }
              ]
            }
          },
          {
            "title": "Displaying return value",
            "id": 107572,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Voyons si `addViews` fonctionne comme nous l'attendons.\n\n1. Modifie le code et place `show.addViews(1)` à l'intérieur d'une instruction `console.log()` pour afficher la valeur retournée.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const show = {\n  name: \"Pick and Shorty\",\n  views: 10,\n  play: function() {\n    const showName = this.name;\n    console.log(\"Now Playing \" + showName);\n  },\n  addViews: function(numberViews) {\n    this.views = this.views + numberViews;\n    return this.views;\n  }\n};\nshow.play();\nshow.addViews(1);",
                  "solvedContent": "const show = {\n  name: \"Pick and Shorty\",\n  views: 10,\n  play: function() {\n    const showName = this.name;\n    console.log(\"Now Playing \" + showName);\n  },\n  addViews: function(numberViews) {\n    this.views = this.views + numberViews;\n    return this.views;\n  }\n};\nshow.play();\nconsole.log(show.addViews(1));"
                }
              ],
              "hints": []
            }
          }
        ]
      }
    ]
  }
}