{
  "tutorial": {
    "id": 1785,
    "version": 9,
    "type": "guidedProjectOptional",
    "isNew": false,
    "codeLanguage": "javascript",
    "title": "Écran de smartphone",
    "descriptionContent": "Utilise tes connaissances des classes et sous-classes pour ajouter une fonction de contact pour un jeu",
    "shortDescriptionContent": "",
    "showInTrack": true,
    "iconBanner": "tutorial-1785-icon-banner.svg",
    "chapters": [
      {
        "id": 11784,
        "title": "Écran de smartphone",
        "type": "practiceLevel3",
        "lessons": [
          {
            "title": "Create a class",
            "id": 108505,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Alex développe un jeu de simulation de vie et souhaite introduire une fonctionnalité de communication par téléphone. Nous allons l'aider en introduisant un appareil téléphonique virtuel et un smartphone pour que les personnages puissent communiquer à distance.\n\nCommençons par créer une classe de téléphone pour la fonctionnalité de communication par téléphone du jeu.\n\n1. Assemble une classe appelée `Phone`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "",
                  "solvedContent": "class Phone {}"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Add method to a class",
            "id": 108506,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Maintenant, créons une méthode pour que nous puissions passer des appels en utilisant notre `Phone`.\n\n1. Crée une méthode `call()` dans la classe `Phone` de l'exercice précédent.\n2. Donne-lui un paramètre nommé `user`.\n2. À l'intérieur de la méthode `call()`, ajoute une ligne qui affiche l'`user` que nous appelons. L'affichage résultant pourrait ressembler à ceci pour l'utilisateur `Mom` :\n\n```\nCalling: Mom\n```",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "class Phone {}",
                  "solvedContent": "class Phone {\n  call(user) {\n    console.log(\"Calling: \" + user);\n  }\n}"
                }
              ],
              "hints": [
                {
                  "title": "Hint",
                  "content": "1. The syntax for creating a method is:\n\n```JS\nmethodName(parameter) {\n}\n```"
                }
              ]
            }
          },
          {
            "title": "Smartphone",
            "id": 108513,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Le mot-clé `extends` est utilisé pour créer une classe qui est un enfant ou un sous-ensemble direct d'une autre classe.\n\nLes smartphones peuvent faire tout ce que font les téléphones, donc tu peux considérer les smartphones comme un sous-ensemble d'un téléphone.\n\nCréons une classe `Smartphone`.\n\n1. Crée une classe `Smartphone` qui étend `Phone`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "class Phone {\n  call(user) {\n    console.log(\"Calling: \" + user);\n  }\n}",
                  "solvedContent": "class Phone {\n  call(user) {\n    console.log(\"Calling: \" + user);\n  }\n}\nclass Smartphone extends Phone {}"
                }
              ],
              "hints": [
                {
                  "title": "Hint",
                  "content": "1. The syntax for creating an extended class is:\n```JS\nclass className extends extendedClass {\n}\n```"
                }
              ]
            }
          },
          {
            "title": "Video call",
            "id": 108514,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "La classe `Smartphone` hérite automatiquement des méthodes associées à `Phone`.\n\nCependant, tu peux toujours créer des méthodes supplémentaires dans un sous-ensemble d'une classe, par exemple pour passer des appels vidéo.\n\n1. Crée une méthode `videoCall` pour passer des appels vidéo.\n2. Donne-lui le paramètre `user`.\n2. Ajoute une ligne qui affiche le nom de l'utilisateur que le personnage appelle en vidéo. L'affichage résultant pourrait ressembler à ceci pour l'utilisateur `Mom` :\n\n```\nFacetiming: Mom\n```",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "class Phone {\n  call(user) {\n    console.log(\"Calling: \" + user);\n  }\n}\nclass Smartphone extends Phone {}",
                  "solvedContent": "class Phone {\n  call(user) {\n    console.log(\"Calling: \" + user);\n  }\n}\nclass Smartphone extends Phone {\n  videoCall(user) {\n    console.log(\"Facetiming: \" + user);\n  }\n}"
                }
              ],
              "hints": [
                {
                  "title": "Hint",
                  "content": "1. The syntax for creating a method is:\n```JS\nmethodName(parameter) {\n}\n```"
                }
              ]
            }
          },
          {
            "title": "New device",
            "id": 108516,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Brandon est un nouveau personnage dans notre jeu. Équipons-le d'un smartphone.\n\n1. Crée un nouvel objet à partir de la classe `Smartphone` et stocke-le dans une variable appelée `device`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "class Phone {\n  call(user) {\n    console.log(\"Calling: \" + user);\n  }\n}\nclass Smartphone extends Phone {\n  videoCall(user) {\n    console.log(\"Facetiming: \" + user);\n  }\n}",
                  "solvedContent": "class Phone {\n  call(user) {\n    console.log(\"Calling: \" + user);\n  }\n}\nclass Smartphone extends Phone {\n  videoCall(user) {\n    console.log(\"Facetiming: \" + user);\n  }\n}\nconst device = new Smartphone();"
                }
              ],
              "hints": [
                {
                  "title": "Hint",
                  "content": "1. The syntax for creating an instance of a class is:\n```JS\nconst variableName = new className();\n```"
                }
              ]
            }
          },
          {
            "title": "Inherited method",
            "id": 108517,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Brandon doit appeler sa mère.\n\n1. Utilise la méthode que `device` a héritée de la classe `Phone` pour joindre `\"Mom\"`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "class Phone {\n  call(user) {\n    console.log(\"Calling: \" + user);\n  }\n}\nclass Smartphone extends Phone {\n  videoCall(user) {\n    console.log(\"Facetiming: \" + user);\n  }\n}\nconst device = new Smartphone();",
                  "solvedContent": "class Phone {\n  call(user) {\n    console.log(\"Calling: \" + user);\n  }\n}\nclass Smartphone extends Phone {\n  videoCall(user) {\n    console.log(\"Facetiming: \" + user);\n  }\n}\nconst device = new Smartphone();\ndevice.call(\"Mom\");"
                }
              ],
              "hints": [
                {
                  "title": "Hint",
                  "content": "The inherited method is `call()`."
                }
              ]
            }
          },
          {
            "title": "Specific method",
            "id": 108518,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Brandon et sa mère ne se sont pas vus depuis un moment, alors ils décident de passer à un appel vidéo. Cependant, le téléphone de sa mère est presque à court de batterie, alors elle a dit à Brandon de passer l'appel vidéo à son père à la place.\n\n1. Utilise la méthode `videoCall()` de la variable `device` avec l'argument `\"Dad\"`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "class Phone {\n  call(user) {\n    console.log(\"Calling: \" + user);\n  }\n}\nclass Smartphone extends Phone {\n  videoCall(user) {\n    console.log(\"Facetiming: \" + user);\n  }\n}\nconst device = new Smartphone();\ndevice.call(\"Mom\");",
                  "solvedContent": "class Phone {\n  call(user) {\n    console.log(\"Calling: \" + user);\n  }\n}\nclass Smartphone extends Phone {\n  videoCall(user) {\n    console.log(\"Facetiming: \" + user);\n  }\n}\nconst device = new Smartphone();\ndevice.call(\"Mom\");\ndevice.videoCall(\"Dad\");"
                }
              ],
              "hints": []
            }
          }
        ]
      }
    ]
  }
}