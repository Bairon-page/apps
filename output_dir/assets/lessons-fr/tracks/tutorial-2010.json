{
  "tutorial": {
    "id": 2010,
    "version": 9,
    "type": "guidedProjectOptional",
    "isNew": false,
    "codeLanguage": "javascript",
    "title": "Rapport de la boutique de cadeaux",
    "descriptionContent": "Utilise tes connaissances en opérations sur les tableaux pour créer un rapport de boutique de cadeaux",
    "shortDescriptionContent": "",
    "showInTrack": true,
    "iconBanner": "tutorial-2010-icon-banner.svg",
    "chapters": [
      {
        "id": 12785,
        "title": "Rapport de la boutique de cadeaux",
        "type": "practiceLevel3",
        "lessons": [
          {
            "title": "Step 1",
            "id": 115889,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Dans ce projet, tu utiliseras tes connaissances des opérateurs de tableau JavaScript, comme `.reduce()`, `.map()`, et `.filter()`, pour analyser les données de vente d'une boutique de cadeaux nouvellement ouverte.\n\nNous allons nous concentrer sur l'analyse des ventes de la première semaine, alors commençons par créer une variable nommée `firstWeekSales` pour stocker un tableau contenant uniquement les données de vente de la première semaine. Pour pratiquer l'écriture d'une syntaxe concise, tu devrais utiliser une fonction en ligne.\n\n1. Appelle la fonction JavaScript appropriée sur le tableau `sales` pour générer un nouveau tableau contenant uniquement les données de vente de la première semaine. Stocke ton résultat dans `firstWeekSales`.\n2. Ensuite, `console.log` le texte `\"First Week Sales: \"` concaténé avec `firstWeekSales` pour vérifier ton travail. Tu devrais avoir seulement 7 valeurs dans ton nouveau tableau.\n\nExemple de sortie :\n```\nFirst Week Sales: 455,505,340,780,690,880,900\n```",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "index.js",
                  "codeLanguage": "javascript",
                  "content": "let sales = [455, 505, 340, 780, 690, 880, 900, 685, 835, 754];\nlet customers = [25, 30, 20, 35, 36, 32, 44, 45, 34, 15];\nlet daysOfTheWeek = [\"Monday\", \"Tuesday\", \"Wednesday\",\"Thursday\", \"Friday\", \"Saturday\", \"Sunday\"];\n\n\n\n\n",
                  "solvedContent": "let sales = [455, 505, 340, 780, 690, 880, 900, 685, 835, 754];\nlet customers = [25, 30, 20, 35, 36, 32, 44, 45, 34, 15];\nlet daysOfTheWeek = [\"Monday\", \"Tuesday\", \"Wednesday\",\"Thursday\", \"Friday\", \"Saturday\", \"Sunday\"];\n\nlet firstWeekSales = sales.filter(function(element, index) {\n return index < 7;\n});\nconsole.log(\"First Week Sales: \" + firstWeekSales);"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Step 2",
            "id": 116143,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Maintenant, nous devons créer un tableau correspondant aux données des clients de la première semaine. Comme mentionné à l'étape précédente, nous utiliserons une fonction inline pour nous entraîner davantage.\n\n1. Crée une variable nommée `firstWeekCustomers` et utilise une syntaxe similaire à l'étape précédente pour stocker un tableau des données des clients des 7 premiers jours.\n2. Comme avant, utilise `console.log` pour afficher le texte `\"First Week Customers: \"` concaténé avec `firstWeekCustomers` pour vérifier ton travail. Tu devrais avoir seulement 7 valeurs dans ton nouveau tableau.\n\nTon résultat dans ton fichier devrait être le suivant :\n```\nFirst Week Sales: 455,505,340,780,690,880,900\nFirst Week Customers: 25,30,20,35,36,32,44\n```",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "index.js",
                  "codeLanguage": "javascript",
                  "content": "let sales = [455, 505, 340, 780, 690, 880, 900, 685, 835, 754];\nlet customers = [25, 30, 20, 35, 36, 32, 44, 45, 34, 15];\nlet daysOfTheWeek = [\"Monday\", \"Tuesday\", \"Wednesday\",\"Thursday\", \"Friday\", \"Saturday\", \"Sunday\"];\n\nlet firstWeekSales = sales.filter(function(element, index) {\n return index < 7;\n});\nconsole.log(\"First Week Sales: \" + firstWeekSales);\n\n\n\n\n",
                  "solvedContent": "let sales = [455, 505, 340, 780, 690, 880, 900, 685, 835, 754];\nlet customers = [25, 30, 20, 35, 36, 32, 44, 45, 34, 15];\nlet daysOfTheWeek = [\"Monday\", \"Tuesday\", \"Wednesday\",\"Thursday\", \"Friday\", \"Saturday\", \"Sunday\"];\n\nlet firstWeekSales = sales.filter(function(element, index) {\n return index < 7;\n});\nconsole.log(\"First Week Sales: \" + firstWeekSales);\n\nlet firstWeekCustomers = customers.filter(function(element, index) {\n return index < 7;\n});\nconsole.log(\"First Week Customers: \" + firstWeekCustomers);"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Step 3",
            "id": 116144,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Simplifions notre syntaxe en incorporant des fonctions fléchées. Tu devrais garder les mêmes instructions `console.log`.\n\n1. Convertis les deux fonctions inline `.filter()` en fonctions fléchées.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "index.js",
                  "codeLanguage": "javascript",
                  "content": "let sales = [455, 505, 340, 780, 690, 880, 900, 685, 835, 754];\nlet customers = [25, 30, 20, 35, 36, 32, 44, 45, 34, 15];\nlet daysOfTheWeek = [\"Monday\", \"Tuesday\", \"Wednesday\",\"Thursday\", \"Friday\", \"Saturday\", \"Sunday\"];\n\nlet firstWeekSales = sales.filter(function(element, index) {\n return index < 7;\n});\nconsole.log(\"First Week Sales: \" + firstWeekSales);\n\nlet firstWeekCustomers = customers.filter(function(element, index) {\n return index < 7;\n});\nconsole.log(\"First Week Customers: \" + firstWeekCustomers);",
                  "solvedContent": "let sales = [455, 505, 340, 780, 690, 880, 900, 685, 835, 754];\nlet customers = [25, 30, 20, 35, 36, 32, 44, 45, 34, 15];\nlet daysOfTheWeek = [\"Monday\", \"Tuesday\", \"Wednesday\",\"Thursday\", \"Friday\", \"Saturday\", \"Sunday\"];\n\nlet firstWeekSales = sales.filter((element, index) => index < 7);\nconsole.log(\"First Week Sales: \" + firstWeekSales);\n\nlet firstWeekCustomers = customers.filter((element, index) => index < 7);\nconsole.log(\"First Week Customers: \" + firstWeekCustomers);"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Step 4",
            "id": 116145,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Nous avons un tableau des chiffres de vente de la première semaine. Calculons sa somme pour trouver le total des ventes hebdomadaires de la boutique de cadeaux.\n\n1. Crée une nouvelle variable nommée `firstWeekSalesSum`.\n2. Ensuite, appelle la fonction JavaScript intégrée appropriée sur le tableau `firstWeekSales` pour calculer sa somme. Stocke cette valeur dans ta nouvelle variable `firstWeekSalesSum`. Tu devrais utiliser une fonction fléchée.\n3. Enfin, `console.log` le texte `\"First Week Sales Sum: \"` concaténé avec la variable `firstWeekSalesSum` pour vérifier ton travail.\n\nTon résultat devrait être :\n```\nFirst Week Sales: 455,505,340,780,690,880,900\nFirst Week Customers: 25,30,20,35,36,32,44\nFirst Week Sales Sum: 4550 \n```",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "index.js",
                  "codeLanguage": "javascript",
                  "content": "let sales = [455, 505, 340, 780, 690, 880, 900, 685, 835, 754];\nlet customers = [25, 30, 20, 35, 36, 32, 44, 45, 34, 15];\nlet daysOfTheWeek = [\"Monday\", \"Tuesday\", \"Wednesday\",\"Thursday\", \"Friday\", \"Saturday\", \"Sunday\"];\n\nlet firstWeekSales = sales.filter((element, index) => index < 7);\nconsole.log(\"First Week Sales: \" + firstWeekSales);\n\nlet firstWeekCustomers = customers.filter((element, index) => index < 7);\nconsole.log(\"First Week Customers: \" + firstWeekCustomers);\n\n\n",
                  "solvedContent": "let sales = [455, 505, 340, 780, 690, 880, 900, 685, 835, 754];\nlet customers = [25, 30, 20, 35, 36, 32, 44, 45, 34, 15];\nlet daysOfTheWeek = [\"Monday\", \"Tuesday\", \"Wednesday\",\"Thursday\", \"Friday\", \"Saturday\", \"Sunday\"];\n\nlet firstWeekSales = sales.filter((element, index) => index < 7);\nconsole.log(\"First Week Sales: \" + firstWeekSales);\n\nlet firstWeekCustomers = customers.filter((element, index) => index < 7);\nconsole.log(\"First Week Customers: \" + firstWeekCustomers);\n\nlet firstWeekSalesSum = firstWeekSales.reduce((prev, curr) => prev + curr);\nconsole.log(\"First Week Sales Sum: \" + firstWeekSalesSum);"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Step 5",
            "id": 116147,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Faisons maintenant la même opération sur `firstWeekCustomers` pour trouver le total des clients de la première semaine. Encore une fois, tu devrais utiliser une fonction fléchée pour simplifier ta syntaxe.\n\n1. Crée une nouvelle variable nommée `firstWeekCustomersSum`.\n2. Ensuite, appelle la fonction JavaScript appropriée sur le tableau `firstWeekCustomers` pour calculer sa somme, puis stocke cette valeur dans ta nouvelle variable `firstWeekCustomersSum`. Tu devrais utiliser une fonction fléchée.\n3. Enfin, utilise `console.log` pour afficher le texte `\"First Week Customers Sum: \"` concaténé avec la variable `firstWeekCustomersSum` pour vérifier ton travail.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "index.js",
                  "codeLanguage": "javascript",
                  "content": "let sales = [455, 505, 340, 780, 690, 880, 900, 685, 835, 754];\nlet customers = [25, 30, 20, 35, 36, 32, 44, 45, 34, 15];\nlet daysOfTheWeek = [\"Monday\", \"Tuesday\", \"Wednesday\",\"Thursday\", \"Friday\", \"Saturday\", \"Sunday\"];\n\nlet firstWeekSales = sales.filter((element, index) => index < 7);\nconsole.log(\"First Week Sales: \" + firstWeekSales);\n\nlet firstWeekCustomers = customers.filter((element, index) => index < 7);\nconsole.log(\"First Week Customers: \" + firstWeekCustomers);\n\nlet firstWeekSalesSum = firstWeekSales.reduce((prev, curr) => prev + curr);\nconsole.log(\"First Week Sales Sum: \" + firstWeekSalesSum);\n\n\n",
                  "solvedContent": "let sales = [455, 505, 340, 780, 690, 880, 900, 685, 835, 754];\nlet customers = [25, 30, 20, 35, 36, 32, 44, 45, 34, 15];\nlet daysOfTheWeek = [\"Monday\", \"Tuesday\", \"Wednesday\",\"Thursday\", \"Friday\", \"Saturday\", \"Sunday\"];\n\nlet firstWeekSales = sales.filter((element, index) => index < 7);\nconsole.log(\"First Week Sales: \" + firstWeekSales);\n\nlet firstWeekCustomers = customers.filter((element, index) => index < 7);\nconsole.log(\"First Week Customers: \" + firstWeekCustomers);\n\nlet firstWeekSalesSum = firstWeekSales.reduce((prev, curr) => prev + curr);\nconsole.log(\"First Week Sales Sum: \" + firstWeekSalesSum);\n\nlet firstWeekCustomersSum = firstWeekCustomers.reduce((prev, curr) => prev + curr);\nconsole.log(\"First Week Customers Sum: \" + firstWeekCustomersSum);"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Step 6",
            "id": 116148,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Utilisons nos totaux calculés pour trouver les moyennes de ventes quotidiennes et par client.\n\n1. Crée une variable nommée `firstWeekAverage` et calcule la moyenne des ventes quotidiennes en utilisant `firstWeekSalesSum`.\n2. Ensuite, crée une variable nommée `firstWeekCustomerAvg` et calcule la moyenne des ventes par client en utilisant `firstWeekSalesSum` et `firstWeekCustomersSum`.\n3. Pour vérifier ton travail, `console.log` le texte `\"First Week Average: \"` concaténé avec la variable `firstWeekAverage`.\n4. Enfin, `console.log` le texte `\"First Week Customer Average: \"` concaténé avec la variable `firstWeekCustomerAvg`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "index.js",
                  "codeLanguage": "javascript",
                  "content": "let sales = [455, 505, 340, 780, 690, 880, 900, 685, 835, 754];\nlet customers = [25, 30, 20, 35, 36, 32, 44, 45, 34, 15];\nlet daysOfTheWeek = [\"Monday\", \"Tuesday\", \"Wednesday\",\"Thursday\", \"Friday\", \"Saturday\", \"Sunday\"];\n\nlet firstWeekSales = sales.filter((element, index) => index < 7);\nconsole.log(\"First Week Sales: \" + firstWeekSales);\n\nlet firstWeekCustomers = customers.filter((element, index) => index < 7);\nconsole.log(\"First Week Customers: \" + firstWeekCustomers);\n\nlet firstWeekSalesSum = firstWeekSales.reduce((prev, curr) => prev + curr);\nconsole.log(\"First Week Sales Sum: \" + firstWeekSalesSum);\n\nlet firstWeekCustomersSum = firstWeekCustomers.reduce((prev, curr) => prev + curr);\nconsole.log(\"First Week Customers Sum: \" + firstWeekCustomersSum);\n\n\n\n\n",
                  "solvedContent": "let sales = [455, 505, 340, 780, 690, 880, 900, 685, 835, 754];\nlet customers = [25, 30, 20, 35, 36, 32, 44, 45, 34, 15];\nlet daysOfTheWeek = [\"Monday\", \"Tuesday\", \"Wednesday\",\"Thursday\", \"Friday\", \"Saturday\", \"Sunday\"];\n\nlet firstWeekSales = sales.filter((element, index) => index < 7);\nconsole.log(\"First Week Sales: \" + firstWeekSales);\n\nlet firstWeekCustomers = customers.filter((element, index) => index < 7);\nconsole.log(\"First Week Customers: \" + firstWeekCustomers);\n\nlet firstWeekSalesSum = firstWeekSales.reduce((prev, curr) => prev + curr);\nconsole.log(\"First Week Sales Sum: \" + firstWeekSalesSum);\n\nlet firstWeekCustomersSum = firstWeekCustomers.reduce((prev, curr) => prev + curr);\nconsole.log(\"First Week Customers Sum: \" + firstWeekCustomersSum);\n\nlet firstWeekAverage = firstWeekSalesSum / 7;\nlet firstWeekCustomerAvg = firstWeekSalesSum / firstWeekCustomersSum;\nconsole.log(\"First Week Average: \" + firstWeekAverage);\nconsole.log(\"First Week Customer Average: \" + firstWeekCustomerAvg);"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Step 7",
            "id": 116149,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Le propriétaire de la boutique de cadeaux a demandé des analyses plus détaillées pour la première semaine. Ils aimeraient voir la vente moyenne par client pour chaque jour, étiquetée avec le jour de la semaine correspondant. Commençons par créer le tableau des moyennes de ventes quotidiennes.\n\n1. Crée une nouvelle variable nommée `firstWeekDailyAverage`.\n2. Ensuite, appelle la fonction `.map()` sur le tableau `firstWeekSales` pour calculer la vente moyenne par client pour chaque jour, en stockant le nouveau tableau dans `firstWeekDailyAverage`. Tu devrais utiliser la valeur `index` du tableau pour référencer le tableau `firstWeekCustomers` et effectuer ton calcul (les ventes de chaque jour divisées par le nombre de clients ce jour-là).\n2. Ensuite, `console.log` ta variable `firstWeekDailyAverage` résultante pour vérifier ton travail. N'ajoute pas de texte.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "index.js",
                  "codeLanguage": "javascript",
                  "content": "let sales = [455, 505, 340, 780, 690, 880, 900, 685, 835, 754];\nlet customers = [25, 30, 20, 35, 36, 32, 44, 45, 34, 15];\nlet daysOfTheWeek = [\"Monday\", \"Tuesday\", \"Wednesday\",\"Thursday\", \"Friday\", \"Saturday\", \"Sunday\"];\n\nlet firstWeekSales = sales.filter((element, index) => index < 7);\nconsole.log(\"First Week Sales: \" + firstWeekSales);\n\nlet firstWeekCustomers = customers.filter((element, index) => index < 7);\nconsole.log(\"First Week Customers: \" + firstWeekCustomers);\n\nlet firstWeekSalesSum = firstWeekSales.reduce((prev, curr) => prev + curr);\nconsole.log(\"First Week Sales Sum: \" + firstWeekSalesSum);\n\nlet firstWeekCustomersSum = firstWeekCustomers.reduce((prev, curr) => prev + curr);\nconsole.log(\"First Week Customers Sum: \" + firstWeekCustomersSum);\n\nlet firstWeekAverage = firstWeekSalesSum / 7;\nlet firstWeekCustomerAvg = firstWeekSalesSum / firstWeekCustomersSum;\nconsole.log(\"First Week Average: \" + firstWeekAverage);\nconsole.log(\"First Week Customer Average: \" + firstWeekCustomerAvg);\n\n\n\n\n",
                  "solvedContent": "let sales = [455, 505, 340, 780, 690, 880, 900, 685, 835, 754];\nlet customers = [25, 30, 20, 35, 36, 32, 44, 45, 34, 15];\nlet daysOfTheWeek = [\"Monday\", \"Tuesday\", \"Wednesday\",\"Thursday\", \"Friday\", \"Saturday\", \"Sunday\"];\n\nlet firstWeekSales = sales.filter((element, index) => index < 7);\nconsole.log(\"First Week Sales: \" + firstWeekSales);\n\nlet firstWeekCustomers = customers.filter((element, index) => index < 7);\nconsole.log(\"First Week Customers: \" + firstWeekCustomers);\n\nlet firstWeekSalesSum = firstWeekSales.reduce((prev, curr) => prev + curr);\nconsole.log(\"First Week Sales Sum: \" + firstWeekSalesSum);\n\nlet firstWeekCustomersSum = firstWeekCustomers.reduce((prev, curr) => prev + curr);\nconsole.log(\"First Week Customers Sum: \" + firstWeekCustomersSum);\n\nlet firstWeekAverage = firstWeekSalesSum / 7;\nlet firstWeekCustomerAvg = firstWeekSalesSum / firstWeekCustomersSum;\nconsole.log(\"First Week Average: \" + firstWeekAverage);\nconsole.log(\"First Week Customer Average: \" + firstWeekCustomerAvg);\n\nlet firstWeekDailyAverage = firstWeekSales.map(function(element, index) {\n return (element / firstWeekCustomers[index]);\n});\nconsole.log(firstWeekDailyAverage);"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Step 8",
            "id": 116150,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Utilisons maintenant `.map()` pour étiqueter chaque moyenne quotidienne.\n\n1. Tout d'abord, supprime la déclaration `console.log` qui enregistre `firstWeekDailyAverage`.\n2. Ensuite, crée une variable nommée `labeled` et appelle `.map()` sur la variable `firstWeekDailyAverage`. Ta fonction doit concaténer le jour de la semaine correspondant (tu peux utiliser la valeur `index` pour référencer le tableau `daysofTheWeek`) avec un espace et la moyenne de ce jour arrondie à 2 décimales.\n3. Ensuite, `console.log` la variable `labeled`.\n\nPar exemple, ton tableau résultant pourrait contenir une valeur : `Monday 28.55`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "index.js",
                  "codeLanguage": "javascript",
                  "content": "let sales = [455, 505, 340, 780, 690, 880, 900, 685, 835, 754];\nlet customers = [25, 30, 20, 35, 36, 32, 44, 45, 34, 15];\nlet daysOfTheWeek = [\"Monday\", \"Tuesday\", \"Wednesday\",\"Thursday\", \"Friday\", \"Saturday\", \"Sunday\"];\n\nlet firstWeekSales = sales.filter((element, index) => index < 7);\nconsole.log(\"First Week Sales: \" + firstWeekSales);\n\nlet firstWeekCustomers = customers.filter((element, index) => index < 7);\nconsole.log(\"First Week Customers: \" + firstWeekCustomers);\n\nlet firstWeekSalesSum = firstWeekSales.reduce((prev, curr) => prev + curr);\nconsole.log(\"First Week Sales Sum: \" + firstWeekSalesSum);\n\nlet firstWeekCustomersSum = firstWeekCustomers.reduce((prev, curr) => prev + curr);\nconsole.log(\"First Week Customers Sum: \" + firstWeekCustomersSum);\n\nlet firstWeekAverage = firstWeekSalesSum / 7;\nlet firstWeekCustomerAvg = firstWeekSalesSum / firstWeekCustomersSum;\nconsole.log(\"First Week Average: \" + firstWeekAverage);\nconsole.log(\"First Week Customer Average: \" + firstWeekCustomerAvg);\n\nlet firstWeekDailyAverage = firstWeekSales.map(function(element, index) {\n return (element / firstWeekCustomers[index]);\n});\n\nconsole.log(firstWeekDailyAverage);\n\n\n",
                  "solvedContent": "let sales = [455, 505, 340, 780, 690, 880, 900, 685, 835, 754];\nlet customers = [25, 30, 20, 35, 36, 32, 44, 45, 34, 15];\nlet daysOfTheWeek = [\"Monday\", \"Tuesday\", \"Wednesday\",\"Thursday\", \"Friday\", \"Saturday\", \"Sunday\"];\n\nlet firstWeekSales = sales.filter((element, index) => index < 7);\nconsole.log(\"First Week Sales: \" + firstWeekSales);\n\nlet firstWeekCustomers = customers.filter((element, index) => index < 7);\nconsole.log(\"First Week Customers: \" + firstWeekCustomers);\n\nlet firstWeekSalesSum = firstWeekSales.reduce((prev, curr) => prev + curr);\nconsole.log(\"First Week Sales Sum: \" + firstWeekSalesSum);\n\nlet firstWeekCustomersSum = firstWeekCustomers.reduce((prev, curr) => prev + curr);\nconsole.log(\"First Week Customers Sum: \" + firstWeekCustomersSum);\n\nlet firstWeekAverage = firstWeekSalesSum / 7;\nlet firstWeekCustomerAvg = firstWeekSalesSum / firstWeekCustomersSum;\nconsole.log(\"First Week Average: \" + firstWeekAverage);\nconsole.log(\"First Week Customer Average: \" + firstWeekCustomerAvg);\n\nlet firstWeekDailyAverage = firstWeekSales.map(function(element, index) {\n return (element / firstWeekCustomers[index]);\n});\n\nlet labeled = firstWeekDailyAverage.map(function(element, index) {\n return daysOfTheWeek[index] + \" \" + element.toFixed(2);\n});\nconsole.log(labeled);"
                }
              ],
              "hints": [
                {
                  "title": "Hint",
                  "content": "To round a number, you can call `.toFixed()` with the number of decimals passed as a parameter."
                }
              ]
            }
          },
          {
            "title": "Step 9",
            "id": 116152,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Enfin, combinons les valeurs étiquetées en une chaîne de caractères. Il est considéré comme une bonne pratique de rendre notre sortie aussi lisible que possible, donc chaque valeur doit être séparée par une virgule et un espace.\n\n1. Tout d'abord, supprime l'instruction `console.log` qui enregistre la variable `labeled`.\n2. Ensuite, crée une variable nommée `labeledString`.\n3. Puis, appelle la fonction JavaScript appropriée sur le tableau `labeled` pour concaténer les valeurs en une seule chaîne stockée dans `labeledString`. Chaque valeur doit être séparée par une virgule et un espace.\n4. Enfin, utilise `console.log` sur ta nouvelle variable `labeledString` pour vérifier ton travail.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "index.js",
                  "codeLanguage": "javascript",
                  "content": "let sales = [455, 505, 340, 780, 690, 880, 900, 685, 835, 754];\nlet customers = [25, 30, 20, 35, 36, 32, 44, 45, 34, 15];\nlet daysOfTheWeek = [\"Monday\", \"Tuesday\", \"Wednesday\",\"Thursday\", \"Friday\", \"Saturday\", \"Sunday\"];\n\nlet firstWeekSales = sales.filter((element, index) => index < 7);\nconsole.log(\"First Week Sales: \" + firstWeekSales);\n\nlet firstWeekCustomers = customers.filter((element, index) => index < 7);\nconsole.log(\"First Week Customers: \" + firstWeekCustomers);\n\nlet firstWeekSalesSum = firstWeekSales.reduce((prev, curr) => prev + curr);\nconsole.log(\"First Week Sales Sum: \" + firstWeekSalesSum);\n\nlet firstWeekCustomersSum = firstWeekCustomers.reduce((prev, curr) => prev + curr);\nconsole.log(\"First Week Customers Sum: \" + firstWeekCustomersSum);\n\nlet firstWeekAverage = firstWeekSalesSum / 7;\nlet firstWeekCustomerAvg = firstWeekSalesSum / firstWeekCustomersSum;\nconsole.log(\"First Week Average: \" + firstWeekAverage);\nconsole.log(\"First Week Customer Average: \" + firstWeekCustomerAvg);\n\nlet firstWeekDailyAverage = firstWeekSales.map(function(element, index) {\n return (element / firstWeekCustomers[index]);\n});\n\nlet labeled = firstWeekDailyAverage.map(function(element, index) {\n return daysOfTheWeek[index] + \" \" + element.toFixed(2);\n});\n\n\n\n\n",
                  "solvedContent": "let sales = [455, 505, 340, 780, 690, 880, 900, 685, 835, 754];\nlet customers = [25, 30, 20, 35, 36, 32, 44, 45, 34, 15];\nlet daysOfTheWeek = [\"Monday\", \"Tuesday\", \"Wednesday\",\"Thursday\", \"Friday\", \"Saturday\", \"Sunday\"];\n\nlet firstWeekSales = sales.filter((element, index) => index < 7);\nconsole.log(\"First Week Sales: \" + firstWeekSales);\n\nlet firstWeekCustomers = customers.filter((element, index) => index < 7);\nconsole.log(\"First Week Customers: \" + firstWeekCustomers);\n\nlet firstWeekSalesSum = firstWeekSales.reduce((prev, curr) => prev + curr);\nconsole.log(\"First Week Sales Sum: \" + firstWeekSalesSum);\n\nlet firstWeekCustomersSum = firstWeekCustomers.reduce((prev, curr) => prev + curr);\nconsole.log(\"First Week Customers Sum: \" + firstWeekCustomersSum);\n\nlet firstWeekAverage = firstWeekSalesSum / 7;\nlet firstWeekCustomerAvg = firstWeekSalesSum / firstWeekCustomersSum;\nconsole.log(\"First Week Average: \" + firstWeekAverage);\nconsole.log(\"First Week Customer Average: \" + firstWeekCustomerAvg);\n\nlet firstWeekDailyAverage = firstWeekSales.map(function(element, index) {\n return (element / firstWeekCustomers[index]);\n});\n\nlet labeled = firstWeekDailyAverage.map(function(element, index) {\n return daysOfTheWeek[index] + \" \" + element.toFixed(2);\n});\n\nlet labeledString = labeled.reduce(function(prev, curr) {\n return prev + \", \" + curr;\n});\nconsole.log(labeledString);"
                }
              ],
              "hints": []
            }
          }
        ]
      }
    ]
  }
}