{
  "tutorial": {
    "id": 2259,
    "version": 2,
    "type": "practiceOptional",
    "isNew": false,
    "codeLanguage": "javascript",
    "title": "ES6 1",
    "descriptionContent": "ES6 1",
    "shortDescriptionContent": "",
    "showInTrack": true,
    "iconBanner": null,
    "chapters": [
      {
        "id": 12387,
        "title": "Variables et portée en ES6",
        "type": "practiceLevel3",
        "lessons": [
          {
            "title": "Code 1",
            "id": 112463,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Crée une variable locale `area` qui stocke `width` multiplié par `height` à l'intérieur de la fonction.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "function calculateArea(width, height) {\n\n return area;\n}\nconst wallSize = calculateArea(6, 7);\nconsole.log(wallSize);",
                  "solvedContent": "function calculateArea(width, height) {\n const area = width * height;\n return area;\n}\nconst wallSize = calculateArea(6, 7);\nconsole.log(wallSize);"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Code 2",
            "id": 112464,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Le compte à rebours fonctionne. Cependant, nous voulons que la valeur de la variable déclarée à la première ligne ne change pas. Utilise le bon type de variable dans le bloc de portée pour que le `console.log` affiche \"The value of variable i is 10\".",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "var i = 10;\nfor (var i = 10; i >= 0; i--) {\n console.log(i);\n}\nconsole.log(\"The value of variable i is: \" + i);",
                  "solvedContent": "var i = 10;\nfor (let i = 10; i >= 0; i--) {\n console.log(i);\n}\nconsole.log(\"The value of variable i is: \" + i);"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Code 3",
            "id": 112466,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Rends la variable `winningNumber` disponible pour utilisation à l'intérieur de la fonction `drawWinner` en la définissant dans le scope global.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "function drawWinningNumber() {\n const winningNumber = Math.floor((Math.random() * 3));\n}\n\nfunction drawWinner() {\n const players = [\"Amanda\", \"Sheila\", \"Rob\"];\n const winner = players[winningNumber];\n console.log(\"The winner is \" + winner);\n}\ndrawWinner();",
                  "solvedContent": "const winningNumber = Math.floor((Math.random() * 3));\n\nfunction drawWinner() {\n const players = [\"Amanda\", \"Sheila\", \"Rob\"];\n const winner = players[winningNumber];\n console.log(\"The winner is \" + winner);\n}\ndrawWinner();"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Code 4",
            "id": 112467,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Rends la variable locale `toDoList` une variable globale en la sortant de la fonction `cleanUp`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "function cleanUp() {\n const toDoList = [\"sweeping\", \"washing\", \"mopping\"];\n for (let i = 0; i < toDoList.length; i++) {\n  toDoList.pop(toDoList[i]);\n }\n console.log(\"I still have some \" + toDoList + \" to do\");\n}\ncleanUp();",
                  "solvedContent": "const toDoList = [\"sweeping\", \"washing\", \"mopping\"];\nfunction cleanUp() {\n for (let i = 0; i < toDoList.length; i++) {\n  toDoList.pop(toDoList[i]);\n }\n console.log(\"I still have some \" + toDoList + \" to do\");\n}\ncleanUp();"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Code 5",
            "id": 112468,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Supprime le code qui redéfinit la valeur de la variable constante, afin que le code s'exécute sans erreur.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const retirement_age = 65;\n\nfunction retire(age) {\n retirement_age = 65;\n if (age >= retirement_age) {\n  console.log(\"Finally some rest!\");\n }\n}\nconst finalRetirement = retire(70);",
                  "solvedContent": "const retirement_age = 65;\n\nfunction retire(age) {\n if (age >= retirement_age) {\n  console.log(\"Finally some rest!\");\n }\n}\nconst finalRetirement = retire(70);"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Code 6",
            "id": 112543,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Si nous utilisons `year` dans le scope global, il semble que les deux guerres se soient terminées la même année. Assure-toi d'imprimer `World War I ended in 1918` et `World War II ended in 1945` en utilisant `year` comme variable locale à l'intérieur de chaque fonction. Utilise `const`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const year = 1918;\n\nfunction checkDateFirstWorldWar() {\n console.log(\"World War I ended in \" + year);\n}\n\nfunction checkDateSecondWorldWar() {\n console.log(\"World War II ended in \" + year);\n}\ncheckDateFirstWorldWar();\ncheckDateSecondWorldWar();",
                  "solvedContent": "function checkDateFirstWorldWar() {\n const year = 1918;\n console.log(\"World War I ended in \" + year);\n}\n\nfunction checkDateSecondWorldWar() {\n const year = 1945;\n console.log(\"World War II ended in \" + year);\n}\ncheckDateFirstWorldWar();\ncheckDateSecondWorldWar();"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 11829,
        "title": "Fonctions fléchées",
        "type": "practiceLevel3",
        "lessons": [
          {
            "title": "Code: Parenthesis and Arrow",
            "id": 108142,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Change la fonction suivante en une fonction fléchée et enregistre-la dans une variable nommée `greetGuest`. Appelle la fonction.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "function greetGuest() {\n console.log(\"Hi \" + \"Jon\");\n console.log(\"Hola \" + \"Jon\");\n}\ngreetGuest();",
                  "solvedContent": "const greetGuest = () => {\n console.log(\"Hi \" + \"Jon\");\n console.log(\"Hola \" + \"Jon\");\n};\ngreetGuest();"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Code: Parenthesis and Arrow 2",
            "id": 108202,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Change la fonction suivante en une fonction fléchée et enregistre-la dans une variable nommée `dailyMotivation`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "function dailyMotivation() {\n console.log(\"You are capable of anything you set your mind to.\");\n}\ndailyMotivation();",
                  "solvedContent": "const dailyMotivation = () => {\n console.log(\"You are capable of anything you set your mind to.\");\n};\ndailyMotivation();"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Code: Parameter",
            "id": 108143,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Ajoute un paramètre appelé `name`. Appelle la fonction avec `\"Jon\"`",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const greetGuest = () => {\n console.log(\"Hi\", name);\n console.log(\"Hola\", name);\n}",
                  "solvedContent": "const greetGuest = (name) => {\n console.log(\"Hi\", name);\n console.log(\"Hola\", name);\n};\ngreetGuest(\"Jon\");"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Code: Parameter 2",
            "id": 108203,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Ajoute un paramètre nommé `day`. Et appelle la fonction avec une valeur de sorte que `You are capable of anything you set your mind to.` s'affiche.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const dailyMotivation = () => {\n if (day === \"mon\") console.log(\n  \"You are capable of anything you set your mind to.\");\n else console.log(\"You are an inspiration to everyone around you.\");\n};",
                  "solvedContent": "const dailyMotivation = (day) => {\n if (day === \"mon\") console.log(\n  \"You are capable of anything you set your mind to.\");\n else console.log(\"You are an inspiration to everyone around you.\");\n};\ndailyMotivation(\"mon\");"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Code: Multiple body statements return",
            "id": 108145,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Mets le code suivant dans une fonction fléchée et enregistre-le dans une variable nommée `canDrive`. Ajoute un paramètre `age`. Appelle la fonction avec `17`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "if (age >= 16) {\n return \"Yes\";\n} else {\n return \"No\";\n}",
                  "solvedContent": "const canDrive = (age) => {\n if (age >= 16) {\n  return \"Yes\";\n } else {\n  return \"No\";\n }\n};\ncanDrive(17);"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Code: Return One Line",
            "id": 108146,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Change la fonction fléchée pour qu'elle n'utilise plus d'accolades ni le mot-clé `return`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const isEvenNumber = (number) => {\n return number % 2 == 0;\n};\nconsole.log(isEvenNumber(26));",
                  "solvedContent": "const isEvenNumber = (number) => number % 2 == 0;\nconsole.log(isEvenNumber(26));"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 11830,
        "title": "Paramètres des fonctions fléchées",
        "type": "practiceLevel3",
        "lessons": [
          {
            "title": "Code: Parameter",
            "id": 108195,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Ajoute un paramètre nommé `altitude` à la fonction et retourne `true` uniquement si `altitude` est inférieur ou égal à `2000`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const shouldDeployChute = () => {\n if () return true;\n return false;\n};",
                  "solvedContent": "const shouldDeployChute = (altitude) => {\n if (altitude <= 2000) return true;\n return false;\n};"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Code: Parameter without parenthesis",
            "id": 108196,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Ajoute un paramètre nommé `amount` à la fonction. N'utilise pas de parenthèses.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "let balance = 100;\nconst withdraw = => {\n balance = balance - amount;\n if (balance < 0) {\n  console.log(\"Overdrawn\");\n }\n};",
                  "solvedContent": "let balance = 100;\nconst withdraw = amount => {\n balance = balance - amount;\n if (balance < 0) {\n  console.log(\"Overdrawn\");\n }\n};"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Code: Default Parameters",
            "id": 108192,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Ajoute deux paramètres : `er` et `ip`. Donne à `ip` une valeur par défaut de `9`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const pitcherERA = () => {\n return er * 9 / ip;\n};",
                  "solvedContent": "const pitcherERA = (er, ip = 9) => {\n return er * 9 / ip;\n};"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Code: Default Parameters 2",
            "id": 108194,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Ajoute deux paramètres à la fonction : `cost` et `rate`. Donne à `rate` une valeur par défaut de `0.15`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const calculateTip = => {\n return cost * rate;\n};",
                  "solvedContent": "const calculateTip = (cost, rate = 0.15) => {\n return cost * rate;\n};"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Code: Multiple Parameters",
            "id": 108204,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Ajoute deux paramètres à la fonction fléchée : `hand` et `dealer`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const twentyOne = => {\n if (hand > 21) return \"bust\";\n if (hand === dealer) return \"push\";\n if (hand > dealer) return \"win\";\n if (hand < dealer);\n return \"lose\";\n};",
                  "solvedContent": "const twentyOne = (hand, dealer) => {\n if (hand > 21) return \"bust\";\n if (hand === dealer) return \"push\";\n if (hand > dealer) return \"win\";\n if (hand < dealer);\n return \"lose\";\n};"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Code: Multiple Parameters",
            "id": 108193,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Traduisons les coordonnées des pièces d'échecs sur un échiquier. Ajoute trois paramètres à la fonction fléchée : `column`, `row` et `piece`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const movePiece = () => {\n console.log(piece + \" to \" + column + row);\n};\nmovePiece(\"e\", 6, \"queen\");",
                  "solvedContent": "const movePiece = (column, row, piece) => {\n console.log(piece + \" to \" + column + row);\n};\nmovePiece(\"e\", 6, \"queen\");"
                }
              ],
              "hints": []
            }
          }
        ]
      }
    ]
  }
}