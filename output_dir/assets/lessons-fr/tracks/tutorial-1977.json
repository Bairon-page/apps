{
  "tutorial": {
    "id": 1977,
    "version": 10,
    "type": "guidedProjectOptional",
    "isNew": false,
    "codeLanguage": "javascript",
    "title": "Planificateur de livraison",
    "descriptionContent": "Construis un programme de planification de livraisons",
    "shortDescriptionContent": "",
    "showInTrack": true,
    "iconBanner": "tutorial-1977-icon-banner.svg",
    "chapters": [
      {
        "id": 12678,
        "title": "Planificateur de livraison",
        "type": "practiceLevel3",
        "lessons": [
          {
            "title": "Store day preferences",
            "id": 114891,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Sheila doit recevoir un colis, et elle veut s'assurer qu'il arrive quand elle est à la maison. Codons un programme de planification de livraison pour répondre à ses préférences et s'assurer qu'elle est là quand le colis arrive !\n\nLe programme de livraison prendra en compte les préférences de jour et d'heure de Sheila avant de planifier une livraison. Commençons par ses préférences de jour, et permettons deux jours préférés.\n\n1. Crée un `const` nommé `firstDay` pour stocker le premier jour préféré de Sheila, `\"Monday\"`.\n2. Crée un `const` nommé `secondDay` pour stocker le deuxième jour préféré de Sheila, `\"Friday\"`.\n3. Affiche dans la console un message de ce style : `\"Available days: Monday and Friday\"`. Utilise une concaténation de chaînes avec les constantes `firstDay` et `secondDay`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "",
                  "solvedContent": "const firstDay = \"Monday\";\r\nconst secondDay = \"Friday\";\r\nconsole.log(\"Available days: \" + firstDay + \" and \" + secondDay);"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Declare program's day selection",
            "id": 114999,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "La société de livraison ne travaille qu'un jour par semaine. Le jour de livraison de cette semaine est vendredi. Stockons cette valeur.\n1. Crée une `const` nommée `deliveryDay`, et assigne-lui la valeur `\"Friday\"`.\n2. Affiche `\"Delivery Day: Friday\"` dans la console, en utilisant la constante `deliveryDay` et la concaténation de chaînes de caractères.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const firstDay = \"Monday\";\r\nconst secondDay = \"Friday\";\r\nconsole.log(\"Available days: \" + firstDay + \" and \" + secondDay);",
                  "solvedContent": "const firstDay = \"Monday\";\r\nconst secondDay = \"Friday\";\r\nconsole.log(\"Available days: \" + firstDay + \" and \" + secondDay);\r\nconst deliveryDay = \"Friday\";\r\nconsole.log(\"Delivery Day: \" + deliveryDay);"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Check Day I",
            "id": 114895,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Il est temps de vérifier si le jour de livraison correspond à la préférence de jour de livraison de Sheila ! Sheila a 2 jours préférés, mais commençons par vérifier si le jour de livraison correspond au premier jour.\n\n1. Vérifie si `deliveryDay` est égal à `firstDay`, et attribue cette comparaison comme valeur d'une nouvelle variable `const` nommée `firstDayCheck`.\n2. Affiche `\"Livraison réussie le premier jour ? \" + firstDayCheck` dans la console.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const firstDay = \"Monday\";\r\nconst secondDay = \"Friday\";\r\nconsole.log(\"Available days: \" + firstDay + \" and \" + secondDay);\r\nconst deliveryDay = \"Friday\";\r\nconsole.log(\"Delivery Day: \" + deliveryDay);",
                  "solvedContent": "const firstDay = \"Monday\";\r\nconst secondDay = \"Friday\";\r\nconsole.log(\"Available days: \" + firstDay + \" and \" + secondDay);\r\nconst deliveryDay = \"Friday\";\r\nconsole.log(\"Delivery Day: \" + deliveryDay);\r\nconst firstDayCheck = deliveryDay === firstDay;\r\nconsole.log(\"Successful delivery on the first day? \" + firstDayCheck);"
                }
              ],
              "hints": [
                {
                  "title": "Hint",
                  "content": "You can check if strings are equal using `===`."
                }
              ]
            }
          },
          {
            "title": "Check Day II",
            "id": 114903,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "La livraison n'est pas disponible le premier jour ! Vérifions si le jour de livraison correspond au deuxième jour.\n\n1. Vérifie si `deliveryDay` est égal à `secondDay` et attribue cette comparaison comme valeur d'une nouvelle variable `const` nommée `secondDayCheck`.\n2. Affiche `\"Successful delivery on the second day? \" + secondDayCheck` dans la console.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const firstDay = \"Monday\";\r\nconst secondDay = \"Friday\";\r\nconsole.log(\"Available days: \" + firstDay + \" and \" + secondDay);\r\nconst deliveryDay = \"Friday\";\r\nconsole.log(\"Delivery Day: \" + deliveryDay);\r\nconst firstDayCheck = deliveryDay === firstDay;\r\nconsole.log(\"Successful delivery on the first day? \" + firstDayCheck);",
                  "solvedContent": "const firstDay = \"Monday\";\r\nconst secondDay = \"Friday\";\r\nconsole.log(\"Available days: \" + firstDay + \" and \" + secondDay);\r\nconst deliveryDay = \"Friday\";\r\nconsole.log(\"Delivery Day: \" + deliveryDay);\r\nconst firstDayCheck = deliveryDay === firstDay;\r\nconsole.log(\"Successful delivery on the first day? \" + firstDayCheck);\r\nconst secondDayCheck = deliveryDay === secondDay;\r\nconsole.log(\"Successful delivery on the second day? \" + secondDayCheck);"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Check Day III",
            "id": 114904,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Simplifions la vérification si les préférences de jour de Sheila ont été satisfaites en une seule étape, en utilisant l'opérateur logique *OU*.\n\n1. Crée une variable `const` appelée `dayResult`.\n2. Vérifie si `firstDayCheck` ou `secondDayCheck` sont `true`, et stocke cette expression logique dans la variable `dayResult`.\n3. Affiche `\"Fulfilled Sheila's day preference? \" + dayResult` dans la console.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const firstDay = \"Monday\";\r\nconst secondDay = \"Friday\";\r\nconsole.log(\"Available days: \" + firstDay + \" and \" + secondDay);\r\nconst deliveryDay = \"Friday\";\r\nconsole.log(\"Delivery Day: \" + deliveryDay);\r\nconst firstDayCheck = deliveryDay === firstDay;\r\nconsole.log(\"Successful delivery on the first day? \" + firstDayCheck);\r\nconst secondDayCheck = deliveryDay === secondDay;\r\nconsole.log(\"Successful delivery on the second day? \" + secondDayCheck);",
                  "solvedContent": "const firstDay = \"Monday\";\r\nconst secondDay = \"Friday\";\r\nconsole.log(\"Available days: \" + firstDay + \" and \" + secondDay);\r\nconst deliveryDay = \"Friday\";\r\nconsole.log(\"Delivery Day: \" + deliveryDay);\r\nconst firstDayCheck = deliveryDay === firstDay;\r\nconsole.log(\"Successful delivery on the first day? \" + firstDayCheck);\r\nconst secondDayCheck = deliveryDay === secondDay;\r\nconsole.log(\"Successful delivery on the second day? \" + secondDayCheck);\r\nconst dayResult = firstDayCheck || secondDayCheck;\r\nconsole.log(\"Fulfilled Sheila's day preference? \" + dayResult);"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Declare Sheila's preferred time",
            "id": 114892,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Le jour de livraison correspond ! Explorons maintenant l'heure de la livraison. Sheila est seulement à la maison entre 8h et 10h. Crée des variables pour déclarer l'heure préférée de Sheila.\n\n1. La livraison doit être après 8h, donc définis `8` comme la valeur d'une nouvelle variable `const` nommée `requestAfterTime`.\n2. La livraison doit être avant 10h, donc définis `10` comme la valeur d'une nouvelle variable `const` nommée `requestBeforeTime`.\n3. Imprime `\"Request delivery after \" + requestAfterTime + \" but before \" + requestBeforeTime` dans la console.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const firstDay = \"Monday\";\r\nconst secondDay = \"Friday\";\r\nconsole.log(\"Available days: \" + firstDay + \" and \" + secondDay);\r\nconst deliveryDay = \"Friday\";\r\nconsole.log(\"Delivery Day: \" + deliveryDay);\r\nconst firstDayCheck = deliveryDay === firstDay;\r\nconsole.log(\"Successful delivery on the first day? \" + firstDayCheck);\r\nconst secondDayCheck = deliveryDay === secondDay;\r\nconsole.log(\"Successful delivery on the second day? \" + secondDayCheck);\r\nconst dayResult = firstDayCheck || secondDayCheck;\r\nconsole.log(\"Fulfilled Sheila's day preference? \" + dayResult);",
                  "solvedContent": "const firstDay = \"Monday\";\r\nconst secondDay = \"Friday\";\r\nconsole.log(\"Available days: \" + firstDay + \" and \" + secondDay);\r\nconst deliveryDay = \"Friday\";\r\nconsole.log(\"Delivery Day: \" + deliveryDay);\r\nconst firstDayCheck = deliveryDay === firstDay;\r\nconsole.log(\"Successful delivery on the first day? \" + firstDayCheck);\r\nconst secondDayCheck = deliveryDay === secondDay;\r\nconsole.log(\"Successful delivery on the second day? \" + secondDayCheck);\r\nconst dayResult = firstDayCheck || secondDayCheck;\r\nconsole.log(\"Fulfilled Sheila's day preference? \" + dayResult);\r\nconst requestBeforeTime = 10;\r\nconst requestAfterTime = 8;\r\nconsole.log(\"Request delivery after \" + requestAfterTime + \" but before \" +\r\n  requestBeforeTime);"
                }
              ],
              "hints": [
                {
                  "title": "Hint",
                  "content": "Note that the variables should be numbers and not strings. Eg. `const <variableName> = <number>;`"
                }
              ]
            }
          },
          {
            "title": "Declare program's selection",
            "id": 114893,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "La société de livraison a un créneau de livraison à 9h vendredi prochain. Ajoutons cette information à notre application.\n\n1. Crée une variable `const` appelée `deliveryTime` et stocke le nombre `9` comme sa valeur.\n2. Affiche `\"Delivery Time: \" + deliveryTime` dans la console.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const firstDay = \"Monday\";\r\nconst secondDay = \"Friday\";\r\nconsole.log(\"Available days: \" + firstDay + \" \" + secondDay);\r\nconst deliveryDay = \"Friday\";\r\nconsole.log(\"Delivery Day: \" + deliveryDay);\r\nconst firstDayCheck = deliveryDay === firstDay;\r\nconsole.log(\"Successful delivery on the first day? \" + firstDayCheck);\r\nconst secondDayCheck = deliveryDay === secondDay;\r\nconsole.log(\"Successful delivery on the second day? \" + secondDayCheck);\r\nconst dayResult = firstDayCheck || secondDayCheck;\r\nconsole.log(\"Fulfilled Sheila's day preference? \" + dayResult);\r\nconst requestBeforeTime = 10;\r\nconst requestAfterTime = 8;\r\nconsole.log(\"Request delivery after \" + requestAfterTime + \" but before \" +\r\n  requestBeforeTime);",
                  "solvedContent": "const firstDay = \"Monday\";\r\nconst secondDay = \"Friday\";\r\nconsole.log(\"Available days: \" + firstDay + \" \" + secondDay);\r\nconst deliveryDay = \"Friday\";\r\nconsole.log(\"Delivery Day: \" + deliveryDay);\r\nconst firstDayCheck = deliveryDay === firstDay;\r\nconsole.log(\"Successful delivery on the first day? \" + firstDayCheck);\r\nconst secondDayCheck = deliveryDay === secondDay;\r\nconsole.log(\"Successful delivery on the second day? \" + secondDayCheck);\r\nconst dayResult = firstDayCheck || secondDayCheck;\r\nconsole.log(\"Fulfilled Sheila's day preference? \" + dayResult);\r\nconst requestBeforeTime = 10;\r\nconst requestAfterTime = 8;\r\nconsole.log(\"Request delivery after \" + requestAfterTime + \" but before \" +\r\n  requestBeforeTime);\r\nconst deliveryTime = 9;\r\nconsole.log(\"Delivery Time: \" + deliveryTime);"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Check Time I",
            "id": 114897,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Vérifions si les préférences de Sheila correspondent au temps disponible. Vérifie si la livraison est après 8h du matin.\n\n1. Vérifie que `deliveryTime` est à ou après `requestAfterTime` et définis la comparaison comme la valeur d'une nouvelle variable `const` nommée `afterTimeCheck`.\n2. Affiche `\"Delivery is after \" + requestAfterTime + \"? \" + afterTimeCheck` dans la console.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const firstDay = \"Monday\";\r\nconst secondDay = \"Friday\";\r\nconsole.log(\"Available days: \" + firstDay + \" and \" + secondDay);\r\nconst deliveryDay = \"Friday\";\r\nconsole.log(\"Delivery Day: \" + deliveryDay);\r\nconst firstDayCheck = deliveryDay === firstDay;\r\nconsole.log(\"Successful delivery on the first day? \" + firstDayCheck);\r\nconst secondDayCheck = deliveryDay === secondDay;\r\nconsole.log(\"Successful delivery on the second day? \" + secondDayCheck);\r\nconst dayResult = firstDayCheck || secondDayCheck;\r\nconsole.log(\"Fulfilled Sheila's day preference? \" + dayResult);\r\nconst requestBeforeTime = 10;\r\nconst requestAfterTime = 8;\r\nconsole.log(\"Request delivery after \" + requestAfterTime + \" but before \" +\r\n  requestBeforeTime);\r\nconst deliveryTime = 9;\r\nconsole.log(\"Delivery Time: \" + deliveryTime);",
                  "solvedContent": "const firstDay = \"Monday\";\r\nconst secondDay = \"Friday\";\r\nconsole.log(\"Available days: \" + firstDay + \" and \" + secondDay);\r\nconst deliveryDay = \"Friday\";\r\nconsole.log(\"Delivery Day: \" + deliveryDay);\r\nconst firstDayCheck = deliveryDay === firstDay;\r\nconsole.log(\"Successful delivery on the first day? \" + firstDayCheck);\r\nconst secondDayCheck = deliveryDay === secondDay;\r\nconsole.log(\"Successful delivery on the second day? \" + secondDayCheck);\r\nconst dayResult = firstDayCheck || secondDayCheck;\r\nconsole.log(\"Fulfilled Sheila's day preference? \" + dayResult);\r\nconst requestBeforeTime = 10;\r\nconst requestAfterTime = 8;\r\nconsole.log(\"Request delivery after \" + requestAfterTime + \" but before \" +\r\n  requestBeforeTime);\r\nconst deliveryTime = 9;\r\nconsole.log(\"Delivery Time: \" + deliveryTime);\r\nconst afterTimeCheck = deliveryTime >= requestAfterTime;\r\nconsole.log(\"Delivery is after \" + requestAfterTime + \"? \" + afterTimeCheck);"
                }
              ],
              "hints": [
                {
                  "title": "Hint",
                  "content": "You can use >= to see if the `deliveryTime` is after or equal to the `requestAfterTime`."
                }
              ]
            }
          },
          {
            "title": "Check Time II",
            "id": 114894,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Voyons maintenant si la livraison est avant 10h !\n\n1. Vérifie que `deliveryTime` est avant `requestBeforeTime`, et assigne la comparaison à une nouvelle variable `const` nommée `beforeTimeCheck`.\n2. Affiche `\"Delivery is before \" + requestBeforeTime + \"? \" + beforeTimeCheck` dans la console.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const firstDay = \"Monday\";\r\nconst secondDay = \"Friday\";\r\nconsole.log(\"Available days: \" + firstDay + \" and \" + secondDay);\r\nconst deliveryDay = \"Friday\";\r\nconsole.log(\"Delivery Day: \" + deliveryDay);\r\nconst firstDayCheck = deliveryDay === firstDay;\r\nconsole.log(\"Successful delivery on the first day? \" + firstDayCheck);\r\nconst secondDayCheck = deliveryDay === secondDay;\r\nconsole.log(\"Successful delivery on the second day? \" + secondDayCheck);\r\nconst dayResult = firstDayCheck || secondDayCheck;\r\nconsole.log(\"Fulfilled Sheila's day preference? \" + dayResult);\r\nconst requestBeforeTime = 10;\r\nconst requestAfterTime = 8;\r\nconsole.log(\"Request delivery after \" + requestAfterTime + \" but before \" +\r\n  requestBeforeTime);\r\nconst deliveryTime = 9;\r\nconsole.log(\"Delivery Time: \" + deliveryTime);\r\nconst afterTimeCheck = deliveryTime >= requestAfterTime;\r\nconsole.log(\"Delivery is after \" + requestAfterTime + \"? \" + afterTimeCheck);",
                  "solvedContent": "const firstDay = \"Monday\";\r\nconst secondDay = \"Friday\";\r\nconsole.log(\"Available days: \" + firstDay + \" and \" + secondDay);\r\nconst deliveryDay = \"Friday\";\r\nconsole.log(\"Delivery Day: \" + deliveryDay);\r\nconst firstDayCheck = deliveryDay === firstDay;\r\nconsole.log(\"Successful delivery on the first day? \" + firstDayCheck);\r\nconst secondDayCheck = deliveryDay === secondDay;\r\nconsole.log(\"Successful delivery on the second day? \" + secondDayCheck);\r\nconst dayResult = firstDayCheck || secondDayCheck;\r\nconsole.log(\"Fulfilled Sheila's day preference? \" + dayResult);\r\nconst requestBeforeTime = 10;\r\nconst requestAfterTime = 8;\r\nconsole.log(\"Request delivery after \" + requestAfterTime + \" but before \" +\r\n  requestBeforeTime);\r\nconst deliveryTime = 9;\r\nconsole.log(\"Delivery Time: \" + deliveryTime);\r\nconst afterTimeCheck = deliveryTime >= requestAfterTime;\r\nconsole.log(\"Delivery is after \" + requestAfterTime + \"? \" + afterTimeCheck);\r\nconst beforeTimeCheck = deliveryTime <= requestBeforeTime;\r\nconsole.log(\"Delivery is before \" + requestBeforeTime + \"? \" + beforeTimeCheck);"
                }
              ],
              "hints": [
                {
                  "title": "Hint",
                  "content": "You can use <= to see if the `deliveryTime` is before or equal to the `requestBeforeTime`."
                }
              ]
            }
          },
          {
            "title": "Check Time III",
            "id": 114898,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Super ! Sheila sera à la maison à ce moment-là ! Mais simplifions maintenant la vérification de l'heure avec l'opérateur logique AND.\n\n1. Vérifie que `beforeTimeCheck` et `afterTimeCheck` sont `true`, et définis cette expression logique comme la valeur d'une nouvelle variable `const` nommée `timeResult`.\n2. Affiche `\"Fulfilled Sheila's time preference? \" + timeResult` dans la console.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const firstDay = \"Monday\";\r\nconst secondDay = \"Friday\";\r\nconsole.log(\"Available days: \" + firstDay + \" and \" + secondDay);\r\nconst deliveryDay = \"Friday\";\r\nconsole.log(\"Delivery Day: \" + deliveryDay);\r\nconst firstDayCheck = deliveryDay === firstDay;\r\nconsole.log(\"Successful delivery on the first day? \" + firstDayCheck);\r\nconst secondDayCheck = deliveryDay === secondDay;\r\nconsole.log(\"Successful delivery on the second day? \" + secondDayCheck);\r\nconst dayResult = firstDayCheck || secondDayCheck;\r\nconsole.log(\"Fulfilled Sheila's day preference? \" + dayResult);\r\nconst requestBeforeTime = 10;\r\nconst requestAfterTime = 8;\r\nconsole.log(\"Request delivery after \" + requestAfterTime + \" but before \" +\r\n  requestBeforeTime);\r\nconst deliveryTime = 9;\r\nconsole.log(\"Delivery Time: \" + deliveryTime);\r\nconst afterTimeCheck = deliveryTime >= requestAfterTime;\r\nconsole.log(\"Delivery is after \" + requestAfterTime + \"? \" + afterTimeCheck);\r\nconst beforeTimeCheck = deliveryTime <= requestBeforeTime;\r\nconsole.log(\"Delivery is before \" + requestBeforeTime + \"? \" + beforeTimeCheck);",
                  "solvedContent": "const firstDay = \"Monday\";\r\nconst secondDay = \"Friday\";\r\nconsole.log(\"Available days: \" + firstDay + \" and \" + secondDay);\r\nconst deliveryDay = \"Friday\";\r\nconsole.log(\"Delivery Day: \" + deliveryDay);\r\nconst firstDayCheck = deliveryDay === firstDay;\r\nconsole.log(\"Successful delivery on the first day? \" + firstDayCheck);\r\nconst secondDayCheck = deliveryDay === secondDay;\r\nconsole.log(\"Successful delivery on the second day? \" + secondDayCheck);\r\nconst dayResult = firstDayCheck || secondDayCheck;\r\nconsole.log(\"Fulfilled Sheila's day preference? \" + dayResult);\r\nconst requestBeforeTime = 10;\r\nconst requestAfterTime = 8;\r\nconsole.log(\"Request delivery after \" + requestAfterTime + \" but before \" +\r\n  requestBeforeTime);\r\nconst deliveryTime = 9;\r\nconsole.log(\"Delivery Time: \" + deliveryTime);\r\nconst afterTimeCheck = deliveryTime >= requestAfterTime;\r\nconsole.log(\"Delivery is after \" + requestAfterTime + \"? \" + afterTimeCheck);\r\nconst beforeTimeCheck = deliveryTime <= requestBeforeTime;\r\nconsole.log(\"Delivery is before \" + requestBeforeTime + \"? \" + beforeTimeCheck);\r\nconst timeResult = beforeTimeCheck && afterTimeCheck;\r\nconsole.log(\"Fulfilled Sheila's time preference? \" + timeResult);"
                }
              ],
              "hints": [
                {
                  "title": "Hint",
                  "content": "You can use the AND operator  `&&`  for the check. It returns `false` if *any* of the conditions are `false`. It returns `true` if *both* of the conditions are `true`."
                }
              ]
            }
          },
          {
            "title": "Check day and time",
            "id": 114896,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Enfin, nous devons vérifier si la livraison a respecté à la fois les préférences de jour et d'heure de Sheila et imprimer le résultat de la vérification !\n\n1. Vérifie si `timeResult` et `dayResult` sont tous deux `true`, et attribue cette expression logique comme valeur de la nouvelle variable `const` `overallCheck`.\n2. Imprime `\"Program scheduled well? \" + overallCheck` dans la console.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const firstDay = \"Monday\";\r\nconst secondDay = \"Friday\";\r\nconsole.log(\"Available days: \" + firstDay + \" and \" + secondDay);\r\nconst deliveryDay = \"Friday\";\r\nconsole.log(\"Delivery Day: \" + deliveryDay);\r\nconst firstDayCheck = deliveryDay === firstDay;\r\nconsole.log(\"Successful delivery on the first day? \" + firstDayCheck);\r\nconst secondDayCheck = deliveryDay === secondDay;\r\nconsole.log(\"Successful delivery on the second day? \" + secondDayCheck);\r\nconst dayResult = firstDayCheck || secondDayCheck;\r\nconsole.log(\"Fulfilled Sheila's day preference? \" + dayResult);\r\nconst requestBeforeTime = 10;\r\nconst requestAfterTime = 8;\r\nconsole.log(\"Request delivery after \" + requestAfterTime + \" but before \" +\r\n  requestBeforeTime);\r\nconst deliveryTime = 9;\r\nconsole.log(\"Delivery Time: \" + deliveryTime);\r\nconst afterTimeCheck = deliveryTime >= requestAfterTime;\r\nconsole.log(\"Delivery is after \" + requestAfterTime + \"? \" + afterTimeCheck);\r\nconst beforeTimeCheck = deliveryTime <= requestBeforeTime;\r\nconsole.log(\"Delivery is before \" + requestBeforeTime + \"? \" + beforeTimeCheck);\r\nconst timeResult = beforeTimeCheck && afterTimeCheck;\r\nconsole.log(\"Fulfilled Sheila's time preference? \" + timeResult);",
                  "solvedContent": "const firstDay = \"Monday\";\r\nconst secondDay = \"Friday\";\r\nconsole.log(\"Available days: \" + firstDay + \" and \" + secondDay);\r\nconst deliveryDay = \"Friday\";\r\nconsole.log(\"Delivery Day: \" + deliveryDay);\r\nconst firstDayCheck = deliveryDay === firstDay;\r\nconsole.log(\"Successful delivery on the first day? \" + firstDayCheck);\r\nconst secondDayCheck = deliveryDay === secondDay;\r\nconsole.log(\"Successful delivery on the second day? \" + secondDayCheck);\r\nconst dayResult = firstDayCheck || secondDayCheck;\r\nconsole.log(\"Fulfilled Sheila's day preference? \" + dayResult);\r\nconst requestBeforeTime = 10;\r\nconst requestAfterTime = 8;\r\nconsole.log(\"Request delivery after \" + requestAfterTime + \" but before \" +\r\n  requestBeforeTime);\r\nconst deliveryTime = 9;\r\nconsole.log(\"Delivery Time: \" + deliveryTime);\r\nconst afterTimeCheck = deliveryTime >= requestAfterTime;\r\nconsole.log(\"Delivery is after \" + requestAfterTime + \"? \" + afterTimeCheck);\r\nconst beforeTimeCheck = deliveryTime <= requestBeforeTime;\r\nconsole.log(\"Delivery is before \" + requestBeforeTime + \"? \" + beforeTimeCheck);\r\nconst timeResult = beforeTimeCheck && afterTimeCheck;\r\nconsole.log(\"Fulfilled Sheila's time preference? \" + timeResult);\r\nconst overallCheck = timeResult && dayResult;\r\nconsole.log(\"Program scheduled well? \" + (overallCheck));"
                }
              ],
              "hints": []
            }
          }
        ]
      }
    ]
  }
}