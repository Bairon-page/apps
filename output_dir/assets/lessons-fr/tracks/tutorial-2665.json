{
  "tutorial": {
    "id": 2665,
    "version": 6,
    "type": "guidedProject",
    "isNew": false,
    "codeLanguage": "python",
    "title": "Tirer une carte - Partie 1",
    "descriptionContent": "Dans le projet Draw a Card, tu créeras un jeu de cartes virtuel. Mélange-les puis affiche-les une par une en utilisant l'art ASCII.",
    "shortDescriptionContent": "",
    "showInTrack": true,
    "iconBanner": "tutorial-2665-icon-banner.svg",
    "chapters": [
      {
        "id": 14640,
        "title": "Chapitre #1",
        "type": "practiceLevel3",
        "lessons": [
          {
            "title": "Lesson #1",
            "id": 129484,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Bienvenue dans le projet **Draw a Card**, où nous travaillerons avec des cartes numériques.\n\nCommençons par la première étape, créer un jeu de cartes. Dans un jeu standard, il y a 4 couleurs et 13 rangs. Créons ces listes.\n\n1. Crée une liste `suits` et ajoute les 4 différentes couleurs sous forme de chaînes de caractères : `[\"♥\", \"♦\", \"♣\", \"♠\"]`.\n2. Crée une liste `ranks` et ajoute les 13 différents rangs sous forme de chaînes de caractères : `[\"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"J\", \"Q\", \"K\", \"A\"]`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "",
                  "solvedContent": "suits = [\"♥\", \"♦\", \"♣\", \"♠\"]\nranks = [\"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"J\", \"Q\", \"K\", \"A\"]"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Lesson #2",
            "id": 129485,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Ensuite, nous combinons les couleurs et les valeurs pour créer un jeu de 52 cartes uniques. Nous utiliserons des tuples pour représenter chaque carte.\n\n1. Crée une liste vide nommée `deck` qui contiendra toutes les cartes.\n2. Utilise une boucle `for` pour itérer sur chaque couleur et à l'intérieur, une autre boucle `for` pour itérer sur chaque valeur.\n3. Ajoute chaque combinaison de couleur et de valeur en tant que tuple à la liste `deck`.\n4. Imprime le `deck` pour afficher toutes les combinaisons de cartes.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "suits = [\"♥\", \"♦\", \"♣\", \"♠\"]\nranks = [\"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"J\", \"Q\", \"K\", \"A\"]",
                  "solvedContent": "suits = [\"♥\", \"♦\", \"♣\", \"♠\"]\nranks = [\"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"J\", \"Q\", \"K\", \"A\"]\ndeck = []\n\nfor suit in suits:\n  for rank in ranks:\n    deck.append((suit, rank))\n\nprint(deck)"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Lesson #3",
            "id": 129486,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Les cartes doivent être tirées au hasard. Pour cela, nous devons mélanger le paquet.\n\n1. Importe le module `random` en haut de ton script Python.\n2. Utilise `random.shuffle(deck)` pour mélanger le paquet.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "suits = [\"♥\", \"♦\", \"♣\", \"♠\"]\nranks = [\"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"J\", \"Q\", \"K\", \"A\"]\ndeck = []\n\nfor suit in suits:\n  for rank in ranks:\n    deck.append((suit, rank))\n\nprint(deck)",
                  "solvedContent": "import random\n\nsuits = [\"♥\", \"♦\", \"♣\", \"♠\"]\nranks = [\"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"J\", \"Q\", \"K\", \"A\"]\ndeck = []\n\nfor suit in suits:\n  for rank in ranks:\n    deck.append((suit, rank))\n\nprint(deck)\nrandom.shuffle(deck)"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Lesson #4",
            "id": 129487,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Nous avons maintenant un code qui génère un jeu de cartes et le mélange. Mettons le code de création du jeu de cartes dans une fonction pour le rendre réutilisable.\n\n1. Crée une fonction appelée `create_deck` qui ne prend aucun paramètre.\n   - Déplace tout ton code, sauf l'instruction d'importation, à l'intérieur de la nouvelle fonction créée.\n   - Fais en sorte que la fonction retourne le `deck`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "import random\n\nsuits = [\"♥\", \"♦\", \"♣\", \"♠\"]\nranks = [\"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"J\", \"Q\", \"K\", \"A\"]\ndeck = []\n\nfor suit in suits:\n  for rank in ranks:\n    deck.append((suit, rank))\n\nprint(deck)\nrandom.shuffle(deck)",
                  "solvedContent": "import random\n\ndef create_deck():\n  suits = [\"♥\", \"♦\", \"♣\", \"♠\"]\n  ranks = [\"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"J\", \"Q\", \"K\", \"A\"]\n  deck = []\n\n  for suit in suits:\n    for rank in ranks:\n      deck.append((suit, rank))\n\n  return deck"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Lesson #5",
            "id": 129488,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Créons une fonction pour tirer une carte du deck.\n\n1. Définit une nouvelle fonction nommée `draw_card` qui prend `deck` comme paramètre.\n2. À l'intérieur de `draw_card`, crée une variable `hand` et assigne-lui la valeur du dernier élément de la liste `deck`.\n3. Ensuite, supprime le dernier élément de `deck`. Puisque nous venons de le tirer, nous devrions le retirer du deck.\n4. Retourne un tuple où la première valeur doit être `hand` et la seconde le `deck` mis à jour.\n5. Les deux variables que tu retournes dans le tuple doivent être des listes. L'une doit contenir un élément, l'autre 51.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "import random\n\ndef create_deck():\n  suits = [\"♥\", \"♦\", \"♣\", \"♠\"]\n  ranks = [\"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"J\", \"Q\", \"K\", \"A\"]\n  deck = []\n\n  for suit in suits:\n    for rank in ranks:\n      deck.append((suit, rank))\n\n  return deck",
                  "solvedContent": "import random\n\ndef draw_card(deck):\n  hand = deck.pop()\n  return [hand], deck\n\ndef create_deck():\n  suits = [\"♥\", \"♦\", \"♣\", \"♠\"]\n  ranks = [\"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"J\", \"Q\", \"K\", \"A\"]\n  deck = []\n\n  for suit in suits:\n    for rank in ranks:\n      deck.append((suit, rank))\n\n  return deck"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Lesson #6",
            "id": 129489,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Il est temps de mettre ces fonctions en pratique.\n\n1. En dehors de tes définitions de fonctions, crée une variable `deck` et assigne-lui la valeur de retour de la fonction `create_deck`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "import random\n\ndef draw_card(deck):\n  hand = deck.pop()\n  return [hand], deck\n\ndef create_deck():\n  suits = [\"♥\", \"♦\", \"♣\", \"♠\"]\n  ranks = [\"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"J\", \"Q\", \"K\", \"A\"]\n  deck = []\n\n  for suit in suits:\n    for rank in ranks:\n      deck.append((suit, rank))\n\n  return deck",
                  "solvedContent": "import random\n\ndef draw_card(deck):\n  hand = deck.pop()\n  return [hand], deck\n\ndef create_deck():\n  suits = [\"♥\", \"♦\", \"♣\", \"♠\"]\n  ranks = [\"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"J\", \"Q\", \"K\", \"A\"]\n  deck = []\n\n  for suit in suits:\n    for rank in ranks:\n      deck.append((suit, rank))\n\n  return deck\n\ndeck = create_deck()"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Lesson #6 - Copy",
            "id": 129491,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Tire des cartes jusqu'à ce que le paquet soit vide.\n\n1. Crée une boucle `while` qui continue tant qu'il reste des cartes dans le paquet.\n2. À l'intérieur de la boucle, appelle `draw_card(deck)` pour tirer une carte et mettre à jour le paquet.\n3. Crée deux variables, `hand` et `deck` auxquelles tu assignes la valeur de retour de `draw_card`.\n4. À chaque itération de la boucle, affiche la carte tirée.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "import random\n\ndef draw_card(deck):\n  hand = deck.pop()\n  return [hand], deck\n\ndef create_deck():\n  suits = [\"♥\", \"♦\", \"♣\", \"♠\"]\n  ranks = [\"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"J\", \"Q\", \"K\", \"A\"]\n  deck = []\n\n  for suit in suits:\n    for rank in ranks:\n      deck.append((suit, rank))\n\n  return deck\n\ndeck = create_deck()",
                  "solvedContent": "import random\n\ndef draw_card(deck):\n  hand = deck.pop()\n  return [hand], deck\n\ndef create_deck():\n  suits = [\"♥\", \"♦\", \"♣\", \"♠\"]\n  ranks = [\"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"J\", \"Q\", \"K\", \"A\"]\n  deck = []\n\n  for suit in suits:\n    for rank in ranks:\n      deck.append((suit, rank))\n\n  return deck\n\ndeck = create_deck()\nwhile len(deck) > 0:\n  hand, deck = draw_card(deck)\n  print(hand[0])"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Lesson #6 - Copy - Copy",
            "id": 129493,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Faisons en sorte que notre script soit plus interactif et laissons l'utilisateur décider quand tirer la carte suivante.\n\n1. En haut du bloc de ta boucle `while`, ajoute une fonction `input` pour attendre que l'utilisateur appuie sur Entrée avant de tirer une carte.\n   - Ajoute quelque chose comme `\"Appuie sur Entrée pour tirer la carte suivante\"` comme invite de saisie.\n   - Tu n'as pas besoin de sauvegarder la saisie quelque part, car nous n'en avons pas besoin. La fonction `input` attendra jusqu'à ce que l'on appuie sur Entrée, puis la boucle `while` continuera à s'exécuter et à tirer la carte suivante.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "import random\n\ndef draw_card(deck):\n  hand = deck.pop()\n  return [hand], deck\n\ndef create_deck():\n  suits = [\"♥\", \"♦\", \"♣\", \"♠\"]\n  ranks = [\"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"J\", \"Q\", \"K\", \"A\"]\n  deck = []\n\n  for suit in suits:\n    for rank in ranks:\n      deck.append((suit, rank))\n\n  return deck\n\ndeck = create_deck()\nwhile len(deck) > 0:\n  hand, deck = draw_card(deck)\n  print(hand[0])",
                  "solvedContent": "import random\n\ndef draw_card(deck):\n  hand = deck.pop()\n  return [hand], deck\n\ndef create_deck():\n  suits = [\"♥\", \"♦\", \"♣\", \"♠\"]\n  ranks = [\"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"J\", \"Q\", \"K\", \"A\"]\n  deck = []\n\n  for suit in suits:\n    for rank in ranks:\n      deck.append((suit, rank))\n\n  return deck\n\ndeck = create_deck()\nwhile len(deck) > 0:\n  input(\"Press Enter to draw the next card\")\n  hand, deck = draw_card(deck)\n  print(hand[0])"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Lesson #6 - Copy - Copy",
            "id": 129492,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Après avoir épuisé les cartes, nous voulons communiquer qu'il n'y a plus de cartes.\n\n1. Affiche un message après que la boucle soit terminée en disant, 'Nous n'avons plus de cartes'.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "import random\n\ndef draw_card(deck):\n  hand = deck.pop()\n  return [hand], deck\n\ndef create_deck():\n  suits = [\"♥\", \"♦\", \"♣\", \"♠\"]\n  ranks = [\"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"J\", \"Q\", \"K\", \"A\"]\n  deck = []\n\n  for suit in suits:\n    for rank in ranks:\n      deck.append((suit, rank))\n\n  return deck\n\ndeck = create_deck()\nwhile len(deck) > 0:\n  input(\"Press Enter to draw the next card\")\n  hand, deck = draw_card(deck)\n  print(hand[0])",
                  "solvedContent": "import random\n\ndef draw_card(deck):\n  hand = deck.pop()\n  return [hand], deck\n\ndef create_deck():\n  suits = [\"♥\", \"♦\", \"♣\", \"♠\"]\n  ranks = [\"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"J\", \"Q\", \"K\", \"A\"]\n  deck = []\n\n  for suit in suits:\n    for rank in ranks:\n      deck.append((suit, rank))\n\n  return deck\n\ndeck = create_deck()\nwhile len(deck) > 0:\n  input(\"Press Enter to draw the next card\")\n  hand, deck = draw_card(deck)\n  print(hand[0])\n\nprint(\"We are out of cards\")"
                }
              ],
              "hints": []
            }
          }
        ]
      }
    ]
  }
}