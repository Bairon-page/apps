{
  "tutorial": {
    "id": 2639,
    "version": 4,
    "type": "challenges",
    "isNew": false,
    "codeLanguage": "node",
    "title": "Notions de base d'Express",
    "descriptionContent": "Les défis sont des exercices plus difficiles qui mettront tes compétences à l'épreuve.",
    "shortDescriptionContent": "",
    "showInTrack": true,
    "iconBanner": null,
    "chapters": [
      {
        "id": 14586,
        "title": "Application Express - 1",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "Express App 1",
            "id": 129246,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Crée une application en utilisant Express. Ensuite, fais en sorte que l'application écoute sur le port `3000`.\n\n1. Appelle la fonction `listen()` en utilisant la variable `app`.\n2. Défini `PORT` comme le premier paramètre de la fonction `listen()` et une fonction fléchée de rappel comme le deuxième paramètre.\n3. Dans la fonction de rappel, utilise `console.log` pour afficher le message suivant.\n```\n`The server is listening on port ${PORT}`\n```",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "app.js",
                  "codeLanguage": "javascript",
                  "content": "const express = require(\"express\");\r\nconst app = express();\r\nconst PORT = 3000;\r\n",
                  "solvedContent": "const express = require(\"express\");\r\nconst app = express();\r\nconst PORT = 3000;\r\n\r\napp.listen(PORT, () => {\r\n  console.log(`The server is listening on port ${PORT}`);\r\n});\r\n"
                }
              ],
              "hints": [],
              "httpOptions": {
                "method": "GET",
                "path": "/",
                "body": null
              }
            }
          }
        ]
      },
      {
        "id": 14587,
        "title": "Application Express 2",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "Express App 2",
            "id": 129247,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Améliore le code de l'application pour gérer les requêtes GET afin d'envoyer un message dans la réponse.\n\n1. Appelle la fonction `get()` en utilisant la variable `app`.\n2. Définit `/` comme premier paramètre et une fonction de rappel avec `req` et `res` comme ses paramètres en tant que second paramètre de la fonction `get()`.\n3. Dans la fonction de rappel, appelle `res.send()` pour envoyer `\"Success!\"`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "app.js",
                  "codeLanguage": "javascript",
                  "content": "const express = require(\"express\");\r\nconst app = express();\r\nconst PORT = 3000;\r\n\r\napp.listen(PORT, () => {\r\n  console.log(`The server is listening on port ${PORT}`);\r\n});\r\n",
                  "solvedContent": "const express = require(\"express\");\r\nconst app = express();\r\nconst PORT = 3000;\r\n\r\napp.get(\"/\", (req, res) => {\r\n  res.send(\"Success!\");\r\n});\r\n\r\napp.listen(PORT, () => {\r\n  console.log(`The server is listening on port ${PORT}`);\r\n});\r\n"
                }
              ],
              "hints": [],
              "httpOptions": {
                "method": "GET",
                "path": "/",
                "body": null
              }
            }
          }
        ]
      },
      {
        "id": 14588,
        "title": "Application Express 3",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "Express App 3",
            "id": 129248,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Utilise l'application pour envoyer un code de statut avec un message dans la réponse lors de la réception de requêtes GET.\n\n1. Dans la fonction de rappel de la fonction `get()`, appelle la fonction `status()` en utilisant `res`.\n2. Défini `200` comme le statut de la réponse.\n3. Après la fonction `status()`, appelle la fonction `send()` pour envoyer ce qui suit :\n```\n\"<h1>Welcome</h1>\"\n```",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "app.js",
                  "codeLanguage": "javascript",
                  "content": "const express = require(\"express\");\r\nconst app = express();\r\nconst port = 3000;\r\napp.get(\"/\", (req, res) => {\r\n\r\n});\r\napp.listen(port, () => {\r\n  console.log(`The server is listening on port ${port}`);\r\n});\r\n",
                  "solvedContent": "const express = require(\"express\");\r\nconst app = express();\r\nconst port = 3000;\r\napp.get(\"/\", (req, res) => {\r\n  res.status(200).send(\"<h1>Welcome</h1>\");\r\n});\r\napp.listen(port, () => {\r\n  console.log(`The server is listening on port ${port}`);\r\n});\r\n"
                }
              ],
              "hints": [],
              "httpOptions": {
                "method": "GET",
                "path": "/",
                "body": null
              }
            }
          }
        ]
      },
      {
        "id": 14589,
        "title": "Application de fitness",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "Fitness App",
            "id": 129249,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "L'application \"FittnessFriend\" a besoin d'une route pour sa page d'accueil !\n\n1. Donne à la route `GET` un chemin de `/home`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "app.js",
                  "codeLanguage": "javascript",
                  "content": "const express = require(\"express\");\nconst app = express();\napp.get(\"\", (request, response) => {\n  response.status(200).send({\n    message: \"Welcome To FittnessFriend!\",\n  });\n});\napp.listen(3000, () => {\n  console.log(\"listening on port 3000\");\n});\n",
                  "solvedContent": "const express = require(\"express\");\nconst app = express();\napp.get(\"/home\", (request, response) => {\n  response.status(200).send({\n    message: \"Welcome To FittnessFriend!\",\n  });\n});\napp.listen(3000, () => {\n  console.log(\"listening on port 3000\");\n});\n"
                }
              ],
              "hints": [],
              "httpOptions": {
                "method": "GET",
                "path": "/",
                "body": null
              }
            }
          }
        ]
      },
      {
        "id": 14590,
        "title": "Suivi détaillé des calories",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "Detailed Calorie Tracker",
            "id": 129250,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Pour cette route `GET`, nous renverrons toutes les données alimentaires à un utilisateur.\n\n1. Donne à la route `GET` un chemin de `/foods/today`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "app.js",
                  "codeLanguage": "javascript",
                  "content": "const express = require(\"express\");\nconst app = express();\nconst allFoods = [\n  {\n    category: \"Breakfast\",\n    name: \"Banana\",\n    calories: 110,\n  },\n  {\n    category: \"Lunch\",\n    name: \"Spinach Bruschetta\",\n    calories: 110,\n  },\n  {\n    category: \"Dinner\",\n    name: \"Smoked Salmon\",\n    calories: 110,\n  },\n];\napp.get(\"\", (request, response) => {\n  response.status(200).send(allFoods);\n});\napp.listen(3000, () => {\n  console.log(\"listening on port 3000\");\n});\n",
                  "solvedContent": "const express = require(\"express\");\nconst app = express();\nconst allFoods = [\n  {\n    category: \"Breakfast\",\n    name: \"Banana\",\n    calories: 110,\n  },\n  {\n    category: \"Lunch\",\n    name: \"Spinach Bruschetta\",\n    calories: 110,\n  },\n  {\n    category: \"Dinner\",\n    name: \"Smoked Salmon\",\n    calories: 110,\n  },\n];\napp.get(\"/foods/today\", (request, response) => {\n  response.status(200).send(allFoods);\n});\napp.listen(3000, () => {\n  console.log(\"listening on port 3000\");\n});\n"
                }
              ],
              "hints": [],
              "httpOptions": {
                "method": "GET",
                "path": "/",
                "body": null
              }
            }
          }
        ]
      },
      {
        "id": 14591,
        "title": "Menu en ligne",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "Online Menu",
            "id": 129251,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Un restaurant local est en train de mettre en place son menu en ligne ! Aidons-les en complétant cette route `GET` qui utilise un seul paramètre.\n\n1. Donne à la route `GET` un chemin de `/foods/today/:searchedFood`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "app.js",
                  "codeLanguage": "javascript",
                  "content": "const express = require(\"express\");\nconst app = express();\nconst allFoods = [\n  {\n    category: \"Breakfast\",\n    name: \"Banana\",\n    calories: 110,\n  },\n  {\n    category: \"Lunch\",\n    name: \"Spinach Bruschetta\",\n    calories: 110,\n  },\n  {\n    category: \"Dinner\",\n    name: \"Smoked Salmon\",\n    calories: 110,\n  },\n];\napp.get(\"\", (request, response) => {\n  const foundFood = allFoods.find(\n    (eachFood) => eachFood.name === request.params.searchedFood,\n  );\n  response.status(200).send(foundFood);\n});\napp.listen(3000, () => {\n  console.log(\"listening on port 3000\");\n});\n",
                  "solvedContent": "const express = require(\"express\");\nconst app = express();\nconst allFoods = [\n  {\n    category: \"Breakfast\",\n    name: \"Banana\",\n    calories: 110,\n  },\n  {\n    category: \"Lunch\",\n    name: \"Spinach Bruschetta\",\n    calories: 110,\n  },\n  {\n    category: \"Dinner\",\n    name: \"Smoked Salmon\",\n    calories: 110,\n  },\n];\napp.get(\"/foods/today/:searchedFood\", (request, response) => {\n  const foundFood = allFoods.find(\n    (eachFood) => eachFood.name === request.params.searchedFood,\n  );\n  response.status(200).send(foundFood);\n});\napp.listen(3000, () => {\n  console.log(\"listening on port 3000\");\n});\n"
                }
              ],
              "hints": [],
              "httpOptions": {
                "method": "GET",
                "path": "/",
                "body": null
              }
            }
          }
        ]
      }
    ]
  }
}