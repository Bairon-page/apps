{
  "tutorial": {
    "id": 1807,
    "version": 7,
    "type": "guidedProjectOptional",
    "isNew": false,
    "codeLanguage": "javascript",
    "title": "Calculateur d'investissement",
    "descriptionContent": "Utiliser des fonctions fléchées pour créer un calculateur d'investissement",
    "shortDescriptionContent": "",
    "showInTrack": true,
    "iconBanner": "tutorial-1807-icon-banner.svg",
    "chapters": [
      {
        "id": 12025,
        "title": "Calculateur d'investissement",
        "type": "practiceLevel3",
        "lessons": [
          {
            "title": "Initial variable",
            "id": 109613,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Utilisons une fonction fléchée pour créer un calculateur d'investissement, entièrement en JavaScript.\n\nNous allons commencer par créer une variable.\n\n1. Commence par initialiser une variable `initial` pour stocker une valeur d'investissement de départ de `2000`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "",
                  "solvedContent": "const initial = 2000;"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Interest rate variable",
            "id": 109614,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Ensuite, nous allons créer une variable pour stocker le taux d'intérêt.\n\n1. Initialise une variable `rate` et assigne-lui la valeur `10`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "",
                  "solvedContent": "const rate = 10;"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Years variable",
            "id": 109616,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Ensuite, stocke le nombre d'années d'investissement dans une variable.\n\n1. Initialise une autre variable `years` et attribue-lui la valeur `3`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "",
                  "solvedContent": "const years = 3;"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Parameters",
            "id": 109619,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Ensuite, crée une fonction fléchée. La fonction fléchée prendra trois paramètres `init`, `rate` et `time`, représentant l'entrée pour `initial`, `rate`, et `years`.\n\n1. Initialise une variable `getValue`.\n2. Assigne une fonction fléchée à `getValue`.\n3. La syntaxe de la fonction fléchée doit avoir `init`, `rate`, et `time` comme paramètres.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const initial = 2000;\nconst rate = 10;\nconst years = 3;",
                  "solvedContent": "const initial = 2000;\nconst rate = 10;\nconst years = 3;\nconst getValue = (init, rate, time) => {};"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Parameter default values",
            "id": 109620,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Les paramètres de la fonction fléchée `init`, `rate`, et `time` peuvent se voir attribuer des valeurs initiales à l'intérieur des parenthèses de la fonction fléchée.\n\n1. Attribue aux paramètres `init`, `rate`, et `time` les valeurs de `0`, `5`, et `0` à l'intérieur des parenthèses.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const initial = 2000;\nconst rate = 10;\nconst years = 3;\nconst getValue = (init, rate, time) => {};",
                  "solvedContent": "const initial = 2000;\nconst rate = 10;\nconst years = 3;\nconst getValue = (init = 0, rate = 5, time = 0) => {};"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Arrow function variable and expression",
            "id": 109621,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Ensuite, nous aurons besoin d'une variable pour stocker le résultat du calcul de l'investissement.\n\n1. À l'intérieur de la fonction fléchée, déclare une variable à portée de bloc `value`.\n2. Assigne l'expression `init + (init * (rate / 100) * time)` à `value`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const initial = 2000;\nconst rate = 10;\nconst years = 3;\nconst getValue = (init = 0, rate = 5, time = 0) => {};",
                  "solvedContent": "const initial = 2000;\nconst rate = 10;\nconst years = 3;\nconst getValue = (init = 0, rate = 5, time = 0) => {\n  const value = init + (init * (rate / 100) * time);\n};"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Return",
            "id": 109622,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Fais en sorte que `getValue` renvoie le résultat de l'expression.\n\n1. À l'intérieur de la fonction fléchée, renvoie `value`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const initial = 2000;\nconst rate = 10;\nconst years = 3;\nconst getValue = (init = 0, rate = 5, time = 0) => {\n  const value = init + (init * (rate / 100) * time);\n};",
                  "solvedContent": "const initial = 2000;\nconst rate = 10;\nconst years = 3;\nconst getValue = (init = 0, rate = 5, time = 0) => {\n  const value = init + (init * (rate / 100) * time);\n  return value;\n};"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Calling the function",
            "id": 109624,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Ensuite, utilise la fonction en l'appelant.\n\n1. Appelle `getValue()`.\n2. Assure-toi de passer les variables `initial`, `rate`, et `years` comme arguments à `getValue()`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const initial = 2000;\nconst rate = 10;\nconst years = 3;\nconst getValue = (init = 0, rate = 5, time = 0) => {\n  const value = init + (init * (rate / 100) * time);\n  return value;\n};",
                  "solvedContent": "const initial = 2000;\nconst rate = 10;\nconst years = 3;\nconst getValue = (init = 0, rate = 5, time = 0) => {\n  const value = init + (init * (rate / 100) * time);\n  return value;\n};\ngetValue(initial, rate, years);"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Console",
            "id": 109625,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Pour imprimer la valeur de l'investissement retournée, affiche-la dans la console.\n\n1. Enveloppe `getValue(initial, rate, years)` avec un `console.log()` pour afficher la valeur en livres.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const initial = 2000;\nconst rate = 10;\nconst years = 3;\nconst getValue = (init = 0, rate = 5, time = 0) => {\n  const value = init + (init * (rate / 100) * time);\n  return value;\n};\ngetValue(initial, rate, years);",
                  "solvedContent": "const initial = 2000;\nconst rate = 10;\nconst years = 3;\nconst getValue = (init = 0, rate = 5, time = 0) => {\n  const value = init + (init * (rate / 100) * time);\n  return value;\n};\nconsole.log(getValue(initial, rate, years));"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Shortening the code",
            "id": 109623,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Ensuite, raccourcissons le code en refactorisant `getvalue`. Avoir la fonction fléchée et l'expression sur la même ligne nous permet d'omettre les accolades, la variable `value` et le mot-clé `return`.\n\n1. Supprime les accolades.\n2. Supprime la variable `value`.\n3. Supprime le mot-clé `return` car il est implicite dans les expressions sur une seule ligne.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const initial = 2000;\nconst rate = 10;\nconst years = 3;\nconst getValue = (init = 0, rate = 5, time = 0) => ;\nconsole.log(getValue(initial, rate, years));",
                  "solvedContent": "const initial = 2000;\nconst rate = 10;\nconst years = 3;\nconst getValue = (init = 0, rate = 5, time = 0) => init + (init * (rate / 100) *\n  time);\nconsole.log(getValue(initial, rate, years));"
                }
              ],
              "hints": [
                {
                  "title": "Hint",
                  "content": "After refactoring, `getValue` should only contain the expression `init + (init * (rate / 100) * time)` on the same line."
                }
              ]
            }
          }
        ]
      }
    ]
  }
}