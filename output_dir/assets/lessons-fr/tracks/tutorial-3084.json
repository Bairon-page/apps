{
  "tutorial": {
    "id": 3084,
    "version": 3,
    "type": "guidedProject",
    "isNew": false,
    "codeLanguage": "jsx",
    "title": "Clone de Wordle",
    "descriptionContent": "Recrée le jeu de mots mondialement connu en construisant sa logique et ses mécaniques de base, étape par étape",
    "shortDescriptionContent": "",
    "showInTrack": true,
    "iconBanner": "tutorial-3084-icon-banner.svg",
    "chapters": [
      {
        "id": 15372,
        "title": "Chapitre #1",
        "type": "practiceLevel3",
        "lessons": [
          {
            "title": "Lesson #1 - Copy",
            "id": 135288,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Bienvenue dans le projet **Wordle Clone**. Nous allons utiliser React pour créer un clone du célèbre jeu Wordle. Le jeu consiste à deviner un mot de 5 lettres.\n\nCommençons par ajouter du style via le fichier `App.css`.\n\n1. Dans le composant `App`, importe le fichier `App.css`.\n2. Passe au fichier `App.css` pour styliser l'élément `body` :\n   - Définit `margin` à `0`.\n   - Définit `font-family` à `Arial, sans-serif`.\n   - Définit `height` à `100vh`.\n   - Définit `background` à `linear-gradient(135deg, #f3e7e9, #e3eeff)`.",
              "preselectedFileIndex": 2,
              "hasVisualOutput": true,
              "files": [
                {
                  "name": "index.html",
                  "codeLanguage": "html",
                  "content": "<!doctype html>\n<html>\n  <head>\n    <script type=\"module\" src=\"./index.js\"></script>\n    <link rel=\"stylesheet\" href=\"./index.css\" />\n    <title>Wordle</title>\n  </head>\n  <body>\n    <div id=\"root\">loading</div>\n  </body>\n</html>",
                  "solvedContent": null
                },
                {
                  "name": "index.jsx",
                  "codeLanguage": "jsx",
                  "content": "import React from \"react\";\nimport { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\n\nconst container = document.getElementById(\"root\");\nconst root = createRoot(container);\nroot.render(<App />);\n",
                  "solvedContent": null
                },
                {
                  "name": "App.jsx",
                  "codeLanguage": "jsx",
                  "content": "import React from \"react\";\n\nconst App = () => {\n\n  return (\n    <div>\n      <h1>Wordle</h1>\n    </div>\n  );\n};\n\nexport default App;\n",
                  "solvedContent": "import React from \"react\";\nimport \"./App.css\";\n\nconst App = () => {\n\n  return (\n    <div>\n      <h1>Wordle</h1>\n    </div>\n  );\n};\n\nexport default App;\n"
                },
                {
                  "name": "App.css",
                  "codeLanguage": "css",
                  "content": "",
                  "solvedContent": "body {\n  margin: 0;\n  font-family: Arial, sans-serif;\n  height: 100vh;\n  background: linear-gradient(135deg, #f3e7e9, #e3eeff);\n}"
                },
                {
                  "name": "Row.jsx",
                  "codeLanguage": "jsx",
                  "content": "",
                  "solvedContent": null
                },
                {
                  "name": "Row.css",
                  "codeLanguage": "css",
                  "content": "",
                  "solvedContent": null
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Lesson #11",
            "id": 135282,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Comme deuxième étape, nous voulons créer une classe pour le conteneur principal à l'intérieur du composant `App` que nous pouvons cibler pour un style supplémentaire.\n\n1. Dans le composant `App`, définis `\"main-container\"` comme valeur pour le `className` de l'élément `div`.\n2. Passe au fichier `App.css` pour ajouter du style à la classe `.main-container` :\n   - Défini `display` à `flex`.\n   - Défini `flex-direction` à `column`.\n   - Défini `align-items` à `center`.\n   - Défini `justify-content` à `center`.",
              "preselectedFileIndex": 2,
              "hasVisualOutput": true,
              "files": [
                {
                  "name": "index.html",
                  "codeLanguage": "html",
                  "content": "<!doctype html>\n<html>\n  <head>\n    <script type=\"module\" src=\"./index.js\"></script>\n    <link rel=\"stylesheet\" href=\"./index.css\" />\n    <title>Wordle</title>\n  </head>\n  <body>\n    <div id=\"root\">loading</div>\n  </body>\n</html>",
                  "solvedContent": null
                },
                {
                  "name": "index.jsx",
                  "codeLanguage": "jsx",
                  "content": "import React from \"react\";\nimport { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\n\nconst container = document.getElementById(\"root\");\nconst root = createRoot(container);\nroot.render(<App />);\n",
                  "solvedContent": null
                },
                {
                  "name": "App.jsx",
                  "codeLanguage": "jsx",
                  "content": "import React from \"react\";\nimport \"./App.css\";\n\nconst App = () => {\n\n  return (\n    <div>\n      <h1>Wordle</h1>\n    </div>\n  );\n};\n\nexport default App;\n",
                  "solvedContent": "import React from \"react\";\nimport \"./App.css\";\n\nconst App = () => {\n\n  return (\n    <div className=\"main-container\">\n      <h1>Wordle</h1>\n    </div>\n  );\n};\n\nexport default App;\n"
                },
                {
                  "name": "App.css",
                  "codeLanguage": "css",
                  "content": "body {\n  margin: 0;\n  font-family: Arial, sans-serif;\n  height: 100vh;\n  background: linear-gradient(135deg, #f3e7e9, #e3eeff);\n}",
                  "solvedContent": "body {\n  margin: 0;\n  font-family: Arial, sans-serif;\n  height: 100vh;\n  background: linear-gradient(135deg, #f3e7e9, #e3eeff);\n}\n\n.main-container {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n}"
                },
                {
                  "name": "Row.jsx",
                  "codeLanguage": "jsx",
                  "content": "",
                  "solvedContent": null
                },
                {
                  "name": "Row.css",
                  "codeLanguage": "css",
                  "content": "",
                  "solvedContent": null
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Lesson #4",
            "id": 135275,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Nous allons maintenant commencer avec la logique. Pour nous aider à travailler sur l'application, nous allons immédiatement ajouter quelques données de démonstration à afficher.\n\n1. Mets à jour l'instruction d'importation pour inclure `useState` de React.\n2. Défini une nouvelle constante `targetWord` et assigne la valeur `\"REACT\"`. Ce sera le mot que le joueur doit deviner.\n3. Crée une nouvelle variable d'état `guesses` initialisée avec un tableau de mots devinés. Pour l'instant, nous allons simuler trois devinettes. Utilise `[\"PARTY\", \"DRAFT\", \"REACT\"]` pour la valeur initiale du tableau `guesses`.\n4. Itère sur le tableau `guesses` et rends chaque valeur dans la variable d'état `guesses`.",
              "preselectedFileIndex": 2,
              "hasVisualOutput": true,
              "files": [
                {
                  "name": "index.html",
                  "codeLanguage": "html",
                  "content": "<!doctype html>\n<html>\n  <head>\n    <script type=\"module\" src=\"./index.js\"></script>\n    <link rel=\"stylesheet\" href=\"./index.css\" />\n    <title>Wordle</title>\n  </head>\n  <body>\n    <div id=\"root\">loading</div>\n  </body>\n</html>",
                  "solvedContent": null
                },
                {
                  "name": "index.jsx",
                  "codeLanguage": "jsx",
                  "content": "import React from \"react\";\nimport { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\n\nconst container = document.getElementById(\"root\");\nconst root = createRoot(container);\nroot.render(<App />);",
                  "solvedContent": null
                },
                {
                  "name": "App.jsx",
                  "codeLanguage": "jsx",
                  "content": "import React from \"react\";\nimport \"./App.css\";\n\nconst App = () => {\n  return (\n    <div className=\"main-container\">\n      <h1>Wordle</h1>\n    </div>\n  );\n};\n\nexport default App;\n",
                  "solvedContent": "import React, { useState } from \"react\";\nimport \"./App.css\";\n\nconst App = () => {\n  const targetWord = \"REACT\";\n\n  const [guesses, setGuesses] = useState([\"PARTY\", \"DRAFT\", \"REACT\"]);\n\n  return (\n    <div className=\"main-container\">\n      <h1>Wordle</h1>\n      {guesses.map((guess, index) => (\n        guess\n      ))}\n    </div>\n  );\n};\n\nexport default App;\n"
                },
                {
                  "name": "App.css",
                  "codeLanguage": "css",
                  "content": "body {\n  margin: 0;\n  font-family: Arial, sans-serif;\n  height: 100vh;\n  background: linear-gradient(135deg, #f3e7e9, #e3eeff);\n}\n\n.main-container {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n}",
                  "solvedContent": null
                },
                {
                  "name": "Row.jsx",
                  "codeLanguage": "jsx",
                  "content": "",
                  "solvedContent": "import React from \"react\";\n\nconst Row = ({ guess, targetWord }) => {\n  return <div className=\"word-row\">{guess}</div>;\n};\n\nexport default Row;\n"
                },
                {
                  "name": "Row.css",
                  "codeLanguage": "css",
                  "content": "",
                  "solvedContent": null
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Lesson #4 - Copy",
            "id": 135291,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Ensuite, intégrons le composant `Row` pour afficher chaque mot deviné.\n\n1. Dans le fichier `Row.jsx`, crée un nouveau composant React appelé `Row`. Assure-toi d'importer `React` et d'exporter également le composant.\n2. Assure-toi que le composant prend `guess` et `targetWord` comme props.\n3. Retourne un élément `div` avec le `className` défini sur `\"word-row\"` et affiche le `guess` passé à l'intérieur.\n4. Importe le composant `Row` en haut du fichier `App.jsx`.\n5. Dans la fonction `map`, où tu itères sur le tableau `guesses`, rends un composant `Row` pour chaque devinette.\n6. Défini `index` comme `key` et passe `guess` et `targetWord` comme props à chaque `Row`.",
              "preselectedFileIndex": 2,
              "hasVisualOutput": true,
              "files": [
                {
                  "name": "index.html",
                  "codeLanguage": "html",
                  "content": "<!doctype html>\n<html>\n  <head>\n    <script type=\"module\" src=\"./index.js\"></script>\n    <link rel=\"stylesheet\" href=\"./index.css\" />\n    <title>Wordle</title>\n  </head>\n  <body>\n    <div id=\"root\">loading</div>\n  </body>\n</html>",
                  "solvedContent": null
                },
                {
                  "name": "index.jsx",
                  "codeLanguage": "jsx",
                  "content": "import React from \"react\";\nimport { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\n\nconst container = document.getElementById(\"root\");\nconst root = createRoot(container);\nroot.render(<App />);",
                  "solvedContent": null
                },
                {
                  "name": "App.jsx",
                  "codeLanguage": "jsx",
                  "content": "import React, { useState } from \"react\";\nimport \"./App.css\";\n\nconst App = () => {\n  const targetWord = \"REACT\";\n\n  const [guesses, setGuesses] = useState([\"PARTY\", \"DRAFT\", \"REACT\"]);\n\n  return (\n    <div className=\"main-container\">\n      <h1>Wordle</h1>\n      {guesses.map((guess, index) => (\n        guess\n      ))}\n    </div>\n  );\n};\n\nexport default App;\n",
                  "solvedContent": "import React, { useState } from \"react\";\nimport \"./App.css\";\nimport Row from \"./Row\";\n\nconst App = () => {\n  const targetWord = \"REACT\";\n\n  const [guesses, setGuesses] = useState([\"PARTY\", \"DRAFT\", \"REACT\"]);\n\n  return (\n    <div className=\"main-container\">\n      <h1>Wordle</h1>\n      {guesses.map((guess, index) => (\n        <Row key={index} guess={guess} targetWord={targetWord} />\n      ))}\n    </div>\n  );\n};\n\nexport default App;\n"
                },
                {
                  "name": "App.css",
                  "codeLanguage": "css",
                  "content": "body {\n  margin: 0;\n  font-family: Arial, sans-serif;\n  height: 100vh;\n  background: linear-gradient(135deg, #f3e7e9, #e3eeff);\n}\n\n.main-container {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n}",
                  "solvedContent": null
                },
                {
                  "name": "Row.jsx",
                  "codeLanguage": "jsx",
                  "content": "",
                  "solvedContent": "import React from \"react\";\n\nconst Row = ({ guess, targetWord }) => {\n  return <div className=\"word-row\">{guess}</div>;\n};\n\nexport default Row;\n"
                },
                {
                  "name": "Row.css",
                  "codeLanguage": "css",
                  "content": "",
                  "solvedContent": null
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Lesson #6",
            "id": 135277,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Nous voulons donner des indices au joueur en indiquant si une lettre donnée est correctement devinée ou non. Nous voulons également montrer si une lettre est présente dans le mot mais pas à la bonne position.\n\n1. Dans le composant `Row`, définis une fonction d'assistance `getLetterStatus` à l'intérieur du composant pour déterminer si chaque lettre dans la supposition est `correct`, `present`, ou `absent` par rapport au mot cible.\n   - La fonction doit accepter deux paramètres, `letter` et `index`.\n   - D'abord, vérifie si la lettre est égale à la lettre à l'index fourni dans le mot cible : `letter === targetWord[index]`\n   - Si c'est le cas, retourne `\"correct\"`.\n   - Si ce n'est pas le cas, vérifie si le mot cible inclut la lettre : `targetWord.includes(letter)`.\n   - Si c'est le cas, retourne `\"present\"`.\n   - Si aucune des conditions ci-dessus n'est vraie, retourne `\"absent\"`.\n2. À l'intérieur de l'instruction `return`, divise la supposition en lettres individuelles pour obtenir un tableau de lettres au lieu d'un mot : `guess.split(\"\")`.\n3. Utilise `map` pour itérer sur le tableau nouvellement créé. Pour chaque lettre, retourne un élément `span`.\n   - Défini la `key` à `index`.\n   - Défini le `className` à `\"letter\"` et soit `\"correct\"`, `\"present\"`, ou `\"absent\"` en codant ce qui suit : ``className={`letter ${getLetterStatus(letter, index)}`}``.\n   - Affiche la lettre comme contenu de l'élément `span`.",
              "preselectedFileIndex": 4,
              "hasVisualOutput": true,
              "files": [
                {
                  "name": "index.html",
                  "codeLanguage": "html",
                  "content": "<!doctype html>\n<html>\n  <head>\n    <script type=\"module\" src=\"./index.js\"></script>\n    <link rel=\"stylesheet\" href=\"./index.css\" />\n    <title>Wordle</title>\n  </head>\n  <body>\n    <div id=\"root\">loading</div>\n  </body>\n</html>",
                  "solvedContent": null
                },
                {
                  "name": "index.jsx",
                  "codeLanguage": "jsx",
                  "content": "import React from \"react\";\nimport { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\n\nconst container = document.getElementById(\"root\");\nconst root = createRoot(container);\nroot.render(<App />);",
                  "solvedContent": null
                },
                {
                  "name": "App.jsx",
                  "codeLanguage": "jsx",
                  "content": "import React, { useState } from \"react\";\nimport \"./App.css\";\nimport Row from \"./Row\";\n\nconst App = () => {\n  const targetWord = \"REACT\";\n\n  const [guesses, setGuesses] = useState([\"PARTY\", \"DRAFT\", \"REACT\"]);\n\n  return (\n    <div className=\"main-container\">\n      <h1>Wordle</h1>\n      {guesses.map((guess, index) => (\n        <Row key={index} guess={guess} targetWord={targetWord} />\n      ))}\n    </div>\n  );\n};\n\nexport default App;\n",
                  "solvedContent": null
                },
                {
                  "name": "App.css",
                  "codeLanguage": "css",
                  "content": "body {\n  margin: 0;\n  font-family: Arial, sans-serif;\n  height: 100vh;\n  background: linear-gradient(135deg, #f3e7e9, #e3eeff);\n}\n\n.main-container {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n}",
                  "solvedContent": null
                },
                {
                  "name": "Row.jsx",
                  "codeLanguage": "jsx",
                  "content": "import React from \"react\";\n\nconst Row = ({ guess, targetWord }) => {\n  return <div className=\"word-row\">{guess}</div>;\n};\n\nexport default Row;\n",
                  "solvedContent": "import React from \"react\";\n\nconst Row = ({ guess, targetWord }) => {\n  const getLetterStatus = (letter, index) => {\n    if (letter === targetWord[index]) {\n      return \"correct\";\n    } else if (targetWord.includes(letter)) {\n      return \"present\";\n    } else {\n      return \"absent\";\n    }\n  };\n\n  return (\n    <div className=\"word-row\">\n      {guess.split(\"\").map((letter, index) => (\n        <span\n          key={index}\n          className={`letter ${getLetterStatus(letter, index)}`}\n        >\n          {letter}\n        </span>\n      ))}\n    </div>\n  );\n};\n\nexport default Row;\n"
                },
                {
                  "name": "Row.css",
                  "codeLanguage": "css",
                  "content": "",
                  "solvedContent": null
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Lesson #8",
            "id": 135279,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Ensuite : styliser le composant `Row` en utilisant CSS.\n\n1. Toujours dans le composant `Row`, importe le fichier `Row.css`.\n1. Dans le fichier `Row.css`, crée des règles pour `.word-row` afin de définir la mise en page de la ligne :\n   - Définit `display` à `flex`.\n   - Définit `justify-content` à `center`.\n   - Définit `margin` à `5px`.\n2. Crée également une règle `.letter` pour styliser les lettres individuelles :\n   - Définit `width` à `40px`.\n   - Définit `height` à `40px`.\n   - Définit `display` à `inline-flex`.\n   - Définit `justify-content` à `center`.\n   - Définit `align-items` à `center`.\n   - Définit `margin` à `2px`.\n   - Définit `color` à `white`.\n   - Définit `font-weight` à `bold`.\n   - Définit `font-size` à `1.2em`.",
              "preselectedFileIndex": 4,
              "hasVisualOutput": true,
              "files": [
                {
                  "name": "index.html",
                  "codeLanguage": "html",
                  "content": "<!doctype html>\n<html>\n  <head>\n    <script type=\"module\" src=\"./index.js\"></script>\n    <link rel=\"stylesheet\" href=\"./index.css\" />\n    <title>Wordle</title>\n  </head>\n  <body>\n    <div id=\"root\">loading</div>\n  </body>\n</html>",
                  "solvedContent": null
                },
                {
                  "name": "index.jsx",
                  "codeLanguage": "jsx",
                  "content": "import React from \"react\";\nimport { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\n\nconst container = document.getElementById(\"root\");\nconst root = createRoot(container);\nroot.render(<App />);",
                  "solvedContent": null
                },
                {
                  "name": "App.jsx",
                  "codeLanguage": "jsx",
                  "content": "import React, { useState } from \"react\";\nimport \"./App.css\";\nimport Row from \"./Row\";\n\nconst App = () => {\n  const targetWord = \"REACT\";\n\n  const [guesses, setGuesses] = useState([\"PARTY\", \"DRAFT\", \"REACT\"]);\n\n  return (\n    <div className=\"main-container\">\n      <h1>Wordle</h1>\n      {guesses.map((guess, index) => (\n        <Row key={index} guess={guess} targetWord={targetWord} />\n      ))}\n    </div>\n  );\n};\n\nexport default App;\n",
                  "solvedContent": null
                },
                {
                  "name": "App.css",
                  "codeLanguage": "css",
                  "content": "body {\n  margin: 0;\n  font-family: Arial, sans-serif;\n  height: 100vh;\n  background: linear-gradient(135deg, #f3e7e9, #e3eeff);\n}\n\n.main-container {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n}",
                  "solvedContent": null
                },
                {
                  "name": "Row.jsx",
                  "codeLanguage": "jsx",
                  "content": "import React from \"react\";\n\nconst Row = ({ guess, targetWord }) => {\n  const getLetterStatus = (letter, index) => {\n    if (letter === targetWord[index]) {\n      return \"correct\";\n    } else if (targetWord.includes(letter)) {\n      return \"present\";\n    } else {\n      return \"absent\";\n    }\n  };\n\n  return (\n    <div className=\"word-row\">\n      {guess.split(\"\").map((letter, index) => (\n        <span\n          key={index}\n          className={`letter ${getLetterStatus(letter, index)}`}\n        >\n          {letter}\n        </span>\n      ))}\n    </div>\n  );\n};\n\nexport default Row;",
                  "solvedContent": "import React from \"react\";\nimport \"./Row.css\";\n\nconst Row = ({ guess, targetWord }) => {\n  const getLetterStatus = (letter, index) => {\n    if (letter === targetWord[index]) {\n      return \"correct\";\n    } else if (targetWord.includes(letter)) {\n      return \"present\";\n    } else {\n      return \"absent\";\n    }\n  };\n\n  return (\n    <div className=\"word-row\">\n      {guess.split(\"\").map((letter, index) => (\n        <span\n          key={index}\n          className={`letter ${getLetterStatus(letter, index)}`}\n        >\n          {letter}\n        </span>\n      ))}\n    </div>\n  );\n};\n\nexport default Row;"
                },
                {
                  "name": "Row.css",
                  "codeLanguage": "css",
                  "content": "",
                  "solvedContent": ".word-row {\n  display: flex;\n  justify-content: center;\n  margin: 5px;\n}\n\n.letter {\n  width: 40px;\n  height: 40px;\n  display: inline-flex;\n  justify-content: center;\n  align-items: center;\n  margin: 2px;\n  color: white;\n  font-weight: bold;\n  font-size: 1.2em;\n}"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Lesson #9",
            "id": 135280,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Nous voulons utiliser des styles spécifiques aux lettres pour les lettres correctes, présentes et absentes.\n\n1. Dans le fichier `Row.css`, ajoute des styles spécifiques pour `.letter.correct`, `.letter.present`, et `.letter.absent`. Définit la couleur de fond sur `\"green\"`, `\"gold\"`, et `\"lightgray\"`, respectivement.",
              "preselectedFileIndex": 5,
              "hasVisualOutput": true,
              "files": [
                {
                  "name": "index.html",
                  "codeLanguage": "html",
                  "content": "<!doctype html>\n<html>\n  <head>\n    <script type=\"module\" src=\"./index.js\"></script>\n    <link rel=\"stylesheet\" href=\"./index.css\" />\n    <title>Wordle</title>\n  </head>\n  <body>\n    <div id=\"root\">loading</div>\n  </body>\n</html>",
                  "solvedContent": null
                },
                {
                  "name": "index.jsx",
                  "codeLanguage": "jsx",
                  "content": "import React from \"react\";\nimport { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\n\nconst container = document.getElementById(\"root\");\nconst root = createRoot(container);\nroot.render(<App />);\n",
                  "solvedContent": null
                },
                {
                  "name": "App.jsx",
                  "codeLanguage": "jsx",
                  "content": "import React, { useState } from \"react\";\nimport \"./App.css\";\nimport Row from \"./Row\";\n\nconst App = () => {\n  const targetWord = \"REACT\";\n\n  const [guesses, setGuesses] = useState([\"PARTY\", \"DRAFT\", \"REACT\"]);\n\n  return (\n    <div className=\"main-container\">\n      <h1>Wordle</h1>\n      {guesses.map((guess, index) => (\n        <Row key={index} guess={guess} targetWord={targetWord} />\n      ))}\n    </div>\n  );\n};\n\nexport default App;\n",
                  "solvedContent": null
                },
                {
                  "name": "App.css",
                  "codeLanguage": "css",
                  "content": "body {\n  margin: 0;\n  font-family: Arial, sans-serif;\n  height: 100vh;\n  background: linear-gradient(135deg, #f3e7e9, #e3eeff);\n}\n\n.main-container {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n}",
                  "solvedContent": null
                },
                {
                  "name": "Row.jsx",
                  "codeLanguage": "jsx",
                  "content": "import React from \"react\";\nimport \"./Row.css\";\n\nconst Row = ({ guess, targetWord }) => {\n  const getLetterStatus = (letter, index) => {\n    if (letter === targetWord[index]) {\n      return \"correct\";\n    } else if (targetWord.includes(letter)) {\n      return \"present\";\n    } else {\n      return \"absent\";\n    }\n  };\n\n  return (\n    <div className=\"word-row\">\n      {guess.split(\"\").map((letter, index) => (\n        <span\n          key={index}\n          className={`letter ${getLetterStatus(letter, index)}`}\n        >\n          {letter}\n        </span>\n      ))}\n    </div>\n  );\n};\n\nexport default Row;",
                  "solvedContent": null
                },
                {
                  "name": "Row.css",
                  "codeLanguage": "css",
                  "content": ".word-row {\n  display: flex;\n  justify-content: center;\n  margin: 5px;\n}\n\n.letter {\n  width: 40px;\n  height: 40px;\n  display: inline-flex;\n  justify-content: center;\n  align-items: center;\n  margin: 2px;\n  color: white;\n  font-weight: bold;\n  font-size: 1.2em;\n}",
                  "solvedContent": ".word-row {\n  display: flex;\n  justify-content: center;\n  margin: 5px;\n}\n\n.letter {\n  width: 40px;\n  height: 40px;\n  display: inline-flex;\n  justify-content: center;\n  align-items: center;\n  margin: 2px;\n  color: white;\n  font-weight: bold;\n  font-size: 1.2em;\n}\n\n.letter.correct {\n  background-color: green;\n}\n\n.letter.present {\n  background-color: gold;\n}\n\n.letter.absent {\n  background-color: lightgray;\n}"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Lesson #2",
            "id": 135284,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Ensuite, nous devons gérer l'entrée du joueur dans notre application pour permettre l'entrée et la gestion des suppositions.\n\n1. À l'intérieur du composant `App`, crée une autre variable d'état `currentGuess` initialisée comme une chaîne vide.\n2. Crée également une fonction appelée `handleInputChange` qui prend un événement comme argument et met à jour `currentGuess` en utilisant `setCurrentGuess` avec la valeur de l'entrée en majuscules : `event.target.value.toUpperCase()`.\n3. Dans le JSX que nous retournons, en dessous des composants `Row`, ajoute un élément `input` avec les attributs :\n   - Ajoute `onChange={handleInputChange}` pour gérer les changements d'entrée en utilisant la fonction nouvellement créée.\n   - Ajoute `maxLength={targetWord.length}` pour restreindre la longueur de l'entrée.\n   - Ajoute un placeholder comme `\"Enter your guess\"`.",
              "preselectedFileIndex": 2,
              "hasVisualOutput": true,
              "files": [
                {
                  "name": "index.jsx",
                  "codeLanguage": "jsx",
                  "content": "import React from \"react\";\nimport { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\n\nconst container = document.getElementById(\"root\");\nconst root = createRoot(container);\nroot.render(<App />);",
                  "solvedContent": null
                },
                {
                  "name": "index.html",
                  "codeLanguage": "html",
                  "content": "<!doctype html>\n<html>\n<head>\n  <script type=\"module\" src=\"./index.js\"></script>\n  <link rel=\"stylesheet\" href=\"./index.css\" />\n  <title>Wordle</title>\n</head>\n<body>\n  <div id=\"root\">loading</div>\n</body>\n</html>",
                  "solvedContent": null
                },
                {
                  "name": "App.jsx",
                  "codeLanguage": "jsx",
                  "content": "import React, { useState } from \"react\";\nimport \"./App.css\";\nimport Row from \"./Row\";\n\nconst App = () => {\n  const targetWord = \"REACT\";\n\n  const [guesses, setGuesses] = useState([\"PARTY\", \"DRAFT\", \"REACT\"]);\n\n  return (\n    <div className=\"main-container\">\n      <h1>Wordle</h1>\n      {guesses.map((guess, index) => (\n        <Row key={index} guess={guess} targetWord={targetWord} />\n      ))}\n    </div>\n  );\n};\n\nexport default App;\n",
                  "solvedContent": "import React, { useState } from \"react\";\nimport \"./App.css\";\nimport Row from \"./Row\";\n\nconst App = () => {\n  const targetWord = \"REACT\";\n\n  const [guesses, setGuesses] = useState([\"PARTY\", \"DRAFT\", \"REACT\"]);\n  const [currentGuess, setCurrentGuess] = useState(\"\");\n\n  const handleInputChange = (event) => {\n    setCurrentGuess(event.target.value.toUpperCase());\n  };\n\n  return (\n    <div className=\"main-container\">\n      <h1>Wordle</h1>\n      {guesses.map((guess, index) => (\n        <Row key={index} guess={guess} targetWord={targetWord} />\n      ))}\n      <input\n        onChange={handleInputChange}\n        maxLength={targetWord.length}\n        placeholder=\"Enter your guess\"\n      />\n    </div>\n  );\n};\n\nexport default App;"
                },
                {
                  "name": "App.css",
                  "codeLanguage": "css",
                  "content": "body {\n  margin: 0;\n  font-family: Arial, sans-serif;\n  height: 100vh;\n  background: linear-gradient(135deg, #f3e7e9, #e3eeff);\n}\n\n.main-container {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n}",
                  "solvedContent": null
                },
                {
                  "name": "Row.jsx",
                  "codeLanguage": "jsx",
                  "content": "import React from \"react\";\nimport \"./Row.css\"\n\nconst Row = ({ guess, targetWord }) => {\n  const getLetterStatus = (letter, index) => {\n    if (letter === targetWord[index]) {\n      return \"correct\";\n    } else if (targetWord.includes(letter)) {\n      return \"present\";\n    } else {\n      return \"absent\";\n    }\n  };\n\n  return (\n    <div className=\"word-row\">\n      {guess.split(\"\").map((letter, index) => (\n        <span\n          key={index}\n          className={`letter ${getLetterStatus(letter, index)}`}\n        >\n          {letter}\n        </span>\n      ))}\n    </div>\n  );\n};\n\nexport default Row;",
                  "solvedContent": null
                },
                {
                  "name": "Row.css",
                  "codeLanguage": "css",
                  "content": ".word-row {\n  display: flex;\n  justify-content: center;\n  margin: 5px;\n}\n\n.letter {\n  width: 40px;\n  height: 40px;\n  display: inline-flex;\n  justify-content: center;\n  align-items: center;\n  margin: 2px;\n  color: white;\n  font-weight: bold;\n  font-size: 1.2em;\n}\n\n.letter.correct {\n  background-color: green;\n}\n\n.letter.present {\n  background-color: gold;\n}\n\n.letter.absent {\n  background-color: lightgray;\n}",
                  "solvedContent": null
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Lesson #3",
            "id": 135285,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Il est temps d'intégrer la fonctionnalité pour soumettre des suppositions et traiter la logique du jeu.\n\n1. Dans le composant `App`, crée une fonction appelée `handleGuess`.\n   - Retourne immédiatement si `currentGuess.length` n'est pas égal à `5` car chaque supposition doit comporter 5 lettres.\n   - Crée un tableau `updatedGuesses` avec les suppositions existantes plus `currentGuess`. Utilise l'opérateur de propagation pour ajouter `currentGuess` au tableau `guesses` avant de mettre à jour la variable d'état avec ce nouveau tableau étendu.\n   - Définit la variable d'état `guesses` à la valeur de la variable `updatedGuesses` en utilisant `setGuesses`.\n2. Sous l'élément `input`, ajoute un élément `button` avec `onClick={handleGuess}` et le texte `Guess`. Cela devrait déclencher la nouvelle fonction lorsqu'on clique dessus.",
              "preselectedFileIndex": 2,
              "hasVisualOutput": true,
              "files": [
                {
                  "name": "index.jsx",
                  "codeLanguage": "jsx",
                  "content": "import React from \"react\";\nimport { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\n\nconst container = document.getElementById(\"root\");\nconst root = createRoot(container);\nroot.render(<App />);",
                  "solvedContent": null
                },
                {
                  "name": "index.html",
                  "codeLanguage": "html",
                  "content": "<!doctype html>\n<html>\n<head>\n  <script type=\"module\" src=\"./index.js\"></script>\n  <link rel=\"stylesheet\" href=\"./index.css\" />\n  <title>Wordle</title>\n</head>\n<body>\n  <div id=\"root\">loading</div>\n</body>\n</html>",
                  "solvedContent": null
                },
                {
                  "name": "App.jsx",
                  "codeLanguage": "jsx",
                  "content": "import React, { useState } from \"react\";\nimport \"./App.css\";\nimport Row from \"./Row\";\n\nconst App = () => {\n  const targetWord = \"REACT\";\n\n  const [guesses, setGuesses] = useState([\"PARTY\", \"DRAFT\", \"REACT\"]);\n  const [currentGuess, setCurrentGuess] = useState(\"\");\n\n  const handleInputChange = (event) => {\n    setCurrentGuess(event.target.value.toUpperCase());\n  };\n\n  return (\n    <div className=\"main-container\">\n      <h1>Wordle</h1>\n      {guesses.map((guess, index) => (\n        <Row key={index} guess={guess} targetWord={targetWord} />\n      ))}\n      <input\n        onChange={handleInputChange}\n        maxLength={targetWord.length}\n        placeholder=\"Enter your guess\"\n      />\n    </div>\n  );\n};\n\nexport default App;",
                  "solvedContent": "import React, { useState } from \"react\";\nimport \"./App.css\";\nimport Row from \"./Row\";\n\nconst App = () => {\n  const targetWord = \"REACT\";\n\n  const [guesses, setGuesses] = useState([\"PARTY\", \"DRAFT\", \"REACT\"]);\n  const [currentGuess, setCurrentGuess] = useState(\"\");\n\n  const handleInputChange = (event) => {\n    setCurrentGuess(event.target.value.toUpperCase());\n  };\n\n  const handleGuess = () => {\n    if (currentGuess.length !== 5) {\n      return;\n    }\n\n    const updatedGuesses = [...guesses, currentGuess];\n    setGuesses(updatedGuesses);\n  };\n\n  return (\n    <div className=\"main-container\">\n      <h1>Wordle</h1>\n      {guesses.map((guess, index) => (\n        <Row key={index} guess={guess} targetWord={targetWord} />\n      ))}\n      <input\n        onChange={handleInputChange}\n        maxLength={targetWord.length}\n        placeholder=\"Enter your guess\"\n      />\n      <button onClick={handleGuess}>Guess</button>\n    </div>\n  );\n};\n\nexport default App;"
                },
                {
                  "name": "App.css",
                  "codeLanguage": "css",
                  "content": "body {\n  margin: 0;\n  font-family: Arial, sans-serif;\n  height: 100vh;\n  background: linear-gradient(135deg, #f3e7e9, #e3eeff);\n}\n\n.main-container {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n}",
                  "solvedContent": null
                },
                {
                  "name": "Row.jsx",
                  "codeLanguage": "jsx",
                  "content": "import React from \"react\";\nimport \"./Row.css\"\n\nconst Row = ({ guess, targetWord }) => {\n  const getLetterStatus = (letter, index) => {\n    if (letter === targetWord[index]) {\n      return \"correct\";\n    } else if (targetWord.includes(letter)) {\n      return \"present\";\n    } else {\n      return \"absent\";\n    }\n  };\n\n  return (\n    <div className=\"word-row\">\n      {guess.split(\"\").map((letter, index) => (\n        <span\n          key={index}\n          className={`letter ${getLetterStatus(letter, index)}`}\n        >\n          {letter}\n        </span>\n      ))}\n    </div>\n  );\n};\n\nexport default Row;",
                  "solvedContent": null
                },
                {
                  "name": "Row.css",
                  "codeLanguage": "css",
                  "content": ".word-row {\n  display: flex;\n  justify-content: center;\n  margin: 5px;\n}\n\n.letter {\n  width: 40px;\n  height: 40px;\n  display: inline-flex;\n  justify-content: center;\n  align-items: center;\n  margin: 2px;\n  color: white;\n  font-weight: bold;\n  font-size: 1.2em;\n}\n\n.letter.correct {\n  background-color: green;\n}\n\n.letter.present {\n  background-color: gold;\n}\n\n.letter.absent {\n  background-color: lightgray;\n}",
                  "solvedContent": null
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Lesson #3 - Copy",
            "id": 135290,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Bien sûr, nous devons informer le joueur si le jeu est terminé.\n\n1. Ajoute une nouvelle constante, `maxAttempts`, et définis sa valeur à `6` pour permettre au joueur de deviner six fois.\n2. Crée une autre variable d'état `isGameOver` avec une valeur initiale `false`.\n3. Initialise la variable d'état `guesses` avec un tableau vide au lieu des trois mots que nous avons ajoutés auparavant.\n4. À la fin de `handleGuess`, détermine si le jeu est terminé en vérifiant si `currentGuess` correspond au mot cible ou si le nombre maximum de tentatives est atteint.\n5. Utilise le rendu conditionnel pour masquer les éléments `input` et `button` si le jeu est terminé.",
              "preselectedFileIndex": 2,
              "hasVisualOutput": true,
              "files": [
                {
                  "name": "index.jsx",
                  "codeLanguage": "jsx",
                  "content": "import React from \"react\";\nimport { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\n\nconst container = document.getElementById(\"root\");\nconst root = createRoot(container);\nroot.render(<App />);",
                  "solvedContent": null
                },
                {
                  "name": "index.html",
                  "codeLanguage": "html",
                  "content": "<!doctype html>\n<html>\n<head>\n  <script type=\"module\" src=\"./index.js\"></script>\n  <link rel=\"stylesheet\" href=\"./index.css\" />\n  <title>Wordle</title>\n</head>\n<body>\n  <div id=\"root\">loading</div>\n</body>\n</html>",
                  "solvedContent": null
                },
                {
                  "name": "App.jsx",
                  "codeLanguage": "jsx",
                  "content": "import React, { useState } from \"react\";\nimport \"./App.css\";\nimport Row from \"./Row\";\n\nconst App = () => {\n  const targetWord = \"REACT\";\n\n  const [guesses, setGuesses] = useState([\"PARTY\", \"DRAFT\", \"REACT\"]);\n  const [currentGuess, setCurrentGuess] = useState(\"\");\n\n  const handleInputChange = (event) => {\n    setCurrentGuess(event.target.value.toUpperCase());\n  };\n\n  const handleGuess = () => {\n    if (currentGuess.length !== 5) {\n      return;\n    }\n\n    const updatedGuesses = [...guesses, currentGuess];\n    setGuesses(updatedGuesses);\n  };\n\n  return (\n    <div className=\"main-container\">\n      <h1>Wordle</h1>\n      {guesses.map((guess, index) => (\n        <Row key={index} guess={guess} targetWord={targetWord} />\n      ))}\n      <input\n        onChange={handleInputChange}\n        maxLength={targetWord.length}\n        placeholder=\"Enter your guess\"\n      />\n      <button onClick={handleGuess}>Guess</button>\n    </div>\n  );\n};\n\nexport default App;",
                  "solvedContent": "import React, { useState } from \"react\";\nimport \"./App.css\";\nimport Row from \"./Row\";\n\nconst App = () => {\n  const targetWord = \"REACT\";\n  const maxAttempts = 6;\n\n  const [guesses, setGuesses] = useState([]);\n  const [currentGuess, setCurrentGuess] = useState(\"\");\n  const [isGameOver, setIsGameOver] = useState(false);\n\n  const handleInputChange = (event) => {\n    setCurrentGuess(event.target.value.toUpperCase());\n  };\n\n  const handleGuess = () => {\n    if (currentGuess.length !== 5) {\n      return;\n    }\n\n    const updatedGuesses = [...guesses, currentGuess];\n    setGuesses(updatedGuesses);\n\n    if (currentGuess === targetWord || updatedGuesses.length >= maxAttempts) {\n      setIsGameOver(true);\n    }\n  };\n\n  return (\n    <div className=\"main-container\">\n      <h1>Wordle</h1>\n      {guesses.map((guess, index) => (\n        <Row key={index} guess={guess} targetWord={targetWord} />\n      ))}\n      {!isGameOver && (\n        <>\n          <input\n            onChange={handleInputChange}\n            maxLength={targetWord.length}\n            placeholder=\"Enter your guess\"\n          />\n          <button onClick={handleGuess}>Guess</button>\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default App;\n"
                },
                {
                  "name": "App.css",
                  "codeLanguage": "css",
                  "content": "body {\n  margin: 0;\n  font-family: Arial, sans-serif;\n  height: 100vh;\n  background: linear-gradient(135deg, #f3e7e9, #e3eeff);\n}\n\n.main-container {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n}",
                  "solvedContent": null
                },
                {
                  "name": "Row.jsx",
                  "codeLanguage": "jsx",
                  "content": "import React from \"react\";\nimport \"./Row.css\"\n\nconst Row = ({ guess, targetWord }) => {\n  const getLetterStatus = (letter, index) => {\n    if (letter === targetWord[index]) {\n      return \"correct\";\n    } else if (targetWord.includes(letter)) {\n      return \"present\";\n    } else {\n      return \"absent\";\n    }\n  };\n\n  return (\n    <div className=\"word-row\">\n      {guess.split(\"\").map((letter, index) => (\n        <span\n          key={index}\n          className={`letter ${getLetterStatus(letter, index)}`}\n        >\n          {letter}\n        </span>\n      ))}\n    </div>\n  );\n};\n\nexport default Row;",
                  "solvedContent": null
                },
                {
                  "name": "Row.css",
                  "codeLanguage": "css",
                  "content": ".word-row {\n  display: flex;\n  justify-content: center;\n  margin: 5px;\n}\n\n.letter {\n  width: 40px;\n  height: 40px;\n  display: inline-flex;\n  justify-content: center;\n  align-items: center;\n  margin: 2px;\n  color: white;\n  font-weight: bold;\n  font-size: 1.2em;\n}\n\n.letter.correct {\n  background-color: green;\n}\n\n.letter.present {\n  background-color: gold;\n}\n\n.letter.absent {\n  background-color: lightgray;\n}",
                  "solvedContent": null
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Lesson #4",
            "id": 135286,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Maintenant que la fonctionnalité de devinette est en place, gérons l'état de fin de jeu en fournissant un retour d'information lorsque le jeu se termine et que le joueur n'a pas deviné correctement.\n\n1. En bas de l'instruction de retour du composant, après le bouton, incluez une condition qui vérifie si `isGameOver` est vrai et que `currentGuess` n'est pas égal à `targetWord`. Ensuite, affichez un élément `p` affichant un message pour dire au joueur quel était le mot.",
              "preselectedFileIndex": 2,
              "hasVisualOutput": true,
              "files": [
                {
                  "name": "index.jsx",
                  "codeLanguage": "jsx",
                  "content": "import React from \"react\";\nimport { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\n\nconst container = document.getElementById(\"root\");\nconst root = createRoot(container);\nroot.render(<App />);",
                  "solvedContent": null
                },
                {
                  "name": "index.html",
                  "codeLanguage": "html",
                  "content": "<!doctype html>\n<html>\n<head>\n  <script type=\"module\" src=\"./index.js\"></script>\n  <link rel=\"stylesheet\" href=\"./index.css\" />\n  <title>Wordle</title>\n</head>\n<body>\n  <div id=\"root\">loading</div>\n</body>\n</html>",
                  "solvedContent": null
                },
                {
                  "name": "App.jsx",
                  "codeLanguage": "jsx",
                  "content": "import React, { useState } from \"react\";\nimport \"./App.css\";\nimport Row from \"./Row\";\n\nconst App = () => {\n  const targetWord = \"REACT\";\n  const maxAttempts = 6;\n\n  const [guesses, setGuesses] = useState([]);\n  const [currentGuess, setCurrentGuess] = useState(\"\");\n  const [isGameOver, setIsGameOver] = useState(false);\n\n  const handleInputChange = (event) => {\n    setCurrentGuess(event.target.value.toUpperCase());\n  };\n\n  const handleGuess = () => {\n    if (currentGuess.length !== 5) {\n      return;\n    }\n\n    const updatedGuesses = [...guesses, currentGuess];\n    setGuesses(updatedGuesses);\n\n    if (currentGuess === targetWord || updatedGuesses.length >= maxAttempts) {\n      setIsGameOver(true);\n    }\n  };\n\n  return (\n    <div className=\"main-container\">\n      <h1>Wordle</h1>\n      {guesses.map((guess, index) => (\n        <Row key={index} guess={guess} targetWord={targetWord} />\n      ))}\n      {!isGameOver && (\n        <>\n          <input\n            onChange={handleInputChange}\n            maxLength={targetWord.length}\n            placeholder=\"Enter your guess\"\n          />\n          <button onClick={handleGuess}>Guess</button>\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default App;\n",
                  "solvedContent": "import React, { useState } from \"react\";\nimport \"./App.css\";\nimport Row from \"./Row\";\n\nconst App = () => {\n  const targetWord = \"REACT\";\n  const maxAttempts = 6;\n\n  const [guesses, setGuesses] = useState([]);\n  const [currentGuess, setCurrentGuess] = useState(\"\");\n  const [isGameOver, setIsGameOver] = useState(false);\n\n  const handleInputChange = (event) => {\n    setCurrentGuess(event.target.value.toUpperCase());\n  };\n\n  const handleGuess = () => {\n    if (currentGuess.length !== 5) {\n      return;\n    }\n\n    const updatedGuesses = [...guesses, currentGuess];\n    setGuesses(updatedGuesses);\n\n    if (currentGuess === targetWord || updatedGuesses.length >= maxAttempts) {\n      setIsGameOver(true);\n    }\n  };\n\n  return (\n    <div className=\"main-container\">\n      <h1>Wordle</h1>\n      {guesses.map((guess, index) => (\n        <Row key={index} guess={guess} targetWord={targetWord} />\n      ))}\n      {!isGameOver && (\n        <>\n          <input\n            onChange={handleInputChange}\n            maxLength={targetWord.length}\n            placeholder=\"Enter your guess\"\n          />\n          <button onClick={handleGuess}>Guess</button>\n        </>\n      )}\n      {isGameOver && currentGuess !== targetWord && (\n        <p>{`Game over! The word was: ${targetWord}`}</p>\n      )}\n    </div>\n  );\n};\n\nexport default App;\n"
                },
                {
                  "name": "App.css",
                  "codeLanguage": "css",
                  "content": "body {\n  margin: 0;\n  font-family: Arial, sans-serif;\n  height: 100vh;\n  background: linear-gradient(135deg, #f3e7e9, #e3eeff);\n}\n\n.main-container {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n}",
                  "solvedContent": null
                },
                {
                  "name": "Row.jsx",
                  "codeLanguage": "jsx",
                  "content": "import React from \"react\";\nimport \"./Row.css\"\n\nconst Row = ({ guess, targetWord }) => {\n  const getLetterStatus = (letter, index) => {\n    if (letter === targetWord[index]) {\n      return \"correct\";\n    } else if (targetWord.includes(letter)) {\n      return \"present\";\n    } else {\n      return \"absent\";\n    }\n  };\n\n  return (\n    <div className=\"word-row\">\n      {guess.split(\"\").map((letter, index) => (\n        <span\n          key={index}\n          className={`letter ${getLetterStatus(letter, index)}`}\n        >\n          {letter}\n        </span>\n      ))}\n    </div>\n  );\n};\n\nexport default Row;",
                  "solvedContent": null
                },
                {
                  "name": "Row.css",
                  "codeLanguage": "css",
                  "content": ".word-row {\n  display: flex;\n  justify-content: center;\n  margin: 5px;\n}\n\n.letter {\n  width: 40px;\n  height: 40px;\n  display: inline-flex;\n  justify-content: center;\n  align-items: center;\n  margin: 2px;\n  color: white;\n  font-weight: bold;\n  font-size: 1.2em;\n}\n\n.letter.correct {\n  background-color: green;\n}\n\n.letter.present {\n  background-color: gold;\n}\n\n.letter.absent {\n  background-color: lightgray;\n}",
                  "solvedContent": null
                }
              ],
              "hints": []
            }
          }
        ]
      }
    ]
  }
}