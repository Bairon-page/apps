{
  "tutorial": {
    "id": 2814,
    "version": 2,
    "type": "practiceRequired",
    "isNew": false,
    "codeLanguage": "typescript",
    "title": "Génériques",
    "descriptionContent": "Pratique ce que tu as appris jusqu'à présent",
    "shortDescriptionContent": "",
    "showInTrack": true,
    "iconBanner": null,
    "chapters": [
      {
        "id": 14842,
        "title": "Génériques",
        "type": "practiceLevel2",
        "lessons": [
          {
            "title": "Lesson #7",
            "id": 131016,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Quel est l'avantage d'utiliser les generics en TypeScript ?</p><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\">Il permet aux fonctions, interfaces et classes de travailler avec plusieurs types de données</item><item value=\"2\" correct=\"false\">Il permet le code JavaScript dans TypeScript</item><item value=\"3\" correct=\"false\">Les génériques en TypeScript te forcent à utiliser un seul type spécifique</item></selection><p visible-if=\"wrong\">Il permet aux fonctions, interfaces et classes de travailler avec plusieurs types de données.</p></body></html>"
          },
          {
            "title": "move #4",
            "id": 130989,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Appelle la fonction générique.</p><code version=\"2\" codelang=\"typescript\" name=\"script.ts\" visible-if=\"always\"><content><text value=\"function\" class=\"keyword\" /><text value=\" \" /><text value=\"genericFunction\" class=\"title\" /><text value=\"&lt;\" /><text value=\"T\" class=\"title\" /><text value=\"&gt;(\" /><text value=\"arg: T\" class=\"params\" /><text value=\"): \" /><text value=\"T\" class=\"title\" /><text value=\" \" /><text value=\"{\" /><text type=\"break\" /><text value=\" \" /><text value=\"return\" class=\"keyword\" /><text value=\" arg;\" /><text type=\"break\" /><text value=\"}\" /><text type=\"break\" /><text type=\"break\" /><text value=\"let\" class=\"keyword\" /><text value=\" str: \" /><text value=\"string\" class=\"built_in\" /><text value=\" = genericFunction&lt;\" /><text value=\"string\" class=\"built_in\" /><text value=\"&gt;(\" /><text value=\"&quot;Hi!&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(str);\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"75\" endIndex=\"90\" /><option startIndex=\"90\" endIndex=\"91\" /><option startIndex=\"91\" endIndex=\"97\" /><option startIndex=\"97\" endIndex=\"98\" /><option correct=\"false\"><content><text value=\"number\" /></content></option></options></interaction></interactions><output><content><text value=\"Hi!\" /></content></output></code><p visible-if=\"wrong\">Assurez-vous de choisir <code>genericFunction</code> suivi de <code>&lt;</code> puis <code>string</code>, <code>&gt;</code>.</p></body></html>"
          },
          {
            "title": "Lesson #8",
            "id": 131017,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Laquelle de ces fonctions utilise des génériques dans sa signature de fonction ?</p><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\"><code>function getData&lt;T&gt;(input: T): T { return input; }</code></item><item value=\"2\" correct=\"false\"><code>function getData&lt;T&gt;(input: any): any { return input; }</code></item><item value=\"3\" correct=\"false\"><code>function getData&lt;T&gt;(input: string): string { return input; }</code></item></selection><p visible-if=\"wrong\"><code>function getData&lt;T&gt;(input: T): T { return input; }</code>.</p></body></html>"
          },
          {
            "title": "Lesson #9",
            "id": 131018,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Lequel de ces appels de fonction rend le type générique explicite ?</p><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\"><code>getInfo&lt;string&gt;('Hello World');</code></item><item value=\"2\" correct=\"false\"><code>getInfo('Hello World');</code></item><item value=\"3\" correct=\"false\"><code>getInfo(1001);</code></item></selection><p visible-if=\"wrong\"><code>getInfo&lt;string&gt;('Hello World');</code>.</p></body></html>"
          },
          {
            "title": "move #3",
            "id": 130988,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Définis une fonction générique avec le type générique <code>T</code>.</p><code version=\"2\" codelang=\"typescript\" name=\"script.ts\" visible-if=\"always\"><content><text value=\"function\" class=\"keyword\" /><text value=\" \" /><text value=\"genericFunction\" class=\"title\" /><text value=\"&lt;\" /><text value=\"T\" class=\"title\" /><text value=\"&gt;(\" /><text value=\"arg: T\" class=\"params\" /><text value=\"): \" /><text value=\"T\" class=\"title\" /><text value=\" \" /><text value=\"{\" /><text type=\"break\" /><text value=\" \" /><text value=\"return\" class=\"keyword\" /><text value=\" arg;\" /><text type=\"break\" /><text value=\"}\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"9\" endIndex=\"24\" /><option startIndex=\"24\" endIndex=\"25\" /><option startIndex=\"25\" endIndex=\"26\" /><option startIndex=\"26\" endIndex=\"27\" /><option correct=\"false\"><content><text value=\"(\" /></content></option><option correct=\"false\"><content><text value=\")\" /></content></option></options></interaction></interactions></code><p visible-if=\"wrong\">Assurez-vous de choisir <code>genericFunction</code> suivi de <code>&lt;</code> puis <code>T</code>, <code>&gt;</code>.</p></body></html>"
          },
          {
            "title": "Lesson #10",
            "id": 131019,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Lequel de ceux-ci retournera toujours le type <code>string</code> en TypeScript ?</p><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\"><code>function getInfo&lt;T&gt;(input: T): string</code></item><item value=\"2\" correct=\"false\"><code>function getInfo&lt;T&gt;(input: T): T</code></item><item value=\"3\" correct=\"false\"><code>function getInfo&lt;T&gt;(input: T): number</code></item></selection><p visible-if=\"wrong\"><code>function getInfo&lt;T&gt;(input: T): string</code>.</p></body></html>"
          },
          {
            "title": "Lesson #9",
            "id": 131005,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Pouvons-nous rendre une fonction générique en TypeScript ?</p><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\">Oui, à la fois les arguments et le type de retour peuvent être génériques</item><item value=\"2\" correct=\"false\">Seuls les arguments de la fonction peuvent être génériques</item><item value=\"3\" correct=\"false\">Seul le type de retour de la fonction peut être générique</item></selection><p visible-if=\"wrong\">Oui, à la fois les arguments et le type de retour peuvent être génériques.</p></body></html>"
          },
          {
            "title": "Lesson #11",
            "id": 131020,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Assure-toi que la fonction <code>echo</code> renvoie toujours une valeur de type chaîne de caractères.</p><code version=\"2\" codelang=\"typescript\" name=\"script.ts\" visible-if=\"always\"><content><text value=\"function\" class=\"keyword\" /><text value=\" \" /><text value=\"echo\" class=\"title\" /><text value=\"&lt;\" /><text value=\"T\" class=\"title\" /><text value=\"&gt; (\" /><text value=\"data: T\" class=\"params\" /><text value=\"): \" /><text value=\"string\" class=\"title\" /><text value=\" \" /><text value=\"{\" /><text type=\"break\" /><text value=\" \" /><text value=\"return\" class=\"keyword\" /><text value=\" data.toString();\" /><text type=\"break\" /><text value=\"}\" /></content><interactions><interaction type=\"validatedInput\" isDefault=\"true\" startIndex=\"28\" endIndex=\"34\" /></interactions></code><p visible-if=\"wrong\">Assurez-vous de rentrer <code>string</code>.</p></body></html>"
          }
        ]
      }
    ]
  }
}