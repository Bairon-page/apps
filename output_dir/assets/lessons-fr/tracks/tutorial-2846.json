{
  "tutorial": {
    "id": 2846,
    "version": 2,
    "type": "guidedProject",
    "isNew": false,
    "codeLanguage": "python",
    "title": "Clone de ChatGPT - Partie 1",
    "descriptionContent": "Utiliser l'API OpenAI pour créer notre propre version de ChatGPT et obtenir une première impression de ce qui est possible avec les LLMs.",
    "shortDescriptionContent": "",
    "showInTrack": true,
    "iconBanner": null,
    "chapters": [
      {
        "id": 14926,
        "title": "Chapitre #1",
        "type": "practiceLevel3",
        "lessons": [
          {
            "title": "Lesson #1",
            "id": 131647,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Bienvenue dans le projet **Clone de ChatGPT**. Lors de son introduction, ChatGPT a fait sensation dans le monde entier. Soudainement, l'IA était accessible à tout le monde. Dans ce projet, nous allons utiliser l'API d'OpenAI pour créer notre propre version de ChatGPT et obtenir une première impression de ce qui est possible avec leur API.\n\nNous utilisons le module `os` pour lire la clé API d'OpenAI, qui est stockée comme une variable d'environnement pour garantir sa sécurité.\n\n1. Écris `import os` pour importer le module `os`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "app.py",
                  "codeLanguage": "python",
                  "content": "",
                  "solvedContent": "import os"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Lesson #2",
            "id": 131648,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Nous utilisons également de manière intensive le module `requests` dans notre script pour interagir avec l'API OpenAI, alors importons ce module aussi.\n\n1. Écris `import requests` pour importer le module `requests`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "app.py",
                  "codeLanguage": "python",
                  "content": "import os",
                  "solvedContent": "import requests\nimport os"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Lesson #3",
            "id": 131649,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Alors que nous interagissons avec une API qui nécessite une clé API pour l'accès, nous devons d'abord récupérer la clé API à partir de vos variables d'environnement. Nous avons déjà ajouté la clé API nécessaire au fichier `.env`. Tout ce que tu as à faire est de la récupérer.\n\n1. Crée une variable `api_key`.\n2. Utilise `os.getenv` pour récupérer ta clé API OpenAI.\n   - Interroge la clé API avec le nom `\"MIMO_OPENAI_API_KEY\"`.\n   - Assigne la clé à la variable `api_key`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "app.py",
                  "codeLanguage": "python",
                  "content": "import requests\nimport os",
                  "solvedContent": "import requests\nimport os\n\napi_key = os.getenv(\"MIMO_OPENAI_API_KEY\")"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Lesson #4",
            "id": 131650,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "L'endpoint que nous utiliserons est `https://ai.mimo.org/v1/openai/message`. C'est un proxy fourni par Mimo pour l'endpoint de l'assistant d'OpenAI.\n\n1. Crée une variable `url` et assigne l'endpoint `https://ai.mimo.org/v1/openai/message` à la variable `url`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "app.py",
                  "codeLanguage": "python",
                  "content": "import requests\nimport os\n\napi_key = os.getenv(\"MIMO_OPENAI_API_KEY\")",
                  "solvedContent": "import requests\nimport os\n\napi_key = os.getenv(\"MIMO_OPENAI_API_KEY\")\nurl = \"https://ai.mimo.org/v1/openai/message\""
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Lesson #5",
            "id": 131651,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Les en-têtes pour la requête API sont nécessaires pour t'authentifier auprès de l'API afin de garantir que ta requête sera traitée. L'application prend cette clé API dans l'en-tête de la requête API. Configurons cela maintenant.\n\n1. Crée un dictionnaire `headers`.\n2. Ajoute `\"api-key\"` comme clé et `api_key` comme sa valeur.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "app.py",
                  "codeLanguage": "python",
                  "content": "import requests\nimport os\n\napi_key = os.getenv(\"MIMO_OPENAI_API_KEY\")\nurl = \"https://ai.mimo.org/v1/openai/message\"",
                  "solvedContent": "import requests\nimport os\n\napi_key = os.getenv(\"MIMO_OPENAI_API_KEY\")\nurl = \"https://ai.mimo.org/v1/openai/message\"\nheaders = {\"api-key\": api_key}"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Lesson #6",
            "id": 131652,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "L'endpoint que nous allons utiliser fonctionne avec des threads. Un thread est une conversation qu'un utilisateur a avec le large language model. Si nous voulons permettre à notre utilisateur de continuer un thread donné, nous devons enregistrer son ID. Pour préparer cela, nous allons créer une nouvelle variable qui contiendra plus tard cet ID.\n\n1. Initialise une variable `current_thread_id` avec `None`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "app.py",
                  "codeLanguage": "python",
                  "content": "import requests\nimport os\n\napi_key = os.getenv(\"MIMO_OPENAI_API_KEY\")\nurl = \"https://ai.mimo.org/v1/openai/message\"\nheaders = {\"api-key\": api_key}",
                  "solvedContent": "import requests\nimport os\n\napi_key = os.getenv(\"MIMO_OPENAI_API_KEY\")\nurl = \"https://ai.mimo.org/v1/openai/message\"\nheaders = {\"api-key\": api_key}\n\ncurrent_thread_id = None"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Lesson #6 - Copy - Copy",
            "id": 131664,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Nous sommes presque prêts à envoyer notre premier appel API. Mais que devrions-nous envoyer ? Demandons à l'utilisateur.\n\n1. Utilise `input` pour prendre un message de l'utilisateur.\n   - Stocke-le dans une nouvelle variable `user_message`.\n   - Comme il s'agit d'un chat, nous pouvons utiliser une invite simple `\"Toi : \"`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "app.py",
                  "codeLanguage": "python",
                  "content": "import requests\nimport os\n\napi_key = os.getenv(\"MIMO_OPENAI_API_KEY\")\nurl = \"https://ai.mimo.org/v1/openai/message\"\nheaders = {\"api-key\": api_key}\n\ncurrent_thread_id = None\n",
                  "solvedContent": "import requests\nimport os\n\napi_key = os.getenv(\"MIMO_OPENAI_API_KEY\")\nurl = \"https://ai.mimo.org/v1/openai/message\"\nheaders = {\"api-key\": api_key}\n\ncurrent_thread_id = None\n\nuser_message = input(\"You: \")"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Lesson #7",
            "id": 131653,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Maintenant, nous allons définir une fonction pour envoyer un message à la plateforme OpenAI et obtenir une réponse.\n\n1. Définis une fonction `send_message` avec les paramètres `user_message` et `current_thread_id`.\n2. À l'intérieur de la fonction, crée un dictionnaire `body` avec \"message\" comme clé et `user_message` comme valeur.\n3. Ensuite, envoie la requête.\n   - Utilise `requests.post` pour envoyer les données à l'API OpenAI.\n   - Assure-toi d'utiliser l'`url`, les `headers`, et le `body` en tant que JSON.\n   - Assigne la réponse à une variable `response`.\n4. Imprime la variable `response`.\n5. Appelle la fonction nouvellement créée avec `user_message` et `current_thread_id` comme paramètres. Tu devrais recevoir un `<Response [200]>` mais cela peut prendre quelques secondes.\n\nExécute le programme et essaie-le ! N'oublie pas que tu appelles un véritable endpoint LLM. Cela peut prendre un certain temps pour obtenir une réponse.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "app.py",
                  "codeLanguage": "python",
                  "content": "import requests\nimport os\n\napi_key = os.getenv(\"MIMO_OPENAI_API_KEY\")\nurl = \"https://ai.mimo.org/v1/openai/message\"\nheaders = {\"api-key\": api_key}\n\ncurrent_thread_id = None\n\nuser_message = input(\"You: \")",
                  "solvedContent": "import requests\nimport os\n\napi_key = os.getenv(\"MIMO_OPENAI_API_KEY\")\nurl = \"https://ai.mimo.org/v1/openai/message\"\nheaders = {\"api-key\": api_key}\n\ndef send_message(user_message, thread_id):\n    body = {\"message\": user_message}\n    response = requests.post(url, headers=headers, json=body)\n    print(response)\n\ncurrent_thread_id = None\n\nuser_message = input(\"You: \")\nsend_message(user_message, current_thread_id)"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Lesson #7 - Copy",
            "id": 131665,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Au lieu d'imprimer l'objet de réponse à l'intérieur de la fonction, nous voulons obtenir les données JSON et les retourner.\n\n1. Supprime la déclaration `print` à l'intérieur de la fonction.\n2. Utilise l'appel `response.json()` pour décompresser le JSON.\n3. Retourne la valeur décompressée.\n4. Assigne la valeur de retour de `send_message` à une nouvelle variable appelée `response_data`.\n5. Enregistre la variable `response_data`.\n\nSi tu exécutes le programme et entres *Hi*, tu devrais voir quelque chose comme `{'threadId': 'thread_H7ov...', 'response': 'Hello! How can I help you today?\\n'}`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "app.py",
                  "codeLanguage": "python",
                  "content": "import requests\nimport os\n\napi_key = os.getenv(\"MIMO_OPENAI_API_KEY\")\nurl = \"https://ai.mimo.org/v1/openai/message\"\nheaders = {\"api-key\": api_key}\n\ndef send_message(user_message, thread_id):\n    body = {\"message\": user_message}\n    response = requests.post(url, headers=headers, json=body)\n    print(response)\n\ncurrent_thread_id = None\n\nuser_message = input(\"You: \")\nsend_message(user_message, current_thread_id)",
                  "solvedContent": "import requests\nimport os\n\napi_key = os.getenv(\"MIMO_OPENAI_API_KEY\")\nurl = \"https://ai.mimo.org/v1/openai/message\"\nheaders = {\"api-key\": api_key}\n\ndef send_message(user_message, thread_id):\n    body = {\"message\": user_message}\n    response = requests.post(url, headers=headers, json=body)\n    return response.json()\n\ncurrent_thread_id = None\n\nuser_message = input(\"You: \")\nresponse_data = send_message(user_message, current_thread_id)\nprint(response_data)"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Lesson #7 - Copy - Copy",
            "id": 131666,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "À ce stade, nous n'utilisons pas le deuxième argument passé, `thread_id`. Nous devrions l'ajouter au corps pour continuer un fil donné.\n\n1. Si `thread_id` n'est pas `None`, ajoute-le au corps en tant que `\"threadId\"`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "app.py",
                  "codeLanguage": "python",
                  "content": "import requests\nimport os\n\napi_key = os.getenv(\"MIMO_OPENAI_API_KEY\")\nurl = \"https://ai.mimo.org/v1/openai/message\"\nheaders = {\"api-key\": api_key}\n\ndef send_message(user_message, thread_id):\n    body = {\"message\": user_message}\n    response = requests.post(url, headers=headers, json=body)\n    return response.json()\n\ncurrent_thread_id = None\n\nuser_message = input(\"You: \")\nresponse_data = send_message(user_message, current_thread_id)\nprint(response_data)",
                  "solvedContent": "import requests\nimport os\n\napi_key = os.getenv(\"MIMO_OPENAI_API_KEY\")\nurl = \"https://ai.mimo.org/v1/openai/message\"\nheaders = {\"api-key\": api_key}\n\ndef send_message(user_message, thread_id):\n    body = {\"message\": user_message}\n    if thread_id:\n        body[\"threadId\"] = thread_id\n    response = requests.post(url, headers=headers, json=body)\n    return response.json()\n\ncurrent_thread_id = None\n\nuser_message = input(\"You: \")\nresponse_data = send_message(user_message, current_thread_id)\nprint(response_data)"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Lesson #8",
            "id": 131654,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Il est temps de déballer le message et l'ID du fil de discussion à partir de l'objet de réponse.\n\n1. Récupère les valeurs pour `\"response\"` et `\"threadId\"` à partir de `response_data` en utilisant `.get()` et stocke-les dans une nouvelle variable `latest_message` et dans la variable `current_thread_id` précédemment créée.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "app.py",
                  "codeLanguage": "python",
                  "content": "import requests\nimport os\n\napi_key = os.getenv(\"MIMO_OPENAI_API_KEY\")\nurl = \"https://ai.mimo.org/v1/openai/message\"\nheaders = {\"api-key\": api_key}\n\ndef send_message(user_message, thread_id):\n    body = {\"message\": user_message}\n    if thread_id:\n        body[\"threadId\"] = thread_id\n    response = requests.post(url, headers=headers, json=body)\n    return response.json()\n\ncurrent_thread_id = None\n\nuser_message = input(\"You: \")\nresponse_data = send_message(user_message, current_thread_id)\nprint(response_data)",
                  "solvedContent": "import requests\nimport os\n\napi_key = os.getenv(\"MIMO_OPENAI_API_KEY\")\nurl = \"https://ai.mimo.org/v1/openai/message\"\nheaders = {\"api-key\": api_key}\n\ndef send_message(user_message, thread_id):\n    body = {\"message\": user_message}\n    if thread_id:\n        body[\"threadId\"] = thread_id\n    response = requests.post(url, headers=headers, json=body)\n    return response.json()\n\ncurrent_thread_id = None\n\nuser_message = input(\"You: \")\nresponse_data = send_message(user_message, current_thread_id)\nprint(response_data)\nlatest_message = response_data.get(\"response\")\ncurrent_thread_id = response_data.get(\"threadId\")"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Lesson #9",
            "id": 131655,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Comme nous avons maintenant la réponse réelle du LLM enregistrée dans `latest_message`, affichons-la.\n\n1. Supprime la déclaration `print` qui affiche l'objet `response_data`.\n2. Ajoute une déclaration `print` qui affiche le message. Comme il s'agit d'une conversation, préfixe la sortie du print avec `\"GPT: \"` pour indiquer que le message provient de GPT. Utilise une f-string pour y parvenir.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "app.py",
                  "codeLanguage": "python",
                  "content": "import requests\nimport os\n\napi_key = os.getenv(\"MIMO_OPENAI_API_KEY\")\nurl = \"https://ai.mimo.org/v1/openai/message\"\nheaders = {\"api-key\": api_key}\n\ndef send_message(user_message, thread_id):\n    body = {\"message\": user_message}\n    if thread_id:\n        body[\"threadId\"] = thread_id\n    response = requests.post(url, headers=headers, json=body)\n    return response.json()\n\ncurrent_thread_id = None\n\nuser_message = input(\"You: \")\nresponse_data = send_message(user_message, current_thread_id)\nprint(response_data)\nlatest_message = response_data.get(\"response\")\ncurrent_thread_id = response_data.get(\"threadId\")",
                  "solvedContent": "import requests\nimport os\n\napi_key = os.getenv(\"MIMO_OPENAI_API_KEY\")\nurl = \"https://ai.mimo.org/v1/openai/message\"\nheaders = {\"api-key\": api_key}\n\ndef send_message(user_message, thread_id):\n    body = {\"message\": user_message}\n    if thread_id:\n        body[\"threadId\"] = thread_id\n    response = requests.post(url, headers=headers, json=body)\n    return response.json()\n\ncurrent_thread_id = None\n\nuser_message = input(\"You: \")\nresponse_data = send_message(user_message, current_thread_id)\nlatest_message = response_data.get(\"response\")\ncurrent_thread_id = response_data.get(\"threadId\")\nprint(f\"GPT: {latest_message}\")"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Lesson #8 - Copy",
            "id": 131667,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Comme dernière étape de la première partie du projet, faisons en sorte que la conversation continue en utilisant une boucle infinie. Pour l'instant, la conversation se poursuivra jusqu'à ce que le programme s'arrête.\n\n1. Enveloppe le code commençant par `input` jusqu'à l'instruction `print` dans une boucle `while` qui s'exécute indéfiniment.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "app.py",
                  "codeLanguage": "python",
                  "content": "import requests\nimport os\n\napi_key = os.getenv(\"MIMO_OPENAI_API_KEY\")\nurl = \"https://ai.mimo.org/v1/openai/message\"\nheaders = {\"api-key\": api_key}\n\ndef send_message(user_message, thread_id):\n    body = {\"message\": user_message}\n    if thread_id:\n        body[\"threadId\"] = thread_id\n    response = requests.post(url, headers=headers, json=body)\n    return response.json()\n\ncurrent_thread_id = None\n\nuser_message = input(\"You: \")\nresponse_data = send_message(user_message, current_thread_id)\nlatest_message = response_data.get(\"response\")\ncurrent_thread_id = response_data.get(\"threadId\")\nprint(f\"GPT: {latest_message}\")",
                  "solvedContent": "import requests\nimport os\n\napi_key = os.getenv(\"MIMO_OPENAI_API_KEY\")\nurl = \"https://ai.mimo.org/v1/openai/message\"\nheaders = {\"api-key\": api_key}\n\ndef send_message(user_message, thread_id):\n    body = {\"message\": user_message}\n    if thread_id:\n        body[\"threadId\"] = thread_id\n    response = requests.post(url, headers=headers, json=body)\n    return response.json()\n\ncurrent_thread_id = None\n\nwhile True:\n    user_message = input(\"You: \")\n    response_data = send_message(user_message, current_thread_id)\n    latest_message = response_data.get(\"response\")\n    current_thread_id = response_data.get(\"threadId\")\n    print(f\"GPT: {latest_message}\")"
                }
              ],
              "hints": []
            }
          }
        ]
      }
    ]
  }
}