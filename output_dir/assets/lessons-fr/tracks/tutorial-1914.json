{
  "tutorial": {
    "id": 1914,
    "version": 11,
    "type": "guidedProjectOptional",
    "isNew": false,
    "codeLanguage": "jsx",
    "title": "Application monopage",
    "descriptionContent": "Utilise React pour créer un site web d'application monopage basique",
    "shortDescriptionContent": "",
    "showInTrack": true,
    "iconBanner": "tutorial-1914-icon-banner.svg",
    "chapters": [
      {
        "id": 12483,
        "title": "Application monopage",
        "type": "practiceLevel3",
        "lessons": [
          {
            "title": "Step 1 - Preparation",
            "id": 114677,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Dans ce projet, nous allons travailler sur le site web **Camera Tips**, qui comporte quatre pages web : `Home`, `ShutterSpeed`, `Aperture` et `ISO`. Ces pages sont représentées comme des composants fonctionnels dans le fichier `pages.jsx`.\n\nLe composant `App` dans `index.jsx` est le composant parent. Les quatre pages web seront rendues à l'intérieur de `index.jsx`. Pour l'instant, nous devons importer les quatre pages web dans `index.jsx`.\n\n1. `import` les quatre composants de `pages.jsx` dans `index.jsx`.\n2. Pour l'instant, ajoute seulement le composant `<Home />` sous l'élément de titre `<h1>` à l'intérieur de `App`.",
              "preselectedFileIndex": 1,
              "hasVisualOutput": true,
              "files": [
                {
                  "name": "index.html",
                  "codeLanguage": "html",
                  "content": "<!doctype html>\n<html>\n  <head>\n    <style>\n      html,\n      body {\n        margin: 0;\n        padding: 0;\n        background-color: #fefef1;\n      }\n      \n      a {\n        text-decoration: underline;\n        color: blue;\n      }\n      \n      a:hover {\n        cursor: pointer;\n      }\n    </style>\n    <script type=\"module\" src=\"./index.js\"></script>\n  </head>\n  <body>\n    <div id=\"root\"></div>\n  </body>\n</html>",
                  "solvedContent": null
                },
                {
                  "name": "index.jsx",
                  "codeLanguage": "jsx",
                  "content": "import React from \"react\";\nimport { createRoot } from \"react-dom/client\";\n\nimport { wrapperStyle } from \"./styles.jsx\";\n\nconst App = () => {\n  return (\n    <div style={wrapperStyle.wrapper}>\n      <h1>Camera Tips</h1>\n    </div>\n  );\n};\n\nconst rootElement = document.getElementById(\"root\");\nconst root = createRoot(rootElement);\nroot.render(<App />);\n\nexport default App;",
                  "solvedContent": "import React from \"react\";\nimport { createRoot } from \"react-dom/client\";\n\nimport { wrapperStyle } from \"./styles.jsx\";\nimport { Home, Aperture, ShutterSpeed, ISO } from \"./pages.jsx\";\n\nconst App = () => {\n  return (\n    <div style={wrapperStyle.wrapper}>\n      <h1>Camera Tips</h1>\n      <Home />\n    </div>\n  );\n};\n\nconst rootElement = document.getElementById(\"root\");\nconst root = createRoot(rootElement);\nroot.render(<App />);\n\nexport default App;"
                },
                {
                  "name": "pages.jsx",
                  "codeLanguage": "jsx",
                  "content": "import React from \"react\";\nimport { pageStyle } from \"./styles\";\n\nconst Home = () => {\n  return (\n    <div>\n      <p>\n        Want a quick guide on how to take good photos? Confused about photo\n        terms? You've come to the right place!\n      </p>\n    </div>\n  );\n};\n\nconst ShutterSpeed = () => {\n  return (\n    <div>\n      <h3>Shutter Speed</h3>\n      <p>\n        <strong>Shutter Speed</strong> is how quickly your camera takes the\n        picture.\n      </p>\n      <div style={pageStyle.table}>\n        <div style={pageStyle.row}>\n          <div style={pageStyle.column}>\n            <strong>Fast Shutter Speed:</strong>\n          </div>\n          <div style={pageStyle.column}>\n            <strong>Slow Shutter Speed:</strong>\n          </div>\n        </div>\n        <div style={pageStyle.row}>\n          <div style={pageStyle.column}>\n            Clearer subjects when they are moving. Darker picture because less\n            light can enter your camera.\n          </div>\n          <div style={pageStyle.column}>\n            Blurrier subjects when they are moving. Brighter pictures because\n            more light can enter your camera.\n          </div>\n        </div>\n      </div>\n      <p>\n        A shutter speed of 1/60 is the lowest speed you can get for a bright\n        photo that isn't noticeably blurry.\n      </p>\n    </div>\n  );\n};\n\nconst Aperture = () => {\n  return (\n    <div>\n      <h3>Aperture</h3>\n      <p>\n        The <strong>Aperture</strong> is the camera lens' opening that allows\n        light in. The measurement of that opening is called the{\" \"}\n        <strong>F-Stop</strong>. The Aperture and F-Stop are inversely\n        proportional.\n      </p>\n      <div style={pageStyle.table}>\n        <div style={pageStyle.row}>\n          <div style={pageStyle.column}>\n            <strong>Low F-Stop / High Aperture:</strong>\n          </div>\n          <div style={pageStyle.column}>\n            <strong>High F-Stop / Low Aperture:</strong>\n          </div>\n        </div>\n        <div style={pageStyle.row}>\n          <div style={pageStyle.column}>\n            Your Depth of Field is very narrow; your pictures will be brighter\n            and will have foreground and background blur.\n          </div>\n          <div style={pageStyle.column}>\n            Your Depth of Field is very wide; your pictures will be darker but\n            will have less blurred backgrounds and foregrounds.\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nconst ISO = () => {\n  return (\n    <div>\n      <h3>ISO</h3>\n      <p>\n        Your camera's <strong>ISO</strong> is a measure of how sensitive your\n        camera's sensors are to light.\n      </p>\n      <p>\n        Increasing your camera's ISO makes your pictures brighter, but it also\n        increases their <strong>noise</strong>, or their grainy-ness. This is\n        why night photos, which usually are taken with high ISO, have black dots\n        when you look closely.\n      </p>\n      <div style={pageStyle.table}>\n        <div style={pageStyle.row}>\n          <div style={pageStyle.column}>\n            <strong>Low ISO:</strong>\n          </div>\n          <div style={pageStyle.column}>\n            <strong>High ISO:</strong>\n          </div>\n        </div>\n        <div style={pageStyle.row}>\n          <div style={pageStyle.column}>\n            Your camera's sensors are not very sensitive, reducing overall\n            brightness. This makes your pictures less noisy though.\n          </div>\n          <div style={pageStyle.column}>\n            Your camera's sensors are very sensitive to light, meaning brighter\n            images. However, this make your pictures more noisy.\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport { Home, Aperture, ShutterSpeed, ISO };",
                  "solvedContent": null
                },
                {
                  "name": "navigation.jsx",
                  "codeLanguage": "jsx",
                  "content": "import React from \"react\";\nimport { navStyle } from \"./styles.jsx\";\n\nconst Navigation = (props) => {\n  return (\n    <nav style={navStyle.nav}>\n      <button style={navStyle.navLink}>Home</button>\n      <button style={navStyle.navLink}>Aperture</button>\n      <button style={navStyle.navLink}>Shutter Speed</button>\n      <button style={navStyle.navLink}>ISO</button>\n    </nav>\n  );\n};\n\nexport default Navigation;",
                  "solvedContent": null
                },
                {
                  "name": "styles.jsx",
                  "codeLanguage": "jsx",
                  "content": "const wrapperStyle = {\n  wrapper: {\n    width: \"100%\",\n    fontFamily: \"Times New Roman, Verdana, Arial, sans-serif\",\n    fontSize: 16,\n    padding: 16,\n    boxSizing: \"border-box\",\n    textAlign: \"center\",\n  },\n};\n\nconst navStyle = {\n  nav: {\n    textAlign: \"center\",\n    display: \"flex\",\n    flexDirection: \"row\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    flexWrap: \"nowrap\",\n  },\n  navLink: {\n    flexBasis: \"100\",\n    flexShrink: \"1\",\n    margin: 2,\n    paddingLeft: 8,\n    paddingRight: 8,\n    paddingTop: 4,\n    paddingBottom: 4,\n    fontSize: 12,\n  },\n};\n\nconst pageStyle = {\n  table: {\n    width: \"100%\",\n    display: \"flex\",\n    flexDirection: \"column\",\n    flexWrap: \"nowrap\",\n    justifyContent: \"flex-start\",\n    alignItems: \"stretch\",\n  },\n  row: {\n    width: \"100%\",\n    marginBottom: 4,\n    display: \"flex\",\n    flexDirection: \"row\",\n    flexWrap: \"nowrap\",\n    justifyContent: \"space-between\",\n    alignItems: \"flex-start\",\n  },\n  column: {\n    flexBasis: \"50%\",\n    flexShrink: 1,\n    flexGrow: 0,\n    marginLeft: 4,\n    marginRight: 4,\n  },\n};\n\nexport { wrapperStyle, navStyle, pageStyle };",
                  "solvedContent": null
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Step 2 - import `react-router-dom`",
            "id": 114678,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Construire une SPA avec React est facile à faire avec `react-router-dom`, un package NPM. `react-router-dom` rend le JSX en fonction de l'URL fournie, imitant les sites web et les pages web normaux. Cependant, `react-router-dom` ne nécessite pas que la page se rafraîchisse, économisant ainsi de la mémoire et réduisant le trafic internet.\n\nNous devons importer `react-router-dom` dans notre projet, de manière similaire à `React` et `ReactDOM`. Plus précisément, trois composants de `react-router-dom` sont nécessaires : `BrowserRouter`, `Routes` et `Route`.\n\n1. Depuis `react-router-dom`, importe les composants suivants : `BrowserRouter`, `Routes` et `Route`.",
              "preselectedFileIndex": 1,
              "hasVisualOutput": true,
              "files": [
                {
                  "name": "index.html",
                  "codeLanguage": "html",
                  "content": "<!doctype html>\n<html>\n  <head>\n    <style>\n      html,\n      body {\n        margin: 0;\n        padding: 0;\n        background-color: #fefef1;\n      }\n      \n      a {\n        text-decoration: underline;\n        color: blue;\n      }\n      \n      a:hover {\n        cursor: pointer;\n      }\n    </style>\n    <script type=\"module\" src=\"./index.js\"></script>\n  </head>\n  <body>\n    <div id=\"root\"></div>\n  </body>\n</html>",
                  "solvedContent": null
                },
                {
                  "name": "index.jsx",
                  "codeLanguage": "jsx",
                  "content": "import React from \"react\";\nimport { createRoot } from \"react-dom/client\";\n\nimport { wrapperStyle } from \"./styles.jsx\";\nimport { Home, Aperture, ShutterSpeed, ISO } from \"./pages.jsx\";\n\nconst App = () => {\n  return (\n    <div style={wrapperStyle.wrapper}>\n      <h1>Camera Tips</h1>\n      <Home />\n    </div>\n  );\n};\n\nconst rootElement = document.getElementById(\"root\");\nconst root = createRoot(rootElement);\nroot.render(<App />);\n\nexport default App;",
                  "solvedContent": "import React from \"react\";\nimport { createRoot } from \"react-dom/client\";\n\nimport { wrapperStyle } from \"./styles.jsx\";\nimport { Home, Aperture, ShutterSpeed, ISO } from \"./pages.jsx\";\nimport { BrowserRouter, Routes, Route } from \"react-router-dom\";\n\nconst App = () => {\n  return (\n    <div style={wrapperStyle.wrapper}>\n      <h1>Camera Tips</h1>\n      <Home />\n    </div>\n  );\n};\n\nconst rootElement = document.getElementById(\"root\");\nconst root = createRoot(rootElement);\nroot.render(<App />);\n\nexport default App;"
                },
                {
                  "name": "pages.jsx",
                  "codeLanguage": "jsx",
                  "content": "import React from \"react\";\nimport { pageStyle } from \"./styles\";\n\nconst Home = () => {\n  return (\n    <div>\n      <p>\n        Want a quick guide on how to take good photos? Confused about photo\n        terms? You've come to the right place!\n      </p>\n    </div>\n  );\n};\n\nconst ShutterSpeed = () => {\n  return (\n    <div>\n      <h3>Shutter Speed</h3>\n      <p>\n        <strong>Shutter Speed</strong> is how quickly your camera takes the\n        picture.\n      </p>\n      <div style={pageStyle.table}>\n        <div style={pageStyle.row}>\n          <div style={pageStyle.column}>\n            <strong>Fast Shutter Speed:</strong>\n          </div>\n          <div style={pageStyle.column}>\n            <strong>Slow Shutter Speed:</strong>\n          </div>\n        </div>\n        <div style={pageStyle.row}>\n          <div style={pageStyle.column}>\n            Clearer subjects when they are moving. Darker picture because less\n            light can enter your camera.\n          </div>\n          <div style={pageStyle.column}>\n            Blurrier subjects when they are moving. Brighter pictures because\n            more light can enter your camera.\n          </div>\n        </div>\n      </div>\n      <p>\n        A shutter speed of 1/60 is the lowest speed you can get for a bright\n        photo that isn't noticeably blurry.\n      </p>\n    </div>\n  );\n};\n\nconst Aperture = () => {\n  return (\n    <div>\n      <h3>Aperture</h3>\n      <p>\n        The <strong>Aperture</strong> is the camera lens' opening that allows\n        light in. The measurement of that opening is called the{\" \"}\n        <strong>F-Stop</strong>. The Aperture and F-Stop are inversely\n        proportional.\n      </p>\n      <div style={pageStyle.table}>\n        <div style={pageStyle.row}>\n          <div style={pageStyle.column}>\n            <strong>Low F-Stop / High Aperture:</strong>\n          </div>\n          <div style={pageStyle.column}>\n            <strong>High F-Stop / Low Aperture:</strong>\n          </div>\n        </div>\n        <div style={pageStyle.row}>\n          <div style={pageStyle.column}>\n            Your Depth of Field is very narrow; your pictures will be brighter\n            and will have foreground and background blur.\n          </div>\n          <div style={pageStyle.column}>\n            Your Depth of Field is very wide; your pictures will be darker but\n            will have less blurred backgrounds and foregrounds.\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nconst ISO = () => {\n  return (\n    <div>\n      <h3>ISO</h3>\n      <p>\n        Your camera's <strong>ISO</strong> is a measure of how sensitive your\n        camera's sensors are to light.\n      </p>\n      <p>\n        Increasing your camera's ISO makes your pictures brighter, but it also\n        increases their <strong>noise</strong>, or their grainy-ness. This is\n        why night photos, which usually are taken with high ISO, have black dots\n        when you look closely.\n      </p>\n      <div style={pageStyle.table}>\n        <div style={pageStyle.row}>\n          <div style={pageStyle.column}>\n            <strong>Low ISO:</strong>\n          </div>\n          <div style={pageStyle.column}>\n            <strong>High ISO:</strong>\n          </div>\n        </div>\n        <div style={pageStyle.row}>\n          <div style={pageStyle.column}>\n            Your camera's sensors are not very sensitive, reducing overall\n            brightness. This makes your pictures less noisy though.\n          </div>\n          <div style={pageStyle.column}>\n            Your camera's sensors are very sensitive to light, meaning brighter\n            images. However, this make your pictures more noisy.\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport { Home, Aperture, ShutterSpeed, ISO };",
                  "solvedContent": null
                },
                {
                  "name": "navigation.jsx",
                  "codeLanguage": "jsx",
                  "content": "import React from \"react\";\nimport { navStyle } from \"./styles.jsx\";\n\nconst Navigation = (props) => {\n  return (\n    <nav style={navStyle.nav}>\n      <button style={navStyle.navLink}>Home</button>\n      <button style={navStyle.navLink}>Aperture</button>\n      <button style={navStyle.navLink}>Shutter Speed</button>\n      <button style={navStyle.navLink}>ISO</button>\n    </nav>\n  );\n};\n\nexport default Navigation;",
                  "solvedContent": null
                },
                {
                  "name": "styles.jsx",
                  "codeLanguage": "jsx",
                  "content": "const wrapperStyle = {\n  wrapper: {\n    width: \"100%\",\n    fontFamily: \"Times New Roman, Verdana, Arial, sans-serif\",\n    fontSize: 16,\n    padding: 16,\n    boxSizing: \"border-box\",\n    textAlign: \"center\",\n  },\n};\n\nconst navStyle = {\n  nav: {\n    textAlign: \"center\",\n    display: \"flex\",\n    flexDirection: \"row\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    flexWrap: \"nowrap\",\n  },\n  navLink: {\n    flexBasis: \"100\",\n    flexShrink: \"1\",\n    margin: 2,\n    paddingLeft: 8,\n    paddingRight: 8,\n    paddingTop: 4,\n    paddingBottom: 4,\n    fontSize: 12,\n  },\n};\n\nconst pageStyle = {\n  table: {\n    width: \"100%\",\n    display: \"flex\",\n    flexDirection: \"column\",\n    flexWrap: \"nowrap\",\n    justifyContent: \"flex-start\",\n    alignItems: \"stretch\",\n  },\n  row: {\n    width: \"100%\",\n    marginBottom: 4,\n    display: \"flex\",\n    flexDirection: \"row\",\n    flexWrap: \"nowrap\",\n    justifyContent: \"space-between\",\n    alignItems: \"flex-start\",\n  },\n  column: {\n    flexBasis: \"50%\",\n    flexShrink: 1,\n    flexGrow: 0,\n    marginLeft: 4,\n    marginRight: 4,\n  },\n};\n\nexport { wrapperStyle, navStyle, pageStyle };",
                  "solvedContent": null
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Step 3 - BrowserRouter, Routes, Route",
            "id": 114681,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Avec `react-dom-router` importé, la prochaine étape consiste à ajouter les composants nécessaires de `react-router-dom` dans `App`.\n\n1. Dans `App`, enveloppe tout le JSX existant dans un nouveau composant wrapper `<BrowserRouter>`.\n2. Sous l'en-tête `<h1>`, enveloppe le composant `<Home />` avec un nouveau composant wrapper `<Routes>`.\n3. Remplace `<Home />` par le code suivant :\n```jsx\n<Route exact path=\"/\" element={ <Home /> } />\n```\n\n_Les changements pourraient ne pas être évidents lorsque nous terminons ces étapes. Cependant, si nous voyons toujours le contenu de `<Home />` après ces étapes, alors nous sommes sur la bonne voie._",
              "preselectedFileIndex": 1,
              "hasVisualOutput": true,
              "files": [
                {
                  "name": "index.html",
                  "codeLanguage": "html",
                  "content": "<!doctype html>\n<html>\n  <head>\n    <style>\n      html,\n      body {\n        margin: 0;\n        padding: 0;\n        background-color: #fefef1;\n      }\n      \n      a {\n        text-decoration: underline;\n        color: blue;\n      }\n      \n      a:hover {\n        cursor: pointer;\n      }\n    </style>\n    <script type=\"module\" src=\"./index.js\"></script>\n  </head>\n  <body>\n    <div id=\"root\"></div>\n  </body>\n</html>",
                  "solvedContent": null
                },
                {
                  "name": "index.jsx",
                  "codeLanguage": "jsx",
                  "content": "import React from \"react\";\nimport { createRoot } from \"react-dom/client\";\n\nimport { wrapperStyle } from \"./styles.jsx\";\nimport { Home, Aperture, ShutterSpeed, ISO } from \"./pages.jsx\";\nimport { BrowserRouter, Routes, Route } from \"react-router-dom\";\n\nconst App = () => {\n  return (\n    <div style={wrapperStyle.wrapper}>\n      <h1>Camera Tips</h1>\n      <Home />\n    </div>\n  );\n};\n\nconst rootElement = document.getElementById(\"root\");\nconst root = createRoot(rootElement);\nroot.render(<App />);\n\nexport default App;",
                  "solvedContent": "import React from \"react\";\nimport { createRoot } from \"react-dom/client\";\n\nimport { wrapperStyle } from \"./styles.jsx\";\nimport { Home, Aperture, ShutterSpeed, ISO } from \"./pages.jsx\";\nimport { BrowserRouter, Routes, Route } from \"react-router-dom\";\n\nconst App = () => {\n  return (\n    <BrowserRouter>\n      <div style={wrapperStyle.wrapper}>\n        <h1>Camera Tips</h1>\n        <Routes>\n          <Route exact path=\"/\" element={<Home />} />\n        </Routes>\n      </div>\n    </BrowserRouter>\n  );\n};\n\nconst rootElement = document.getElementById(\"root\");\nconst root = createRoot(rootElement);\nroot.render(<App />);\n\nexport default App;"
                },
                {
                  "name": "pages.jsx",
                  "codeLanguage": "jsx",
                  "content": "import React from \"react\";\nimport { pageStyle } from \"./styles\";\n\nconst Home = () => {\n  return (\n    <div>\n      <p>\n        Want a quick guide on how to take good photos? Confused about photo\n        terms? You've come to the right place!\n      </p>\n    </div>\n  );\n};\n\nconst ShutterSpeed = () => {\n  return (\n    <div>\n      <h3>Shutter Speed</h3>\n      <p>\n        <strong>Shutter Speed</strong> is how quickly your camera takes the\n        picture.\n      </p>\n      <div style={pageStyle.table}>\n        <div style={pageStyle.row}>\n          <div style={pageStyle.column}>\n            <strong>Fast Shutter Speed:</strong>\n          </div>\n          <div style={pageStyle.column}>\n            <strong>Slow Shutter Speed:</strong>\n          </div>\n        </div>\n        <div style={pageStyle.row}>\n          <div style={pageStyle.column}>\n            Clearer subjects when they are moving. Darker picture because less\n            light can enter your camera.\n          </div>\n          <div style={pageStyle.column}>\n            Blurrier subjects when they are moving. Brighter pictures because\n            more light can enter your camera.\n          </div>\n        </div>\n      </div>\n      <p>\n        A shutter speed of 1/60 is the lowest speed you can get for a bright\n        photo that isn't noticeably blurry.\n      </p>\n    </div>\n  );\n};\n\nconst Aperture = () => {\n  return (\n    <div>\n      <h3>Aperture</h3>\n      <p>\n        The <strong>Aperture</strong> is the camera lens' opening that allows\n        light in. The measurement of that opening is called the{\" \"}\n        <strong>F-Stop</strong>. The Aperture and F-Stop are inversely\n        proportional.\n      </p>\n      <div style={pageStyle.table}>\n        <div style={pageStyle.row}>\n          <div style={pageStyle.column}>\n            <strong>Low F-Stop / High Aperture:</strong>\n          </div>\n          <div style={pageStyle.column}>\n            <strong>High F-Stop / Low Aperture:</strong>\n          </div>\n        </div>\n        <div style={pageStyle.row}>\n          <div style={pageStyle.column}>\n            Your Depth of Field is very narrow; your pictures will be brighter\n            and will have foreground and background blur.\n          </div>\n          <div style={pageStyle.column}>\n            Your Depth of Field is very wide; your pictures will be darker but\n            will have less blurred backgrounds and foregrounds.\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nconst ISO = () => {\n  return (\n    <div>\n      <h3>ISO</h3>\n      <p>\n        Your camera's <strong>ISO</strong> is a measure of how sensitive your\n        camera's sensors are to light.\n      </p>\n      <p>\n        Increasing your camera's ISO makes your pictures brighter, but it also\n        increases their <strong>noise</strong>, or their grainy-ness. This is\n        why night photos, which usually are taken with high ISO, have black dots\n        when you look closely.\n      </p>\n      <div style={pageStyle.table}>\n        <div style={pageStyle.row}>\n          <div style={pageStyle.column}>\n            <strong>Low ISO:</strong>\n          </div>\n          <div style={pageStyle.column}>\n            <strong>High ISO:</strong>\n          </div>\n        </div>\n        <div style={pageStyle.row}>\n          <div style={pageStyle.column}>\n            Your camera's sensors are not very sensitive, reducing overall\n            brightness. This makes your pictures less noisy though.\n          </div>\n          <div style={pageStyle.column}>\n            Your camera's sensors are very sensitive to light, meaning brighter\n            images. However, this make your pictures more noisy.\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport { Home, Aperture, ShutterSpeed, ISO };",
                  "solvedContent": null
                },
                {
                  "name": "navigation.jsx",
                  "codeLanguage": "jsx",
                  "content": "import React from \"react\";\nimport { navStyle } from \"./styles.jsx\";\n\nconst Navigation = (props) => {\n  return (\n    <nav style={navStyle.nav}>\n      <button style={navStyle.navLink}>Home</button>\n      <button style={navStyle.navLink}>Aperture</button>\n      <button style={navStyle.navLink}>Shutter Speed</button>\n      <button style={navStyle.navLink}>ISO</button>\n    </nav>\n  );\n};\n\nexport default Navigation;",
                  "solvedContent": null
                },
                {
                  "name": "styles.jsx",
                  "codeLanguage": "jsx",
                  "content": "const wrapperStyle = {\n  wrapper: {\n    width: \"100%\",\n    fontFamily: \"Times New Roman, Verdana, Arial, sans-serif\",\n    fontSize: 16,\n    padding: 16,\n    boxSizing: \"border-box\",\n    textAlign: \"center\",\n  },\n};\n\nconst navStyle = {\n  nav: {\n    textAlign: \"center\",\n    display: \"flex\",\n    flexDirection: \"row\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    flexWrap: \"nowrap\",\n  },\n  navLink: {\n    flexBasis: \"100\",\n    flexShrink: \"1\",\n    margin: 2,\n    paddingLeft: 8,\n    paddingRight: 8,\n    paddingTop: 4,\n    paddingBottom: 4,\n    fontSize: 12,\n  },\n};\n\nconst pageStyle = {\n  table: {\n    width: \"100%\",\n    display: \"flex\",\n    flexDirection: \"column\",\n    flexWrap: \"nowrap\",\n    justifyContent: \"flex-start\",\n    alignItems: \"stretch\",\n  },\n  row: {\n    width: \"100%\",\n    marginBottom: 4,\n    display: \"flex\",\n    flexDirection: \"row\",\n    flexWrap: \"nowrap\",\n    justifyContent: \"space-between\",\n    alignItems: \"flex-start\",\n  },\n  column: {\n    flexBasis: \"50%\",\n    flexShrink: 1,\n    flexGrow: 0,\n    marginLeft: 4,\n    marginRight: 4,\n  },\n};\n\nexport { wrapperStyle, navStyle, pageStyle };",
                  "solvedContent": null
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Step 4 - <Route />",
            "id": 114682,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Dans `react-router-dom`, nous voulons contrôler quel JSX apparaît en fonction du lien URL de la page web. Chaque chemin URL possible est écrit comme un `<Route>`, avec des attributs `path` et `element` complets.\n\nLes attributs `path` et `element` fonctionnent ensemble pour indiquer à l'application quoi rendre. Si l'URL actuelle des pages sélectionnées correspond au `path`, alors le JSX fourni dans `element` sera rendu.\n\nAjoutons un autre chemin que `react-dom-router` devra suivre : `/aperture`.\n\n1. Dans le composant `<Routes>`, ajoute un nouveau composant `<Route>` au-dessus de la route `Home` existante avec les attributs et valeurs suivants :\n    - `exact`\n    - `path=\"/aperture\"`\n    - `element={ <Aperture /> }`\n\n2. Pour vérifier si nous avons apporté les modifications appropriées, copie et colle l'URL de la fenêtre de prévisualisation dans un nouvel onglet de ton navigateur. Ensuite, fais ce qui suit :\n    - Assure-toi que l'URL ne contient rien après `el.mimo.run`. Confirme que la page `<Home />` apparaît.\n    - Ajoute `/aperture` à la fin de l'URL et charge la page. Confirme que la page affiche maintenant la page `<Aperture/>`. Consulte l'indice pour plus d'aide sur la façon de vérifier cela.",
              "preselectedFileIndex": 1,
              "hasVisualOutput": true,
              "files": [
                {
                  "name": "index.html",
                  "codeLanguage": "html",
                  "content": "<!doctype html>\n<html>\n  <head>\n    <style>\n      html,\n      body {\n        margin: 0;\n        padding: 0;\n        background-color: #fefef1;\n      }\n      \n      a {\n        text-decoration: underline;\n        color: blue;\n      }\n      \n      a:hover {\n        cursor: pointer;\n      }\n    </style>\n    <script type=\"module\" src=\"./index.js\"></script>\n  </head>\n  <body>\n    <div id=\"root\"></div>\n  </body>\n</html>",
                  "solvedContent": null
                },
                {
                  "name": "index.jsx",
                  "codeLanguage": "jsx",
                  "content": "import React from \"react\";\nimport { createRoot } from \"react-dom/client\";\n\nimport { wrapperStyle } from \"./styles.jsx\";\nimport { Home, Aperture, ShutterSpeed, ISO } from \"./pages.jsx\";\nimport { BrowserRouter, Routes, Route } from \"react-router-dom\";\n\nconst App = () => {\n  return (\n    <BrowserRouter>\n      <div style={wrapperStyle.wrapper}>\n        <h1>Camera Tips</h1>\n        <Routes>\n          <Route exact path=\"/\" element={<Home />} />\n        </Routes>\n      </div>\n    </BrowserRouter>\n  );\n};\n\nconst rootElement = document.getElementById(\"root\");\nconst root = createRoot(rootElement);\nroot.render(<App />);\n\nexport default App;",
                  "solvedContent": "import React from \"react\";\nimport { createRoot } from \"react-dom/client\";\n\nimport { wrapperStyle } from \"./styles.jsx\";\nimport { Home, Aperture, ShutterSpeed, ISO } from \"./pages.jsx\";\nimport { BrowserRouter, Routes, Route } from \"react-router-dom\";\n\nconst App = () => {\n  return (\n    <BrowserRouter>\n      <div style={wrapperStyle.wrapper}>\n        <h1>Camera Tips</h1>\n        <Routes>\n          <Route exact path=\"/aperture\" element={<Aperture />} />\n          <Route exact path=\"/\" element={<Home />} />\n        </Routes>\n      </div>\n    </BrowserRouter>\n  );\n};\n\nconst rootElement = document.getElementById(\"root\");\nconst root = createRoot(rootElement);\nroot.render(<App />);\n\nexport default App;"
                },
                {
                  "name": "pages.jsx",
                  "codeLanguage": "jsx",
                  "content": "import React from \"react\";\nimport { pageStyle } from \"./styles\";\n\nconst Home = () => {\n  return (\n    <div>\n      <p>\n        Want a quick guide on how to take good photos? Confused about photo\n        terms? You've come to the right place!\n      </p>\n    </div>\n  );\n};\n\nconst ShutterSpeed = () => {\n  return (\n    <div>\n      <h3>Shutter Speed</h3>\n      <p>\n        <strong>Shutter Speed</strong> is how quickly your camera takes the\n        picture.\n      </p>\n      <div style={pageStyle.table}>\n        <div style={pageStyle.row}>\n          <div style={pageStyle.column}>\n            <strong>Fast Shutter Speed:</strong>\n          </div>\n          <div style={pageStyle.column}>\n            <strong>Slow Shutter Speed:</strong>\n          </div>\n        </div>\n        <div style={pageStyle.row}>\n          <div style={pageStyle.column}>\n            Clearer subjects when they are moving. Darker picture because less\n            light can enter your camera.\n          </div>\n          <div style={pageStyle.column}>\n            Blurrier subjects when they are moving. Brighter pictures because\n            more light can enter your camera.\n          </div>\n        </div>\n      </div>\n      <p>\n        A shutter speed of 1/60 is the lowest speed you can get for a bright\n        photo that isn't noticeably blurry.\n      </p>\n    </div>\n  );\n};\n\nconst Aperture = () => {\n  return (\n    <div>\n      <h3>Aperture</h3>\n      <p>\n        The <strong>Aperture</strong> is the camera lens' opening that allows\n        light in. The measurement of that opening is called the{\" \"}\n        <strong>F-Stop</strong>. The Aperture and F-Stop are inversely\n        proportional.\n      </p>\n      <div style={pageStyle.table}>\n        <div style={pageStyle.row}>\n          <div style={pageStyle.column}>\n            <strong>Low F-Stop / High Aperture:</strong>\n          </div>\n          <div style={pageStyle.column}>\n            <strong>High F-Stop / Low Aperture:</strong>\n          </div>\n        </div>\n        <div style={pageStyle.row}>\n          <div style={pageStyle.column}>\n            Your Depth of Field is very narrow; your pictures will be brighter\n            and will have foreground and background blur.\n          </div>\n          <div style={pageStyle.column}>\n            Your Depth of Field is very wide; your pictures will be darker but\n            will have less blurred backgrounds and foregrounds.\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nconst ISO = () => {\n  return (\n    <div>\n      <h3>ISO</h3>\n      <p>\n        Your camera's <strong>ISO</strong> is a measure of how sensitive your\n        camera's sensors are to light.\n      </p>\n      <p>\n        Increasing your camera's ISO makes your pictures brighter, but it also\n        increases their <strong>noise</strong>, or their grainy-ness. This is\n        why night photos, which usually are taken with high ISO, have black dots\n        when you look closely.\n      </p>\n      <div style={pageStyle.table}>\n        <div style={pageStyle.row}>\n          <div style={pageStyle.column}>\n            <strong>Low ISO:</strong>\n          </div>\n          <div style={pageStyle.column}>\n            <strong>High ISO:</strong>\n          </div>\n        </div>\n        <div style={pageStyle.row}>\n          <div style={pageStyle.column}>\n            Your camera's sensors are not very sensitive, reducing overall\n            brightness. This makes your pictures less noisy though.\n          </div>\n          <div style={pageStyle.column}>\n            Your camera's sensors are very sensitive to light, meaning brighter\n            images. However, this make your pictures more noisy.\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport { Home, Aperture, ShutterSpeed, ISO };",
                  "solvedContent": null
                },
                {
                  "name": "navigation.jsx",
                  "codeLanguage": "jsx",
                  "content": "import React from \"react\";\nimport { navStyle } from \"./styles.jsx\";\n\nconst Navigation = (props) => {\n  return (\n    <nav style={navStyle.nav}>\n      <button style={navStyle.navLink}>Home</button>\n      <button style={navStyle.navLink}>Aperture</button>\n      <button style={navStyle.navLink}>Shutter Speed</button>\n      <button style={navStyle.navLink}>ISO</button>\n    </nav>\n  );\n};\n\nexport default Navigation;",
                  "solvedContent": null
                },
                {
                  "name": "styles.jsx",
                  "codeLanguage": "jsx",
                  "content": "const wrapperStyle = {\n  wrapper: {\n    width: \"100%\",\n    fontFamily: \"Times New Roman, Verdana, Arial, sans-serif\",\n    fontSize: 16,\n    padding: 16,\n    boxSizing: \"border-box\",\n    textAlign: \"center\",\n  },\n};\n\nconst navStyle = {\n  nav: {\n    textAlign: \"center\",\n    display: \"flex\",\n    flexDirection: \"row\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    flexWrap: \"nowrap\",\n  },\n  navLink: {\n    flexBasis: \"100\",\n    flexShrink: \"1\",\n    margin: 2,\n    paddingLeft: 8,\n    paddingRight: 8,\n    paddingTop: 4,\n    paddingBottom: 4,\n    fontSize: 12,\n  },\n};\n\nconst pageStyle = {\n  table: {\n    width: \"100%\",\n    display: \"flex\",\n    flexDirection: \"column\",\n    flexWrap: \"nowrap\",\n    justifyContent: \"flex-start\",\n    alignItems: \"stretch\",\n  },\n  row: {\n    width: \"100%\",\n    marginBottom: 4,\n    display: \"flex\",\n    flexDirection: \"row\",\n    flexWrap: \"nowrap\",\n    justifyContent: \"space-between\",\n    alignItems: \"flex-start\",\n  },\n  column: {\n    flexBasis: \"50%\",\n    flexShrink: 1,\n    flexGrow: 0,\n    marginLeft: 4,\n    marginRight: 4,\n  },\n};\n\nexport { wrapperStyle, navStyle, pageStyle };",
                  "solvedContent": null
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Step 5 - What's <Routes />?",
            "id": 114683,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "`<Routes>` rend seulement un des composants `<Route>` à l'intérieur. L'ordre des composants `<Route>` à l'intérieur de `<Routes>` est important : le premier `<Route>` qui correspond à l'URL actuelle est rendu, et tous les autres composants `<Route>` sont ignorés.\n\n1. Dans le composant `<Routes>`, ajoute un nouveau composant `<Route>` entre les routes \"Home\" et \"Aperture\" avec les attributs suivants : `exact`, `path=\"/shutterspeed\"` et `element={ <ShutterSpeed /> }`.\n2. Pour vérifier tes modifications, copie et colle l'URL de la fenêtre de prévisualisation dans un **nouvel onglet de ton navigateur**. Ensuite, fais ce qui suit :\n  - Assure-toi que l'URL ne contient rien après `el.mimo.run`. Confirme que la page `<Home />` apparaît.\n  - Ajoute `/shutterspeed` à la fin de l'URL et charge la page. Confirme que la page affiche maintenant la page `<Shutterspeed/>`.\n  - Essaie n'importe quelle autre fin d'URL. Confirme que la page est vide.\nConsulte le bloc d'indices pour obtenir une aide supplémentaire sur cette vérification.",
              "preselectedFileIndex": 1,
              "hasVisualOutput": true,
              "files": [
                {
                  "name": "index.html",
                  "codeLanguage": "html",
                  "content": "<!doctype html>\n<html>\n  <head>\n    <style>\n      html,\n      body {\n        margin: 0;\n        padding: 0;\n        background-color: #fefef1;\n      }\n      \n      a {\n        text-decoration: underline;\n        color: blue;\n      }\n      \n      a:hover {\n        cursor: pointer;\n      }\n    </style>\n    <script type=\"module\" src=\"./index.js\"></script>\n  </head>\n  <body>\n    <div id=\"root\"></div>\n  </body>\n</html>",
                  "solvedContent": null
                },
                {
                  "name": "index.jsx",
                  "codeLanguage": "jsx",
                  "content": "import React from \"react\";\nimport { createRoot } from \"react-dom/client\";\n\nimport { wrapperStyle } from \"./styles.jsx\";\nimport { Home, Aperture, ShutterSpeed, ISO } from \"./pages.jsx\";\nimport { BrowserRouter, Routes, Route } from \"react-router-dom\";\n\nconst App = () => {\n  return (\n    <BrowserRouter>\n      <div style={wrapperStyle.wrapper}>\n        <h1>Camera Tips</h1>\n        <Routes>\n          <Route exact path=\"/aperture\" element={<Aperture />} />\n          <Route exact path=\"/\" element={<Home />} />\n        </Routes>\n      </div>\n    </BrowserRouter>\n  );\n};\n\nconst rootElement = document.getElementById(\"root\");\nconst root = createRoot(rootElement);\nroot.render(<App />);\n\nexport default App;",
                  "solvedContent": "import React from \"react\";\nimport { createRoot } from \"react-dom/client\";\n\nimport { wrapperStyle } from \"./styles.jsx\";\nimport { Home, Aperture, ShutterSpeed, ISO } from \"./pages.jsx\";\nimport { BrowserRouter, Routes, Route } from \"react-router-dom\";\n\nconst App = () => {\n  return (\n    <BrowserRouter>\n      <div style={wrapperStyle.wrapper}>\n        <h1>Camera Tips</h1>\n        <Routes>\n          <Route exact path=\"/aperture\" element={<Aperture />} />\n          <Route exact path=\"/shutterspeed\" element={<ShutterSpeed />} />\n          <Route exact path=\"/\" element={<Home />} />\n        </Routes>\n      </div>\n    </BrowserRouter>\n  );\n};\n\nconst rootElement = document.getElementById(\"root\");\nconst root = createRoot(rootElement);\nroot.render(<App />);\n\nexport default App;"
                },
                {
                  "name": "pages.jsx",
                  "codeLanguage": "jsx",
                  "content": "import React from \"react\";\nimport { pageStyle } from \"./styles\";\n\nconst Home = () => {\n  return (\n    <div>\n      <p>\n        Want a quick guide on how to take good photos? Confused about photo\n        terms? You've come to the right place!\n      </p>\n    </div>\n  );\n};\n\nconst ShutterSpeed = () => {\n  return (\n    <div>\n      <h3>Shutter Speed</h3>\n      <p>\n        <strong>Shutter Speed</strong> is how quickly your camera takes the\n        picture.\n      </p>\n      <div style={pageStyle.table}>\n        <div style={pageStyle.row}>\n          <div style={pageStyle.column}>\n            <strong>Fast Shutter Speed:</strong>\n          </div>\n          <div style={pageStyle.column}>\n            <strong>Slow Shutter Speed:</strong>\n          </div>\n        </div>\n        <div style={pageStyle.row}>\n          <div style={pageStyle.column}>\n            Clearer subjects when they are moving. Darker picture because less\n            light can enter your camera.\n          </div>\n          <div style={pageStyle.column}>\n            Blurrier subjects when they are moving. Brighter pictures because\n            more light can enter your camera.\n          </div>\n        </div>\n      </div>\n      <p>\n        A shutter speed of 1/60 is the lowest speed you can get for a bright\n        photo that isn't noticeably blurry.\n      </p>\n    </div>\n  );\n};\n\nconst Aperture = () => {\n  return (\n    <div>\n      <h3>Aperture</h3>\n      <p>\n        The <strong>Aperture</strong> is the camera lens' opening that allows\n        light in. The measurement of that opening is called the{\" \"}\n        <strong>F-Stop</strong>. The Aperture and F-Stop are inversely\n        proportional.\n      </p>\n      <div style={pageStyle.table}>\n        <div style={pageStyle.row}>\n          <div style={pageStyle.column}>\n            <strong>Low F-Stop / High Aperture:</strong>\n          </div>\n          <div style={pageStyle.column}>\n            <strong>High F-Stop / Low Aperture:</strong>\n          </div>\n        </div>\n        <div style={pageStyle.row}>\n          <div style={pageStyle.column}>\n            Your Depth of Field is very narrow; your pictures will be brighter\n            and will have foreground and background blur.\n          </div>\n          <div style={pageStyle.column}>\n            Your Depth of Field is very wide; your pictures will be darker but\n            will have less blurred backgrounds and foregrounds.\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nconst ISO = () => {\n  return (\n    <div>\n      <h3>ISO</h3>\n      <p>\n        Your camera's <strong>ISO</strong> is a measure of how sensitive your\n        camera's sensors are to light.\n      </p>\n      <p>\n        Increasing your camera's ISO makes your pictures brighter, but it also\n        increases their <strong>noise</strong>, or their grainy-ness. This is\n        why night photos, which usually are taken with high ISO, have black dots\n        when you look closely.\n      </p>\n      <div style={pageStyle.table}>\n        <div style={pageStyle.row}>\n          <div style={pageStyle.column}>\n            <strong>Low ISO:</strong>\n          </div>\n          <div style={pageStyle.column}>\n            <strong>High ISO:</strong>\n          </div>\n        </div>\n        <div style={pageStyle.row}>\n          <div style={pageStyle.column}>\n            Your camera's sensors are not very sensitive, reducing overall\n            brightness. This makes your pictures less noisy though.\n          </div>\n          <div style={pageStyle.column}>\n            Your camera's sensors are very sensitive to light, meaning brighter\n            images. However, this make your pictures more noisy.\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport { Home, Aperture, ShutterSpeed, ISO };",
                  "solvedContent": null
                },
                {
                  "name": "navigation.jsx",
                  "codeLanguage": "jsx",
                  "content": "import React from \"react\";\nimport { navStyle } from \"./styles.jsx\";\n\nconst Navigation = (props) => {\n  return (\n    <nav style={navStyle.nav}>\n      <button style={navStyle.navLink}>Home</button>\n      <button style={navStyle.navLink}>Aperture</button>\n      <button style={navStyle.navLink}>Shutter Speed</button>\n      <button style={navStyle.navLink}>ISO</button>\n    </nav>\n  );\n};\n\nexport default Navigation;",
                  "solvedContent": null
                },
                {
                  "name": "styles.jsx",
                  "codeLanguage": "jsx",
                  "content": "const wrapperStyle = {\n  wrapper: {\n    width: \"100%\",\n    fontFamily: \"Times New Roman, Verdana, Arial, sans-serif\",\n    fontSize: 16,\n    padding: 16,\n    boxSizing: \"border-box\",\n    textAlign: \"center\",\n  },\n};\n\nconst navStyle = {\n  nav: {\n    textAlign: \"center\",\n    display: \"flex\",\n    flexDirection: \"row\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    flexWrap: \"nowrap\",\n  },\n  navLink: {\n    flexBasis: \"100\",\n    flexShrink: \"1\",\n    margin: 2,\n    paddingLeft: 8,\n    paddingRight: 8,\n    paddingTop: 4,\n    paddingBottom: 4,\n    fontSize: 12,\n  },\n};\n\nconst pageStyle = {\n  table: {\n    width: \"100%\",\n    display: \"flex\",\n    flexDirection: \"column\",\n    flexWrap: \"nowrap\",\n    justifyContent: \"flex-start\",\n    alignItems: \"stretch\",\n  },\n  row: {\n    width: \"100%\",\n    marginBottom: 4,\n    display: \"flex\",\n    flexDirection: \"row\",\n    flexWrap: \"nowrap\",\n    justifyContent: \"space-between\",\n    alignItems: \"flex-start\",\n  },\n  column: {\n    flexBasis: \"50%\",\n    flexShrink: 1,\n    flexGrow: 0,\n    marginLeft: 4,\n    marginRight: 4,\n  },\n};\n\nexport { wrapperStyle, navStyle, pageStyle };",
                  "solvedContent": null
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Step 6 - Final <Route />",
            "id": 114684,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Jusqu'à présent, nous avons trois composants `<Route>`. Nous devons ajouter la page finale : `/iso`.\n\n1. Dans le composant `<Routes>`, ajoute un nouveau composant `<Route>` entre les routes `Shutter Speed` et `Home` avec les attributs suivants :\n    * `exact`\n    * `path=\"/iso\"`\n    * `element={ <ISO /> }`",
              "preselectedFileIndex": 1,
              "hasVisualOutput": true,
              "files": [
                {
                  "name": "index.html",
                  "codeLanguage": "html",
                  "content": "<!doctype html>\n<html>\n  <head>\n    <style>\n      html,\n      body {\n        margin: 0;\n        padding: 0;\n        background-color: #fefef1;\n      }\n      \n      a {\n        text-decoration: underline;\n        color: blue;\n      }\n      \n      a:hover {\n        cursor: pointer;\n      }\n    </style>\n    <script type=\"module\" src=\"./index.js\"></script>\n  </head>\n  <body>\n    <div id=\"root\"></div>\n  </body>\n</html>",
                  "solvedContent": null
                },
                {
                  "name": "index.jsx",
                  "codeLanguage": "jsx",
                  "content": "import React from \"react\";\nimport { createRoot } from \"react-dom/client\";\n\nimport { wrapperStyle } from \"./styles.jsx\";\nimport { Home, Aperture, ShutterSpeed, ISO } from \"./pages.jsx\";\nimport { BrowserRouter, Routes, Route } from \"react-router-dom\";\n\nconst App = () => {\n  return (\n    <BrowserRouter>\n      <div style={wrapperStyle.wrapper}>\n        <h1>Camera Tips</h1>\n        <Routes>\n          <Route exact path=\"/aperture\" element={<Aperture />} />\n          <Route exact path=\"/shutterspeed\" element={<ShutterSpeed />} />\n          <Route exact path=\"/\" element={<Home />} />\n        </Routes>\n      </div>\n    </BrowserRouter>\n  );\n};\n\nconst rootElement = document.getElementById(\"root\");\nconst root = createRoot(rootElement);\nroot.render(<App />);\n\nexport default App;",
                  "solvedContent": "import React from \"react\";\nimport { createRoot } from \"react-dom/client\";\n\nimport { wrapperStyle } from \"./styles.jsx\";\nimport { Home, Aperture, ShutterSpeed, ISO } from \"./pages.jsx\";\nimport { BrowserRouter, Routes, Route } from \"react-router-dom\";\n\nconst App = () => {\n  return (\n    <BrowserRouter>\n      <div style={wrapperStyle.wrapper}>\n        <h1>Camera Tips</h1>\n        <Routes>\n          <Route exact path=\"/aperture\" element={<Aperture />} />\n          <Route exact path=\"/shutterspeed\" element={<ShutterSpeed />} />\n          <Route exact path=\"/iso\" element={<ISO />} />\n          <Route exact path=\"/\" element={<Home />} />\n        </Routes>\n      </div>\n    </BrowserRouter>\n  );\n};\n\nconst rootElement = document.getElementById(\"root\");\nconst root = createRoot(rootElement);\nroot.render(<App />);\n\nexport default App;"
                },
                {
                  "name": "pages.jsx",
                  "codeLanguage": "jsx",
                  "content": "import React from \"react\";\nimport { pageStyle } from \"./styles\";\n\nconst Home = () => {\n  return (\n    <div>\n      <p>\n        Want a quick guide on how to take good photos? Confused about photo\n        terms? You've come to the right place!\n      </p>\n    </div>\n  );\n};\n\nconst ShutterSpeed = () => {\n  return (\n    <div>\n      <h3>Shutter Speed</h3>\n      <p>\n        <strong>Shutter Speed</strong> is how quickly your camera takes the\n        picture.\n      </p>\n      <div style={pageStyle.table}>\n        <div style={pageStyle.row}>\n          <div style={pageStyle.column}>\n            <strong>Fast Shutter Speed:</strong>\n          </div>\n          <div style={pageStyle.column}>\n            <strong>Slow Shutter Speed:</strong>\n          </div>\n        </div>\n        <div style={pageStyle.row}>\n          <div style={pageStyle.column}>\n            Clearer subjects when they are moving. Darker picture because less\n            light can enter your camera.\n          </div>\n          <div style={pageStyle.column}>\n            Blurrier subjects when they are moving. Brighter pictures because\n            more light can enter your camera.\n          </div>\n        </div>\n      </div>\n      <p>\n        A shutter speed of 1/60 is the lowest speed you can get for a bright\n        photo that isn't noticeably blurry.\n      </p>\n    </div>\n  );\n};\n\nconst Aperture = () => {\n  return (\n    <div>\n      <h3>Aperture</h3>\n      <p>\n        The <strong>Aperture</strong> is the camera lens' opening that allows\n        light in. The measurement of that opening is called the{\" \"}\n        <strong>F-Stop</strong>. The Aperture and F-Stop are inversely\n        proportional.\n      </p>\n      <div style={pageStyle.table}>\n        <div style={pageStyle.row}>\n          <div style={pageStyle.column}>\n            <strong>Low F-Stop / High Aperture:</strong>\n          </div>\n          <div style={pageStyle.column}>\n            <strong>High F-Stop / Low Aperture:</strong>\n          </div>\n        </div>\n        <div style={pageStyle.row}>\n          <div style={pageStyle.column}>\n            Your Depth of Field is very narrow; your pictures will be brighter\n            and will have foreground and background blur.\n          </div>\n          <div style={pageStyle.column}>\n            Your Depth of Field is very wide; your pictures will be darker but\n            will have less blurred backgrounds and foregrounds.\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nconst ISO = () => {\n  return (\n    <div>\n      <h3>ISO</h3>\n      <p>\n        Your camera's <strong>ISO</strong> is a measure of how sensitive your\n        camera's sensors are to light.\n      </p>\n      <p>\n        Increasing your camera's ISO makes your pictures brighter, but it also\n        increases their <strong>noise</strong>, or their grainy-ness. This is\n        why night photos, which usually are taken with high ISO, have black dots\n        when you look closely.\n      </p>\n      <div style={pageStyle.table}>\n        <div style={pageStyle.row}>\n          <div style={pageStyle.column}>\n            <strong>Low ISO:</strong>\n          </div>\n          <div style={pageStyle.column}>\n            <strong>High ISO:</strong>\n          </div>\n        </div>\n        <div style={pageStyle.row}>\n          <div style={pageStyle.column}>\n            Your camera's sensors are not very sensitive, reducing overall\n            brightness. This makes your pictures less noisy though.\n          </div>\n          <div style={pageStyle.column}>\n            Your camera's sensors are very sensitive to light, meaning brighter\n            images. However, this make your pictures more noisy.\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport { Home, Aperture, ShutterSpeed, ISO };",
                  "solvedContent": null
                },
                {
                  "name": "navigation.jsx",
                  "codeLanguage": "jsx",
                  "content": "import React from \"react\";\nimport { navStyle } from \"./styles.jsx\";\n\nconst Navigation = (props) => {\n  return (\n    <nav style={navStyle.nav}>\n      <button style={navStyle.navLink}>Home</button>\n      <button style={navStyle.navLink}>Aperture</button>\n      <button style={navStyle.navLink}>Shutter Speed</button>\n      <button style={navStyle.navLink}>ISO</button>\n    </nav>\n  );\n};\n\nexport default Navigation;",
                  "solvedContent": null
                },
                {
                  "name": "styles.jsx",
                  "codeLanguage": "jsx",
                  "content": "const wrapperStyle = {\n  wrapper: {\n    width: \"100%\",\n    fontFamily: \"Times New Roman, Verdana, Arial, sans-serif\",\n    fontSize: 16,\n    padding: 16,\n    boxSizing: \"border-box\",\n    textAlign: \"center\",\n  },\n};\n\nconst navStyle = {\n  nav: {\n    textAlign: \"center\",\n    display: \"flex\",\n    flexDirection: \"row\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    flexWrap: \"nowrap\",\n  },\n  navLink: {\n    flexBasis: \"100\",\n    flexShrink: \"1\",\n    margin: 2,\n    paddingLeft: 8,\n    paddingRight: 8,\n    paddingTop: 4,\n    paddingBottom: 4,\n    fontSize: 12,\n  },\n};\n\nconst pageStyle = {\n  table: {\n    width: \"100%\",\n    display: \"flex\",\n    flexDirection: \"column\",\n    flexWrap: \"nowrap\",\n    justifyContent: \"flex-start\",\n    alignItems: \"stretch\",\n  },\n  row: {\n    width: \"100%\",\n    marginBottom: 4,\n    display: \"flex\",\n    flexDirection: \"row\",\n    flexWrap: \"nowrap\",\n    justifyContent: \"space-between\",\n    alignItems: \"flex-start\",\n  },\n  column: {\n    flexBasis: \"50%\",\n    flexShrink: 1,\n    flexGrow: 0,\n    marginLeft: 4,\n    marginRight: 4,\n  },\n};\n\nexport { wrapperStyle, navStyle, pageStyle };",
                  "solvedContent": null
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Step 7 - Import Navigation",
            "id": 114685,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Il est fatigant de manipuler directement l'URL pour changer de page. Nous avons besoin d'une barre de navigation pour sélectionner la page que nous voulons visiter. Nous avons déjà un composant `Navigation` avec des boutons de navigation, alors importons-le et ajoutons-le à `App`. Nous ferons en sorte que les boutons fonctionnent réellement dans la prochaine leçon.\n\n1. Importe le composant `Navigation` depuis `./navigation.jsx`.\n2. Ajoute `<Navigation />` au-dessus de l'en-tête `<h1>`.",
              "preselectedFileIndex": 1,
              "hasVisualOutput": true,
              "files": [
                {
                  "name": "index.html",
                  "codeLanguage": "html",
                  "content": "<!doctype html>\n<html>\n  <head>\n    <style>\n      html,\n      body {\n        margin: 0;\n        padding: 0;\n        background-color: #fefef1;\n      }\n      \n      a {\n        text-decoration: underline;\n        color: blue;\n      }\n      \n      a:hover {\n        cursor: pointer;\n      }\n    </style>\n    <script type=\"module\" src=\"./index.js\"></script>\n  </head>\n  <body>\n    <div id=\"root\"></div>\n  </body>\n</html>",
                  "solvedContent": null
                },
                {
                  "name": "index.jsx",
                  "codeLanguage": "jsx",
                  "content": "import React from \"react\";\nimport { createRoot } from \"react-dom/client\";\n\nimport { wrapperStyle } from \"./styles.jsx\";\nimport { Home, Aperture, ShutterSpeed, ISO } from \"./pages.jsx\";\nimport { BrowserRouter, Routes, Route } from \"react-router-dom\";\n\nconst App = () => {\n  return (\n    <BrowserRouter>\n      <div style={wrapperStyle.wrapper}>\n        <h1>Camera Tips</h1>\n        <Routes>\n          <Route exact path=\"/aperture\" element={<Aperture />} />\n          <Route exact path=\"/shutterspeed\" element={<ShutterSpeed />} />\n          <Route exact path=\"/iso\" element={<ISO />} />\n          <Route exact path=\"/\" element={<Home />} />\n        </Routes>\n      </div>\n    </BrowserRouter>\n  );\n};\n\nconst rootElement = document.getElementById(\"root\");\nconst root = createRoot(rootElement);\nroot.render(<App />);\n\nexport default App;",
                  "solvedContent": "import React from \"react\";\nimport { createRoot } from \"react-dom/client\";\n\nimport { wrapperStyle } from \"./styles.jsx\";\nimport { Home, Aperture, ShutterSpeed, ISO } from \"./pages.jsx\";\nimport Navigation from \"./navigation.jsx\";\nimport { BrowserRouter, Routes, Route } from \"react-router-dom\";\n\nconst App = () => {\n  return (\n    <BrowserRouter>\n      <div style={wrapperStyle.wrapper}>\n        <Navigation />\n        <h1>Camera Tips</h1>\n        <Routes>\n          <Route exact path=\"/aperture\" element={<Aperture />} />\n          <Route exact path=\"/shutterspeed\" element={<ShutterSpeed />} />\n          <Route exact path=\"/iso\" element={<ISO />} />\n          <Route exact path=\"/\" element={<Home />} />\n        </Routes>\n      </div>\n    </BrowserRouter>\n  );\n};\n\nconst rootElement = document.getElementById(\"root\");\nconst root = createRoot(rootElement);\nroot.render(<App />);\n\nexport default App;"
                },
                {
                  "name": "pages.jsx",
                  "codeLanguage": "jsx",
                  "content": "import React from \"react\";\nimport { pageStyle } from \"./styles\";\n\nconst Home = () => {\n  return (\n    <div>\n      <p>\n        Want a quick guide on how to take good photos? Confused about photo\n        terms? You've come to the right place!\n      </p>\n    </div>\n  );\n};\n\nconst ShutterSpeed = () => {\n  return (\n    <div>\n      <h3>Shutter Speed</h3>\n      <p>\n        <strong>Shutter Speed</strong> is how quickly your camera takes the\n        picture.\n      </p>\n      <div style={pageStyle.table}>\n        <div style={pageStyle.row}>\n          <div style={pageStyle.column}>\n            <strong>Fast Shutter Speed:</strong>\n          </div>\n          <div style={pageStyle.column}>\n            <strong>Slow Shutter Speed:</strong>\n          </div>\n        </div>\n        <div style={pageStyle.row}>\n          <div style={pageStyle.column}>\n            Clearer subjects when they are moving. Darker picture because less\n            light can enter your camera.\n          </div>\n          <div style={pageStyle.column}>\n            Blurrier subjects when they are moving. Brighter pictures because\n            more light can enter your camera.\n          </div>\n        </div>\n      </div>\n      <p>\n        A shutter speed of 1/60 is the lowest speed you can get for a bright\n        photo that isn't noticeably blurry.\n      </p>\n    </div>\n  );\n};\n\nconst Aperture = () => {\n  return (\n    <div>\n      <h3>Aperture</h3>\n      <p>\n        The <strong>Aperture</strong> is the camera lens' opening that allows\n        light in. The measurement of that opening is called the{\" \"}\n        <strong>F-Stop</strong>. The Aperture and F-Stop are inversely\n        proportional.\n      </p>\n      <div style={pageStyle.table}>\n        <div style={pageStyle.row}>\n          <div style={pageStyle.column}>\n            <strong>Low F-Stop / High Aperture:</strong>\n          </div>\n          <div style={pageStyle.column}>\n            <strong>High F-Stop / Low Aperture:</strong>\n          </div>\n        </div>\n        <div style={pageStyle.row}>\n          <div style={pageStyle.column}>\n            Your Depth of Field is very narrow; your pictures will be brighter\n            and will have foreground and background blur.\n          </div>\n          <div style={pageStyle.column}>\n            Your Depth of Field is very wide; your pictures will be darker but\n            will have less blurred backgrounds and foregrounds.\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nconst ISO = () => {\n  return (\n    <div>\n      <h3>ISO</h3>\n      <p>\n        Your camera's <strong>ISO</strong> is a measure of how sensitive your\n        camera's sensors are to light.\n      </p>\n      <p>\n        Increasing your camera's ISO makes your pictures brighter, but it also\n        increases their <strong>noise</strong>, or their grainy-ness. This is\n        why night photos, which usually are taken with high ISO, have black dots\n        when you look closely.\n      </p>\n      <div style={pageStyle.table}>\n        <div style={pageStyle.row}>\n          <div style={pageStyle.column}>\n            <strong>Low ISO:</strong>\n          </div>\n          <div style={pageStyle.column}>\n            <strong>High ISO:</strong>\n          </div>\n        </div>\n        <div style={pageStyle.row}>\n          <div style={pageStyle.column}>\n            Your camera's sensors are not very sensitive, reducing overall\n            brightness. This makes your pictures less noisy though.\n          </div>\n          <div style={pageStyle.column}>\n            Your camera's sensors are very sensitive to light, meaning brighter\n            images. However, this make your pictures more noisy.\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport { Home, Aperture, ShutterSpeed, ISO };",
                  "solvedContent": null
                },
                {
                  "name": "navigation.jsx",
                  "codeLanguage": "jsx",
                  "content": "import React from \"react\";\nimport { navStyle } from \"./styles.jsx\";\n\nconst Navigation = (props) => {\n  return (\n    <nav style={navStyle.nav}>\n      <button style={navStyle.navLink}>Home</button>\n      <button style={navStyle.navLink}>Aperture</button>\n      <button style={navStyle.navLink}>Shutter Speed</button>\n      <button style={navStyle.navLink}>ISO</button>\n    </nav>\n  );\n};\n\nexport default Navigation;",
                  "solvedContent": null
                },
                {
                  "name": "styles.jsx",
                  "codeLanguage": "jsx",
                  "content": "const wrapperStyle = {\n  wrapper: {\n    width: \"100%\",\n    fontFamily: \"Times New Roman, Verdana, Arial, sans-serif\",\n    fontSize: 16,\n    padding: 16,\n    boxSizing: \"border-box\",\n    textAlign: \"center\",\n  },\n};\n\nconst navStyle = {\n  nav: {\n    textAlign: \"center\",\n    display: \"flex\",\n    flexDirection: \"row\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    flexWrap: \"nowrap\",\n  },\n  navLink: {\n    flexBasis: \"100\",\n    flexShrink: \"1\",\n    margin: 2,\n    paddingLeft: 8,\n    paddingRight: 8,\n    paddingTop: 4,\n    paddingBottom: 4,\n    fontSize: 12,\n  },\n};\n\nconst pageStyle = {\n  table: {\n    width: \"100%\",\n    display: \"flex\",\n    flexDirection: \"column\",\n    flexWrap: \"nowrap\",\n    justifyContent: \"flex-start\",\n    alignItems: \"stretch\",\n  },\n  row: {\n    width: \"100%\",\n    marginBottom: 4,\n    display: \"flex\",\n    flexDirection: \"row\",\n    flexWrap: \"nowrap\",\n    justifyContent: \"space-between\",\n    alignItems: \"flex-start\",\n  },\n  column: {\n    flexBasis: \"50%\",\n    flexShrink: 1,\n    flexGrow: 0,\n    marginLeft: 4,\n    marginRight: 4,\n  },\n};\n\nexport { wrapperStyle, navStyle, pageStyle };",
                  "solvedContent": null
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Step 8: Adding Nav Capabilities",
            "id": 114687,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "En ce moment, cliquer sur les boutons `<Navigation>` n'a aucun effet. C'est parce que nous devons modifier les boutons pour qu'ils fonctionnent avec `react-router-dom`.\n\nDans une page web normale, nous utiliserions la balise `<a href=\"\">` pour créer des hyperliens et des éléments de navigation.\n\nLors de l'utilisation de `react-router-dom`, nous utilisons le composant `Link` à la place des balises `<a>`, car les balises `<a>` rechargeront la page alors que les composants `Link` ne le feront pas.\n\nLa première étape consiste à importer un autre composant de `react-router-dom`.\n\n1. À l'intérieur de `navigation.jsx`, importe `Link` de `react-router-dom`.",
              "preselectedFileIndex": 3,
              "hasVisualOutput": true,
              "files": [
                {
                  "name": "index.html",
                  "codeLanguage": "html",
                  "content": "<!doctype html>\n<html>\n  <head>\n    <style>\n      html,\n      body {\n        margin: 0;\n        padding: 0;\n        background-color: #fefef1;\n      }\n      \n      a {\n        text-decoration: underline;\n        color: blue;\n      }\n      \n      a:hover {\n        cursor: pointer;\n      }\n    </style>\n    <script type=\"module\" src=\"./index.js\"></script>\n  </head>\n  <body>\n    <div id=\"root\"></div>\n  </body>\n</html>",
                  "solvedContent": null
                },
                {
                  "name": "index.jsx",
                  "codeLanguage": "jsx",
                  "content": "import React from \"react\";\nimport { createRoot } from \"react-dom/client\";\n\n\nimport { wrapperStyle } from \"./styles.jsx\";\nimport { Home, Aperture, ShutterSpeed, ISO } from \"./pages.jsx\";\nimport Navigation from \"./navigation.jsx\";\nimport { BrowserRouter, Routes, Route } from \"react-router-dom\";\n\nconst App = () => {\n  return (\n    <BrowserRouter>\n      <div style={wrapperStyle.wrapper}>\n        <Navigation />\n        <h1>Camera Tips</h1>\n        <Routes>\n          <Route exact path=\"/aperture\" element={<Aperture />} />\n          <Route exact path=\"/shutterspeed\" element={<ShutterSpeed />} />\n          <Route exact path=\"/iso\" element={<ISO />} />\n          <Route exact path=\"/\" element={<Home />} />\n        </Routes>\n      </div>\n    </BrowserRouter>\n  );\n};\n\nconst rootElement = document.getElementById(\"root\");\nconst root = createRoot(rootElement);\nroot.render(<App />);\n\nexport default App;",
                  "solvedContent": null
                },
                {
                  "name": "pages.jsx",
                  "codeLanguage": "jsx",
                  "content": "import React from \"react\";\nimport { pageStyle } from \"./styles\";\n\nconst Home = () => {\n  return (\n    <div>\n      <p>\n        Want a quick guide on how to take good photos? Confused about photo\n        terms? You've come to the right place!\n      </p>\n    </div>\n  );\n};\n\nconst ShutterSpeed = () => {\n  return (\n    <div>\n      <h3>Shutter Speed</h3>\n      <p>\n        <strong>Shutter Speed</strong> is how quickly your camera takes the\n        picture.\n      </p>\n      <div style={pageStyle.table}>\n        <div style={pageStyle.row}>\n          <div style={pageStyle.column}>\n            <strong>Fast Shutter Speed:</strong>\n          </div>\n          <div style={pageStyle.column}>\n            <strong>Slow Shutter Speed:</strong>\n          </div>\n        </div>\n        <div style={pageStyle.row}>\n          <div style={pageStyle.column}>\n            Clearer subjects when they are moving. Darker picture because less\n            light can enter your camera.\n          </div>\n          <div style={pageStyle.column}>\n            Blurrier subjects when they are moving. Brighter pictures because\n            more light can enter your camera.\n          </div>\n        </div>\n      </div>\n      <p>\n        A shutter speed of 1/60 is the lowest speed you can get for a bright\n        photo that isn't noticeably blurry.\n      </p>\n    </div>\n  );\n};\n\nconst Aperture = () => {\n  return (\n    <div>\n      <h3>Aperture</h3>\n      <p>\n        The <strong>Aperture</strong> is the camera lens' opening that allows\n        light in. The measurement of that opening is called the{\" \"}\n        <strong>F-Stop</strong>. The Aperture and F-Stop are inversely\n        proportional.\n      </p>\n      <div style={pageStyle.table}>\n        <div style={pageStyle.row}>\n          <div style={pageStyle.column}>\n            <strong>Low F-Stop / High Aperture:</strong>\n          </div>\n          <div style={pageStyle.column}>\n            <strong>High F-Stop / Low Aperture:</strong>\n          </div>\n        </div>\n        <div style={pageStyle.row}>\n          <div style={pageStyle.column}>\n            Your Depth of Field is very narrow; your pictures will be brighter\n            and will have foreground and background blur.\n          </div>\n          <div style={pageStyle.column}>\n            Your Depth of Field is very wide; your pictures will be darker but\n            will have less blurred backgrounds and foregrounds.\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nconst ISO = () => {\n  return (\n    <div>\n      <h3>ISO</h3>\n      <p>\n        Your camera's <strong>ISO</strong> is a measure of how sensitive your\n        camera's sensors are to light.\n      </p>\n      <p>\n        Increasing your camera's ISO makes your pictures brighter, but it also\n        increases their <strong>noise</strong>, or their grainy-ness. This is\n        why night photos, which usually are taken with high ISO, have black dots\n        when you look closely.\n      </p>\n      <div style={pageStyle.table}>\n        <div style={pageStyle.row}>\n          <div style={pageStyle.column}>\n            <strong>Low ISO:</strong>\n          </div>\n          <div style={pageStyle.column}>\n            <strong>High ISO:</strong>\n          </div>\n        </div>\n        <div style={pageStyle.row}>\n          <div style={pageStyle.column}>\n            Your camera's sensors are not very sensitive, reducing overall\n            brightness. This makes your pictures less noisy though.\n          </div>\n          <div style={pageStyle.column}>\n            Your camera's sensors are very sensitive to light, meaning brighter\n            images. However, this make your pictures more noisy.\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport { Home, Aperture, ShutterSpeed, ISO };",
                  "solvedContent": null
                },
                {
                  "name": "navigation.jsx",
                  "codeLanguage": "jsx",
                  "content": "import React from \"react\";\n\nconst Navigation = (props) => {\n  return (\n    <nav style={navStyle.nav}>\n      <button style={navStyle.navLink}>Home</button>\n      <button style={navStyle.navLink}>Aperture</button>\n      <button style={navStyle.navLink}>Shutter Speed</button>\n      <button style={navStyle.navLink}>ISO</button>\n    </nav>\n  );\n};\n\nexport default Navigation;",
                  "solvedContent": "import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nconst Navigation = (props) => {\n  return (\n    <nav style={navStyle.nav}>\n      <button style={navStyle.navLink}>Home</button>\n      <button style={navStyle.navLink}>Aperture</button>\n      <button style={navStyle.navLink}>Shutter Speed</button>\n      <button style={navStyle.navLink}>ISO</button>\n    </nav>\n  );\n};\n\nexport default Navigation;"
                },
                {
                  "name": "styles.jsx",
                  "codeLanguage": "jsx",
                  "content": "const wrapperStyle = {\n  wrapper: {\n    width: \"100%\",\n    fontFamily: \"Times New Roman, Verdana, Arial, sans-serif\",\n    fontSize: 16,\n    padding: 16,\n    boxSizing: \"border-box\",\n    textAlign: \"center\",\n  },\n};\n\nconst navStyle = {\n  nav: {\n    textAlign: \"center\",\n    display: \"flex\",\n    flexDirection: \"row\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    flexWrap: \"nowrap\",\n  },\n  navLink: {\n    flexBasis: \"100\",\n    flexShrink: \"1\",\n    margin: 2,\n    paddingLeft: 8,\n    paddingRight: 8,\n    paddingTop: 4,\n    paddingBottom: 4,\n    fontSize: 12,\n  },\n};\n\nconst pageStyle = {\n  table: {\n    width: \"100%\",\n    display: \"flex\",\n    flexDirection: \"column\",\n    flexWrap: \"nowrap\",\n    justifyContent: \"flex-start\",\n    alignItems: \"stretch\",\n  },\n  row: {\n    width: \"100%\",\n    marginBottom: 4,\n    display: \"flex\",\n    flexDirection: \"row\",\n    flexWrap: \"nowrap\",\n    justifyContent: \"space-between\",\n    alignItems: \"flex-start\",\n  },\n  column: {\n    flexBasis: \"50%\",\n    flexShrink: 1,\n    flexGrow: 0,\n    marginLeft: 4,\n    marginRight: 4,\n  },\n};\n\nexport { wrapperStyle, navStyle, pageStyle };",
                  "solvedContent": null
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Step 9: One Link",
            "id": 114688,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Avec le composant `Link` importé, nous pouvons maintenant ajouter des fonctionnalités à la barre de navigation de notre SPA. Pour l'instant, ajoutons juste un `Link` et voyons si cela fonctionne.\n\n1. Enveloppe le bouton `Aperture` avec le nouveau composant `<Link>`.\n2. Ajoute un attribut `to` à `<Link>` et définis la valeur de `to` à `\"/aperture\"` pour lier à `\"/aperture\"` lors du clic sur le bouton.\n3. Charge la page et clique sur le bouton \"Aperture\" dans l'aperçu, tu devrais voir le contenu de la page changer pour le composant `<Aperture/>`.",
              "preselectedFileIndex": 3,
              "hasVisualOutput": true,
              "files": [
                {
                  "name": "index.html",
                  "codeLanguage": "html",
                  "content": "<!doctype html>\n<html>\n  <head>\n    <style>\n      html,\n      body {\n        margin: 0;\n        padding: 0;\n        background-color: #fefef1;\n      }\n      \n      a {\n        text-decoration: underline;\n        color: blue;\n      }\n      \n      a:hover {\n        cursor: pointer;\n      }\n    </style>\n    <script type=\"module\" src=\"./index.js\"></script>\n  </head>\n  <body>\n    <div id=\"root\"></div>\n  </body>\n</html>",
                  "solvedContent": null
                },
                {
                  "name": "index.jsx",
                  "codeLanguage": "jsx",
                  "content": "import React from \"react\";\nimport { createRoot } from \"react-dom/client\";\nimport { wrapperStyle } from \"./styles.jsx\";\nimport { Home, Aperture, ShutterSpeed, ISO } from \"./pages.jsx\";\nimport Navigation from \"./navigation.jsx\";\nimport { BrowserRouter, Routes, Route } from \"react-router-dom\";\n\nconst App = () => {\n  return (\n    <BrowserRouter>\n      <div style={wrapperStyle.wrapper}>\n        <Navigation />\n        <h1>Camera Tips</h1>\n        <Routes>\n          <Route exact path=\"/aperture\" element={<Aperture />} />\n          <Route exact path=\"/shutterspeed\" element={<ShutterSpeed />} />\n          <Route exact path=\"/iso\" element={<ISO />} />\n          <Route exact path=\"/\" element={<Home />} />\n        </Routes>\n      </div>\n    </BrowserRouter>\n  );\n};\n\nconst rootElement = document.getElementById(\"root\");\nconst root = createRoot(rootElement);\nroot.render(<App />);\n\nexport default App;",
                  "solvedContent": null
                },
                {
                  "name": "pages.jsx",
                  "codeLanguage": "jsx",
                  "content": "import React from \"react\";\nimport { pageStyle } from \"./styles\";\n\nconst Home = () => {\n  return (\n    <div>\n      <p>\n        Want a quick guide on how to take good photos? Confused about photo\n        terms? You've come to the right place!\n      </p>\n    </div>\n  );\n};\n\nconst ShutterSpeed = () => {\n  return (\n    <div>\n      <h3>Shutter Speed</h3>\n      <p>\n        <strong>Shutter Speed</strong> is how quickly your camera takes the\n        picture.\n      </p>\n      <div style={pageStyle.table}>\n        <div style={pageStyle.row}>\n          <div style={pageStyle.column}>\n            <strong>Fast Shutter Speed:</strong>\n          </div>\n          <div style={pageStyle.column}>\n            <strong>Slow Shutter Speed:</strong>\n          </div>\n        </div>\n        <div style={pageStyle.row}>\n          <div style={pageStyle.column}>\n            Clearer subjects when they are moving. Darker picture because less\n            light can enter your camera.\n          </div>\n          <div style={pageStyle.column}>\n            Blurrier subjects when they are moving. Brighter pictures because\n            more light can enter your camera.\n          </div>\n        </div>\n      </div>\n      <p>\n        A shutter speed of 1/60 is the lowest speed you can get for a bright\n        photo that isn't noticeably blurry.\n      </p>\n    </div>\n  );\n};\n\nconst Aperture = () => {\n  return (\n    <div>\n      <h3>Aperture</h3>\n      <p>\n        The <strong>Aperture</strong> is the camera lens' opening that allows\n        light in. The measurement of that opening is called the{\" \"}\n        <strong>F-Stop</strong>. The Aperture and F-Stop are inversely\n        proportional.\n      </p>\n      <div style={pageStyle.table}>\n        <div style={pageStyle.row}>\n          <div style={pageStyle.column}>\n            <strong>Low F-Stop / High Aperture:</strong>\n          </div>\n          <div style={pageStyle.column}>\n            <strong>High F-Stop / Low Aperture:</strong>\n          </div>\n        </div>\n        <div style={pageStyle.row}>\n          <div style={pageStyle.column}>\n            Your Depth of Field is very narrow; your pictures will be brighter\n            and will have foreground and background blur.\n          </div>\n          <div style={pageStyle.column}>\n            Your Depth of Field is very wide; your pictures will be darker but\n            will have less blurred backgrounds and foregrounds.\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nconst ISO = () => {\n  return (\n    <div>\n      <h3>ISO</h3>\n      <p>\n        Your camera's <strong>ISO</strong> is a measure of how sensitive your\n        camera's sensors are to light.\n      </p>\n      <p>\n        Increasing your camera's ISO makes your pictures brighter, but it also\n        increases their <strong>noise</strong>, or their grainy-ness. This is\n        why night photos, which usually are taken with high ISO, have black dots\n        when you look closely.\n      </p>\n      <div style={pageStyle.table}>\n        <div style={pageStyle.row}>\n          <div style={pageStyle.column}>\n            <strong>Low ISO:</strong>\n          </div>\n          <div style={pageStyle.column}>\n            <strong>High ISO:</strong>\n          </div>\n        </div>\n        <div style={pageStyle.row}>\n          <div style={pageStyle.column}>\n            Your camera's sensors are not very sensitive, reducing overall\n            brightness. This makes your pictures less noisy though.\n          </div>\n          <div style={pageStyle.column}>\n            Your camera's sensors are very sensitive to light, meaning brighter\n            images. However, this make your pictures more noisy.\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport { Home, Aperture, ShutterSpeed, ISO };",
                  "solvedContent": null
                },
                {
                  "name": "navigation.jsx",
                  "codeLanguage": "jsx",
                  "content": "import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { navStyle } from \"./styles\";\n\nconst Navigation = (props) => {\n  return (\n    <nav style={navStyle.nav}>\n      <button style={navStyle.navLink}>Home</button>\n      <button style={navStyle.navLink}>Aperture</button>\n      <button style={navStyle.navLink}>Shutter Speed</button>\n      <button style={navStyle.navLink}>ISO</button>\n    </nav>\n  );\n};\n\nexport default Navigation;",
                  "solvedContent": "import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { navStyle } from \"./styles\";\n\nconst Navigation = (props) => {\n  return (\n    <nav style={navStyle.nav}>\n      <button style={navStyle.navLink}>Home</button>\n      <Link to=\"/aperture\">\n        <button style={navStyle.navLink}>Aperture</button>\n      </Link>\n      <button style={navStyle.navLink}>Shutter Speed</button>\n      <button style={navStyle.navLink}>ISO</button>\n    </nav>\n  );\n};\n\nexport default Navigation;"
                },
                {
                  "name": "styles.jsx",
                  "codeLanguage": "jsx",
                  "content": "const wrapperStyle = {\n  wrapper: {\n    width: \"100%\",\n    fontFamily: \"Times New Roman, Verdana, Arial, sans-serif\",\n    fontSize: 16,\n    padding: 16,\n    boxSizing: \"border-box\",\n    textAlign: \"center\",\n  },\n};\n\nconst navStyle = {\n  nav: {\n    textAlign: \"center\",\n    display: \"flex\",\n    flexDirection: \"row\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    flexWrap: \"nowrap\",\n  },\n  navLink: {\n    flexBasis: \"100\",\n    flexShrink: \"1\",\n    margin: 2,\n    paddingLeft: 8,\n    paddingRight: 8,\n    paddingTop: 4,\n    paddingBottom: 4,\n    fontSize: 12,\n  },\n};\n\nconst pageStyle = {\n  table: {\n    width: \"100%\",\n    display: \"flex\",\n    flexDirection: \"column\",\n    flexWrap: \"nowrap\",\n    justifyContent: \"flex-start\",\n    alignItems: \"stretch\",\n  },\n  row: {\n    width: \"100%\",\n    marginBottom: 4,\n    display: \"flex\",\n    flexDirection: \"row\",\n    flexWrap: \"nowrap\",\n    justifyContent: \"space-between\",\n    alignItems: \"flex-start\",\n  },\n  column: {\n    flexBasis: \"50%\",\n    flexShrink: 1,\n    flexGrow: 0,\n    marginLeft: 4,\n    marginRight: 4,\n  },\n};\n\nexport { wrapperStyle, navStyle, pageStyle };",
                  "solvedContent": null
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Step 10: Add all Links",
            "id": 114689,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Avec le `<Link>` qui fonctionne, nous pouvons maintenant ajouter le composant `<Link>` aux trois autres boutons à l'intérieur de `Navigation`.\n\n1. Pour chacun des boutons restants, enveloppe-les avec le nouveau composant `<Link>` et définis leur attribut `to` à l'URL appropriée :\n\n    - `Home` doit pointer vers `/`.\n    - `Shutter Speed` doit pointer vers `/shutterspeed`.\n    - `ISO` doit pointer vers `/iso`.\n\n2. Exécute le code puis clique sur chacun des boutons dans la barre de navigation. Tu devrais voir les pages changer comme si tu naviguais entre différentes pages web.",
              "preselectedFileIndex": 3,
              "hasVisualOutput": true,
              "files": [
                {
                  "name": "index.html",
                  "codeLanguage": "html",
                  "content": "<!doctype html>\n<html>\n  <head>\n    <style>\n      html,\n      body {\n        margin: 0;\n        padding: 0;\n        background-color: #fefef1;\n      }\n      \n      a {\n        text-decoration: underline;\n        color: blue;\n      }\n      \n      a:hover {\n        cursor: pointer;\n      }\n    </style>\n    <script type=\"module\" src=\"./index.js\"></script>\n  </head>\n  <body>\n    <div id=\"root\"></div>\n  </body>\n</html>",
                  "solvedContent": null
                },
                {
                  "name": "index.jsx",
                  "codeLanguage": "jsx",
                  "content": "import React from \"react\";\nimport { createRoot } from \"react-dom/client\";\n\nimport { wrapperStyle } from \"./styles.jsx\";\nimport { Home, Aperture, ShutterSpeed, ISO } from \"./pages.jsx\";\nimport Navigation from \"./navigation.jsx\";\nimport { BrowserRouter, Routes, Route } from \"react-router-dom\";\n\nconst App = () => {\n  return (\n    <BrowserRouter>\n      <div style={wrapperStyle.wrapper}>\n        <Navigation />\n        <h1>Camera Tips</h1>\n        <Routes>\n          <Route exact path=\"/aperture\" element={<Aperture />} />\n          <Route exact path=\"/shutterspeed\" element={<ShutterSpeed />} />\n          <Route exact path=\"/iso\" element={<ISO />} />\n          <Route exact path=\"/\" element={<Home />} />\n        </Routes>\n      </div>\n    </BrowserRouter>\n  );\n};\n\nconst rootElement = document.getElementById(\"root\");\nconst root = createRoot(rootElement);\nroot.render(<App />);\n\nexport default App;",
                  "solvedContent": null
                },
                {
                  "name": "pages.jsx",
                  "codeLanguage": "jsx",
                  "content": "import React from \"react\";\nimport { pageStyle } from \"./styles\";\n\nconst Home = () => {\n  return (\n    <div>\n      <p>\n        Want a quick guide on how to take good photos? Confused about photo\n        terms? You've come to the right place!\n      </p>\n    </div>\n  );\n};\n\nconst ShutterSpeed = () => {\n  return (\n    <div>\n      <h3>Shutter Speed</h3>\n      <p>\n        <strong>Shutter Speed</strong> is how quickly your camera takes the\n        picture.\n      </p>\n      <div style={pageStyle.table}>\n        <div style={pageStyle.row}>\n          <div style={pageStyle.column}>\n            <strong>Fast Shutter Speed:</strong>\n          </div>\n          <div style={pageStyle.column}>\n            <strong>Slow Shutter Speed:</strong>\n          </div>\n        </div>\n        <div style={pageStyle.row}>\n          <div style={pageStyle.column}>\n            Clearer subjects when they are moving. Darker picture because less\n            light can enter your camera.\n          </div>\n          <div style={pageStyle.column}>\n            Blurrier subjects when they are moving. Brighter pictures because\n            more light can enter your camera.\n          </div>\n        </div>\n      </div>\n      <p>\n        A shutter speed of 1/60 is the lowest speed you can get for a bright\n        photo that isn't noticeably blurry.\n      </p>\n    </div>\n  );\n};\n\nconst Aperture = () => {\n  return (\n    <div>\n      <h3>Aperture</h3>\n      <p>\n        The <strong>Aperture</strong> is the camera lens' opening that allows\n        light in. The measurement of that opening is called the{\" \"}\n        <strong>F-Stop</strong>. The Aperture and F-Stop are inversely\n        proportional.\n      </p>\n      <div style={pageStyle.table}>\n        <div style={pageStyle.row}>\n          <div style={pageStyle.column}>\n            <strong>Low F-Stop / High Aperture:</strong>\n          </div>\n          <div style={pageStyle.column}>\n            <strong>High F-Stop / Low Aperture:</strong>\n          </div>\n        </div>\n        <div style={pageStyle.row}>\n          <div style={pageStyle.column}>\n            Your Depth of Field is very narrow; your pictures will be brighter\n            and will have foreground and background blur.\n          </div>\n          <div style={pageStyle.column}>\n            Your Depth of Field is very wide; your pictures will be darker but\n            will have less blurred backgrounds and foregrounds.\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nconst ISO = () => {\n  return (\n    <div>\n      <h3>ISO</h3>\n      <p>\n        Your camera's <strong>ISO</strong> is a measure of how sensitive your\n        camera's sensors are to light.\n      </p>\n      <p>\n        Increasing your camera's ISO makes your pictures brighter, but it also\n        increases their <strong>noise</strong>, or their grainy-ness. This is\n        why night photos, which usually are taken with high ISO, have black dots\n        when you look closely.\n      </p>\n      <div style={pageStyle.table}>\n        <div style={pageStyle.row}>\n          <div style={pageStyle.column}>\n            <strong>Low ISO:</strong>\n          </div>\n          <div style={pageStyle.column}>\n            <strong>High ISO:</strong>\n          </div>\n        </div>\n        <div style={pageStyle.row}>\n          <div style={pageStyle.column}>\n            Your camera's sensors are not very sensitive, reducing overall\n            brightness. This makes your pictures less noisy though.\n          </div>\n          <div style={pageStyle.column}>\n            Your camera's sensors are very sensitive to light, meaning brighter\n            images. However, this make your pictures more noisy.\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport { Home, Aperture, ShutterSpeed, ISO };",
                  "solvedContent": null
                },
                {
                  "name": "navigation.jsx",
                  "codeLanguage": "jsx",
                  "content": "import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { navStyle } from \"./styles.jsx\";\n\nconst Navigation = (props) => {\n  return (\n    <nav style={navStyle.nav}>\n      <button style={navStyle.navLink}>Home</button>\n      <Link to=\"/aperture\">\n        <button style={navStyle.navLink}>Aperture</button>\n      </Link>\n      <button style={navStyle.navLink}>Shutter Speed</button>\n      <button style={navStyle.navLink}>ISO</button>\n    </nav>\n  );\n};\n\nexport default Navigation;",
                  "solvedContent": "import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { navStyle } from \"./styles.jsx\";\n\nconst Navigation = (props) => {\n  return (\n    <nav style={navStyle.nav}>\n      <Link to=\"/\">\n        <button style={navStyle.navLink}>Home</button>\n      </Link>\n      <Link to=\"/aperture\">\n        <button style={navStyle.navLink}>Aperture</button>\n      </Link>\n      <Link to=\"/shutterspeed\">\n        <button style={navStyle.navLink}>Shutter Speed</button>\n      </Link>\n      <Link to=\"/iso\">\n        <button style={navStyle.navLink}>ISO</button>\n      </Link>\n    </nav>\n  );\n};\n\nexport default Navigation;"
                },
                {
                  "name": "styles.jsx",
                  "codeLanguage": "jsx",
                  "content": "const wrapperStyle = {\n  wrapper: {\n    width: \"100%\",\n    fontFamily: \"Times New Roman, Verdana, Arial, sans-serif\",\n    fontSize: 16,\n    padding: 16,\n    boxSizing: \"border-box\",\n    textAlign: \"center\",\n  },\n};\n\nconst navStyle = {\n  nav: {\n    textAlign: \"center\",\n    display: \"flex\",\n    flexDirection: \"row\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    flexWrap: \"nowrap\",\n  },\n  navLink: {\n    flexBasis: \"100\",\n    flexShrink: \"1\",\n    margin: 2,\n    paddingLeft: 8,\n    paddingRight: 8,\n    paddingTop: 4,\n    paddingBottom: 4,\n    fontSize: 12,\n  },\n};\n\nconst pageStyle = {\n  table: {\n    width: \"100%\",\n    display: \"flex\",\n    flexDirection: \"column\",\n    flexWrap: \"nowrap\",\n    justifyContent: \"flex-start\",\n    alignItems: \"stretch\",\n  },\n  row: {\n    width: \"100%\",\n    marginBottom: 4,\n    display: \"flex\",\n    flexDirection: \"row\",\n    flexWrap: \"nowrap\",\n    justifyContent: \"space-between\",\n    alignItems: \"flex-start\",\n  },\n  column: {\n    flexBasis: \"50%\",\n    flexShrink: 1,\n    flexGrow: 0,\n    marginLeft: 4,\n    marginRight: 4,\n  },\n};\n\nexport { wrapperStyle, navStyle, pageStyle };",
                  "solvedContent": null
                }
              ],
              "hints": []
            }
          }
        ]
      }
    ]
  }
}