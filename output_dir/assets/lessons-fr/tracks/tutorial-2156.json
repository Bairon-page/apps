{
  "tutorial": {
    "id": 2156,
    "version": 5,
    "type": "guidedProjectOptional",
    "isNew": false,
    "codeLanguage": "javascript",
    "title": "Journée aléatoire au travail",
    "descriptionContent": "Une analogie des promesses JavaScript en utilisant une journée de travail aléatoire",
    "shortDescriptionContent": "",
    "showInTrack": true,
    "iconBanner": "tutorial-2156-icon-banner.svg",
    "chapters": [
      {
        "id": 13482,
        "title": "Journée aléatoire au travail",
        "type": "practiceLevel3",
        "lessons": [
          {
            "title": "Order from Boss I",
            "id": 121197,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Chaque jour, on nous demande de réaliser certaines tâches au travail. Créons un programme qui affiche un jour de travail aléatoire. Nous réaliserons que les promesses sont très pertinentes dans notre vie quotidienne à la fin du projet !\n\nEn tant que travailleurs, nous recevons généralement des ordres de nos patrons. Créons une fonction pour imiter l'action des ordres venant de nos patrons.\n\n1. Écris une fonction `orderFromBoss()` qui retourne une `Promise`.\n2. Utilise une fonction avec `resolve` et `reject` comme paramètres de la `Promise`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "",
                  "solvedContent": "function orderFromBoss() {\r\n  return new Promise(function(resolve, reject) {});\r\n}"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Order from Boss II",
            "id": 121207,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Les ordres des patrons devraient contenir des instructions. Sinon, nous ne saurions pas ce qu'ils veulent que nous fassions !\n\n1. À l'intérieur de la fonction promise, crée une variable `isCodeDone` et définis la valeur à `false`.\n2. Imprime ```Finish the code, it's an order!``` en utilisant `console.log()`.\n3. Défini `isCodeDone` comme le paramètre pour `resolve()`.\n\nNous ne pouvons généralement pas rejeter nos patrons, alors laissons `reject` inutilisé.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "function orderFromBoss() {\r\n  return new Promise(function(resolve, reject) {});\r\n}",
                  "solvedContent": "function orderFromBoss() {\r\n  return new Promise(function(resolve, reject) {\r\n    let isCodeDone = false;\r\n    console.log(\"Finish the code, it's an order!\");\r\n    resolve(isCodeDone);\r\n  });\r\n}"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Coding I",
            "id": 121198,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Ensuite, créons une fonction pour toi, le programmeur !\n\n1. Écris une fonction `coding()` qui prend `isCodeDone` comme paramètre et retourne une `Promise`.\n2. Utilise une fonction avec les paramètres `resolve` et `reject` comme paramètre de la `Promise`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "function orderFromBoss() {\r\n  return new Promise(function(resolve, reject) {\r\n    let isCodeDone = false;\r\n    console.log(\"Finish the code, it's an order!\");\r\n    resolve(isCodeDone);\r\n  });\r\n}",
                  "solvedContent": "function orderFromBoss() {\r\n  return new Promise(function(resolve, reject) {\r\n    let isCodeDone = false;\r\n    console.log(\"Finish the code, it's an order!\");\r\n    resolve(isCodeDone);\r\n  });\r\n}\r\n\r\nfunction coding(isCodeDone) {\r\n  return new Promise(function(resolve, reject) {});\r\n}"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Coding II",
            "id": 121208,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Les codeurs n'ont besoin de coder que lorsqu'ils ont une tâche à accomplir. Modifions la fonction `coding()` pour refléter cela.\n\n1. À l'intérieur de la fonction promesse `coding()`, vérifie si `isCodeDone` est `false`.\n2. Si `isCodeDone` est `false`, affiche `Working...` en utilisant `console.log()`.\n3. Ensuite, définis `isCodeDone` sur `true` et utilise `isCodeDone` comme paramètre pour `resolve()`.\n4. Si `isCodeDone` est vrai, utilise ```\"No instructions from boss yet.\"``` comme paramètre pour `reject()`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "function orderFromBoss() {\r\n  return new Promise(function(resolve, reject) {\r\n    let isCodeDone = false;\r\n    console.log(\"Finish the code, it's an order!\");\r\n    resolve(isCodeDone);\r\n  });\r\n}\r\n\r\nfunction coding(isCodeDone) {\r\n  return new Promise(function(resolve, reject) {});\r\n}",
                  "solvedContent": "function orderFromBoss() {\r\n  return new Promise(function(resolve, reject) {\r\n    let isCodeDone = false;\r\n    console.log(\"Finish the code, it's an order!\");\r\n    resolve(isCodeDone);\r\n  });\r\n}\r\n\r\nfunction coding(isCodeDone) {\r\n  return new Promise(function(resolve, reject) {\r\n    if (!isCodeDone) {\r\n      console.log(\"Working...\");\r\n      isCodeDone = true;\r\n      resolve(isCodeDone);\r\n    } else {\r\n      reject(\"No instructions from boss yet.\");\r\n    }\r\n  });\r\n}"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Performance Review I",
            "id": 121199,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Quand nous avons terminé notre travail, nos patrons voudront examiner notre performance.\n\n1. Écris une fonction `performanceReview()` qui prend `isCodeDone` comme paramètre et retourne une `Promise`.\n2. Utilise une fonction avec les paramètres `resolve` et `reject` comme paramètre de la `Promise`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "function orderFromBoss() {\r\n  return new Promise(function(resolve, reject) {\r\n    let isCodeDone = false;\r\n    console.log(\"Finish the code, it's an order!\");\r\n    resolve(isCodeDone);\r\n  });\r\n}\r\n\r\nfunction coding(isCodeDone) {\r\n  return new Promise(function(resolve, reject) {\r\n    if (!isCodeDone) {\r\n      console.log(\"Working...\");\r\n      isCodeDone = true;\r\n      resolve(isCodeDone);\r\n    } else {\r\n      reject(\"No instructions from boss yet.\");\r\n    }\r\n  });\r\n}",
                  "solvedContent": "function orderFromBoss() {\r\n  return new Promise(function(resolve, reject) {\r\n    let isCodeDone = false;\r\n    console.log(\"Finish the code, it's an order!\");\r\n    resolve(isCodeDone);\r\n  });\r\n}\r\n\r\nfunction coding(isCodeDone) {\r\n  return new Promise(function(resolve, reject) {\r\n    if (!isCodeDone) {\r\n      console.log(\"Working...\");\r\n      isCodeDone = true;\r\n      resolve(isCodeDone);\r\n    } else {\r\n      reject(\"No instructions from boss yet.\");\r\n    }\r\n  });\r\n}\r\n\r\nfunction performanceReview(isCodeDone) {\r\n  return new Promise(function(resolve, reject) {});\r\n}"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Performance Review II",
            "id": 121209,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Nos patrons ont examiné nos performances, mais nous ne pouvons pas nous améliorer à moins que l'examen ne soit partagé avec nous. Modifions `performanceReview()` pour le faire.\n\n1. À l'intérieur de la fonction promesse `performanceReview()`, vérifie si `isCodeDone` est `true`.\n2. Si `isCodeDone` est `true`, définis `\"You kept your promise and finished the code. You're getting promoted!\"` comme paramètre pour `resolve()`.\n3. Si `isCodeDone` est `false`, définis `\"You broke your promise, how can I trust you with bigger responsibilities?\"` comme paramètre pour `reject()`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "function orderFromBoss() {\r\n  return new Promise(function(resolve, reject) {\r\n    let isCodeDone = false;\r\n    console.log(\"Finish the code, it's an order!\");\r\n    resolve(isCodeDone);\r\n  });\r\n}\r\n\r\nfunction coding(isCodeDone) {\r\n  return new Promise(function(resolve, reject) {\r\n    if (!isCodeDone) {\r\n      console.log(\"Working...\");\r\n      isCodeDone = true;\r\n      resolve(isCodeDone);\r\n    } else {\r\n      reject(\"No instructions from boss yet.\");\r\n    }\r\n  });\r\n}\r\n\r\nfunction performanceReview(isCodeDone) {\r\n  return new Promise(function(resolve, reject) {});\r\n}",
                  "solvedContent": "function orderFromBoss() {\r\n  return new Promise(function(resolve, reject) {\r\n    let isCodeDone = false;\r\n    console.log(\"Finish the code, it's an order!\");\r\n    resolve(isCodeDone);\r\n  });\r\n}\r\n\r\nfunction coding(isCodeDone) {\r\n  return new Promise(function(resolve, reject) {\r\n    if (!isCodeDone) {\r\n      console.log(\"Working...\");\r\n      isCodeDone = true;\r\n      resolve(isCodeDone);\r\n    } else {\r\n      reject(\"No instructions from boss yet.\");\r\n    }\r\n  });\r\n}\r\n\r\nfunction performanceReview(isCodeDone) {\r\n  return new Promise(function(resolve, reject) {\r\n    if (isCodeDone) {\r\n      resolve(\r\n        \"You kept your promise and finished the code. You're getting promoted!\"\r\n        );\r\n    } else {\r\n      reject(\r\n        \"You broke your promise, how can I trust you with bigger responsibilities?\"\r\n        );\r\n    }\r\n  });\r\n}"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Random Day at Work I",
            "id": 121200,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Maintenant que tous les scénarios sont déjà implémentés, mettons-les tous ensemble pour former une journée de travail. Puisque les choses ne se passent pas toujours l'une après l'autre dans la vie réelle, nous devrions également rendre la fonction asynchrone.\n\n1. Écris une fonction asynchrone `randomDayAtWork()`.\n2. Appelle `orderFromBoss()` et stocke-le dans une variable `instruction`.\n3. Appelle `coding()` en utilisant `instruction` comme paramètre et stocke-le dans une variable `work`.\n4. Appelle `performanceReview()` en utilisant `work` comme paramètre et stocke-le dans une variable `review`.\n5. Imprime la valeur de `review` en utilisant `console.log()`",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "function orderFromBoss() {\r\n  return new Promise(function(resolve, reject) {\r\n    let isCodeDone = false;\r\n    console.log(\"Finish the code, it's an order!\");\r\n    resolve(isCodeDone);\r\n  });\r\n}\r\n\r\nfunction coding(isCodeDone) {\r\n  return new Promise(function(resolve, reject) {\r\n    if (!isCodeDone) {\r\n      console.log(\"Working...\");\r\n      isCodeDone = true;\r\n      resolve(isCodeDone);\r\n    } else {\r\n      reject(\"No instructions from boss yet.\");\r\n    }\r\n  });\r\n}\r\n\r\nfunction performanceReview(isCodeDone) {\r\n  return new Promise(function(resolve, reject) {\r\n    if (isCodeDone) {\r\n      resolve(\r\n        \"You kept your promise and finished the code. You're getting promoted!\"\r\n        );\r\n    } else {\r\n      reject(\r\n        \"You broke your promise, how can I trust you with bigger responsibilities?\"\r\n        );\r\n    }\r\n  });\r\n}",
                  "solvedContent": "function orderFromBoss() {\r\n  return new Promise(function(resolve, reject) {\r\n    let isCodeDone = false;\r\n    console.log(\"Finish the code, it's an order!\");\r\n    resolve(isCodeDone);\r\n  });\r\n}\r\n\r\nfunction coding(isCodeDone) {\r\n  return new Promise(function(resolve, reject) {\r\n    if (!isCodeDone) {\r\n      console.log(\"Working...\");\r\n      isCodeDone = true;\r\n      resolve(isCodeDone);\r\n    } else {\r\n      reject(\"No instructions from boss yet.\");\r\n    }\r\n  });\r\n}\r\n\r\nfunction performanceReview(isCodeDone) {\r\n  return new Promise(function(resolve, reject) {\r\n    if (isCodeDone) {\r\n      resolve(\r\n        \"You kept your promise and finished the code. You're getting promoted!\"\r\n        );\r\n    } else {\r\n      reject(\r\n        \"You broke your promise, how can I trust you with bigger responsibilities?\"\r\n        );\r\n    }\r\n  });\r\n}\r\nasync function randomDayAtWork() {\r\n  const instruction = orderFromBoss();\r\n  const work = coding(instruction);\r\n  const review = performanceReview(work);\r\n  console.log(review);\r\n}"
                }
              ],
              "hints": [
                {
                  "title": "Hint",
                  "content": "You can make your functions asynchronous by adding the `async` keyword before defining the function. The syntax is:\n```\nasync function myAsyncFunc(){\n\n//code here\n\n}\n```"
                }
              ]
            }
          },
          {
            "title": "Random Day at Work II",
            "id": 121210,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Comme tu le sais, parfois le travail n'est pas prêt pour que nous le prenions et nous devons attendre. Par exemple, nous devrions attendre que l'ordre de notre patron arrive avant de travailler sur quelque chose !\n\n1. Ajoute le mot-clé `await` aux appels de fonction dans la fonction `randomDayAtWork()` pour t'assurer qu'ils seront appelés uniquement après que le précédent ait terminé son exécution.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "function orderFromBoss() {\r\n  return new Promise(function(resolve, reject) {\r\n    let isCodeDone = false;\r\n    console.log(\"Finish the code, it's an order!\");\r\n    resolve(isCodeDone);\r\n  });\r\n}\r\n\r\nfunction coding(isCodeDone) {\r\n  return new Promise(function(resolve, reject) {\r\n    if (!isCodeDone) {\r\n      console.log(\"Working...\");\r\n      isCodeDone = true;\r\n      resolve(isCodeDone);\r\n    } else {\r\n      reject(\"No instructions from boss yet.\");\r\n    }\r\n  });\r\n}\r\n\r\nfunction performanceReview(isCodeDone) {\r\n  return new Promise(function(resolve, reject) {\r\n    if (isCodeDone) {\r\n      resolve(\r\n        \"You kept your promise and finished the code. You're getting promoted!\"\r\n        );\r\n    } else {\r\n      reject(\r\n        \"You broke your promise, how can I trust you with bigger responsibilities?\"\r\n        );\r\n    }\r\n  });\r\n}\r\nasync function randomDayAtWork() {\r\n  const instruction = orderFromBoss();\r\n  const work = coding(instruction);\r\n  const review = performanceReview(work);\r\n  console.log(review);\r\n}",
                  "solvedContent": "function orderFromBoss() {\r\n  return new Promise(function(resolve, reject) {\r\n    let isCodeDone = false;\r\n    console.log(\"Finish the code, it's an order!\");\r\n    resolve(isCodeDone);\r\n  });\r\n}\r\n\r\nfunction coding(isCodeDone) {\r\n  return new Promise(function(resolve, reject) {\r\n    if (!isCodeDone) {\r\n      console.log(\"Working...\");\r\n      isCodeDone = true;\r\n      resolve(isCodeDone);\r\n    } else {\r\n      reject(\"No instructions from boss yet.\");\r\n    }\r\n  });\r\n}\r\n\r\nfunction performanceReview(isCodeDone) {\r\n  return new Promise(function(resolve, reject) {\r\n    if (isCodeDone) {\r\n      resolve(\r\n        \"You kept your promise and finished the code. You're getting promoted!\"\r\n        );\r\n    } else {\r\n      reject(\r\n        \"You broke your promise, how can I trust you with bigger responsibilities?\"\r\n        );\r\n    }\r\n  });\r\n}\r\nasync function randomDayAtWork() {\r\n  const instruction = await orderFromBoss();\r\n  const work = await coding(instruction);\r\n  const review = await performanceReview(work);\r\n  console.log(review);\r\n}"
                }
              ],
              "hints": [
                {
                  "title": "Hint",
                  "content": "`await` should be before the function call.\n\n```\nawait myFunc();\n```"
                }
              ]
            }
          },
          {
            "title": "Random Day at Work III",
            "id": 121201,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Super ! La dernière étape consiste à vérifier si les promesses sont tenues. Les promesses ne sont pas toujours remplies, donc nous devrions **essayer** d'exécuter les fonctions que nous avons écrites précédemment et **attraper** les erreurs que nous pourrions rencontrer en essayant d'exécuter le code.\n\n1. Utilise `try` pour exécuter le code à l'intérieur de `randomDayAtWork()`.\n2. Après le bloc `try` dans `randomDayAtWork()`, code un `catch` avec `error` comme paramètre.\n3. Dans le bloc `catch`, affiche l'`error` en utilisant `console.log`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "function orderFromBoss() {\r\n  return new Promise(function(resolve, reject) {\r\n    let isCodeDone = false;\r\n    console.log(\"Finish the code, it's an order!\");\r\n    resolve(isCodeDone);\r\n  });\r\n}\r\n\r\nfunction coding(isCodeDone) {\r\n  return new Promise(function(resolve, reject) {\r\n    if (!isCodeDone) {\r\n      console.log(\"Working...\");\r\n      isCodeDone = true;\r\n      resolve(isCodeDone);\r\n    } else {\r\n      reject(\"No instructions from boss yet.\");\r\n    }\r\n  });\r\n}\r\n\r\nfunction performanceReview(isCodeDone) {\r\n  return new Promise(function(resolve, reject) {\r\n    if (isCodeDone) {\r\n      resolve(\r\n        \"You kept your promise and finished the code. You're getting promoted!\"\r\n        );\r\n    } else {\r\n      reject(\r\n        \"You broke your promise, how can I trust you with bigger responsibilities?\"\r\n        );\r\n    }\r\n  });\r\n}\r\nasync function randomDayAtWork() {\r\n  const instruction = await orderFromBoss();\r\n  const work = await coding(instruction);\r\n  const review = await performanceReview(work);\r\n  console.log(review);\r\n}",
                  "solvedContent": "function orderFromBoss() {\r\n  return new Promise(function(resolve, reject) {\r\n    let isCodeDone = false;\r\n    console.log(\"Finish the code, it's an order!\");\r\n    resolve(isCodeDone);\r\n  });\r\n}\r\n\r\nfunction coding(isCodeDone) {\r\n  return new Promise(function(resolve, reject) {\r\n    if (!isCodeDone) {\r\n      console.log(\"Working...\");\r\n      isCodeDone = true;\r\n      resolve(isCodeDone);\r\n    } else {\r\n      reject(\"No instructions from boss yet.\");\r\n    }\r\n  });\r\n}\r\n\r\nfunction performanceReview(isCodeDone) {\r\n  return new Promise(function(resolve, reject) {\r\n    if (isCodeDone) {\r\n      resolve(\r\n        \"You kept your promise and finished the code. You're getting promoted!\"\r\n        );\r\n    } else {\r\n      reject(\r\n        \"You broke your promise, how can I trust you with bigger responsibilities?\"\r\n        );\r\n    }\r\n  });\r\n}\r\nasync function randomDayAtWork() {\r\n  try {\r\n    const instruction = await orderFromBoss();\r\n    const work = await coding(instruction);\r\n    const review = await performanceReview(work);\r\n    console.log(review);\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n}"
                }
              ],
              "hints": [
                {
                  "title": "Hint",
                  "content": "The syntax for `try-catch` is as below:\n\n```\ntry {\n\n// code to try\n\n} catch(error) {\n\n//code to run when an error happens\n\n}\n```"
                }
              ]
            }
          },
          {
            "title": "Execute randomDayAtWork()!",
            "id": 121202,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Toutes nos fonctions sont prêtes maintenant, mais elles ne fonctionneront pas à moins que nous fassions quelque chose à ce sujet ! Appelons la fonction qui démarre une nouvelle journée de travail aléatoire.\n\n1. À la fin du code, appelle `randomDayAtWork()`",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "function orderFromBoss() {\r\n  return new Promise(function(resolve, reject) {\r\n    let isCodeDone = false;\r\n    console.log(\"Finish the code, it's an order!\");\r\n    resolve(isCodeDone);\r\n  });\r\n}\r\n\r\nfunction coding(isCodeDone) {\r\n  return new Promise(function(resolve, reject) {\r\n    if (!isCodeDone) {\r\n      console.log(\"Working...\");\r\n      isCodeDone = true;\r\n      resolve(isCodeDone);\r\n    } else {\r\n      reject(\"No instructions from boss yet.\");\r\n    }\r\n  });\r\n}\r\n\r\nfunction performanceReview(isCodeDone) {\r\n  return new Promise(function(resolve, reject) {\r\n    if (isCodeDone) {\r\n      resolve(\r\n        \"You kept your promise and finished the code. You're getting promoted!\"\r\n        );\r\n    } else {\r\n      reject(\r\n        \"You broke your promise, how can I trust you with bigger responsibilities?\"\r\n        );\r\n    }\r\n  });\r\n}\r\nasync function randomDayAtWork() {\r\n  try {\r\n    const instruction = await orderFromBoss();\r\n    const work = await coding(instruction);\r\n    const review = await performanceReview(work);\r\n    console.log(review);\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n}",
                  "solvedContent": "function orderFromBoss() {\r\n  return new Promise(function(resolve, reject) {\r\n    let isCodeDone = false;\r\n    console.log(\"Finish the code, it's an order!\");\r\n    resolve(isCodeDone);\r\n  });\r\n}\r\n\r\nfunction coding(isCodeDone) {\r\n  return new Promise(function(resolve, reject) {\r\n    if (!isCodeDone) {\r\n      console.log(\"Working...\");\r\n      isCodeDone = true;\r\n      resolve(isCodeDone);\r\n    } else {\r\n      reject(\"No instructions from boss yet.\");\r\n    }\r\n  });\r\n}\r\n\r\nfunction performanceReview(isCodeDone) {\r\n  return new Promise(function(resolve, reject) {\r\n    if (isCodeDone) {\r\n      resolve(\r\n        \"You kept your promise and finished the code. You're getting promoted!\"\r\n        );\r\n    } else {\r\n      reject(\r\n        \"You broke your promise, how can I trust you with bigger responsibilities?\"\r\n        );\r\n    }\r\n  });\r\n}\r\nasync function randomDayAtWork() {\r\n  try {\r\n    const instruction = await orderFromBoss();\r\n    const work = await coding(instruction);\r\n    const review = await performanceReview(work);\r\n    console.log(review);\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n}\r\nrandomDayAtWork();"
                }
              ],
              "hints": []
            }
          }
        ]
      }
    ]
  }
}