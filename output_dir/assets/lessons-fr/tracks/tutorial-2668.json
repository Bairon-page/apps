{
  "tutorial": {
    "id": 2668,
    "version": 7,
    "type": "guidedProject",
    "isNew": false,
    "codeLanguage": "python",
    "title": "API Star Wars - Partie 2",
    "descriptionContent": "Donne du pouvoir aux utilisateurs dans cette suite, en leur permettant de choisir combien de personnages télécharger et explorer",
    "shortDescriptionContent": "",
    "showInTrack": true,
    "iconBanner": "tutorial-2668-icon-banner.svg",
    "chapters": [
      {
        "id": 14643,
        "title": "Chapitre #1",
        "type": "practiceLevel3",
        "lessons": [
          {
            "title": "Lesson #1",
            "id": 129511,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Bienvenue dans le projet **Star Wars API**. Dans la deuxième partie, nous allons laisser l'utilisateur décider quelles données nous récupérons de l'API.\n\n1. Crée une nouvelle fonction appelée `fetch_data` qui encapsule tout le code existant sauf l'instruction d'importation.\n   - La fonction doit accepter un paramètre appelé `option`.\n   - Avant le bloc try-except, définis la variable `data`, que nous utiliserons plus tard, et assigne-lui une liste vide.\n   - À l'intérieur de cette fonction, garde le reste du code existant tel quel.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "import requests\n\noption = \"people\"\nurl = f\"https://swapi.mimo.dev/api/{option}/\"\ntry:\n  response = requests.get(url)\n  response.raise_for_status()\n\n  data = response.json()\n  print(f\"Successfully fetched {len(data)} entities\")\nexcept requests.HTTPError as e:\n  print(f\"Error fetching data: {e}\")\n\nif data:\n  for entity in data:\n    print(entity[\"name\"])\nelse:\n  print(\"Unable to download data\")",
                  "solvedContent": "import requests\n\ndef fetch_data(option):\n  option = \"people\"\n  url = f\"https://swapi.mimo.dev/api/{option}/\"\n  data = []\n  try:\n    response = requests.get(url)\n    response.raise_for_status()\n\n    data = response.json()\n    print(f\"Successfully fetched {len(data)} entities\")\n  except requests.HTTPError as e:\n    print(f\"Error fetching data: {e}\")\n\n  if data:\n    for entity in data:\n      print(entity[\"name\"])\n  else:\n    print(\"Unable to download data\")"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Lesson #2",
            "id": 129512,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "La première ligne de la fonction crée la variable `option` et lui assigne la valeur `\"people\"`. Comme nous passons maintenant cette option en tant que paramètre à la fonction, nous n'avons plus besoin de cette ligne.\n\n1. Supprime la ligne `option = \"people\"` de la fonction afin que l'`url` utilise le paramètre `option` passé.\n2. Enfin, appelle la fonction avec les paramètres `\"people\"`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "import requests\n\ndef fetch_data(option):\n  option = \"people\"\n  url = f\"https://swapi.mimo.dev/api/{option}/\"\n  data = []\n  try:\n    response = requests.get(url)\n    response.raise_for_status()\n\n    data = response.json()\n    print(f\"Successfully fetched {len(data)} entities\")\n  except requests.HTTPError as e:\n    print(f\"Error fetching data: {e}\")\n\n  if data:\n    for entity in data:\n      print(entity[\"name\"])\n  else:\n    print(\"Unable to download data\")",
                  "solvedContent": "import requests\n\ndef fetch_data(option):\n  url = f\"https://swapi.mimo.dev/api/{option}/\"\n  data = []\n  try:\n    response = requests.get(url)\n    response.raise_for_status()\n\n    data = response.json()\n    print(f\"Successfully fetched {len(data)} entities\")\n  except requests.HTTPError as e:\n    print(f\"Error fetching data: {e}\")\n\n  if data:\n    for entity in data:\n      print(entity[\"name\"])\n  else:\n    print(\"Unable to download data\")\n\nfetch_data(\"people\")"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Lesson #8",
            "id": 129518,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "En ce moment, la fonction imprime directement le résultat. Changeons cela pour qu'elle retourne le résultat à la place.\n\n1. Déplace le bloc `if` qui imprime chaque élément du résultat en dehors de la fonction, en le plaçant sous l'appel de la fonction.\n2. Modifie la fonction pour retourner les `data` à la fin.\n3. Ajoute `return None` dans le bloc `except`.\n4. Assigne la valeur de retour de la fonction à une nouvelle variable nommée `data` en dehors de la fonction.\n5. Utilise cette variable `data` pour parcourir et imprimer les éléments de la liste retournée.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "import requests\n\ndef fetch_data(option):\n  url = f\"https://swapi.mimo.dev/api/{option}/\"\n  data = []\n  try:\n    response = requests.get(url)\n    response.raise_for_status()\n\n    data = response.json()\n    print(f\"Successfully fetched {len(data)} entities\")\n  except requests.HTTPError as e:\n    print(f\"Error fetching data: {e}\")\n\n  if data:\n    for entity in data:\n      print(entity[\"name\"])\n  else:\n    print(\"Unable to download data\")\n\nfetch_data(\"people\")",
                  "solvedContent": "import requests\n\ndef fetch_data(option):\n  url = f\"https://swapi.mimo.dev/api/{option}/\"\n  data = []\n  try:\n    response = requests.get(url)\n    response.raise_for_status()\n\n    data = response.json()\n    print(f\"Successfully fetched {len(data)} entities\")\n  except requests.HTTPError as e:\n    print(f\"Error fetching data: {e}\")\n    return None\n\n  return data\n\ndata = fetch_data(\"people\")\n\nif data:\n  for entity in data:\n    print(entity[\"name\"])\nelse:\n    print(\"Unable to download data\")\n"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Lesson #8 - Copy",
            "id": 131645,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Il y a plus de endpoints que nous pouvons appeler. Donnons à nos utilisateurs le choix.\n\n1. Demande à l'utilisateur quelles données de StarWars il aimerait explorer.\n2. Collecte la réponse via la fonction `input` de Python et enregistre-la.\n   - Supprime les espaces inutiles au début et à la fin.\n   - Transforme l'entrée en minuscules.\n   - Enregistre l'entrée dans une variable appelée `option`.\n3. Au lieu de passer `\"people\"` comme argument lors de l'appel de `fetch_data`, passe `option`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "import requests\n\ndef fetch_data(option):\n  url = f\"https://swapi.mimo.dev/api/{option}/\"\n  data = []\n  try:\n    response = requests.get(url)\n    response.raise_for_status()\n\n    data = response.json()\n    print(f\"Successfully fetched {len(data)} entities\")\n  except requests.HTTPError as e:\n    print(f\"Error fetching data: {e}\")\n    return None\n\n  return data\n\ndata = fetch_data(\"people\")\n\nif data:\n  for entity in data:\n    print(entity[\"name\"])\nelse:\n    print(\"Unable to download data\")",
                  "solvedContent": "import requests\n\ndef fetch_data(option):\n  url = f\"https://swapi.mimo.dev/api/{option}/\"\n  data = []\n  try:\n    response = requests.get(url)\n    response.raise_for_status()\n\n    data = response.json()\n    print(f\"Successfully fetched {len(data)} entities\")\n  except requests.HTTPError as e:\n    print(f\"Error fetching data: {e}\")\n    return None\n\n  return data\n\noption = input(\"Enter an option (e.g., 'people' or 'planets'): \").strip().lower()\ndata = fetch_data(option)\n\nif data:\n  for entity in data:\n    print(entity[\"name\"])\nelse:\n    print(\"Unable to download data\")"
                }
              ],
              "hints": []
            }
          }
        ]
      }
    ]
  }
}