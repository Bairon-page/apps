{
  "tutorial": {
    "id": 2634,
    "version": 4,
    "type": "challenges",
    "isNew": false,
    "codeLanguage": "javascript",
    "title": "Objets et ES 6",
    "descriptionContent": "Les défis sont des exercices plus difficiles qui mettront tes compétences à l'épreuve.",
    "shortDescriptionContent": "",
    "showInTrack": true,
    "iconBanner": null,
    "chapters": [
      {
        "id": 14539,
        "title": "Ajout de propriétés",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "Adding Properties",
            "id": 129199,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Ajoutons une autre propriété à un objet analysé à partir d'une chaîne JSON. Nous allons mettre à jour l'objet en lui ajoutant une propriété après l'avoir créé.\n\n1. Analyse la chaîne JSON `tajMahalJSON` et stocke-la dans une variable, `tajMahal`, afin que nous puissions travailler avec elle comme un objet JS.\n\n3. Affiche la valeur `takeout` de l'objet `tajMahal`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const tajMahalJSON = '{ \"cuisine\": \"Indian\", \"takeout\": false}';\r\n\r\n",
                  "solvedContent": "const tajMahalJSON = '{ \"cuisine\": \"Indian\", \"takeout\": false}';\r\nconst tajMahal = JSON.parse(tajMahalJSON);\r\nconsole.log(tajMahal.takeout);"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 14540,
        "title": "Mise à jour des propriétés",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "Updating an Object Property",
            "id": 129200,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Mettons à jour les valeurs des propriétés existantes d'un objet.\n\n1. Sur une ligne séparée après l'objet, mets à jour la propriété `takeout` de `tajMahal` à `true`. N'édite pas la valeur originale dans l'objet.\n\n2. Affiche l'objet `tajMahal` pour confirmer qu'il a été mis à jour.\n\n3. Pour préparer l'objet à être envoyé au serveur, créons une nouvelle variable appelée `stringTajMahal` et stockons la version sous forme de chaîne de `tajMahal`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const tajMahal = {\r\n  cuisine: \"Indian\",\r\n  takeout: false,\r\n  starRating: 4.5\r\n};",
                  "solvedContent": "const tajMahal = {\r\n  cuisine: \"Indian\",\r\n  takeout: false,\r\n  starRating: 4.5\r\n};\r\ntajMahal.takeout = true;\r\nconsole.log(tajMahal);\r\nconst stringTajMahal = JSON.stringify(tajMahal);\r\nconsole.log(stringTajMahal);\r\n"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 14541,
        "title": "Accéder aux propriétés",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "Use Property Value",
            "id": 129201,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Accédons à la valeur d'une propriété de l'objet analysé à partir d'une chaîne JSON, et utilisons-la dans un nouveau calcul.\n\n1. Analyse la chaîne JSON en un objet JS et stocke-le dans une nouvelle variable, la variable `tajMahal`.\n2. En utilisant `const`, crée une nouvelle variable appelée `tenRating`, qui est égale à la valeur de la propriété `starRating` de `tajMahal` multipliée par `2`.\n2. Affiche la valeur de `tenRating` pour vérifier le résultat.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const tajMahalJSON = '{ \"cuisine\": \"Indian\", \"takeout\": false, \"starRating\": 4.5}';",
                  "solvedContent": "const tajMahalJSON = '{ \"cuisine\": \"Indian\", \"takeout\": false, \"starRating\": 4.5}';\r\nconst tajMahal = JSON.parse(tajMahalJSON);\r\nconst tenRating = tajMahal.starRating * 2;\r\nconsole.log(tenRating);"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 14542,
        "title": "Message de bienvenue à l'hôtel",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "Hotel Welcome Message",
            "id": 129202,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Une chaîne d'hôtels doit afficher un message de bienvenue aux clients sur ses nouveaux écrans extérieurs. Écris une fonction fléchée qui renvoie un message de bienvenue similaire à l'exemple ci-dessous. Tu peux choisir ton propre message de bienvenue, tant qu'il s'agit d'une chaîne de caractères.\n\nExemple de sortie :\n```\nHello! Welcome to Terrace Inn & Suites!\n```\n\n1. Déclare une fonction fléchée nommée `checkInMessage` qui renvoie le message de bienvenue fourni. Clique sur le message de bienvenue pour le copier, puis colle-le comme une chaîne de caractères renvoyée par la fonction fléchée.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "index.js",
                  "codeLanguage": "javascript",
                  "content": "console.log(checkInMessage());",
                  "solvedContent": "const checkInMessage = () => \"Hello! Welcome to Terrace Inn & Suites!\";\nconsole.log(checkInMessage());"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 14543,
        "title": "Ajout de message saisonnier",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "Seasonal Message Addition",
            "id": 129203,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Le directeur général de Terrace Inn & Suites aimerait que la fonction fléchée soit modifiée pour inclure un `generalMessage` et un `seasonalMessage`.\n\nLe message général restera le même : `Hello! Welcome to Terrace Inn & Suites`.\n\nSelon les instructions du directeur général, le message saisonnier sera : `Need to cool off? Visit one of our three resort pools!`.\n\nLa fonction fléchée doit stocker ces deux messages dans des variables et retourner les chaînes concaténées. N'oublie pas d'ajouter un espace entre elles !\n\nExemple de sortie\n```javascript\nHello! Welcome to Terrace Inn & Suites! Need to cool off? Visit one of our three resort pools!\n```\n\n1. Transforme la fonction fléchée existante en une fonction fléchée multilignes.\n2. Déclare et stocke les messages fournis dans des variables nommées `generalMessage` et `seasonalMessage`.\n3. Enfin, la fonction fléchée doit retourner les deux variables concaténées avec un espace entre elles.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "index.js",
                  "codeLanguage": "javascript",
                  "content": "const challengeGreeting = () => \"Hello! Welcome to Terrace Inn & Suites!\";\r\nconsole.log(challengeGreeting());",
                  "solvedContent": "const challengeGreeting = () => {\n  const generalMessage = \"Hello! Welcome to Terrace Inn & Suites!\";\n  const seasonalMessage =\n    \"Need to cool off? Visit one of our three resort pools!\";\n  return generalMessage + \" \" + seasonalMessage;\n};\nconsole.log(challengeGreeting());"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 14544,
        "title": "Message de bienvenue personnalisé",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "Personalized Welcome Message",
            "id": 129204,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Le directeur général a une amélioration supplémentaire. Il aimerait personnaliser le message pour les invités. Modifie la fonction fléchée et le corps de la fonction fléchée pour incorporer un paramètre `name`.\n\nExemple de sortie\n```javascript\nHello, Sarah! Welcome to Terrace Inn & Suites! Need to cool off? Visit one of our three resort pools!\n```\n\n1. Tout d'abord, modifie la fonction fléchée pour prendre un paramètre `name`.\n2. Ensuite, modifie la variable `generalMessage` pour incorporer le paramètre `name` selon l'exemple ci-dessus.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "index.js",
                  "codeLanguage": "javascript",
                  "content": "const challengeGreeting = () => {\r\n  const generalMessage = \"Welcome to Terrace Inn & Suites!\";\r\n  const seasonalMessage =\r\n    \"Need to cool off? Visit one of our three resort pools!\";\r\n  return generalMessage + \" \" + seasonalMessage;\r\n};\r\nconsole.log(challengeGreeting(\"Sarah\"));",
                  "solvedContent": "const challengeGreeting = (name) => {\n  const generalMessage = \"Hello, \" + name +\n    \"! Welcome to Terrace Inn & Suites!\";\n  const seasonalMessage =\n    \"Need to cool off? Visit one of our three resort pools!\";\n  return generalMessage + \" \" + seasonalMessage;\n};\nconsole.log(challengeGreeting(\"Sarah\"));"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 11641,
        "title": "Méthodes avec paramètres",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "Methods with parameters",
            "id": 107101,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Regarde la fonction `eligible()`. Son but est de retourner `true` si `volume` est inférieur ou égal à un `maxVolume`. Transformons cette fonction en méthode d'objet.\n\n1. Ajoute une méthode à `parcel` appelée `volume`, qui retourne la valeur de `length * width * depth` pour l'objet.\n\n2. Transforme la fonction `eligible` en une méthode avec le même nom à l'intérieur de l'objet `parcel`. La méthode ne doit avoir qu'un seul paramètre `maxVolume` et doit appeler `this.volume()` pour obtenir le volume.\n\n3. `console.log()` le résultat d'un appel à la méthode `eligible` de `parcel`, en utilisant une valeur de `100` pour `maxVolume`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const parcel = {\n  length: 100,\n  width: 80,\n  depth: 30,\n};\n\nfunction eligible(length, width, depth, maxVolume) {\n  volume = length * width * depth;\n  if (this.volume() <= maxVolume) {\n    return true;\n  } else {\n    return false;\n  }\n}\nconsole.log(eligible(parcel.length, parcel.width, parcel.depth, 100));",
                  "solvedContent": "const parcel = {\n  length: 100,\n  width: 80,\n  depth: 30,\n  volume: function() {\n    return this.length * this.width * this.depth;\n  },\n  eligible: function(maxVolume) {\n    if (this.volume() <= maxVolume) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n};\nconsole.log(parcel.eligible(100));"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 11639,
        "title": "Ajout de méthodes",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "Add a method and use",
            "id": 107001,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Ajoutons une méthode à notre objet, qui effectuera un calcul en utilisant la valeur d'une autre propriété de l'objet. N'oublie pas que nous pouvons nous référer à l'objet lui-même en utilisant `this.`.\n\n1. Ajoute une méthode à l'intérieur de l'objet `tajMahal` (à l'intérieur des accolades `{ }`) appelée `tenRating`, qui retourne la valeur de `starRating * 2` pour l'objet donné.\n\n2. Ensuite, en dessous de l'objet `tajMahal` (en dehors des accolades `{ }`), mets à jour le `starRating` de `tajMahal` à `4.1`.\n\n3. Enfin, utilise `console.log()` pour afficher le *résultat* de l'appel de la méthode `tenRating` afin de vérifier que le résultat est comme prévu.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const tajMahal = {\r\n  cuisine: \"Indian\",\r\n  takeout: false,\r\n  starRating: 4.5,\r\n};",
                  "solvedContent": "const tajMahal = {\r\n  cuisine: \"Indian\",\r\n  takeout: false,\r\n  starRating: 4.5,\r\n  tenRating: function() {\r\n    return this.starRating * 2;\r\n  }\r\n};\r\ntajMahal.starRating = 4.1;\r\nconsole.log(tajMahal.tenRating());"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 11640,
        "title": "Plus de méthodes",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "Adding more complex methods",
            "id": 107002,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Regarde l'objet `employee`. Ajoutons une méthode à cet objet.\n\n1. Ajoute une méthode appelée `fullName`. La méthode doit retourner une chaîne composée du prénom, suivi d'un espace (`\" \"`) et du nom de famille (`Amanda Jimenez` dans notre exemple).\n\n2. Affiche le résultat de l'appel de la méthode `fullName()` sur `employee`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const employee = {\r\n  firstName: \"Amanda\",\r\n  secondName: \"Jimenez\"\r\n};",
                  "solvedContent": "const employee = {\n  firstName: \"Amanda\",\n  secondName: \"Jimenez\",\n  fullName: function() {\n    return this.firstName + \" \" + this.secondName;\n  }\n};\nconsole.log(employee.fullName());"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 11638,
        "title": "Accéder et utiliser une propriété",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "Access and compare property",
            "id": 107000,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Nous voulons vérifier si la `cuisine` de `tajMahal` est dans `preferredCuisines`.\n\n1. En utilisant `const`, crée une variable appelée `inPreferred`, qui vérifie si `preferredCuisines` inclut la valeur `cuisine` pour `tajMahal`.\n\n   Indice : utilise la méthode de tableau `.includes()` sur `preferredCuisines`, qui retournera `true` si la valeur spécifiée s'y trouve.\n\n2. Affiche `inPreferred` pour vérifier le résultat.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const tajMahal = {\r\n  cuisine: \"Indian\",\r\n  takeout: false,\r\n  starRating: 4.5\r\n};\r\nconst preferredCuisines = [\"Chinese\", \"Italian\", \"Turkish\"];",
                  "solvedContent": "const tajMahal = {\r\n  cuisine: \"Indian\",\r\n  takeout: false,\r\n  starRating: 4.5\r\n};\r\nconst preferredCuisines = [\"Chinese\", \"Italian\", \"Turkish\"];\r\nconst inPreferred = preferredCuisines.includes(tajMahal.cuisine);\r\nconsole.log(inPreferred);"
                }
              ],
              "hints": []
            }
          }
        ]
      }
    ]
  }
}