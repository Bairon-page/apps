{
  "tutorial": {
    "id": 2154,
    "version": 8,
    "type": "challenges",
    "isNew": false,
    "codeLanguage": "javascript",
    "title": "Synchronie et asynchronie en JS",
    "descriptionContent": "Les défis sont des exercices plus difficiles qui mettront tes compétences à l'épreuve.",
    "shortDescriptionContent": "",
    "showInTrack": true,
    "iconBanner": "tutorial-2154-icon-banner.svg",
    "chapters": [
      {
        "id": 13467,
        "title": "Liste de courses de fruits",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "Fruit Grocery List",
            "id": 121144,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "C'est l'heure du petit-déjeuner ! Nous n'avons pas de fruits à la maison, donc nous devons aller au marché avec une liste. Écris un programme qui affiche les fruits dont nous avons besoin.\n1. Utilise la méthode `.map()` sur le `fruitsArray` et enregistre-la dans `newArrayOfStrings`.\n2. Utilise `fruitsList` pour la fonction de rappel de `.map()`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const fruitsArray = ['apples', 'coconuts', 'bananas', 'strawberries',\r\n'oranges'];\r\n\r\nfunction fruitsList(fruit) {\r\n  return 'Buy 2 ' + fruit;\r\n}\r\nconst newArrayOfStrings = ;\r\nconsole.log(newArrayOfStrings);",
                  "solvedContent": "const fruitsArray = ['apples', 'coconuts', 'bananas', 'strawberries',\n'oranges'];\n\nfunction fruitsList(fruit) {\n  return 'Buy 2 ' + fruit;\n}\nconst newArrayOfStrings = fruitsArray.map(fruitsList);\nconsole.log(newArrayOfStrings);"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 13469,
        "title": "Le meilleur de la classe",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "Best in Class",
            "id": 121146,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Le professeur de mathématiques veut récompenser les deux meilleurs élèves de la classe. Le professeur sait que les deux meilleurs élèves ont obtenu plus de 4/5 points à l'examen. Aide le professeur à identifier les deux meilleures notes de la classe en appelant la fonction de rappel.\n1. Inclure dans `bestGrades` le tableau `mathGrades` avec la méthode `.filter()`.\n2. Passer la fonction `callbackConditional` à la méthode `.filter()` pour retourner les deux meilleures notes du tableau `mathGrades`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const mathGrades = [5.0, 4.8, 3.5, 3.0];\nconst callbackConditional = (num) => num > 4;\n\nfunction bestMathGrades() {\n  const bestGrades = ;\n  console.log(bestGrades);\n  return bestGrades;\n}\nbestMathGrades();\nconsole.log(\"The best two grades in Maths\");",
                  "solvedContent": "const mathGrades = [5.0, 4.8, 3.5, 3.0];\nconst callbackConditional = (num) => num > 4;\n\nfunction bestMathGrades() {\n  const bestGrades = mathGrades.filter(callbackConditional);\n  console.log(bestGrades);\n  return bestGrades;\n}\nbestMathGrades();\nconsole.log(\"The best two grades in Maths\");"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 13475,
        "title": "Application Calculatrice",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "Calculator App",
            "id": 121152,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Nous devons tester un programme qui additionne deux nombres. Le programme prend deux nombres et une fonction de rappel.\n\n1. Inclure `5` et `7` ainsi que la fonction de rappel comme paramètres de la fonction `calculator` pour voir si cela fonctionne.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const calculator = (number1, number2, callback) => {\r\n  console.log(\r\n    `The calculator gets the addition of the numbers ${number1} and ${number2}.`\r\n    );\r\n  const result = number1 + number2;\r\n  callback(result);\r\n};\r\nconst resultCalculator = result => console.log(`The result is ${result}`);",
                  "solvedContent": "const calculator = (number1, number2, callback) => {\n  console.log(\n    `The calculator gets the addition of the numbers ${number1} and ${number2}.`\n    );\n  const result = number1 + number2;\n  callback(result);\n};\nconst resultCalculator = result => console.log(`The result is ${result}`);\ncalculator(5, 7, resultCalculator);"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 13472,
        "title": "setTimeout",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "setTimeout",
            "id": 121149,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Nous voulons créer un programme qui affiche deux messages. Le deuxième message doit apparaître 1,5 secondes après le premier.\n1. Ajoute un `setTimeout` qui appelle la fonction `callbackTime` après 1,5 secondes.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "function callbackTime() {\r\n  console.log('Hi again! A second and a half later!!');\r\n}\r\nconsole.log('Hi');",
                  "solvedContent": "function callbackTime() {\n  console.log('Hi again! A second and a half later!!');\n}\nsetTimeout(callbackTime, 1500);\nconsole.log('Hi');"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 13470,
        "title": "Promesses",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "Promises",
            "id": 121147,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Ce programme vérifie si le nombre de chaises est égal ou supérieur au total des élèves plus les enseignants.\n1. Ajoute du code qui résout avec le message `\"Chairs are enough for students and teachers.\"`.\n2. Lorsqu'il y a peu de chaises, crée le scénario de rejet qui affiche `We need more chairs`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const school = {\n  students: 10,\n  teachers: 7,\n  chairs: 18\n};\n\nfunction enoughChairs() {\n  return new Promise(function(resolve, reject) {\n    if (school.chairs >= (school.students + school.teachers)) {\n     (\"Chairs are enough for students and teachers.\");\n    } else {\n     (\"We need more chairs\");\n    }\n  });\n}\nconst schoolData = enoughChairs();\nconsole.log(schoolData);",
                  "solvedContent": "const school = {\n  students: 10,\n  teachers: 7,\n  chairs: 18\n};\n\nfunction enoughChairs() {\n  return new Promise(function(resolve, reject) {\n    if (school.chairs >= (school.students + school.teachers)) {\n     resolve(\"Chairs are enough for students and teachers.\");\n    } else {\n     reject(\"We need more chairs\");\n    }\n  });\n}\nconst schoolData = enoughChairs();\nconsole.log(schoolData);"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 13474,
        "title": "asynchrone",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "async",
            "id": 121151,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Il est temps de prendre un délicieux café, et nous voulons y ajouter deux cuillères de sucre.\n1. Ajoute `async` et `await` pour activer la réponse asynchrone des fonctions à l'intérieur de `putSugarOnMyCoffee`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const spoonsForCoffee = () => new Promise(function(resolve) {\n  let enoughSugar = false;\n  for (let spoons = 0; spoons <= 2; spoons++) {\n    if (spoons === 2) {\n      enoughSugar = true;\n    }\n  }\n  resolve(enoughSugar);\n  console.log('This coffee has two spoons of sugar');\n});\nconst isEnoughSugarForMyCoffee = sugar => new Promise(function(resolve) {\n  if (sugar) {\n    resolve(\"yummy! It tastes good!\");\n  } else {\n    reject('Another spoon of sugar, please.');\n  }\n});\nconst putSugarOnMyCoffee = () => {\n  const isEnoughSugar = spoonsForCoffee();\n  const response = isEnoughSugarForMyCoffee(isEnoughSugar);\n  console.log(response);\n};\nputSugarOnMyCoffee();",
                  "solvedContent": "const spoonsForCoffee = () => new Promise(function(resolve) {\n  let enoughSugar = false;\n  for (let spoons = 0; spoons <= 2; spoons++) {\n    if (spoons === 2) {\n      enoughSugar = true;\n    }\n  }\n  resolve(enoughSugar);\n  console.log('This coffee has two spoons of sugar');\n});\nconst isEnoughSugarForMyCoffee = sugar => new Promise(function(resolve) {\n  if (sugar) {\n    resolve(\"yummy! It tastes good!\");\n  } else {\n    reject('Another spoon of sugar, please.');\n  }\n});\nconst putSugarOnMyCoffee = async () => {\n  const isEnoughSugar = await spoonsForCoffee();\n  const response = await isEnoughSugarForMyCoffee(isEnoughSugar);\n  console.log(response);\n};\nputSugarOnMyCoffee();"
                }
              ],
              "hints": []
            }
          }
        ]
      }
    ]
  }
}