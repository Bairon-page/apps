{
  "tutorial": {
    "id": 2651,
    "version": 4,
    "type": "challenges",
    "isNew": false,
    "codeLanguage": "python",
    "title": "Contrôle de flux",
    "descriptionContent": "Exercices de défi basés sur le contrôle de flux",
    "shortDescriptionContent": "",
    "showInTrack": true,
    "iconBanner": null,
    "chapters": [
      {
        "id": 14664,
        "title": "Notifications lues et non lues",
        "type": "challengeLevel0",
        "lessons": [
          {
            "title": "Read and Unread Notifications",
            "id": 129692,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Nous allons imprimer le nombre de notifications lues ou non lues qu'un utilisateur a reçues.\n\n1. Si `unread` n'est pas `0`, imprime `You have {unread} unread messages`. Utilise une f-string pour afficher la valeur de `unread` à l'intérieur de la chaîne.\n2. Sinon, imprime `No unread messages. Check your {read} read messages`. Utilise une f-string pour afficher la valeur de `read` à l'intérieur de la chaîne.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "read = 5\r\nunread = 4",
                  "solvedContent": "read = 5\r\nunread = 4\r\nif unread != 0:\r\n print(f\"You have {unread} unread messages\")\r\nelse:\r\n print(f\"No unread messages. Check your {read} read messages\")"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 14665,
        "title": "Vérificateur de mot de passe",
        "type": "challengeLevel0",
        "lessons": [
          {
            "title": "Password Checker",
            "id": 129693,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Vérifions si un mot de passe est correct en utilisant Python.\n\n1. Si `actualPass` est égal à `enteredPass`, affiche `Login successful`.\n2. Sinon, affiche `Incorrect credentials. Please try again`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "actualPass = \"abc123\"\r\nenteredPass = \"Abc123\"",
                  "solvedContent": "actualPass = \"abc123\"\r\nenteredPass = \"Abc123\"\r\nif actualPass == enteredPass:\r\n print(\"Login successful\")\r\nelse:\r\n print(\"Incorrect credentials. Please try again\")"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 14666,
        "title": "Vérification d'entrée",
        "type": "challengeLevel0",
        "lessons": [
          {
            "title": "Entry Check",
            "id": 129694,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Entrer dans certains établissements comme un club dépend d'avoir l'âge requis et d'avoir une réservation. Écrivons un programme Python pour vérifier si une personne peut entrer.\n\n1. Si `age` est supérieur ou égal à `18` et que `hasReservation` est `True`, définis `result` sur `True`.\n2. Imprime `Entry granted: ` suivi du résultat. Par exemple, si le résultat est `False`, alors imprime `Entry granted: False`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "age = 21\r\nhasReservation = True\r\nresult = False",
                  "solvedContent": "age = 21\r\nhasReservation = True\r\nresult = False\r\nif age >= 18 and hasReservation:\r\n result = True\r\n\r\nprint(f\"Entry granted: {result}\")"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 14667,
        "title": "Inventaire du magasin de chemises",
        "type": "challengeLevel0",
        "lessons": [
          {
            "title": "Shirt Store Inventory",
            "id": 129695,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Créer un programme d'inventaire simple pour un magasin de chemises. Le programme doit augmenter la variable `sales` de 1 et diminuer la variable `inventory` de 1 lorsqu'une chemise est vendue.\n\n1. Entre l'initialisation des variables et les instructions print, augmente la valeur de la variable `sales` de `1` en utilisant un opérateur.\n2. Diminue la valeur de la variable `inventory` de `1` en utilisant un opérateur.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "sales = 0\r\ninventory = 10\r\n\r\n\r\nprint(f'Sales: {sales}')\r\nprint(f'Inventory: {inventory}')",
                  "solvedContent": "sales = 0\r\ninventory = 10\r\nsales += 1\r\ninventory -= 1\r\nprint(f'Sales: {sales}')\r\nprint(f'Inventory: {inventory}')"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 14668,
        "title": "Arrête le Bot",
        "type": "challengeLevel0",
        "lessons": [
          {
            "title": "Stop the Bot",
            "id": 129696,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Crée un programme qui nous rappelle trois fois d'arrêter le bot.\n\n1. Code une boucle `while` qui affiche `\"Reminder: Stop the bot!\"` lorsque `reminder_count` est inférieur à `3`.\n2. Après l'instruction d'affichage, augmente la valeur de `reminder_count` de `1`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "reminder_count = 0\r\n\r\nprint(\"Reminder: Stop the bot!\")",
                  "solvedContent": "reminder_count = 0\r\nwhile reminder_count < 3:\r\n print(\"Reminder: Stop the bot!\")\r\n reminder_count += 1"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 14669,
        "title": "Vérification de boucle",
        "type": "challengeLevel0",
        "lessons": [
          {
            "title": "Loop Check",
            "id": 129697,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Nous avons écrit une instruction print pour nous informer que le programme est entré dans la boucle. Cependant, le programme boucle sans fin, corrige-le avant qu'il ne plante notre ordinateur !\n\n1. Dans la boucle `while`, change la valeur de la variable `loop` de sorte que `\"Entered the loop!\"` soit imprimé une seule fois.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "loop = True\r\nwhile loop:\r\n print(\"Entered the loop!\")\r\n \r\n",
                  "solvedContent": "loop = True\r\nwhile loop:\r\n print(\"Entered the loop!\")\r\n loop = False"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 13091,
        "title": "Blackjack",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "Blackjack",
            "id": 118060,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Nous allons coder une version simple de BlackJack en Python. Dans cette version, il y a deux joueurs qui reçoivent chacun deux cartes.\n\n`p1card1` et `p1card2` stockent les valeurs des cartes pour le joueur un.\n\n`p2card1` et `p2card2` stockent les valeurs des cartes pour le joueur deux.\n\n`p1check` stocke la somme des cartes du joueur un, et `p2check` stocke la même chose pour le joueur deux.\n\n1. Tout d'abord, nous vérifierons si des valeurs sont égales ou supérieures à `21`.\n    - Si `p1check` ou `p2check` est `21`, définis le `status` sur `blackjack`.\n    - Sinon, si `p1check` est supérieur à `21`, définis le `status` sur `P1 lose`.\n    - Sinon, si `p2check` est supérieur à `21`, définis le `status` sur `P2 lose`.\n    - Sinon, affiche `Checking player cards...`.\n2. Ensuite, nous comparerons les deux valeurs.\n    - Si `p1check` est supérieur à `p2check` et inférieur ou égal à `21`, définis le `winner` sur `P1`.\n    - Sinon, si `p2check` est supérieur à `p1check` et inférieur ou égal à `21`, définis le `winner` sur `P2`.\n    - Sinon, affiche `Draw`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "p1card1 = 10\r\np1card2 = 1\r\np2card1 = 10\r\np2card2 = 11\r\nstatus = \"\"\r\nwinner = \"\"\r\np1check = p1card1 + p1card2\r\np2check = p2card1 + p2card2\r\nprint(status)\r\nprint(\"Winner: \" + winner)",
                  "solvedContent": "p1card1 = 10\r\np1card2 = 1\r\np2card1 = 10\r\np2card2 = 11\r\nstatus = \"\"\r\nwinner = \"\"\r\np1check = p1card1 + p1card2\r\np2check = p2card1 + p2card2\r\n\r\nif p1check == 21 or p2check == 21:\r\n status = \"blackjack\"\r\nelif p1check > 21:\r\n status = \"P1 lose\"\r\nelif p2check > 21:\r\n status = \"P2 lose\"\r\nelse:\r\n print(\"Checking player cards...\")\r\n\r\nif p1check > p2check and p1check <= 21:\r\n winner = \"P1\"\r\nelif p1check < p2check and p2check <= 21:\r\n winner = \"P2\"\r\nelse:\r\n print(\"Draw\")\r\n\r\nprint(status)\r\nprint(\"Winner: \" + winner)"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 13094,
        "title": "Vérification du stockage",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "Storage check",
            "id": 118063,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Nous allons écrire un programme Python qui affiche un message basé sur l'espace de stockage et le code PIN saisi.\n\n1. Si `stored` est inférieur à `limit` et que `enteredPin` est égal à `correctPin`, affiche `{stored} GB cloud storage used. Limit is {limit} GB`. Utilise une f-string pour afficher la valeur de `stored` et `limit`.\n2. Si `stored` est égal à `limit` et que `enteredPin` est égal à `correctPin`, affiche `Cloud Storage limit reached`.\n3. Si `enteredPin` n'est pas égal à `correctPin`, affiche `Pin not correct`.\n4. Sinon, affiche `System error`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "stored = 40\r\nlimit = 50\r\nenteredPin = 4351\r\ncorrectPin = 4351",
                  "solvedContent": "stored = 40\r\nlimit = 50\r\nenteredPin = 4351\r\ncorrectPin = 4351\r\nif stored < limit and enteredPin == correctPin:\r\n print(f\"{stored} GB cloud storage used. Limit is {limit} GB\")\r\nelif stored == limit and enteredPin == correctPin:\r\n print(\"Cloud Storage limit reached\")\r\nelif enteredPin != correctPin:\r\n print(\"Pin not correct\")\r\nelse:\r\n print(\"System error\")"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 13093,
        "title": "Rapport de santé",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "Health report",
            "id": 118062,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Nous allons écrire un programme Python pour vérifier la tension artérielle (BP) et imprimer le résultat en conséquence.\n\n1. Si `bpUpper` est égal à `120` et `bpLower` est égal à `80`, définis `result` sur `normal`.\n2. Si `bpUpper` est inférieur à `120` ou `bpLower` est inférieur à `80`, définis `result` sur `low`.\n3. Sinon, définis `result` sur `high`.\n4. Imprime le résultat en dehors des blocs conditionnels.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "bpUpper = 118\r\nbpLower = 70\r\nresult = \"\"",
                  "solvedContent": "bpUpper = 118\r\nbpLower = 70\r\nresult = \"\"\r\nif bpUpper == 120 and bpLower == 80:\r\n result = \"normal\"\r\nelif bpUpper < 120 or bpLower < 80:\r\n result = \"low\"\r\nelse:\r\n result = \"high\"\r\n\r\nprint(\"BP \" + result)"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 13090,
        "title": "Éclairage automatique",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "Automatic lighting",
            "id": 118059,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Nous allons écrire un programme Python pour créer un système d'éclairage automatique.\n\n1. Si un objet est présent et que la lumière est augmentée, alors définis la `brightness` à `full`.\n2. Si un objet est présent mais que la lumière n'est pas augmentée, alors définis la `brightness` à `dim`.\n3. Sinon, définis la luminosité à `off`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "objectPresent = True\r\nincreasedLight = False\r\nprint(\"Light brightness: \" + brightness)",
                  "solvedContent": "objectPresent = True\r\nincreasedLight = False\r\nbrightness = \"\"\r\nif objectPresent and increasedLight:\r\n brightness = \"full\"\r\nelif objectPresent and not increasedLight:\r\n brightness = \"dim\"\r\nelse:\r\n brightness = \"off\"\r\n\r\nprint(\"Light brightness: \" + brightness)"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 13089,
        "title": "Vérificateur de batterie",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "Battery checker",
            "id": 118058,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Notre téléphone affiche différents messages en fonction du pourcentage de la batterie du téléphone. Écrivons un programme Python pour informer les utilisateurs de l'état de leur batterie.\n\n1. Si `percentage` est inférieur à `10`, affiche `Phone will shut down soon`.\n2. Si `percentage` est supérieur ou égal à `10` et inférieur à `20`, affiche `Low Battery`.\n3. Sinon, affiche la valeur du pourcentage suivie de `%`. Par exemple, si le pourcentage est `61`, affiche `61%`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "percentage = 49",
                  "solvedContent": "percentage = 49\r\nif percentage < 10:\r\n print(\"Phone will shut down soon\")\r\nelif percentage >= 10 and percentage < 20:\r\n print(\"Low Battery\")\r\nelse:\r\n print(f\"{percentage}%\")"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 13086,
        "title": "Calculateur de taxes",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "Tax calculator",
            "id": 118055,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Écrivons un programme Python qui calcule l'impôt.\n\n1. Si `income` est inférieur à `40000`, l'impôt sera `income * 0.1`.\n2. Si `income` est supérieur ou égal à `40000` et inférieur à `170000`, l'impôt sera `income * 0.22`.\n3. Si `income` est supérieur ou égal à `170000` et inférieur à `540000`, l'impôt sera `income * 0.32`.\n4. Sinon, l'impôt sera `income * 0.37`.\n5. Après les conditionnels, affiche la valeur de `tax`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "income = 44000\r\ntax = 0",
                  "solvedContent": "income = 44000\r\ntax = 0\r\nif income < 40000:\r\n tax = income * 0.1\r\nelif income >= 40000 and income < 170000:\r\n tax = income * 0.22\r\nelif income >= 170000 and income < 540000:\r\n tax = income * 0.32\r\nelse:\r\n tax = income * 0.37\r\n\r\nprint(f\"Tax: {tax}\")"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 13815,
        "title": "Pour dans la plage",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "For in range",
            "id": 123251,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Nous créons une horloge qui sonne toutes les heures.\n\n1. Code un `for` loop en utilisant `range()` qui va boucler 12 fois pour les 12 heures que nous avons sur l'horloge.\n2. À l'intérieur du `for` loop, affiche `\"Ring\"`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "",
                  "solvedContent": "for i in range(12):\r\n print(\"Ring\")"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 13814,
        "title": "Boucle while",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "While loop",
            "id": 123250,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Crée un programme pour un tour de montagnes russes. Il n'y a que 10 places disponibles, nous voulons un programme qui imprime le nombre de personnes sur les montagnes russes pour s'assurer qu'il n'est pas surchargé.\n\n1. Écris la condition pour la boucle while de sorte que la valeur de la variable `counter` soit imprimée de `1` à `10`.\n2. Après avoir imprimé la valeur de la variable `counter`, utilise un opérateur pour augmenter sa valeur de `1`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "counter = 1\r\n\r\nwhile : \r\n  print(counter)\r\n",
                  "solvedContent": "counter = 1\r\n\r\nwhile counter <= 10: \r\n  print(counter)\r\n  counter += 1"
                }
              ],
              "hints": []
            }
          }
        ]
      }
    ]
  }
}