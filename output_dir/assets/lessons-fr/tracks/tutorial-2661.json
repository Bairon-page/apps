{
  "tutorial": {
    "id": 2661,
    "version": 5,
    "type": "guidedProject",
    "isNew": false,
    "codeLanguage": "python",
    "title": "Liste de tâches - Partie 1",
    "descriptionContent": "Commence la création de ton application de liste de tâches. Cette première étape se concentre sur la conception de la structure de base et l'ajout de tâches.",
    "shortDescriptionContent": "",
    "showInTrack": true,
    "iconBanner": "tutorial-2661-icon-banner.svg",
    "chapters": [
      {
        "id": 14636,
        "title": "Chapitre #1",
        "type": "practiceLevel3",
        "lessons": [
          {
            "title": "Lesson #1",
            "id": 129453,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Bienvenue dans le projet **ToDo List**. Ici, tu vas créer une liste pour toutes tes tâches à faire.\n\nCommençons par créer une liste vide qui contiendra les tâches de la ToDo list.\n\n1. Crée une variable appelée `todo_list` et assigne-lui une liste vide `[]`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "",
                  "solvedContent": "todo_list = []"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Lesson #2",
            "id": 129454,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Nous devrions informer l'utilisateur si sa liste de tâches est vide. Fais cela en vérifiant la longueur de `todo_list` à l'intérieur d'une instruction `if`.\n\n1. Utilise une instruction `if` qui vérifie si `todo_list` est vide.\n2. Si c'est le cas, elle doit imprimer la chaîne de caractères `\"Your ToDo list is empty\"`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "todo_list = []",
                  "solvedContent": "todo_list = []\n\nif not todo_list:\n  print(\"Your ToDo list is empty\")"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Lesson #3",
            "id": 129455,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Liste vide ? Corrigeons cela en ajoutant quelques tâches et en les affichant.\n\n1. Mets à jour la première ligne en ajoutant deux éléments à la `todo_list` que nous pourrons afficher ;\n2. Ajoute une clause `else` à l'instruction `if` qui sera exécutée si la liste n'est pas vide.\n3. À l'intérieur de la clause `else`, crée une variable appelée `index` et assigne-lui une valeur de `1`.\n4. Toujours dans la clause `else`, démarre une boucle `for` pour itérer sur chaque `task` dans `todo_list`.\n5. Dans la boucle `for`, affiche l'`index`, suivi d'un `.` puis de la `task`. Utilise une f-string pour cela comme `f\"{index}. {task}\"`.\n6. Après avoir affiché la tâche, incrémente `index` de `1`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "todo_list = []\n\nif not todo_list:\n  print(\"Your ToDo list is empty\")",
                  "solvedContent": "todo_list = [\"Task 1\", \"Task 2\"]\n\nif not todo_list:\n  print(\"Your ToDo list is empty\")\nelse:\n  index = 1\n  for task in todo_list:\n    print(f\"{index}. {task}\")\n    index += 1"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Lesson #4",
            "id": 129456,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Notre programme doit demander à l'utilisateur d'entrer une nouvelle tâche. Utilisons la fonction `input` pour obtenir l'entrée de l'utilisateur.\n\n1. Ajoute une fonction `input` avec l'invite `\"Enter the task: \"` directement sous la ligne où tu définis le `todo_list`. Crée une variable appelée `new_task` pour enregistrer l'entrée reçue de la fonction `input`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "todo_list = [\"Task 1\", \"Task 2\"]\n\nif not todo_list:\n  print(\"Your ToDo list is empty\")\nelse:\n  index = 1\n  for task in todo_list:\n    print(f\"{index}. {task}\")\n    index += 1",
                  "solvedContent": "todo_list = [\"Task 1\", \"Task 2\"]\n\nnew_task = input(\"Enter the task: \")\n\nif not todo_list:\n  print(\"Your ToDo list is empty\")\nelse:\n  index = 1\n  for task in todo_list:\n    print(f\"{index}. {task}\")\n    index += 1"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Lesson #5",
            "id": 129457,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Ajoutons la nouvelle tâche de l'utilisateur à la `todo_list` et confirmons que la tâche a été ajoutée.\n\n1. Avant le bloc `if`, ajoute la variable `new_task` à `todo_list`.\n2. Imprime `Task \"{new_task}\" added`, en utilisant une f-string pour inclure la tâche que l'utilisateur a ajoutée.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "todo_list = [\"Task 1\", \"Task 2\"]\n\nnew_task = input(\"Enter the task: \")\n\nif not todo_list:\n  print(\"Your ToDo list is empty\")\nelse:\n  index = 1\n  for task in todo_list:\n    print(f\"{index}. {task}\")\n    index += 1",
                  "solvedContent": "todo_list = [\"Task 1\", \"Task 2\"]\n\nnew_task = input(\"Enter the task: \")\ntodo_list.append(new_task)\nprint(f\"Task '{new_task}' added to the ToDo list\")\n\nif not todo_list:\n  print(\"Your ToDo list is empty\")\nelse:\n  index = 1\n  for task in todo_list:\n    print(f\"{index}. {task}\")\n    index += 1"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Lesson #6",
            "id": 129458,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Enfin, exécutons une boucle jusqu'à ce que l'utilisateur décide de quitter. Pour l'instant, nous allons la faire tourner indéfiniment. Nous changerons cela dans la deuxième partie du projet.\n\n1. Enveloppez l'ensemble du code dans une boucle `while` dont la condition est définie sur `True`, tout en gardant la toute première ligne où vous définissez la variable `todo_list` à l'extérieur.\n\nAprès avoir implémenté la boucle `while`, ajoutez quelques tâches et voyez la liste s'allonger.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "todo_list = [\"Task 1\", \"Task 2\"]\n\nnew_task = input(\"Enter the task: \")\ntodo_list.append(new_task)\nprint(f\"Task '{new_task}' added to the ToDo list\")\n\nif not todo_list:\n  print(\"Your ToDo list is empty\")\nelse:\n  index = 1\n  for task in todo_list:\n    print(f\"{index}. {task}\")\n    index += 1",
                  "solvedContent": "todo_list = [\"Task 1\", \"Task 2\"]\n\nwhile True:\n  new_task = input(\"Enter the task: \")\n  todo_list.append(new_task)\n  print(f\"Task '{new_task}' added to the ToDo list\")\n\n  if not todo_list:\n    print(\"Your ToDo list is empty\")\n  else:\n    index = 1\n    for task in todo_list:\n      print(f\"{index}. {task}\")\n      index += 1"
                }
              ],
              "hints": []
            }
          }
        ]
      }
    ]
  }
}