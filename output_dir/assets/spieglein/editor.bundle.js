var Spieglein = (function (exports) {
    'use strict';

    /**
    The default maximum length of a `TreeBuffer` node.
    */
    const DefaultBufferLength = 1024;
    let nextPropID = 0;
    let Range$1 = class Range {
        constructor(from, to) {
            this.from = from;
            this.to = to;
        }
    };
    /**
    Each [node type](#common.NodeType) or [individual tree](#common.Tree)
    can have metadata associated with it in props. Instances of this
    class represent prop names.
    */
    class NodeProp {
        /**
        Create a new node prop type.
        */
        constructor(config = {}) {
            this.id = nextPropID++;
            this.perNode = !!config.perNode;
            this.deserialize = config.deserialize || (() => {
                throw new Error("This node type doesn't define a deserialize function");
            });
        }
        /**
        This is meant to be used with
        [`NodeSet.extend`](#common.NodeSet.extend) or
        [`LRParser.configure`](#lr.ParserConfig.props) to compute
        prop values for each node type in the set. Takes a [match
        object](#common.NodeType^match) or function that returns undefined
        if the node type doesn't get this prop, and the prop's value if
        it does.
        */
        add(match) {
            if (this.perNode)
                throw new RangeError("Can't add per-node props to node types");
            if (typeof match != "function")
                match = NodeType.match(match);
            return (type) => {
                let result = match(type);
                return result === undefined ? null : [this, result];
            };
        }
    }
    /**
    Prop that is used to describe matching delimiters. For opening
    delimiters, this holds an array of node names (written as a
    space-separated string when declaring this prop in a grammar)
    for the node types of closing delimiters that match it.
    */
    NodeProp.closedBy = new NodeProp({ deserialize: str => str.split(" ") });
    /**
    The inverse of [`closedBy`](#common.NodeProp^closedBy). This is
    attached to closing delimiters, holding an array of node names
    of types of matching opening delimiters.
    */
    NodeProp.openedBy = new NodeProp({ deserialize: str => str.split(" ") });
    /**
    Used to assign node types to groups (for example, all node
    types that represent an expression could be tagged with an
    `"Expression"` group).
    */
    NodeProp.group = new NodeProp({ deserialize: str => str.split(" ") });
    /**
    Attached to nodes to indicate these should be
    [displayed](https://codemirror.net/docs/ref/#language.syntaxTree)
    in a bidirectional text isolate, so that direction-neutral
    characters on their sides don't incorrectly get associated with
    surrounding text. You'll generally want to set this for nodes
    that contain arbitrary text, like strings and comments, and for
    nodes that appear _inside_ arbitrary text, like HTML tags. When
    not given a value, in a grammar declaration, defaults to
    `"auto"`.
    */
    NodeProp.isolate = new NodeProp({ deserialize: value => {
            if (value && value != "rtl" && value != "ltr" && value != "auto")
                throw new RangeError("Invalid value for isolate: " + value);
            return value || "auto";
        } });
    /**
    The hash of the [context](#lr.ContextTracker.constructor)
    that the node was parsed in, if any. Used to limit reuse of
    contextual nodes.
    */
    NodeProp.contextHash = new NodeProp({ perNode: true });
    /**
    The distance beyond the end of the node that the tokenizer
    looked ahead for any of the tokens inside the node. (The LR
    parser only stores this when it is larger than 25, for
    efficiency reasons.)
    */
    NodeProp.lookAhead = new NodeProp({ perNode: true });
    /**
    This per-node prop is used to replace a given node, or part of a
    node, with another tree. This is useful to include trees from
    different languages in mixed-language parsers.
    */
    NodeProp.mounted = new NodeProp({ perNode: true });
    /**
    A mounted tree, which can be [stored](#common.NodeProp^mounted) on
    a tree node to indicate that parts of its content are
    represented by another tree.
    */
    class MountedTree {
        constructor(
        /**
        The inner tree.
        */
        tree,
        /**
        If this is null, this tree replaces the entire node (it will
        be included in the regular iteration instead of its host
        node). If not, only the given ranges are considered to be
        covered by this tree. This is used for trees that are mixed in
        a way that isn't strictly hierarchical. Such mounted trees are
        only entered by [`resolveInner`](#common.Tree.resolveInner)
        and [`enter`](#common.SyntaxNode.enter).
        */
        overlay,
        /**
        The parser used to create this subtree.
        */
        parser) {
            this.tree = tree;
            this.overlay = overlay;
            this.parser = parser;
        }
        /**
        @internal
        */
        static get(tree) {
            return tree && tree.props && tree.props[NodeProp.mounted.id];
        }
    }
    const noProps = Object.create(null);
    /**
    Each node in a syntax tree has a node type associated with it.
    */
    class NodeType {
        /**
        @internal
        */
        constructor(
        /**
        The name of the node type. Not necessarily unique, but if the
        grammar was written properly, different node types with the
        same name within a node set should play the same semantic
        role.
        */
        name,
        /**
        @internal
        */
        props,
        /**
        The id of this node in its set. Corresponds to the term ids
        used in the parser.
        */
        id,
        /**
        @internal
        */
        flags = 0) {
            this.name = name;
            this.props = props;
            this.id = id;
            this.flags = flags;
        }
        /**
        Define a node type.
        */
        static define(spec) {
            let props = spec.props && spec.props.length ? Object.create(null) : noProps;
            let flags = (spec.top ? 1 /* NodeFlag.Top */ : 0) | (spec.skipped ? 2 /* NodeFlag.Skipped */ : 0) |
                (spec.error ? 4 /* NodeFlag.Error */ : 0) | (spec.name == null ? 8 /* NodeFlag.Anonymous */ : 0);
            let type = new NodeType(spec.name || "", props, spec.id, flags);
            if (spec.props)
                for (let src of spec.props) {
                    if (!Array.isArray(src))
                        src = src(type);
                    if (src) {
                        if (src[0].perNode)
                            throw new RangeError("Can't store a per-node prop on a node type");
                        props[src[0].id] = src[1];
                    }
                }
            return type;
        }
        /**
        Retrieves a node prop for this type. Will return `undefined` if
        the prop isn't present on this node.
        */
        prop(prop) { return this.props[prop.id]; }
        /**
        True when this is the top node of a grammar.
        */
        get isTop() { return (this.flags & 1 /* NodeFlag.Top */) > 0; }
        /**
        True when this node is produced by a skip rule.
        */
        get isSkipped() { return (this.flags & 2 /* NodeFlag.Skipped */) > 0; }
        /**
        Indicates whether this is an error node.
        */
        get isError() { return (this.flags & 4 /* NodeFlag.Error */) > 0; }
        /**
        When true, this node type doesn't correspond to a user-declared
        named node, for example because it is used to cache repetition.
        */
        get isAnonymous() { return (this.flags & 8 /* NodeFlag.Anonymous */) > 0; }
        /**
        Returns true when this node's name or one of its
        [groups](#common.NodeProp^group) matches the given string.
        */
        is(name) {
            if (typeof name == 'string') {
                if (this.name == name)
                    return true;
                let group = this.prop(NodeProp.group);
                return group ? group.indexOf(name) > -1 : false;
            }
            return this.id == name;
        }
        /**
        Create a function from node types to arbitrary values by
        specifying an object whose property names are node or
        [group](#common.NodeProp^group) names. Often useful with
        [`NodeProp.add`](#common.NodeProp.add). You can put multiple
        names, separated by spaces, in a single property name to map
        multiple node names to a single value.
        */
        static match(map) {
            let direct = Object.create(null);
            for (let prop in map)
                for (let name of prop.split(" "))
                    direct[name] = map[prop];
            return (node) => {
                for (let groups = node.prop(NodeProp.group), i = -1; i < (groups ? groups.length : 0); i++) {
                    let found = direct[i < 0 ? node.name : groups[i]];
                    if (found)
                        return found;
                }
            };
        }
    }
    /**
    An empty dummy node type to use when no actual type is available.
    */
    NodeType.none = new NodeType("", Object.create(null), 0, 8 /* NodeFlag.Anonymous */);
    /**
    A node set holds a collection of node types. It is used to
    compactly represent trees by storing their type ids, rather than a
    full pointer to the type object, in a numeric array. Each parser
    [has](#lr.LRParser.nodeSet) a node set, and [tree
    buffers](#common.TreeBuffer) can only store collections of nodes
    from the same set. A set can have a maximum of 2**16 (65536) node
    types in it, so that the ids fit into 16-bit typed array slots.
    */
    class NodeSet {
        /**
        Create a set with the given types. The `id` property of each
        type should correspond to its position within the array.
        */
        constructor(
        /**
        The node types in this set, by id.
        */
        types) {
            this.types = types;
            for (let i = 0; i < types.length; i++)
                if (types[i].id != i)
                    throw new RangeError("Node type ids should correspond to array positions when creating a node set");
        }
        /**
        Create a copy of this set with some node properties added. The
        arguments to this method can be created with
        [`NodeProp.add`](#common.NodeProp.add).
        */
        extend(...props) {
            let newTypes = [];
            for (let type of this.types) {
                let newProps = null;
                for (let source of props) {
                    let add = source(type);
                    if (add) {
                        if (!newProps)
                            newProps = Object.assign({}, type.props);
                        newProps[add[0].id] = add[1];
                    }
                }
                newTypes.push(newProps ? new NodeType(type.name, newProps, type.id, type.flags) : type);
            }
            return new NodeSet(newTypes);
        }
    }
    const CachedNode = new WeakMap(), CachedInnerNode = new WeakMap();
    /**
    Options that control iteration. Can be combined with the `|`
    operator to enable multiple ones.
    */
    var IterMode;
    (function (IterMode) {
        /**
        When enabled, iteration will only visit [`Tree`](#common.Tree)
        objects, not nodes packed into
        [`TreeBuffer`](#common.TreeBuffer)s.
        */
        IterMode[IterMode["ExcludeBuffers"] = 1] = "ExcludeBuffers";
        /**
        Enable this to make iteration include anonymous nodes (such as
        the nodes that wrap repeated grammar constructs into a balanced
        tree).
        */
        IterMode[IterMode["IncludeAnonymous"] = 2] = "IncludeAnonymous";
        /**
        By default, regular [mounted](#common.NodeProp^mounted) nodes
        replace their base node in iteration. Enable this to ignore them
        instead.
        */
        IterMode[IterMode["IgnoreMounts"] = 4] = "IgnoreMounts";
        /**
        This option only applies in
        [`enter`](#common.SyntaxNode.enter)-style methods. It tells the
        library to not enter mounted overlays if one covers the given
        position.
        */
        IterMode[IterMode["IgnoreOverlays"] = 8] = "IgnoreOverlays";
    })(IterMode || (IterMode = {}));
    /**
    A piece of syntax tree. There are two ways to approach these
    trees: the way they are actually stored in memory, and the
    convenient way.

    Syntax trees are stored as a tree of `Tree` and `TreeBuffer`
    objects. By packing detail information into `TreeBuffer` leaf
    nodes, the representation is made a lot more memory-efficient.

    However, when you want to actually work with tree nodes, this
    representation is very awkward, so most client code will want to
    use the [`TreeCursor`](#common.TreeCursor) or
    [`SyntaxNode`](#common.SyntaxNode) interface instead, which provides
    a view on some part of this data structure, and can be used to
    move around to adjacent nodes.
    */
    class Tree {
        /**
        Construct a new tree. See also [`Tree.build`](#common.Tree^build).
        */
        constructor(
        /**
        The type of the top node.
        */
        type,
        /**
        This node's child nodes.
        */
        children,
        /**
        The positions (offsets relative to the start of this tree) of
        the children.
        */
        positions,
        /**
        The total length of this tree
        */
        length,
        /**
        Per-node [node props](#common.NodeProp) to associate with this node.
        */
        props) {
            this.type = type;
            this.children = children;
            this.positions = positions;
            this.length = length;
            /**
            @internal
            */
            this.props = null;
            if (props && props.length) {
                this.props = Object.create(null);
                for (let [prop, value] of props)
                    this.props[typeof prop == "number" ? prop : prop.id] = value;
            }
        }
        /**
        @internal
        */
        toString() {
            let mounted = MountedTree.get(this);
            if (mounted && !mounted.overlay)
                return mounted.tree.toString();
            let children = "";
            for (let ch of this.children) {
                let str = ch.toString();
                if (str) {
                    if (children)
                        children += ",";
                    children += str;
                }
            }
            return !this.type.name ? children :
                (/\W/.test(this.type.name) && !this.type.isError ? JSON.stringify(this.type.name) : this.type.name) +
                    (children.length ? "(" + children + ")" : "");
        }
        /**
        Get a [tree cursor](#common.TreeCursor) positioned at the top of
        the tree. Mode can be used to [control](#common.IterMode) which
        nodes the cursor visits.
        */
        cursor(mode = 0) {
            return new TreeCursor(this.topNode, mode);
        }
        /**
        Get a [tree cursor](#common.TreeCursor) pointing into this tree
        at the given position and side (see
        [`moveTo`](#common.TreeCursor.moveTo).
        */
        cursorAt(pos, side = 0, mode = 0) {
            let scope = CachedNode.get(this) || this.topNode;
            let cursor = new TreeCursor(scope);
            cursor.moveTo(pos, side);
            CachedNode.set(this, cursor._tree);
            return cursor;
        }
        /**
        Get a [syntax node](#common.SyntaxNode) object for the top of the
        tree.
        */
        get topNode() {
            return new TreeNode(this, 0, 0, null);
        }
        /**
        Get the [syntax node](#common.SyntaxNode) at the given position.
        If `side` is -1, this will move into nodes that end at the
        position. If 1, it'll move into nodes that start at the
        position. With 0, it'll only enter nodes that cover the position
        from both sides.

        Note that this will not enter
        [overlays](#common.MountedTree.overlay), and you often want
        [`resolveInner`](#common.Tree.resolveInner) instead.
        */
        resolve(pos, side = 0) {
            let node = resolveNode(CachedNode.get(this) || this.topNode, pos, side, false);
            CachedNode.set(this, node);
            return node;
        }
        /**
        Like [`resolve`](#common.Tree.resolve), but will enter
        [overlaid](#common.MountedTree.overlay) nodes, producing a syntax node
        pointing into the innermost overlaid tree at the given position
        (with parent links going through all parent structure, including
        the host trees).
        */
        resolveInner(pos, side = 0) {
            let node = resolveNode(CachedInnerNode.get(this) || this.topNode, pos, side, true);
            CachedInnerNode.set(this, node);
            return node;
        }
        /**
        In some situations, it can be useful to iterate through all
        nodes around a position, including those in overlays that don't
        directly cover the position. This method gives you an iterator
        that will produce all nodes, from small to big, around the given
        position.
        */
        resolveStack(pos, side = 0) {
            return stackIterator(this, pos, side);
        }
        /**
        Iterate over the tree and its children, calling `enter` for any
        node that touches the `from`/`to` region (if given) before
        running over such a node's children, and `leave` (if given) when
        leaving the node. When `enter` returns `false`, that node will
        not have its children iterated over (or `leave` called).
        */
        iterate(spec) {
            let { enter, leave, from = 0, to = this.length } = spec;
            let mode = spec.mode || 0, anon = (mode & IterMode.IncludeAnonymous) > 0;
            for (let c = this.cursor(mode | IterMode.IncludeAnonymous);;) {
                let entered = false;
                if (c.from <= to && c.to >= from && (!anon && c.type.isAnonymous || enter(c) !== false)) {
                    if (c.firstChild())
                        continue;
                    entered = true;
                }
                for (;;) {
                    if (entered && leave && (anon || !c.type.isAnonymous))
                        leave(c);
                    if (c.nextSibling())
                        break;
                    if (!c.parent())
                        return;
                    entered = true;
                }
            }
        }
        /**
        Get the value of the given [node prop](#common.NodeProp) for this
        node. Works with both per-node and per-type props.
        */
        prop(prop) {
            return !prop.perNode ? this.type.prop(prop) : this.props ? this.props[prop.id] : undefined;
        }
        /**
        Returns the node's [per-node props](#common.NodeProp.perNode) in a
        format that can be passed to the [`Tree`](#common.Tree)
        constructor.
        */
        get propValues() {
            let result = [];
            if (this.props)
                for (let id in this.props)
                    result.push([+id, this.props[id]]);
            return result;
        }
        /**
        Balance the direct children of this tree, producing a copy of
        which may have children grouped into subtrees with type
        [`NodeType.none`](#common.NodeType^none).
        */
        balance(config = {}) {
            return this.children.length <= 8 /* Balance.BranchFactor */ ? this :
                balanceRange(NodeType.none, this.children, this.positions, 0, this.children.length, 0, this.length, (children, positions, length) => new Tree(this.type, children, positions, length, this.propValues), config.makeTree || ((children, positions, length) => new Tree(NodeType.none, children, positions, length)));
        }
        /**
        Build a tree from a postfix-ordered buffer of node information,
        or a cursor over such a buffer.
        */
        static build(data) { return buildTree(data); }
    }
    /**
    The empty tree
    */
    Tree.empty = new Tree(NodeType.none, [], [], 0);
    class FlatBufferCursor {
        constructor(buffer, index) {
            this.buffer = buffer;
            this.index = index;
        }
        get id() { return this.buffer[this.index - 4]; }
        get start() { return this.buffer[this.index - 3]; }
        get end() { return this.buffer[this.index - 2]; }
        get size() { return this.buffer[this.index - 1]; }
        get pos() { return this.index; }
        next() { this.index -= 4; }
        fork() { return new FlatBufferCursor(this.buffer, this.index); }
    }
    /**
    Tree buffers contain (type, start, end, endIndex) quads for each
    node. In such a buffer, nodes are stored in prefix order (parents
    before children, with the endIndex of the parent indicating which
    children belong to it).
    */
    class TreeBuffer {
        /**
        Create a tree buffer.
        */
        constructor(
        /**
        The buffer's content.
        */
        buffer,
        /**
        The total length of the group of nodes in the buffer.
        */
        length,
        /**
        The node set used in this buffer.
        */
        set) {
            this.buffer = buffer;
            this.length = length;
            this.set = set;
        }
        /**
        @internal
        */
        get type() { return NodeType.none; }
        /**
        @internal
        */
        toString() {
            let result = [];
            for (let index = 0; index < this.buffer.length;) {
                result.push(this.childString(index));
                index = this.buffer[index + 3];
            }
            return result.join(",");
        }
        /**
        @internal
        */
        childString(index) {
            let id = this.buffer[index], endIndex = this.buffer[index + 3];
            let type = this.set.types[id], result = type.name;
            if (/\W/.test(result) && !type.isError)
                result = JSON.stringify(result);
            index += 4;
            if (endIndex == index)
                return result;
            let children = [];
            while (index < endIndex) {
                children.push(this.childString(index));
                index = this.buffer[index + 3];
            }
            return result + "(" + children.join(",") + ")";
        }
        /**
        @internal
        */
        findChild(startIndex, endIndex, dir, pos, side) {
            let { buffer } = this, pick = -1;
            for (let i = startIndex; i != endIndex; i = buffer[i + 3]) {
                if (checkSide(side, pos, buffer[i + 1], buffer[i + 2])) {
                    pick = i;
                    if (dir > 0)
                        break;
                }
            }
            return pick;
        }
        /**
        @internal
        */
        slice(startI, endI, from) {
            let b = this.buffer;
            let copy = new Uint16Array(endI - startI), len = 0;
            for (let i = startI, j = 0; i < endI;) {
                copy[j++] = b[i++];
                copy[j++] = b[i++] - from;
                let to = copy[j++] = b[i++] - from;
                copy[j++] = b[i++] - startI;
                len = Math.max(len, to);
            }
            return new TreeBuffer(copy, len, this.set);
        }
    }
    function checkSide(side, pos, from, to) {
        switch (side) {
            case -2 /* Side.Before */: return from < pos;
            case -1 /* Side.AtOrBefore */: return to >= pos && from < pos;
            case 0 /* Side.Around */: return from < pos && to > pos;
            case 1 /* Side.AtOrAfter */: return from <= pos && to > pos;
            case 2 /* Side.After */: return to > pos;
            case 4 /* Side.DontCare */: return true;
        }
    }
    function resolveNode(node, pos, side, overlays) {
        var _a;
        // Move up to a node that actually holds the position, if possible
        while (node.from == node.to ||
            (side < 1 ? node.from >= pos : node.from > pos) ||
            (side > -1 ? node.to <= pos : node.to < pos)) {
            let parent = !overlays && node instanceof TreeNode && node.index < 0 ? null : node.parent;
            if (!parent)
                return node;
            node = parent;
        }
        let mode = overlays ? 0 : IterMode.IgnoreOverlays;
        // Must go up out of overlays when those do not overlap with pos
        if (overlays)
            for (let scan = node, parent = scan.parent; parent; scan = parent, parent = scan.parent) {
                if (scan instanceof TreeNode && scan.index < 0 && ((_a = parent.enter(pos, side, mode)) === null || _a === void 0 ? void 0 : _a.from) != scan.from)
                    node = parent;
            }
        for (;;) {
            let inner = node.enter(pos, side, mode);
            if (!inner)
                return node;
            node = inner;
        }
    }
    class BaseNode {
        cursor(mode = 0) { return new TreeCursor(this, mode); }
        getChild(type, before = null, after = null) {
            let r = getChildren(this, type, before, after);
            return r.length ? r[0] : null;
        }
        getChildren(type, before = null, after = null) {
            return getChildren(this, type, before, after);
        }
        resolve(pos, side = 0) {
            return resolveNode(this, pos, side, false);
        }
        resolveInner(pos, side = 0) {
            return resolveNode(this, pos, side, true);
        }
        matchContext(context) {
            return matchNodeContext(this.parent, context);
        }
        enterUnfinishedNodesBefore(pos) {
            let scan = this.childBefore(pos), node = this;
            while (scan) {
                let last = scan.lastChild;
                if (!last || last.to != scan.to)
                    break;
                if (last.type.isError && last.from == last.to) {
                    node = scan;
                    scan = last.prevSibling;
                }
                else {
                    scan = last;
                }
            }
            return node;
        }
        get node() { return this; }
        get next() { return this.parent; }
    }
    class TreeNode extends BaseNode {
        constructor(_tree, from,
        // Index in parent node, set to -1 if the node is not a direct child of _parent.node (overlay)
        index, _parent) {
            super();
            this._tree = _tree;
            this.from = from;
            this.index = index;
            this._parent = _parent;
        }
        get type() { return this._tree.type; }
        get name() { return this._tree.type.name; }
        get to() { return this.from + this._tree.length; }
        nextChild(i, dir, pos, side, mode = 0) {
            for (let parent = this;;) {
                for (let { children, positions } = parent._tree, e = dir > 0 ? children.length : -1; i != e; i += dir) {
                    let next = children[i], start = positions[i] + parent.from;
                    if (!checkSide(side, pos, start, start + next.length))
                        continue;
                    if (next instanceof TreeBuffer) {
                        if (mode & IterMode.ExcludeBuffers)
                            continue;
                        let index = next.findChild(0, next.buffer.length, dir, pos - start, side);
                        if (index > -1)
                            return new BufferNode(new BufferContext(parent, next, i, start), null, index);
                    }
                    else if ((mode & IterMode.IncludeAnonymous) || (!next.type.isAnonymous || hasChild(next))) {
                        let mounted;
                        if (!(mode & IterMode.IgnoreMounts) && (mounted = MountedTree.get(next)) && !mounted.overlay)
                            return new TreeNode(mounted.tree, start, i, parent);
                        let inner = new TreeNode(next, start, i, parent);
                        return (mode & IterMode.IncludeAnonymous) || !inner.type.isAnonymous ? inner
                            : inner.nextChild(dir < 0 ? next.children.length - 1 : 0, dir, pos, side);
                    }
                }
                if ((mode & IterMode.IncludeAnonymous) || !parent.type.isAnonymous)
                    return null;
                if (parent.index >= 0)
                    i = parent.index + dir;
                else
                    i = dir < 0 ? -1 : parent._parent._tree.children.length;
                parent = parent._parent;
                if (!parent)
                    return null;
            }
        }
        get firstChild() { return this.nextChild(0, 1, 0, 4 /* Side.DontCare */); }
        get lastChild() { return this.nextChild(this._tree.children.length - 1, -1, 0, 4 /* Side.DontCare */); }
        childAfter(pos) { return this.nextChild(0, 1, pos, 2 /* Side.After */); }
        childBefore(pos) { return this.nextChild(this._tree.children.length - 1, -1, pos, -2 /* Side.Before */); }
        enter(pos, side, mode = 0) {
            let mounted;
            if (!(mode & IterMode.IgnoreOverlays) && (mounted = MountedTree.get(this._tree)) && mounted.overlay) {
                let rPos = pos - this.from;
                for (let { from, to } of mounted.overlay) {
                    if ((side > 0 ? from <= rPos : from < rPos) &&
                        (side < 0 ? to >= rPos : to > rPos))
                        return new TreeNode(mounted.tree, mounted.overlay[0].from + this.from, -1, this);
                }
            }
            return this.nextChild(0, 1, pos, side, mode);
        }
        nextSignificantParent() {
            let val = this;
            while (val.type.isAnonymous && val._parent)
                val = val._parent;
            return val;
        }
        get parent() {
            return this._parent ? this._parent.nextSignificantParent() : null;
        }
        get nextSibling() {
            return this._parent && this.index >= 0 ? this._parent.nextChild(this.index + 1, 1, 0, 4 /* Side.DontCare */) : null;
        }
        get prevSibling() {
            return this._parent && this.index >= 0 ? this._parent.nextChild(this.index - 1, -1, 0, 4 /* Side.DontCare */) : null;
        }
        get tree() { return this._tree; }
        toTree() { return this._tree; }
        /**
        @internal
        */
        toString() { return this._tree.toString(); }
    }
    function getChildren(node, type, before, after) {
        let cur = node.cursor(), result = [];
        if (!cur.firstChild())
            return result;
        if (before != null)
            for (let found = false; !found;) {
                found = cur.type.is(before);
                if (!cur.nextSibling())
                    return result;
            }
        for (;;) {
            if (after != null && cur.type.is(after))
                return result;
            if (cur.type.is(type))
                result.push(cur.node);
            if (!cur.nextSibling())
                return after == null ? result : [];
        }
    }
    function matchNodeContext(node, context, i = context.length - 1) {
        for (let p = node; i >= 0; p = p.parent) {
            if (!p)
                return false;
            if (!p.type.isAnonymous) {
                if (context[i] && context[i] != p.name)
                    return false;
                i--;
            }
        }
        return true;
    }
    class BufferContext {
        constructor(parent, buffer, index, start) {
            this.parent = parent;
            this.buffer = buffer;
            this.index = index;
            this.start = start;
        }
    }
    class BufferNode extends BaseNode {
        get name() { return this.type.name; }
        get from() { return this.context.start + this.context.buffer.buffer[this.index + 1]; }
        get to() { return this.context.start + this.context.buffer.buffer[this.index + 2]; }
        constructor(context, _parent, index) {
            super();
            this.context = context;
            this._parent = _parent;
            this.index = index;
            this.type = context.buffer.set.types[context.buffer.buffer[index]];
        }
        child(dir, pos, side) {
            let { buffer } = this.context;
            let index = buffer.findChild(this.index + 4, buffer.buffer[this.index + 3], dir, pos - this.context.start, side);
            return index < 0 ? null : new BufferNode(this.context, this, index);
        }
        get firstChild() { return this.child(1, 0, 4 /* Side.DontCare */); }
        get lastChild() { return this.child(-1, 0, 4 /* Side.DontCare */); }
        childAfter(pos) { return this.child(1, pos, 2 /* Side.After */); }
        childBefore(pos) { return this.child(-1, pos, -2 /* Side.Before */); }
        enter(pos, side, mode = 0) {
            if (mode & IterMode.ExcludeBuffers)
                return null;
            let { buffer } = this.context;
            let index = buffer.findChild(this.index + 4, buffer.buffer[this.index + 3], side > 0 ? 1 : -1, pos - this.context.start, side);
            return index < 0 ? null : new BufferNode(this.context, this, index);
        }
        get parent() {
            return this._parent || this.context.parent.nextSignificantParent();
        }
        externalSibling(dir) {
            return this._parent ? null : this.context.parent.nextChild(this.context.index + dir, dir, 0, 4 /* Side.DontCare */);
        }
        get nextSibling() {
            let { buffer } = this.context;
            let after = buffer.buffer[this.index + 3];
            if (after < (this._parent ? buffer.buffer[this._parent.index + 3] : buffer.buffer.length))
                return new BufferNode(this.context, this._parent, after);
            return this.externalSibling(1);
        }
        get prevSibling() {
            let { buffer } = this.context;
            let parentStart = this._parent ? this._parent.index + 4 : 0;
            if (this.index == parentStart)
                return this.externalSibling(-1);
            return new BufferNode(this.context, this._parent, buffer.findChild(parentStart, this.index, -1, 0, 4 /* Side.DontCare */));
        }
        get tree() { return null; }
        toTree() {
            let children = [], positions = [];
            let { buffer } = this.context;
            let startI = this.index + 4, endI = buffer.buffer[this.index + 3];
            if (endI > startI) {
                let from = buffer.buffer[this.index + 1];
                children.push(buffer.slice(startI, endI, from));
                positions.push(0);
            }
            return new Tree(this.type, children, positions, this.to - this.from);
        }
        /**
        @internal
        */
        toString() { return this.context.buffer.childString(this.index); }
    }
    function iterStack(heads) {
        if (!heads.length)
            return null;
        let pick = 0, picked = heads[0];
        for (let i = 1; i < heads.length; i++) {
            let node = heads[i];
            if (node.from > picked.from || node.to < picked.to) {
                picked = node;
                pick = i;
            }
        }
        let next = picked instanceof TreeNode && picked.index < 0 ? null : picked.parent;
        let newHeads = heads.slice();
        if (next)
            newHeads[pick] = next;
        else
            newHeads.splice(pick, 1);
        return new StackIterator(newHeads, picked);
    }
    class StackIterator {
        constructor(heads, node) {
            this.heads = heads;
            this.node = node;
        }
        get next() { return iterStack(this.heads); }
    }
    function stackIterator(tree, pos, side) {
        let inner = tree.resolveInner(pos, side), layers = null;
        for (let scan = inner instanceof TreeNode ? inner : inner.context.parent; scan; scan = scan.parent) {
            if (scan.index < 0) { // This is an overlay root
                let parent = scan.parent;
                (layers || (layers = [inner])).push(parent.resolve(pos, side));
                scan = parent;
            }
            else {
                let mount = MountedTree.get(scan.tree);
                // Relevant overlay branching off
                if (mount && mount.overlay && mount.overlay[0].from <= pos && mount.overlay[mount.overlay.length - 1].to >= pos) {
                    let root = new TreeNode(mount.tree, mount.overlay[0].from + scan.from, -1, scan);
                    (layers || (layers = [inner])).push(resolveNode(root, pos, side, false));
                }
            }
        }
        return layers ? iterStack(layers) : inner;
    }
    /**
    A tree cursor object focuses on a given node in a syntax tree, and
    allows you to move to adjacent nodes.
    */
    class TreeCursor {
        /**
        Shorthand for `.type.name`.
        */
        get name() { return this.type.name; }
        /**
        @internal
        */
        constructor(node,
        /**
        @internal
        */
        mode = 0) {
            this.mode = mode;
            /**
            @internal
            */
            this.buffer = null;
            this.stack = [];
            /**
            @internal
            */
            this.index = 0;
            this.bufferNode = null;
            if (node instanceof TreeNode) {
                this.yieldNode(node);
            }
            else {
                this._tree = node.context.parent;
                this.buffer = node.context;
                for (let n = node._parent; n; n = n._parent)
                    this.stack.unshift(n.index);
                this.bufferNode = node;
                this.yieldBuf(node.index);
            }
        }
        yieldNode(node) {
            if (!node)
                return false;
            this._tree = node;
            this.type = node.type;
            this.from = node.from;
            this.to = node.to;
            return true;
        }
        yieldBuf(index, type) {
            this.index = index;
            let { start, buffer } = this.buffer;
            this.type = type || buffer.set.types[buffer.buffer[index]];
            this.from = start + buffer.buffer[index + 1];
            this.to = start + buffer.buffer[index + 2];
            return true;
        }
        /**
        @internal
        */
        yield(node) {
            if (!node)
                return false;
            if (node instanceof TreeNode) {
                this.buffer = null;
                return this.yieldNode(node);
            }
            this.buffer = node.context;
            return this.yieldBuf(node.index, node.type);
        }
        /**
        @internal
        */
        toString() {
            return this.buffer ? this.buffer.buffer.childString(this.index) : this._tree.toString();
        }
        /**
        @internal
        */
        enterChild(dir, pos, side) {
            if (!this.buffer)
                return this.yield(this._tree.nextChild(dir < 0 ? this._tree._tree.children.length - 1 : 0, dir, pos, side, this.mode));
            let { buffer } = this.buffer;
            let index = buffer.findChild(this.index + 4, buffer.buffer[this.index + 3], dir, pos - this.buffer.start, side);
            if (index < 0)
                return false;
            this.stack.push(this.index);
            return this.yieldBuf(index);
        }
        /**
        Move the cursor to this node's first child. When this returns
        false, the node has no child, and the cursor has not been moved.
        */
        firstChild() { return this.enterChild(1, 0, 4 /* Side.DontCare */); }
        /**
        Move the cursor to this node's last child.
        */
        lastChild() { return this.enterChild(-1, 0, 4 /* Side.DontCare */); }
        /**
        Move the cursor to the first child that ends after `pos`.
        */
        childAfter(pos) { return this.enterChild(1, pos, 2 /* Side.After */); }
        /**
        Move to the last child that starts before `pos`.
        */
        childBefore(pos) { return this.enterChild(-1, pos, -2 /* Side.Before */); }
        /**
        Move the cursor to the child around `pos`. If side is -1 the
        child may end at that position, when 1 it may start there. This
        will also enter [overlaid](#common.MountedTree.overlay)
        [mounted](#common.NodeProp^mounted) trees unless `overlays` is
        set to false.
        */
        enter(pos, side, mode = this.mode) {
            if (!this.buffer)
                return this.yield(this._tree.enter(pos, side, mode));
            return mode & IterMode.ExcludeBuffers ? false : this.enterChild(1, pos, side);
        }
        /**
        Move to the node's parent node, if this isn't the top node.
        */
        parent() {
            if (!this.buffer)
                return this.yieldNode((this.mode & IterMode.IncludeAnonymous) ? this._tree._parent : this._tree.parent);
            if (this.stack.length)
                return this.yieldBuf(this.stack.pop());
            let parent = (this.mode & IterMode.IncludeAnonymous) ? this.buffer.parent : this.buffer.parent.nextSignificantParent();
            this.buffer = null;
            return this.yieldNode(parent);
        }
        /**
        @internal
        */
        sibling(dir) {
            if (!this.buffer)
                return !this._tree._parent ? false
                    : this.yield(this._tree.index < 0 ? null
                        : this._tree._parent.nextChild(this._tree.index + dir, dir, 0, 4 /* Side.DontCare */, this.mode));
            let { buffer } = this.buffer, d = this.stack.length - 1;
            if (dir < 0) {
                let parentStart = d < 0 ? 0 : this.stack[d] + 4;
                if (this.index != parentStart)
                    return this.yieldBuf(buffer.findChild(parentStart, this.index, -1, 0, 4 /* Side.DontCare */));
            }
            else {
                let after = buffer.buffer[this.index + 3];
                if (after < (d < 0 ? buffer.buffer.length : buffer.buffer[this.stack[d] + 3]))
                    return this.yieldBuf(after);
            }
            return d < 0 ? this.yield(this.buffer.parent.nextChild(this.buffer.index + dir, dir, 0, 4 /* Side.DontCare */, this.mode)) : false;
        }
        /**
        Move to this node's next sibling, if any.
        */
        nextSibling() { return this.sibling(1); }
        /**
        Move to this node's previous sibling, if any.
        */
        prevSibling() { return this.sibling(-1); }
        atLastNode(dir) {
            let index, parent, { buffer } = this;
            if (buffer) {
                if (dir > 0) {
                    if (this.index < buffer.buffer.buffer.length)
                        return false;
                }
                else {
                    for (let i = 0; i < this.index; i++)
                        if (buffer.buffer.buffer[i + 3] < this.index)
                            return false;
                }
                ({ index, parent } = buffer);
            }
            else {
                ({ index, _parent: parent } = this._tree);
            }
            for (; parent; { index, _parent: parent } = parent) {
                if (index > -1)
                    for (let i = index + dir, e = dir < 0 ? -1 : parent._tree.children.length; i != e; i += dir) {
                        let child = parent._tree.children[i];
                        if ((this.mode & IterMode.IncludeAnonymous) ||
                            child instanceof TreeBuffer ||
                            !child.type.isAnonymous ||
                            hasChild(child))
                            return false;
                    }
            }
            return true;
        }
        move(dir, enter) {
            if (enter && this.enterChild(dir, 0, 4 /* Side.DontCare */))
                return true;
            for (;;) {
                if (this.sibling(dir))
                    return true;
                if (this.atLastNode(dir) || !this.parent())
                    return false;
            }
        }
        /**
        Move to the next node in a
        [pre-order](https://en.wikipedia.org/wiki/Tree_traversal#Pre-order,_NLR)
        traversal, going from a node to its first child or, if the
        current node is empty or `enter` is false, its next sibling or
        the next sibling of the first parent node that has one.
        */
        next(enter = true) { return this.move(1, enter); }
        /**
        Move to the next node in a last-to-first pre-order traversal. A
        node is followed by its last child or, if it has none, its
        previous sibling or the previous sibling of the first parent
        node that has one.
        */
        prev(enter = true) { return this.move(-1, enter); }
        /**
        Move the cursor to the innermost node that covers `pos`. If
        `side` is -1, it will enter nodes that end at `pos`. If it is 1,
        it will enter nodes that start at `pos`.
        */
        moveTo(pos, side = 0) {
            // Move up to a node that actually holds the position, if possible
            while (this.from == this.to ||
                (side < 1 ? this.from >= pos : this.from > pos) ||
                (side > -1 ? this.to <= pos : this.to < pos))
                if (!this.parent())
                    break;
            // Then scan down into child nodes as far as possible
            while (this.enterChild(1, pos, side)) { }
            return this;
        }
        /**
        Get a [syntax node](#common.SyntaxNode) at the cursor's current
        position.
        */
        get node() {
            if (!this.buffer)
                return this._tree;
            let cache = this.bufferNode, result = null, depth = 0;
            if (cache && cache.context == this.buffer) {
                scan: for (let index = this.index, d = this.stack.length; d >= 0;) {
                    for (let c = cache; c; c = c._parent)
                        if (c.index == index) {
                            if (index == this.index)
                                return c;
                            result = c;
                            depth = d + 1;
                            break scan;
                        }
                    index = this.stack[--d];
                }
            }
            for (let i = depth; i < this.stack.length; i++)
                result = new BufferNode(this.buffer, result, this.stack[i]);
            return this.bufferNode = new BufferNode(this.buffer, result, this.index);
        }
        /**
        Get the [tree](#common.Tree) that represents the current node, if
        any. Will return null when the node is in a [tree
        buffer](#common.TreeBuffer).
        */
        get tree() {
            return this.buffer ? null : this._tree._tree;
        }
        /**
        Iterate over the current node and all its descendants, calling
        `enter` when entering a node and `leave`, if given, when leaving
        one. When `enter` returns `false`, any children of that node are
        skipped, and `leave` isn't called for it.
        */
        iterate(enter, leave) {
            for (let depth = 0;;) {
                let mustLeave = false;
                if (this.type.isAnonymous || enter(this) !== false) {
                    if (this.firstChild()) {
                        depth++;
                        continue;
                    }
                    if (!this.type.isAnonymous)
                        mustLeave = true;
                }
                for (;;) {
                    if (mustLeave && leave)
                        leave(this);
                    mustLeave = this.type.isAnonymous;
                    if (!depth)
                        return;
                    if (this.nextSibling())
                        break;
                    this.parent();
                    depth--;
                    mustLeave = true;
                }
            }
        }
        /**
        Test whether the current node matches a given context—a sequence
        of direct parent node names. Empty strings in the context array
        are treated as wildcards.
        */
        matchContext(context) {
            if (!this.buffer)
                return matchNodeContext(this.node.parent, context);
            let { buffer } = this.buffer, { types } = buffer.set;
            for (let i = context.length - 1, d = this.stack.length - 1; i >= 0; d--) {
                if (d < 0)
                    return matchNodeContext(this._tree, context, i);
                let type = types[buffer.buffer[this.stack[d]]];
                if (!type.isAnonymous) {
                    if (context[i] && context[i] != type.name)
                        return false;
                    i--;
                }
            }
            return true;
        }
    }
    function hasChild(tree) {
        return tree.children.some(ch => ch instanceof TreeBuffer || !ch.type.isAnonymous || hasChild(ch));
    }
    function buildTree(data) {
        var _a;
        let { buffer, nodeSet, maxBufferLength = DefaultBufferLength, reused = [], minRepeatType = nodeSet.types.length } = data;
        let cursor = Array.isArray(buffer) ? new FlatBufferCursor(buffer, buffer.length) : buffer;
        let types = nodeSet.types;
        let contextHash = 0, lookAhead = 0;
        function takeNode(parentStart, minPos, children, positions, inRepeat, depth) {
            let { id, start, end, size } = cursor;
            let lookAheadAtStart = lookAhead, contextAtStart = contextHash;
            while (size < 0) {
                cursor.next();
                if (size == -1 /* SpecialRecord.Reuse */) {
                    let node = reused[id];
                    children.push(node);
                    positions.push(start - parentStart);
                    return;
                }
                else if (size == -3 /* SpecialRecord.ContextChange */) { // Context change
                    contextHash = id;
                    return;
                }
                else if (size == -4 /* SpecialRecord.LookAhead */) {
                    lookAhead = id;
                    return;
                }
                else {
                    throw new RangeError(`Unrecognized record size: ${size}`);
                }
            }
            let type = types[id], node, buffer;
            let startPos = start - parentStart;
            if (end - start <= maxBufferLength && (buffer = findBufferSize(cursor.pos - minPos, inRepeat))) {
                // Small enough for a buffer, and no reused nodes inside
                let data = new Uint16Array(buffer.size - buffer.skip);
                let endPos = cursor.pos - buffer.size, index = data.length;
                while (cursor.pos > endPos)
                    index = copyToBuffer(buffer.start, data, index);
                node = new TreeBuffer(data, end - buffer.start, nodeSet);
                startPos = buffer.start - parentStart;
            }
            else { // Make it a node
                let endPos = cursor.pos - size;
                cursor.next();
                let localChildren = [], localPositions = [];
                let localInRepeat = id >= minRepeatType ? id : -1;
                let lastGroup = 0, lastEnd = end;
                while (cursor.pos > endPos) {
                    if (localInRepeat >= 0 && cursor.id == localInRepeat && cursor.size >= 0) {
                        if (cursor.end <= lastEnd - maxBufferLength) {
                            makeRepeatLeaf(localChildren, localPositions, start, lastGroup, cursor.end, lastEnd, localInRepeat, lookAheadAtStart, contextAtStart);
                            lastGroup = localChildren.length;
                            lastEnd = cursor.end;
                        }
                        cursor.next();
                    }
                    else if (depth > 2500 /* CutOff.Depth */) {
                        takeFlatNode(start, endPos, localChildren, localPositions);
                    }
                    else {
                        takeNode(start, endPos, localChildren, localPositions, localInRepeat, depth + 1);
                    }
                }
                if (localInRepeat >= 0 && lastGroup > 0 && lastGroup < localChildren.length)
                    makeRepeatLeaf(localChildren, localPositions, start, lastGroup, start, lastEnd, localInRepeat, lookAheadAtStart, contextAtStart);
                localChildren.reverse();
                localPositions.reverse();
                if (localInRepeat > -1 && lastGroup > 0) {
                    let make = makeBalanced(type, contextAtStart);
                    node = balanceRange(type, localChildren, localPositions, 0, localChildren.length, 0, end - start, make, make);
                }
                else {
                    node = makeTree(type, localChildren, localPositions, end - start, lookAheadAtStart - end, contextAtStart);
                }
            }
            children.push(node);
            positions.push(startPos);
        }
        function takeFlatNode(parentStart, minPos, children, positions) {
            let nodes = []; // Temporary, inverted array of leaf nodes found, with absolute positions
            let nodeCount = 0, stopAt = -1;
            while (cursor.pos > minPos) {
                let { id, start, end, size } = cursor;
                if (size > 4) { // Not a leaf
                    cursor.next();
                }
                else if (stopAt > -1 && start < stopAt) {
                    break;
                }
                else {
                    if (stopAt < 0)
                        stopAt = end - maxBufferLength;
                    nodes.push(id, start, end);
                    nodeCount++;
                    cursor.next();
                }
            }
            if (nodeCount) {
                let buffer = new Uint16Array(nodeCount * 4);
                let start = nodes[nodes.length - 2];
                for (let i = nodes.length - 3, j = 0; i >= 0; i -= 3) {
                    buffer[j++] = nodes[i];
                    buffer[j++] = nodes[i + 1] - start;
                    buffer[j++] = nodes[i + 2] - start;
                    buffer[j++] = j;
                }
                children.push(new TreeBuffer(buffer, nodes[2] - start, nodeSet));
                positions.push(start - parentStart);
            }
        }
        function makeBalanced(type, contextHash) {
            return (children, positions, length) => {
                let lookAhead = 0, lastI = children.length - 1, last, lookAheadProp;
                if (lastI >= 0 && (last = children[lastI]) instanceof Tree) {
                    if (!lastI && last.type == type && last.length == length)
                        return last;
                    if (lookAheadProp = last.prop(NodeProp.lookAhead))
                        lookAhead = positions[lastI] + last.length + lookAheadProp;
                }
                return makeTree(type, children, positions, length, lookAhead, contextHash);
            };
        }
        function makeRepeatLeaf(children, positions, base, i, from, to, type, lookAhead, contextHash) {
            let localChildren = [], localPositions = [];
            while (children.length > i) {
                localChildren.push(children.pop());
                localPositions.push(positions.pop() + base - from);
            }
            children.push(makeTree(nodeSet.types[type], localChildren, localPositions, to - from, lookAhead - to, contextHash));
            positions.push(from - base);
        }
        function makeTree(type, children, positions, length, lookAhead, contextHash, props) {
            if (contextHash) {
                let pair = [NodeProp.contextHash, contextHash];
                props = props ? [pair].concat(props) : [pair];
            }
            if (lookAhead > 25) {
                let pair = [NodeProp.lookAhead, lookAhead];
                props = props ? [pair].concat(props) : [pair];
            }
            return new Tree(type, children, positions, length, props);
        }
        function findBufferSize(maxSize, inRepeat) {
            // Scan through the buffer to find previous siblings that fit
            // together in a TreeBuffer, and don't contain any reused nodes
            // (which can't be stored in a buffer).
            // If `inRepeat` is > -1, ignore node boundaries of that type for
            // nesting, but make sure the end falls either at the start
            // (`maxSize`) or before such a node.
            let fork = cursor.fork();
            let size = 0, start = 0, skip = 0, minStart = fork.end - maxBufferLength;
            let result = { size: 0, start: 0, skip: 0 };
            scan: for (let minPos = fork.pos - maxSize; fork.pos > minPos;) {
                let nodeSize = fork.size;
                // Pretend nested repeat nodes of the same type don't exist
                if (fork.id == inRepeat && nodeSize >= 0) {
                    // Except that we store the current state as a valid return
                    // value.
                    result.size = size;
                    result.start = start;
                    result.skip = skip;
                    skip += 4;
                    size += 4;
                    fork.next();
                    continue;
                }
                let startPos = fork.pos - nodeSize;
                if (nodeSize < 0 || startPos < minPos || fork.start < minStart)
                    break;
                let localSkipped = fork.id >= minRepeatType ? 4 : 0;
                let nodeStart = fork.start;
                fork.next();
                while (fork.pos > startPos) {
                    if (fork.size < 0) {
                        if (fork.size == -3 /* SpecialRecord.ContextChange */)
                            localSkipped += 4;
                        else
                            break scan;
                    }
                    else if (fork.id >= minRepeatType) {
                        localSkipped += 4;
                    }
                    fork.next();
                }
                start = nodeStart;
                size += nodeSize;
                skip += localSkipped;
            }
            if (inRepeat < 0 || size == maxSize) {
                result.size = size;
                result.start = start;
                result.skip = skip;
            }
            return result.size > 4 ? result : undefined;
        }
        function copyToBuffer(bufferStart, buffer, index) {
            let { id, start, end, size } = cursor;
            cursor.next();
            if (size >= 0 && id < minRepeatType) {
                let startIndex = index;
                if (size > 4) {
                    let endPos = cursor.pos - (size - 4);
                    while (cursor.pos > endPos)
                        index = copyToBuffer(bufferStart, buffer, index);
                }
                buffer[--index] = startIndex;
                buffer[--index] = end - bufferStart;
                buffer[--index] = start - bufferStart;
                buffer[--index] = id;
            }
            else if (size == -3 /* SpecialRecord.ContextChange */) {
                contextHash = id;
            }
            else if (size == -4 /* SpecialRecord.LookAhead */) {
                lookAhead = id;
            }
            return index;
        }
        let children = [], positions = [];
        while (cursor.pos > 0)
            takeNode(data.start || 0, data.bufferStart || 0, children, positions, -1, 0);
        let length = (_a = data.length) !== null && _a !== void 0 ? _a : (children.length ? positions[0] + children[0].length : 0);
        return new Tree(types[data.topID], children.reverse(), positions.reverse(), length);
    }
    const nodeSizeCache = new WeakMap;
    function nodeSize(balanceType, node) {
        if (!balanceType.isAnonymous || node instanceof TreeBuffer || node.type != balanceType)
            return 1;
        let size = nodeSizeCache.get(node);
        if (size == null) {
            size = 1;
            for (let child of node.children) {
                if (child.type != balanceType || !(child instanceof Tree)) {
                    size = 1;
                    break;
                }
                size += nodeSize(balanceType, child);
            }
            nodeSizeCache.set(node, size);
        }
        return size;
    }
    function balanceRange(
    // The type the balanced tree's inner nodes.
    balanceType,
    // The direct children and their positions
    children, positions,
    // The index range in children/positions to use
    from, to,
    // The start position of the nodes, relative to their parent.
    start,
    // Length of the outer node
    length,
    // Function to build the top node of the balanced tree
    mkTop,
    // Function to build internal nodes for the balanced tree
    mkTree) {
        let total = 0;
        for (let i = from; i < to; i++)
            total += nodeSize(balanceType, children[i]);
        let maxChild = Math.ceil((total * 1.5) / 8 /* Balance.BranchFactor */);
        let localChildren = [], localPositions = [];
        function divide(children, positions, from, to, offset) {
            for (let i = from; i < to;) {
                let groupFrom = i, groupStart = positions[i], groupSize = nodeSize(balanceType, children[i]);
                i++;
                for (; i < to; i++) {
                    let nextSize = nodeSize(balanceType, children[i]);
                    if (groupSize + nextSize >= maxChild)
                        break;
                    groupSize += nextSize;
                }
                if (i == groupFrom + 1) {
                    if (groupSize > maxChild) {
                        let only = children[groupFrom]; // Only trees can have a size > 1
                        divide(only.children, only.positions, 0, only.children.length, positions[groupFrom] + offset);
                        continue;
                    }
                    localChildren.push(children[groupFrom]);
                }
                else {
                    let length = positions[i - 1] + children[i - 1].length - groupStart;
                    localChildren.push(balanceRange(balanceType, children, positions, groupFrom, i, groupStart, length, null, mkTree));
                }
                localPositions.push(groupStart + offset - start);
            }
        }
        divide(children, positions, from, to, 0);
        return (mkTop || mkTree)(localChildren, localPositions, length);
    }
    /**
    Provides a way to associate values with pieces of trees. As long
    as that part of the tree is reused, the associated values can be
    retrieved from an updated tree.
    */
    class NodeWeakMap {
        constructor() {
            this.map = new WeakMap();
        }
        setBuffer(buffer, index, value) {
            let inner = this.map.get(buffer);
            if (!inner)
                this.map.set(buffer, inner = new Map);
            inner.set(index, value);
        }
        getBuffer(buffer, index) {
            let inner = this.map.get(buffer);
            return inner && inner.get(index);
        }
        /**
        Set the value for this syntax node.
        */
        set(node, value) {
            if (node instanceof BufferNode)
                this.setBuffer(node.context.buffer, node.index, value);
            else if (node instanceof TreeNode)
                this.map.set(node.tree, value);
        }
        /**
        Retrieve value for this syntax node, if it exists in the map.
        */
        get(node) {
            return node instanceof BufferNode ? this.getBuffer(node.context.buffer, node.index)
                : node instanceof TreeNode ? this.map.get(node.tree) : undefined;
        }
        /**
        Set the value for the node that a cursor currently points to.
        */
        cursorSet(cursor, value) {
            if (cursor.buffer)
                this.setBuffer(cursor.buffer.buffer, cursor.index, value);
            else
                this.map.set(cursor.tree, value);
        }
        /**
        Retrieve the value for the node that a cursor currently points
        to.
        */
        cursorGet(cursor) {
            return cursor.buffer ? this.getBuffer(cursor.buffer.buffer, cursor.index) : this.map.get(cursor.tree);
        }
    }

    /**
    Tree fragments are used during [incremental
    parsing](#common.Parser.startParse) to track parts of old trees
    that can be reused in a new parse. An array of fragments is used
    to track regions of an old tree whose nodes might be reused in new
    parses. Use the static
    [`applyChanges`](#common.TreeFragment^applyChanges) method to
    update fragments for document changes.
    */
    class TreeFragment {
        /**
        Construct a tree fragment. You'll usually want to use
        [`addTree`](#common.TreeFragment^addTree) and
        [`applyChanges`](#common.TreeFragment^applyChanges) instead of
        calling this directly.
        */
        constructor(
        /**
        The start of the unchanged range pointed to by this fragment.
        This refers to an offset in the _updated_ document (as opposed
        to the original tree).
        */
        from,
        /**
        The end of the unchanged range.
        */
        to,
        /**
        The tree that this fragment is based on.
        */
        tree,
        /**
        The offset between the fragment's tree and the document that
        this fragment can be used against. Add this when going from
        document to tree positions, subtract it to go from tree to
        document positions.
        */
        offset, openStart = false, openEnd = false) {
            this.from = from;
            this.to = to;
            this.tree = tree;
            this.offset = offset;
            this.open = (openStart ? 1 /* Open.Start */ : 0) | (openEnd ? 2 /* Open.End */ : 0);
        }
        /**
        Whether the start of the fragment represents the start of a
        parse, or the end of a change. (In the second case, it may not
        be safe to reuse some nodes at the start, depending on the
        parsing algorithm.)
        */
        get openStart() { return (this.open & 1 /* Open.Start */) > 0; }
        /**
        Whether the end of the fragment represents the end of a
        full-document parse, or the start of a change.
        */
        get openEnd() { return (this.open & 2 /* Open.End */) > 0; }
        /**
        Create a set of fragments from a freshly parsed tree, or update
        an existing set of fragments by replacing the ones that overlap
        with a tree with content from the new tree. When `partial` is
        true, the parse is treated as incomplete, and the resulting
        fragment has [`openEnd`](#common.TreeFragment.openEnd) set to
        true.
        */
        static addTree(tree, fragments = [], partial = false) {
            let result = [new TreeFragment(0, tree.length, tree, 0, false, partial)];
            for (let f of fragments)
                if (f.to > tree.length)
                    result.push(f);
            return result;
        }
        /**
        Apply a set of edits to an array of fragments, removing or
        splitting fragments as necessary to remove edited ranges, and
        adjusting offsets for fragments that moved.
        */
        static applyChanges(fragments, changes, minGap = 128) {
            if (!changes.length)
                return fragments;
            let result = [];
            let fI = 1, nextF = fragments.length ? fragments[0] : null;
            for (let cI = 0, pos = 0, off = 0;; cI++) {
                let nextC = cI < changes.length ? changes[cI] : null;
                let nextPos = nextC ? nextC.fromA : 1e9;
                if (nextPos - pos >= minGap)
                    while (nextF && nextF.from < nextPos) {
                        let cut = nextF;
                        if (pos >= cut.from || nextPos <= cut.to || off) {
                            let fFrom = Math.max(cut.from, pos) - off, fTo = Math.min(cut.to, nextPos) - off;
                            cut = fFrom >= fTo ? null : new TreeFragment(fFrom, fTo, cut.tree, cut.offset + off, cI > 0, !!nextC);
                        }
                        if (cut)
                            result.push(cut);
                        if (nextF.to > nextPos)
                            break;
                        nextF = fI < fragments.length ? fragments[fI++] : null;
                    }
                if (!nextC)
                    break;
                pos = nextC.toA;
                off = nextC.toA - nextC.toB;
            }
            return result;
        }
    }
    /**
    A superclass that parsers should extend.
    */
    class Parser {
        /**
        Start a parse, returning a [partial parse](#common.PartialParse)
        object. [`fragments`](#common.TreeFragment) can be passed in to
        make the parse incremental.

        By default, the entire input is parsed. You can pass `ranges`,
        which should be a sorted array of non-empty, non-overlapping
        ranges, to parse only those ranges. The tree returned in that
        case will start at `ranges[0].from`.
        */
        startParse(input, fragments, ranges) {
            if (typeof input == "string")
                input = new StringInput(input);
            ranges = !ranges ? [new Range$1(0, input.length)] : ranges.length ? ranges.map(r => new Range$1(r.from, r.to)) : [new Range$1(0, 0)];
            return this.createParse(input, fragments || [], ranges);
        }
        /**
        Run a full parse, returning the resulting tree.
        */
        parse(input, fragments, ranges) {
            let parse = this.startParse(input, fragments, ranges);
            for (;;) {
                let done = parse.advance();
                if (done)
                    return done;
            }
        }
    }
    class StringInput {
        constructor(string) {
            this.string = string;
        }
        get length() { return this.string.length; }
        chunk(from) { return this.string.slice(from); }
        get lineChunks() { return false; }
        read(from, to) { return this.string.slice(from, to); }
    }

    /**
    Create a parse wrapper that, after the inner parse completes,
    scans its tree for mixed language regions with the `nest`
    function, runs the resulting [inner parses](#common.NestedParse),
    and then [mounts](#common.NodeProp^mounted) their results onto the
    tree.
    */
    function parseMixed(nest) {
        return (parse, input, fragments, ranges) => new MixedParse(parse, nest, input, fragments, ranges);
    }
    class InnerParse {
        constructor(parser, parse, overlay, target, from) {
            this.parser = parser;
            this.parse = parse;
            this.overlay = overlay;
            this.target = target;
            this.from = from;
        }
    }
    function checkRanges(ranges) {
        if (!ranges.length || ranges.some(r => r.from >= r.to))
            throw new RangeError("Invalid inner parse ranges given: " + JSON.stringify(ranges));
    }
    class ActiveOverlay {
        constructor(parser, predicate, mounts, index, start, target, prev) {
            this.parser = parser;
            this.predicate = predicate;
            this.mounts = mounts;
            this.index = index;
            this.start = start;
            this.target = target;
            this.prev = prev;
            this.depth = 0;
            this.ranges = [];
        }
    }
    const stoppedInner = new NodeProp({ perNode: true });
    class MixedParse {
        constructor(base, nest, input, fragments, ranges) {
            this.nest = nest;
            this.input = input;
            this.fragments = fragments;
            this.ranges = ranges;
            this.inner = [];
            this.innerDone = 0;
            this.baseTree = null;
            this.stoppedAt = null;
            this.baseParse = base;
        }
        advance() {
            if (this.baseParse) {
                let done = this.baseParse.advance();
                if (!done)
                    return null;
                this.baseParse = null;
                this.baseTree = done;
                this.startInner();
                if (this.stoppedAt != null)
                    for (let inner of this.inner)
                        inner.parse.stopAt(this.stoppedAt);
            }
            if (this.innerDone == this.inner.length) {
                let result = this.baseTree;
                if (this.stoppedAt != null)
                    result = new Tree(result.type, result.children, result.positions, result.length, result.propValues.concat([[stoppedInner, this.stoppedAt]]));
                return result;
            }
            let inner = this.inner[this.innerDone], done = inner.parse.advance();
            if (done) {
                this.innerDone++;
                // This is a somewhat dodgy but super helpful hack where we
                // patch up nodes created by the inner parse (and thus
                // presumably not aliased anywhere else) to hold the information
                // about the inner parse.
                let props = Object.assign(Object.create(null), inner.target.props);
                props[NodeProp.mounted.id] = new MountedTree(done, inner.overlay, inner.parser);
                inner.target.props = props;
            }
            return null;
        }
        get parsedPos() {
            if (this.baseParse)
                return 0;
            let pos = this.input.length;
            for (let i = this.innerDone; i < this.inner.length; i++) {
                if (this.inner[i].from < pos)
                    pos = Math.min(pos, this.inner[i].parse.parsedPos);
            }
            return pos;
        }
        stopAt(pos) {
            this.stoppedAt = pos;
            if (this.baseParse)
                this.baseParse.stopAt(pos);
            else
                for (let i = this.innerDone; i < this.inner.length; i++)
                    this.inner[i].parse.stopAt(pos);
        }
        startInner() {
            let fragmentCursor = new FragmentCursor$1(this.fragments);
            let overlay = null;
            let covered = null;
            let cursor = new TreeCursor(new TreeNode(this.baseTree, this.ranges[0].from, 0, null), IterMode.IncludeAnonymous | IterMode.IgnoreMounts);
            scan: for (let nest, isCovered;;) {
                let enter = true, range;
                if (this.stoppedAt != null && cursor.from >= this.stoppedAt) {
                    enter = false;
                }
                else if (fragmentCursor.hasNode(cursor)) {
                    if (overlay) {
                        let match = overlay.mounts.find(m => m.frag.from <= cursor.from && m.frag.to >= cursor.to && m.mount.overlay);
                        if (match)
                            for (let r of match.mount.overlay) {
                                let from = r.from + match.pos, to = r.to + match.pos;
                                if (from >= cursor.from && to <= cursor.to && !overlay.ranges.some(r => r.from < to && r.to > from))
                                    overlay.ranges.push({ from, to });
                            }
                    }
                    enter = false;
                }
                else if (covered && (isCovered = checkCover(covered.ranges, cursor.from, cursor.to))) {
                    enter = isCovered != 2 /* Cover.Full */;
                }
                else if (!cursor.type.isAnonymous && (nest = this.nest(cursor, this.input)) &&
                    (cursor.from < cursor.to || !nest.overlay)) {
                    if (!cursor.tree)
                        materialize(cursor);
                    let oldMounts = fragmentCursor.findMounts(cursor.from, nest.parser);
                    if (typeof nest.overlay == "function") {
                        overlay = new ActiveOverlay(nest.parser, nest.overlay, oldMounts, this.inner.length, cursor.from, cursor.tree, overlay);
                    }
                    else {
                        let ranges = punchRanges(this.ranges, nest.overlay ||
                            (cursor.from < cursor.to ? [new Range$1(cursor.from, cursor.to)] : []));
                        if (ranges.length)
                            checkRanges(ranges);
                        if (ranges.length || !nest.overlay)
                            this.inner.push(new InnerParse(nest.parser, ranges.length ? nest.parser.startParse(this.input, enterFragments(oldMounts, ranges), ranges)
                                : nest.parser.startParse(""), nest.overlay ? nest.overlay.map(r => new Range$1(r.from - cursor.from, r.to - cursor.from)) : null, cursor.tree, ranges.length ? ranges[0].from : cursor.from));
                        if (!nest.overlay)
                            enter = false;
                        else if (ranges.length)
                            covered = { ranges, depth: 0, prev: covered };
                    }
                }
                else if (overlay && (range = overlay.predicate(cursor))) {
                    if (range === true)
                        range = new Range$1(cursor.from, cursor.to);
                    if (range.from < range.to) {
                        let last = overlay.ranges.length - 1;
                        if (last >= 0 && overlay.ranges[last].to == range.from)
                            overlay.ranges[last] = { from: overlay.ranges[last].from, to: range.to };
                        else
                            overlay.ranges.push(range);
                    }
                }
                if (enter && cursor.firstChild()) {
                    if (overlay)
                        overlay.depth++;
                    if (covered)
                        covered.depth++;
                }
                else {
                    for (;;) {
                        if (cursor.nextSibling())
                            break;
                        if (!cursor.parent())
                            break scan;
                        if (overlay && !--overlay.depth) {
                            let ranges = punchRanges(this.ranges, overlay.ranges);
                            if (ranges.length) {
                                checkRanges(ranges);
                                this.inner.splice(overlay.index, 0, new InnerParse(overlay.parser, overlay.parser.startParse(this.input, enterFragments(overlay.mounts, ranges), ranges), overlay.ranges.map(r => new Range$1(r.from - overlay.start, r.to - overlay.start)), overlay.target, ranges[0].from));
                            }
                            overlay = overlay.prev;
                        }
                        if (covered && !--covered.depth)
                            covered = covered.prev;
                    }
                }
            }
        }
    }
    function checkCover(covered, from, to) {
        for (let range of covered) {
            if (range.from >= to)
                break;
            if (range.to > from)
                return range.from <= from && range.to >= to ? 2 /* Cover.Full */ : 1 /* Cover.Partial */;
        }
        return 0 /* Cover.None */;
    }
    // Take a piece of buffer and convert it into a stand-alone
    // TreeBuffer.
    function sliceBuf(buf, startI, endI, nodes, positions, off) {
        if (startI < endI) {
            let from = buf.buffer[startI + 1];
            nodes.push(buf.slice(startI, endI, from));
            positions.push(from - off);
        }
    }
    // This function takes a node that's in a buffer, and converts it, and
    // its parent buffer nodes, into a Tree. This is again acting on the
    // assumption that the trees and buffers have been constructed by the
    // parse that was ran via the mix parser, and thus aren't shared with
    // any other code, making violations of the immutability safe.
    function materialize(cursor) {
        let { node } = cursor, stack = [];
        let buffer = node.context.buffer;
        // Scan up to the nearest tree
        do {
            stack.push(cursor.index);
            cursor.parent();
        } while (!cursor.tree);
        // Find the index of the buffer in that tree
        let base = cursor.tree, i = base.children.indexOf(buffer);
        let buf = base.children[i], b = buf.buffer, newStack = [i];
        // Split a level in the buffer, putting the nodes before and after
        // the child that contains `node` into new buffers.
        function split(startI, endI, type, innerOffset, length, stackPos) {
            let targetI = stack[stackPos];
            let children = [], positions = [];
            sliceBuf(buf, startI, targetI, children, positions, innerOffset);
            let from = b[targetI + 1], to = b[targetI + 2];
            newStack.push(children.length);
            let child = stackPos
                ? split(targetI + 4, b[targetI + 3], buf.set.types[b[targetI]], from, to - from, stackPos - 1)
                : node.toTree();
            children.push(child);
            positions.push(from - innerOffset);
            sliceBuf(buf, b[targetI + 3], endI, children, positions, innerOffset);
            return new Tree(type, children, positions, length);
        }
        base.children[i] = split(0, b.length, NodeType.none, 0, buf.length, stack.length - 1);
        // Move the cursor back to the target node
        for (let index of newStack) {
            let tree = cursor.tree.children[index], pos = cursor.tree.positions[index];
            cursor.yield(new TreeNode(tree, pos + cursor.from, index, cursor._tree));
        }
    }
    class StructureCursor {
        constructor(root, offset) {
            this.offset = offset;
            this.done = false;
            this.cursor = root.cursor(IterMode.IncludeAnonymous | IterMode.IgnoreMounts);
        }
        // Move to the first node (in pre-order) that starts at or after `pos`.
        moveTo(pos) {
            let { cursor } = this, p = pos - this.offset;
            while (!this.done && cursor.from < p) {
                if (cursor.to >= pos && cursor.enter(p, 1, IterMode.IgnoreOverlays | IterMode.ExcludeBuffers)) ;
                else if (!cursor.next(false))
                    this.done = true;
            }
        }
        hasNode(cursor) {
            this.moveTo(cursor.from);
            if (!this.done && this.cursor.from + this.offset == cursor.from && this.cursor.tree) {
                for (let tree = this.cursor.tree;;) {
                    if (tree == cursor.tree)
                        return true;
                    if (tree.children.length && tree.positions[0] == 0 && tree.children[0] instanceof Tree)
                        tree = tree.children[0];
                    else
                        break;
                }
            }
            return false;
        }
    }
    let FragmentCursor$1 = class FragmentCursor {
        constructor(fragments) {
            var _a;
            this.fragments = fragments;
            this.curTo = 0;
            this.fragI = 0;
            if (fragments.length) {
                let first = this.curFrag = fragments[0];
                this.curTo = (_a = first.tree.prop(stoppedInner)) !== null && _a !== void 0 ? _a : first.to;
                this.inner = new StructureCursor(first.tree, -first.offset);
            }
            else {
                this.curFrag = this.inner = null;
            }
        }
        hasNode(node) {
            while (this.curFrag && node.from >= this.curTo)
                this.nextFrag();
            return this.curFrag && this.curFrag.from <= node.from && this.curTo >= node.to && this.inner.hasNode(node);
        }
        nextFrag() {
            var _a;
            this.fragI++;
            if (this.fragI == this.fragments.length) {
                this.curFrag = this.inner = null;
            }
            else {
                let frag = this.curFrag = this.fragments[this.fragI];
                this.curTo = (_a = frag.tree.prop(stoppedInner)) !== null && _a !== void 0 ? _a : frag.to;
                this.inner = new StructureCursor(frag.tree, -frag.offset);
            }
        }
        findMounts(pos, parser) {
            var _a;
            let result = [];
            if (this.inner) {
                this.inner.cursor.moveTo(pos, 1);
                for (let pos = this.inner.cursor.node; pos; pos = pos.parent) {
                    let mount = (_a = pos.tree) === null || _a === void 0 ? void 0 : _a.prop(NodeProp.mounted);
                    if (mount && mount.parser == parser) {
                        for (let i = this.fragI; i < this.fragments.length; i++) {
                            let frag = this.fragments[i];
                            if (frag.from >= pos.to)
                                break;
                            if (frag.tree == this.curFrag.tree)
                                result.push({
                                    frag,
                                    pos: pos.from - frag.offset,
                                    mount
                                });
                        }
                    }
                }
            }
            return result;
        }
    };
    function punchRanges(outer, ranges) {
        let copy = null, current = ranges;
        for (let i = 1, j = 0; i < outer.length; i++) {
            let gapFrom = outer[i - 1].to, gapTo = outer[i].from;
            for (; j < current.length; j++) {
                let r = current[j];
                if (r.from >= gapTo)
                    break;
                if (r.to <= gapFrom)
                    continue;
                if (!copy)
                    current = copy = ranges.slice();
                if (r.from < gapFrom) {
                    copy[j] = new Range$1(r.from, gapFrom);
                    if (r.to > gapTo)
                        copy.splice(j + 1, 0, new Range$1(gapTo, r.to));
                }
                else if (r.to > gapTo) {
                    copy[j--] = new Range$1(gapTo, r.to);
                }
                else {
                    copy.splice(j--, 1);
                }
            }
        }
        return current;
    }
    function findCoverChanges(a, b, from, to) {
        let iA = 0, iB = 0, inA = false, inB = false, pos = -1e9;
        let result = [];
        for (;;) {
            let nextA = iA == a.length ? 1e9 : inA ? a[iA].to : a[iA].from;
            let nextB = iB == b.length ? 1e9 : inB ? b[iB].to : b[iB].from;
            if (inA != inB) {
                let start = Math.max(pos, from), end = Math.min(nextA, nextB, to);
                if (start < end)
                    result.push(new Range$1(start, end));
            }
            pos = Math.min(nextA, nextB);
            if (pos == 1e9)
                break;
            if (nextA == pos) {
                if (!inA)
                    inA = true;
                else {
                    inA = false;
                    iA++;
                }
            }
            if (nextB == pos) {
                if (!inB)
                    inB = true;
                else {
                    inB = false;
                    iB++;
                }
            }
        }
        return result;
    }
    // Given a number of fragments for the outer tree, and a set of ranges
    // to parse, find fragments for inner trees mounted around those
    // ranges, if any.
    function enterFragments(mounts, ranges) {
        let result = [];
        for (let { pos, mount, frag } of mounts) {
            let startPos = pos + (mount.overlay ? mount.overlay[0].from : 0), endPos = startPos + mount.tree.length;
            let from = Math.max(frag.from, startPos), to = Math.min(frag.to, endPos);
            if (mount.overlay) {
                let overlay = mount.overlay.map(r => new Range$1(r.from + pos, r.to + pos));
                let changes = findCoverChanges(ranges, overlay, from, to);
                for (let i = 0, pos = from;; i++) {
                    let last = i == changes.length, end = last ? to : changes[i].from;
                    if (end > pos)
                        result.push(new TreeFragment(pos, end, mount.tree, -startPos, frag.from >= pos || frag.openStart, frag.to <= end || frag.openEnd));
                    if (last)
                        break;
                    pos = changes[i].to;
                }
            }
            else {
                result.push(new TreeFragment(from, to, mount.tree, -startPos, frag.from >= startPos || frag.openStart, frag.to <= endPos || frag.openEnd));
            }
        }
        return result;
    }

    /**
    A parse stack. These are used internally by the parser to track
    parsing progress. They also provide some properties and methods
    that external code such as a tokenizer can use to get information
    about the parse state.
    */
    class Stack {
        /**
        @internal
        */
        constructor(
        /**
        The parse that this stack is part of @internal
        */
        p,
        /**
        Holds state, input pos, buffer index triplets for all but the
        top state @internal
        */
        stack,
        /**
        The current parse state @internal
        */
        state,
        // The position at which the next reduce should take place. This
        // can be less than `this.pos` when skipped expressions have been
        // added to the stack (which should be moved outside of the next
        // reduction)
        /**
        @internal
        */
        reducePos,
        /**
        The input position up to which this stack has parsed.
        */
        pos,
        /**
        The dynamic score of the stack, including dynamic precedence
        and error-recovery penalties
        @internal
        */
        score,
        // The output buffer. Holds (type, start, end, size) quads
        // representing nodes created by the parser, where `size` is
        // amount of buffer array entries covered by this node.
        /**
        @internal
        */
        buffer,
        // The base offset of the buffer. When stacks are split, the split
        // instance shared the buffer history with its parent up to
        // `bufferBase`, which is the absolute offset (including the
        // offset of previous splits) into the buffer at which this stack
        // starts writing.
        /**
        @internal
        */
        bufferBase,
        /**
        @internal
        */
        curContext,
        /**
        @internal
        */
        lookAhead = 0,
        // A parent stack from which this was split off, if any. This is
        // set up so that it always points to a stack that has some
        // additional buffer content, never to a stack with an equal
        // `bufferBase`.
        /**
        @internal
        */
        parent) {
            this.p = p;
            this.stack = stack;
            this.state = state;
            this.reducePos = reducePos;
            this.pos = pos;
            this.score = score;
            this.buffer = buffer;
            this.bufferBase = bufferBase;
            this.curContext = curContext;
            this.lookAhead = lookAhead;
            this.parent = parent;
        }
        /**
        @internal
        */
        toString() {
            return `[${this.stack.filter((_, i) => i % 3 == 0).concat(this.state)}]@${this.pos}${this.score ? "!" + this.score : ""}`;
        }
        // Start an empty stack
        /**
        @internal
        */
        static start(p, state, pos = 0) {
            let cx = p.parser.context;
            return new Stack(p, [], state, pos, pos, 0, [], 0, cx ? new StackContext(cx, cx.start) : null, 0, null);
        }
        /**
        The stack's current [context](#lr.ContextTracker) value, if
        any. Its type will depend on the context tracker's type
        parameter, or it will be `null` if there is no context
        tracker.
        */
        get context() { return this.curContext ? this.curContext.context : null; }
        // Push a state onto the stack, tracking its start position as well
        // as the buffer base at that point.
        /**
        @internal
        */
        pushState(state, start) {
            this.stack.push(this.state, start, this.bufferBase + this.buffer.length);
            this.state = state;
        }
        // Apply a reduce action
        /**
        @internal
        */
        reduce(action) {
            var _a;
            let depth = action >> 19 /* Action.ReduceDepthShift */, type = action & 65535 /* Action.ValueMask */;
            let { parser } = this.p;
            let lookaheadRecord = this.reducePos < this.pos - 25 /* Lookahead.Margin */;
            if (lookaheadRecord)
                this.setLookAhead(this.pos);
            let dPrec = parser.dynamicPrecedence(type);
            if (dPrec)
                this.score += dPrec;
            if (depth == 0) {
                this.pushState(parser.getGoto(this.state, type, true), this.reducePos);
                // Zero-depth reductions are a special case—they add stuff to
                // the stack without popping anything off.
                if (type < parser.minRepeatTerm)
                    this.storeNode(type, this.reducePos, this.reducePos, lookaheadRecord ? 8 : 4, true);
                this.reduceContext(type, this.reducePos);
                return;
            }
            // Find the base index into `this.stack`, content after which will
            // be dropped. Note that with `StayFlag` reductions we need to
            // consume two extra frames (the dummy parent node for the skipped
            // expression and the state that we'll be staying in, which should
            // be moved to `this.state`).
            let base = this.stack.length - ((depth - 1) * 3) - (action & 262144 /* Action.StayFlag */ ? 6 : 0);
            let start = base ? this.stack[base - 2] : this.p.ranges[0].from, size = this.reducePos - start;
            // This is a kludge to try and detect overly deep left-associative
            // trees, which will not increase the parse stack depth and thus
            // won't be caught by the regular stack-depth limit check.
            if (size >= 2000 /* Recover.MinBigReduction */ && !((_a = this.p.parser.nodeSet.types[type]) === null || _a === void 0 ? void 0 : _a.isAnonymous)) {
                if (start == this.p.lastBigReductionStart) {
                    this.p.bigReductionCount++;
                    this.p.lastBigReductionSize = size;
                }
                else if (this.p.lastBigReductionSize < size) {
                    this.p.bigReductionCount = 1;
                    this.p.lastBigReductionStart = start;
                    this.p.lastBigReductionSize = size;
                }
            }
            let bufferBase = base ? this.stack[base - 1] : 0, count = this.bufferBase + this.buffer.length - bufferBase;
            // Store normal terms or `R -> R R` repeat reductions
            if (type < parser.minRepeatTerm || (action & 131072 /* Action.RepeatFlag */)) {
                let pos = parser.stateFlag(this.state, 1 /* StateFlag.Skipped */) ? this.pos : this.reducePos;
                this.storeNode(type, start, pos, count + 4, true);
            }
            if (action & 262144 /* Action.StayFlag */) {
                this.state = this.stack[base];
            }
            else {
                let baseStateID = this.stack[base - 3];
                this.state = parser.getGoto(baseStateID, type, true);
            }
            while (this.stack.length > base)
                this.stack.pop();
            this.reduceContext(type, start);
        }
        // Shift a value into the buffer
        /**
        @internal
        */
        storeNode(term, start, end, size = 4, mustSink = false) {
            if (term == 0 /* Term.Err */ &&
                (!this.stack.length || this.stack[this.stack.length - 1] < this.buffer.length + this.bufferBase)) {
                // Try to omit/merge adjacent error nodes
                let cur = this, top = this.buffer.length;
                if (top == 0 && cur.parent) {
                    top = cur.bufferBase - cur.parent.bufferBase;
                    cur = cur.parent;
                }
                if (top > 0 && cur.buffer[top - 4] == 0 /* Term.Err */ && cur.buffer[top - 1] > -1) {
                    if (start == end)
                        return;
                    if (cur.buffer[top - 2] >= start) {
                        cur.buffer[top - 2] = end;
                        return;
                    }
                }
            }
            if (!mustSink || this.pos == end) { // Simple case, just append
                this.buffer.push(term, start, end, size);
            }
            else { // There may be skipped nodes that have to be moved forward
                let index = this.buffer.length;
                if (index > 0 && this.buffer[index - 4] != 0 /* Term.Err */) {
                    let mustMove = false;
                    for (let scan = index; scan > 0 && this.buffer[scan - 2] > end; scan -= 4) {
                        if (this.buffer[scan - 1] >= 0) {
                            mustMove = true;
                            break;
                        }
                    }
                    if (mustMove)
                        while (index > 0 && this.buffer[index - 2] > end) {
                            // Move this record forward
                            this.buffer[index] = this.buffer[index - 4];
                            this.buffer[index + 1] = this.buffer[index - 3];
                            this.buffer[index + 2] = this.buffer[index - 2];
                            this.buffer[index + 3] = this.buffer[index - 1];
                            index -= 4;
                            if (size > 4)
                                size -= 4;
                        }
                }
                this.buffer[index] = term;
                this.buffer[index + 1] = start;
                this.buffer[index + 2] = end;
                this.buffer[index + 3] = size;
            }
        }
        // Apply a shift action
        /**
        @internal
        */
        shift(action, type, start, end) {
            if (action & 131072 /* Action.GotoFlag */) {
                this.pushState(action & 65535 /* Action.ValueMask */, this.pos);
            }
            else if ((action & 262144 /* Action.StayFlag */) == 0) { // Regular shift
                let nextState = action, { parser } = this.p;
                if (end > this.pos || type <= parser.maxNode) {
                    this.pos = end;
                    if (!parser.stateFlag(nextState, 1 /* StateFlag.Skipped */))
                        this.reducePos = end;
                }
                this.pushState(nextState, start);
                this.shiftContext(type, start);
                if (type <= parser.maxNode)
                    this.buffer.push(type, start, end, 4);
            }
            else { // Shift-and-stay, which means this is a skipped token
                this.pos = end;
                this.shiftContext(type, start);
                if (type <= this.p.parser.maxNode)
                    this.buffer.push(type, start, end, 4);
            }
        }
        // Apply an action
        /**
        @internal
        */
        apply(action, next, nextStart, nextEnd) {
            if (action & 65536 /* Action.ReduceFlag */)
                this.reduce(action);
            else
                this.shift(action, next, nextStart, nextEnd);
        }
        // Add a prebuilt (reused) node into the buffer.
        /**
        @internal
        */
        useNode(value, next) {
            let index = this.p.reused.length - 1;
            if (index < 0 || this.p.reused[index] != value) {
                this.p.reused.push(value);
                index++;
            }
            let start = this.pos;
            this.reducePos = this.pos = start + value.length;
            this.pushState(next, start);
            this.buffer.push(index, start, this.reducePos, -1 /* size == -1 means this is a reused value */);
            if (this.curContext)
                this.updateContext(this.curContext.tracker.reuse(this.curContext.context, value, this, this.p.stream.reset(this.pos - value.length)));
        }
        // Split the stack. Due to the buffer sharing and the fact
        // that `this.stack` tends to stay quite shallow, this isn't very
        // expensive.
        /**
        @internal
        */
        split() {
            let parent = this;
            let off = parent.buffer.length;
            // Because the top of the buffer (after this.pos) may be mutated
            // to reorder reductions and skipped tokens, and shared buffers
            // should be immutable, this copies any outstanding skipped tokens
            // to the new buffer, and puts the base pointer before them.
            while (off > 0 && parent.buffer[off - 2] > parent.reducePos)
                off -= 4;
            let buffer = parent.buffer.slice(off), base = parent.bufferBase + off;
            // Make sure parent points to an actual parent with content, if there is such a parent.
            while (parent && base == parent.bufferBase)
                parent = parent.parent;
            return new Stack(this.p, this.stack.slice(), this.state, this.reducePos, this.pos, this.score, buffer, base, this.curContext, this.lookAhead, parent);
        }
        // Try to recover from an error by 'deleting' (ignoring) one token.
        /**
        @internal
        */
        recoverByDelete(next, nextEnd) {
            let isNode = next <= this.p.parser.maxNode;
            if (isNode)
                this.storeNode(next, this.pos, nextEnd, 4);
            this.storeNode(0 /* Term.Err */, this.pos, nextEnd, isNode ? 8 : 4);
            this.pos = this.reducePos = nextEnd;
            this.score -= 190 /* Recover.Delete */;
        }
        /**
        Check if the given term would be able to be shifted (optionally
        after some reductions) on this stack. This can be useful for
        external tokenizers that want to make sure they only provide a
        given token when it applies.
        */
        canShift(term) {
            for (let sim = new SimulatedStack(this);;) {
                let action = this.p.parser.stateSlot(sim.state, 4 /* ParseState.DefaultReduce */) || this.p.parser.hasAction(sim.state, term);
                if (action == 0)
                    return false;
                if ((action & 65536 /* Action.ReduceFlag */) == 0)
                    return true;
                sim.reduce(action);
            }
        }
        // Apply up to Recover.MaxNext recovery actions that conceptually
        // inserts some missing token or rule.
        /**
        @internal
        */
        recoverByInsert(next) {
            if (this.stack.length >= 300 /* Recover.MaxInsertStackDepth */)
                return [];
            let nextStates = this.p.parser.nextStates(this.state);
            if (nextStates.length > 4 /* Recover.MaxNext */ << 1 || this.stack.length >= 120 /* Recover.DampenInsertStackDepth */) {
                let best = [];
                for (let i = 0, s; i < nextStates.length; i += 2) {
                    if ((s = nextStates[i + 1]) != this.state && this.p.parser.hasAction(s, next))
                        best.push(nextStates[i], s);
                }
                if (this.stack.length < 120 /* Recover.DampenInsertStackDepth */)
                    for (let i = 0; best.length < 4 /* Recover.MaxNext */ << 1 && i < nextStates.length; i += 2) {
                        let s = nextStates[i + 1];
                        if (!best.some((v, i) => (i & 1) && v == s))
                            best.push(nextStates[i], s);
                    }
                nextStates = best;
            }
            let result = [];
            for (let i = 0; i < nextStates.length && result.length < 4 /* Recover.MaxNext */; i += 2) {
                let s = nextStates[i + 1];
                if (s == this.state)
                    continue;
                let stack = this.split();
                stack.pushState(s, this.pos);
                stack.storeNode(0 /* Term.Err */, stack.pos, stack.pos, 4, true);
                stack.shiftContext(nextStates[i], this.pos);
                stack.reducePos = this.pos;
                stack.score -= 200 /* Recover.Insert */;
                result.push(stack);
            }
            return result;
        }
        // Force a reduce, if possible. Return false if that can't
        // be done.
        /**
        @internal
        */
        forceReduce() {
            let { parser } = this.p;
            let reduce = parser.stateSlot(this.state, 5 /* ParseState.ForcedReduce */);
            if ((reduce & 65536 /* Action.ReduceFlag */) == 0)
                return false;
            if (!parser.validAction(this.state, reduce)) {
                let depth = reduce >> 19 /* Action.ReduceDepthShift */, term = reduce & 65535 /* Action.ValueMask */;
                let target = this.stack.length - depth * 3;
                if (target < 0 || parser.getGoto(this.stack[target], term, false) < 0) {
                    let backup = this.findForcedReduction();
                    if (backup == null)
                        return false;
                    reduce = backup;
                }
                this.storeNode(0 /* Term.Err */, this.pos, this.pos, 4, true);
                this.score -= 100 /* Recover.Reduce */;
            }
            this.reducePos = this.pos;
            this.reduce(reduce);
            return true;
        }
        /**
        Try to scan through the automaton to find some kind of reduction
        that can be applied. Used when the regular ForcedReduce field
        isn't a valid action. @internal
        */
        findForcedReduction() {
            let { parser } = this.p, seen = [];
            let explore = (state, depth) => {
                if (seen.includes(state))
                    return;
                seen.push(state);
                return parser.allActions(state, (action) => {
                    if (action & (262144 /* Action.StayFlag */ | 131072 /* Action.GotoFlag */)) ;
                    else if (action & 65536 /* Action.ReduceFlag */) {
                        let rDepth = (action >> 19 /* Action.ReduceDepthShift */) - depth;
                        if (rDepth > 1) {
                            let term = action & 65535 /* Action.ValueMask */, target = this.stack.length - rDepth * 3;
                            if (target >= 0 && parser.getGoto(this.stack[target], term, false) >= 0)
                                return (rDepth << 19 /* Action.ReduceDepthShift */) | 65536 /* Action.ReduceFlag */ | term;
                        }
                    }
                    else {
                        let found = explore(action, depth + 1);
                        if (found != null)
                            return found;
                    }
                });
            };
            return explore(this.state, 0);
        }
        /**
        @internal
        */
        forceAll() {
            while (!this.p.parser.stateFlag(this.state, 2 /* StateFlag.Accepting */)) {
                if (!this.forceReduce()) {
                    this.storeNode(0 /* Term.Err */, this.pos, this.pos, 4, true);
                    break;
                }
            }
            return this;
        }
        /**
        Check whether this state has no further actions (assumed to be a direct descendant of the
        top state, since any other states must be able to continue
        somehow). @internal
        */
        get deadEnd() {
            if (this.stack.length != 3)
                return false;
            let { parser } = this.p;
            return parser.data[parser.stateSlot(this.state, 1 /* ParseState.Actions */)] == 65535 /* Seq.End */ &&
                !parser.stateSlot(this.state, 4 /* ParseState.DefaultReduce */);
        }
        /**
        Restart the stack (put it back in its start state). Only safe
        when this.stack.length == 3 (state is directly below the top
        state). @internal
        */
        restart() {
            this.storeNode(0 /* Term.Err */, this.pos, this.pos, 4, true);
            this.state = this.stack[0];
            this.stack.length = 0;
        }
        /**
        @internal
        */
        sameState(other) {
            if (this.state != other.state || this.stack.length != other.stack.length)
                return false;
            for (let i = 0; i < this.stack.length; i += 3)
                if (this.stack[i] != other.stack[i])
                    return false;
            return true;
        }
        /**
        Get the parser used by this stack.
        */
        get parser() { return this.p.parser; }
        /**
        Test whether a given dialect (by numeric ID, as exported from
        the terms file) is enabled.
        */
        dialectEnabled(dialectID) { return this.p.parser.dialect.flags[dialectID]; }
        shiftContext(term, start) {
            if (this.curContext)
                this.updateContext(this.curContext.tracker.shift(this.curContext.context, term, this, this.p.stream.reset(start)));
        }
        reduceContext(term, start) {
            if (this.curContext)
                this.updateContext(this.curContext.tracker.reduce(this.curContext.context, term, this, this.p.stream.reset(start)));
        }
        /**
        @internal
        */
        emitContext() {
            let last = this.buffer.length - 1;
            if (last < 0 || this.buffer[last] != -3)
                this.buffer.push(this.curContext.hash, this.pos, this.pos, -3);
        }
        /**
        @internal
        */
        emitLookAhead() {
            let last = this.buffer.length - 1;
            if (last < 0 || this.buffer[last] != -4)
                this.buffer.push(this.lookAhead, this.pos, this.pos, -4);
        }
        updateContext(context) {
            if (context != this.curContext.context) {
                let newCx = new StackContext(this.curContext.tracker, context);
                if (newCx.hash != this.curContext.hash)
                    this.emitContext();
                this.curContext = newCx;
            }
        }
        /**
        @internal
        */
        setLookAhead(lookAhead) {
            if (lookAhead > this.lookAhead) {
                this.emitLookAhead();
                this.lookAhead = lookAhead;
            }
        }
        /**
        @internal
        */
        close() {
            if (this.curContext && this.curContext.tracker.strict)
                this.emitContext();
            if (this.lookAhead > 0)
                this.emitLookAhead();
        }
    }
    class StackContext {
        constructor(tracker, context) {
            this.tracker = tracker;
            this.context = context;
            this.hash = tracker.strict ? tracker.hash(context) : 0;
        }
    }
    // Used to cheaply run some reductions to scan ahead without mutating
    // an entire stack
    class SimulatedStack {
        constructor(start) {
            this.start = start;
            this.state = start.state;
            this.stack = start.stack;
            this.base = this.stack.length;
        }
        reduce(action) {
            let term = action & 65535 /* Action.ValueMask */, depth = action >> 19 /* Action.ReduceDepthShift */;
            if (depth == 0) {
                if (this.stack == this.start.stack)
                    this.stack = this.stack.slice();
                this.stack.push(this.state, 0, 0);
                this.base += 3;
            }
            else {
                this.base -= (depth - 1) * 3;
            }
            let goto = this.start.p.parser.getGoto(this.stack[this.base - 3], term, true);
            this.state = goto;
        }
    }
    // This is given to `Tree.build` to build a buffer, and encapsulates
    // the parent-stack-walking necessary to read the nodes.
    class StackBufferCursor {
        constructor(stack, pos, index) {
            this.stack = stack;
            this.pos = pos;
            this.index = index;
            this.buffer = stack.buffer;
            if (this.index == 0)
                this.maybeNext();
        }
        static create(stack, pos = stack.bufferBase + stack.buffer.length) {
            return new StackBufferCursor(stack, pos, pos - stack.bufferBase);
        }
        maybeNext() {
            let next = this.stack.parent;
            if (next != null) {
                this.index = this.stack.bufferBase - next.bufferBase;
                this.stack = next;
                this.buffer = next.buffer;
            }
        }
        get id() { return this.buffer[this.index - 4]; }
        get start() { return this.buffer[this.index - 3]; }
        get end() { return this.buffer[this.index - 2]; }
        get size() { return this.buffer[this.index - 1]; }
        next() {
            this.index -= 4;
            this.pos -= 4;
            if (this.index == 0)
                this.maybeNext();
        }
        fork() {
            return new StackBufferCursor(this.stack, this.pos, this.index);
        }
    }

    // See lezer-generator/src/encode.ts for comments about the encoding
    // used here
    function decodeArray(input, Type = Uint16Array) {
        if (typeof input != "string")
            return input;
        let array = null;
        for (let pos = 0, out = 0; pos < input.length;) {
            let value = 0;
            for (;;) {
                let next = input.charCodeAt(pos++), stop = false;
                if (next == 126 /* Encode.BigValCode */) {
                    value = 65535 /* Encode.BigVal */;
                    break;
                }
                if (next >= 92 /* Encode.Gap2 */)
                    next--;
                if (next >= 34 /* Encode.Gap1 */)
                    next--;
                let digit = next - 32 /* Encode.Start */;
                if (digit >= 46 /* Encode.Base */) {
                    digit -= 46 /* Encode.Base */;
                    stop = true;
                }
                value += digit;
                if (stop)
                    break;
                value *= 46 /* Encode.Base */;
            }
            if (array)
                array[out++] = value;
            else
                array = new Type(value);
        }
        return array;
    }

    class CachedToken {
        constructor() {
            this.start = -1;
            this.value = -1;
            this.end = -1;
            this.extended = -1;
            this.lookAhead = 0;
            this.mask = 0;
            this.context = 0;
        }
    }
    const nullToken = new CachedToken;
    /**
    [Tokenizers](#lr.ExternalTokenizer) interact with the input
    through this interface. It presents the input as a stream of
    characters, tracking lookahead and hiding the complexity of
    [ranges](#common.Parser.parse^ranges) from tokenizer code.
    */
    class InputStream {
        /**
        @internal
        */
        constructor(
        /**
        @internal
        */
        input,
        /**
        @internal
        */
        ranges) {
            this.input = input;
            this.ranges = ranges;
            /**
            @internal
            */
            this.chunk = "";
            /**
            @internal
            */
            this.chunkOff = 0;
            /**
            Backup chunk
            */
            this.chunk2 = "";
            this.chunk2Pos = 0;
            /**
            The character code of the next code unit in the input, or -1
            when the stream is at the end of the input.
            */
            this.next = -1;
            /**
            @internal
            */
            this.token = nullToken;
            this.rangeIndex = 0;
            this.pos = this.chunkPos = ranges[0].from;
            this.range = ranges[0];
            this.end = ranges[ranges.length - 1].to;
            this.readNext();
        }
        /**
        @internal
        */
        resolveOffset(offset, assoc) {
            let range = this.range, index = this.rangeIndex;
            let pos = this.pos + offset;
            while (pos < range.from) {
                if (!index)
                    return null;
                let next = this.ranges[--index];
                pos -= range.from - next.to;
                range = next;
            }
            while (assoc < 0 ? pos > range.to : pos >= range.to) {
                if (index == this.ranges.length - 1)
                    return null;
                let next = this.ranges[++index];
                pos += next.from - range.to;
                range = next;
            }
            return pos;
        }
        /**
        @internal
        */
        clipPos(pos) {
            if (pos >= this.range.from && pos < this.range.to)
                return pos;
            for (let range of this.ranges)
                if (range.to > pos)
                    return Math.max(pos, range.from);
            return this.end;
        }
        /**
        Look at a code unit near the stream position. `.peek(0)` equals
        `.next`, `.peek(-1)` gives you the previous character, and so
        on.

        Note that looking around during tokenizing creates dependencies
        on potentially far-away content, which may reduce the
        effectiveness incremental parsing—when looking forward—or even
        cause invalid reparses when looking backward more than 25 code
        units, since the library does not track lookbehind.
        */
        peek(offset) {
            let idx = this.chunkOff + offset, pos, result;
            if (idx >= 0 && idx < this.chunk.length) {
                pos = this.pos + offset;
                result = this.chunk.charCodeAt(idx);
            }
            else {
                let resolved = this.resolveOffset(offset, 1);
                if (resolved == null)
                    return -1;
                pos = resolved;
                if (pos >= this.chunk2Pos && pos < this.chunk2Pos + this.chunk2.length) {
                    result = this.chunk2.charCodeAt(pos - this.chunk2Pos);
                }
                else {
                    let i = this.rangeIndex, range = this.range;
                    while (range.to <= pos)
                        range = this.ranges[++i];
                    this.chunk2 = this.input.chunk(this.chunk2Pos = pos);
                    if (pos + this.chunk2.length > range.to)
                        this.chunk2 = this.chunk2.slice(0, range.to - pos);
                    result = this.chunk2.charCodeAt(0);
                }
            }
            if (pos >= this.token.lookAhead)
                this.token.lookAhead = pos + 1;
            return result;
        }
        /**
        Accept a token. By default, the end of the token is set to the
        current stream position, but you can pass an offset (relative to
        the stream position) to change that.
        */
        acceptToken(token, endOffset = 0) {
            let end = endOffset ? this.resolveOffset(endOffset, -1) : this.pos;
            if (end == null || end < this.token.start)
                throw new RangeError("Token end out of bounds");
            this.token.value = token;
            this.token.end = end;
        }
        /**
        Accept a token ending at a specific given position.
        */
        acceptTokenTo(token, endPos) {
            this.token.value = token;
            this.token.end = endPos;
        }
        getChunk() {
            if (this.pos >= this.chunk2Pos && this.pos < this.chunk2Pos + this.chunk2.length) {
                let { chunk, chunkPos } = this;
                this.chunk = this.chunk2;
                this.chunkPos = this.chunk2Pos;
                this.chunk2 = chunk;
                this.chunk2Pos = chunkPos;
                this.chunkOff = this.pos - this.chunkPos;
            }
            else {
                this.chunk2 = this.chunk;
                this.chunk2Pos = this.chunkPos;
                let nextChunk = this.input.chunk(this.pos);
                let end = this.pos + nextChunk.length;
                this.chunk = end > this.range.to ? nextChunk.slice(0, this.range.to - this.pos) : nextChunk;
                this.chunkPos = this.pos;
                this.chunkOff = 0;
            }
        }
        readNext() {
            if (this.chunkOff >= this.chunk.length) {
                this.getChunk();
                if (this.chunkOff == this.chunk.length)
                    return this.next = -1;
            }
            return this.next = this.chunk.charCodeAt(this.chunkOff);
        }
        /**
        Move the stream forward N (defaults to 1) code units. Returns
        the new value of [`next`](#lr.InputStream.next).
        */
        advance(n = 1) {
            this.chunkOff += n;
            while (this.pos + n >= this.range.to) {
                if (this.rangeIndex == this.ranges.length - 1)
                    return this.setDone();
                n -= this.range.to - this.pos;
                this.range = this.ranges[++this.rangeIndex];
                this.pos = this.range.from;
            }
            this.pos += n;
            if (this.pos >= this.token.lookAhead)
                this.token.lookAhead = this.pos + 1;
            return this.readNext();
        }
        setDone() {
            this.pos = this.chunkPos = this.end;
            this.range = this.ranges[this.rangeIndex = this.ranges.length - 1];
            this.chunk = "";
            return this.next = -1;
        }
        /**
        @internal
        */
        reset(pos, token) {
            if (token) {
                this.token = token;
                token.start = pos;
                token.lookAhead = pos + 1;
                token.value = token.extended = -1;
            }
            else {
                this.token = nullToken;
            }
            if (this.pos != pos) {
                this.pos = pos;
                if (pos == this.end) {
                    this.setDone();
                    return this;
                }
                while (pos < this.range.from)
                    this.range = this.ranges[--this.rangeIndex];
                while (pos >= this.range.to)
                    this.range = this.ranges[++this.rangeIndex];
                if (pos >= this.chunkPos && pos < this.chunkPos + this.chunk.length) {
                    this.chunkOff = pos - this.chunkPos;
                }
                else {
                    this.chunk = "";
                    this.chunkOff = 0;
                }
                this.readNext();
            }
            return this;
        }
        /**
        @internal
        */
        read(from, to) {
            if (from >= this.chunkPos && to <= this.chunkPos + this.chunk.length)
                return this.chunk.slice(from - this.chunkPos, to - this.chunkPos);
            if (from >= this.chunk2Pos && to <= this.chunk2Pos + this.chunk2.length)
                return this.chunk2.slice(from - this.chunk2Pos, to - this.chunk2Pos);
            if (from >= this.range.from && to <= this.range.to)
                return this.input.read(from, to);
            let result = "";
            for (let r of this.ranges) {
                if (r.from >= to)
                    break;
                if (r.to > from)
                    result += this.input.read(Math.max(r.from, from), Math.min(r.to, to));
            }
            return result;
        }
    }
    /**
    @internal
    */
    class TokenGroup {
        constructor(data, id) {
            this.data = data;
            this.id = id;
        }
        token(input, stack) {
            let { parser } = stack.p;
            readToken(this.data, input, stack, this.id, parser.data, parser.tokenPrecTable);
        }
    }
    TokenGroup.prototype.contextual = TokenGroup.prototype.fallback = TokenGroup.prototype.extend = false;
    /**
    @hide
    */
    class LocalTokenGroup {
        constructor(data, precTable, elseToken) {
            this.precTable = precTable;
            this.elseToken = elseToken;
            this.data = typeof data == "string" ? decodeArray(data) : data;
        }
        token(input, stack) {
            let start = input.pos, skipped = 0;
            for (;;) {
                let atEof = input.next < 0, nextPos = input.resolveOffset(1, 1);
                readToken(this.data, input, stack, 0, this.data, this.precTable);
                if (input.token.value > -1)
                    break;
                if (this.elseToken == null)
                    return;
                if (!atEof)
                    skipped++;
                if (nextPos == null)
                    break;
                input.reset(nextPos, input.token);
            }
            if (skipped) {
                input.reset(start, input.token);
                input.acceptToken(this.elseToken, skipped);
            }
        }
    }
    LocalTokenGroup.prototype.contextual = TokenGroup.prototype.fallback = TokenGroup.prototype.extend = false;
    /**
    `@external tokens` declarations in the grammar should resolve to
    an instance of this class.
    */
    class ExternalTokenizer {
        /**
        Create a tokenizer. The first argument is the function that,
        given an input stream, scans for the types of tokens it
        recognizes at the stream's position, and calls
        [`acceptToken`](#lr.InputStream.acceptToken) when it finds
        one.
        */
        constructor(
        /**
        @internal
        */
        token, options = {}) {
            this.token = token;
            this.contextual = !!options.contextual;
            this.fallback = !!options.fallback;
            this.extend = !!options.extend;
        }
    }
    // Tokenizer data is stored a big uint16 array containing, for each
    // state:
    //
    //  - A group bitmask, indicating what token groups are reachable from
    //    this state, so that paths that can only lead to tokens not in
    //    any of the current groups can be cut off early.
    //
    //  - The position of the end of the state's sequence of accepting
    //    tokens
    //
    //  - The number of outgoing edges for the state
    //
    //  - The accepting tokens, as (token id, group mask) pairs
    //
    //  - The outgoing edges, as (start character, end character, state
    //    index) triples, with end character being exclusive
    //
    // This function interprets that data, running through a stream as
    // long as new states with the a matching group mask can be reached,
    // and updating `input.token` when it matches a token.
    function readToken(data, input, stack, group, precTable, precOffset) {
        let state = 0, groupMask = 1 << group, { dialect } = stack.p.parser;
        scan: for (;;) {
            if ((groupMask & data[state]) == 0)
                break;
            let accEnd = data[state + 1];
            // Check whether this state can lead to a token in the current group
            // Accept tokens in this state, possibly overwriting
            // lower-precedence / shorter tokens
            for (let i = state + 3; i < accEnd; i += 2)
                if ((data[i + 1] & groupMask) > 0) {
                    let term = data[i];
                    if (dialect.allows(term) &&
                        (input.token.value == -1 || input.token.value == term ||
                            overrides(term, input.token.value, precTable, precOffset))) {
                        input.acceptToken(term);
                        break;
                    }
                }
            let next = input.next, low = 0, high = data[state + 2];
            // Special case for EOF
            if (input.next < 0 && high > low && data[accEnd + high * 3 - 3] == 65535 /* Seq.End */) {
                state = data[accEnd + high * 3 - 1];
                continue scan;
            }
            // Do a binary search on the state's edges
            for (; low < high;) {
                let mid = (low + high) >> 1;
                let index = accEnd + mid + (mid << 1);
                let from = data[index], to = data[index + 1] || 0x10000;
                if (next < from)
                    high = mid;
                else if (next >= to)
                    low = mid + 1;
                else {
                    state = data[index + 2];
                    input.advance();
                    continue scan;
                }
            }
            break;
        }
    }
    function findOffset(data, start, term) {
        for (let i = start, next; (next = data[i]) != 65535 /* Seq.End */; i++)
            if (next == term)
                return i - start;
        return -1;
    }
    function overrides(token, prev, tableData, tableOffset) {
        let iPrev = findOffset(tableData, tableOffset, prev);
        return iPrev < 0 || findOffset(tableData, tableOffset, token) < iPrev;
    }

    // Environment variable used to control console output
    const verbose = typeof process != "undefined" && process.env && /\bparse\b/.test(process.env.LOG);
    let stackIDs = null;
    function cutAt(tree, pos, side) {
        let cursor = tree.cursor(IterMode.IncludeAnonymous);
        cursor.moveTo(pos);
        for (;;) {
            if (!(side < 0 ? cursor.childBefore(pos) : cursor.childAfter(pos)))
                for (;;) {
                    if ((side < 0 ? cursor.to < pos : cursor.from > pos) && !cursor.type.isError)
                        return side < 0 ? Math.max(0, Math.min(cursor.to - 1, pos - 25 /* Lookahead.Margin */))
                            : Math.min(tree.length, Math.max(cursor.from + 1, pos + 25 /* Lookahead.Margin */));
                    if (side < 0 ? cursor.prevSibling() : cursor.nextSibling())
                        break;
                    if (!cursor.parent())
                        return side < 0 ? 0 : tree.length;
                }
        }
    }
    class FragmentCursor {
        constructor(fragments, nodeSet) {
            this.fragments = fragments;
            this.nodeSet = nodeSet;
            this.i = 0;
            this.fragment = null;
            this.safeFrom = -1;
            this.safeTo = -1;
            this.trees = [];
            this.start = [];
            this.index = [];
            this.nextFragment();
        }
        nextFragment() {
            let fr = this.fragment = this.i == this.fragments.length ? null : this.fragments[this.i++];
            if (fr) {
                this.safeFrom = fr.openStart ? cutAt(fr.tree, fr.from + fr.offset, 1) - fr.offset : fr.from;
                this.safeTo = fr.openEnd ? cutAt(fr.tree, fr.to + fr.offset, -1) - fr.offset : fr.to;
                while (this.trees.length) {
                    this.trees.pop();
                    this.start.pop();
                    this.index.pop();
                }
                this.trees.push(fr.tree);
                this.start.push(-fr.offset);
                this.index.push(0);
                this.nextStart = this.safeFrom;
            }
            else {
                this.nextStart = 1e9;
            }
        }
        // `pos` must be >= any previously given `pos` for this cursor
        nodeAt(pos) {
            if (pos < this.nextStart)
                return null;
            while (this.fragment && this.safeTo <= pos)
                this.nextFragment();
            if (!this.fragment)
                return null;
            for (;;) {
                let last = this.trees.length - 1;
                if (last < 0) { // End of tree
                    this.nextFragment();
                    return null;
                }
                let top = this.trees[last], index = this.index[last];
                if (index == top.children.length) {
                    this.trees.pop();
                    this.start.pop();
                    this.index.pop();
                    continue;
                }
                let next = top.children[index];
                let start = this.start[last] + top.positions[index];
                if (start > pos) {
                    this.nextStart = start;
                    return null;
                }
                if (next instanceof Tree) {
                    if (start == pos) {
                        if (start < this.safeFrom)
                            return null;
                        let end = start + next.length;
                        if (end <= this.safeTo) {
                            let lookAhead = next.prop(NodeProp.lookAhead);
                            if (!lookAhead || end + lookAhead < this.fragment.to)
                                return next;
                        }
                    }
                    this.index[last]++;
                    if (start + next.length >= Math.max(this.safeFrom, pos)) { // Enter this node
                        this.trees.push(next);
                        this.start.push(start);
                        this.index.push(0);
                    }
                }
                else {
                    this.index[last]++;
                    this.nextStart = start + next.length;
                }
            }
        }
    }
    class TokenCache {
        constructor(parser, stream) {
            this.stream = stream;
            this.tokens = [];
            this.mainToken = null;
            this.actions = [];
            this.tokens = parser.tokenizers.map(_ => new CachedToken);
        }
        getActions(stack) {
            let actionIndex = 0;
            let main = null;
            let { parser } = stack.p, { tokenizers } = parser;
            let mask = parser.stateSlot(stack.state, 3 /* ParseState.TokenizerMask */);
            let context = stack.curContext ? stack.curContext.hash : 0;
            let lookAhead = 0;
            for (let i = 0; i < tokenizers.length; i++) {
                if (((1 << i) & mask) == 0)
                    continue;
                let tokenizer = tokenizers[i], token = this.tokens[i];
                if (main && !tokenizer.fallback)
                    continue;
                if (tokenizer.contextual || token.start != stack.pos || token.mask != mask || token.context != context) {
                    this.updateCachedToken(token, tokenizer, stack);
                    token.mask = mask;
                    token.context = context;
                }
                if (token.lookAhead > token.end + 25 /* Lookahead.Margin */)
                    lookAhead = Math.max(token.lookAhead, lookAhead);
                if (token.value != 0 /* Term.Err */) {
                    let startIndex = actionIndex;
                    if (token.extended > -1)
                        actionIndex = this.addActions(stack, token.extended, token.end, actionIndex);
                    actionIndex = this.addActions(stack, token.value, token.end, actionIndex);
                    if (!tokenizer.extend) {
                        main = token;
                        if (actionIndex > startIndex)
                            break;
                    }
                }
            }
            while (this.actions.length > actionIndex)
                this.actions.pop();
            if (lookAhead)
                stack.setLookAhead(lookAhead);
            if (!main && stack.pos == this.stream.end) {
                main = new CachedToken;
                main.value = stack.p.parser.eofTerm;
                main.start = main.end = stack.pos;
                actionIndex = this.addActions(stack, main.value, main.end, actionIndex);
            }
            this.mainToken = main;
            return this.actions;
        }
        getMainToken(stack) {
            if (this.mainToken)
                return this.mainToken;
            let main = new CachedToken, { pos, p } = stack;
            main.start = pos;
            main.end = Math.min(pos + 1, p.stream.end);
            main.value = pos == p.stream.end ? p.parser.eofTerm : 0 /* Term.Err */;
            return main;
        }
        updateCachedToken(token, tokenizer, stack) {
            let start = this.stream.clipPos(stack.pos);
            tokenizer.token(this.stream.reset(start, token), stack);
            if (token.value > -1) {
                let { parser } = stack.p;
                for (let i = 0; i < parser.specialized.length; i++)
                    if (parser.specialized[i] == token.value) {
                        let result = parser.specializers[i](this.stream.read(token.start, token.end), stack);
                        if (result >= 0 && stack.p.parser.dialect.allows(result >> 1)) {
                            if ((result & 1) == 0 /* Specialize.Specialize */)
                                token.value = result >> 1;
                            else
                                token.extended = result >> 1;
                            break;
                        }
                    }
            }
            else {
                token.value = 0 /* Term.Err */;
                token.end = this.stream.clipPos(start + 1);
            }
        }
        putAction(action, token, end, index) {
            // Don't add duplicate actions
            for (let i = 0; i < index; i += 3)
                if (this.actions[i] == action)
                    return index;
            this.actions[index++] = action;
            this.actions[index++] = token;
            this.actions[index++] = end;
            return index;
        }
        addActions(stack, token, end, index) {
            let { state } = stack, { parser } = stack.p, { data } = parser;
            for (let set = 0; set < 2; set++) {
                for (let i = parser.stateSlot(state, set ? 2 /* ParseState.Skip */ : 1 /* ParseState.Actions */);; i += 3) {
                    if (data[i] == 65535 /* Seq.End */) {
                        if (data[i + 1] == 1 /* Seq.Next */) {
                            i = pair(data, i + 2);
                        }
                        else {
                            if (index == 0 && data[i + 1] == 2 /* Seq.Other */)
                                index = this.putAction(pair(data, i + 2), token, end, index);
                            break;
                        }
                    }
                    if (data[i] == token)
                        index = this.putAction(pair(data, i + 1), token, end, index);
                }
            }
            return index;
        }
    }
    class Parse {
        constructor(parser, input, fragments, ranges) {
            this.parser = parser;
            this.input = input;
            this.ranges = ranges;
            this.recovering = 0;
            this.nextStackID = 0x2654; // ♔, ♕, ♖, ♗, ♘, ♙, ♠, ♡, ♢, ♣, ♤, ♥, ♦, ♧
            this.minStackPos = 0;
            this.reused = [];
            this.stoppedAt = null;
            this.lastBigReductionStart = -1;
            this.lastBigReductionSize = 0;
            this.bigReductionCount = 0;
            this.stream = new InputStream(input, ranges);
            this.tokens = new TokenCache(parser, this.stream);
            this.topTerm = parser.top[1];
            let { from } = ranges[0];
            this.stacks = [Stack.start(this, parser.top[0], from)];
            this.fragments = fragments.length && this.stream.end - from > parser.bufferLength * 4
                ? new FragmentCursor(fragments, parser.nodeSet) : null;
        }
        get parsedPos() {
            return this.minStackPos;
        }
        // Move the parser forward. This will process all parse stacks at
        // `this.pos` and try to advance them to a further position. If no
        // stack for such a position is found, it'll start error-recovery.
        //
        // When the parse is finished, this will return a syntax tree. When
        // not, it returns `null`.
        advance() {
            let stacks = this.stacks, pos = this.minStackPos;
            // This will hold stacks beyond `pos`.
            let newStacks = this.stacks = [];
            let stopped, stoppedTokens;
            // If a large amount of reductions happened with the same start
            // position, force the stack out of that production in order to
            // avoid creating a tree too deep to recurse through.
            // (This is an ugly kludge, because unfortunately there is no
            // straightforward, cheap way to check for this happening, due to
            // the history of reductions only being available in an
            // expensive-to-access format in the stack buffers.)
            if (this.bigReductionCount > 300 /* Rec.MaxLeftAssociativeReductionCount */ && stacks.length == 1) {
                let [s] = stacks;
                while (s.forceReduce() && s.stack.length && s.stack[s.stack.length - 2] >= this.lastBigReductionStart) { }
                this.bigReductionCount = this.lastBigReductionSize = 0;
            }
            // Keep advancing any stacks at `pos` until they either move
            // forward or can't be advanced. Gather stacks that can't be
            // advanced further in `stopped`.
            for (let i = 0; i < stacks.length; i++) {
                let stack = stacks[i];
                for (;;) {
                    this.tokens.mainToken = null;
                    if (stack.pos > pos) {
                        newStacks.push(stack);
                    }
                    else if (this.advanceStack(stack, newStacks, stacks)) {
                        continue;
                    }
                    else {
                        if (!stopped) {
                            stopped = [];
                            stoppedTokens = [];
                        }
                        stopped.push(stack);
                        let tok = this.tokens.getMainToken(stack);
                        stoppedTokens.push(tok.value, tok.end);
                    }
                    break;
                }
            }
            if (!newStacks.length) {
                let finished = stopped && findFinished(stopped);
                if (finished) {
                    if (verbose)
                        console.log("Finish with " + this.stackID(finished));
                    return this.stackToTree(finished);
                }
                if (this.parser.strict) {
                    if (verbose && stopped)
                        console.log("Stuck with token " + (this.tokens.mainToken ? this.parser.getName(this.tokens.mainToken.value) : "none"));
                    throw new SyntaxError("No parse at " + pos);
                }
                if (!this.recovering)
                    this.recovering = 5 /* Rec.Distance */;
            }
            if (this.recovering && stopped) {
                let finished = this.stoppedAt != null && stopped[0].pos > this.stoppedAt ? stopped[0]
                    : this.runRecovery(stopped, stoppedTokens, newStacks);
                if (finished) {
                    if (verbose)
                        console.log("Force-finish " + this.stackID(finished));
                    return this.stackToTree(finished.forceAll());
                }
            }
            if (this.recovering) {
                let maxRemaining = this.recovering == 1 ? 1 : this.recovering * 3 /* Rec.MaxRemainingPerStep */;
                if (newStacks.length > maxRemaining) {
                    newStacks.sort((a, b) => b.score - a.score);
                    while (newStacks.length > maxRemaining)
                        newStacks.pop();
                }
                if (newStacks.some(s => s.reducePos > pos))
                    this.recovering--;
            }
            else if (newStacks.length > 1) {
                // Prune stacks that are in the same state, or that have been
                // running without splitting for a while, to avoid getting stuck
                // with multiple successful stacks running endlessly on.
                outer: for (let i = 0; i < newStacks.length - 1; i++) {
                    let stack = newStacks[i];
                    for (let j = i + 1; j < newStacks.length; j++) {
                        let other = newStacks[j];
                        if (stack.sameState(other) ||
                            stack.buffer.length > 500 /* Rec.MinBufferLengthPrune */ && other.buffer.length > 500 /* Rec.MinBufferLengthPrune */) {
                            if (((stack.score - other.score) || (stack.buffer.length - other.buffer.length)) > 0) {
                                newStacks.splice(j--, 1);
                            }
                            else {
                                newStacks.splice(i--, 1);
                                continue outer;
                            }
                        }
                    }
                }
                if (newStacks.length > 12 /* Rec.MaxStackCount */)
                    newStacks.splice(12 /* Rec.MaxStackCount */, newStacks.length - 12 /* Rec.MaxStackCount */);
            }
            this.minStackPos = newStacks[0].pos;
            for (let i = 1; i < newStacks.length; i++)
                if (newStacks[i].pos < this.minStackPos)
                    this.minStackPos = newStacks[i].pos;
            return null;
        }
        stopAt(pos) {
            if (this.stoppedAt != null && this.stoppedAt < pos)
                throw new RangeError("Can't move stoppedAt forward");
            this.stoppedAt = pos;
        }
        // Returns an updated version of the given stack, or null if the
        // stack can't advance normally. When `split` and `stacks` are
        // given, stacks split off by ambiguous operations will be pushed to
        // `split`, or added to `stacks` if they move `pos` forward.
        advanceStack(stack, stacks, split) {
            let start = stack.pos, { parser } = this;
            let base = verbose ? this.stackID(stack) + " -> " : "";
            if (this.stoppedAt != null && start > this.stoppedAt)
                return stack.forceReduce() ? stack : null;
            if (this.fragments) {
                let strictCx = stack.curContext && stack.curContext.tracker.strict, cxHash = strictCx ? stack.curContext.hash : 0;
                for (let cached = this.fragments.nodeAt(start); cached;) {
                    let match = this.parser.nodeSet.types[cached.type.id] == cached.type ? parser.getGoto(stack.state, cached.type.id) : -1;
                    if (match > -1 && cached.length && (!strictCx || (cached.prop(NodeProp.contextHash) || 0) == cxHash)) {
                        stack.useNode(cached, match);
                        if (verbose)
                            console.log(base + this.stackID(stack) + ` (via reuse of ${parser.getName(cached.type.id)})`);
                        return true;
                    }
                    if (!(cached instanceof Tree) || cached.children.length == 0 || cached.positions[0] > 0)
                        break;
                    let inner = cached.children[0];
                    if (inner instanceof Tree && cached.positions[0] == 0)
                        cached = inner;
                    else
                        break;
                }
            }
            let defaultReduce = parser.stateSlot(stack.state, 4 /* ParseState.DefaultReduce */);
            if (defaultReduce > 0) {
                stack.reduce(defaultReduce);
                if (verbose)
                    console.log(base + this.stackID(stack) + ` (via always-reduce ${parser.getName(defaultReduce & 65535 /* Action.ValueMask */)})`);
                return true;
            }
            if (stack.stack.length >= 8400 /* Rec.CutDepth */) {
                while (stack.stack.length > 6000 /* Rec.CutTo */ && stack.forceReduce()) { }
            }
            let actions = this.tokens.getActions(stack);
            for (let i = 0; i < actions.length;) {
                let action = actions[i++], term = actions[i++], end = actions[i++];
                let last = i == actions.length || !split;
                let localStack = last ? stack : stack.split();
                let main = this.tokens.mainToken;
                localStack.apply(action, term, main ? main.start : localStack.pos, end);
                if (verbose)
                    console.log(base + this.stackID(localStack) + ` (via ${(action & 65536 /* Action.ReduceFlag */) == 0 ? "shift"
                    : `reduce of ${parser.getName(action & 65535 /* Action.ValueMask */)}`} for ${parser.getName(term)} @ ${start}${localStack == stack ? "" : ", split"})`);
                if (last)
                    return true;
                else if (localStack.pos > start)
                    stacks.push(localStack);
                else
                    split.push(localStack);
            }
            return false;
        }
        // Advance a given stack forward as far as it will go. Returns the
        // (possibly updated) stack if it got stuck, or null if it moved
        // forward and was given to `pushStackDedup`.
        advanceFully(stack, newStacks) {
            let pos = stack.pos;
            for (;;) {
                if (!this.advanceStack(stack, null, null))
                    return false;
                if (stack.pos > pos) {
                    pushStackDedup(stack, newStacks);
                    return true;
                }
            }
        }
        runRecovery(stacks, tokens, newStacks) {
            let finished = null, restarted = false;
            for (let i = 0; i < stacks.length; i++) {
                let stack = stacks[i], token = tokens[i << 1], tokenEnd = tokens[(i << 1) + 1];
                let base = verbose ? this.stackID(stack) + " -> " : "";
                if (stack.deadEnd) {
                    if (restarted)
                        continue;
                    restarted = true;
                    stack.restart();
                    if (verbose)
                        console.log(base + this.stackID(stack) + " (restarted)");
                    let done = this.advanceFully(stack, newStacks);
                    if (done)
                        continue;
                }
                let force = stack.split(), forceBase = base;
                for (let j = 0; force.forceReduce() && j < 10 /* Rec.ForceReduceLimit */; j++) {
                    if (verbose)
                        console.log(forceBase + this.stackID(force) + " (via force-reduce)");
                    let done = this.advanceFully(force, newStacks);
                    if (done)
                        break;
                    if (verbose)
                        forceBase = this.stackID(force) + " -> ";
                }
                for (let insert of stack.recoverByInsert(token)) {
                    if (verbose)
                        console.log(base + this.stackID(insert) + " (via recover-insert)");
                    this.advanceFully(insert, newStacks);
                }
                if (this.stream.end > stack.pos) {
                    if (tokenEnd == stack.pos) {
                        tokenEnd++;
                        token = 0 /* Term.Err */;
                    }
                    stack.recoverByDelete(token, tokenEnd);
                    if (verbose)
                        console.log(base + this.stackID(stack) + ` (via recover-delete ${this.parser.getName(token)})`);
                    pushStackDedup(stack, newStacks);
                }
                else if (!finished || finished.score < stack.score) {
                    finished = stack;
                }
            }
            return finished;
        }
        // Convert the stack's buffer to a syntax tree.
        stackToTree(stack) {
            stack.close();
            return Tree.build({ buffer: StackBufferCursor.create(stack),
                nodeSet: this.parser.nodeSet,
                topID: this.topTerm,
                maxBufferLength: this.parser.bufferLength,
                reused: this.reused,
                start: this.ranges[0].from,
                length: stack.pos - this.ranges[0].from,
                minRepeatType: this.parser.minRepeatTerm });
        }
        stackID(stack) {
            let id = (stackIDs || (stackIDs = new WeakMap)).get(stack);
            if (!id)
                stackIDs.set(stack, id = String.fromCodePoint(this.nextStackID++));
            return id + stack;
        }
    }
    function pushStackDedup(stack, newStacks) {
        for (let i = 0; i < newStacks.length; i++) {
            let other = newStacks[i];
            if (other.pos == stack.pos && other.sameState(stack)) {
                if (newStacks[i].score < stack.score)
                    newStacks[i] = stack;
                return;
            }
        }
        newStacks.push(stack);
    }
    class Dialect {
        constructor(source, flags, disabled) {
            this.source = source;
            this.flags = flags;
            this.disabled = disabled;
        }
        allows(term) { return !this.disabled || this.disabled[term] == 0; }
    }
    const id = x => x;
    /**
    Context trackers are used to track stateful context (such as
    indentation in the Python grammar, or parent elements in the XML
    grammar) needed by external tokenizers. You declare them in a
    grammar file as `@context exportName from "module"`.

    Context values should be immutable, and can be updated (replaced)
    on shift or reduce actions.

    The export used in a `@context` declaration should be of this
    type.
    */
    class ContextTracker {
        /**
        Define a context tracker.
        */
        constructor(spec) {
            this.start = spec.start;
            this.shift = spec.shift || id;
            this.reduce = spec.reduce || id;
            this.reuse = spec.reuse || id;
            this.hash = spec.hash || (() => 0);
            this.strict = spec.strict !== false;
        }
    }
    /**
    Holds the parse tables for a given grammar, as generated by
    `lezer-generator`, and provides [methods](#common.Parser) to parse
    content with.
    */
    class LRParser extends Parser {
        /**
        @internal
        */
        constructor(spec) {
            super();
            /**
            @internal
            */
            this.wrappers = [];
            if (spec.version != 14 /* File.Version */)
                throw new RangeError(`Parser version (${spec.version}) doesn't match runtime version (${14 /* File.Version */})`);
            let nodeNames = spec.nodeNames.split(" ");
            this.minRepeatTerm = nodeNames.length;
            for (let i = 0; i < spec.repeatNodeCount; i++)
                nodeNames.push("");
            let topTerms = Object.keys(spec.topRules).map(r => spec.topRules[r][1]);
            let nodeProps = [];
            for (let i = 0; i < nodeNames.length; i++)
                nodeProps.push([]);
            function setProp(nodeID, prop, value) {
                nodeProps[nodeID].push([prop, prop.deserialize(String(value))]);
            }
            if (spec.nodeProps)
                for (let propSpec of spec.nodeProps) {
                    let prop = propSpec[0];
                    if (typeof prop == "string")
                        prop = NodeProp[prop];
                    for (let i = 1; i < propSpec.length;) {
                        let next = propSpec[i++];
                        if (next >= 0) {
                            setProp(next, prop, propSpec[i++]);
                        }
                        else {
                            let value = propSpec[i + -next];
                            for (let j = -next; j > 0; j--)
                                setProp(propSpec[i++], prop, value);
                            i++;
                        }
                    }
                }
            this.nodeSet = new NodeSet(nodeNames.map((name, i) => NodeType.define({
                name: i >= this.minRepeatTerm ? undefined : name,
                id: i,
                props: nodeProps[i],
                top: topTerms.indexOf(i) > -1,
                error: i == 0,
                skipped: spec.skippedNodes && spec.skippedNodes.indexOf(i) > -1
            })));
            if (spec.propSources)
                this.nodeSet = this.nodeSet.extend(...spec.propSources);
            this.strict = false;
            this.bufferLength = DefaultBufferLength;
            let tokenArray = decodeArray(spec.tokenData);
            this.context = spec.context;
            this.specializerSpecs = spec.specialized || [];
            this.specialized = new Uint16Array(this.specializerSpecs.length);
            for (let i = 0; i < this.specializerSpecs.length; i++)
                this.specialized[i] = this.specializerSpecs[i].term;
            this.specializers = this.specializerSpecs.map(getSpecializer);
            this.states = decodeArray(spec.states, Uint32Array);
            this.data = decodeArray(spec.stateData);
            this.goto = decodeArray(spec.goto);
            this.maxTerm = spec.maxTerm;
            this.tokenizers = spec.tokenizers.map(value => typeof value == "number" ? new TokenGroup(tokenArray, value) : value);
            this.topRules = spec.topRules;
            this.dialects = spec.dialects || {};
            this.dynamicPrecedences = spec.dynamicPrecedences || null;
            this.tokenPrecTable = spec.tokenPrec;
            this.termNames = spec.termNames || null;
            this.maxNode = this.nodeSet.types.length - 1;
            this.dialect = this.parseDialect();
            this.top = this.topRules[Object.keys(this.topRules)[0]];
        }
        createParse(input, fragments, ranges) {
            let parse = new Parse(this, input, fragments, ranges);
            for (let w of this.wrappers)
                parse = w(parse, input, fragments, ranges);
            return parse;
        }
        /**
        Get a goto table entry @internal
        */
        getGoto(state, term, loose = false) {
            let table = this.goto;
            if (term >= table[0])
                return -1;
            for (let pos = table[term + 1];;) {
                let groupTag = table[pos++], last = groupTag & 1;
                let target = table[pos++];
                if (last && loose)
                    return target;
                for (let end = pos + (groupTag >> 1); pos < end; pos++)
                    if (table[pos] == state)
                        return target;
                if (last)
                    return -1;
            }
        }
        /**
        Check if this state has an action for a given terminal @internal
        */
        hasAction(state, terminal) {
            let data = this.data;
            for (let set = 0; set < 2; set++) {
                for (let i = this.stateSlot(state, set ? 2 /* ParseState.Skip */ : 1 /* ParseState.Actions */), next;; i += 3) {
                    if ((next = data[i]) == 65535 /* Seq.End */) {
                        if (data[i + 1] == 1 /* Seq.Next */)
                            next = data[i = pair(data, i + 2)];
                        else if (data[i + 1] == 2 /* Seq.Other */)
                            return pair(data, i + 2);
                        else
                            break;
                    }
                    if (next == terminal || next == 0 /* Term.Err */)
                        return pair(data, i + 1);
                }
            }
            return 0;
        }
        /**
        @internal
        */
        stateSlot(state, slot) {
            return this.states[(state * 6 /* ParseState.Size */) + slot];
        }
        /**
        @internal
        */
        stateFlag(state, flag) {
            return (this.stateSlot(state, 0 /* ParseState.Flags */) & flag) > 0;
        }
        /**
        @internal
        */
        validAction(state, action) {
            return !!this.allActions(state, a => a == action ? true : null);
        }
        /**
        @internal
        */
        allActions(state, action) {
            let deflt = this.stateSlot(state, 4 /* ParseState.DefaultReduce */);
            let result = deflt ? action(deflt) : undefined;
            for (let i = this.stateSlot(state, 1 /* ParseState.Actions */); result == null; i += 3) {
                if (this.data[i] == 65535 /* Seq.End */) {
                    if (this.data[i + 1] == 1 /* Seq.Next */)
                        i = pair(this.data, i + 2);
                    else
                        break;
                }
                result = action(pair(this.data, i + 1));
            }
            return result;
        }
        /**
        Get the states that can follow this one through shift actions or
        goto jumps. @internal
        */
        nextStates(state) {
            let result = [];
            for (let i = this.stateSlot(state, 1 /* ParseState.Actions */);; i += 3) {
                if (this.data[i] == 65535 /* Seq.End */) {
                    if (this.data[i + 1] == 1 /* Seq.Next */)
                        i = pair(this.data, i + 2);
                    else
                        break;
                }
                if ((this.data[i + 2] & (65536 /* Action.ReduceFlag */ >> 16)) == 0) {
                    let value = this.data[i + 1];
                    if (!result.some((v, i) => (i & 1) && v == value))
                        result.push(this.data[i], value);
                }
            }
            return result;
        }
        /**
        Configure the parser. Returns a new parser instance that has the
        given settings modified. Settings not provided in `config` are
        kept from the original parser.
        */
        configure(config) {
            // Hideous reflection-based kludge to make it easy to create a
            // slightly modified copy of a parser.
            let copy = Object.assign(Object.create(LRParser.prototype), this);
            if (config.props)
                copy.nodeSet = this.nodeSet.extend(...config.props);
            if (config.top) {
                let info = this.topRules[config.top];
                if (!info)
                    throw new RangeError(`Invalid top rule name ${config.top}`);
                copy.top = info;
            }
            if (config.tokenizers)
                copy.tokenizers = this.tokenizers.map(t => {
                    let found = config.tokenizers.find(r => r.from == t);
                    return found ? found.to : t;
                });
            if (config.specializers) {
                copy.specializers = this.specializers.slice();
                copy.specializerSpecs = this.specializerSpecs.map((s, i) => {
                    let found = config.specializers.find(r => r.from == s.external);
                    if (!found)
                        return s;
                    let spec = Object.assign(Object.assign({}, s), { external: found.to });
                    copy.specializers[i] = getSpecializer(spec);
                    return spec;
                });
            }
            if (config.contextTracker)
                copy.context = config.contextTracker;
            if (config.dialect)
                copy.dialect = this.parseDialect(config.dialect);
            if (config.strict != null)
                copy.strict = config.strict;
            if (config.wrap)
                copy.wrappers = copy.wrappers.concat(config.wrap);
            if (config.bufferLength != null)
                copy.bufferLength = config.bufferLength;
            return copy;
        }
        /**
        Tells you whether any [parse wrappers](#lr.ParserConfig.wrap)
        are registered for this parser.
        */
        hasWrappers() {
            return this.wrappers.length > 0;
        }
        /**
        Returns the name associated with a given term. This will only
        work for all terms when the parser was generated with the
        `--names` option. By default, only the names of tagged terms are
        stored.
        */
        getName(term) {
            return this.termNames ? this.termNames[term] : String(term <= this.maxNode && this.nodeSet.types[term].name || term);
        }
        /**
        The eof term id is always allocated directly after the node
        types. @internal
        */
        get eofTerm() { return this.maxNode + 1; }
        /**
        The type of top node produced by the parser.
        */
        get topNode() { return this.nodeSet.types[this.top[1]]; }
        /**
        @internal
        */
        dynamicPrecedence(term) {
            let prec = this.dynamicPrecedences;
            return prec == null ? 0 : prec[term] || 0;
        }
        /**
        @internal
        */
        parseDialect(dialect) {
            let values = Object.keys(this.dialects), flags = values.map(() => false);
            if (dialect)
                for (let part of dialect.split(" ")) {
                    let id = values.indexOf(part);
                    if (id >= 0)
                        flags[id] = true;
                }
            let disabled = null;
            for (let i = 0; i < values.length; i++)
                if (!flags[i]) {
                    for (let j = this.dialects[values[i]], id; (id = this.data[j++]) != 65535 /* Seq.End */;)
                        (disabled || (disabled = new Uint8Array(this.maxTerm + 1)))[id] = 1;
                }
            return new Dialect(dialect, flags, disabled);
        }
        /**
        Used by the output of the parser generator. Not available to
        user code. @hide
        */
        static deserialize(spec) {
            return new LRParser(spec);
        }
    }
    function pair(data, off) { return data[off] | (data[off + 1] << 16); }
    function findFinished(stacks) {
        let best = null;
        for (let stack of stacks) {
            let stopped = stack.p.stoppedAt;
            if ((stack.pos == stack.p.stream.end || stopped != null && stack.pos > stopped) &&
                stack.p.parser.stateFlag(stack.state, 2 /* StateFlag.Accepting */) &&
                (!best || best.score < stack.score))
                best = stack;
        }
        return best;
    }
    function getSpecializer(spec) {
        if (spec.external) {
            let mask = spec.extend ? 1 /* Specialize.Extend */ : 0 /* Specialize.Specialize */;
            return (value, stack) => (spec.external(value, stack) << 1) | mask;
        }
        return spec.get;
    }

    let nextTagID = 0;
    /**
    Highlighting tags are markers that denote a highlighting category.
    They are [associated](#highlight.styleTags) with parts of a syntax
    tree by a language mode, and then mapped to an actual CSS style by
    a [highlighter](#highlight.Highlighter).

    Because syntax tree node types and highlight styles have to be
    able to talk the same language, CodeMirror uses a mostly _closed_
    [vocabulary](#highlight.tags) of syntax tags (as opposed to
    traditional open string-based systems, which make it hard for
    highlighting themes to cover all the tokens produced by the
    various languages).

    It _is_ possible to [define](#highlight.Tag^define) your own
    highlighting tags for system-internal use (where you control both
    the language package and the highlighter), but such tags will not
    be picked up by regular highlighters (though you can derive them
    from standard tags to allow highlighters to fall back to those).
    */
    class Tag {
        /**
        @internal
        */
        constructor(
        /**
        The optional name of the base tag @internal
        */
        name,
        /**
        The set of this tag and all its parent tags, starting with
        this one itself and sorted in order of decreasing specificity.
        */
        set,
        /**
        The base unmodified tag that this one is based on, if it's
        modified @internal
        */
        base,
        /**
        The modifiers applied to this.base @internal
        */
        modified) {
            this.name = name;
            this.set = set;
            this.base = base;
            this.modified = modified;
            /**
            @internal
            */
            this.id = nextTagID++;
        }
        toString() {
            let { name } = this;
            for (let mod of this.modified)
                if (mod.name)
                    name = `${mod.name}(${name})`;
            return name;
        }
        static define(nameOrParent, parent) {
            let name = typeof nameOrParent == "string" ? nameOrParent : "?";
            if (nameOrParent instanceof Tag)
                parent = nameOrParent;
            if (parent === null || parent === void 0 ? void 0 : parent.base)
                throw new Error("Can not derive from a modified tag");
            let tag = new Tag(name, [], null, []);
            tag.set.push(tag);
            if (parent)
                for (let t of parent.set)
                    tag.set.push(t);
            return tag;
        }
        /**
        Define a tag _modifier_, which is a function that, given a tag,
        will return a tag that is a subtag of the original. Applying the
        same modifier to a twice tag will return the same value (`m1(t1)
        == m1(t1)`) and applying multiple modifiers will, regardless or
        order, produce the same tag (`m1(m2(t1)) == m2(m1(t1))`).

        When multiple modifiers are applied to a given base tag, each
        smaller set of modifiers is registered as a parent, so that for
        example `m1(m2(m3(t1)))` is a subtype of `m1(m2(t1))`,
        `m1(m3(t1)`, and so on.
        */
        static defineModifier(name) {
            let mod = new Modifier(name);
            return (tag) => {
                if (tag.modified.indexOf(mod) > -1)
                    return tag;
                return Modifier.get(tag.base || tag, tag.modified.concat(mod).sort((a, b) => a.id - b.id));
            };
        }
    }
    let nextModifierID = 0;
    class Modifier {
        constructor(name) {
            this.name = name;
            this.instances = [];
            this.id = nextModifierID++;
        }
        static get(base, mods) {
            if (!mods.length)
                return base;
            let exists = mods[0].instances.find(t => t.base == base && sameArray$1(mods, t.modified));
            if (exists)
                return exists;
            let set = [], tag = new Tag(base.name, set, base, mods);
            for (let m of mods)
                m.instances.push(tag);
            let configs = powerSet(mods);
            for (let parent of base.set)
                if (!parent.modified.length)
                    for (let config of configs)
                        set.push(Modifier.get(parent, config));
            return tag;
        }
    }
    function sameArray$1(a, b) {
        return a.length == b.length && a.every((x, i) => x == b[i]);
    }
    function powerSet(array) {
        let sets = [[]];
        for (let i = 0; i < array.length; i++) {
            for (let j = 0, e = sets.length; j < e; j++) {
                sets.push(sets[j].concat(array[i]));
            }
        }
        return sets.sort((a, b) => b.length - a.length);
    }
    /**
    This function is used to add a set of tags to a language syntax
    via [`NodeSet.extend`](#common.NodeSet.extend) or
    [`LRParser.configure`](#lr.LRParser.configure).

    The argument object maps node selectors to [highlighting
    tags](#highlight.Tag) or arrays of tags.

    Node selectors may hold one or more (space-separated) node paths.
    Such a path can be a [node name](#common.NodeType.name), or
    multiple node names (or `*` wildcards) separated by slash
    characters, as in `"Block/Declaration/VariableName"`. Such a path
    matches the final node but only if its direct parent nodes are the
    other nodes mentioned. A `*` in such a path matches any parent,
    but only a single level—wildcards that match multiple parents
    aren't supported, both for efficiency reasons and because Lezer
    trees make it rather hard to reason about what they would match.)

    A path can be ended with `/...` to indicate that the tag assigned
    to the node should also apply to all child nodes, even if they
    match their own style (by default, only the innermost style is
    used).

    When a path ends in `!`, as in `Attribute!`, no further matching
    happens for the node's child nodes, and the entire node gets the
    given style.

    In this notation, node names that contain `/`, `!`, `*`, or `...`
    must be quoted as JSON strings.

    For example:

    ```javascript
    parser.withProps(
      styleTags({
        // Style Number and BigNumber nodes
        "Number BigNumber": tags.number,
        // Style Escape nodes whose parent is String
        "String/Escape": tags.escape,
        // Style anything inside Attributes nodes
        "Attributes!": tags.meta,
        // Add a style to all content inside Italic nodes
        "Italic/...": tags.emphasis,
        // Style InvalidString nodes as both `string` and `invalid`
        "InvalidString": [tags.string, tags.invalid],
        // Style the node named "/" as punctuation
        '"/"': tags.punctuation
      })
    )
    ```
    */
    function styleTags(spec) {
        let byName = Object.create(null);
        for (let prop in spec) {
            let tags = spec[prop];
            if (!Array.isArray(tags))
                tags = [tags];
            for (let part of prop.split(" "))
                if (part) {
                    let pieces = [], mode = 2 /* Mode.Normal */, rest = part;
                    for (let pos = 0;;) {
                        if (rest == "..." && pos > 0 && pos + 3 == part.length) {
                            mode = 1 /* Mode.Inherit */;
                            break;
                        }
                        let m = /^"(?:[^"\\]|\\.)*?"|[^\/!]+/.exec(rest);
                        if (!m)
                            throw new RangeError("Invalid path: " + part);
                        pieces.push(m[0] == "*" ? "" : m[0][0] == '"' ? JSON.parse(m[0]) : m[0]);
                        pos += m[0].length;
                        if (pos == part.length)
                            break;
                        let next = part[pos++];
                        if (pos == part.length && next == "!") {
                            mode = 0 /* Mode.Opaque */;
                            break;
                        }
                        if (next != "/")
                            throw new RangeError("Invalid path: " + part);
                        rest = part.slice(pos);
                    }
                    let last = pieces.length - 1, inner = pieces[last];
                    if (!inner)
                        throw new RangeError("Invalid path: " + part);
                    let rule = new Rule(tags, mode, last > 0 ? pieces.slice(0, last) : null);
                    byName[inner] = rule.sort(byName[inner]);
                }
        }
        return ruleNodeProp.add(byName);
    }
    const ruleNodeProp = new NodeProp();
    class Rule {
        constructor(tags, mode, context, next) {
            this.tags = tags;
            this.mode = mode;
            this.context = context;
            this.next = next;
        }
        get opaque() { return this.mode == 0 /* Mode.Opaque */; }
        get inherit() { return this.mode == 1 /* Mode.Inherit */; }
        sort(other) {
            if (!other || other.depth < this.depth) {
                this.next = other;
                return this;
            }
            other.next = this.sort(other.next);
            return other;
        }
        get depth() { return this.context ? this.context.length : 0; }
    }
    Rule.empty = new Rule([], 2 /* Mode.Normal */, null);
    /**
    Define a [highlighter](#highlight.Highlighter) from an array of
    tag/class pairs. Classes associated with more specific tags will
    take precedence.
    */
    function tagHighlighter(tags, options) {
        let map = Object.create(null);
        for (let style of tags) {
            if (!Array.isArray(style.tag))
                map[style.tag.id] = style.class;
            else
                for (let tag of style.tag)
                    map[tag.id] = style.class;
        }
        let { scope, all = null } = options || {};
        return {
            style: (tags) => {
                let cls = all;
                for (let tag of tags) {
                    for (let sub of tag.set) {
                        let tagClass = map[sub.id];
                        if (tagClass) {
                            cls = cls ? cls + " " + tagClass : tagClass;
                            break;
                        }
                    }
                }
                return cls;
            },
            scope
        };
    }
    function highlightTags(highlighters, tags) {
        let result = null;
        for (let highlighter of highlighters) {
            let value = highlighter.style(tags);
            if (value)
                result = result ? result + " " + value : value;
        }
        return result;
    }
    /**
    Highlight the given [tree](#common.Tree) with the given
    [highlighter](#highlight.Highlighter). Often, the higher-level
    [`highlightCode`](#highlight.highlightCode) function is easier to
    use.
    */
    function highlightTree(tree, highlighter,
    /**
    Assign styling to a region of the text. Will be called, in order
    of position, for any ranges where more than zero classes apply.
    `classes` is a space separated string of CSS classes.
    */
    putStyle,
    /**
    The start of the range to highlight.
    */
    from = 0,
    /**
    The end of the range.
    */
    to = tree.length) {
        let builder = new HighlightBuilder(from, Array.isArray(highlighter) ? highlighter : [highlighter], putStyle);
        builder.highlightRange(tree.cursor(), from, to, "", builder.highlighters);
        builder.flush(to);
    }
    class HighlightBuilder {
        constructor(at, highlighters, span) {
            this.at = at;
            this.highlighters = highlighters;
            this.span = span;
            this.class = "";
        }
        startSpan(at, cls) {
            if (cls != this.class) {
                this.flush(at);
                if (at > this.at)
                    this.at = at;
                this.class = cls;
            }
        }
        flush(to) {
            if (to > this.at && this.class)
                this.span(this.at, to, this.class);
        }
        highlightRange(cursor, from, to, inheritedClass, highlighters) {
            let { type, from: start, to: end } = cursor;
            if (start >= to || end <= from)
                return;
            if (type.isTop)
                highlighters = this.highlighters.filter(h => !h.scope || h.scope(type));
            let cls = inheritedClass;
            let rule = getStyleTags(cursor) || Rule.empty;
            let tagCls = highlightTags(highlighters, rule.tags);
            if (tagCls) {
                if (cls)
                    cls += " ";
                cls += tagCls;
                if (rule.mode == 1 /* Mode.Inherit */)
                    inheritedClass += (inheritedClass ? " " : "") + tagCls;
            }
            this.startSpan(Math.max(from, start), cls);
            if (rule.opaque)
                return;
            let mounted = cursor.tree && cursor.tree.prop(NodeProp.mounted);
            if (mounted && mounted.overlay) {
                let inner = cursor.node.enter(mounted.overlay[0].from + start, 1);
                let innerHighlighters = this.highlighters.filter(h => !h.scope || h.scope(mounted.tree.type));
                let hasChild = cursor.firstChild();
                for (let i = 0, pos = start;; i++) {
                    let next = i < mounted.overlay.length ? mounted.overlay[i] : null;
                    let nextPos = next ? next.from + start : end;
                    let rangeFrom = Math.max(from, pos), rangeTo = Math.min(to, nextPos);
                    if (rangeFrom < rangeTo && hasChild) {
                        while (cursor.from < rangeTo) {
                            this.highlightRange(cursor, rangeFrom, rangeTo, inheritedClass, highlighters);
                            this.startSpan(Math.min(rangeTo, cursor.to), cls);
                            if (cursor.to >= nextPos || !cursor.nextSibling())
                                break;
                        }
                    }
                    if (!next || nextPos > to)
                        break;
                    pos = next.to + start;
                    if (pos > from) {
                        this.highlightRange(inner.cursor(), Math.max(from, next.from + start), Math.min(to, pos), "", innerHighlighters);
                        this.startSpan(Math.min(to, pos), cls);
                    }
                }
                if (hasChild)
                    cursor.parent();
            }
            else if (cursor.firstChild()) {
                if (mounted)
                    inheritedClass = "";
                do {
                    if (cursor.to <= from)
                        continue;
                    if (cursor.from >= to)
                        break;
                    this.highlightRange(cursor, from, to, inheritedClass, highlighters);
                    this.startSpan(Math.min(to, cursor.to), cls);
                } while (cursor.nextSibling());
                cursor.parent();
            }
        }
    }
    /**
    Match a syntax node's [highlight rules](#highlight.styleTags). If
    there's a match, return its set of tags, and whether it is
    opaque (uses a `!`) or applies to all child nodes (`/...`).
    */
    function getStyleTags(node) {
        let rule = node.type.prop(ruleNodeProp);
        while (rule && rule.context && !node.matchContext(rule.context))
            rule = rule.next;
        return rule || null;
    }
    const t = Tag.define;
    const comment = t(), name = t(), typeName = t(name), propertyName = t(name), literal = t(), string = t(literal), number = t(literal), content = t(), heading = t(content), keyword = t(), operator = t(), punctuation = t(), bracket = t(punctuation), meta = t();
    /**
    The default set of highlighting [tags](#highlight.Tag).

    This collection is heavily biased towards programming languages,
    and necessarily incomplete. A full ontology of syntactic
    constructs would fill a stack of books, and be impractical to
    write themes for. So try to make do with this set. If all else
    fails, [open an
    issue](https://github.com/codemirror/codemirror.next) to propose a
    new tag, or [define](#highlight.Tag^define) a local custom tag for
    your use case.

    Note that it is not obligatory to always attach the most specific
    tag possible to an element—if your grammar can't easily
    distinguish a certain type of element (such as a local variable),
    it is okay to style it as its more general variant (a variable).

    For tags that extend some parent tag, the documentation links to
    the parent.
    */
    const tags$1 = {
        /**
        A comment.
        */
        comment,
        /**
        A line [comment](#highlight.tags.comment).
        */
        lineComment: t(comment),
        /**
        A block [comment](#highlight.tags.comment).
        */
        blockComment: t(comment),
        /**
        A documentation [comment](#highlight.tags.comment).
        */
        docComment: t(comment),
        /**
        Any kind of identifier.
        */
        name,
        /**
        The [name](#highlight.tags.name) of a variable.
        */
        variableName: t(name),
        /**
        A type [name](#highlight.tags.name).
        */
        typeName: typeName,
        /**
        A tag name (subtag of [`typeName`](#highlight.tags.typeName)).
        */
        tagName: t(typeName),
        /**
        A property or field [name](#highlight.tags.name).
        */
        propertyName: propertyName,
        /**
        An attribute name (subtag of [`propertyName`](#highlight.tags.propertyName)).
        */
        attributeName: t(propertyName),
        /**
        The [name](#highlight.tags.name) of a class.
        */
        className: t(name),
        /**
        A label [name](#highlight.tags.name).
        */
        labelName: t(name),
        /**
        A namespace [name](#highlight.tags.name).
        */
        namespace: t(name),
        /**
        The [name](#highlight.tags.name) of a macro.
        */
        macroName: t(name),
        /**
        A literal value.
        */
        literal,
        /**
        A string [literal](#highlight.tags.literal).
        */
        string,
        /**
        A documentation [string](#highlight.tags.string).
        */
        docString: t(string),
        /**
        A character literal (subtag of [string](#highlight.tags.string)).
        */
        character: t(string),
        /**
        An attribute value (subtag of [string](#highlight.tags.string)).
        */
        attributeValue: t(string),
        /**
        A number [literal](#highlight.tags.literal).
        */
        number,
        /**
        An integer [number](#highlight.tags.number) literal.
        */
        integer: t(number),
        /**
        A floating-point [number](#highlight.tags.number) literal.
        */
        float: t(number),
        /**
        A boolean [literal](#highlight.tags.literal).
        */
        bool: t(literal),
        /**
        Regular expression [literal](#highlight.tags.literal).
        */
        regexp: t(literal),
        /**
        An escape [literal](#highlight.tags.literal), for example a
        backslash escape in a string.
        */
        escape: t(literal),
        /**
        A color [literal](#highlight.tags.literal).
        */
        color: t(literal),
        /**
        A URL [literal](#highlight.tags.literal).
        */
        url: t(literal),
        /**
        A language keyword.
        */
        keyword,
        /**
        The [keyword](#highlight.tags.keyword) for the self or this
        object.
        */
        self: t(keyword),
        /**
        The [keyword](#highlight.tags.keyword) for null.
        */
        null: t(keyword),
        /**
        A [keyword](#highlight.tags.keyword) denoting some atomic value.
        */
        atom: t(keyword),
        /**
        A [keyword](#highlight.tags.keyword) that represents a unit.
        */
        unit: t(keyword),
        /**
        A modifier [keyword](#highlight.tags.keyword).
        */
        modifier: t(keyword),
        /**
        A [keyword](#highlight.tags.keyword) that acts as an operator.
        */
        operatorKeyword: t(keyword),
        /**
        A control-flow related [keyword](#highlight.tags.keyword).
        */
        controlKeyword: t(keyword),
        /**
        A [keyword](#highlight.tags.keyword) that defines something.
        */
        definitionKeyword: t(keyword),
        /**
        A [keyword](#highlight.tags.keyword) related to defining or
        interfacing with modules.
        */
        moduleKeyword: t(keyword),
        /**
        An operator.
        */
        operator,
        /**
        An [operator](#highlight.tags.operator) that dereferences something.
        */
        derefOperator: t(operator),
        /**
        Arithmetic-related [operator](#highlight.tags.operator).
        */
        arithmeticOperator: t(operator),
        /**
        Logical [operator](#highlight.tags.operator).
        */
        logicOperator: t(operator),
        /**
        Bit [operator](#highlight.tags.operator).
        */
        bitwiseOperator: t(operator),
        /**
        Comparison [operator](#highlight.tags.operator).
        */
        compareOperator: t(operator),
        /**
        [Operator](#highlight.tags.operator) that updates its operand.
        */
        updateOperator: t(operator),
        /**
        [Operator](#highlight.tags.operator) that defines something.
        */
        definitionOperator: t(operator),
        /**
        Type-related [operator](#highlight.tags.operator).
        */
        typeOperator: t(operator),
        /**
        Control-flow [operator](#highlight.tags.operator).
        */
        controlOperator: t(operator),
        /**
        Program or markup punctuation.
        */
        punctuation,
        /**
        [Punctuation](#highlight.tags.punctuation) that separates
        things.
        */
        separator: t(punctuation),
        /**
        Bracket-style [punctuation](#highlight.tags.punctuation).
        */
        bracket,
        /**
        Angle [brackets](#highlight.tags.bracket) (usually `<` and `>`
        tokens).
        */
        angleBracket: t(bracket),
        /**
        Square [brackets](#highlight.tags.bracket) (usually `[` and `]`
        tokens).
        */
        squareBracket: t(bracket),
        /**
        Parentheses (usually `(` and `)` tokens). Subtag of
        [bracket](#highlight.tags.bracket).
        */
        paren: t(bracket),
        /**
        Braces (usually `{` and `}` tokens). Subtag of
        [bracket](#highlight.tags.bracket).
        */
        brace: t(bracket),
        /**
        Content, for example plain text in XML or markup documents.
        */
        content,
        /**
        [Content](#highlight.tags.content) that represents a heading.
        */
        heading,
        /**
        A level 1 [heading](#highlight.tags.heading).
        */
        heading1: t(heading),
        /**
        A level 2 [heading](#highlight.tags.heading).
        */
        heading2: t(heading),
        /**
        A level 3 [heading](#highlight.tags.heading).
        */
        heading3: t(heading),
        /**
        A level 4 [heading](#highlight.tags.heading).
        */
        heading4: t(heading),
        /**
        A level 5 [heading](#highlight.tags.heading).
        */
        heading5: t(heading),
        /**
        A level 6 [heading](#highlight.tags.heading).
        */
        heading6: t(heading),
        /**
        A prose [content](#highlight.tags.content) separator (such as a horizontal rule).
        */
        contentSeparator: t(content),
        /**
        [Content](#highlight.tags.content) that represents a list.
        */
        list: t(content),
        /**
        [Content](#highlight.tags.content) that represents a quote.
        */
        quote: t(content),
        /**
        [Content](#highlight.tags.content) that is emphasized.
        */
        emphasis: t(content),
        /**
        [Content](#highlight.tags.content) that is styled strong.
        */
        strong: t(content),
        /**
        [Content](#highlight.tags.content) that is part of a link.
        */
        link: t(content),
        /**
        [Content](#highlight.tags.content) that is styled as code or
        monospace.
        */
        monospace: t(content),
        /**
        [Content](#highlight.tags.content) that has a strike-through
        style.
        */
        strikethrough: t(content),
        /**
        Inserted text in a change-tracking format.
        */
        inserted: t(),
        /**
        Deleted text.
        */
        deleted: t(),
        /**
        Changed text.
        */
        changed: t(),
        /**
        An invalid or unsyntactic element.
        */
        invalid: t(),
        /**
        Metadata or meta-instruction.
        */
        meta,
        /**
        [Metadata](#highlight.tags.meta) that applies to the entire
        document.
        */
        documentMeta: t(meta),
        /**
        [Metadata](#highlight.tags.meta) that annotates or adds
        attributes to a given syntactic element.
        */
        annotation: t(meta),
        /**
        Processing instruction or preprocessor directive. Subtag of
        [meta](#highlight.tags.meta).
        */
        processingInstruction: t(meta),
        /**
        [Modifier](#highlight.Tag^defineModifier) that indicates that a
        given element is being defined. Expected to be used with the
        various [name](#highlight.tags.name) tags.
        */
        definition: Tag.defineModifier("definition"),
        /**
        [Modifier](#highlight.Tag^defineModifier) that indicates that
        something is constant. Mostly expected to be used with
        [variable names](#highlight.tags.variableName).
        */
        constant: Tag.defineModifier("constant"),
        /**
        [Modifier](#highlight.Tag^defineModifier) used to indicate that
        a [variable](#highlight.tags.variableName) or [property
        name](#highlight.tags.propertyName) is being called or defined
        as a function.
        */
        function: Tag.defineModifier("function"),
        /**
        [Modifier](#highlight.Tag^defineModifier) that can be applied to
        [names](#highlight.tags.name) to indicate that they belong to
        the language's standard environment.
        */
        standard: Tag.defineModifier("standard"),
        /**
        [Modifier](#highlight.Tag^defineModifier) that indicates a given
        [names](#highlight.tags.name) is local to some scope.
        */
        local: Tag.defineModifier("local"),
        /**
        A generic variant [modifier](#highlight.Tag^defineModifier) that
        can be used to tag language-specific alternative variants of
        some common tag. It is recommended for themes to define special
        forms of at least the [string](#highlight.tags.string) and
        [variable name](#highlight.tags.variableName) tags, since those
        come up a lot.
        */
        special: Tag.defineModifier("special")
    };
    for (let name in tags$1) {
        let val = tags$1[name];
        if (val instanceof Tag)
            val.name = name;
    }
    /**
    This is a highlighter that adds stable, predictable classes to
    tokens, for styling with external CSS.

    The following tags are mapped to their name prefixed with `"tok-"`
    (for example `"tok-comment"`):

    * [`link`](#highlight.tags.link)
    * [`heading`](#highlight.tags.heading)
    * [`emphasis`](#highlight.tags.emphasis)
    * [`strong`](#highlight.tags.strong)
    * [`keyword`](#highlight.tags.keyword)
    * [`atom`](#highlight.tags.atom)
    * [`bool`](#highlight.tags.bool)
    * [`url`](#highlight.tags.url)
    * [`labelName`](#highlight.tags.labelName)
    * [`inserted`](#highlight.tags.inserted)
    * [`deleted`](#highlight.tags.deleted)
    * [`literal`](#highlight.tags.literal)
    * [`string`](#highlight.tags.string)
    * [`number`](#highlight.tags.number)
    * [`variableName`](#highlight.tags.variableName)
    * [`typeName`](#highlight.tags.typeName)
    * [`namespace`](#highlight.tags.namespace)
    * [`className`](#highlight.tags.className)
    * [`macroName`](#highlight.tags.macroName)
    * [`propertyName`](#highlight.tags.propertyName)
    * [`operator`](#highlight.tags.operator)
    * [`comment`](#highlight.tags.comment)
    * [`meta`](#highlight.tags.meta)
    * [`punctuation`](#highlight.tags.punctuation)
    * [`invalid`](#highlight.tags.invalid)

    In addition, these mappings are provided:

    * [`regexp`](#highlight.tags.regexp),
      [`escape`](#highlight.tags.escape), and
      [`special`](#highlight.tags.special)[`(string)`](#highlight.tags.string)
      are mapped to `"tok-string2"`
    * [`special`](#highlight.tags.special)[`(variableName)`](#highlight.tags.variableName)
      to `"tok-variableName2"`
    * [`local`](#highlight.tags.local)[`(variableName)`](#highlight.tags.variableName)
      to `"tok-variableName tok-local"`
    * [`definition`](#highlight.tags.definition)[`(variableName)`](#highlight.tags.variableName)
      to `"tok-variableName tok-definition"`
    * [`definition`](#highlight.tags.definition)[`(propertyName)`](#highlight.tags.propertyName)
      to `"tok-propertyName tok-definition"`
    */
    tagHighlighter([
        { tag: tags$1.link, class: "tok-link" },
        { tag: tags$1.heading, class: "tok-heading" },
        { tag: tags$1.emphasis, class: "tok-emphasis" },
        { tag: tags$1.strong, class: "tok-strong" },
        { tag: tags$1.keyword, class: "tok-keyword" },
        { tag: tags$1.atom, class: "tok-atom" },
        { tag: tags$1.bool, class: "tok-bool" },
        { tag: tags$1.url, class: "tok-url" },
        { tag: tags$1.labelName, class: "tok-labelName" },
        { tag: tags$1.inserted, class: "tok-inserted" },
        { tag: tags$1.deleted, class: "tok-deleted" },
        { tag: tags$1.literal, class: "tok-literal" },
        { tag: tags$1.string, class: "tok-string" },
        { tag: tags$1.number, class: "tok-number" },
        { tag: [tags$1.regexp, tags$1.escape, tags$1.special(tags$1.string)], class: "tok-string2" },
        { tag: tags$1.variableName, class: "tok-variableName" },
        { tag: tags$1.local(tags$1.variableName), class: "tok-variableName tok-local" },
        { tag: tags$1.definition(tags$1.variableName), class: "tok-variableName tok-definition" },
        { tag: tags$1.special(tags$1.variableName), class: "tok-variableName2" },
        { tag: tags$1.definition(tags$1.propertyName), class: "tok-propertyName tok-definition" },
        { tag: tags$1.typeName, class: "tok-typeName" },
        { tag: tags$1.namespace, class: "tok-namespace" },
        { tag: tags$1.className, class: "tok-className" },
        { tag: tags$1.macroName, class: "tok-macroName" },
        { tag: tags$1.propertyName, class: "tok-propertyName" },
        { tag: tags$1.operator, class: "tok-operator" },
        { tag: tags$1.comment, class: "tok-comment" },
        { tag: tags$1.meta, class: "tok-meta" },
        { tag: tags$1.invalid, class: "tok-invalid" },
        { tag: tags$1.punctuation, class: "tok-punctuation" }
    ]);

    // This file was generated by lezer-generator. You probably shouldn't edit it.
    const noSemi = 314,
      noSemiType = 315,
      incdec = 1,
      incdecPrefix = 2,
      questionDot = 3,
      JSXStartTag = 4,
      insertSemi = 316,
      spaces = 318,
      newline$3 = 319,
      LineComment$1 = 5,
      BlockComment$1 = 6,
      Dialect_jsx = 0;

    /* Hand-written tokenizers for JavaScript tokens that can't be
       expressed by lezer's built-in tokenizer. */

    const space$2 = [9, 10, 11, 12, 13, 32, 133, 160, 5760, 8192, 8193, 8194, 8195, 8196, 8197, 8198, 8199, 8200,
                   8201, 8202, 8232, 8233, 8239, 8287, 12288];

    const braceR = 125, semicolon = 59, slash$1 = 47, star = 42, plus = 43, minus = 45, lt$3 = 60, comma = 44,
          question$1 = 63, dot$1 = 46, bracketL$1 = 91;

    const trackNewline = new ContextTracker({
      start: false,
      shift(context, term) {
        return term == LineComment$1 || term == BlockComment$1 || term == spaces ? context : term == newline$3
      },
      strict: false
    });

    const insertSemicolon = new ExternalTokenizer((input, stack) => {
      let {next} = input;
      if (next == braceR || next == -1 || stack.context)
        input.acceptToken(insertSemi);
    }, {contextual: true, fallback: true});

    const noSemicolon = new ExternalTokenizer((input, stack) => {
      let {next} = input, after;
      if (space$2.indexOf(next) > -1) return
      if (next == slash$1 && ((after = input.peek(1)) == slash$1 || after == star)) return
      if (next != braceR && next != semicolon && next != -1 && !stack.context)
        input.acceptToken(noSemi);
    }, {contextual: true});

    const noSemicolonType = new ExternalTokenizer((input, stack) => {
      if (input.next == bracketL$1 && !stack.context) input.acceptToken(noSemiType);
    }, {contextual: true});

    const operatorToken = new ExternalTokenizer((input, stack) => {
      let {next} = input;
      if (next == plus || next == minus) {
        input.advance();
        if (next == input.next) {
          input.advance();
          let mayPostfix = !stack.context && stack.canShift(incdec);
          input.acceptToken(mayPostfix ? incdec : incdecPrefix);
        }
      } else if (next == question$1 && input.peek(1) == dot$1) {
        input.advance(); input.advance();
        if (input.next < 48 || input.next > 57) // No digit after
          input.acceptToken(questionDot);
      }
    }, {contextual: true});

    function identifierChar(ch, start) {
      return ch >= 65 && ch <= 90 || ch >= 97 && ch <= 122 || ch == 95 || ch >= 192 ||
        !start && ch >= 48 && ch <= 57
    }

    const jsx = new ExternalTokenizer((input, stack) => {
      if (input.next != lt$3 || !stack.dialectEnabled(Dialect_jsx)) return
      input.advance();
      if (input.next == slash$1) return
      // Scan for an identifier followed by a comma or 'extends', don't
      // treat this as a start tag if present.
      let back = 0;
      while (space$2.indexOf(input.next) > -1) { input.advance(); back++; }
      if (identifierChar(input.next, true)) {
        input.advance();
        back++;
        while (identifierChar(input.next, false)) { input.advance(); back++; }
        while (space$2.indexOf(input.next) > -1) { input.advance(); back++; }
        if (input.next == comma) return
        for (let i = 0;; i++) {
          if (i == 7) {
            if (!identifierChar(input.next, true)) return
            break
          }
          if (input.next != "extends".charCodeAt(i)) break
          input.advance();
          back++;
        }
      }
      input.acceptToken(JSXStartTag, -back);
    });

    const jsHighlight = styleTags({
      "get set async static": tags$1.modifier,
      "for while do if else switch try catch finally return throw break continue default case": tags$1.controlKeyword,
      "in of await yield void typeof delete instanceof": tags$1.operatorKeyword,
      "let var const using function class extends": tags$1.definitionKeyword,
      "import export from": tags$1.moduleKeyword,
      "with debugger as new": tags$1.keyword,
      TemplateString: tags$1.special(tags$1.string),
      super: tags$1.atom,
      BooleanLiteral: tags$1.bool,
      this: tags$1.self,
      null: tags$1.null,
      Star: tags$1.modifier,
      VariableName: tags$1.variableName,
      "CallExpression/VariableName TaggedTemplateExpression/VariableName": tags$1.function(tags$1.variableName),
      VariableDefinition: tags$1.definition(tags$1.variableName),
      Label: tags$1.labelName,
      PropertyName: tags$1.propertyName,
      PrivatePropertyName: tags$1.special(tags$1.propertyName),
      "CallExpression/MemberExpression/PropertyName": tags$1.function(tags$1.propertyName),
      "FunctionDeclaration/VariableDefinition": tags$1.function(tags$1.definition(tags$1.variableName)),
      "ClassDeclaration/VariableDefinition": tags$1.definition(tags$1.className),
      "NewExpression/VariableName": tags$1.className,
      PropertyDefinition: tags$1.definition(tags$1.propertyName),
      PrivatePropertyDefinition: tags$1.definition(tags$1.special(tags$1.propertyName)),
      UpdateOp: tags$1.updateOperator,
      "LineComment Hashbang": tags$1.lineComment,
      BlockComment: tags$1.blockComment,
      Number: tags$1.number,
      String: tags$1.string,
      Escape: tags$1.escape,
      ArithOp: tags$1.arithmeticOperator,
      LogicOp: tags$1.logicOperator,
      BitOp: tags$1.bitwiseOperator,
      CompareOp: tags$1.compareOperator,
      RegExp: tags$1.regexp,
      Equals: tags$1.definitionOperator,
      Arrow: tags$1.function(tags$1.punctuation),
      ": Spread": tags$1.punctuation,
      "( )": tags$1.paren,
      "[ ]": tags$1.squareBracket,
      "{ }": tags$1.brace,
      "InterpolationStart InterpolationEnd": tags$1.special(tags$1.brace),
      ".": tags$1.derefOperator,
      ", ;": tags$1.separator,
      "@": tags$1.meta,

      TypeName: tags$1.typeName,
      TypeDefinition: tags$1.definition(tags$1.typeName),
      "type enum interface implements namespace module declare": tags$1.definitionKeyword,
      "abstract global Privacy readonly override": tags$1.modifier,
      "is keyof unique infer asserts": tags$1.operatorKeyword,

      JSXAttributeValue: tags$1.attributeValue,
      JSXText: tags$1.content,
      "JSXStartTag JSXStartCloseTag JSXSelfCloseEndTag JSXEndTag": tags$1.angleBracket,
      "JSXIdentifier JSXNameSpacedName": tags$1.tagName,
      "JSXAttribute/JSXIdentifier JSXAttribute/JSXNameSpacedName": tags$1.attributeName,
      "JSXBuiltin/JSXIdentifier": tags$1.standard(tags$1.tagName)
    });

    // This file was generated by lezer-generator. You probably shouldn't edit it.
    const spec_identifier$2 = {__proto__:null,export:20, as:25, from:33, default:36, async:41, function:42, const:52, extends:56, this:60, true:68, false:68, null:80, void:84, typeof:88, super:104, new:138, delete:150, yield:159, await:163, class:168, public:231, private:231, protected:231, readonly:233, instanceof:252, satisfies:255, in:256, import:290, keyof:347, unique:351, infer:357, asserts:393, is:395, abstract:415, implements:417, type:419, let:422, var:424, using:427, interface:433, enum:437, namespace:443, module:445, declare:449, global:453, for:472, of:481, while:484, with:488, do:492, if:496, else:498, switch:502, case:508, try:514, catch:518, finally:522, return:526, throw:530, break:534, continue:538, debugger:542};
    const spec_word = {__proto__:null,async:125, get:127, set:129, declare:191, public:193, private:193, protected:193, static:195, abstract:197, override:199, readonly:205, accessor:207, new:399};
    const spec_LessThan = {__proto__:null,"<":189};
    const parser$6 = LRParser.deserialize({
      version: 14,
      states: "$EOQ%TQlOOO%[QlOOO'_QpOOP(lO`OOO*zQ!0MxO'#CiO+RO#tO'#CjO+aO&jO'#CjO+oO#@ItO'#D_O.QQlO'#DeO.bQlO'#DpO%[QlO'#DxO0fQlO'#EQOOQ!0Lf'#EY'#EYO1PQ`O'#EVOOQO'#En'#EnOOQO'#Ij'#IjO1XQ`O'#GrO1dQ`O'#EmO1iQ`O'#EmO3hQ!0MxO'#JpO6[Q!0MxO'#JqO6uQ`O'#F[O6zQ,UO'#FsOOQ!0Lf'#Fe'#FeO7VO7dO'#FeO7eQMhO'#F{O9UQ`O'#FzOOQ!0Lf'#Jq'#JqOOQ!0Lb'#Jp'#JpO9ZQ`O'#GvOOQ['#K]'#K]O9fQ`O'#IWO9kQ!0LrO'#IXOOQ['#J^'#J^OOQ['#I]'#I]Q`QlOOQ`QlOOO9sQ!L^O'#DtO9zQlO'#D|O:RQlO'#EOO9aQ`O'#GrO:YQMhO'#CoO:hQ`O'#ElO:sQ`O'#EwO:xQMhO'#FdO;gQ`O'#GrOOQO'#K^'#K^O;lQ`O'#K^O;zQ`O'#GzO;zQ`O'#G{O;zQ`O'#G}O9aQ`O'#HQO<qQ`O'#HTO>YQ`O'#CeO>jQ`O'#HaO>rQ`O'#HgO>rQ`O'#HiO`QlO'#HkO>rQ`O'#HmO>rQ`O'#HpO>wQ`O'#HvO>|Q!0LsO'#H|O%[QlO'#IOO?XQ!0LsO'#IQO?dQ!0LsO'#ISO9kQ!0LrO'#IUO?oQ!0MxO'#CiO@qQpO'#DjQOQ`OOO%[QlO'#EOOAXQ`O'#ERO:YQMhO'#ElOAdQ`O'#ElOAoQ!bO'#FdOOQ['#Cg'#CgOOQ!0Lb'#Do'#DoOOQ!0Lb'#Jt'#JtO%[QlO'#JtOOQO'#Jw'#JwOOQO'#If'#IfOBoQpO'#EeOOQ!0Lb'#Ed'#EdOOQ!0Lb'#J{'#J{OCkQ!0MSO'#EeOCuQpO'#EUOOQO'#Jv'#JvODZQpO'#JwOEhQpO'#EUOCuQpO'#EePEuO&2DjO'#CbPOOO)CD{)CD{OOOO'#I^'#I^OFQO#tO,59UOOQ!0Lh,59U,59UOOOO'#I_'#I_OF`O&jO,59UOFnQ!L^O'#DaOOOO'#Ia'#IaOFuO#@ItO,59yOOQ!0Lf,59y,59yOGTQlO'#IbOGhQ`O'#JrOIgQ!fO'#JrO+}QlO'#JrOInQ`O,5:POJUQ`O'#EnOJcQ`O'#KROJnQ`O'#KQOJnQ`O'#KQOJvQ`O,5;[OJ{Q`O'#KPOOQ!0Ln,5:[,5:[OKSQlO,5:[OMQQ!0MxO,5:dOMqQ`O,5:lON[Q!0LrO'#KOONcQ`O'#J}O9ZQ`O'#J}ONwQ`O'#J}O! PQ`O,5;ZO! UQ`O'#J}O!#ZQ!fO'#JqOOQ!0Lh'#Ci'#CiO%[QlO'#EQO!#yQ!fO,5:qOOQS'#Jx'#JxOOQO-E<h-E<hO9aQ`O,5=^O!$aQ`O,5=^O!$fQlO,5;XO!&iQMhO'#EiO!(SQ`O,5;XO!(XQlO'#DwO!(cQpO,5;bO!(kQpO,5;bO%[QlO,5;bOOQ['#FS'#FSOOQ['#FU'#FUO%[QlO,5;cO%[QlO,5;cO%[QlO,5;cO%[QlO,5;cO%[QlO,5;cO%[QlO,5;cO%[QlO,5;cO%[QlO,5;cO%[QlO,5;cO%[QlO,5;cOOQ['#FY'#FYO!(yQlO,5;sOOQ!0Lf,5;x,5;xOOQ!0Lf,5;y,5;yOOQ!0Lf,5;{,5;{O%[QlO'#InO!*|Q!0LrO,5<hO%[QlO,5;cO!&iQMhO,5;cO!+kQMhO,5;cO!-]QMhO'#E[O%[QlO,5;vOOQ!0Lf,5;z,5;zO!-dQ,UO'#FiO!.aQ,UO'#KVO!-{Q,UO'#KVO!.hQ,UO'#KVOOQO'#KV'#KVO!.|Q,UO,5<ROOOW,5<_,5<_O!/_QlO'#FuOOOW'#Im'#ImO7VO7dO,5<PO!/fQ,UO'#FwOOQ!0Lf,5<P,5<PO!0VQ$IUO'#CwOOQ!0Lh'#C{'#C{O!0jO#@ItO'#DPO!1WQMjO,5<dO!1_Q`O,5<gO!2zQ(CWO'#GWO!3XQ`O'#GXO!3^Q`O'#GXO!4|Q(CWO'#G]O!6RQpO'#GaOOQO'#Gm'#GmO!+rQMhO'#GlOOQO'#Go'#GoO!+rQMhO'#GnO!6tQ$IUO'#JjOOQ!0Lh'#Jj'#JjO!7OQ`O'#JiO!7^Q`O'#JhO!7fQ`O'#CuOOQ!0Lh'#Cy'#CyO!7qQ`O'#C{OOQ!0Lh'#DT'#DTOOQ!0Lh'#DV'#DVO1SQ`O'#DXO!+rQMhO'#GOO!+rQMhO'#GQO!7vQ`O'#GSO!7{Q`O'#GTO!3^Q`O'#GZO!+rQMhO'#G`O;zQ`O'#JiO!8QQ`O'#EoO!8oQ`O,5<fOOQ!0Lb'#Cr'#CrO!8wQ`O'#EpO!9qQpO'#EqOOQ!0Lb'#KP'#KPO!9xQ!0LrO'#K_O9kQ!0LrO,5=bO`QlO,5>rOOQ['#Jf'#JfOOQ[,5>s,5>sOOQ[-E<Z-E<ZO!;wQ!0MxO,5:`O!9lQpO,5:^O!>bQ!0MxO,5:hO%[QlO,5:hO!@xQ!0MxO,5:jOOQO,5@x,5@xO!AiQMhO,5=^O!AwQ!0LrO'#JgO9UQ`O'#JgO!BYQ!0LrO,59ZO!BeQpO,59ZO!BmQMhO,59ZO:YQMhO,59ZO!BxQ`O,5;XO!CQQ`O'#H`O!CfQ`O'#KbO%[QlO,5;|O!9lQpO,5<OO!CnQ`O,5=yO!CsQ`O,5=yO!CxQ`O,5=yO9kQ!0LrO,5=yO;zQ`O,5=iOOQO'#Cw'#CwO!DWQpO,5=fO!D`QMhO,5=gO!DkQ`O,5=iO!DpQ!bO,5=lO!DxQ`O'#K^O>wQ`O'#HVO9aQ`O'#HXO!D}Q`O'#HXO:YQMhO'#HZO!ESQ`O'#HZOOQ[,5=o,5=oO!EXQ`O'#H[O!EjQ`O'#CoO!EoQ`O,59PO!EyQ`O,59PO!HOQlO,59POOQ[,59P,59PO!H`Q!0LrO,59PO%[QlO,59PO!JkQlO'#HcOOQ['#Hd'#HdOOQ['#He'#HeO`QlO,5={O!KRQ`O,5={O`QlO,5>RO`QlO,5>TO!KWQ`O,5>VO`QlO,5>XO!K]Q`O,5>[O!KbQlO,5>bOOQ[,5>h,5>hO%[QlO,5>hO9kQ!0LrO,5>jOOQ[,5>l,5>lO# lQ`O,5>lOOQ[,5>n,5>nO# lQ`O,5>nOOQ[,5>p,5>pO#!YQpO'#D]O%[QlO'#JtO#!{QpO'#JtO##VQpO'#DkO##hQpO'#DkO#%yQlO'#DkO#&QQ`O'#JsO#&YQ`O,5:UO#&_Q`O'#ErO#&mQ`O'#KSO#&uQ`O,5;]O#&zQpO'#DkO#'XQpO'#ETOOQ!0Lf,5:m,5:mO%[QlO,5:mO#'`Q`O,5:mO>wQ`O,5;WO!BeQpO,5;WO!BmQMhO,5;WO:YQMhO,5;WO#'hQ`O,5@`O#'mQ07dO,5:qOOQO-E<d-E<dO#(sQ!0MSO,5;POCuQpO,5:pO#(}QpO,5:pOCuQpO,5;PO!BYQ!0LrO,5:pOOQ!0Lb'#Eh'#EhOOQO,5;P,5;PO%[QlO,5;PO#)[Q!0LrO,5;PO#)gQ!0LrO,5;PO!BeQpO,5:pOOQO,5;V,5;VO#)uQ!0LrO,5;PPOOO'#I['#I[P#*ZO&2DjO,58|POOO,58|,58|OOOO-E<[-E<[OOQ!0Lh1G.p1G.pOOOO-E<]-E<]OOOO,59{,59{O#*fQ!bO,59{OOOO-E<_-E<_OOQ!0Lf1G/e1G/eO#*kQ!fO,5>|O+}QlO,5>|OOQO,5?S,5?SO#*uQlO'#IbOOQO-E<`-E<`O#+SQ`O,5@^O#+[Q!fO,5@^O#+cQ`O,5@lOOQ!0Lf1G/k1G/kO%[QlO,5@mO#+kQ`O'#IhOOQO-E<f-E<fO#+cQ`O,5@lOOQ!0Lb1G0v1G0vOOQ!0Ln1G/v1G/vOOQ!0Ln1G0W1G0WO%[QlO,5@jO#,PQ!0LrO,5@jO#,bQ!0LrO,5@jO#,iQ`O,5@iO9ZQ`O,5@iO#,qQ`O,5@iO#-PQ`O'#IkO#,iQ`O,5@iOOQ!0Lb1G0u1G0uO!(cQpO,5:sO!(nQpO,5:sOOQS,5:u,5:uO#-qQdO,5:uO#-yQMhO1G2xO9aQ`O1G2xOOQ!0Lf1G0s1G0sO#.XQ!0MxO1G0sO#/^Q!0MvO,5;TOOQ!0Lh'#GV'#GVO#/zQ!0MzO'#JjO!$fQlO1G0sO#2VQ!fO'#JuO%[QlO'#JuO#2aQ`O,5:cOOQ!0Lh'#D]'#D]OOQ!0Lf1G0|1G0|O%[QlO1G0|OOQ!0Lf1G1e1G1eO#2fQ`O1G0|O#4zQ!0MxO1G0}O#5RQ!0MxO1G0}O#7iQ!0MxO1G0}O#7pQ!0MxO1G0}O#:WQ!0MxO1G0}O#<nQ!0MxO1G0}O#<uQ!0MxO1G0}O#<|Q!0MxO1G0}O#?dQ!0MxO1G0}O#?kQ!0MxO1G0}O#AxQ?MtO'#CiO#CsQ?MtO1G1_O#CzQ?MtO'#JqO#D_Q!0MxO,5?YOOQ!0Lb-E<l-E<lO#FlQ!0MxO1G0}O#GiQ!0MzO1G0}OOQ!0Lf1G0}1G0}O#HlQMjO'#JzO#HvQ`O,5:vO#H{Q!0MxO1G1bO#IoQ,UO,5<VO#IwQ,UO,5<WO#JPQ,UO'#FnO#JhQ`O'#FmOOQO'#KW'#KWOOQO'#Il'#IlO#JmQ,UO1G1mOOQ!0Lf1G1m1G1mOOOW1G1x1G1xO#KOQ?MtO'#JpO#KYQ`O,5<aO!(yQlO,5<aOOOW-E<k-E<kOOQ!0Lf1G1k1G1kO#K_QpO'#KVOOQ!0Lf,5<c,5<cO#KgQpO,5<cO#KlQMhO'#DROOOO'#I`'#I`O#KsO#@ItO,59kOOQ!0Lh,59k,59kO%[QlO1G2OO!7{Q`O'#IpO#LOQ`O,5<yOOQ!0Lh,5<v,5<vO!+rQMhO'#IsO#LlQMjO,5=WO!+rQMhO'#IuO#M_QMjO,5=YO!&iQMhO,5=[OOQO1G2R1G2RO#MiQ!dO'#CrO#M|Q(CWO'#EpO$ RQpO'#GaO$ iQ!dO,5<rO$ pQ`O'#KYO9ZQ`O'#KYO$!OQ`O,5<tO!+rQMhO,5<sO$!TQ`O'#GYO$!fQ`O,5<sO$!kQ!dO'#GVO$!xQ!dO'#KZO$#SQ`O'#KZO!&iQMhO'#KZO$#XQ`O,5<wO$#^QlO'#JtO$#hQpO'#GbO##hQpO'#GbO$#yQ`O'#GfO!3^Q`O'#GjO$$OQ!0LrO'#IrO$$ZQpO,5<{OOQ!0Lp,5<{,5<{O$$bQpO'#GbO$$oQpO'#GcO$%QQpO'#GcO$%VQMjO,5=WO$%gQMjO,5=YOOQ!0Lh,5=],5=]O!+rQMhO,5@TO!+rQMhO,5@TO$%wQ`O'#IwO$&VQ`O,5@SO$&_Q`O,59aOOQ!0Lh,59g,59gO$'UQ$IYO,59sOOQ!0Lh'#Jn'#JnO$'wQMjO,5<jO$(jQMjO,5<lO@iQ`O,5<nOOQ!0Lh,5<o,5<oO$(tQ`O,5<uO$(yQMjO,5<zO$)ZQ`O,5@TO$)iQ`O'#J}O!$fQlO1G2QO$)nQ`O1G2QO9ZQ`O'#KQO9ZQ`O'#ErO%[QlO'#ErO9ZQ`O'#IyO$)sQ!0LrO,5@yOOQ[1G2|1G2|OOQ[1G4^1G4^OOQ!0Lf1G/z1G/zOOQ!0Lf1G/x1G/xO$+uQ!0MxO1G0SOOQ[1G2x1G2xO!&iQMhO1G2xO%[QlO1G2xO#-|Q`O1G2xO$-yQMhO'#EiOOQ!0Lb,5@R,5@RO$.WQ!0LrO,5@ROOQ[1G.u1G.uO!BYQ!0LrO1G.uO!BeQpO1G.uO!BmQMhO1G.uO$.iQ`O1G0sO$.nQ`O'#CiO$.yQ`O'#KcO$/RQ`O,5=zO$/WQ`O'#KcO$/]Q`O'#KcO$/kQ`O'#JPO$/yQ`O,5@|O$0RQ!fO1G1hOOQ!0Lf1G1j1G1jO9aQ`O1G3eO@iQ`O1G3eO$0YQ`O1G3eO$0_Q`O1G3eOOQ[1G3e1G3eO!DkQ`O1G3TO!&iQMhO1G3QO$0dQ`O1G3QOOQ[1G3R1G3RO!&iQMhO1G3RO$0iQ`O1G3RO$0qQpO'#HPOOQ[1G3T1G3TO!5|QpO'#I{O!DpQ!bO1G3WOOQ[1G3W1G3WOOQ[,5=q,5=qO$0yQMhO,5=sO9aQ`O,5=sO$#yQ`O,5=uO9UQ`O,5=uO!BeQpO,5=uO!BmQMhO,5=uO:YQMhO,5=uO$1XQ`O'#KaO$1dQ`O,5=vOOQ[1G.k1G.kO$1iQ!0LrO1G.kO@iQ`O1G.kO$1tQ`O1G.kO9kQ!0LrO1G.kO$3|Q!fO,5AOO$4ZQ`O,5AOO9ZQ`O,5AOO$4fQlO,5=}O$4mQ`O,5=}OOQ[1G3g1G3gO`QlO1G3gOOQ[1G3m1G3mOOQ[1G3o1G3oO>rQ`O1G3qO$4rQlO1G3sO$8vQlO'#HrOOQ[1G3v1G3vO$9TQ`O'#HxO>wQ`O'#HzOOQ[1G3|1G3|O$9]QlO1G3|O9kQ!0LrO1G4SOOQ[1G4U1G4UOOQ!0Lb'#G^'#G^O9kQ!0LrO1G4WO9kQ!0LrO1G4YO$=dQ`O,5@`O!(yQlO,5;^O9ZQ`O,5;^O>wQ`O,5:VO!(yQlO,5:VO!BeQpO,5:VO$=iQ?MtO,5:VOOQO,5;^,5;^O$=sQpO'#IcO$>ZQ`O,5@_OOQ!0Lf1G/p1G/pO$>cQpO'#IiO$>mQ`O,5@nOOQ!0Lb1G0w1G0wO##hQpO,5:VOOQO'#Ie'#IeO$>uQpO,5:oOOQ!0Ln,5:o,5:oO#'cQ`O1G0XOOQ!0Lf1G0X1G0XO%[QlO1G0XOOQ!0Lf1G0r1G0rO>wQ`O1G0rO!BeQpO1G0rO!BmQMhO1G0rOOQ!0Lb1G5z1G5zO!BYQ!0LrO1G0[OOQO1G0k1G0kO%[QlO1G0kO$>|Q!0LrO1G0kO$?XQ!0LrO1G0kO!BeQpO1G0[OCuQpO1G0[O$?gQ!0LrO1G0kOOQO1G0[1G0[O$?{Q!0MxO1G0kPOOO-E<Y-E<YPOOO1G.h1G.hOOOO1G/g1G/gO$@VQ!bO,5<hO$@_Q!fO1G4hOOQO1G4n1G4nO%[QlO,5>|O$@iQ`O1G5xO$@qQ`O1G6WO$@yQ!fO1G6XO9ZQ`O,5?SO$ATQ!0MxO1G6UO%[QlO1G6UO$AeQ!0LrO1G6UO$AvQ`O1G6TO$AvQ`O1G6TO9ZQ`O1G6TO$BOQ`O,5?VO9ZQ`O,5?VOOQO,5?V,5?VO$BdQ`O,5?VO$)iQ`O,5?VOOQO-E<i-E<iOOQS1G0_1G0_OOQS1G0a1G0aO#-tQ`O1G0aOOQ[7+(d7+(dO!&iQMhO7+(dO%[QlO7+(dO$BrQ`O7+(dO$B}QMhO7+(dO$C]Q!0MzO,5=WO$EhQ!0MzO,5=YO$GsQ!0MzO,5=WO$JUQ!0MzO,5=YO$LgQ!0MzO,59sO$NlQ!0MzO,5<jO%!wQ!0MzO,5<lO%%SQ!0MzO,5<zOOQ!0Lf7+&_7+&_O%'eQ!0MxO7+&_O%(XQlO'#IdO%(fQ`O,5@aO%(nQ!fO,5@aOOQ!0Lf1G/}1G/}O%(xQ`O7+&hOOQ!0Lf7+&h7+&hO%(}Q?MtO,5:dO%[QlO7+&yO%)XQ?MtO,5:`O%)fQ?MtO,5:hO%)pQ?MtO,5:jO%)zQMhO'#IgO%*UQ`O,5@fOOQ!0Lh1G0b1G0bOOQO1G1q1G1qOOQO1G1r1G1rO%*^Q!jO,5<YO!(yQlO,5<XOOQO-E<j-E<jOOQ!0Lf7+'X7+'XOOOW7+'d7+'dOOOW1G1{1G1{O%*iQ`O1G1{OOQ!0Lf1G1}1G1}OOOO,59m,59mO%*nQ!dO,59mOOOO-E<^-E<^OOQ!0Lh1G/V1G/VO%*uQ!0MxO7+'jOOQ!0Lh,5?[,5?[O%+iQMhO1G2eP%+pQ`O'#IpPOQ!0Lh-E<n-E<nO%,^QMjO,5?_OOQ!0Lh-E<q-E<qO%-PQMjO,5?aOOQ!0Lh-E<s-E<sO%-ZQ!dO1G2vO%-bQ!dO'#CrO%-xQMhO'#KQO$#^QlO'#JtOOQ!0Lh1G2^1G2^O%.PQ`O'#IoO%.eQ`O,5@tO%.eQ`O,5@tO%.mQ`O,5@tO%.xQ`O,5@tOOQO1G2`1G2`O%/WQMjO1G2_O!+rQMhO1G2_O%/hQ(CWO'#IqO%/uQ`O,5@uO!&iQMhO,5@uO%/}Q!dO,5@uOOQ!0Lh1G2c1G2cO%2_Q!fO'#CiO%2iQ`O,5=OOOQ!0Lb,5<|,5<|O%2qQpO,5<|OOQ!0Lb,5<},5<}OCfQ`O,5<|O%2|QpO,5<|OOQ!0Lb,5=Q,5=QO$)iQ`O,5=UOOQO,5?^,5?^OOQO-E<p-E<pOOQ!0Lp1G2g1G2gO##hQpO,5<|O$#^QlO,5=OO%3[Q`O,5<}O%3gQpO,5<}O!+rQMhO'#IsO%4aQMjO1G2rO!+rQMhO'#IuO%5SQMjO1G2tO%5^QMjO1G5oO%5hQMjO1G5oOOQO,5?c,5?cOOQO-E<u-E<uOOQO1G.{1G.{O!9lQpO,59uO%[QlO,59uOOQ!0Lh,5<i,5<iO%5uQ`O1G2YO!+rQMhO1G2aO!+rQMhO1G5oO!+rQMhO1G5oO%5zQ!0MxO7+'lOOQ!0Lf7+'l7+'lO!$fQlO7+'lO%6nQ`O,5;^OOQ!0Lb,5?e,5?eOOQ!0Lb-E<w-E<wO%6sQ!dO'#K[O#'cQ`O7+(dO4UQ!fO7+(dO$BuQ`O7+(dO%6}Q!0MvO'#CiO%7nQ!0LrO,5=RO%8PQ!0MvO,5=RO%8dQ`O,5=ROOQ!0Lb1G5m1G5mOOQ[7+$a7+$aO!BYQ!0LrO7+$aO!BeQpO7+$aO!$fQlO7+&_O%8lQ`O'#JOO%9TQ`O,5@}OOQO1G3f1G3fO9aQ`O,5@}O%9TQ`O,5@}O%9]Q`O,5@}OOQO,5?k,5?kOOQO-E<}-E<}OOQ!0Lf7+'S7+'SO%9bQ`O7+)PO9kQ!0LrO7+)PO9aQ`O7+)PO@iQ`O7+)POOQ[7+(o7+(oO%9gQ!0MvO7+(lO!&iQMhO7+(lO!DfQ`O7+(mOOQ[7+(m7+(mO!&iQMhO7+(mO%9qQ`O'#K`O%9|Q`O,5=kOOQO,5?g,5?gOOQO-E<y-E<yOOQ[7+(r7+(rO%;`QpO'#HYOOQ[1G3_1G3_O!&iQMhO1G3_O%[QlO1G3_O%;gQ`O1G3_O%;rQMhO1G3_O9kQ!0LrO1G3aO$#yQ`O1G3aO9UQ`O1G3aO!BeQpO1G3aO!BmQMhO1G3aO%<QQ`O'#I}O%<fQ`O,5@{O%<nQpO,5@{OOQ!0Lb1G3b1G3bOOQ[7+$V7+$VO@iQ`O7+$VO9kQ!0LrO7+$VO%<yQ`O7+$VO%[QlO1G6jO%[QlO1G6kO%=OQ!0LrO1G6jO%=YQlO1G3iO%=aQ`O1G3iO%=fQlO1G3iOOQ[7+)R7+)RO9kQ!0LrO7+)]O`QlO7+)_OOQ['#Kf'#KfOOQ['#JQ'#JQO%=mQlO,5>^OOQ[,5>^,5>^O%[QlO'#HsO%=zQ`O'#HuOOQ[,5>d,5>dO9ZQ`O,5>dOOQ[,5>f,5>fOOQ[7+)h7+)hOOQ[7+)n7+)nOOQ[7+)r7+)rOOQ[7+)t7+)tO%>PQpO1G5zO%>kQ?MtO1G0xO%>uQ`O1G0xOOQO1G/q1G/qO%?QQ?MtO1G/qO>wQ`O1G/qO!(yQlO'#DkOOQO,5>},5>}OOQO-E<a-E<aOOQO,5?T,5?TOOQO-E<g-E<gO!BeQpO1G/qOOQO-E<c-E<cOOQ!0Ln1G0Z1G0ZOOQ!0Lf7+%s7+%sO#'cQ`O7+%sOOQ!0Lf7+&^7+&^O>wQ`O7+&^O!BeQpO7+&^OOQO7+%v7+%vO$?{Q!0MxO7+&VOOQO7+&V7+&VO%[QlO7+&VO%?[Q!0LrO7+&VO!BYQ!0LrO7+%vO!BeQpO7+%vO%?gQ!0LrO7+&VO%?uQ!0MxO7++pO%[QlO7++pO%@VQ`O7++oO%@VQ`O7++oOOQO1G4q1G4qO9ZQ`O1G4qO%@_Q`O1G4qOOQS7+%{7+%{O#'cQ`O<<LOO4UQ!fO<<LOO%@mQ`O<<LOOOQ[<<LO<<LOO!&iQMhO<<LOO%[QlO<<LOO%@uQ`O<<LOO%AQQ!0MzO,5?_O%C]Q!0MzO,5?aO%EhQ!0MzO1G2_O%GyQ!0MzO1G2rO%JUQ!0MzO1G2tO%LaQ!fO,5?OO%[QlO,5?OOOQO-E<b-E<bO%LkQ`O1G5{OOQ!0Lf<<JS<<JSO%LsQ?MtO1G0sO%NzQ?MtO1G0}O& RQ?MtO1G0}O&#SQ?MtO1G0}O&#ZQ?MtO1G0}O&%[Q?MtO1G0}O&']Q?MtO1G0}O&'dQ?MtO1G0}O&'kQ?MtO1G0}O&)lQ?MtO1G0}O&)sQ?MtO1G0}O&)zQ!0MxO<<JeO&+rQ?MtO1G0}O&,oQ?MvO1G0}O&-rQ?MvO'#JjO&/xQ?MtO1G1bO&0VQ?MtO1G0SO&0aQMjO,5?ROOQO-E<e-E<eO!(yQlO'#FpOOQO'#KX'#KXOOQO1G1t1G1tO&0kQ`O1G1sO&0pQ?MtO,5?YOOOW7+'g7+'gOOOO1G/X1G/XO&0zQ!dO1G4vOOQ!0Lh7+(P7+(PP!&iQMhO,5?[O!+rQMhO7+(bO&1RQ`O,5?ZO9ZQ`O,5?ZOOQO-E<m-E<mO&1aQ`O1G6`O&1aQ`O1G6`O&1iQ`O1G6`O&1tQMjO7+'yO&2UQ!dO,5?]O&2`Q`O,5?]O!&iQMhO,5?]OOQO-E<o-E<oO&2eQ!dO1G6aO&2oQ`O1G6aO&2wQ`O1G2jO!&iQMhO1G2jOOQ!0Lb1G2h1G2hOOQ!0Lb1G2i1G2iO%2qQpO1G2hO!BeQpO1G2hOCfQ`O1G2hOOQ!0Lb1G2p1G2pO&2|QpO1G2hO&3[Q`O1G2jO$)iQ`O1G2iOCfQ`O1G2iO$#^QlO1G2jO&3dQ`O1G2iO&4WQMjO,5?_OOQ!0Lh-E<r-E<rO&4yQMjO,5?aOOQ!0Lh-E<t-E<tO!+rQMhO7++ZOOQ!0Lh1G/a1G/aO&5TQ`O1G/aOOQ!0Lh7+'t7+'tO&5YQMjO7+'{O&5jQMjO7++ZO&5tQMjO7++ZO&6RQ!0MxO<<KWOOQ!0Lf<<KW<<KWO&6uQ`O1G0xO!&iQMhO'#IxO&6zQ`O,5@vO&8|Q!fO<<LOO!&iQMhO1G2mO&9TQ!0LrO1G2mOOQ[<<G{<<G{O!BYQ!0LrO<<G{O&9fQ!0MxO<<IyOOQ!0Lf<<Iy<<IyOOQO,5?j,5?jO&:YQ`O,5?jO&:_Q`O,5?jOOQO-E<|-E<|O&:mQ`O1G6iO&:mQ`O1G6iO9aQ`O1G6iO@iQ`O<<LkOOQ[<<Lk<<LkO&:uQ`O<<LkO9kQ!0LrO<<LkOOQ[<<LW<<LWO%9gQ!0MvO<<LWOOQ[<<LX<<LXO!DfQ`O<<LXO&:zQpO'#IzO&;VQ`O,5@zO!(yQlO,5@zOOQ[1G3V1G3VOOQO'#I|'#I|O9kQ!0LrO'#I|O&;_QpO,5=tOOQ[,5=t,5=tO&;fQpO'#EeO&;mQpO'#GdO&;rQ`O7+(yO&;wQ`O7+(yOOQ[7+(y7+(yO!&iQMhO7+(yO%[QlO7+(yO&<PQ`O7+(yOOQ[7+({7+({O9kQ!0LrO7+({O$#yQ`O7+({O9UQ`O7+({O!BeQpO7+({O&<[Q`O,5?iOOQO-E<{-E<{OOQO'#H]'#H]O&<gQ`O1G6gO9kQ!0LrO<<GqOOQ[<<Gq<<GqO@iQ`O<<GqO&<oQ`O7+,UO&<tQ`O7+,VO%[QlO7+,UO%[QlO7+,VOOQ[7+)T7+)TO&<yQ`O7+)TO&=OQlO7+)TO&=VQ`O7+)TOOQ[<<Lw<<LwOOQ[<<Ly<<LyOOQ[-E=O-E=OOOQ[1G3x1G3xO&=[Q`O,5>_OOQ[,5>a,5>aO&=aQ`O1G4OO9ZQ`O7+&dO!(yQlO7+&dOOQO7+%]7+%]O&=fQ?MtO1G6XO>wQ`O7+%]OOQ!0Lf<<I_<<I_OOQ!0Lf<<Ix<<IxO>wQ`O<<IxOOQO<<Iq<<IqO$?{Q!0MxO<<IqO%[QlO<<IqOOQO<<Ib<<IbO!BYQ!0LrO<<IbO&=pQ!0LrO<<IqO&={Q!0MxO<= [O&>]Q`O<= ZOOQO7+*]7+*]O9ZQ`O7+*]OOQ[ANAjANAjO&>eQ!fOANAjO!&iQMhOANAjO#'cQ`OANAjO4UQ!fOANAjO&>lQ`OANAjO%[QlOANAjO&>tQ!0MzO7+'yO&AVQ!0MzO,5?_O&CbQ!0MzO,5?aO&EmQ!0MzO7+'{O&HOQ!fO1G4jO&HYQ?MtO7+&_O&J^Q?MvO,5=WO&LeQ?MvO,5=YO&LuQ?MvO,5=WO&MVQ?MvO,5=YO&MgQ?MvO,59sO' mQ?MvO,5<jO'#pQ?MvO,5<lO'&UQ?MvO,5<zO''zQ?MtO7+'jO'(XQ?MtO7+'lO'(fQ`O,5<[OOQO7+'_7+'_OOQ!0Lh7+*b7+*bO'(kQMjO<<K|OOQO1G4u1G4uO'(rQ`O1G4uO'(}Q`O1G4uO')]Q`O7++zO')]Q`O7++zO!&iQMhO1G4wO')eQ!dO1G4wO')oQ`O7++{O')wQ`O7+(UO'*SQ!dO7+(UOOQ!0Lb7+(S7+(SOOQ!0Lb7+(T7+(TO!BeQpO7+(SOCfQ`O7+(SO'*^Q`O7+(UO!&iQMhO7+(UO$)iQ`O7+(TO'*cQ`O7+(UOCfQ`O7+(TO'*kQMjO<<NuOOQ!0Lh7+${7+${O!+rQMhO<<NuO'*uQ!dO,5?dOOQO-E<v-E<vO'+PQ!0MvO7+(XO!&iQMhO7+(XOOQ[AN=gAN=gO9aQ`O1G5UOOQO1G5U1G5UO'+aQ`O1G5UO'+fQ`O7+,TO'+fQ`O7+,TO9kQ!0LrOANBVO@iQ`OANBVOOQ[ANBVANBVOOQ[ANArANArOOQ[ANAsANAsO'+nQ`O,5?fOOQO-E<x-E<xO'+yQ?MtO1G6fOOQO,5?h,5?hOOQO-E<z-E<zOOQ[1G3`1G3`O',TQ`O,5=OOOQ[<<Le<<LeO!&iQMhO<<LeO&;rQ`O<<LeO',YQ`O<<LeO%[QlO<<LeOOQ[<<Lg<<LgO9kQ!0LrO<<LgO$#yQ`O<<LgO9UQ`O<<LgO',bQpO1G5TO',mQ`O7+,ROOQ[AN=]AN=]O9kQ!0LrOAN=]OOQ[<= p<= pOOQ[<= q<= qO',uQ`O<= pO',zQ`O<= qOOQ[<<Lo<<LoO'-PQ`O<<LoO'-UQlO<<LoOOQ[1G3y1G3yO>wQ`O7+)jO'-]Q`O<<JOO'-hQ?MtO<<JOOOQO<<Hw<<HwOOQ!0LfAN?dAN?dOOQOAN?]AN?]O$?{Q!0MxOAN?]OOQOAN>|AN>|O%[QlOAN?]OOQO<<Mw<<MwOOQ[G27UG27UO!&iQMhOG27UO#'cQ`OG27UO'-rQ!fOG27UO4UQ!fOG27UO'-yQ`OG27UO'.RQ?MtO<<JeO'.`Q?MvO1G2_O'0UQ?MvO,5?_O'2XQ?MvO,5?aO'4[Q?MvO1G2rO'6_Q?MvO1G2tO'8bQ?MtO<<KWO'8oQ?MtO<<IyOOQO1G1v1G1vO!+rQMhOANAhOOQO7+*a7+*aO'8|Q`O7+*aO'9XQ`O<= fO'9aQ!dO7+*cOOQ!0Lb<<Kp<<KpO$)iQ`O<<KpOCfQ`O<<KpO'9kQ`O<<KpO!&iQMhO<<KpOOQ!0Lb<<Kn<<KnO!BeQpO<<KnO'9vQ!dO<<KpOOQ!0Lb<<Ko<<KoO':QQ`O<<KpO!&iQMhO<<KpO$)iQ`O<<KoO':VQMjOANDaO':aQ!0MvO<<KsOOQO7+*p7+*pO9aQ`O7+*pO':qQ`O<= oOOQ[G27qG27qO9kQ!0LrOG27qO!(yQlO1G5QO':yQ`O7+,QO';RQ`O1G2jO&;rQ`OANBPOOQ[ANBPANBPO!&iQMhOANBPO';WQ`OANBPOOQ[ANBRANBRO9kQ!0LrOANBRO$#yQ`OANBROOQO'#H^'#H^OOQO7+*o7+*oOOQ[G22wG22wOOQ[ANE[ANE[OOQ[ANE]ANE]OOQ[ANBZANBZO';`Q`OANBZOOQ[<<MU<<MUO!(yQlOAN?jOOQOG24wG24wO$?{Q!0MxOG24wO#'cQ`OLD,pOOQ[LD,pLD,pO!&iQMhOLD,pO';eQ!fOLD,pO';lQ?MvO7+'yO'=bQ?MvO,5?_O'?eQ?MvO,5?aO'AhQ?MvO7+'{O'C^QMjOG27SOOQO<<M{<<M{OOQ!0LbANA[ANA[O$)iQ`OANA[OCfQ`OANA[O'CnQ!dOANA[OOQ!0LbANAYANAYO'CuQ`OANA[O!&iQMhOANA[O'DQQ!dOANA[OOQ!0LbANAZANAZOOQO<<N[<<N[OOQ[LD-]LD-]O'D[Q?MtO7+*lOOQO'#Ge'#GeOOQ[G27kG27kO&;rQ`OG27kO!&iQMhOG27kOOQ[G27mG27mO9kQ!0LrOG27mOOQ[G27uG27uO'DfQ?MtOG25UOOQOLD*cLD*cOOQ[!$(![!$(![O#'cQ`O!$(![O!&iQMhO!$(![O'DpQ!0MzOG27SOOQ!0LbG26vG26vO$)iQ`OG26vO'GRQ`OG26vOCfQ`OG26vO'G^Q!dOG26vO!&iQMhOG26vOOQ[LD-VLD-VO&;rQ`OLD-VOOQ[LD-XLD-XOOQ[!)9Ev!)9EvO#'cQ`O!)9EvOOQ!0LbLD,bLD,bO$)iQ`OLD,bOCfQ`OLD,bO'GeQ`OLD,bO'GpQ!dOLD,bOOQ[!$(!q!$(!qOOQ[!.K;b!.K;bO'GwQ?MvOG27SOOQ!0Lb!$( |!$( |O$)iQ`O!$( |OCfQ`O!$( |O'ImQ`O!$( |OOQ!0Lb!)9Eh!)9EhO$)iQ`O!)9EhOCfQ`O!)9EhOOQ!0Lb!.K;S!.K;SO$)iQ`O!.K;SOOQ!0Lb!4/0n!4/0nO!(yQlO'#DxO1PQ`O'#EVO'IxQ!fO'#JpO'JPQ!L^O'#DtO'JWQlO'#D|O'J_Q!fO'#CiO'LuQ!fO'#CiO!(yQlO'#EOO'MVQlO,5;XO!(yQlO,5;cO!(yQlO,5;cO!(yQlO,5;cO!(yQlO,5;cO!(yQlO,5;cO!(yQlO,5;cO!(yQlO,5;cO!(yQlO,5;cO!(yQlO,5;cO!(yQlO,5;cO!(yQlO'#InO( YQ`O,5<hO!(yQlO,5;cO( bQMhO,5;cO(!{QMhO,5;cO!(yQlO,5;vO!&iQMhO'#GlO( bQMhO'#GlO!&iQMhO'#GnO( bQMhO'#GnO1SQ`O'#DXO1SQ`O'#DXO!&iQMhO'#GOO( bQMhO'#GOO!&iQMhO'#GQO( bQMhO'#GQO!&iQMhO'#G`O( bQMhO'#G`O!(yQlO,5:hO(#SQpO'#D]O(#^QpO'#JtO!(yQlO,5@mO'MVQlO1G0sO(#hQ?MtO'#CiO!(yQlO1G2OO!&iQMhO'#IsO( bQMhO'#IsO!&iQMhO'#IuO( bQMhO'#IuO(#rQ!dO'#CrO!&iQMhO,5<sO( bQMhO,5<sO'MVQlO1G2QO!(yQlO7+&yO!&iQMhO1G2_O( bQMhO1G2_O!&iQMhO'#IsO( bQMhO'#IsO!&iQMhO'#IuO( bQMhO'#IuO!&iQMhO1G2aO( bQMhO1G2aO'MVQlO7+'lO'MVQlO7+&_O!&iQMhOANAhO( bQMhOANAhO($VQ`O'#EmO($[Q`O'#EmO($dQ`O'#F[O($iQ`O'#EwO($nQ`O'#KRO($yQ`O'#KPO(%UQ`O,5;XO(%ZQMjO,5<dO(%bQ`O'#GXO(%gQ`O'#GXO(%lQ`O,5<fO(%tQ`O,5;XO(%|Q?MtO1G1_O(&TQ`O,5<sO(&YQ`O,5<sO(&_Q`O,5<uO(&dQ`O,5<uO(&iQ`O1G2QO(&nQ`O1G0sO(&sQMjO<<K|O(&zQMjO<<K|O7eQMhO'#F{O9UQ`O'#FzOAdQ`O'#ElO!(yQlO,5;sO!3^Q`O'#GXO!3^Q`O'#GXO!3^Q`O'#GZO!3^Q`O'#GZO!+rQMhO7+(bO!+rQMhO7+(bO%-ZQ!dO1G2vO%-ZQ!dO1G2vO!&iQMhO,5=[O!&iQMhO,5=[",
      stateData: "((P~O'zOS'{OSTOS'|RQ~OPYOQYOSfOY!VOaqOdzOeyOj!POnkOpYOqkOrkOxkOzYO|YO!QWO!UkO!VkO!]XO!guO!jZO!mYO!nYO!oYO!qvO!swO!vxO!z]O$V|O$miO%g}O%i!QO%k!OO%l!OO%m!OO%p!RO%r!SO%u!TO%v!TO%x!UO&U!WO&[!XO&^!YO&`!ZO&b![O&e!]O&k!^O&q!_O&s!`O&u!aO&w!bO&y!cO(RSO(TTO(WUO(_VO(m[O~OWtO~P`OPYOQYOSfOd!jOe!iOnkOpYOqkOrkOxkOzYO|YO!QWO!UkO!VkO!]!eO!guO!jZO!mYO!nYO!oYO!qvO!s!gO!v!hO$V!kO$miO(R!dO(TTO(WUO(_VO(m[O~Oa!wOq!nO!Q!oO!`!yO!a!vO!b!vO!z;wO#R!pO#S!pO#T!xO#U!pO#V!pO#Y!zO#Z!zO(S!lO(TTO(WUO(c!mO(m!sO~O'|!{O~OP]XR]X[]Xa]Xp]X!O]X!Q]X!Z]X!j]X!n]X#P]X#Q]X#^]X#ifX#l]X#m]X#n]X#o]X#p]X#q]X#r]X#s]X#t]X#u]X#w]X#y]X#z]X$P]X'x]X(_]X(p]X(w]X(x]X~O!e%QX~P(qO_!}O(T#PO(U!}O(V#PO~O_#QO(V#PO(W#PO(X#QO~Ov#SO!S#TO(`#TO(a#VO~OPYOQYOSfOd!jOe!iOnkOpYOqkOrkOxkOzYO|YO!QWO!UkO!VkO!]!eO!guO!jZO!mYO!nYO!oYO!qvO!s!gO!v!hO$V!kO$miO(R;{O(TTO(WUO(_VO(m[O~O!Y#ZO!Z#WO!W(fP!W(tP~P+}O![#cO~P`OPYOQYOSfOd!jOe!iOpYOqkOrkOxkOzYO|YO!QWO!UkO!VkO!]!eO!guO!jZO!mYO!nYO!oYO!qvO!s!gO!v!hO$V!kO$miO(TTO(WUO(_VO(m[O~On#mO!Y#iO!z]O#g#lO#h#iO(R;|O!i(qP~P.iO!j#oO(R#nO~O!v#sO!z]O%g#tO~O#i#uO~O!e#vO#i#uO~OP$[OR#zO[$cOp$aO!O#yO!Q#{O!Z$_O!j#xO!n$[O#P$RO#l$OO#m$PO#n$PO#o$PO#p$QO#q$RO#r$RO#s$bO#t$RO#u$SO#w$UO#y$WO#z$XO(_VO(p$YO(w#|O(x#}O~Oa(dX'x(dX'u(dX!i(dX!W(dX!](dX%h(dX!e(dX~P1qO#Q$dO#^$eO$P$eOP(eXR(eX[(eXp(eX!O(eX!Q(eX!Z(eX!j(eX!n(eX#P(eX#l(eX#m(eX#n(eX#o(eX#p(eX#q(eX#r(eX#s(eX#t(eX#u(eX#w(eX#y(eX#z(eX(_(eX(p(eX(w(eX(x(eX!](eX%h(eX~Oa(eX'x(eX'u(eX!W(eX!i(eXt(eX!e(eX~P4UO#^$eO~O$[$hO$^$gO$e$mO~OSfO!]$nO$h$oO$j$qO~Oh%VOj%cOn%WOp%XOq$tOr$tOx%YOz%ZO|%[O!Q${O!]$|O!g%aO!j$xO#h%bO$V%_O$s%]O$u%^O$x%`O(R$sO(TTO(WUO(_$uO(w$}O(x%POg([P~O!j%dO~O!Q%gO!]%hO(R%fO~O!e%lO~Oa%mO'x%mO~O!O%qO~P%[O(S!lO~P%[O%m%uO~P%[Oh%VO!j%dO(R%fO(S!lO~Oe%|O!j%dO(R%fO~O#t$RO~O!O&RO!]&OO!j&QO%i&UO(R%fO(S!lO(TTO(WUO`)UP~O!v#sO~O%r&WO!Q)QX!])QX(R)QX~O(R&XO~Oj!PO!s&^O%i!QO%k!OO%l!OO%m!OO%p!RO%r!SO%u!TO%v!TO~Od&cOe&bO!v&`O%g&aO%z&_O~P<POd&fOeyOj!PO!]&eO!s&^O!vxO!z]O%g}O%k!OO%l!OO%m!OO%p!RO%r!SO%u!TO%v!TO%x!UO~Ob&iO#^&lO%i&gO(S!lO~P=UO!j&mO!s&qO~O!j#oO~O!]XO~Oa%mO'v&yO'x%mO~Oa%mO'v&|O'x%mO~Oa%mO'v'OO'x%mO~O'u]X!W]Xt]X!i]X&Y]X!]]X%h]X!e]X~P(qO!`']O!a'UO!b'UO(S!lO(TTO(WUO~Oq'SO!Q'RO!Y'VO(c'QO![(gP![(vP~P@]Ol'`O!]'^O(R%fO~Oe'eO!j%dO(R%fO~O!O&RO!j&QO~Oq!nO!Q!oO!z;wO#R!pO#S!pO#U!pO#V!pO(S!lO(TTO(WUO(c!mO(m!sO~O!`'kO!a'jO!b'jO#T!pO#Y'lO#Z'lO~PAwOa%mOh%VO!e#vO!j%dO'x%mO(p'nO~O!n'rO#^'pO~PCVOq!nO!Q!oO(TTO(WUO(c!mO(m!sO~O!]XOq(kX!Q(kX!`(kX!a(kX!b(kX!z(kX#R(kX#S(kX#T(kX#U(kX#V(kX#Y(kX#Z(kX(S(kX(T(kX(W(kX(c(kX(m(kX~O!a'jO!b'jO(S!lO~PCuO'}'vO(O'vO(P'xO~O_!}O(T'zO(U!}O(V'zO~O_#QO(V'zO(W'zO(X#QO~Ot'|O~P%[Ov#SO!S#TO(`#TO(a(PO~O!Y(RO!W'UX!W'[X!Z'UX!Z'[X~P+}O!Z(TO!W(fX~OP$[OR#zO[$cOp$aO!O#yO!Q#{O!Z(TO!j#xO!n$[O#P$RO#l$OO#m$PO#n$PO#o$PO#p$QO#q$RO#r$RO#s$bO#t$RO#u$SO#w$UO#y$WO#z$XO(_VO(p$YO(w#|O(x#}O~O!W(fX~PGpO!W(YO~O!W(sX!Z(sX!e(sX!i(sX(p(sX~O#^(sX#i#bX![(sX~PIsO#^(ZO!W(uX!Z(uX~O!Z([O!W(tX~O!W(_O~O#^$eO~PIsO![(`O~P`OR#zO!O#yO!Q#{O!j#xO(_VOP!la[!lap!la!Z!la!n!la#P!la#l!la#m!la#n!la#o!la#p!la#q!la#r!la#s!la#t!la#u!la#w!la#y!la#z!la(p!la(w!la(x!la~Oa!la'x!la'u!la!W!la!i!lat!la!]!la%h!la!e!la~PKZO!i(aO~O!e#vO#^(bO(p'nO!Z(rXa(rX'x(rX~O!i(rX~PMvO!Q%gO!]%hO!z]O#g(gO#h(fO(R%fO~O!Z(hO!i(qX~O!i(jO~O!Q%gO!]%hO#h(fO(R%fO~OP(eXR(eX[(eXp(eX!O(eX!Q(eX!Z(eX!j(eX!n(eX#P(eX#l(eX#m(eX#n(eX#o(eX#p(eX#q(eX#r(eX#s(eX#t(eX#u(eX#w(eX#y(eX#z(eX(_(eX(p(eX(w(eX(x(eX~O!e#vO!i(eX~P! dOR(lO!O(kO!j#xO#Q$dO!z!ya!Q!ya~O!v!ya%g!ya!]!ya#g!ya#h!ya(R!ya~P!#eO!v(pO~OPYOQYOSfOd!jOe!iOnkOpYOqkOrkOxkOzYO|YO!QWO!UkO!VkO!]XO!guO!jZO!mYO!nYO!oYO!qvO!s!gO!v!hO$V!kO$miO(R!dO(TTO(WUO(_VO(m[O~Oh%VOn%WOp%XOq$tOr$tOx%YOz%ZO|<eO!Q${O!]$|O!g=vO!j$xO#h<kO$V%_O$s<gO$u<iO$x%`O(R(tO(TTO(WUO(_$uO(w$}O(x%PO~O#i(vO~O!Y(xO!i(iP~P%[O(c(zO(m[O~O!Q(|O!j#xO(c(zO(m[O~OP;vOQ;vOSfOd=rOe!iOnkOp;vOqkOrkOxkOz;vO|;vO!QWO!UkO!VkO!]!eO!g;yO!jZO!m;vO!n;vO!o;vO!q;zO!s;}O!v!hO$V!kO$m=pO(R)ZO(TTO(WUO(_VO(m[O~O!Z$_Oa$pa'x$pa'u$pa!i$pa!W$pa!]$pa%h$pa!e$pa~Oj)bO~P!&iOh%VOn%WOp%XOq$tOr$tOx%YOz%ZO|%[O!Q${O!]$|O!g%aO!j$xO#h%bO$V%_O$s%]O$u%^O$x%`O(R(tO(TTO(WUO(_$uO(w$}O(x%PO~Og(nP~P!+rO!O)gO!e)fO!]$]X$Y$]X$[$]X$^$]X$e$]X~O!e)fO!](yX$Y(yX$[(yX$^(yX$e(yX~O!O)gO~P!-{O!O)gO!](yX$Y(yX$[(yX$^(yX$e(yX~O!])iO$Y)mO$[)hO$^)hO$e)nO~O!Y)qO~P!(yO$[$hO$^$gO$e)uO~Ol$yX!O$yX#Q$yX'w$yX(w$yX(x$yX~OgkXg$yXlkX!ZkX#^kX~P!/qOv)wO(`)xO(a)zO~Ol*TO!O)|O'w)}O(w$}O(x%PO~Og){O~P!0uOg*UO~Oh%VOn%WOp%XOq$tOr$tOx%YOz%ZO|<eO!Q*WO!]*XO!g=vO!j$xO#h<kO$V%_O$s<gO$u<iO$x%`O(TTO(WUO(_$uO(w$}O(x%PO~O!Y*[O(R*VO!i(|P~P!1dO#i*^O~O!j*_O~Oh%VOn%WOp%XOq$tOr$tOx%YOz%ZO|<eO!Q${O!]$|O!g=vO!j$xO#h<kO$V%_O$s<gO$u<iO$x%`O(R*aO(TTO(WUO(_$uO(w$}O(x%PO~O!Y*dO!W(}P~P!3cOp*pOq!nO!Q*fO!`*nO!a*hO!b*hO!j*_O#Y*oO%_*jO(S!lO(TTO(WUO(c!mO~O![*mO~P!5WO#Q$dOl(^X!O(^X'w(^X(w(^X(x(^X!Z(^X#^(^X~Og(^X#}(^X~P!6YOl*uO#^*tOg(]X!Z(]X~O!Z*vOg([X~Oj%cO(R&XOg([P~Oq*yO~O!j+OO~O(R(tO~On+TO!Q%gO!Y#iO!]%hO!z]O#g#lO#h#iO(R%fO!i(qP~O!e#vO#i+UO~O!Q%gO!Y+WO!Z([O!]%hO(R%fO!W(tP~Oq'YO!Q+YO!Y+XO(TTO(WUO(c(zO~O![(vP~P!9]O!Z+ZOa)RX'x)RX~OP$[OR#zO[$cOp$aO!O#yO!Q#{O!j#xO!n$[O#P$RO#l$OO#m$PO#n$PO#o$PO#p$QO#q$RO#r$RO#s$bO#t$RO#u$SO#w$UO#y$WO#z$XO(_VO(p$YO(w#|O(x#}O~Oa!ha!Z!ha'x!ha'u!ha!W!ha!i!hat!ha!]!ha%h!ha!e!ha~P!:TOR#zO!O#yO!Q#{O!j#xO(_VOP!pa[!pap!pa!Z!pa!n!pa#P!pa#l!pa#m!pa#n!pa#o!pa#p!pa#q!pa#r!pa#s!pa#t!pa#u!pa#w!pa#y!pa#z!pa(p!pa(w!pa(x!pa~Oa!pa'x!pa'u!pa!W!pa!i!pat!pa!]!pa%h!pa!e!pa~P!<kOR#zO!O#yO!Q#{O!j#xO(_VOP!ra[!rap!ra!Z!ra!n!ra#P!ra#l!ra#m!ra#n!ra#o!ra#p!ra#q!ra#r!ra#s!ra#t!ra#u!ra#w!ra#y!ra#z!ra(p!ra(w!ra(x!ra~Oa!ra'x!ra'u!ra!W!ra!i!rat!ra!]!ra%h!ra!e!ra~P!?ROh%VOl+dO!]'^O%h+cO~O!e+fOa(ZX!](ZX'x(ZX!Z(ZX~Oa%mO!]XO'x%mO~Oh%VO!j%dO~Oh%VO!j%dO(R%fO~O!e#vO#i(vO~Ob+qO%i+rO(R+nO(TTO(WUO![)VP~O!Z+sO`)UX~O[+wO~O`+xO~O!]&OO(R%fO(S!lO`)UP~Oh%VO#^+}O~Oh%VOl,QO!]$|O~O!],SO~O!O,UO!]XO~O%m%uO~O!v,ZO~Oe,`O~Ob,aO(R#nO(TTO(WUO![)TP~Oe%|O~O%i!QO(R&XO~P=UO[,fO`,eO~OPYOQYOSfOdzOeyOnkOpYOqkOrkOxkOzYO|YO!QWO!UkO!VkO!guO!jZO!mYO!nYO!oYO!qvO!vxO!z]O$miO%g}O(TTO(WUO(_VO(m[O~O!]!eO!s!gO$V!kO(R!dO~P!FRO`,eOa%mO'x%mO~OPYOQYOSfOd!jOe!iOnkOpYOqkOrkOxkOzYO|YO!QWO!UkO!VkO!]!eO!guO!jZO!mYO!nYO!oYO!qvO!v!hO$V!kO$miO(R!dO(TTO(WUO(_VO(m[O~Oa,kOj!OO!swO%k!OO%l!OO%m!OO~P!HkO!j&mO~O&[,qO~O!],sO~O&m,uO&o,vOP&jaQ&jaS&jaY&jaa&jad&jae&jaj&jan&jap&jaq&jar&jax&jaz&ja|&ja!Q&ja!U&ja!V&ja!]&ja!g&ja!j&ja!m&ja!n&ja!o&ja!q&ja!s&ja!v&ja!z&ja$V&ja$m&ja%g&ja%i&ja%k&ja%l&ja%m&ja%p&ja%r&ja%u&ja%v&ja%x&ja&U&ja&[&ja&^&ja&`&ja&b&ja&e&ja&k&ja&q&ja&s&ja&u&ja&w&ja&y&ja'u&ja(R&ja(T&ja(W&ja(_&ja(m&ja![&ja&c&jab&ja&h&ja~O(R,{O~Oh!cX!Z!PX![!PX!e!PX!e!cX!j!cX#^!PX~O!Z!cX![!cX~P# qO!e-QO#^-POh(hX!Z#fX![#fX!e(hX!j(hX~O!Z(hX![(hX~P#!dOh%VO!e-SO!j%dO!Z!_X![!_X~Oq!nO!Q!oO(TTO(WUO(c!mO~OP;vOQ;vOSfOd=rOe!iOnkOp;vOqkOrkOxkOz;vO|;vO!QWO!UkO!VkO!]!eO!g;yO!jZO!m;vO!n;vO!o;vO!q;zO!s;}O!v!hO$V!kO$m=pO(TTO(WUO(_VO(m[O~O(R<rO~P##yO!Z-WO![(gX~O![-YO~O!e-QO#^-PO!Z#fX![#fX~O!Z-ZO![(vX~O![-]O~O!a-^O!b-^O(S!lO~P##hO![-aO~P'_Ol-dO!]'^O~O!W-iO~Oq!ya!`!ya!a!ya!b!ya#R!ya#S!ya#T!ya#U!ya#V!ya#Y!ya#Z!ya(S!ya(T!ya(W!ya(c!ya(m!ya~P!#eO!n-nO#^-lO~PCVO!a-pO!b-pO(S!lO~PCuOa%mO#^-lO'x%mO~Oa%mO!e#vO#^-lO'x%mO~Oa%mO!e#vO!n-nO#^-lO'x%mO(p'nO~O'}'vO(O'vO(P-uO~Ot-vO~O!W'Ua!Z'Ua~P!:TO!Y-zO!W'UX!Z'UX~P%[O!Z(TO!W(fa~O!W(fa~PGpO!Z([O!W(ta~O!Q%gO!Y.OO!]%hO(R%fO!W'[X!Z'[X~O#^.QO!Z(ra!i(raa(ra'x(ra~O!e#vO~P#,PO!Z(hO!i(qa~O!Q%gO!]%hO#h.UO(R%fO~On.ZO!Q%gO!Y.WO!]%hO!z]O#g.YO#h.WO(R%fO!Z'_X!i'_X~OR._O!j#xO~Oh%VOl.bO!]'^O%h.aO~Oa#ai!Z#ai'x#ai'u#ai!W#ai!i#ait#ai!]#ai%h#ai!e#ai~P!:TOl=|O!O)|O'w)}O(w$}O(x%PO~O#i#]aa#]a#^#]a'x#]a!Z#]a!i#]a!]#]a!W#]a~P#.{O#i(^XP(^XR(^X[(^Xa(^Xp(^X!Q(^X!j(^X!n(^X#P(^X#l(^X#m(^X#n(^X#o(^X#p(^X#q(^X#r(^X#s(^X#t(^X#u(^X#w(^X#y(^X#z(^X'x(^X(_(^X(p(^X!i(^X!W(^X'u(^Xt(^X!](^X%h(^X!e(^X~P!6YO!Z.oO!i(iX~P!:TO!i.rO~O!W.tO~OP$[OR#zO!O#yO!Q#{O!j#xO!n$[O(_VO[#kia#kip#ki!Z#ki#P#ki#m#ki#n#ki#o#ki#p#ki#q#ki#r#ki#s#ki#t#ki#u#ki#w#ki#y#ki#z#ki'x#ki(p#ki(w#ki(x#ki'u#ki!W#ki!i#kit#ki!]#ki%h#ki!e#ki~O#l#ki~P#2kO#l$OO~P#2kOP$[OR#zOp$aO!O#yO!Q#{O!j#xO!n$[O#l$OO#m$PO#n$PO#o$PO(_VO[#kia#ki!Z#ki#P#ki#q#ki#r#ki#s#ki#t#ki#u#ki#w#ki#y#ki#z#ki'x#ki(p#ki(w#ki(x#ki'u#ki!W#ki!i#kit#ki!]#ki%h#ki!e#ki~O#p#ki~P#5YO#p$QO~P#5YOP$[OR#zO[$cOp$aO!O#yO!Q#{O!j#xO!n$[O#P$RO#l$OO#m$PO#n$PO#o$PO#p$QO#q$RO#r$RO#s$bO#t$RO(_VOa#ki!Z#ki#w#ki#y#ki#z#ki'x#ki(p#ki(w#ki(x#ki'u#ki!W#ki!i#kit#ki!]#ki%h#ki!e#ki~O#u#ki~P#7wOP$[OR#zO[$cOp$aO!O#yO!Q#{O!j#xO!n$[O#P$RO#l$OO#m$PO#n$PO#o$PO#p$QO#q$RO#r$RO#s$bO#t$RO#u$SO(_VO(x#}Oa#ki!Z#ki#y#ki#z#ki'x#ki(p#ki(w#ki'u#ki!W#ki!i#kit#ki!]#ki%h#ki!e#ki~O#w$UO~P#:_O#w#ki~P#:_O#u$SO~P#7wOP$[OR#zO[$cOp$aO!O#yO!Q#{O!j#xO!n$[O#P$RO#l$OO#m$PO#n$PO#o$PO#p$QO#q$RO#r$RO#s$bO#t$RO#u$SO#w$UO(_VO(w#|O(x#}Oa#ki!Z#ki#z#ki'x#ki(p#ki'u#ki!W#ki!i#kit#ki!]#ki%h#ki!e#ki~O#y#ki~P#=TO#y$WO~P#=TOP]XR]X[]Xp]X!O]X!Q]X!j]X!n]X#P]X#Q]X#^]X#ifX#l]X#m]X#n]X#o]X#p]X#q]X#r]X#s]X#t]X#u]X#w]X#y]X#z]X$P]X(_]X(p]X(w]X(x]X!Z]X![]X~O#}]X~P#?rOP$[OR#zO[<_Op<]O!O#yO!Q#{O!j#xO!n$[O#P<SO#l<PO#m<QO#n<QO#o<QO#p<RO#q<SO#r<SO#s<^O#t<SO#u<TO#w<VO#y<XO#z<YO(_VO(p$YO(w#|O(x#}O~O#}.vO~P#BPO#Q$dO#^<`O$P<`O#}(eX![(eX~P! dOa'ba!Z'ba'x'ba'u'ba!i'ba!W'bat'ba!]'ba%h'ba!e'ba~P!:TO[#kia#kip#ki!Z#ki#P#ki#p#ki#q#ki#r#ki#s#ki#t#ki#u#ki#w#ki#y#ki#z#ki'x#ki(p#ki'u#ki!W#ki!i#kit#ki!]#ki%h#ki!e#ki~OP$[OR#zO!O#yO!Q#{O!j#xO!n$[O#l$OO#m$PO#n$PO#o$PO(_VO(w#ki(x#ki~P#EROl=|O!O)|O'w)}O(w$}O(x%POP#kiR#ki!Q#ki!j#ki!n#ki#l#ki#m#ki#n#ki#o#ki(_#ki~P#ERO!Z.zOg(nX~P!0uOg.|O~Oa$Oi!Z$Oi'x$Oi'u$Oi!W$Oi!i$Oit$Oi!]$Oi%h$Oi!e$Oi~P!:TO$[.}O$^.}O~O$[/OO$^/OO~O!e)fO#^/PO!]$bX$Y$bX$[$bX$^$bX$e$bX~O!Y/QO~O!])iO$Y/SO$[)hO$^)hO$e/TO~O!Z<ZO![(dX~P#BPO![/UO~O!e)fO$e(yX~O$e/WO~Ot/XO~P!&iOv)wO(`)xO(a/[O~O!Q/_O~O(w$}Ol%`a!O%`a'w%`a(x%`a!Z%`a#^%`a~Og%`a#}%`a~P#LTO(x%POl%ba!O%ba'w%ba(w%ba!Z%ba#^%ba~Og%ba#}%ba~P#LvO!ZfX!efX!ifX!i$yX(pfX~P!/qO!Y/hO!Z([O(R/gO!W(tP!W(}P~P!1dOp*pO!`*nO!a*hO!b*hO!j*_O#Y*oO%_*jO(S!lO(TTO(WUO~Oq<oO!Q/iO!Y+XO![*mO(c<nO![(vP~P#NaO!i/jO~P#.{O!Z/kO!e#vO(p'nO!i(|X~O!i/pO~O!Q%gO!Y*[O!]%hO(R%fO!i(|P~O#i/rO~O!W$yX!Z$yX!e%QX~P!/qO!Z/sO!W(}X~P#.{O!e/uO~O!W/wO~OnkO(R/xO~P.iOh%VOp/}O!e#vO!j%dO(p'nO~O!e+fO~Oa%mO!Z0RO'x%mO~O![0TO~P!5WO!a0UO!b0UO(S!lO~P##hOq!nO!Q0VO(TTO(WUO(c!mO~O#Y0XO~Og%`a!Z%`a#^%`a#}%`a~P!0uOg%ba!Z%ba#^%ba#}%ba~P!0uOj%cO(R&XOg'kX!Z'kX~O!Z*vOg([a~Og0bO~OR0cO!O0cO!Q0dO#Q$dOl{a'w{a(w{a(x{a!Z{a#^{a~Og{a#}{a~P$&dO!O)|O'w)}Ol$ra(w$ra(x$ra!Z$ra#^$ra~Og$ra#}$ra~P$'`O!O)|O'w)}Ol$ta(w$ta(x$ta!Z$ta#^$ta~Og$ta#}$ta~P$(RO#i0gO~Og%Sa!Z%Sa#^%Sa#}%Sa~P!0uOl0iO#^0hOg(]a!Z(]a~O!e#vO~O#i0lO~O!Z+ZOa)Ra'x)Ra~OR#zO!O#yO!Q#{O!j#xO(_VOP!pi[!pip!pi!Z!pi!n!pi#P!pi#l!pi#m!pi#n!pi#o!pi#p!pi#q!pi#r!pi#s!pi#t!pi#u!pi#w!pi#y!pi#z!pi(p!pi(w!pi(x!pi~Oa!pi'x!pi'u!pi!W!pi!i!pit!pi!]!pi%h!pi!e!pi~P$*OOh%VOp%XOq$tOr$tOx%YOz%ZO|<eO!Q${O!]$|O!g=vO!j$xO#h<kO$V%_O$s<gO$u<iO$x%`O(TTO(WUO(_$uO(w$}O(x%PO~On0vO%[0wO(R0tO~P$,fO!e+fOa(Za!](Za'x(Za!Z(Za~O#i0|O~O[]X!ZfX![fX~O!Z0}O![)VX~O![1PO~O[1QO~Ob1SO(R+nO(TTO(WUO~O!]&OO(R%fO`'sX!Z'sX~O!Z+sO`)Ua~O!i1VO~P!:TO[1YO~O`1ZO~O#^1^O~Ol1aO!]$|O~O(c(zO![)SP~Oh%VOl1jO!]1gO%h1iO~O[1tO!Z1rO![)TX~O![1uO~O`1wOa%mO'x%mO~O(R#nO(TTO(WUO~O#Q$dO#^$eO$P$eOP(eXR(eX[(eXp(eX!O(eX!Q(eX!Z(eX!j(eX!n(eX#P(eX#l(eX#m(eX#n(eX#o(eX#p(eX#q(eX#r(eX#s(eX#u(eX#w(eX#y(eX#z(eX(_(eX(p(eX(w(eX(x(eX~O#t1zO&Y1{Oa(eX~P$2PO#^$eO#t1zO&Y1{O~Oa1}O~P%[Oa2PO~O&c2SOP&aiQ&aiS&aiY&aia&aid&aie&aij&ain&aip&aiq&air&aix&aiz&ai|&ai!Q&ai!U&ai!V&ai!]&ai!g&ai!j&ai!m&ai!n&ai!o&ai!q&ai!s&ai!v&ai!z&ai$V&ai$m&ai%g&ai%i&ai%k&ai%l&ai%m&ai%p&ai%r&ai%u&ai%v&ai%x&ai&U&ai&[&ai&^&ai&`&ai&b&ai&e&ai&k&ai&q&ai&s&ai&u&ai&w&ai&y&ai'u&ai(R&ai(T&ai(W&ai(_&ai(m&ai![&aib&ai&h&ai~Ob2YO![2WO&h2XO~P`O!]XO!j2[O~O&o,vOP&jiQ&jiS&jiY&jia&jid&jie&jij&jin&jip&jiq&jir&jix&jiz&ji|&ji!Q&ji!U&ji!V&ji!]&ji!g&ji!j&ji!m&ji!n&ji!o&ji!q&ji!s&ji!v&ji!z&ji$V&ji$m&ji%g&ji%i&ji%k&ji%l&ji%m&ji%p&ji%r&ji%u&ji%v&ji%x&ji&U&ji&[&ji&^&ji&`&ji&b&ji&e&ji&k&ji&q&ji&s&ji&u&ji&w&ji&y&ji'u&ji(R&ji(T&ji(W&ji(_&ji(m&ji![&ji&c&jib&ji&h&ji~O!W2bO~O!Z!_a![!_a~P#BPOq!nO!Q!oO!Y2hO(c!mO!Z'VX!['VX~P@]O!Z-WO![(ga~O!Z']X![']X~P!9]O!Z-ZO![(va~O![2oO~P'_Oa%mO#^2xO'x%mO~Oa%mO!e#vO#^2xO'x%mO~Oa%mO!e#vO!n2|O#^2xO'x%mO(p'nO~Oa%mO'x%mO~P!:TO!Z$_Ot$pa~O!W'Ui!Z'Ui~P!:TO!Z(TO!W(fi~O!Z([O!W(ti~O!W(ui!Z(ui~P!:TO!Z(ri!i(ria(ri'x(ri~P!:TO#^3OO!Z(ri!i(ria(ri'x(ri~O!Z(hO!i(qi~O!Q%gO!]%hO!z]O#g3TO#h3SO(R%fO~O!Q%gO!]%hO#h3SO(R%fO~Ol3[O!]'^O%h3ZO~Oh%VOl3[O!]'^O%h3ZO~O#i%`aP%`aR%`a[%`aa%`ap%`a!Q%`a!j%`a!n%`a#P%`a#l%`a#m%`a#n%`a#o%`a#p%`a#q%`a#r%`a#s%`a#t%`a#u%`a#w%`a#y%`a#z%`a'x%`a(_%`a(p%`a!i%`a!W%`a'u%`at%`a!]%`a%h%`a!e%`a~P#LTO#i%baP%baR%ba[%baa%bap%ba!Q%ba!j%ba!n%ba#P%ba#l%ba#m%ba#n%ba#o%ba#p%ba#q%ba#r%ba#s%ba#t%ba#u%ba#w%ba#y%ba#z%ba'x%ba(_%ba(p%ba!i%ba!W%ba'u%bat%ba!]%ba%h%ba!e%ba~P#LvO#i%`aP%`aR%`a[%`aa%`ap%`a!Q%`a!Z%`a!j%`a!n%`a#P%`a#l%`a#m%`a#n%`a#o%`a#p%`a#q%`a#r%`a#s%`a#t%`a#u%`a#w%`a#y%`a#z%`a'x%`a(_%`a(p%`a!i%`a!W%`a'u%`a#^%`at%`a!]%`a%h%`a!e%`a~P#.{O#i%baP%baR%ba[%baa%bap%ba!Q%ba!Z%ba!j%ba!n%ba#P%ba#l%ba#m%ba#n%ba#o%ba#p%ba#q%ba#r%ba#s%ba#t%ba#u%ba#w%ba#y%ba#z%ba'x%ba(_%ba(p%ba!i%ba!W%ba'u%ba#^%bat%ba!]%ba%h%ba!e%ba~P#.{O#i{aP{a[{aa{ap{a!j{a!n{a#P{a#l{a#m{a#n{a#o{a#p{a#q{a#r{a#s{a#t{a#u{a#w{a#y{a#z{a'x{a(_{a(p{a!i{a!W{a'u{at{a!]{a%h{a!e{a~P$&dO#i$raP$raR$ra[$raa$rap$ra!Q$ra!j$ra!n$ra#P$ra#l$ra#m$ra#n$ra#o$ra#p$ra#q$ra#r$ra#s$ra#t$ra#u$ra#w$ra#y$ra#z$ra'x$ra(_$ra(p$ra!i$ra!W$ra'u$rat$ra!]$ra%h$ra!e$ra~P$'`O#i$taP$taR$ta[$taa$tap$ta!Q$ta!j$ta!n$ta#P$ta#l$ta#m$ta#n$ta#o$ta#p$ta#q$ta#r$ta#s$ta#t$ta#u$ta#w$ta#y$ta#z$ta'x$ta(_$ta(p$ta!i$ta!W$ta'u$tat$ta!]$ta%h$ta!e$ta~P$(RO#i%SaP%SaR%Sa[%Saa%Sap%Sa!Q%Sa!Z%Sa!j%Sa!n%Sa#P%Sa#l%Sa#m%Sa#n%Sa#o%Sa#p%Sa#q%Sa#r%Sa#s%Sa#t%Sa#u%Sa#w%Sa#y%Sa#z%Sa'x%Sa(_%Sa(p%Sa!i%Sa!W%Sa'u%Sa#^%Sat%Sa!]%Sa%h%Sa!e%Sa~P#.{Oa#aq!Z#aq'x#aq'u#aq!W#aq!i#aqt#aq!]#aq%h#aq!e#aq~P!:TO!Y3dO!Z'WX!i'WX~P%[O!Z.oO!i(ia~O!Z.oO!i(ia~P!:TO!W3gO~O#}!la![!la~PKZO#}!ha!Z!ha![!ha~P#BPO#}!pa![!pa~P!<kO#}!ra![!ra~P!?ROg'ZX!Z'ZX~P!+rO!Z.zOg(na~OSfO!]3{O$c3|O~O![4QO~Ot4RO~P#.{Oa$lq!Z$lq'x$lq'u$lq!W$lq!i$lqt$lq!]$lq%h$lq!e$lq~P!:TO!W4TO~P!&iO!Q4UO~O!O)|O'w)}O(x%POl'ga(w'ga!Z'ga#^'ga~Og'ga#}'ga~P%+uO!O)|O'w)}Ol'ia(w'ia(x'ia!Z'ia#^'ia~Og'ia#}'ia~P%,hO(p$YO~P#.{O!WfX!W$yX!ZfX!Z$yX!e%QX#^fX~P!/qO(R<xO~P!1dO!Q%gO!Y4XO!]%hO(R%fO!Z'cX!i'cX~O!Z/kO!i(|a~O!Z/kO!e#vO!i(|a~O!Z/kO!e#vO(p'nO!i(|a~Og${i!Z${i#^${i#}${i~P!0uO!Y4aO!W'eX!Z'eX~P!3cO!Z/sO!W(}a~O!Z/sO!W(}a~P#.{OP]XR]X[]Xp]X!O]X!Q]X!W]X!Z]X!j]X!n]X#P]X#Q]X#^]X#ifX#l]X#m]X#n]X#o]X#p]X#q]X#r]X#s]X#t]X#u]X#w]X#y]X#z]X$P]X(_]X(p]X(w]X(x]X~O!e%XX#t%XX~P%0XO!e#vO#t4fO~Oh%VO!e#vO!j%dO~Oh%VOp4kO!j%dO(p'nO~Op4pO!e#vO(p'nO~Oq!nO!Q4qO(TTO(WUO(c!mO~O(w$}Ol%`i!O%`i'w%`i(x%`i!Z%`i#^%`i~Og%`i#}%`i~P%3xO(x%POl%bi!O%bi'w%bi(w%bi!Z%bi#^%bi~Og%bi#}%bi~P%4kOg(]i!Z(]i~P!0uO#^4wOg(]i!Z(]i~P!0uO!i4zO~Oa$nq!Z$nq'x$nq'u$nq!W$nq!i$nqt$nq!]$nq%h$nq!e$nq~P!:TO!W5QO~O!Z5RO!])OX~P#.{Oa]Xa$yX!]]X!]$yX%]]X'x]X'x$yX!Z]X!Z$yX~P!/qO%]5UOa%Za!]%Za'x%Za!Z%Za~OlmX!OmX'wmX(wmX(xmX~P%7nOn5VO(R#nO~Ob5]O%i5^O(R+nO(TTO(WUO!Z'rX!['rX~O!Z0}O![)Va~O[5bO~O`5cO~Oa%mO'x%mO~P#.{O!Z5kO#^5mO![)SX~O![5nO~Op5tOq!nO!Q*fO!`!yO!a!vO!b!vO!z;wO#R!pO#S!pO#T!pO#U!pO#V!pO#Y5sO#Z!zO(S!lO(TTO(WUO(c!mO(m!sO~O![5rO~P%:ROl5yO!]1gO%h5xO~Oh%VOl5yO!]1gO%h5xO~Ob6QO(R#nO(TTO(WUO!Z'qX!['qX~O!Z1rO![)Ta~O(TTO(WUO(c6SO~O`6WO~O#t6ZO&Y6[O~PMvO!i6]O~P%[Oa6_O~Oa6_O~P%[Ob2YO![6dO&h2XO~P`O!e6fO~O!e6hOh(hi!Z(hi![(hi!e(hi!j(hip(hi(p(hi~O!Z#fi![#fi~P#BPO#^6iO!Z#fi![#fi~O!Z!_i![!_i~P#BPOa%mO#^6rO'x%mO~Oa%mO!e#vO#^6rO'x%mO~O!Z(rq!i(rqa(rq'x(rq~P!:TO!Z(hO!i(qq~O!Q%gO!]%hO#h6yO(R%fO~O!]'^O%h6|O~Ol7QO!]'^O%h6|O~O#i'gaP'gaR'ga['gaa'gap'ga!Q'ga!j'ga!n'ga#P'ga#l'ga#m'ga#n'ga#o'ga#p'ga#q'ga#r'ga#s'ga#t'ga#u'ga#w'ga#y'ga#z'ga'x'ga(_'ga(p'ga!i'ga!W'ga'u'gat'ga!]'ga%h'ga!e'ga~P%+uO#i'iaP'iaR'ia['iaa'iap'ia!Q'ia!j'ia!n'ia#P'ia#l'ia#m'ia#n'ia#o'ia#p'ia#q'ia#r'ia#s'ia#t'ia#u'ia#w'ia#y'ia#z'ia'x'ia(_'ia(p'ia!i'ia!W'ia'u'iat'ia!]'ia%h'ia!e'ia~P%,hO#i${iP${iR${i[${ia${ip${i!Q${i!Z${i!j${i!n${i#P${i#l${i#m${i#n${i#o${i#p${i#q${i#r${i#s${i#t${i#u${i#w${i#y${i#z${i'x${i(_${i(p${i!i${i!W${i'u${i#^${it${i!]${i%h${i!e${i~P#.{O#i%`iP%`iR%`i[%`ia%`ip%`i!Q%`i!j%`i!n%`i#P%`i#l%`i#m%`i#n%`i#o%`i#p%`i#q%`i#r%`i#s%`i#t%`i#u%`i#w%`i#y%`i#z%`i'x%`i(_%`i(p%`i!i%`i!W%`i'u%`it%`i!]%`i%h%`i!e%`i~P%3xO#i%biP%biR%bi[%bia%bip%bi!Q%bi!j%bi!n%bi#P%bi#l%bi#m%bi#n%bi#o%bi#p%bi#q%bi#r%bi#s%bi#t%bi#u%bi#w%bi#y%bi#z%bi'x%bi(_%bi(p%bi!i%bi!W%bi'u%bit%bi!]%bi%h%bi!e%bi~P%4kO!Z'Wa!i'Wa~P!:TO!Z.oO!i(ii~O#}#ai!Z#ai![#ai~P#BPOP$[OR#zO!O#yO!Q#{O!j#xO!n$[O(_VO[#kip#ki#P#ki#m#ki#n#ki#o#ki#p#ki#q#ki#r#ki#s#ki#t#ki#u#ki#w#ki#y#ki#z#ki#}#ki(p#ki(w#ki(x#ki!Z#ki![#ki~O#l#ki~P%MQO#l<PO~P%MQOP$[OR#zOp<]O!O#yO!Q#{O!j#xO!n$[O#l<PO#m<QO#n<QO#o<QO(_VO[#ki#P#ki#q#ki#r#ki#s#ki#t#ki#u#ki#w#ki#y#ki#z#ki#}#ki(p#ki(w#ki(x#ki!Z#ki![#ki~O#p#ki~P& YO#p<RO~P& YOP$[OR#zO[<_Op<]O!O#yO!Q#{O!j#xO!n$[O#P<SO#l<PO#m<QO#n<QO#o<QO#p<RO#q<SO#r<SO#s<^O#t<SO(_VO#w#ki#y#ki#z#ki#}#ki(p#ki(w#ki(x#ki!Z#ki![#ki~O#u#ki~P&#bOP$[OR#zO[<_Op<]O!O#yO!Q#{O!j#xO!n$[O#P<SO#l<PO#m<QO#n<QO#o<QO#p<RO#q<SO#r<SO#s<^O#t<SO#u<TO(_VO(x#}O#y#ki#z#ki#}#ki(p#ki(w#ki!Z#ki![#ki~O#w<VO~P&%cO#w#ki~P&%cO#u<TO~P&#bOP$[OR#zO[<_Op<]O!O#yO!Q#{O!j#xO!n$[O#P<SO#l<PO#m<QO#n<QO#o<QO#p<RO#q<SO#r<SO#s<^O#t<SO#u<TO#w<VO(_VO(w#|O(x#}O#z#ki#}#ki(p#ki!Z#ki![#ki~O#y#ki~P&'rO#y<XO~P&'rOa#{y!Z#{y'x#{y'u#{y!W#{y!i#{yt#{y!]#{y%h#{y!e#{y~P!:TO[#kip#ki#P#ki#p#ki#q#ki#r#ki#s#ki#t#ki#u#ki#w#ki#y#ki#z#ki#}#ki(p#ki!Z#ki![#ki~OP$[OR#zO!O#yO!Q#{O!j#xO!n$[O#l<PO#m<QO#n<QO#o<QO(_VO(w#ki(x#ki~P&*nOl=}O!O)|O'w)}O(w$}O(x%POP#kiR#ki!Q#ki!j#ki!n#ki#l#ki#m#ki#n#ki#o#ki(_#ki~P&*nO#Q$dOP(^XR(^X[(^Xl(^Xp(^X!O(^X!Q(^X!j(^X!n(^X#P(^X#l(^X#m(^X#n(^X#o(^X#p(^X#q(^X#r(^X#s(^X#t(^X#u(^X#w(^X#y(^X#z(^X#}(^X'w(^X(_(^X(p(^X(w(^X(x(^X!Z(^X![(^X~O#}$Oi!Z$Oi![$Oi~P#BPO#}!pi![!pi~P$*OOg'Za!Z'Za~P!0uO![7dO~O!Z'ba!['ba~P#BPO!W7eO~P#.{O!e#vO(p'nO!Z'ca!i'ca~O!Z/kO!i(|i~O!Z/kO!e#vO!i(|i~Og${q!Z${q#^${q#}${q~P!0uO!W'ea!Z'ea~P#.{O!e7lO~O!Z/sO!W(}i~P#.{O!Z/sO!W(}i~O!W7oO~Oh%VOp7tO!j%dO(p'nO~O!e#vO#t7vO~Op7yO!e#vO(p'nO~O!O)|O'w)}O(x%POl'ha(w'ha!Z'ha#^'ha~Og'ha#}'ha~P&3oO!O)|O'w)}Ol'ja(w'ja(x'ja!Z'ja#^'ja~Og'ja#}'ja~P&4bO!W7{O~Og$}q!Z$}q#^$}q#}$}q~P!0uOg(]q!Z(]q~P!0uO#^7|Og(]q!Z(]q~P!0uOa$ny!Z$ny'x$ny'u$ny!W$ny!i$nyt$ny!]$ny%h$ny!e$ny~P!:TO!e6hO~O!Z5RO!])Oa~O!]'^OP$SaR$Sa[$Sap$Sa!O$Sa!Q$Sa!Z$Sa!j$Sa!n$Sa#P$Sa#l$Sa#m$Sa#n$Sa#o$Sa#p$Sa#q$Sa#r$Sa#s$Sa#t$Sa#u$Sa#w$Sa#y$Sa#z$Sa(_$Sa(p$Sa(w$Sa(x$Sa~O%h6|O~P&7SO%]8QOa%Zi!]%Zi'x%Zi!Z%Zi~Oa#ay!Z#ay'x#ay'u#ay!W#ay!i#ayt#ay!]#ay%h#ay!e#ay~P!:TO[8SO~Ob8UO(R+nO(TTO(WUO~O!Z0}O![)Vi~O`8YO~O(c(zO!Z'nX!['nX~O!Z5kO![)Sa~O![8cO~P%:RO(m!sO~P$$oO#Y8dO~O!]1gO~O!]1gO%h8fO~Ol8iO!]1gO%h8fO~O[8nO!Z'qa!['qa~O!Z1rO![)Ti~O!i8rO~O!i8sO~O!i8vO~O!i8vO~P%[Oa8xO~O!e8yO~O!i8zO~O!Z(ui![(ui~P#BPOa%mO#^9SO'x%mO~O!Z(ry!i(rya(ry'x(ry~P!:TO!Z(hO!i(qy~O%h9VO~P&7SO!]'^O%h9VO~O#i${qP${qR${q[${qa${qp${q!Q${q!Z${q!j${q!n${q#P${q#l${q#m${q#n${q#o${q#p${q#q${q#r${q#s${q#t${q#u${q#w${q#y${q#z${q'x${q(_${q(p${q!i${q!W${q'u${q#^${qt${q!]${q%h${q!e${q~P#.{O#i'haP'haR'ha['haa'hap'ha!Q'ha!j'ha!n'ha#P'ha#l'ha#m'ha#n'ha#o'ha#p'ha#q'ha#r'ha#s'ha#t'ha#u'ha#w'ha#y'ha#z'ha'x'ha(_'ha(p'ha!i'ha!W'ha'u'hat'ha!]'ha%h'ha!e'ha~P&3oO#i'jaP'jaR'ja['jaa'jap'ja!Q'ja!j'ja!n'ja#P'ja#l'ja#m'ja#n'ja#o'ja#p'ja#q'ja#r'ja#s'ja#t'ja#u'ja#w'ja#y'ja#z'ja'x'ja(_'ja(p'ja!i'ja!W'ja'u'jat'ja!]'ja%h'ja!e'ja~P&4bO#i$}qP$}qR$}q[$}qa$}qp$}q!Q$}q!Z$}q!j$}q!n$}q#P$}q#l$}q#m$}q#n$}q#o$}q#p$}q#q$}q#r$}q#s$}q#t$}q#u$}q#w$}q#y$}q#z$}q'x$}q(_$}q(p$}q!i$}q!W$}q'u$}q#^$}qt$}q!]$}q%h$}q!e$}q~P#.{O!Z'Wi!i'Wi~P!:TO#}#aq!Z#aq![#aq~P#BPO(w$}OP%`aR%`a[%`ap%`a!Q%`a!j%`a!n%`a#P%`a#l%`a#m%`a#n%`a#o%`a#p%`a#q%`a#r%`a#s%`a#t%`a#u%`a#w%`a#y%`a#z%`a#}%`a(_%`a(p%`a!Z%`a![%`a~Ol%`a!O%`a'w%`a(x%`a~P&HgO(x%POP%baR%ba[%bap%ba!Q%ba!j%ba!n%ba#P%ba#l%ba#m%ba#n%ba#o%ba#p%ba#q%ba#r%ba#s%ba#t%ba#u%ba#w%ba#y%ba#z%ba#}%ba(_%ba(p%ba!Z%ba![%ba~Ol%ba!O%ba'w%ba(w%ba~P&JnOl=}O!O)|O'w)}O(x%PO~P&HgOl=}O!O)|O'w)}O(w$}O~P&JnOR0cO!O0cO!Q0dO#Q$dOP{a[{al{ap{a!j{a!n{a#P{a#l{a#m{a#n{a#o{a#p{a#q{a#r{a#s{a#t{a#u{a#w{a#y{a#z{a#}{a'w{a(_{a(p{a(w{a(x{a!Z{a![{a~O!O)|O'w)}OP$raR$ra[$ral$rap$ra!Q$ra!j$ra!n$ra#P$ra#l$ra#m$ra#n$ra#o$ra#p$ra#q$ra#r$ra#s$ra#t$ra#u$ra#w$ra#y$ra#z$ra#}$ra(_$ra(p$ra(w$ra(x$ra!Z$ra![$ra~O!O)|O'w)}OP$taR$ta[$tal$tap$ta!Q$ta!j$ta!n$ta#P$ta#l$ta#m$ta#n$ta#o$ta#p$ta#q$ta#r$ta#s$ta#t$ta#u$ta#w$ta#y$ta#z$ta#}$ta(_$ta(p$ta(w$ta(x$ta!Z$ta![$ta~Ol=}O!O)|O'w)}O(w$}O(x%PO~OP%SaR%Sa[%Sap%Sa!Q%Sa!j%Sa!n%Sa#P%Sa#l%Sa#m%Sa#n%Sa#o%Sa#p%Sa#q%Sa#r%Sa#s%Sa#t%Sa#u%Sa#w%Sa#y%Sa#z%Sa#}%Sa(_%Sa(p%Sa!Z%Sa![%Sa~P'%sO#}$lq!Z$lq![$lq~P#BPO#}$nq!Z$nq![$nq~P#BPO![9dO~O#}9eO~P!0uO!e#vO!Z'ci!i'ci~O!e#vO(p'nO!Z'ci!i'ci~O!Z/kO!i(|q~O!W'ei!Z'ei~P#.{O!Z/sO!W(}q~Op9lO!e#vO(p'nO~O[9nO!W9mO~P#.{O!W9mO~O!e#vO#t9tO~Og(]y!Z(]y~P!0uO!Z'la!]'la~P#.{Oa%Zq!]%Zq'x%Zq!Z%Zq~P#.{O[9yO~O!Z0}O![)Vq~O#^9}O!Z'na!['na~O!Z5kO![)Si~P#BPO!Q:PO~O!]1gO%h:SO~O(TTO(WUO(c:XO~O!Z1rO![)Tq~O!i:[O~O!i:]O~O!i:^O~O!i:^O~P%[O#^:aO!Z#fy![#fy~O!Z#fy![#fy~P#BPO%h:fO~P&7SO!]'^O%h:fO~O#}#{y!Z#{y![#{y~P#BPOP${iR${i[${ip${i!Q${i!j${i!n${i#P${i#l${i#m${i#n${i#o${i#p${i#q${i#r${i#s${i#t${i#u${i#w${i#y${i#z${i#}${i(_${i(p${i!Z${i![${i~P'%sO!O)|O'w)}O(x%POP'gaR'ga['gal'gap'ga!Q'ga!j'ga!n'ga#P'ga#l'ga#m'ga#n'ga#o'ga#p'ga#q'ga#r'ga#s'ga#t'ga#u'ga#w'ga#y'ga#z'ga#}'ga(_'ga(p'ga(w'ga!Z'ga!['ga~O!O)|O'w)}OP'iaR'ia['ial'iap'ia!Q'ia!j'ia!n'ia#P'ia#l'ia#m'ia#n'ia#o'ia#p'ia#q'ia#r'ia#s'ia#t'ia#u'ia#w'ia#y'ia#z'ia#}'ia(_'ia(p'ia(w'ia(x'ia!Z'ia!['ia~O(w$}OP%`iR%`i[%`il%`ip%`i!O%`i!Q%`i!j%`i!n%`i#P%`i#l%`i#m%`i#n%`i#o%`i#p%`i#q%`i#r%`i#s%`i#t%`i#u%`i#w%`i#y%`i#z%`i#}%`i'w%`i(_%`i(p%`i(x%`i!Z%`i![%`i~O(x%POP%biR%bi[%bil%bip%bi!O%bi!Q%bi!j%bi!n%bi#P%bi#l%bi#m%bi#n%bi#o%bi#p%bi#q%bi#r%bi#s%bi#t%bi#u%bi#w%bi#y%bi#z%bi#}%bi'w%bi(_%bi(p%bi(w%bi!Z%bi![%bi~O#}$ny!Z$ny![$ny~P#BPO#}#ay!Z#ay![#ay~P#BPO!e#vO!Z'cq!i'cq~O!Z/kO!i(|y~O!W'eq!Z'eq~P#.{Op:pO!e#vO(p'nO~O[:tO!W:sO~P#.{O!W:sO~Og(]!R!Z(]!R~P!0uOa%Zy!]%Zy'x%Zy!Z%Zy~P#.{O!Z0}O![)Vy~O!Z5kO![)Sq~O(R:zO~O!]1gO%h:}O~O!i;QO~O%h;VO~P&7SOP${qR${q[${qp${q!Q${q!j${q!n${q#P${q#l${q#m${q#n${q#o${q#p${q#q${q#r${q#s${q#t${q#u${q#w${q#y${q#z${q#}${q(_${q(p${q!Z${q![${q~P'%sO!O)|O'w)}O(x%POP'haR'ha['hal'hap'ha!Q'ha!j'ha!n'ha#P'ha#l'ha#m'ha#n'ha#o'ha#p'ha#q'ha#r'ha#s'ha#t'ha#u'ha#w'ha#y'ha#z'ha#}'ha(_'ha(p'ha(w'ha!Z'ha!['ha~O!O)|O'w)}OP'jaR'ja['jal'jap'ja!Q'ja!j'ja!n'ja#P'ja#l'ja#m'ja#n'ja#o'ja#p'ja#q'ja#r'ja#s'ja#t'ja#u'ja#w'ja#y'ja#z'ja#}'ja(_'ja(p'ja(w'ja(x'ja!Z'ja!['ja~OP$}qR$}q[$}qp$}q!Q$}q!j$}q!n$}q#P$}q#l$}q#m$}q#n$}q#o$}q#p$}q#q$}q#r$}q#s$}q#t$}q#u$}q#w$}q#y$}q#z$}q#}$}q(_$}q(p$}q!Z$}q![$}q~P'%sOg%d!Z!Z%d!Z#^%d!Z#}%d!Z~P!0uO!W;ZO~P#.{Op;[O!e#vO(p'nO~O[;^O!W;ZO~P#.{O!Z'nq!['nq~P#BPO!Z#f!Z![#f!Z~P#BPO#i%d!ZP%d!ZR%d!Z[%d!Za%d!Zp%d!Z!Q%d!Z!Z%d!Z!j%d!Z!n%d!Z#P%d!Z#l%d!Z#m%d!Z#n%d!Z#o%d!Z#p%d!Z#q%d!Z#r%d!Z#s%d!Z#t%d!Z#u%d!Z#w%d!Z#y%d!Z#z%d!Z'x%d!Z(_%d!Z(p%d!Z!i%d!Z!W%d!Z'u%d!Z#^%d!Zt%d!Z!]%d!Z%h%d!Z!e%d!Z~P#.{Op;fO!e#vO(p'nO~O!W;gO~P#.{Op;nO!e#vO(p'nO~O!W;oO~P#.{OP%d!ZR%d!Z[%d!Zp%d!Z!Q%d!Z!j%d!Z!n%d!Z#P%d!Z#l%d!Z#m%d!Z#n%d!Z#o%d!Z#p%d!Z#q%d!Z#r%d!Z#s%d!Z#t%d!Z#u%d!Z#w%d!Z#y%d!Z#z%d!Z#}%d!Z(_%d!Z(p%d!Z!Z%d!Z![%d!Z~P'%sOp;rO!e#vO(p'nO~Ot(dX~P1qO!O%qO~P!(yO(S!lO~P!(yO!WfX!ZfX#^fX~P%0XOP]XR]X[]Xp]X!O]X!Q]X!Z]X!ZfX!j]X!n]X#P]X#Q]X#^]X#^fX#ifX#l]X#m]X#n]X#o]X#p]X#q]X#r]X#s]X#t]X#u]X#w]X#y]X#z]X$P]X(_]X(p]X(w]X(x]X~O!efX!i]X!ifX(pfX~P'JlOP;vOQ;vOSfOd=rOe!iOnkOp;vOqkOrkOxkOz;vO|;vO!QWO!UkO!VkO!]XO!g;yO!jZO!m;vO!n;vO!o;vO!q;zO!s;}O!v!hO$V!kO$m=pO(R)ZO(TTO(WUO(_VO(m[O~O!Z<ZO![$pa~Oh%VOn%WOp%XOq$tOr$tOx%YOz%ZO|<fO!Q${O!]$|O!g=wO!j$xO#h<lO$V%_O$s<hO$u<jO$x%`O(R(tO(TTO(WUO(_$uO(w$}O(x%PO~Oj)bO~P( bOp!cX(p!cX~P# qOp(hX(p(hX~P#!dO![]X![fX~P'JlO!WfX!W$yX!ZfX!Z$yX#^fX~P!/qO#i<OO~O!e#vO#i<OO~O#^<`O~O#t<SO~O#^<pO!Z(uX![(uX~O#^<`O!Z(sX![(sX~O#i<qO~Og<sO~P!0uO#i<yO~O#i<zO~O!e#vO#i<{O~O!e#vO#i<qO~O#}<|O~P#BPO#i<}O~O#i=OO~O#i=TO~O#i=UO~O#i=VO~O#i=WO~O#}=XO~P!0uO#}=YO~P!0uO#Q#R#S#U#V#Y#g#h#s$m$s$u$x%[%]%g%h%i%p%r%u%v%x%z~'|T#m!V'z(S#nq#l#op!O'{$['{(R$^(c~",
      goto: "$8f)ZPPPPPP)[PP)_P)pP+Q/VPPPP6aPP6wPP<oP@cP@yP@yPPP@yPCRP@yP@yP@yPCVPC[PCyPHsPPPHwPPPPHwKzPPPLQLrPHwPHwPP! QHwPPPHwPHwP!#XHwP!&o!'t!'}P!(q!(u!(q!,SPPPPPPP!,s!'tPP!-T!.uP!2RHwHw!2W!5d!:Q!:Q!>PPPP!>XHwPPPPPPPPPP!AhP!BuPPHw!DWPHwPHwHwHwHwHwPHw!EjP!HtP!KzP!LO!LY!L^!L^P!HqP!Lb!LbP# hP# lHwPHw# r#$wCV@yP@yP@y@yP#&U@y@y#(h@y#+`@y#-l@y@y#.[#0p#0p#0u#1O#0p#1ZPP#0pP@y#1s@y#5r@y@y6aPPP#9wPPP#:b#:bP#:bP#:x#:bPP#;OP#:uP#:u#;c#:u#;}#<T#<W)_#<Z)_P#<b#<b#<bP)_P)_P)_P)_PP)_P#<h#<kP#<k)_P#<oP#<rP)_P)_P)_P)_P)_P)_)_PP#<x#=O#=Z#=a#=g#=m#=s#>R#>X#>c#>i#>s#>y#?Z#?a#@R#@e#@k#@q#AP#Af#CZ#Ci#Cp#E[#Ej#G[#Gj#Gp#Gv#G|#HW#H^#Hd#Hn#IQ#IWPPPPPPPPPPP#I^PPPPPPP#JR#MY#Nr#Ny$ RPPP$&mP$&v$)o$0Y$0]$0`$1_$1b$1i$1qP$1w$1zP$2h$2l$3d$4r$4w$5_PP$5d$5j$5n$5q$5u$5y$6u$7^$7u$7y$7|$8P$8V$8Y$8^$8bR!|RoqOXst!Z#d%l&p&r&s&u,n,s2S2VY!vQ'^-`1g5qQ%svQ%{yQ&S|Q&h!VS'U!e-WQ'd!iS'j!r!yU*h$|*X*lQ+l%|Q+y&UQ,_&bQ-^']Q-h'eQ-p'kQ0U*nQ1q,`R<m;z%SdOPWXYZstuvw!Z!`!g!o#S#W#Z#d#o#u#x#{$O$P$Q$R$S$T$U$V$W$X$_$a$e%l%s&Q&i&l&p&r&s&u&y'R'`'p(R(T(Z(b(v(x(|){*f+U+Y,k,n,s-d-l-z.Q.o.v/i0V0d0l0|1j1z1{1}2P2S2V2X2x3O3d4q5y6Z6[6_6r8i8x9SS#q];w!r)]$Z$n'V)q-P-S/Q2h3{5m6i9}:a;v;y;z;}<O<P<Q<R<S<T<U<V<W<X<Y<Z<]<`<m<p<q<s<{<|=V=W=sU*{%[<e<fQ+q&OQ,a&eQ,h&mQ0r+dQ0u+fQ1S+rQ1y,fQ3W.bQ5V0wQ5]0}Q6Q1rQ7O3[Q8U5^R9Y7Q'QkOPWXYZstuvw!Z!`!g!o#S#W#Z#d#o#u#x#{$O$P$Q$R$S$T$U$V$W$X$Z$_$a$e$n%l%s&Q&i&l&m&p&r&s&u&y'R'V'`'p(R(T(Z(b(v(x(|)q){*f+U+Y+d,k,n,s-P-S-d-l-z.Q.b.o.v/Q/i0V0d0l0|1j1z1{1}2P2S2V2X2h2x3O3[3d3{4q5m5y6Z6[6_6i6r7Q8i8x9S9}:a;v;y;z;}<O<P<Q<R<S<T<U<V<W<X<Y<Z<]<`<m<p<q<s<{<|=V=W=s!S!nQ!r!v!y!z$|'U']'^'j'k'l*h*l*n*o-W-^-`-p0U0X1g5q5s%[$ti#v$b$c$d$x${%O%Q%]%^%b)w*P*R*T*W*^*d*t*u+c+f+},Q.a.z/_/h/r/s/u0Y0[0g0h0i1^1a1i3Z4U4V4a4f4w5R5U5x6|7l7v7|8Q8f9V9e9n9t:S:f:t:};V;^<^<_<a<b<c<d<g<h<i<j<k<l<t<u<v<w<y<z<}=O=P=Q=R=S=T=U=X=Y=p=x=y=|=}Q&V|Q'S!eS'Y%h-ZQ+q&OQ,a&eQ0f+OQ1S+rQ1X+xQ1x,eQ1y,fQ5]0}Q5f1ZQ6Q1rQ6T1tQ6U1wQ8U5^Q8X5cQ8q6WQ9|8YQ:Y8nR<o*XrnOXst!V!Z#d%l&g&p&r&s&u,n,s2S2VR,c&i&z^OPXYstuvwz!Z!`!g!j!o#S#d#o#u#x#{$O$P$Q$R$S$T$U$V$W$X$Z$_$a$e$n%l%s&Q&i&l&m&p&r&s&u&y'R'`'p(T(Z(b(v(x(|)q){*f+U+Y+d,k,n,s-P-S-d-l-z.Q.b.o.v/Q/i0V0d0l0|1j1z1{1}2P2S2V2X2h2x3O3[3d3{4q5m5y6Z6[6_6i6r7Q8i8x9S9}:a;v;y;z;}<O<P<Q<R<S<T<U<V<W<X<Y<Z<]<`<m<p<q<s<{<|=V=W=r=s[#]WZ#W#Z'V(R!b%im#h#i#l$x%d%g([(f(g(h*W*[*_+W+X+Z,j-Q.O.U.V.W.Y/h/k2[3S3T4X6h6yQ%vxQ%zyS&P|&UQ&]!TQ'a!hQ'c!iQ(o#sS+k%{%|Q+o&OQ,Y&`Q,^&bS-g'd'eQ.d(pQ0{+lQ1R+rQ1T+sQ1W+wQ1l,ZS1p,_,`Q2t-hQ5[0}Q5`1QQ5e1YQ6P1qQ8T5^Q8W5bQ9x8SR:w9y!U$zi$d%O%Q%]%^%b*P*R*^*t*u.z/r0Y0[0g0h0i4V4w7|9e=p=x=y!^%xy!i!u%z%{%|'T'c'd'e'i's*g+k+l-T-g-h-o/{0O0{2m2t2{4i4j4m7s9pQ+e%vQ,O&YQ,R&ZQ,]&bQ.c(oQ1k,YU1o,^,_,`Q3].dQ5z1lS6O1p1qQ8m6P#f=t#v$b$c$x${)w*T*W*d+c+f+},Q.a/_/h/s/u1^1a1i3Z4U4a4f5R5U5x6|7l7v8Q8f9V9n9t:S:f:t:};V;^<a<c<g<i<k<t<v<y<}=P=R=T=X=|=}o=u<^<_<b<d<h<j<l<u<w<z=O=Q=S=U=YW%Ti%V*v=pS&Y!Q&gQ&Z!RQ&[!SQ+S%cR+|&W%]%Si#v$b$c$d$x${%O%Q%]%^%b)w*P*R*T*W*^*d*t*u+c+f+},Q.a.z/_/h/r/s/u0Y0[0g0h0i1^1a1i3Z4U4V4a4f4w5R5U5x6|7l7v7|8Q8f9V9e9n9t:S:f:t:};V;^<^<_<a<b<c<d<g<h<i<j<k<l<t<u<v<w<y<z<}=O=P=Q=R=S=T=U=X=Y=p=x=y=|=}T)x$u)yV*{%[<e<fW'Y!e%h*X-ZS({#y#zQ+`%qQ+v&RS.](k(lQ1b,SQ4x0cR8^5k'QkOPWXYZstuvw!Z!`!g!o#S#W#Z#d#o#u#x#{$O$P$Q$R$S$T$U$V$W$X$Z$_$a$e$n%l%s&Q&i&l&m&p&r&s&u&y'R'V'`'p(R(T(Z(b(v(x(|)q){*f+U+Y+d,k,n,s-P-S-d-l-z.Q.b.o.v/Q/i0V0d0l0|1j1z1{1}2P2S2V2X2h2x3O3[3d3{4q5m5y6Z6[6_6i6r7Q8i8x9S9}:a;v;y;z;}<O<P<Q<R<S<T<U<V<W<X<Y<Z<]<`<m<p<q<s<{<|=V=W=s$i$^c#Y#e%p%r%t(Q(W(r(w)P)Q)R)S)T)U)V)W)X)Y)[)^)`)e)o+a+u-U-s-x-}.P.n.q.u.w.x.y/]0j2c2f2v2}3c3h3i3j3k3l3m3n3o3p3q3r3s3t3w3x4P5O5Y6k6q6v7V7W7a7b8`8|9Q9[9b9c:c:y;R;x=gT#TV#U'RkOPWXYZstuvw!Z!`!g!o#S#W#Z#d#o#u#x#{$O$P$Q$R$S$T$U$V$W$X$Z$_$a$e$n%l%s&Q&i&l&m&p&r&s&u&y'R'V'`'p(R(T(Z(b(v(x(|)q){*f+U+Y+d,k,n,s-P-S-d-l-z.Q.b.o.v/Q/i0V0d0l0|1j1z1{1}2P2S2V2X2h2x3O3[3d3{4q5m5y6Z6[6_6i6r7Q8i8x9S9}:a;v;y;z;}<O<P<Q<R<S<T<U<V<W<X<Y<Z<]<`<m<p<q<s<{<|=V=W=sQ'W!eR2i-W!W!nQ!e!r!v!y!z$|'U']'^'j'k'l*X*h*l*n*o-W-^-`-p0U0X1g5q5sR1d,UnqOXst!Z#d%l&p&r&s&u,n,s2S2VQ&w!^Q't!xS(q#u<OQ+i%yQ,W&]Q,X&_Q-e'bQ-r'mS.m(v<qS0k+U<{Q0y+jQ1f,VQ2Z,uQ2],vQ2e-RQ2r-fQ2u-jS5P0l=VQ5W0zS5Z0|=WQ6j2gQ6n2sQ6s2zQ8R5XQ8}6lQ9O6oQ9R6tR:`8z$d$]c#Y#e%r%t(Q(W(r(w)P)Q)R)S)T)U)V)W)X)Y)[)^)`)e)o+a+u-U-s-x-}.P.n.q.u.x.y/]0j2c2f2v2}3c3h3i3j3k3l3m3n3o3p3q3r3s3t3w3x4P5O5Y6k6q6v7V7W7a7b8`8|9Q9[9b9c:c:y;R;x=gS(m#p'gQ(}#zS+_%p.wS.^(l(nR3U._'QkOPWXYZstuvw!Z!`!g!o#S#W#Z#d#o#u#x#{$O$P$Q$R$S$T$U$V$W$X$Z$_$a$e$n%l%s&Q&i&l&m&p&r&s&u&y'R'V'`'p(R(T(Z(b(v(x(|)q){*f+U+Y+d,k,n,s-P-S-d-l-z.Q.b.o.v/Q/i0V0d0l0|1j1z1{1}2P2S2V2X2h2x3O3[3d3{4q5m5y6Z6[6_6i6r7Q8i8x9S9}:a;v;y;z;}<O<P<Q<R<S<T<U<V<W<X<Y<Z<]<`<m<p<q<s<{<|=V=W=sS#q];wQ&r!XQ&s!YQ&u![Q&v!]R2R,qQ'_!hQ+b%vQ-c'aS.`(o+eQ2p-bW3Y.c.d0q0sQ6m2qW6z3V3X3]5TU9U6{6}7PU:e9W9X9ZS;T:d:gQ;b;UR;j;cU!wQ'^-`T5o1g5q!Q_OXZ`st!V!Z#d#h%d%l&g&i&p&r&s&u(h,n,s.V2S2V]!pQ!r'^-`1g5qT#q];w%^{OPWXYZstuvw!Z!`!g!o#S#W#Z#d#o#u#x#{$O$P$Q$R$S$T$U$V$W$X$_$a$e%l%s&Q&i&l&m&p&r&s&u&y'R'`'p(R(T(Z(b(v(x(|){*f+U+Y+d,k,n,s-d-l-z.Q.b.o.v/i0V0d0l0|1j1z1{1}2P2S2V2X2x3O3[3d4q5y6Z6[6_6r7Q8i8x9SS({#y#zS.](k(l!s=^$Z$n'V)q-P-S/Q2h3{5m6i9}:a;v;y;z;}<O<P<Q<R<S<T<U<V<W<X<Y<Z<]<`<m<p<q<s<{<|=V=W=sU$fd)],hS(n#p'gU*s%R(u3vU0e*z.i7]Q5T0rQ6{3WQ9X7OR:g9Ym!tQ!r!v!y!z'^'j'k'l-`-p1g5q5sQ'r!uS(d#g1|S-n'i'uQ/n*ZQ/{*gQ2|-qQ4]/oQ4i/}Q4j0OQ4o0WQ7h4WS7s4k4mS7w4p4rQ9g7iQ9k7oQ9p7tQ9u7yS:o9l9mS;Y:p:sS;e;Z;[S;m;f;gS;q;n;oR;t;rQ#wbQ'q!uS(c#g1|S(e#m+TQ+V%eQ+g%wQ+m%}U-m'i'r'uQ.R(dQ/m*ZQ/|*gQ0P*iQ0x+hQ1m,[S2y-n-qQ3R.ZS4[/n/oQ4e/yS4h/{0WQ4l0QQ5|1nQ6u2|Q7g4WQ7k4]U7r4i4o4rQ7u4nQ8k5}S9f7h7iQ9j7oQ9r7wQ9s7xQ:V8lQ:m9gS:n9k9mQ:v9uQ;P:WS;X:o:sS;d;Y;ZS;l;e;gS;p;m;oQ;s;qQ;u;tQ=a=[Q=l=eR=m=fV!wQ'^-`%^aOPWXYZstuvw!Z!`!g!o#S#W#Z#d#o#u#x#{$O$P$Q$R$S$T$U$V$W$X$_$a$e%l%s&Q&i&l&m&p&r&s&u&y'R'`'p(R(T(Z(b(v(x(|){*f+U+Y+d,k,n,s-d-l-z.Q.b.o.v/i0V0d0l0|1j1z1{1}2P2S2V2X2x3O3[3d4q5y6Z6[6_6r7Q8i8x9SS#wz!j!r=Z$Z$n'V)q-P-S/Q2h3{5m6i9}:a;v;y;z;}<O<P<Q<R<S<T<U<V<W<X<Y<Z<]<`<m<p<q<s<{<|=V=W=sR=a=r%^bOPWXYZstuvw!Z!`!g!o#S#W#Z#d#o#u#x#{$O$P$Q$R$S$T$U$V$W$X$_$a$e%l%s&Q&i&l&m&p&r&s&u&y'R'`'p(R(T(Z(b(v(x(|){*f+U+Y+d,k,n,s-d-l-z.Q.b.o.v/i0V0d0l0|1j1z1{1}2P2S2V2X2x3O3[3d4q5y6Z6[6_6r7Q8i8x9SQ%ej!^%wy!i!u%z%{%|'T'c'd'e'i's*g+k+l-T-g-h-o/{0O0{2m2t2{4i4j4m7s9pS%}z!jQ+h%xQ,[&bW1n,],^,_,`U5}1o1p1qS8l6O6PQ:W8m!r=[$Z$n'V)q-P-S/Q2h3{5m6i9}:a;v;y;z;}<O<P<Q<R<S<T<U<V<W<X<Y<Z<]<`<m<p<q<s<{<|=V=W=sQ=e=qR=f=r%QeOPXYstuvw!Z!`!g!o#S#d#o#u#x#{$O$P$Q$R$S$T$U$V$W$X$_$a$e%l%s&Q&i&l&p&r&s&u&y'R'`'p(T(Z(b(v(x(|){*f+U+Y+d,k,n,s-d-l-z.Q.b.o.v/i0V0d0l0|1j1z1{1}2P2S2V2X2x3O3[3d4q5y6Z6[6_6r7Q8i8x9SY#bWZ#W#Z(R!b%im#h#i#l$x%d%g([(f(g(h*W*[*_+W+X+Z,j-Q.O.U.V.W.Y/h/k2[3S3T4X6h6yQ,i&m!p=]$Z$n)q-P-S/Q2h3{5m6i9}:a;v;y;z;}<O<P<Q<R<S<T<U<V<W<X<Y<Z<]<`<m<p<q<s<{<|=V=W=sR=`'VU'Z!e%h*XR2k-Z%SdOPWXYZstuvw!Z!`!g!o#S#W#Z#d#o#u#x#{$O$P$Q$R$S$T$U$V$W$X$_$a$e%l%s&Q&i&l&p&r&s&u&y'R'`'p(R(T(Z(b(v(x(|){*f+U+Y,k,n,s-d-l-z.Q.o.v/i0V0d0l0|1j1z1{1}2P2S2V2X2x3O3d4q5y6Z6[6_6r8i8x9S!r)]$Z$n'V)q-P-S/Q2h3{5m6i9}:a;v;y;z;}<O<P<Q<R<S<T<U<V<W<X<Y<Z<]<`<m<p<q<s<{<|=V=W=sQ,h&mQ0r+dQ3W.bQ7O3[R9Y7Q!b$Tc#Y%p(Q(W(r(w)X)Y)^)e+u-s-x-}.P.n.q/]0j2v2}3c3s5O5Y6q6v7V9Q:c;x!P<U)[)o-U.w2c2f3h3q3r3w4P6k7W7a7b8`8|9[9b9c:y;R=g!f$Vc#Y%p(Q(W(r(w)U)V)X)Y)^)e+u-s-x-}.P.n.q/]0j2v2}3c3s5O5Y6q6v7V9Q:c;x!T<W)[)o-U.w2c2f3h3n3o3q3r3w4P6k7W7a7b8`8|9[9b9c:y;R=g!^$Zc#Y%p(Q(W(r(w)^)e+u-s-x-}.P.n.q/]0j2v2}3c3s5O5Y6q6v7V9Q:c;xQ4V/fz=s)[)o-U.w2c2f3h3w4P6k7W7a7b8`8|9[9b9c:y;R=gQ=x=zR=y={'QkOPWXYZstuvw!Z!`!g!o#S#W#Z#d#o#u#x#{$O$P$Q$R$S$T$U$V$W$X$Z$_$a$e$n%l%s&Q&i&l&m&p&r&s&u&y'R'V'`'p(R(T(Z(b(v(x(|)q){*f+U+Y+d,k,n,s-P-S-d-l-z.Q.b.o.v/Q/i0V0d0l0|1j1z1{1}2P2S2V2X2h2x3O3[3d3{4q5m5y6Z6[6_6i6r7Q8i8x9S9}:a;v;y;z;}<O<P<Q<R<S<T<U<V<W<X<Y<Z<]<`<m<p<q<s<{<|=V=W=sS$oh$pR3|/P'XgOPWXYZhstuvw!Z!`!g!o#S#W#Z#d#o#u#x#{$O$P$Q$R$S$T$U$V$W$X$Z$_$a$e$n$p%l%s&Q&i&l&m&p&r&s&u&y'R'V'`'p(R(T(Z(b(v(x(|)q){*f+U+Y+d,k,n,s-P-S-d-l-z.Q.b.o.v/P/Q/i0V0d0l0|1j1z1{1}2P2S2V2X2h2x3O3[3d3{4q5m5y6Z6[6_6i6r7Q8i8x9S9}:a;v;y;z;}<O<P<Q<R<S<T<U<V<W<X<Y<Z<]<`<m<p<q<s<{<|=V=W=sT$kf$qQ$ifS)h$l)lR)t$qT$jf$qT)j$l)l'XhOPWXYZhstuvw!Z!`!g!o#S#W#Z#d#o#u#x#{$O$P$Q$R$S$T$U$V$W$X$Z$_$a$e$n$p%l%s&Q&i&l&m&p&r&s&u&y'R'V'`'p(R(T(Z(b(v(x(|)q){*f+U+Y+d,k,n,s-P-S-d-l-z.Q.b.o.v/P/Q/i0V0d0l0|1j1z1{1}2P2S2V2X2h2x3O3[3d3{4q5m5y6Z6[6_6i6r7Q8i8x9S9}:a;v;y;z;}<O<P<Q<R<S<T<U<V<W<X<Y<Z<]<`<m<p<q<s<{<|=V=W=sT$oh$pQ$rhR)s$p%^jOPWXYZstuvw!Z!`!g!o#S#W#Z#d#o#u#x#{$O$P$Q$R$S$T$U$V$W$X$_$a$e%l%s&Q&i&l&m&p&r&s&u&y'R'`'p(R(T(Z(b(v(x(|){*f+U+Y+d,k,n,s-d-l-z.Q.b.o.v/i0V0d0l0|1j1z1{1}2P2S2V2X2x3O3[3d4q5y6Z6[6_6r7Q8i8x9S!s=q$Z$n'V)q-P-S/Q2h3{5m6i9}:a;v;y;z;}<O<P<Q<R<S<T<U<V<W<X<Y<Z<]<`<m<p<q<s<{<|=V=W=s#glOPXZst!Z!`!o#S#d#o#{$n%l&i&l&m&p&r&s&u&y'R'`(|)q*f+Y+d,k,n,s-d.b/Q/i0V0d1j1z1{1}2P2S2V2X3[3{4q5y6Z6[6_7Q8i8x!U%Ri$d%O%Q%]%^%b*P*R*^*t*u.z/r0Y0[0g0h0i4V4w7|9e=p=x=y#f(u#v$b$c$x${)w*T*W*d+c+f+},Q.a/_/h/s/u1^1a1i3Z4U4a4f5R5U5x6|7l7v8Q8f9V9n9t:S:f:t:};V;^<a<c<g<i<k<t<v<y<}=P=R=T=X=|=}Q+P%`Q/^)|o3v<^<_<b<d<h<j<l<u<w<z=O=Q=S=U=Y!U$yi$d%O%Q%]%^%b*P*R*^*t*u.z/r0Y0[0g0h0i4V4w7|9e=p=x=yQ*`$zU*i$|*X*lQ+Q%aQ0Q*j#f=c#v$b$c$x${)w*T*W*d+c+f+},Q.a/_/h/s/u1^1a1i3Z4U4a4f5R5U5x6|7l7v8Q8f9V9n9t:S:f:t:};V;^<a<c<g<i<k<t<v<y<}=P=R=T=X=|=}n=d<^<_<b<d<h<j<l<u<w<z=O=Q=S=U=YQ=h=tQ=i=uQ=j=vR=k=w!U%Ri$d%O%Q%]%^%b*P*R*^*t*u.z/r0Y0[0g0h0i4V4w7|9e=p=x=y#f(u#v$b$c$x${)w*T*W*d+c+f+},Q.a/_/h/s/u1^1a1i3Z4U4a4f5R5U5x6|7l7v8Q8f9V9n9t:S:f:t:};V;^<a<c<g<i<k<t<v<y<}=P=R=T=X=|=}o3v<^<_<b<d<h<j<l<u<w<z=O=Q=S=U=YnoOXst!Z#d%l&p&r&s&u,n,s2S2VS*c${*WQ,|&|Q,}'OR4`/s%[%Si#v$b$c$d$x${%O%Q%]%^%b)w*P*R*T*W*^*d*t*u+c+f+},Q.a.z/_/h/r/s/u0Y0[0g0h0i1^1a1i3Z4U4V4a4f4w5R5U5x6|7l7v7|8Q8f9V9e9n9t:S:f:t:};V;^<^<_<a<b<c<d<g<h<i<j<k<l<t<u<v<w<y<z<}=O=P=Q=R=S=T=U=X=Y=p=x=y=|=}Q,P&ZQ1`,RQ5i1_R8]5jV*k$|*X*lU*k$|*X*lT5p1g5qS/y*f/iQ4n0VT7x4q:PQ+g%wQ0P*iQ0x+hQ1m,[Q5|1nQ8k5}Q:V8lR;P:W!U%Oi$d%O%Q%]%^%b*P*R*^*t*u.z/r0Y0[0g0h0i4V4w7|9e=p=x=yx*P$v)c*Q*r+R/q0^0_3y4^4{4|4}7f7z9v:l=b=n=oS0Y*q0Z#f<a#v$b$c$x${)w*T*W*d+c+f+},Q.a/_/h/s/u1^1a1i3Z4U4a4f5R5U5x6|7l7v8Q8f9V9n9t:S:f:t:};V;^<a<c<g<i<k<t<v<y<}=P=R=T=X=|=}n<b<^<_<b<d<h<j<l<u<w<z=O=Q=S=U=Y!d<t(s)a*Y*b.e.h.l/Y/f/v0p1]3`4S4_4c5h7R7U7m7p7}8P9i9q9w:q:u;W;];h=z={`<u3u7X7[7`9]:h:k;kS=P.g3aT=Q7Z9`!U%Qi$d%O%Q%]%^%b*P*R*^*t*u.z/r0Y0[0g0h0i4V4w7|9e=p=x=y|*R$v)c*S*q+R/b/q0^0_3y4^4s4{4|4}7f7z9v:l=b=n=oS0[*r0]#f<c#v$b$c$x${)w*T*W*d+c+f+},Q.a/_/h/s/u1^1a1i3Z4U4a4f5R5U5x6|7l7v8Q8f9V9n9t:S:f:t:};V;^<a<c<g<i<k<t<v<y<}=P=R=T=X=|=}n<d<^<_<b<d<h<j<l<u<w<z=O=Q=S=U=Y!h<v(s)a*Y*b.f.g.l/Y/f/v0p1]3^3`4S4_4c5h7R7S7U7m7p7}8P9i9q9w:q:u;W;];h=z={d<w3u7Y7Z7`9]9^:h:i:k;kS=R.h3bT=S7[9arnOXst!V!Z#d%l&g&p&r&s&u,n,s2S2VQ&d!UR,k&mrnOXst!V!Z#d%l&g&p&r&s&u,n,s2S2VR&d!UQ,T&[R1[+|snOXst!V!Z#d%l&g&p&r&s&u,n,s2S2VQ1h,YS5w1k1lU8e5u5v5zS:R8g8hS:{:Q:TQ;_:|R;i;`Q&k!VR,d&gR6T1tR:Y8nS&P|&UR1T+sQ&p!WR,n&qR,t&vT2T,s2VR,x&wQ,w&wR2^,xQ'w!{R-t'wSsOtQ#dXT%os#dQ#OTR'y#OQ#RUR'{#RQ)y$uR/Z)yQ#UVR(O#UQ#XWU(U#X(V-{Q(V#YR-{(WQ-X'WR2j-XQ.p(wS3e.p3fR3f.qQ-`'^R2n-`Y!rQ'^-`1g5qR'h!rQ.{)cR3z.{U#_W%g*WU(]#_(^-|Q(^#`R-|(XQ-['ZR2l-[t`OXst!V!Z#d%l&g&i&p&r&s&u,n,s2S2VS#hZ%dU#r`#h.VR.V(hQ(i#jQ.S(eW.[(i.S3P6wQ3P.TR6w3QQ)l$lR/R)lQ$phR)r$pQ$`cU)_$`-w<[Q-w;xR<[)oQ/l*ZW4Y/l4Z7j9hU4Z/m/n/oS7j4[4]R9h7k$e*O$v(s)a)c*Y*b*q*r*|*}+R.g.h.j.k.l/Y/b/d/f/q/v0^0_0p1]3^3_3`3u3y4S4^4_4c4s4u4{4|4}5h7R7S7T7U7Z7[7^7_7`7f7m7p7z7}8P9]9^9_9i9q9v9w:h:i:j:k:l:q:u;W;];h;k=b=n=o=z={Q/t*bU4b/t4d7nQ4d/vR7n4cS*l$|*XR0S*lx*Q$v)c*q*r+R/q0^0_3y4^4{4|4}7f7z9v:l=b=n=o!d.e(s)a*Y*b.g.h.l/Y/f/v0p1]3`4S4_4c5h7R7U7m7p7}8P9i9q9w:q:u;W;];h=z={U/c*Q.e7Xa7X3u7Z7[7`9]:h:k;kQ0Z*qQ3a.gU4t0Z3a9`R9`7Z|*S$v)c*q*r+R/b/q0^0_3y4^4s4{4|4}7f7z9v:l=b=n=o!h.f(s)a*Y*b.g.h.l/Y/f/v0p1]3^3`4S4_4c5h7R7S7U7m7p7}8P9i9q9w:q:u;W;];h=z={U/e*S.f7Ye7Y3u7Z7[7`9]9^:h:i:k;kQ0]*rQ3b.hU4v0]3b9aR9a7[Q*w%UR0a*wQ5S0pR8O5SQ+[%jR0o+[Q5l1bS8_5l:OR:O8`Q,V&]R1e,VQ5q1gR8b5qQ1s,aS6R1s8oR8o6TQ1O+oW5_1O5a8V9zQ5a1RQ8V5`R9z8WQ+t&PR1U+tQ2V,sR6c2VYrOXst#dQ&t!ZQ+^%lQ,m&pQ,o&rQ,p&sQ,r&uQ2Q,nS2T,s2VR6b2SQ%npQ&x!_Q&{!aQ&}!bQ'P!cQ'o!uQ+]%kQ+i%yQ+{&VQ,c&kQ,z&zW-k'i'q'r'uQ-r'mQ0R*kQ0y+jS1v,d,gQ2_,yQ2`,|Q2a,}Q2u-jW2w-m-n-q-sQ5W0zQ5d1XQ5g1]Q5{1mQ6V1xQ6a2RU6p2v2y2|Q6s2zQ8R5XQ8Z5fQ8[5hQ8a5pQ8j5|Q8p6US9P6q6uQ9R6tQ9{8XQ:U8kQ:Z8qQ:b9QQ:x9|Q;O:VQ;S:cR;a;PQ%yyQ'b!iQ'm!uU+j%z%{%|Q-R'TU-f'c'd'eS-j'i'sQ/z*gS0z+k+lQ2g-TS2s-g-hQ2z-oS4g/{0OQ5X0{Q6l2mQ6o2tQ6t2{U7q4i4j4mQ9o7sR:r9pS$wi=pR*x%VU%Ui%V=pR0`*vQ$viS(s#v+fS)a$b$cQ)c$dQ*Y$xS*b${*WQ*q%OQ*r%QQ*|%]Q*}%^Q+R%bQ.g<aQ.h<cQ.j<gQ.k<iQ.l<kQ/Y)wQ/b*PQ/d*RQ/f*TQ/q*^S/v*d/hQ0^*tQ0_*ul0p+c,Q.a1a1i3Z5x6|8f9V:S:f:};VQ1]+}Q3^<tQ3_<vQ3`<yS3u<^<_Q3y.zS4S/_4UQ4^/rQ4_/sQ4c/uQ4s0YQ4u0[Q4{0gQ4|0hQ4}0iQ5h1^Q7R<}Q7S=PQ7T=RQ7U=TQ7Z<bQ7[<dQ7^<hQ7_<jQ7`<lQ7f4VQ7m4aQ7p4fQ7z4wQ7}5RQ8P5UQ9]<zQ9^<uQ9_<wQ9i7lQ9q7vQ9v7|Q9w8QQ:h=OQ:i=QQ:j=SQ:k=UQ:l9eQ:q9nQ:u9tQ;W=XQ;]:tQ;h;^Q;k=YQ=b=pQ=n=xQ=o=yQ=z=|R={=}Q*z%[Q.i<eR7]<fnpOXst!Z#d%l&p&r&s&u,n,s2S2VQ!fPS#fZ#oQ&z!`W'f!o*f0V4qQ'}#SQ)O#{Q)p$nS,g&i&lQ,l&mQ,y&yS-O'R/iQ-b'`Q.s(|Q/V)qQ0m+YQ0s+dQ2O,kQ2q-dQ3X.bQ4O/QQ4y0dQ5v1jQ6X1zQ6Y1{Q6^1}Q6`2PQ6e2XQ7P3[Q7c3{Q8h5yQ8t6ZQ8u6[Q8w6_Q9Z7QQ:T8iR:_8x#[cOPXZst!Z!`!o#d#o#{%l&i&l&m&p&r&s&u&y'R'`(|*f+Y+d,k,n,s-d.b/i0V0d1j1z1{1}2P2S2V2X3[4q5y6Z6[6_7Q8i8xQ#YWQ#eYQ%puQ%rvS%tw!gS(Q#W(TQ(W#ZQ(r#uQ(w#xQ)P$OQ)Q$PQ)R$QQ)S$RQ)T$SQ)U$TQ)V$UQ)W$VQ)X$WQ)Y$XQ)[$ZQ)^$_Q)`$aQ)e$eW)o$n)q/Q3{Q+a%sQ+u&QS-U'V2hQ-s'pS-x(R-zQ-}(ZQ.P(bQ.n(vQ.q(xQ.u;vQ.w;yQ.x;zQ.y;}Q/]){Q0j+UQ2c-PQ2f-SQ2v-lQ2}.QQ3c.oQ3h<OQ3i<PQ3j<QQ3k<RQ3l<SQ3m<TQ3n<UQ3o<VQ3p<WQ3q<XQ3r<YQ3s.vQ3t<]Q3w<`Q3x<mQ4P<ZQ5O0lQ5Y0|Q6k<pQ6q2xQ6v3OQ7V3dQ7W<qQ7a<sQ7b<{Q8`5mQ8|6iQ9Q6rQ9[<|Q9b=VQ9c=WQ:c9SQ:y9}Q;R:aQ;x#SR=g=sR#[WR'X!el!tQ!r!v!y!z'^'j'k'l-`-p1g5q5sS'T!e-WU*g$|*X*lS-T'U']S0O*h*nQ0W*oQ2m-^Q4m0UR4r0XR(y#xQ!fQT-_'^-`]!qQ!r'^-`1g5qQ#p]R'g;wR)d$dY!uQ'^-`1g5qQ'i!rS's!v!yS'u!z5sS-o'j'kQ-q'lR2{-pT#kZ%dS#jZ%dS%jm,jU(e#h#i#lS.T(f(gQ.X(hQ0n+ZQ3Q.UU3R.V.W.YS6x3S3TR9T6yd#^W#W#Z%g(R([*W+W.O/hr#gZm#h#i#l%d(f(g(h+Z.U.V.W.Y3S3T6yS*Z$x*_Q/o*[Q1|,jQ2d-QQ4W/kQ6g2[Q7i4XQ8{6hT=_'V+XV#aW%g*WU#`W%g*WS(S#W([U(X#Z+W/hS-V'V+XT-y(R.OV'[!e%h*XQ$lfR)v$qT)k$l)lR3}/PT*]$x*_T*e${*WQ0q+cQ1_,QQ3V.aQ5j1aQ5u1iQ6}3ZQ8g5xQ9W6|Q:Q8fQ:d9VQ:|:SQ;U:fQ;`:}R;c;VnqOXst!Z#d%l&p&r&s&u,n,s2S2VQ&j!VR,c&gtmOXst!U!V!Z#d%l&g&p&r&s&u,n,s2S2VR,j&mT%km,jR1c,SR,b&eQ&T|R+z&UR+p&OT&n!W&qT&o!W&qT2U,s2V",
      nodeNames: "⚠ ArithOp ArithOp ?. JSXStartTag LineComment BlockComment Script Hashbang ExportDeclaration export Star as VariableName String Escape from ; default FunctionDeclaration async function VariableDefinition > < TypeParamList const TypeDefinition extends ThisType this LiteralType ArithOp Number BooleanLiteral TemplateType InterpolationEnd Interpolation InterpolationStart NullType null VoidType void TypeofType typeof MemberExpression . PropertyName [ TemplateString Escape Interpolation super RegExp ] ArrayExpression Spread , } { ObjectExpression Property async get set PropertyDefinition Block : NewTarget new NewExpression ) ( ArgList UnaryExpression delete LogicOp BitOp YieldExpression yield AwaitExpression await ParenthesizedExpression ClassExpression class ClassBody MethodDeclaration Decorator @ MemberExpression PrivatePropertyName CallExpression TypeArgList CompareOp < declare Privacy static abstract override PrivatePropertyDefinition PropertyDeclaration readonly accessor Optional TypeAnnotation Equals StaticBlock FunctionExpression ArrowFunction ParamList ParamList ArrayPattern ObjectPattern PatternProperty Privacy readonly Arrow MemberExpression BinaryExpression ArithOp ArithOp ArithOp ArithOp BitOp CompareOp instanceof satisfies in CompareOp BitOp BitOp BitOp LogicOp LogicOp ConditionalExpression LogicOp LogicOp AssignmentExpression UpdateOp PostfixExpression CallExpression InstantiationExpression TaggedTemplateExpression DynamicImport import ImportMeta JSXElement JSXSelfCloseEndTag JSXSelfClosingTag JSXIdentifier JSXBuiltin JSXIdentifier JSXNamespacedName JSXMemberExpression JSXSpreadAttribute JSXAttribute JSXAttributeValue JSXEscape JSXEndTag JSXOpenTag JSXFragmentTag JSXText JSXEscape JSXStartCloseTag JSXCloseTag PrefixCast < ArrowFunction TypeParamList SequenceExpression InstantiationExpression KeyofType keyof UniqueType unique ImportType InferredType infer TypeName ParenthesizedType FunctionSignature ParamList NewSignature IndexedType TupleType Label ArrayType ReadonlyType ObjectType MethodType PropertyType IndexSignature PropertyDefinition CallSignature TypePredicate asserts is NewSignature new UnionType LogicOp IntersectionType LogicOp ConditionalType ParameterizedType ClassDeclaration abstract implements type VariableDeclaration let var using TypeAliasDeclaration InterfaceDeclaration interface EnumDeclaration enum EnumBody NamespaceDeclaration namespace module AmbientDeclaration declare GlobalDeclaration global ClassDeclaration ClassBody AmbientFunctionDeclaration ExportGroup VariableName VariableName ImportDeclaration ImportGroup ForStatement for ForSpec ForInSpec ForOfSpec of WhileStatement while WithStatement with DoStatement do IfStatement if else SwitchStatement switch SwitchBody CaseLabel case DefaultLabel TryStatement try CatchClause catch FinallyClause finally ReturnStatement return ThrowStatement throw BreakStatement break ContinueStatement continue DebuggerStatement debugger LabeledStatement ExpressionStatement SingleExpression SingleClassItem",
      maxTerm: 378,
      context: trackNewline,
      nodeProps: [
        ["isolate", -8,5,6,14,35,37,49,51,53,""],
        ["group", -26,9,17,19,66,206,210,214,215,217,220,223,233,235,241,243,245,247,250,256,262,264,266,268,270,272,273,"Statement",-34,13,14,30,33,34,40,49,52,53,55,60,68,70,74,78,80,82,83,108,109,118,119,135,138,140,141,142,143,144,146,147,166,168,170,"Expression",-23,29,31,35,39,41,43,172,174,176,177,179,180,181,183,184,185,187,188,189,200,202,204,205,"Type",-3,86,101,107,"ClassItem"],
        ["openedBy", 23,"<",36,"InterpolationStart",54,"[",58,"{",71,"(",159,"JSXStartCloseTag"],
        ["closedBy", -2,24,167,">",38,"InterpolationEnd",48,"]",59,"}",72,")",164,"JSXEndTag"]
      ],
      propSources: [jsHighlight],
      skippedNodes: [0,5,6,276],
      repeatNodeCount: 37,
      tokenData: "$Fq07[R!bOX%ZXY+gYZ-yZ[+g[]%Z]^.c^p%Zpq+gqr/mrs3cst:_tuEruvJSvwLkwx! Yxy!'iyz!(sz{!)}{|!,q|}!.O}!O!,q!O!P!/Y!P!Q!9j!Q!R#:O!R![#<_![!]#I_!]!^#Jk!^!_#Ku!_!`$![!`!a$$v!a!b$*T!b!c$,r!c!}Er!}#O$-|#O#P$/W#P#Q$4o#Q#R$5y#R#SEr#S#T$7W#T#o$8b#o#p$<r#p#q$=h#q#r$>x#r#s$@U#s$f%Z$f$g+g$g#BYEr#BY#BZ$A`#BZ$ISEr$IS$I_$A`$I_$I|Er$I|$I}$Dk$I}$JO$Dk$JO$JTEr$JT$JU$A`$JU$KVEr$KV$KW$A`$KW&FUEr&FU&FV$A`&FV;'SEr;'S;=`I|<%l?HTEr?HT?HU$A`?HUOEr(n%d_$h&j(Up(X!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z&j&hT$h&jO!^&c!_#o&c#p;'S&c;'S;=`&w<%lO&c&j&zP;=`<%l&c'|'U]$h&j(X!bOY&}YZ&cZw&}wx&cx!^&}!^!_'}!_#O&}#O#P&c#P#o&}#o#p'}#p;'S&};'S;=`(l<%lO&}!b(SU(X!bOY'}Zw'}x#O'}#P;'S'};'S;=`(f<%lO'}!b(iP;=`<%l'}'|(oP;=`<%l&}'[(y]$h&j(UpOY(rYZ&cZr(rrs&cs!^(r!^!_)r!_#O(r#O#P&c#P#o(r#o#p)r#p;'S(r;'S;=`*a<%lO(rp)wU(UpOY)rZr)rs#O)r#P;'S)r;'S;=`*Z<%lO)rp*^P;=`<%l)r'[*dP;=`<%l(r#S*nX(Up(X!bOY*gZr*grs'}sw*gwx)rx#O*g#P;'S*g;'S;=`+Z<%lO*g#S+^P;=`<%l*g(n+dP;=`<%l%Z07[+rq$h&j(Up(X!b'z0/lOX%ZXY+gYZ&cZ[+g[p%Zpq+gqr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p$f%Z$f$g+g$g#BY%Z#BY#BZ+g#BZ$IS%Z$IS$I_+g$I_$JT%Z$JT$JU+g$JU$KV%Z$KV$KW+g$KW&FU%Z&FU&FV+g&FV;'S%Z;'S;=`+a<%l?HT%Z?HT?HU+g?HUO%Z07[.ST(V#S$h&j'{0/lO!^&c!_#o&c#p;'S&c;'S;=`&w<%lO&c07[.n_$h&j(Up(X!b'{0/lOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z)3p/x`$h&j!n),Q(Up(X!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`0z!`#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z(KW1V`#u(Ch$h&j(Up(X!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`2X!`#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z(KW2d_#u(Ch$h&j(Up(X!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z'At3l_(T':f$h&j(X!bOY4kYZ5qZr4krs7nsw4kwx5qx!^4k!^!_8p!_#O4k#O#P5q#P#o4k#o#p8p#p;'S4k;'S;=`:X<%lO4k(^4r_$h&j(X!bOY4kYZ5qZr4krs7nsw4kwx5qx!^4k!^!_8p!_#O4k#O#P5q#P#o4k#o#p8p#p;'S4k;'S;=`:X<%lO4k&z5vX$h&jOr5qrs6cs!^5q!^!_6y!_#o5q#o#p6y#p;'S5q;'S;=`7h<%lO5q&z6jT$c`$h&jO!^&c!_#o&c#p;'S&c;'S;=`&w<%lO&c`6|TOr6yrs7]s;'S6y;'S;=`7b<%lO6y`7bO$c``7eP;=`<%l6y&z7kP;=`<%l5q(^7w]$c`$h&j(X!bOY&}YZ&cZw&}wx&cx!^&}!^!_'}!_#O&}#O#P&c#P#o&}#o#p'}#p;'S&};'S;=`(l<%lO&}!r8uZ(X!bOY8pYZ6yZr8prs9hsw8pwx6yx#O8p#O#P6y#P;'S8p;'S;=`:R<%lO8p!r9oU$c`(X!bOY'}Zw'}x#O'}#P;'S'};'S;=`(f<%lO'}!r:UP;=`<%l8p(^:[P;=`<%l4k%9[:hh$h&j(Up(X!bOY%ZYZ&cZq%Zqr<Srs&}st%ZtuCruw%Zwx(rx!^%Z!^!_*g!_!c%Z!c!}Cr!}#O%Z#O#P&c#P#R%Z#R#SCr#S#T%Z#T#oCr#o#p*g#p$g%Z$g;'SCr;'S;=`El<%lOCr(r<__WS$h&j(Up(X!bOY<SYZ&cZr<Srs=^sw<Swx@nx!^<S!^!_Bm!_#O<S#O#P>`#P#o<S#o#pBm#p;'S<S;'S;=`Cl<%lO<S(Q=g]WS$h&j(X!bOY=^YZ&cZw=^wx>`x!^=^!^!_?q!_#O=^#O#P>`#P#o=^#o#p?q#p;'S=^;'S;=`@h<%lO=^&n>gXWS$h&jOY>`YZ&cZ!^>`!^!_?S!_#o>`#o#p?S#p;'S>`;'S;=`?k<%lO>`S?XSWSOY?SZ;'S?S;'S;=`?e<%lO?SS?hP;=`<%l?S&n?nP;=`<%l>`!f?xWWS(X!bOY?qZw?qwx?Sx#O?q#O#P?S#P;'S?q;'S;=`@b<%lO?q!f@eP;=`<%l?q(Q@kP;=`<%l=^'`@w]WS$h&j(UpOY@nYZ&cZr@nrs>`s!^@n!^!_Ap!_#O@n#O#P>`#P#o@n#o#pAp#p;'S@n;'S;=`Bg<%lO@ntAwWWS(UpOYApZrAprs?Ss#OAp#O#P?S#P;'SAp;'S;=`Ba<%lOAptBdP;=`<%lAp'`BjP;=`<%l@n#WBvYWS(Up(X!bOYBmZrBmrs?qswBmwxApx#OBm#O#P?S#P;'SBm;'S;=`Cf<%lOBm#WCiP;=`<%lBm(rCoP;=`<%l<S%9[C}i$h&j(m%1l(Up(X!bOY%ZYZ&cZr%Zrs&}st%ZtuCruw%Zwx(rx!Q%Z!Q![Cr![!^%Z!^!_*g!_!c%Z!c!}Cr!}#O%Z#O#P&c#P#R%Z#R#SCr#S#T%Z#T#oCr#o#p*g#p$g%Z$g;'SCr;'S;=`El<%lOCr%9[EoP;=`<%lCr07[FRk$h&j(Up(X!b$[#t(R,2j(c$I[OY%ZYZ&cZr%Zrs&}st%ZtuEruw%Zwx(rx}%Z}!OGv!O!Q%Z!Q![Er![!^%Z!^!_*g!_!c%Z!c!}Er!}#O%Z#O#P&c#P#R%Z#R#SEr#S#T%Z#T#oEr#o#p*g#p$g%Z$g;'SEr;'S;=`I|<%lOEr+dHRk$h&j(Up(X!b$[#tOY%ZYZ&cZr%Zrs&}st%ZtuGvuw%Zwx(rx}%Z}!OGv!O!Q%Z!Q![Gv![!^%Z!^!_*g!_!c%Z!c!}Gv!}#O%Z#O#P&c#P#R%Z#R#SGv#S#T%Z#T#oGv#o#p*g#p$g%Z$g;'SGv;'S;=`Iv<%lOGv+dIyP;=`<%lGv07[JPP;=`<%lEr(KWJ_`$h&j(Up(X!b#n(ChOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`Ka!`#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z(KWKl_$h&j$P(Ch(Up(X!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z,#xLva(x+JY$h&j(Up(X!bOY%ZYZ&cZr%Zrs&}sv%ZvwM{wx(rx!^%Z!^!_*g!_!`Ka!`#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z(KWNW`$h&j#y(Ch(Up(X!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`Ka!`#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z'At! c_(W';W$h&j(UpOY!!bYZ!#hZr!!brs!#hsw!!bwx!$xx!^!!b!^!_!%z!_#O!!b#O#P!#h#P#o!!b#o#p!%z#p;'S!!b;'S;=`!'c<%lO!!b'l!!i_$h&j(UpOY!!bYZ!#hZr!!brs!#hsw!!bwx!$xx!^!!b!^!_!%z!_#O!!b#O#P!#h#P#o!!b#o#p!%z#p;'S!!b;'S;=`!'c<%lO!!b&z!#mX$h&jOw!#hwx6cx!^!#h!^!_!$Y!_#o!#h#o#p!$Y#p;'S!#h;'S;=`!$r<%lO!#h`!$]TOw!$Ywx7]x;'S!$Y;'S;=`!$l<%lO!$Y`!$oP;=`<%l!$Y&z!$uP;=`<%l!#h'l!%R]$c`$h&j(UpOY(rYZ&cZr(rrs&cs!^(r!^!_)r!_#O(r#O#P&c#P#o(r#o#p)r#p;'S(r;'S;=`*a<%lO(r!Q!&PZ(UpOY!%zYZ!$YZr!%zrs!$Ysw!%zwx!&rx#O!%z#O#P!$Y#P;'S!%z;'S;=`!']<%lO!%z!Q!&yU$c`(UpOY)rZr)rs#O)r#P;'S)r;'S;=`*Z<%lO)r!Q!'`P;=`<%l!%z'l!'fP;=`<%l!!b/5|!'t_!j/.^$h&j(Up(X!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z#&U!)O_!i!Lf$h&j(Up(X!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z-!n!*[b$h&j(Up(X!b(S%&f#o(ChOY%ZYZ&cZr%Zrs&}sw%Zwx(rxz%Zz{!+d{!^%Z!^!_*g!_!`Ka!`#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z(KW!+o`$h&j(Up(X!b#l(ChOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`Ka!`#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z+;x!,|`$h&j(Up(X!bp+4YOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`Ka!`#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z,$U!.Z_!Z+Jf$h&j(Up(X!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z07[!/ec$h&j(Up(X!b!O.2^OY%ZYZ&cZr%Zrs&}sw%Zwx(rx!O%Z!O!P!0p!P!Q%Z!Q![!3Y![!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z#%|!0ya$h&j(Up(X!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!O%Z!O!P!2O!P!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z#%|!2Z_!Y!L^$h&j(Up(X!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z'Ad!3eg$h&j(Up(X!bq'9tOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!Q%Z!Q![!3Y![!^%Z!^!_*g!_!g%Z!g!h!4|!h#O%Z#O#P&c#P#R%Z#R#S!3Y#S#X%Z#X#Y!4|#Y#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z'Ad!5Vg$h&j(Up(X!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx{%Z{|!6n|}%Z}!O!6n!O!Q%Z!Q![!8S![!^%Z!^!_*g!_#O%Z#O#P&c#P#R%Z#R#S!8S#S#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z'Ad!6wc$h&j(Up(X!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!Q%Z!Q![!8S![!^%Z!^!_*g!_#O%Z#O#P&c#P#R%Z#R#S!8S#S#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z'Ad!8_c$h&j(Up(X!bq'9tOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!Q%Z!Q![!8S![!^%Z!^!_*g!_#O%Z#O#P&c#P#R%Z#R#S!8S#S#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z07[!9uf$h&j(Up(X!b#m(ChOY!;ZYZ&cZr!;Zrs!<nsw!;Zwx!Lcxz!;Zz{#-}{!P!;Z!P!Q#/d!Q!^!;Z!^!_#(i!_!`#7S!`!a#8i!a!}!;Z!}#O#,f#O#P!Dy#P#o!;Z#o#p#(i#p;'S!;Z;'S;=`#-w<%lO!;Z?O!;fb$h&j(Up(X!b!V7`OY!;ZYZ&cZr!;Zrs!<nsw!;Zwx!Lcx!P!;Z!P!Q#&`!Q!^!;Z!^!_#(i!_!}!;Z!}#O#,f#O#P!Dy#P#o!;Z#o#p#(i#p;'S!;Z;'S;=`#-w<%lO!;Z>^!<w`$h&j(X!b!V7`OY!<nYZ&cZw!<nwx!=yx!P!<n!P!Q!Eq!Q!^!<n!^!_!Gr!_!}!<n!}#O!KS#O#P!Dy#P#o!<n#o#p!Gr#p;'S!<n;'S;=`!L]<%lO!<n<z!>Q^$h&j!V7`OY!=yYZ&cZ!P!=y!P!Q!>|!Q!^!=y!^!_!@c!_!}!=y!}#O!CW#O#P!Dy#P#o!=y#o#p!@c#p;'S!=y;'S;=`!Ek<%lO!=y<z!?Td$h&j!V7`O!^&c!_#W&c#W#X!>|#X#Z&c#Z#[!>|#[#]&c#]#^!>|#^#a&c#a#b!>|#b#g&c#g#h!>|#h#i&c#i#j!>|#j#k!>|#k#m&c#m#n!>|#n#o&c#p;'S&c;'S;=`&w<%lO&c7`!@hX!V7`OY!@cZ!P!@c!P!Q!AT!Q!}!@c!}#O!Ar#O#P!Bq#P;'S!@c;'S;=`!CQ<%lO!@c7`!AYW!V7`#W#X!AT#Z#[!AT#]#^!AT#a#b!AT#g#h!AT#i#j!AT#j#k!AT#m#n!AT7`!AuVOY!ArZ#O!Ar#O#P!B[#P#Q!@c#Q;'S!Ar;'S;=`!Bk<%lO!Ar7`!B_SOY!ArZ;'S!Ar;'S;=`!Bk<%lO!Ar7`!BnP;=`<%l!Ar7`!BtSOY!@cZ;'S!@c;'S;=`!CQ<%lO!@c7`!CTP;=`<%l!@c<z!C][$h&jOY!CWYZ&cZ!^!CW!^!_!Ar!_#O!CW#O#P!DR#P#Q!=y#Q#o!CW#o#p!Ar#p;'S!CW;'S;=`!Ds<%lO!CW<z!DWX$h&jOY!CWYZ&cZ!^!CW!^!_!Ar!_#o!CW#o#p!Ar#p;'S!CW;'S;=`!Ds<%lO!CW<z!DvP;=`<%l!CW<z!EOX$h&jOY!=yYZ&cZ!^!=y!^!_!@c!_#o!=y#o#p!@c#p;'S!=y;'S;=`!Ek<%lO!=y<z!EnP;=`<%l!=y>^!Ezl$h&j(X!b!V7`OY&}YZ&cZw&}wx&cx!^&}!^!_'}!_#O&}#O#P&c#P#W&}#W#X!Eq#X#Z&}#Z#[!Eq#[#]&}#]#^!Eq#^#a&}#a#b!Eq#b#g&}#g#h!Eq#h#i&}#i#j!Eq#j#k!Eq#k#m&}#m#n!Eq#n#o&}#o#p'}#p;'S&};'S;=`(l<%lO&}8r!GyZ(X!b!V7`OY!GrZw!Grwx!@cx!P!Gr!P!Q!Hl!Q!}!Gr!}#O!JU#O#P!Bq#P;'S!Gr;'S;=`!J|<%lO!Gr8r!Hse(X!b!V7`OY'}Zw'}x#O'}#P#W'}#W#X!Hl#X#Z'}#Z#[!Hl#[#]'}#]#^!Hl#^#a'}#a#b!Hl#b#g'}#g#h!Hl#h#i'}#i#j!Hl#j#k!Hl#k#m'}#m#n!Hl#n;'S'};'S;=`(f<%lO'}8r!JZX(X!bOY!JUZw!JUwx!Arx#O!JU#O#P!B[#P#Q!Gr#Q;'S!JU;'S;=`!Jv<%lO!JU8r!JyP;=`<%l!JU8r!KPP;=`<%l!Gr>^!KZ^$h&j(X!bOY!KSYZ&cZw!KSwx!CWx!^!KS!^!_!JU!_#O!KS#O#P!DR#P#Q!<n#Q#o!KS#o#p!JU#p;'S!KS;'S;=`!LV<%lO!KS>^!LYP;=`<%l!KS>^!L`P;=`<%l!<n=l!Ll`$h&j(Up!V7`OY!LcYZ&cZr!Lcrs!=ys!P!Lc!P!Q!Mn!Q!^!Lc!^!_# o!_!}!Lc!}#O#%P#O#P!Dy#P#o!Lc#o#p# o#p;'S!Lc;'S;=`#&Y<%lO!Lc=l!Mwl$h&j(Up!V7`OY(rYZ&cZr(rrs&cs!^(r!^!_)r!_#O(r#O#P&c#P#W(r#W#X!Mn#X#Z(r#Z#[!Mn#[#](r#]#^!Mn#^#a(r#a#b!Mn#b#g(r#g#h!Mn#h#i(r#i#j!Mn#j#k!Mn#k#m(r#m#n!Mn#n#o(r#o#p)r#p;'S(r;'S;=`*a<%lO(r8Q# vZ(Up!V7`OY# oZr# ors!@cs!P# o!P!Q#!i!Q!}# o!}#O#$R#O#P!Bq#P;'S# o;'S;=`#$y<%lO# o8Q#!pe(Up!V7`OY)rZr)rs#O)r#P#W)r#W#X#!i#X#Z)r#Z#[#!i#[#])r#]#^#!i#^#a)r#a#b#!i#b#g)r#g#h#!i#h#i)r#i#j#!i#j#k#!i#k#m)r#m#n#!i#n;'S)r;'S;=`*Z<%lO)r8Q#$WX(UpOY#$RZr#$Rrs!Ars#O#$R#O#P!B[#P#Q# o#Q;'S#$R;'S;=`#$s<%lO#$R8Q#$vP;=`<%l#$R8Q#$|P;=`<%l# o=l#%W^$h&j(UpOY#%PYZ&cZr#%Prs!CWs!^#%P!^!_#$R!_#O#%P#O#P!DR#P#Q!Lc#Q#o#%P#o#p#$R#p;'S#%P;'S;=`#&S<%lO#%P=l#&VP;=`<%l#%P=l#&]P;=`<%l!Lc?O#&kn$h&j(Up(X!b!V7`OY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#W%Z#W#X#&`#X#Z%Z#Z#[#&`#[#]%Z#]#^#&`#^#a%Z#a#b#&`#b#g%Z#g#h#&`#h#i%Z#i#j#&`#j#k#&`#k#m%Z#m#n#&`#n#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z9d#(r](Up(X!b!V7`OY#(iZr#(irs!Grsw#(iwx# ox!P#(i!P!Q#)k!Q!}#(i!}#O#+`#O#P!Bq#P;'S#(i;'S;=`#,`<%lO#(i9d#)th(Up(X!b!V7`OY*gZr*grs'}sw*gwx)rx#O*g#P#W*g#W#X#)k#X#Z*g#Z#[#)k#[#]*g#]#^#)k#^#a*g#a#b#)k#b#g*g#g#h#)k#h#i*g#i#j#)k#j#k#)k#k#m*g#m#n#)k#n;'S*g;'S;=`+Z<%lO*g9d#+gZ(Up(X!bOY#+`Zr#+`rs!JUsw#+`wx#$Rx#O#+`#O#P!B[#P#Q#(i#Q;'S#+`;'S;=`#,Y<%lO#+`9d#,]P;=`<%l#+`9d#,cP;=`<%l#(i?O#,o`$h&j(Up(X!bOY#,fYZ&cZr#,frs!KSsw#,fwx#%Px!^#,f!^!_#+`!_#O#,f#O#P!DR#P#Q!;Z#Q#o#,f#o#p#+`#p;'S#,f;'S;=`#-q<%lO#,f?O#-tP;=`<%l#,f?O#-zP;=`<%l!;Z07[#.[b$h&j(Up(X!b'|0/l!V7`OY!;ZYZ&cZr!;Zrs!<nsw!;Zwx!Lcx!P!;Z!P!Q#&`!Q!^!;Z!^!_#(i!_!}!;Z!}#O#,f#O#P!Dy#P#o!;Z#o#p#(i#p;'S!;Z;'S;=`#-w<%lO!;Z07[#/o_$h&j(Up(X!bT0/lOY#/dYZ&cZr#/drs#0nsw#/dwx#4Ox!^#/d!^!_#5}!_#O#/d#O#P#1p#P#o#/d#o#p#5}#p;'S#/d;'S;=`#6|<%lO#/d06j#0w]$h&j(X!bT0/lOY#0nYZ&cZw#0nwx#1px!^#0n!^!_#3R!_#O#0n#O#P#1p#P#o#0n#o#p#3R#p;'S#0n;'S;=`#3x<%lO#0n05W#1wX$h&jT0/lOY#1pYZ&cZ!^#1p!^!_#2d!_#o#1p#o#p#2d#p;'S#1p;'S;=`#2{<%lO#1p0/l#2iST0/lOY#2dZ;'S#2d;'S;=`#2u<%lO#2d0/l#2xP;=`<%l#2d05W#3OP;=`<%l#1p01O#3YW(X!bT0/lOY#3RZw#3Rwx#2dx#O#3R#O#P#2d#P;'S#3R;'S;=`#3r<%lO#3R01O#3uP;=`<%l#3R06j#3{P;=`<%l#0n05x#4X]$h&j(UpT0/lOY#4OYZ&cZr#4Ors#1ps!^#4O!^!_#5Q!_#O#4O#O#P#1p#P#o#4O#o#p#5Q#p;'S#4O;'S;=`#5w<%lO#4O00^#5XW(UpT0/lOY#5QZr#5Qrs#2ds#O#5Q#O#P#2d#P;'S#5Q;'S;=`#5q<%lO#5Q00^#5tP;=`<%l#5Q05x#5zP;=`<%l#4O01p#6WY(Up(X!bT0/lOY#5}Zr#5}rs#3Rsw#5}wx#5Qx#O#5}#O#P#2d#P;'S#5};'S;=`#6v<%lO#5}01p#6yP;=`<%l#5}07[#7PP;=`<%l#/d)3h#7ab$h&j$P(Ch(Up(X!b!V7`OY!;ZYZ&cZr!;Zrs!<nsw!;Zwx!Lcx!P!;Z!P!Q#&`!Q!^!;Z!^!_#(i!_!}!;Z!}#O#,f#O#P!Dy#P#o!;Z#o#p#(i#p;'S!;Z;'S;=`#-w<%lO!;ZAt#8vb$Y#t$h&j(Up(X!b!V7`OY!;ZYZ&cZr!;Zrs!<nsw!;Zwx!Lcx!P!;Z!P!Q#&`!Q!^!;Z!^!_#(i!_!}!;Z!}#O#,f#O#P!Dy#P#o!;Z#o#p#(i#p;'S!;Z;'S;=`#-w<%lO!;Z'Ad#:Zp$h&j(Up(X!bq'9tOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!O%Z!O!P!3Y!P!Q%Z!Q![#<_![!^%Z!^!_*g!_!g%Z!g!h!4|!h#O%Z#O#P&c#P#R%Z#R#S#<_#S#U%Z#U#V#?i#V#X%Z#X#Y!4|#Y#b%Z#b#c#>_#c#d#Bq#d#l%Z#l#m#Es#m#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z'Ad#<jk$h&j(Up(X!bq'9tOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!O%Z!O!P!3Y!P!Q%Z!Q![#<_![!^%Z!^!_*g!_!g%Z!g!h!4|!h#O%Z#O#P&c#P#R%Z#R#S#<_#S#X%Z#X#Y!4|#Y#b%Z#b#c#>_#c#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z'Ad#>j_$h&j(Up(X!bq'9tOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z'Ad#?rd$h&j(Up(X!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!Q%Z!Q!R#AQ!R!S#AQ!S!^%Z!^!_*g!_#O%Z#O#P&c#P#R%Z#R#S#AQ#S#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z'Ad#A]f$h&j(Up(X!bq'9tOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!Q%Z!Q!R#AQ!R!S#AQ!S!^%Z!^!_*g!_#O%Z#O#P&c#P#R%Z#R#S#AQ#S#b%Z#b#c#>_#c#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z'Ad#Bzc$h&j(Up(X!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!Q%Z!Q!Y#DV!Y!^%Z!^!_*g!_#O%Z#O#P&c#P#R%Z#R#S#DV#S#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z'Ad#Dbe$h&j(Up(X!bq'9tOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!Q%Z!Q!Y#DV!Y!^%Z!^!_*g!_#O%Z#O#P&c#P#R%Z#R#S#DV#S#b%Z#b#c#>_#c#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z'Ad#E|g$h&j(Up(X!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!Q%Z!Q![#Ge![!^%Z!^!_*g!_!c%Z!c!i#Ge!i#O%Z#O#P&c#P#R%Z#R#S#Ge#S#T%Z#T#Z#Ge#Z#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z'Ad#Gpi$h&j(Up(X!bq'9tOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!Q%Z!Q![#Ge![!^%Z!^!_*g!_!c%Z!c!i#Ge!i#O%Z#O#P&c#P#R%Z#R#S#Ge#S#T%Z#T#Z#Ge#Z#b%Z#b#c#>_#c#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z*)x#Il_!e$b$h&j#})Lv(Up(X!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z)[#Jv_al$h&j(Up(X!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z04f#LS^h#)`#P-<U(Up(X!b$m7`OY*gZr*grs'}sw*gwx)rx!P*g!P!Q#MO!Q!^*g!^!_#Mt!_!`$ f!`#O*g#P;'S*g;'S;=`+Z<%lO*g(n#MXX$j&j(Up(X!bOY*gZr*grs'}sw*gwx)rx#O*g#P;'S*g;'S;=`+Z<%lO*g(El#M}Z#p(Ch(Up(X!bOY*gZr*grs'}sw*gwx)rx!_*g!_!`#Np!`#O*g#P;'S*g;'S;=`+Z<%lO*g(El#NyX$P(Ch(Up(X!bOY*gZr*grs'}sw*gwx)rx#O*g#P;'S*g;'S;=`+Z<%lO*g(El$ oX#q(Ch(Up(X!bOY*gZr*grs'}sw*gwx)rx#O*g#P;'S*g;'S;=`+Z<%lO*g*)x$!ga#^*!Y$h&j(Up(X!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`0z!`!a$#l!a#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z(K[$#w_#i(Cl$h&j(Up(X!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z*)x$%Vag!*r#q(Ch$e#|$h&j(Up(X!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`$&[!`!a$'f!a#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z(KW$&g_#q(Ch$h&j(Up(X!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z(KW$'qa#p(Ch$h&j(Up(X!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`Ka!`!a$(v!a#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z(KW$)R`#p(Ch$h&j(Up(X!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`Ka!`#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z(Kd$*`a(p(Ct$h&j(Up(X!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!a%Z!a!b$+e!b#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z(KW$+p`$h&j#z(Ch(Up(X!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`Ka!`#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z%#`$,}_!z$Ip$h&j(Up(X!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z04f$.X_!Q0,v$h&j(Up(X!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z(n$/]Z$h&jO!^$0O!^!_$0f!_#i$0O#i#j$0k#j#l$0O#l#m$2^#m#o$0O#o#p$0f#p;'S$0O;'S;=`$4i<%lO$0O(n$0VT_#S$h&jO!^&c!_#o&c#p;'S&c;'S;=`&w<%lO&c#S$0kO_#S(n$0p[$h&jO!Q&c!Q![$1f![!^&c!_!c&c!c!i$1f!i#T&c#T#Z$1f#Z#o&c#o#p$3|#p;'S&c;'S;=`&w<%lO&c(n$1kZ$h&jO!Q&c!Q![$2^![!^&c!_!c&c!c!i$2^!i#T&c#T#Z$2^#Z#o&c#p;'S&c;'S;=`&w<%lO&c(n$2cZ$h&jO!Q&c!Q![$3U![!^&c!_!c&c!c!i$3U!i#T&c#T#Z$3U#Z#o&c#p;'S&c;'S;=`&w<%lO&c(n$3ZZ$h&jO!Q&c!Q![$0O![!^&c!_!c&c!c!i$0O!i#T&c#T#Z$0O#Z#o&c#p;'S&c;'S;=`&w<%lO&c#S$4PR!Q![$4Y!c!i$4Y#T#Z$4Y#S$4]S!Q![$4Y!c!i$4Y#T#Z$4Y#q#r$0f(n$4lP;=`<%l$0O#1[$4z_!W#)l$h&j(Up(X!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z(KW$6U`#w(Ch$h&j(Up(X!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`Ka!`#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z+;p$7c_$h&j(Up(X!b(_+4QOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z07[$8qk$h&j(Up(X!b(R,2j$^#t(c$I[OY%ZYZ&cZr%Zrs&}st%Ztu$8buw%Zwx(rx}%Z}!O$:f!O!Q%Z!Q![$8b![!^%Z!^!_*g!_!c%Z!c!}$8b!}#O%Z#O#P&c#P#R%Z#R#S$8b#S#T%Z#T#o$8b#o#p*g#p$g%Z$g;'S$8b;'S;=`$<l<%lO$8b+d$:qk$h&j(Up(X!b$^#tOY%ZYZ&cZr%Zrs&}st%Ztu$:fuw%Zwx(rx}%Z}!O$:f!O!Q%Z!Q![$:f![!^%Z!^!_*g!_!c%Z!c!}$:f!}#O%Z#O#P&c#P#R%Z#R#S$:f#S#T%Z#T#o$:f#o#p*g#p$g%Z$g;'S$:f;'S;=`$<f<%lO$:f+d$<iP;=`<%l$:f07[$<oP;=`<%l$8b#Jf$<{X!]#Hb(Up(X!bOY*gZr*grs'}sw*gwx)rx#O*g#P;'S*g;'S;=`+Z<%lO*g,#x$=sa(w+JY$h&j(Up(X!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`Ka!`#O%Z#O#P&c#P#o%Z#o#p*g#p#q$+e#q;'S%Z;'S;=`+a<%lO%Z)>v$?V_![(CdtBr$h&j(Up(X!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z?O$@a_!o7`$h&j(Up(X!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z07[$Aq|$h&j(Up(X!b'z0/l$[#t(R,2j(c$I[OX%ZXY+gYZ&cZ[+g[p%Zpq+gqr%Zrs&}st%ZtuEruw%Zwx(rx}%Z}!OGv!O!Q%Z!Q![Er![!^%Z!^!_*g!_!c%Z!c!}Er!}#O%Z#O#P&c#P#R%Z#R#SEr#S#T%Z#T#oEr#o#p*g#p$f%Z$f$g+g$g#BYEr#BY#BZ$A`#BZ$ISEr$IS$I_$A`$I_$JTEr$JT$JU$A`$JU$KVEr$KV$KW$A`$KW&FUEr&FU&FV$A`&FV;'SEr;'S;=`I|<%l?HTEr?HT?HU$A`?HUOEr07[$D|k$h&j(Up(X!b'{0/l$[#t(R,2j(c$I[OY%ZYZ&cZr%Zrs&}st%ZtuEruw%Zwx(rx}%Z}!OGv!O!Q%Z!Q![Er![!^%Z!^!_*g!_!c%Z!c!}Er!}#O%Z#O#P&c#P#R%Z#R#SEr#S#T%Z#T#oEr#o#p*g#p$g%Z$g;'SEr;'S;=`I|<%lOEr",
      tokenizers: [noSemicolon, noSemicolonType, operatorToken, jsx, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, insertSemicolon, new LocalTokenGroup("$S~RRtu[#O#Pg#S#T#|~_P#o#pb~gOv~~jVO#i!P#i#j!U#j#l!P#l#m!q#m;'S!P;'S;=`#v<%lO!P~!UO!S~~!XS!Q![!e!c!i!e#T#Z!e#o#p#Z~!hR!Q![!q!c!i!q#T#Z!q~!tR!Q![!}!c!i!}#T#Z!}~#QR!Q![!P!c!i!P#T#Z!P~#^R!Q![#g!c!i#g#T#Z#g~#jS!Q![#g!c!i#g#T#Z#g#q#r!P~#yP;=`<%l!P~$RO(a~~", 141, 338), new LocalTokenGroup("j~RQYZXz{^~^O(O~~aP!P!Qd~iO(P~~", 25, 321)],
      topRules: {"Script":[0,7],"SingleExpression":[1,274],"SingleClassItem":[2,275]},
      dialects: {jsx: 0, ts: 15091},
      dynamicPrecedences: {"78":1,"80":1,"92":1,"168":1,"198":1},
      specialized: [{term: 325, get: (value) => spec_identifier$2[value] || -1},{term: 341, get: (value) => spec_word[value] || -1},{term: 93, get: (value) => spec_LessThan[value] || -1}],
      tokenPrec: 15116
    });

    // These are filled with ranges (rangeFrom[i] up to but not including
    // rangeTo[i]) of code points that count as extending characters.
    let rangeFrom = [], rangeTo = []

    ;(() => {
      // Compressed representation of the Grapheme_Cluster_Break=Extend
      // information from
      // http://www.unicode.org/Public/16.0.0/ucd/auxiliary/GraphemeBreakProperty.txt.
      // Each pair of elements represents a range, as an offet from the
      // previous range and a length. Numbers are in base-36, with the empty
      // string being a shorthand for 1.
      let numbers = "lc,34,7n,7,7b,19,,,,2,,2,,,20,b,1c,l,g,,2t,7,2,6,2,2,,4,z,,u,r,2j,b,1m,9,9,,o,4,,9,,3,,5,17,3,3b,f,,w,1j,,,,4,8,4,,3,7,a,2,t,,1m,,,,2,4,8,,9,,a,2,q,,2,2,1l,,4,2,4,2,2,3,3,,u,2,3,,b,2,1l,,4,5,,2,4,,k,2,m,6,,,1m,,,2,,4,8,,7,3,a,2,u,,1n,,,,c,,9,,14,,3,,1l,3,5,3,,4,7,2,b,2,t,,1m,,2,,2,,3,,5,2,7,2,b,2,s,2,1l,2,,,2,4,8,,9,,a,2,t,,20,,4,,2,3,,,8,,29,,2,7,c,8,2q,,2,9,b,6,22,2,r,,,,,,1j,e,,5,,2,5,b,,10,9,,2u,4,,6,,2,2,2,p,2,4,3,g,4,d,,2,2,6,,f,,jj,3,qa,3,t,3,t,2,u,2,1s,2,,7,8,,2,b,9,,19,3,3b,2,y,,3a,3,4,2,9,,6,3,63,2,2,,1m,,,7,,,,,2,8,6,a,2,,1c,h,1r,4,1c,7,,,5,,14,9,c,2,w,4,2,2,,3,1k,,,2,3,,,3,1m,8,2,2,48,3,,d,,7,4,,6,,3,2,5i,1m,,5,ek,,5f,x,2da,3,3x,,2o,w,fe,6,2x,2,n9w,4,,a,w,2,28,2,7k,,3,,4,,p,2,5,,47,2,q,i,d,,12,8,p,b,1a,3,1c,,2,4,2,2,13,,1v,6,2,2,2,2,c,,8,,1b,,1f,,,3,2,2,5,2,,,16,2,8,,6m,,2,,4,,fn4,,kh,g,g,g,a6,2,gt,,6a,,45,5,1ae,3,,2,5,4,14,3,4,,4l,2,fx,4,ar,2,49,b,4w,,1i,f,1k,3,1d,4,2,2,1x,3,10,5,,8,1q,,c,2,1g,9,a,4,2,,2n,3,2,,,2,6,,4g,,3,8,l,2,1l,2,,,,,m,,e,7,3,5,5f,8,2,3,,,n,,29,,2,6,,,2,,,2,,2,6j,,2,4,6,2,,2,r,2,2d,8,2,,,2,2y,,,,2,6,,,2t,3,2,4,,5,77,9,,2,6t,,a,2,,,4,,40,4,2,2,4,,w,a,14,6,2,4,8,,9,6,2,3,1a,d,,2,ba,7,,6,,,2a,m,2,7,,2,,2,3e,6,3,,,2,,7,,,20,2,3,,,,9n,2,f0b,5,1n,7,t4,,1r,4,29,,f5k,2,43q,,,3,4,5,8,8,2,7,u,4,44,3,1iz,1j,4,1e,8,,e,,m,5,,f,11s,7,,h,2,7,,2,,5,79,7,c5,4,15s,7,31,7,240,5,gx7k,2o,3k,6o".split(",").map(s => s ? parseInt(s, 36) : 1);
      for (let i = 0, n = 0; i < numbers.length; i++)
        (i % 2 ? rangeTo : rangeFrom).push(n = n + numbers[i]);
    })();

    function isExtendingChar(code) {
      if (code < 768) return false
      for (let from = 0, to = rangeFrom.length;;) {
        let mid = (from + to) >> 1;
        if (code < rangeFrom[mid]) to = mid;
        else if (code >= rangeTo[mid]) from = mid + 1;
        else return true
        if (from == to) return false
      }
    }

    function isRegionalIndicator(code) {
      return code >= 0x1F1E6 && code <= 0x1F1FF
    }

    const ZWJ = 0x200d;

    function findClusterBreak$1(str, pos, forward = true, includeExtending = true) {
      return (forward ? nextClusterBreak : prevClusterBreak)(str, pos, includeExtending)
    }

    function nextClusterBreak(str, pos, includeExtending) {
      if (pos == str.length) return pos
      // If pos is in the middle of a surrogate pair, move to its start
      if (pos && surrogateLow$1(str.charCodeAt(pos)) && surrogateHigh$1(str.charCodeAt(pos - 1))) pos--;
      let prev = codePointAt$1(str, pos);
      pos += codePointSize$1(prev);
      while (pos < str.length) {
        let next = codePointAt$1(str, pos);
        if (prev == ZWJ || next == ZWJ || includeExtending && isExtendingChar(next)) {
          pos += codePointSize$1(next);
          prev = next;
        } else if (isRegionalIndicator(next)) {
          let countBefore = 0, i = pos - 2;
          while (i >= 0 && isRegionalIndicator(codePointAt$1(str, i))) { countBefore++; i -= 2; }
          if (countBefore % 2 == 0) break
          else pos += 2;
        } else {
          break
        }
      }
      return pos
    }

    function prevClusterBreak(str, pos, includeExtending) {
      while (pos > 0) {
        let found = nextClusterBreak(str, pos - 2, includeExtending);
        if (found < pos) return found
        pos--;
      }
      return 0
    }

    function codePointAt$1(str, pos) {
      let code0 = str.charCodeAt(pos);
      if (!surrogateHigh$1(code0) || pos + 1 == str.length) return code0
      let code1 = str.charCodeAt(pos + 1);
      if (!surrogateLow$1(code1)) return code0
      return ((code0 - 0xd800) << 10) + (code1 - 0xdc00) + 0x10000
    }

    function surrogateLow$1(ch) { return ch >= 0xDC00 && ch < 0xE000 }
    function surrogateHigh$1(ch) { return ch >= 0xD800 && ch < 0xDC00 }
    function codePointSize$1(code) { return code < 0x10000 ? 1 : 2 }

    /**
    The data structure for documents. @nonabstract
    */
    class Text {
        /**
        Get the line description around the given position.
        */
        lineAt(pos) {
            if (pos < 0 || pos > this.length)
                throw new RangeError(`Invalid position ${pos} in document of length ${this.length}`);
            return this.lineInner(pos, false, 1, 0);
        }
        /**
        Get the description for the given (1-based) line number.
        */
        line(n) {
            if (n < 1 || n > this.lines)
                throw new RangeError(`Invalid line number ${n} in ${this.lines}-line document`);
            return this.lineInner(n, true, 1, 0);
        }
        /**
        Replace a range of the text with the given content.
        */
        replace(from, to, text) {
            [from, to] = clip(this, from, to);
            let parts = [];
            this.decompose(0, from, parts, 2 /* Open.To */);
            if (text.length)
                text.decompose(0, text.length, parts, 1 /* Open.From */ | 2 /* Open.To */);
            this.decompose(to, this.length, parts, 1 /* Open.From */);
            return TextNode.from(parts, this.length - (to - from) + text.length);
        }
        /**
        Append another document to this one.
        */
        append(other) {
            return this.replace(this.length, this.length, other);
        }
        /**
        Retrieve the text between the given points.
        */
        slice(from, to = this.length) {
            [from, to] = clip(this, from, to);
            let parts = [];
            this.decompose(from, to, parts, 0);
            return TextNode.from(parts, to - from);
        }
        /**
        Test whether this text is equal to another instance.
        */
        eq(other) {
            if (other == this)
                return true;
            if (other.length != this.length || other.lines != this.lines)
                return false;
            let start = this.scanIdentical(other, 1), end = this.length - this.scanIdentical(other, -1);
            let a = new RawTextCursor(this), b = new RawTextCursor(other);
            for (let skip = start, pos = start;;) {
                a.next(skip);
                b.next(skip);
                skip = 0;
                if (a.lineBreak != b.lineBreak || a.done != b.done || a.value != b.value)
                    return false;
                pos += a.value.length;
                if (a.done || pos >= end)
                    return true;
            }
        }
        /**
        Iterate over the text. When `dir` is `-1`, iteration happens
        from end to start. This will return lines and the breaks between
        them as separate strings.
        */
        iter(dir = 1) { return new RawTextCursor(this, dir); }
        /**
        Iterate over a range of the text. When `from` > `to`, the
        iterator will run in reverse.
        */
        iterRange(from, to = this.length) { return new PartialTextCursor(this, from, to); }
        /**
        Return a cursor that iterates over the given range of lines,
        _without_ returning the line breaks between, and yielding empty
        strings for empty lines.

        When `from` and `to` are given, they should be 1-based line numbers.
        */
        iterLines(from, to) {
            let inner;
            if (from == null) {
                inner = this.iter();
            }
            else {
                if (to == null)
                    to = this.lines + 1;
                let start = this.line(from).from;
                inner = this.iterRange(start, Math.max(start, to == this.lines + 1 ? this.length : to <= 1 ? 0 : this.line(to - 1).to));
            }
            return new LineCursor(inner);
        }
        /**
        Return the document as a string, using newline characters to
        separate lines.
        */
        toString() { return this.sliceString(0); }
        /**
        Convert the document to an array of lines (which can be
        deserialized again via [`Text.of`](https://codemirror.net/6/docs/ref/#state.Text^of)).
        */
        toJSON() {
            let lines = [];
            this.flatten(lines);
            return lines;
        }
        /**
        @internal
        */
        constructor() { }
        /**
        Create a `Text` instance for the given array of lines.
        */
        static of(text) {
            if (text.length == 0)
                throw new RangeError("A document must have at least one line");
            if (text.length == 1 && !text[0])
                return Text.empty;
            return text.length <= 32 /* Tree.Branch */ ? new TextLeaf(text) : TextNode.from(TextLeaf.split(text, []));
        }
    }
    // Leaves store an array of line strings. There are always line breaks
    // between these strings. Leaves are limited in size and have to be
    // contained in TextNode instances for bigger documents.
    class TextLeaf extends Text {
        constructor(text, length = textLength(text)) {
            super();
            this.text = text;
            this.length = length;
        }
        get lines() { return this.text.length; }
        get children() { return null; }
        lineInner(target, isLine, line, offset) {
            for (let i = 0;; i++) {
                let string = this.text[i], end = offset + string.length;
                if ((isLine ? line : end) >= target)
                    return new Line(offset, end, line, string);
                offset = end + 1;
                line++;
            }
        }
        decompose(from, to, target, open) {
            let text = from <= 0 && to >= this.length ? this
                : new TextLeaf(sliceText(this.text, from, to), Math.min(to, this.length) - Math.max(0, from));
            if (open & 1 /* Open.From */) {
                let prev = target.pop();
                let joined = appendText(text.text, prev.text.slice(), 0, text.length);
                if (joined.length <= 32 /* Tree.Branch */) {
                    target.push(new TextLeaf(joined, prev.length + text.length));
                }
                else {
                    let mid = joined.length >> 1;
                    target.push(new TextLeaf(joined.slice(0, mid)), new TextLeaf(joined.slice(mid)));
                }
            }
            else {
                target.push(text);
            }
        }
        replace(from, to, text) {
            if (!(text instanceof TextLeaf))
                return super.replace(from, to, text);
            [from, to] = clip(this, from, to);
            let lines = appendText(this.text, appendText(text.text, sliceText(this.text, 0, from)), to);
            let newLen = this.length + text.length - (to - from);
            if (lines.length <= 32 /* Tree.Branch */)
                return new TextLeaf(lines, newLen);
            return TextNode.from(TextLeaf.split(lines, []), newLen);
        }
        sliceString(from, to = this.length, lineSep = "\n") {
            [from, to] = clip(this, from, to);
            let result = "";
            for (let pos = 0, i = 0; pos <= to && i < this.text.length; i++) {
                let line = this.text[i], end = pos + line.length;
                if (pos > from && i)
                    result += lineSep;
                if (from < end && to > pos)
                    result += line.slice(Math.max(0, from - pos), to - pos);
                pos = end + 1;
            }
            return result;
        }
        flatten(target) {
            for (let line of this.text)
                target.push(line);
        }
        scanIdentical() { return 0; }
        static split(text, target) {
            let part = [], len = -1;
            for (let line of text) {
                part.push(line);
                len += line.length + 1;
                if (part.length == 32 /* Tree.Branch */) {
                    target.push(new TextLeaf(part, len));
                    part = [];
                    len = -1;
                }
            }
            if (len > -1)
                target.push(new TextLeaf(part, len));
            return target;
        }
    }
    // Nodes provide the tree structure of the `Text` type. They store a
    // number of other nodes or leaves, taking care to balance themselves
    // on changes. There are implied line breaks _between_ the children of
    // a node (but not before the first or after the last child).
    class TextNode extends Text {
        constructor(children, length) {
            super();
            this.children = children;
            this.length = length;
            this.lines = 0;
            for (let child of children)
                this.lines += child.lines;
        }
        lineInner(target, isLine, line, offset) {
            for (let i = 0;; i++) {
                let child = this.children[i], end = offset + child.length, endLine = line + child.lines - 1;
                if ((isLine ? endLine : end) >= target)
                    return child.lineInner(target, isLine, line, offset);
                offset = end + 1;
                line = endLine + 1;
            }
        }
        decompose(from, to, target, open) {
            for (let i = 0, pos = 0; pos <= to && i < this.children.length; i++) {
                let child = this.children[i], end = pos + child.length;
                if (from <= end && to >= pos) {
                    let childOpen = open & ((pos <= from ? 1 /* Open.From */ : 0) | (end >= to ? 2 /* Open.To */ : 0));
                    if (pos >= from && end <= to && !childOpen)
                        target.push(child);
                    else
                        child.decompose(from - pos, to - pos, target, childOpen);
                }
                pos = end + 1;
            }
        }
        replace(from, to, text) {
            [from, to] = clip(this, from, to);
            if (text.lines < this.lines)
                for (let i = 0, pos = 0; i < this.children.length; i++) {
                    let child = this.children[i], end = pos + child.length;
                    // Fast path: if the change only affects one child and the
                    // child's size remains in the acceptable range, only update
                    // that child
                    if (from >= pos && to <= end) {
                        let updated = child.replace(from - pos, to - pos, text);
                        let totalLines = this.lines - child.lines + updated.lines;
                        if (updated.lines < (totalLines >> (5 /* Tree.BranchShift */ - 1)) &&
                            updated.lines > (totalLines >> (5 /* Tree.BranchShift */ + 1))) {
                            let copy = this.children.slice();
                            copy[i] = updated;
                            return new TextNode(copy, this.length - (to - from) + text.length);
                        }
                        return super.replace(pos, end, updated);
                    }
                    pos = end + 1;
                }
            return super.replace(from, to, text);
        }
        sliceString(from, to = this.length, lineSep = "\n") {
            [from, to] = clip(this, from, to);
            let result = "";
            for (let i = 0, pos = 0; i < this.children.length && pos <= to; i++) {
                let child = this.children[i], end = pos + child.length;
                if (pos > from && i)
                    result += lineSep;
                if (from < end && to > pos)
                    result += child.sliceString(from - pos, to - pos, lineSep);
                pos = end + 1;
            }
            return result;
        }
        flatten(target) {
            for (let child of this.children)
                child.flatten(target);
        }
        scanIdentical(other, dir) {
            if (!(other instanceof TextNode))
                return 0;
            let length = 0;
            let [iA, iB, eA, eB] = dir > 0 ? [0, 0, this.children.length, other.children.length]
                : [this.children.length - 1, other.children.length - 1, -1, -1];
            for (;; iA += dir, iB += dir) {
                if (iA == eA || iB == eB)
                    return length;
                let chA = this.children[iA], chB = other.children[iB];
                if (chA != chB)
                    return length + chA.scanIdentical(chB, dir);
                length += chA.length + 1;
            }
        }
        static from(children, length = children.reduce((l, ch) => l + ch.length + 1, -1)) {
            let lines = 0;
            for (let ch of children)
                lines += ch.lines;
            if (lines < 32 /* Tree.Branch */) {
                let flat = [];
                for (let ch of children)
                    ch.flatten(flat);
                return new TextLeaf(flat, length);
            }
            let chunk = Math.max(32 /* Tree.Branch */, lines >> 5 /* Tree.BranchShift */), maxChunk = chunk << 1, minChunk = chunk >> 1;
            let chunked = [], currentLines = 0, currentLen = -1, currentChunk = [];
            function add(child) {
                let last;
                if (child.lines > maxChunk && child instanceof TextNode) {
                    for (let node of child.children)
                        add(node);
                }
                else if (child.lines > minChunk && (currentLines > minChunk || !currentLines)) {
                    flush();
                    chunked.push(child);
                }
                else if (child instanceof TextLeaf && currentLines &&
                    (last = currentChunk[currentChunk.length - 1]) instanceof TextLeaf &&
                    child.lines + last.lines <= 32 /* Tree.Branch */) {
                    currentLines += child.lines;
                    currentLen += child.length + 1;
                    currentChunk[currentChunk.length - 1] = new TextLeaf(last.text.concat(child.text), last.length + 1 + child.length);
                }
                else {
                    if (currentLines + child.lines > chunk)
                        flush();
                    currentLines += child.lines;
                    currentLen += child.length + 1;
                    currentChunk.push(child);
                }
            }
            function flush() {
                if (currentLines == 0)
                    return;
                chunked.push(currentChunk.length == 1 ? currentChunk[0] : TextNode.from(currentChunk, currentLen));
                currentLen = -1;
                currentLines = currentChunk.length = 0;
            }
            for (let child of children)
                add(child);
            flush();
            return chunked.length == 1 ? chunked[0] : new TextNode(chunked, length);
        }
    }
    Text.empty = /*@__PURE__*/new TextLeaf([""], 0);
    function textLength(text) {
        let length = -1;
        for (let line of text)
            length += line.length + 1;
        return length;
    }
    function appendText(text, target, from = 0, to = 1e9) {
        for (let pos = 0, i = 0, first = true; i < text.length && pos <= to; i++) {
            let line = text[i], end = pos + line.length;
            if (end >= from) {
                if (end > to)
                    line = line.slice(0, to - pos);
                if (pos < from)
                    line = line.slice(from - pos);
                if (first) {
                    target[target.length - 1] += line;
                    first = false;
                }
                else
                    target.push(line);
            }
            pos = end + 1;
        }
        return target;
    }
    function sliceText(text, from, to) {
        return appendText(text, [""], from, to);
    }
    class RawTextCursor {
        constructor(text, dir = 1) {
            this.dir = dir;
            this.done = false;
            this.lineBreak = false;
            this.value = "";
            this.nodes = [text];
            this.offsets = [dir > 0 ? 1 : (text instanceof TextLeaf ? text.text.length : text.children.length) << 1];
        }
        nextInner(skip, dir) {
            this.done = this.lineBreak = false;
            for (;;) {
                let last = this.nodes.length - 1;
                let top = this.nodes[last], offsetValue = this.offsets[last], offset = offsetValue >> 1;
                let size = top instanceof TextLeaf ? top.text.length : top.children.length;
                if (offset == (dir > 0 ? size : 0)) {
                    if (last == 0) {
                        this.done = true;
                        this.value = "";
                        return this;
                    }
                    if (dir > 0)
                        this.offsets[last - 1]++;
                    this.nodes.pop();
                    this.offsets.pop();
                }
                else if ((offsetValue & 1) == (dir > 0 ? 0 : 1)) {
                    this.offsets[last] += dir;
                    if (skip == 0) {
                        this.lineBreak = true;
                        this.value = "\n";
                        return this;
                    }
                    skip--;
                }
                else if (top instanceof TextLeaf) {
                    // Move to the next string
                    let next = top.text[offset + (dir < 0 ? -1 : 0)];
                    this.offsets[last] += dir;
                    if (next.length > Math.max(0, skip)) {
                        this.value = skip == 0 ? next : dir > 0 ? next.slice(skip) : next.slice(0, next.length - skip);
                        return this;
                    }
                    skip -= next.length;
                }
                else {
                    let next = top.children[offset + (dir < 0 ? -1 : 0)];
                    if (skip > next.length) {
                        skip -= next.length;
                        this.offsets[last] += dir;
                    }
                    else {
                        if (dir < 0)
                            this.offsets[last]--;
                        this.nodes.push(next);
                        this.offsets.push(dir > 0 ? 1 : (next instanceof TextLeaf ? next.text.length : next.children.length) << 1);
                    }
                }
            }
        }
        next(skip = 0) {
            if (skip < 0) {
                this.nextInner(-skip, (-this.dir));
                skip = this.value.length;
            }
            return this.nextInner(skip, this.dir);
        }
    }
    class PartialTextCursor {
        constructor(text, start, end) {
            this.value = "";
            this.done = false;
            this.cursor = new RawTextCursor(text, start > end ? -1 : 1);
            this.pos = start > end ? text.length : 0;
            this.from = Math.min(start, end);
            this.to = Math.max(start, end);
        }
        nextInner(skip, dir) {
            if (dir < 0 ? this.pos <= this.from : this.pos >= this.to) {
                this.value = "";
                this.done = true;
                return this;
            }
            skip += Math.max(0, dir < 0 ? this.pos - this.to : this.from - this.pos);
            let limit = dir < 0 ? this.pos - this.from : this.to - this.pos;
            if (skip > limit)
                skip = limit;
            limit -= skip;
            let { value } = this.cursor.next(skip);
            this.pos += (value.length + skip) * dir;
            this.value = value.length <= limit ? value : dir < 0 ? value.slice(value.length - limit) : value.slice(0, limit);
            this.done = !this.value;
            return this;
        }
        next(skip = 0) {
            if (skip < 0)
                skip = Math.max(skip, this.from - this.pos);
            else if (skip > 0)
                skip = Math.min(skip, this.to - this.pos);
            return this.nextInner(skip, this.cursor.dir);
        }
        get lineBreak() { return this.cursor.lineBreak && this.value != ""; }
    }
    class LineCursor {
        constructor(inner) {
            this.inner = inner;
            this.afterBreak = true;
            this.value = "";
            this.done = false;
        }
        next(skip = 0) {
            let { done, lineBreak, value } = this.inner.next(skip);
            if (done && this.afterBreak) {
                this.value = "";
                this.afterBreak = false;
            }
            else if (done) {
                this.done = true;
                this.value = "";
            }
            else if (lineBreak) {
                if (this.afterBreak) {
                    this.value = "";
                }
                else {
                    this.afterBreak = true;
                    this.next();
                }
            }
            else {
                this.value = value;
                this.afterBreak = false;
            }
            return this;
        }
        get lineBreak() { return false; }
    }
    if (typeof Symbol != "undefined") {
        Text.prototype[Symbol.iterator] = function () { return this.iter(); };
        RawTextCursor.prototype[Symbol.iterator] = PartialTextCursor.prototype[Symbol.iterator] =
            LineCursor.prototype[Symbol.iterator] = function () { return this; };
    }
    /**
    This type describes a line in the document. It is created
    on-demand when lines are [queried](https://codemirror.net/6/docs/ref/#state.Text.lineAt).
    */
    class Line {
        /**
        @internal
        */
        constructor(
        /**
        The position of the start of the line.
        */
        from,
        /**
        The position at the end of the line (_before_ the line break,
        or at the end of document for the last line).
        */
        to,
        /**
        This line's line number (1-based).
        */
        number,
        /**
        The line's content.
        */
        text) {
            this.from = from;
            this.to = to;
            this.number = number;
            this.text = text;
        }
        /**
        The length of the line (not including any line break after it).
        */
        get length() { return this.to - this.from; }
    }
    function clip(text, from, to) {
        from = Math.max(0, Math.min(text.length, from));
        return [from, Math.max(from, Math.min(text.length, to))];
    }

    /**
    Returns a next grapheme cluster break _after_ (not equal to)
    `pos`, if `forward` is true, or before otherwise. Returns `pos`
    itself if no further cluster break is available in the string.
    Moves across surrogate pairs, extending characters (when
    `includeExtending` is true), characters joined with zero-width
    joiners, and flag emoji.
    */
    function findClusterBreak(str, pos, forward = true, includeExtending = true) {
        return findClusterBreak$1(str, pos, forward, includeExtending);
    }
    function surrogateLow(ch) { return ch >= 0xDC00 && ch < 0xE000; }
    function surrogateHigh(ch) { return ch >= 0xD800 && ch < 0xDC00; }
    /**
    Find the code point at the given position in a string (like the
    [`codePointAt`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/codePointAt)
    string method).
    */
    function codePointAt(str, pos) {
        let code0 = str.charCodeAt(pos);
        if (!surrogateHigh(code0) || pos + 1 == str.length)
            return code0;
        let code1 = str.charCodeAt(pos + 1);
        if (!surrogateLow(code1))
            return code0;
        return ((code0 - 0xd800) << 10) + (code1 - 0xdc00) + 0x10000;
    }
    /**
    Given a Unicode codepoint, return the JavaScript string that
    respresents it (like
    [`String.fromCodePoint`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/fromCodePoint)).
    */
    function fromCodePoint(code) {
        if (code <= 0xffff)
            return String.fromCharCode(code);
        code -= 0x10000;
        return String.fromCharCode((code >> 10) + 0xd800, (code & 1023) + 0xdc00);
    }
    /**
    The amount of positions a character takes up in a JavaScript string.
    */
    function codePointSize(code) { return code < 0x10000 ? 1 : 2; }

    const DefaultSplit = /\r\n?|\n/;
    /**
    Distinguishes different ways in which positions can be mapped.
    */
    var MapMode = /*@__PURE__*/(function (MapMode) {
        /**
        Map a position to a valid new position, even when its context
        was deleted.
        */
        MapMode[MapMode["Simple"] = 0] = "Simple";
        /**
        Return null if deletion happens across the position.
        */
        MapMode[MapMode["TrackDel"] = 1] = "TrackDel";
        /**
        Return null if the character _before_ the position is deleted.
        */
        MapMode[MapMode["TrackBefore"] = 2] = "TrackBefore";
        /**
        Return null if the character _after_ the position is deleted.
        */
        MapMode[MapMode["TrackAfter"] = 3] = "TrackAfter";
    return MapMode})(MapMode || (MapMode = {}));
    /**
    A change description is a variant of [change set](https://codemirror.net/6/docs/ref/#state.ChangeSet)
    that doesn't store the inserted text. As such, it can't be
    applied, but is cheaper to store and manipulate.
    */
    class ChangeDesc {
        // Sections are encoded as pairs of integers. The first is the
        // length in the current document, and the second is -1 for
        // unaffected sections, and the length of the replacement content
        // otherwise. So an insertion would be (0, n>0), a deletion (n>0,
        // 0), and a replacement two positive numbers.
        /**
        @internal
        */
        constructor(
        /**
        @internal
        */
        sections) {
            this.sections = sections;
        }
        /**
        The length of the document before the change.
        */
        get length() {
            let result = 0;
            for (let i = 0; i < this.sections.length; i += 2)
                result += this.sections[i];
            return result;
        }
        /**
        The length of the document after the change.
        */
        get newLength() {
            let result = 0;
            for (let i = 0; i < this.sections.length; i += 2) {
                let ins = this.sections[i + 1];
                result += ins < 0 ? this.sections[i] : ins;
            }
            return result;
        }
        /**
        False when there are actual changes in this set.
        */
        get empty() { return this.sections.length == 0 || this.sections.length == 2 && this.sections[1] < 0; }
        /**
        Iterate over the unchanged parts left by these changes. `posA`
        provides the position of the range in the old document, `posB`
        the new position in the changed document.
        */
        iterGaps(f) {
            for (let i = 0, posA = 0, posB = 0; i < this.sections.length;) {
                let len = this.sections[i++], ins = this.sections[i++];
                if (ins < 0) {
                    f(posA, posB, len);
                    posB += len;
                }
                else {
                    posB += ins;
                }
                posA += len;
            }
        }
        /**
        Iterate over the ranges changed by these changes. (See
        [`ChangeSet.iterChanges`](https://codemirror.net/6/docs/ref/#state.ChangeSet.iterChanges) for a
        variant that also provides you with the inserted text.)
        `fromA`/`toA` provides the extent of the change in the starting
        document, `fromB`/`toB` the extent of the replacement in the
        changed document.

        When `individual` is true, adjacent changes (which are kept
        separate for [position mapping](https://codemirror.net/6/docs/ref/#state.ChangeDesc.mapPos)) are
        reported separately.
        */
        iterChangedRanges(f, individual = false) {
            iterChanges(this, f, individual);
        }
        /**
        Get a description of the inverted form of these changes.
        */
        get invertedDesc() {
            let sections = [];
            for (let i = 0; i < this.sections.length;) {
                let len = this.sections[i++], ins = this.sections[i++];
                if (ins < 0)
                    sections.push(len, ins);
                else
                    sections.push(ins, len);
            }
            return new ChangeDesc(sections);
        }
        /**
        Compute the combined effect of applying another set of changes
        after this one. The length of the document after this set should
        match the length before `other`.
        */
        composeDesc(other) { return this.empty ? other : other.empty ? this : composeSets(this, other); }
        /**
        Map this description, which should start with the same document
        as `other`, over another set of changes, so that it can be
        applied after it. When `before` is true, map as if the changes
        in `this` happened before the ones in `other`.
        */
        mapDesc(other, before = false) { return other.empty ? this : mapSet(this, other, before); }
        mapPos(pos, assoc = -1, mode = MapMode.Simple) {
            let posA = 0, posB = 0;
            for (let i = 0; i < this.sections.length;) {
                let len = this.sections[i++], ins = this.sections[i++], endA = posA + len;
                if (ins < 0) {
                    if (endA > pos)
                        return posB + (pos - posA);
                    posB += len;
                }
                else {
                    if (mode != MapMode.Simple && endA >= pos &&
                        (mode == MapMode.TrackDel && posA < pos && endA > pos ||
                            mode == MapMode.TrackBefore && posA < pos ||
                            mode == MapMode.TrackAfter && endA > pos))
                        return null;
                    if (endA > pos || endA == pos && assoc < 0 && !len)
                        return pos == posA || assoc < 0 ? posB : posB + ins;
                    posB += ins;
                }
                posA = endA;
            }
            if (pos > posA)
                throw new RangeError(`Position ${pos} is out of range for changeset of length ${posA}`);
            return posB;
        }
        /**
        Check whether these changes touch a given range. When one of the
        changes entirely covers the range, the string `"cover"` is
        returned.
        */
        touchesRange(from, to = from) {
            for (let i = 0, pos = 0; i < this.sections.length && pos <= to;) {
                let len = this.sections[i++], ins = this.sections[i++], end = pos + len;
                if (ins >= 0 && pos <= to && end >= from)
                    return pos < from && end > to ? "cover" : true;
                pos = end;
            }
            return false;
        }
        /**
        @internal
        */
        toString() {
            let result = "";
            for (let i = 0; i < this.sections.length;) {
                let len = this.sections[i++], ins = this.sections[i++];
                result += (result ? " " : "") + len + (ins >= 0 ? ":" + ins : "");
            }
            return result;
        }
        /**
        Serialize this change desc to a JSON-representable value.
        */
        toJSON() { return this.sections; }
        /**
        Create a change desc from its JSON representation (as produced
        by [`toJSON`](https://codemirror.net/6/docs/ref/#state.ChangeDesc.toJSON).
        */
        static fromJSON(json) {
            if (!Array.isArray(json) || json.length % 2 || json.some(a => typeof a != "number"))
                throw new RangeError("Invalid JSON representation of ChangeDesc");
            return new ChangeDesc(json);
        }
        /**
        @internal
        */
        static create(sections) { return new ChangeDesc(sections); }
    }
    /**
    A change set represents a group of modifications to a document. It
    stores the document length, and can only be applied to documents
    with exactly that length.
    */
    class ChangeSet extends ChangeDesc {
        constructor(sections,
        /**
        @internal
        */
        inserted) {
            super(sections);
            this.inserted = inserted;
        }
        /**
        Apply the changes to a document, returning the modified
        document.
        */
        apply(doc) {
            if (this.length != doc.length)
                throw new RangeError("Applying change set to a document with the wrong length");
            iterChanges(this, (fromA, toA, fromB, _toB, text) => doc = doc.replace(fromB, fromB + (toA - fromA), text), false);
            return doc;
        }
        mapDesc(other, before = false) { return mapSet(this, other, before, true); }
        /**
        Given the document as it existed _before_ the changes, return a
        change set that represents the inverse of this set, which could
        be used to go from the document created by the changes back to
        the document as it existed before the changes.
        */
        invert(doc) {
            let sections = this.sections.slice(), inserted = [];
            for (let i = 0, pos = 0; i < sections.length; i += 2) {
                let len = sections[i], ins = sections[i + 1];
                if (ins >= 0) {
                    sections[i] = ins;
                    sections[i + 1] = len;
                    let index = i >> 1;
                    while (inserted.length < index)
                        inserted.push(Text.empty);
                    inserted.push(len ? doc.slice(pos, pos + len) : Text.empty);
                }
                pos += len;
            }
            return new ChangeSet(sections, inserted);
        }
        /**
        Combine two subsequent change sets into a single set. `other`
        must start in the document produced by `this`. If `this` goes
        `docA` → `docB` and `other` represents `docB` → `docC`, the
        returned value will represent the change `docA` → `docC`.
        */
        compose(other) { return this.empty ? other : other.empty ? this : composeSets(this, other, true); }
        /**
        Given another change set starting in the same document, maps this
        change set over the other, producing a new change set that can be
        applied to the document produced by applying `other`. When
        `before` is `true`, order changes as if `this` comes before
        `other`, otherwise (the default) treat `other` as coming first.

        Given two changes `A` and `B`, `A.compose(B.map(A))` and
        `B.compose(A.map(B, true))` will produce the same document. This
        provides a basic form of [operational
        transformation](https://en.wikipedia.org/wiki/Operational_transformation),
        and can be used for collaborative editing.
        */
        map(other, before = false) { return other.empty ? this : mapSet(this, other, before, true); }
        /**
        Iterate over the changed ranges in the document, calling `f` for
        each, with the range in the original document (`fromA`-`toA`)
        and the range that replaces it in the new document
        (`fromB`-`toB`).

        When `individual` is true, adjacent changes are reported
        separately.
        */
        iterChanges(f, individual = false) {
            iterChanges(this, f, individual);
        }
        /**
        Get a [change description](https://codemirror.net/6/docs/ref/#state.ChangeDesc) for this change
        set.
        */
        get desc() { return ChangeDesc.create(this.sections); }
        /**
        @internal
        */
        filter(ranges) {
            let resultSections = [], resultInserted = [], filteredSections = [];
            let iter = new SectionIter(this);
            done: for (let i = 0, pos = 0;;) {
                let next = i == ranges.length ? 1e9 : ranges[i++];
                while (pos < next || pos == next && iter.len == 0) {
                    if (iter.done)
                        break done;
                    let len = Math.min(iter.len, next - pos);
                    addSection(filteredSections, len, -1);
                    let ins = iter.ins == -1 ? -1 : iter.off == 0 ? iter.ins : 0;
                    addSection(resultSections, len, ins);
                    if (ins > 0)
                        addInsert(resultInserted, resultSections, iter.text);
                    iter.forward(len);
                    pos += len;
                }
                let end = ranges[i++];
                while (pos < end) {
                    if (iter.done)
                        break done;
                    let len = Math.min(iter.len, end - pos);
                    addSection(resultSections, len, -1);
                    addSection(filteredSections, len, iter.ins == -1 ? -1 : iter.off == 0 ? iter.ins : 0);
                    iter.forward(len);
                    pos += len;
                }
            }
            return { changes: new ChangeSet(resultSections, resultInserted),
                filtered: ChangeDesc.create(filteredSections) };
        }
        /**
        Serialize this change set to a JSON-representable value.
        */
        toJSON() {
            let parts = [];
            for (let i = 0; i < this.sections.length; i += 2) {
                let len = this.sections[i], ins = this.sections[i + 1];
                if (ins < 0)
                    parts.push(len);
                else if (ins == 0)
                    parts.push([len]);
                else
                    parts.push([len].concat(this.inserted[i >> 1].toJSON()));
            }
            return parts;
        }
        /**
        Create a change set for the given changes, for a document of the
        given length, using `lineSep` as line separator.
        */
        static of(changes, length, lineSep) {
            let sections = [], inserted = [], pos = 0;
            let total = null;
            function flush(force = false) {
                if (!force && !sections.length)
                    return;
                if (pos < length)
                    addSection(sections, length - pos, -1);
                let set = new ChangeSet(sections, inserted);
                total = total ? total.compose(set.map(total)) : set;
                sections = [];
                inserted = [];
                pos = 0;
            }
            function process(spec) {
                if (Array.isArray(spec)) {
                    for (let sub of spec)
                        process(sub);
                }
                else if (spec instanceof ChangeSet) {
                    if (spec.length != length)
                        throw new RangeError(`Mismatched change set length (got ${spec.length}, expected ${length})`);
                    flush();
                    total = total ? total.compose(spec.map(total)) : spec;
                }
                else {
                    let { from, to = from, insert } = spec;
                    if (from > to || from < 0 || to > length)
                        throw new RangeError(`Invalid change range ${from} to ${to} (in doc of length ${length})`);
                    let insText = !insert ? Text.empty : typeof insert == "string" ? Text.of(insert.split(lineSep || DefaultSplit)) : insert;
                    let insLen = insText.length;
                    if (from == to && insLen == 0)
                        return;
                    if (from < pos)
                        flush();
                    if (from > pos)
                        addSection(sections, from - pos, -1);
                    addSection(sections, to - from, insLen);
                    addInsert(inserted, sections, insText);
                    pos = to;
                }
            }
            process(changes);
            flush(!total);
            return total;
        }
        /**
        Create an empty changeset of the given length.
        */
        static empty(length) {
            return new ChangeSet(length ? [length, -1] : [], []);
        }
        /**
        Create a changeset from its JSON representation (as produced by
        [`toJSON`](https://codemirror.net/6/docs/ref/#state.ChangeSet.toJSON).
        */
        static fromJSON(json) {
            if (!Array.isArray(json))
                throw new RangeError("Invalid JSON representation of ChangeSet");
            let sections = [], inserted = [];
            for (let i = 0; i < json.length; i++) {
                let part = json[i];
                if (typeof part == "number") {
                    sections.push(part, -1);
                }
                else if (!Array.isArray(part) || typeof part[0] != "number" || part.some((e, i) => i && typeof e != "string")) {
                    throw new RangeError("Invalid JSON representation of ChangeSet");
                }
                else if (part.length == 1) {
                    sections.push(part[0], 0);
                }
                else {
                    while (inserted.length < i)
                        inserted.push(Text.empty);
                    inserted[i] = Text.of(part.slice(1));
                    sections.push(part[0], inserted[i].length);
                }
            }
            return new ChangeSet(sections, inserted);
        }
        /**
        @internal
        */
        static createSet(sections, inserted) {
            return new ChangeSet(sections, inserted);
        }
    }
    function addSection(sections, len, ins, forceJoin = false) {
        if (len == 0 && ins <= 0)
            return;
        let last = sections.length - 2;
        if (last >= 0 && ins <= 0 && ins == sections[last + 1])
            sections[last] += len;
        else if (last >= 0 && len == 0 && sections[last] == 0)
            sections[last + 1] += ins;
        else if (forceJoin) {
            sections[last] += len;
            sections[last + 1] += ins;
        }
        else
            sections.push(len, ins);
    }
    function addInsert(values, sections, value) {
        if (value.length == 0)
            return;
        let index = (sections.length - 2) >> 1;
        if (index < values.length) {
            values[values.length - 1] = values[values.length - 1].append(value);
        }
        else {
            while (values.length < index)
                values.push(Text.empty);
            values.push(value);
        }
    }
    function iterChanges(desc, f, individual) {
        let inserted = desc.inserted;
        for (let posA = 0, posB = 0, i = 0; i < desc.sections.length;) {
            let len = desc.sections[i++], ins = desc.sections[i++];
            if (ins < 0) {
                posA += len;
                posB += len;
            }
            else {
                let endA = posA, endB = posB, text = Text.empty;
                for (;;) {
                    endA += len;
                    endB += ins;
                    if (ins && inserted)
                        text = text.append(inserted[(i - 2) >> 1]);
                    if (individual || i == desc.sections.length || desc.sections[i + 1] < 0)
                        break;
                    len = desc.sections[i++];
                    ins = desc.sections[i++];
                }
                f(posA, endA, posB, endB, text);
                posA = endA;
                posB = endB;
            }
        }
    }
    function mapSet(setA, setB, before, mkSet = false) {
        // Produce a copy of setA that applies to the document after setB
        // has been applied (assuming both start at the same document).
        let sections = [], insert = mkSet ? [] : null;
        let a = new SectionIter(setA), b = new SectionIter(setB);
        // Iterate over both sets in parallel. inserted tracks, for changes
        // in A that have to be processed piece-by-piece, whether their
        // content has been inserted already, and refers to the section
        // index.
        for (let inserted = -1;;) {
            if (a.done && b.len || b.done && a.len) {
                throw new Error("Mismatched change set lengths");
            }
            else if (a.ins == -1 && b.ins == -1) {
                // Move across ranges skipped by both sets.
                let len = Math.min(a.len, b.len);
                addSection(sections, len, -1);
                a.forward(len);
                b.forward(len);
            }
            else if (b.ins >= 0 && (a.ins < 0 || inserted == a.i || a.off == 0 && (b.len < a.len || b.len == a.len && !before))) {
                // If there's a change in B that comes before the next change in
                // A (ordered by start pos, then len, then before flag), skip
                // that (and process any changes in A it covers).
                let len = b.len;
                addSection(sections, b.ins, -1);
                while (len) {
                    let piece = Math.min(a.len, len);
                    if (a.ins >= 0 && inserted < a.i && a.len <= piece) {
                        addSection(sections, 0, a.ins);
                        if (insert)
                            addInsert(insert, sections, a.text);
                        inserted = a.i;
                    }
                    a.forward(piece);
                    len -= piece;
                }
                b.next();
            }
            else if (a.ins >= 0) {
                // Process the part of a change in A up to the start of the next
                // non-deletion change in B (if overlapping).
                let len = 0, left = a.len;
                while (left) {
                    if (b.ins == -1) {
                        let piece = Math.min(left, b.len);
                        len += piece;
                        left -= piece;
                        b.forward(piece);
                    }
                    else if (b.ins == 0 && b.len < left) {
                        left -= b.len;
                        b.next();
                    }
                    else {
                        break;
                    }
                }
                addSection(sections, len, inserted < a.i ? a.ins : 0);
                if (insert && inserted < a.i)
                    addInsert(insert, sections, a.text);
                inserted = a.i;
                a.forward(a.len - left);
            }
            else if (a.done && b.done) {
                return insert ? ChangeSet.createSet(sections, insert) : ChangeDesc.create(sections);
            }
            else {
                throw new Error("Mismatched change set lengths");
            }
        }
    }
    function composeSets(setA, setB, mkSet = false) {
        let sections = [];
        let insert = mkSet ? [] : null;
        let a = new SectionIter(setA), b = new SectionIter(setB);
        for (let open = false;;) {
            if (a.done && b.done) {
                return insert ? ChangeSet.createSet(sections, insert) : ChangeDesc.create(sections);
            }
            else if (a.ins == 0) { // Deletion in A
                addSection(sections, a.len, 0, open);
                a.next();
            }
            else if (b.len == 0 && !b.done) { // Insertion in B
                addSection(sections, 0, b.ins, open);
                if (insert)
                    addInsert(insert, sections, b.text);
                b.next();
            }
            else if (a.done || b.done) {
                throw new Error("Mismatched change set lengths");
            }
            else {
                let len = Math.min(a.len2, b.len), sectionLen = sections.length;
                if (a.ins == -1) {
                    let insB = b.ins == -1 ? -1 : b.off ? 0 : b.ins;
                    addSection(sections, len, insB, open);
                    if (insert && insB)
                        addInsert(insert, sections, b.text);
                }
                else if (b.ins == -1) {
                    addSection(sections, a.off ? 0 : a.len, len, open);
                    if (insert)
                        addInsert(insert, sections, a.textBit(len));
                }
                else {
                    addSection(sections, a.off ? 0 : a.len, b.off ? 0 : b.ins, open);
                    if (insert && !b.off)
                        addInsert(insert, sections, b.text);
                }
                open = (a.ins > len || b.ins >= 0 && b.len > len) && (open || sections.length > sectionLen);
                a.forward2(len);
                b.forward(len);
            }
        }
    }
    class SectionIter {
        constructor(set) {
            this.set = set;
            this.i = 0;
            this.next();
        }
        next() {
            let { sections } = this.set;
            if (this.i < sections.length) {
                this.len = sections[this.i++];
                this.ins = sections[this.i++];
            }
            else {
                this.len = 0;
                this.ins = -2;
            }
            this.off = 0;
        }
        get done() { return this.ins == -2; }
        get len2() { return this.ins < 0 ? this.len : this.ins; }
        get text() {
            let { inserted } = this.set, index = (this.i - 2) >> 1;
            return index >= inserted.length ? Text.empty : inserted[index];
        }
        textBit(len) {
            let { inserted } = this.set, index = (this.i - 2) >> 1;
            return index >= inserted.length && !len ? Text.empty
                : inserted[index].slice(this.off, len == null ? undefined : this.off + len);
        }
        forward(len) {
            if (len == this.len)
                this.next();
            else {
                this.len -= len;
                this.off += len;
            }
        }
        forward2(len) {
            if (this.ins == -1)
                this.forward(len);
            else if (len == this.ins)
                this.next();
            else {
                this.ins -= len;
                this.off += len;
            }
        }
    }

    /**
    A single selection range. When
    [`allowMultipleSelections`](https://codemirror.net/6/docs/ref/#state.EditorState^allowMultipleSelections)
    is enabled, a [selection](https://codemirror.net/6/docs/ref/#state.EditorSelection) may hold
    multiple ranges. By default, selections hold exactly one range.
    */
    class SelectionRange {
        constructor(
        /**
        The lower boundary of the range.
        */
        from,
        /**
        The upper boundary of the range.
        */
        to, flags) {
            this.from = from;
            this.to = to;
            this.flags = flags;
        }
        /**
        The anchor of the range—the side that doesn't move when you
        extend it.
        */
        get anchor() { return this.flags & 32 /* RangeFlag.Inverted */ ? this.to : this.from; }
        /**
        The head of the range, which is moved when the range is
        [extended](https://codemirror.net/6/docs/ref/#state.SelectionRange.extend).
        */
        get head() { return this.flags & 32 /* RangeFlag.Inverted */ ? this.from : this.to; }
        /**
        True when `anchor` and `head` are at the same position.
        */
        get empty() { return this.from == this.to; }
        /**
        If this is a cursor that is explicitly associated with the
        character on one of its sides, this returns the side. -1 means
        the character before its position, 1 the character after, and 0
        means no association.
        */
        get assoc() { return this.flags & 8 /* RangeFlag.AssocBefore */ ? -1 : this.flags & 16 /* RangeFlag.AssocAfter */ ? 1 : 0; }
        /**
        The bidirectional text level associated with this cursor, if
        any.
        */
        get bidiLevel() {
            let level = this.flags & 7 /* RangeFlag.BidiLevelMask */;
            return level == 7 ? null : level;
        }
        /**
        The goal column (stored vertical offset) associated with a
        cursor. This is used to preserve the vertical position when
        [moving](https://codemirror.net/6/docs/ref/#view.EditorView.moveVertically) across
        lines of different length.
        */
        get goalColumn() {
            let value = this.flags >> 6 /* RangeFlag.GoalColumnOffset */;
            return value == 16777215 /* RangeFlag.NoGoalColumn */ ? undefined : value;
        }
        /**
        Map this range through a change, producing a valid range in the
        updated document.
        */
        map(change, assoc = -1) {
            let from, to;
            if (this.empty) {
                from = to = change.mapPos(this.from, assoc);
            }
            else {
                from = change.mapPos(this.from, 1);
                to = change.mapPos(this.to, -1);
            }
            return from == this.from && to == this.to ? this : new SelectionRange(from, to, this.flags);
        }
        /**
        Extend this range to cover at least `from` to `to`.
        */
        extend(from, to = from) {
            if (from <= this.anchor && to >= this.anchor)
                return EditorSelection.range(from, to);
            let head = Math.abs(from - this.anchor) > Math.abs(to - this.anchor) ? from : to;
            return EditorSelection.range(this.anchor, head);
        }
        /**
        Compare this range to another range.
        */
        eq(other, includeAssoc = false) {
            return this.anchor == other.anchor && this.head == other.head &&
                (!includeAssoc || !this.empty || this.assoc == other.assoc);
        }
        /**
        Return a JSON-serializable object representing the range.
        */
        toJSON() { return { anchor: this.anchor, head: this.head }; }
        /**
        Convert a JSON representation of a range to a `SelectionRange`
        instance.
        */
        static fromJSON(json) {
            if (!json || typeof json.anchor != "number" || typeof json.head != "number")
                throw new RangeError("Invalid JSON representation for SelectionRange");
            return EditorSelection.range(json.anchor, json.head);
        }
        /**
        @internal
        */
        static create(from, to, flags) {
            return new SelectionRange(from, to, flags);
        }
    }
    /**
    An editor selection holds one or more selection ranges.
    */
    class EditorSelection {
        constructor(
        /**
        The ranges in the selection, sorted by position. Ranges cannot
        overlap (but they may touch, if they aren't empty).
        */
        ranges,
        /**
        The index of the _main_ range in the selection (which is
        usually the range that was added last).
        */
        mainIndex) {
            this.ranges = ranges;
            this.mainIndex = mainIndex;
        }
        /**
        Map a selection through a change. Used to adjust the selection
        position for changes.
        */
        map(change, assoc = -1) {
            if (change.empty)
                return this;
            return EditorSelection.create(this.ranges.map(r => r.map(change, assoc)), this.mainIndex);
        }
        /**
        Compare this selection to another selection. By default, ranges
        are compared only by position. When `includeAssoc` is true,
        cursor ranges must also have the same
        [`assoc`](https://codemirror.net/6/docs/ref/#state.SelectionRange.assoc) value.
        */
        eq(other, includeAssoc = false) {
            if (this.ranges.length != other.ranges.length ||
                this.mainIndex != other.mainIndex)
                return false;
            for (let i = 0; i < this.ranges.length; i++)
                if (!this.ranges[i].eq(other.ranges[i], includeAssoc))
                    return false;
            return true;
        }
        /**
        Get the primary selection range. Usually, you should make sure
        your code applies to _all_ ranges, by using methods like
        [`changeByRange`](https://codemirror.net/6/docs/ref/#state.EditorState.changeByRange).
        */
        get main() { return this.ranges[this.mainIndex]; }
        /**
        Make sure the selection only has one range. Returns a selection
        holding only the main range from this selection.
        */
        asSingle() {
            return this.ranges.length == 1 ? this : new EditorSelection([this.main], 0);
        }
        /**
        Extend this selection with an extra range.
        */
        addRange(range, main = true) {
            return EditorSelection.create([range].concat(this.ranges), main ? 0 : this.mainIndex + 1);
        }
        /**
        Replace a given range with another range, and then normalize the
        selection to merge and sort ranges if necessary.
        */
        replaceRange(range, which = this.mainIndex) {
            let ranges = this.ranges.slice();
            ranges[which] = range;
            return EditorSelection.create(ranges, this.mainIndex);
        }
        /**
        Convert this selection to an object that can be serialized to
        JSON.
        */
        toJSON() {
            return { ranges: this.ranges.map(r => r.toJSON()), main: this.mainIndex };
        }
        /**
        Create a selection from a JSON representation.
        */
        static fromJSON(json) {
            if (!json || !Array.isArray(json.ranges) || typeof json.main != "number" || json.main >= json.ranges.length)
                throw new RangeError("Invalid JSON representation for EditorSelection");
            return new EditorSelection(json.ranges.map((r) => SelectionRange.fromJSON(r)), json.main);
        }
        /**
        Create a selection holding a single range.
        */
        static single(anchor, head = anchor) {
            return new EditorSelection([EditorSelection.range(anchor, head)], 0);
        }
        /**
        Sort and merge the given set of ranges, creating a valid
        selection.
        */
        static create(ranges, mainIndex = 0) {
            if (ranges.length == 0)
                throw new RangeError("A selection needs at least one range");
            for (let pos = 0, i = 0; i < ranges.length; i++) {
                let range = ranges[i];
                if (range.empty ? range.from <= pos : range.from < pos)
                    return EditorSelection.normalized(ranges.slice(), mainIndex);
                pos = range.to;
            }
            return new EditorSelection(ranges, mainIndex);
        }
        /**
        Create a cursor selection range at the given position. You can
        safely ignore the optional arguments in most situations.
        */
        static cursor(pos, assoc = 0, bidiLevel, goalColumn) {
            return SelectionRange.create(pos, pos, (assoc == 0 ? 0 : assoc < 0 ? 8 /* RangeFlag.AssocBefore */ : 16 /* RangeFlag.AssocAfter */) |
                (bidiLevel == null ? 7 : Math.min(6, bidiLevel)) |
                ((goalColumn !== null && goalColumn !== void 0 ? goalColumn : 16777215 /* RangeFlag.NoGoalColumn */) << 6 /* RangeFlag.GoalColumnOffset */));
        }
        /**
        Create a selection range.
        */
        static range(anchor, head, goalColumn, bidiLevel) {
            let flags = ((goalColumn !== null && goalColumn !== void 0 ? goalColumn : 16777215 /* RangeFlag.NoGoalColumn */) << 6 /* RangeFlag.GoalColumnOffset */) |
                (bidiLevel == null ? 7 : Math.min(6, bidiLevel));
            return head < anchor ? SelectionRange.create(head, anchor, 32 /* RangeFlag.Inverted */ | 16 /* RangeFlag.AssocAfter */ | flags)
                : SelectionRange.create(anchor, head, (head > anchor ? 8 /* RangeFlag.AssocBefore */ : 0) | flags);
        }
        /**
        @internal
        */
        static normalized(ranges, mainIndex = 0) {
            let main = ranges[mainIndex];
            ranges.sort((a, b) => a.from - b.from);
            mainIndex = ranges.indexOf(main);
            for (let i = 1; i < ranges.length; i++) {
                let range = ranges[i], prev = ranges[i - 1];
                if (range.empty ? range.from <= prev.to : range.from < prev.to) {
                    let from = prev.from, to = Math.max(range.to, prev.to);
                    if (i <= mainIndex)
                        mainIndex--;
                    ranges.splice(--i, 2, range.anchor > range.head ? EditorSelection.range(to, from) : EditorSelection.range(from, to));
                }
            }
            return new EditorSelection(ranges, mainIndex);
        }
    }
    function checkSelection(selection, docLength) {
        for (let range of selection.ranges)
            if (range.to > docLength)
                throw new RangeError("Selection points outside of document");
    }

    let nextID = 0;
    /**
    A facet is a labeled value that is associated with an editor
    state. It takes inputs from any number of extensions, and combines
    those into a single output value.

    Examples of uses of facets are the [tab
    size](https://codemirror.net/6/docs/ref/#state.EditorState^tabSize), [editor
    attributes](https://codemirror.net/6/docs/ref/#view.EditorView^editorAttributes), and [update
    listeners](https://codemirror.net/6/docs/ref/#view.EditorView^updateListener).

    Note that `Facet` instances can be used anywhere where
    [`FacetReader`](https://codemirror.net/6/docs/ref/#state.FacetReader) is expected.
    */
    class Facet {
        constructor(
        /**
        @internal
        */
        combine,
        /**
        @internal
        */
        compareInput,
        /**
        @internal
        */
        compare, isStatic, enables) {
            this.combine = combine;
            this.compareInput = compareInput;
            this.compare = compare;
            this.isStatic = isStatic;
            /**
            @internal
            */
            this.id = nextID++;
            this.default = combine([]);
            this.extensions = typeof enables == "function" ? enables(this) : enables;
        }
        /**
        Returns a facet reader for this facet, which can be used to
        [read](https://codemirror.net/6/docs/ref/#state.EditorState.facet) it but not to define values for it.
        */
        get reader() { return this; }
        /**
        Define a new facet.
        */
        static define(config = {}) {
            return new Facet(config.combine || ((a) => a), config.compareInput || ((a, b) => a === b), config.compare || (!config.combine ? sameArray : (a, b) => a === b), !!config.static, config.enables);
        }
        /**
        Returns an extension that adds the given value to this facet.
        */
        of(value) {
            return new FacetProvider([], this, 0 /* Provider.Static */, value);
        }
        /**
        Create an extension that computes a value for the facet from a
        state. You must take care to declare the parts of the state that
        this value depends on, since your function is only called again
        for a new state when one of those parts changed.

        In cases where your value depends only on a single field, you'll
        want to use the [`from`](https://codemirror.net/6/docs/ref/#state.Facet.from) method instead.
        */
        compute(deps, get) {
            if (this.isStatic)
                throw new Error("Can't compute a static facet");
            return new FacetProvider(deps, this, 1 /* Provider.Single */, get);
        }
        /**
        Create an extension that computes zero or more values for this
        facet from a state.
        */
        computeN(deps, get) {
            if (this.isStatic)
                throw new Error("Can't compute a static facet");
            return new FacetProvider(deps, this, 2 /* Provider.Multi */, get);
        }
        from(field, get) {
            if (!get)
                get = x => x;
            return this.compute([field], state => get(state.field(field)));
        }
    }
    function sameArray(a, b) {
        return a == b || a.length == b.length && a.every((e, i) => e === b[i]);
    }
    class FacetProvider {
        constructor(dependencies, facet, type, value) {
            this.dependencies = dependencies;
            this.facet = facet;
            this.type = type;
            this.value = value;
            this.id = nextID++;
        }
        dynamicSlot(addresses) {
            var _a;
            let getter = this.value;
            let compare = this.facet.compareInput;
            let id = this.id, idx = addresses[id] >> 1, multi = this.type == 2 /* Provider.Multi */;
            let depDoc = false, depSel = false, depAddrs = [];
            for (let dep of this.dependencies) {
                if (dep == "doc")
                    depDoc = true;
                else if (dep == "selection")
                    depSel = true;
                else if ((((_a = addresses[dep.id]) !== null && _a !== void 0 ? _a : 1) & 1) == 0)
                    depAddrs.push(addresses[dep.id]);
            }
            return {
                create(state) {
                    state.values[idx] = getter(state);
                    return 1 /* SlotStatus.Changed */;
                },
                update(state, tr) {
                    if ((depDoc && tr.docChanged) || (depSel && (tr.docChanged || tr.selection)) || ensureAll(state, depAddrs)) {
                        let newVal = getter(state);
                        if (multi ? !compareArray(newVal, state.values[idx], compare) : !compare(newVal, state.values[idx])) {
                            state.values[idx] = newVal;
                            return 1 /* SlotStatus.Changed */;
                        }
                    }
                    return 0;
                },
                reconfigure: (state, oldState) => {
                    let newVal, oldAddr = oldState.config.address[id];
                    if (oldAddr != null) {
                        let oldVal = getAddr(oldState, oldAddr);
                        if (this.dependencies.every(dep => {
                            return dep instanceof Facet ? oldState.facet(dep) === state.facet(dep) :
                                dep instanceof StateField ? oldState.field(dep, false) == state.field(dep, false) : true;
                        }) || (multi ? compareArray(newVal = getter(state), oldVal, compare) : compare(newVal = getter(state), oldVal))) {
                            state.values[idx] = oldVal;
                            return 0;
                        }
                    }
                    else {
                        newVal = getter(state);
                    }
                    state.values[idx] = newVal;
                    return 1 /* SlotStatus.Changed */;
                }
            };
        }
    }
    function compareArray(a, b, compare) {
        if (a.length != b.length)
            return false;
        for (let i = 0; i < a.length; i++)
            if (!compare(a[i], b[i]))
                return false;
        return true;
    }
    function ensureAll(state, addrs) {
        let changed = false;
        for (let addr of addrs)
            if (ensureAddr(state, addr) & 1 /* SlotStatus.Changed */)
                changed = true;
        return changed;
    }
    function dynamicFacetSlot(addresses, facet, providers) {
        let providerAddrs = providers.map(p => addresses[p.id]);
        let providerTypes = providers.map(p => p.type);
        let dynamic = providerAddrs.filter(p => !(p & 1));
        let idx = addresses[facet.id] >> 1;
        function get(state) {
            let values = [];
            for (let i = 0; i < providerAddrs.length; i++) {
                let value = getAddr(state, providerAddrs[i]);
                if (providerTypes[i] == 2 /* Provider.Multi */)
                    for (let val of value)
                        values.push(val);
                else
                    values.push(value);
            }
            return facet.combine(values);
        }
        return {
            create(state) {
                for (let addr of providerAddrs)
                    ensureAddr(state, addr);
                state.values[idx] = get(state);
                return 1 /* SlotStatus.Changed */;
            },
            update(state, tr) {
                if (!ensureAll(state, dynamic))
                    return 0;
                let value = get(state);
                if (facet.compare(value, state.values[idx]))
                    return 0;
                state.values[idx] = value;
                return 1 /* SlotStatus.Changed */;
            },
            reconfigure(state, oldState) {
                let depChanged = ensureAll(state, providerAddrs);
                let oldProviders = oldState.config.facets[facet.id], oldValue = oldState.facet(facet);
                if (oldProviders && !depChanged && sameArray(providers, oldProviders)) {
                    state.values[idx] = oldValue;
                    return 0;
                }
                let value = get(state);
                if (facet.compare(value, oldValue)) {
                    state.values[idx] = oldValue;
                    return 0;
                }
                state.values[idx] = value;
                return 1 /* SlotStatus.Changed */;
            }
        };
    }
    const initField = /*@__PURE__*/Facet.define({ static: true });
    /**
    Fields can store additional information in an editor state, and
    keep it in sync with the rest of the state.
    */
    class StateField {
        constructor(
        /**
        @internal
        */
        id, createF, updateF, compareF,
        /**
        @internal
        */
        spec) {
            this.id = id;
            this.createF = createF;
            this.updateF = updateF;
            this.compareF = compareF;
            this.spec = spec;
            /**
            @internal
            */
            this.provides = undefined;
        }
        /**
        Define a state field.
        */
        static define(config) {
            let field = new StateField(nextID++, config.create, config.update, config.compare || ((a, b) => a === b), config);
            if (config.provide)
                field.provides = config.provide(field);
            return field;
        }
        create(state) {
            let init = state.facet(initField).find(i => i.field == this);
            return ((init === null || init === void 0 ? void 0 : init.create) || this.createF)(state);
        }
        /**
        @internal
        */
        slot(addresses) {
            let idx = addresses[this.id] >> 1;
            return {
                create: (state) => {
                    state.values[idx] = this.create(state);
                    return 1 /* SlotStatus.Changed */;
                },
                update: (state, tr) => {
                    let oldVal = state.values[idx];
                    let value = this.updateF(oldVal, tr);
                    if (this.compareF(oldVal, value))
                        return 0;
                    state.values[idx] = value;
                    return 1 /* SlotStatus.Changed */;
                },
                reconfigure: (state, oldState) => {
                    if (oldState.config.address[this.id] != null) {
                        state.values[idx] = oldState.field(this);
                        return 0;
                    }
                    state.values[idx] = this.create(state);
                    return 1 /* SlotStatus.Changed */;
                }
            };
        }
        /**
        Returns an extension that enables this field and overrides the
        way it is initialized. Can be useful when you need to provide a
        non-default starting value for the field.
        */
        init(create) {
            return [this, initField.of({ field: this, create })];
        }
        /**
        State field instances can be used as
        [`Extension`](https://codemirror.net/6/docs/ref/#state.Extension) values to enable the field in a
        given state.
        */
        get extension() { return this; }
    }
    const Prec_ = { lowest: 4, low: 3, default: 2, high: 1, highest: 0 };
    function prec(value) {
        return (ext) => new PrecExtension(ext, value);
    }
    /**
    By default extensions are registered in the order they are found
    in the flattened form of nested array that was provided.
    Individual extension values can be assigned a precedence to
    override this. Extensions that do not have a precedence set get
    the precedence of the nearest parent with a precedence, or
    [`default`](https://codemirror.net/6/docs/ref/#state.Prec.default) if there is no such parent. The
    final ordering of extensions is determined by first sorting by
    precedence and then by order within each precedence.
    */
    const Prec = {
        /**
        The highest precedence level, for extensions that should end up
        near the start of the precedence ordering.
        */
        highest: /*@__PURE__*/prec(Prec_.highest),
        /**
        A higher-than-default precedence, for extensions that should
        come before those with default precedence.
        */
        high: /*@__PURE__*/prec(Prec_.high),
        /**
        The default precedence, which is also used for extensions
        without an explicit precedence.
        */
        default: /*@__PURE__*/prec(Prec_.default),
        /**
        A lower-than-default precedence.
        */
        low: /*@__PURE__*/prec(Prec_.low),
        /**
        The lowest precedence level. Meant for things that should end up
        near the end of the extension order.
        */
        lowest: /*@__PURE__*/prec(Prec_.lowest)
    };
    class PrecExtension {
        constructor(inner, prec) {
            this.inner = inner;
            this.prec = prec;
        }
    }
    /**
    Extension compartments can be used to make a configuration
    dynamic. By [wrapping](https://codemirror.net/6/docs/ref/#state.Compartment.of) part of your
    configuration in a compartment, you can later
    [replace](https://codemirror.net/6/docs/ref/#state.Compartment.reconfigure) that part through a
    transaction.
    */
    class Compartment {
        /**
        Create an instance of this compartment to add to your [state
        configuration](https://codemirror.net/6/docs/ref/#state.EditorStateConfig.extensions).
        */
        of(ext) { return new CompartmentInstance(this, ext); }
        /**
        Create an [effect](https://codemirror.net/6/docs/ref/#state.TransactionSpec.effects) that
        reconfigures this compartment.
        */
        reconfigure(content) {
            return Compartment.reconfigure.of({ compartment: this, extension: content });
        }
        /**
        Get the current content of the compartment in the state, or
        `undefined` if it isn't present.
        */
        get(state) {
            return state.config.compartments.get(this);
        }
    }
    class CompartmentInstance {
        constructor(compartment, inner) {
            this.compartment = compartment;
            this.inner = inner;
        }
    }
    class Configuration {
        constructor(base, compartments, dynamicSlots, address, staticValues, facets) {
            this.base = base;
            this.compartments = compartments;
            this.dynamicSlots = dynamicSlots;
            this.address = address;
            this.staticValues = staticValues;
            this.facets = facets;
            this.statusTemplate = [];
            while (this.statusTemplate.length < dynamicSlots.length)
                this.statusTemplate.push(0 /* SlotStatus.Unresolved */);
        }
        staticFacet(facet) {
            let addr = this.address[facet.id];
            return addr == null ? facet.default : this.staticValues[addr >> 1];
        }
        static resolve(base, compartments, oldState) {
            let fields = [];
            let facets = Object.create(null);
            let newCompartments = new Map();
            for (let ext of flatten(base, compartments, newCompartments)) {
                if (ext instanceof StateField)
                    fields.push(ext);
                else
                    (facets[ext.facet.id] || (facets[ext.facet.id] = [])).push(ext);
            }
            let address = Object.create(null);
            let staticValues = [];
            let dynamicSlots = [];
            for (let field of fields) {
                address[field.id] = dynamicSlots.length << 1;
                dynamicSlots.push(a => field.slot(a));
            }
            let oldFacets = oldState === null || oldState === void 0 ? void 0 : oldState.config.facets;
            for (let id in facets) {
                let providers = facets[id], facet = providers[0].facet;
                let oldProviders = oldFacets && oldFacets[id] || [];
                if (providers.every(p => p.type == 0 /* Provider.Static */)) {
                    address[facet.id] = (staticValues.length << 1) | 1;
                    if (sameArray(oldProviders, providers)) {
                        staticValues.push(oldState.facet(facet));
                    }
                    else {
                        let value = facet.combine(providers.map(p => p.value));
                        staticValues.push(oldState && facet.compare(value, oldState.facet(facet)) ? oldState.facet(facet) : value);
                    }
                }
                else {
                    for (let p of providers) {
                        if (p.type == 0 /* Provider.Static */) {
                            address[p.id] = (staticValues.length << 1) | 1;
                            staticValues.push(p.value);
                        }
                        else {
                            address[p.id] = dynamicSlots.length << 1;
                            dynamicSlots.push(a => p.dynamicSlot(a));
                        }
                    }
                    address[facet.id] = dynamicSlots.length << 1;
                    dynamicSlots.push(a => dynamicFacetSlot(a, facet, providers));
                }
            }
            let dynamic = dynamicSlots.map(f => f(address));
            return new Configuration(base, newCompartments, dynamic, address, staticValues, facets);
        }
    }
    function flatten(extension, compartments, newCompartments) {
        let result = [[], [], [], [], []];
        let seen = new Map();
        function inner(ext, prec) {
            let known = seen.get(ext);
            if (known != null) {
                if (known <= prec)
                    return;
                let found = result[known].indexOf(ext);
                if (found > -1)
                    result[known].splice(found, 1);
                if (ext instanceof CompartmentInstance)
                    newCompartments.delete(ext.compartment);
            }
            seen.set(ext, prec);
            if (Array.isArray(ext)) {
                for (let e of ext)
                    inner(e, prec);
            }
            else if (ext instanceof CompartmentInstance) {
                if (newCompartments.has(ext.compartment))
                    throw new RangeError(`Duplicate use of compartment in extensions`);
                let content = compartments.get(ext.compartment) || ext.inner;
                newCompartments.set(ext.compartment, content);
                inner(content, prec);
            }
            else if (ext instanceof PrecExtension) {
                inner(ext.inner, ext.prec);
            }
            else if (ext instanceof StateField) {
                result[prec].push(ext);
                if (ext.provides)
                    inner(ext.provides, prec);
            }
            else if (ext instanceof FacetProvider) {
                result[prec].push(ext);
                if (ext.facet.extensions)
                    inner(ext.facet.extensions, Prec_.default);
            }
            else {
                let content = ext.extension;
                if (!content)
                    throw new Error(`Unrecognized extension value in extension set (${ext}). This sometimes happens because multiple instances of @codemirror/state are loaded, breaking instanceof checks.`);
                inner(content, prec);
            }
        }
        inner(extension, Prec_.default);
        return result.reduce((a, b) => a.concat(b));
    }
    function ensureAddr(state, addr) {
        if (addr & 1)
            return 2 /* SlotStatus.Computed */;
        let idx = addr >> 1;
        let status = state.status[idx];
        if (status == 4 /* SlotStatus.Computing */)
            throw new Error("Cyclic dependency between fields and/or facets");
        if (status & 2 /* SlotStatus.Computed */)
            return status;
        state.status[idx] = 4 /* SlotStatus.Computing */;
        let changed = state.computeSlot(state, state.config.dynamicSlots[idx]);
        return state.status[idx] = 2 /* SlotStatus.Computed */ | changed;
    }
    function getAddr(state, addr) {
        return addr & 1 ? state.config.staticValues[addr >> 1] : state.values[addr >> 1];
    }

    const languageData = /*@__PURE__*/Facet.define();
    const allowMultipleSelections = /*@__PURE__*/Facet.define({
        combine: values => values.some(v => v),
        static: true
    });
    const lineSeparator = /*@__PURE__*/Facet.define({
        combine: values => values.length ? values[0] : undefined,
        static: true
    });
    const changeFilter = /*@__PURE__*/Facet.define();
    const transactionFilter = /*@__PURE__*/Facet.define();
    const transactionExtender = /*@__PURE__*/Facet.define();
    const readOnly = /*@__PURE__*/Facet.define({
        combine: values => values.length ? values[0] : false
    });

    /**
    Annotations are tagged values that are used to add metadata to
    transactions in an extensible way. They should be used to model
    things that effect the entire transaction (such as its [time
    stamp](https://codemirror.net/6/docs/ref/#state.Transaction^time) or information about its
    [origin](https://codemirror.net/6/docs/ref/#state.Transaction^userEvent)). For effects that happen
    _alongside_ the other changes made by the transaction, [state
    effects](https://codemirror.net/6/docs/ref/#state.StateEffect) are more appropriate.
    */
    class Annotation {
        /**
        @internal
        */
        constructor(
        /**
        The annotation type.
        */
        type,
        /**
        The value of this annotation.
        */
        value) {
            this.type = type;
            this.value = value;
        }
        /**
        Define a new type of annotation.
        */
        static define() { return new AnnotationType(); }
    }
    /**
    Marker that identifies a type of [annotation](https://codemirror.net/6/docs/ref/#state.Annotation).
    */
    class AnnotationType {
        /**
        Create an instance of this annotation.
        */
        of(value) { return new Annotation(this, value); }
    }
    /**
    Representation of a type of state effect. Defined with
    [`StateEffect.define`](https://codemirror.net/6/docs/ref/#state.StateEffect^define).
    */
    class StateEffectType {
        /**
        @internal
        */
        constructor(
        // The `any` types in these function types are there to work
        // around TypeScript issue #37631, where the type guard on
        // `StateEffect.is` mysteriously stops working when these properly
        // have type `Value`.
        /**
        @internal
        */
        map) {
            this.map = map;
        }
        /**
        Create a [state effect](https://codemirror.net/6/docs/ref/#state.StateEffect) instance of this
        type.
        */
        of(value) { return new StateEffect(this, value); }
    }
    /**
    State effects can be used to represent additional effects
    associated with a [transaction](https://codemirror.net/6/docs/ref/#state.Transaction.effects). They
    are often useful to model changes to custom [state
    fields](https://codemirror.net/6/docs/ref/#state.StateField), when those changes aren't implicit in
    document or selection changes.
    */
    class StateEffect {
        /**
        @internal
        */
        constructor(
        /**
        @internal
        */
        type,
        /**
        The value of this effect.
        */
        value) {
            this.type = type;
            this.value = value;
        }
        /**
        Map this effect through a position mapping. Will return
        `undefined` when that ends up deleting the effect.
        */
        map(mapping) {
            let mapped = this.type.map(this.value, mapping);
            return mapped === undefined ? undefined : mapped == this.value ? this : new StateEffect(this.type, mapped);
        }
        /**
        Tells you whether this effect object is of a given
        [type](https://codemirror.net/6/docs/ref/#state.StateEffectType).
        */
        is(type) { return this.type == type; }
        /**
        Define a new effect type. The type parameter indicates the type
        of values that his effect holds. It should be a type that
        doesn't include `undefined`, since that is used in
        [mapping](https://codemirror.net/6/docs/ref/#state.StateEffect.map) to indicate that an effect is
        removed.
        */
        static define(spec = {}) {
            return new StateEffectType(spec.map || (v => v));
        }
        /**
        Map an array of effects through a change set.
        */
        static mapEffects(effects, mapping) {
            if (!effects.length)
                return effects;
            let result = [];
            for (let effect of effects) {
                let mapped = effect.map(mapping);
                if (mapped)
                    result.push(mapped);
            }
            return result;
        }
    }
    /**
    This effect can be used to reconfigure the root extensions of
    the editor. Doing this will discard any extensions
    [appended](https://codemirror.net/6/docs/ref/#state.StateEffect^appendConfig), but does not reset
    the content of [reconfigured](https://codemirror.net/6/docs/ref/#state.Compartment.reconfigure)
    compartments.
    */
    StateEffect.reconfigure = /*@__PURE__*/StateEffect.define();
    /**
    Append extensions to the top-level configuration of the editor.
    */
    StateEffect.appendConfig = /*@__PURE__*/StateEffect.define();
    /**
    Changes to the editor state are grouped into transactions.
    Typically, a user action creates a single transaction, which may
    contain any number of document changes, may change the selection,
    or have other effects. Create a transaction by calling
    [`EditorState.update`](https://codemirror.net/6/docs/ref/#state.EditorState.update), or immediately
    dispatch one by calling
    [`EditorView.dispatch`](https://codemirror.net/6/docs/ref/#view.EditorView.dispatch).
    */
    class Transaction {
        constructor(
        /**
        The state from which the transaction starts.
        */
        startState,
        /**
        The document changes made by this transaction.
        */
        changes,
        /**
        The selection set by this transaction, or undefined if it
        doesn't explicitly set a selection.
        */
        selection,
        /**
        The effects added to the transaction.
        */
        effects,
        /**
        @internal
        */
        annotations,
        /**
        Whether the selection should be scrolled into view after this
        transaction is dispatched.
        */
        scrollIntoView) {
            this.startState = startState;
            this.changes = changes;
            this.selection = selection;
            this.effects = effects;
            this.annotations = annotations;
            this.scrollIntoView = scrollIntoView;
            /**
            @internal
            */
            this._doc = null;
            /**
            @internal
            */
            this._state = null;
            if (selection)
                checkSelection(selection, changes.newLength);
            if (!annotations.some((a) => a.type == Transaction.time))
                this.annotations = annotations.concat(Transaction.time.of(Date.now()));
        }
        /**
        @internal
        */
        static create(startState, changes, selection, effects, annotations, scrollIntoView) {
            return new Transaction(startState, changes, selection, effects, annotations, scrollIntoView);
        }
        /**
        The new document produced by the transaction. Contrary to
        [`.state`](https://codemirror.net/6/docs/ref/#state.Transaction.state)`.doc`, accessing this won't
        force the entire new state to be computed right away, so it is
        recommended that [transaction
        filters](https://codemirror.net/6/docs/ref/#state.EditorState^transactionFilter) use this getter
        when they need to look at the new document.
        */
        get newDoc() {
            return this._doc || (this._doc = this.changes.apply(this.startState.doc));
        }
        /**
        The new selection produced by the transaction. If
        [`this.selection`](https://codemirror.net/6/docs/ref/#state.Transaction.selection) is undefined,
        this will [map](https://codemirror.net/6/docs/ref/#state.EditorSelection.map) the start state's
        current selection through the changes made by the transaction.
        */
        get newSelection() {
            return this.selection || this.startState.selection.map(this.changes);
        }
        /**
        The new state created by the transaction. Computed on demand
        (but retained for subsequent access), so it is recommended not to
        access it in [transaction
        filters](https://codemirror.net/6/docs/ref/#state.EditorState^transactionFilter) when possible.
        */
        get state() {
            if (!this._state)
                this.startState.applyTransaction(this);
            return this._state;
        }
        /**
        Get the value of the given annotation type, if any.
        */
        annotation(type) {
            for (let ann of this.annotations)
                if (ann.type == type)
                    return ann.value;
            return undefined;
        }
        /**
        Indicates whether the transaction changed the document.
        */
        get docChanged() { return !this.changes.empty; }
        /**
        Indicates whether this transaction reconfigures the state
        (through a [configuration compartment](https://codemirror.net/6/docs/ref/#state.Compartment) or
        with a top-level configuration
        [effect](https://codemirror.net/6/docs/ref/#state.StateEffect^reconfigure).
        */
        get reconfigured() { return this.startState.config != this.state.config; }
        /**
        Returns true if the transaction has a [user
        event](https://codemirror.net/6/docs/ref/#state.Transaction^userEvent) annotation that is equal to
        or more specific than `event`. For example, if the transaction
        has `"select.pointer"` as user event, `"select"` and
        `"select.pointer"` will match it.
        */
        isUserEvent(event) {
            let e = this.annotation(Transaction.userEvent);
            return !!(e && (e == event || e.length > event.length && e.slice(0, event.length) == event && e[event.length] == "."));
        }
    }
    /**
    Annotation used to store transaction timestamps. Automatically
    added to every transaction, holding `Date.now()`.
    */
    Transaction.time = /*@__PURE__*/Annotation.define();
    /**
    Annotation used to associate a transaction with a user interface
    event. Holds a string identifying the event, using a
    dot-separated format to support attaching more specific
    information. The events used by the core libraries are:

     - `"input"` when content is entered
       - `"input.type"` for typed input
         - `"input.type.compose"` for composition
       - `"input.paste"` for pasted input
       - `"input.drop"` when adding content with drag-and-drop
       - `"input.complete"` when autocompleting
     - `"delete"` when the user deletes content
       - `"delete.selection"` when deleting the selection
       - `"delete.forward"` when deleting forward from the selection
       - `"delete.backward"` when deleting backward from the selection
       - `"delete.cut"` when cutting to the clipboard
     - `"move"` when content is moved
       - `"move.drop"` when content is moved within the editor through drag-and-drop
     - `"select"` when explicitly changing the selection
       - `"select.pointer"` when selecting with a mouse or other pointing device
     - `"undo"` and `"redo"` for history actions

    Use [`isUserEvent`](https://codemirror.net/6/docs/ref/#state.Transaction.isUserEvent) to check
    whether the annotation matches a given event.
    */
    Transaction.userEvent = /*@__PURE__*/Annotation.define();
    /**
    Annotation indicating whether a transaction should be added to
    the undo history or not.
    */
    Transaction.addToHistory = /*@__PURE__*/Annotation.define();
    /**
    Annotation indicating (when present and true) that a transaction
    represents a change made by some other actor, not the user. This
    is used, for example, to tag other people's changes in
    collaborative editing.
    */
    Transaction.remote = /*@__PURE__*/Annotation.define();
    function joinRanges(a, b) {
        let result = [];
        for (let iA = 0, iB = 0;;) {
            let from, to;
            if (iA < a.length && (iB == b.length || b[iB] >= a[iA])) {
                from = a[iA++];
                to = a[iA++];
            }
            else if (iB < b.length) {
                from = b[iB++];
                to = b[iB++];
            }
            else
                return result;
            if (!result.length || result[result.length - 1] < from)
                result.push(from, to);
            else if (result[result.length - 1] < to)
                result[result.length - 1] = to;
        }
    }
    function mergeTransaction(a, b, sequential) {
        var _a;
        let mapForA, mapForB, changes;
        if (sequential) {
            mapForA = b.changes;
            mapForB = ChangeSet.empty(b.changes.length);
            changes = a.changes.compose(b.changes);
        }
        else {
            mapForA = b.changes.map(a.changes);
            mapForB = a.changes.mapDesc(b.changes, true);
            changes = a.changes.compose(mapForA);
        }
        return {
            changes,
            selection: b.selection ? b.selection.map(mapForB) : (_a = a.selection) === null || _a === void 0 ? void 0 : _a.map(mapForA),
            effects: StateEffect.mapEffects(a.effects, mapForA).concat(StateEffect.mapEffects(b.effects, mapForB)),
            annotations: a.annotations.length ? a.annotations.concat(b.annotations) : b.annotations,
            scrollIntoView: a.scrollIntoView || b.scrollIntoView
        };
    }
    function resolveTransactionInner(state, spec, docSize) {
        let sel = spec.selection, annotations = asArray$1(spec.annotations);
        if (spec.userEvent)
            annotations = annotations.concat(Transaction.userEvent.of(spec.userEvent));
        return {
            changes: spec.changes instanceof ChangeSet ? spec.changes
                : ChangeSet.of(spec.changes || [], docSize, state.facet(lineSeparator)),
            selection: sel && (sel instanceof EditorSelection ? sel : EditorSelection.single(sel.anchor, sel.head)),
            effects: asArray$1(spec.effects),
            annotations,
            scrollIntoView: !!spec.scrollIntoView
        };
    }
    function resolveTransaction(state, specs, filter) {
        let s = resolveTransactionInner(state, specs.length ? specs[0] : {}, state.doc.length);
        if (specs.length && specs[0].filter === false)
            filter = false;
        for (let i = 1; i < specs.length; i++) {
            if (specs[i].filter === false)
                filter = false;
            let seq = !!specs[i].sequential;
            s = mergeTransaction(s, resolveTransactionInner(state, specs[i], seq ? s.changes.newLength : state.doc.length), seq);
        }
        let tr = Transaction.create(state, s.changes, s.selection, s.effects, s.annotations, s.scrollIntoView);
        return extendTransaction(filter ? filterTransaction(tr) : tr);
    }
    // Finish a transaction by applying filters if necessary.
    function filterTransaction(tr) {
        let state = tr.startState;
        // Change filters
        let result = true;
        for (let filter of state.facet(changeFilter)) {
            let value = filter(tr);
            if (value === false) {
                result = false;
                break;
            }
            if (Array.isArray(value))
                result = result === true ? value : joinRanges(result, value);
        }
        if (result !== true) {
            let changes, back;
            if (result === false) {
                back = tr.changes.invertedDesc;
                changes = ChangeSet.empty(state.doc.length);
            }
            else {
                let filtered = tr.changes.filter(result);
                changes = filtered.changes;
                back = filtered.filtered.mapDesc(filtered.changes).invertedDesc;
            }
            tr = Transaction.create(state, changes, tr.selection && tr.selection.map(back), StateEffect.mapEffects(tr.effects, back), tr.annotations, tr.scrollIntoView);
        }
        // Transaction filters
        let filters = state.facet(transactionFilter);
        for (let i = filters.length - 1; i >= 0; i--) {
            let filtered = filters[i](tr);
            if (filtered instanceof Transaction)
                tr = filtered;
            else if (Array.isArray(filtered) && filtered.length == 1 && filtered[0] instanceof Transaction)
                tr = filtered[0];
            else
                tr = resolveTransaction(state, asArray$1(filtered), false);
        }
        return tr;
    }
    function extendTransaction(tr) {
        let state = tr.startState, extenders = state.facet(transactionExtender), spec = tr;
        for (let i = extenders.length - 1; i >= 0; i--) {
            let extension = extenders[i](tr);
            if (extension && Object.keys(extension).length)
                spec = mergeTransaction(spec, resolveTransactionInner(state, extension, tr.changes.newLength), true);
        }
        return spec == tr ? tr : Transaction.create(state, tr.changes, tr.selection, spec.effects, spec.annotations, spec.scrollIntoView);
    }
    const none$2 = [];
    function asArray$1(value) {
        return value == null ? none$2 : Array.isArray(value) ? value : [value];
    }

    /**
    The categories produced by a [character
    categorizer](https://codemirror.net/6/docs/ref/#state.EditorState.charCategorizer). These are used
    do things like selecting by word.
    */
    var CharCategory = /*@__PURE__*/(function (CharCategory) {
        /**
        Word characters.
        */
        CharCategory[CharCategory["Word"] = 0] = "Word";
        /**
        Whitespace.
        */
        CharCategory[CharCategory["Space"] = 1] = "Space";
        /**
        Anything else.
        */
        CharCategory[CharCategory["Other"] = 2] = "Other";
    return CharCategory})(CharCategory || (CharCategory = {}));
    const nonASCIISingleCaseWordChar = /[\u00df\u0587\u0590-\u05f4\u0600-\u06ff\u3040-\u309f\u30a0-\u30ff\u3400-\u4db5\u4e00-\u9fcc\uac00-\ud7af]/;
    let wordChar;
    try {
        wordChar = /*@__PURE__*/new RegExp("[\\p{Alphabetic}\\p{Number}_]", "u");
    }
    catch (_) { }
    function hasWordChar(str) {
        if (wordChar)
            return wordChar.test(str);
        for (let i = 0; i < str.length; i++) {
            let ch = str[i];
            if (/\w/.test(ch) || ch > "\x80" && (ch.toUpperCase() != ch.toLowerCase() || nonASCIISingleCaseWordChar.test(ch)))
                return true;
        }
        return false;
    }
    function makeCategorizer(wordChars) {
        return (char) => {
            if (!/\S/.test(char))
                return CharCategory.Space;
            if (hasWordChar(char))
                return CharCategory.Word;
            for (let i = 0; i < wordChars.length; i++)
                if (char.indexOf(wordChars[i]) > -1)
                    return CharCategory.Word;
            return CharCategory.Other;
        };
    }

    /**
    The editor state class is a persistent (immutable) data structure.
    To update a state, you [create](https://codemirror.net/6/docs/ref/#state.EditorState.update) a
    [transaction](https://codemirror.net/6/docs/ref/#state.Transaction), which produces a _new_ state
    instance, without modifying the original object.

    As such, _never_ mutate properties of a state directly. That'll
    just break things.
    */
    class EditorState {
        constructor(
        /**
        @internal
        */
        config,
        /**
        The current document.
        */
        doc,
        /**
        The current selection.
        */
        selection,
        /**
        @internal
        */
        values, computeSlot, tr) {
            this.config = config;
            this.doc = doc;
            this.selection = selection;
            this.values = values;
            this.status = config.statusTemplate.slice();
            this.computeSlot = computeSlot;
            // Fill in the computed state immediately, so that further queries
            // for it made during the update return this state
            if (tr)
                tr._state = this;
            for (let i = 0; i < this.config.dynamicSlots.length; i++)
                ensureAddr(this, i << 1);
            this.computeSlot = null;
        }
        field(field, require = true) {
            let addr = this.config.address[field.id];
            if (addr == null) {
                if (require)
                    throw new RangeError("Field is not present in this state");
                return undefined;
            }
            ensureAddr(this, addr);
            return getAddr(this, addr);
        }
        /**
        Create a [transaction](https://codemirror.net/6/docs/ref/#state.Transaction) that updates this
        state. Any number of [transaction specs](https://codemirror.net/6/docs/ref/#state.TransactionSpec)
        can be passed. Unless
        [`sequential`](https://codemirror.net/6/docs/ref/#state.TransactionSpec.sequential) is set, the
        [changes](https://codemirror.net/6/docs/ref/#state.TransactionSpec.changes) (if any) of each spec
        are assumed to start in the _current_ document (not the document
        produced by previous specs), and its
        [selection](https://codemirror.net/6/docs/ref/#state.TransactionSpec.selection) and
        [effects](https://codemirror.net/6/docs/ref/#state.TransactionSpec.effects) are assumed to refer
        to the document created by its _own_ changes. The resulting
        transaction contains the combined effect of all the different
        specs. For [selection](https://codemirror.net/6/docs/ref/#state.TransactionSpec.selection), later
        specs take precedence over earlier ones.
        */
        update(...specs) {
            return resolveTransaction(this, specs, true);
        }
        /**
        @internal
        */
        applyTransaction(tr) {
            let conf = this.config, { base, compartments } = conf;
            for (let effect of tr.effects) {
                if (effect.is(Compartment.reconfigure)) {
                    if (conf) {
                        compartments = new Map;
                        conf.compartments.forEach((val, key) => compartments.set(key, val));
                        conf = null;
                    }
                    compartments.set(effect.value.compartment, effect.value.extension);
                }
                else if (effect.is(StateEffect.reconfigure)) {
                    conf = null;
                    base = effect.value;
                }
                else if (effect.is(StateEffect.appendConfig)) {
                    conf = null;
                    base = asArray$1(base).concat(effect.value);
                }
            }
            let startValues;
            if (!conf) {
                conf = Configuration.resolve(base, compartments, this);
                let intermediateState = new EditorState(conf, this.doc, this.selection, conf.dynamicSlots.map(() => null), (state, slot) => slot.reconfigure(state, this), null);
                startValues = intermediateState.values;
            }
            else {
                startValues = tr.startState.values.slice();
            }
            let selection = tr.startState.facet(allowMultipleSelections) ? tr.newSelection : tr.newSelection.asSingle();
            new EditorState(conf, tr.newDoc, selection, startValues, (state, slot) => slot.update(state, tr), tr);
        }
        /**
        Create a [transaction spec](https://codemirror.net/6/docs/ref/#state.TransactionSpec) that
        replaces every selection range with the given content.
        */
        replaceSelection(text) {
            if (typeof text == "string")
                text = this.toText(text);
            return this.changeByRange(range => ({ changes: { from: range.from, to: range.to, insert: text },
                range: EditorSelection.cursor(range.from + text.length) }));
        }
        /**
        Create a set of changes and a new selection by running the given
        function for each range in the active selection. The function
        can return an optional set of changes (in the coordinate space
        of the start document), plus an updated range (in the coordinate
        space of the document produced by the call's own changes). This
        method will merge all the changes and ranges into a single
        changeset and selection, and return it as a [transaction
        spec](https://codemirror.net/6/docs/ref/#state.TransactionSpec), which can be passed to
        [`update`](https://codemirror.net/6/docs/ref/#state.EditorState.update).
        */
        changeByRange(f) {
            let sel = this.selection;
            let result1 = f(sel.ranges[0]);
            let changes = this.changes(result1.changes), ranges = [result1.range];
            let effects = asArray$1(result1.effects);
            for (let i = 1; i < sel.ranges.length; i++) {
                let result = f(sel.ranges[i]);
                let newChanges = this.changes(result.changes), newMapped = newChanges.map(changes);
                for (let j = 0; j < i; j++)
                    ranges[j] = ranges[j].map(newMapped);
                let mapBy = changes.mapDesc(newChanges, true);
                ranges.push(result.range.map(mapBy));
                changes = changes.compose(newMapped);
                effects = StateEffect.mapEffects(effects, newMapped).concat(StateEffect.mapEffects(asArray$1(result.effects), mapBy));
            }
            return {
                changes,
                selection: EditorSelection.create(ranges, sel.mainIndex),
                effects
            };
        }
        /**
        Create a [change set](https://codemirror.net/6/docs/ref/#state.ChangeSet) from the given change
        description, taking the state's document length and line
        separator into account.
        */
        changes(spec = []) {
            if (spec instanceof ChangeSet)
                return spec;
            return ChangeSet.of(spec, this.doc.length, this.facet(EditorState.lineSeparator));
        }
        /**
        Using the state's [line
        separator](https://codemirror.net/6/docs/ref/#state.EditorState^lineSeparator), create a
        [`Text`](https://codemirror.net/6/docs/ref/#state.Text) instance from the given string.
        */
        toText(string) {
            return Text.of(string.split(this.facet(EditorState.lineSeparator) || DefaultSplit));
        }
        /**
        Return the given range of the document as a string.
        */
        sliceDoc(from = 0, to = this.doc.length) {
            return this.doc.sliceString(from, to, this.lineBreak);
        }
        /**
        Get the value of a state [facet](https://codemirror.net/6/docs/ref/#state.Facet).
        */
        facet(facet) {
            let addr = this.config.address[facet.id];
            if (addr == null)
                return facet.default;
            ensureAddr(this, addr);
            return getAddr(this, addr);
        }
        /**
        Convert this state to a JSON-serializable object. When custom
        fields should be serialized, you can pass them in as an object
        mapping property names (in the resulting object, which should
        not use `doc` or `selection`) to fields.
        */
        toJSON(fields) {
            let result = {
                doc: this.sliceDoc(),
                selection: this.selection.toJSON()
            };
            if (fields)
                for (let prop in fields) {
                    let value = fields[prop];
                    if (value instanceof StateField && this.config.address[value.id] != null)
                        result[prop] = value.spec.toJSON(this.field(fields[prop]), this);
                }
            return result;
        }
        /**
        Deserialize a state from its JSON representation. When custom
        fields should be deserialized, pass the same object you passed
        to [`toJSON`](https://codemirror.net/6/docs/ref/#state.EditorState.toJSON) when serializing as
        third argument.
        */
        static fromJSON(json, config = {}, fields) {
            if (!json || typeof json.doc != "string")
                throw new RangeError("Invalid JSON representation for EditorState");
            let fieldInit = [];
            if (fields)
                for (let prop in fields) {
                    if (Object.prototype.hasOwnProperty.call(json, prop)) {
                        let field = fields[prop], value = json[prop];
                        fieldInit.push(field.init(state => field.spec.fromJSON(value, state)));
                    }
                }
            return EditorState.create({
                doc: json.doc,
                selection: EditorSelection.fromJSON(json.selection),
                extensions: config.extensions ? fieldInit.concat([config.extensions]) : fieldInit
            });
        }
        /**
        Create a new state. You'll usually only need this when
        initializing an editor—updated states are created by applying
        transactions.
        */
        static create(config = {}) {
            let configuration = Configuration.resolve(config.extensions || [], new Map);
            let doc = config.doc instanceof Text ? config.doc
                : Text.of((config.doc || "").split(configuration.staticFacet(EditorState.lineSeparator) || DefaultSplit));
            let selection = !config.selection ? EditorSelection.single(0)
                : config.selection instanceof EditorSelection ? config.selection
                    : EditorSelection.single(config.selection.anchor, config.selection.head);
            checkSelection(selection, doc.length);
            if (!configuration.staticFacet(allowMultipleSelections))
                selection = selection.asSingle();
            return new EditorState(configuration, doc, selection, configuration.dynamicSlots.map(() => null), (state, slot) => slot.create(state), null);
        }
        /**
        The size (in columns) of a tab in the document, determined by
        the [`tabSize`](https://codemirror.net/6/docs/ref/#state.EditorState^tabSize) facet.
        */
        get tabSize() { return this.facet(EditorState.tabSize); }
        /**
        Get the proper [line-break](https://codemirror.net/6/docs/ref/#state.EditorState^lineSeparator)
        string for this state.
        */
        get lineBreak() { return this.facet(EditorState.lineSeparator) || "\n"; }
        /**
        Returns true when the editor is
        [configured](https://codemirror.net/6/docs/ref/#state.EditorState^readOnly) to be read-only.
        */
        get readOnly() { return this.facet(readOnly); }
        /**
        Look up a translation for the given phrase (via the
        [`phrases`](https://codemirror.net/6/docs/ref/#state.EditorState^phrases) facet), or return the
        original string if no translation is found.

        If additional arguments are passed, they will be inserted in
        place of markers like `$1` (for the first value) and `$2`, etc.
        A single `$` is equivalent to `$1`, and `$$` will produce a
        literal dollar sign.
        */
        phrase(phrase, ...insert) {
            for (let map of this.facet(EditorState.phrases))
                if (Object.prototype.hasOwnProperty.call(map, phrase)) {
                    phrase = map[phrase];
                    break;
                }
            if (insert.length)
                phrase = phrase.replace(/\$(\$|\d*)/g, (m, i) => {
                    if (i == "$")
                        return "$";
                    let n = +(i || 1);
                    return !n || n > insert.length ? m : insert[n - 1];
                });
            return phrase;
        }
        /**
        Find the values for a given language data field, provided by the
        the [`languageData`](https://codemirror.net/6/docs/ref/#state.EditorState^languageData) facet.

        Examples of language data fields are...

        - [`"commentTokens"`](https://codemirror.net/6/docs/ref/#commands.CommentTokens) for specifying
          comment syntax.
        - [`"autocomplete"`](https://codemirror.net/6/docs/ref/#autocomplete.autocompletion^config.override)
          for providing language-specific completion sources.
        - [`"wordChars"`](https://codemirror.net/6/docs/ref/#state.EditorState.charCategorizer) for adding
          characters that should be considered part of words in this
          language.
        - [`"closeBrackets"`](https://codemirror.net/6/docs/ref/#autocomplete.CloseBracketConfig) controls
          bracket closing behavior.
        */
        languageDataAt(name, pos, side = -1) {
            let values = [];
            for (let provider of this.facet(languageData)) {
                for (let result of provider(this, pos, side)) {
                    if (Object.prototype.hasOwnProperty.call(result, name))
                        values.push(result[name]);
                }
            }
            return values;
        }
        /**
        Return a function that can categorize strings (expected to
        represent a single [grapheme cluster](https://codemirror.net/6/docs/ref/#state.findClusterBreak))
        into one of:

         - Word (contains an alphanumeric character or a character
           explicitly listed in the local language's `"wordChars"`
           language data, which should be a string)
         - Space (contains only whitespace)
         - Other (anything else)
        */
        charCategorizer(at) {
            return makeCategorizer(this.languageDataAt("wordChars", at).join(""));
        }
        /**
        Find the word at the given position, meaning the range
        containing all [word](https://codemirror.net/6/docs/ref/#state.CharCategory.Word) characters
        around it. If no word characters are adjacent to the position,
        this returns null.
        */
        wordAt(pos) {
            let { text, from, length } = this.doc.lineAt(pos);
            let cat = this.charCategorizer(pos);
            let start = pos - from, end = pos - from;
            while (start > 0) {
                let prev = findClusterBreak(text, start, false);
                if (cat(text.slice(prev, start)) != CharCategory.Word)
                    break;
                start = prev;
            }
            while (end < length) {
                let next = findClusterBreak(text, end);
                if (cat(text.slice(end, next)) != CharCategory.Word)
                    break;
                end = next;
            }
            return start == end ? null : EditorSelection.range(start + from, end + from);
        }
    }
    /**
    A facet that, when enabled, causes the editor to allow multiple
    ranges to be selected. Be careful though, because by default the
    editor relies on the native DOM selection, which cannot handle
    multiple selections. An extension like
    [`drawSelection`](https://codemirror.net/6/docs/ref/#view.drawSelection) can be used to make
    secondary selections visible to the user.
    */
    EditorState.allowMultipleSelections = allowMultipleSelections;
    /**
    Configures the tab size to use in this state. The first
    (highest-precedence) value of the facet is used. If no value is
    given, this defaults to 4.
    */
    EditorState.tabSize = /*@__PURE__*/Facet.define({
        combine: values => values.length ? values[0] : 4
    });
    /**
    The line separator to use. By default, any of `"\n"`, `"\r\n"`
    and `"\r"` is treated as a separator when splitting lines, and
    lines are joined with `"\n"`.

    When you configure a value here, only that precise separator
    will be used, allowing you to round-trip documents through the
    editor without normalizing line separators.
    */
    EditorState.lineSeparator = lineSeparator;
    /**
    This facet controls the value of the
    [`readOnly`](https://codemirror.net/6/docs/ref/#state.EditorState.readOnly) getter, which is
    consulted by commands and extensions that implement editing
    functionality to determine whether they should apply. It
    defaults to false, but when its highest-precedence value is
    `true`, such functionality disables itself.

    Not to be confused with
    [`EditorView.editable`](https://codemirror.net/6/docs/ref/#view.EditorView^editable), which
    controls whether the editor's DOM is set to be editable (and
    thus focusable).
    */
    EditorState.readOnly = readOnly;
    /**
    Registers translation phrases. The
    [`phrase`](https://codemirror.net/6/docs/ref/#state.EditorState.phrase) method will look through
    all objects registered with this facet to find translations for
    its argument.
    */
    EditorState.phrases = /*@__PURE__*/Facet.define({
        compare(a, b) {
            let kA = Object.keys(a), kB = Object.keys(b);
            return kA.length == kB.length && kA.every(k => a[k] == b[k]);
        }
    });
    /**
    A facet used to register [language
    data](https://codemirror.net/6/docs/ref/#state.EditorState.languageDataAt) providers.
    */
    EditorState.languageData = languageData;
    /**
    Facet used to register change filters, which are called for each
    transaction (unless explicitly
    [disabled](https://codemirror.net/6/docs/ref/#state.TransactionSpec.filter)), and can suppress
    part of the transaction's changes.

    Such a function can return `true` to indicate that it doesn't
    want to do anything, `false` to completely stop the changes in
    the transaction, or a set of ranges in which changes should be
    suppressed. Such ranges are represented as an array of numbers,
    with each pair of two numbers indicating the start and end of a
    range. So for example `[10, 20, 100, 110]` suppresses changes
    between 10 and 20, and between 100 and 110.
    */
    EditorState.changeFilter = changeFilter;
    /**
    Facet used to register a hook that gets a chance to update or
    replace transaction specs before they are applied. This will
    only be applied for transactions that don't have
    [`filter`](https://codemirror.net/6/docs/ref/#state.TransactionSpec.filter) set to `false`. You
    can either return a single transaction spec (possibly the input
    transaction), or an array of specs (which will be combined in
    the same way as the arguments to
    [`EditorState.update`](https://codemirror.net/6/docs/ref/#state.EditorState.update)).

    When possible, it is recommended to avoid accessing
    [`Transaction.state`](https://codemirror.net/6/docs/ref/#state.Transaction.state) in a filter,
    since it will force creation of a state that will then be
    discarded again, if the transaction is actually filtered.

    (This functionality should be used with care. Indiscriminately
    modifying transaction is likely to break something or degrade
    the user experience.)
    */
    EditorState.transactionFilter = transactionFilter;
    /**
    This is a more limited form of
    [`transactionFilter`](https://codemirror.net/6/docs/ref/#state.EditorState^transactionFilter),
    which can only add
    [annotations](https://codemirror.net/6/docs/ref/#state.TransactionSpec.annotations) and
    [effects](https://codemirror.net/6/docs/ref/#state.TransactionSpec.effects). _But_, this type
    of filter runs even if the transaction has disabled regular
    [filtering](https://codemirror.net/6/docs/ref/#state.TransactionSpec.filter), making it suitable
    for effects that don't need to touch the changes or selection,
    but do want to process every transaction.

    Extenders run _after_ filters, when both are present.
    */
    EditorState.transactionExtender = transactionExtender;
    Compartment.reconfigure = /*@__PURE__*/StateEffect.define();

    /**
    Utility function for combining behaviors to fill in a config
    object from an array of provided configs. `defaults` should hold
    default values for all optional fields in `Config`.

    The function will, by default, error
    when a field gets two values that aren't `===`-equal, but you can
    provide combine functions per field to do something else.
    */
    function combineConfig(configs, defaults, // Should hold only the optional properties of Config, but I haven't managed to express that
    combine = {}) {
        let result = {};
        for (let config of configs)
            for (let key of Object.keys(config)) {
                let value = config[key], current = result[key];
                if (current === undefined)
                    result[key] = value;
                else if (current === value || value === undefined) ; // No conflict
                else if (Object.hasOwnProperty.call(combine, key))
                    result[key] = combine[key](current, value);
                else
                    throw new Error("Config merge conflict for field " + key);
            }
        for (let key in defaults)
            if (result[key] === undefined)
                result[key] = defaults[key];
        return result;
    }

    /**
    Each range is associated with a value, which must inherit from
    this class.
    */
    class RangeValue {
        /**
        Compare this value with another value. Used when comparing
        rangesets. The default implementation compares by identity.
        Unless you are only creating a fixed number of unique instances
        of your value type, it is a good idea to implement this
        properly.
        */
        eq(other) { return this == other; }
        /**
        Create a [range](https://codemirror.net/6/docs/ref/#state.Range) with this value.
        */
        range(from, to = from) { return Range.create(from, to, this); }
    }
    RangeValue.prototype.startSide = RangeValue.prototype.endSide = 0;
    RangeValue.prototype.point = false;
    RangeValue.prototype.mapMode = MapMode.TrackDel;
    /**
    A range associates a value with a range of positions.
    */
    class Range {
        constructor(
        /**
        The range's start position.
        */
        from,
        /**
        Its end position.
        */
        to,
        /**
        The value associated with this range.
        */
        value) {
            this.from = from;
            this.to = to;
            this.value = value;
        }
        /**
        @internal
        */
        static create(from, to, value) {
            return new Range(from, to, value);
        }
    }
    function cmpRange(a, b) {
        return a.from - b.from || a.value.startSide - b.value.startSide;
    }
    class Chunk {
        constructor(from, to, value,
        // Chunks are marked with the largest point that occurs
        // in them (or -1 for no points), so that scans that are
        // only interested in points (such as the
        // heightmap-related logic) can skip range-only chunks.
        maxPoint) {
            this.from = from;
            this.to = to;
            this.value = value;
            this.maxPoint = maxPoint;
        }
        get length() { return this.to[this.to.length - 1]; }
        // Find the index of the given position and side. Use the ranges'
        // `from` pos when `end == false`, `to` when `end == true`.
        findIndex(pos, side, end, startAt = 0) {
            let arr = end ? this.to : this.from;
            for (let lo = startAt, hi = arr.length;;) {
                if (lo == hi)
                    return lo;
                let mid = (lo + hi) >> 1;
                let diff = arr[mid] - pos || (end ? this.value[mid].endSide : this.value[mid].startSide) - side;
                if (mid == lo)
                    return diff >= 0 ? lo : hi;
                if (diff >= 0)
                    hi = mid;
                else
                    lo = mid + 1;
            }
        }
        between(offset, from, to, f) {
            for (let i = this.findIndex(from, -1000000000 /* C.Far */, true), e = this.findIndex(to, 1000000000 /* C.Far */, false, i); i < e; i++)
                if (f(this.from[i] + offset, this.to[i] + offset, this.value[i]) === false)
                    return false;
        }
        map(offset, changes) {
            let value = [], from = [], to = [], newPos = -1, maxPoint = -1;
            for (let i = 0; i < this.value.length; i++) {
                let val = this.value[i], curFrom = this.from[i] + offset, curTo = this.to[i] + offset, newFrom, newTo;
                if (curFrom == curTo) {
                    let mapped = changes.mapPos(curFrom, val.startSide, val.mapMode);
                    if (mapped == null)
                        continue;
                    newFrom = newTo = mapped;
                    if (val.startSide != val.endSide) {
                        newTo = changes.mapPos(curFrom, val.endSide);
                        if (newTo < newFrom)
                            continue;
                    }
                }
                else {
                    newFrom = changes.mapPos(curFrom, val.startSide);
                    newTo = changes.mapPos(curTo, val.endSide);
                    if (newFrom > newTo || newFrom == newTo && val.startSide > 0 && val.endSide <= 0)
                        continue;
                }
                if ((newTo - newFrom || val.endSide - val.startSide) < 0)
                    continue;
                if (newPos < 0)
                    newPos = newFrom;
                if (val.point)
                    maxPoint = Math.max(maxPoint, newTo - newFrom);
                value.push(val);
                from.push(newFrom - newPos);
                to.push(newTo - newPos);
            }
            return { mapped: value.length ? new Chunk(from, to, value, maxPoint) : null, pos: newPos };
        }
    }
    /**
    A range set stores a collection of [ranges](https://codemirror.net/6/docs/ref/#state.Range) in a
    way that makes them efficient to [map](https://codemirror.net/6/docs/ref/#state.RangeSet.map) and
    [update](https://codemirror.net/6/docs/ref/#state.RangeSet.update). This is an immutable data
    structure.
    */
    class RangeSet {
        constructor(
        /**
        @internal
        */
        chunkPos,
        /**
        @internal
        */
        chunk,
        /**
        @internal
        */
        nextLayer,
        /**
        @internal
        */
        maxPoint) {
            this.chunkPos = chunkPos;
            this.chunk = chunk;
            this.nextLayer = nextLayer;
            this.maxPoint = maxPoint;
        }
        /**
        @internal
        */
        static create(chunkPos, chunk, nextLayer, maxPoint) {
            return new RangeSet(chunkPos, chunk, nextLayer, maxPoint);
        }
        /**
        @internal
        */
        get length() {
            let last = this.chunk.length - 1;
            return last < 0 ? 0 : Math.max(this.chunkEnd(last), this.nextLayer.length);
        }
        /**
        The number of ranges in the set.
        */
        get size() {
            if (this.isEmpty)
                return 0;
            let size = this.nextLayer.size;
            for (let chunk of this.chunk)
                size += chunk.value.length;
            return size;
        }
        /**
        @internal
        */
        chunkEnd(index) {
            return this.chunkPos[index] + this.chunk[index].length;
        }
        /**
        Update the range set, optionally adding new ranges or filtering
        out existing ones.

        (Note: The type parameter is just there as a kludge to work
        around TypeScript variance issues that prevented `RangeSet<X>`
        from being a subtype of `RangeSet<Y>` when `X` is a subtype of
        `Y`.)
        */
        update(updateSpec) {
            let { add = [], sort = false, filterFrom = 0, filterTo = this.length } = updateSpec;
            let filter = updateSpec.filter;
            if (add.length == 0 && !filter)
                return this;
            if (sort)
                add = add.slice().sort(cmpRange);
            if (this.isEmpty)
                return add.length ? RangeSet.of(add) : this;
            let cur = new LayerCursor(this, null, -1).goto(0), i = 0, spill = [];
            let builder = new RangeSetBuilder();
            while (cur.value || i < add.length) {
                if (i < add.length && (cur.from - add[i].from || cur.startSide - add[i].value.startSide) >= 0) {
                    let range = add[i++];
                    if (!builder.addInner(range.from, range.to, range.value))
                        spill.push(range);
                }
                else if (cur.rangeIndex == 1 && cur.chunkIndex < this.chunk.length &&
                    (i == add.length || this.chunkEnd(cur.chunkIndex) < add[i].from) &&
                    (!filter || filterFrom > this.chunkEnd(cur.chunkIndex) || filterTo < this.chunkPos[cur.chunkIndex]) &&
                    builder.addChunk(this.chunkPos[cur.chunkIndex], this.chunk[cur.chunkIndex])) {
                    cur.nextChunk();
                }
                else {
                    if (!filter || filterFrom > cur.to || filterTo < cur.from || filter(cur.from, cur.to, cur.value)) {
                        if (!builder.addInner(cur.from, cur.to, cur.value))
                            spill.push(Range.create(cur.from, cur.to, cur.value));
                    }
                    cur.next();
                }
            }
            return builder.finishInner(this.nextLayer.isEmpty && !spill.length ? RangeSet.empty
                : this.nextLayer.update({ add: spill, filter, filterFrom, filterTo }));
        }
        /**
        Map this range set through a set of changes, return the new set.
        */
        map(changes) {
            if (changes.empty || this.isEmpty)
                return this;
            let chunks = [], chunkPos = [], maxPoint = -1;
            for (let i = 0; i < this.chunk.length; i++) {
                let start = this.chunkPos[i], chunk = this.chunk[i];
                let touch = changes.touchesRange(start, start + chunk.length);
                if (touch === false) {
                    maxPoint = Math.max(maxPoint, chunk.maxPoint);
                    chunks.push(chunk);
                    chunkPos.push(changes.mapPos(start));
                }
                else if (touch === true) {
                    let { mapped, pos } = chunk.map(start, changes);
                    if (mapped) {
                        maxPoint = Math.max(maxPoint, mapped.maxPoint);
                        chunks.push(mapped);
                        chunkPos.push(pos);
                    }
                }
            }
            let next = this.nextLayer.map(changes);
            return chunks.length == 0 ? next : new RangeSet(chunkPos, chunks, next || RangeSet.empty, maxPoint);
        }
        /**
        Iterate over the ranges that touch the region `from` to `to`,
        calling `f` for each. There is no guarantee that the ranges will
        be reported in any specific order. When the callback returns
        `false`, iteration stops.
        */
        between(from, to, f) {
            if (this.isEmpty)
                return;
            for (let i = 0; i < this.chunk.length; i++) {
                let start = this.chunkPos[i], chunk = this.chunk[i];
                if (to >= start && from <= start + chunk.length &&
                    chunk.between(start, from - start, to - start, f) === false)
                    return;
            }
            this.nextLayer.between(from, to, f);
        }
        /**
        Iterate over the ranges in this set, in order, including all
        ranges that end at or after `from`.
        */
        iter(from = 0) {
            return HeapCursor.from([this]).goto(from);
        }
        /**
        @internal
        */
        get isEmpty() { return this.nextLayer == this; }
        /**
        Iterate over the ranges in a collection of sets, in order,
        starting from `from`.
        */
        static iter(sets, from = 0) {
            return HeapCursor.from(sets).goto(from);
        }
        /**
        Iterate over two groups of sets, calling methods on `comparator`
        to notify it of possible differences.
        */
        static compare(oldSets, newSets,
        /**
        This indicates how the underlying data changed between these
        ranges, and is needed to synchronize the iteration.
        */
        textDiff, comparator,
        /**
        Can be used to ignore all non-point ranges, and points below
        the given size. When -1, all ranges are compared.
        */
        minPointSize = -1) {
            let a = oldSets.filter(set => set.maxPoint > 0 || !set.isEmpty && set.maxPoint >= minPointSize);
            let b = newSets.filter(set => set.maxPoint > 0 || !set.isEmpty && set.maxPoint >= minPointSize);
            let sharedChunks = findSharedChunks(a, b, textDiff);
            let sideA = new SpanCursor(a, sharedChunks, minPointSize);
            let sideB = new SpanCursor(b, sharedChunks, minPointSize);
            textDiff.iterGaps((fromA, fromB, length) => compare(sideA, fromA, sideB, fromB, length, comparator));
            if (textDiff.empty && textDiff.length == 0)
                compare(sideA, 0, sideB, 0, 0, comparator);
        }
        /**
        Compare the contents of two groups of range sets, returning true
        if they are equivalent in the given range.
        */
        static eq(oldSets, newSets, from = 0, to) {
            if (to == null)
                to = 1000000000 /* C.Far */ - 1;
            let a = oldSets.filter(set => !set.isEmpty && newSets.indexOf(set) < 0);
            let b = newSets.filter(set => !set.isEmpty && oldSets.indexOf(set) < 0);
            if (a.length != b.length)
                return false;
            if (!a.length)
                return true;
            let sharedChunks = findSharedChunks(a, b);
            let sideA = new SpanCursor(a, sharedChunks, 0).goto(from), sideB = new SpanCursor(b, sharedChunks, 0).goto(from);
            for (;;) {
                if (sideA.to != sideB.to ||
                    !sameValues(sideA.active, sideB.active) ||
                    sideA.point && (!sideB.point || !sideA.point.eq(sideB.point)))
                    return false;
                if (sideA.to > to)
                    return true;
                sideA.next();
                sideB.next();
            }
        }
        /**
        Iterate over a group of range sets at the same time, notifying
        the iterator about the ranges covering every given piece of
        content. Returns the open count (see
        [`SpanIterator.span`](https://codemirror.net/6/docs/ref/#state.SpanIterator.span)) at the end
        of the iteration.
        */
        static spans(sets, from, to, iterator,
        /**
        When given and greater than -1, only points of at least this
        size are taken into account.
        */
        minPointSize = -1) {
            let cursor = new SpanCursor(sets, null, minPointSize).goto(from), pos = from;
            let openRanges = cursor.openStart;
            for (;;) {
                let curTo = Math.min(cursor.to, to);
                if (cursor.point) {
                    let active = cursor.activeForPoint(cursor.to);
                    let openCount = cursor.pointFrom < from ? active.length + 1
                        : cursor.point.startSide < 0 ? active.length
                            : Math.min(active.length, openRanges);
                    iterator.point(pos, curTo, cursor.point, active, openCount, cursor.pointRank);
                    openRanges = Math.min(cursor.openEnd(curTo), active.length);
                }
                else if (curTo > pos) {
                    iterator.span(pos, curTo, cursor.active, openRanges);
                    openRanges = cursor.openEnd(curTo);
                }
                if (cursor.to > to)
                    return openRanges + (cursor.point && cursor.to > to ? 1 : 0);
                pos = cursor.to;
                cursor.next();
            }
        }
        /**
        Create a range set for the given range or array of ranges. By
        default, this expects the ranges to be _sorted_ (by start
        position and, if two start at the same position,
        `value.startSide`). You can pass `true` as second argument to
        cause the method to sort them.
        */
        static of(ranges, sort = false) {
            let build = new RangeSetBuilder();
            for (let range of ranges instanceof Range ? [ranges] : sort ? lazySort(ranges) : ranges)
                build.add(range.from, range.to, range.value);
            return build.finish();
        }
        /**
        Join an array of range sets into a single set.
        */
        static join(sets) {
            if (!sets.length)
                return RangeSet.empty;
            let result = sets[sets.length - 1];
            for (let i = sets.length - 2; i >= 0; i--) {
                for (let layer = sets[i]; layer != RangeSet.empty; layer = layer.nextLayer)
                    result = new RangeSet(layer.chunkPos, layer.chunk, result, Math.max(layer.maxPoint, result.maxPoint));
            }
            return result;
        }
    }
    /**
    The empty set of ranges.
    */
    RangeSet.empty = /*@__PURE__*/new RangeSet([], [], null, -1);
    function lazySort(ranges) {
        if (ranges.length > 1)
            for (let prev = ranges[0], i = 1; i < ranges.length; i++) {
                let cur = ranges[i];
                if (cmpRange(prev, cur) > 0)
                    return ranges.slice().sort(cmpRange);
                prev = cur;
            }
        return ranges;
    }
    RangeSet.empty.nextLayer = RangeSet.empty;
    /**
    A range set builder is a data structure that helps build up a
    [range set](https://codemirror.net/6/docs/ref/#state.RangeSet) directly, without first allocating
    an array of [`Range`](https://codemirror.net/6/docs/ref/#state.Range) objects.
    */
    class RangeSetBuilder {
        finishChunk(newArrays) {
            this.chunks.push(new Chunk(this.from, this.to, this.value, this.maxPoint));
            this.chunkPos.push(this.chunkStart);
            this.chunkStart = -1;
            this.setMaxPoint = Math.max(this.setMaxPoint, this.maxPoint);
            this.maxPoint = -1;
            if (newArrays) {
                this.from = [];
                this.to = [];
                this.value = [];
            }
        }
        /**
        Create an empty builder.
        */
        constructor() {
            this.chunks = [];
            this.chunkPos = [];
            this.chunkStart = -1;
            this.last = null;
            this.lastFrom = -1000000000 /* C.Far */;
            this.lastTo = -1000000000 /* C.Far */;
            this.from = [];
            this.to = [];
            this.value = [];
            this.maxPoint = -1;
            this.setMaxPoint = -1;
            this.nextLayer = null;
        }
        /**
        Add a range. Ranges should be added in sorted (by `from` and
        `value.startSide`) order.
        */
        add(from, to, value) {
            if (!this.addInner(from, to, value))
                (this.nextLayer || (this.nextLayer = new RangeSetBuilder)).add(from, to, value);
        }
        /**
        @internal
        */
        addInner(from, to, value) {
            let diff = from - this.lastTo || value.startSide - this.last.endSide;
            if (diff <= 0 && (from - this.lastFrom || value.startSide - this.last.startSide) < 0)
                throw new Error("Ranges must be added sorted by `from` position and `startSide`");
            if (diff < 0)
                return false;
            if (this.from.length == 250 /* C.ChunkSize */)
                this.finishChunk(true);
            if (this.chunkStart < 0)
                this.chunkStart = from;
            this.from.push(from - this.chunkStart);
            this.to.push(to - this.chunkStart);
            this.last = value;
            this.lastFrom = from;
            this.lastTo = to;
            this.value.push(value);
            if (value.point)
                this.maxPoint = Math.max(this.maxPoint, to - from);
            return true;
        }
        /**
        @internal
        */
        addChunk(from, chunk) {
            if ((from - this.lastTo || chunk.value[0].startSide - this.last.endSide) < 0)
                return false;
            if (this.from.length)
                this.finishChunk(true);
            this.setMaxPoint = Math.max(this.setMaxPoint, chunk.maxPoint);
            this.chunks.push(chunk);
            this.chunkPos.push(from);
            let last = chunk.value.length - 1;
            this.last = chunk.value[last];
            this.lastFrom = chunk.from[last] + from;
            this.lastTo = chunk.to[last] + from;
            return true;
        }
        /**
        Finish the range set. Returns the new set. The builder can't be
        used anymore after this has been called.
        */
        finish() { return this.finishInner(RangeSet.empty); }
        /**
        @internal
        */
        finishInner(next) {
            if (this.from.length)
                this.finishChunk(false);
            if (this.chunks.length == 0)
                return next;
            let result = RangeSet.create(this.chunkPos, this.chunks, this.nextLayer ? this.nextLayer.finishInner(next) : next, this.setMaxPoint);
            this.from = null; // Make sure further `add` calls produce errors
            return result;
        }
    }
    function findSharedChunks(a, b, textDiff) {
        let inA = new Map();
        for (let set of a)
            for (let i = 0; i < set.chunk.length; i++)
                if (set.chunk[i].maxPoint <= 0)
                    inA.set(set.chunk[i], set.chunkPos[i]);
        let shared = new Set();
        for (let set of b)
            for (let i = 0; i < set.chunk.length; i++) {
                let known = inA.get(set.chunk[i]);
                if (known != null && (textDiff ? textDiff.mapPos(known) : known) == set.chunkPos[i] &&
                    !(textDiff === null || textDiff === void 0 ? void 0 : textDiff.touchesRange(known, known + set.chunk[i].length)))
                    shared.add(set.chunk[i]);
            }
        return shared;
    }
    class LayerCursor {
        constructor(layer, skip, minPoint, rank = 0) {
            this.layer = layer;
            this.skip = skip;
            this.minPoint = minPoint;
            this.rank = rank;
        }
        get startSide() { return this.value ? this.value.startSide : 0; }
        get endSide() { return this.value ? this.value.endSide : 0; }
        goto(pos, side = -1000000000 /* C.Far */) {
            this.chunkIndex = this.rangeIndex = 0;
            this.gotoInner(pos, side, false);
            return this;
        }
        gotoInner(pos, side, forward) {
            while (this.chunkIndex < this.layer.chunk.length) {
                let next = this.layer.chunk[this.chunkIndex];
                if (!(this.skip && this.skip.has(next) ||
                    this.layer.chunkEnd(this.chunkIndex) < pos ||
                    next.maxPoint < this.minPoint))
                    break;
                this.chunkIndex++;
                forward = false;
            }
            if (this.chunkIndex < this.layer.chunk.length) {
                let rangeIndex = this.layer.chunk[this.chunkIndex].findIndex(pos - this.layer.chunkPos[this.chunkIndex], side, true);
                if (!forward || this.rangeIndex < rangeIndex)
                    this.setRangeIndex(rangeIndex);
            }
            this.next();
        }
        forward(pos, side) {
            if ((this.to - pos || this.endSide - side) < 0)
                this.gotoInner(pos, side, true);
        }
        next() {
            for (;;) {
                if (this.chunkIndex == this.layer.chunk.length) {
                    this.from = this.to = 1000000000 /* C.Far */;
                    this.value = null;
                    break;
                }
                else {
                    let chunkPos = this.layer.chunkPos[this.chunkIndex], chunk = this.layer.chunk[this.chunkIndex];
                    let from = chunkPos + chunk.from[this.rangeIndex];
                    this.from = from;
                    this.to = chunkPos + chunk.to[this.rangeIndex];
                    this.value = chunk.value[this.rangeIndex];
                    this.setRangeIndex(this.rangeIndex + 1);
                    if (this.minPoint < 0 || this.value.point && this.to - this.from >= this.minPoint)
                        break;
                }
            }
        }
        setRangeIndex(index) {
            if (index == this.layer.chunk[this.chunkIndex].value.length) {
                this.chunkIndex++;
                if (this.skip) {
                    while (this.chunkIndex < this.layer.chunk.length && this.skip.has(this.layer.chunk[this.chunkIndex]))
                        this.chunkIndex++;
                }
                this.rangeIndex = 0;
            }
            else {
                this.rangeIndex = index;
            }
        }
        nextChunk() {
            this.chunkIndex++;
            this.rangeIndex = 0;
            this.next();
        }
        compare(other) {
            return this.from - other.from || this.startSide - other.startSide || this.rank - other.rank ||
                this.to - other.to || this.endSide - other.endSide;
        }
    }
    class HeapCursor {
        constructor(heap) {
            this.heap = heap;
        }
        static from(sets, skip = null, minPoint = -1) {
            let heap = [];
            for (let i = 0; i < sets.length; i++) {
                for (let cur = sets[i]; !cur.isEmpty; cur = cur.nextLayer) {
                    if (cur.maxPoint >= minPoint)
                        heap.push(new LayerCursor(cur, skip, minPoint, i));
                }
            }
            return heap.length == 1 ? heap[0] : new HeapCursor(heap);
        }
        get startSide() { return this.value ? this.value.startSide : 0; }
        goto(pos, side = -1000000000 /* C.Far */) {
            for (let cur of this.heap)
                cur.goto(pos, side);
            for (let i = this.heap.length >> 1; i >= 0; i--)
                heapBubble(this.heap, i);
            this.next();
            return this;
        }
        forward(pos, side) {
            for (let cur of this.heap)
                cur.forward(pos, side);
            for (let i = this.heap.length >> 1; i >= 0; i--)
                heapBubble(this.heap, i);
            if ((this.to - pos || this.value.endSide - side) < 0)
                this.next();
        }
        next() {
            if (this.heap.length == 0) {
                this.from = this.to = 1000000000 /* C.Far */;
                this.value = null;
                this.rank = -1;
            }
            else {
                let top = this.heap[0];
                this.from = top.from;
                this.to = top.to;
                this.value = top.value;
                this.rank = top.rank;
                if (top.value)
                    top.next();
                heapBubble(this.heap, 0);
            }
        }
    }
    function heapBubble(heap, index) {
        for (let cur = heap[index];;) {
            let childIndex = (index << 1) + 1;
            if (childIndex >= heap.length)
                break;
            let child = heap[childIndex];
            if (childIndex + 1 < heap.length && child.compare(heap[childIndex + 1]) >= 0) {
                child = heap[childIndex + 1];
                childIndex++;
            }
            if (cur.compare(child) < 0)
                break;
            heap[childIndex] = cur;
            heap[index] = child;
            index = childIndex;
        }
    }
    class SpanCursor {
        constructor(sets, skip, minPoint) {
            this.minPoint = minPoint;
            this.active = [];
            this.activeTo = [];
            this.activeRank = [];
            this.minActive = -1;
            // A currently active point range, if any
            this.point = null;
            this.pointFrom = 0;
            this.pointRank = 0;
            this.to = -1000000000 /* C.Far */;
            this.endSide = 0;
            // The amount of open active ranges at the start of the iterator.
            // Not including points.
            this.openStart = -1;
            this.cursor = HeapCursor.from(sets, skip, minPoint);
        }
        goto(pos, side = -1000000000 /* C.Far */) {
            this.cursor.goto(pos, side);
            this.active.length = this.activeTo.length = this.activeRank.length = 0;
            this.minActive = -1;
            this.to = pos;
            this.endSide = side;
            this.openStart = -1;
            this.next();
            return this;
        }
        forward(pos, side) {
            while (this.minActive > -1 && (this.activeTo[this.minActive] - pos || this.active[this.minActive].endSide - side) < 0)
                this.removeActive(this.minActive);
            this.cursor.forward(pos, side);
        }
        removeActive(index) {
            remove(this.active, index);
            remove(this.activeTo, index);
            remove(this.activeRank, index);
            this.minActive = findMinIndex(this.active, this.activeTo);
        }
        addActive(trackOpen) {
            let i = 0, { value, to, rank } = this.cursor;
            // Organize active marks by rank first, then by size
            while (i < this.activeRank.length && (rank - this.activeRank[i] || to - this.activeTo[i]) > 0)
                i++;
            insert(this.active, i, value);
            insert(this.activeTo, i, to);
            insert(this.activeRank, i, rank);
            if (trackOpen)
                insert(trackOpen, i, this.cursor.from);
            this.minActive = findMinIndex(this.active, this.activeTo);
        }
        // After calling this, if `this.point` != null, the next range is a
        // point. Otherwise, it's a regular range, covered by `this.active`.
        next() {
            let from = this.to, wasPoint = this.point;
            this.point = null;
            let trackOpen = this.openStart < 0 ? [] : null;
            for (;;) {
                let a = this.minActive;
                if (a > -1 && (this.activeTo[a] - this.cursor.from || this.active[a].endSide - this.cursor.startSide) < 0) {
                    if (this.activeTo[a] > from) {
                        this.to = this.activeTo[a];
                        this.endSide = this.active[a].endSide;
                        break;
                    }
                    this.removeActive(a);
                    if (trackOpen)
                        remove(trackOpen, a);
                }
                else if (!this.cursor.value) {
                    this.to = this.endSide = 1000000000 /* C.Far */;
                    break;
                }
                else if (this.cursor.from > from) {
                    this.to = this.cursor.from;
                    this.endSide = this.cursor.startSide;
                    break;
                }
                else {
                    let nextVal = this.cursor.value;
                    if (!nextVal.point) { // Opening a range
                        this.addActive(trackOpen);
                        this.cursor.next();
                    }
                    else if (wasPoint && this.cursor.to == this.to && this.cursor.from < this.cursor.to) {
                        // Ignore any non-empty points that end precisely at the end of the prev point
                        this.cursor.next();
                    }
                    else { // New point
                        this.point = nextVal;
                        this.pointFrom = this.cursor.from;
                        this.pointRank = this.cursor.rank;
                        this.to = this.cursor.to;
                        this.endSide = nextVal.endSide;
                        this.cursor.next();
                        this.forward(this.to, this.endSide);
                        break;
                    }
                }
            }
            if (trackOpen) {
                this.openStart = 0;
                for (let i = trackOpen.length - 1; i >= 0 && trackOpen[i] < from; i--)
                    this.openStart++;
            }
        }
        activeForPoint(to) {
            if (!this.active.length)
                return this.active;
            let active = [];
            for (let i = this.active.length - 1; i >= 0; i--) {
                if (this.activeRank[i] < this.pointRank)
                    break;
                if (this.activeTo[i] > to || this.activeTo[i] == to && this.active[i].endSide >= this.point.endSide)
                    active.push(this.active[i]);
            }
            return active.reverse();
        }
        openEnd(to) {
            let open = 0;
            for (let i = this.activeTo.length - 1; i >= 0 && this.activeTo[i] > to; i--)
                open++;
            return open;
        }
    }
    function compare(a, startA, b, startB, length, comparator) {
        a.goto(startA);
        b.goto(startB);
        let endB = startB + length;
        let pos = startB, dPos = startB - startA;
        for (;;) {
            let dEnd = (a.to + dPos) - b.to, diff = dEnd || a.endSide - b.endSide;
            let end = diff < 0 ? a.to + dPos : b.to, clipEnd = Math.min(end, endB);
            if (a.point || b.point) {
                if (!(a.point && b.point && (a.point == b.point || a.point.eq(b.point)) &&
                    sameValues(a.activeForPoint(a.to), b.activeForPoint(b.to))))
                    comparator.comparePoint(pos, clipEnd, a.point, b.point);
            }
            else {
                if (clipEnd > pos && !sameValues(a.active, b.active))
                    comparator.compareRange(pos, clipEnd, a.active, b.active);
            }
            if (end > endB)
                break;
            if ((dEnd || a.openEnd != b.openEnd) && comparator.boundChange)
                comparator.boundChange(end);
            pos = end;
            if (diff <= 0)
                a.next();
            if (diff >= 0)
                b.next();
        }
    }
    function sameValues(a, b) {
        if (a.length != b.length)
            return false;
        for (let i = 0; i < a.length; i++)
            if (a[i] != b[i] && !a[i].eq(b[i]))
                return false;
        return true;
    }
    function remove(array, index) {
        for (let i = index, e = array.length - 1; i < e; i++)
            array[i] = array[i + 1];
        array.pop();
    }
    function insert(array, index, value) {
        for (let i = array.length - 1; i >= index; i--)
            array[i + 1] = array[i];
        array[index] = value;
    }
    function findMinIndex(value, array) {
        let found = -1, foundPos = 1000000000 /* C.Far */;
        for (let i = 0; i < array.length; i++)
            if ((array[i] - foundPos || value[i].endSide - value[found].endSide) < 0) {
                found = i;
                foundPos = array[i];
            }
        return found;
    }

    /**
    Count the column position at the given offset into the string,
    taking extending characters and tab size into account.
    */
    function countColumn(string, tabSize, to = string.length) {
        let n = 0;
        for (let i = 0; i < to && i < string.length;) {
            if (string.charCodeAt(i) == 9) {
                n += tabSize - (n % tabSize);
                i++;
            }
            else {
                n++;
                i = findClusterBreak(string, i);
            }
        }
        return n;
    }
    /**
    Find the offset that corresponds to the given column position in a
    string, taking extending characters and tab size into account. By
    default, the string length is returned when it is too short to
    reach the column. Pass `strict` true to make it return -1 in that
    situation.
    */
    function findColumn(string, col, tabSize, strict) {
        for (let i = 0, n = 0;;) {
            if (n >= col)
                return i;
            if (i == string.length)
                break;
            n += string.charCodeAt(i) == 9 ? tabSize - (n % tabSize) : 1;
            i = findClusterBreak(string, i);
        }
        return strict === true ? -1 : string.length;
    }

    const C = "\u037c";
    const COUNT = typeof Symbol == "undefined" ? "__" + C : Symbol.for(C);
    const SET = typeof Symbol == "undefined" ? "__styleSet" + Math.floor(Math.random() * 1e8) : Symbol("styleSet");
    const top = typeof globalThis != "undefined" ? globalThis : typeof window != "undefined" ? window : {};

    // :: - Style modules encapsulate a set of CSS rules defined from
    // JavaScript. Their definitions are only available in a given DOM
    // root after it has been _mounted_ there with `StyleModule.mount`.
    //
    // Style modules should be created once and stored somewhere, as
    // opposed to re-creating them every time you need them. The amount of
    // CSS rules generated for a given DOM root is bounded by the amount
    // of style modules that were used. So to avoid leaking rules, don't
    // create these dynamically, but treat them as one-time allocations.
    class StyleModule {
      // :: (Object<Style>, ?{finish: ?(string) → string})
      // Create a style module from the given spec.
      //
      // When `finish` is given, it is called on regular (non-`@`)
      // selectors (after `&` expansion) to compute the final selector.
      constructor(spec, options) {
        this.rules = [];
        let {finish} = options || {};

        function splitSelector(selector) {
          return /^@/.test(selector) ? [selector] : selector.split(/,\s*/)
        }

        function render(selectors, spec, target, isKeyframes) {
          let local = [], isAt = /^@(\w+)\b/.exec(selectors[0]), keyframes = isAt && isAt[1] == "keyframes";
          if (isAt && spec == null) return target.push(selectors[0] + ";")
          for (let prop in spec) {
            let value = spec[prop];
            if (/&/.test(prop)) {
              render(prop.split(/,\s*/).map(part => selectors.map(sel => part.replace(/&/, sel))).reduce((a, b) => a.concat(b)),
                     value, target);
            } else if (value && typeof value == "object") {
              if (!isAt) throw new RangeError("The value of a property (" + prop + ") should be a primitive value.")
              render(splitSelector(prop), value, local, keyframes);
            } else if (value != null) {
              local.push(prop.replace(/_.*/, "").replace(/[A-Z]/g, l => "-" + l.toLowerCase()) + ": " + value + ";");
            }
          }
          if (local.length || keyframes) {
            target.push((finish && !isAt && !isKeyframes ? selectors.map(finish) : selectors).join(", ") +
                        " {" + local.join(" ") + "}");
          }
        }

        for (let prop in spec) render(splitSelector(prop), spec[prop], this.rules);
      }

      // :: () → string
      // Returns a string containing the module's CSS rules.
      getRules() { return this.rules.join("\n") }

      // :: () → string
      // Generate a new unique CSS class name.
      static newName() {
        let id = top[COUNT] || 1;
        top[COUNT] = id + 1;
        return C + id.toString(36)
      }

      // :: (union<Document, ShadowRoot>, union<[StyleModule], StyleModule>, ?{nonce: ?string})
      //
      // Mount the given set of modules in the given DOM root, which ensures
      // that the CSS rules defined by the module are available in that
      // context.
      //
      // Rules are only added to the document once per root.
      //
      // Rule order will follow the order of the modules, so that rules from
      // modules later in the array take precedence of those from earlier
      // modules. If you call this function multiple times for the same root
      // in a way that changes the order of already mounted modules, the old
      // order will be changed.
      //
      // If a Content Security Policy nonce is provided, it is added to
      // the `<style>` tag generated by the library.
      static mount(root, modules, options) {
        let set = root[SET], nonce = options && options.nonce;
        if (!set) set = new StyleSet(root, nonce);
        else if (nonce) set.setNonce(nonce);
        set.mount(Array.isArray(modules) ? modules : [modules], root);
      }
    }

    let adoptedSet = new Map; //<Document, StyleSet>

    class StyleSet {
      constructor(root, nonce) {
        let doc = root.ownerDocument || root, win = doc.defaultView;
        if (!root.head && root.adoptedStyleSheets && win.CSSStyleSheet) {
          let adopted = adoptedSet.get(doc);
          if (adopted) return root[SET] = adopted
          this.sheet = new win.CSSStyleSheet;
          adoptedSet.set(doc, this);
        } else {
          this.styleTag = doc.createElement("style");
          if (nonce) this.styleTag.setAttribute("nonce", nonce);
        }
        this.modules = [];
        root[SET] = this;
      }

      mount(modules, root) {
        let sheet = this.sheet;
        let pos = 0 /* Current rule offset */, j = 0; /* Index into this.modules */
        for (let i = 0; i < modules.length; i++) {
          let mod = modules[i], index = this.modules.indexOf(mod);
          if (index < j && index > -1) { // Ordering conflict
            this.modules.splice(index, 1);
            j--;
            index = -1;
          }
          if (index == -1) {
            this.modules.splice(j++, 0, mod);
            if (sheet) for (let k = 0; k < mod.rules.length; k++)
              sheet.insertRule(mod.rules[k], pos++);
          } else {
            while (j < index) pos += this.modules[j++].rules.length;
            pos += mod.rules.length;
            j++;
          }
        }

        if (sheet) {
          if (root.adoptedStyleSheets.indexOf(this.sheet) < 0)
            root.adoptedStyleSheets = [this.sheet, ...root.adoptedStyleSheets];
        } else {
          let text = "";
          for (let i = 0; i < this.modules.length; i++)
            text += this.modules[i].getRules() + "\n";
          this.styleTag.textContent = text;
          let target = root.head || root;
          if (this.styleTag.parentNode != target)
            target.insertBefore(this.styleTag, target.firstChild);
        }
      }

      setNonce(nonce) {
        if (this.styleTag && this.styleTag.getAttribute("nonce") != nonce)
          this.styleTag.setAttribute("nonce", nonce);
      }
    }

    // Style::Object<union<Style,string>>
    //
    // A style is an object that, in the simple case, maps CSS property
    // names to strings holding their values, as in `{color: "red",
    // fontWeight: "bold"}`. The property names can be given in
    // camel-case—the library will insert a dash before capital letters
    // when converting them to CSS.
    //
    // If you include an underscore in a property name, it and everything
    // after it will be removed from the output, which can be useful when
    // providing a property multiple times, for browser compatibility
    // reasons.
    //
    // A property in a style object can also be a sub-selector, which
    // extends the current context to add a pseudo-selector or a child
    // selector. Such a property should contain a `&` character, which
    // will be replaced by the current selector. For example `{"&:before":
    // {content: '"hi"'}}`. Sub-selectors and regular properties can
    // freely be mixed in a given object. Any property containing a `&` is
    // assumed to be a sub-selector.
    //
    // Finally, a property can specify an @-block to be wrapped around the
    // styles defined inside the object that's the property's value. For
    // example to create a media query you can do `{"@media screen and
    // (min-width: 400px)": {...}}`.

    var base = {
      8: "Backspace",
      9: "Tab",
      10: "Enter",
      12: "NumLock",
      13: "Enter",
      16: "Shift",
      17: "Control",
      18: "Alt",
      20: "CapsLock",
      27: "Escape",
      32: " ",
      33: "PageUp",
      34: "PageDown",
      35: "End",
      36: "Home",
      37: "ArrowLeft",
      38: "ArrowUp",
      39: "ArrowRight",
      40: "ArrowDown",
      44: "PrintScreen",
      45: "Insert",
      46: "Delete",
      59: ";",
      61: "=",
      91: "Meta",
      92: "Meta",
      106: "*",
      107: "+",
      108: ",",
      109: "-",
      110: ".",
      111: "/",
      144: "NumLock",
      145: "ScrollLock",
      160: "Shift",
      161: "Shift",
      162: "Control",
      163: "Control",
      164: "Alt",
      165: "Alt",
      173: "-",
      186: ";",
      187: "=",
      188: ",",
      189: "-",
      190: ".",
      191: "/",
      192: "`",
      219: "[",
      220: "\\",
      221: "]",
      222: "'"
    };

    var shift = {
      48: ")",
      49: "!",
      50: "@",
      51: "#",
      52: "$",
      53: "%",
      54: "^",
      55: "&",
      56: "*",
      57: "(",
      59: ":",
      61: "+",
      173: "_",
      186: ":",
      187: "+",
      188: "<",
      189: "_",
      190: ">",
      191: "?",
      192: "~",
      219: "{",
      220: "|",
      221: "}",
      222: "\""
    };

    var mac = typeof navigator != "undefined" && /Mac/.test(navigator.platform);
    var ie$6 = typeof navigator != "undefined" && /MSIE \d|Trident\/(?:[7-9]|\d{2,})\..*rv:(\d+)/.exec(navigator.userAgent);

    // Fill in the digit keys
    for (var i = 0; i < 10; i++) base[48 + i] = base[96 + i] = String(i);

    // The function keys
    for (var i = 1; i <= 24; i++) base[i + 111] = "F" + i;

    // And the alphabetic keys
    for (var i = 65; i <= 90; i++) {
      base[i] = String.fromCharCode(i + 32);
      shift[i] = String.fromCharCode(i);
    }

    // For each code that doesn't have a shift-equivalent, copy the base name
    for (var code in base) if (!shift.hasOwnProperty(code)) shift[code] = base[code];

    function keyName(event) {
      // On macOS, keys held with Shift and Cmd don't reflect the effect of Shift in `.key`.
      // On IE, shift effect is never included in `.key`.
      var ignoreKey = mac && event.metaKey && event.shiftKey && !event.ctrlKey && !event.altKey ||
          ie$6 && event.shiftKey && event.key && event.key.length == 1 ||
          event.key == "Unidentified";
      var name = (!ignoreKey && event.key) ||
        (event.shiftKey ? shift : base)[event.keyCode] ||
        event.key || "Unidentified";
      // Edge sometimes produces wrong names (Issue #3)
      if (name == "Esc") name = "Escape";
      if (name == "Del") name = "Delete";
      // https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/8860571/
      if (name == "Left") name = "ArrowLeft";
      if (name == "Up") name = "ArrowUp";
      if (name == "Right") name = "ArrowRight";
      if (name == "Down") name = "ArrowDown";
      return name
    }

    function getSelection(root) {
        let target;
        // Browsers differ on whether shadow roots have a getSelection
        // method. If it exists, use that, otherwise, call it on the
        // document.
        if (root.nodeType == 11) { // Shadow root
            target = root.getSelection ? root : root.ownerDocument;
        }
        else {
            target = root;
        }
        return target.getSelection();
    }
    function contains(dom, node) {
        return node ? dom == node || dom.contains(node.nodeType != 1 ? node.parentNode : node) : false;
    }
    function hasSelection(dom, selection) {
        if (!selection.anchorNode)
            return false;
        try {
            // Firefox will raise 'permission denied' errors when accessing
            // properties of `sel.anchorNode` when it's in a generated CSS
            // element.
            return contains(dom, selection.anchorNode);
        }
        catch (_) {
            return false;
        }
    }
    function clientRectsFor(dom) {
        if (dom.nodeType == 3)
            return textRange(dom, 0, dom.nodeValue.length).getClientRects();
        else if (dom.nodeType == 1)
            return dom.getClientRects();
        else
            return [];
    }
    // Scans forward and backward through DOM positions equivalent to the
    // given one to see if the two are in the same place (i.e. after a
    // text node vs at the end of that text node)
    function isEquivalentPosition(node, off, targetNode, targetOff) {
        return targetNode ? (scanFor(node, off, targetNode, targetOff, -1) ||
            scanFor(node, off, targetNode, targetOff, 1)) : false;
    }
    function domIndex(node) {
        for (var index = 0;; index++) {
            node = node.previousSibling;
            if (!node)
                return index;
        }
    }
    function isBlockElement(node) {
        return node.nodeType == 1 && /^(DIV|P|LI|UL|OL|BLOCKQUOTE|DD|DT|H\d|SECTION|PRE)$/.test(node.nodeName);
    }
    function scanFor(node, off, targetNode, targetOff, dir) {
        for (;;) {
            if (node == targetNode && off == targetOff)
                return true;
            if (off == (dir < 0 ? 0 : maxOffset(node))) {
                if (node.nodeName == "DIV")
                    return false;
                let parent = node.parentNode;
                if (!parent || parent.nodeType != 1)
                    return false;
                off = domIndex(node) + (dir < 0 ? 0 : 1);
                node = parent;
            }
            else if (node.nodeType == 1) {
                node = node.childNodes[off + (dir < 0 ? -1 : 0)];
                if (node.nodeType == 1 && node.contentEditable == "false")
                    return false;
                off = dir < 0 ? maxOffset(node) : 0;
            }
            else {
                return false;
            }
        }
    }
    function maxOffset(node) {
        return node.nodeType == 3 ? node.nodeValue.length : node.childNodes.length;
    }
    function flattenRect(rect, left) {
        let x = left ? rect.left : rect.right;
        return { left: x, right: x, top: rect.top, bottom: rect.bottom };
    }
    function windowRect(win) {
        let vp = win.visualViewport;
        if (vp)
            return {
                left: 0, right: vp.width,
                top: 0, bottom: vp.height
            };
        return { left: 0, right: win.innerWidth,
            top: 0, bottom: win.innerHeight };
    }
    function getScale(elt, rect) {
        let scaleX = rect.width / elt.offsetWidth;
        let scaleY = rect.height / elt.offsetHeight;
        if (scaleX > 0.995 && scaleX < 1.005 || !isFinite(scaleX) || Math.abs(rect.width - elt.offsetWidth) < 1)
            scaleX = 1;
        if (scaleY > 0.995 && scaleY < 1.005 || !isFinite(scaleY) || Math.abs(rect.height - elt.offsetHeight) < 1)
            scaleY = 1;
        return { scaleX, scaleY };
    }
    function scrollRectIntoView(dom, rect, side, x, y, xMargin, yMargin, ltr) {
        let doc = dom.ownerDocument, win = doc.defaultView || window;
        for (let cur = dom, stop = false; cur && !stop;) {
            if (cur.nodeType == 1) { // Element
                let bounding, top = cur == doc.body;
                let scaleX = 1, scaleY = 1;
                if (top) {
                    bounding = windowRect(win);
                }
                else {
                    if (/^(fixed|sticky)$/.test(getComputedStyle(cur).position))
                        stop = true;
                    if (cur.scrollHeight <= cur.clientHeight && cur.scrollWidth <= cur.clientWidth) {
                        cur = cur.assignedSlot || cur.parentNode;
                        continue;
                    }
                    let rect = cur.getBoundingClientRect();
                    ({ scaleX, scaleY } = getScale(cur, rect));
                    // Make sure scrollbar width isn't included in the rectangle
                    bounding = { left: rect.left, right: rect.left + cur.clientWidth * scaleX,
                        top: rect.top, bottom: rect.top + cur.clientHeight * scaleY };
                }
                let moveX = 0, moveY = 0;
                if (y == "nearest") {
                    if (rect.top < bounding.top) {
                        moveY = -(bounding.top - rect.top + yMargin);
                        if (side > 0 && rect.bottom > bounding.bottom + moveY)
                            moveY = rect.bottom - bounding.bottom + moveY + yMargin;
                    }
                    else if (rect.bottom > bounding.bottom) {
                        moveY = rect.bottom - bounding.bottom + yMargin;
                        if (side < 0 && (rect.top - moveY) < bounding.top)
                            moveY = -(bounding.top + moveY - rect.top + yMargin);
                    }
                }
                else {
                    let rectHeight = rect.bottom - rect.top, boundingHeight = bounding.bottom - bounding.top;
                    let targetTop = y == "center" && rectHeight <= boundingHeight ? rect.top + rectHeight / 2 - boundingHeight / 2 :
                        y == "start" || y == "center" && side < 0 ? rect.top - yMargin :
                            rect.bottom - boundingHeight + yMargin;
                    moveY = targetTop - bounding.top;
                }
                if (x == "nearest") {
                    if (rect.left < bounding.left) {
                        moveX = -(bounding.left - rect.left + xMargin);
                        if (side > 0 && rect.right > bounding.right + moveX)
                            moveX = rect.right - bounding.right + moveX + xMargin;
                    }
                    else if (rect.right > bounding.right) {
                        moveX = rect.right - bounding.right + xMargin;
                        if (side < 0 && rect.left < bounding.left + moveX)
                            moveX = -(bounding.left + moveX - rect.left + xMargin);
                    }
                }
                else {
                    let targetLeft = x == "center" ? rect.left + (rect.right - rect.left) / 2 - (bounding.right - bounding.left) / 2 :
                        (x == "start") == ltr ? rect.left - xMargin :
                            rect.right - (bounding.right - bounding.left) + xMargin;
                    moveX = targetLeft - bounding.left;
                }
                if (moveX || moveY) {
                    if (top) {
                        win.scrollBy(moveX, moveY);
                    }
                    else {
                        let movedX = 0, movedY = 0;
                        if (moveY) {
                            let start = cur.scrollTop;
                            cur.scrollTop += moveY / scaleY;
                            movedY = (cur.scrollTop - start) * scaleY;
                        }
                        if (moveX) {
                            let start = cur.scrollLeft;
                            cur.scrollLeft += moveX / scaleX;
                            movedX = (cur.scrollLeft - start) * scaleX;
                        }
                        rect = { left: rect.left - movedX, top: rect.top - movedY,
                            right: rect.right - movedX, bottom: rect.bottom - movedY };
                        if (movedX && Math.abs(movedX - moveX) < 1)
                            x = "nearest";
                        if (movedY && Math.abs(movedY - moveY) < 1)
                            y = "nearest";
                    }
                }
                if (top)
                    break;
                cur = cur.assignedSlot || cur.parentNode;
            }
            else if (cur.nodeType == 11) { // A shadow root
                cur = cur.host;
            }
            else {
                break;
            }
        }
    }
    function scrollableParents(dom) {
        let doc = dom.ownerDocument, x, y;
        for (let cur = dom.parentNode; cur;) {
            if (cur == doc.body || (x && y)) {
                break;
            }
            else if (cur.nodeType == 1) {
                if (!y && cur.scrollHeight > cur.clientHeight)
                    y = cur;
                if (!x && cur.scrollWidth > cur.clientWidth)
                    x = cur;
                cur = cur.assignedSlot || cur.parentNode;
            }
            else if (cur.nodeType == 11) {
                cur = cur.host;
            }
            else {
                break;
            }
        }
        return { x, y };
    }
    class DOMSelectionState {
        constructor() {
            this.anchorNode = null;
            this.anchorOffset = 0;
            this.focusNode = null;
            this.focusOffset = 0;
        }
        eq(domSel) {
            return this.anchorNode == domSel.anchorNode && this.anchorOffset == domSel.anchorOffset &&
                this.focusNode == domSel.focusNode && this.focusOffset == domSel.focusOffset;
        }
        setRange(range) {
            let { anchorNode, focusNode } = range;
            // Clip offsets to node size to avoid crashes when Safari reports bogus offsets (#1152)
            this.set(anchorNode, Math.min(range.anchorOffset, anchorNode ? maxOffset(anchorNode) : 0), focusNode, Math.min(range.focusOffset, focusNode ? maxOffset(focusNode) : 0));
        }
        set(anchorNode, anchorOffset, focusNode, focusOffset) {
            this.anchorNode = anchorNode;
            this.anchorOffset = anchorOffset;
            this.focusNode = focusNode;
            this.focusOffset = focusOffset;
        }
    }
    let preventScrollSupported = null;
    // Feature-detects support for .focus({preventScroll: true}), and uses
    // a fallback kludge when not supported.
    function focusPreventScroll(dom) {
        if (dom.setActive)
            return dom.setActive(); // in IE
        if (preventScrollSupported)
            return dom.focus(preventScrollSupported);
        let stack = [];
        for (let cur = dom; cur; cur = cur.parentNode) {
            stack.push(cur, cur.scrollTop, cur.scrollLeft);
            if (cur == cur.ownerDocument)
                break;
        }
        dom.focus(preventScrollSupported == null ? {
            get preventScroll() {
                preventScrollSupported = { preventScroll: true };
                return true;
            }
        } : undefined);
        if (!preventScrollSupported) {
            preventScrollSupported = false;
            for (let i = 0; i < stack.length;) {
                let elt = stack[i++], top = stack[i++], left = stack[i++];
                if (elt.scrollTop != top)
                    elt.scrollTop = top;
                if (elt.scrollLeft != left)
                    elt.scrollLeft = left;
            }
        }
    }
    let scratchRange;
    function textRange(node, from, to = from) {
        let range = scratchRange || (scratchRange = document.createRange());
        range.setEnd(node, to);
        range.setStart(node, from);
        return range;
    }
    function dispatchKey(elt, name, code, mods) {
        let options = { key: name, code: name, keyCode: code, which: code, cancelable: true };
        if (mods)
            ({ altKey: options.altKey, ctrlKey: options.ctrlKey, shiftKey: options.shiftKey, metaKey: options.metaKey } = mods);
        let down = new KeyboardEvent("keydown", options);
        down.synthetic = true;
        elt.dispatchEvent(down);
        let up = new KeyboardEvent("keyup", options);
        up.synthetic = true;
        elt.dispatchEvent(up);
        return down.defaultPrevented || up.defaultPrevented;
    }
    function getRoot(node) {
        while (node) {
            if (node && (node.nodeType == 9 || node.nodeType == 11 && node.host))
                return node;
            node = node.assignedSlot || node.parentNode;
        }
        return null;
    }
    function clearAttributes(node) {
        while (node.attributes.length)
            node.removeAttributeNode(node.attributes[0]);
    }
    function atElementStart(doc, selection) {
        let node = selection.focusNode, offset = selection.focusOffset;
        if (!node || selection.anchorNode != node || selection.anchorOffset != offset)
            return false;
        // Safari can report bogus offsets (#1152)
        offset = Math.min(offset, maxOffset(node));
        for (;;) {
            if (offset) {
                if (node.nodeType != 1)
                    return false;
                let prev = node.childNodes[offset - 1];
                if (prev.contentEditable == "false")
                    offset--;
                else {
                    node = prev;
                    offset = maxOffset(node);
                }
            }
            else if (node == doc) {
                return true;
            }
            else {
                offset = domIndex(node);
                node = node.parentNode;
            }
        }
    }
    function isScrolledToBottom(elt) {
        return elt.scrollTop > Math.max(1, elt.scrollHeight - elt.clientHeight - 4);
    }
    function textNodeBefore(startNode, startOffset) {
        for (let node = startNode, offset = startOffset;;) {
            if (node.nodeType == 3 && offset > 0) {
                return { node: node, offset: offset };
            }
            else if (node.nodeType == 1 && offset > 0) {
                if (node.contentEditable == "false")
                    return null;
                node = node.childNodes[offset - 1];
                offset = maxOffset(node);
            }
            else if (node.parentNode && !isBlockElement(node)) {
                offset = domIndex(node);
                node = node.parentNode;
            }
            else {
                return null;
            }
        }
    }
    function textNodeAfter(startNode, startOffset) {
        for (let node = startNode, offset = startOffset;;) {
            if (node.nodeType == 3 && offset < node.nodeValue.length) {
                return { node: node, offset: offset };
            }
            else if (node.nodeType == 1 && offset < node.childNodes.length) {
                if (node.contentEditable == "false")
                    return null;
                node = node.childNodes[offset];
                offset = 0;
            }
            else if (node.parentNode && !isBlockElement(node)) {
                offset = domIndex(node) + 1;
                node = node.parentNode;
            }
            else {
                return null;
            }
        }
    }

    class DOMPos {
        constructor(node, offset, precise = true) {
            this.node = node;
            this.offset = offset;
            this.precise = precise;
        }
        static before(dom, precise) { return new DOMPos(dom.parentNode, domIndex(dom), precise); }
        static after(dom, precise) { return new DOMPos(dom.parentNode, domIndex(dom) + 1, precise); }
    }
    const noChildren = [];
    class ContentView {
        constructor() {
            this.parent = null;
            this.dom = null;
            this.flags = 2 /* ViewFlag.NodeDirty */;
        }
        get overrideDOMText() { return null; }
        get posAtStart() {
            return this.parent ? this.parent.posBefore(this) : 0;
        }
        get posAtEnd() {
            return this.posAtStart + this.length;
        }
        posBefore(view) {
            let pos = this.posAtStart;
            for (let child of this.children) {
                if (child == view)
                    return pos;
                pos += child.length + child.breakAfter;
            }
            throw new RangeError("Invalid child in posBefore");
        }
        posAfter(view) {
            return this.posBefore(view) + view.length;
        }
        sync(view, track) {
            if (this.flags & 2 /* ViewFlag.NodeDirty */) {
                let parent = this.dom;
                let prev = null, next;
                for (let child of this.children) {
                    if (child.flags & 7 /* ViewFlag.Dirty */) {
                        if (!child.dom && (next = prev ? prev.nextSibling : parent.firstChild)) {
                            let contentView = ContentView.get(next);
                            if (!contentView || !contentView.parent && contentView.canReuseDOM(child))
                                child.reuseDOM(next);
                        }
                        child.sync(view, track);
                        child.flags &= ~7 /* ViewFlag.Dirty */;
                    }
                    next = prev ? prev.nextSibling : parent.firstChild;
                    if (track && !track.written && track.node == parent && next != child.dom)
                        track.written = true;
                    if (child.dom.parentNode == parent) {
                        while (next && next != child.dom)
                            next = rm$1(next);
                    }
                    else {
                        parent.insertBefore(child.dom, next);
                    }
                    prev = child.dom;
                }
                next = prev ? prev.nextSibling : parent.firstChild;
                if (next && track && track.node == parent)
                    track.written = true;
                while (next)
                    next = rm$1(next);
            }
            else if (this.flags & 1 /* ViewFlag.ChildDirty */) {
                for (let child of this.children)
                    if (child.flags & 7 /* ViewFlag.Dirty */) {
                        child.sync(view, track);
                        child.flags &= ~7 /* ViewFlag.Dirty */;
                    }
            }
        }
        reuseDOM(_dom) { }
        localPosFromDOM(node, offset) {
            let after;
            if (node == this.dom) {
                after = this.dom.childNodes[offset];
            }
            else {
                let bias = maxOffset(node) == 0 ? 0 : offset == 0 ? -1 : 1;
                for (;;) {
                    let parent = node.parentNode;
                    if (parent == this.dom)
                        break;
                    if (bias == 0 && parent.firstChild != parent.lastChild) {
                        if (node == parent.firstChild)
                            bias = -1;
                        else
                            bias = 1;
                    }
                    node = parent;
                }
                if (bias < 0)
                    after = node;
                else
                    after = node.nextSibling;
            }
            if (after == this.dom.firstChild)
                return 0;
            while (after && !ContentView.get(after))
                after = after.nextSibling;
            if (!after)
                return this.length;
            for (let i = 0, pos = 0;; i++) {
                let child = this.children[i];
                if (child.dom == after)
                    return pos;
                pos += child.length + child.breakAfter;
            }
        }
        domBoundsAround(from, to, offset = 0) {
            let fromI = -1, fromStart = -1, toI = -1, toEnd = -1;
            for (let i = 0, pos = offset, prevEnd = offset; i < this.children.length; i++) {
                let child = this.children[i], end = pos + child.length;
                if (pos < from && end > to)
                    return child.domBoundsAround(from, to, pos);
                if (end >= from && fromI == -1) {
                    fromI = i;
                    fromStart = pos;
                }
                if (pos > to && child.dom.parentNode == this.dom) {
                    toI = i;
                    toEnd = prevEnd;
                    break;
                }
                prevEnd = end;
                pos = end + child.breakAfter;
            }
            return { from: fromStart, to: toEnd < 0 ? offset + this.length : toEnd,
                startDOM: (fromI ? this.children[fromI - 1].dom.nextSibling : null) || this.dom.firstChild,
                endDOM: toI < this.children.length && toI >= 0 ? this.children[toI].dom : null };
        }
        markDirty(andParent = false) {
            this.flags |= 2 /* ViewFlag.NodeDirty */;
            this.markParentsDirty(andParent);
        }
        markParentsDirty(childList) {
            for (let parent = this.parent; parent; parent = parent.parent) {
                if (childList)
                    parent.flags |= 2 /* ViewFlag.NodeDirty */;
                if (parent.flags & 1 /* ViewFlag.ChildDirty */)
                    return;
                parent.flags |= 1 /* ViewFlag.ChildDirty */;
                childList = false;
            }
        }
        setParent(parent) {
            if (this.parent != parent) {
                this.parent = parent;
                if (this.flags & 7 /* ViewFlag.Dirty */)
                    this.markParentsDirty(true);
            }
        }
        setDOM(dom) {
            if (this.dom == dom)
                return;
            if (this.dom)
                this.dom.cmView = null;
            this.dom = dom;
            dom.cmView = this;
        }
        get rootView() {
            for (let v = this;;) {
                let parent = v.parent;
                if (!parent)
                    return v;
                v = parent;
            }
        }
        replaceChildren(from, to, children = noChildren) {
            this.markDirty();
            for (let i = from; i < to; i++) {
                let child = this.children[i];
                if (child.parent == this && children.indexOf(child) < 0)
                    child.destroy();
            }
            if (children.length < 250)
                this.children.splice(from, to - from, ...children);
            else
                this.children = [].concat(this.children.slice(0, from), children, this.children.slice(to));
            for (let i = 0; i < children.length; i++)
                children[i].setParent(this);
        }
        ignoreMutation(_rec) { return false; }
        ignoreEvent(_event) { return false; }
        childCursor(pos = this.length) {
            return new ChildCursor(this.children, pos, this.children.length);
        }
        childPos(pos, bias = 1) {
            return this.childCursor().findPos(pos, bias);
        }
        toString() {
            let name = this.constructor.name.replace("View", "");
            return name + (this.children.length ? "(" + this.children.join() + ")" :
                this.length ? "[" + (name == "Text" ? this.text : this.length) + "]" : "") +
                (this.breakAfter ? "#" : "");
        }
        static get(node) { return node.cmView; }
        get isEditable() { return true; }
        get isWidget() { return false; }
        get isHidden() { return false; }
        merge(from, to, source, hasStart, openStart, openEnd) {
            return false;
        }
        become(other) { return false; }
        canReuseDOM(other) {
            return other.constructor == this.constructor && !((this.flags | other.flags) & 8 /* ViewFlag.Composition */);
        }
        // When this is a zero-length view with a side, this should return a
        // number <= 0 to indicate it is before its position, or a
        // number > 0 when after its position.
        getSide() { return 0; }
        destroy() {
            for (let child of this.children)
                if (child.parent == this)
                    child.destroy();
            this.parent = null;
        }
    }
    ContentView.prototype.breakAfter = 0;
    // Remove a DOM node and return its next sibling.
    function rm$1(dom) {
        let next = dom.nextSibling;
        dom.parentNode.removeChild(dom);
        return next;
    }
    class ChildCursor {
        constructor(children, pos, i) {
            this.children = children;
            this.pos = pos;
            this.i = i;
            this.off = 0;
        }
        findPos(pos, bias = 1) {
            for (;;) {
                if (pos > this.pos || pos == this.pos &&
                    (bias > 0 || this.i == 0 || this.children[this.i - 1].breakAfter)) {
                    this.off = pos - this.pos;
                    return this;
                }
                let next = this.children[--this.i];
                this.pos -= next.length + next.breakAfter;
            }
        }
    }
    function replaceRange(parent, fromI, fromOff, toI, toOff, insert, breakAtStart, openStart, openEnd) {
        let { children } = parent;
        let before = children.length ? children[fromI] : null;
        let last = insert.length ? insert[insert.length - 1] : null;
        let breakAtEnd = last ? last.breakAfter : breakAtStart;
        // Change within a single child
        if (fromI == toI && before && !breakAtStart && !breakAtEnd && insert.length < 2 &&
            before.merge(fromOff, toOff, insert.length ? last : null, fromOff == 0, openStart, openEnd))
            return;
        if (toI < children.length) {
            let after = children[toI];
            // Make sure the end of the child after the update is preserved in `after`
            if (after && (toOff < after.length || after.breakAfter && (last === null || last === void 0 ? void 0 : last.breakAfter))) {
                // If we're splitting a child, separate part of it to avoid that
                // being mangled when updating the child before the update.
                if (fromI == toI) {
                    after = after.split(toOff);
                    toOff = 0;
                }
                // If the element after the replacement should be merged with
                // the last replacing element, update `content`
                if (!breakAtEnd && last && after.merge(0, toOff, last, true, 0, openEnd)) {
                    insert[insert.length - 1] = after;
                }
                else {
                    // Remove the start of the after element, if necessary, and
                    // add it to `content`.
                    if (toOff || after.children.length && !after.children[0].length)
                        after.merge(0, toOff, null, false, 0, openEnd);
                    insert.push(after);
                }
            }
            else if (after === null || after === void 0 ? void 0 : after.breakAfter) {
                // The element at `toI` is entirely covered by this range.
                // Preserve its line break, if any.
                if (last)
                    last.breakAfter = 1;
                else
                    breakAtStart = 1;
            }
            // Since we've handled the next element from the current elements
            // now, make sure `toI` points after that.
            toI++;
        }
        if (before) {
            before.breakAfter = breakAtStart;
            if (fromOff > 0) {
                if (!breakAtStart && insert.length && before.merge(fromOff, before.length, insert[0], false, openStart, 0)) {
                    before.breakAfter = insert.shift().breakAfter;
                }
                else if (fromOff < before.length || before.children.length && before.children[before.children.length - 1].length == 0) {
                    before.merge(fromOff, before.length, null, false, openStart, 0);
                }
                fromI++;
            }
        }
        // Try to merge widgets on the boundaries of the replacement
        while (fromI < toI && insert.length) {
            if (children[toI - 1].become(insert[insert.length - 1])) {
                toI--;
                insert.pop();
                openEnd = insert.length ? 0 : openStart;
            }
            else if (children[fromI].become(insert[0])) {
                fromI++;
                insert.shift();
                openStart = insert.length ? 0 : openEnd;
            }
            else {
                break;
            }
        }
        if (!insert.length && fromI && toI < children.length && !children[fromI - 1].breakAfter &&
            children[toI].merge(0, 0, children[fromI - 1], false, openStart, openEnd))
            fromI--;
        if (fromI < toI || insert.length)
            parent.replaceChildren(fromI, toI, insert);
    }
    function mergeChildrenInto(parent, from, to, insert, openStart, openEnd) {
        let cur = parent.childCursor();
        let { i: toI, off: toOff } = cur.findPos(to, 1);
        let { i: fromI, off: fromOff } = cur.findPos(from, -1);
        let dLen = from - to;
        for (let view of insert)
            dLen += view.length;
        parent.length += dLen;
        replaceRange(parent, fromI, fromOff, toI, toOff, insert, 0, openStart, openEnd);
    }

    let nav = typeof navigator != "undefined" ? navigator : { userAgent: "", vendor: "", platform: "" };
    let doc = typeof document != "undefined" ? document : { documentElement: { style: {} } };
    const ie_edge = /*@__PURE__*//Edge\/(\d+)/.exec(nav.userAgent);
    const ie_upto10 = /*@__PURE__*//MSIE \d/.test(nav.userAgent);
    const ie_11up = /*@__PURE__*//Trident\/(?:[7-9]|\d{2,})\..*rv:(\d+)/.exec(nav.userAgent);
    const ie$5 = !!(ie_upto10 || ie_11up || ie_edge);
    const gecko = !ie$5 && /*@__PURE__*//gecko\/(\d+)/i.test(nav.userAgent);
    const chrome = !ie$5 && /*@__PURE__*//Chrome\/(\d+)/.exec(nav.userAgent);
    const webkit = "webkitFontSmoothing" in doc.documentElement.style;
    const safari = !ie$5 && /*@__PURE__*//Apple Computer/.test(nav.vendor);
    const ios = safari && (/*@__PURE__*//Mobile\/\w+/.test(nav.userAgent) || nav.maxTouchPoints > 2);
    var browser = {
        mac: ios || /*@__PURE__*//Mac/.test(nav.platform),
        windows: /*@__PURE__*//Win/.test(nav.platform),
        linux: /*@__PURE__*//Linux|X11/.test(nav.platform),
        ie: ie$5,
        ie_version: ie_upto10 ? doc.documentMode || 6 : ie_11up ? +ie_11up[1] : ie_edge ? +ie_edge[1] : 0,
        gecko,
        gecko_version: gecko ? +(/*@__PURE__*//Firefox\/(\d+)/.exec(nav.userAgent) || [0, 0])[1] : 0,
        chrome: !!chrome,
        chrome_version: chrome ? +chrome[1] : 0,
        ios,
        android: /*@__PURE__*//Android\b/.test(nav.userAgent),
        webkit,
        safari,
        webkit_version: webkit ? +(/*@__PURE__*//\bAppleWebKit\/(\d+)/.exec(nav.userAgent) || [0, 0])[1] : 0,
        tabSize: doc.documentElement.style.tabSize != null ? "tab-size" : "-moz-tab-size"
    };

    const MaxJoinLen = 256;
    class TextView extends ContentView {
        constructor(text) {
            super();
            this.text = text;
        }
        get length() { return this.text.length; }
        createDOM(textDOM) {
            this.setDOM(textDOM || document.createTextNode(this.text));
        }
        sync(view, track) {
            if (!this.dom)
                this.createDOM();
            if (this.dom.nodeValue != this.text) {
                if (track && track.node == this.dom)
                    track.written = true;
                this.dom.nodeValue = this.text;
            }
        }
        reuseDOM(dom) {
            if (dom.nodeType == 3)
                this.createDOM(dom);
        }
        merge(from, to, source) {
            if ((this.flags & 8 /* ViewFlag.Composition */) ||
                source && (!(source instanceof TextView) ||
                    this.length - (to - from) + source.length > MaxJoinLen ||
                    (source.flags & 8 /* ViewFlag.Composition */)))
                return false;
            this.text = this.text.slice(0, from) + (source ? source.text : "") + this.text.slice(to);
            this.markDirty();
            return true;
        }
        split(from) {
            let result = new TextView(this.text.slice(from));
            this.text = this.text.slice(0, from);
            this.markDirty();
            result.flags |= this.flags & 8 /* ViewFlag.Composition */;
            return result;
        }
        localPosFromDOM(node, offset) {
            return node == this.dom ? offset : offset ? this.text.length : 0;
        }
        domAtPos(pos) { return new DOMPos(this.dom, pos); }
        domBoundsAround(_from, _to, offset) {
            return { from: offset, to: offset + this.length, startDOM: this.dom, endDOM: this.dom.nextSibling };
        }
        coordsAt(pos, side) {
            return textCoords(this.dom, pos, side);
        }
    }
    class MarkView extends ContentView {
        constructor(mark, children = [], length = 0) {
            super();
            this.mark = mark;
            this.children = children;
            this.length = length;
            for (let ch of children)
                ch.setParent(this);
        }
        setAttrs(dom) {
            clearAttributes(dom);
            if (this.mark.class)
                dom.className = this.mark.class;
            if (this.mark.attrs)
                for (let name in this.mark.attrs)
                    dom.setAttribute(name, this.mark.attrs[name]);
            return dom;
        }
        canReuseDOM(other) {
            return super.canReuseDOM(other) && !((this.flags | other.flags) & 8 /* ViewFlag.Composition */);
        }
        reuseDOM(node) {
            if (node.nodeName == this.mark.tagName.toUpperCase()) {
                this.setDOM(node);
                this.flags |= 4 /* ViewFlag.AttrsDirty */ | 2 /* ViewFlag.NodeDirty */;
            }
        }
        sync(view, track) {
            if (!this.dom)
                this.setDOM(this.setAttrs(document.createElement(this.mark.tagName)));
            else if (this.flags & 4 /* ViewFlag.AttrsDirty */)
                this.setAttrs(this.dom);
            super.sync(view, track);
        }
        merge(from, to, source, _hasStart, openStart, openEnd) {
            if (source && (!(source instanceof MarkView && source.mark.eq(this.mark)) ||
                (from && openStart <= 0) || (to < this.length && openEnd <= 0)))
                return false;
            mergeChildrenInto(this, from, to, source ? source.children.slice() : [], openStart - 1, openEnd - 1);
            this.markDirty();
            return true;
        }
        split(from) {
            let result = [], off = 0, detachFrom = -1, i = 0;
            for (let elt of this.children) {
                let end = off + elt.length;
                if (end > from)
                    result.push(off < from ? elt.split(from - off) : elt);
                if (detachFrom < 0 && off >= from)
                    detachFrom = i;
                off = end;
                i++;
            }
            let length = this.length - from;
            this.length = from;
            if (detachFrom > -1) {
                this.children.length = detachFrom;
                this.markDirty();
            }
            return new MarkView(this.mark, result, length);
        }
        domAtPos(pos) {
            return inlineDOMAtPos(this, pos);
        }
        coordsAt(pos, side) {
            return coordsInChildren(this, pos, side);
        }
    }
    function textCoords(text, pos, side) {
        let length = text.nodeValue.length;
        if (pos > length)
            pos = length;
        let from = pos, to = pos, flatten = 0;
        if (pos == 0 && side < 0 || pos == length && side >= 0) {
            if (!(browser.chrome || browser.gecko)) { // These browsers reliably return valid rectangles for empty ranges
                if (pos) {
                    from--;
                    flatten = 1;
                } // FIXME this is wrong in RTL text
                else if (to < length) {
                    to++;
                    flatten = -1;
                }
            }
        }
        else {
            if (side < 0)
                from--;
            else if (to < length)
                to++;
        }
        let rects = textRange(text, from, to).getClientRects();
        if (!rects.length)
            return null;
        let rect = rects[(flatten ? flatten < 0 : side >= 0) ? 0 : rects.length - 1];
        if (browser.safari && !flatten && rect.width == 0)
            rect = Array.prototype.find.call(rects, r => r.width) || rect;
        return flatten ? flattenRect(rect, flatten < 0) : rect || null;
    }
    // Also used for collapsed ranges that don't have a placeholder widget!
    class WidgetView extends ContentView {
        static create(widget, length, side) {
            return new WidgetView(widget, length, side);
        }
        constructor(widget, length, side) {
            super();
            this.widget = widget;
            this.length = length;
            this.side = side;
            this.prevWidget = null;
        }
        split(from) {
            let result = WidgetView.create(this.widget, this.length - from, this.side);
            this.length -= from;
            return result;
        }
        sync(view) {
            if (!this.dom || !this.widget.updateDOM(this.dom, view)) {
                if (this.dom && this.prevWidget)
                    this.prevWidget.destroy(this.dom);
                this.prevWidget = null;
                this.setDOM(this.widget.toDOM(view));
                if (!this.widget.editable)
                    this.dom.contentEditable = "false";
            }
        }
        getSide() { return this.side; }
        merge(from, to, source, hasStart, openStart, openEnd) {
            if (source && (!(source instanceof WidgetView) || !this.widget.compare(source.widget) ||
                from > 0 && openStart <= 0 || to < this.length && openEnd <= 0))
                return false;
            this.length = from + (source ? source.length : 0) + (this.length - to);
            return true;
        }
        become(other) {
            if (other instanceof WidgetView && other.side == this.side &&
                this.widget.constructor == other.widget.constructor) {
                if (!this.widget.compare(other.widget))
                    this.markDirty(true);
                if (this.dom && !this.prevWidget)
                    this.prevWidget = this.widget;
                this.widget = other.widget;
                this.length = other.length;
                return true;
            }
            return false;
        }
        ignoreMutation() { return true; }
        ignoreEvent(event) { return this.widget.ignoreEvent(event); }
        get overrideDOMText() {
            if (this.length == 0)
                return Text.empty;
            let top = this;
            while (top.parent)
                top = top.parent;
            let { view } = top, text = view && view.state.doc, start = this.posAtStart;
            return text ? text.slice(start, start + this.length) : Text.empty;
        }
        domAtPos(pos) {
            return (this.length ? pos == 0 : this.side > 0)
                ? DOMPos.before(this.dom)
                : DOMPos.after(this.dom, pos == this.length);
        }
        domBoundsAround() { return null; }
        coordsAt(pos, side) {
            let custom = this.widget.coordsAt(this.dom, pos, side);
            if (custom)
                return custom;
            let rects = this.dom.getClientRects(), rect = null;
            if (!rects.length)
                return null;
            let fromBack = this.side ? this.side < 0 : pos > 0;
            for (let i = fromBack ? rects.length - 1 : 0;; i += (fromBack ? -1 : 1)) {
                rect = rects[i];
                if (pos > 0 ? i == 0 : i == rects.length - 1 || rect.top < rect.bottom)
                    break;
            }
            return flattenRect(rect, !fromBack);
        }
        get isEditable() { return false; }
        get isWidget() { return true; }
        get isHidden() { return this.widget.isHidden; }
        destroy() {
            super.destroy();
            if (this.dom)
                this.widget.destroy(this.dom);
        }
    }
    // These are drawn around uneditable widgets to avoid a number of
    // browser bugs that show up when the cursor is directly next to
    // uneditable inline content.
    class WidgetBufferView extends ContentView {
        constructor(side) {
            super();
            this.side = side;
        }
        get length() { return 0; }
        merge() { return false; }
        become(other) {
            return other instanceof WidgetBufferView && other.side == this.side;
        }
        split() { return new WidgetBufferView(this.side); }
        sync() {
            if (!this.dom) {
                let dom = document.createElement("img");
                dom.className = "cm-widgetBuffer";
                dom.setAttribute("aria-hidden", "true");
                this.setDOM(dom);
            }
        }
        getSide() { return this.side; }
        domAtPos(pos) { return this.side > 0 ? DOMPos.before(this.dom) : DOMPos.after(this.dom); }
        localPosFromDOM() { return 0; }
        domBoundsAround() { return null; }
        coordsAt(pos) {
            return this.dom.getBoundingClientRect();
        }
        get overrideDOMText() {
            return Text.empty;
        }
        get isHidden() { return true; }
    }
    TextView.prototype.children = WidgetView.prototype.children = WidgetBufferView.prototype.children = noChildren;
    function inlineDOMAtPos(parent, pos) {
        let dom = parent.dom, { children } = parent, i = 0;
        for (let off = 0; i < children.length; i++) {
            let child = children[i], end = off + child.length;
            if (end == off && child.getSide() <= 0)
                continue;
            if (pos > off && pos < end && child.dom.parentNode == dom)
                return child.domAtPos(pos - off);
            if (pos <= off)
                break;
            off = end;
        }
        for (let j = i; j > 0; j--) {
            let prev = children[j - 1];
            if (prev.dom.parentNode == dom)
                return prev.domAtPos(prev.length);
        }
        for (let j = i; j < children.length; j++) {
            let next = children[j];
            if (next.dom.parentNode == dom)
                return next.domAtPos(0);
        }
        return new DOMPos(dom, 0);
    }
    // Assumes `view`, if a mark view, has precisely 1 child.
    function joinInlineInto(parent, view, open) {
        let last, { children } = parent;
        if (open > 0 && view instanceof MarkView && children.length &&
            (last = children[children.length - 1]) instanceof MarkView && last.mark.eq(view.mark)) {
            joinInlineInto(last, view.children[0], open - 1);
        }
        else {
            children.push(view);
            view.setParent(parent);
        }
        parent.length += view.length;
    }
    function coordsInChildren(view, pos, side) {
        let before = null, beforePos = -1, after = null, afterPos = -1;
        function scan(view, pos) {
            for (let i = 0, off = 0; i < view.children.length && off <= pos; i++) {
                let child = view.children[i], end = off + child.length;
                if (end >= pos) {
                    if (child.children.length) {
                        scan(child, pos - off);
                    }
                    else if ((!after || after.isHidden && side > 0) &&
                        (end > pos || off == end && child.getSide() > 0)) {
                        after = child;
                        afterPos = pos - off;
                    }
                    else if (off < pos || (off == end && child.getSide() < 0) && !child.isHidden) {
                        before = child;
                        beforePos = pos - off;
                    }
                }
                off = end;
            }
        }
        scan(view, pos);
        let target = (side < 0 ? before : after) || before || after;
        if (target)
            return target.coordsAt(Math.max(0, target == before ? beforePos : afterPos), side);
        return fallbackRect(view);
    }
    function fallbackRect(view) {
        let last = view.dom.lastChild;
        if (!last)
            return view.dom.getBoundingClientRect();
        let rects = clientRectsFor(last);
        return rects[rects.length - 1] || null;
    }

    function combineAttrs(source, target) {
        for (let name in source) {
            if (name == "class" && target.class)
                target.class += " " + source.class;
            else if (name == "style" && target.style)
                target.style += ";" + source.style;
            else
                target[name] = source[name];
        }
        return target;
    }
    const noAttrs$1 = /*@__PURE__*/Object.create(null);
    function attrsEq(a, b, ignore) {
        if (a == b)
            return true;
        if (!a)
            a = noAttrs$1;
        if (!b)
            b = noAttrs$1;
        let keysA = Object.keys(a), keysB = Object.keys(b);
        if (keysA.length - (ignore && keysA.indexOf(ignore) > -1 ? 1 : 0) !=
            keysB.length - (ignore && keysB.indexOf(ignore) > -1 ? 1 : 0))
            return false;
        for (let key of keysA) {
            if (key != ignore && (keysB.indexOf(key) == -1 || a[key] !== b[key]))
                return false;
        }
        return true;
    }
    function updateAttrs(dom, prev, attrs) {
        let changed = false;
        if (prev)
            for (let name in prev)
                if (!(attrs && name in attrs)) {
                    changed = true;
                    if (name == "style")
                        dom.style.cssText = "";
                    else
                        dom.removeAttribute(name);
                }
        if (attrs)
            for (let name in attrs)
                if (!(prev && prev[name] == attrs[name])) {
                    changed = true;
                    if (name == "style")
                        dom.style.cssText = attrs[name];
                    else
                        dom.setAttribute(name, attrs[name]);
                }
        return changed;
    }
    function getAttrs$1(dom) {
        let attrs = Object.create(null);
        for (let i = 0; i < dom.attributes.length; i++) {
            let attr = dom.attributes[i];
            attrs[attr.name] = attr.value;
        }
        return attrs;
    }

    /**
    Widgets added to the content are described by subclasses of this
    class. Using a description object like that makes it possible to
    delay creating of the DOM structure for a widget until it is
    needed, and to avoid redrawing widgets even if the decorations
    that define them are recreated.
    */
    class WidgetType {
        /**
        Compare this instance to another instance of the same type.
        (TypeScript can't express this, but only instances of the same
        specific class will be passed to this method.) This is used to
        avoid redrawing widgets when they are replaced by a new
        decoration of the same type. The default implementation just
        returns `false`, which will cause new instances of the widget to
        always be redrawn.
        */
        eq(widget) { return false; }
        /**
        Update a DOM element created by a widget of the same type (but
        different, non-`eq` content) to reflect this widget. May return
        true to indicate that it could update, false to indicate it
        couldn't (in which case the widget will be redrawn). The default
        implementation just returns false.
        */
        updateDOM(dom, view) { return false; }
        /**
        @internal
        */
        compare(other) {
            return this == other || this.constructor == other.constructor && this.eq(other);
        }
        /**
        The estimated height this widget will have, to be used when
        estimating the height of content that hasn't been drawn. May
        return -1 to indicate you don't know. The default implementation
        returns -1.
        */
        get estimatedHeight() { return -1; }
        /**
        For inline widgets that are displayed inline (as opposed to
        `inline-block`) and introduce line breaks (through `<br>` tags
        or textual newlines), this must indicate the amount of line
        breaks they introduce. Defaults to 0.
        */
        get lineBreaks() { return 0; }
        /**
        Can be used to configure which kinds of events inside the widget
        should be ignored by the editor. The default is to ignore all
        events.
        */
        ignoreEvent(event) { return true; }
        /**
        Override the way screen coordinates for positions at/in the
        widget are found. `pos` will be the offset into the widget, and
        `side` the side of the position that is being queried—less than
        zero for before, greater than zero for after, and zero for
        directly at that position.
        */
        coordsAt(dom, pos, side) { return null; }
        /**
        @internal
        */
        get isHidden() { return false; }
        /**
        @internal
        */
        get editable() { return false; }
        /**
        This is called when the an instance of the widget is removed
        from the editor view.
        */
        destroy(dom) { }
    }
    /**
    The different types of blocks that can occur in an editor view.
    */
    var BlockType = /*@__PURE__*/(function (BlockType) {
        /**
        A line of text.
        */
        BlockType[BlockType["Text"] = 0] = "Text";
        /**
        A block widget associated with the position after it.
        */
        BlockType[BlockType["WidgetBefore"] = 1] = "WidgetBefore";
        /**
        A block widget associated with the position before it.
        */
        BlockType[BlockType["WidgetAfter"] = 2] = "WidgetAfter";
        /**
        A block widget [replacing](https://codemirror.net/6/docs/ref/#view.Decoration^replace) a range of content.
        */
        BlockType[BlockType["WidgetRange"] = 3] = "WidgetRange";
    return BlockType})(BlockType || (BlockType = {}));
    /**
    A decoration provides information on how to draw or style a piece
    of content. You'll usually use it wrapped in a
    [`Range`](https://codemirror.net/6/docs/ref/#state.Range), which adds a start and end position.
    @nonabstract
    */
    class Decoration extends RangeValue {
        constructor(
        /**
        @internal
        */
        startSide,
        /**
        @internal
        */
        endSide,
        /**
        @internal
        */
        widget,
        /**
        The config object used to create this decoration. You can
        include additional properties in there to store metadata about
        your decoration.
        */
        spec) {
            super();
            this.startSide = startSide;
            this.endSide = endSide;
            this.widget = widget;
            this.spec = spec;
        }
        /**
        @internal
        */
        get heightRelevant() { return false; }
        /**
        Create a mark decoration, which influences the styling of the
        content in its range. Nested mark decorations will cause nested
        DOM elements to be created. Nesting order is determined by
        precedence of the [facet](https://codemirror.net/6/docs/ref/#view.EditorView^decorations), with
        the higher-precedence decorations creating the inner DOM nodes.
        Such elements are split on line boundaries and on the boundaries
        of lower-precedence decorations.
        */
        static mark(spec) {
            return new MarkDecoration(spec);
        }
        /**
        Create a widget decoration, which displays a DOM element at the
        given position.
        */
        static widget(spec) {
            let side = Math.max(-10000, Math.min(10000, spec.side || 0)), block = !!spec.block;
            side += (block && !spec.inlineOrder)
                ? (side > 0 ? 300000000 /* Side.BlockAfter */ : -400000000 /* Side.BlockBefore */)
                : (side > 0 ? 100000000 /* Side.InlineAfter */ : -100000000 /* Side.InlineBefore */);
            return new PointDecoration(spec, side, side, block, spec.widget || null, false);
        }
        /**
        Create a replace decoration which replaces the given range with
        a widget, or simply hides it.
        */
        static replace(spec) {
            let block = !!spec.block, startSide, endSide;
            if (spec.isBlockGap) {
                startSide = -500000000 /* Side.GapStart */;
                endSide = 400000000 /* Side.GapEnd */;
            }
            else {
                let { start, end } = getInclusive(spec, block);
                startSide = (start ? (block ? -300000000 /* Side.BlockIncStart */ : -1 /* Side.InlineIncStart */) : 500000000 /* Side.NonIncStart */) - 1;
                endSide = (end ? (block ? 200000000 /* Side.BlockIncEnd */ : 1 /* Side.InlineIncEnd */) : -600000000 /* Side.NonIncEnd */) + 1;
            }
            return new PointDecoration(spec, startSide, endSide, block, spec.widget || null, true);
        }
        /**
        Create a line decoration, which can add DOM attributes to the
        line starting at the given position.
        */
        static line(spec) {
            return new LineDecoration(spec);
        }
        /**
        Build a [`DecorationSet`](https://codemirror.net/6/docs/ref/#view.DecorationSet) from the given
        decorated range or ranges. If the ranges aren't already sorted,
        pass `true` for `sort` to make the library sort them for you.
        */
        static set(of, sort = false) {
            return RangeSet.of(of, sort);
        }
        /**
        @internal
        */
        hasHeight() { return this.widget ? this.widget.estimatedHeight > -1 : false; }
    }
    /**
    The empty set of decorations.
    */
    Decoration.none = RangeSet.empty;
    class MarkDecoration extends Decoration {
        constructor(spec) {
            let { start, end } = getInclusive(spec);
            super(start ? -1 /* Side.InlineIncStart */ : 500000000 /* Side.NonIncStart */, end ? 1 /* Side.InlineIncEnd */ : -600000000 /* Side.NonIncEnd */, null, spec);
            this.tagName = spec.tagName || "span";
            this.class = spec.class || "";
            this.attrs = spec.attributes || null;
        }
        eq(other) {
            var _a, _b;
            return this == other ||
                other instanceof MarkDecoration &&
                    this.tagName == other.tagName &&
                    (this.class || ((_a = this.attrs) === null || _a === void 0 ? void 0 : _a.class)) == (other.class || ((_b = other.attrs) === null || _b === void 0 ? void 0 : _b.class)) &&
                    attrsEq(this.attrs, other.attrs, "class");
        }
        range(from, to = from) {
            if (from >= to)
                throw new RangeError("Mark decorations may not be empty");
            return super.range(from, to);
        }
    }
    MarkDecoration.prototype.point = false;
    class LineDecoration extends Decoration {
        constructor(spec) {
            super(-200000000 /* Side.Line */, -200000000 /* Side.Line */, null, spec);
        }
        eq(other) {
            return other instanceof LineDecoration &&
                this.spec.class == other.spec.class &&
                attrsEq(this.spec.attributes, other.spec.attributes);
        }
        range(from, to = from) {
            if (to != from)
                throw new RangeError("Line decoration ranges must be zero-length");
            return super.range(from, to);
        }
    }
    LineDecoration.prototype.mapMode = MapMode.TrackBefore;
    LineDecoration.prototype.point = true;
    class PointDecoration extends Decoration {
        constructor(spec, startSide, endSide, block, widget, isReplace) {
            super(startSide, endSide, widget, spec);
            this.block = block;
            this.isReplace = isReplace;
            this.mapMode = !block ? MapMode.TrackDel : startSide <= 0 ? MapMode.TrackBefore : MapMode.TrackAfter;
        }
        // Only relevant when this.block == true
        get type() {
            return this.startSide != this.endSide ? BlockType.WidgetRange
                : this.startSide <= 0 ? BlockType.WidgetBefore : BlockType.WidgetAfter;
        }
        get heightRelevant() {
            return this.block || !!this.widget && (this.widget.estimatedHeight >= 5 || this.widget.lineBreaks > 0);
        }
        eq(other) {
            return other instanceof PointDecoration &&
                widgetsEq(this.widget, other.widget) &&
                this.block == other.block &&
                this.startSide == other.startSide && this.endSide == other.endSide;
        }
        range(from, to = from) {
            if (this.isReplace && (from > to || (from == to && this.startSide > 0 && this.endSide <= 0)))
                throw new RangeError("Invalid range for replacement decoration");
            if (!this.isReplace && to != from)
                throw new RangeError("Widget decorations can only have zero-length ranges");
            return super.range(from, to);
        }
    }
    PointDecoration.prototype.point = true;
    function getInclusive(spec, block = false) {
        let { inclusiveStart: start, inclusiveEnd: end } = spec;
        if (start == null)
            start = spec.inclusive;
        if (end == null)
            end = spec.inclusive;
        return { start: start !== null && start !== void 0 ? start : block, end: end !== null && end !== void 0 ? end : block };
    }
    function widgetsEq(a, b) {
        return a == b || !!(a && b && a.compare(b));
    }
    function addRange(from, to, ranges, margin = 0) {
        let last = ranges.length - 1;
        if (last >= 0 && ranges[last] + margin >= from)
            ranges[last] = Math.max(ranges[last], to);
        else
            ranges.push(from, to);
    }

    class LineView extends ContentView {
        constructor() {
            super(...arguments);
            this.children = [];
            this.length = 0;
            this.prevAttrs = undefined;
            this.attrs = null;
            this.breakAfter = 0;
        }
        // Consumes source
        merge(from, to, source, hasStart, openStart, openEnd) {
            if (source) {
                if (!(source instanceof LineView))
                    return false;
                if (!this.dom)
                    source.transferDOM(this); // Reuse source.dom when appropriate
            }
            if (hasStart)
                this.setDeco(source ? source.attrs : null);
            mergeChildrenInto(this, from, to, source ? source.children.slice() : [], openStart, openEnd);
            return true;
        }
        split(at) {
            let end = new LineView;
            end.breakAfter = this.breakAfter;
            if (this.length == 0)
                return end;
            let { i, off } = this.childPos(at);
            if (off) {
                end.append(this.children[i].split(off), 0);
                this.children[i].merge(off, this.children[i].length, null, false, 0, 0);
                i++;
            }
            for (let j = i; j < this.children.length; j++)
                end.append(this.children[j], 0);
            while (i > 0 && this.children[i - 1].length == 0)
                this.children[--i].destroy();
            this.children.length = i;
            this.markDirty();
            this.length = at;
            return end;
        }
        transferDOM(other) {
            if (!this.dom)
                return;
            this.markDirty();
            other.setDOM(this.dom);
            other.prevAttrs = this.prevAttrs === undefined ? this.attrs : this.prevAttrs;
            this.prevAttrs = undefined;
            this.dom = null;
        }
        setDeco(attrs) {
            if (!attrsEq(this.attrs, attrs)) {
                if (this.dom) {
                    this.prevAttrs = this.attrs;
                    this.markDirty();
                }
                this.attrs = attrs;
            }
        }
        append(child, openStart) {
            joinInlineInto(this, child, openStart);
        }
        // Only called when building a line view in ContentBuilder
        addLineDeco(deco) {
            let attrs = deco.spec.attributes, cls = deco.spec.class;
            if (attrs)
                this.attrs = combineAttrs(attrs, this.attrs || {});
            if (cls)
                this.attrs = combineAttrs({ class: cls }, this.attrs || {});
        }
        domAtPos(pos) {
            return inlineDOMAtPos(this, pos);
        }
        reuseDOM(node) {
            if (node.nodeName == "DIV") {
                this.setDOM(node);
                this.flags |= 4 /* ViewFlag.AttrsDirty */ | 2 /* ViewFlag.NodeDirty */;
            }
        }
        sync(view, track) {
            var _a;
            if (!this.dom) {
                this.setDOM(document.createElement("div"));
                this.dom.className = "cm-line";
                this.prevAttrs = this.attrs ? null : undefined;
            }
            else if (this.flags & 4 /* ViewFlag.AttrsDirty */) {
                clearAttributes(this.dom);
                this.dom.className = "cm-line";
                this.prevAttrs = this.attrs ? null : undefined;
            }
            if (this.prevAttrs !== undefined) {
                updateAttrs(this.dom, this.prevAttrs, this.attrs);
                this.dom.classList.add("cm-line");
                this.prevAttrs = undefined;
            }
            super.sync(view, track);
            let last = this.dom.lastChild;
            while (last && ContentView.get(last) instanceof MarkView)
                last = last.lastChild;
            if (!last || !this.length ||
                last.nodeName != "BR" && ((_a = ContentView.get(last)) === null || _a === void 0 ? void 0 : _a.isEditable) == false &&
                    (!browser.ios || !this.children.some(ch => ch instanceof TextView))) {
                let hack = document.createElement("BR");
                hack.cmIgnore = true;
                this.dom.appendChild(hack);
            }
        }
        measureTextSize() {
            if (this.children.length == 0 || this.length > 20)
                return null;
            let totalWidth = 0, textHeight;
            for (let child of this.children) {
                if (!(child instanceof TextView) || /[^ -~]/.test(child.text))
                    return null;
                let rects = clientRectsFor(child.dom);
                if (rects.length != 1)
                    return null;
                totalWidth += rects[0].width;
                textHeight = rects[0].height;
            }
            return !totalWidth ? null : {
                lineHeight: this.dom.getBoundingClientRect().height,
                charWidth: totalWidth / this.length,
                textHeight
            };
        }
        coordsAt(pos, side) {
            let rect = coordsInChildren(this, pos, side);
            // Correct rectangle height for empty lines when the returned
            // height is larger than the text height.
            if (!this.children.length && rect && this.parent) {
                let { heightOracle } = this.parent.view.viewState, height = rect.bottom - rect.top;
                if (Math.abs(height - heightOracle.lineHeight) < 2 && heightOracle.textHeight < height) {
                    let dist = (height - heightOracle.textHeight) / 2;
                    return { top: rect.top + dist, bottom: rect.bottom - dist, left: rect.left, right: rect.left };
                }
            }
            return rect;
        }
        become(other) {
            return other instanceof LineView && this.children.length == 0 && other.children.length == 0 &&
                attrsEq(this.attrs, other.attrs) && this.breakAfter == other.breakAfter;
        }
        covers() { return true; }
        static find(docView, pos) {
            for (let i = 0, off = 0; i < docView.children.length; i++) {
                let block = docView.children[i], end = off + block.length;
                if (end >= pos) {
                    if (block instanceof LineView)
                        return block;
                    if (end > pos)
                        break;
                }
                off = end + block.breakAfter;
            }
            return null;
        }
    }
    class BlockWidgetView extends ContentView {
        constructor(widget, length, deco) {
            super();
            this.widget = widget;
            this.length = length;
            this.deco = deco;
            this.breakAfter = 0;
            this.prevWidget = null;
        }
        merge(from, to, source, _takeDeco, openStart, openEnd) {
            if (source && (!(source instanceof BlockWidgetView) || !this.widget.compare(source.widget) ||
                from > 0 && openStart <= 0 || to < this.length && openEnd <= 0))
                return false;
            this.length = from + (source ? source.length : 0) + (this.length - to);
            return true;
        }
        domAtPos(pos) {
            return pos == 0 ? DOMPos.before(this.dom) : DOMPos.after(this.dom, pos == this.length);
        }
        split(at) {
            let len = this.length - at;
            this.length = at;
            let end = new BlockWidgetView(this.widget, len, this.deco);
            end.breakAfter = this.breakAfter;
            return end;
        }
        get children() { return noChildren; }
        sync(view) {
            if (!this.dom || !this.widget.updateDOM(this.dom, view)) {
                if (this.dom && this.prevWidget)
                    this.prevWidget.destroy(this.dom);
                this.prevWidget = null;
                this.setDOM(this.widget.toDOM(view));
                if (!this.widget.editable)
                    this.dom.contentEditable = "false";
            }
        }
        get overrideDOMText() {
            return this.parent ? this.parent.view.state.doc.slice(this.posAtStart, this.posAtEnd) : Text.empty;
        }
        domBoundsAround() { return null; }
        become(other) {
            if (other instanceof BlockWidgetView &&
                other.widget.constructor == this.widget.constructor) {
                if (!other.widget.compare(this.widget))
                    this.markDirty(true);
                if (this.dom && !this.prevWidget)
                    this.prevWidget = this.widget;
                this.widget = other.widget;
                this.length = other.length;
                this.deco = other.deco;
                this.breakAfter = other.breakAfter;
                return true;
            }
            return false;
        }
        ignoreMutation() { return true; }
        ignoreEvent(event) { return this.widget.ignoreEvent(event); }
        get isEditable() { return false; }
        get isWidget() { return true; }
        coordsAt(pos, side) {
            let custom = this.widget.coordsAt(this.dom, pos, side);
            if (custom)
                return custom;
            if (this.widget instanceof BlockGapWidget)
                return null;
            return flattenRect(this.dom.getBoundingClientRect(), this.length ? pos == 0 : side <= 0);
        }
        destroy() {
            super.destroy();
            if (this.dom)
                this.widget.destroy(this.dom);
        }
        covers(side) {
            let { startSide, endSide } = this.deco;
            return startSide == endSide ? false : side < 0 ? startSide < 0 : endSide > 0;
        }
    }
    class BlockGapWidget extends WidgetType {
        constructor(height) {
            super();
            this.height = height;
        }
        toDOM() {
            let elt = document.createElement("div");
            elt.className = "cm-gap";
            this.updateDOM(elt);
            return elt;
        }
        eq(other) { return other.height == this.height; }
        updateDOM(elt) {
            elt.style.height = this.height + "px";
            return true;
        }
        get editable() { return true; }
        get estimatedHeight() { return this.height; }
        ignoreEvent() { return false; }
    }

    class ContentBuilder {
        constructor(doc, pos, end, disallowBlockEffectsFor) {
            this.doc = doc;
            this.pos = pos;
            this.end = end;
            this.disallowBlockEffectsFor = disallowBlockEffectsFor;
            this.content = [];
            this.curLine = null;
            this.breakAtStart = 0;
            this.pendingBuffer = 0 /* Buf.No */;
            this.bufferMarks = [];
            // Set to false directly after a widget that covers the position after it
            this.atCursorPos = true;
            this.openStart = -1;
            this.openEnd = -1;
            this.text = "";
            this.textOff = 0;
            this.cursor = doc.iter();
            this.skip = pos;
        }
        posCovered() {
            if (this.content.length == 0)
                return !this.breakAtStart && this.doc.lineAt(this.pos).from != this.pos;
            let last = this.content[this.content.length - 1];
            return !(last.breakAfter || last instanceof BlockWidgetView && last.deco.endSide < 0);
        }
        getLine() {
            if (!this.curLine) {
                this.content.push(this.curLine = new LineView);
                this.atCursorPos = true;
            }
            return this.curLine;
        }
        flushBuffer(active = this.bufferMarks) {
            if (this.pendingBuffer) {
                this.curLine.append(wrapMarks(new WidgetBufferView(-1), active), active.length);
                this.pendingBuffer = 0 /* Buf.No */;
            }
        }
        addBlockWidget(view) {
            this.flushBuffer();
            this.curLine = null;
            this.content.push(view);
        }
        finish(openEnd) {
            if (this.pendingBuffer && openEnd <= this.bufferMarks.length)
                this.flushBuffer();
            else
                this.pendingBuffer = 0 /* Buf.No */;
            if (!this.posCovered() &&
                !(openEnd && this.content.length && this.content[this.content.length - 1] instanceof BlockWidgetView))
                this.getLine();
        }
        buildText(length, active, openStart) {
            while (length > 0) {
                if (this.textOff == this.text.length) {
                    let { value, lineBreak, done } = this.cursor.next(this.skip);
                    this.skip = 0;
                    if (done)
                        throw new Error("Ran out of text content when drawing inline views");
                    if (lineBreak) {
                        if (!this.posCovered())
                            this.getLine();
                        if (this.content.length)
                            this.content[this.content.length - 1].breakAfter = 1;
                        else
                            this.breakAtStart = 1;
                        this.flushBuffer();
                        this.curLine = null;
                        this.atCursorPos = true;
                        length--;
                        continue;
                    }
                    else {
                        this.text = value;
                        this.textOff = 0;
                    }
                }
                let take = Math.min(this.text.length - this.textOff, length, 512 /* T.Chunk */);
                this.flushBuffer(active.slice(active.length - openStart));
                this.getLine().append(wrapMarks(new TextView(this.text.slice(this.textOff, this.textOff + take)), active), openStart);
                this.atCursorPos = true;
                this.textOff += take;
                length -= take;
                openStart = 0;
            }
        }
        span(from, to, active, openStart) {
            this.buildText(to - from, active, openStart);
            this.pos = to;
            if (this.openStart < 0)
                this.openStart = openStart;
        }
        point(from, to, deco, active, openStart, index) {
            if (this.disallowBlockEffectsFor[index] && deco instanceof PointDecoration) {
                if (deco.block)
                    throw new RangeError("Block decorations may not be specified via plugins");
                if (to > this.doc.lineAt(this.pos).to)
                    throw new RangeError("Decorations that replace line breaks may not be specified via plugins");
            }
            let len = to - from;
            if (deco instanceof PointDecoration) {
                if (deco.block) {
                    if (deco.startSide > 0 && !this.posCovered())
                        this.getLine();
                    this.addBlockWidget(new BlockWidgetView(deco.widget || NullWidget.block, len, deco));
                }
                else {
                    let view = WidgetView.create(deco.widget || NullWidget.inline, len, len ? 0 : deco.startSide);
                    let cursorBefore = this.atCursorPos && !view.isEditable && openStart <= active.length &&
                        (from < to || deco.startSide > 0);
                    let cursorAfter = !view.isEditable && (from < to || openStart > active.length || deco.startSide <= 0);
                    let line = this.getLine();
                    if (this.pendingBuffer == 2 /* Buf.IfCursor */ && !cursorBefore && !view.isEditable)
                        this.pendingBuffer = 0 /* Buf.No */;
                    this.flushBuffer(active);
                    if (cursorBefore) {
                        line.append(wrapMarks(new WidgetBufferView(1), active), openStart);
                        openStart = active.length + Math.max(0, openStart - active.length);
                    }
                    line.append(wrapMarks(view, active), openStart);
                    this.atCursorPos = cursorAfter;
                    this.pendingBuffer = !cursorAfter ? 0 /* Buf.No */ : from < to || openStart > active.length ? 1 /* Buf.Yes */ : 2 /* Buf.IfCursor */;
                    if (this.pendingBuffer)
                        this.bufferMarks = active.slice();
                }
            }
            else if (this.doc.lineAt(this.pos).from == this.pos) { // Line decoration
                this.getLine().addLineDeco(deco);
            }
            if (len) {
                // Advance the iterator past the replaced content
                if (this.textOff + len <= this.text.length) {
                    this.textOff += len;
                }
                else {
                    this.skip += len - (this.text.length - this.textOff);
                    this.text = "";
                    this.textOff = 0;
                }
                this.pos = to;
            }
            if (this.openStart < 0)
                this.openStart = openStart;
        }
        static build(text, from, to, decorations, dynamicDecorationMap) {
            let builder = new ContentBuilder(text, from, to, dynamicDecorationMap);
            builder.openEnd = RangeSet.spans(decorations, from, to, builder);
            if (builder.openStart < 0)
                builder.openStart = builder.openEnd;
            builder.finish(builder.openEnd);
            return builder;
        }
    }
    function wrapMarks(view, active) {
        for (let mark of active)
            view = new MarkView(mark, [view], view.length);
        return view;
    }
    class NullWidget extends WidgetType {
        constructor(tag) {
            super();
            this.tag = tag;
        }
        eq(other) { return other.tag == this.tag; }
        toDOM() { return document.createElement(this.tag); }
        updateDOM(elt) { return elt.nodeName.toLowerCase() == this.tag; }
        get isHidden() { return true; }
    }
    NullWidget.inline = /*@__PURE__*/new NullWidget("span");
    NullWidget.block = /*@__PURE__*/new NullWidget("div");

    /**
    Used to indicate [text direction](https://codemirror.net/6/docs/ref/#view.EditorView.textDirection).
    */
    var Direction = /*@__PURE__*/(function (Direction) {
        // (These are chosen to match the base levels, in bidi algorithm
        // terms, of spans in that direction.)
        /**
        Left-to-right.
        */
        Direction[Direction["LTR"] = 0] = "LTR";
        /**
        Right-to-left.
        */
        Direction[Direction["RTL"] = 1] = "RTL";
    return Direction})(Direction || (Direction = {}));
    const LTR = Direction.LTR, RTL = Direction.RTL;
    // Decode a string with each type encoded as log2(type)
    function dec(str) {
        let result = [];
        for (let i = 0; i < str.length; i++)
            result.push(1 << +str[i]);
        return result;
    }
    // Character types for codepoints 0 to 0xf8
    const LowTypes = /*@__PURE__*/dec("88888888888888888888888888888888888666888888787833333333337888888000000000000000000000000008888880000000000000000000000000088888888888888888888888888888888888887866668888088888663380888308888800000000000000000000000800000000000000000000000000000008");
    // Character types for codepoints 0x600 to 0x6f9
    const ArabicTypes = /*@__PURE__*/dec("4444448826627288999999999992222222222222222222222222222222222222222222222229999999999999999999994444444444644222822222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222999999949999999229989999223333333333");
    const Brackets = /*@__PURE__*/Object.create(null), BracketStack = [];
    // There's a lot more in
    // https://www.unicode.org/Public/UCD/latest/ucd/BidiBrackets.txt,
    // which are left out to keep code size down.
    for (let p of ["()", "[]", "{}"]) {
        let l = /*@__PURE__*/p.charCodeAt(0), r = /*@__PURE__*/p.charCodeAt(1);
        Brackets[l] = r;
        Brackets[r] = -l;
    }
    function charType(ch) {
        return ch <= 0xf7 ? LowTypes[ch] :
            0x590 <= ch && ch <= 0x5f4 ? 2 /* T.R */ :
                0x600 <= ch && ch <= 0x6f9 ? ArabicTypes[ch - 0x600] :
                    0x6ee <= ch && ch <= 0x8ac ? 4 /* T.AL */ :
                        0x2000 <= ch && ch <= 0x200c ? 256 /* T.NI */ :
                            0xfb50 <= ch && ch <= 0xfdff ? 4 /* T.AL */ : 1 /* T.L */;
    }
    const BidiRE = /[\u0590-\u05f4\u0600-\u06ff\u0700-\u08ac\ufb50-\ufdff]/;
    /**
    Represents a contiguous range of text that has a single direction
    (as in left-to-right or right-to-left).
    */
    class BidiSpan {
        /**
        The direction of this span.
        */
        get dir() { return this.level % 2 ? RTL : LTR; }
        /**
        @internal
        */
        constructor(
        /**
        The start of the span (relative to the start of the line).
        */
        from,
        /**
        The end of the span.
        */
        to,
        /**
        The ["bidi
        level"](https://unicode.org/reports/tr9/#Basic_Display_Algorithm)
        of the span (in this context, 0 means
        left-to-right, 1 means right-to-left, 2 means left-to-right
        number inside right-to-left text).
        */
        level) {
            this.from = from;
            this.to = to;
            this.level = level;
        }
        /**
        @internal
        */
        side(end, dir) { return (this.dir == dir) == end ? this.to : this.from; }
        /**
        @internal
        */
        forward(forward, dir) { return forward == (this.dir == dir); }
        /**
        @internal
        */
        static find(order, index, level, assoc) {
            let maybe = -1;
            for (let i = 0; i < order.length; i++) {
                let span = order[i];
                if (span.from <= index && span.to >= index) {
                    if (span.level == level)
                        return i;
                    // When multiple spans match, if assoc != 0, take the one that
                    // covers that side, otherwise take the one with the minimum
                    // level.
                    if (maybe < 0 || (assoc != 0 ? (assoc < 0 ? span.from < index : span.to > index) : order[maybe].level > span.level))
                        maybe = i;
                }
            }
            if (maybe < 0)
                throw new RangeError("Index out of range");
            return maybe;
        }
    }
    function isolatesEq(a, b) {
        if (a.length != b.length)
            return false;
        for (let i = 0; i < a.length; i++) {
            let iA = a[i], iB = b[i];
            if (iA.from != iB.from || iA.to != iB.to || iA.direction != iB.direction || !isolatesEq(iA.inner, iB.inner))
                return false;
        }
        return true;
    }
    // Reused array of character types
    const types = [];
    // Fill in the character types (in `types`) from `from` to `to` and
    // apply W normalization rules.
    function computeCharTypes(line, rFrom, rTo, isolates, outerType) {
        for (let iI = 0; iI <= isolates.length; iI++) {
            let from = iI ? isolates[iI - 1].to : rFrom, to = iI < isolates.length ? isolates[iI].from : rTo;
            let prevType = iI ? 256 /* T.NI */ : outerType;
            // W1. Examine each non-spacing mark (NSM) in the level run, and
            // change the type of the NSM to the type of the previous
            // character. If the NSM is at the start of the level run, it will
            // get the type of sor.
            // W2. Search backwards from each instance of a European number
            // until the first strong type (R, L, AL, or sor) is found. If an
            // AL is found, change the type of the European number to Arabic
            // number.
            // W3. Change all ALs to R.
            // (Left after this: L, R, EN, AN, ET, CS, NI)
            for (let i = from, prev = prevType, prevStrong = prevType; i < to; i++) {
                let type = charType(line.charCodeAt(i));
                if (type == 512 /* T.NSM */)
                    type = prev;
                else if (type == 8 /* T.EN */ && prevStrong == 4 /* T.AL */)
                    type = 16 /* T.AN */;
                types[i] = type == 4 /* T.AL */ ? 2 /* T.R */ : type;
                if (type & 7 /* T.Strong */)
                    prevStrong = type;
                prev = type;
            }
            // W5. A sequence of European terminators adjacent to European
            // numbers changes to all European numbers.
            // W6. Otherwise, separators and terminators change to Other
            // Neutral.
            // W7. Search backwards from each instance of a European number
            // until the first strong type (R, L, or sor) is found. If an L is
            // found, then change the type of the European number to L.
            // (Left after this: L, R, EN+AN, NI)
            for (let i = from, prev = prevType, prevStrong = prevType; i < to; i++) {
                let type = types[i];
                if (type == 128 /* T.CS */) {
                    if (i < to - 1 && prev == types[i + 1] && (prev & 24 /* T.Num */))
                        type = types[i] = prev;
                    else
                        types[i] = 256 /* T.NI */;
                }
                else if (type == 64 /* T.ET */) {
                    let end = i + 1;
                    while (end < to && types[end] == 64 /* T.ET */)
                        end++;
                    let replace = (i && prev == 8 /* T.EN */) || (end < rTo && types[end] == 8 /* T.EN */) ? (prevStrong == 1 /* T.L */ ? 1 /* T.L */ : 8 /* T.EN */) : 256 /* T.NI */;
                    for (let j = i; j < end; j++)
                        types[j] = replace;
                    i = end - 1;
                }
                else if (type == 8 /* T.EN */ && prevStrong == 1 /* T.L */) {
                    types[i] = 1 /* T.L */;
                }
                prev = type;
                if (type & 7 /* T.Strong */)
                    prevStrong = type;
            }
        }
    }
    // Process brackets throughout a run sequence.
    function processBracketPairs(line, rFrom, rTo, isolates, outerType) {
        let oppositeType = outerType == 1 /* T.L */ ? 2 /* T.R */ : 1 /* T.L */;
        for (let iI = 0, sI = 0, context = 0; iI <= isolates.length; iI++) {
            let from = iI ? isolates[iI - 1].to : rFrom, to = iI < isolates.length ? isolates[iI].from : rTo;
            // N0. Process bracket pairs in an isolating run sequence
            // sequentially in the logical order of the text positions of the
            // opening paired brackets using the logic given below. Within this
            // scope, bidirectional types EN and AN are treated as R.
            for (let i = from, ch, br, type; i < to; i++) {
                // Keeps [startIndex, type, strongSeen] triples for each open
                // bracket on BracketStack.
                if (br = Brackets[ch = line.charCodeAt(i)]) {
                    if (br < 0) { // Closing bracket
                        for (let sJ = sI - 3; sJ >= 0; sJ -= 3) {
                            if (BracketStack[sJ + 1] == -br) {
                                let flags = BracketStack[sJ + 2];
                                let type = (flags & 2 /* Bracketed.EmbedInside */) ? outerType :
                                    !(flags & 4 /* Bracketed.OppositeInside */) ? 0 :
                                        (flags & 1 /* Bracketed.OppositeBefore */) ? oppositeType : outerType;
                                if (type)
                                    types[i] = types[BracketStack[sJ]] = type;
                                sI = sJ;
                                break;
                            }
                        }
                    }
                    else if (BracketStack.length == 189 /* Bracketed.MaxDepth */) {
                        break;
                    }
                    else {
                        BracketStack[sI++] = i;
                        BracketStack[sI++] = ch;
                        BracketStack[sI++] = context;
                    }
                }
                else if ((type = types[i]) == 2 /* T.R */ || type == 1 /* T.L */) {
                    let embed = type == outerType;
                    context = embed ? 0 : 1 /* Bracketed.OppositeBefore */;
                    for (let sJ = sI - 3; sJ >= 0; sJ -= 3) {
                        let cur = BracketStack[sJ + 2];
                        if (cur & 2 /* Bracketed.EmbedInside */)
                            break;
                        if (embed) {
                            BracketStack[sJ + 2] |= 2 /* Bracketed.EmbedInside */;
                        }
                        else {
                            if (cur & 4 /* Bracketed.OppositeInside */)
                                break;
                            BracketStack[sJ + 2] |= 4 /* Bracketed.OppositeInside */;
                        }
                    }
                }
            }
        }
    }
    function processNeutrals(rFrom, rTo, isolates, outerType) {
        for (let iI = 0, prev = outerType; iI <= isolates.length; iI++) {
            let from = iI ? isolates[iI - 1].to : rFrom, to = iI < isolates.length ? isolates[iI].from : rTo;
            // N1. A sequence of neutrals takes the direction of the
            // surrounding strong text if the text on both sides has the same
            // direction. European and Arabic numbers act as if they were R in
            // terms of their influence on neutrals. Start-of-level-run (sor)
            // and end-of-level-run (eor) are used at level run boundaries.
            // N2. Any remaining neutrals take the embedding direction.
            // (Left after this: L, R, EN+AN)
            for (let i = from; i < to;) {
                let type = types[i];
                if (type == 256 /* T.NI */) {
                    let end = i + 1;
                    for (;;) {
                        if (end == to) {
                            if (iI == isolates.length)
                                break;
                            end = isolates[iI++].to;
                            to = iI < isolates.length ? isolates[iI].from : rTo;
                        }
                        else if (types[end] == 256 /* T.NI */) {
                            end++;
                        }
                        else {
                            break;
                        }
                    }
                    let beforeL = prev == 1 /* T.L */;
                    let afterL = (end < rTo ? types[end] : outerType) == 1 /* T.L */;
                    let replace = beforeL == afterL ? (beforeL ? 1 /* T.L */ : 2 /* T.R */) : outerType;
                    for (let j = end, jI = iI, fromJ = jI ? isolates[jI - 1].to : rFrom; j > i;) {
                        if (j == fromJ) {
                            j = isolates[--jI].from;
                            fromJ = jI ? isolates[jI - 1].to : rFrom;
                        }
                        types[--j] = replace;
                    }
                    i = end;
                }
                else {
                    prev = type;
                    i++;
                }
            }
        }
    }
    // Find the contiguous ranges of character types in a given range, and
    // emit spans for them. Flip the order of the spans as appropriate
    // based on the level, and call through to compute the spans for
    // isolates at the proper point.
    function emitSpans(line, from, to, level, baseLevel, isolates, order) {
        let ourType = level % 2 ? 2 /* T.R */ : 1 /* T.L */;
        if ((level % 2) == (baseLevel % 2)) { // Same dir as base direction, don't flip
            for (let iCh = from, iI = 0; iCh < to;) {
                // Scan a section of characters in direction ourType, unless
                // there's another type of char right after iCh, in which case
                // we scan a section of other characters (which, if ourType ==
                // T.L, may contain both T.R and T.AN chars).
                let sameDir = true, isNum = false;
                if (iI == isolates.length || iCh < isolates[iI].from) {
                    let next = types[iCh];
                    if (next != ourType) {
                        sameDir = false;
                        isNum = next == 16 /* T.AN */;
                    }
                }
                // Holds an array of isolates to pass to a recursive call if we
                // must recurse (to distinguish T.AN inside an RTL section in
                // LTR text), null if we can emit directly
                let recurse = !sameDir && ourType == 1 /* T.L */ ? [] : null;
                let localLevel = sameDir ? level : level + 1;
                let iScan = iCh;
                run: for (;;) {
                    if (iI < isolates.length && iScan == isolates[iI].from) {
                        if (isNum)
                            break run;
                        let iso = isolates[iI];
                        // Scan ahead to verify that there is another char in this dir after the isolate(s)
                        if (!sameDir)
                            for (let upto = iso.to, jI = iI + 1;;) {
                                if (upto == to)
                                    break run;
                                if (jI < isolates.length && isolates[jI].from == upto)
                                    upto = isolates[jI++].to;
                                else if (types[upto] == ourType)
                                    break run;
                                else
                                    break;
                            }
                        iI++;
                        if (recurse) {
                            recurse.push(iso);
                        }
                        else {
                            if (iso.from > iCh)
                                order.push(new BidiSpan(iCh, iso.from, localLevel));
                            let dirSwap = (iso.direction == LTR) != !(localLevel % 2);
                            computeSectionOrder(line, dirSwap ? level + 1 : level, baseLevel, iso.inner, iso.from, iso.to, order);
                            iCh = iso.to;
                        }
                        iScan = iso.to;
                    }
                    else if (iScan == to || (sameDir ? types[iScan] != ourType : types[iScan] == ourType)) {
                        break;
                    }
                    else {
                        iScan++;
                    }
                }
                if (recurse)
                    emitSpans(line, iCh, iScan, level + 1, baseLevel, recurse, order);
                else if (iCh < iScan)
                    order.push(new BidiSpan(iCh, iScan, localLevel));
                iCh = iScan;
            }
        }
        else {
            // Iterate in reverse to flip the span order. Same code again, but
            // going from the back of the section to the front
            for (let iCh = to, iI = isolates.length; iCh > from;) {
                let sameDir = true, isNum = false;
                if (!iI || iCh > isolates[iI - 1].to) {
                    let next = types[iCh - 1];
                    if (next != ourType) {
                        sameDir = false;
                        isNum = next == 16 /* T.AN */;
                    }
                }
                let recurse = !sameDir && ourType == 1 /* T.L */ ? [] : null;
                let localLevel = sameDir ? level : level + 1;
                let iScan = iCh;
                run: for (;;) {
                    if (iI && iScan == isolates[iI - 1].to) {
                        if (isNum)
                            break run;
                        let iso = isolates[--iI];
                        // Scan ahead to verify that there is another char in this dir after the isolate(s)
                        if (!sameDir)
                            for (let upto = iso.from, jI = iI;;) {
                                if (upto == from)
                                    break run;
                                if (jI && isolates[jI - 1].to == upto)
                                    upto = isolates[--jI].from;
                                else if (types[upto - 1] == ourType)
                                    break run;
                                else
                                    break;
                            }
                        if (recurse) {
                            recurse.push(iso);
                        }
                        else {
                            if (iso.to < iCh)
                                order.push(new BidiSpan(iso.to, iCh, localLevel));
                            let dirSwap = (iso.direction == LTR) != !(localLevel % 2);
                            computeSectionOrder(line, dirSwap ? level + 1 : level, baseLevel, iso.inner, iso.from, iso.to, order);
                            iCh = iso.from;
                        }
                        iScan = iso.from;
                    }
                    else if (iScan == from || (sameDir ? types[iScan - 1] != ourType : types[iScan - 1] == ourType)) {
                        break;
                    }
                    else {
                        iScan--;
                    }
                }
                if (recurse)
                    emitSpans(line, iScan, iCh, level + 1, baseLevel, recurse, order);
                else if (iScan < iCh)
                    order.push(new BidiSpan(iScan, iCh, localLevel));
                iCh = iScan;
            }
        }
    }
    function computeSectionOrder(line, level, baseLevel, isolates, from, to, order) {
        let outerType = (level % 2 ? 2 /* T.R */ : 1 /* T.L */);
        computeCharTypes(line, from, to, isolates, outerType);
        processBracketPairs(line, from, to, isolates, outerType);
        processNeutrals(from, to, isolates, outerType);
        emitSpans(line, from, to, level, baseLevel, isolates, order);
    }
    function computeOrder(line, direction, isolates) {
        if (!line)
            return [new BidiSpan(0, 0, direction == RTL ? 1 : 0)];
        if (direction == LTR && !isolates.length && !BidiRE.test(line))
            return trivialOrder(line.length);
        if (isolates.length)
            while (line.length > types.length)
                types[types.length] = 256 /* T.NI */; // Make sure types array has no gaps
        let order = [], level = direction == LTR ? 0 : 1;
        computeSectionOrder(line, level, level, isolates, 0, line.length, order);
        return order;
    }
    function trivialOrder(length) {
        return [new BidiSpan(0, length, 0)];
    }
    let movedOver = "";
    // This implementation moves strictly visually, without concern for a
    // traversal visiting every logical position in the string. It will
    // still do so for simple input, but situations like multiple isolates
    // with the same level next to each other, or text going against the
    // main dir at the end of the line, will make some positions
    // unreachable with this motion. Each visible cursor position will
    // correspond to the lower-level bidi span that touches it.
    //
    // The alternative would be to solve an order globally for a given
    // line, making sure that it includes every position, but that would
    // require associating non-canonical (higher bidi span level)
    // positions with a given visual position, which is likely to confuse
    // people. (And would generally be a lot more complicated.)
    function moveVisually(line, order, dir, start, forward) {
        var _a;
        let startIndex = start.head - line.from;
        let spanI = BidiSpan.find(order, startIndex, (_a = start.bidiLevel) !== null && _a !== void 0 ? _a : -1, start.assoc);
        let span = order[spanI], spanEnd = span.side(forward, dir);
        // End of span
        if (startIndex == spanEnd) {
            let nextI = spanI += forward ? 1 : -1;
            if (nextI < 0 || nextI >= order.length)
                return null;
            span = order[spanI = nextI];
            startIndex = span.side(!forward, dir);
            spanEnd = span.side(forward, dir);
        }
        let nextIndex = findClusterBreak(line.text, startIndex, span.forward(forward, dir));
        if (nextIndex < span.from || nextIndex > span.to)
            nextIndex = spanEnd;
        movedOver = line.text.slice(Math.min(startIndex, nextIndex), Math.max(startIndex, nextIndex));
        let nextSpan = spanI == (forward ? order.length - 1 : 0) ? null : order[spanI + (forward ? 1 : -1)];
        if (nextSpan && nextIndex == spanEnd && nextSpan.level + (forward ? 0 : 1) < span.level)
            return EditorSelection.cursor(nextSpan.side(!forward, dir) + line.from, nextSpan.forward(forward, dir) ? 1 : -1, nextSpan.level);
        return EditorSelection.cursor(nextIndex + line.from, span.forward(forward, dir) ? -1 : 1, span.level);
    }
    function autoDirection(text, from, to) {
        for (let i = from; i < to; i++) {
            let type = charType(text.charCodeAt(i));
            if (type == 1 /* T.L */)
                return LTR;
            if (type == 2 /* T.R */ || type == 4 /* T.AL */)
                return RTL;
        }
        return LTR;
    }

    const clickAddsSelectionRange = /*@__PURE__*/Facet.define();
    const dragMovesSelection$1 = /*@__PURE__*/Facet.define();
    const mouseSelectionStyle = /*@__PURE__*/Facet.define();
    const exceptionSink = /*@__PURE__*/Facet.define();
    const updateListener = /*@__PURE__*/Facet.define();
    const inputHandler$1 = /*@__PURE__*/Facet.define();
    const focusChangeEffect = /*@__PURE__*/Facet.define();
    const clipboardInputFilter = /*@__PURE__*/Facet.define();
    const clipboardOutputFilter = /*@__PURE__*/Facet.define();
    const perLineTextDirection = /*@__PURE__*/Facet.define({
        combine: values => values.some(x => x)
    });
    const nativeSelectionHidden = /*@__PURE__*/Facet.define({
        combine: values => values.some(x => x)
    });
    const scrollHandler = /*@__PURE__*/Facet.define();
    class ScrollTarget {
        constructor(range, y = "nearest", x = "nearest", yMargin = 5, xMargin = 5,
        // This data structure is abused to also store precise scroll
        // snapshots, instead of a `scrollIntoView` request. When this
        // flag is `true`, `range` points at a position in the reference
        // line, `yMargin` holds the difference between the top of that
        // line and the top of the editor, and `xMargin` holds the
        // editor's `scrollLeft`.
        isSnapshot = false) {
            this.range = range;
            this.y = y;
            this.x = x;
            this.yMargin = yMargin;
            this.xMargin = xMargin;
            this.isSnapshot = isSnapshot;
        }
        map(changes) {
            return changes.empty ? this :
                new ScrollTarget(this.range.map(changes), this.y, this.x, this.yMargin, this.xMargin, this.isSnapshot);
        }
        clip(state) {
            return this.range.to <= state.doc.length ? this :
                new ScrollTarget(EditorSelection.cursor(state.doc.length), this.y, this.x, this.yMargin, this.xMargin, this.isSnapshot);
        }
    }
    const scrollIntoView$1 = /*@__PURE__*/StateEffect.define({ map: (t, ch) => t.map(ch) });
    const setEditContextFormatting = /*@__PURE__*/StateEffect.define();
    /**
    Log or report an unhandled exception in client code. Should
    probably only be used by extension code that allows client code to
    provide functions, and calls those functions in a context where an
    exception can't be propagated to calling code in a reasonable way
    (for example when in an event handler).

    Either calls a handler registered with
    [`EditorView.exceptionSink`](https://codemirror.net/6/docs/ref/#view.EditorView^exceptionSink),
    `window.onerror`, if defined, or `console.error` (in which case
    it'll pass `context`, when given, as first argument).
    */
    function logException(state, exception, context) {
        let handler = state.facet(exceptionSink);
        if (handler.length)
            handler[0](exception);
        else if (window.onerror)
            window.onerror(String(exception), context, undefined, undefined, exception);
        else if (context)
            console.error(context + ":", exception);
        else
            console.error(exception);
    }
    const editable$1 = /*@__PURE__*/Facet.define({ combine: values => values.length ? values[0] : true });
    let nextPluginID = 0;
    const viewPlugin = /*@__PURE__*/Facet.define();
    /**
    View plugins associate stateful values with a view. They can
    influence the way the content is drawn, and are notified of things
    that happen in the view.
    */
    class ViewPlugin {
        constructor(
        /**
        @internal
        */
        id,
        /**
        @internal
        */
        create,
        /**
        @internal
        */
        domEventHandlers,
        /**
        @internal
        */
        domEventObservers, buildExtensions) {
            this.id = id;
            this.create = create;
            this.domEventHandlers = domEventHandlers;
            this.domEventObservers = domEventObservers;
            this.extension = buildExtensions(this);
        }
        /**
        Define a plugin from a constructor function that creates the
        plugin's value, given an editor view.
        */
        static define(create, spec) {
            const { eventHandlers, eventObservers, provide, decorations: deco } = spec || {};
            return new ViewPlugin(nextPluginID++, create, eventHandlers, eventObservers, plugin => {
                let ext = [viewPlugin.of(plugin)];
                if (deco)
                    ext.push(decorations.of(view => {
                        let pluginInst = view.plugin(plugin);
                        return pluginInst ? deco(pluginInst) : Decoration.none;
                    }));
                if (provide)
                    ext.push(provide(plugin));
                return ext;
            });
        }
        /**
        Create a plugin for a class whose constructor takes a single
        editor view as argument.
        */
        static fromClass(cls, spec) {
            return ViewPlugin.define(view => new cls(view), spec);
        }
    }
    class PluginInstance {
        constructor(spec) {
            this.spec = spec;
            // When starting an update, all plugins have this field set to the
            // update object, indicating they need to be updated. When finished
            // updating, it is set to `false`. Retrieving a plugin that needs to
            // be updated with `view.plugin` forces an eager update.
            this.mustUpdate = null;
            // This is null when the plugin is initially created, but
            // initialized on the first update.
            this.value = null;
        }
        update(view) {
            if (!this.value) {
                if (this.spec) {
                    try {
                        this.value = this.spec.create(view);
                    }
                    catch (e) {
                        logException(view.state, e, "CodeMirror plugin crashed");
                        this.deactivate();
                    }
                }
            }
            else if (this.mustUpdate) {
                let update = this.mustUpdate;
                this.mustUpdate = null;
                if (this.value.update) {
                    try {
                        this.value.update(update);
                    }
                    catch (e) {
                        logException(update.state, e, "CodeMirror plugin crashed");
                        if (this.value.destroy)
                            try {
                                this.value.destroy();
                            }
                            catch (_) { }
                        this.deactivate();
                    }
                }
            }
            return this;
        }
        destroy(view) {
            var _a;
            if ((_a = this.value) === null || _a === void 0 ? void 0 : _a.destroy) {
                try {
                    this.value.destroy();
                }
                catch (e) {
                    logException(view.state, e, "CodeMirror plugin crashed");
                }
            }
        }
        deactivate() {
            this.spec = this.value = null;
        }
    }
    const editorAttributes = /*@__PURE__*/Facet.define();
    const contentAttributes = /*@__PURE__*/Facet.define();
    // Provide decorations
    const decorations = /*@__PURE__*/Facet.define();
    const outerDecorations = /*@__PURE__*/Facet.define();
    const atomicRanges = /*@__PURE__*/Facet.define();
    const bidiIsolatedRanges = /*@__PURE__*/Facet.define();
    function getIsolatedRanges(view, line) {
        let isolates = view.state.facet(bidiIsolatedRanges);
        if (!isolates.length)
            return isolates;
        let sets = isolates.map(i => i instanceof Function ? i(view) : i);
        let result = [];
        RangeSet.spans(sets, line.from, line.to, {
            point() { },
            span(fromDoc, toDoc, active, open) {
                let from = fromDoc - line.from, to = toDoc - line.from;
                let level = result;
                for (let i = active.length - 1; i >= 0; i--, open--) {
                    let direction = active[i].spec.bidiIsolate, update;
                    if (direction == null)
                        direction = autoDirection(line.text, from, to);
                    if (open > 0 && level.length &&
                        (update = level[level.length - 1]).to == from && update.direction == direction) {
                        update.to = to;
                        level = update.inner;
                    }
                    else {
                        let add = { from, to, direction, inner: [] };
                        level.push(add);
                        level = add.inner;
                    }
                }
            }
        });
        return result;
    }
    const scrollMargins = /*@__PURE__*/Facet.define();
    function getScrollMargins(view) {
        let left = 0, right = 0, top = 0, bottom = 0;
        for (let source of view.state.facet(scrollMargins)) {
            let m = source(view);
            if (m) {
                if (m.left != null)
                    left = Math.max(left, m.left);
                if (m.right != null)
                    right = Math.max(right, m.right);
                if (m.top != null)
                    top = Math.max(top, m.top);
                if (m.bottom != null)
                    bottom = Math.max(bottom, m.bottom);
            }
        }
        return { left, right, top, bottom };
    }
    const styleModule = /*@__PURE__*/Facet.define();
    class ChangedRange {
        constructor(fromA, toA, fromB, toB) {
            this.fromA = fromA;
            this.toA = toA;
            this.fromB = fromB;
            this.toB = toB;
        }
        join(other) {
            return new ChangedRange(Math.min(this.fromA, other.fromA), Math.max(this.toA, other.toA), Math.min(this.fromB, other.fromB), Math.max(this.toB, other.toB));
        }
        addToSet(set) {
            let i = set.length, me = this;
            for (; i > 0; i--) {
                let range = set[i - 1];
                if (range.fromA > me.toA)
                    continue;
                if (range.toA < me.fromA)
                    break;
                me = me.join(range);
                set.splice(i - 1, 1);
            }
            set.splice(i, 0, me);
            return set;
        }
        static extendWithRanges(diff, ranges) {
            if (ranges.length == 0)
                return diff;
            let result = [];
            for (let dI = 0, rI = 0, posA = 0, posB = 0;; dI++) {
                let next = dI == diff.length ? null : diff[dI], off = posA - posB;
                let end = next ? next.fromB : 1e9;
                while (rI < ranges.length && ranges[rI] < end) {
                    let from = ranges[rI], to = ranges[rI + 1];
                    let fromB = Math.max(posB, from), toB = Math.min(end, to);
                    if (fromB <= toB)
                        new ChangedRange(fromB + off, toB + off, fromB, toB).addToSet(result);
                    if (to > end)
                        break;
                    else
                        rI += 2;
                }
                if (!next)
                    return result;
                new ChangedRange(next.fromA, next.toA, next.fromB, next.toB).addToSet(result);
                posA = next.toA;
                posB = next.toB;
            }
        }
    }
    /**
    View [plugins](https://codemirror.net/6/docs/ref/#view.ViewPlugin) are given instances of this
    class, which describe what happened, whenever the view is updated.
    */
    class ViewUpdate {
        constructor(
        /**
        The editor view that the update is associated with.
        */
        view,
        /**
        The new editor state.
        */
        state,
        /**
        The transactions involved in the update. May be empty.
        */
        transactions) {
            this.view = view;
            this.state = state;
            this.transactions = transactions;
            /**
            @internal
            */
            this.flags = 0;
            this.startState = view.state;
            this.changes = ChangeSet.empty(this.startState.doc.length);
            for (let tr of transactions)
                this.changes = this.changes.compose(tr.changes);
            let changedRanges = [];
            this.changes.iterChangedRanges((fromA, toA, fromB, toB) => changedRanges.push(new ChangedRange(fromA, toA, fromB, toB)));
            this.changedRanges = changedRanges;
        }
        /**
        @internal
        */
        static create(view, state, transactions) {
            return new ViewUpdate(view, state, transactions);
        }
        /**
        Tells you whether the [viewport](https://codemirror.net/6/docs/ref/#view.EditorView.viewport) or
        [visible ranges](https://codemirror.net/6/docs/ref/#view.EditorView.visibleRanges) changed in this
        update.
        */
        get viewportChanged() {
            return (this.flags & 4 /* UpdateFlag.Viewport */) > 0;
        }
        /**
        Indicates whether the height of a block element in the editor
        changed in this update.
        */
        get heightChanged() {
            return (this.flags & 2 /* UpdateFlag.Height */) > 0;
        }
        /**
        Returns true when the document was modified or the size of the
        editor, or elements within the editor, changed.
        */
        get geometryChanged() {
            return this.docChanged || (this.flags & (8 /* UpdateFlag.Geometry */ | 2 /* UpdateFlag.Height */)) > 0;
        }
        /**
        True when this update indicates a focus change.
        */
        get focusChanged() {
            return (this.flags & 1 /* UpdateFlag.Focus */) > 0;
        }
        /**
        Whether the document changed in this update.
        */
        get docChanged() {
            return !this.changes.empty;
        }
        /**
        Whether the selection was explicitly set in this update.
        */
        get selectionSet() {
            return this.transactions.some(tr => tr.selection);
        }
        /**
        @internal
        */
        get empty() { return this.flags == 0 && this.transactions.length == 0; }
    }

    class DocView extends ContentView {
        get length() { return this.view.state.doc.length; }
        constructor(view) {
            super();
            this.view = view;
            this.decorations = [];
            this.dynamicDecorationMap = [false];
            this.domChanged = null;
            this.hasComposition = null;
            this.markedForComposition = new Set;
            this.editContextFormatting = Decoration.none;
            this.lastCompositionAfterCursor = false;
            // Track a minimum width for the editor. When measuring sizes in
            // measureVisibleLineHeights, this is updated to point at the width
            // of a given element and its extent in the document. When a change
            // happens in that range, these are reset. That way, once we've seen
            // a line/element of a given length, we keep the editor wide enough
            // to fit at least that element, until it is changed, at which point
            // we forget it again.
            this.minWidth = 0;
            this.minWidthFrom = 0;
            this.minWidthTo = 0;
            // Track whether the DOM selection was set in a lossy way, so that
            // we don't mess it up when reading it back it
            this.impreciseAnchor = null;
            this.impreciseHead = null;
            this.forceSelection = false;
            // Used by the resize observer to ignore resizes that we caused
            // ourselves
            this.lastUpdate = Date.now();
            this.setDOM(view.contentDOM);
            this.children = [new LineView];
            this.children[0].setParent(this);
            this.updateDeco();
            this.updateInner([new ChangedRange(0, 0, 0, view.state.doc.length)], 0, null);
        }
        // Update the document view to a given state.
        update(update) {
            var _a;
            let changedRanges = update.changedRanges;
            if (this.minWidth > 0 && changedRanges.length) {
                if (!changedRanges.every(({ fromA, toA }) => toA < this.minWidthFrom || fromA > this.minWidthTo)) {
                    this.minWidth = this.minWidthFrom = this.minWidthTo = 0;
                }
                else {
                    this.minWidthFrom = update.changes.mapPos(this.minWidthFrom, 1);
                    this.minWidthTo = update.changes.mapPos(this.minWidthTo, 1);
                }
            }
            this.updateEditContextFormatting(update);
            let readCompositionAt = -1;
            if (this.view.inputState.composing >= 0 && !this.view.observer.editContext) {
                if ((_a = this.domChanged) === null || _a === void 0 ? void 0 : _a.newSel)
                    readCompositionAt = this.domChanged.newSel.head;
                else if (!touchesComposition(update.changes, this.hasComposition) && !update.selectionSet)
                    readCompositionAt = update.state.selection.main.head;
            }
            let composition = readCompositionAt > -1 ? findCompositionRange(this.view, update.changes, readCompositionAt) : null;
            this.domChanged = null;
            if (this.hasComposition) {
                this.markedForComposition.clear();
                let { from, to } = this.hasComposition;
                changedRanges = new ChangedRange(from, to, update.changes.mapPos(from, -1), update.changes.mapPos(to, 1))
                    .addToSet(changedRanges.slice());
            }
            this.hasComposition = composition ? { from: composition.range.fromB, to: composition.range.toB } : null;
            // When the DOM nodes around the selection are moved to another
            // parent, Chrome sometimes reports a different selection through
            // getSelection than the one that it actually shows to the user.
            // This forces a selection update when lines are joined to work
            // around that. Issue #54
            if ((browser.ie || browser.chrome) && !composition && update &&
                update.state.doc.lines != update.startState.doc.lines)
                this.forceSelection = true;
            let prevDeco = this.decorations, deco = this.updateDeco();
            let decoDiff = findChangedDeco(prevDeco, deco, update.changes);
            changedRanges = ChangedRange.extendWithRanges(changedRanges, decoDiff);
            if (!(this.flags & 7 /* ViewFlag.Dirty */) && changedRanges.length == 0) {
                return false;
            }
            else {
                this.updateInner(changedRanges, update.startState.doc.length, composition);
                if (update.transactions.length)
                    this.lastUpdate = Date.now();
                return true;
            }
        }
        // Used by update and the constructor do perform the actual DOM
        // update
        updateInner(changes, oldLength, composition) {
            this.view.viewState.mustMeasureContent = true;
            this.updateChildren(changes, oldLength, composition);
            let { observer } = this.view;
            observer.ignore(() => {
                // Lock the height during redrawing, since Chrome sometimes
                // messes with the scroll position during DOM mutation (though
                // no relayout is triggered and I cannot imagine how it can
                // recompute the scroll position without a layout)
                this.dom.style.height = this.view.viewState.contentHeight / this.view.scaleY + "px";
                this.dom.style.flexBasis = this.minWidth ? this.minWidth + "px" : "";
                // Chrome will sometimes, when DOM mutations occur directly
                // around the selection, get confused and report a different
                // selection from the one it displays (issue #218). This tries
                // to detect that situation.
                let track = browser.chrome || browser.ios ? { node: observer.selectionRange.focusNode, written: false } : undefined;
                this.sync(this.view, track);
                this.flags &= ~7 /* ViewFlag.Dirty */;
                if (track && (track.written || observer.selectionRange.focusNode != track.node))
                    this.forceSelection = true;
                this.dom.style.height = "";
            });
            this.markedForComposition.forEach(cView => cView.flags &= ~8 /* ViewFlag.Composition */);
            let gaps = [];
            if (this.view.viewport.from || this.view.viewport.to < this.view.state.doc.length)
                for (let child of this.children)
                    if (child instanceof BlockWidgetView && child.widget instanceof BlockGapWidget)
                        gaps.push(child.dom);
            observer.updateGaps(gaps);
        }
        updateChildren(changes, oldLength, composition) {
            let ranges = composition ? composition.range.addToSet(changes.slice()) : changes;
            let cursor = this.childCursor(oldLength);
            for (let i = ranges.length - 1;; i--) {
                let next = i >= 0 ? ranges[i] : null;
                if (!next)
                    break;
                let { fromA, toA, fromB, toB } = next, content, breakAtStart, openStart, openEnd;
                if (composition && composition.range.fromB < toB && composition.range.toB > fromB) {
                    let before = ContentBuilder.build(this.view.state.doc, fromB, composition.range.fromB, this.decorations, this.dynamicDecorationMap);
                    let after = ContentBuilder.build(this.view.state.doc, composition.range.toB, toB, this.decorations, this.dynamicDecorationMap);
                    breakAtStart = before.breakAtStart;
                    openStart = before.openStart;
                    openEnd = after.openEnd;
                    let compLine = this.compositionView(composition);
                    if (after.breakAtStart) {
                        compLine.breakAfter = 1;
                    }
                    else if (after.content.length &&
                        compLine.merge(compLine.length, compLine.length, after.content[0], false, after.openStart, 0)) {
                        compLine.breakAfter = after.content[0].breakAfter;
                        after.content.shift();
                    }
                    if (before.content.length &&
                        compLine.merge(0, 0, before.content[before.content.length - 1], true, 0, before.openEnd)) {
                        before.content.pop();
                    }
                    content = before.content.concat(compLine).concat(after.content);
                }
                else {
                    ({ content, breakAtStart, openStart, openEnd } =
                        ContentBuilder.build(this.view.state.doc, fromB, toB, this.decorations, this.dynamicDecorationMap));
                }
                let { i: toI, off: toOff } = cursor.findPos(toA, 1);
                let { i: fromI, off: fromOff } = cursor.findPos(fromA, -1);
                replaceRange(this, fromI, fromOff, toI, toOff, content, breakAtStart, openStart, openEnd);
            }
            if (composition)
                this.fixCompositionDOM(composition);
        }
        updateEditContextFormatting(update) {
            this.editContextFormatting = this.editContextFormatting.map(update.changes);
            for (let tr of update.transactions)
                for (let effect of tr.effects)
                    if (effect.is(setEditContextFormatting)) {
                        this.editContextFormatting = effect.value;
                    }
        }
        compositionView(composition) {
            let cur = new TextView(composition.text.nodeValue);
            cur.flags |= 8 /* ViewFlag.Composition */;
            for (let { deco } of composition.marks)
                cur = new MarkView(deco, [cur], cur.length);
            let line = new LineView;
            line.append(cur, 0);
            return line;
        }
        fixCompositionDOM(composition) {
            let fix = (dom, cView) => {
                cView.flags |= 8 /* ViewFlag.Composition */ | (cView.children.some(c => c.flags & 7 /* ViewFlag.Dirty */) ? 1 /* ViewFlag.ChildDirty */ : 0);
                this.markedForComposition.add(cView);
                let prev = ContentView.get(dom);
                if (prev && prev != cView)
                    prev.dom = null;
                cView.setDOM(dom);
            };
            let pos = this.childPos(composition.range.fromB, 1);
            let cView = this.children[pos.i];
            fix(composition.line, cView);
            for (let i = composition.marks.length - 1; i >= -1; i--) {
                pos = cView.childPos(pos.off, 1);
                cView = cView.children[pos.i];
                fix(i >= 0 ? composition.marks[i].node : composition.text, cView);
            }
        }
        // Sync the DOM selection to this.state.selection
        updateSelection(mustRead = false, fromPointer = false) {
            if (mustRead || !this.view.observer.selectionRange.focusNode)
                this.view.observer.readSelectionRange();
            let activeElt = this.view.root.activeElement, focused = activeElt == this.dom;
            let selectionNotFocus = !focused &&
                hasSelection(this.dom, this.view.observer.selectionRange) && !(activeElt && this.dom.contains(activeElt));
            if (!(focused || fromPointer || selectionNotFocus))
                return;
            let force = this.forceSelection;
            this.forceSelection = false;
            let main = this.view.state.selection.main;
            let anchor = this.moveToLine(this.domAtPos(main.anchor));
            let head = main.empty ? anchor : this.moveToLine(this.domAtPos(main.head));
            // Always reset on Firefox when next to an uneditable node to
            // avoid invisible cursor bugs (#111)
            if (browser.gecko && main.empty && !this.hasComposition && betweenUneditable(anchor)) {
                let dummy = document.createTextNode("");
                this.view.observer.ignore(() => anchor.node.insertBefore(dummy, anchor.node.childNodes[anchor.offset] || null));
                anchor = head = new DOMPos(dummy, 0);
                force = true;
            }
            let domSel = this.view.observer.selectionRange;
            // If the selection is already here, or in an equivalent position, don't touch it
            if (force || !domSel.focusNode || (!isEquivalentPosition(anchor.node, anchor.offset, domSel.anchorNode, domSel.anchorOffset) ||
                !isEquivalentPosition(head.node, head.offset, domSel.focusNode, domSel.focusOffset)) && !this.suppressWidgetCursorChange(domSel, main)) {
                this.view.observer.ignore(() => {
                    // Chrome Android will hide the virtual keyboard when tapping
                    // inside an uneditable node, and not bring it back when we
                    // move the cursor to its proper position. This tries to
                    // restore the keyboard by cycling focus.
                    if (browser.android && browser.chrome && this.dom.contains(domSel.focusNode) &&
                        inUneditable(domSel.focusNode, this.dom)) {
                        this.dom.blur();
                        this.dom.focus({ preventScroll: true });
                    }
                    let rawSel = getSelection(this.view.root);
                    if (!rawSel) ;
                    else if (main.empty) {
                        // Work around https://bugzilla.mozilla.org/show_bug.cgi?id=1612076
                        if (browser.gecko) {
                            let nextTo = nextToUneditable(anchor.node, anchor.offset);
                            if (nextTo && nextTo != (1 /* NextTo.Before */ | 2 /* NextTo.After */)) {
                                let text = (nextTo == 1 /* NextTo.Before */ ? textNodeBefore : textNodeAfter)(anchor.node, anchor.offset);
                                if (text)
                                    anchor = new DOMPos(text.node, text.offset);
                            }
                        }
                        rawSel.collapse(anchor.node, anchor.offset);
                        if (main.bidiLevel != null && rawSel.caretBidiLevel !== undefined)
                            rawSel.caretBidiLevel = main.bidiLevel;
                    }
                    else if (rawSel.extend) {
                        // Selection.extend can be used to create an 'inverted' selection
                        // (one where the focus is before the anchor), but not all
                        // browsers support it yet.
                        rawSel.collapse(anchor.node, anchor.offset);
                        // Safari will ignore the call above when the editor is
                        // hidden, and then raise an error on the call to extend
                        // (#940).
                        try {
                            rawSel.extend(head.node, head.offset);
                        }
                        catch (_) { }
                    }
                    else {
                        // Primitive (IE) way
                        let range = document.createRange();
                        if (main.anchor > main.head)
                            [anchor, head] = [head, anchor];
                        range.setEnd(head.node, head.offset);
                        range.setStart(anchor.node, anchor.offset);
                        rawSel.removeAllRanges();
                        rawSel.addRange(range);
                    }
                    if (selectionNotFocus && this.view.root.activeElement == this.dom) {
                        this.dom.blur();
                        if (activeElt)
                            activeElt.focus();
                    }
                });
                this.view.observer.setSelectionRange(anchor, head);
            }
            this.impreciseAnchor = anchor.precise ? null : new DOMPos(domSel.anchorNode, domSel.anchorOffset);
            this.impreciseHead = head.precise ? null : new DOMPos(domSel.focusNode, domSel.focusOffset);
        }
        // If a zero-length widget is inserted next to the cursor during
        // composition, avoid moving it across it and disrupting the
        // composition.
        suppressWidgetCursorChange(sel, cursor) {
            return this.hasComposition && cursor.empty &&
                isEquivalentPosition(sel.focusNode, sel.focusOffset, sel.anchorNode, sel.anchorOffset) &&
                this.posFromDOM(sel.focusNode, sel.focusOffset) == cursor.head;
        }
        enforceCursorAssoc() {
            if (this.hasComposition)
                return;
            let { view } = this, cursor = view.state.selection.main;
            let sel = getSelection(view.root);
            let { anchorNode, anchorOffset } = view.observer.selectionRange;
            if (!sel || !cursor.empty || !cursor.assoc || !sel.modify)
                return;
            let line = LineView.find(this, cursor.head);
            if (!line)
                return;
            let lineStart = line.posAtStart;
            if (cursor.head == lineStart || cursor.head == lineStart + line.length)
                return;
            let before = this.coordsAt(cursor.head, -1), after = this.coordsAt(cursor.head, 1);
            if (!before || !after || before.bottom > after.top)
                return;
            let dom = this.domAtPos(cursor.head + cursor.assoc);
            sel.collapse(dom.node, dom.offset);
            sel.modify("move", cursor.assoc < 0 ? "forward" : "backward", "lineboundary");
            // This can go wrong in corner cases like single-character lines,
            // so check and reset if necessary.
            view.observer.readSelectionRange();
            let newRange = view.observer.selectionRange;
            if (view.docView.posFromDOM(newRange.anchorNode, newRange.anchorOffset) != cursor.from)
                sel.collapse(anchorNode, anchorOffset);
        }
        // If a position is in/near a block widget, move it to a nearby text
        // line, since we don't want the cursor inside a block widget.
        moveToLine(pos) {
            // Block widgets will return positions before/after them, which
            // are thus directly in the document DOM element.
            let dom = this.dom, newPos;
            if (pos.node != dom)
                return pos;
            for (let i = pos.offset; !newPos && i < dom.childNodes.length; i++) {
                let view = ContentView.get(dom.childNodes[i]);
                if (view instanceof LineView)
                    newPos = view.domAtPos(0);
            }
            for (let i = pos.offset - 1; !newPos && i >= 0; i--) {
                let view = ContentView.get(dom.childNodes[i]);
                if (view instanceof LineView)
                    newPos = view.domAtPos(view.length);
            }
            return newPos ? new DOMPos(newPos.node, newPos.offset, true) : pos;
        }
        nearest(dom) {
            for (let cur = dom; cur;) {
                let domView = ContentView.get(cur);
                if (domView && domView.rootView == this)
                    return domView;
                cur = cur.parentNode;
            }
            return null;
        }
        posFromDOM(node, offset) {
            let view = this.nearest(node);
            if (!view)
                throw new RangeError("Trying to find position for a DOM position outside of the document");
            return view.localPosFromDOM(node, offset) + view.posAtStart;
        }
        domAtPos(pos) {
            let { i, off } = this.childCursor().findPos(pos, -1);
            for (; i < this.children.length - 1;) {
                let child = this.children[i];
                if (off < child.length || child instanceof LineView)
                    break;
                i++;
                off = 0;
            }
            return this.children[i].domAtPos(off);
        }
        coordsAt(pos, side) {
            let best = null, bestPos = 0;
            for (let off = this.length, i = this.children.length - 1; i >= 0; i--) {
                let child = this.children[i], end = off - child.breakAfter, start = end - child.length;
                if (end < pos)
                    break;
                if (start <= pos && (start < pos || child.covers(-1)) && (end > pos || child.covers(1)) &&
                    (!best || child instanceof LineView && !(best instanceof LineView && side >= 0))) {
                    best = child;
                    bestPos = start;
                }
                else if (best && start == pos && end == pos && child instanceof BlockWidgetView && Math.abs(side) < 2) {
                    if (child.deco.startSide < 0)
                        break;
                    else if (i)
                        best = null;
                }
                off = start;
            }
            return best ? best.coordsAt(pos - bestPos, side) : null;
        }
        coordsForChar(pos) {
            let { i, off } = this.childPos(pos, 1), child = this.children[i];
            if (!(child instanceof LineView))
                return null;
            while (child.children.length) {
                let { i, off: childOff } = child.childPos(off, 1);
                for (;; i++) {
                    if (i == child.children.length)
                        return null;
                    if ((child = child.children[i]).length)
                        break;
                }
                off = childOff;
            }
            if (!(child instanceof TextView))
                return null;
            let end = findClusterBreak(child.text, off);
            if (end == off)
                return null;
            let rects = textRange(child.dom, off, end).getClientRects();
            for (let i = 0; i < rects.length; i++) {
                let rect = rects[i];
                if (i == rects.length - 1 || rect.top < rect.bottom && rect.left < rect.right)
                    return rect;
            }
            return null;
        }
        measureVisibleLineHeights(viewport) {
            let result = [], { from, to } = viewport;
            let contentWidth = this.view.contentDOM.clientWidth;
            let isWider = contentWidth > Math.max(this.view.scrollDOM.clientWidth, this.minWidth) + 1;
            let widest = -1, ltr = this.view.textDirection == Direction.LTR;
            for (let pos = 0, i = 0; i < this.children.length; i++) {
                let child = this.children[i], end = pos + child.length;
                if (end > to)
                    break;
                if (pos >= from) {
                    let childRect = child.dom.getBoundingClientRect();
                    result.push(childRect.height);
                    if (isWider) {
                        let last = child.dom.lastChild;
                        let rects = last ? clientRectsFor(last) : [];
                        if (rects.length) {
                            let rect = rects[rects.length - 1];
                            let width = ltr ? rect.right - childRect.left : childRect.right - rect.left;
                            if (width > widest) {
                                widest = width;
                                this.minWidth = contentWidth;
                                this.minWidthFrom = pos;
                                this.minWidthTo = end;
                            }
                        }
                    }
                }
                pos = end + child.breakAfter;
            }
            return result;
        }
        textDirectionAt(pos) {
            let { i } = this.childPos(pos, 1);
            return getComputedStyle(this.children[i].dom).direction == "rtl" ? Direction.RTL : Direction.LTR;
        }
        measureTextSize() {
            for (let child of this.children) {
                if (child instanceof LineView) {
                    let measure = child.measureTextSize();
                    if (measure)
                        return measure;
                }
            }
            // If no workable line exists, force a layout of a measurable element
            let dummy = document.createElement("div"), lineHeight, charWidth, textHeight;
            dummy.className = "cm-line";
            dummy.style.width = "99999px";
            dummy.style.position = "absolute";
            dummy.textContent = "abc def ghi jkl mno pqr stu";
            this.view.observer.ignore(() => {
                this.dom.appendChild(dummy);
                let rect = clientRectsFor(dummy.firstChild)[0];
                lineHeight = dummy.getBoundingClientRect().height;
                charWidth = rect ? rect.width / 27 : 7;
                textHeight = rect ? rect.height : lineHeight;
                dummy.remove();
            });
            return { lineHeight, charWidth, textHeight };
        }
        childCursor(pos = this.length) {
            // Move back to start of last element when possible, so that
            // `ChildCursor.findPos` doesn't have to deal with the edge case
            // of being after the last element.
            let i = this.children.length;
            if (i)
                pos -= this.children[--i].length;
            return new ChildCursor(this.children, pos, i);
        }
        computeBlockGapDeco() {
            let deco = [], vs = this.view.viewState;
            for (let pos = 0, i = 0;; i++) {
                let next = i == vs.viewports.length ? null : vs.viewports[i];
                let end = next ? next.from - 1 : this.length;
                if (end > pos) {
                    let height = (vs.lineBlockAt(end).bottom - vs.lineBlockAt(pos).top) / this.view.scaleY;
                    deco.push(Decoration.replace({
                        widget: new BlockGapWidget(height),
                        block: true,
                        inclusive: true,
                        isBlockGap: true,
                    }).range(pos, end));
                }
                if (!next)
                    break;
                pos = next.to + 1;
            }
            return Decoration.set(deco);
        }
        updateDeco() {
            let i = 1;
            let allDeco = this.view.state.facet(decorations).map(d => {
                let dynamic = this.dynamicDecorationMap[i++] = typeof d == "function";
                return dynamic ? d(this.view) : d;
            });
            let dynamicOuter = false, outerDeco = this.view.state.facet(outerDecorations).map((d, i) => {
                let dynamic = typeof d == "function";
                if (dynamic)
                    dynamicOuter = true;
                return dynamic ? d(this.view) : d;
            });
            if (outerDeco.length) {
                this.dynamicDecorationMap[i++] = dynamicOuter;
                allDeco.push(RangeSet.join(outerDeco));
            }
            this.decorations = [
                this.editContextFormatting,
                ...allDeco,
                this.computeBlockGapDeco(),
                this.view.viewState.lineGapDeco
            ];
            while (i < this.decorations.length)
                this.dynamicDecorationMap[i++] = false;
            return this.decorations;
        }
        scrollIntoView(target) {
            if (target.isSnapshot) {
                let ref = this.view.viewState.lineBlockAt(target.range.head);
                this.view.scrollDOM.scrollTop = ref.top - target.yMargin;
                this.view.scrollDOM.scrollLeft = target.xMargin;
                return;
            }
            for (let handler of this.view.state.facet(scrollHandler)) {
                try {
                    if (handler(this.view, target.range, target))
                        return true;
                }
                catch (e) {
                    logException(this.view.state, e, "scroll handler");
                }
            }
            let { range } = target;
            let rect = this.coordsAt(range.head, range.empty ? range.assoc : range.head > range.anchor ? -1 : 1), other;
            if (!rect)
                return;
            if (!range.empty && (other = this.coordsAt(range.anchor, range.anchor > range.head ? -1 : 1)))
                rect = { left: Math.min(rect.left, other.left), top: Math.min(rect.top, other.top),
                    right: Math.max(rect.right, other.right), bottom: Math.max(rect.bottom, other.bottom) };
            let margins = getScrollMargins(this.view);
            let targetRect = {
                left: rect.left - margins.left, top: rect.top - margins.top,
                right: rect.right + margins.right, bottom: rect.bottom + margins.bottom
            };
            let { offsetWidth, offsetHeight } = this.view.scrollDOM;
            scrollRectIntoView(this.view.scrollDOM, targetRect, range.head < range.anchor ? -1 : 1, target.x, target.y, Math.max(Math.min(target.xMargin, offsetWidth), -offsetWidth), Math.max(Math.min(target.yMargin, offsetHeight), -offsetHeight), this.view.textDirection == Direction.LTR);
        }
    }
    function betweenUneditable(pos) {
        return pos.node.nodeType == 1 && pos.node.firstChild &&
            (pos.offset == 0 || pos.node.childNodes[pos.offset - 1].contentEditable == "false") &&
            (pos.offset == pos.node.childNodes.length || pos.node.childNodes[pos.offset].contentEditable == "false");
    }
    function findCompositionNode(view, headPos) {
        let sel = view.observer.selectionRange;
        if (!sel.focusNode)
            return null;
        let textBefore = textNodeBefore(sel.focusNode, sel.focusOffset);
        let textAfter = textNodeAfter(sel.focusNode, sel.focusOffset);
        let textNode = textBefore || textAfter;
        if (textAfter && textBefore && textAfter.node != textBefore.node) {
            let descAfter = ContentView.get(textAfter.node);
            if (!descAfter || descAfter instanceof TextView && descAfter.text != textAfter.node.nodeValue) {
                textNode = textAfter;
            }
            else if (view.docView.lastCompositionAfterCursor) {
                let descBefore = ContentView.get(textBefore.node);
                if (!(!descBefore || descBefore instanceof TextView && descBefore.text != textBefore.node.nodeValue))
                    textNode = textAfter;
            }
        }
        view.docView.lastCompositionAfterCursor = textNode != textBefore;
        if (!textNode)
            return null;
        let from = headPos - textNode.offset;
        return { from, to: from + textNode.node.nodeValue.length, node: textNode.node };
    }
    function findCompositionRange(view, changes, headPos) {
        let found = findCompositionNode(view, headPos);
        if (!found)
            return null;
        let { node: textNode, from, to } = found, text = textNode.nodeValue;
        // Don't try to preserve multi-line compositions
        if (/[\n\r]/.test(text))
            return null;
        if (view.state.doc.sliceString(found.from, found.to) != text)
            return null;
        let inv = changes.invertedDesc;
        let range = new ChangedRange(inv.mapPos(from), inv.mapPos(to), from, to);
        let marks = [];
        for (let parent = textNode.parentNode;; parent = parent.parentNode) {
            let parentView = ContentView.get(parent);
            if (parentView instanceof MarkView)
                marks.push({ node: parent, deco: parentView.mark });
            else if (parentView instanceof LineView || parent.nodeName == "DIV" && parent.parentNode == view.contentDOM)
                return { range, text: textNode, marks, line: parent };
            else if (parent != view.contentDOM)
                marks.push({ node: parent, deco: new MarkDecoration({
                        inclusive: true,
                        attributes: getAttrs$1(parent),
                        tagName: parent.tagName.toLowerCase()
                    }) });
            else
                return null;
        }
    }
    function nextToUneditable(node, offset) {
        if (node.nodeType != 1)
            return 0;
        return (offset && node.childNodes[offset - 1].contentEditable == "false" ? 1 /* NextTo.Before */ : 0) |
            (offset < node.childNodes.length && node.childNodes[offset].contentEditable == "false" ? 2 /* NextTo.After */ : 0);
    }
    let DecorationComparator$1 = class DecorationComparator {
        constructor() {
            this.changes = [];
        }
        compareRange(from, to) { addRange(from, to, this.changes); }
        comparePoint(from, to) { addRange(from, to, this.changes); }
    };
    function findChangedDeco(a, b, diff) {
        let comp = new DecorationComparator$1;
        RangeSet.compare(a, b, diff, comp);
        return comp.changes;
    }
    function inUneditable(node, inside) {
        for (let cur = node; cur && cur != inside; cur = cur.assignedSlot || cur.parentNode) {
            if (cur.nodeType == 1 && cur.contentEditable == 'false') {
                return true;
            }
        }
        return false;
    }
    function touchesComposition(changes, composition) {
        let touched = false;
        if (composition)
            changes.iterChangedRanges((from, to) => {
                if (from < composition.to && to > composition.from)
                    touched = true;
            });
        return touched;
    }

    function groupAt(state, pos, bias = 1) {
        let categorize = state.charCategorizer(pos);
        let line = state.doc.lineAt(pos), linePos = pos - line.from;
        if (line.length == 0)
            return EditorSelection.cursor(pos);
        if (linePos == 0)
            bias = 1;
        else if (linePos == line.length)
            bias = -1;
        let from = linePos, to = linePos;
        if (bias < 0)
            from = findClusterBreak(line.text, linePos, false);
        else
            to = findClusterBreak(line.text, linePos);
        let cat = categorize(line.text.slice(from, to));
        while (from > 0) {
            let prev = findClusterBreak(line.text, from, false);
            if (categorize(line.text.slice(prev, from)) != cat)
                break;
            from = prev;
        }
        while (to < line.length) {
            let next = findClusterBreak(line.text, to);
            if (categorize(line.text.slice(to, next)) != cat)
                break;
            to = next;
        }
        return EditorSelection.range(from + line.from, to + line.from);
    }
    // Search the DOM for the {node, offset} position closest to the given
    // coordinates. Very inefficient and crude, but can usually be avoided
    // by calling caret(Position|Range)FromPoint instead.
    function getdx(x, rect) {
        return rect.left > x ? rect.left - x : Math.max(0, x - rect.right);
    }
    function getdy(y, rect) {
        return rect.top > y ? rect.top - y : Math.max(0, y - rect.bottom);
    }
    function yOverlap(a, b) {
        return a.top < b.bottom - 1 && a.bottom > b.top + 1;
    }
    function upTop(rect, top) {
        return top < rect.top ? { top, left: rect.left, right: rect.right, bottom: rect.bottom } : rect;
    }
    function upBot(rect, bottom) {
        return bottom > rect.bottom ? { top: rect.top, left: rect.left, right: rect.right, bottom } : rect;
    }
    function domPosAtCoords(parent, x, y) {
        let closest, closestRect, closestX, closestY, closestOverlap = false;
        let above, below, aboveRect, belowRect;
        for (let child = parent.firstChild; child; child = child.nextSibling) {
            let rects = clientRectsFor(child);
            for (let i = 0; i < rects.length; i++) {
                let rect = rects[i];
                if (closestRect && yOverlap(closestRect, rect))
                    rect = upTop(upBot(rect, closestRect.bottom), closestRect.top);
                let dx = getdx(x, rect), dy = getdy(y, rect);
                if (dx == 0 && dy == 0)
                    return child.nodeType == 3 ? domPosInText(child, x, y) : domPosAtCoords(child, x, y);
                if (!closest || closestY > dy || closestY == dy && closestX > dx) {
                    closest = child;
                    closestRect = rect;
                    closestX = dx;
                    closestY = dy;
                    let side = dy ? (y < rect.top ? -1 : 1) : dx ? (x < rect.left ? -1 : 1) : 0;
                    closestOverlap = !side || (side > 0 ? i < rects.length - 1 : i > 0);
                }
                if (dx == 0) {
                    if (y > rect.bottom && (!aboveRect || aboveRect.bottom < rect.bottom)) {
                        above = child;
                        aboveRect = rect;
                    }
                    else if (y < rect.top && (!belowRect || belowRect.top > rect.top)) {
                        below = child;
                        belowRect = rect;
                    }
                }
                else if (aboveRect && yOverlap(aboveRect, rect)) {
                    aboveRect = upBot(aboveRect, rect.bottom);
                }
                else if (belowRect && yOverlap(belowRect, rect)) {
                    belowRect = upTop(belowRect, rect.top);
                }
            }
        }
        if (aboveRect && aboveRect.bottom >= y) {
            closest = above;
            closestRect = aboveRect;
        }
        else if (belowRect && belowRect.top <= y) {
            closest = below;
            closestRect = belowRect;
        }
        if (!closest)
            return { node: parent, offset: 0 };
        let clipX = Math.max(closestRect.left, Math.min(closestRect.right, x));
        if (closest.nodeType == 3)
            return domPosInText(closest, clipX, y);
        if (closestOverlap && closest.contentEditable != "false")
            return domPosAtCoords(closest, clipX, y);
        let offset = Array.prototype.indexOf.call(parent.childNodes, closest) +
            (x >= (closestRect.left + closestRect.right) / 2 ? 1 : 0);
        return { node: parent, offset };
    }
    function domPosInText(node, x, y) {
        let len = node.nodeValue.length;
        let closestOffset = -1, closestDY = 1e9, generalSide = 0;
        for (let i = 0; i < len; i++) {
            let rects = textRange(node, i, i + 1).getClientRects();
            for (let j = 0; j < rects.length; j++) {
                let rect = rects[j];
                if (rect.top == rect.bottom)
                    continue;
                if (!generalSide)
                    generalSide = x - rect.left;
                let dy = (rect.top > y ? rect.top - y : y - rect.bottom) - 1;
                if (rect.left - 1 <= x && rect.right + 1 >= x && dy < closestDY) {
                    let right = x >= (rect.left + rect.right) / 2, after = right;
                    if (browser.chrome || browser.gecko) {
                        // Check for RTL on browsers that support getting client
                        // rects for empty ranges.
                        let rectBefore = textRange(node, i).getBoundingClientRect();
                        if (rectBefore.left == rect.right)
                            after = !right;
                    }
                    if (dy <= 0)
                        return { node, offset: i + (after ? 1 : 0) };
                    closestOffset = i + (after ? 1 : 0);
                    closestDY = dy;
                }
            }
        }
        return { node, offset: closestOffset > -1 ? closestOffset : generalSide > 0 ? node.nodeValue.length : 0 };
    }
    function posAtCoords(view, coords, precise, bias = -1) {
        var _a, _b;
        let content = view.contentDOM.getBoundingClientRect(), docTop = content.top + view.viewState.paddingTop;
        let block, { docHeight } = view.viewState;
        let { x, y } = coords, yOffset = y - docTop;
        if (yOffset < 0)
            return 0;
        if (yOffset > docHeight)
            return view.state.doc.length;
        // Scan for a text block near the queried y position
        for (let halfLine = view.viewState.heightOracle.textHeight / 2, bounced = false;;) {
            block = view.elementAtHeight(yOffset);
            if (block.type == BlockType.Text)
                break;
            for (;;) {
                // Move the y position out of this block
                yOffset = bias > 0 ? block.bottom + halfLine : block.top - halfLine;
                if (yOffset >= 0 && yOffset <= docHeight)
                    break;
                // If the document consists entirely of replaced widgets, we
                // won't find a text block, so return 0
                if (bounced)
                    return precise ? null : 0;
                bounced = true;
                bias = -bias;
            }
        }
        y = docTop + yOffset;
        let lineStart = block.from;
        // If this is outside of the rendered viewport, we can't determine a position
        if (lineStart < view.viewport.from)
            return view.viewport.from == 0 ? 0 : precise ? null : posAtCoordsImprecise(view, content, block, x, y);
        if (lineStart > view.viewport.to)
            return view.viewport.to == view.state.doc.length ? view.state.doc.length :
                precise ? null : posAtCoordsImprecise(view, content, block, x, y);
        // Prefer ShadowRootOrDocument.elementFromPoint if present, fall back to document if not
        let doc = view.dom.ownerDocument;
        let root = view.root.elementFromPoint ? view.root : doc;
        let element = root.elementFromPoint(x, y);
        if (element && !view.contentDOM.contains(element))
            element = null;
        // If the element is unexpected, clip x at the sides of the content area and try again
        if (!element) {
            x = Math.max(content.left + 1, Math.min(content.right - 1, x));
            element = root.elementFromPoint(x, y);
            if (element && !view.contentDOM.contains(element))
                element = null;
        }
        // There's visible editor content under the point, so we can try
        // using caret(Position|Range)FromPoint as a shortcut
        let node, offset = -1;
        if (element && ((_a = view.docView.nearest(element)) === null || _a === void 0 ? void 0 : _a.isEditable) != false) {
            if (doc.caretPositionFromPoint) {
                let pos = doc.caretPositionFromPoint(x, y);
                if (pos)
                    ({ offsetNode: node, offset } = pos);
            }
            else if (doc.caretRangeFromPoint) {
                let range = doc.caretRangeFromPoint(x, y);
                if (range) {
                    ({ startContainer: node, startOffset: offset } = range);
                    if (!view.contentDOM.contains(node) ||
                        browser.safari && isSuspiciousSafariCaretResult(node, offset, x) ||
                        browser.chrome && isSuspiciousChromeCaretResult(node, offset, x))
                        node = undefined;
                }
            }
            // Chrome will return offsets into <input> elements without child
            // nodes, which will lead to a null deref below, so clip the
            // offset to the node size.
            if (node)
                offset = Math.min(maxOffset(node), offset);
        }
        // No luck, do our own (potentially expensive) search
        if (!node || !view.docView.dom.contains(node)) {
            let line = LineView.find(view.docView, lineStart);
            if (!line)
                return yOffset > block.top + block.height / 2 ? block.to : block.from;
            ({ node, offset } = domPosAtCoords(line.dom, x, y));
        }
        let nearest = view.docView.nearest(node);
        if (!nearest)
            return null;
        if (nearest.isWidget && ((_b = nearest.dom) === null || _b === void 0 ? void 0 : _b.nodeType) == 1) {
            let rect = nearest.dom.getBoundingClientRect();
            return coords.y < rect.top || coords.y <= rect.bottom && coords.x <= (rect.left + rect.right) / 2
                ? nearest.posAtStart : nearest.posAtEnd;
        }
        else {
            return nearest.localPosFromDOM(node, offset) + nearest.posAtStart;
        }
    }
    function posAtCoordsImprecise(view, contentRect, block, x, y) {
        let into = Math.round((x - contentRect.left) * view.defaultCharacterWidth);
        if (view.lineWrapping && block.height > view.defaultLineHeight * 1.5) {
            let textHeight = view.viewState.heightOracle.textHeight;
            let line = Math.floor((y - block.top - (view.defaultLineHeight - textHeight) * 0.5) / textHeight);
            into += line * view.viewState.heightOracle.lineLength;
        }
        let content = view.state.sliceDoc(block.from, block.to);
        return block.from + findColumn(content, into, view.state.tabSize);
    }
    // In case of a high line height, Safari's caretRangeFromPoint treats
    // the space between lines as belonging to the last character of the
    // line before. This is used to detect such a result so that it can be
    // ignored (issue #401).
    function isSuspiciousSafariCaretResult(node, offset, x) {
        let len;
        if (node.nodeType != 3 || offset != (len = node.nodeValue.length))
            return false;
        for (let next = node.nextSibling; next; next = next.nextSibling)
            if (next.nodeType != 1 || next.nodeName != "BR")
                return false;
        return textRange(node, len - 1, len).getBoundingClientRect().left > x;
    }
    // Chrome will move positions between lines to the start of the next line
    function isSuspiciousChromeCaretResult(node, offset, x) {
        if (offset != 0)
            return false;
        for (let cur = node;;) {
            let parent = cur.parentNode;
            if (!parent || parent.nodeType != 1 || parent.firstChild != cur)
                return false;
            if (parent.classList.contains("cm-line"))
                break;
            cur = parent;
        }
        let rect = node.nodeType == 1 ? node.getBoundingClientRect()
            : textRange(node, 0, Math.max(node.nodeValue.length, 1)).getBoundingClientRect();
        return x - rect.left > 5;
    }
    function blockAt(view, pos) {
        let line = view.lineBlockAt(pos);
        if (Array.isArray(line.type))
            for (let l of line.type) {
                if (l.to > pos || l.to == pos && (l.to == line.to || l.type == BlockType.Text))
                    return l;
            }
        return line;
    }
    function moveToLineBoundary(view, start, forward, includeWrap) {
        let line = blockAt(view, start.head);
        let coords = !includeWrap || line.type != BlockType.Text || !(view.lineWrapping || line.widgetLineBreaks) ? null
            : view.coordsAtPos(start.assoc < 0 && start.head > line.from ? start.head - 1 : start.head);
        if (coords) {
            let editorRect = view.dom.getBoundingClientRect();
            let direction = view.textDirectionAt(line.from);
            let pos = view.posAtCoords({ x: forward == (direction == Direction.LTR) ? editorRect.right - 1 : editorRect.left + 1,
                y: (coords.top + coords.bottom) / 2 });
            if (pos != null)
                return EditorSelection.cursor(pos, forward ? -1 : 1);
        }
        return EditorSelection.cursor(forward ? line.to : line.from, forward ? -1 : 1);
    }
    function moveByChar(view, start, forward, by) {
        let line = view.state.doc.lineAt(start.head), spans = view.bidiSpans(line);
        let direction = view.textDirectionAt(line.from);
        for (let cur = start, check = null;;) {
            let next = moveVisually(line, spans, direction, cur, forward), char = movedOver;
            if (!next) {
                if (line.number == (forward ? view.state.doc.lines : 1))
                    return cur;
                char = "\n";
                line = view.state.doc.line(line.number + (forward ? 1 : -1));
                spans = view.bidiSpans(line);
                next = view.visualLineSide(line, !forward);
            }
            if (!check) {
                if (!by)
                    return next;
                check = by(char);
            }
            else if (!check(char)) {
                return cur;
            }
            cur = next;
        }
    }
    function byGroup(view, pos, start) {
        let categorize = view.state.charCategorizer(pos);
        let cat = categorize(start);
        return (next) => {
            let nextCat = categorize(next);
            if (cat == CharCategory.Space)
                cat = nextCat;
            return cat == nextCat;
        };
    }
    function moveVertically(view, start, forward, distance) {
        let startPos = start.head, dir = forward ? 1 : -1;
        if (startPos == (forward ? view.state.doc.length : 0))
            return EditorSelection.cursor(startPos, start.assoc);
        let goal = start.goalColumn, startY;
        let rect = view.contentDOM.getBoundingClientRect();
        let startCoords = view.coordsAtPos(startPos, start.assoc || -1), docTop = view.documentTop;
        if (startCoords) {
            if (goal == null)
                goal = startCoords.left - rect.left;
            startY = dir < 0 ? startCoords.top : startCoords.bottom;
        }
        else {
            let line = view.viewState.lineBlockAt(startPos);
            if (goal == null)
                goal = Math.min(rect.right - rect.left, view.defaultCharacterWidth * (startPos - line.from));
            startY = (dir < 0 ? line.top : line.bottom) + docTop;
        }
        let resolvedGoal = rect.left + goal;
        let dist = distance !== null && distance !== void 0 ? distance : (view.viewState.heightOracle.textHeight >> 1);
        for (let extra = 0;; extra += 10) {
            let curY = startY + (dist + extra) * dir;
            let pos = posAtCoords(view, { x: resolvedGoal, y: curY }, false, dir);
            if (curY < rect.top || curY > rect.bottom || (dir < 0 ? pos < startPos : pos > startPos)) {
                let charRect = view.docView.coordsForChar(pos);
                let assoc = !charRect || curY < charRect.top ? -1 : 1;
                return EditorSelection.cursor(pos, assoc, undefined, goal);
            }
        }
    }
    function skipAtomicRanges(atoms, pos, bias) {
        for (;;) {
            let moved = 0;
            for (let set of atoms) {
                set.between(pos - 1, pos + 1, (from, to, value) => {
                    if (pos > from && pos < to) {
                        let side = moved || bias || (pos - from < to - pos ? -1 : 1);
                        pos = side < 0 ? from : to;
                        moved = side;
                    }
                });
            }
            if (!moved)
                return pos;
        }
    }
    function skipAtoms(view, oldPos, pos) {
        let newPos = skipAtomicRanges(view.state.facet(atomicRanges).map(f => f(view)), pos.from, oldPos.head > pos.from ? -1 : 1);
        return newPos == pos.from ? pos : EditorSelection.cursor(newPos, newPos < pos.from ? 1 : -1);
    }

    const LineBreakPlaceholder = "\uffff";
    class DOMReader {
        constructor(points, state) {
            this.points = points;
            this.text = "";
            this.lineSeparator = state.facet(EditorState.lineSeparator);
        }
        append(text) {
            this.text += text;
        }
        lineBreak() {
            this.text += LineBreakPlaceholder;
        }
        readRange(start, end) {
            if (!start)
                return this;
            let parent = start.parentNode;
            for (let cur = start;;) {
                this.findPointBefore(parent, cur);
                let oldLen = this.text.length;
                this.readNode(cur);
                let next = cur.nextSibling;
                if (next == end)
                    break;
                let view = ContentView.get(cur), nextView = ContentView.get(next);
                if (view && nextView ? view.breakAfter :
                    (view ? view.breakAfter : isBlockElement(cur)) ||
                        (isBlockElement(next) && (cur.nodeName != "BR" || cur.cmIgnore) && this.text.length > oldLen))
                    this.lineBreak();
                cur = next;
            }
            this.findPointBefore(parent, end);
            return this;
        }
        readTextNode(node) {
            let text = node.nodeValue;
            for (let point of this.points)
                if (point.node == node)
                    point.pos = this.text.length + Math.min(point.offset, text.length);
            for (let off = 0, re = this.lineSeparator ? null : /\r\n?|\n/g;;) {
                let nextBreak = -1, breakSize = 1, m;
                if (this.lineSeparator) {
                    nextBreak = text.indexOf(this.lineSeparator, off);
                    breakSize = this.lineSeparator.length;
                }
                else if (m = re.exec(text)) {
                    nextBreak = m.index;
                    breakSize = m[0].length;
                }
                this.append(text.slice(off, nextBreak < 0 ? text.length : nextBreak));
                if (nextBreak < 0)
                    break;
                this.lineBreak();
                if (breakSize > 1)
                    for (let point of this.points)
                        if (point.node == node && point.pos > this.text.length)
                            point.pos -= breakSize - 1;
                off = nextBreak + breakSize;
            }
        }
        readNode(node) {
            if (node.cmIgnore)
                return;
            let view = ContentView.get(node);
            let fromView = view && view.overrideDOMText;
            if (fromView != null) {
                this.findPointInside(node, fromView.length);
                for (let i = fromView.iter(); !i.next().done;) {
                    if (i.lineBreak)
                        this.lineBreak();
                    else
                        this.append(i.value);
                }
            }
            else if (node.nodeType == 3) {
                this.readTextNode(node);
            }
            else if (node.nodeName == "BR") {
                if (node.nextSibling)
                    this.lineBreak();
            }
            else if (node.nodeType == 1) {
                this.readRange(node.firstChild, null);
            }
        }
        findPointBefore(node, next) {
            for (let point of this.points)
                if (point.node == node && node.childNodes[point.offset] == next)
                    point.pos = this.text.length;
        }
        findPointInside(node, length) {
            for (let point of this.points)
                if (node.nodeType == 3 ? point.node == node : node.contains(point.node))
                    point.pos = this.text.length + (isAtEnd(node, point.node, point.offset) ? length : 0);
        }
    }
    function isAtEnd(parent, node, offset) {
        for (;;) {
            if (!node || offset < maxOffset(node))
                return false;
            if (node == parent)
                return true;
            offset = domIndex(node) + 1;
            node = node.parentNode;
        }
    }
    class DOMPoint {
        constructor(node, offset) {
            this.node = node;
            this.offset = offset;
            this.pos = -1;
        }
    }

    class DOMChange {
        constructor(view, start, end, typeOver) {
            this.typeOver = typeOver;
            this.bounds = null;
            this.text = "";
            this.domChanged = start > -1;
            let { impreciseHead: iHead, impreciseAnchor: iAnchor } = view.docView;
            if (view.state.readOnly && start > -1) {
                // Ignore changes when the editor is read-only
                this.newSel = null;
            }
            else if (start > -1 && (this.bounds = view.docView.domBoundsAround(start, end, 0))) {
                let selPoints = iHead || iAnchor ? [] : selectionPoints(view);
                let reader = new DOMReader(selPoints, view.state);
                reader.readRange(this.bounds.startDOM, this.bounds.endDOM);
                this.text = reader.text;
                this.newSel = selectionFromPoints(selPoints, this.bounds.from);
            }
            else {
                let domSel = view.observer.selectionRange;
                let head = iHead && iHead.node == domSel.focusNode && iHead.offset == domSel.focusOffset ||
                    !contains(view.contentDOM, domSel.focusNode)
                    ? view.state.selection.main.head
                    : view.docView.posFromDOM(domSel.focusNode, domSel.focusOffset);
                let anchor = iAnchor && iAnchor.node == domSel.anchorNode && iAnchor.offset == domSel.anchorOffset ||
                    !contains(view.contentDOM, domSel.anchorNode)
                    ? view.state.selection.main.anchor
                    : view.docView.posFromDOM(domSel.anchorNode, domSel.anchorOffset);
                // iOS will refuse to select the block gaps when doing
                // select-all.
                // Chrome will put the selection *inside* them, confusing
                // posFromDOM
                let vp = view.viewport;
                if ((browser.ios || browser.chrome) && view.state.selection.main.empty && head != anchor &&
                    (vp.from > 0 || vp.to < view.state.doc.length)) {
                    let from = Math.min(head, anchor), to = Math.max(head, anchor);
                    let offFrom = vp.from - from, offTo = vp.to - to;
                    if ((offFrom == 0 || offFrom == 1 || from == 0) && (offTo == 0 || offTo == -1 || to == view.state.doc.length)) {
                        head = 0;
                        anchor = view.state.doc.length;
                    }
                }
                this.newSel = EditorSelection.single(anchor, head);
            }
        }
    }
    function applyDOMChange(view, domChange) {
        let change;
        let { newSel } = domChange, sel = view.state.selection.main;
        let lastKey = view.inputState.lastKeyTime > Date.now() - 100 ? view.inputState.lastKeyCode : -1;
        if (domChange.bounds) {
            let { from, to } = domChange.bounds;
            let preferredPos = sel.from, preferredSide = null;
            // Prefer anchoring to end when Backspace is pressed (or, on
            // Android, when something was deleted)
            if (lastKey === 8 || browser.android && domChange.text.length < to - from) {
                preferredPos = sel.to;
                preferredSide = "end";
            }
            let diff = findDiff(view.state.doc.sliceString(from, to, LineBreakPlaceholder), domChange.text, preferredPos - from, preferredSide);
            if (diff) {
                // Chrome inserts two newlines when pressing shift-enter at the
                // end of a line. DomChange drops one of those.
                if (browser.chrome && lastKey == 13 &&
                    diff.toB == diff.from + 2 && domChange.text.slice(diff.from, diff.toB) == LineBreakPlaceholder + LineBreakPlaceholder)
                    diff.toB--;
                change = { from: from + diff.from, to: from + diff.toA,
                    insert: Text.of(domChange.text.slice(diff.from, diff.toB).split(LineBreakPlaceholder)) };
            }
        }
        else if (newSel && (!view.hasFocus && view.state.facet(editable$1) || newSel.main.eq(sel))) {
            newSel = null;
        }
        if (!change && !newSel)
            return false;
        if (!change && domChange.typeOver && !sel.empty && newSel && newSel.main.empty) {
            // Heuristic to notice typing over a selected character
            change = { from: sel.from, to: sel.to, insert: view.state.doc.slice(sel.from, sel.to) };
        }
        else if (change && change.from >= sel.from && change.to <= sel.to &&
            (change.from != sel.from || change.to != sel.to) &&
            (sel.to - sel.from) - (change.to - change.from) <= 4) {
            // If the change is inside the selection and covers most of it,
            // assume it is a selection replace (with identical characters at
            // the start/end not included in the diff)
            change = {
                from: sel.from, to: sel.to,
                insert: view.state.doc.slice(sel.from, change.from).append(change.insert).append(view.state.doc.slice(change.to, sel.to))
            };
        }
        else if ((browser.mac || browser.android) && change && change.from == change.to && change.from == sel.head - 1 &&
            /^\. ?$/.test(change.insert.toString()) && view.contentDOM.getAttribute("autocorrect") == "off") {
            // Detect insert-period-on-double-space Mac and Android behavior,
            // and transform it into a regular space insert.
            if (newSel && change.insert.length == 2)
                newSel = EditorSelection.single(newSel.main.anchor - 1, newSel.main.head - 1);
            change = { from: sel.from, to: sel.to, insert: Text.of([" "]) };
        }
        else if (browser.chrome && change && change.from == change.to && change.from == sel.head &&
            change.insert.toString() == "\n " && view.lineWrapping) {
            // In Chrome, if you insert a space at the start of a wrapped
            // line, it will actually insert a newline and a space, causing a
            // bogus new line to be created in CodeMirror (#968)
            if (newSel)
                newSel = EditorSelection.single(newSel.main.anchor - 1, newSel.main.head - 1);
            change = { from: sel.from, to: sel.to, insert: Text.of([" "]) };
        }
        if (change) {
            return applyDOMChangeInner(view, change, newSel, lastKey);
        }
        else if (newSel && !newSel.main.eq(sel)) {
            let scrollIntoView = false, userEvent = "select";
            if (view.inputState.lastSelectionTime > Date.now() - 50) {
                if (view.inputState.lastSelectionOrigin == "select")
                    scrollIntoView = true;
                userEvent = view.inputState.lastSelectionOrigin;
            }
            view.dispatch({ selection: newSel, scrollIntoView, userEvent });
            return true;
        }
        else {
            return false;
        }
    }
    function applyDOMChangeInner(view, change, newSel, lastKey = -1) {
        if (browser.ios && view.inputState.flushIOSKey(change))
            return true;
        let sel = view.state.selection.main;
        // Android browsers don't fire reasonable key events for enter,
        // backspace, or delete. So this detects changes that look like
        // they're caused by those keys, and reinterprets them as key
        // events. (Some of these keys are also handled by beforeinput
        // events and the pendingAndroidKey mechanism, but that's not
        // reliable in all situations.)
        if (browser.android &&
            ((change.to == sel.to &&
                // GBoard will sometimes remove a space it just inserted
                // after a completion when you press enter
                (change.from == sel.from || change.from == sel.from - 1 && view.state.sliceDoc(change.from, sel.from) == " ") &&
                change.insert.length == 1 && change.insert.lines == 2 &&
                dispatchKey(view.contentDOM, "Enter", 13)) ||
                ((change.from == sel.from - 1 && change.to == sel.to && change.insert.length == 0 ||
                    lastKey == 8 && change.insert.length < change.to - change.from && change.to > sel.head) &&
                    dispatchKey(view.contentDOM, "Backspace", 8)) ||
                (change.from == sel.from && change.to == sel.to + 1 && change.insert.length == 0 &&
                    dispatchKey(view.contentDOM, "Delete", 46))))
            return true;
        let text = change.insert.toString();
        if (view.inputState.composing >= 0)
            view.inputState.composing++;
        let defaultTr;
        let defaultInsert = () => defaultTr || (defaultTr = applyDefaultInsert(view, change, newSel));
        if (!view.state.facet(inputHandler$1).some(h => h(view, change.from, change.to, text, defaultInsert)))
            view.dispatch(defaultInsert());
        return true;
    }
    function applyDefaultInsert(view, change, newSel) {
        let tr, startState = view.state, sel = startState.selection.main;
        if (change.from >= sel.from && change.to <= sel.to && change.to - change.from >= (sel.to - sel.from) / 3 &&
            (!newSel || newSel.main.empty && newSel.main.from == change.from + change.insert.length) &&
            view.inputState.composing < 0) {
            let before = sel.from < change.from ? startState.sliceDoc(sel.from, change.from) : "";
            let after = sel.to > change.to ? startState.sliceDoc(change.to, sel.to) : "";
            tr = startState.replaceSelection(view.state.toText(before + change.insert.sliceString(0, undefined, view.state.lineBreak) + after));
        }
        else {
            let changes = startState.changes(change);
            let mainSel = newSel && newSel.main.to <= changes.newLength ? newSel.main : undefined;
            // Try to apply a composition change to all cursors
            if (startState.selection.ranges.length > 1 && view.inputState.composing >= 0 &&
                change.to <= sel.to && change.to >= sel.to - 10) {
                let replaced = view.state.sliceDoc(change.from, change.to);
                let compositionRange, composition = newSel && findCompositionNode(view, newSel.main.head);
                if (composition) {
                    let dLen = change.insert.length - (change.to - change.from);
                    compositionRange = { from: composition.from, to: composition.to - dLen };
                }
                else {
                    compositionRange = view.state.doc.lineAt(sel.head);
                }
                let offset = sel.to - change.to, size = sel.to - sel.from;
                tr = startState.changeByRange(range => {
                    if (range.from == sel.from && range.to == sel.to)
                        return { changes, range: mainSel || range.map(changes) };
                    let to = range.to - offset, from = to - replaced.length;
                    if (range.to - range.from != size || view.state.sliceDoc(from, to) != replaced ||
                        // Unfortunately, there's no way to make multiple
                        // changes in the same node work without aborting
                        // composition, so cursors in the composition range are
                        // ignored.
                        range.to >= compositionRange.from && range.from <= compositionRange.to)
                        return { range };
                    let rangeChanges = startState.changes({ from, to, insert: change.insert }), selOff = range.to - sel.to;
                    return {
                        changes: rangeChanges,
                        range: !mainSel ? range.map(rangeChanges) :
                            EditorSelection.range(Math.max(0, mainSel.anchor + selOff), Math.max(0, mainSel.head + selOff))
                    };
                });
            }
            else {
                tr = {
                    changes,
                    selection: mainSel && startState.selection.replaceRange(mainSel)
                };
            }
        }
        let userEvent = "input.type";
        if (view.composing ||
            view.inputState.compositionPendingChange && view.inputState.compositionEndedAt > Date.now() - 50) {
            view.inputState.compositionPendingChange = false;
            userEvent += ".compose";
            if (view.inputState.compositionFirstChange) {
                userEvent += ".start";
                view.inputState.compositionFirstChange = false;
            }
        }
        return startState.update(tr, { userEvent, scrollIntoView: true });
    }
    function findDiff(a, b, preferredPos, preferredSide) {
        let minLen = Math.min(a.length, b.length);
        let from = 0;
        while (from < minLen && a.charCodeAt(from) == b.charCodeAt(from))
            from++;
        if (from == minLen && a.length == b.length)
            return null;
        let toA = a.length, toB = b.length;
        while (toA > 0 && toB > 0 && a.charCodeAt(toA - 1) == b.charCodeAt(toB - 1)) {
            toA--;
            toB--;
        }
        if (preferredSide == "end") {
            let adjust = Math.max(0, from - Math.min(toA, toB));
            preferredPos -= toA + adjust - from;
        }
        if (toA < from && a.length < b.length) {
            let move = preferredPos <= from && preferredPos >= toA ? from - preferredPos : 0;
            from -= move;
            toB = from + (toB - toA);
            toA = from;
        }
        else if (toB < from) {
            let move = preferredPos <= from && preferredPos >= toB ? from - preferredPos : 0;
            from -= move;
            toA = from + (toA - toB);
            toB = from;
        }
        return { from, toA, toB };
    }
    function selectionPoints(view) {
        let result = [];
        if (view.root.activeElement != view.contentDOM)
            return result;
        let { anchorNode, anchorOffset, focusNode, focusOffset } = view.observer.selectionRange;
        if (anchorNode) {
            result.push(new DOMPoint(anchorNode, anchorOffset));
            if (focusNode != anchorNode || focusOffset != anchorOffset)
                result.push(new DOMPoint(focusNode, focusOffset));
        }
        return result;
    }
    function selectionFromPoints(points, base) {
        if (points.length == 0)
            return null;
        let anchor = points[0].pos, head = points.length == 2 ? points[1].pos : anchor;
        return anchor > -1 && head > -1 ? EditorSelection.single(anchor + base, head + base) : null;
    }

    class InputState {
        setSelectionOrigin(origin) {
            this.lastSelectionOrigin = origin;
            this.lastSelectionTime = Date.now();
        }
        constructor(view) {
            this.view = view;
            this.lastKeyCode = 0;
            this.lastKeyTime = 0;
            this.lastTouchTime = 0;
            this.lastFocusTime = 0;
            this.lastScrollTop = 0;
            this.lastScrollLeft = 0;
            // On iOS, some keys need to have their default behavior happen
            // (after which we retroactively handle them and reset the DOM) to
            // avoid messing up the virtual keyboard state.
            this.pendingIOSKey = undefined;
            /**
            When enabled (>-1), tab presses are not given to key handlers,
            leaving the browser's default behavior. If >0, the mode expires
            at that timestamp, and any other keypress clears it.
            Esc enables temporary tab focus mode for two seconds when not
            otherwise handled.
            */
            this.tabFocusMode = -1;
            this.lastSelectionOrigin = null;
            this.lastSelectionTime = 0;
            this.lastContextMenu = 0;
            this.scrollHandlers = [];
            this.handlers = Object.create(null);
            // -1 means not in a composition. Otherwise, this counts the number
            // of changes made during the composition. The count is used to
            // avoid treating the start state of the composition, before any
            // changes have been made, as part of the composition.
            this.composing = -1;
            // Tracks whether the next change should be marked as starting the
            // composition (null means no composition, true means next is the
            // first, false means first has already been marked for this
            // composition)
            this.compositionFirstChange = null;
            // End time of the previous composition
            this.compositionEndedAt = 0;
            // Used in a kludge to detect when an Enter keypress should be
            // considered part of the composition on Safari, which fires events
            // in the wrong order
            this.compositionPendingKey = false;
            // Used to categorize changes as part of a composition, even when
            // the mutation events fire shortly after the compositionend event
            this.compositionPendingChange = false;
            this.mouseSelection = null;
            // When a drag from the editor is active, this points at the range
            // being dragged.
            this.draggedContent = null;
            this.handleEvent = this.handleEvent.bind(this);
            this.notifiedFocused = view.hasFocus;
            // On Safari adding an input event handler somehow prevents an
            // issue where the composition vanishes when you press enter.
            if (browser.safari)
                view.contentDOM.addEventListener("input", () => null);
            if (browser.gecko)
                firefoxCopyCutHack(view.contentDOM.ownerDocument);
        }
        handleEvent(event) {
            if (!eventBelongsToEditor(this.view, event) || this.ignoreDuringComposition(event))
                return;
            if (event.type == "keydown" && this.keydown(event))
                return;
            this.runHandlers(event.type, event);
        }
        runHandlers(type, event) {
            let handlers = this.handlers[type];
            if (handlers) {
                for (let observer of handlers.observers)
                    observer(this.view, event);
                for (let handler of handlers.handlers) {
                    if (event.defaultPrevented)
                        break;
                    if (handler(this.view, event)) {
                        event.preventDefault();
                        break;
                    }
                }
            }
        }
        ensureHandlers(plugins) {
            let handlers = computeHandlers(plugins), prev = this.handlers, dom = this.view.contentDOM;
            for (let type in handlers)
                if (type != "scroll") {
                    let passive = !handlers[type].handlers.length;
                    let exists = prev[type];
                    if (exists && passive != !exists.handlers.length) {
                        dom.removeEventListener(type, this.handleEvent);
                        exists = null;
                    }
                    if (!exists)
                        dom.addEventListener(type, this.handleEvent, { passive });
                }
            for (let type in prev)
                if (type != "scroll" && !handlers[type])
                    dom.removeEventListener(type, this.handleEvent);
            this.handlers = handlers;
        }
        keydown(event) {
            // Must always run, even if a custom handler handled the event
            this.lastKeyCode = event.keyCode;
            this.lastKeyTime = Date.now();
            if (event.keyCode == 9 && this.tabFocusMode > -1 && (!this.tabFocusMode || Date.now() <= this.tabFocusMode))
                return true;
            if (this.tabFocusMode > 0 && event.keyCode != 27 && modifierCodes.indexOf(event.keyCode) < 0)
                this.tabFocusMode = -1;
            // Chrome for Android usually doesn't fire proper key events, but
            // occasionally does, usually surrounded by a bunch of complicated
            // composition changes. When an enter or backspace key event is
            // seen, hold off on handling DOM events for a bit, and then
            // dispatch it.
            if (browser.android && browser.chrome && !event.synthetic &&
                (event.keyCode == 13 || event.keyCode == 8)) {
                this.view.observer.delayAndroidKey(event.key, event.keyCode);
                return true;
            }
            // Preventing the default behavior of Enter on iOS makes the
            // virtual keyboard get stuck in the wrong (lowercase)
            // state. So we let it go through, and then, in
            // applyDOMChange, notify key handlers of it and reset to
            // the state they produce.
            let pending;
            if (browser.ios && !event.synthetic && !event.altKey && !event.metaKey &&
                ((pending = PendingKeys.find(key => key.keyCode == event.keyCode)) && !event.ctrlKey ||
                    EmacsyPendingKeys.indexOf(event.key) > -1 && event.ctrlKey && !event.shiftKey)) {
                this.pendingIOSKey = pending || event;
                setTimeout(() => this.flushIOSKey(), 250);
                return true;
            }
            if (event.keyCode != 229)
                this.view.observer.forceFlush();
            return false;
        }
        flushIOSKey(change) {
            let key = this.pendingIOSKey;
            if (!key)
                return false;
            // This looks like an autocorrection before Enter
            if (key.key == "Enter" && change && change.from < change.to && /^\S+$/.test(change.insert.toString()))
                return false;
            this.pendingIOSKey = undefined;
            return dispatchKey(this.view.contentDOM, key.key, key.keyCode, key instanceof KeyboardEvent ? key : undefined);
        }
        ignoreDuringComposition(event) {
            if (!/^key/.test(event.type))
                return false;
            if (this.composing > 0)
                return true;
            // See https://www.stum.de/2016/06/24/handling-ime-events-in-javascript/.
            // On some input method editors (IMEs), the Enter key is used to
            // confirm character selection. On Safari, when Enter is pressed,
            // compositionend and keydown events are sometimes emitted in the
            // wrong order. The key event should still be ignored, even when
            // it happens after the compositionend event.
            if (browser.safari && !browser.ios && this.compositionPendingKey && Date.now() - this.compositionEndedAt < 100) {
                this.compositionPendingKey = false;
                return true;
            }
            return false;
        }
        startMouseSelection(mouseSelection) {
            if (this.mouseSelection)
                this.mouseSelection.destroy();
            this.mouseSelection = mouseSelection;
        }
        update(update) {
            this.view.observer.update(update);
            if (this.mouseSelection)
                this.mouseSelection.update(update);
            if (this.draggedContent && update.docChanged)
                this.draggedContent = this.draggedContent.map(update.changes);
            if (update.transactions.length)
                this.lastKeyCode = this.lastSelectionTime = 0;
        }
        destroy() {
            if (this.mouseSelection)
                this.mouseSelection.destroy();
        }
    }
    function bindHandler(plugin, handler) {
        return (view, event) => {
            try {
                return handler.call(plugin, event, view);
            }
            catch (e) {
                logException(view.state, e);
            }
        };
    }
    function computeHandlers(plugins) {
        let result = Object.create(null);
        function record(type) {
            return result[type] || (result[type] = { observers: [], handlers: [] });
        }
        for (let plugin of plugins) {
            let spec = plugin.spec;
            if (spec && spec.domEventHandlers)
                for (let type in spec.domEventHandlers) {
                    let f = spec.domEventHandlers[type];
                    if (f)
                        record(type).handlers.push(bindHandler(plugin.value, f));
                }
            if (spec && spec.domEventObservers)
                for (let type in spec.domEventObservers) {
                    let f = spec.domEventObservers[type];
                    if (f)
                        record(type).observers.push(bindHandler(plugin.value, f));
                }
        }
        for (let type in handlers)
            record(type).handlers.push(handlers[type]);
        for (let type in observers)
            record(type).observers.push(observers[type]);
        return result;
    }
    const PendingKeys = [
        { key: "Backspace", keyCode: 8, inputType: "deleteContentBackward" },
        { key: "Enter", keyCode: 13, inputType: "insertParagraph" },
        { key: "Enter", keyCode: 13, inputType: "insertLineBreak" },
        { key: "Delete", keyCode: 46, inputType: "deleteContentForward" }
    ];
    const EmacsyPendingKeys = "dthko";
    // Key codes for modifier keys
    const modifierCodes = [16, 17, 18, 20, 91, 92, 224, 225];
    const dragScrollMargin = 6;
    function dragScrollSpeed(dist) {
        return Math.max(0, dist) * 0.7 + 8;
    }
    function dist(a, b) {
        return Math.max(Math.abs(a.clientX - b.clientX), Math.abs(a.clientY - b.clientY));
    }
    class MouseSelection {
        constructor(view, startEvent, style, mustSelect) {
            this.view = view;
            this.startEvent = startEvent;
            this.style = style;
            this.mustSelect = mustSelect;
            this.scrollSpeed = { x: 0, y: 0 };
            this.scrolling = -1;
            this.lastEvent = startEvent;
            this.scrollParents = scrollableParents(view.contentDOM);
            this.atoms = view.state.facet(atomicRanges).map(f => f(view));
            let doc = view.contentDOM.ownerDocument;
            doc.addEventListener("mousemove", this.move = this.move.bind(this));
            doc.addEventListener("mouseup", this.up = this.up.bind(this));
            this.extend = startEvent.shiftKey;
            this.multiple = view.state.facet(EditorState.allowMultipleSelections) && addsSelectionRange(view, startEvent);
            this.dragging = isInPrimarySelection(view, startEvent) && getClickType(startEvent) == 1 ? null : false;
        }
        start(event) {
            // When clicking outside of the selection, immediately apply the
            // effect of starting the selection
            if (this.dragging === false)
                this.select(event);
        }
        move(event) {
            if (event.buttons == 0)
                return this.destroy();
            if (this.dragging || this.dragging == null && dist(this.startEvent, event) < 10)
                return;
            this.select(this.lastEvent = event);
            let sx = 0, sy = 0;
            let left = 0, top = 0, right = this.view.win.innerWidth, bottom = this.view.win.innerHeight;
            if (this.scrollParents.x)
                ({ left, right } = this.scrollParents.x.getBoundingClientRect());
            if (this.scrollParents.y)
                ({ top, bottom } = this.scrollParents.y.getBoundingClientRect());
            let margins = getScrollMargins(this.view);
            if (event.clientX - margins.left <= left + dragScrollMargin)
                sx = -dragScrollSpeed(left - event.clientX);
            else if (event.clientX + margins.right >= right - dragScrollMargin)
                sx = dragScrollSpeed(event.clientX - right);
            if (event.clientY - margins.top <= top + dragScrollMargin)
                sy = -dragScrollSpeed(top - event.clientY);
            else if (event.clientY + margins.bottom >= bottom - dragScrollMargin)
                sy = dragScrollSpeed(event.clientY - bottom);
            this.setScrollSpeed(sx, sy);
        }
        up(event) {
            if (this.dragging == null)
                this.select(this.lastEvent);
            if (!this.dragging)
                event.preventDefault();
            this.destroy();
        }
        destroy() {
            this.setScrollSpeed(0, 0);
            let doc = this.view.contentDOM.ownerDocument;
            doc.removeEventListener("mousemove", this.move);
            doc.removeEventListener("mouseup", this.up);
            this.view.inputState.mouseSelection = this.view.inputState.draggedContent = null;
        }
        setScrollSpeed(sx, sy) {
            this.scrollSpeed = { x: sx, y: sy };
            if (sx || sy) {
                if (this.scrolling < 0)
                    this.scrolling = setInterval(() => this.scroll(), 50);
            }
            else if (this.scrolling > -1) {
                clearInterval(this.scrolling);
                this.scrolling = -1;
            }
        }
        scroll() {
            let { x, y } = this.scrollSpeed;
            if (x && this.scrollParents.x) {
                this.scrollParents.x.scrollLeft += x;
                x = 0;
            }
            if (y && this.scrollParents.y) {
                this.scrollParents.y.scrollTop += y;
                y = 0;
            }
            if (x || y)
                this.view.win.scrollBy(x, y);
            if (this.dragging === false)
                this.select(this.lastEvent);
        }
        skipAtoms(sel) {
            let ranges = null;
            for (let i = 0; i < sel.ranges.length; i++) {
                let range = sel.ranges[i], updated = null;
                if (range.empty) {
                    let pos = skipAtomicRanges(this.atoms, range.from, 0);
                    if (pos != range.from)
                        updated = EditorSelection.cursor(pos, -1);
                }
                else {
                    let from = skipAtomicRanges(this.atoms, range.from, -1);
                    let to = skipAtomicRanges(this.atoms, range.to, 1);
                    if (from != range.from || to != range.to)
                        updated = EditorSelection.range(range.from == range.anchor ? from : to, range.from == range.head ? from : to);
                }
                if (updated) {
                    if (!ranges)
                        ranges = sel.ranges.slice();
                    ranges[i] = updated;
                }
            }
            return ranges ? EditorSelection.create(ranges, sel.mainIndex) : sel;
        }
        select(event) {
            let { view } = this, selection = this.skipAtoms(this.style.get(event, this.extend, this.multiple));
            if (this.mustSelect || !selection.eq(view.state.selection, this.dragging === false))
                this.view.dispatch({
                    selection,
                    userEvent: "select.pointer"
                });
            this.mustSelect = false;
        }
        update(update) {
            if (update.transactions.some(tr => tr.isUserEvent("input.type")))
                this.destroy();
            else if (this.style.update(update))
                setTimeout(() => this.select(this.lastEvent), 20);
        }
    }
    function addsSelectionRange(view, event) {
        let facet = view.state.facet(clickAddsSelectionRange);
        return facet.length ? facet[0](event) : browser.mac ? event.metaKey : event.ctrlKey;
    }
    function dragMovesSelection(view, event) {
        let facet = view.state.facet(dragMovesSelection$1);
        return facet.length ? facet[0](event) : browser.mac ? !event.altKey : !event.ctrlKey;
    }
    function isInPrimarySelection(view, event) {
        let { main } = view.state.selection;
        if (main.empty)
            return false;
        // On boundary clicks, check whether the coordinates are inside the
        // selection's client rectangles
        let sel = getSelection(view.root);
        if (!sel || sel.rangeCount == 0)
            return true;
        let rects = sel.getRangeAt(0).getClientRects();
        for (let i = 0; i < rects.length; i++) {
            let rect = rects[i];
            if (rect.left <= event.clientX && rect.right >= event.clientX &&
                rect.top <= event.clientY && rect.bottom >= event.clientY)
                return true;
        }
        return false;
    }
    function eventBelongsToEditor(view, event) {
        if (!event.bubbles)
            return true;
        if (event.defaultPrevented)
            return false;
        for (let node = event.target, cView; node != view.contentDOM; node = node.parentNode)
            if (!node || node.nodeType == 11 || ((cView = ContentView.get(node)) && cView.ignoreEvent(event)))
                return false;
        return true;
    }
    const handlers = /*@__PURE__*/Object.create(null);
    const observers = /*@__PURE__*/Object.create(null);
    // This is very crude, but unfortunately both these browsers _pretend_
    // that they have a clipboard API—all the objects and methods are
    // there, they just don't work, and they are hard to test.
    const brokenClipboardAPI = (browser.ie && browser.ie_version < 15) ||
        (browser.ios && browser.webkit_version < 604);
    function capturePaste(view) {
        let parent = view.dom.parentNode;
        if (!parent)
            return;
        let target = parent.appendChild(document.createElement("textarea"));
        target.style.cssText = "position: fixed; left: -10000px; top: 10px";
        target.focus();
        setTimeout(() => {
            view.focus();
            target.remove();
            doPaste(view, target.value);
        }, 50);
    }
    function textFilter(state, facet, text) {
        for (let filter of state.facet(facet))
            text = filter(text, state);
        return text;
    }
    function doPaste(view, input) {
        input = textFilter(view.state, clipboardInputFilter, input);
        let { state } = view, changes, i = 1, text = state.toText(input);
        let byLine = text.lines == state.selection.ranges.length;
        let linewise = lastLinewiseCopy != null && state.selection.ranges.every(r => r.empty) && lastLinewiseCopy == text.toString();
        if (linewise) {
            let lastLine = -1;
            changes = state.changeByRange(range => {
                let line = state.doc.lineAt(range.from);
                if (line.from == lastLine)
                    return { range };
                lastLine = line.from;
                let insert = state.toText((byLine ? text.line(i++).text : input) + state.lineBreak);
                return { changes: { from: line.from, insert },
                    range: EditorSelection.cursor(range.from + insert.length) };
            });
        }
        else if (byLine) {
            changes = state.changeByRange(range => {
                let line = text.line(i++);
                return { changes: { from: range.from, to: range.to, insert: line.text },
                    range: EditorSelection.cursor(range.from + line.length) };
            });
        }
        else {
            changes = state.replaceSelection(text);
        }
        view.dispatch(changes, {
            userEvent: "input.paste",
            scrollIntoView: true
        });
    }
    observers.scroll = view => {
        view.inputState.lastScrollTop = view.scrollDOM.scrollTop;
        view.inputState.lastScrollLeft = view.scrollDOM.scrollLeft;
    };
    handlers.keydown = (view, event) => {
        view.inputState.setSelectionOrigin("select");
        if (event.keyCode == 27 && view.inputState.tabFocusMode != 0)
            view.inputState.tabFocusMode = Date.now() + 2000;
        return false;
    };
    observers.touchstart = (view, e) => {
        view.inputState.lastTouchTime = Date.now();
        view.inputState.setSelectionOrigin("select.pointer");
    };
    observers.touchmove = view => {
        view.inputState.setSelectionOrigin("select.pointer");
    };
    handlers.mousedown = (view, event) => {
        view.observer.flush();
        if (view.inputState.lastTouchTime > Date.now() - 2000)
            return false; // Ignore touch interaction
        let style = null;
        for (let makeStyle of view.state.facet(mouseSelectionStyle)) {
            style = makeStyle(view, event);
            if (style)
                break;
        }
        if (!style && event.button == 0)
            style = basicMouseSelection(view, event);
        if (style) {
            let mustFocus = !view.hasFocus;
            view.inputState.startMouseSelection(new MouseSelection(view, event, style, mustFocus));
            if (mustFocus)
                view.observer.ignore(() => {
                    focusPreventScroll(view.contentDOM);
                    let active = view.root.activeElement;
                    if (active && !active.contains(view.contentDOM))
                        active.blur();
                });
            let mouseSel = view.inputState.mouseSelection;
            if (mouseSel) {
                mouseSel.start(event);
                return mouseSel.dragging === false;
            }
        }
        return false;
    };
    function rangeForClick(view, pos, bias, type) {
        if (type == 1) { // Single click
            return EditorSelection.cursor(pos, bias);
        }
        else if (type == 2) { // Double click
            return groupAt(view.state, pos, bias);
        }
        else { // Triple click
            let visual = LineView.find(view.docView, pos), line = view.state.doc.lineAt(visual ? visual.posAtEnd : pos);
            let from = visual ? visual.posAtStart : line.from, to = visual ? visual.posAtEnd : line.to;
            if (to < view.state.doc.length && to == line.to)
                to++;
            return EditorSelection.range(from, to);
        }
    }
    let inside = (x, y, rect) => y >= rect.top && y <= rect.bottom && x >= rect.left && x <= rect.right;
    // Try to determine, for the given coordinates, associated with the
    // given position, whether they are related to the element before or
    // the element after the position.
    function findPositionSide(view, pos, x, y) {
        let line = LineView.find(view.docView, pos);
        if (!line)
            return 1;
        let off = pos - line.posAtStart;
        // Line boundaries point into the line
        if (off == 0)
            return 1;
        if (off == line.length)
            return -1;
        // Positions on top of an element point at that element
        let before = line.coordsAt(off, -1);
        if (before && inside(x, y, before))
            return -1;
        let after = line.coordsAt(off, 1);
        if (after && inside(x, y, after))
            return 1;
        // This is probably a line wrap point. Pick before if the point is
        // above its bottom.
        return before && before.bottom >= y ? -1 : 1;
    }
    function queryPos(view, event) {
        let pos = view.posAtCoords({ x: event.clientX, y: event.clientY }, false);
        return { pos, bias: findPositionSide(view, pos, event.clientX, event.clientY) };
    }
    const BadMouseDetail = browser.ie && browser.ie_version <= 11;
    let lastMouseDown = null, lastMouseDownCount = 0, lastMouseDownTime = 0;
    function getClickType(event) {
        if (!BadMouseDetail)
            return event.detail;
        let last = lastMouseDown, lastTime = lastMouseDownTime;
        lastMouseDown = event;
        lastMouseDownTime = Date.now();
        return lastMouseDownCount = !last || (lastTime > Date.now() - 400 && Math.abs(last.clientX - event.clientX) < 2 &&
            Math.abs(last.clientY - event.clientY) < 2) ? (lastMouseDownCount + 1) % 3 : 1;
    }
    function basicMouseSelection(view, event) {
        let start = queryPos(view, event), type = getClickType(event);
        let startSel = view.state.selection;
        return {
            update(update) {
                if (update.docChanged) {
                    start.pos = update.changes.mapPos(start.pos);
                    startSel = startSel.map(update.changes);
                }
            },
            get(event, extend, multiple) {
                let cur = queryPos(view, event), removed;
                let range = rangeForClick(view, cur.pos, cur.bias, type);
                if (start.pos != cur.pos && !extend) {
                    let startRange = rangeForClick(view, start.pos, start.bias, type);
                    let from = Math.min(startRange.from, range.from), to = Math.max(startRange.to, range.to);
                    range = from < range.from ? EditorSelection.range(from, to) : EditorSelection.range(to, from);
                }
                if (extend)
                    return startSel.replaceRange(startSel.main.extend(range.from, range.to));
                else if (multiple && type == 1 && startSel.ranges.length > 1 && (removed = removeRangeAround(startSel, cur.pos)))
                    return removed;
                else if (multiple)
                    return startSel.addRange(range);
                else
                    return EditorSelection.create([range]);
            }
        };
    }
    function removeRangeAround(sel, pos) {
        for (let i = 0; i < sel.ranges.length; i++) {
            let { from, to } = sel.ranges[i];
            if (from <= pos && to >= pos)
                return EditorSelection.create(sel.ranges.slice(0, i).concat(sel.ranges.slice(i + 1)), sel.mainIndex == i ? 0 : sel.mainIndex - (sel.mainIndex > i ? 1 : 0));
        }
        return null;
    }
    handlers.dragstart = (view, event) => {
        let { selection: { main: range } } = view.state;
        if (event.target.draggable) {
            let cView = view.docView.nearest(event.target);
            if (cView && cView.isWidget) {
                let from = cView.posAtStart, to = from + cView.length;
                if (from >= range.to || to <= range.from)
                    range = EditorSelection.range(from, to);
            }
        }
        let { inputState } = view;
        if (inputState.mouseSelection)
            inputState.mouseSelection.dragging = true;
        inputState.draggedContent = range;
        if (event.dataTransfer) {
            event.dataTransfer.setData("Text", textFilter(view.state, clipboardOutputFilter, view.state.sliceDoc(range.from, range.to)));
            event.dataTransfer.effectAllowed = "copyMove";
        }
        return false;
    };
    handlers.dragend = view => {
        view.inputState.draggedContent = null;
        return false;
    };
    function dropText(view, event, text, direct) {
        text = textFilter(view.state, clipboardInputFilter, text);
        if (!text)
            return;
        let dropPos = view.posAtCoords({ x: event.clientX, y: event.clientY }, false);
        let { draggedContent } = view.inputState;
        let del = direct && draggedContent && dragMovesSelection(view, event)
            ? { from: draggedContent.from, to: draggedContent.to } : null;
        let ins = { from: dropPos, insert: text };
        let changes = view.state.changes(del ? [del, ins] : ins);
        view.focus();
        view.dispatch({
            changes,
            selection: { anchor: changes.mapPos(dropPos, -1), head: changes.mapPos(dropPos, 1) },
            userEvent: del ? "move.drop" : "input.drop"
        });
        view.inputState.draggedContent = null;
    }
    handlers.drop = (view, event) => {
        if (!event.dataTransfer)
            return false;
        if (view.state.readOnly)
            return true;
        let files = event.dataTransfer.files;
        if (files && files.length) { // For a file drop, read the file's text.
            let text = Array(files.length), read = 0;
            let finishFile = () => {
                if (++read == files.length)
                    dropText(view, event, text.filter(s => s != null).join(view.state.lineBreak), false);
            };
            for (let i = 0; i < files.length; i++) {
                let reader = new FileReader;
                reader.onerror = finishFile;
                reader.onload = () => {
                    if (!/[\x00-\x08\x0e-\x1f]{2}/.test(reader.result))
                        text[i] = reader.result;
                    finishFile();
                };
                reader.readAsText(files[i]);
            }
            return true;
        }
        else {
            let text = event.dataTransfer.getData("Text");
            if (text) {
                dropText(view, event, text, true);
                return true;
            }
        }
        return false;
    };
    handlers.paste = (view, event) => {
        if (view.state.readOnly)
            return true;
        view.observer.flush();
        let data = brokenClipboardAPI ? null : event.clipboardData;
        if (data) {
            doPaste(view, data.getData("text/plain") || data.getData("text/uri-list"));
            return true;
        }
        else {
            capturePaste(view);
            return false;
        }
    };
    function captureCopy(view, text) {
        // The extra wrapper is somehow necessary on IE/Edge to prevent the
        // content from being mangled when it is put onto the clipboard
        let parent = view.dom.parentNode;
        if (!parent)
            return;
        let target = parent.appendChild(document.createElement("textarea"));
        target.style.cssText = "position: fixed; left: -10000px; top: 10px";
        target.value = text;
        target.focus();
        target.selectionEnd = text.length;
        target.selectionStart = 0;
        setTimeout(() => {
            target.remove();
            view.focus();
        }, 50);
    }
    function copiedRange(state) {
        let content = [], ranges = [], linewise = false;
        for (let range of state.selection.ranges)
            if (!range.empty) {
                content.push(state.sliceDoc(range.from, range.to));
                ranges.push(range);
            }
        if (!content.length) {
            // Nothing selected, do a line-wise copy
            let upto = -1;
            for (let { from } of state.selection.ranges) {
                let line = state.doc.lineAt(from);
                if (line.number > upto) {
                    content.push(line.text);
                    ranges.push({ from: line.from, to: Math.min(state.doc.length, line.to + 1) });
                }
                upto = line.number;
            }
            linewise = true;
        }
        return { text: textFilter(state, clipboardOutputFilter, content.join(state.lineBreak)), ranges, linewise };
    }
    let lastLinewiseCopy = null;
    handlers.copy = handlers.cut = (view, event) => {
        let { text, ranges, linewise } = copiedRange(view.state);
        if (!text && !linewise)
            return false;
        lastLinewiseCopy = linewise ? text : null;
        if (event.type == "cut" && !view.state.readOnly)
            view.dispatch({
                changes: ranges,
                scrollIntoView: true,
                userEvent: "delete.cut"
            });
        let data = brokenClipboardAPI ? null : event.clipboardData;
        if (data) {
            data.clearData();
            data.setData("text/plain", text);
            return true;
        }
        else {
            captureCopy(view, text);
            return false;
        }
    };
    const isFocusChange = /*@__PURE__*/Annotation.define();
    function focusChangeTransaction(state, focus) {
        let effects = [];
        for (let getEffect of state.facet(focusChangeEffect)) {
            let effect = getEffect(state, focus);
            if (effect)
                effects.push(effect);
        }
        return effects ? state.update({ effects, annotations: isFocusChange.of(true) }) : null;
    }
    function updateForFocusChange(view) {
        setTimeout(() => {
            let focus = view.hasFocus;
            if (focus != view.inputState.notifiedFocused) {
                let tr = focusChangeTransaction(view.state, focus);
                if (tr)
                    view.dispatch(tr);
                else
                    view.update([]);
            }
        }, 10);
    }
    observers.focus = view => {
        view.inputState.lastFocusTime = Date.now();
        // When focusing reset the scroll position, move it back to where it was
        if (!view.scrollDOM.scrollTop && (view.inputState.lastScrollTop || view.inputState.lastScrollLeft)) {
            view.scrollDOM.scrollTop = view.inputState.lastScrollTop;
            view.scrollDOM.scrollLeft = view.inputState.lastScrollLeft;
        }
        updateForFocusChange(view);
    };
    observers.blur = view => {
        view.observer.clearSelectionRange();
        updateForFocusChange(view);
    };
    observers.compositionstart = observers.compositionupdate = view => {
        if (view.observer.editContext)
            return; // Composition handled by edit context
        if (view.inputState.compositionFirstChange == null)
            view.inputState.compositionFirstChange = true;
        if (view.inputState.composing < 0) {
            // FIXME possibly set a timeout to clear it again on Android
            view.inputState.composing = 0;
        }
    };
    observers.compositionend = view => {
        if (view.observer.editContext)
            return; // Composition handled by edit context
        view.inputState.composing = -1;
        view.inputState.compositionEndedAt = Date.now();
        view.inputState.compositionPendingKey = true;
        view.inputState.compositionPendingChange = view.observer.pendingRecords().length > 0;
        view.inputState.compositionFirstChange = null;
        if (browser.chrome && browser.android) {
            // Delay flushing for a bit on Android because it'll often fire a
            // bunch of contradictory changes in a row at end of compositon
            view.observer.flushSoon();
        }
        else if (view.inputState.compositionPendingChange) {
            // If we found pending records, schedule a flush.
            Promise.resolve().then(() => view.observer.flush());
        }
        else {
            // Otherwise, make sure that, if no changes come in soon, the
            // composition view is cleared.
            setTimeout(() => {
                if (view.inputState.composing < 0 && view.docView.hasComposition)
                    view.update([]);
            }, 50);
        }
    };
    observers.contextmenu = view => {
        view.inputState.lastContextMenu = Date.now();
    };
    handlers.beforeinput = (view, event) => {
        var _a, _b;
        // In EditContext mode, we must handle insertReplacementText events
        // directly, to make spell checking corrections work
        if (event.inputType == "insertReplacementText" && view.observer.editContext) {
            let text = (_a = event.dataTransfer) === null || _a === void 0 ? void 0 : _a.getData("text/plain"), ranges = event.getTargetRanges();
            if (text && ranges.length) {
                let r = ranges[0];
                let from = view.posAtDOM(r.startContainer, r.startOffset), to = view.posAtDOM(r.endContainer, r.endOffset);
                applyDOMChangeInner(view, { from, to, insert: view.state.toText(text) }, null);
                return true;
            }
        }
        // Because Chrome Android doesn't fire useful key events, use
        // beforeinput to detect backspace (and possibly enter and delete,
        // but those usually don't even seem to fire beforeinput events at
        // the moment) and fake a key event for it.
        //
        // (preventDefault on beforeinput, though supported in the spec,
        // seems to do nothing at all on Chrome).
        let pending;
        if (browser.chrome && browser.android && (pending = PendingKeys.find(key => key.inputType == event.inputType))) {
            view.observer.delayAndroidKey(pending.key, pending.keyCode);
            if (pending.key == "Backspace" || pending.key == "Delete") {
                let startViewHeight = ((_b = window.visualViewport) === null || _b === void 0 ? void 0 : _b.height) || 0;
                setTimeout(() => {
                    var _a;
                    // Backspacing near uneditable nodes on Chrome Android sometimes
                    // closes the virtual keyboard. This tries to crudely detect
                    // that and refocus to get it back.
                    if ((((_a = window.visualViewport) === null || _a === void 0 ? void 0 : _a.height) || 0) > startViewHeight + 10 && view.hasFocus) {
                        view.contentDOM.blur();
                        view.focus();
                    }
                }, 100);
            }
        }
        if (browser.ios && event.inputType == "deleteContentForward") {
            // For some reason, DOM changes (and beforeinput) happen _before_
            // the key event for ctrl-d on iOS when using an external
            // keyboard.
            view.observer.flushSoon();
        }
        // Safari will occasionally forget to fire compositionend at the end of a dead-key composition
        if (browser.safari && event.inputType == "insertText" && view.inputState.composing >= 0) {
            setTimeout(() => observers.compositionend(view, event), 20);
        }
        return false;
    };
    const appliedFirefoxHack = /*@__PURE__*/new Set;
    // In Firefox, when cut/copy handlers are added to the document, that
    // somehow avoids a bug where those events aren't fired when the
    // selection is empty. See https://github.com/codemirror/dev/issues/1082
    // and https://bugzilla.mozilla.org/show_bug.cgi?id=995961
    function firefoxCopyCutHack(doc) {
        if (!appliedFirefoxHack.has(doc)) {
            appliedFirefoxHack.add(doc);
            doc.addEventListener("copy", () => { });
            doc.addEventListener("cut", () => { });
        }
    }

    const wrappingWhiteSpace = ["pre-wrap", "normal", "pre-line", "break-spaces"];
    // Used to track, during updateHeight, if any actual heights changed
    let heightChangeFlag = false;
    function clearHeightChangeFlag() { heightChangeFlag = false; }
    class HeightOracle {
        constructor(lineWrapping) {
            this.lineWrapping = lineWrapping;
            this.doc = Text.empty;
            this.heightSamples = {};
            this.lineHeight = 14; // The height of an entire line (line-height)
            this.charWidth = 7;
            this.textHeight = 14; // The height of the actual font (font-size)
            this.lineLength = 30;
        }
        heightForGap(from, to) {
            let lines = this.doc.lineAt(to).number - this.doc.lineAt(from).number + 1;
            if (this.lineWrapping)
                lines += Math.max(0, Math.ceil(((to - from) - (lines * this.lineLength * 0.5)) / this.lineLength));
            return this.lineHeight * lines;
        }
        heightForLine(length) {
            if (!this.lineWrapping)
                return this.lineHeight;
            let lines = 1 + Math.max(0, Math.ceil((length - this.lineLength) / (this.lineLength - 5)));
            return lines * this.lineHeight;
        }
        setDoc(doc) { this.doc = doc; return this; }
        mustRefreshForWrapping(whiteSpace) {
            return (wrappingWhiteSpace.indexOf(whiteSpace) > -1) != this.lineWrapping;
        }
        mustRefreshForHeights(lineHeights) {
            let newHeight = false;
            for (let i = 0; i < lineHeights.length; i++) {
                let h = lineHeights[i];
                if (h < 0) {
                    i++;
                }
                else if (!this.heightSamples[Math.floor(h * 10)]) { // Round to .1 pixels
                    newHeight = true;
                    this.heightSamples[Math.floor(h * 10)] = true;
                }
            }
            return newHeight;
        }
        refresh(whiteSpace, lineHeight, charWidth, textHeight, lineLength, knownHeights) {
            let lineWrapping = wrappingWhiteSpace.indexOf(whiteSpace) > -1;
            let changed = Math.round(lineHeight) != Math.round(this.lineHeight) || this.lineWrapping != lineWrapping;
            this.lineWrapping = lineWrapping;
            this.lineHeight = lineHeight;
            this.charWidth = charWidth;
            this.textHeight = textHeight;
            this.lineLength = lineLength;
            if (changed) {
                this.heightSamples = {};
                for (let i = 0; i < knownHeights.length; i++) {
                    let h = knownHeights[i];
                    if (h < 0)
                        i++;
                    else
                        this.heightSamples[Math.floor(h * 10)] = true;
                }
            }
            return changed;
        }
    }
    // This object is used by `updateHeight` to make DOM measurements
    // arrive at the right nides. The `heights` array is a sequence of
    // block heights, starting from position `from`.
    class MeasuredHeights {
        constructor(from, heights) {
            this.from = from;
            this.heights = heights;
            this.index = 0;
        }
        get more() { return this.index < this.heights.length; }
    }
    /**
    Record used to represent information about a block-level element
    in the editor view.
    */
    class BlockInfo {
        /**
        @internal
        */
        constructor(
        /**
        The start of the element in the document.
        */
        from,
        /**
        The length of the element.
        */
        length,
        /**
        The top position of the element (relative to the top of the
        document).
        */
        top,
        /**
        Its height.
        */
        height,
        /**
        @internal Weird packed field that holds an array of children
        for composite blocks, a decoration for block widgets, and a
        number indicating the amount of widget-create line breaks for
        text blocks.
        */
        _content) {
            this.from = from;
            this.length = length;
            this.top = top;
            this.height = height;
            this._content = _content;
        }
        /**
        The type of element this is. When querying lines, this may be
        an array of all the blocks that make up the line.
        */
        get type() {
            return typeof this._content == "number" ? BlockType.Text :
                Array.isArray(this._content) ? this._content : this._content.type;
        }
        /**
        The end of the element as a document position.
        */
        get to() { return this.from + this.length; }
        /**
        The bottom position of the element.
        */
        get bottom() { return this.top + this.height; }
        /**
        If this is a widget block, this will return the widget
        associated with it.
        */
        get widget() {
            return this._content instanceof PointDecoration ? this._content.widget : null;
        }
        /**
        If this is a textblock, this holds the number of line breaks
        that appear in widgets inside the block.
        */
        get widgetLineBreaks() {
            return typeof this._content == "number" ? this._content : 0;
        }
        /**
        @internal
        */
        join(other) {
            let content = (Array.isArray(this._content) ? this._content : [this])
                .concat(Array.isArray(other._content) ? other._content : [other]);
            return new BlockInfo(this.from, this.length + other.length, this.top, this.height + other.height, content);
        }
    }
    var QueryType = /*@__PURE__*/(function (QueryType) {
        QueryType[QueryType["ByPos"] = 0] = "ByPos";
        QueryType[QueryType["ByHeight"] = 1] = "ByHeight";
        QueryType[QueryType["ByPosNoHeight"] = 2] = "ByPosNoHeight";
    return QueryType})(QueryType || (QueryType = {}));
    const Epsilon = 1e-3;
    class HeightMap {
        constructor(length, // The number of characters covered
        height, // Height of this part of the document
        flags = 2 /* Flag.Outdated */) {
            this.length = length;
            this.height = height;
            this.flags = flags;
        }
        get outdated() { return (this.flags & 2 /* Flag.Outdated */) > 0; }
        set outdated(value) { this.flags = (value ? 2 /* Flag.Outdated */ : 0) | (this.flags & ~2 /* Flag.Outdated */); }
        setHeight(height) {
            if (this.height != height) {
                if (Math.abs(this.height - height) > Epsilon)
                    heightChangeFlag = true;
                this.height = height;
            }
        }
        // Base case is to replace a leaf node, which simply builds a tree
        // from the new nodes and returns that (HeightMapBranch and
        // HeightMapGap override this to actually use from/to)
        replace(_from, _to, nodes) {
            return HeightMap.of(nodes);
        }
        // Again, these are base cases, and are overridden for branch and gap nodes.
        decomposeLeft(_to, result) { result.push(this); }
        decomposeRight(_from, result) { result.push(this); }
        applyChanges(decorations, oldDoc, oracle, changes) {
            let me = this, doc = oracle.doc;
            for (let i = changes.length - 1; i >= 0; i--) {
                let { fromA, toA, fromB, toB } = changes[i];
                let start = me.lineAt(fromA, QueryType.ByPosNoHeight, oracle.setDoc(oldDoc), 0, 0);
                let end = start.to >= toA ? start : me.lineAt(toA, QueryType.ByPosNoHeight, oracle, 0, 0);
                toB += end.to - toA;
                toA = end.to;
                while (i > 0 && start.from <= changes[i - 1].toA) {
                    fromA = changes[i - 1].fromA;
                    fromB = changes[i - 1].fromB;
                    i--;
                    if (fromA < start.from)
                        start = me.lineAt(fromA, QueryType.ByPosNoHeight, oracle, 0, 0);
                }
                fromB += start.from - fromA;
                fromA = start.from;
                let nodes = NodeBuilder.build(oracle.setDoc(doc), decorations, fromB, toB);
                me = replace(me, me.replace(fromA, toA, nodes));
            }
            return me.updateHeight(oracle, 0);
        }
        static empty() { return new HeightMapText(0, 0); }
        // nodes uses null values to indicate the position of line breaks.
        // There are never line breaks at the start or end of the array, or
        // two line breaks next to each other, and the array isn't allowed
        // to be empty (same restrictions as return value from the builder).
        static of(nodes) {
            if (nodes.length == 1)
                return nodes[0];
            let i = 0, j = nodes.length, before = 0, after = 0;
            for (;;) {
                if (i == j) {
                    if (before > after * 2) {
                        let split = nodes[i - 1];
                        if (split.break)
                            nodes.splice(--i, 1, split.left, null, split.right);
                        else
                            nodes.splice(--i, 1, split.left, split.right);
                        j += 1 + split.break;
                        before -= split.size;
                    }
                    else if (after > before * 2) {
                        let split = nodes[j];
                        if (split.break)
                            nodes.splice(j, 1, split.left, null, split.right);
                        else
                            nodes.splice(j, 1, split.left, split.right);
                        j += 2 + split.break;
                        after -= split.size;
                    }
                    else {
                        break;
                    }
                }
                else if (before < after) {
                    let next = nodes[i++];
                    if (next)
                        before += next.size;
                }
                else {
                    let next = nodes[--j];
                    if (next)
                        after += next.size;
                }
            }
            let brk = 0;
            if (nodes[i - 1] == null) {
                brk = 1;
                i--;
            }
            else if (nodes[i] == null) {
                brk = 1;
                j++;
            }
            return new HeightMapBranch(HeightMap.of(nodes.slice(0, i)), brk, HeightMap.of(nodes.slice(j)));
        }
    }
    function replace(old, val) {
        if (old == val)
            return old;
        if (old.constructor != val.constructor)
            heightChangeFlag = true;
        return val;
    }
    HeightMap.prototype.size = 1;
    class HeightMapBlock extends HeightMap {
        constructor(length, height, deco) {
            super(length, height);
            this.deco = deco;
        }
        blockAt(_height, _oracle, top, offset) {
            return new BlockInfo(offset, this.length, top, this.height, this.deco || 0);
        }
        lineAt(_value, _type, oracle, top, offset) {
            return this.blockAt(0, oracle, top, offset);
        }
        forEachLine(from, to, oracle, top, offset, f) {
            if (from <= offset + this.length && to >= offset)
                f(this.blockAt(0, oracle, top, offset));
        }
        updateHeight(oracle, offset = 0, _force = false, measured) {
            if (measured && measured.from <= offset && measured.more)
                this.setHeight(measured.heights[measured.index++]);
            this.outdated = false;
            return this;
        }
        toString() { return `block(${this.length})`; }
    }
    class HeightMapText extends HeightMapBlock {
        constructor(length, height) {
            super(length, height, null);
            this.collapsed = 0; // Amount of collapsed content in the line
            this.widgetHeight = 0; // Maximum inline widget height
            this.breaks = 0; // Number of widget-introduced line breaks on the line
        }
        blockAt(_height, _oracle, top, offset) {
            return new BlockInfo(offset, this.length, top, this.height, this.breaks);
        }
        replace(_from, _to, nodes) {
            let node = nodes[0];
            if (nodes.length == 1 && (node instanceof HeightMapText || node instanceof HeightMapGap && (node.flags & 4 /* Flag.SingleLine */)) &&
                Math.abs(this.length - node.length) < 10) {
                if (node instanceof HeightMapGap)
                    node = new HeightMapText(node.length, this.height);
                else
                    node.height = this.height;
                if (!this.outdated)
                    node.outdated = false;
                return node;
            }
            else {
                return HeightMap.of(nodes);
            }
        }
        updateHeight(oracle, offset = 0, force = false, measured) {
            if (measured && measured.from <= offset && measured.more)
                this.setHeight(measured.heights[measured.index++]);
            else if (force || this.outdated)
                this.setHeight(Math.max(this.widgetHeight, oracle.heightForLine(this.length - this.collapsed)) +
                    this.breaks * oracle.lineHeight);
            this.outdated = false;
            return this;
        }
        toString() {
            return `line(${this.length}${this.collapsed ? -this.collapsed : ""}${this.widgetHeight ? ":" + this.widgetHeight : ""})`;
        }
    }
    class HeightMapGap extends HeightMap {
        constructor(length) { super(length, 0); }
        heightMetrics(oracle, offset) {
            let firstLine = oracle.doc.lineAt(offset).number, lastLine = oracle.doc.lineAt(offset + this.length).number;
            let lines = lastLine - firstLine + 1;
            let perLine, perChar = 0;
            if (oracle.lineWrapping) {
                let totalPerLine = Math.min(this.height, oracle.lineHeight * lines);
                perLine = totalPerLine / lines;
                if (this.length > lines + 1)
                    perChar = (this.height - totalPerLine) / (this.length - lines - 1);
            }
            else {
                perLine = this.height / lines;
            }
            return { firstLine, lastLine, perLine, perChar };
        }
        blockAt(height, oracle, top, offset) {
            let { firstLine, lastLine, perLine, perChar } = this.heightMetrics(oracle, offset);
            if (oracle.lineWrapping) {
                let guess = offset + (height < oracle.lineHeight ? 0
                    : Math.round(Math.max(0, Math.min(1, (height - top) / this.height)) * this.length));
                let line = oracle.doc.lineAt(guess), lineHeight = perLine + line.length * perChar;
                let lineTop = Math.max(top, height - lineHeight / 2);
                return new BlockInfo(line.from, line.length, lineTop, lineHeight, 0);
            }
            else {
                let line = Math.max(0, Math.min(lastLine - firstLine, Math.floor((height - top) / perLine)));
                let { from, length } = oracle.doc.line(firstLine + line);
                return new BlockInfo(from, length, top + perLine * line, perLine, 0);
            }
        }
        lineAt(value, type, oracle, top, offset) {
            if (type == QueryType.ByHeight)
                return this.blockAt(value, oracle, top, offset);
            if (type == QueryType.ByPosNoHeight) {
                let { from, to } = oracle.doc.lineAt(value);
                return new BlockInfo(from, to - from, 0, 0, 0);
            }
            let { firstLine, perLine, perChar } = this.heightMetrics(oracle, offset);
            let line = oracle.doc.lineAt(value), lineHeight = perLine + line.length * perChar;
            let linesAbove = line.number - firstLine;
            let lineTop = top + perLine * linesAbove + perChar * (line.from - offset - linesAbove);
            return new BlockInfo(line.from, line.length, Math.max(top, Math.min(lineTop, top + this.height - lineHeight)), lineHeight, 0);
        }
        forEachLine(from, to, oracle, top, offset, f) {
            from = Math.max(from, offset);
            to = Math.min(to, offset + this.length);
            let { firstLine, perLine, perChar } = this.heightMetrics(oracle, offset);
            for (let pos = from, lineTop = top; pos <= to;) {
                let line = oracle.doc.lineAt(pos);
                if (pos == from) {
                    let linesAbove = line.number - firstLine;
                    lineTop += perLine * linesAbove + perChar * (from - offset - linesAbove);
                }
                let lineHeight = perLine + perChar * line.length;
                f(new BlockInfo(line.from, line.length, lineTop, lineHeight, 0));
                lineTop += lineHeight;
                pos = line.to + 1;
            }
        }
        replace(from, to, nodes) {
            let after = this.length - to;
            if (after > 0) {
                let last = nodes[nodes.length - 1];
                if (last instanceof HeightMapGap)
                    nodes[nodes.length - 1] = new HeightMapGap(last.length + after);
                else
                    nodes.push(null, new HeightMapGap(after - 1));
            }
            if (from > 0) {
                let first = nodes[0];
                if (first instanceof HeightMapGap)
                    nodes[0] = new HeightMapGap(from + first.length);
                else
                    nodes.unshift(new HeightMapGap(from - 1), null);
            }
            return HeightMap.of(nodes);
        }
        decomposeLeft(to, result) {
            result.push(new HeightMapGap(to - 1), null);
        }
        decomposeRight(from, result) {
            result.push(null, new HeightMapGap(this.length - from - 1));
        }
        updateHeight(oracle, offset = 0, force = false, measured) {
            let end = offset + this.length;
            if (measured && measured.from <= offset + this.length && measured.more) {
                // Fill in part of this gap with measured lines. We know there
                // can't be widgets or collapsed ranges in those lines, because
                // they would already have been added to the heightmap (gaps
                // only contain plain text).
                let nodes = [], pos = Math.max(offset, measured.from), singleHeight = -1;
                if (measured.from > offset)
                    nodes.push(new HeightMapGap(measured.from - offset - 1).updateHeight(oracle, offset));
                while (pos <= end && measured.more) {
                    let len = oracle.doc.lineAt(pos).length;
                    if (nodes.length)
                        nodes.push(null);
                    let height = measured.heights[measured.index++];
                    if (singleHeight == -1)
                        singleHeight = height;
                    else if (Math.abs(height - singleHeight) >= Epsilon)
                        singleHeight = -2;
                    let line = new HeightMapText(len, height);
                    line.outdated = false;
                    nodes.push(line);
                    pos += len + 1;
                }
                if (pos <= end)
                    nodes.push(null, new HeightMapGap(end - pos).updateHeight(oracle, pos));
                let result = HeightMap.of(nodes);
                if (singleHeight < 0 || Math.abs(result.height - this.height) >= Epsilon ||
                    Math.abs(singleHeight - this.heightMetrics(oracle, offset).perLine) >= Epsilon)
                    heightChangeFlag = true;
                return replace(this, result);
            }
            else if (force || this.outdated) {
                this.setHeight(oracle.heightForGap(offset, offset + this.length));
                this.outdated = false;
            }
            return this;
        }
        toString() { return `gap(${this.length})`; }
    }
    class HeightMapBranch extends HeightMap {
        constructor(left, brk, right) {
            super(left.length + brk + right.length, left.height + right.height, brk | (left.outdated || right.outdated ? 2 /* Flag.Outdated */ : 0));
            this.left = left;
            this.right = right;
            this.size = left.size + right.size;
        }
        get break() { return this.flags & 1 /* Flag.Break */; }
        blockAt(height, oracle, top, offset) {
            let mid = top + this.left.height;
            return height < mid ? this.left.blockAt(height, oracle, top, offset)
                : this.right.blockAt(height, oracle, mid, offset + this.left.length + this.break);
        }
        lineAt(value, type, oracle, top, offset) {
            let rightTop = top + this.left.height, rightOffset = offset + this.left.length + this.break;
            let left = type == QueryType.ByHeight ? value < rightTop : value < rightOffset;
            let base = left ? this.left.lineAt(value, type, oracle, top, offset)
                : this.right.lineAt(value, type, oracle, rightTop, rightOffset);
            if (this.break || (left ? base.to < rightOffset : base.from > rightOffset))
                return base;
            let subQuery = type == QueryType.ByPosNoHeight ? QueryType.ByPosNoHeight : QueryType.ByPos;
            if (left)
                return base.join(this.right.lineAt(rightOffset, subQuery, oracle, rightTop, rightOffset));
            else
                return this.left.lineAt(rightOffset, subQuery, oracle, top, offset).join(base);
        }
        forEachLine(from, to, oracle, top, offset, f) {
            let rightTop = top + this.left.height, rightOffset = offset + this.left.length + this.break;
            if (this.break) {
                if (from < rightOffset)
                    this.left.forEachLine(from, to, oracle, top, offset, f);
                if (to >= rightOffset)
                    this.right.forEachLine(from, to, oracle, rightTop, rightOffset, f);
            }
            else {
                let mid = this.lineAt(rightOffset, QueryType.ByPos, oracle, top, offset);
                if (from < mid.from)
                    this.left.forEachLine(from, mid.from - 1, oracle, top, offset, f);
                if (mid.to >= from && mid.from <= to)
                    f(mid);
                if (to > mid.to)
                    this.right.forEachLine(mid.to + 1, to, oracle, rightTop, rightOffset, f);
            }
        }
        replace(from, to, nodes) {
            let rightStart = this.left.length + this.break;
            if (to < rightStart)
                return this.balanced(this.left.replace(from, to, nodes), this.right);
            if (from > this.left.length)
                return this.balanced(this.left, this.right.replace(from - rightStart, to - rightStart, nodes));
            let result = [];
            if (from > 0)
                this.decomposeLeft(from, result);
            let left = result.length;
            for (let node of nodes)
                result.push(node);
            if (from > 0)
                mergeGaps(result, left - 1);
            if (to < this.length) {
                let right = result.length;
                this.decomposeRight(to, result);
                mergeGaps(result, right);
            }
            return HeightMap.of(result);
        }
        decomposeLeft(to, result) {
            let left = this.left.length;
            if (to <= left)
                return this.left.decomposeLeft(to, result);
            result.push(this.left);
            if (this.break) {
                left++;
                if (to >= left)
                    result.push(null);
            }
            if (to > left)
                this.right.decomposeLeft(to - left, result);
        }
        decomposeRight(from, result) {
            let left = this.left.length, right = left + this.break;
            if (from >= right)
                return this.right.decomposeRight(from - right, result);
            if (from < left)
                this.left.decomposeRight(from, result);
            if (this.break && from < right)
                result.push(null);
            result.push(this.right);
        }
        balanced(left, right) {
            if (left.size > 2 * right.size || right.size > 2 * left.size)
                return HeightMap.of(this.break ? [left, null, right] : [left, right]);
            this.left = replace(this.left, left);
            this.right = replace(this.right, right);
            this.setHeight(left.height + right.height);
            this.outdated = left.outdated || right.outdated;
            this.size = left.size + right.size;
            this.length = left.length + this.break + right.length;
            return this;
        }
        updateHeight(oracle, offset = 0, force = false, measured) {
            let { left, right } = this, rightStart = offset + left.length + this.break, rebalance = null;
            if (measured && measured.from <= offset + left.length && measured.more)
                rebalance = left = left.updateHeight(oracle, offset, force, measured);
            else
                left.updateHeight(oracle, offset, force);
            if (measured && measured.from <= rightStart + right.length && measured.more)
                rebalance = right = right.updateHeight(oracle, rightStart, force, measured);
            else
                right.updateHeight(oracle, rightStart, force);
            if (rebalance)
                return this.balanced(left, right);
            this.height = this.left.height + this.right.height;
            this.outdated = false;
            return this;
        }
        toString() { return this.left + (this.break ? " " : "-") + this.right; }
    }
    function mergeGaps(nodes, around) {
        let before, after;
        if (nodes[around] == null &&
            (before = nodes[around - 1]) instanceof HeightMapGap &&
            (after = nodes[around + 1]) instanceof HeightMapGap)
            nodes.splice(around - 1, 3, new HeightMapGap(before.length + 1 + after.length));
    }
    const relevantWidgetHeight = 5;
    class NodeBuilder {
        constructor(pos, oracle) {
            this.pos = pos;
            this.oracle = oracle;
            this.nodes = [];
            this.lineStart = -1;
            this.lineEnd = -1;
            this.covering = null;
            this.writtenTo = pos;
        }
        get isCovered() {
            return this.covering && this.nodes[this.nodes.length - 1] == this.covering;
        }
        span(_from, to) {
            if (this.lineStart > -1) {
                let end = Math.min(to, this.lineEnd), last = this.nodes[this.nodes.length - 1];
                if (last instanceof HeightMapText)
                    last.length += end - this.pos;
                else if (end > this.pos || !this.isCovered)
                    this.nodes.push(new HeightMapText(end - this.pos, -1));
                this.writtenTo = end;
                if (to > end) {
                    this.nodes.push(null);
                    this.writtenTo++;
                    this.lineStart = -1;
                }
            }
            this.pos = to;
        }
        point(from, to, deco) {
            if (from < to || deco.heightRelevant) {
                let height = deco.widget ? deco.widget.estimatedHeight : 0;
                let breaks = deco.widget ? deco.widget.lineBreaks : 0;
                if (height < 0)
                    height = this.oracle.lineHeight;
                let len = to - from;
                if (deco.block) {
                    this.addBlock(new HeightMapBlock(len, height, deco));
                }
                else if (len || breaks || height >= relevantWidgetHeight) {
                    this.addLineDeco(height, breaks, len);
                }
            }
            else if (to > from) {
                this.span(from, to);
            }
            if (this.lineEnd > -1 && this.lineEnd < this.pos)
                this.lineEnd = this.oracle.doc.lineAt(this.pos).to;
        }
        enterLine() {
            if (this.lineStart > -1)
                return;
            let { from, to } = this.oracle.doc.lineAt(this.pos);
            this.lineStart = from;
            this.lineEnd = to;
            if (this.writtenTo < from) {
                if (this.writtenTo < from - 1 || this.nodes[this.nodes.length - 1] == null)
                    this.nodes.push(this.blankContent(this.writtenTo, from - 1));
                this.nodes.push(null);
            }
            if (this.pos > from)
                this.nodes.push(new HeightMapText(this.pos - from, -1));
            this.writtenTo = this.pos;
        }
        blankContent(from, to) {
            let gap = new HeightMapGap(to - from);
            if (this.oracle.doc.lineAt(from).to == to)
                gap.flags |= 4 /* Flag.SingleLine */;
            return gap;
        }
        ensureLine() {
            this.enterLine();
            let last = this.nodes.length ? this.nodes[this.nodes.length - 1] : null;
            if (last instanceof HeightMapText)
                return last;
            let line = new HeightMapText(0, -1);
            this.nodes.push(line);
            return line;
        }
        addBlock(block) {
            this.enterLine();
            let deco = block.deco;
            if (deco && deco.startSide > 0 && !this.isCovered)
                this.ensureLine();
            this.nodes.push(block);
            this.writtenTo = this.pos = this.pos + block.length;
            if (deco && deco.endSide > 0)
                this.covering = block;
        }
        addLineDeco(height, breaks, length) {
            let line = this.ensureLine();
            line.length += length;
            line.collapsed += length;
            line.widgetHeight = Math.max(line.widgetHeight, height);
            line.breaks += breaks;
            this.writtenTo = this.pos = this.pos + length;
        }
        finish(from) {
            let last = this.nodes.length == 0 ? null : this.nodes[this.nodes.length - 1];
            if (this.lineStart > -1 && !(last instanceof HeightMapText) && !this.isCovered)
                this.nodes.push(new HeightMapText(0, -1));
            else if (this.writtenTo < this.pos || last == null)
                this.nodes.push(this.blankContent(this.writtenTo, this.pos));
            let pos = from;
            for (let node of this.nodes) {
                if (node instanceof HeightMapText)
                    node.updateHeight(this.oracle, pos);
                pos += node ? node.length : 1;
            }
            return this.nodes;
        }
        // Always called with a region that on both sides either stretches
        // to a line break or the end of the document.
        // The returned array uses null to indicate line breaks, but never
        // starts or ends in a line break, or has multiple line breaks next
        // to each other.
        static build(oracle, decorations, from, to) {
            let builder = new NodeBuilder(from, oracle);
            RangeSet.spans(decorations, from, to, builder, 0);
            return builder.finish(from);
        }
    }
    function heightRelevantDecoChanges(a, b, diff) {
        let comp = new DecorationComparator;
        RangeSet.compare(a, b, diff, comp, 0);
        return comp.changes;
    }
    class DecorationComparator {
        constructor() {
            this.changes = [];
        }
        compareRange() { }
        comparePoint(from, to, a, b) {
            if (from < to || a && a.heightRelevant || b && b.heightRelevant)
                addRange(from, to, this.changes, 5);
        }
    }

    function visiblePixelRange(dom, paddingTop) {
        let rect = dom.getBoundingClientRect();
        let doc = dom.ownerDocument, win = doc.defaultView || window;
        let left = Math.max(0, rect.left), right = Math.min(win.innerWidth, rect.right);
        let top = Math.max(0, rect.top), bottom = Math.min(win.innerHeight, rect.bottom);
        for (let parent = dom.parentNode; parent && parent != doc.body;) {
            if (parent.nodeType == 1) {
                let elt = parent;
                let style = window.getComputedStyle(elt);
                if ((elt.scrollHeight > elt.clientHeight || elt.scrollWidth > elt.clientWidth) &&
                    style.overflow != "visible") {
                    let parentRect = elt.getBoundingClientRect();
                    left = Math.max(left, parentRect.left);
                    right = Math.min(right, parentRect.right);
                    top = Math.max(top, parentRect.top);
                    bottom = Math.min(parent == dom.parentNode ? win.innerHeight : bottom, parentRect.bottom);
                }
                parent = style.position == "absolute" || style.position == "fixed" ? elt.offsetParent : elt.parentNode;
            }
            else if (parent.nodeType == 11) { // Shadow root
                parent = parent.host;
            }
            else {
                break;
            }
        }
        return { left: left - rect.left, right: Math.max(left, right) - rect.left,
            top: top - (rect.top + paddingTop), bottom: Math.max(top, bottom) - (rect.top + paddingTop) };
    }
    function fullPixelRange(dom, paddingTop) {
        let rect = dom.getBoundingClientRect();
        return { left: 0, right: rect.right - rect.left,
            top: paddingTop, bottom: rect.bottom - (rect.top + paddingTop) };
    }
    // Line gaps are placeholder widgets used to hide pieces of overlong
    // lines within the viewport, as a kludge to keep the editor
    // responsive when a ridiculously long line is loaded into it.
    class LineGap {
        constructor(from, to, size, displaySize) {
            this.from = from;
            this.to = to;
            this.size = size;
            this.displaySize = displaySize;
        }
        static same(a, b) {
            if (a.length != b.length)
                return false;
            for (let i = 0; i < a.length; i++) {
                let gA = a[i], gB = b[i];
                if (gA.from != gB.from || gA.to != gB.to || gA.size != gB.size)
                    return false;
            }
            return true;
        }
        draw(viewState, wrapping) {
            return Decoration.replace({
                widget: new LineGapWidget(this.displaySize * (wrapping ? viewState.scaleY : viewState.scaleX), wrapping)
            }).range(this.from, this.to);
        }
    }
    class LineGapWidget extends WidgetType {
        constructor(size, vertical) {
            super();
            this.size = size;
            this.vertical = vertical;
        }
        eq(other) { return other.size == this.size && other.vertical == this.vertical; }
        toDOM() {
            let elt = document.createElement("div");
            if (this.vertical) {
                elt.style.height = this.size + "px";
            }
            else {
                elt.style.width = this.size + "px";
                elt.style.height = "2px";
                elt.style.display = "inline-block";
            }
            return elt;
        }
        get estimatedHeight() { return this.vertical ? this.size : -1; }
    }
    class ViewState {
        constructor(state) {
            this.state = state;
            // These are contentDOM-local coordinates
            this.pixelViewport = { left: 0, right: window.innerWidth, top: 0, bottom: 0 };
            this.inView = true;
            this.paddingTop = 0; // Padding above the document, scaled
            this.paddingBottom = 0; // Padding below the document, scaled
            this.contentDOMWidth = 0; // contentDOM.getBoundingClientRect().width
            this.contentDOMHeight = 0; // contentDOM.getBoundingClientRect().height
            this.editorHeight = 0; // scrollDOM.clientHeight, unscaled
            this.editorWidth = 0; // scrollDOM.clientWidth, unscaled
            this.scrollTop = 0; // Last seen scrollDOM.scrollTop, scaled
            this.scrolledToBottom = false;
            // The CSS-transformation scale of the editor (transformed size /
            // concrete size)
            this.scaleX = 1;
            this.scaleY = 1;
            // The vertical position (document-relative) to which to anchor the
            // scroll position. -1 means anchor to the end of the document.
            this.scrollAnchorPos = 0;
            // The height at the anchor position. Set by the DOM update phase.
            // -1 means no height available.
            this.scrollAnchorHeight = -1;
            // See VP.MaxDOMHeight
            this.scaler = IdScaler;
            this.scrollTarget = null;
            // Briefly set to true when printing, to disable viewport limiting
            this.printing = false;
            // Flag set when editor content was redrawn, so that the next
            // measure stage knows it must read DOM layout
            this.mustMeasureContent = true;
            this.defaultTextDirection = Direction.LTR;
            this.visibleRanges = [];
            // Cursor 'assoc' is only significant when the cursor is on a line
            // wrap point, where it must stick to the character that it is
            // associated with. Since browsers don't provide a reasonable
            // interface to set or query this, when a selection is set that
            // might cause this to be significant, this flag is set. The next
            // measure phase will check whether the cursor is on a line-wrapping
            // boundary and, if so, reset it to make sure it is positioned in
            // the right place.
            this.mustEnforceCursorAssoc = false;
            let guessWrapping = state.facet(contentAttributes).some(v => typeof v != "function" && v.class == "cm-lineWrapping");
            this.heightOracle = new HeightOracle(guessWrapping);
            this.stateDeco = state.facet(decorations).filter(d => typeof d != "function");
            this.heightMap = HeightMap.empty().applyChanges(this.stateDeco, Text.empty, this.heightOracle.setDoc(state.doc), [new ChangedRange(0, 0, 0, state.doc.length)]);
            for (let i = 0; i < 2; i++) {
                this.viewport = this.getViewport(0, null);
                if (!this.updateForViewport())
                    break;
            }
            this.updateViewportLines();
            this.lineGaps = this.ensureLineGaps([]);
            this.lineGapDeco = Decoration.set(this.lineGaps.map(gap => gap.draw(this, false)));
            this.computeVisibleRanges();
        }
        updateForViewport() {
            let viewports = [this.viewport], { main } = this.state.selection;
            for (let i = 0; i <= 1; i++) {
                let pos = i ? main.head : main.anchor;
                if (!viewports.some(({ from, to }) => pos >= from && pos <= to)) {
                    let { from, to } = this.lineBlockAt(pos);
                    viewports.push(new Viewport(from, to));
                }
            }
            this.viewports = viewports.sort((a, b) => a.from - b.from);
            return this.updateScaler();
        }
        updateScaler() {
            let scaler = this.scaler;
            this.scaler = this.heightMap.height <= 7000000 /* VP.MaxDOMHeight */ ? IdScaler :
                new BigScaler(this.heightOracle, this.heightMap, this.viewports);
            return scaler.eq(this.scaler) ? 0 : 2 /* UpdateFlag.Height */;
        }
        updateViewportLines() {
            this.viewportLines = [];
            this.heightMap.forEachLine(this.viewport.from, this.viewport.to, this.heightOracle.setDoc(this.state.doc), 0, 0, block => {
                this.viewportLines.push(scaleBlock(block, this.scaler));
            });
        }
        update(update, scrollTarget = null) {
            this.state = update.state;
            let prevDeco = this.stateDeco;
            this.stateDeco = this.state.facet(decorations).filter(d => typeof d != "function");
            let contentChanges = update.changedRanges;
            let heightChanges = ChangedRange.extendWithRanges(contentChanges, heightRelevantDecoChanges(prevDeco, this.stateDeco, update ? update.changes : ChangeSet.empty(this.state.doc.length)));
            let prevHeight = this.heightMap.height;
            let scrollAnchor = this.scrolledToBottom ? null : this.scrollAnchorAt(this.scrollTop);
            clearHeightChangeFlag();
            this.heightMap = this.heightMap.applyChanges(this.stateDeco, update.startState.doc, this.heightOracle.setDoc(this.state.doc), heightChanges);
            if (this.heightMap.height != prevHeight || heightChangeFlag)
                update.flags |= 2 /* UpdateFlag.Height */;
            if (scrollAnchor) {
                this.scrollAnchorPos = update.changes.mapPos(scrollAnchor.from, -1);
                this.scrollAnchorHeight = scrollAnchor.top;
            }
            else {
                this.scrollAnchorPos = -1;
                this.scrollAnchorHeight = this.heightMap.height;
            }
            let viewport = heightChanges.length ? this.mapViewport(this.viewport, update.changes) : this.viewport;
            if (scrollTarget && (scrollTarget.range.head < viewport.from || scrollTarget.range.head > viewport.to) ||
                !this.viewportIsAppropriate(viewport))
                viewport = this.getViewport(0, scrollTarget);
            let viewportChange = viewport.from != this.viewport.from || viewport.to != this.viewport.to;
            this.viewport = viewport;
            update.flags |= this.updateForViewport();
            if (viewportChange || !update.changes.empty || (update.flags & 2 /* UpdateFlag.Height */))
                this.updateViewportLines();
            if (this.lineGaps.length || this.viewport.to - this.viewport.from > (2000 /* LG.Margin */ << 1))
                this.updateLineGaps(this.ensureLineGaps(this.mapLineGaps(this.lineGaps, update.changes)));
            update.flags |= this.computeVisibleRanges();
            if (scrollTarget)
                this.scrollTarget = scrollTarget;
            if (!this.mustEnforceCursorAssoc && update.selectionSet && update.view.lineWrapping &&
                update.state.selection.main.empty && update.state.selection.main.assoc &&
                !update.state.facet(nativeSelectionHidden))
                this.mustEnforceCursorAssoc = true;
        }
        measure(view) {
            let dom = view.contentDOM, style = window.getComputedStyle(dom);
            let oracle = this.heightOracle;
            let whiteSpace = style.whiteSpace;
            this.defaultTextDirection = style.direction == "rtl" ? Direction.RTL : Direction.LTR;
            let refresh = this.heightOracle.mustRefreshForWrapping(whiteSpace);
            let domRect = dom.getBoundingClientRect();
            let measureContent = refresh || this.mustMeasureContent || this.contentDOMHeight != domRect.height;
            this.contentDOMHeight = domRect.height;
            this.mustMeasureContent = false;
            let result = 0, bias = 0;
            if (domRect.width && domRect.height) {
                let { scaleX, scaleY } = getScale(dom, domRect);
                if (scaleX > .005 && Math.abs(this.scaleX - scaleX) > .005 ||
                    scaleY > .005 && Math.abs(this.scaleY - scaleY) > .005) {
                    this.scaleX = scaleX;
                    this.scaleY = scaleY;
                    result |= 8 /* UpdateFlag.Geometry */;
                    refresh = measureContent = true;
                }
            }
            // Vertical padding
            let paddingTop = (parseInt(style.paddingTop) || 0) * this.scaleY;
            let paddingBottom = (parseInt(style.paddingBottom) || 0) * this.scaleY;
            if (this.paddingTop != paddingTop || this.paddingBottom != paddingBottom) {
                this.paddingTop = paddingTop;
                this.paddingBottom = paddingBottom;
                result |= 8 /* UpdateFlag.Geometry */ | 2 /* UpdateFlag.Height */;
            }
            if (this.editorWidth != view.scrollDOM.clientWidth) {
                if (oracle.lineWrapping)
                    measureContent = true;
                this.editorWidth = view.scrollDOM.clientWidth;
                result |= 8 /* UpdateFlag.Geometry */;
            }
            let scrollTop = view.scrollDOM.scrollTop * this.scaleY;
            if (this.scrollTop != scrollTop) {
                this.scrollAnchorHeight = -1;
                this.scrollTop = scrollTop;
            }
            this.scrolledToBottom = isScrolledToBottom(view.scrollDOM);
            // Pixel viewport
            let pixelViewport = (this.printing ? fullPixelRange : visiblePixelRange)(dom, this.paddingTop);
            let dTop = pixelViewport.top - this.pixelViewport.top, dBottom = pixelViewport.bottom - this.pixelViewport.bottom;
            this.pixelViewport = pixelViewport;
            let inView = this.pixelViewport.bottom > this.pixelViewport.top && this.pixelViewport.right > this.pixelViewport.left;
            if (inView != this.inView) {
                this.inView = inView;
                if (inView)
                    measureContent = true;
            }
            if (!this.inView && !this.scrollTarget)
                return 0;
            let contentWidth = domRect.width;
            if (this.contentDOMWidth != contentWidth || this.editorHeight != view.scrollDOM.clientHeight) {
                this.contentDOMWidth = domRect.width;
                this.editorHeight = view.scrollDOM.clientHeight;
                result |= 8 /* UpdateFlag.Geometry */;
            }
            if (measureContent) {
                let lineHeights = view.docView.measureVisibleLineHeights(this.viewport);
                if (oracle.mustRefreshForHeights(lineHeights))
                    refresh = true;
                if (refresh || oracle.lineWrapping && Math.abs(contentWidth - this.contentDOMWidth) > oracle.charWidth) {
                    let { lineHeight, charWidth, textHeight } = view.docView.measureTextSize();
                    refresh = lineHeight > 0 && oracle.refresh(whiteSpace, lineHeight, charWidth, textHeight, contentWidth / charWidth, lineHeights);
                    if (refresh) {
                        view.docView.minWidth = 0;
                        result |= 8 /* UpdateFlag.Geometry */;
                    }
                }
                if (dTop > 0 && dBottom > 0)
                    bias = Math.max(dTop, dBottom);
                else if (dTop < 0 && dBottom < 0)
                    bias = Math.min(dTop, dBottom);
                clearHeightChangeFlag();
                for (let vp of this.viewports) {
                    let heights = vp.from == this.viewport.from ? lineHeights : view.docView.measureVisibleLineHeights(vp);
                    this.heightMap = (refresh ? HeightMap.empty().applyChanges(this.stateDeco, Text.empty, this.heightOracle, [new ChangedRange(0, 0, 0, view.state.doc.length)]) : this.heightMap).updateHeight(oracle, 0, refresh, new MeasuredHeights(vp.from, heights));
                }
                if (heightChangeFlag)
                    result |= 2 /* UpdateFlag.Height */;
            }
            let viewportChange = !this.viewportIsAppropriate(this.viewport, bias) ||
                this.scrollTarget && (this.scrollTarget.range.head < this.viewport.from ||
                    this.scrollTarget.range.head > this.viewport.to);
            if (viewportChange) {
                if (result & 2 /* UpdateFlag.Height */)
                    result |= this.updateScaler();
                this.viewport = this.getViewport(bias, this.scrollTarget);
                result |= this.updateForViewport();
            }
            if ((result & 2 /* UpdateFlag.Height */) || viewportChange)
                this.updateViewportLines();
            if (this.lineGaps.length || this.viewport.to - this.viewport.from > (2000 /* LG.Margin */ << 1))
                this.updateLineGaps(this.ensureLineGaps(refresh ? [] : this.lineGaps, view));
            result |= this.computeVisibleRanges();
            if (this.mustEnforceCursorAssoc) {
                this.mustEnforceCursorAssoc = false;
                // This is done in the read stage, because moving the selection
                // to a line end is going to trigger a layout anyway, so it
                // can't be a pure write. It should be rare that it does any
                // writing.
                view.docView.enforceCursorAssoc();
            }
            return result;
        }
        get visibleTop() { return this.scaler.fromDOM(this.pixelViewport.top); }
        get visibleBottom() { return this.scaler.fromDOM(this.pixelViewport.bottom); }
        getViewport(bias, scrollTarget) {
            // This will divide VP.Margin between the top and the
            // bottom, depending on the bias (the change in viewport position
            // since the last update). It'll hold a number between 0 and 1
            let marginTop = 0.5 - Math.max(-0.5, Math.min(0.5, bias / 1000 /* VP.Margin */ / 2));
            let map = this.heightMap, oracle = this.heightOracle;
            let { visibleTop, visibleBottom } = this;
            let viewport = new Viewport(map.lineAt(visibleTop - marginTop * 1000 /* VP.Margin */, QueryType.ByHeight, oracle, 0, 0).from, map.lineAt(visibleBottom + (1 - marginTop) * 1000 /* VP.Margin */, QueryType.ByHeight, oracle, 0, 0).to);
            // If scrollTarget is given, make sure the viewport includes that position
            if (scrollTarget) {
                let { head } = scrollTarget.range;
                if (head < viewport.from || head > viewport.to) {
                    let viewHeight = Math.min(this.editorHeight, this.pixelViewport.bottom - this.pixelViewport.top);
                    let block = map.lineAt(head, QueryType.ByPos, oracle, 0, 0), topPos;
                    if (scrollTarget.y == "center")
                        topPos = (block.top + block.bottom) / 2 - viewHeight / 2;
                    else if (scrollTarget.y == "start" || scrollTarget.y == "nearest" && head < viewport.from)
                        topPos = block.top;
                    else
                        topPos = block.bottom - viewHeight;
                    viewport = new Viewport(map.lineAt(topPos - 1000 /* VP.Margin */ / 2, QueryType.ByHeight, oracle, 0, 0).from, map.lineAt(topPos + viewHeight + 1000 /* VP.Margin */ / 2, QueryType.ByHeight, oracle, 0, 0).to);
                }
            }
            return viewport;
        }
        mapViewport(viewport, changes) {
            let from = changes.mapPos(viewport.from, -1), to = changes.mapPos(viewport.to, 1);
            return new Viewport(this.heightMap.lineAt(from, QueryType.ByPos, this.heightOracle, 0, 0).from, this.heightMap.lineAt(to, QueryType.ByPos, this.heightOracle, 0, 0).to);
        }
        // Checks if a given viewport covers the visible part of the
        // document and not too much beyond that.
        viewportIsAppropriate({ from, to }, bias = 0) {
            if (!this.inView)
                return true;
            let { top } = this.heightMap.lineAt(from, QueryType.ByPos, this.heightOracle, 0, 0);
            let { bottom } = this.heightMap.lineAt(to, QueryType.ByPos, this.heightOracle, 0, 0);
            let { visibleTop, visibleBottom } = this;
            return (from == 0 || top <= visibleTop - Math.max(10 /* VP.MinCoverMargin */, Math.min(-bias, 250 /* VP.MaxCoverMargin */))) &&
                (to == this.state.doc.length ||
                    bottom >= visibleBottom + Math.max(10 /* VP.MinCoverMargin */, Math.min(bias, 250 /* VP.MaxCoverMargin */))) &&
                (top > visibleTop - 2 * 1000 /* VP.Margin */ && bottom < visibleBottom + 2 * 1000 /* VP.Margin */);
        }
        mapLineGaps(gaps, changes) {
            if (!gaps.length || changes.empty)
                return gaps;
            let mapped = [];
            for (let gap of gaps)
                if (!changes.touchesRange(gap.from, gap.to))
                    mapped.push(new LineGap(changes.mapPos(gap.from), changes.mapPos(gap.to), gap.size, gap.displaySize));
            return mapped;
        }
        // Computes positions in the viewport where the start or end of a
        // line should be hidden, trying to reuse existing line gaps when
        // appropriate to avoid unneccesary redraws.
        // Uses crude character-counting for the positioning and sizing,
        // since actual DOM coordinates aren't always available and
        // predictable. Relies on generous margins (see LG.Margin) to hide
        // the artifacts this might produce from the user.
        ensureLineGaps(current, mayMeasure) {
            let wrapping = this.heightOracle.lineWrapping;
            let margin = wrapping ? 10000 /* LG.MarginWrap */ : 2000 /* LG.Margin */, halfMargin = margin >> 1, doubleMargin = margin << 1;
            // The non-wrapping logic won't work at all in predominantly right-to-left text.
            if (this.defaultTextDirection != Direction.LTR && !wrapping)
                return [];
            let gaps = [];
            let addGap = (from, to, line, structure) => {
                if (to - from < halfMargin)
                    return;
                let sel = this.state.selection.main, avoid = [sel.from];
                if (!sel.empty)
                    avoid.push(sel.to);
                for (let pos of avoid) {
                    if (pos > from && pos < to) {
                        addGap(from, pos - 10 /* LG.SelectionMargin */, line, structure);
                        addGap(pos + 10 /* LG.SelectionMargin */, to, line, structure);
                        return;
                    }
                }
                let gap = find(current, gap => gap.from >= line.from && gap.to <= line.to &&
                    Math.abs(gap.from - from) < halfMargin && Math.abs(gap.to - to) < halfMargin &&
                    !avoid.some(pos => gap.from < pos && gap.to > pos));
                if (!gap) {
                    // When scrolling down, snap gap ends to line starts to avoid shifts in wrapping
                    if (to < line.to && mayMeasure && wrapping &&
                        mayMeasure.visibleRanges.some(r => r.from <= to && r.to >= to)) {
                        let lineStart = mayMeasure.moveToLineBoundary(EditorSelection.cursor(to), false, true).head;
                        if (lineStart > from)
                            to = lineStart;
                    }
                    let size = this.gapSize(line, from, to, structure);
                    let displaySize = wrapping || size < 2000000 /* VP.MaxHorizGap */ ? size : 2000000 /* VP.MaxHorizGap */;
                    gap = new LineGap(from, to, size, displaySize);
                }
                gaps.push(gap);
            };
            let checkLine = (line) => {
                if (line.length < doubleMargin || line.type != BlockType.Text)
                    return;
                let structure = lineStructure(line.from, line.to, this.stateDeco);
                if (structure.total < doubleMargin)
                    return;
                let target = this.scrollTarget ? this.scrollTarget.range.head : null;
                let viewFrom, viewTo;
                if (wrapping) {
                    let marginHeight = (margin / this.heightOracle.lineLength) * this.heightOracle.lineHeight;
                    let top, bot;
                    if (target != null) {
                        let targetFrac = findFraction(structure, target);
                        let spaceFrac = ((this.visibleBottom - this.visibleTop) / 2 + marginHeight) / line.height;
                        top = targetFrac - spaceFrac;
                        bot = targetFrac + spaceFrac;
                    }
                    else {
                        top = (this.visibleTop - line.top - marginHeight) / line.height;
                        bot = (this.visibleBottom - line.top + marginHeight) / line.height;
                    }
                    viewFrom = findPosition(structure, top);
                    viewTo = findPosition(structure, bot);
                }
                else {
                    let totalWidth = structure.total * this.heightOracle.charWidth;
                    let marginWidth = margin * this.heightOracle.charWidth;
                    let horizOffset = 0;
                    if (totalWidth > 2000000 /* VP.MaxHorizGap */)
                        for (let old of current) {
                            if (old.from >= line.from && old.from < line.to && old.size != old.displaySize &&
                                old.from * this.heightOracle.charWidth + horizOffset < this.pixelViewport.left)
                                horizOffset = old.size - old.displaySize;
                        }
                    let pxLeft = this.pixelViewport.left + horizOffset, pxRight = this.pixelViewport.right + horizOffset;
                    let left, right;
                    if (target != null) {
                        let targetFrac = findFraction(structure, target);
                        let spaceFrac = ((pxRight - pxLeft) / 2 + marginWidth) / totalWidth;
                        left = targetFrac - spaceFrac;
                        right = targetFrac + spaceFrac;
                    }
                    else {
                        left = (pxLeft - marginWidth) / totalWidth;
                        right = (pxRight + marginWidth) / totalWidth;
                    }
                    viewFrom = findPosition(structure, left);
                    viewTo = findPosition(structure, right);
                }
                if (viewFrom > line.from)
                    addGap(line.from, viewFrom, line, structure);
                if (viewTo < line.to)
                    addGap(viewTo, line.to, line, structure);
            };
            for (let line of this.viewportLines) {
                if (Array.isArray(line.type))
                    line.type.forEach(checkLine);
                else
                    checkLine(line);
            }
            return gaps;
        }
        gapSize(line, from, to, structure) {
            let fraction = findFraction(structure, to) - findFraction(structure, from);
            if (this.heightOracle.lineWrapping) {
                return line.height * fraction;
            }
            else {
                return structure.total * this.heightOracle.charWidth * fraction;
            }
        }
        updateLineGaps(gaps) {
            if (!LineGap.same(gaps, this.lineGaps)) {
                this.lineGaps = gaps;
                this.lineGapDeco = Decoration.set(gaps.map(gap => gap.draw(this, this.heightOracle.lineWrapping)));
            }
        }
        computeVisibleRanges() {
            let deco = this.stateDeco;
            if (this.lineGaps.length)
                deco = deco.concat(this.lineGapDeco);
            let ranges = [];
            RangeSet.spans(deco, this.viewport.from, this.viewport.to, {
                span(from, to) { ranges.push({ from, to }); },
                point() { }
            }, 20);
            let changed = ranges.length != this.visibleRanges.length ||
                this.visibleRanges.some((r, i) => r.from != ranges[i].from || r.to != ranges[i].to);
            this.visibleRanges = ranges;
            return changed ? 4 /* UpdateFlag.Viewport */ : 0;
        }
        lineBlockAt(pos) {
            return (pos >= this.viewport.from && pos <= this.viewport.to &&
                this.viewportLines.find(b => b.from <= pos && b.to >= pos)) ||
                scaleBlock(this.heightMap.lineAt(pos, QueryType.ByPos, this.heightOracle, 0, 0), this.scaler);
        }
        lineBlockAtHeight(height) {
            return (height >= this.viewportLines[0].top && height <= this.viewportLines[this.viewportLines.length - 1].bottom &&
                this.viewportLines.find(l => l.top <= height && l.bottom >= height)) ||
                scaleBlock(this.heightMap.lineAt(this.scaler.fromDOM(height), QueryType.ByHeight, this.heightOracle, 0, 0), this.scaler);
        }
        scrollAnchorAt(scrollTop) {
            let block = this.lineBlockAtHeight(scrollTop + 8);
            return block.from >= this.viewport.from || this.viewportLines[0].top - scrollTop > 200 ? block : this.viewportLines[0];
        }
        elementAtHeight(height) {
            return scaleBlock(this.heightMap.blockAt(this.scaler.fromDOM(height), this.heightOracle, 0, 0), this.scaler);
        }
        get docHeight() {
            return this.scaler.toDOM(this.heightMap.height);
        }
        get contentHeight() {
            return this.docHeight + this.paddingTop + this.paddingBottom;
        }
    }
    class Viewport {
        constructor(from, to) {
            this.from = from;
            this.to = to;
        }
    }
    function lineStructure(from, to, stateDeco) {
        let ranges = [], pos = from, total = 0;
        RangeSet.spans(stateDeco, from, to, {
            span() { },
            point(from, to) {
                if (from > pos) {
                    ranges.push({ from: pos, to: from });
                    total += from - pos;
                }
                pos = to;
            }
        }, 20); // We're only interested in collapsed ranges of a significant size
        if (pos < to) {
            ranges.push({ from: pos, to });
            total += to - pos;
        }
        return { total, ranges };
    }
    function findPosition({ total, ranges }, ratio) {
        if (ratio <= 0)
            return ranges[0].from;
        if (ratio >= 1)
            return ranges[ranges.length - 1].to;
        let dist = Math.floor(total * ratio);
        for (let i = 0;; i++) {
            let { from, to } = ranges[i], size = to - from;
            if (dist <= size)
                return from + dist;
            dist -= size;
        }
    }
    function findFraction(structure, pos) {
        let counted = 0;
        for (let { from, to } of structure.ranges) {
            if (pos <= to) {
                counted += pos - from;
                break;
            }
            counted += to - from;
        }
        return counted / structure.total;
    }
    function find(array, f) {
        for (let val of array)
            if (f(val))
                return val;
        return undefined;
    }
    // Don't scale when the document height is within the range of what
    // the DOM can handle.
    const IdScaler = {
        toDOM(n) { return n; },
        fromDOM(n) { return n; },
        scale: 1,
        eq(other) { return other == this; }
    };
    // When the height is too big (> VP.MaxDOMHeight), scale down the
    // regions outside the viewports so that the total height is
    // VP.MaxDOMHeight.
    class BigScaler {
        constructor(oracle, heightMap, viewports) {
            let vpHeight = 0, base = 0, domBase = 0;
            this.viewports = viewports.map(({ from, to }) => {
                let top = heightMap.lineAt(from, QueryType.ByPos, oracle, 0, 0).top;
                let bottom = heightMap.lineAt(to, QueryType.ByPos, oracle, 0, 0).bottom;
                vpHeight += bottom - top;
                return { from, to, top, bottom, domTop: 0, domBottom: 0 };
            });
            this.scale = (7000000 /* VP.MaxDOMHeight */ - vpHeight) / (heightMap.height - vpHeight);
            for (let obj of this.viewports) {
                obj.domTop = domBase + (obj.top - base) * this.scale;
                domBase = obj.domBottom = obj.domTop + (obj.bottom - obj.top);
                base = obj.bottom;
            }
        }
        toDOM(n) {
            for (let i = 0, base = 0, domBase = 0;; i++) {
                let vp = i < this.viewports.length ? this.viewports[i] : null;
                if (!vp || n < vp.top)
                    return domBase + (n - base) * this.scale;
                if (n <= vp.bottom)
                    return vp.domTop + (n - vp.top);
                base = vp.bottom;
                domBase = vp.domBottom;
            }
        }
        fromDOM(n) {
            for (let i = 0, base = 0, domBase = 0;; i++) {
                let vp = i < this.viewports.length ? this.viewports[i] : null;
                if (!vp || n < vp.domTop)
                    return base + (n - domBase) / this.scale;
                if (n <= vp.domBottom)
                    return vp.top + (n - vp.domTop);
                base = vp.bottom;
                domBase = vp.domBottom;
            }
        }
        eq(other) {
            if (!(other instanceof BigScaler))
                return false;
            return this.scale == other.scale && this.viewports.length == other.viewports.length &&
                this.viewports.every((vp, i) => vp.from == other.viewports[i].from && vp.to == other.viewports[i].to);
        }
    }
    function scaleBlock(block, scaler) {
        if (scaler.scale == 1)
            return block;
        let bTop = scaler.toDOM(block.top), bBottom = scaler.toDOM(block.bottom);
        return new BlockInfo(block.from, block.length, bTop, bBottom - bTop, Array.isArray(block._content) ? block._content.map(b => scaleBlock(b, scaler)) : block._content);
    }

    const theme$1 = /*@__PURE__*/Facet.define({ combine: strs => strs.join(" ") });
    const darkTheme = /*@__PURE__*/Facet.define({ combine: values => values.indexOf(true) > -1 });
    const baseThemeID = /*@__PURE__*/StyleModule.newName(), baseLightID = /*@__PURE__*/StyleModule.newName(), baseDarkID = /*@__PURE__*/StyleModule.newName();
    const lightDarkIDs = { "&light": "." + baseLightID, "&dark": "." + baseDarkID };
    function buildTheme(main, spec, scopes) {
        return new StyleModule(spec, {
            finish(sel) {
                return /&/.test(sel) ? sel.replace(/&\w*/, m => {
                    if (m == "&")
                        return main;
                    if (!scopes || !scopes[m])
                        throw new RangeError(`Unsupported selector: ${m}`);
                    return scopes[m];
                }) : main + " " + sel;
            }
        });
    }
    const baseTheme$1$1 = /*@__PURE__*/buildTheme("." + baseThemeID, {
        "&": {
            position: "relative !important",
            boxSizing: "border-box",
            "&.cm-focused": {
                // Provide a simple default outline to make sure a focused
                // editor is visually distinct. Can't leave the default behavior
                // because that will apply to the content element, which is
                // inside the scrollable container and doesn't include the
                // gutters. We also can't use an 'auto' outline, since those
                // are, for some reason, drawn behind the element content, which
                // will cause things like the active line background to cover
                // the outline (#297).
                outline: "1px dotted #212121"
            },
            display: "flex !important",
            flexDirection: "column"
        },
        ".cm-scroller": {
            display: "flex !important",
            alignItems: "flex-start !important",
            fontFamily: "monospace",
            lineHeight: 1.4,
            height: "100%",
            overflowX: "auto",
            position: "relative",
            zIndex: 0,
            overflowAnchor: "none",
        },
        ".cm-content": {
            margin: 0,
            flexGrow: 2,
            flexShrink: 0,
            display: "block",
            whiteSpace: "pre",
            wordWrap: "normal", // https://github.com/codemirror/dev/issues/456
            boxSizing: "border-box",
            minHeight: "100%",
            padding: "4px 0",
            outline: "none",
            "&[contenteditable=true]": {
                WebkitUserModify: "read-write-plaintext-only",
            }
        },
        ".cm-lineWrapping": {
            whiteSpace_fallback: "pre-wrap", // For IE
            whiteSpace: "break-spaces",
            wordBreak: "break-word", // For Safari, which doesn't support overflow-wrap: anywhere
            overflowWrap: "anywhere",
            flexShrink: 1
        },
        "&light .cm-content": { caretColor: "black" },
        "&dark .cm-content": { caretColor: "white" },
        ".cm-line": {
            display: "block",
            padding: "0 2px 0 6px"
        },
        ".cm-layer": {
            position: "absolute",
            left: 0,
            top: 0,
            contain: "size style",
            "& > *": {
                position: "absolute"
            }
        },
        "&light .cm-selectionBackground": {
            background: "#d9d9d9"
        },
        "&dark .cm-selectionBackground": {
            background: "#222"
        },
        "&light.cm-focused > .cm-scroller > .cm-selectionLayer .cm-selectionBackground": {
            background: "#d7d4f0"
        },
        "&dark.cm-focused > .cm-scroller > .cm-selectionLayer .cm-selectionBackground": {
            background: "#233"
        },
        ".cm-cursorLayer": {
            pointerEvents: "none"
        },
        "&.cm-focused > .cm-scroller > .cm-cursorLayer": {
            animation: "steps(1) cm-blink 1.2s infinite"
        },
        // Two animations defined so that we can switch between them to
        // restart the animation without forcing another style
        // recomputation.
        "@keyframes cm-blink": { "0%": {}, "50%": { opacity: 0 }, "100%": {} },
        "@keyframes cm-blink2": { "0%": {}, "50%": { opacity: 0 }, "100%": {} },
        ".cm-cursor, .cm-dropCursor": {
            borderLeft: "1.2px solid black",
            marginLeft: "-0.6px",
            pointerEvents: "none",
        },
        ".cm-cursor": {
            display: "none"
        },
        "&dark .cm-cursor": {
            borderLeftColor: "#ddd"
        },
        ".cm-dropCursor": {
            position: "absolute"
        },
        "&.cm-focused > .cm-scroller > .cm-cursorLayer .cm-cursor": {
            display: "block"
        },
        ".cm-iso": {
            unicodeBidi: "isolate"
        },
        ".cm-announced": {
            position: "fixed",
            top: "-10000px"
        },
        "@media print": {
            ".cm-announced": { display: "none" }
        },
        "&light .cm-activeLine": { backgroundColor: "#cceeff44" },
        "&dark .cm-activeLine": { backgroundColor: "#99eeff33" },
        "&light .cm-specialChar": { color: "red" },
        "&dark .cm-specialChar": { color: "#f78" },
        ".cm-gutters": {
            flexShrink: 0,
            display: "flex",
            height: "100%",
            boxSizing: "border-box",
            insetInlineStart: 0,
            zIndex: 200
        },
        "&light .cm-gutters": {
            backgroundColor: "#f5f5f5",
            color: "#6c6c6c",
            borderRight: "1px solid #ddd"
        },
        "&dark .cm-gutters": {
            backgroundColor: "#333338",
            color: "#ccc"
        },
        ".cm-gutter": {
            display: "flex !important", // Necessary -- prevents margin collapsing
            flexDirection: "column",
            flexShrink: 0,
            boxSizing: "border-box",
            minHeight: "100%",
            overflow: "hidden"
        },
        ".cm-gutterElement": {
            boxSizing: "border-box"
        },
        ".cm-lineNumbers .cm-gutterElement": {
            padding: "0 3px 0 5px",
            minWidth: "20px",
            textAlign: "right",
            whiteSpace: "nowrap"
        },
        "&light .cm-activeLineGutter": {
            backgroundColor: "#e2f2ff"
        },
        "&dark .cm-activeLineGutter": {
            backgroundColor: "#222227"
        },
        ".cm-panels": {
            boxSizing: "border-box",
            position: "sticky",
            left: 0,
            right: 0,
            zIndex: 300
        },
        "&light .cm-panels": {
            backgroundColor: "#f5f5f5",
            color: "black"
        },
        "&light .cm-panels-top": {
            borderBottom: "1px solid #ddd"
        },
        "&light .cm-panels-bottom": {
            borderTop: "1px solid #ddd"
        },
        "&dark .cm-panels": {
            backgroundColor: "#333338",
            color: "white"
        },
        ".cm-tab": {
            display: "inline-block",
            overflow: "hidden",
            verticalAlign: "bottom"
        },
        ".cm-widgetBuffer": {
            verticalAlign: "text-top",
            height: "1em",
            width: 0,
            display: "inline"
        },
        ".cm-placeholder": {
            color: "#888",
            display: "inline-block",
            verticalAlign: "top",
        },
        ".cm-highlightSpace": {
            backgroundImage: "radial-gradient(circle at 50% 55%, #aaa 20%, transparent 5%)",
            backgroundPosition: "center",
        },
        ".cm-highlightTab": {
            backgroundImage: `url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" width="200" height="20"><path stroke="%23888" stroke-width="1" fill="none" d="M1 10H196L190 5M190 15L196 10M197 4L197 16"/></svg>')`,
            backgroundSize: "auto 100%",
            backgroundPosition: "right 90%",
            backgroundRepeat: "no-repeat"
        },
        ".cm-trailingSpace": {
            backgroundColor: "#ff332255"
        },
        ".cm-button": {
            verticalAlign: "middle",
            color: "inherit",
            fontSize: "70%",
            padding: ".2em 1em",
            borderRadius: "1px"
        },
        "&light .cm-button": {
            backgroundImage: "linear-gradient(#eff1f5, #d9d9df)",
            border: "1px solid #888",
            "&:active": {
                backgroundImage: "linear-gradient(#b4b4b4, #d0d3d6)"
            }
        },
        "&dark .cm-button": {
            backgroundImage: "linear-gradient(#393939, #111)",
            border: "1px solid #888",
            "&:active": {
                backgroundImage: "linear-gradient(#111, #333)"
            }
        },
        ".cm-textfield": {
            verticalAlign: "middle",
            color: "inherit",
            fontSize: "70%",
            border: "1px solid silver",
            padding: ".2em .5em"
        },
        "&light .cm-textfield": {
            backgroundColor: "white"
        },
        "&dark .cm-textfield": {
            border: "1px solid #555",
            backgroundColor: "inherit"
        }
    }, lightDarkIDs);

    const observeOptions = {
        childList: true,
        characterData: true,
        subtree: true,
        attributes: true,
        characterDataOldValue: true
    };
    // IE11 has very broken mutation observers, so we also listen to
    // DOMCharacterDataModified there
    const useCharData = browser.ie && browser.ie_version <= 11;
    class DOMObserver {
        constructor(view) {
            this.view = view;
            this.active = false;
            this.editContext = null;
            // The known selection. Kept in our own object, as opposed to just
            // directly accessing the selection because:
            //  - Safari doesn't report the right selection in shadow DOM
            //  - Reading from the selection forces a DOM layout
            //  - This way, we can ignore selectionchange events if we have
            //    already seen the 'new' selection
            this.selectionRange = new DOMSelectionState;
            // Set when a selection change is detected, cleared on flush
            this.selectionChanged = false;
            this.delayedFlush = -1;
            this.resizeTimeout = -1;
            this.queue = [];
            this.delayedAndroidKey = null;
            this.flushingAndroidKey = -1;
            this.lastChange = 0;
            this.scrollTargets = [];
            this.intersection = null;
            this.resizeScroll = null;
            this.intersecting = false;
            this.gapIntersection = null;
            this.gaps = [];
            this.printQuery = null;
            // Timeout for scheduling check of the parents that need scroll handlers
            this.parentCheck = -1;
            this.dom = view.contentDOM;
            this.observer = new MutationObserver(mutations => {
                for (let mut of mutations)
                    this.queue.push(mut);
                // IE11 will sometimes (on typing over a selection or
                // backspacing out a single character text node) call the
                // observer callback before actually updating the DOM.
                //
                // Unrelatedly, iOS Safari will, when ending a composition,
                // sometimes first clear it, deliver the mutations, and then
                // reinsert the finished text. CodeMirror's handling of the
                // deletion will prevent the reinsertion from happening,
                // breaking composition.
                if ((browser.ie && browser.ie_version <= 11 || browser.ios && view.composing) &&
                    mutations.some(m => m.type == "childList" && m.removedNodes.length ||
                        m.type == "characterData" && m.oldValue.length > m.target.nodeValue.length))
                    this.flushSoon();
                else
                    this.flush();
            });
            if (window.EditContext && view.constructor.EDIT_CONTEXT !== false &&
                // Chrome <126 doesn't support inverted selections in edit context (#1392)
                !(browser.chrome && browser.chrome_version < 126)) {
                this.editContext = new EditContextManager(view);
                if (view.state.facet(editable$1))
                    view.contentDOM.editContext = this.editContext.editContext;
            }
            if (useCharData)
                this.onCharData = (event) => {
                    this.queue.push({ target: event.target,
                        type: "characterData",
                        oldValue: event.prevValue });
                    this.flushSoon();
                };
            this.onSelectionChange = this.onSelectionChange.bind(this);
            this.onResize = this.onResize.bind(this);
            this.onPrint = this.onPrint.bind(this);
            this.onScroll = this.onScroll.bind(this);
            if (window.matchMedia)
                this.printQuery = window.matchMedia("print");
            if (typeof ResizeObserver == "function") {
                this.resizeScroll = new ResizeObserver(() => {
                    var _a;
                    if (((_a = this.view.docView) === null || _a === void 0 ? void 0 : _a.lastUpdate) < Date.now() - 75)
                        this.onResize();
                });
                this.resizeScroll.observe(view.scrollDOM);
            }
            this.addWindowListeners(this.win = view.win);
            this.start();
            if (typeof IntersectionObserver == "function") {
                this.intersection = new IntersectionObserver(entries => {
                    if (this.parentCheck < 0)
                        this.parentCheck = setTimeout(this.listenForScroll.bind(this), 1000);
                    if (entries.length > 0 && (entries[entries.length - 1].intersectionRatio > 0) != this.intersecting) {
                        this.intersecting = !this.intersecting;
                        if (this.intersecting != this.view.inView)
                            this.onScrollChanged(document.createEvent("Event"));
                    }
                }, { threshold: [0, .001] });
                this.intersection.observe(this.dom);
                this.gapIntersection = new IntersectionObserver(entries => {
                    if (entries.length > 0 && entries[entries.length - 1].intersectionRatio > 0)
                        this.onScrollChanged(document.createEvent("Event"));
                }, {});
            }
            this.listenForScroll();
            this.readSelectionRange();
        }
        onScrollChanged(e) {
            this.view.inputState.runHandlers("scroll", e);
            if (this.intersecting)
                this.view.measure();
        }
        onScroll(e) {
            if (this.intersecting)
                this.flush(false);
            if (this.editContext)
                this.view.requestMeasure(this.editContext.measureReq);
            this.onScrollChanged(e);
        }
        onResize() {
            if (this.resizeTimeout < 0)
                this.resizeTimeout = setTimeout(() => {
                    this.resizeTimeout = -1;
                    this.view.requestMeasure();
                }, 50);
        }
        onPrint(event) {
            if ((event.type == "change" || !event.type) && !event.matches)
                return;
            this.view.viewState.printing = true;
            this.view.measure();
            setTimeout(() => {
                this.view.viewState.printing = false;
                this.view.requestMeasure();
            }, 500);
        }
        updateGaps(gaps) {
            if (this.gapIntersection && (gaps.length != this.gaps.length || this.gaps.some((g, i) => g != gaps[i]))) {
                this.gapIntersection.disconnect();
                for (let gap of gaps)
                    this.gapIntersection.observe(gap);
                this.gaps = gaps;
            }
        }
        onSelectionChange(event) {
            let wasChanged = this.selectionChanged;
            if (!this.readSelectionRange() || this.delayedAndroidKey)
                return;
            let { view } = this, sel = this.selectionRange;
            if (view.state.facet(editable$1) ? view.root.activeElement != this.dom : !hasSelection(this.dom, sel))
                return;
            let context = sel.anchorNode && view.docView.nearest(sel.anchorNode);
            if (context && context.ignoreEvent(event)) {
                if (!wasChanged)
                    this.selectionChanged = false;
                return;
            }
            // Deletions on IE11 fire their events in the wrong order, giving
            // us a selection change event before the DOM changes are
            // reported.
            // Chrome Android has a similar issue when backspacing out a
            // selection (#645).
            if ((browser.ie && browser.ie_version <= 11 || browser.android && browser.chrome) && !view.state.selection.main.empty &&
                // (Selection.isCollapsed isn't reliable on IE)
                sel.focusNode && isEquivalentPosition(sel.focusNode, sel.focusOffset, sel.anchorNode, sel.anchorOffset))
                this.flushSoon();
            else
                this.flush(false);
        }
        readSelectionRange() {
            let { view } = this;
            // The Selection object is broken in shadow roots in Safari. See
            // https://github.com/codemirror/dev/issues/414
            let selection = getSelection(view.root);
            if (!selection)
                return false;
            let range = browser.safari && view.root.nodeType == 11 &&
                view.root.activeElement == this.dom &&
                safariSelectionRangeHack(this.view, selection) || selection;
            if (!range || this.selectionRange.eq(range))
                return false;
            let local = hasSelection(this.dom, range);
            // Detect the situation where the browser has, on focus, moved the
            // selection to the start of the content element. Reset it to the
            // position from the editor state.
            if (local && !this.selectionChanged &&
                view.inputState.lastFocusTime > Date.now() - 200 &&
                view.inputState.lastTouchTime < Date.now() - 300 &&
                atElementStart(this.dom, range)) {
                this.view.inputState.lastFocusTime = 0;
                view.docView.updateSelection();
                return false;
            }
            this.selectionRange.setRange(range);
            if (local)
                this.selectionChanged = true;
            return true;
        }
        setSelectionRange(anchor, head) {
            this.selectionRange.set(anchor.node, anchor.offset, head.node, head.offset);
            this.selectionChanged = false;
        }
        clearSelectionRange() {
            this.selectionRange.set(null, 0, null, 0);
        }
        listenForScroll() {
            this.parentCheck = -1;
            let i = 0, changed = null;
            for (let dom = this.dom; dom;) {
                if (dom.nodeType == 1) {
                    if (!changed && i < this.scrollTargets.length && this.scrollTargets[i] == dom)
                        i++;
                    else if (!changed)
                        changed = this.scrollTargets.slice(0, i);
                    if (changed)
                        changed.push(dom);
                    dom = dom.assignedSlot || dom.parentNode;
                }
                else if (dom.nodeType == 11) { // Shadow root
                    dom = dom.host;
                }
                else {
                    break;
                }
            }
            if (i < this.scrollTargets.length && !changed)
                changed = this.scrollTargets.slice(0, i);
            if (changed) {
                for (let dom of this.scrollTargets)
                    dom.removeEventListener("scroll", this.onScroll);
                for (let dom of this.scrollTargets = changed)
                    dom.addEventListener("scroll", this.onScroll);
            }
        }
        ignore(f) {
            if (!this.active)
                return f();
            try {
                this.stop();
                return f();
            }
            finally {
                this.start();
                this.clear();
            }
        }
        start() {
            if (this.active)
                return;
            this.observer.observe(this.dom, observeOptions);
            if (useCharData)
                this.dom.addEventListener("DOMCharacterDataModified", this.onCharData);
            this.active = true;
        }
        stop() {
            if (!this.active)
                return;
            this.active = false;
            this.observer.disconnect();
            if (useCharData)
                this.dom.removeEventListener("DOMCharacterDataModified", this.onCharData);
        }
        // Throw away any pending changes
        clear() {
            this.processRecords();
            this.queue.length = 0;
            this.selectionChanged = false;
        }
        // Chrome Android, especially in combination with GBoard, not only
        // doesn't reliably fire regular key events, but also often
        // surrounds the effect of enter or backspace with a bunch of
        // composition events that, when interrupted, cause text duplication
        // or other kinds of corruption. This hack makes the editor back off
        // from handling DOM changes for a moment when such a key is
        // detected (via beforeinput or keydown), and then tries to flush
        // them or, if that has no effect, dispatches the given key.
        delayAndroidKey(key, keyCode) {
            var _a;
            if (!this.delayedAndroidKey) {
                let flush = () => {
                    let key = this.delayedAndroidKey;
                    if (key) {
                        this.clearDelayedAndroidKey();
                        this.view.inputState.lastKeyCode = key.keyCode;
                        this.view.inputState.lastKeyTime = Date.now();
                        let flushed = this.flush();
                        if (!flushed && key.force)
                            dispatchKey(this.dom, key.key, key.keyCode);
                    }
                };
                this.flushingAndroidKey = this.view.win.requestAnimationFrame(flush);
            }
            // Since backspace beforeinput is sometimes signalled spuriously,
            // Enter always takes precedence.
            if (!this.delayedAndroidKey || key == "Enter")
                this.delayedAndroidKey = {
                    key, keyCode,
                    // Only run the key handler when no changes are detected if
                    // this isn't coming right after another change, in which case
                    // it is probably part of a weird chain of updates, and should
                    // be ignored if it returns the DOM to its previous state.
                    force: this.lastChange < Date.now() - 50 || !!((_a = this.delayedAndroidKey) === null || _a === void 0 ? void 0 : _a.force)
                };
        }
        clearDelayedAndroidKey() {
            this.win.cancelAnimationFrame(this.flushingAndroidKey);
            this.delayedAndroidKey = null;
            this.flushingAndroidKey = -1;
        }
        flushSoon() {
            if (this.delayedFlush < 0)
                this.delayedFlush = this.view.win.requestAnimationFrame(() => { this.delayedFlush = -1; this.flush(); });
        }
        forceFlush() {
            if (this.delayedFlush >= 0) {
                this.view.win.cancelAnimationFrame(this.delayedFlush);
                this.delayedFlush = -1;
            }
            this.flush();
        }
        pendingRecords() {
            for (let mut of this.observer.takeRecords())
                this.queue.push(mut);
            return this.queue;
        }
        processRecords() {
            let records = this.pendingRecords();
            if (records.length)
                this.queue = [];
            let from = -1, to = -1, typeOver = false;
            for (let record of records) {
                let range = this.readMutation(record);
                if (!range)
                    continue;
                if (range.typeOver)
                    typeOver = true;
                if (from == -1) {
                    ({ from, to } = range);
                }
                else {
                    from = Math.min(range.from, from);
                    to = Math.max(range.to, to);
                }
            }
            return { from, to, typeOver };
        }
        readChange() {
            let { from, to, typeOver } = this.processRecords();
            let newSel = this.selectionChanged && hasSelection(this.dom, this.selectionRange);
            if (from < 0 && !newSel)
                return null;
            if (from > -1)
                this.lastChange = Date.now();
            this.view.inputState.lastFocusTime = 0;
            this.selectionChanged = false;
            let change = new DOMChange(this.view, from, to, typeOver);
            this.view.docView.domChanged = { newSel: change.newSel ? change.newSel.main : null };
            return change;
        }
        // Apply pending changes, if any
        flush(readSelection = true) {
            // Completely hold off flushing when pending keys are set—the code
            // managing those will make sure processRecords is called and the
            // view is resynchronized after
            if (this.delayedFlush >= 0 || this.delayedAndroidKey)
                return false;
            if (readSelection)
                this.readSelectionRange();
            let domChange = this.readChange();
            if (!domChange) {
                this.view.requestMeasure();
                return false;
            }
            let startState = this.view.state;
            let handled = applyDOMChange(this.view, domChange);
            // The view wasn't updated but DOM/selection changes were seen. Reset the view.
            if (this.view.state == startState &&
                (domChange.domChanged || domChange.newSel && !domChange.newSel.main.eq(this.view.state.selection.main)))
                this.view.update([]);
            return handled;
        }
        readMutation(rec) {
            let cView = this.view.docView.nearest(rec.target);
            if (!cView || cView.ignoreMutation(rec))
                return null;
            cView.markDirty(rec.type == "attributes");
            if (rec.type == "attributes")
                cView.flags |= 4 /* ViewFlag.AttrsDirty */;
            if (rec.type == "childList") {
                let childBefore = findChild(cView, rec.previousSibling || rec.target.previousSibling, -1);
                let childAfter = findChild(cView, rec.nextSibling || rec.target.nextSibling, 1);
                return { from: childBefore ? cView.posAfter(childBefore) : cView.posAtStart,
                    to: childAfter ? cView.posBefore(childAfter) : cView.posAtEnd, typeOver: false };
            }
            else if (rec.type == "characterData") {
                return { from: cView.posAtStart, to: cView.posAtEnd, typeOver: rec.target.nodeValue == rec.oldValue };
            }
            else {
                return null;
            }
        }
        setWindow(win) {
            if (win != this.win) {
                this.removeWindowListeners(this.win);
                this.win = win;
                this.addWindowListeners(this.win);
            }
        }
        addWindowListeners(win) {
            win.addEventListener("resize", this.onResize);
            if (this.printQuery) {
                if (this.printQuery.addEventListener)
                    this.printQuery.addEventListener("change", this.onPrint);
                else
                    this.printQuery.addListener(this.onPrint);
            }
            else
                win.addEventListener("beforeprint", this.onPrint);
            win.addEventListener("scroll", this.onScroll);
            win.document.addEventListener("selectionchange", this.onSelectionChange);
        }
        removeWindowListeners(win) {
            win.removeEventListener("scroll", this.onScroll);
            win.removeEventListener("resize", this.onResize);
            if (this.printQuery) {
                if (this.printQuery.removeEventListener)
                    this.printQuery.removeEventListener("change", this.onPrint);
                else
                    this.printQuery.removeListener(this.onPrint);
            }
            else
                win.removeEventListener("beforeprint", this.onPrint);
            win.document.removeEventListener("selectionchange", this.onSelectionChange);
        }
        update(update) {
            if (this.editContext) {
                this.editContext.update(update);
                if (update.startState.facet(editable$1) != update.state.facet(editable$1))
                    update.view.contentDOM.editContext = update.state.facet(editable$1) ? this.editContext.editContext : null;
            }
        }
        destroy() {
            var _a, _b, _c;
            this.stop();
            (_a = this.intersection) === null || _a === void 0 ? void 0 : _a.disconnect();
            (_b = this.gapIntersection) === null || _b === void 0 ? void 0 : _b.disconnect();
            (_c = this.resizeScroll) === null || _c === void 0 ? void 0 : _c.disconnect();
            for (let dom of this.scrollTargets)
                dom.removeEventListener("scroll", this.onScroll);
            this.removeWindowListeners(this.win);
            clearTimeout(this.parentCheck);
            clearTimeout(this.resizeTimeout);
            this.win.cancelAnimationFrame(this.delayedFlush);
            this.win.cancelAnimationFrame(this.flushingAndroidKey);
            if (this.editContext) {
                this.view.contentDOM.editContext = null;
                this.editContext.destroy();
            }
        }
    }
    function findChild(cView, dom, dir) {
        while (dom) {
            let curView = ContentView.get(dom);
            if (curView && curView.parent == cView)
                return curView;
            let parent = dom.parentNode;
            dom = parent != cView.dom ? parent : dir > 0 ? dom.nextSibling : dom.previousSibling;
        }
        return null;
    }
    function buildSelectionRangeFromRange(view, range) {
        let anchorNode = range.startContainer, anchorOffset = range.startOffset;
        let focusNode = range.endContainer, focusOffset = range.endOffset;
        let curAnchor = view.docView.domAtPos(view.state.selection.main.anchor);
        // Since such a range doesn't distinguish between anchor and head,
        // use a heuristic that flips it around if its end matches the
        // current anchor.
        if (isEquivalentPosition(curAnchor.node, curAnchor.offset, focusNode, focusOffset))
            [anchorNode, anchorOffset, focusNode, focusOffset] = [focusNode, focusOffset, anchorNode, anchorOffset];
        return { anchorNode, anchorOffset, focusNode, focusOffset };
    }
    // Used to work around a Safari Selection/shadow DOM bug (#414)
    function safariSelectionRangeHack(view, selection) {
        if (selection.getComposedRanges) {
            let range = selection.getComposedRanges(view.root)[0];
            if (range)
                return buildSelectionRangeFromRange(view, range);
        }
        let found = null;
        // Because Safari (at least in 2018-2021) doesn't provide regular
        // access to the selection inside a shadowroot, we have to perform a
        // ridiculous hack to get at it—using `execCommand` to trigger a
        // `beforeInput` event so that we can read the target range from the
        // event.
        function read(event) {
            event.preventDefault();
            event.stopImmediatePropagation();
            found = event.getTargetRanges()[0];
        }
        view.contentDOM.addEventListener("beforeinput", read, true);
        view.dom.ownerDocument.execCommand("indent");
        view.contentDOM.removeEventListener("beforeinput", read, true);
        return found ? buildSelectionRangeFromRange(view, found) : null;
    }
    class EditContextManager {
        constructor(view) {
            // The document window for which the text in the context is
            // maintained. For large documents, this may be smaller than the
            // editor document. This window always includes the selection head.
            this.from = 0;
            this.to = 0;
            // When applying a transaction, this is used to compare the change
            // made to the context content to the change in the transaction in
            // order to make the minimal changes to the context (since touching
            // that sometimes breaks series of multiple edits made for a single
            // user action on some Android keyboards)
            this.pendingContextChange = null;
            this.handlers = Object.create(null);
            this.resetRange(view.state);
            let context = this.editContext = new window.EditContext({
                text: view.state.doc.sliceString(this.from, this.to),
                selectionStart: this.toContextPos(Math.max(this.from, Math.min(this.to, view.state.selection.main.anchor))),
                selectionEnd: this.toContextPos(view.state.selection.main.head)
            });
            this.handlers.textupdate = e => {
                let { anchor } = view.state.selection.main;
                let change = { from: this.toEditorPos(e.updateRangeStart),
                    to: this.toEditorPos(e.updateRangeEnd),
                    insert: Text.of(e.text.split("\n")) };
                // If the window doesn't include the anchor, assume changes
                // adjacent to a side go up to the anchor.
                if (change.from == this.from && anchor < this.from)
                    change.from = anchor;
                else if (change.to == this.to && anchor > this.to)
                    change.to = anchor;
                // Edit contexts sometimes fire empty changes
                if (change.from == change.to && !change.insert.length)
                    return;
                this.pendingContextChange = change;
                if (!view.state.readOnly)
                    applyDOMChangeInner(view, change, EditorSelection.single(this.toEditorPos(e.selectionStart), this.toEditorPos(e.selectionEnd)));
                // If the transaction didn't flush our change, revert it so
                // that the context is in sync with the editor state again.
                if (this.pendingContextChange) {
                    this.revertPending(view.state);
                    this.setSelection(view.state);
                }
            };
            this.handlers.characterboundsupdate = e => {
                let rects = [], prev = null;
                for (let i = this.toEditorPos(e.rangeStart), end = this.toEditorPos(e.rangeEnd); i < end; i++) {
                    let rect = view.coordsForChar(i);
                    prev = (rect && new DOMRect(rect.left, rect.top, rect.right - rect.left, rect.bottom - rect.top))
                        || prev || new DOMRect;
                    rects.push(prev);
                }
                context.updateCharacterBounds(e.rangeStart, rects);
            };
            this.handlers.textformatupdate = e => {
                let deco = [];
                for (let format of e.getTextFormats()) {
                    let lineStyle = format.underlineStyle, thickness = format.underlineThickness;
                    if (lineStyle != "None" && thickness != "None") {
                        let style = `text-decoration: underline ${lineStyle == "Dashed" ? "dashed " : lineStyle == "Squiggle" ? "wavy " : ""}${thickness == "Thin" ? 1 : 2}px`;
                        deco.push(Decoration.mark({ attributes: { style } })
                            .range(this.toEditorPos(format.rangeStart), this.toEditorPos(format.rangeEnd)));
                    }
                }
                view.dispatch({ effects: setEditContextFormatting.of(Decoration.set(deco)) });
            };
            this.handlers.compositionstart = () => {
                if (view.inputState.composing < 0) {
                    view.inputState.composing = 0;
                    view.inputState.compositionFirstChange = true;
                }
            };
            this.handlers.compositionend = () => {
                view.inputState.composing = -1;
                view.inputState.compositionFirstChange = null;
            };
            for (let event in this.handlers)
                context.addEventListener(event, this.handlers[event]);
            this.measureReq = { read: view => {
                    this.editContext.updateControlBounds(view.contentDOM.getBoundingClientRect());
                    let sel = getSelection(view.root);
                    if (sel && sel.rangeCount)
                        this.editContext.updateSelectionBounds(sel.getRangeAt(0).getBoundingClientRect());
                } };
        }
        applyEdits(update) {
            let off = 0, abort = false, pending = this.pendingContextChange;
            update.changes.iterChanges((fromA, toA, _fromB, _toB, insert) => {
                if (abort)
                    return;
                let dLen = insert.length - (toA - fromA);
                if (pending && toA >= pending.to) {
                    if (pending.from == fromA && pending.to == toA && pending.insert.eq(insert)) {
                        pending = this.pendingContextChange = null; // Match
                        off += dLen;
                        this.to += dLen;
                        return;
                    }
                    else { // Mismatch, revert
                        pending = null;
                        this.revertPending(update.state);
                    }
                }
                fromA += off;
                toA += off;
                if (toA <= this.from) { // Before the window
                    this.from += dLen;
                    this.to += dLen;
                }
                else if (fromA < this.to) { // Overlaps with window
                    if (fromA < this.from || toA > this.to || (this.to - this.from) + insert.length > 30000 /* CxVp.MaxSize */) {
                        abort = true;
                        return;
                    }
                    this.editContext.updateText(this.toContextPos(fromA), this.toContextPos(toA), insert.toString());
                    this.to += dLen;
                }
                off += dLen;
            });
            if (pending && !abort)
                this.revertPending(update.state);
            return !abort;
        }
        update(update) {
            let reverted = this.pendingContextChange;
            if (!this.applyEdits(update) || !this.rangeIsValid(update.state)) {
                this.pendingContextChange = null;
                this.resetRange(update.state);
                this.editContext.updateText(0, this.editContext.text.length, update.state.doc.sliceString(this.from, this.to));
                this.setSelection(update.state);
            }
            else if (update.docChanged || update.selectionSet || reverted) {
                this.setSelection(update.state);
            }
            if (update.geometryChanged || update.docChanged || update.selectionSet)
                update.view.requestMeasure(this.measureReq);
        }
        resetRange(state) {
            let { head } = state.selection.main;
            this.from = Math.max(0, head - 10000 /* CxVp.Margin */);
            this.to = Math.min(state.doc.length, head + 10000 /* CxVp.Margin */);
        }
        revertPending(state) {
            let pending = this.pendingContextChange;
            this.pendingContextChange = null;
            this.editContext.updateText(this.toContextPos(pending.from), this.toContextPos(pending.from + pending.insert.length), state.doc.sliceString(pending.from, pending.to));
        }
        setSelection(state) {
            let { main } = state.selection;
            let start = this.toContextPos(Math.max(this.from, Math.min(this.to, main.anchor)));
            let end = this.toContextPos(main.head);
            if (this.editContext.selectionStart != start || this.editContext.selectionEnd != end)
                this.editContext.updateSelection(start, end);
        }
        rangeIsValid(state) {
            let { head } = state.selection.main;
            return !(this.from > 0 && head - this.from < 500 /* CxVp.MinMargin */ ||
                this.to < state.doc.length && this.to - head < 500 /* CxVp.MinMargin */ ||
                this.to - this.from > 10000 /* CxVp.Margin */ * 3);
        }
        toEditorPos(contextPos) { return contextPos + this.from; }
        toContextPos(editorPos) { return editorPos - this.from; }
        destroy() {
            for (let event in this.handlers)
                this.editContext.removeEventListener(event, this.handlers[event]);
        }
    }

    // The editor's update state machine looks something like this:
    //
    //     Idle → Updating ⇆ Idle (unchecked) → Measuring → Idle
    //                                         ↑      ↓
    //                                         Updating (measure)
    //
    // The difference between 'Idle' and 'Idle (unchecked)' lies in
    // whether a layout check has been scheduled. A regular update through
    // the `update` method updates the DOM in a write-only fashion, and
    // relies on a check (scheduled with `requestAnimationFrame`) to make
    // sure everything is where it should be and the viewport covers the
    // visible code. That check continues to measure and then optionally
    // update until it reaches a coherent state.
    /**
    An editor view represents the editor's user interface. It holds
    the editable DOM surface, and possibly other elements such as the
    line number gutter. It handles events and dispatches state
    transactions for editing actions.
    */
    class EditorView {
        /**
        The current editor state.
        */
        get state() { return this.viewState.state; }
        /**
        To be able to display large documents without consuming too much
        memory or overloading the browser, CodeMirror only draws the
        code that is visible (plus a margin around it) to the DOM. This
        property tells you the extent of the current drawn viewport, in
        document positions.
        */
        get viewport() { return this.viewState.viewport; }
        /**
        When there are, for example, large collapsed ranges in the
        viewport, its size can be a lot bigger than the actual visible
        content. Thus, if you are doing something like styling the
        content in the viewport, it is preferable to only do so for
        these ranges, which are the subset of the viewport that is
        actually drawn.
        */
        get visibleRanges() { return this.viewState.visibleRanges; }
        /**
        Returns false when the editor is entirely scrolled out of view
        or otherwise hidden.
        */
        get inView() { return this.viewState.inView; }
        /**
        Indicates whether the user is currently composing text via
        [IME](https://en.wikipedia.org/wiki/Input_method), and at least
        one change has been made in the current composition.
        */
        get composing() { return this.inputState.composing > 0; }
        /**
        Indicates whether the user is currently in composing state. Note
        that on some platforms, like Android, this will be the case a
        lot, since just putting the cursor on a word starts a
        composition there.
        */
        get compositionStarted() { return this.inputState.composing >= 0; }
        /**
        The document or shadow root that the view lives in.
        */
        get root() { return this._root; }
        /**
        @internal
        */
        get win() { return this.dom.ownerDocument.defaultView || window; }
        /**
        Construct a new view. You'll want to either provide a `parent`
        option, or put `view.dom` into your document after creating a
        view, so that the user can see the editor.
        */
        constructor(config = {}) {
            var _a;
            this.plugins = [];
            this.pluginMap = new Map;
            this.editorAttrs = {};
            this.contentAttrs = {};
            this.bidiCache = [];
            this.destroyed = false;
            /**
            @internal
            */
            this.updateState = 2 /* UpdateState.Updating */;
            /**
            @internal
            */
            this.measureScheduled = -1;
            /**
            @internal
            */
            this.measureRequests = [];
            this.contentDOM = document.createElement("div");
            this.scrollDOM = document.createElement("div");
            this.scrollDOM.tabIndex = -1;
            this.scrollDOM.className = "cm-scroller";
            this.scrollDOM.appendChild(this.contentDOM);
            this.announceDOM = document.createElement("div");
            this.announceDOM.className = "cm-announced";
            this.announceDOM.setAttribute("aria-live", "polite");
            this.dom = document.createElement("div");
            this.dom.appendChild(this.announceDOM);
            this.dom.appendChild(this.scrollDOM);
            if (config.parent)
                config.parent.appendChild(this.dom);
            let { dispatch } = config;
            this.dispatchTransactions = config.dispatchTransactions ||
                (dispatch && ((trs) => trs.forEach(tr => dispatch(tr, this)))) ||
                ((trs) => this.update(trs));
            this.dispatch = this.dispatch.bind(this);
            this._root = (config.root || getRoot(config.parent) || document);
            this.viewState = new ViewState(config.state || EditorState.create(config));
            if (config.scrollTo && config.scrollTo.is(scrollIntoView$1))
                this.viewState.scrollTarget = config.scrollTo.value.clip(this.viewState.state);
            this.plugins = this.state.facet(viewPlugin).map(spec => new PluginInstance(spec));
            for (let plugin of this.plugins)
                plugin.update(this);
            this.observer = new DOMObserver(this);
            this.inputState = new InputState(this);
            this.inputState.ensureHandlers(this.plugins);
            this.docView = new DocView(this);
            this.mountStyles();
            this.updateAttrs();
            this.updateState = 0 /* UpdateState.Idle */;
            this.requestMeasure();
            if ((_a = document.fonts) === null || _a === void 0 ? void 0 : _a.ready)
                document.fonts.ready.then(() => this.requestMeasure());
        }
        dispatch(...input) {
            let trs = input.length == 1 && input[0] instanceof Transaction ? input
                : input.length == 1 && Array.isArray(input[0]) ? input[0]
                    : [this.state.update(...input)];
            this.dispatchTransactions(trs, this);
        }
        /**
        Update the view for the given array of transactions. This will
        update the visible document and selection to match the state
        produced by the transactions, and notify view plugins of the
        change. You should usually call
        [`dispatch`](https://codemirror.net/6/docs/ref/#view.EditorView.dispatch) instead, which uses this
        as a primitive.
        */
        update(transactions) {
            if (this.updateState != 0 /* UpdateState.Idle */)
                throw new Error("Calls to EditorView.update are not allowed while an update is in progress");
            let redrawn = false, attrsChanged = false, update;
            let state = this.state;
            for (let tr of transactions) {
                if (tr.startState != state)
                    throw new RangeError("Trying to update state with a transaction that doesn't start from the previous state.");
                state = tr.state;
            }
            if (this.destroyed) {
                this.viewState.state = state;
                return;
            }
            let focus = this.hasFocus, focusFlag = 0, dispatchFocus = null;
            if (transactions.some(tr => tr.annotation(isFocusChange))) {
                this.inputState.notifiedFocused = focus;
                // If a focus-change transaction is being dispatched, set this update flag.
                focusFlag = 1 /* UpdateFlag.Focus */;
            }
            else if (focus != this.inputState.notifiedFocused) {
                this.inputState.notifiedFocused = focus;
                // Schedule a separate focus transaction if necessary, otherwise
                // add a flag to this update
                dispatchFocus = focusChangeTransaction(state, focus);
                if (!dispatchFocus)
                    focusFlag = 1 /* UpdateFlag.Focus */;
            }
            // If there was a pending DOM change, eagerly read it and try to
            // apply it after the given transactions.
            let pendingKey = this.observer.delayedAndroidKey, domChange = null;
            if (pendingKey) {
                this.observer.clearDelayedAndroidKey();
                domChange = this.observer.readChange();
                // Only try to apply DOM changes if the transactions didn't
                // change the doc or selection.
                if (domChange && !this.state.doc.eq(state.doc) || !this.state.selection.eq(state.selection))
                    domChange = null;
            }
            else {
                this.observer.clear();
            }
            // When the phrases change, redraw the editor
            if (state.facet(EditorState.phrases) != this.state.facet(EditorState.phrases))
                return this.setState(state);
            update = ViewUpdate.create(this, state, transactions);
            update.flags |= focusFlag;
            let scrollTarget = this.viewState.scrollTarget;
            try {
                this.updateState = 2 /* UpdateState.Updating */;
                for (let tr of transactions) {
                    if (scrollTarget)
                        scrollTarget = scrollTarget.map(tr.changes);
                    if (tr.scrollIntoView) {
                        let { main } = tr.state.selection;
                        scrollTarget = new ScrollTarget(main.empty ? main : EditorSelection.cursor(main.head, main.head > main.anchor ? -1 : 1));
                    }
                    for (let e of tr.effects)
                        if (e.is(scrollIntoView$1))
                            scrollTarget = e.value.clip(this.state);
                }
                this.viewState.update(update, scrollTarget);
                this.bidiCache = CachedOrder.update(this.bidiCache, update.changes);
                if (!update.empty) {
                    this.updatePlugins(update);
                    this.inputState.update(update);
                }
                redrawn = this.docView.update(update);
                if (this.state.facet(styleModule) != this.styleModules)
                    this.mountStyles();
                attrsChanged = this.updateAttrs();
                this.showAnnouncements(transactions);
                this.docView.updateSelection(redrawn, transactions.some(tr => tr.isUserEvent("select.pointer")));
            }
            finally {
                this.updateState = 0 /* UpdateState.Idle */;
            }
            if (update.startState.facet(theme$1) != update.state.facet(theme$1))
                this.viewState.mustMeasureContent = true;
            if (redrawn || attrsChanged || scrollTarget || this.viewState.mustEnforceCursorAssoc || this.viewState.mustMeasureContent)
                this.requestMeasure();
            if (redrawn)
                this.docViewUpdate();
            if (!update.empty)
                for (let listener of this.state.facet(updateListener)) {
                    try {
                        listener(update);
                    }
                    catch (e) {
                        logException(this.state, e, "update listener");
                    }
                }
            if (dispatchFocus || domChange)
                Promise.resolve().then(() => {
                    if (dispatchFocus && this.state == dispatchFocus.startState)
                        this.dispatch(dispatchFocus);
                    if (domChange) {
                        if (!applyDOMChange(this, domChange) && pendingKey.force)
                            dispatchKey(this.contentDOM, pendingKey.key, pendingKey.keyCode);
                    }
                });
        }
        /**
        Reset the view to the given state. (This will cause the entire
        document to be redrawn and all view plugins to be reinitialized,
        so you should probably only use it when the new state isn't
        derived from the old state. Otherwise, use
        [`dispatch`](https://codemirror.net/6/docs/ref/#view.EditorView.dispatch) instead.)
        */
        setState(newState) {
            if (this.updateState != 0 /* UpdateState.Idle */)
                throw new Error("Calls to EditorView.setState are not allowed while an update is in progress");
            if (this.destroyed) {
                this.viewState.state = newState;
                return;
            }
            this.updateState = 2 /* UpdateState.Updating */;
            let hadFocus = this.hasFocus;
            try {
                for (let plugin of this.plugins)
                    plugin.destroy(this);
                this.viewState = new ViewState(newState);
                this.plugins = newState.facet(viewPlugin).map(spec => new PluginInstance(spec));
                this.pluginMap.clear();
                for (let plugin of this.plugins)
                    plugin.update(this);
                this.docView.destroy();
                this.docView = new DocView(this);
                this.inputState.ensureHandlers(this.plugins);
                this.mountStyles();
                this.updateAttrs();
                this.bidiCache = [];
            }
            finally {
                this.updateState = 0 /* UpdateState.Idle */;
            }
            if (hadFocus)
                this.focus();
            this.requestMeasure();
        }
        updatePlugins(update) {
            let prevSpecs = update.startState.facet(viewPlugin), specs = update.state.facet(viewPlugin);
            if (prevSpecs != specs) {
                let newPlugins = [];
                for (let spec of specs) {
                    let found = prevSpecs.indexOf(spec);
                    if (found < 0) {
                        newPlugins.push(new PluginInstance(spec));
                    }
                    else {
                        let plugin = this.plugins[found];
                        plugin.mustUpdate = update;
                        newPlugins.push(plugin);
                    }
                }
                for (let plugin of this.plugins)
                    if (plugin.mustUpdate != update)
                        plugin.destroy(this);
                this.plugins = newPlugins;
                this.pluginMap.clear();
            }
            else {
                for (let p of this.plugins)
                    p.mustUpdate = update;
            }
            for (let i = 0; i < this.plugins.length; i++)
                this.plugins[i].update(this);
            if (prevSpecs != specs)
                this.inputState.ensureHandlers(this.plugins);
        }
        docViewUpdate() {
            for (let plugin of this.plugins) {
                let val = plugin.value;
                if (val && val.docViewUpdate) {
                    try {
                        val.docViewUpdate(this);
                    }
                    catch (e) {
                        logException(this.state, e, "doc view update listener");
                    }
                }
            }
        }
        /**
        @internal
        */
        measure(flush = true) {
            if (this.destroyed)
                return;
            if (this.measureScheduled > -1)
                this.win.cancelAnimationFrame(this.measureScheduled);
            if (this.observer.delayedAndroidKey) {
                this.measureScheduled = -1;
                this.requestMeasure();
                return;
            }
            this.measureScheduled = 0; // Prevent requestMeasure calls from scheduling another animation frame
            if (flush)
                this.observer.forceFlush();
            let updated = null;
            let sDOM = this.scrollDOM, scrollTop = sDOM.scrollTop * this.scaleY;
            let { scrollAnchorPos, scrollAnchorHeight } = this.viewState;
            if (Math.abs(scrollTop - this.viewState.scrollTop) > 1)
                scrollAnchorHeight = -1;
            this.viewState.scrollAnchorHeight = -1;
            try {
                for (let i = 0;; i++) {
                    if (scrollAnchorHeight < 0) {
                        if (isScrolledToBottom(sDOM)) {
                            scrollAnchorPos = -1;
                            scrollAnchorHeight = this.viewState.heightMap.height;
                        }
                        else {
                            let block = this.viewState.scrollAnchorAt(scrollTop);
                            scrollAnchorPos = block.from;
                            scrollAnchorHeight = block.top;
                        }
                    }
                    this.updateState = 1 /* UpdateState.Measuring */;
                    let changed = this.viewState.measure(this);
                    if (!changed && !this.measureRequests.length && this.viewState.scrollTarget == null)
                        break;
                    if (i > 5) {
                        console.warn(this.measureRequests.length
                            ? "Measure loop restarted more than 5 times"
                            : "Viewport failed to stabilize");
                        break;
                    }
                    let measuring = [];
                    // Only run measure requests in this cycle when the viewport didn't change
                    if (!(changed & 4 /* UpdateFlag.Viewport */))
                        [this.measureRequests, measuring] = [measuring, this.measureRequests];
                    let measured = measuring.map(m => {
                        try {
                            return m.read(this);
                        }
                        catch (e) {
                            logException(this.state, e);
                            return BadMeasure;
                        }
                    });
                    let update = ViewUpdate.create(this, this.state, []), redrawn = false;
                    update.flags |= changed;
                    if (!updated)
                        updated = update;
                    else
                        updated.flags |= changed;
                    this.updateState = 2 /* UpdateState.Updating */;
                    if (!update.empty) {
                        this.updatePlugins(update);
                        this.inputState.update(update);
                        this.updateAttrs();
                        redrawn = this.docView.update(update);
                        if (redrawn)
                            this.docViewUpdate();
                    }
                    for (let i = 0; i < measuring.length; i++)
                        if (measured[i] != BadMeasure) {
                            try {
                                let m = measuring[i];
                                if (m.write)
                                    m.write(measured[i], this);
                            }
                            catch (e) {
                                logException(this.state, e);
                            }
                        }
                    if (redrawn)
                        this.docView.updateSelection(true);
                    if (!update.viewportChanged && this.measureRequests.length == 0) {
                        if (this.viewState.editorHeight) {
                            if (this.viewState.scrollTarget) {
                                this.docView.scrollIntoView(this.viewState.scrollTarget);
                                this.viewState.scrollTarget = null;
                                scrollAnchorHeight = -1;
                                continue;
                            }
                            else {
                                let newAnchorHeight = scrollAnchorPos < 0 ? this.viewState.heightMap.height :
                                    this.viewState.lineBlockAt(scrollAnchorPos).top;
                                let diff = newAnchorHeight - scrollAnchorHeight;
                                if (diff > 1 || diff < -1) {
                                    scrollTop = scrollTop + diff;
                                    sDOM.scrollTop = scrollTop / this.scaleY;
                                    scrollAnchorHeight = -1;
                                    continue;
                                }
                            }
                        }
                        break;
                    }
                }
            }
            finally {
                this.updateState = 0 /* UpdateState.Idle */;
                this.measureScheduled = -1;
            }
            if (updated && !updated.empty)
                for (let listener of this.state.facet(updateListener))
                    listener(updated);
        }
        /**
        Get the CSS classes for the currently active editor themes.
        */
        get themeClasses() {
            return baseThemeID + " " +
                (this.state.facet(darkTheme) ? baseDarkID : baseLightID) + " " +
                this.state.facet(theme$1);
        }
        updateAttrs() {
            let editorAttrs = attrsFromFacet(this, editorAttributes, {
                class: "cm-editor" + (this.hasFocus ? " cm-focused " : " ") + this.themeClasses
            });
            let contentAttrs = {
                spellcheck: "false",
                autocorrect: "off",
                autocapitalize: "off",
                translate: "no",
                contenteditable: !this.state.facet(editable$1) ? "false" : "true",
                class: "cm-content",
                style: `${browser.tabSize}: ${this.state.tabSize}`,
                role: "textbox",
                "aria-multiline": "true"
            };
            if (this.state.readOnly)
                contentAttrs["aria-readonly"] = "true";
            attrsFromFacet(this, contentAttributes, contentAttrs);
            let changed = this.observer.ignore(() => {
                let changedContent = updateAttrs(this.contentDOM, this.contentAttrs, contentAttrs);
                let changedEditor = updateAttrs(this.dom, this.editorAttrs, editorAttrs);
                return changedContent || changedEditor;
            });
            this.editorAttrs = editorAttrs;
            this.contentAttrs = contentAttrs;
            return changed;
        }
        showAnnouncements(trs) {
            let first = true;
            for (let tr of trs)
                for (let effect of tr.effects)
                    if (effect.is(EditorView.announce)) {
                        if (first)
                            this.announceDOM.textContent = "";
                        first = false;
                        let div = this.announceDOM.appendChild(document.createElement("div"));
                        div.textContent = effect.value;
                    }
        }
        mountStyles() {
            this.styleModules = this.state.facet(styleModule);
            let nonce = this.state.facet(EditorView.cspNonce);
            StyleModule.mount(this.root, this.styleModules.concat(baseTheme$1$1).reverse(), nonce ? { nonce } : undefined);
        }
        readMeasured() {
            if (this.updateState == 2 /* UpdateState.Updating */)
                throw new Error("Reading the editor layout isn't allowed during an update");
            if (this.updateState == 0 /* UpdateState.Idle */ && this.measureScheduled > -1)
                this.measure(false);
        }
        /**
        Schedule a layout measurement, optionally providing callbacks to
        do custom DOM measuring followed by a DOM write phase. Using
        this is preferable reading DOM layout directly from, for
        example, an event handler, because it'll make sure measuring and
        drawing done by other components is synchronized, avoiding
        unnecessary DOM layout computations.
        */
        requestMeasure(request) {
            if (this.measureScheduled < 0)
                this.measureScheduled = this.win.requestAnimationFrame(() => this.measure());
            if (request) {
                if (this.measureRequests.indexOf(request) > -1)
                    return;
                if (request.key != null)
                    for (let i = 0; i < this.measureRequests.length; i++) {
                        if (this.measureRequests[i].key === request.key) {
                            this.measureRequests[i] = request;
                            return;
                        }
                    }
                this.measureRequests.push(request);
            }
        }
        /**
        Get the value of a specific plugin, if present. Note that
        plugins that crash can be dropped from a view, so even when you
        know you registered a given plugin, it is recommended to check
        the return value of this method.
        */
        plugin(plugin) {
            let known = this.pluginMap.get(plugin);
            if (known === undefined || known && known.spec != plugin)
                this.pluginMap.set(plugin, known = this.plugins.find(p => p.spec == plugin) || null);
            return known && known.update(this).value;
        }
        /**
        The top position of the document, in screen coordinates. This
        may be negative when the editor is scrolled down. Points
        directly to the top of the first line, not above the padding.
        */
        get documentTop() {
            return this.contentDOM.getBoundingClientRect().top + this.viewState.paddingTop;
        }
        /**
        Reports the padding above and below the document.
        */
        get documentPadding() {
            return { top: this.viewState.paddingTop, bottom: this.viewState.paddingBottom };
        }
        /**
        If the editor is transformed with CSS, this provides the scale
        along the X axis. Otherwise, it will just be 1. Note that
        transforms other than translation and scaling are not supported.
        */
        get scaleX() { return this.viewState.scaleX; }
        /**
        Provide the CSS transformed scale along the Y axis.
        */
        get scaleY() { return this.viewState.scaleY; }
        /**
        Find the text line or block widget at the given vertical
        position (which is interpreted as relative to the [top of the
        document](https://codemirror.net/6/docs/ref/#view.EditorView.documentTop)).
        */
        elementAtHeight(height) {
            this.readMeasured();
            return this.viewState.elementAtHeight(height);
        }
        /**
        Find the line block (see
        [`lineBlockAt`](https://codemirror.net/6/docs/ref/#view.EditorView.lineBlockAt) at the given
        height, again interpreted relative to the [top of the
        document](https://codemirror.net/6/docs/ref/#view.EditorView.documentTop).
        */
        lineBlockAtHeight(height) {
            this.readMeasured();
            return this.viewState.lineBlockAtHeight(height);
        }
        /**
        Get the extent and vertical position of all [line
        blocks](https://codemirror.net/6/docs/ref/#view.EditorView.lineBlockAt) in the viewport. Positions
        are relative to the [top of the
        document](https://codemirror.net/6/docs/ref/#view.EditorView.documentTop);
        */
        get viewportLineBlocks() {
            return this.viewState.viewportLines;
        }
        /**
        Find the line block around the given document position. A line
        block is a range delimited on both sides by either a
        non-[hidden](https://codemirror.net/6/docs/ref/#view.Decoration^replace) line break, or the
        start/end of the document. It will usually just hold a line of
        text, but may be broken into multiple textblocks by block
        widgets.
        */
        lineBlockAt(pos) {
            return this.viewState.lineBlockAt(pos);
        }
        /**
        The editor's total content height.
        */
        get contentHeight() {
            return this.viewState.contentHeight;
        }
        /**
        Move a cursor position by [grapheme
        cluster](https://codemirror.net/6/docs/ref/#state.findClusterBreak). `forward` determines whether
        the motion is away from the line start, or towards it. In
        bidirectional text, the line is traversed in visual order, using
        the editor's [text direction](https://codemirror.net/6/docs/ref/#view.EditorView.textDirection).
        When the start position was the last one on the line, the
        returned position will be across the line break. If there is no
        further line, the original position is returned.

        By default, this method moves over a single cluster. The
        optional `by` argument can be used to move across more. It will
        be called with the first cluster as argument, and should return
        a predicate that determines, for each subsequent cluster,
        whether it should also be moved over.
        */
        moveByChar(start, forward, by) {
            return skipAtoms(this, start, moveByChar(this, start, forward, by));
        }
        /**
        Move a cursor position across the next group of either
        [letters](https://codemirror.net/6/docs/ref/#state.EditorState.charCategorizer) or non-letter
        non-whitespace characters.
        */
        moveByGroup(start, forward) {
            return skipAtoms(this, start, moveByChar(this, start, forward, initial => byGroup(this, start.head, initial)));
        }
        /**
        Get the cursor position visually at the start or end of a line.
        Note that this may differ from the _logical_ position at its
        start or end (which is simply at `line.from`/`line.to`) if text
        at the start or end goes against the line's base text direction.
        */
        visualLineSide(line, end) {
            let order = this.bidiSpans(line), dir = this.textDirectionAt(line.from);
            let span = order[end ? order.length - 1 : 0];
            return EditorSelection.cursor(span.side(end, dir) + line.from, span.forward(!end, dir) ? 1 : -1);
        }
        /**
        Move to the next line boundary in the given direction. If
        `includeWrap` is true, line wrapping is on, and there is a
        further wrap point on the current line, the wrap point will be
        returned. Otherwise this function will return the start or end
        of the line.
        */
        moveToLineBoundary(start, forward, includeWrap = true) {
            return moveToLineBoundary(this, start, forward, includeWrap);
        }
        /**
        Move a cursor position vertically. When `distance` isn't given,
        it defaults to moving to the next line (including wrapped
        lines). Otherwise, `distance` should provide a positive distance
        in pixels.

        When `start` has a
        [`goalColumn`](https://codemirror.net/6/docs/ref/#state.SelectionRange.goalColumn), the vertical
        motion will use that as a target horizontal position. Otherwise,
        the cursor's own horizontal position is used. The returned
        cursor will have its goal column set to whichever column was
        used.
        */
        moveVertically(start, forward, distance) {
            return skipAtoms(this, start, moveVertically(this, start, forward, distance));
        }
        /**
        Find the DOM parent node and offset (child offset if `node` is
        an element, character offset when it is a text node) at the
        given document position.

        Note that for positions that aren't currently in
        `visibleRanges`, the resulting DOM position isn't necessarily
        meaningful (it may just point before or after a placeholder
        element).
        */
        domAtPos(pos) {
            return this.docView.domAtPos(pos);
        }
        /**
        Find the document position at the given DOM node. Can be useful
        for associating positions with DOM events. Will raise an error
        when `node` isn't part of the editor content.
        */
        posAtDOM(node, offset = 0) {
            return this.docView.posFromDOM(node, offset);
        }
        posAtCoords(coords, precise = true) {
            this.readMeasured();
            return posAtCoords(this, coords, precise);
        }
        /**
        Get the screen coordinates at the given document position.
        `side` determines whether the coordinates are based on the
        element before (-1) or after (1) the position (if no element is
        available on the given side, the method will transparently use
        another strategy to get reasonable coordinates).
        */
        coordsAtPos(pos, side = 1) {
            this.readMeasured();
            let rect = this.docView.coordsAt(pos, side);
            if (!rect || rect.left == rect.right)
                return rect;
            let line = this.state.doc.lineAt(pos), order = this.bidiSpans(line);
            let span = order[BidiSpan.find(order, pos - line.from, -1, side)];
            return flattenRect(rect, (span.dir == Direction.LTR) == (side > 0));
        }
        /**
        Return the rectangle around a given character. If `pos` does not
        point in front of a character that is in the viewport and
        rendered (i.e. not replaced, not a line break), this will return
        null. For space characters that are a line wrap point, this will
        return the position before the line break.
        */
        coordsForChar(pos) {
            this.readMeasured();
            return this.docView.coordsForChar(pos);
        }
        /**
        The default width of a character in the editor. May not
        accurately reflect the width of all characters (given variable
        width fonts or styling of invididual ranges).
        */
        get defaultCharacterWidth() { return this.viewState.heightOracle.charWidth; }
        /**
        The default height of a line in the editor. May not be accurate
        for all lines.
        */
        get defaultLineHeight() { return this.viewState.heightOracle.lineHeight; }
        /**
        The text direction
        ([`direction`](https://developer.mozilla.org/en-US/docs/Web/CSS/direction)
        CSS property) of the editor's content element.
        */
        get textDirection() { return this.viewState.defaultTextDirection; }
        /**
        Find the text direction of the block at the given position, as
        assigned by CSS. If
        [`perLineTextDirection`](https://codemirror.net/6/docs/ref/#view.EditorView^perLineTextDirection)
        isn't enabled, or the given position is outside of the viewport,
        this will always return the same as
        [`textDirection`](https://codemirror.net/6/docs/ref/#view.EditorView.textDirection). Note that
        this may trigger a DOM layout.
        */
        textDirectionAt(pos) {
            let perLine = this.state.facet(perLineTextDirection);
            if (!perLine || pos < this.viewport.from || pos > this.viewport.to)
                return this.textDirection;
            this.readMeasured();
            return this.docView.textDirectionAt(pos);
        }
        /**
        Whether this editor [wraps lines](https://codemirror.net/6/docs/ref/#view.EditorView.lineWrapping)
        (as determined by the
        [`white-space`](https://developer.mozilla.org/en-US/docs/Web/CSS/white-space)
        CSS property of its content element).
        */
        get lineWrapping() { return this.viewState.heightOracle.lineWrapping; }
        /**
        Returns the bidirectional text structure of the given line
        (which should be in the current document) as an array of span
        objects. The order of these spans matches the [text
        direction](https://codemirror.net/6/docs/ref/#view.EditorView.textDirection)—if that is
        left-to-right, the leftmost spans come first, otherwise the
        rightmost spans come first.
        */
        bidiSpans(line) {
            if (line.length > MaxBidiLine)
                return trivialOrder(line.length);
            let dir = this.textDirectionAt(line.from), isolates;
            for (let entry of this.bidiCache) {
                if (entry.from == line.from && entry.dir == dir &&
                    (entry.fresh || isolatesEq(entry.isolates, isolates = getIsolatedRanges(this, line))))
                    return entry.order;
            }
            if (!isolates)
                isolates = getIsolatedRanges(this, line);
            let order = computeOrder(line.text, dir, isolates);
            this.bidiCache.push(new CachedOrder(line.from, line.to, dir, isolates, true, order));
            return order;
        }
        /**
        Check whether the editor has focus.
        */
        get hasFocus() {
            var _a;
            // Safari return false for hasFocus when the context menu is open
            // or closing, which leads us to ignore selection changes from the
            // context menu because it looks like the editor isn't focused.
            // This kludges around that.
            return (this.dom.ownerDocument.hasFocus() || browser.safari && ((_a = this.inputState) === null || _a === void 0 ? void 0 : _a.lastContextMenu) > Date.now() - 3e4) &&
                this.root.activeElement == this.contentDOM;
        }
        /**
        Put focus on the editor.
        */
        focus() {
            this.observer.ignore(() => {
                focusPreventScroll(this.contentDOM);
                this.docView.updateSelection();
            });
        }
        /**
        Update the [root](https://codemirror.net/6/docs/ref/##view.EditorViewConfig.root) in which the editor lives. This is only
        necessary when moving the editor's existing DOM to a new window or shadow root.
        */
        setRoot(root) {
            if (this._root != root) {
                this._root = root;
                this.observer.setWindow((root.nodeType == 9 ? root : root.ownerDocument).defaultView || window);
                this.mountStyles();
            }
        }
        /**
        Clean up this editor view, removing its element from the
        document, unregistering event handlers, and notifying
        plugins. The view instance can no longer be used after
        calling this.
        */
        destroy() {
            if (this.root.activeElement == this.contentDOM)
                this.contentDOM.blur();
            for (let plugin of this.plugins)
                plugin.destroy(this);
            this.plugins = [];
            this.inputState.destroy();
            this.docView.destroy();
            this.dom.remove();
            this.observer.destroy();
            if (this.measureScheduled > -1)
                this.win.cancelAnimationFrame(this.measureScheduled);
            this.destroyed = true;
        }
        /**
        Returns an effect that can be
        [added](https://codemirror.net/6/docs/ref/#state.TransactionSpec.effects) to a transaction to
        cause it to scroll the given position or range into view.
        */
        static scrollIntoView(pos, options = {}) {
            return scrollIntoView$1.of(new ScrollTarget(typeof pos == "number" ? EditorSelection.cursor(pos) : pos, options.y, options.x, options.yMargin, options.xMargin));
        }
        /**
        Return an effect that resets the editor to its current (at the
        time this method was called) scroll position. Note that this
        only affects the editor's own scrollable element, not parents.
        See also
        [`EditorViewConfig.scrollTo`](https://codemirror.net/6/docs/ref/#view.EditorViewConfig.scrollTo).

        The effect should be used with a document identical to the one
        it was created for. Failing to do so is not an error, but may
        not scroll to the expected position. You can
        [map](https://codemirror.net/6/docs/ref/#state.StateEffect.map) the effect to account for changes.
        */
        scrollSnapshot() {
            let { scrollTop, scrollLeft } = this.scrollDOM;
            let ref = this.viewState.scrollAnchorAt(scrollTop);
            return scrollIntoView$1.of(new ScrollTarget(EditorSelection.cursor(ref.from), "start", "start", ref.top - scrollTop, scrollLeft, true));
        }
        /**
        Enable or disable tab-focus mode, which disables key bindings
        for Tab and Shift-Tab, letting the browser's default
        focus-changing behavior go through instead. This is useful to
        prevent trapping keyboard users in your editor.

        Without argument, this toggles the mode. With a boolean, it
        enables (true) or disables it (false). Given a number, it
        temporarily enables the mode until that number of milliseconds
        have passed or another non-Tab key is pressed.
        */
        setTabFocusMode(to) {
            if (to == null)
                this.inputState.tabFocusMode = this.inputState.tabFocusMode < 0 ? 0 : -1;
            else if (typeof to == "boolean")
                this.inputState.tabFocusMode = to ? 0 : -1;
            else if (this.inputState.tabFocusMode != 0)
                this.inputState.tabFocusMode = Date.now() + to;
        }
        /**
        Returns an extension that can be used to add DOM event handlers.
        The value should be an object mapping event names to handler
        functions. For any given event, such functions are ordered by
        extension precedence, and the first handler to return true will
        be assumed to have handled that event, and no other handlers or
        built-in behavior will be activated for it. These are registered
        on the [content element](https://codemirror.net/6/docs/ref/#view.EditorView.contentDOM), except
        for `scroll` handlers, which will be called any time the
        editor's [scroll element](https://codemirror.net/6/docs/ref/#view.EditorView.scrollDOM) or one of
        its parent nodes is scrolled.
        */
        static domEventHandlers(handlers) {
            return ViewPlugin.define(() => ({}), { eventHandlers: handlers });
        }
        /**
        Create an extension that registers DOM event observers. Contrary
        to event [handlers](https://codemirror.net/6/docs/ref/#view.EditorView^domEventHandlers),
        observers can't be prevented from running by a higher-precedence
        handler returning true. They also don't prevent other handlers
        and observers from running when they return true, and should not
        call `preventDefault`.
        */
        static domEventObservers(observers) {
            return ViewPlugin.define(() => ({}), { eventObservers: observers });
        }
        /**
        Create a theme extension. The first argument can be a
        [`style-mod`](https://github.com/marijnh/style-mod#documentation)
        style spec providing the styles for the theme. These will be
        prefixed with a generated class for the style.

        Because the selectors will be prefixed with a scope class, rule
        that directly match the editor's [wrapper
        element](https://codemirror.net/6/docs/ref/#view.EditorView.dom)—to which the scope class will be
        added—need to be explicitly differentiated by adding an `&` to
        the selector for that element—for example
        `&.cm-focused`.

        When `dark` is set to true, the theme will be marked as dark,
        which will cause the `&dark` rules from [base
        themes](https://codemirror.net/6/docs/ref/#view.EditorView^baseTheme) to be used (as opposed to
        `&light` when a light theme is active).
        */
        static theme(spec, options) {
            let prefix = StyleModule.newName();
            let result = [theme$1.of(prefix), styleModule.of(buildTheme(`.${prefix}`, spec))];
            if (options && options.dark)
                result.push(darkTheme.of(true));
            return result;
        }
        /**
        Create an extension that adds styles to the base theme. Like
        with [`theme`](https://codemirror.net/6/docs/ref/#view.EditorView^theme), use `&` to indicate the
        place of the editor wrapper element when directly targeting
        that. You can also use `&dark` or `&light` instead to only
        target editors with a dark or light theme.
        */
        static baseTheme(spec) {
            return Prec.lowest(styleModule.of(buildTheme("." + baseThemeID, spec, lightDarkIDs)));
        }
        /**
        Retrieve an editor view instance from the view's DOM
        representation.
        */
        static findFromDOM(dom) {
            var _a;
            let content = dom.querySelector(".cm-content");
            let cView = content && ContentView.get(content) || ContentView.get(dom);
            return ((_a = cView === null || cView === void 0 ? void 0 : cView.rootView) === null || _a === void 0 ? void 0 : _a.view) || null;
        }
    }
    /**
    Facet to add a [style
    module](https://github.com/marijnh/style-mod#documentation) to
    an editor view. The view will ensure that the module is
    mounted in its [document
    root](https://codemirror.net/6/docs/ref/#view.EditorView.constructor^config.root).
    */
    EditorView.styleModule = styleModule;
    /**
    An input handler can override the way changes to the editable
    DOM content are handled. Handlers are passed the document
    positions between which the change was found, and the new
    content. When one returns true, no further input handlers are
    called and the default behavior is prevented.

    The `insert` argument can be used to get the default transaction
    that would be applied for this input. This can be useful when
    dispatching the custom behavior as a separate transaction.
    */
    EditorView.inputHandler = inputHandler$1;
    /**
    Functions provided in this facet will be used to transform text
    pasted or dropped into the editor.
    */
    EditorView.clipboardInputFilter = clipboardInputFilter;
    /**
    Transform text copied or dragged from the editor.
    */
    EditorView.clipboardOutputFilter = clipboardOutputFilter;
    /**
    Scroll handlers can override how things are scrolled into view.
    If they return `true`, no further handling happens for the
    scrolling. If they return false, the default scroll behavior is
    applied. Scroll handlers should never initiate editor updates.
    */
    EditorView.scrollHandler = scrollHandler;
    /**
    This facet can be used to provide functions that create effects
    to be dispatched when the editor's focus state changes.
    */
    EditorView.focusChangeEffect = focusChangeEffect;
    /**
    By default, the editor assumes all its content has the same
    [text direction](https://codemirror.net/6/docs/ref/#view.Direction). Configure this with a `true`
    value to make it read the text direction of every (rendered)
    line separately.
    */
    EditorView.perLineTextDirection = perLineTextDirection;
    /**
    Allows you to provide a function that should be called when the
    library catches an exception from an extension (mostly from view
    plugins, but may be used by other extensions to route exceptions
    from user-code-provided callbacks). This is mostly useful for
    debugging and logging. See [`logException`](https://codemirror.net/6/docs/ref/#view.logException).
    */
    EditorView.exceptionSink = exceptionSink;
    /**
    A facet that can be used to register a function to be called
    every time the view updates.
    */
    EditorView.updateListener = updateListener;
    /**
    Facet that controls whether the editor content DOM is editable.
    When its highest-precedence value is `false`, the element will
    not have its `contenteditable` attribute set. (Note that this
    doesn't affect API calls that change the editor content, even
    when those are bound to keys or buttons. See the
    [`readOnly`](https://codemirror.net/6/docs/ref/#state.EditorState.readOnly) facet for that.)
    */
    EditorView.editable = editable$1;
    /**
    Allows you to influence the way mouse selection happens. The
    functions in this facet will be called for a `mousedown` event
    on the editor, and can return an object that overrides the way a
    selection is computed from that mouse click or drag.
    */
    EditorView.mouseSelectionStyle = mouseSelectionStyle;
    /**
    Facet used to configure whether a given selection drag event
    should move or copy the selection. The given predicate will be
    called with the `mousedown` event, and can return `true` when
    the drag should move the content.
    */
    EditorView.dragMovesSelection = dragMovesSelection$1;
    /**
    Facet used to configure whether a given selecting click adds a
    new range to the existing selection or replaces it entirely. The
    default behavior is to check `event.metaKey` on macOS, and
    `event.ctrlKey` elsewhere.
    */
    EditorView.clickAddsSelectionRange = clickAddsSelectionRange;
    /**
    A facet that determines which [decorations](https://codemirror.net/6/docs/ref/#view.Decoration)
    are shown in the view. Decorations can be provided in two
    ways—directly, or via a function that takes an editor view.

    Only decoration sets provided directly are allowed to influence
    the editor's vertical layout structure. The ones provided as
    functions are called _after_ the new viewport has been computed,
    and thus **must not** introduce block widgets or replacing
    decorations that cover line breaks.

    If you want decorated ranges to behave like atomic units for
    cursor motion and deletion purposes, also provide the range set
    containing the decorations to
    [`EditorView.atomicRanges`](https://codemirror.net/6/docs/ref/#view.EditorView^atomicRanges).
    */
    EditorView.decorations = decorations;
    /**
    Facet that works much like
    [`decorations`](https://codemirror.net/6/docs/ref/#view.EditorView^decorations), but puts its
    inputs at the very bottom of the precedence stack, meaning mark
    decorations provided here will only be split by other, partially
    overlapping \`outerDecorations\` ranges, and wrap around all
    regular decorations. Use this for mark elements that should, as
    much as possible, remain in one piece.
    */
    EditorView.outerDecorations = outerDecorations;
    /**
    Used to provide ranges that should be treated as atoms as far as
    cursor motion is concerned. This causes methods like
    [`moveByChar`](https://codemirror.net/6/docs/ref/#view.EditorView.moveByChar) and
    [`moveVertically`](https://codemirror.net/6/docs/ref/#view.EditorView.moveVertically) (and the
    commands built on top of them) to skip across such regions when
    a selection endpoint would enter them. This does _not_ prevent
    direct programmatic [selection
    updates](https://codemirror.net/6/docs/ref/#state.TransactionSpec.selection) from moving into such
    regions.
    */
    EditorView.atomicRanges = atomicRanges;
    /**
    When range decorations add a `unicode-bidi: isolate` style, they
    should also include a
    [`bidiIsolate`](https://codemirror.net/6/docs/ref/#view.MarkDecorationSpec.bidiIsolate) property
    in their decoration spec, and be exposed through this facet, so
    that the editor can compute the proper text order. (Other values
    for `unicode-bidi`, except of course `normal`, are not
    supported.)
    */
    EditorView.bidiIsolatedRanges = bidiIsolatedRanges;
    /**
    Facet that allows extensions to provide additional scroll
    margins (space around the sides of the scrolling element that
    should be considered invisible). This can be useful when the
    plugin introduces elements that cover part of that element (for
    example a horizontally fixed gutter).
    */
    EditorView.scrollMargins = scrollMargins;
    /**
    This facet records whether a dark theme is active. The extension
    returned by [`theme`](https://codemirror.net/6/docs/ref/#view.EditorView^theme) automatically
    includes an instance of this when the `dark` option is set to
    true.
    */
    EditorView.darkTheme = darkTheme;
    /**
    Provides a Content Security Policy nonce to use when creating
    the style sheets for the editor. Holds the empty string when no
    nonce has been provided.
    */
    EditorView.cspNonce = /*@__PURE__*/Facet.define({ combine: values => values.length ? values[0] : "" });
    /**
    Facet that provides additional DOM attributes for the editor's
    editable DOM element.
    */
    EditorView.contentAttributes = contentAttributes;
    /**
    Facet that provides DOM attributes for the editor's outer
    element.
    */
    EditorView.editorAttributes = editorAttributes;
    /**
    An extension that enables line wrapping in the editor (by
    setting CSS `white-space` to `pre-wrap` in the content).
    */
    EditorView.lineWrapping = /*@__PURE__*/EditorView.contentAttributes.of({ "class": "cm-lineWrapping" });
    /**
    State effect used to include screen reader announcements in a
    transaction. These will be added to the DOM in a visually hidden
    element with `aria-live="polite"` set, and should be used to
    describe effects that are visually obvious but may not be
    noticed by screen reader users (such as moving to the next
    search match).
    */
    EditorView.announce = /*@__PURE__*/StateEffect.define();
    // Maximum line length for which we compute accurate bidi info
    const MaxBidiLine = 4096;
    const BadMeasure = {};
    class CachedOrder {
        constructor(from, to, dir, isolates, fresh, order) {
            this.from = from;
            this.to = to;
            this.dir = dir;
            this.isolates = isolates;
            this.fresh = fresh;
            this.order = order;
        }
        static update(cache, changes) {
            if (changes.empty && !cache.some(c => c.fresh))
                return cache;
            let result = [], lastDir = cache.length ? cache[cache.length - 1].dir : Direction.LTR;
            for (let i = Math.max(0, cache.length - 10); i < cache.length; i++) {
                let entry = cache[i];
                if (entry.dir == lastDir && !changes.touchesRange(entry.from, entry.to))
                    result.push(new CachedOrder(changes.mapPos(entry.from, 1), changes.mapPos(entry.to, -1), entry.dir, entry.isolates, false, entry.order));
            }
            return result;
        }
    }
    function attrsFromFacet(view, facet, base) {
        for (let sources = view.state.facet(facet), i = sources.length - 1; i >= 0; i--) {
            let source = sources[i], value = typeof source == "function" ? source(view) : source;
            if (value)
                combineAttrs(value, base);
        }
        return base;
    }

    const currentPlatform = browser.mac ? "mac" : browser.windows ? "win" : browser.linux ? "linux" : "key";
    function normalizeKeyName(name, platform) {
        const parts = name.split(/-(?!$)/);
        let result = parts[parts.length - 1];
        if (result == "Space")
            result = " ";
        let alt, ctrl, shift, meta;
        for (let i = 0; i < parts.length - 1; ++i) {
            const mod = parts[i];
            if (/^(cmd|meta|m)$/i.test(mod))
                meta = true;
            else if (/^a(lt)?$/i.test(mod))
                alt = true;
            else if (/^(c|ctrl|control)$/i.test(mod))
                ctrl = true;
            else if (/^s(hift)?$/i.test(mod))
                shift = true;
            else if (/^mod$/i.test(mod)) {
                if (platform == "mac")
                    meta = true;
                else
                    ctrl = true;
            }
            else
                throw new Error("Unrecognized modifier name: " + mod);
        }
        if (alt)
            result = "Alt-" + result;
        if (ctrl)
            result = "Ctrl-" + result;
        if (meta)
            result = "Meta-" + result;
        if (shift)
            result = "Shift-" + result;
        return result;
    }
    function modifiers(name, event, shift) {
        if (event.altKey)
            name = "Alt-" + name;
        if (event.ctrlKey)
            name = "Ctrl-" + name;
        if (event.metaKey)
            name = "Meta-" + name;
        if (shift !== false && event.shiftKey)
            name = "Shift-" + name;
        return name;
    }
    const handleKeyEvents = /*@__PURE__*/Prec.default(/*@__PURE__*/EditorView.domEventHandlers({
        keydown(event, view) {
            return runHandlers(getKeymap(view.state), event, view, "editor");
        }
    }));
    /**
    Facet used for registering keymaps.

    You can add multiple keymaps to an editor. Their priorities
    determine their precedence (the ones specified early or with high
    priority get checked first). When a handler has returned `true`
    for a given key, no further handlers are called.
    */
    const keymap = /*@__PURE__*/Facet.define({ enables: handleKeyEvents });
    const Keymaps = /*@__PURE__*/new WeakMap();
    // This is hidden behind an indirection, rather than directly computed
    // by the facet, to keep internal types out of the facet's type.
    function getKeymap(state) {
        let bindings = state.facet(keymap);
        let map = Keymaps.get(bindings);
        if (!map)
            Keymaps.set(bindings, map = buildKeymap(bindings.reduce((a, b) => a.concat(b), [])));
        return map;
    }
    let storedPrefix = null;
    const PrefixTimeout = 4000;
    function buildKeymap(bindings, platform = currentPlatform) {
        let bound = Object.create(null);
        let isPrefix = Object.create(null);
        let checkPrefix = (name, is) => {
            let current = isPrefix[name];
            if (current == null)
                isPrefix[name] = is;
            else if (current != is)
                throw new Error("Key binding " + name + " is used both as a regular binding and as a multi-stroke prefix");
        };
        let add = (scope, key, command, preventDefault, stopPropagation) => {
            var _a, _b;
            let scopeObj = bound[scope] || (bound[scope] = Object.create(null));
            let parts = key.split(/ (?!$)/).map(k => normalizeKeyName(k, platform));
            for (let i = 1; i < parts.length; i++) {
                let prefix = parts.slice(0, i).join(" ");
                checkPrefix(prefix, true);
                if (!scopeObj[prefix])
                    scopeObj[prefix] = {
                        preventDefault: true,
                        stopPropagation: false,
                        run: [(view) => {
                                let ourObj = storedPrefix = { view, prefix, scope };
                                setTimeout(() => { if (storedPrefix == ourObj)
                                    storedPrefix = null; }, PrefixTimeout);
                                return true;
                            }]
                    };
            }
            let full = parts.join(" ");
            checkPrefix(full, false);
            let binding = scopeObj[full] || (scopeObj[full] = {
                preventDefault: false,
                stopPropagation: false,
                run: ((_b = (_a = scopeObj._any) === null || _a === void 0 ? void 0 : _a.run) === null || _b === void 0 ? void 0 : _b.slice()) || []
            });
            if (command)
                binding.run.push(command);
            if (preventDefault)
                binding.preventDefault = true;
            if (stopPropagation)
                binding.stopPropagation = true;
        };
        for (let b of bindings) {
            let scopes = b.scope ? b.scope.split(" ") : ["editor"];
            if (b.any)
                for (let scope of scopes) {
                    let scopeObj = bound[scope] || (bound[scope] = Object.create(null));
                    if (!scopeObj._any)
                        scopeObj._any = { preventDefault: false, stopPropagation: false, run: [] };
                    let { any } = b;
                    for (let key in scopeObj)
                        scopeObj[key].run.push(view => any(view, currentKeyEvent));
                }
            let name = b[platform] || b.key;
            if (!name)
                continue;
            for (let scope of scopes) {
                add(scope, name, b.run, b.preventDefault, b.stopPropagation);
                if (b.shift)
                    add(scope, "Shift-" + name, b.shift, b.preventDefault, b.stopPropagation);
            }
        }
        return bound;
    }
    let currentKeyEvent = null;
    function runHandlers(map, event, view, scope) {
        currentKeyEvent = event;
        let name = keyName(event);
        let charCode = codePointAt(name, 0), isChar = codePointSize(charCode) == name.length && name != " ";
        let prefix = "", handled = false, prevented = false, stopPropagation = false;
        if (storedPrefix && storedPrefix.view == view && storedPrefix.scope == scope) {
            prefix = storedPrefix.prefix + " ";
            if (modifierCodes.indexOf(event.keyCode) < 0) {
                prevented = true;
                storedPrefix = null;
            }
        }
        let ran = new Set;
        let runFor = (binding) => {
            if (binding) {
                for (let cmd of binding.run)
                    if (!ran.has(cmd)) {
                        ran.add(cmd);
                        if (cmd(view)) {
                            if (binding.stopPropagation)
                                stopPropagation = true;
                            return true;
                        }
                    }
                if (binding.preventDefault) {
                    if (binding.stopPropagation)
                        stopPropagation = true;
                    prevented = true;
                }
            }
            return false;
        };
        let scopeObj = map[scope], baseName, shiftName;
        if (scopeObj) {
            if (runFor(scopeObj[prefix + modifiers(name, event, !isChar)])) {
                handled = true;
            }
            else if (isChar && (event.altKey || event.metaKey || event.ctrlKey) &&
                // Ctrl-Alt may be used for AltGr on Windows
                !(browser.windows && event.ctrlKey && event.altKey) &&
                (baseName = base[event.keyCode]) && baseName != name) {
                if (runFor(scopeObj[prefix + modifiers(baseName, event, true)])) {
                    handled = true;
                }
                else if (event.shiftKey && (shiftName = shift[event.keyCode]) != name && shiftName != baseName &&
                    runFor(scopeObj[prefix + modifiers(shiftName, event, false)])) {
                    handled = true;
                }
            }
            else if (isChar && event.shiftKey &&
                runFor(scopeObj[prefix + modifiers(name, event, true)])) {
                handled = true;
            }
            if (!handled && runFor(scopeObj._any))
                handled = true;
        }
        if (prevented)
            handled = true;
        if (handled && stopPropagation)
            event.stopPropagation();
        currentKeyEvent = null;
        return handled;
    }

    /**
    Implementation of [`LayerMarker`](https://codemirror.net/6/docs/ref/#view.LayerMarker) that creates
    a rectangle at a given set of coordinates.
    */
    class RectangleMarker {
        /**
        Create a marker with the given class and dimensions. If `width`
        is null, the DOM element will get no width style.
        */
        constructor(className,
        /**
        The left position of the marker (in pixels, document-relative).
        */
        left,
        /**
        The top position of the marker.
        */
        top,
        /**
        The width of the marker, or null if it shouldn't get a width assigned.
        */
        width,
        /**
        The height of the marker.
        */
        height) {
            this.className = className;
            this.left = left;
            this.top = top;
            this.width = width;
            this.height = height;
        }
        draw() {
            let elt = document.createElement("div");
            elt.className = this.className;
            this.adjust(elt);
            return elt;
        }
        update(elt, prev) {
            if (prev.className != this.className)
                return false;
            this.adjust(elt);
            return true;
        }
        adjust(elt) {
            elt.style.left = this.left + "px";
            elt.style.top = this.top + "px";
            if (this.width != null)
                elt.style.width = this.width + "px";
            elt.style.height = this.height + "px";
        }
        eq(p) {
            return this.left == p.left && this.top == p.top && this.width == p.width && this.height == p.height &&
                this.className == p.className;
        }
        /**
        Create a set of rectangles for the given selection range,
        assigning them theclass`className`. Will create a single
        rectangle for empty ranges, and a set of selection-style
        rectangles covering the range's content (in a bidi-aware
        way) for non-empty ones.
        */
        static forRange(view, className, range) {
            if (range.empty) {
                let pos = view.coordsAtPos(range.head, range.assoc || 1);
                if (!pos)
                    return [];
                let base = getBase(view);
                return [new RectangleMarker(className, pos.left - base.left, pos.top - base.top, null, pos.bottom - pos.top)];
            }
            else {
                return rectanglesForRange(view, className, range);
            }
        }
    }
    function getBase(view) {
        let rect = view.scrollDOM.getBoundingClientRect();
        let left = view.textDirection == Direction.LTR ? rect.left : rect.right - view.scrollDOM.clientWidth * view.scaleX;
        return { left: left - view.scrollDOM.scrollLeft * view.scaleX, top: rect.top - view.scrollDOM.scrollTop * view.scaleY };
    }
    function wrappedLine(view, pos, side, inside) {
        let coords = view.coordsAtPos(pos, side * 2);
        if (!coords)
            return inside;
        let editorRect = view.dom.getBoundingClientRect();
        let y = (coords.top + coords.bottom) / 2;
        let left = view.posAtCoords({ x: editorRect.left + 1, y });
        let right = view.posAtCoords({ x: editorRect.right - 1, y });
        if (left == null || right == null)
            return inside;
        return { from: Math.max(inside.from, Math.min(left, right)), to: Math.min(inside.to, Math.max(left, right)) };
    }
    function rectanglesForRange(view, className, range) {
        if (range.to <= view.viewport.from || range.from >= view.viewport.to)
            return [];
        let from = Math.max(range.from, view.viewport.from), to = Math.min(range.to, view.viewport.to);
        let ltr = view.textDirection == Direction.LTR;
        let content = view.contentDOM, contentRect = content.getBoundingClientRect(), base = getBase(view);
        let lineElt = content.querySelector(".cm-line"), lineStyle = lineElt && window.getComputedStyle(lineElt);
        let leftSide = contentRect.left +
            (lineStyle ? parseInt(lineStyle.paddingLeft) + Math.min(0, parseInt(lineStyle.textIndent)) : 0);
        let rightSide = contentRect.right - (lineStyle ? parseInt(lineStyle.paddingRight) : 0);
        let startBlock = blockAt(view, from), endBlock = blockAt(view, to);
        let visualStart = startBlock.type == BlockType.Text ? startBlock : null;
        let visualEnd = endBlock.type == BlockType.Text ? endBlock : null;
        if (visualStart && (view.lineWrapping || startBlock.widgetLineBreaks))
            visualStart = wrappedLine(view, from, 1, visualStart);
        if (visualEnd && (view.lineWrapping || endBlock.widgetLineBreaks))
            visualEnd = wrappedLine(view, to, -1, visualEnd);
        if (visualStart && visualEnd && visualStart.from == visualEnd.from && visualStart.to == visualEnd.to) {
            return pieces(drawForLine(range.from, range.to, visualStart));
        }
        else {
            let top = visualStart ? drawForLine(range.from, null, visualStart) : drawForWidget(startBlock, false);
            let bottom = visualEnd ? drawForLine(null, range.to, visualEnd) : drawForWidget(endBlock, true);
            let between = [];
            if ((visualStart || startBlock).to < (visualEnd || endBlock).from - (visualStart && visualEnd ? 1 : 0) ||
                startBlock.widgetLineBreaks > 1 && top.bottom + view.defaultLineHeight / 2 < bottom.top)
                between.push(piece(leftSide, top.bottom, rightSide, bottom.top));
            else if (top.bottom < bottom.top && view.elementAtHeight((top.bottom + bottom.top) / 2).type == BlockType.Text)
                top.bottom = bottom.top = (top.bottom + bottom.top) / 2;
            return pieces(top).concat(between).concat(pieces(bottom));
        }
        function piece(left, top, right, bottom) {
            return new RectangleMarker(className, left - base.left, top - base.top - 0.01 /* C.Epsilon */, right - left, bottom - top + 0.01 /* C.Epsilon */);
        }
        function pieces({ top, bottom, horizontal }) {
            let pieces = [];
            for (let i = 0; i < horizontal.length; i += 2)
                pieces.push(piece(horizontal[i], top, horizontal[i + 1], bottom));
            return pieces;
        }
        // Gets passed from/to in line-local positions
        function drawForLine(from, to, line) {
            let top = 1e9, bottom = -1e9, horizontal = [];
            function addSpan(from, fromOpen, to, toOpen, dir) {
                // Passing 2/-2 is a kludge to force the view to return
                // coordinates on the proper side of block widgets, since
                // normalizing the side there, though appropriate for most
                // coordsAtPos queries, would break selection drawing.
                let fromCoords = view.coordsAtPos(from, (from == line.to ? -2 : 2));
                let toCoords = view.coordsAtPos(to, (to == line.from ? 2 : -2));
                if (!fromCoords || !toCoords)
                    return;
                top = Math.min(fromCoords.top, toCoords.top, top);
                bottom = Math.max(fromCoords.bottom, toCoords.bottom, bottom);
                if (dir == Direction.LTR)
                    horizontal.push(ltr && fromOpen ? leftSide : fromCoords.left, ltr && toOpen ? rightSide : toCoords.right);
                else
                    horizontal.push(!ltr && toOpen ? leftSide : toCoords.left, !ltr && fromOpen ? rightSide : fromCoords.right);
            }
            let start = from !== null && from !== void 0 ? from : line.from, end = to !== null && to !== void 0 ? to : line.to;
            // Split the range by visible range and document line
            for (let r of view.visibleRanges)
                if (r.to > start && r.from < end) {
                    for (let pos = Math.max(r.from, start), endPos = Math.min(r.to, end);;) {
                        let docLine = view.state.doc.lineAt(pos);
                        for (let span of view.bidiSpans(docLine)) {
                            let spanFrom = span.from + docLine.from, spanTo = span.to + docLine.from;
                            if (spanFrom >= endPos)
                                break;
                            if (spanTo > pos)
                                addSpan(Math.max(spanFrom, pos), from == null && spanFrom <= start, Math.min(spanTo, endPos), to == null && spanTo >= end, span.dir);
                        }
                        pos = docLine.to + 1;
                        if (pos >= endPos)
                            break;
                    }
                }
            if (horizontal.length == 0)
                addSpan(start, from == null, end, to == null, view.textDirection);
            return { top, bottom, horizontal };
        }
        function drawForWidget(block, top) {
            let y = contentRect.top + (top ? block.top : block.bottom);
            return { top: y, bottom: y, horizontal: [] };
        }
    }
    function sameMarker(a, b) {
        return a.constructor == b.constructor && a.eq(b);
    }
    class LayerView {
        constructor(view, layer) {
            this.view = view;
            this.layer = layer;
            this.drawn = [];
            this.scaleX = 1;
            this.scaleY = 1;
            this.measureReq = { read: this.measure.bind(this), write: this.draw.bind(this) };
            this.dom = view.scrollDOM.appendChild(document.createElement("div"));
            this.dom.classList.add("cm-layer");
            if (layer.above)
                this.dom.classList.add("cm-layer-above");
            if (layer.class)
                this.dom.classList.add(layer.class);
            this.scale();
            this.dom.setAttribute("aria-hidden", "true");
            this.setOrder(view.state);
            view.requestMeasure(this.measureReq);
            if (layer.mount)
                layer.mount(this.dom, view);
        }
        update(update) {
            if (update.startState.facet(layerOrder) != update.state.facet(layerOrder))
                this.setOrder(update.state);
            if (this.layer.update(update, this.dom) || update.geometryChanged) {
                this.scale();
                update.view.requestMeasure(this.measureReq);
            }
        }
        docViewUpdate(view) {
            if (this.layer.updateOnDocViewUpdate !== false)
                view.requestMeasure(this.measureReq);
        }
        setOrder(state) {
            let pos = 0, order = state.facet(layerOrder);
            while (pos < order.length && order[pos] != this.layer)
                pos++;
            this.dom.style.zIndex = String((this.layer.above ? 150 : -1) - pos);
        }
        measure() {
            return this.layer.markers(this.view);
        }
        scale() {
            let { scaleX, scaleY } = this.view;
            if (scaleX != this.scaleX || scaleY != this.scaleY) {
                this.scaleX = scaleX;
                this.scaleY = scaleY;
                this.dom.style.transform = `scale(${1 / scaleX}, ${1 / scaleY})`;
            }
        }
        draw(markers) {
            if (markers.length != this.drawn.length || markers.some((p, i) => !sameMarker(p, this.drawn[i]))) {
                let old = this.dom.firstChild, oldI = 0;
                for (let marker of markers) {
                    if (marker.update && old && marker.constructor && this.drawn[oldI].constructor &&
                        marker.update(old, this.drawn[oldI])) {
                        old = old.nextSibling;
                        oldI++;
                    }
                    else {
                        this.dom.insertBefore(marker.draw(), old);
                    }
                }
                while (old) {
                    let next = old.nextSibling;
                    old.remove();
                    old = next;
                }
                this.drawn = markers;
            }
        }
        destroy() {
            if (this.layer.destroy)
                this.layer.destroy(this.dom, this.view);
            this.dom.remove();
        }
    }
    const layerOrder = /*@__PURE__*/Facet.define();
    /**
    Define a layer.
    */
    function layer(config) {
        return [
            ViewPlugin.define(v => new LayerView(v, config)),
            layerOrder.of(config)
        ];
    }

    const CanHidePrimary = !browser.ios; // FIXME test IE
    const selectionConfig = /*@__PURE__*/Facet.define({
        combine(configs) {
            return combineConfig(configs, {
                cursorBlinkRate: 1200,
                drawRangeCursor: true
            }, {
                cursorBlinkRate: (a, b) => Math.min(a, b),
                drawRangeCursor: (a, b) => a || b
            });
        }
    });
    /**
    Returns an extension that hides the browser's native selection and
    cursor, replacing the selection with a background behind the text
    (with the `cm-selectionBackground` class), and the
    cursors with elements overlaid over the code (using
    `cm-cursor-primary` and `cm-cursor-secondary`).

    This allows the editor to display secondary selection ranges, and
    tends to produce a type of selection more in line with that users
    expect in a text editor (the native selection styling will often
    leave gaps between lines and won't fill the horizontal space after
    a line when the selection continues past it).

    It does have a performance cost, in that it requires an extra DOM
    layout cycle for many updates (the selection is drawn based on DOM
    layout information that's only available after laying out the
    content).
    */
    function drawSelection(config = {}) {
        return [
            selectionConfig.of(config),
            cursorLayer,
            selectionLayer,
            hideNativeSelection,
            nativeSelectionHidden.of(true)
        ];
    }
    function configChanged(update) {
        return update.startState.facet(selectionConfig) != update.state.facet(selectionConfig);
    }
    const cursorLayer = /*@__PURE__*/layer({
        above: true,
        markers(view) {
            let { state } = view, conf = state.facet(selectionConfig);
            let cursors = [];
            for (let r of state.selection.ranges) {
                let prim = r == state.selection.main;
                if (r.empty ? !prim || CanHidePrimary : conf.drawRangeCursor) {
                    let className = prim ? "cm-cursor cm-cursor-primary" : "cm-cursor cm-cursor-secondary";
                    let cursor = r.empty ? r : EditorSelection.cursor(r.head, r.head > r.anchor ? -1 : 1);
                    for (let piece of RectangleMarker.forRange(view, className, cursor))
                        cursors.push(piece);
                }
            }
            return cursors;
        },
        update(update, dom) {
            if (update.transactions.some(tr => tr.selection))
                dom.style.animationName = dom.style.animationName == "cm-blink" ? "cm-blink2" : "cm-blink";
            let confChange = configChanged(update);
            if (confChange)
                setBlinkRate(update.state, dom);
            return update.docChanged || update.selectionSet || confChange;
        },
        mount(dom, view) {
            setBlinkRate(view.state, dom);
        },
        class: "cm-cursorLayer"
    });
    function setBlinkRate(state, dom) {
        dom.style.animationDuration = state.facet(selectionConfig).cursorBlinkRate + "ms";
    }
    const selectionLayer = /*@__PURE__*/layer({
        above: false,
        markers(view) {
            return view.state.selection.ranges.map(r => r.empty ? [] : RectangleMarker.forRange(view, "cm-selectionBackground", r))
                .reduce((a, b) => a.concat(b));
        },
        update(update, dom) {
            return update.docChanged || update.selectionSet || update.viewportChanged || configChanged(update);
        },
        class: "cm-selectionLayer"
    });
    const themeSpec = {
        ".cm-line": {
            "& ::selection, &::selection": { backgroundColor: "transparent !important" },
        },
        ".cm-content": {
            "& :focus": {
                caretColor: "initial !important",
                "&::selection, & ::selection": {
                    backgroundColor: "Highlight !important"
                }
            }
        }
    };
    if (CanHidePrimary)
        themeSpec[".cm-line"].caretColor = themeSpec[".cm-content"].caretColor = "transparent !important";
    const hideNativeSelection = /*@__PURE__*/Prec.highest(/*@__PURE__*/EditorView.theme(themeSpec));

    function iterMatches(doc, re, from, to, f) {
        re.lastIndex = 0;
        for (let cursor = doc.iterRange(from, to), pos = from, m; !cursor.next().done; pos += cursor.value.length) {
            if (!cursor.lineBreak)
                while (m = re.exec(cursor.value))
                    f(pos + m.index, m);
        }
    }
    function matchRanges(view, maxLength) {
        let visible = view.visibleRanges;
        if (visible.length == 1 && visible[0].from == view.viewport.from &&
            visible[0].to == view.viewport.to)
            return visible;
        let result = [];
        for (let { from, to } of visible) {
            from = Math.max(view.state.doc.lineAt(from).from, from - maxLength);
            to = Math.min(view.state.doc.lineAt(to).to, to + maxLength);
            if (result.length && result[result.length - 1].to >= from)
                result[result.length - 1].to = to;
            else
                result.push({ from, to });
        }
        return result;
    }
    /**
    Helper class used to make it easier to maintain decorations on
    visible code that matches a given regular expression. To be used
    in a [view plugin](https://codemirror.net/6/docs/ref/#view.ViewPlugin). Instances of this object
    represent a matching configuration.
    */
    class MatchDecorator {
        /**
        Create a decorator.
        */
        constructor(config) {
            const { regexp, decoration, decorate, boundary, maxLength = 1000 } = config;
            if (!regexp.global)
                throw new RangeError("The regular expression given to MatchDecorator should have its 'g' flag set");
            this.regexp = regexp;
            if (decorate) {
                this.addMatch = (match, view, from, add) => decorate(add, from, from + match[0].length, match, view);
            }
            else if (typeof decoration == "function") {
                this.addMatch = (match, view, from, add) => {
                    let deco = decoration(match, view, from);
                    if (deco)
                        add(from, from + match[0].length, deco);
                };
            }
            else if (decoration) {
                this.addMatch = (match, _view, from, add) => add(from, from + match[0].length, decoration);
            }
            else {
                throw new RangeError("Either 'decorate' or 'decoration' should be provided to MatchDecorator");
            }
            this.boundary = boundary;
            this.maxLength = maxLength;
        }
        /**
        Compute the full set of decorations for matches in the given
        view's viewport. You'll want to call this when initializing your
        plugin.
        */
        createDeco(view) {
            let build = new RangeSetBuilder(), add = build.add.bind(build);
            for (let { from, to } of matchRanges(view, this.maxLength))
                iterMatches(view.state.doc, this.regexp, from, to, (from, m) => this.addMatch(m, view, from, add));
            return build.finish();
        }
        /**
        Update a set of decorations for a view update. `deco` _must_ be
        the set of decorations produced by _this_ `MatchDecorator` for
        the view state before the update.
        */
        updateDeco(update, deco) {
            let changeFrom = 1e9, changeTo = -1;
            if (update.docChanged)
                update.changes.iterChanges((_f, _t, from, to) => {
                    if (to > update.view.viewport.from && from < update.view.viewport.to) {
                        changeFrom = Math.min(from, changeFrom);
                        changeTo = Math.max(to, changeTo);
                    }
                });
            if (update.viewportChanged || changeTo - changeFrom > 1000)
                return this.createDeco(update.view);
            if (changeTo > -1)
                return this.updateRange(update.view, deco.map(update.changes), changeFrom, changeTo);
            return deco;
        }
        updateRange(view, deco, updateFrom, updateTo) {
            for (let r of view.visibleRanges) {
                let from = Math.max(r.from, updateFrom), to = Math.min(r.to, updateTo);
                if (to > from) {
                    let fromLine = view.state.doc.lineAt(from), toLine = fromLine.to < to ? view.state.doc.lineAt(to) : fromLine;
                    let start = Math.max(r.from, fromLine.from), end = Math.min(r.to, toLine.to);
                    if (this.boundary) {
                        for (; from > fromLine.from; from--)
                            if (this.boundary.test(fromLine.text[from - 1 - fromLine.from])) {
                                start = from;
                                break;
                            }
                        for (; to < toLine.to; to++)
                            if (this.boundary.test(toLine.text[to - toLine.from])) {
                                end = to;
                                break;
                            }
                    }
                    let ranges = [], m;
                    let add = (from, to, deco) => ranges.push(deco.range(from, to));
                    if (fromLine == toLine) {
                        this.regexp.lastIndex = start - fromLine.from;
                        while ((m = this.regexp.exec(fromLine.text)) && m.index < end - fromLine.from)
                            this.addMatch(m, view, m.index + fromLine.from, add);
                    }
                    else {
                        iterMatches(view.state.doc, this.regexp, start, end, (from, m) => this.addMatch(m, view, from, add));
                    }
                    deco = deco.update({ filterFrom: start, filterTo: end, filter: (from, to) => from < start || to > end, add: ranges });
                }
            }
            return deco;
        }
    }

    const UnicodeRegexpSupport = /x/.unicode != null ? "gu" : "g";
    const Specials = /*@__PURE__*/new RegExp("[\u0000-\u0008\u000a-\u001f\u007f-\u009f\u00ad\u061c\u200b\u200e\u200f\u2028\u2029\u202d\u202e\u2066\u2067\u2069\ufeff\ufff9-\ufffc]", UnicodeRegexpSupport);
    const Names = {
        0: "null",
        7: "bell",
        8: "backspace",
        10: "newline",
        11: "vertical tab",
        13: "carriage return",
        27: "escape",
        8203: "zero width space",
        8204: "zero width non-joiner",
        8205: "zero width joiner",
        8206: "left-to-right mark",
        8207: "right-to-left mark",
        8232: "line separator",
        8237: "left-to-right override",
        8238: "right-to-left override",
        8294: "left-to-right isolate",
        8295: "right-to-left isolate",
        8297: "pop directional isolate",
        8233: "paragraph separator",
        65279: "zero width no-break space",
        65532: "object replacement"
    };
    let _supportsTabSize = null;
    function supportsTabSize() {
        var _a;
        if (_supportsTabSize == null && typeof document != "undefined" && document.body) {
            let styles = document.body.style;
            _supportsTabSize = ((_a = styles.tabSize) !== null && _a !== void 0 ? _a : styles.MozTabSize) != null;
        }
        return _supportsTabSize || false;
    }
    const specialCharConfig = /*@__PURE__*/Facet.define({
        combine(configs) {
            let config = combineConfig(configs, {
                render: null,
                specialChars: Specials,
                addSpecialChars: null
            });
            if (config.replaceTabs = !supportsTabSize())
                config.specialChars = new RegExp("\t|" + config.specialChars.source, UnicodeRegexpSupport);
            if (config.addSpecialChars)
                config.specialChars = new RegExp(config.specialChars.source + "|" + config.addSpecialChars.source, UnicodeRegexpSupport);
            return config;
        }
    });
    /**
    Returns an extension that installs highlighting of special
    characters.
    */
    function highlightSpecialChars(
    /**
    Configuration options.
    */
    config = {}) {
        return [specialCharConfig.of(config), specialCharPlugin()];
    }
    let _plugin = null;
    function specialCharPlugin() {
        return _plugin || (_plugin = ViewPlugin.fromClass(class {
            constructor(view) {
                this.view = view;
                this.decorations = Decoration.none;
                this.decorationCache = Object.create(null);
                this.decorator = this.makeDecorator(view.state.facet(specialCharConfig));
                this.decorations = this.decorator.createDeco(view);
            }
            makeDecorator(conf) {
                return new MatchDecorator({
                    regexp: conf.specialChars,
                    decoration: (m, view, pos) => {
                        let { doc } = view.state;
                        let code = codePointAt(m[0], 0);
                        if (code == 9) {
                            let line = doc.lineAt(pos);
                            let size = view.state.tabSize, col = countColumn(line.text, size, pos - line.from);
                            return Decoration.replace({
                                widget: new TabWidget((size - (col % size)) * this.view.defaultCharacterWidth / this.view.scaleX)
                            });
                        }
                        return this.decorationCache[code] ||
                            (this.decorationCache[code] = Decoration.replace({ widget: new SpecialCharWidget(conf, code) }));
                    },
                    boundary: conf.replaceTabs ? undefined : /[^]/
                });
            }
            update(update) {
                let conf = update.state.facet(specialCharConfig);
                if (update.startState.facet(specialCharConfig) != conf) {
                    this.decorator = this.makeDecorator(conf);
                    this.decorations = this.decorator.createDeco(update.view);
                }
                else {
                    this.decorations = this.decorator.updateDeco(update, this.decorations);
                }
            }
        }, {
            decorations: v => v.decorations
        }));
    }
    const DefaultPlaceholder = "\u2022";
    // Assigns placeholder characters from the Control Pictures block to
    // ASCII control characters
    function placeholder$1(code) {
        if (code >= 32)
            return DefaultPlaceholder;
        if (code == 10)
            return "\u2424";
        return String.fromCharCode(9216 + code);
    }
    class SpecialCharWidget extends WidgetType {
        constructor(options, code) {
            super();
            this.options = options;
            this.code = code;
        }
        eq(other) { return other.code == this.code; }
        toDOM(view) {
            let ph = placeholder$1(this.code);
            let desc = view.state.phrase("Control character") + " " + (Names[this.code] || "0x" + this.code.toString(16));
            let custom = this.options.render && this.options.render(this.code, desc, ph);
            if (custom)
                return custom;
            let span = document.createElement("span");
            span.textContent = ph;
            span.title = desc;
            span.setAttribute("aria-label", desc);
            span.className = "cm-specialChar";
            return span;
        }
        ignoreEvent() { return false; }
    }
    class TabWidget extends WidgetType {
        constructor(width) {
            super();
            this.width = width;
        }
        eq(other) { return other.width == this.width; }
        toDOM() {
            let span = document.createElement("span");
            span.textContent = "\t";
            span.className = "cm-tab";
            span.style.width = this.width + "px";
            return span;
        }
        ignoreEvent() { return false; }
    }

    /**
    Mark lines that have a cursor on them with the `"cm-activeLine"`
    DOM class.
    */
    function highlightActiveLine() {
        return activeLineHighlighter;
    }
    const lineDeco = /*@__PURE__*/Decoration.line({ class: "cm-activeLine" });
    const activeLineHighlighter = /*@__PURE__*/ViewPlugin.fromClass(class {
        constructor(view) {
            this.decorations = this.getDeco(view);
        }
        update(update) {
            if (update.docChanged || update.selectionSet)
                this.decorations = this.getDeco(update.view);
        }
        getDeco(view) {
            let lastLineStart = -1, deco = [];
            for (let r of view.state.selection.ranges) {
                let line = view.lineBlockAt(r.head);
                if (line.from > lastLineStart) {
                    deco.push(lineDeco.range(line.from));
                    lastLineStart = line.from;
                }
            }
            return Decoration.set(deco);
        }
    }, {
        decorations: v => v.decorations
    });

    const Outside = "-10000px";
    class TooltipViewManager {
        constructor(view, facet, createTooltipView, removeTooltipView) {
            this.facet = facet;
            this.createTooltipView = createTooltipView;
            this.removeTooltipView = removeTooltipView;
            this.input = view.state.facet(facet);
            this.tooltips = this.input.filter(t => t);
            let prev = null;
            this.tooltipViews = this.tooltips.map(t => prev = createTooltipView(t, prev));
        }
        update(update, above) {
            var _a;
            let input = update.state.facet(this.facet);
            let tooltips = input.filter(x => x);
            if (input === this.input) {
                for (let t of this.tooltipViews)
                    if (t.update)
                        t.update(update);
                return false;
            }
            let tooltipViews = [], newAbove = above ? [] : null;
            for (let i = 0; i < tooltips.length; i++) {
                let tip = tooltips[i], known = -1;
                if (!tip)
                    continue;
                for (let i = 0; i < this.tooltips.length; i++) {
                    let other = this.tooltips[i];
                    if (other && other.create == tip.create)
                        known = i;
                }
                if (known < 0) {
                    tooltipViews[i] = this.createTooltipView(tip, i ? tooltipViews[i - 1] : null);
                    if (newAbove)
                        newAbove[i] = !!tip.above;
                }
                else {
                    let tooltipView = tooltipViews[i] = this.tooltipViews[known];
                    if (newAbove)
                        newAbove[i] = above[known];
                    if (tooltipView.update)
                        tooltipView.update(update);
                }
            }
            for (let t of this.tooltipViews)
                if (tooltipViews.indexOf(t) < 0) {
                    this.removeTooltipView(t);
                    (_a = t.destroy) === null || _a === void 0 ? void 0 : _a.call(t);
                }
            if (above) {
                newAbove.forEach((val, i) => above[i] = val);
                above.length = newAbove.length;
            }
            this.input = input;
            this.tooltips = tooltips;
            this.tooltipViews = tooltipViews;
            return true;
        }
    }
    function windowSpace(view) {
        let { win } = view;
        return { top: 0, left: 0, bottom: win.innerHeight, right: win.innerWidth };
    }
    const tooltipConfig = /*@__PURE__*/Facet.define({
        combine: values => {
            var _a, _b, _c;
            return ({
                position: browser.ios ? "absolute" : ((_a = values.find(conf => conf.position)) === null || _a === void 0 ? void 0 : _a.position) || "fixed",
                parent: ((_b = values.find(conf => conf.parent)) === null || _b === void 0 ? void 0 : _b.parent) || null,
                tooltipSpace: ((_c = values.find(conf => conf.tooltipSpace)) === null || _c === void 0 ? void 0 : _c.tooltipSpace) || windowSpace,
            });
        }
    });
    const knownHeight = /*@__PURE__*/new WeakMap();
    const tooltipPlugin = /*@__PURE__*/ViewPlugin.fromClass(class {
        constructor(view) {
            this.view = view;
            this.above = [];
            this.inView = true;
            this.madeAbsolute = false;
            this.lastTransaction = 0;
            this.measureTimeout = -1;
            let config = view.state.facet(tooltipConfig);
            this.position = config.position;
            this.parent = config.parent;
            this.classes = view.themeClasses;
            this.createContainer();
            this.measureReq = { read: this.readMeasure.bind(this), write: this.writeMeasure.bind(this), key: this };
            this.resizeObserver = typeof ResizeObserver == "function" ? new ResizeObserver(() => this.measureSoon()) : null;
            this.manager = new TooltipViewManager(view, showTooltip, (t, p) => this.createTooltip(t, p), t => {
                if (this.resizeObserver)
                    this.resizeObserver.unobserve(t.dom);
                t.dom.remove();
            });
            this.above = this.manager.tooltips.map(t => !!t.above);
            this.intersectionObserver = typeof IntersectionObserver == "function" ? new IntersectionObserver(entries => {
                if (Date.now() > this.lastTransaction - 50 &&
                    entries.length > 0 && entries[entries.length - 1].intersectionRatio < 1)
                    this.measureSoon();
            }, { threshold: [1] }) : null;
            this.observeIntersection();
            view.win.addEventListener("resize", this.measureSoon = this.measureSoon.bind(this));
            this.maybeMeasure();
        }
        createContainer() {
            if (this.parent) {
                this.container = document.createElement("div");
                this.container.style.position = "relative";
                this.container.className = this.view.themeClasses;
                this.parent.appendChild(this.container);
            }
            else {
                this.container = this.view.dom;
            }
        }
        observeIntersection() {
            if (this.intersectionObserver) {
                this.intersectionObserver.disconnect();
                for (let tooltip of this.manager.tooltipViews)
                    this.intersectionObserver.observe(tooltip.dom);
            }
        }
        measureSoon() {
            if (this.measureTimeout < 0)
                this.measureTimeout = setTimeout(() => {
                    this.measureTimeout = -1;
                    this.maybeMeasure();
                }, 50);
        }
        update(update) {
            if (update.transactions.length)
                this.lastTransaction = Date.now();
            let updated = this.manager.update(update, this.above);
            if (updated)
                this.observeIntersection();
            let shouldMeasure = updated || update.geometryChanged;
            let newConfig = update.state.facet(tooltipConfig);
            if (newConfig.position != this.position && !this.madeAbsolute) {
                this.position = newConfig.position;
                for (let t of this.manager.tooltipViews)
                    t.dom.style.position = this.position;
                shouldMeasure = true;
            }
            if (newConfig.parent != this.parent) {
                if (this.parent)
                    this.container.remove();
                this.parent = newConfig.parent;
                this.createContainer();
                for (let t of this.manager.tooltipViews)
                    this.container.appendChild(t.dom);
                shouldMeasure = true;
            }
            else if (this.parent && this.view.themeClasses != this.classes) {
                this.classes = this.container.className = this.view.themeClasses;
            }
            if (shouldMeasure)
                this.maybeMeasure();
        }
        createTooltip(tooltip, prev) {
            let tooltipView = tooltip.create(this.view);
            let before = prev ? prev.dom : null;
            tooltipView.dom.classList.add("cm-tooltip");
            if (tooltip.arrow && !tooltipView.dom.querySelector(".cm-tooltip > .cm-tooltip-arrow")) {
                let arrow = document.createElement("div");
                arrow.className = "cm-tooltip-arrow";
                tooltipView.dom.appendChild(arrow);
            }
            tooltipView.dom.style.position = this.position;
            tooltipView.dom.style.top = Outside;
            tooltipView.dom.style.left = "0px";
            this.container.insertBefore(tooltipView.dom, before);
            if (tooltipView.mount)
                tooltipView.mount(this.view);
            if (this.resizeObserver)
                this.resizeObserver.observe(tooltipView.dom);
            return tooltipView;
        }
        destroy() {
            var _a, _b, _c;
            this.view.win.removeEventListener("resize", this.measureSoon);
            for (let tooltipView of this.manager.tooltipViews) {
                tooltipView.dom.remove();
                (_a = tooltipView.destroy) === null || _a === void 0 ? void 0 : _a.call(tooltipView);
            }
            if (this.parent)
                this.container.remove();
            (_b = this.resizeObserver) === null || _b === void 0 ? void 0 : _b.disconnect();
            (_c = this.intersectionObserver) === null || _c === void 0 ? void 0 : _c.disconnect();
            clearTimeout(this.measureTimeout);
        }
        readMeasure() {
            let editor = this.view.dom.getBoundingClientRect();
            let scaleX = 1, scaleY = 1, makeAbsolute = false;
            if (this.position == "fixed" && this.manager.tooltipViews.length) {
                let { dom } = this.manager.tooltipViews[0];
                if (browser.gecko) {
                    // Firefox sets the element's `offsetParent` to the
                    // transformed element when a transform interferes with fixed
                    // positioning.
                    makeAbsolute = dom.offsetParent != this.container.ownerDocument.body;
                }
                else if (dom.style.top == Outside && dom.style.left == "0px") {
                    // On other browsers, we have to awkwardly try and use other
                    // information to detect a transform.
                    let rect = dom.getBoundingClientRect();
                    makeAbsolute = Math.abs(rect.top + 10000) > 1 || Math.abs(rect.left) > 1;
                }
            }
            if (makeAbsolute || this.position == "absolute") {
                if (this.parent) {
                    let rect = this.parent.getBoundingClientRect();
                    if (rect.width && rect.height) {
                        scaleX = rect.width / this.parent.offsetWidth;
                        scaleY = rect.height / this.parent.offsetHeight;
                    }
                }
                else {
                    ({ scaleX, scaleY } = this.view.viewState);
                }
            }
            return {
                editor,
                parent: this.parent ? this.container.getBoundingClientRect() : editor,
                pos: this.manager.tooltips.map((t, i) => {
                    let tv = this.manager.tooltipViews[i];
                    return tv.getCoords ? tv.getCoords(t.pos) : this.view.coordsAtPos(t.pos);
                }),
                size: this.manager.tooltipViews.map(({ dom }) => dom.getBoundingClientRect()),
                space: this.view.state.facet(tooltipConfig).tooltipSpace(this.view),
                scaleX, scaleY, makeAbsolute
            };
        }
        writeMeasure(measured) {
            var _a;
            if (measured.makeAbsolute) {
                this.madeAbsolute = true;
                this.position = "absolute";
                for (let t of this.manager.tooltipViews)
                    t.dom.style.position = "absolute";
            }
            let { editor, space, scaleX, scaleY } = measured;
            let others = [];
            for (let i = 0; i < this.manager.tooltips.length; i++) {
                let tooltip = this.manager.tooltips[i], tView = this.manager.tooltipViews[i], { dom } = tView;
                let pos = measured.pos[i], size = measured.size[i];
                // Hide tooltips that are outside of the editor.
                if (!pos || pos.bottom <= Math.max(editor.top, space.top) ||
                    pos.top >= Math.min(editor.bottom, space.bottom) ||
                    pos.right < Math.max(editor.left, space.left) - .1 ||
                    pos.left > Math.min(editor.right, space.right) + .1) {
                    dom.style.top = Outside;
                    continue;
                }
                let arrow = tooltip.arrow ? tView.dom.querySelector(".cm-tooltip-arrow") : null;
                let arrowHeight = arrow ? 7 /* Arrow.Size */ : 0;
                let width = size.right - size.left, height = (_a = knownHeight.get(tView)) !== null && _a !== void 0 ? _a : size.bottom - size.top;
                let offset = tView.offset || noOffset, ltr = this.view.textDirection == Direction.LTR;
                let left = size.width > space.right - space.left
                    ? (ltr ? space.left : space.right - size.width)
                    : ltr ? Math.max(space.left, Math.min(pos.left - (arrow ? 14 /* Arrow.Offset */ : 0) + offset.x, space.right - width))
                        : Math.min(Math.max(space.left, pos.left - width + (arrow ? 14 /* Arrow.Offset */ : 0) - offset.x), space.right - width);
                let above = this.above[i];
                if (!tooltip.strictSide && (above
                    ? pos.top - (size.bottom - size.top) - offset.y < space.top
                    : pos.bottom + (size.bottom - size.top) + offset.y > space.bottom) &&
                    above == (space.bottom - pos.bottom > pos.top - space.top))
                    above = this.above[i] = !above;
                let spaceVert = (above ? pos.top - space.top : space.bottom - pos.bottom) - arrowHeight;
                if (spaceVert < height && tView.resize !== false) {
                    if (spaceVert < this.view.defaultLineHeight) {
                        dom.style.top = Outside;
                        continue;
                    }
                    knownHeight.set(tView, height);
                    dom.style.height = (height = spaceVert) / scaleY + "px";
                }
                else if (dom.style.height) {
                    dom.style.height = "";
                }
                let top = above ? pos.top - height - arrowHeight - offset.y : pos.bottom + arrowHeight + offset.y;
                let right = left + width;
                if (tView.overlap !== true)
                    for (let r of others)
                        if (r.left < right && r.right > left && r.top < top + height && r.bottom > top)
                            top = above ? r.top - height - 2 - arrowHeight : r.bottom + arrowHeight + 2;
                if (this.position == "absolute") {
                    dom.style.top = (top - measured.parent.top) / scaleY + "px";
                    dom.style.left = (left - measured.parent.left) / scaleX + "px";
                }
                else {
                    dom.style.top = top / scaleY + "px";
                    dom.style.left = left / scaleX + "px";
                }
                if (arrow) {
                    let arrowLeft = pos.left + (ltr ? offset.x : -offset.x) - (left + 14 /* Arrow.Offset */ - 7 /* Arrow.Size */);
                    arrow.style.left = arrowLeft / scaleX + "px";
                }
                if (tView.overlap !== true)
                    others.push({ left, top, right, bottom: top + height });
                dom.classList.toggle("cm-tooltip-above", above);
                dom.classList.toggle("cm-tooltip-below", !above);
                if (tView.positioned)
                    tView.positioned(measured.space);
            }
        }
        maybeMeasure() {
            if (this.manager.tooltips.length) {
                if (this.view.inView)
                    this.view.requestMeasure(this.measureReq);
                if (this.inView != this.view.inView) {
                    this.inView = this.view.inView;
                    if (!this.inView)
                        for (let tv of this.manager.tooltipViews)
                            tv.dom.style.top = Outside;
                }
            }
        }
    }, {
        eventObservers: {
            scroll() { this.maybeMeasure(); }
        }
    });
    const baseTheme$3 = /*@__PURE__*/EditorView.baseTheme({
        ".cm-tooltip": {
            zIndex: 100,
            boxSizing: "border-box"
        },
        "&light .cm-tooltip": {
            border: "1px solid #bbb",
            backgroundColor: "#f5f5f5"
        },
        "&light .cm-tooltip-section:not(:first-child)": {
            borderTop: "1px solid #bbb",
        },
        "&dark .cm-tooltip": {
            backgroundColor: "#333338",
            color: "white"
        },
        ".cm-tooltip-arrow": {
            height: `${7 /* Arrow.Size */}px`,
            width: `${7 /* Arrow.Size */ * 2}px`,
            position: "absolute",
            zIndex: -1,
            overflow: "hidden",
            "&:before, &:after": {
                content: "''",
                position: "absolute",
                width: 0,
                height: 0,
                borderLeft: `${7 /* Arrow.Size */}px solid transparent`,
                borderRight: `${7 /* Arrow.Size */}px solid transparent`,
            },
            ".cm-tooltip-above &": {
                bottom: `-${7 /* Arrow.Size */}px`,
                "&:before": {
                    borderTop: `${7 /* Arrow.Size */}px solid #bbb`,
                },
                "&:after": {
                    borderTop: `${7 /* Arrow.Size */}px solid #f5f5f5`,
                    bottom: "1px"
                }
            },
            ".cm-tooltip-below &": {
                top: `-${7 /* Arrow.Size */}px`,
                "&:before": {
                    borderBottom: `${7 /* Arrow.Size */}px solid #bbb`,
                },
                "&:after": {
                    borderBottom: `${7 /* Arrow.Size */}px solid #f5f5f5`,
                    top: "1px"
                }
            },
        },
        "&dark .cm-tooltip .cm-tooltip-arrow": {
            "&:before": {
                borderTopColor: "#333338",
                borderBottomColor: "#333338"
            },
            "&:after": {
                borderTopColor: "transparent",
                borderBottomColor: "transparent"
            }
        }
    });
    const noOffset = { x: 0, y: 0 };
    /**
    Facet to which an extension can add a value to show a tooltip.
    */
    const showTooltip = /*@__PURE__*/Facet.define({
        enables: [tooltipPlugin, baseTheme$3]
    });
    /**
    Get the active tooltip view for a given tooltip, if available.
    */
    function getTooltip(view, tooltip) {
        let plugin = view.plugin(tooltipPlugin);
        if (!plugin)
            return null;
        let found = plugin.manager.tooltips.indexOf(tooltip);
        return found < 0 ? null : plugin.manager.tooltipViews[found];
    }

    /**
    A gutter marker represents a bit of information attached to a line
    in a specific gutter. Your own custom markers have to extend this
    class.
    */
    class GutterMarker extends RangeValue {
        /**
        @internal
        */
        compare(other) {
            return this == other || this.constructor == other.constructor && this.eq(other);
        }
        /**
        Compare this marker to another marker of the same type.
        */
        eq(other) { return false; }
        /**
        Called if the marker has a `toDOM` method and its representation
        was removed from a gutter.
        */
        destroy(dom) { }
    }
    GutterMarker.prototype.elementClass = "";
    GutterMarker.prototype.toDOM = undefined;
    GutterMarker.prototype.mapMode = MapMode.TrackBefore;
    GutterMarker.prototype.startSide = GutterMarker.prototype.endSide = -1;
    GutterMarker.prototype.point = true;
    /**
    Facet used to add a class to all gutter elements for a given line.
    Markers given to this facet should _only_ define an
    [`elementclass`](https://codemirror.net/6/docs/ref/#view.GutterMarker.elementClass), not a
    [`toDOM`](https://codemirror.net/6/docs/ref/#view.GutterMarker.toDOM) (or the marker will appear
    in all gutters for the line).
    */
    const gutterLineClass = /*@__PURE__*/Facet.define();
    /**
    Facet used to add a class to all gutter elements next to a widget.
    Should not provide widgets with a `toDOM` method.
    */
    const gutterWidgetClass = /*@__PURE__*/Facet.define();
    const defaults$2 = {
        class: "",
        renderEmptyElements: false,
        elementStyle: "",
        markers: () => RangeSet.empty,
        lineMarker: () => null,
        widgetMarker: () => null,
        lineMarkerChange: null,
        initialSpacer: null,
        updateSpacer: null,
        domEventHandlers: {}
    };
    const activeGutters = /*@__PURE__*/Facet.define();
    /**
    Define an editor gutter. The order in which the gutters appear is
    determined by their extension priority.
    */
    function gutter(config) {
        return [gutters(), activeGutters.of(Object.assign(Object.assign({}, defaults$2), config))];
    }
    const unfixGutters = /*@__PURE__*/Facet.define({
        combine: values => values.some(x => x)
    });
    /**
    The gutter-drawing plugin is automatically enabled when you add a
    gutter, but you can use this function to explicitly configure it.

    Unless `fixed` is explicitly set to `false`, the gutters are
    fixed, meaning they don't scroll along with the content
    horizontally (except on Internet Explorer, which doesn't support
    CSS [`position:
    sticky`](https://developer.mozilla.org/en-US/docs/Web/CSS/position#sticky)).
    */
    function gutters(config) {
        let result = [
            gutterView,
        ];
        return result;
    }
    const gutterView = /*@__PURE__*/ViewPlugin.fromClass(class {
        constructor(view) {
            this.view = view;
            this.prevViewport = view.viewport;
            this.dom = document.createElement("div");
            this.dom.className = "cm-gutters";
            this.dom.setAttribute("aria-hidden", "true");
            this.dom.style.minHeight = (this.view.contentHeight / this.view.scaleY) + "px";
            this.gutters = view.state.facet(activeGutters).map(conf => new SingleGutterView(view, conf));
            for (let gutter of this.gutters)
                this.dom.appendChild(gutter.dom);
            this.fixed = !view.state.facet(unfixGutters);
            if (this.fixed) {
                // FIXME IE11 fallback, which doesn't support position: sticky,
                // by using position: relative + event handlers that realign the
                // gutter (or just force fixed=false on IE11?)
                this.dom.style.position = "sticky";
            }
            this.syncGutters(false);
            view.scrollDOM.insertBefore(this.dom, view.contentDOM);
        }
        update(update) {
            if (this.updateGutters(update)) {
                // Detach during sync when the viewport changed significantly
                // (such as during scrolling), since for large updates that is
                // faster.
                let vpA = this.prevViewport, vpB = update.view.viewport;
                let vpOverlap = Math.min(vpA.to, vpB.to) - Math.max(vpA.from, vpB.from);
                this.syncGutters(vpOverlap < (vpB.to - vpB.from) * 0.8);
            }
            if (update.geometryChanged) {
                this.dom.style.minHeight = (this.view.contentHeight / this.view.scaleY) + "px";
            }
            if (this.view.state.facet(unfixGutters) != !this.fixed) {
                this.fixed = !this.fixed;
                this.dom.style.position = this.fixed ? "sticky" : "";
            }
            this.prevViewport = update.view.viewport;
        }
        syncGutters(detach) {
            let after = this.dom.nextSibling;
            if (detach)
                this.dom.remove();
            let lineClasses = RangeSet.iter(this.view.state.facet(gutterLineClass), this.view.viewport.from);
            let classSet = [];
            let contexts = this.gutters.map(gutter => new UpdateContext(gutter, this.view.viewport, -this.view.documentPadding.top));
            for (let line of this.view.viewportLineBlocks) {
                if (classSet.length)
                    classSet = [];
                if (Array.isArray(line.type)) {
                    let first = true;
                    for (let b of line.type) {
                        if (b.type == BlockType.Text && first) {
                            advanceCursor(lineClasses, classSet, b.from);
                            for (let cx of contexts)
                                cx.line(this.view, b, classSet);
                            first = false;
                        }
                        else if (b.widget) {
                            for (let cx of contexts)
                                cx.widget(this.view, b);
                        }
                    }
                }
                else if (line.type == BlockType.Text) {
                    advanceCursor(lineClasses, classSet, line.from);
                    for (let cx of contexts)
                        cx.line(this.view, line, classSet);
                }
                else if (line.widget) {
                    for (let cx of contexts)
                        cx.widget(this.view, line);
                }
            }
            for (let cx of contexts)
                cx.finish();
            if (detach)
                this.view.scrollDOM.insertBefore(this.dom, after);
        }
        updateGutters(update) {
            let prev = update.startState.facet(activeGutters), cur = update.state.facet(activeGutters);
            let change = update.docChanged || update.heightChanged || update.viewportChanged ||
                !RangeSet.eq(update.startState.facet(gutterLineClass), update.state.facet(gutterLineClass), update.view.viewport.from, update.view.viewport.to);
            if (prev == cur) {
                for (let gutter of this.gutters)
                    if (gutter.update(update))
                        change = true;
            }
            else {
                change = true;
                let gutters = [];
                for (let conf of cur) {
                    let known = prev.indexOf(conf);
                    if (known < 0) {
                        gutters.push(new SingleGutterView(this.view, conf));
                    }
                    else {
                        this.gutters[known].update(update);
                        gutters.push(this.gutters[known]);
                    }
                }
                for (let g of this.gutters) {
                    g.dom.remove();
                    if (gutters.indexOf(g) < 0)
                        g.destroy();
                }
                for (let g of gutters)
                    this.dom.appendChild(g.dom);
                this.gutters = gutters;
            }
            return change;
        }
        destroy() {
            for (let view of this.gutters)
                view.destroy();
            this.dom.remove();
        }
    }, {
        provide: plugin => EditorView.scrollMargins.of(view => {
            let value = view.plugin(plugin);
            if (!value || value.gutters.length == 0 || !value.fixed)
                return null;
            return view.textDirection == Direction.LTR
                ? { left: value.dom.offsetWidth * view.scaleX }
                : { right: value.dom.offsetWidth * view.scaleX };
        })
    });
    function asArray(val) { return (Array.isArray(val) ? val : [val]); }
    function advanceCursor(cursor, collect, pos) {
        while (cursor.value && cursor.from <= pos) {
            if (cursor.from == pos)
                collect.push(cursor.value);
            cursor.next();
        }
    }
    class UpdateContext {
        constructor(gutter, viewport, height) {
            this.gutter = gutter;
            this.height = height;
            this.i = 0;
            this.cursor = RangeSet.iter(gutter.markers, viewport.from);
        }
        addElement(view, block, markers) {
            let { gutter } = this, above = (block.top - this.height) / view.scaleY, height = block.height / view.scaleY;
            if (this.i == gutter.elements.length) {
                let newElt = new GutterElement(view, height, above, markers);
                gutter.elements.push(newElt);
                gutter.dom.appendChild(newElt.dom);
            }
            else {
                gutter.elements[this.i].update(view, height, above, markers);
            }
            this.height = block.bottom;
            this.i++;
        }
        line(view, line, extraMarkers) {
            let localMarkers = [];
            advanceCursor(this.cursor, localMarkers, line.from);
            if (extraMarkers.length)
                localMarkers = localMarkers.concat(extraMarkers);
            let forLine = this.gutter.config.lineMarker(view, line, localMarkers);
            if (forLine)
                localMarkers.unshift(forLine);
            let gutter = this.gutter;
            if (localMarkers.length == 0 && !gutter.config.renderEmptyElements)
                return;
            this.addElement(view, line, localMarkers);
        }
        widget(view, block) {
            let marker = this.gutter.config.widgetMarker(view, block.widget, block), markers = marker ? [marker] : null;
            for (let cls of view.state.facet(gutterWidgetClass)) {
                let marker = cls(view, block.widget, block);
                if (marker)
                    (markers || (markers = [])).push(marker);
            }
            if (markers)
                this.addElement(view, block, markers);
        }
        finish() {
            let gutter = this.gutter;
            while (gutter.elements.length > this.i) {
                let last = gutter.elements.pop();
                gutter.dom.removeChild(last.dom);
                last.destroy();
            }
        }
    }
    class SingleGutterView {
        constructor(view, config) {
            this.view = view;
            this.config = config;
            this.elements = [];
            this.spacer = null;
            this.dom = document.createElement("div");
            this.dom.className = "cm-gutter" + (this.config.class ? " " + this.config.class : "");
            for (let prop in config.domEventHandlers) {
                this.dom.addEventListener(prop, (event) => {
                    let target = event.target, y;
                    if (target != this.dom && this.dom.contains(target)) {
                        while (target.parentNode != this.dom)
                            target = target.parentNode;
                        let rect = target.getBoundingClientRect();
                        y = (rect.top + rect.bottom) / 2;
                    }
                    else {
                        y = event.clientY;
                    }
                    let line = view.lineBlockAtHeight(y - view.documentTop);
                    if (config.domEventHandlers[prop](view, line, event))
                        event.preventDefault();
                });
            }
            this.markers = asArray(config.markers(view));
            if (config.initialSpacer) {
                this.spacer = new GutterElement(view, 0, 0, [config.initialSpacer(view)]);
                this.dom.appendChild(this.spacer.dom);
                this.spacer.dom.style.cssText += "visibility: hidden; pointer-events: none";
            }
        }
        update(update) {
            let prevMarkers = this.markers;
            this.markers = asArray(this.config.markers(update.view));
            if (this.spacer && this.config.updateSpacer) {
                let updated = this.config.updateSpacer(this.spacer.markers[0], update);
                if (updated != this.spacer.markers[0])
                    this.spacer.update(update.view, 0, 0, [updated]);
            }
            let vp = update.view.viewport;
            return !RangeSet.eq(this.markers, prevMarkers, vp.from, vp.to) ||
                (this.config.lineMarkerChange ? this.config.lineMarkerChange(update) : false);
        }
        destroy() {
            for (let elt of this.elements)
                elt.destroy();
        }
    }
    class GutterElement {
        constructor(view, height, above, markers) {
            this.height = -1;
            this.above = 0;
            this.markers = [];
            this.dom = document.createElement("div");
            this.dom.className = "cm-gutterElement";
            this.update(view, height, above, markers);
        }
        update(view, height, above, markers) {
            if (this.height != height) {
                this.height = height;
                this.dom.style.height = height + "px";
            }
            if (this.above != above)
                this.dom.style.marginTop = (this.above = above) ? above + "px" : "";
            if (!sameMarkers(this.markers, markers))
                this.setMarkers(view, markers);
        }
        setMarkers(view, markers) {
            let cls = "cm-gutterElement", domPos = this.dom.firstChild;
            for (let iNew = 0, iOld = 0;;) {
                let skipTo = iOld, marker = iNew < markers.length ? markers[iNew++] : null, matched = false;
                if (marker) {
                    let c = marker.elementClass;
                    if (c)
                        cls += " " + c;
                    for (let i = iOld; i < this.markers.length; i++)
                        if (this.markers[i].compare(marker)) {
                            skipTo = i;
                            matched = true;
                            break;
                        }
                }
                else {
                    skipTo = this.markers.length;
                }
                while (iOld < skipTo) {
                    let next = this.markers[iOld++];
                    if (next.toDOM) {
                        next.destroy(domPos);
                        let after = domPos.nextSibling;
                        domPos.remove();
                        domPos = after;
                    }
                }
                if (!marker)
                    break;
                if (marker.toDOM) {
                    if (matched)
                        domPos = domPos.nextSibling;
                    else
                        this.dom.insertBefore(marker.toDOM(view), domPos);
                }
                if (matched)
                    iOld++;
            }
            this.dom.className = cls;
            this.markers = markers;
        }
        destroy() {
            this.setMarkers(null, []); // First argument not used unless creating markers
        }
    }
    function sameMarkers(a, b) {
        if (a.length != b.length)
            return false;
        for (let i = 0; i < a.length; i++)
            if (!a[i].compare(b[i]))
                return false;
        return true;
    }
    /**
    Facet used to provide markers to the line number gutter.
    */
    const lineNumberMarkers = /*@__PURE__*/Facet.define();
    /**
    Facet used to create markers in the line number gutter next to widgets.
    */
    const lineNumberWidgetMarker = /*@__PURE__*/Facet.define();
    const lineNumberConfig = /*@__PURE__*/Facet.define({
        combine(values) {
            return combineConfig(values, { formatNumber: String, domEventHandlers: {} }, {
                domEventHandlers(a, b) {
                    let result = Object.assign({}, a);
                    for (let event in b) {
                        let exists = result[event], add = b[event];
                        result[event] = exists ? (view, line, event) => exists(view, line, event) || add(view, line, event) : add;
                    }
                    return result;
                }
            });
        }
    });
    class NumberMarker extends GutterMarker {
        constructor(number) {
            super();
            this.number = number;
        }
        eq(other) { return this.number == other.number; }
        toDOM() { return document.createTextNode(this.number); }
    }
    function formatNumber(view, number) {
        return view.state.facet(lineNumberConfig).formatNumber(number, view.state);
    }
    const lineNumberGutter = /*@__PURE__*/activeGutters.compute([lineNumberConfig], state => ({
        class: "cm-lineNumbers",
        renderEmptyElements: false,
        markers(view) { return view.state.facet(lineNumberMarkers); },
        lineMarker(view, line, others) {
            if (others.some(m => m.toDOM))
                return null;
            return new NumberMarker(formatNumber(view, view.state.doc.lineAt(line.from).number));
        },
        widgetMarker: (view, widget, block) => {
            for (let m of view.state.facet(lineNumberWidgetMarker)) {
                let result = m(view, widget, block);
                if (result)
                    return result;
            }
            return null;
        },
        lineMarkerChange: update => update.startState.facet(lineNumberConfig) != update.state.facet(lineNumberConfig),
        initialSpacer(view) {
            return new NumberMarker(formatNumber(view, maxLineNumber(view.state.doc.lines)));
        },
        updateSpacer(spacer, update) {
            let max = formatNumber(update.view, maxLineNumber(update.view.state.doc.lines));
            return max == spacer.number ? spacer : new NumberMarker(max);
        },
        domEventHandlers: state.facet(lineNumberConfig).domEventHandlers
    }));
    /**
    Create a line number gutter extension.
    */
    function lineNumbers(config = {}) {
        return [
            lineNumberConfig.of(config),
            gutters(),
            lineNumberGutter
        ];
    }
    function maxLineNumber(lines) {
        let last = 9;
        while (last < lines)
            last = last * 10 + 9;
        return last;
    }
    const activeLineGutterMarker = /*@__PURE__*/new class extends GutterMarker {
        constructor() {
            super(...arguments);
            this.elementClass = "cm-activeLineGutter";
        }
    };
    const activeLineGutterHighlighter = /*@__PURE__*/gutterLineClass.compute(["selection"], state => {
        let marks = [], last = -1;
        for (let range of state.selection.ranges) {
            let linePos = state.doc.lineAt(range.head).from;
            if (linePos > last) {
                last = linePos;
                marks.push(activeLineGutterMarker.range(linePos));
            }
        }
        return RangeSet.of(marks);
    });
    /**
    Returns an extension that adds a `cm-activeLineGutter` class to
    all gutter elements on the [active
    line](https://codemirror.net/6/docs/ref/#view.highlightActiveLine).
    */
    function highlightActiveLineGutter() {
        return activeLineGutterHighlighter;
    }

    var _a$3;
    /**
    Node prop stored in a parser's top syntax node to provide the
    facet that stores language-specific data for that language.
    */
    const languageDataProp = /*@__PURE__*/new NodeProp();
    /**
    Helper function to define a facet (to be added to the top syntax
    node(s) for a language via
    [`languageDataProp`](https://codemirror.net/6/docs/ref/#language.languageDataProp)), that will be
    used to associate language data with the language. You
    probably only need this when subclassing
    [`Language`](https://codemirror.net/6/docs/ref/#language.Language).
    */
    function defineLanguageFacet(baseData) {
        return Facet.define({
            combine: baseData ? values => values.concat(baseData) : undefined
        });
    }
    /**
    Syntax node prop used to register sublanguages. Should be added to
    the top level node type for the language.
    */
    const sublanguageProp = /*@__PURE__*/new NodeProp();
    /**
    A language object manages parsing and per-language
    [metadata](https://codemirror.net/6/docs/ref/#state.EditorState.languageDataAt). Parse data is
    managed as a [Lezer](https://lezer.codemirror.net) tree. The class
    can be used directly, via the [`LRLanguage`](https://codemirror.net/6/docs/ref/#language.LRLanguage)
    subclass for [Lezer](https://lezer.codemirror.net/) LR parsers, or
    via the [`StreamLanguage`](https://codemirror.net/6/docs/ref/#language.StreamLanguage) subclass
    for stream parsers.
    */
    class Language {
        /**
        Construct a language object. If you need to invoke this
        directly, first define a data facet with
        [`defineLanguageFacet`](https://codemirror.net/6/docs/ref/#language.defineLanguageFacet), and then
        configure your parser to [attach](https://codemirror.net/6/docs/ref/#language.languageDataProp) it
        to the language's outer syntax node.
        */
        constructor(
        /**
        The [language data](https://codemirror.net/6/docs/ref/#state.EditorState.languageDataAt) facet
        used for this language.
        */
        data, parser, extraExtensions = [],
        /**
        A language name.
        */
        name = "") {
            this.data = data;
            this.name = name;
            // Kludge to define EditorState.tree as a debugging helper,
            // without the EditorState package actually knowing about
            // languages and lezer trees.
            if (!EditorState.prototype.hasOwnProperty("tree"))
                Object.defineProperty(EditorState.prototype, "tree", { get() { return syntaxTree(this); } });
            this.parser = parser;
            this.extension = [
                language$1.of(this),
                EditorState.languageData.of((state, pos, side) => {
                    let top = topNodeAt(state, pos, side), data = top.type.prop(languageDataProp);
                    if (!data)
                        return [];
                    let base = state.facet(data), sub = top.type.prop(sublanguageProp);
                    if (sub) {
                        let innerNode = top.resolve(pos - top.from, side);
                        for (let sublang of sub)
                            if (sublang.test(innerNode, state)) {
                                let data = state.facet(sublang.facet);
                                return sublang.type == "replace" ? data : data.concat(base);
                            }
                    }
                    return base;
                })
            ].concat(extraExtensions);
        }
        /**
        Query whether this language is active at the given position.
        */
        isActiveAt(state, pos, side = -1) {
            return topNodeAt(state, pos, side).type.prop(languageDataProp) == this.data;
        }
        /**
        Find the document regions that were parsed using this language.
        The returned regions will _include_ any nested languages rooted
        in this language, when those exist.
        */
        findRegions(state) {
            let lang = state.facet(language$1);
            if ((lang === null || lang === void 0 ? void 0 : lang.data) == this.data)
                return [{ from: 0, to: state.doc.length }];
            if (!lang || !lang.allowsNesting)
                return [];
            let result = [];
            let explore = (tree, from) => {
                if (tree.prop(languageDataProp) == this.data) {
                    result.push({ from, to: from + tree.length });
                    return;
                }
                let mount = tree.prop(NodeProp.mounted);
                if (mount) {
                    if (mount.tree.prop(languageDataProp) == this.data) {
                        if (mount.overlay)
                            for (let r of mount.overlay)
                                result.push({ from: r.from + from, to: r.to + from });
                        else
                            result.push({ from: from, to: from + tree.length });
                        return;
                    }
                    else if (mount.overlay) {
                        let size = result.length;
                        explore(mount.tree, mount.overlay[0].from + from);
                        if (result.length > size)
                            return;
                    }
                }
                for (let i = 0; i < tree.children.length; i++) {
                    let ch = tree.children[i];
                    if (ch instanceof Tree)
                        explore(ch, tree.positions[i] + from);
                }
            };
            explore(syntaxTree(state), 0);
            return result;
        }
        /**
        Indicates whether this language allows nested languages. The
        default implementation returns true.
        */
        get allowsNesting() { return true; }
    }
    /**
    @internal
    */
    Language.setState = /*@__PURE__*/StateEffect.define();
    function topNodeAt(state, pos, side) {
        let topLang = state.facet(language$1), tree = syntaxTree(state).topNode;
        if (!topLang || topLang.allowsNesting) {
            for (let node = tree; node; node = node.enter(pos, side, IterMode.ExcludeBuffers))
                if (node.type.isTop)
                    tree = node;
        }
        return tree;
    }
    /**
    A subclass of [`Language`](https://codemirror.net/6/docs/ref/#language.Language) for use with Lezer
    [LR parsers](https://lezer.codemirror.net/docs/ref#lr.LRParser)
    parsers.
    */
    class LRLanguage extends Language {
        constructor(data, parser, name) {
            super(data, parser, [], name);
            this.parser = parser;
        }
        /**
        Define a language from a parser.
        */
        static define(spec) {
            let data = defineLanguageFacet(spec.languageData);
            return new LRLanguage(data, spec.parser.configure({
                props: [languageDataProp.add(type => type.isTop ? data : undefined)]
            }), spec.name);
        }
        /**
        Create a new instance of this language with a reconfigured
        version of its parser and optionally a new name.
        */
        configure(options, name) {
            return new LRLanguage(this.data, this.parser.configure(options), name || this.name);
        }
        get allowsNesting() { return this.parser.hasWrappers(); }
    }
    /**
    Get the syntax tree for a state, which is the current (possibly
    incomplete) parse tree of the active
    [language](https://codemirror.net/6/docs/ref/#language.Language), or the empty tree if there is no
    language available.
    */
    function syntaxTree(state) {
        let field = state.field(Language.state, false);
        return field ? field.tree : Tree.empty;
    }
    /**
    Lezer-style
    [`Input`](https://lezer.codemirror.net/docs/ref#common.Input)
    object for a [`Text`](https://codemirror.net/6/docs/ref/#state.Text) object.
    */
    class DocInput {
        /**
        Create an input object for the given document.
        */
        constructor(doc) {
            this.doc = doc;
            this.cursorPos = 0;
            this.string = "";
            this.cursor = doc.iter();
        }
        get length() { return this.doc.length; }
        syncTo(pos) {
            this.string = this.cursor.next(pos - this.cursorPos).value;
            this.cursorPos = pos + this.string.length;
            return this.cursorPos - this.string.length;
        }
        chunk(pos) {
            this.syncTo(pos);
            return this.string;
        }
        get lineChunks() { return true; }
        read(from, to) {
            let stringStart = this.cursorPos - this.string.length;
            if (from < stringStart || to >= this.cursorPos)
                return this.doc.sliceString(from, to);
            else
                return this.string.slice(from - stringStart, to - stringStart);
        }
    }
    let currentContext = null;
    /**
    A parse context provided to parsers working on the editor content.
    */
    class ParseContext {
        constructor(parser,
        /**
        The current editor state.
        */
        state,
        /**
        Tree fragments that can be reused by incremental re-parses.
        */
        fragments = [],
        /**
        @internal
        */
        tree,
        /**
        @internal
        */
        treeLen,
        /**
        The current editor viewport (or some overapproximation
        thereof). Intended to be used for opportunistically avoiding
        work (in which case
        [`skipUntilInView`](https://codemirror.net/6/docs/ref/#language.ParseContext.skipUntilInView)
        should be called to make sure the parser is restarted when the
        skipped region becomes visible).
        */
        viewport,
        /**
        @internal
        */
        skipped,
        /**
        This is where skipping parsers can register a promise that,
        when resolved, will schedule a new parse. It is cleared when
        the parse worker picks up the promise. @internal
        */
        scheduleOn) {
            this.parser = parser;
            this.state = state;
            this.fragments = fragments;
            this.tree = tree;
            this.treeLen = treeLen;
            this.viewport = viewport;
            this.skipped = skipped;
            this.scheduleOn = scheduleOn;
            this.parse = null;
            /**
            @internal
            */
            this.tempSkipped = [];
        }
        /**
        @internal
        */
        static create(parser, state, viewport) {
            return new ParseContext(parser, state, [], Tree.empty, 0, viewport, [], null);
        }
        startParse() {
            return this.parser.startParse(new DocInput(this.state.doc), this.fragments);
        }
        /**
        @internal
        */
        work(until, upto) {
            if (upto != null && upto >= this.state.doc.length)
                upto = undefined;
            if (this.tree != Tree.empty && this.isDone(upto !== null && upto !== void 0 ? upto : this.state.doc.length)) {
                this.takeTree();
                return true;
            }
            return this.withContext(() => {
                var _a;
                if (typeof until == "number") {
                    let endTime = Date.now() + until;
                    until = () => Date.now() > endTime;
                }
                if (!this.parse)
                    this.parse = this.startParse();
                if (upto != null && (this.parse.stoppedAt == null || this.parse.stoppedAt > upto) &&
                    upto < this.state.doc.length)
                    this.parse.stopAt(upto);
                for (;;) {
                    let done = this.parse.advance();
                    if (done) {
                        this.fragments = this.withoutTempSkipped(TreeFragment.addTree(done, this.fragments, this.parse.stoppedAt != null));
                        this.treeLen = (_a = this.parse.stoppedAt) !== null && _a !== void 0 ? _a : this.state.doc.length;
                        this.tree = done;
                        this.parse = null;
                        if (this.treeLen < (upto !== null && upto !== void 0 ? upto : this.state.doc.length))
                            this.parse = this.startParse();
                        else
                            return true;
                    }
                    if (until())
                        return false;
                }
            });
        }
        /**
        @internal
        */
        takeTree() {
            let pos, tree;
            if (this.parse && (pos = this.parse.parsedPos) >= this.treeLen) {
                if (this.parse.stoppedAt == null || this.parse.stoppedAt > pos)
                    this.parse.stopAt(pos);
                this.withContext(() => { while (!(tree = this.parse.advance())) { } });
                this.treeLen = pos;
                this.tree = tree;
                this.fragments = this.withoutTempSkipped(TreeFragment.addTree(this.tree, this.fragments, true));
                this.parse = null;
            }
        }
        withContext(f) {
            let prev = currentContext;
            currentContext = this;
            try {
                return f();
            }
            finally {
                currentContext = prev;
            }
        }
        withoutTempSkipped(fragments) {
            for (let r; r = this.tempSkipped.pop();)
                fragments = cutFragments(fragments, r.from, r.to);
            return fragments;
        }
        /**
        @internal
        */
        changes(changes, newState) {
            let { fragments, tree, treeLen, viewport, skipped } = this;
            this.takeTree();
            if (!changes.empty) {
                let ranges = [];
                changes.iterChangedRanges((fromA, toA, fromB, toB) => ranges.push({ fromA, toA, fromB, toB }));
                fragments = TreeFragment.applyChanges(fragments, ranges);
                tree = Tree.empty;
                treeLen = 0;
                viewport = { from: changes.mapPos(viewport.from, -1), to: changes.mapPos(viewport.to, 1) };
                if (this.skipped.length) {
                    skipped = [];
                    for (let r of this.skipped) {
                        let from = changes.mapPos(r.from, 1), to = changes.mapPos(r.to, -1);
                        if (from < to)
                            skipped.push({ from, to });
                    }
                }
            }
            return new ParseContext(this.parser, newState, fragments, tree, treeLen, viewport, skipped, this.scheduleOn);
        }
        /**
        @internal
        */
        updateViewport(viewport) {
            if (this.viewport.from == viewport.from && this.viewport.to == viewport.to)
                return false;
            this.viewport = viewport;
            let startLen = this.skipped.length;
            for (let i = 0; i < this.skipped.length; i++) {
                let { from, to } = this.skipped[i];
                if (from < viewport.to && to > viewport.from) {
                    this.fragments = cutFragments(this.fragments, from, to);
                    this.skipped.splice(i--, 1);
                }
            }
            if (this.skipped.length >= startLen)
                return false;
            this.reset();
            return true;
        }
        /**
        @internal
        */
        reset() {
            if (this.parse) {
                this.takeTree();
                this.parse = null;
            }
        }
        /**
        Notify the parse scheduler that the given region was skipped
        because it wasn't in view, and the parse should be restarted
        when it comes into view.
        */
        skipUntilInView(from, to) {
            this.skipped.push({ from, to });
        }
        /**
        Returns a parser intended to be used as placeholder when
        asynchronously loading a nested parser. It'll skip its input and
        mark it as not-really-parsed, so that the next update will parse
        it again.

        When `until` is given, a reparse will be scheduled when that
        promise resolves.
        */
        static getSkippingParser(until) {
            return new class extends Parser {
                createParse(input, fragments, ranges) {
                    let from = ranges[0].from, to = ranges[ranges.length - 1].to;
                    let parser = {
                        parsedPos: from,
                        advance() {
                            let cx = currentContext;
                            if (cx) {
                                for (let r of ranges)
                                    cx.tempSkipped.push(r);
                                if (until)
                                    cx.scheduleOn = cx.scheduleOn ? Promise.all([cx.scheduleOn, until]) : until;
                            }
                            this.parsedPos = to;
                            return new Tree(NodeType.none, [], [], to - from);
                        },
                        stoppedAt: null,
                        stopAt() { }
                    };
                    return parser;
                }
            };
        }
        /**
        @internal
        */
        isDone(upto) {
            upto = Math.min(upto, this.state.doc.length);
            let frags = this.fragments;
            return this.treeLen >= upto && frags.length && frags[0].from == 0 && frags[0].to >= upto;
        }
        /**
        Get the context for the current parse, or `null` if no editor
        parse is in progress.
        */
        static get() { return currentContext; }
    }
    function cutFragments(fragments, from, to) {
        return TreeFragment.applyChanges(fragments, [{ fromA: from, toA: to, fromB: from, toB: to }]);
    }
    class LanguageState {
        constructor(
        // A mutable parse state that is used to preserve work done during
        // the lifetime of a state when moving to the next state.
        context) {
            this.context = context;
            this.tree = context.tree;
        }
        apply(tr) {
            if (!tr.docChanged && this.tree == this.context.tree)
                return this;
            let newCx = this.context.changes(tr.changes, tr.state);
            // If the previous parse wasn't done, go forward only up to its
            // end position or the end of the viewport, to avoid slowing down
            // state updates with parse work beyond the viewport.
            let upto = this.context.treeLen == tr.startState.doc.length ? undefined
                : Math.max(tr.changes.mapPos(this.context.treeLen), newCx.viewport.to);
            if (!newCx.work(20 /* Work.Apply */, upto))
                newCx.takeTree();
            return new LanguageState(newCx);
        }
        static init(state) {
            let vpTo = Math.min(3000 /* Work.InitViewport */, state.doc.length);
            let parseState = ParseContext.create(state.facet(language$1).parser, state, { from: 0, to: vpTo });
            if (!parseState.work(20 /* Work.Apply */, vpTo))
                parseState.takeTree();
            return new LanguageState(parseState);
        }
    }
    Language.state = /*@__PURE__*/StateField.define({
        create: LanguageState.init,
        update(value, tr) {
            for (let e of tr.effects)
                if (e.is(Language.setState))
                    return e.value;
            if (tr.startState.facet(language$1) != tr.state.facet(language$1))
                return LanguageState.init(tr.state);
            return value.apply(tr);
        }
    });
    let requestIdle = (callback) => {
        let timeout = setTimeout(() => callback(), 500 /* Work.MaxPause */);
        return () => clearTimeout(timeout);
    };
    if (typeof requestIdleCallback != "undefined")
        requestIdle = (callback) => {
            let idle = -1, timeout = setTimeout(() => {
                idle = requestIdleCallback(callback, { timeout: 500 /* Work.MaxPause */ - 100 /* Work.MinPause */ });
            }, 100 /* Work.MinPause */);
            return () => idle < 0 ? clearTimeout(timeout) : cancelIdleCallback(idle);
        };
    const isInputPending = typeof navigator != "undefined" && ((_a$3 = navigator.scheduling) === null || _a$3 === void 0 ? void 0 : _a$3.isInputPending)
        ? () => navigator.scheduling.isInputPending() : null;
    const parseWorker = /*@__PURE__*/ViewPlugin.fromClass(class ParseWorker {
        constructor(view) {
            this.view = view;
            this.working = null;
            this.workScheduled = 0;
            // End of the current time chunk
            this.chunkEnd = -1;
            // Milliseconds of budget left for this chunk
            this.chunkBudget = -1;
            this.work = this.work.bind(this);
            this.scheduleWork();
        }
        update(update) {
            let cx = this.view.state.field(Language.state).context;
            if (cx.updateViewport(update.view.viewport) || this.view.viewport.to > cx.treeLen)
                this.scheduleWork();
            if (update.docChanged || update.selectionSet) {
                if (this.view.hasFocus)
                    this.chunkBudget += 50 /* Work.ChangeBonus */;
                this.scheduleWork();
            }
            this.checkAsyncSchedule(cx);
        }
        scheduleWork() {
            if (this.working)
                return;
            let { state } = this.view, field = state.field(Language.state);
            if (field.tree != field.context.tree || !field.context.isDone(state.doc.length))
                this.working = requestIdle(this.work);
        }
        work(deadline) {
            this.working = null;
            let now = Date.now();
            if (this.chunkEnd < now && (this.chunkEnd < 0 || this.view.hasFocus)) { // Start a new chunk
                this.chunkEnd = now + 30000 /* Work.ChunkTime */;
                this.chunkBudget = 3000 /* Work.ChunkBudget */;
            }
            if (this.chunkBudget <= 0)
                return; // No more budget
            let { state, viewport: { to: vpTo } } = this.view, field = state.field(Language.state);
            if (field.tree == field.context.tree && field.context.isDone(vpTo + 100000 /* Work.MaxParseAhead */))
                return;
            let endTime = Date.now() + Math.min(this.chunkBudget, 100 /* Work.Slice */, deadline && !isInputPending ? Math.max(25 /* Work.MinSlice */, deadline.timeRemaining() - 5) : 1e9);
            let viewportFirst = field.context.treeLen < vpTo && state.doc.length > vpTo + 1000;
            let done = field.context.work(() => {
                return isInputPending && isInputPending() || Date.now() > endTime;
            }, vpTo + (viewportFirst ? 0 : 100000 /* Work.MaxParseAhead */));
            this.chunkBudget -= Date.now() - now;
            if (done || this.chunkBudget <= 0) {
                field.context.takeTree();
                this.view.dispatch({ effects: Language.setState.of(new LanguageState(field.context)) });
            }
            if (this.chunkBudget > 0 && !(done && !viewportFirst))
                this.scheduleWork();
            this.checkAsyncSchedule(field.context);
        }
        checkAsyncSchedule(cx) {
            if (cx.scheduleOn) {
                this.workScheduled++;
                cx.scheduleOn
                    .then(() => this.scheduleWork())
                    .catch(err => logException(this.view.state, err))
                    .then(() => this.workScheduled--);
                cx.scheduleOn = null;
            }
        }
        destroy() {
            if (this.working)
                this.working();
        }
        isWorking() {
            return !!(this.working || this.workScheduled > 0);
        }
    }, {
        eventHandlers: { focus() { this.scheduleWork(); } }
    });
    /**
    The facet used to associate a language with an editor state. Used
    by `Language` object's `extension` property (so you don't need to
    manually wrap your languages in this). Can be used to access the
    current language on a state.
    */
    const language$1 = /*@__PURE__*/Facet.define({
        combine(languages) { return languages.length ? languages[0] : null; },
        enables: language => [
            Language.state,
            parseWorker,
            EditorView.contentAttributes.compute([language], state => {
                let lang = state.facet(language);
                return lang && lang.name ? { "data-language": lang.name } : {};
            })
        ]
    });
    /**
    This class bundles a [language](https://codemirror.net/6/docs/ref/#language.Language) with an
    optional set of supporting extensions. Language packages are
    encouraged to export a function that optionally takes a
    configuration object and returns a `LanguageSupport` instance, as
    the main way for client code to use the package.
    */
    class LanguageSupport {
        /**
        Create a language support object.
        */
        constructor(
        /**
        The language object.
        */
        language,
        /**
        An optional set of supporting extensions. When nesting a
        language in another language, the outer language is encouraged
        to include the supporting extensions for its inner languages
        in its own set of support extensions.
        */
        support = []) {
            this.language = language;
            this.support = support;
            this.extension = [language, support];
        }
    }

    /**
    Facet that defines a way to provide a function that computes the
    appropriate indentation depth, as a column number (see
    [`indentString`](https://codemirror.net/6/docs/ref/#language.indentString)), at the start of a given
    line. A return value of `null` indicates no indentation can be
    determined, and the line should inherit the indentation of the one
    above it. A return value of `undefined` defers to the next indent
    service.
    */
    const indentService = /*@__PURE__*/Facet.define();
    /**
    Facet for overriding the unit by which indentation happens. Should
    be a string consisting either entirely of the same whitespace
    character. When not set, this defaults to 2 spaces.
    */
    const indentUnit = /*@__PURE__*/Facet.define({
        combine: values => {
            if (!values.length)
                return "  ";
            let unit = values[0];
            if (!unit || /\S/.test(unit) || Array.from(unit).some(e => e != unit[0]))
                throw new Error("Invalid indent unit: " + JSON.stringify(values[0]));
            return unit;
        }
    });
    /**
    Return the _column width_ of an indent unit in the state.
    Determined by the [`indentUnit`](https://codemirror.net/6/docs/ref/#language.indentUnit)
    facet, and [`tabSize`](https://codemirror.net/6/docs/ref/#state.EditorState^tabSize) when that
    contains tabs.
    */
    function getIndentUnit(state) {
        let unit = state.facet(indentUnit);
        return unit.charCodeAt(0) == 9 ? state.tabSize * unit.length : unit.length;
    }
    /**
    Create an indentation string that covers columns 0 to `cols`.
    Will use tabs for as much of the columns as possible when the
    [`indentUnit`](https://codemirror.net/6/docs/ref/#language.indentUnit) facet contains
    tabs.
    */
    function indentString(state, cols) {
        let result = "", ts = state.tabSize, ch = state.facet(indentUnit)[0];
        if (ch == "\t") {
            while (cols >= ts) {
                result += "\t";
                cols -= ts;
            }
            ch = " ";
        }
        for (let i = 0; i < cols; i++)
            result += ch;
        return result;
    }
    /**
    Get the indentation, as a column number, at the given position.
    Will first consult any [indent services](https://codemirror.net/6/docs/ref/#language.indentService)
    that are registered, and if none of those return an indentation,
    this will check the syntax tree for the [indent node
    prop](https://codemirror.net/6/docs/ref/#language.indentNodeProp) and use that if found. Returns a
    number when an indentation could be determined, and null
    otherwise.
    */
    function getIndentation(context, pos) {
        if (context instanceof EditorState)
            context = new IndentContext(context);
        for (let service of context.state.facet(indentService)) {
            let result = service(context, pos);
            if (result !== undefined)
                return result;
        }
        let tree = syntaxTree(context.state);
        return tree.length >= pos ? syntaxIndentation(context, tree, pos) : null;
    }
    /**
    Indentation contexts are used when calling [indentation
    services](https://codemirror.net/6/docs/ref/#language.indentService). They provide helper utilities
    useful in indentation logic, and can selectively override the
    indentation reported for some lines.
    */
    class IndentContext {
        /**
        Create an indent context.
        */
        constructor(
        /**
        The editor state.
        */
        state,
        /**
        @internal
        */
        options = {}) {
            this.state = state;
            this.options = options;
            this.unit = getIndentUnit(state);
        }
        /**
        Get a description of the line at the given position, taking
        [simulated line
        breaks](https://codemirror.net/6/docs/ref/#language.IndentContext.constructor^options.simulateBreak)
        into account. If there is such a break at `pos`, the `bias`
        argument determines whether the part of the line line before or
        after the break is used.
        */
        lineAt(pos, bias = 1) {
            let line = this.state.doc.lineAt(pos);
            let { simulateBreak, simulateDoubleBreak } = this.options;
            if (simulateBreak != null && simulateBreak >= line.from && simulateBreak <= line.to) {
                if (simulateDoubleBreak && simulateBreak == pos)
                    return { text: "", from: pos };
                else if (bias < 0 ? simulateBreak < pos : simulateBreak <= pos)
                    return { text: line.text.slice(simulateBreak - line.from), from: simulateBreak };
                else
                    return { text: line.text.slice(0, simulateBreak - line.from), from: line.from };
            }
            return line;
        }
        /**
        Get the text directly after `pos`, either the entire line
        or the next 100 characters, whichever is shorter.
        */
        textAfterPos(pos, bias = 1) {
            if (this.options.simulateDoubleBreak && pos == this.options.simulateBreak)
                return "";
            let { text, from } = this.lineAt(pos, bias);
            return text.slice(pos - from, Math.min(text.length, pos + 100 - from));
        }
        /**
        Find the column for the given position.
        */
        column(pos, bias = 1) {
            let { text, from } = this.lineAt(pos, bias);
            let result = this.countColumn(text, pos - from);
            let override = this.options.overrideIndentation ? this.options.overrideIndentation(from) : -1;
            if (override > -1)
                result += override - this.countColumn(text, text.search(/\S|$/));
            return result;
        }
        /**
        Find the column position (taking tabs into account) of the given
        position in the given string.
        */
        countColumn(line, pos = line.length) {
            return countColumn(line, this.state.tabSize, pos);
        }
        /**
        Find the indentation column of the line at the given point.
        */
        lineIndent(pos, bias = 1) {
            let { text, from } = this.lineAt(pos, bias);
            let override = this.options.overrideIndentation;
            if (override) {
                let overriden = override(from);
                if (overriden > -1)
                    return overriden;
            }
            return this.countColumn(text, text.search(/\S|$/));
        }
        /**
        Returns the [simulated line
        break](https://codemirror.net/6/docs/ref/#language.IndentContext.constructor^options.simulateBreak)
        for this context, if any.
        */
        get simulatedBreak() {
            return this.options.simulateBreak || null;
        }
    }
    /**
    A syntax tree node prop used to associate indentation strategies
    with node types. Such a strategy is a function from an indentation
    context to a column number (see also
    [`indentString`](https://codemirror.net/6/docs/ref/#language.indentString)) or null, where null
    indicates that no definitive indentation can be determined.
    */
    const indentNodeProp = /*@__PURE__*/new NodeProp();
    // Compute the indentation for a given position from the syntax tree.
    function syntaxIndentation(cx, ast, pos) {
        let stack = ast.resolveStack(pos);
        let inner = ast.resolveInner(pos, -1).resolve(pos, 0).enterUnfinishedNodesBefore(pos);
        if (inner != stack.node) {
            let add = [];
            for (let cur = inner; cur && !(cur.from == stack.node.from && cur.type == stack.node.type); cur = cur.parent)
                add.push(cur);
            for (let i = add.length - 1; i >= 0; i--)
                stack = { node: add[i], next: stack };
        }
        return indentFor(stack, cx, pos);
    }
    function indentFor(stack, cx, pos) {
        for (let cur = stack; cur; cur = cur.next) {
            let strategy = indentStrategy(cur.node);
            if (strategy)
                return strategy(TreeIndentContext.create(cx, pos, cur));
        }
        return 0;
    }
    function ignoreClosed(cx) {
        return cx.pos == cx.options.simulateBreak && cx.options.simulateDoubleBreak;
    }
    function indentStrategy(tree) {
        let strategy = tree.type.prop(indentNodeProp);
        if (strategy)
            return strategy;
        let first = tree.firstChild, close;
        if (first && (close = first.type.prop(NodeProp.closedBy))) {
            let last = tree.lastChild, closed = last && close.indexOf(last.name) > -1;
            return cx => delimitedStrategy(cx, true, 1, undefined, closed && !ignoreClosed(cx) ? last.from : undefined);
        }
        return tree.parent == null ? topIndent$1 : null;
    }
    function topIndent$1() { return 0; }
    /**
    Objects of this type provide context information and helper
    methods to indentation functions registered on syntax nodes.
    */
    class TreeIndentContext extends IndentContext {
        constructor(base,
        /**
        The position at which indentation is being computed.
        */
        pos,
        /**
        @internal
        */
        context) {
            super(base.state, base.options);
            this.base = base;
            this.pos = pos;
            this.context = context;
        }
        /**
        The syntax tree node to which the indentation strategy
        applies.
        */
        get node() { return this.context.node; }
        /**
        @internal
        */
        static create(base, pos, context) {
            return new TreeIndentContext(base, pos, context);
        }
        /**
        Get the text directly after `this.pos`, either the entire line
        or the next 100 characters, whichever is shorter.
        */
        get textAfter() {
            return this.textAfterPos(this.pos);
        }
        /**
        Get the indentation at the reference line for `this.node`, which
        is the line on which it starts, unless there is a node that is
        _not_ a parent of this node covering the start of that line. If
        so, the line at the start of that node is tried, again skipping
        on if it is covered by another such node.
        */
        get baseIndent() {
            return this.baseIndentFor(this.node);
        }
        /**
        Get the indentation for the reference line of the given node
        (see [`baseIndent`](https://codemirror.net/6/docs/ref/#language.TreeIndentContext.baseIndent)).
        */
        baseIndentFor(node) {
            let line = this.state.doc.lineAt(node.from);
            // Skip line starts that are covered by a sibling (or cousin, etc)
            for (;;) {
                let atBreak = node.resolve(line.from);
                while (atBreak.parent && atBreak.parent.from == atBreak.from)
                    atBreak = atBreak.parent;
                if (isParent(atBreak, node))
                    break;
                line = this.state.doc.lineAt(atBreak.from);
            }
            return this.lineIndent(line.from);
        }
        /**
        Continue looking for indentations in the node's parent nodes,
        and return the result of that.
        */
        continue() {
            return indentFor(this.context.next, this.base, this.pos);
        }
    }
    function isParent(parent, of) {
        for (let cur = of; cur; cur = cur.parent)
            if (parent == cur)
                return true;
        return false;
    }
    // Check whether a delimited node is aligned (meaning there are
    // non-skipped nodes on the same line as the opening delimiter). And
    // if so, return the opening token.
    function bracketedAligned(context) {
        let tree = context.node;
        let openToken = tree.childAfter(tree.from), last = tree.lastChild;
        if (!openToken)
            return null;
        let sim = context.options.simulateBreak;
        let openLine = context.state.doc.lineAt(openToken.from);
        let lineEnd = sim == null || sim <= openLine.from ? openLine.to : Math.min(openLine.to, sim);
        for (let pos = openToken.to;;) {
            let next = tree.childAfter(pos);
            if (!next || next == last)
                return null;
            if (!next.type.isSkipped) {
                if (next.from >= lineEnd)
                    return null;
                let space = /^ */.exec(openLine.text.slice(openToken.to - openLine.from))[0].length;
                return { from: openToken.from, to: openToken.to + space };
            }
            pos = next.to;
        }
    }
    /**
    An indentation strategy for delimited (usually bracketed) nodes.
    Will, by default, indent one unit more than the parent's base
    indent unless the line starts with a closing token. When `align`
    is true and there are non-skipped nodes on the node's opening
    line, the content of the node will be aligned with the end of the
    opening node, like this:

        foo(bar,
            baz)
    */
    function delimitedIndent({ closing, align = true, units = 1 }) {
        return (context) => delimitedStrategy(context, align, units, closing);
    }
    function delimitedStrategy(context, align, units, closing, closedAt) {
        let after = context.textAfter, space = after.match(/^\s*/)[0].length;
        let closed = closing && after.slice(space, space + closing.length) == closing || closedAt == context.pos + space;
        let aligned = align ? bracketedAligned(context) : null;
        if (aligned)
            return closed ? context.column(aligned.from) : context.column(aligned.to);
        return context.baseIndent + (closed ? 0 : context.unit * units);
    }
    /**
    An indentation strategy that aligns a node's content to its base
    indentation.
    */
    const flatIndent = (context) => context.baseIndent;
    /**
    Creates an indentation strategy that, by default, indents
    continued lines one unit more than the node's base indentation.
    You can provide `except` to prevent indentation of lines that
    match a pattern (for example `/^else\b/` in `if`/`else`
    constructs), and you can change the amount of units used with the
    `units` option.
    */
    function continuedIndent({ except, units = 1 } = {}) {
        return (context) => {
            let matchExcept = except && except.test(context.textAfter);
            return context.baseIndent + (matchExcept ? 0 : units * context.unit);
        };
    }
    const DontIndentBeyond = 200;
    /**
    Enables reindentation on input. When a language defines an
    `indentOnInput` field in its [language
    data](https://codemirror.net/6/docs/ref/#state.EditorState.languageDataAt), which must hold a regular
    expression, the line at the cursor will be reindented whenever new
    text is typed and the input from the start of the line up to the
    cursor matches that regexp.

    To avoid unneccesary reindents, it is recommended to start the
    regexp with `^` (usually followed by `\s*`), and end it with `$`.
    For example, `/^\s*\}$/` will reindent when a closing brace is
    added at the start of a line.
    */
    function indentOnInput() {
        return EditorState.transactionFilter.of(tr => {
            if (!tr.docChanged || !tr.isUserEvent("input.type") && !tr.isUserEvent("input.complete"))
                return tr;
            let rules = tr.startState.languageDataAt("indentOnInput", tr.startState.selection.main.head);
            if (!rules.length)
                return tr;
            let doc = tr.newDoc, { head } = tr.newSelection.main, line = doc.lineAt(head);
            if (head > line.from + DontIndentBeyond)
                return tr;
            let lineStart = doc.sliceString(line.from, head);
            if (!rules.some(r => r.test(lineStart)))
                return tr;
            let { state } = tr, last = -1, changes = [];
            for (let { head } of state.selection.ranges) {
                let line = state.doc.lineAt(head);
                if (line.from == last)
                    continue;
                last = line.from;
                let indent = getIndentation(state, line.from);
                if (indent == null)
                    continue;
                let cur = /^\s*/.exec(line.text)[0];
                let norm = indentString(state, indent);
                if (cur != norm)
                    changes.push({ from: line.from, to: line.from + cur.length, insert: norm });
            }
            return changes.length ? [tr, { changes, sequential: true }] : tr;
        });
    }

    /**
    A facet that registers a code folding service. When called with
    the extent of a line, such a function should return a foldable
    range that starts on that line (but continues beyond it), if one
    can be found.
    */
    const foldService = /*@__PURE__*/Facet.define();
    /**
    This node prop is used to associate folding information with
    syntax node types. Given a syntax node, it should check whether
    that tree is foldable and return the range that can be collapsed
    when it is.
    */
    const foldNodeProp = /*@__PURE__*/new NodeProp();
    /**
    [Fold](https://codemirror.net/6/docs/ref/#language.foldNodeProp) function that folds everything but
    the first and the last child of a syntax node. Useful for nodes
    that start and end with delimiters.
    */
    function foldInside(node) {
        let first = node.firstChild, last = node.lastChild;
        return first && first.to < last.from ? { from: first.to, to: last.type.isError ? node.to : last.from } : null;
    }
    function syntaxFolding(state, start, end) {
        let tree = syntaxTree(state);
        if (tree.length < end)
            return null;
        let stack = tree.resolveStack(end, 1);
        let found = null;
        for (let iter = stack; iter; iter = iter.next) {
            let cur = iter.node;
            if (cur.to <= end || cur.from > end)
                continue;
            if (found && cur.from < start)
                break;
            let prop = cur.type.prop(foldNodeProp);
            if (prop && (cur.to < tree.length - 50 || tree.length == state.doc.length || !isUnfinished(cur))) {
                let value = prop(cur, state);
                if (value && value.from <= end && value.from >= start && value.to > end)
                    found = value;
            }
        }
        return found;
    }
    function isUnfinished(node) {
        let ch = node.lastChild;
        return ch && ch.to == node.to && ch.type.isError;
    }
    /**
    Check whether the given line is foldable. First asks any fold
    services registered through
    [`foldService`](https://codemirror.net/6/docs/ref/#language.foldService), and if none of them return
    a result, tries to query the [fold node
    prop](https://codemirror.net/6/docs/ref/#language.foldNodeProp) of syntax nodes that cover the end
    of the line.
    */
    function foldable(state, lineStart, lineEnd) {
        for (let service of state.facet(foldService)) {
            let result = service(state, lineStart, lineEnd);
            if (result)
                return result;
        }
        return syntaxFolding(state, lineStart, lineEnd);
    }
    function mapRange(range, mapping) {
        let from = mapping.mapPos(range.from, 1), to = mapping.mapPos(range.to, -1);
        return from >= to ? undefined : { from, to };
    }
    /**
    State effect that can be attached to a transaction to fold the
    given range. (You probably only need this in exceptional
    circumstances—usually you'll just want to let
    [`foldCode`](https://codemirror.net/6/docs/ref/#language.foldCode) and the [fold
    gutter](https://codemirror.net/6/docs/ref/#language.foldGutter) create the transactions.)
    */
    const foldEffect = /*@__PURE__*/StateEffect.define({ map: mapRange });
    /**
    State effect that unfolds the given range (if it was folded).
    */
    const unfoldEffect = /*@__PURE__*/StateEffect.define({ map: mapRange });
    /**
    The state field that stores the folded ranges (as a [decoration
    set](https://codemirror.net/6/docs/ref/#view.DecorationSet)). Can be passed to
    [`EditorState.toJSON`](https://codemirror.net/6/docs/ref/#state.EditorState.toJSON) and
    [`fromJSON`](https://codemirror.net/6/docs/ref/#state.EditorState^fromJSON) to serialize the fold
    state.
    */
    const foldState = /*@__PURE__*/StateField.define({
        create() {
            return Decoration.none;
        },
        update(folded, tr) {
            folded = folded.map(tr.changes);
            for (let e of tr.effects) {
                if (e.is(foldEffect) && !foldExists(folded, e.value.from, e.value.to)) {
                    let { preparePlaceholder } = tr.state.facet(foldConfig);
                    let widget = !preparePlaceholder ? foldWidget :
                        Decoration.replace({ widget: new PreparedFoldWidget(preparePlaceholder(tr.state, e.value)) });
                    folded = folded.update({ add: [widget.range(e.value.from, e.value.to)] });
                }
                else if (e.is(unfoldEffect)) {
                    folded = folded.update({ filter: (from, to) => e.value.from != from || e.value.to != to,
                        filterFrom: e.value.from, filterTo: e.value.to });
                }
            }
            // Clear folded ranges that cover the selection head
            if (tr.selection) {
                let onSelection = false, { head } = tr.selection.main;
                folded.between(head, head, (a, b) => { if (a < head && b > head)
                    onSelection = true; });
                if (onSelection)
                    folded = folded.update({
                        filterFrom: head,
                        filterTo: head,
                        filter: (a, b) => b <= head || a >= head
                    });
            }
            return folded;
        },
        provide: f => EditorView.decorations.from(f),
        toJSON(folded, state) {
            let ranges = [];
            folded.between(0, state.doc.length, (from, to) => { ranges.push(from, to); });
            return ranges;
        },
        fromJSON(value) {
            if (!Array.isArray(value) || value.length % 2)
                throw new RangeError("Invalid JSON for fold state");
            let ranges = [];
            for (let i = 0; i < value.length;) {
                let from = value[i++], to = value[i++];
                if (typeof from != "number" || typeof to != "number")
                    throw new RangeError("Invalid JSON for fold state");
                ranges.push(foldWidget.range(from, to));
            }
            return Decoration.set(ranges, true);
        }
    });
    function findFold(state, from, to) {
        var _a;
        let found = null;
        (_a = state.field(foldState, false)) === null || _a === void 0 ? void 0 : _a.between(from, to, (from, to) => {
            if (!found || found.from > from)
                found = { from, to };
        });
        return found;
    }
    function foldExists(folded, from, to) {
        let found = false;
        folded.between(from, from, (a, b) => { if (a == from && b == to)
            found = true; });
        return found;
    }
    const defaultConfig = {
        placeholderDOM: null,
        preparePlaceholder: null,
        placeholderText: "…"
    };
    const foldConfig = /*@__PURE__*/Facet.define({
        combine(values) { return combineConfig(values, defaultConfig); }
    });
    /**
    Create an extension that configures code folding.
    */
    function codeFolding(config) {
        let result = [foldState, baseTheme$1];
        return result;
    }
    function widgetToDOM(view, prepared) {
        let { state } = view, conf = state.facet(foldConfig);
        let onclick = (event) => {
            let line = view.lineBlockAt(view.posAtDOM(event.target));
            let folded = findFold(view.state, line.from, line.to);
            if (folded)
                view.dispatch({ effects: unfoldEffect.of(folded) });
            event.preventDefault();
        };
        if (conf.placeholderDOM)
            return conf.placeholderDOM(view, onclick, prepared);
        let element = document.createElement("span");
        element.textContent = conf.placeholderText;
        element.setAttribute("aria-label", state.phrase("folded code"));
        element.title = state.phrase("unfold");
        element.className = "cm-foldPlaceholder";
        element.onclick = onclick;
        return element;
    }
    const foldWidget = /*@__PURE__*/Decoration.replace({ widget: /*@__PURE__*/new class extends WidgetType {
            toDOM(view) { return widgetToDOM(view, null); }
        } });
    class PreparedFoldWidget extends WidgetType {
        constructor(value) {
            super();
            this.value = value;
        }
        eq(other) { return this.value == other.value; }
        toDOM(view) { return widgetToDOM(view, this.value); }
    }
    const foldGutterDefaults = {
        openText: "⌄",
        closedText: "›",
        markerDOM: null,
        domEventHandlers: {},
        foldingChanged: () => false
    };
    class FoldMarker extends GutterMarker {
        constructor(config, open) {
            super();
            this.config = config;
            this.open = open;
        }
        eq(other) { return this.config == other.config && this.open == other.open; }
        toDOM(view) {
            if (this.config.markerDOM)
                return this.config.markerDOM(this.open);
            let span = document.createElement("span");
            span.textContent = this.open ? this.config.openText : this.config.closedText;
            span.title = view.state.phrase(this.open ? "Fold line" : "Unfold line");
            return span;
        }
    }
    /**
    Create an extension that registers a fold gutter, which shows a
    fold status indicator before foldable lines (which can be clicked
    to fold or unfold the line).
    */
    function foldGutter(config = {}) {
        let fullConfig = Object.assign(Object.assign({}, foldGutterDefaults), config);
        let canFold = new FoldMarker(fullConfig, true), canUnfold = new FoldMarker(fullConfig, false);
        let markers = ViewPlugin.fromClass(class {
            constructor(view) {
                this.from = view.viewport.from;
                this.markers = this.buildMarkers(view);
            }
            update(update) {
                if (update.docChanged || update.viewportChanged ||
                    update.startState.facet(language$1) != update.state.facet(language$1) ||
                    update.startState.field(foldState, false) != update.state.field(foldState, false) ||
                    syntaxTree(update.startState) != syntaxTree(update.state) ||
                    fullConfig.foldingChanged(update))
                    this.markers = this.buildMarkers(update.view);
            }
            buildMarkers(view) {
                let builder = new RangeSetBuilder();
                for (let line of view.viewportLineBlocks) {
                    let mark = findFold(view.state, line.from, line.to) ? canUnfold
                        : foldable(view.state, line.from, line.to) ? canFold : null;
                    if (mark)
                        builder.add(line.from, line.from, mark);
                }
                return builder.finish();
            }
        });
        let { domEventHandlers } = fullConfig;
        return [
            markers,
            gutter({
                class: "cm-foldGutter",
                markers(view) { var _a; return ((_a = view.plugin(markers)) === null || _a === void 0 ? void 0 : _a.markers) || RangeSet.empty; },
                initialSpacer() {
                    return new FoldMarker(fullConfig, false);
                },
                domEventHandlers: Object.assign(Object.assign({}, domEventHandlers), { click: (view, line, event) => {
                        if (domEventHandlers.click && domEventHandlers.click(view, line, event))
                            return true;
                        let folded = findFold(view.state, line.from, line.to);
                        if (folded) {
                            view.dispatch({ effects: unfoldEffect.of(folded) });
                            return true;
                        }
                        let range = foldable(view.state, line.from, line.to);
                        if (range) {
                            view.dispatch({ effects: foldEffect.of(range) });
                            return true;
                        }
                        return false;
                    } })
            }),
            codeFolding()
        ];
    }
    const baseTheme$1 = /*@__PURE__*/EditorView.baseTheme({
        ".cm-foldPlaceholder": {
            backgroundColor: "#eee",
            border: "1px solid #ddd",
            color: "#888",
            borderRadius: ".2em",
            margin: "0 1px",
            padding: "0 1px",
            cursor: "pointer"
        },
        ".cm-foldGutter span": {
            padding: "0 1px",
            cursor: "pointer"
        }
    });

    /**
    A highlight style associates CSS styles with higlighting
    [tags](https://lezer.codemirror.net/docs/ref#highlight.Tag).
    */
    class HighlightStyle {
        constructor(
        /**
        The tag styles used to create this highlight style.
        */
        specs, options) {
            this.specs = specs;
            let modSpec;
            function def(spec) {
                let cls = StyleModule.newName();
                (modSpec || (modSpec = Object.create(null)))["." + cls] = spec;
                return cls;
            }
            const all = typeof options.all == "string" ? options.all : options.all ? def(options.all) : undefined;
            const scopeOpt = options.scope;
            this.scope = scopeOpt instanceof Language ? (type) => type.prop(languageDataProp) == scopeOpt.data
                : scopeOpt ? (type) => type == scopeOpt : undefined;
            this.style = tagHighlighter(specs.map(style => ({
                tag: style.tag,
                class: style.class || def(Object.assign({}, style, { tag: null }))
            })), {
                all,
            }).style;
            this.module = modSpec ? new StyleModule(modSpec) : null;
            this.themeType = options.themeType;
        }
        /**
        Create a highlighter style that associates the given styles to
        the given tags. The specs must be objects that hold a style tag
        or array of tags in their `tag` property, and either a single
        `class` property providing a static CSS class (for highlighter
        that rely on external styling), or a
        [`style-mod`](https://github.com/marijnh/style-mod#documentation)-style
        set of CSS properties (which define the styling for those tags).

        The CSS rules created for a highlighter will be emitted in the
        order of the spec's properties. That means that for elements that
        have multiple tags associated with them, styles defined further
        down in the list will have a higher CSS precedence than styles
        defined earlier.
        */
        static define(specs, options) {
            return new HighlightStyle(specs, options || {});
        }
    }
    const highlighterFacet = /*@__PURE__*/Facet.define();
    const fallbackHighlighter = /*@__PURE__*/Facet.define({
        combine(values) { return values.length ? [values[0]] : null; }
    });
    function getHighlighters(state) {
        let main = state.facet(highlighterFacet);
        return main.length ? main : state.facet(fallbackHighlighter);
    }
    /**
    Wrap a highlighter in an editor extension that uses it to apply
    syntax highlighting to the editor content.

    When multiple (non-fallback) styles are provided, the styling
    applied is the union of the classes they emit.
    */
    function syntaxHighlighting(highlighter, options) {
        let ext = [treeHighlighter], themeType;
        if (highlighter instanceof HighlightStyle) {
            if (highlighter.module)
                ext.push(EditorView.styleModule.of(highlighter.module));
            themeType = highlighter.themeType;
        }
        if (themeType)
            ext.push(highlighterFacet.computeN([EditorView.darkTheme], state => {
                return state.facet(EditorView.darkTheme) == (themeType == "dark") ? [highlighter] : [];
            }));
        else
            ext.push(highlighterFacet.of(highlighter));
        return ext;
    }
    class TreeHighlighter {
        constructor(view) {
            this.markCache = Object.create(null);
            this.tree = syntaxTree(view.state);
            this.decorations = this.buildDeco(view, getHighlighters(view.state));
            this.decoratedTo = view.viewport.to;
        }
        update(update) {
            let tree = syntaxTree(update.state), highlighters = getHighlighters(update.state);
            let styleChange = highlighters != getHighlighters(update.startState);
            let { viewport } = update.view, decoratedToMapped = update.changes.mapPos(this.decoratedTo, 1);
            if (tree.length < viewport.to && !styleChange && tree.type == this.tree.type && decoratedToMapped >= viewport.to) {
                this.decorations = this.decorations.map(update.changes);
                this.decoratedTo = decoratedToMapped;
            }
            else if (tree != this.tree || update.viewportChanged || styleChange) {
                this.tree = tree;
                this.decorations = this.buildDeco(update.view, highlighters);
                this.decoratedTo = viewport.to;
            }
        }
        buildDeco(view, highlighters) {
            if (!highlighters || !this.tree.length)
                return Decoration.none;
            let builder = new RangeSetBuilder();
            for (let { from, to } of view.visibleRanges) {
                highlightTree(this.tree, highlighters, (from, to, style) => {
                    builder.add(from, to, this.markCache[style] || (this.markCache[style] = Decoration.mark({ class: style })));
                }, from, to);
            }
            return builder.finish();
        }
    }
    const treeHighlighter = /*@__PURE__*/Prec.high(/*@__PURE__*/ViewPlugin.fromClass(TreeHighlighter, {
        decorations: v => v.decorations
    }));
    /**
    A default highlight style (works well with light themes).
    */
    /*@__PURE__*/HighlightStyle.define([
        { tag: tags$1.meta,
            color: "#404740" },
        { tag: tags$1.link,
            textDecoration: "underline" },
        { tag: tags$1.heading,
            textDecoration: "underline",
            fontWeight: "bold" },
        { tag: tags$1.emphasis,
            fontStyle: "italic" },
        { tag: tags$1.strong,
            fontWeight: "bold" },
        { tag: tags$1.strikethrough,
            textDecoration: "line-through" },
        { tag: tags$1.keyword,
            color: "#708" },
        { tag: [tags$1.atom, tags$1.bool, tags$1.url, tags$1.contentSeparator, tags$1.labelName],
            color: "#219" },
        { tag: [tags$1.literal, tags$1.inserted],
            color: "#164" },
        { tag: [tags$1.string, tags$1.deleted],
            color: "#a11" },
        { tag: [tags$1.regexp, tags$1.escape, /*@__PURE__*/tags$1.special(tags$1.string)],
            color: "#e40" },
        { tag: /*@__PURE__*/tags$1.definition(tags$1.variableName),
            color: "#00f" },
        { tag: /*@__PURE__*/tags$1.local(tags$1.variableName),
            color: "#30a" },
        { tag: [tags$1.typeName, tags$1.namespace],
            color: "#085" },
        { tag: tags$1.className,
            color: "#167" },
        { tag: [/*@__PURE__*/tags$1.special(tags$1.variableName), tags$1.macroName],
            color: "#256" },
        { tag: /*@__PURE__*/tags$1.definition(tags$1.propertyName),
            color: "#00c" },
        { tag: tags$1.comment,
            color: "#940" },
        { tag: tags$1.invalid,
            color: "#f00" }
    ]);

    const baseTheme$2 = /*@__PURE__*/EditorView.baseTheme({
        "&.cm-focused .cm-matchingBracket": { backgroundColor: "#328c8252" },
        "&.cm-focused .cm-nonmatchingBracket": { backgroundColor: "#bb555544" }
    });
    const DefaultScanDist = 10000, DefaultBrackets = "()[]{}";
    const bracketMatchingConfig = /*@__PURE__*/Facet.define({
        combine(configs) {
            return combineConfig(configs, {
                afterCursor: true,
                brackets: DefaultBrackets,
                maxScanDistance: DefaultScanDist,
                renderMatch: defaultRenderMatch
            });
        }
    });
    const matchingMark = /*@__PURE__*/Decoration.mark({ class: "cm-matchingBracket" }), nonmatchingMark = /*@__PURE__*/Decoration.mark({ class: "cm-nonmatchingBracket" });
    function defaultRenderMatch(match) {
        let decorations = [];
        let mark = match.matched ? matchingMark : nonmatchingMark;
        decorations.push(mark.range(match.start.from, match.start.to));
        if (match.end)
            decorations.push(mark.range(match.end.from, match.end.to));
        return decorations;
    }
    const bracketMatchingState = /*@__PURE__*/StateField.define({
        create() { return Decoration.none; },
        update(deco, tr) {
            if (!tr.docChanged && !tr.selection)
                return deco;
            let decorations = [];
            let config = tr.state.facet(bracketMatchingConfig);
            for (let range of tr.state.selection.ranges) {
                if (!range.empty)
                    continue;
                let match = matchBrackets(tr.state, range.head, -1, config)
                    || (range.head > 0 && matchBrackets(tr.state, range.head - 1, 1, config))
                    || (config.afterCursor &&
                        (matchBrackets(tr.state, range.head, 1, config) ||
                            (range.head < tr.state.doc.length && matchBrackets(tr.state, range.head + 1, -1, config))));
                if (match)
                    decorations = decorations.concat(config.renderMatch(match, tr.state));
            }
            return Decoration.set(decorations, true);
        },
        provide: f => EditorView.decorations.from(f)
    });
    const bracketMatchingUnique = [
        bracketMatchingState,
        baseTheme$2
    ];
    /**
    Create an extension that enables bracket matching. Whenever the
    cursor is next to a bracket, that bracket and the one it matches
    are highlighted. Or, when no matching bracket is found, another
    highlighting style is used to indicate this.
    */
    function bracketMatching(config = {}) {
        return [bracketMatchingConfig.of(config), bracketMatchingUnique];
    }
    /**
    When larger syntax nodes, such as HTML tags, are marked as
    opening/closing, it can be a bit messy to treat the whole node as
    a matchable bracket. This node prop allows you to define, for such
    a node, a ‘handle’—the part of the node that is highlighted, and
    that the cursor must be on to activate highlighting in the first
    place.
    */
    const bracketMatchingHandle = /*@__PURE__*/new NodeProp();
    function matchingNodes(node, dir, brackets) {
        let byProp = node.prop(dir < 0 ? NodeProp.openedBy : NodeProp.closedBy);
        if (byProp)
            return byProp;
        if (node.name.length == 1) {
            let index = brackets.indexOf(node.name);
            if (index > -1 && index % 2 == (dir < 0 ? 1 : 0))
                return [brackets[index + dir]];
        }
        return null;
    }
    function findHandle(node) {
        let hasHandle = node.type.prop(bracketMatchingHandle);
        return hasHandle ? hasHandle(node.node) : node;
    }
    /**
    Find the matching bracket for the token at `pos`, scanning
    direction `dir`. Only the `brackets` and `maxScanDistance`
    properties are used from `config`, if given. Returns null if no
    bracket was found at `pos`, or a match result otherwise.
    */
    function matchBrackets(state, pos, dir, config = {}) {
        let maxScanDistance = config.maxScanDistance || DefaultScanDist, brackets = config.brackets || DefaultBrackets;
        let tree = syntaxTree(state), node = tree.resolveInner(pos, dir);
        for (let cur = node; cur; cur = cur.parent) {
            let matches = matchingNodes(cur.type, dir, brackets);
            if (matches && cur.from < cur.to) {
                let handle = findHandle(cur);
                if (handle && (dir > 0 ? pos >= handle.from && pos < handle.to : pos > handle.from && pos <= handle.to))
                    return matchMarkedBrackets(state, pos, dir, cur, handle, matches, brackets);
            }
        }
        return matchPlainBrackets(state, pos, dir, tree, node.type, maxScanDistance, brackets);
    }
    function matchMarkedBrackets(_state, _pos, dir, token, handle, matching, brackets) {
        let parent = token.parent, firstToken = { from: handle.from, to: handle.to };
        let depth = 0, cursor = parent === null || parent === void 0 ? void 0 : parent.cursor();
        if (cursor && (dir < 0 ? cursor.childBefore(token.from) : cursor.childAfter(token.to)))
            do {
                if (dir < 0 ? cursor.to <= token.from : cursor.from >= token.to) {
                    if (depth == 0 && matching.indexOf(cursor.type.name) > -1 && cursor.from < cursor.to) {
                        let endHandle = findHandle(cursor);
                        return { start: firstToken, end: endHandle ? { from: endHandle.from, to: endHandle.to } : undefined, matched: true };
                    }
                    else if (matchingNodes(cursor.type, dir, brackets)) {
                        depth++;
                    }
                    else if (matchingNodes(cursor.type, -dir, brackets)) {
                        if (depth == 0) {
                            let endHandle = findHandle(cursor);
                            return {
                                start: firstToken,
                                end: endHandle && endHandle.from < endHandle.to ? { from: endHandle.from, to: endHandle.to } : undefined,
                                matched: false
                            };
                        }
                        depth--;
                    }
                }
            } while (dir < 0 ? cursor.prevSibling() : cursor.nextSibling());
        return { start: firstToken, matched: false };
    }
    function matchPlainBrackets(state, pos, dir, tree, tokenType, maxScanDistance, brackets) {
        let startCh = dir < 0 ? state.sliceDoc(pos - 1, pos) : state.sliceDoc(pos, pos + 1);
        let bracket = brackets.indexOf(startCh);
        if (bracket < 0 || (bracket % 2 == 0) != (dir > 0))
            return null;
        let startToken = { from: dir < 0 ? pos - 1 : pos, to: dir > 0 ? pos + 1 : pos };
        let iter = state.doc.iterRange(pos, dir > 0 ? state.doc.length : 0), depth = 0;
        for (let distance = 0; !(iter.next()).done && distance <= maxScanDistance;) {
            let text = iter.value;
            if (dir < 0)
                distance += text.length;
            let basePos = pos + distance * dir;
            for (let pos = dir > 0 ? 0 : text.length - 1, end = dir > 0 ? text.length : -1; pos != end; pos += dir) {
                let found = brackets.indexOf(text[pos]);
                if (found < 0 || tree.resolveInner(basePos + pos, 1).type != tokenType)
                    continue;
                if ((found % 2 == 0) == (dir > 0)) {
                    depth++;
                }
                else if (depth == 1) { // Closing
                    return { start: startToken, end: { from: basePos + pos, to: basePos + pos + 1 }, matched: (found >> 1) == (bracket >> 1) };
                }
                else {
                    depth--;
                }
            }
            if (dir > 0)
                distance += text.length;
        }
        return iter.done ? { start: startToken, matched: false } : null;
    }
    const noTokens = /*@__PURE__*/Object.create(null);
    const typeArray = [NodeType.none];
    const warned = [];
    // Cache of node types by name and tags
    const byTag = /*@__PURE__*/Object.create(null);
    const defaultTable = /*@__PURE__*/Object.create(null);
    for (let [legacyName, name] of [
        ["variable", "variableName"],
        ["variable-2", "variableName.special"],
        ["string-2", "string.special"],
        ["def", "variableName.definition"],
        ["tag", "tagName"],
        ["attribute", "attributeName"],
        ["type", "typeName"],
        ["builtin", "variableName.standard"],
        ["qualifier", "modifier"],
        ["error", "invalid"],
        ["header", "heading"],
        ["property", "propertyName"]
    ])
        defaultTable[legacyName] = /*@__PURE__*/createTokenType(noTokens, name);
    function warnForPart(part, msg) {
        if (warned.indexOf(part) > -1)
            return;
        warned.push(part);
        console.warn(msg);
    }
    function createTokenType(extra, tagStr) {
        let tags$1$1 = [];
        for (let name of tagStr.split(" ")) {
            let found = [];
            for (let part of name.split(".")) {
                let value = (extra[part] || tags$1[part]);
                if (!value) {
                    warnForPart(part, `Unknown highlighting tag ${part}`);
                }
                else if (typeof value == "function") {
                    if (!found.length)
                        warnForPart(part, `Modifier ${part} used at start of tag`);
                    else
                        found = found.map(value);
                }
                else {
                    if (found.length)
                        warnForPart(part, `Tag ${part} used as modifier`);
                    else
                        found = Array.isArray(value) ? value : [value];
                }
            }
            for (let tag of found)
                tags$1$1.push(tag);
        }
        if (!tags$1$1.length)
            return 0;
        let name = tagStr.replace(/ /g, "_"), key = name + " " + tags$1$1.map(t => t.id);
        let known = byTag[key];
        if (known)
            return known.id;
        let type = byTag[key] = NodeType.define({
            id: typeArray.length,
            name,
            props: [styleTags({ [name]: tags$1$1 })]
        });
        typeArray.push(type);
        return type.id;
    }
    ({
        rtl: /*@__PURE__*/Decoration.mark({ class: "cm-iso", inclusive: true, attributes: { dir: "rtl" }, bidiIsolate: Direction.RTL }),
        ltr: /*@__PURE__*/Decoration.mark({ class: "cm-iso", inclusive: true, attributes: { dir: "ltr" }, bidiIsolate: Direction.LTR }),
        auto: /*@__PURE__*/Decoration.mark({ class: "cm-iso", inclusive: true, attributes: { dir: "auto" }, bidiIsolate: null })
    });

    /**
    An instance of this is passed to completion source functions.
    */
    class CompletionContext {
        /**
        Create a new completion context. (Mostly useful for testing
        completion sources—in the editor, the extension will create
        these for you.)
        */
        constructor(
        /**
        The editor state that the completion happens in.
        */
        state,
        /**
        The position at which the completion is happening.
        */
        pos,
        /**
        Indicates whether completion was activated explicitly, or
        implicitly by typing. The usual way to respond to this is to
        only return completions when either there is part of a
        completable entity before the cursor, or `explicit` is true.
        */
        explicit,
        /**
        The editor view. May be undefined if the context was created
        in a situation where there is no such view available, such as
        in synchronous updates via
        [`CompletionResult.update`](https://codemirror.net/6/docs/ref/#autocomplete.CompletionResult.update)
        or when called by test code.
        */
        view) {
            this.state = state;
            this.pos = pos;
            this.explicit = explicit;
            this.view = view;
            /**
            @internal
            */
            this.abortListeners = [];
            /**
            @internal
            */
            this.abortOnDocChange = false;
        }
        /**
        Get the extent, content, and (if there is a token) type of the
        token before `this.pos`.
        */
        tokenBefore(types) {
            let token = syntaxTree(this.state).resolveInner(this.pos, -1);
            while (token && types.indexOf(token.name) < 0)
                token = token.parent;
            return token ? { from: token.from, to: this.pos,
                text: this.state.sliceDoc(token.from, this.pos),
                type: token.type } : null;
        }
        /**
        Get the match of the given expression directly before the
        cursor.
        */
        matchBefore(expr) {
            let line = this.state.doc.lineAt(this.pos);
            let start = Math.max(line.from, this.pos - 250);
            let str = line.text.slice(start - line.from, this.pos - line.from);
            let found = str.search(ensureAnchor(expr, false));
            return found < 0 ? null : { from: start + found, to: this.pos, text: str.slice(found) };
        }
        /**
        Yields true when the query has been aborted. Can be useful in
        asynchronous queries to avoid doing work that will be ignored.
        */
        get aborted() { return this.abortListeners == null; }
        /**
        Allows you to register abort handlers, which will be called when
        the query is
        [aborted](https://codemirror.net/6/docs/ref/#autocomplete.CompletionContext.aborted).

        By default, running queries will not be aborted for regular
        typing or backspacing, on the assumption that they are likely to
        return a result with a
        [`validFor`](https://codemirror.net/6/docs/ref/#autocomplete.CompletionResult.validFor) field that
        allows the result to be used after all. Passing `onDocChange:
        true` will cause this query to be aborted for any document
        change.
        */
        addEventListener(type, listener, options) {
            if (type == "abort" && this.abortListeners) {
                this.abortListeners.push(listener);
                if (options && options.onDocChange)
                    this.abortOnDocChange = true;
            }
        }
    }
    function toSet(chars) {
        let flat = Object.keys(chars).join("");
        let words = /\w/.test(flat);
        if (words)
            flat = flat.replace(/\w/g, "");
        return `[${words ? "\\w" : ""}${flat.replace(/[^\w\s]/g, "\\$&")}]`;
    }
    function prefixMatch(options) {
        let first = Object.create(null), rest = Object.create(null);
        for (let { label } of options) {
            first[label[0]] = true;
            for (let i = 1; i < label.length; i++)
                rest[label[i]] = true;
        }
        let source = toSet(first) + toSet(rest) + "*$";
        return [new RegExp("^" + source), new RegExp(source)];
    }
    /**
    Given a a fixed array of options, return an autocompleter that
    completes them.
    */
    function completeFromList(list) {
        let options = list.map(o => typeof o == "string" ? { label: o } : o);
        let [validFor, match] = options.every(o => /^\w+$/.test(o.label)) ? [/\w*$/, /\w+$/] : prefixMatch(options);
        return (context) => {
            let token = context.matchBefore(match);
            return token || context.explicit ? { from: token ? token.from : context.pos, options, validFor } : null;
        };
    }
    /**
    Wrap the given completion source so that it will not fire when the
    cursor is in a syntax node with one of the given names.
    */
    function ifNotIn(nodes, source) {
        return (context) => {
            for (let pos = syntaxTree(context.state).resolveInner(context.pos, -1); pos; pos = pos.parent) {
                if (nodes.indexOf(pos.name) > -1)
                    return null;
                if (pos.type.isTop)
                    break;
            }
            return source(context);
        };
    }
    class Option {
        constructor(completion, source, match, score) {
            this.completion = completion;
            this.source = source;
            this.match = match;
            this.score = score;
        }
    }
    function cur(state) { return state.selection.main.from; }
    // Make sure the given regexp has a $ at its end and, if `start` is
    // true, a ^ at its start.
    function ensureAnchor(expr, start) {
        var _a;
        let { source } = expr;
        let addStart = start && source[0] != "^", addEnd = source[source.length - 1] != "$";
        if (!addStart && !addEnd)
            return expr;
        return new RegExp(`${addStart ? "^" : ""}(?:${source})${addEnd ? "$" : ""}`, (_a = expr.flags) !== null && _a !== void 0 ? _a : (expr.ignoreCase ? "i" : ""));
    }
    /**
    This annotation is added to transactions that are produced by
    picking a completion.
    */
    const pickedCompletion = /*@__PURE__*/Annotation.define();
    /**
    Helper function that returns a transaction spec which inserts a
    completion's text in the main selection range, and any other
    selection range that has the same text in front of it.
    */
    function insertCompletionText(state, text, from, to) {
        let { main } = state.selection, fromOff = from - main.from, toOff = to - main.from;
        return Object.assign(Object.assign({}, state.changeByRange(range => {
            if (range != main && from != to &&
                state.sliceDoc(range.from + fromOff, range.from + toOff) != state.sliceDoc(from, to))
                return { range };
            let lines = state.toText(text);
            return {
                changes: { from: range.from + fromOff, to: to == main.from ? range.to : range.from + toOff, insert: lines },
                range: EditorSelection.cursor(range.from + fromOff + lines.length)
            };
        })), { scrollIntoView: true, userEvent: "input.complete" });
    }
    const SourceCache = /*@__PURE__*/new WeakMap();
    function asSource(source) {
        if (!Array.isArray(source))
            return source;
        let known = SourceCache.get(source);
        if (!known)
            SourceCache.set(source, known = completeFromList(source));
        return known;
    }
    const startCompletionEffect = /*@__PURE__*/StateEffect.define();
    const closeCompletionEffect = /*@__PURE__*/StateEffect.define();

    // A pattern matcher for fuzzy completion matching. Create an instance
    // once for a pattern, and then use that to match any number of
    // completions.
    class FuzzyMatcher {
        constructor(pattern) {
            this.pattern = pattern;
            this.chars = [];
            this.folded = [];
            // Buffers reused by calls to `match` to track matched character
            // positions.
            this.any = [];
            this.precise = [];
            this.byWord = [];
            this.score = 0;
            this.matched = [];
            for (let p = 0; p < pattern.length;) {
                let char = codePointAt(pattern, p), size = codePointSize(char);
                this.chars.push(char);
                let part = pattern.slice(p, p + size), upper = part.toUpperCase();
                this.folded.push(codePointAt(upper == part ? part.toLowerCase() : upper, 0));
                p += size;
            }
            this.astral = pattern.length != this.chars.length;
        }
        ret(score, matched) {
            this.score = score;
            this.matched = matched;
            return this;
        }
        // Matches a given word (completion) against the pattern (input).
        // Will return a boolean indicating whether there was a match and,
        // on success, set `this.score` to the score, `this.matched` to an
        // array of `from, to` pairs indicating the matched parts of `word`.
        //
        // The score is a number that is more negative the worse the match
        // is. See `Penalty` above.
        match(word) {
            if (this.pattern.length == 0)
                return this.ret(-100 /* Penalty.NotFull */, []);
            if (word.length < this.pattern.length)
                return null;
            let { chars, folded, any, precise, byWord } = this;
            // For single-character queries, only match when they occur right
            // at the start
            if (chars.length == 1) {
                let first = codePointAt(word, 0), firstSize = codePointSize(first);
                let score = firstSize == word.length ? 0 : -100 /* Penalty.NotFull */;
                if (first == chars[0]) ;
                else if (first == folded[0])
                    score += -200 /* Penalty.CaseFold */;
                else
                    return null;
                return this.ret(score, [0, firstSize]);
            }
            let direct = word.indexOf(this.pattern);
            if (direct == 0)
                return this.ret(word.length == this.pattern.length ? 0 : -100 /* Penalty.NotFull */, [0, this.pattern.length]);
            let len = chars.length, anyTo = 0;
            if (direct < 0) {
                for (let i = 0, e = Math.min(word.length, 200); i < e && anyTo < len;) {
                    let next = codePointAt(word, i);
                    if (next == chars[anyTo] || next == folded[anyTo])
                        any[anyTo++] = i;
                    i += codePointSize(next);
                }
                // No match, exit immediately
                if (anyTo < len)
                    return null;
            }
            // This tracks the extent of the precise (non-folded, not
            // necessarily adjacent) match
            let preciseTo = 0;
            // Tracks whether there is a match that hits only characters that
            // appear to be starting words. `byWordFolded` is set to true when
            // a case folded character is encountered in such a match
            let byWordTo = 0, byWordFolded = false;
            // If we've found a partial adjacent match, these track its state
            let adjacentTo = 0, adjacentStart = -1, adjacentEnd = -1;
            let hasLower = /[a-z]/.test(word), wordAdjacent = true;
            // Go over the option's text, scanning for the various kinds of matches
            for (let i = 0, e = Math.min(word.length, 200), prevType = 0 /* Tp.NonWord */; i < e && byWordTo < len;) {
                let next = codePointAt(word, i);
                if (direct < 0) {
                    if (preciseTo < len && next == chars[preciseTo])
                        precise[preciseTo++] = i;
                    if (adjacentTo < len) {
                        if (next == chars[adjacentTo] || next == folded[adjacentTo]) {
                            if (adjacentTo == 0)
                                adjacentStart = i;
                            adjacentEnd = i + 1;
                            adjacentTo++;
                        }
                        else {
                            adjacentTo = 0;
                        }
                    }
                }
                let ch, type = next < 0xff
                    ? (next >= 48 && next <= 57 || next >= 97 && next <= 122 ? 2 /* Tp.Lower */ : next >= 65 && next <= 90 ? 1 /* Tp.Upper */ : 0 /* Tp.NonWord */)
                    : ((ch = fromCodePoint(next)) != ch.toLowerCase() ? 1 /* Tp.Upper */ : ch != ch.toUpperCase() ? 2 /* Tp.Lower */ : 0 /* Tp.NonWord */);
                if (!i || type == 1 /* Tp.Upper */ && hasLower || prevType == 0 /* Tp.NonWord */ && type != 0 /* Tp.NonWord */) {
                    if (chars[byWordTo] == next || (folded[byWordTo] == next && (byWordFolded = true)))
                        byWord[byWordTo++] = i;
                    else if (byWord.length)
                        wordAdjacent = false;
                }
                prevType = type;
                i += codePointSize(next);
            }
            if (byWordTo == len && byWord[0] == 0 && wordAdjacent)
                return this.result(-100 /* Penalty.ByWord */ + (byWordFolded ? -200 /* Penalty.CaseFold */ : 0), byWord, word);
            if (adjacentTo == len && adjacentStart == 0)
                return this.ret(-200 /* Penalty.CaseFold */ - word.length + (adjacentEnd == word.length ? 0 : -100 /* Penalty.NotFull */), [0, adjacentEnd]);
            if (direct > -1)
                return this.ret(-700 /* Penalty.NotStart */ - word.length, [direct, direct + this.pattern.length]);
            if (adjacentTo == len)
                return this.ret(-200 /* Penalty.CaseFold */ + -700 /* Penalty.NotStart */ - word.length, [adjacentStart, adjacentEnd]);
            if (byWordTo == len)
                return this.result(-100 /* Penalty.ByWord */ + (byWordFolded ? -200 /* Penalty.CaseFold */ : 0) + -700 /* Penalty.NotStart */ +
                    (wordAdjacent ? 0 : -1100 /* Penalty.Gap */), byWord, word);
            return chars.length == 2 ? null
                : this.result((any[0] ? -700 /* Penalty.NotStart */ : 0) + -200 /* Penalty.CaseFold */ + -1100 /* Penalty.Gap */, any, word);
        }
        result(score, positions, word) {
            let result = [], i = 0;
            for (let pos of positions) {
                let to = pos + (this.astral ? codePointSize(codePointAt(word, pos)) : 1);
                if (i && result[i - 1] == pos)
                    result[i - 1] = to;
                else {
                    result[i++] = pos;
                    result[i++] = to;
                }
            }
            return this.ret(score - word.length, result);
        }
    }
    class StrictMatcher {
        constructor(pattern) {
            this.pattern = pattern;
            this.matched = [];
            this.score = 0;
            this.folded = pattern.toLowerCase();
        }
        match(word) {
            if (word.length < this.pattern.length)
                return null;
            let start = word.slice(0, this.pattern.length);
            let match = start == this.pattern ? 0 : start.toLowerCase() == this.folded ? -200 /* Penalty.CaseFold */ : null;
            if (match == null)
                return null;
            this.matched = [0, start.length];
            this.score = match + (word.length == this.pattern.length ? 0 : -100 /* Penalty.NotFull */);
            return this;
        }
    }

    const completionConfig = /*@__PURE__*/Facet.define({
        combine(configs) {
            return combineConfig(configs, {
                activateOnTyping: true,
                activateOnCompletion: () => false,
                activateOnTypingDelay: 100,
                selectOnOpen: true,
                override: null,
                closeOnBlur: true,
                maxRenderedOptions: 100,
                defaultKeymap: true,
                tooltipClass: () => "",
                optionClass: () => "",
                aboveCursor: false,
                icons: true,
                addToOptions: [],
                positionInfo: defaultPositionInfo,
                filterStrict: false,
                compareCompletions: (a, b) => a.label.localeCompare(b.label),
                interactionDelay: 75,
                updateSyncTime: 100
            }, {
                defaultKeymap: (a, b) => a && b,
                closeOnBlur: (a, b) => a && b,
                icons: (a, b) => a && b,
                tooltipClass: (a, b) => c => joinClass(a(c), b(c)),
                optionClass: (a, b) => c => joinClass(a(c), b(c)),
                addToOptions: (a, b) => a.concat(b),
                filterStrict: (a, b) => a || b,
            });
        }
    });
    function joinClass(a, b) {
        return a ? b ? a + " " + b : a : b;
    }
    function defaultPositionInfo(view, list, option, info, space, tooltip) {
        let rtl = view.textDirection == Direction.RTL, left = rtl, narrow = false;
        let side = "top", offset, maxWidth;
        let spaceLeft = list.left - space.left, spaceRight = space.right - list.right;
        let infoWidth = info.right - info.left, infoHeight = info.bottom - info.top;
        if (left && spaceLeft < Math.min(infoWidth, spaceRight))
            left = false;
        else if (!left && spaceRight < Math.min(infoWidth, spaceLeft))
            left = true;
        if (infoWidth <= (left ? spaceLeft : spaceRight)) {
            offset = Math.max(space.top, Math.min(option.top, space.bottom - infoHeight)) - list.top;
            maxWidth = Math.min(400 /* Info.Width */, left ? spaceLeft : spaceRight);
        }
        else {
            narrow = true;
            maxWidth = Math.min(400 /* Info.Width */, (rtl ? list.right : space.right - list.left) - 30 /* Info.Margin */);
            let spaceBelow = space.bottom - list.bottom;
            if (spaceBelow >= infoHeight || spaceBelow > list.top) { // Below the completion
                offset = option.bottom - list.top;
            }
            else { // Above it
                side = "bottom";
                offset = list.bottom - option.top;
            }
        }
        let scaleY = (list.bottom - list.top) / tooltip.offsetHeight;
        let scaleX = (list.right - list.left) / tooltip.offsetWidth;
        return {
            style: `${side}: ${offset / scaleY}px; max-width: ${maxWidth / scaleX}px`,
            class: "cm-completionInfo-" + (narrow ? (rtl ? "left-narrow" : "right-narrow") : left ? "left" : "right")
        };
    }

    function optionContent(config) {
        let content = config.addToOptions.slice();
        if (config.icons)
            content.push({
                render(completion) {
                    let icon = document.createElement("div");
                    icon.classList.add("cm-completionIcon");
                    if (completion.type)
                        icon.classList.add(...completion.type.split(/\s+/g).map(cls => "cm-completionIcon-" + cls));
                    icon.setAttribute("aria-hidden", "true");
                    return icon;
                },
                position: 20
            });
        content.push({
            render(completion, _s, _v, match) {
                let labelElt = document.createElement("span");
                labelElt.className = "cm-completionLabel";
                let label = completion.displayLabel || completion.label, off = 0;
                for (let j = 0; j < match.length;) {
                    let from = match[j++], to = match[j++];
                    if (from > off)
                        labelElt.appendChild(document.createTextNode(label.slice(off, from)));
                    let span = labelElt.appendChild(document.createElement("span"));
                    span.appendChild(document.createTextNode(label.slice(from, to)));
                    span.className = "cm-completionMatchedText";
                    off = to;
                }
                if (off < label.length)
                    labelElt.appendChild(document.createTextNode(label.slice(off)));
                return labelElt;
            },
            position: 50
        }, {
            render(completion) {
                if (!completion.detail)
                    return null;
                let detailElt = document.createElement("span");
                detailElt.className = "cm-completionDetail";
                detailElt.textContent = completion.detail;
                return detailElt;
            },
            position: 80
        });
        return content.sort((a, b) => a.position - b.position).map(a => a.render);
    }
    function rangeAroundSelected(total, selected, max) {
        if (total <= max)
            return { from: 0, to: total };
        if (selected < 0)
            selected = 0;
        if (selected <= (total >> 1)) {
            let off = Math.floor(selected / max);
            return { from: off * max, to: (off + 1) * max };
        }
        let off = Math.floor((total - selected) / max);
        return { from: total - (off + 1) * max, to: total - off * max };
    }
    class CompletionTooltip {
        constructor(view, stateField, applyCompletion) {
            this.view = view;
            this.stateField = stateField;
            this.applyCompletion = applyCompletion;
            this.info = null;
            this.infoDestroy = null;
            this.placeInfoReq = {
                read: () => this.measureInfo(),
                write: (pos) => this.placeInfo(pos),
                key: this
            };
            this.space = null;
            this.currentClass = "";
            let cState = view.state.field(stateField);
            let { options, selected } = cState.open;
            let config = view.state.facet(completionConfig);
            this.optionContent = optionContent(config);
            this.optionClass = config.optionClass;
            this.tooltipClass = config.tooltipClass;
            this.range = rangeAroundSelected(options.length, selected, config.maxRenderedOptions);
            this.dom = document.createElement("div");
            this.dom.className = "cm-tooltip-autocomplete";
            this.updateTooltipClass(view.state);
            this.dom.addEventListener("mousedown", (e) => {
                let { options } = view.state.field(stateField).open;
                for (let dom = e.target, match; dom && dom != this.dom; dom = dom.parentNode) {
                    if (dom.nodeName == "LI" && (match = /-(\d+)$/.exec(dom.id)) && +match[1] < options.length) {
                        this.applyCompletion(view, options[+match[1]]);
                        e.preventDefault();
                        return;
                    }
                }
            });
            this.dom.addEventListener("focusout", (e) => {
                let state = view.state.field(this.stateField, false);
                if (state && state.tooltip && view.state.facet(completionConfig).closeOnBlur &&
                    e.relatedTarget != view.contentDOM)
                    view.dispatch({ effects: closeCompletionEffect.of(null) });
            });
            this.showOptions(options, cState.id);
        }
        mount() { this.updateSel(); }
        showOptions(options, id) {
            if (this.list)
                this.list.remove();
            this.list = this.dom.appendChild(this.createListBox(options, id, this.range));
            this.list.addEventListener("scroll", () => {
                if (this.info)
                    this.view.requestMeasure(this.placeInfoReq);
            });
        }
        update(update) {
            var _a;
            let cState = update.state.field(this.stateField);
            let prevState = update.startState.field(this.stateField);
            this.updateTooltipClass(update.state);
            if (cState != prevState) {
                let { options, selected, disabled } = cState.open;
                if (!prevState.open || prevState.open.options != options) {
                    this.range = rangeAroundSelected(options.length, selected, update.state.facet(completionConfig).maxRenderedOptions);
                    this.showOptions(options, cState.id);
                }
                this.updateSel();
                if (disabled != ((_a = prevState.open) === null || _a === void 0 ? void 0 : _a.disabled))
                    this.dom.classList.toggle("cm-tooltip-autocomplete-disabled", !!disabled);
            }
        }
        updateTooltipClass(state) {
            let cls = this.tooltipClass(state);
            if (cls != this.currentClass) {
                for (let c of this.currentClass.split(" "))
                    if (c)
                        this.dom.classList.remove(c);
                for (let c of cls.split(" "))
                    if (c)
                        this.dom.classList.add(c);
                this.currentClass = cls;
            }
        }
        positioned(space) {
            this.space = space;
            if (this.info)
                this.view.requestMeasure(this.placeInfoReq);
        }
        updateSel() {
            let cState = this.view.state.field(this.stateField), open = cState.open;
            if (open.selected > -1 && open.selected < this.range.from || open.selected >= this.range.to) {
                this.range = rangeAroundSelected(open.options.length, open.selected, this.view.state.facet(completionConfig).maxRenderedOptions);
                this.showOptions(open.options, cState.id);
            }
            if (this.updateSelectedOption(open.selected)) {
                this.destroyInfo();
                let { completion } = open.options[open.selected];
                let { info } = completion;
                if (!info)
                    return;
                let infoResult = typeof info === "string" ? document.createTextNode(info) : info(completion);
                if (!infoResult)
                    return;
                if ("then" in infoResult) {
                    infoResult.then(obj => {
                        if (obj && this.view.state.field(this.stateField, false) == cState)
                            this.addInfoPane(obj, completion);
                    }).catch(e => logException(this.view.state, e, "completion info"));
                }
                else {
                    this.addInfoPane(infoResult, completion);
                }
            }
        }
        addInfoPane(content, completion) {
            this.destroyInfo();
            let wrap = this.info = document.createElement("div");
            wrap.className = "cm-tooltip cm-completionInfo";
            if (content.nodeType != null) {
                wrap.appendChild(content);
                this.infoDestroy = null;
            }
            else {
                let { dom, destroy } = content;
                wrap.appendChild(dom);
                this.infoDestroy = destroy || null;
            }
            this.dom.appendChild(wrap);
            this.view.requestMeasure(this.placeInfoReq);
        }
        updateSelectedOption(selected) {
            let set = null;
            for (let opt = this.list.firstChild, i = this.range.from; opt; opt = opt.nextSibling, i++) {
                if (opt.nodeName != "LI" || !opt.id) {
                    i--; // A section header
                }
                else if (i == selected) {
                    if (!opt.hasAttribute("aria-selected")) {
                        opt.setAttribute("aria-selected", "true");
                        set = opt;
                    }
                }
                else {
                    if (opt.hasAttribute("aria-selected"))
                        opt.removeAttribute("aria-selected");
                }
            }
            if (set)
                scrollIntoView(this.list, set);
            return set;
        }
        measureInfo() {
            let sel = this.dom.querySelector("[aria-selected]");
            if (!sel || !this.info)
                return null;
            let listRect = this.dom.getBoundingClientRect();
            let infoRect = this.info.getBoundingClientRect();
            let selRect = sel.getBoundingClientRect();
            let space = this.space;
            if (!space) {
                let win = this.dom.ownerDocument.defaultView || window;
                space = { left: 0, top: 0, right: win.innerWidth, bottom: win.innerHeight };
            }
            if (selRect.top > Math.min(space.bottom, listRect.bottom) - 10 ||
                selRect.bottom < Math.max(space.top, listRect.top) + 10)
                return null;
            return this.view.state.facet(completionConfig).positionInfo(this.view, listRect, selRect, infoRect, space, this.dom);
        }
        placeInfo(pos) {
            if (this.info) {
                if (pos) {
                    if (pos.style)
                        this.info.style.cssText = pos.style;
                    this.info.className = "cm-tooltip cm-completionInfo " + (pos.class || "");
                }
                else {
                    this.info.style.cssText = "top: -1e6px";
                }
            }
        }
        createListBox(options, id, range) {
            const ul = document.createElement("ul");
            ul.id = id;
            ul.setAttribute("role", "listbox");
            ul.setAttribute("aria-expanded", "true");
            ul.setAttribute("aria-label", this.view.state.phrase("Completions"));
            let curSection = null;
            for (let i = range.from; i < range.to; i++) {
                let { completion, match } = options[i], { section } = completion;
                if (section) {
                    let name = typeof section == "string" ? section : section.name;
                    if (name != curSection && (i > range.from || range.from == 0)) {
                        curSection = name;
                        if (typeof section != "string" && section.header) {
                            ul.appendChild(section.header(section));
                        }
                        else {
                            let header = ul.appendChild(document.createElement("completion-section"));
                            header.textContent = name;
                        }
                    }
                }
                const li = ul.appendChild(document.createElement("li"));
                li.id = id + "-" + i;
                li.setAttribute("role", "option");
                let cls = this.optionClass(completion);
                if (cls)
                    li.className = cls;
                for (let source of this.optionContent) {
                    let node = source(completion, this.view.state, this.view, match);
                    if (node)
                        li.appendChild(node);
                }
            }
            if (range.from)
                ul.classList.add("cm-completionListIncompleteTop");
            if (range.to < options.length)
                ul.classList.add("cm-completionListIncompleteBottom");
            return ul;
        }
        destroyInfo() {
            if (this.info) {
                if (this.infoDestroy)
                    this.infoDestroy();
                this.info.remove();
                this.info = null;
            }
        }
        destroy() {
            this.destroyInfo();
        }
    }
    function completionTooltip(stateField, applyCompletion) {
        return (view) => new CompletionTooltip(view, stateField, applyCompletion);
    }
    function scrollIntoView(container, element) {
        let parent = container.getBoundingClientRect();
        let self = element.getBoundingClientRect();
        let scaleY = parent.height / container.offsetHeight;
        if (self.top < parent.top)
            container.scrollTop -= (parent.top - self.top) / scaleY;
        else if (self.bottom > parent.bottom)
            container.scrollTop += (self.bottom - parent.bottom) / scaleY;
    }

    // Used to pick a preferred option when two options with the same
    // label occur in the result.
    function score(option) {
        return (option.boost || 0) * 100 + (option.apply ? 10 : 0) + (option.info ? 5 : 0) +
            (option.type ? 1 : 0);
    }
    function sortOptions(active, state) {
        let options = [];
        let sections = null;
        let addOption = (option) => {
            options.push(option);
            let { section } = option.completion;
            if (section) {
                if (!sections)
                    sections = [];
                let name = typeof section == "string" ? section : section.name;
                if (!sections.some(s => s.name == name))
                    sections.push(typeof section == "string" ? { name } : section);
            }
        };
        let conf = state.facet(completionConfig);
        for (let a of active)
            if (a.hasResult()) {
                let getMatch = a.result.getMatch;
                if (a.result.filter === false) {
                    for (let option of a.result.options) {
                        addOption(new Option(option, a.source, getMatch ? getMatch(option) : [], 1e9 - options.length));
                    }
                }
                else {
                    let pattern = state.sliceDoc(a.from, a.to), match;
                    let matcher = conf.filterStrict ? new StrictMatcher(pattern) : new FuzzyMatcher(pattern);
                    for (let option of a.result.options)
                        if (match = matcher.match(option.label)) {
                            let matched = !option.displayLabel ? match.matched : getMatch ? getMatch(option, match.matched) : [];
                            addOption(new Option(option, a.source, matched, match.score + (option.boost || 0)));
                        }
                }
            }
        if (sections) {
            let sectionOrder = Object.create(null), pos = 0;
            let cmp = (a, b) => { var _a, _b; return ((_a = a.rank) !== null && _a !== void 0 ? _a : 1e9) - ((_b = b.rank) !== null && _b !== void 0 ? _b : 1e9) || (a.name < b.name ? -1 : 1); };
            for (let s of sections.sort(cmp)) {
                pos -= 1e5;
                sectionOrder[s.name] = pos;
            }
            for (let option of options) {
                let { section } = option.completion;
                if (section)
                    option.score += sectionOrder[typeof section == "string" ? section : section.name];
            }
        }
        let result = [], prev = null;
        let compare = conf.compareCompletions;
        for (let opt of options.sort((a, b) => (b.score - a.score) || compare(a.completion, b.completion))) {
            let cur = opt.completion;
            if (!prev || prev.label != cur.label || prev.detail != cur.detail ||
                (prev.type != null && cur.type != null && prev.type != cur.type) ||
                prev.apply != cur.apply || prev.boost != cur.boost)
                result.push(opt);
            else if (score(opt.completion) > score(prev))
                result[result.length - 1] = opt;
            prev = opt.completion;
        }
        return result;
    }
    class CompletionDialog {
        constructor(options, attrs, tooltip, timestamp, selected, disabled) {
            this.options = options;
            this.attrs = attrs;
            this.tooltip = tooltip;
            this.timestamp = timestamp;
            this.selected = selected;
            this.disabled = disabled;
        }
        setSelected(selected, id) {
            return selected == this.selected || selected >= this.options.length ? this
                : new CompletionDialog(this.options, makeAttrs(id, selected), this.tooltip, this.timestamp, selected, this.disabled);
        }
        static build(active, state, id, prev, conf, didSetActive) {
            if (prev && !didSetActive && active.some(s => s.isPending))
                return prev.setDisabled();
            let options = sortOptions(active, state);
            if (!options.length)
                return prev && active.some(a => a.isPending) ? prev.setDisabled() : null;
            let selected = state.facet(completionConfig).selectOnOpen ? 0 : -1;
            if (prev && prev.selected != selected && prev.selected != -1) {
                let selectedValue = prev.options[prev.selected].completion;
                for (let i = 0; i < options.length; i++)
                    if (options[i].completion == selectedValue) {
                        selected = i;
                        break;
                    }
            }
            return new CompletionDialog(options, makeAttrs(id, selected), {
                pos: active.reduce((a, b) => b.hasResult() ? Math.min(a, b.from) : a, 1e8),
                create: createTooltip,
                above: conf.aboveCursor,
            }, prev ? prev.timestamp : Date.now(), selected, false);
        }
        map(changes) {
            return new CompletionDialog(this.options, this.attrs, Object.assign(Object.assign({}, this.tooltip), { pos: changes.mapPos(this.tooltip.pos) }), this.timestamp, this.selected, this.disabled);
        }
        setDisabled() {
            return new CompletionDialog(this.options, this.attrs, this.tooltip, this.timestamp, this.selected, true);
        }
    }
    class CompletionState {
        constructor(active, id, open) {
            this.active = active;
            this.id = id;
            this.open = open;
        }
        static start() {
            return new CompletionState(none$1, "cm-ac-" + Math.floor(Math.random() * 2e6).toString(36), null);
        }
        update(tr) {
            let { state } = tr, conf = state.facet(completionConfig);
            let sources = conf.override ||
                state.languageDataAt("autocomplete", cur(state)).map(asSource);
            let active = sources.map(source => {
                let value = this.active.find(s => s.source == source) ||
                    new ActiveSource(source, this.active.some(a => a.state != 0 /* State.Inactive */) ? 1 /* State.Pending */ : 0 /* State.Inactive */);
                return value.update(tr, conf);
            });
            if (active.length == this.active.length && active.every((a, i) => a == this.active[i]))
                active = this.active;
            let open = this.open, didSet = tr.effects.some(e => e.is(setActiveEffect));
            if (open && tr.docChanged)
                open = open.map(tr.changes);
            if (tr.selection || active.some(a => a.hasResult() && tr.changes.touchesRange(a.from, a.to)) ||
                !sameResults(active, this.active) || didSet)
                open = CompletionDialog.build(active, state, this.id, open, conf, didSet);
            else if (open && open.disabled && !active.some(a => a.isPending))
                open = null;
            if (!open && active.every(a => !a.isPending) && active.some(a => a.hasResult()))
                active = active.map(a => a.hasResult() ? new ActiveSource(a.source, 0 /* State.Inactive */) : a);
            for (let effect of tr.effects)
                if (effect.is(setSelectedEffect))
                    open = open && open.setSelected(effect.value, this.id);
            return active == this.active && open == this.open ? this : new CompletionState(active, this.id, open);
        }
        get tooltip() { return this.open ? this.open.tooltip : null; }
        get attrs() { return this.open ? this.open.attrs : this.active.length ? baseAttrs : noAttrs; }
    }
    function sameResults(a, b) {
        if (a == b)
            return true;
        for (let iA = 0, iB = 0;;) {
            while (iA < a.length && !a[iA].hasResult())
                iA++;
            while (iB < b.length && !b[iB].hasResult())
                iB++;
            let endA = iA == a.length, endB = iB == b.length;
            if (endA || endB)
                return endA == endB;
            if (a[iA++].result != b[iB++].result)
                return false;
        }
    }
    const baseAttrs = {
        "aria-autocomplete": "list"
    };
    const noAttrs = {};
    function makeAttrs(id, selected) {
        let result = {
            "aria-autocomplete": "list",
            "aria-haspopup": "listbox",
            "aria-controls": id
        };
        if (selected > -1)
            result["aria-activedescendant"] = id + "-" + selected;
        return result;
    }
    const none$1 = [];
    function getUpdateType(tr, conf) {
        if (tr.isUserEvent("input.complete")) {
            let completion = tr.annotation(pickedCompletion);
            if (completion && conf.activateOnCompletion(completion))
                return 4 /* UpdateType.Activate */ | 8 /* UpdateType.Reset */;
        }
        let typing = tr.isUserEvent("input.type");
        return typing && conf.activateOnTyping ? 4 /* UpdateType.Activate */ | 1 /* UpdateType.Typing */
            : typing ? 1 /* UpdateType.Typing */
                : tr.isUserEvent("delete.backward") ? 2 /* UpdateType.Backspacing */
                    : tr.selection ? 8 /* UpdateType.Reset */
                        : tr.docChanged ? 16 /* UpdateType.ResetIfTouching */ : 0 /* UpdateType.None */;
    }
    class ActiveSource {
        constructor(source, state, explicit = false) {
            this.source = source;
            this.state = state;
            this.explicit = explicit;
        }
        hasResult() { return false; }
        get isPending() { return this.state == 1 /* State.Pending */; }
        update(tr, conf) {
            let type = getUpdateType(tr, conf), value = this;
            if ((type & 8 /* UpdateType.Reset */) || (type & 16 /* UpdateType.ResetIfTouching */) && this.touches(tr))
                value = new ActiveSource(value.source, 0 /* State.Inactive */);
            if ((type & 4 /* UpdateType.Activate */) && value.state == 0 /* State.Inactive */)
                value = new ActiveSource(this.source, 1 /* State.Pending */);
            value = value.updateFor(tr, type);
            for (let effect of tr.effects) {
                if (effect.is(startCompletionEffect))
                    value = new ActiveSource(value.source, 1 /* State.Pending */, effect.value);
                else if (effect.is(closeCompletionEffect))
                    value = new ActiveSource(value.source, 0 /* State.Inactive */);
                else if (effect.is(setActiveEffect))
                    for (let active of effect.value)
                        if (active.source == value.source)
                            value = active;
            }
            return value;
        }
        updateFor(tr, type) { return this.map(tr.changes); }
        map(changes) { return this; }
        touches(tr) {
            return tr.changes.touchesRange(cur(tr.state));
        }
    }
    class ActiveResult extends ActiveSource {
        constructor(source, explicit, limit, result, from, to) {
            super(source, 3 /* State.Result */, explicit);
            this.limit = limit;
            this.result = result;
            this.from = from;
            this.to = to;
        }
        hasResult() { return true; }
        updateFor(tr, type) {
            var _a;
            if (!(type & 3 /* UpdateType.SimpleInteraction */))
                return this.map(tr.changes);
            let result = this.result;
            if (result.map && !tr.changes.empty)
                result = result.map(result, tr.changes);
            let from = tr.changes.mapPos(this.from), to = tr.changes.mapPos(this.to, 1);
            let pos = cur(tr.state);
            if (pos > to || !result ||
                (type & 2 /* UpdateType.Backspacing */) && (cur(tr.startState) == this.from || pos < this.limit))
                return new ActiveSource(this.source, type & 4 /* UpdateType.Activate */ ? 1 /* State.Pending */ : 0 /* State.Inactive */);
            let limit = tr.changes.mapPos(this.limit);
            if (checkValid(result.validFor, tr.state, from, to))
                return new ActiveResult(this.source, this.explicit, limit, result, from, to);
            if (result.update &&
                (result = result.update(result, from, to, new CompletionContext(tr.state, pos, false))))
                return new ActiveResult(this.source, this.explicit, limit, result, result.from, (_a = result.to) !== null && _a !== void 0 ? _a : cur(tr.state));
            return new ActiveSource(this.source, 1 /* State.Pending */, this.explicit);
        }
        map(mapping) {
            if (mapping.empty)
                return this;
            let result = this.result.map ? this.result.map(this.result, mapping) : this.result;
            if (!result)
                return new ActiveSource(this.source, 0 /* State.Inactive */);
            return new ActiveResult(this.source, this.explicit, mapping.mapPos(this.limit), this.result, mapping.mapPos(this.from), mapping.mapPos(this.to, 1));
        }
        touches(tr) {
            return tr.changes.touchesRange(this.from, this.to);
        }
    }
    function checkValid(validFor, state, from, to) {
        if (!validFor)
            return false;
        let text = state.sliceDoc(from, to);
        return typeof validFor == "function" ? validFor(text, from, to, state) : ensureAnchor(validFor, true).test(text);
    }
    const setActiveEffect = /*@__PURE__*/StateEffect.define({
        map(sources, mapping) { return sources.map(s => s.map(mapping)); }
    });
    const setSelectedEffect = /*@__PURE__*/StateEffect.define();
    const completionState = /*@__PURE__*/StateField.define({
        create() { return CompletionState.start(); },
        update(value, tr) { return value.update(tr); },
        provide: f => [
            showTooltip.from(f, val => val.tooltip),
            EditorView.contentAttributes.from(f, state => state.attrs)
        ]
    });
    function applyCompletion(view, option) {
        const apply = option.completion.apply || option.completion.label;
        let result = view.state.field(completionState).active.find(a => a.source == option.source);
        if (!(result instanceof ActiveResult))
            return false;
        if (typeof apply == "string")
            view.dispatch(Object.assign(Object.assign({}, insertCompletionText(view.state, apply, result.from, result.to)), { annotations: pickedCompletion.of(option.completion) }));
        else
            apply(view, option.completion, result.from, result.to);
        return true;
    }
    const createTooltip = /*@__PURE__*/completionTooltip(completionState, applyCompletion);

    /**
    Returns a command that moves the completion selection forward or
    backward by the given amount.
    */
    function moveCompletionSelection(forward, by = "option") {
        return (view) => {
            let cState = view.state.field(completionState, false);
            if (!cState || !cState.open || cState.open.disabled ||
                Date.now() - cState.open.timestamp < view.state.facet(completionConfig).interactionDelay)
                return false;
            let step = 1, tooltip;
            if (by == "page" && (tooltip = getTooltip(view, cState.open.tooltip)))
                step = Math.max(2, Math.floor(tooltip.dom.offsetHeight /
                    tooltip.dom.querySelector("li").offsetHeight) - 1);
            let { length } = cState.open.options;
            let selected = cState.open.selected > -1 ? cState.open.selected + step * (forward ? 1 : -1) : forward ? 0 : length - 1;
            if (selected < 0)
                selected = by == "page" ? 0 : length - 1;
            else if (selected >= length)
                selected = by == "page" ? length - 1 : 0;
            view.dispatch({ effects: setSelectedEffect.of(selected) });
            return true;
        };
    }
    /**
    Accept the current completion.
    */
    const acceptCompletion = (view) => {
        let cState = view.state.field(completionState, false);
        if (view.state.readOnly || !cState || !cState.open || cState.open.selected < 0 || cState.open.disabled ||
            Date.now() - cState.open.timestamp < view.state.facet(completionConfig).interactionDelay)
            return false;
        return applyCompletion(view, cState.open.options[cState.open.selected]);
    };
    /**
    Explicitly start autocompletion.
    */
    const startCompletion = (view) => {
        let cState = view.state.field(completionState, false);
        if (!cState)
            return false;
        view.dispatch({ effects: startCompletionEffect.of(true) });
        return true;
    };
    /**
    Close the currently active completion.
    */
    const closeCompletion = (view) => {
        let cState = view.state.field(completionState, false);
        if (!cState || !cState.active.some(a => a.state != 0 /* State.Inactive */))
            return false;
        view.dispatch({ effects: closeCompletionEffect.of(null) });
        return true;
    };
    class RunningQuery {
        constructor(active, context) {
            this.active = active;
            this.context = context;
            this.time = Date.now();
            this.updates = [];
            // Note that 'undefined' means 'not done yet', whereas 'null' means
            // 'query returned null'.
            this.done = undefined;
        }
    }
    const MaxUpdateCount = 50, MinAbortTime = 1000;
    const completionPlugin = /*@__PURE__*/ViewPlugin.fromClass(class {
        constructor(view) {
            this.view = view;
            this.debounceUpdate = -1;
            this.running = [];
            this.debounceAccept = -1;
            this.pendingStart = false;
            this.composing = 0 /* CompositionState.None */;
            for (let active of view.state.field(completionState).active)
                if (active.isPending)
                    this.startQuery(active);
        }
        update(update) {
            let cState = update.state.field(completionState);
            let conf = update.state.facet(completionConfig);
            if (!update.selectionSet && !update.docChanged && update.startState.field(completionState) == cState)
                return;
            let doesReset = update.transactions.some(tr => {
                let type = getUpdateType(tr, conf);
                return (type & 8 /* UpdateType.Reset */) || (tr.selection || tr.docChanged) && !(type & 3 /* UpdateType.SimpleInteraction */);
            });
            for (let i = 0; i < this.running.length; i++) {
                let query = this.running[i];
                if (doesReset ||
                    query.context.abortOnDocChange && update.docChanged ||
                    query.updates.length + update.transactions.length > MaxUpdateCount && Date.now() - query.time > MinAbortTime) {
                    for (let handler of query.context.abortListeners) {
                        try {
                            handler();
                        }
                        catch (e) {
                            logException(this.view.state, e);
                        }
                    }
                    query.context.abortListeners = null;
                    this.running.splice(i--, 1);
                }
                else {
                    query.updates.push(...update.transactions);
                }
            }
            if (this.debounceUpdate > -1)
                clearTimeout(this.debounceUpdate);
            if (update.transactions.some(tr => tr.effects.some(e => e.is(startCompletionEffect))))
                this.pendingStart = true;
            let delay = this.pendingStart ? 50 : conf.activateOnTypingDelay;
            this.debounceUpdate = cState.active.some(a => a.isPending && !this.running.some(q => q.active.source == a.source))
                ? setTimeout(() => this.startUpdate(), delay) : -1;
            if (this.composing != 0 /* CompositionState.None */)
                for (let tr of update.transactions) {
                    if (tr.isUserEvent("input.type"))
                        this.composing = 2 /* CompositionState.Changed */;
                    else if (this.composing == 2 /* CompositionState.Changed */ && tr.selection)
                        this.composing = 3 /* CompositionState.ChangedAndMoved */;
                }
        }
        startUpdate() {
            this.debounceUpdate = -1;
            this.pendingStart = false;
            let { state } = this.view, cState = state.field(completionState);
            for (let active of cState.active) {
                if (active.isPending && !this.running.some(r => r.active.source == active.source))
                    this.startQuery(active);
            }
            if (this.running.length && cState.open && cState.open.disabled)
                this.debounceAccept = setTimeout(() => this.accept(), this.view.state.facet(completionConfig).updateSyncTime);
        }
        startQuery(active) {
            let { state } = this.view, pos = cur(state);
            let context = new CompletionContext(state, pos, active.explicit, this.view);
            let pending = new RunningQuery(active, context);
            this.running.push(pending);
            Promise.resolve(active.source(context)).then(result => {
                if (!pending.context.aborted) {
                    pending.done = result || null;
                    this.scheduleAccept();
                }
            }, err => {
                this.view.dispatch({ effects: closeCompletionEffect.of(null) });
                logException(this.view.state, err);
            });
        }
        scheduleAccept() {
            if (this.running.every(q => q.done !== undefined))
                this.accept();
            else if (this.debounceAccept < 0)
                this.debounceAccept = setTimeout(() => this.accept(), this.view.state.facet(completionConfig).updateSyncTime);
        }
        // For each finished query in this.running, try to create a result
        // or, if appropriate, restart the query.
        accept() {
            var _a;
            if (this.debounceAccept > -1)
                clearTimeout(this.debounceAccept);
            this.debounceAccept = -1;
            let updated = [];
            let conf = this.view.state.facet(completionConfig), cState = this.view.state.field(completionState);
            for (let i = 0; i < this.running.length; i++) {
                let query = this.running[i];
                if (query.done === undefined)
                    continue;
                this.running.splice(i--, 1);
                if (query.done) {
                    let pos = cur(query.updates.length ? query.updates[0].startState : this.view.state);
                    let limit = Math.min(pos, query.done.from + (query.active.explicit ? 0 : 1));
                    let active = new ActiveResult(query.active.source, query.active.explicit, limit, query.done, query.done.from, (_a = query.done.to) !== null && _a !== void 0 ? _a : pos);
                    // Replay the transactions that happened since the start of
                    // the request and see if that preserves the result
                    for (let tr of query.updates)
                        active = active.update(tr, conf);
                    if (active.hasResult()) {
                        updated.push(active);
                        continue;
                    }
                }
                let current = cState.active.find(a => a.source == query.active.source);
                if (current && current.isPending) {
                    if (query.done == null) {
                        // Explicitly failed. Should clear the pending status if it
                        // hasn't been re-set in the meantime.
                        let active = new ActiveSource(query.active.source, 0 /* State.Inactive */);
                        for (let tr of query.updates)
                            active = active.update(tr, conf);
                        if (!active.isPending)
                            updated.push(active);
                    }
                    else {
                        // Cleared by subsequent transactions. Restart.
                        this.startQuery(current);
                    }
                }
            }
            if (updated.length || cState.open && cState.open.disabled)
                this.view.dispatch({ effects: setActiveEffect.of(updated) });
        }
    }, {
        eventHandlers: {
            blur(event) {
                let state = this.view.state.field(completionState, false);
                if (state && state.tooltip && this.view.state.facet(completionConfig).closeOnBlur) {
                    let dialog = state.open && getTooltip(this.view, state.open.tooltip);
                    if (!dialog || !dialog.dom.contains(event.relatedTarget))
                        setTimeout(() => this.view.dispatch({ effects: closeCompletionEffect.of(null) }), 10);
                }
            },
            compositionstart() {
                this.composing = 1 /* CompositionState.Started */;
            },
            compositionend() {
                if (this.composing == 3 /* CompositionState.ChangedAndMoved */) {
                    // Safari fires compositionend events synchronously, possibly
                    // from inside an update, so dispatch asynchronously to avoid reentrancy
                    setTimeout(() => this.view.dispatch({ effects: startCompletionEffect.of(false) }), 20);
                }
                this.composing = 0 /* CompositionState.None */;
            }
        }
    });
    const windows = typeof navigator == "object" && /*@__PURE__*//Win/.test(navigator.platform);
    const commitCharacters = /*@__PURE__*/Prec.highest(/*@__PURE__*/EditorView.domEventHandlers({
        keydown(event, view) {
            let field = view.state.field(completionState, false);
            if (!field || !field.open || field.open.disabled || field.open.selected < 0 ||
                event.key.length > 1 || event.ctrlKey && !(windows && event.altKey) || event.metaKey)
                return false;
            let option = field.open.options[field.open.selected];
            let result = field.active.find(a => a.source == option.source);
            let commitChars = option.completion.commitCharacters || result.result.commitCharacters;
            if (commitChars && commitChars.indexOf(event.key) > -1)
                applyCompletion(view, option);
            return false;
        }
    }));

    const baseTheme = /*@__PURE__*/EditorView.baseTheme({
        ".cm-tooltip.cm-tooltip-autocomplete": {
            "& > ul": {
                fontFamily: "monospace",
                whiteSpace: "nowrap",
                overflow: "hidden auto",
                maxWidth_fallback: "700px",
                maxWidth: "min(700px, 95vw)",
                minWidth: "250px",
                maxHeight: "10em",
                height: "100%",
                listStyle: "none",
                margin: 0,
                padding: 0,
                "& > li, & > completion-section": {
                    padding: "1px 3px",
                    lineHeight: 1.2
                },
                "& > li": {
                    overflowX: "hidden",
                    textOverflow: "ellipsis",
                    cursor: "pointer"
                },
                "& > completion-section": {
                    display: "list-item",
                    borderBottom: "1px solid silver",
                    paddingLeft: "0.5em",
                    opacity: 0.7
                }
            }
        },
        "&light .cm-tooltip-autocomplete ul li[aria-selected]": {
            background: "#17c",
            color: "white",
        },
        "&light .cm-tooltip-autocomplete-disabled ul li[aria-selected]": {
            background: "#777",
        },
        "&dark .cm-tooltip-autocomplete ul li[aria-selected]": {
            background: "#347",
            color: "white",
        },
        "&dark .cm-tooltip-autocomplete-disabled ul li[aria-selected]": {
            background: "#444",
        },
        ".cm-completionListIncompleteTop:before, .cm-completionListIncompleteBottom:after": {
            content: '"···"',
            opacity: 0.5,
            display: "block",
            textAlign: "center"
        },
        ".cm-tooltip.cm-completionInfo": {
            position: "absolute",
            padding: "3px 9px",
            width: "max-content",
            maxWidth: `${400 /* Info.Width */}px`,
            boxSizing: "border-box",
            whiteSpace: "pre-line"
        },
        ".cm-completionInfo.cm-completionInfo-left": { right: "100%" },
        ".cm-completionInfo.cm-completionInfo-right": { left: "100%" },
        ".cm-completionInfo.cm-completionInfo-left-narrow": { right: `${30 /* Info.Margin */}px` },
        ".cm-completionInfo.cm-completionInfo-right-narrow": { left: `${30 /* Info.Margin */}px` },
        "&light .cm-snippetField": { backgroundColor: "#00000022" },
        "&dark .cm-snippetField": { backgroundColor: "#ffffff22" },
        ".cm-snippetFieldPosition": {
            verticalAlign: "text-top",
            width: 0,
            height: "1.15em",
            display: "inline-block",
            margin: "0 -0.7px -.7em",
            borderLeft: "1.4px dotted #888"
        },
        ".cm-completionMatchedText": {
            textDecoration: "underline"
        },
        ".cm-completionDetail": {
            marginLeft: "0.5em",
            fontStyle: "italic"
        },
        ".cm-completionIcon": {
            fontSize: "90%",
            width: ".8em",
            display: "inline-block",
            textAlign: "center",
            paddingRight: ".6em",
            opacity: "0.6",
            boxSizing: "content-box"
        },
        ".cm-completionIcon-function, .cm-completionIcon-method": {
            "&:after": { content: "'ƒ'" }
        },
        ".cm-completionIcon-class": {
            "&:after": { content: "'○'" }
        },
        ".cm-completionIcon-interface": {
            "&:after": { content: "'◌'" }
        },
        ".cm-completionIcon-variable": {
            "&:after": { content: "'𝑥'" }
        },
        ".cm-completionIcon-constant": {
            "&:after": { content: "'𝐶'" }
        },
        ".cm-completionIcon-type": {
            "&:after": { content: "'𝑡'" }
        },
        ".cm-completionIcon-enum": {
            "&:after": { content: "'∪'" }
        },
        ".cm-completionIcon-property": {
            "&:after": { content: "'□'" }
        },
        ".cm-completionIcon-keyword": {
            "&:after": { content: "'🔑\uFE0E'" } // Disable emoji rendering
        },
        ".cm-completionIcon-namespace": {
            "&:after": { content: "'▢'" }
        },
        ".cm-completionIcon-text": {
            "&:after": { content: "'abc'", fontSize: "50%", verticalAlign: "middle" }
        }
    });

    class FieldPos {
        constructor(field, line, from, to) {
            this.field = field;
            this.line = line;
            this.from = from;
            this.to = to;
        }
    }
    class FieldRange {
        constructor(field, from, to) {
            this.field = field;
            this.from = from;
            this.to = to;
        }
        map(changes) {
            let from = changes.mapPos(this.from, -1, MapMode.TrackDel);
            let to = changes.mapPos(this.to, 1, MapMode.TrackDel);
            return from == null || to == null ? null : new FieldRange(this.field, from, to);
        }
    }
    class Snippet {
        constructor(lines, fieldPositions) {
            this.lines = lines;
            this.fieldPositions = fieldPositions;
        }
        instantiate(state, pos) {
            let text = [], lineStart = [pos];
            let lineObj = state.doc.lineAt(pos), baseIndent = /^\s*/.exec(lineObj.text)[0];
            for (let line of this.lines) {
                if (text.length) {
                    let indent = baseIndent, tabs = /^\t*/.exec(line)[0].length;
                    for (let i = 0; i < tabs; i++)
                        indent += state.facet(indentUnit);
                    lineStart.push(pos + indent.length - tabs);
                    line = indent + line.slice(tabs);
                }
                text.push(line);
                pos += line.length + 1;
            }
            let ranges = this.fieldPositions.map(pos => new FieldRange(pos.field, lineStart[pos.line] + pos.from, lineStart[pos.line] + pos.to));
            return { text, ranges };
        }
        static parse(template) {
            let fields = [];
            let lines = [], positions = [], m;
            for (let line of template.split(/\r\n?|\n/)) {
                while (m = /[#$]\{(?:(\d+)(?::([^}]*))?|((?:\\[{}]|[^}])*))\}/.exec(line)) {
                    let seq = m[1] ? +m[1] : null, rawName = m[2] || m[3] || "", found = -1;
                    let name = rawName.replace(/\\[{}]/g, m => m[1]);
                    for (let i = 0; i < fields.length; i++) {
                        if (seq != null ? fields[i].seq == seq : name ? fields[i].name == name : false)
                            found = i;
                    }
                    if (found < 0) {
                        let i = 0;
                        while (i < fields.length && (seq == null || (fields[i].seq != null && fields[i].seq < seq)))
                            i++;
                        fields.splice(i, 0, { seq, name });
                        found = i;
                        for (let pos of positions)
                            if (pos.field >= found)
                                pos.field++;
                    }
                    positions.push(new FieldPos(found, lines.length, m.index, m.index + name.length));
                    line = line.slice(0, m.index) + rawName + line.slice(m.index + m[0].length);
                }
                line = line.replace(/\\([{}])/g, (_, brace, index) => {
                    for (let pos of positions)
                        if (pos.line == lines.length && pos.from > index) {
                            pos.from--;
                            pos.to--;
                        }
                    return brace;
                });
                lines.push(line);
            }
            return new Snippet(lines, positions);
        }
    }
    let fieldMarker = /*@__PURE__*/Decoration.widget({ widget: /*@__PURE__*/new class extends WidgetType {
            toDOM() {
                let span = document.createElement("span");
                span.className = "cm-snippetFieldPosition";
                return span;
            }
            ignoreEvent() { return false; }
        } });
    let fieldRange = /*@__PURE__*/Decoration.mark({ class: "cm-snippetField" });
    class ActiveSnippet {
        constructor(ranges, active) {
            this.ranges = ranges;
            this.active = active;
            this.deco = Decoration.set(ranges.map(r => (r.from == r.to ? fieldMarker : fieldRange).range(r.from, r.to)));
        }
        map(changes) {
            let ranges = [];
            for (let r of this.ranges) {
                let mapped = r.map(changes);
                if (!mapped)
                    return null;
                ranges.push(mapped);
            }
            return new ActiveSnippet(ranges, this.active);
        }
        selectionInsideField(sel) {
            return sel.ranges.every(range => this.ranges.some(r => r.field == this.active && r.from <= range.from && r.to >= range.to));
        }
    }
    const setActive = /*@__PURE__*/StateEffect.define({
        map(value, changes) { return value && value.map(changes); }
    });
    const moveToField = /*@__PURE__*/StateEffect.define();
    const snippetState = /*@__PURE__*/StateField.define({
        create() { return null; },
        update(value, tr) {
            for (let effect of tr.effects) {
                if (effect.is(setActive))
                    return effect.value;
                if (effect.is(moveToField) && value)
                    return new ActiveSnippet(value.ranges, effect.value);
            }
            if (value && tr.docChanged)
                value = value.map(tr.changes);
            if (value && tr.selection && !value.selectionInsideField(tr.selection))
                value = null;
            return value;
        },
        provide: f => EditorView.decorations.from(f, val => val ? val.deco : Decoration.none)
    });
    function fieldSelection(ranges, field) {
        return EditorSelection.create(ranges.filter(r => r.field == field).map(r => EditorSelection.range(r.from, r.to)));
    }
    /**
    Convert a snippet template to a function that can
    [apply](https://codemirror.net/6/docs/ref/#autocomplete.Completion.apply) it. Snippets are written
    using syntax like this:

        "for (let ${index} = 0; ${index} < ${end}; ${index}++) {\n\t${}\n}"

    Each `${}` placeholder (you may also use `#{}`) indicates a field
    that the user can fill in. Its name, if any, will be the default
    content for the field.

    When the snippet is activated by calling the returned function,
    the code is inserted at the given position. Newlines in the
    template are indented by the indentation of the start line, plus
    one [indent unit](https://codemirror.net/6/docs/ref/#language.indentUnit) per tab character after
    the newline.

    On activation, (all instances of) the first field are selected.
    The user can move between fields with Tab and Shift-Tab as long as
    the fields are active. Moving to the last field or moving the
    cursor out of the current field deactivates the fields.

    The order of fields defaults to textual order, but you can add
    numbers to placeholders (`${1}` or `${1:defaultText}`) to provide
    a custom order.

    To include a literal `{` or `}` in your template, put a backslash
    in front of it. This will be removed and the brace will not be
    interpreted as indicating a placeholder.
    */
    function snippet(template) {
        let snippet = Snippet.parse(template);
        return (editor, completion, from, to) => {
            let { text, ranges } = snippet.instantiate(editor.state, from);
            let { main } = editor.state.selection;
            let spec = {
                changes: { from, to: to == main.from ? main.to : to, insert: Text.of(text) },
                scrollIntoView: true,
                annotations: completion ? [pickedCompletion.of(completion), Transaction.userEvent.of("input.complete")] : undefined
            };
            if (ranges.length)
                spec.selection = fieldSelection(ranges, 0);
            if (ranges.some(r => r.field > 0)) {
                let active = new ActiveSnippet(ranges, 0);
                let effects = spec.effects = [setActive.of(active)];
                if (editor.state.field(snippetState, false) === undefined)
                    effects.push(StateEffect.appendConfig.of([snippetState, addSnippetKeymap, snippetPointerHandler, baseTheme]));
            }
            editor.dispatch(editor.state.update(spec));
        };
    }
    function moveField(dir) {
        return ({ state, dispatch }) => {
            let active = state.field(snippetState, false);
            if (!active || dir < 0 && active.active == 0)
                return false;
            let next = active.active + dir, last = dir > 0 && !active.ranges.some(r => r.field == next + dir);
            dispatch(state.update({
                selection: fieldSelection(active.ranges, next),
                effects: setActive.of(last ? null : new ActiveSnippet(active.ranges, next)),
                scrollIntoView: true
            }));
            return true;
        };
    }
    /**
    A command that clears the active snippet, if any.
    */
    const clearSnippet = ({ state, dispatch }) => {
        let active = state.field(snippetState, false);
        if (!active)
            return false;
        dispatch(state.update({ effects: setActive.of(null) }));
        return true;
    };
    /**
    Move to the next snippet field, if available.
    */
    const nextSnippetField = /*@__PURE__*/moveField(1);
    /**
    Move to the previous snippet field, if available.
    */
    const prevSnippetField = /*@__PURE__*/moveField(-1);
    const defaultSnippetKeymap = [
        { key: "Tab", run: nextSnippetField, shift: prevSnippetField },
        { key: "Escape", run: clearSnippet }
    ];
    /**
    A facet that can be used to configure the key bindings used by
    snippets. The default binds Tab to
    [`nextSnippetField`](https://codemirror.net/6/docs/ref/#autocomplete.nextSnippetField), Shift-Tab to
    [`prevSnippetField`](https://codemirror.net/6/docs/ref/#autocomplete.prevSnippetField), and Escape
    to [`clearSnippet`](https://codemirror.net/6/docs/ref/#autocomplete.clearSnippet).
    */
    const snippetKeymap = /*@__PURE__*/Facet.define({
        combine(maps) { return maps.length ? maps[0] : defaultSnippetKeymap; }
    });
    const addSnippetKeymap = /*@__PURE__*/Prec.highest(/*@__PURE__*/keymap.compute([snippetKeymap], state => state.facet(snippetKeymap)));
    /**
    Create a completion from a snippet. Returns an object with the
    properties from `completion`, plus an `apply` function that
    applies the snippet.
    */
    function snippetCompletion(template, completion) {
        return Object.assign(Object.assign({}, completion), { apply: snippet(template) });
    }
    const snippetPointerHandler = /*@__PURE__*/EditorView.domEventHandlers({
        mousedown(event, view) {
            let active = view.state.field(snippetState, false), pos;
            if (!active || (pos = view.posAtCoords({ x: event.clientX, y: event.clientY })) == null)
                return false;
            let match = active.ranges.find(r => r.from <= pos && r.to >= pos);
            if (!match || match.field == active.active)
                return false;
            view.dispatch({
                selection: fieldSelection(active.ranges, match.field),
                effects: setActive.of(active.ranges.some(r => r.field > match.field)
                    ? new ActiveSnippet(active.ranges, match.field) : null),
                scrollIntoView: true
            });
            return true;
        }
    });

    const defaults$1 = {
        brackets: ["(", "[", "{", "'", '"'],
        before: ")]}:;>",
        stringPrefixes: []
    };
    const closeBracketEffect = /*@__PURE__*/StateEffect.define({
        map(value, mapping) {
            let mapped = mapping.mapPos(value, -1, MapMode.TrackAfter);
            return mapped == null ? undefined : mapped;
        }
    });
    const closedBracket = /*@__PURE__*/new class extends RangeValue {
    };
    closedBracket.startSide = 1;
    closedBracket.endSide = -1;
    const bracketState = /*@__PURE__*/StateField.define({
        create() { return RangeSet.empty; },
        update(value, tr) {
            value = value.map(tr.changes);
            if (tr.selection) {
                let line = tr.state.doc.lineAt(tr.selection.main.head);
                value = value.update({ filter: from => from >= line.from && from <= line.to });
            }
            for (let effect of tr.effects)
                if (effect.is(closeBracketEffect))
                    value = value.update({ add: [closedBracket.range(effect.value, effect.value + 1)] });
            return value;
        }
    });
    /**
    Extension to enable bracket-closing behavior. When a closeable
    bracket is typed, its closing bracket is immediately inserted
    after the cursor. When closing a bracket directly in front of a
    closing bracket inserted by the extension, the cursor moves over
    that bracket.
    */
    function closeBrackets() {
        return [inputHandler, bracketState];
    }
    const definedClosing = "()[]{}<>";
    function closing(ch) {
        for (let i = 0; i < definedClosing.length; i += 2)
            if (definedClosing.charCodeAt(i) == ch)
                return definedClosing.charAt(i + 1);
        return fromCodePoint(ch < 128 ? ch : ch + 1);
    }
    function config(state, pos) {
        return state.languageDataAt("closeBrackets", pos)[0] || defaults$1;
    }
    const android$1 = typeof navigator == "object" && /*@__PURE__*//Android\b/.test(navigator.userAgent);
    const inputHandler = /*@__PURE__*/EditorView.inputHandler.of((view, from, to, insert) => {
        if ((android$1 ? view.composing : view.compositionStarted) || view.state.readOnly)
            return false;
        let sel = view.state.selection.main;
        if (insert.length > 2 || insert.length == 2 && codePointSize(codePointAt(insert, 0)) == 1 ||
            from != sel.from || to != sel.to)
            return false;
        let tr = insertBracket(view.state, insert);
        if (!tr)
            return false;
        view.dispatch(tr);
        return true;
    });
    /**
    Implements the extension's behavior on text insertion. If the
    given string counts as a bracket in the language around the
    selection, and replacing the selection with it requires custom
    behavior (inserting a closing version or skipping past a
    previously-closed bracket), this function returns a transaction
    representing that custom behavior. (You only need this if you want
    to programmatically insert brackets—the
    [`closeBrackets`](https://codemirror.net/6/docs/ref/#autocomplete.closeBrackets) extension will
    take care of running this for user input.)
    */
    function insertBracket(state, bracket) {
        let conf = config(state, state.selection.main.head);
        let tokens = conf.brackets || defaults$1.brackets;
        for (let tok of tokens) {
            let closed = closing(codePointAt(tok, 0));
            if (bracket == tok)
                return closed == tok ? handleSame(state, tok, tokens.indexOf(tok + tok + tok) > -1, conf)
                    : handleOpen(state, tok, closed, conf.before || defaults$1.before);
            if (bracket == closed && closedBracketAt(state, state.selection.main.from))
                return handleClose(state, tok, closed);
        }
        return null;
    }
    function closedBracketAt(state, pos) {
        let found = false;
        state.field(bracketState).between(0, state.doc.length, from => {
            if (from == pos)
                found = true;
        });
        return found;
    }
    function nextChar(doc, pos) {
        let next = doc.sliceString(pos, pos + 2);
        return next.slice(0, codePointSize(codePointAt(next, 0)));
    }
    function handleOpen(state, open, close, closeBefore) {
        let dont = null, changes = state.changeByRange(range => {
            if (!range.empty)
                return { changes: [{ insert: open, from: range.from }, { insert: close, from: range.to }],
                    effects: closeBracketEffect.of(range.to + open.length),
                    range: EditorSelection.range(range.anchor + open.length, range.head + open.length) };
            let next = nextChar(state.doc, range.head);
            if (!next || /\s/.test(next) || closeBefore.indexOf(next) > -1)
                return { changes: { insert: open + close, from: range.head },
                    effects: closeBracketEffect.of(range.head + open.length),
                    range: EditorSelection.cursor(range.head + open.length) };
            return { range: dont = range };
        });
        return dont ? null : state.update(changes, {
            scrollIntoView: true,
            userEvent: "input.type"
        });
    }
    function handleClose(state, _open, close) {
        let dont = null, changes = state.changeByRange(range => {
            if (range.empty && nextChar(state.doc, range.head) == close)
                return { changes: { from: range.head, to: range.head + close.length, insert: close },
                    range: EditorSelection.cursor(range.head + close.length) };
            return dont = { range };
        });
        return dont ? null : state.update(changes, {
            scrollIntoView: true,
            userEvent: "input.type"
        });
    }
    // Handles cases where the open and close token are the same, and
    // possibly triple quotes (as in `"""abc"""`-style quoting).
    function handleSame(state, token, allowTriple, config) {
        let stringPrefixes = config.stringPrefixes || defaults$1.stringPrefixes;
        let dont = null, changes = state.changeByRange(range => {
            if (!range.empty)
                return { changes: [{ insert: token, from: range.from }, { insert: token, from: range.to }],
                    effects: closeBracketEffect.of(range.to + token.length),
                    range: EditorSelection.range(range.anchor + token.length, range.head + token.length) };
            let pos = range.head, next = nextChar(state.doc, pos), start;
            if (next == token) {
                if (nodeStart(state, pos)) {
                    return { changes: { insert: token + token, from: pos },
                        effects: closeBracketEffect.of(pos + token.length),
                        range: EditorSelection.cursor(pos + token.length) };
                }
                else if (closedBracketAt(state, pos)) {
                    let isTriple = allowTriple && state.sliceDoc(pos, pos + token.length * 3) == token + token + token;
                    let content = isTriple ? token + token + token : token;
                    return { changes: { from: pos, to: pos + content.length, insert: content },
                        range: EditorSelection.cursor(pos + content.length) };
                }
            }
            else if (allowTriple && state.sliceDoc(pos - 2 * token.length, pos) == token + token &&
                (start = canStartStringAt(state, pos - 2 * token.length, stringPrefixes)) > -1 &&
                nodeStart(state, start)) {
                return { changes: { insert: token + token + token + token, from: pos },
                    effects: closeBracketEffect.of(pos + token.length),
                    range: EditorSelection.cursor(pos + token.length) };
            }
            else if (state.charCategorizer(pos)(next) != CharCategory.Word) {
                if (canStartStringAt(state, pos, stringPrefixes) > -1 && !probablyInString(state, pos, token, stringPrefixes))
                    return { changes: { insert: token + token, from: pos },
                        effects: closeBracketEffect.of(pos + token.length),
                        range: EditorSelection.cursor(pos + token.length) };
            }
            return { range: dont = range };
        });
        return dont ? null : state.update(changes, {
            scrollIntoView: true,
            userEvent: "input.type"
        });
    }
    function nodeStart(state, pos) {
        let tree = syntaxTree(state).resolveInner(pos + 1);
        return tree.parent && tree.from == pos;
    }
    function probablyInString(state, pos, quoteToken, prefixes) {
        let node = syntaxTree(state).resolveInner(pos, -1);
        let maxPrefix = prefixes.reduce((m, p) => Math.max(m, p.length), 0);
        for (let i = 0; i < 5; i++) {
            let start = state.sliceDoc(node.from, Math.min(node.to, node.from + quoteToken.length + maxPrefix));
            let quotePos = start.indexOf(quoteToken);
            if (!quotePos || quotePos > -1 && prefixes.indexOf(start.slice(0, quotePos)) > -1) {
                let first = node.firstChild;
                while (first && first.from == node.from && first.to - first.from > quoteToken.length + quotePos) {
                    if (state.sliceDoc(first.to - quoteToken.length, first.to) == quoteToken)
                        return false;
                    first = first.firstChild;
                }
                return true;
            }
            let parent = node.to == pos && node.parent;
            if (!parent)
                break;
            node = parent;
        }
        return false;
    }
    function canStartStringAt(state, pos, prefixes) {
        let charCat = state.charCategorizer(pos);
        if (charCat(state.sliceDoc(pos - 1, pos)) != CharCategory.Word)
            return pos;
        for (let prefix of prefixes) {
            let start = pos - prefix.length;
            if (state.sliceDoc(start, pos) == prefix && charCat(state.sliceDoc(start - 1, start)) != CharCategory.Word)
                return start;
        }
        return -1;
    }

    /**
    Returns an extension that enables autocompletion.
    */
    function autocompletion(config = {}) {
        return [
            commitCharacters,
            completionState,
            completionConfig.of(config),
            completionPlugin,
            completionKeymapExt,
            baseTheme
        ];
    }
    /**
    Basic keybindings for autocompletion.

     - Ctrl-Space (and Alt-\` on macOS): [`startCompletion`](https://codemirror.net/6/docs/ref/#autocomplete.startCompletion)
     - Escape: [`closeCompletion`](https://codemirror.net/6/docs/ref/#autocomplete.closeCompletion)
     - ArrowDown: [`moveCompletionSelection`](https://codemirror.net/6/docs/ref/#autocomplete.moveCompletionSelection)`(true)`
     - ArrowUp: [`moveCompletionSelection`](https://codemirror.net/6/docs/ref/#autocomplete.moveCompletionSelection)`(false)`
     - PageDown: [`moveCompletionSelection`](https://codemirror.net/6/docs/ref/#autocomplete.moveCompletionSelection)`(true, "page")`
     - PageDown: [`moveCompletionSelection`](https://codemirror.net/6/docs/ref/#autocomplete.moveCompletionSelection)`(true, "page")`
     - Enter: [`acceptCompletion`](https://codemirror.net/6/docs/ref/#autocomplete.acceptCompletion)
    */
    const completionKeymap = [
        { key: "Ctrl-Space", run: startCompletion },
        { mac: "Alt-`", run: startCompletion },
        { key: "Escape", run: closeCompletion },
        { key: "ArrowDown", run: /*@__PURE__*/moveCompletionSelection(true) },
        { key: "ArrowUp", run: /*@__PURE__*/moveCompletionSelection(false) },
        { key: "PageDown", run: /*@__PURE__*/moveCompletionSelection(true, "page") },
        { key: "PageUp", run: /*@__PURE__*/moveCompletionSelection(false, "page") },
        { key: "Enter", run: acceptCompletion }
    ];
    const completionKeymapExt = /*@__PURE__*/Prec.highest(/*@__PURE__*/keymap.computeN([completionConfig], state => state.facet(completionConfig).defaultKeymap ? [completionKeymap] : []));

    /**
    A collection of JavaScript-related
    [snippets](https://codemirror.net/6/docs/ref/#autocomplete.snippet).
    */
    const snippets$1 = [
        /*@__PURE__*/snippetCompletion("function ${name}(${params}) {\n\t${}\n}", {
            label: "function",
            detail: "definition",
            type: "keyword"
        }),
        /*@__PURE__*/snippetCompletion("for (let ${index} = 0; ${index} < ${bound}; ${index}++) {\n\t${}\n}", {
            label: "for",
            detail: "loop",
            type: "keyword"
        }),
        /*@__PURE__*/snippetCompletion("for (let ${name} of ${collection}) {\n\t${}\n}", {
            label: "for",
            detail: "of loop",
            type: "keyword"
        }),
        /*@__PURE__*/snippetCompletion("do {\n\t${}\n} while (${})", {
            label: "do",
            detail: "loop",
            type: "keyword"
        }),
        /*@__PURE__*/snippetCompletion("while (${}) {\n\t${}\n}", {
            label: "while",
            detail: "loop",
            type: "keyword"
        }),
        /*@__PURE__*/snippetCompletion("try {\n\t${}\n} catch (${error}) {\n\t${}\n}", {
            label: "try",
            detail: "/ catch block",
            type: "keyword"
        }),
        /*@__PURE__*/snippetCompletion("if (${}) {\n\t${}\n}", {
            label: "if",
            detail: "block",
            type: "keyword"
        }),
        /*@__PURE__*/snippetCompletion("if (${}) {\n\t${}\n} else {\n\t${}\n}", {
            label: "if",
            detail: "/ else block",
            type: "keyword"
        }),
        /*@__PURE__*/snippetCompletion("class ${name} {\n\tconstructor(${params}) {\n\t\t${}\n\t}\n}", {
            label: "class",
            detail: "definition",
            type: "keyword"
        }),
        /*@__PURE__*/snippetCompletion("import {${names}} from \"${module}\"\n${}", {
            label: "import",
            detail: "named",
            type: "keyword"
        }),
        /*@__PURE__*/snippetCompletion("import ${name} from \"${module}\"\n${}", {
            label: "import",
            detail: "default",
            type: "keyword"
        })
    ];
    /**
    A collection of snippet completions for TypeScript. Includes the
    JavaScript [snippets](https://codemirror.net/6/docs/ref/#lang-javascript.snippets).
    */
    const typescriptSnippets = /*@__PURE__*/snippets$1.concat([
        /*@__PURE__*/snippetCompletion("interface ${name} {\n\t${}\n}", {
            label: "interface",
            detail: "definition",
            type: "keyword"
        }),
        /*@__PURE__*/snippetCompletion("type ${name} = ${type}", {
            label: "type",
            detail: "definition",
            type: "keyword"
        }),
        /*@__PURE__*/snippetCompletion("enum ${name} {\n\t${}\n}", {
            label: "enum",
            detail: "definition",
            type: "keyword"
        })
    ]);

    const cache$1 = /*@__PURE__*/new NodeWeakMap();
    const ScopeNodes$1 = /*@__PURE__*/new Set([
        "Script", "Block",
        "FunctionExpression", "FunctionDeclaration", "ArrowFunction", "MethodDeclaration",
        "ForStatement"
    ]);
    function defID$1(type) {
        return (node, def) => {
            let id = node.node.getChild("VariableDefinition");
            if (id)
                def(id, type);
            return true;
        };
    }
    const functionContext = ["FunctionDeclaration"];
    const gatherCompletions$1 = {
        FunctionDeclaration: /*@__PURE__*/defID$1("function"),
        ClassDeclaration: /*@__PURE__*/defID$1("class"),
        ClassExpression: () => true,
        EnumDeclaration: /*@__PURE__*/defID$1("constant"),
        TypeAliasDeclaration: /*@__PURE__*/defID$1("type"),
        NamespaceDeclaration: /*@__PURE__*/defID$1("namespace"),
        VariableDefinition(node, def) { if (!node.matchContext(functionContext))
            def(node, "variable"); },
        TypeDefinition(node, def) { def(node, "type"); },
        __proto__: null
    };
    function getScope$1(doc, node) {
        let cached = cache$1.get(node);
        if (cached)
            return cached;
        let completions = [], top = true;
        function def(node, type) {
            let name = doc.sliceString(node.from, node.to);
            completions.push({ label: name, type });
        }
        node.cursor(IterMode.IncludeAnonymous).iterate(node => {
            if (top) {
                top = false;
            }
            else if (node.name) {
                let gather = gatherCompletions$1[node.name];
                if (gather && gather(node, def) || ScopeNodes$1.has(node.name))
                    return false;
            }
            else if (node.to - node.from > 8192) {
                // Allow caching for bigger internal nodes
                for (let c of getScope$1(doc, node.node))
                    completions.push(c);
                return false;
            }
        });
        cache$1.set(node, completions);
        return completions;
    }
    const Identifier$2 = /^[\w$\xa1-\uffff][\w$\d\xa1-\uffff]*$/;
    const dontComplete$1 = [
        "TemplateString", "String", "RegExp",
        "LineComment", "BlockComment",
        "VariableDefinition", "TypeDefinition", "Label",
        "PropertyDefinition", "PropertyName",
        "PrivatePropertyDefinition", "PrivatePropertyName",
        ".", "?."
    ];
    /**
    Completion source that looks up locally defined names in
    JavaScript code.
    */
    function localCompletionSource$1(context) {
        let inner = syntaxTree(context.state).resolveInner(context.pos, -1);
        if (dontComplete$1.indexOf(inner.name) > -1)
            return null;
        let isWord = inner.name == "VariableName" ||
            inner.to - inner.from < 20 && Identifier$2.test(context.state.sliceDoc(inner.from, inner.to));
        if (!isWord && !context.explicit)
            return null;
        let options = [];
        for (let pos = inner; pos; pos = pos.parent) {
            if (ScopeNodes$1.has(pos.name))
                options = options.concat(getScope$1(context.state.doc, pos));
        }
        return {
            options,
            from: isWord ? inner.from : context.pos,
            validFor: Identifier$2
        };
    }

    /**
    A language provider based on the [Lezer JavaScript
    parser](https://github.com/lezer-parser/javascript), extended with
    highlighting and indentation information.
    */
    const javascriptLanguage = /*@__PURE__*/LRLanguage.define({
        name: "javascript",
        parser: /*@__PURE__*/parser$6.configure({
            props: [
                /*@__PURE__*/indentNodeProp.add({
                    IfStatement: /*@__PURE__*/continuedIndent({ except: /^\s*({|else\b)/ }),
                    TryStatement: /*@__PURE__*/continuedIndent({ except: /^\s*({|catch\b|finally\b)/ }),
                    LabeledStatement: flatIndent,
                    SwitchBody: context => {
                        let after = context.textAfter, closed = /^\s*\}/.test(after), isCase = /^\s*(case|default)\b/.test(after);
                        return context.baseIndent + (closed ? 0 : isCase ? 1 : 2) * context.unit;
                    },
                    Block: /*@__PURE__*/delimitedIndent({ closing: "}" }),
                    ArrowFunction: cx => cx.baseIndent + cx.unit,
                    "TemplateString BlockComment": () => null,
                    "Statement Property": /*@__PURE__*/continuedIndent({ except: /^{/ }),
                    JSXElement(context) {
                        let closed = /^\s*<\//.test(context.textAfter);
                        return context.lineIndent(context.node.from) + (closed ? 0 : context.unit);
                    },
                    JSXEscape(context) {
                        let closed = /\s*\}/.test(context.textAfter);
                        return context.lineIndent(context.node.from) + (closed ? 0 : context.unit);
                    },
                    "JSXOpenTag JSXSelfClosingTag"(context) {
                        return context.column(context.node.from) + context.unit;
                    }
                }),
                /*@__PURE__*/foldNodeProp.add({
                    "Block ClassBody SwitchBody EnumBody ObjectExpression ArrayExpression ObjectType": foldInside,
                    BlockComment(tree) { return { from: tree.from + 2, to: tree.to - 2 }; }
                })
            ]
        }),
        languageData: {
            closeBrackets: { brackets: ["(", "[", "{", "'", '"', "`"] },
            commentTokens: { line: "//", block: { open: "/*", close: "*/" } },
            indentOnInput: /^\s*(?:case |default:|\{|\}|<\/)$/,
            wordChars: "$"
        }
    });
    const jsxSublanguage = {
        test: node => /^JSX/.test(node.name),
        facet: /*@__PURE__*/defineLanguageFacet({ commentTokens: { block: { open: "{/*", close: "*/}" } } })
    };
    /**
    A language provider for TypeScript.
    */
    const typescriptLanguage = /*@__PURE__*/javascriptLanguage.configure({ dialect: "ts" }, "typescript");
    /**
    Language provider for JSX.
    */
    const jsxLanguage = /*@__PURE__*/javascriptLanguage.configure({
        dialect: "jsx",
        props: [/*@__PURE__*/sublanguageProp.add(n => n.isTop ? [jsxSublanguage] : undefined)]
    });
    /**
    Language provider for JSX + TypeScript.
    */
    const tsxLanguage = /*@__PURE__*/javascriptLanguage.configure({
        dialect: "jsx ts",
        props: [/*@__PURE__*/sublanguageProp.add(n => n.isTop ? [jsxSublanguage] : undefined)]
    }, "typescript");
    let kwCompletion = (name) => ({ label: name, type: "keyword" });
    const keywords$1 = /*@__PURE__*/"break case const continue default delete export extends false finally in instanceof let new return static super switch this throw true typeof var yield".split(" ").map(kwCompletion);
    const typescriptKeywords = /*@__PURE__*/keywords$1.concat(/*@__PURE__*/["declare", "implements", "private", "protected", "public"].map(kwCompletion));
    /**
    JavaScript support. Includes [snippet](https://codemirror.net/6/docs/ref/#lang-javascript.snippets)
    and local variable completion.
    */
    function javascript(config = {}) {
        let lang = config.jsx ? (config.typescript ? tsxLanguage : jsxLanguage)
            : config.typescript ? typescriptLanguage : javascriptLanguage;
        let completions = config.typescript ? typescriptSnippets.concat(typescriptKeywords) : snippets$1.concat(keywords$1);
        return new LanguageSupport(lang, [
            javascriptLanguage.data.of({
                autocomplete: ifNotIn(dontComplete$1, completeFromList(completions))
            }),
            javascriptLanguage.data.of({
                autocomplete: localCompletionSource$1
            }),
            config.jsx ? autoCloseTags$1 : [],
        ]);
    }
    function findOpenTag$1(node) {
        for (;;) {
            if (node.name == "JSXOpenTag" || node.name == "JSXSelfClosingTag" || node.name == "JSXFragmentTag")
                return node;
            if (node.name == "JSXEscape" || !node.parent)
                return null;
            node = node.parent;
        }
    }
    function elementName$2(doc, tree, max = doc.length) {
        for (let ch = tree === null || tree === void 0 ? void 0 : tree.firstChild; ch; ch = ch.nextSibling) {
            if (ch.name == "JSXIdentifier" || ch.name == "JSXBuiltin" || ch.name == "JSXNamespacedName" ||
                ch.name == "JSXMemberExpression")
                return doc.sliceString(ch.from, Math.min(ch.to, max));
        }
        return "";
    }
    const android = typeof navigator == "object" && /*@__PURE__*//Android\b/.test(navigator.userAgent);
    /**
    Extension that will automatically insert JSX close tags when a `>` or
    `/` is typed.
    */
    const autoCloseTags$1 = /*@__PURE__*/EditorView.inputHandler.of((view, from, to, text, defaultInsert) => {
        if ((android ? view.composing : view.compositionStarted) || view.state.readOnly ||
            from != to || (text != ">" && text != "/") ||
            !javascriptLanguage.isActiveAt(view.state, from, -1))
            return false;
        let base = defaultInsert(), { state } = base;
        let closeTags = state.changeByRange(range => {
            var _a;
            let { head } = range, around = syntaxTree(state).resolveInner(head - 1, -1), name;
            if (around.name == "JSXStartTag")
                around = around.parent;
            if (state.doc.sliceString(head - 1, head) != text || around.name == "JSXAttributeValue" && around.to > head) ;
            else if (text == ">" && around.name == "JSXFragmentTag") {
                return { range, changes: { from: head, insert: `</>` } };
            }
            else if (text == "/" && around.name == "JSXStartCloseTag") {
                let empty = around.parent, base = empty.parent;
                if (base && empty.from == head - 2 &&
                    ((name = elementName$2(state.doc, base.firstChild, head)) || ((_a = base.firstChild) === null || _a === void 0 ? void 0 : _a.name) == "JSXFragmentTag")) {
                    let insert = `${name}>`;
                    return { range: EditorSelection.cursor(head + insert.length, -1), changes: { from: head, insert } };
                }
            }
            else if (text == ">") {
                let openTag = findOpenTag$1(around);
                if (openTag && openTag.name == "JSXOpenTag" &&
                    !/^\/?>|^<\//.test(state.doc.sliceString(head, head + 2)) &&
                    (name = elementName$2(state.doc, openTag, head)))
                    return { range, changes: { from: head, insert: `</${name}>` } };
            }
            return { range };
        });
        if (closeTags.changes.empty)
            return false;
        view.dispatch([
            base,
            state.update(closeTags, { userEvent: "input.complete", scrollIntoView: true })
        ]);
        return true;
    });

    // This file was generated by lezer-generator. You probably shouldn't edit it.
    const printKeyword = 1,
      indent = 194,
      dedent = 195,
      newline$1 = 196,
      blankLineStart = 197,
      newlineBracketed = 198,
      eof = 199,
      stringContent = 200,
      Escape = 2,
      replacementStart = 3,
      stringEnd = 201,
      ParenL$1 = 24,
      ParenthesizedExpression = 25,
      TupleExpression = 49,
      ComprehensionExpression = 50,
      BracketL$1 = 55,
      ArrayExpression = 56,
      ArrayComprehensionExpression = 57,
      BraceL$1 = 59,
      DictionaryExpression = 60,
      DictionaryComprehensionExpression = 61,
      SetExpression = 62,
      SetComprehensionExpression = 63,
      ArgList = 65,
      subscript = 238,
      String$1$1 = 71,
      stringStart = 241,
      stringStartD = 242,
      stringStartL = 243,
      stringStartLD = 244,
      stringStartR = 245,
      stringStartRD = 246,
      stringStartRL = 247,
      stringStartRLD = 248,
      FormatString = 72,
      stringStartF = 249,
      stringStartFD = 250,
      stringStartFL = 251,
      stringStartFLD = 252,
      stringStartFR = 253,
      stringStartFRD = 254,
      stringStartFRL = 255,
      stringStartFRLD = 256,
      FormatReplacement = 73,
      nestedFormatReplacement = 77,
      importList = 263,
      TypeParamList = 112,
      ParamList = 130,
      SequencePattern = 151,
      MappingPattern = 152,
      PatternArgList = 155;

    const newline$2 = 10, carriageReturn = 13, space$1 = 32, tab = 9, hash$1 = 35, parenOpen = 40, dot = 46,
          braceOpen = 123, braceClose = 125, singleQuote = 39, doubleQuote = 34, backslash$1 = 92,
          letter_o = 111, letter_x = 120, letter_N = 78, letter_u = 117, letter_U = 85;

    const bracketed = new Set([
      ParenthesizedExpression, TupleExpression, ComprehensionExpression, importList, ArgList, ParamList,
      ArrayExpression, ArrayComprehensionExpression, subscript,
      SetExpression, SetComprehensionExpression, FormatString, FormatReplacement, nestedFormatReplacement,
      DictionaryExpression, DictionaryComprehensionExpression,
      SequencePattern, MappingPattern, PatternArgList, TypeParamList
    ]);

    function isLineBreak(ch) {
      return ch == newline$2 || ch == carriageReturn
    }

    function isHex(ch) {
      return ch >= 48 && ch <= 57 || ch >= 65 && ch <= 70 || ch >= 97 && ch <= 102
    }

    const newlines = new ExternalTokenizer((input, stack) => {
      let prev;
      if (input.next < 0) {
        input.acceptToken(eof);
      } else if (stack.context.flags & cx_Bracketed) {
        if (isLineBreak(input.next)) input.acceptToken(newlineBracketed, 1);
      } else if (((prev = input.peek(-1)) < 0 || isLineBreak(prev)) &&
                 stack.canShift(blankLineStart)) {
        let spaces = 0;
        while (input.next == space$1 || input.next == tab) { input.advance(); spaces++; }
        if (input.next == newline$2 || input.next == carriageReturn || input.next == hash$1)
          input.acceptToken(blankLineStart, -spaces);
      } else if (isLineBreak(input.next)) {
        input.acceptToken(newline$1, 1);
      }
    }, {contextual: true});

    const indentation = new ExternalTokenizer((input, stack) => {
      let context = stack.context;
      if (context.flags) return
      let prev = input.peek(-1);
      if (prev == newline$2 || prev == carriageReturn) {
        let depth = 0, chars = 0;
        for (;;) {
          if (input.next == space$1) depth++;
          else if (input.next == tab) depth += 8 - (depth % 8);
          else break
          input.advance();
          chars++;
        }
        if (depth != context.indent &&
            input.next != newline$2 && input.next != carriageReturn && input.next != hash$1) {
          if (depth < context.indent) input.acceptToken(dedent, -chars);
          else input.acceptToken(indent);
        }
      }
    });

    // Flags used in Context objects
    const cx_Bracketed = 1, cx_String = 2, cx_DoubleQuote = 4, cx_Long = 8, cx_Raw = 16, cx_Format = 32;

    function Context(parent, indent, flags) {
      this.parent = parent;
      this.indent = indent;
      this.flags = flags;
      this.hash = (parent ? parent.hash + parent.hash << 8 : 0) + indent + (indent << 4) + flags + (flags << 6);
    }

    const topIndent = new Context(null, 0, 0);

    function countIndent(space) {
      let depth = 0;
      for (let i = 0; i < space.length; i++)
        depth += space.charCodeAt(i) == tab ? 8 - (depth % 8) : 1;
      return depth
    }

    const stringFlags = new Map([
      [stringStart, 0],
      [stringStartD, cx_DoubleQuote],
      [stringStartL, cx_Long],
      [stringStartLD, cx_Long | cx_DoubleQuote],
      [stringStartR, cx_Raw],
      [stringStartRD, cx_Raw | cx_DoubleQuote],
      [stringStartRL, cx_Raw | cx_Long],
      [stringStartRLD, cx_Raw | cx_Long | cx_DoubleQuote],
      [stringStartF, cx_Format],
      [stringStartFD, cx_Format | cx_DoubleQuote],
      [stringStartFL, cx_Format | cx_Long],
      [stringStartFLD, cx_Format | cx_Long | cx_DoubleQuote],
      [stringStartFR, cx_Format | cx_Raw],
      [stringStartFRD, cx_Format | cx_Raw | cx_DoubleQuote],
      [stringStartFRL, cx_Format | cx_Raw | cx_Long],
      [stringStartFRLD, cx_Format | cx_Raw | cx_Long | cx_DoubleQuote]
    ].map(([term, flags]) => [term, flags | cx_String]));

    const trackIndent = new ContextTracker({
      start: topIndent,
      reduce(context, term, _, input) {
        if ((context.flags & cx_Bracketed) && bracketed.has(term) ||
            (term == String$1$1 || term == FormatString) && (context.flags & cx_String))
          return context.parent
        return context
      },
      shift(context, term, stack, input) {
        if (term == indent)
          return new Context(context, countIndent(input.read(input.pos, stack.pos)), 0)
        if (term == dedent)
          return context.parent
        if (term == ParenL$1 || term == BracketL$1 || term == BraceL$1 || term == replacementStart)
          return new Context(context, 0, cx_Bracketed)
        if (stringFlags.has(term))
          return new Context(context, 0, stringFlags.get(term) | (context.flags & cx_Bracketed))
        return context
      },
      hash(context) { return context.hash }
    });

    const legacyPrint = new ExternalTokenizer(input => {
      for (let i = 0; i < 5; i++) {
        if (input.next != "print".charCodeAt(i)) return
        input.advance();
      }
      if (/\w/.test(String.fromCharCode(input.next))) return
      for (let off = 0;; off++) {
        let next = input.peek(off);
        if (next == space$1 || next == tab) continue
        if (next != parenOpen && next != dot && next != newline$2 && next != carriageReturn && next != hash$1)
          input.acceptToken(printKeyword);
        return
      }
    });

    const strings = new ExternalTokenizer((input, stack) => {
      let {flags} = stack.context;
      let quote = (flags & cx_DoubleQuote) ? doubleQuote : singleQuote;
      let long = (flags & cx_Long) > 0;
      let escapes = !(flags & cx_Raw);
      let format = (flags & cx_Format) > 0;

      let start = input.pos;
      for (;;) {
        if (input.next < 0) {
          break
        } else if (format && input.next == braceOpen) {
          if (input.peek(1) == braceOpen) {
            input.advance(2);
          } else {
            if (input.pos == start) {
              input.acceptToken(replacementStart, 1);
              return
            }
            break
          }
        } else if (escapes && input.next == backslash$1) {
          if (input.pos == start) {
            input.advance();
            let escaped = input.next;
            if (escaped >= 0) {
              input.advance();
              skipEscape(input, escaped);
            }
            input.acceptToken(Escape);
            return
          }
          break
        } else if (input.next == quote && (!long || input.peek(1) == quote && input.peek(2) == quote)) {
          if (input.pos == start) {
            input.acceptToken(stringEnd, long ? 3 : 1);
            return
          }
          break
        } else if (input.next == newline$2) {
          if (long) {
            input.advance();
          } else if (input.pos == start) {
            input.acceptToken(stringEnd);
            return
          }
          break
        } else {
          input.advance();
        }
      }
      if (input.pos > start) input.acceptToken(stringContent);
    });

    function skipEscape(input, ch) {
      if (ch == letter_o) {
        for (let i = 0; i < 2 && input.next >= 48 && input.next <= 55; i++) input.advance();
      } else if (ch == letter_x) {
        for (let i = 0; i < 2 && isHex(input.next); i++) input.advance();
      } else if (ch == letter_u) {
        for (let i = 0; i < 4 && isHex(input.next); i++) input.advance();
      } else if (ch == letter_U) {
        for (let i = 0; i < 8 && isHex(input.next); i++) input.advance();
      } else if (ch == letter_N) {
        if (input.next == braceOpen) {
          input.advance();
          while (input.next >= 0 && input.next != braceClose && input.next != singleQuote &&
                 input.next != doubleQuote && input.next != newline$2) input.advance();
          if (input.next == braceClose) input.advance();
        }
      }
    }

    const pythonHighlighting = styleTags({
      "async \"*\" \"**\" FormatConversion FormatSpec": tags$1.modifier,
      "for while if elif else try except finally return raise break continue with pass assert await yield match case": tags$1.controlKeyword,
      "in not and or is del": tags$1.operatorKeyword,
      "from def class global nonlocal lambda": tags$1.definitionKeyword,
      import: tags$1.moduleKeyword,
      "with as print": tags$1.keyword,
      Boolean: tags$1.bool,
      None: tags$1.null,
      VariableName: tags$1.variableName,
      "CallExpression/VariableName": tags$1.function(tags$1.variableName),
      "FunctionDefinition/VariableName": tags$1.function(tags$1.definition(tags$1.variableName)),
      "ClassDefinition/VariableName": tags$1.definition(tags$1.className),
      PropertyName: tags$1.propertyName,
      "CallExpression/MemberExpression/PropertyName": tags$1.function(tags$1.propertyName),
      Comment: tags$1.lineComment,
      Number: tags$1.number,
      String: tags$1.string,
      FormatString: tags$1.special(tags$1.string),
      Escape: tags$1.escape,
      UpdateOp: tags$1.updateOperator,
      "ArithOp!": tags$1.arithmeticOperator,
      BitOp: tags$1.bitwiseOperator,
      CompareOp: tags$1.compareOperator,
      AssignOp: tags$1.definitionOperator,
      Ellipsis: tags$1.punctuation,
      At: tags$1.meta,
      "( )": tags$1.paren,
      "[ ]": tags$1.squareBracket,
      "{ }": tags$1.brace,
      ".": tags$1.derefOperator,
      ", ;": tags$1.separator
    });

    // This file was generated by lezer-generator. You probably shouldn't edit it.
    const spec_identifier$1 = {__proto__:null,await:44, or:54, and:56, in:60, not:62, is:64, if:70, else:72, lambda:76, yield:94, from:96, async:102, for:104, None:162, True:164, False:164, del:178, pass:182, break:186, continue:190, return:194, raise:202, import:206, as:208, global:212, nonlocal:214, assert:218, type:223, elif:236, while:240, try:246, except:248, finally:250, with:254, def:258, class:268, match:279, case:285};
    const parser$5 = LRParser.deserialize({
      version: 14,
      states: "##jO`QeOOP$}OSOOO&WQtO'#HUOOQS'#Co'#CoOOQS'#Cp'#CpO'vQdO'#CnO*UQtO'#HTOOQS'#HU'#HUOOQS'#DU'#DUOOQS'#HT'#HTO*rQdO'#D_O+VQdO'#DfO+gQdO'#DjO+zOWO'#DuO,VOWO'#DvO.[QtO'#GuOOQS'#Gu'#GuO'vQdO'#GtO0ZQtO'#GtOOQS'#Eb'#EbO0rQdO'#EcOOQS'#Gs'#GsO0|QdO'#GrOOQV'#Gr'#GrO1XQdO'#FYOOQS'#G^'#G^O1^QdO'#FXOOQV'#IS'#ISOOQV'#Gq'#GqOOQV'#Fq'#FqQ`QeOOO'vQdO'#CqO1lQdO'#C}O1sQdO'#DRO2RQdO'#HYO2cQtO'#EVO'vQdO'#EWOOQS'#EY'#EYOOQS'#E['#E[OOQS'#E^'#E^O2wQdO'#E`O3_QdO'#EdO3rQdO'#EfO3zQtO'#EfO1XQdO'#EiO0rQdO'#ElO1XQdO'#EnO0rQdO'#EtO0rQdO'#EwO4VQdO'#EyO4^QdO'#FOO4iQdO'#EzO0rQdO'#FOO1XQdO'#FQO1XQdO'#FVO4nQdO'#F[P4uOdO'#GpPOOO)CBd)CBdOOQS'#Ce'#CeOOQS'#Cf'#CfOOQS'#Cg'#CgOOQS'#Ch'#ChOOQS'#Ci'#CiOOQS'#Cj'#CjOOQS'#Cl'#ClO'vQdO,59OO'vQdO,59OO'vQdO,59OO'vQdO,59OO'vQdO,59OO'vQdO,59OO5QQdO'#DoOOQS,5:Y,5:YO5eQdO'#HdOOQS,5:],5:]O5rQ!fO,5:]O5wQtO,59YO1lQdO,59bO1lQdO,59bO1lQdO,59bO8gQdO,59bO8lQdO,59bO8sQdO,59jO8zQdO'#HTO:QQdO'#HSOOQS'#HS'#HSOOQS'#D['#D[O:iQdO,59aO'vQdO,59aO:wQdO,59aOOQS,59y,59yO:|QdO,5:RO'vQdO,5:ROOQS,5:Q,5:QO;[QdO,5:QO;aQdO,5:XO'vQdO,5:XO'vQdO,5:VOOQS,5:U,5:UO;rQdO,5:UO;wQdO,5:WOOOW'#Fy'#FyO;|OWO,5:aOOQS,5:a,5:aO<XQdO'#HwOOOW'#Dw'#DwOOOW'#Fz'#FzO<iOWO,5:bOOQS,5:b,5:bOOQS'#F}'#F}O<wQtO,5:iO?iQtO,5=`O@SQ#xO,5=`O@sQtO,5=`OOQS,5:},5:}OA[QeO'#GWOBnQdO,5;^OOQV,5=^,5=^OByQtO'#IPOChQdO,5;tOOQS-E:[-E:[OOQV,5;s,5;sO4dQdO'#FQOOQV-E9o-E9oOCpQtO,59]OEwQtO,59iOFbQdO'#HVOFmQdO'#HVO1XQdO'#HVOFxQdO'#DTOGQQdO,59mOGVQdO'#HZO'vQdO'#HZO0rQdO,5=tOOQS,5=t,5=tO0rQdO'#EROOQS'#ES'#ESOGtQdO'#GPOHUQdO,58|OHUQdO,58|O*xQdO,5:oOHdQtO'#H]OOQS,5:r,5:rOOQS,5:z,5:zOHwQdO,5;OOIYQdO'#IOO1XQdO'#H}OOQS,5;Q,5;QOOQS'#GT'#GTOInQtO,5;QOI|QdO,5;QOJRQdO'#IQOOQS,5;T,5;TOJaQdO'#H|OOQS,5;W,5;WOJrQdO,5;YO4iQdO,5;`O4iQdO,5;cOJzQtO'#ITO'vQdO'#ITOKUQdO,5;eO4VQdO,5;eO0rQdO,5;jO1XQdO,5;lOKZQeO'#EuOLgQgO,5;fO!!hQdO'#IUO4iQdO,5;jO!!sQdO,5;lO!!{QdO,5;qO!#WQtO,5;vO'vQdO,5;vPOOO,5=[,5=[P!#_OSO,5=[P!#dOdO,5=[O!&XQtO1G.jO!&`QtO1G.jO!)PQtO1G.jO!)ZQtO1G.jO!+tQtO1G.jO!,XQtO1G.jO!,lQdO'#HcO!,zQtO'#GuO0rQdO'#HcO!-UQdO'#HbOOQS,5:Z,5:ZO!-^QdO,5:ZO!-cQdO'#HeO!-nQdO'#HeO!.RQdO,5>OOOQS'#Ds'#DsOOQS1G/w1G/wOOQS1G.|1G.|O!/RQtO1G.|O!/YQtO1G.|O1lQdO1G.|O!/uQdO1G/UOOQS'#DZ'#DZO0rQdO,59tOOQS1G.{1G.{O!/|QdO1G/eO!0^QdO1G/eO!0fQdO1G/fO'vQdO'#H[O!0kQdO'#H[O!0pQtO1G.{O!1QQdO,59iO!2WQdO,5=zO!2hQdO,5=zO!2pQdO1G/mO!2uQtO1G/mOOQS1G/l1G/lO!3VQdO,5=uO!3|QdO,5=uO0rQdO1G/qO!4kQdO1G/sO!4pQtO1G/sO!5QQtO1G/qOOQS1G/p1G/pOOQS1G/r1G/rOOOW-E9w-E9wOOQS1G/{1G/{O!5bQdO'#HxO0rQdO'#HxO!5sQdO,5>cOOOW-E9x-E9xOOQS1G/|1G/|OOQS-E9{-E9{O!6RQ#xO1G2zO!6rQtO1G2zO'vQdO,5<jOOQS,5<j,5<jOOQS-E9|-E9|OOQS,5<r,5<rOOQS-E:U-E:UOOQV1G0x1G0xO1XQdO'#GRO!7ZQtO,5>kOOQS1G1`1G1`O!7xQdO1G1`OOQS'#DV'#DVO0rQdO,5=qOOQS,5=q,5=qO!7}QdO'#FrO!8YQdO,59oO!8bQdO1G/XO!8lQtO,5=uOOQS1G3`1G3`OOQS,5:m,5:mO!9]QdO'#GtOOQS,5<k,5<kOOQS-E9}-E9}O!9nQdO1G.hOOQS1G0Z1G0ZO!9|QdO,5=wO!:^QdO,5=wO0rQdO1G0jO0rQdO1G0jO!:oQdO,5>jO!;QQdO,5>jO1XQdO,5>jO!;cQdO,5>iOOQS-E:R-E:RO!;hQdO1G0lO!;sQdO1G0lO!;xQdO,5>lO!<WQdO,5>lO!<fQdO,5>hO!<|QdO,5>hO!=_QdO'#EpO0rQdO1G0tO!=jQdO1G0tO!=oQgO1G0zO!AmQgO1G0}O!EhQdO,5>oO!ErQdO,5>oO!EzQtO,5>oO0rQdO1G1PO!FUQdO1G1PO4iQdO1G1UO!!sQdO1G1WOOQV,5;a,5;aO!FZQfO,5;aO!F`QgO1G1QO!JaQdO'#GZO4iQdO1G1QO4iQdO1G1QO!JqQdO,5>pO!KOQdO,5>pO1XQdO,5>pOOQV1G1U1G1UO!KWQdO'#FSO!KiQ!fO1G1WO!KqQdO1G1WOOQV1G1]1G1]O4iQdO1G1]O!KvQdO1G1]O!LOQdO'#F^OOQV1G1b1G1bO!#WQtO1G1bPOOO1G2v1G2vP!LTOSO1G2vOOQS,5=},5=}OOQS'#Dp'#DpO0rQdO,5=}O!LYQdO,5=|O!LmQdO,5=|OOQS1G/u1G/uO!LuQdO,5>PO!MVQdO,5>PO!M_QdO,5>PO!MrQdO,5>PO!NSQdO,5>POOQS1G3j1G3jOOQS7+$h7+$hO!8bQdO7+$pO# uQdO1G.|O# |QdO1G.|OOQS1G/`1G/`OOQS,5<`,5<`O'vQdO,5<`OOQS7+%P7+%PO#!TQdO7+%POOQS-E9r-E9rOOQS7+%Q7+%QO#!eQdO,5=vO'vQdO,5=vOOQS7+$g7+$gO#!jQdO7+%PO#!rQdO7+%QO#!wQdO1G3fOOQS7+%X7+%XO##XQdO1G3fO##aQdO7+%XOOQS,5<_,5<_O'vQdO,5<_O##fQdO1G3aOOQS-E9q-E9qO#$]QdO7+%]OOQS7+%_7+%_O#$kQdO1G3aO#%YQdO7+%_O#%_QdO1G3gO#%oQdO1G3gO#%wQdO7+%]O#%|QdO,5>dO#&gQdO,5>dO#&gQdO,5>dOOQS'#Dx'#DxO#&xO&jO'#DzO#'TO`O'#HyOOOW1G3}1G3}O#'YQdO1G3}O#'bQdO1G3}O#'mQ#xO7+(fO#(^QtO1G2UP#(wQdO'#GOOOQS,5<m,5<mOOQS-E:P-E:POOQS7+&z7+&zOOQS1G3]1G3]OOQS,5<^,5<^OOQS-E9p-E9pOOQS7+$s7+$sO#)UQdO,5=`O#)oQdO,5=`O#*QQtO,5<aO#*eQdO1G3cOOQS-E9s-E9sOOQS7+&U7+&UO#*uQdO7+&UO#+TQdO,5<nO#+iQdO1G4UOOQS-E:Q-E:QO#+zQdO1G4UOOQS1G4T1G4TOOQS7+&W7+&WO#,]QdO7+&WOOQS,5<p,5<pO#,hQdO1G4WOOQS-E:S-E:SOOQS,5<l,5<lO#,vQdO1G4SOOQS-E:O-E:OO1XQdO'#EqO#-^QdO'#EqO#-iQdO'#IRO#-qQdO,5;[OOQS7+&`7+&`O0rQdO7+&`O#-vQgO7+&fO!JdQdO'#GXO4iQdO7+&fO4iQdO7+&iO#1tQtO,5<tO'vQdO,5<tO#2OQdO1G4ZOOQS-E:W-E:WO#2YQdO1G4ZO4iQdO7+&kO0rQdO7+&kOOQV7+&p7+&pO!KiQ!fO7+&rO!KqQdO7+&rO`QeO1G0{OOQV-E:X-E:XO4iQdO7+&lO4iQdO7+&lOOQV,5<u,5<uO#2bQdO,5<uO!JdQdO,5<uOOQV7+&l7+&lO#2mQgO7+&lO#6hQdO,5<vO#6sQdO1G4[OOQS-E:Y-E:YO#7QQdO1G4[O#7YQdO'#IWO#7hQdO'#IWO1XQdO'#IWOOQS'#IW'#IWO#7sQdO'#IVOOQS,5;n,5;nO#7{QdO,5;nO0rQdO'#FUOOQV7+&r7+&rO4iQdO7+&rOOQV7+&w7+&wO4iQdO7+&wO#8QQfO,5;xOOQV7+&|7+&|POOO7+(b7+(bO#8VQdO1G3iOOQS,5<c,5<cO#8eQdO1G3hOOQS-E9u-E9uO#8xQdO,5<dO#9TQdO,5<dO#9hQdO1G3kOOQS-E9v-E9vO#9xQdO1G3kO#:QQdO1G3kO#:bQdO1G3kO#9xQdO1G3kOOQS<<H[<<H[O#:mQtO1G1zOOQS<<Hk<<HkP#:zQdO'#FtO8sQdO1G3bO#;XQdO1G3bO#;^QdO<<HkOOQS<<Hl<<HlO#;nQdO7+)QOOQS<<Hs<<HsO#<OQtO1G1yP#<oQdO'#FsO#<|QdO7+)RO#=^QdO7+)RO#=fQdO<<HwO#=kQdO7+({OOQS<<Hy<<HyO#>bQdO,5<bO'vQdO,5<bOOQS-E9t-E9tOOQS<<Hw<<HwOOQS,5<g,5<gO0rQdO,5<gO#>gQdO1G4OOOQS-E9y-E9yO#?QQdO1G4OO<XQdO'#H{OOOO'#D{'#D{OOOO'#F|'#F|O#?cO&jO,5:fOOOW,5>e,5>eOOOW7+)i7+)iO#?nQdO7+)iO#?vQdO1G2zO#@aQdO1G2zP'vQdO'#FuO0rQdO<<IpO1XQdO1G2YP1XQdO'#GSO#@rQdO7+)pO#ATQdO7+)pOOQS<<Ir<<IrP1XQdO'#GUP0rQdO'#GQOOQS,5;],5;]O#AfQdO,5>mO#AtQdO,5>mOOQS1G0v1G0vOOQS<<Iz<<IzOOQV-E:V-E:VO4iQdO<<JQOOQV,5<s,5<sO4iQdO,5<sOOQV<<JQ<<JQOOQV<<JT<<JTO#A|QtO1G2`P#BWQdO'#GYO#B_QdO7+)uO#BiQgO<<JVO4iQdO<<JVOOQV<<J^<<J^O4iQdO<<J^O!KiQ!fO<<J^O#FdQgO7+&gOOQV<<JW<<JWO#FnQgO<<JWOOQV1G2a1G2aO1XQdO1G2aO#JiQdO1G2aO4iQdO<<JWO1XQdO1G2bP0rQdO'#G[O#JtQdO7+)vO#KRQdO7+)vOOQS'#FT'#FTO0rQdO,5>rO#KZQdO,5>rOOQS,5>r,5>rO#KfQdO,5>qO#KwQdO,5>qOOQS1G1Y1G1YOOQS,5;p,5;pOOQV<<Jc<<JcO#LPQdO1G1dOOQS7+)T7+)TP#LUQdO'#FwO#LfQdO1G2OO#LyQdO1G2OO#MZQdO1G2OP#MfQdO'#FxO#MsQdO7+)VO#NTQdO7+)VO#NTQdO7+)VO#N]QdO7+)VO#NmQdO7+(|O8sQdO7+(|OOQSAN>VAN>VO$ WQdO<<LmOOQSAN>cAN>cO0rQdO1G1|O$ hQtO1G1|P$ rQdO'#FvOOQS1G2R1G2RP$!PQdO'#F{O$!^QdO7+)jO$!wQdO,5>gOOOO-E9z-E9zOOOW<<MT<<MTO$#VQdO7+(fOOQSAN?[AN?[OOQS7+'t7+'tO$#pQdO<<M[OOQS,5<q,5<qO$$RQdO1G4XOOQS-E:T-E:TOOQVAN?lAN?lOOQV1G2_1G2_O4iQdOAN?qO$$aQgOAN?qOOQVAN?xAN?xO4iQdOAN?xOOQV<<JR<<JRO4iQdOAN?rO4iQdO7+'{OOQV7+'{7+'{O1XQdO7+'{OOQVAN?rAN?rOOQS7+'|7+'|O$([QdO<<MbOOQS1G4^1G4^O0rQdO1G4^OOQS,5<w,5<wO$(iQdO1G4]OOQS-E:Z-E:ZOOQU'#G_'#G_O$(zQfO7+'OO$)VQdO'#F_O$*^QdO7+'jO$*nQdO7+'jOOQS7+'j7+'jO$*yQdO<<LqO$+ZQdO<<LqO$+ZQdO<<LqO$+cQdO'#H^OOQS<<Lh<<LhO$+mQdO<<LhOOQS7+'h7+'hOOQS'#D|'#D|OOOO1G4R1G4RO$,WQdO1G4RO$,`QdO1G4RP!=_QdO'#GVOOQVG25]G25]O4iQdOG25]OOQVG25dG25dOOQVG25^G25^OOQV<<Kg<<KgO4iQdO<<KgOOQS7+)x7+)xP$,kQdO'#G]OOQU-E:]-E:]OOQV<<Jj<<JjO$-_QtO'#FaOOQS'#Fc'#FcO$-oQdO'#FbO$.aQdO'#FbOOQS'#Fb'#FbO$.fQdO'#IYO$)VQdO'#FiO$)VQdO'#FiO$.}QdO'#FjO$)VQdO'#FkO$/UQdO'#IZOOQS'#IZ'#IZO$/sQdO,5;yOOQS<<KU<<KUO$/{QdO<<KUO$0]QdOANB]O$0mQdOANB]O$0uQdO'#H_OOQS'#H_'#H_O1sQdO'#DcO$1`QdO,5=xOOQSANBSANBSOOOO7+)m7+)mO$1wQdO7+)mOOQVLD*wLD*wOOQVANARANARO5rQ!fO'#GaO$2PQtO,5<SO$)VQdO'#FmOOQS,5<W,5<WOOQS'#Fd'#FdO$2qQdO,5;|O$2vQdO,5;|OOQS'#Fg'#FgO$)VQdO'#G`O$3hQdO,5<QO$4SQdO,5>tO$4dQdO,5>tO1XQdO,5<PO$4uQdO,5<TO$4zQdO,5<TO$)VQdO'#I[O$5PQdO'#I[O$5UQdO,5<UOOQS,5<V,5<VO'vQdO'#FpOOQU1G1e1G1eO4iQdO1G1eOOQSAN@pAN@pO$5ZQdOG27wO$5kQdO,59}OOQS1G3d1G3dOOOO<<MX<<MXOOQS,5<{,5<{OOQS-E:_-E:_O$5pQtO'#FaO$5wQdO'#I]O$6VQdO'#I]O$6_QdO,5<XOOQS1G1h1G1hO$6dQdO1G1hO$6iQdO,5<zOOQS-E:^-E:^O$7TQdO,5=OO$7lQdO1G4`OOQS-E:b-E:bOOQS1G1k1G1kOOQS1G1o1G1oO$7|QdO,5>vO$)VQdO,5>vOOQS1G1p1G1pO$8[QtO,5<[OOQU7+'P7+'PO$+cQdO1G/iO$)VQdO,5<YO$8cQdO,5>wO$8jQdO,5>wOOQS1G1s1G1sOOQS7+'S7+'SP$)VQdO'#GdO$8rQdO1G4bO$8|QdO1G4bO$9UQdO1G4bOOQS7+%T7+%TO$9dQdO1G1tO$9rQtO'#FaO$9yQdO,5<}OOQS,5<},5<}O$:XQdO1G4cOOQS-E:a-E:aO$)VQdO,5<|O$:`QdO,5<|O$:eQdO7+)|OOQS-E:`-E:`O$:oQdO7+)|O$)VQdO,5<ZP$)VQdO'#GcO$:wQdO1G2hO$)VQdO1G2hP$;VQdO'#GbO$;^QdO<<MhO$;hQdO1G1uO$;vQdO7+(SO8sQdO'#C}O8sQdO,59bO8sQdO,59bO8sQdO,59bO$<UQtO,5=`O8sQdO1G.|O0rQdO1G/XO0rQdO7+$pP$<iQdO'#GOO'vQdO'#GtO$<vQdO,59bO$<{QdO,59bO$=SQdO,59mO$=XQdO1G/UO1sQdO'#DRO8sQdO,59j",
      stateData: "$=r~O%cOS%^OSSOS%]PQ~OPdOVaOfoOhYOopOs!POvqO!PrO!Q{O!T!SO!U!RO!XZO!][O!h`O!r`O!s`O!t`O!{tO!}uO#PvO#RwO#TxO#XyO#ZzO#^|O#_|O#a}O#c!OO#l!QO#o!TO#s!UO#u!VO#z!WO#}hO$P!XO%oRO%pRO%tSO%uWO&Z]O&[]O&]]O&^]O&_]O&`]O&a]O&b]O&c^O&d^O&e^O&f^O&g^O&h^O&i^O&j^O~O%]!YO~OV!aO_!aOa!bOh!iO!X!kO!f!mO%j![O%k!]O%l!^O%m!_O%n!_O%o!`O%p!`O%q!aO%r!aO%s!aO~Ok%xXl%xXm%xXn%xXo%xXp%xXs%xXz%xX{%xX!x%xX#g%xX%[%xX%_%xX%z%xXg%xX!T%xX!U%xX%{%xX!W%xX![%xX!Q%xX#[%xXt%xX!m%xX~P%SOfoOhYO!XZO!][O!h`O!r`O!s`O!t`O%oRO%pRO%tSO%uWO&Z]O&[]O&]]O&^]O&_]O&`]O&a]O&b]O&c^O&d^O&e^O&f^O&g^O&h^O&i^O&j^O~Oz%wX{%wX#g%wX%[%wX%_%wX%z%wX~Ok!pOl!qOm!oOn!oOo!rOp!sOs!tO!x%wX~P)pOV!zOg!|Oo0cOv0qO!PrO~P'vOV#OOo0cOv0qO!W#PO~P'vOV#SOa#TOo0cOv0qO![#UO~P'vOQ#XO%`#XO%a#ZO~OQ#^OR#[O%`#^O%a#`O~OV%iX_%iXa%iXh%iXk%iXl%iXm%iXn%iXo%iXp%iXs%iXz%iX!X%iX!f%iX%j%iX%k%iX%l%iX%m%iX%n%iX%o%iX%p%iX%q%iX%r%iX%s%iXg%iX!T%iX!U%iX~O&Z]O&[]O&]]O&^]O&_]O&`]O&a]O&b]O&c^O&d^O&e^O&f^O&g^O&h^O&i^O&j^O{%iX!x%iX#g%iX%[%iX%_%iX%z%iX%{%iX!W%iX![%iX!Q%iX#[%iXt%iX!m%iX~P,eOz#dO{%hX!x%hX#g%hX%[%hX%_%hX%z%hX~Oo0cOv0qO~P'vO#g#gO%[#iO%_#iO~O%uWO~O!T#nO#u!VO#z!WO#}hO~OopO~P'vOV#sOa#tO%uWO{wP~OV#xOo0cOv0qO!Q#yO~P'vO{#{O!x$QO%z#|O#g!yX%[!yX%_!yX~OV#xOo0cOv0qO#g#SX%[#SX%_#SX~P'vOo0cOv0qO#g#WX%[#WX%_#WX~P'vOh$WO%uWO~O!f$YO!r$YO%uWO~OV$eO~P'vO!U$gO#s$hO#u$iO~O{$jO~OV$qO~P'vOS$sO%[$rO%c$tO~OV$}Oa$}Og%POo0cOv0qO~P'vOo0cOv0qO{%SO~P'vO&Y%UO~Oa!bOh!iO!X!kO!f!mOVba_bakbalbambanbaobapbasbazba{ba!xba#gba%[ba%_ba%jba%kba%lba%mba%nba%oba%pba%qba%rba%sba%zbagba!Tba!Uba%{ba!Wba![ba!Qba#[batba!mba~On%ZO~Oo%ZO~P'vOo0cO~P'vOk0eOl0fOm0dOn0dOo0mOp0nOs0rOg%wX!T%wX!U%wX%{%wX!W%wX![%wX!Q%wX#[%wX!m%wX~P)pO%{%]Og%vXz%vX!T%vX!U%vX!W%vX{%vX~Og%_Oz%`O!T%dO!U%cO~Og%_O~Oz%gO!T%dO!U%cO!W&SX~O!W%kO~Oz%lO{%nO!T%dO!U%cO![%}X~O![%rO~O![%sO~OQ#XO%`#XO%a%uO~OV%wOo0cOv0qO!PrO~P'vOQ#^OR#[O%`#^O%a%zO~OV!qa_!qaa!qah!qak!qal!qam!qan!qao!qap!qas!qaz!qa{!qa!X!qa!f!qa!x!qa#g!qa%[!qa%_!qa%j!qa%k!qa%l!qa%m!qa%n!qa%o!qa%p!qa%q!qa%r!qa%s!qa%z!qag!qa!T!qa!U!qa%{!qa!W!qa![!qa!Q!qa#[!qat!qa!m!qa~P#yOz%|O{%ha!x%ha#g%ha%[%ha%_%ha%z%ha~P%SOV&OOopOvqO{%ha!x%ha#g%ha%[%ha%_%ha%z%ha~P'vOz%|O{%ha!x%ha#g%ha%[%ha%_%ha%z%ha~OPdOVaOopOvqO!PrO!Q{O!{tO!}uO#PvO#RwO#TxO#XyO#ZzO#^|O#_|O#a}O#c!OO#g$zX%[$zX%_$zX~P'vO#g#gO%[&TO%_&TO~O!f&UOh&sX%[&sXz&sX#[&sX#g&sX%_&sX#Z&sXg&sX~Oh!iO%[&WO~Okealeameaneaoeapeaseazea{ea!xea#gea%[ea%_ea%zeagea!Tea!Uea%{ea!Wea![ea!Qea#[eatea!mea~P%SOsqazqa{qa#gqa%[qa%_qa%zqa~Ok!pOl!qOm!oOn!oOo!rOp!sO!xqa~PE`O%z&YOz%yX{%yX~O%uWOz%yX{%yX~Oz&]O{wX~O{&_O~Oz%lO#g%}X%[%}X%_%}Xg%}X{%}X![%}X!m%}X%z%}X~OV0lOo0cOv0qO!PrO~P'vO%z#|O#gUa%[Ua%_Ua~Oz&hO#g&PX%[&PX%_&PXn&PX~P%SOz&kO!Q&jO#g#Wa%[#Wa%_#Wa~Oz&lO#[&nO#g&rX%[&rX%_&rXg&rX~O!f$YO!r$YO#Z&qO%uWO~O#Z&qO~Oz&sO#g&tX%[&tX%_&tX~Oz&uO#g&pX%[&pX%_&pX{&pX~O!X&wO%z&xO~Oz&|On&wX~P%SOn'PO~OPdOVaOopOvqO!PrO!Q{O!{tO!}uO#PvO#RwO#TxO#XyO#ZzO#^|O#_|O#a}O#c!OO%['UO~P'vOt'YO#p'WO#q'XOP#naV#naf#nah#nao#nas#nav#na!P#na!Q#na!T#na!U#na!X#na!]#na!h#na!r#na!s#na!t#na!{#na!}#na#P#na#R#na#T#na#X#na#Z#na#^#na#_#na#a#na#c#na#l#na#o#na#s#na#u#na#z#na#}#na$P#na%X#na%o#na%p#na%t#na%u#na&Z#na&[#na&]#na&^#na&_#na&`#na&a#na&b#na&c#na&d#na&e#na&f#na&g#na&h#na&i#na&j#na%Z#na%_#na~Oz'ZO#[']O{&xX~Oh'_O!X&wO~Oh!iO{$jO!X&wO~O{'eO~P%SO%['hO~OS'iO%['hO~OV!aO_!aOa!bOh!iO!X!kO!f!mO%l!^O%m!_O%n!_O%o!`O%p!`O%q!aO%r!aO%s!aOkWilWimWinWioWipWisWizWi{Wi!xWi#gWi%[Wi%_Wi%jWi%zWigWi!TWi!UWi%{Wi!WWi![Wi!QWi#[WitWi!mWi~O%k!]O~P!#lO%kWi~P!#lOV!aO_!aOa!bOh!iO!X!kO!f!mO%o!`O%p!`O%q!aO%r!aO%s!aOkWilWimWinWioWipWisWizWi{Wi!xWi#gWi%[Wi%_Wi%jWi%kWi%lWi%zWigWi!TWi!UWi%{Wi!WWi![Wi!QWi#[WitWi!mWi~O%m!_O%n!_O~P!&gO%mWi%nWi~P!&gOa!bOh!iO!X!kO!f!mOkWilWimWinWioWipWisWizWi{Wi!xWi#gWi%[Wi%_Wi%jWi%kWi%lWi%mWi%nWi%oWi%pWi%zWigWi!TWi!UWi%{Wi!WWi![Wi!QWi#[WitWi!mWi~OV!aO_!aO%q!aO%r!aO%s!aO~P!)eOVWi_Wi%qWi%rWi%sWi~P!)eO!T%dO!U%cOg&VXz&VX~O%z'kO%{'kO~P,eOz'mOg&UX~Og'oO~Oz'pO{'rO!W&XX~Oo0cOv0qOz'pO{'sO!W&XX~P'vO!W'uO~Om!oOn!oOo!rOp!sOkjisjizji{ji!xji#gji%[ji%_ji%zji~Ol!qO~P!.WOlji~P!.WOk0eOl0fOm0dOn0dOo0mOp0nO~Ot'wO~P!/aOV'|Og'}Oo0cOv0qO~P'vOg'}Oz(OO~Og(QO~O!U(SO~Og(TOz(OO!T%dO!U%cO~P%SOk0eOl0fOm0dOn0dOo0mOp0nOgqa!Tqa!Uqa%{qa!Wqa![qa!Qqa#[qatqa!mqa~PE`OV'|Oo0cOv0qO!W&Sa~P'vOz(WO!W&Sa~O!W(XO~Oz(WO!T%dO!U%cO!W&Sa~P%SOV(]Oo0cOv0qO![%}a#g%}a%[%}a%_%}ag%}a{%}a!m%}a%z%}a~P'vOz(^O![%}a#g%}a%[%}a%_%}ag%}a{%}a!m%}a%z%}a~O![(aO~Oz(^O!T%dO!U%cO![%}a~P%SOz(dO!T%dO!U%cO![&Ta~P%SOz(gO{&lX![&lX!m&lX%z&lX~O{(kO![(mO!m(nO%z(jO~OV&OOopOvqO{%hi!x%hi#g%hi%[%hi%_%hi%z%hi~P'vOz(pO{%hi!x%hi#g%hi%[%hi%_%hi%z%hi~O!f&UOh&sa%[&saz&sa#[&sa#g&sa%_&sa#Z&sag&sa~O%[(uO~OV#sOa#tO%uWO~Oz&]O{wa~OopOvqO~P'vOz(^O#g%}a%[%}a%_%}ag%}a{%}a![%}a!m%}a%z%}a~P%SOz(zO#g%hX%[%hX%_%hX%z%hX~O%z#|O#gUi%[Ui%_Ui~O#g&Pa%[&Pa%_&Pan&Pa~P'vOz(}O#g&Pa%[&Pa%_&Pan&Pa~O%uWO#g&ra%[&ra%_&rag&ra~Oz)SO#g&ra%[&ra%_&rag&ra~Og)VO~OV)WOh$WO%uWO~O#Z)XO~O%uWO#g&ta%[&ta%_&ta~Oz)ZO#g&ta%[&ta%_&ta~Oo0cOv0qO#g&pa%[&pa%_&pa{&pa~P'vOz)^O#g&pa%[&pa%_&pa{&pa~OV)`Oa)`O%uWO~O%z)eO~Ot)hO#j)gOP#hiV#hif#hih#hio#his#hiv#hi!P#hi!Q#hi!T#hi!U#hi!X#hi!]#hi!h#hi!r#hi!s#hi!t#hi!{#hi!}#hi#P#hi#R#hi#T#hi#X#hi#Z#hi#^#hi#_#hi#a#hi#c#hi#l#hi#o#hi#s#hi#u#hi#z#hi#}#hi$P#hi%X#hi%o#hi%p#hi%t#hi%u#hi&Z#hi&[#hi&]#hi&^#hi&_#hi&`#hi&a#hi&b#hi&c#hi&d#hi&e#hi&f#hi&g#hi&h#hi&i#hi&j#hi%Z#hi%_#hi~Ot)iOP#kiV#kif#kih#kio#kis#kiv#ki!P#ki!Q#ki!T#ki!U#ki!X#ki!]#ki!h#ki!r#ki!s#ki!t#ki!{#ki!}#ki#P#ki#R#ki#T#ki#X#ki#Z#ki#^#ki#_#ki#a#ki#c#ki#l#ki#o#ki#s#ki#u#ki#z#ki#}#ki$P#ki%X#ki%o#ki%p#ki%t#ki%u#ki&Z#ki&[#ki&]#ki&^#ki&_#ki&`#ki&a#ki&b#ki&c#ki&d#ki&e#ki&f#ki&g#ki&h#ki&i#ki&j#ki%Z#ki%_#ki~OV)kOn&wa~P'vOz)lOn&wa~Oz)lOn&wa~P%SOn)pO~O%Y)tO~Ot)wO#p'WO#q)vOP#niV#nif#nih#nio#nis#niv#ni!P#ni!Q#ni!T#ni!U#ni!X#ni!]#ni!h#ni!r#ni!s#ni!t#ni!{#ni!}#ni#P#ni#R#ni#T#ni#X#ni#Z#ni#^#ni#_#ni#a#ni#c#ni#l#ni#o#ni#s#ni#u#ni#z#ni#}#ni$P#ni%X#ni%o#ni%p#ni%t#ni%u#ni&Z#ni&[#ni&]#ni&^#ni&_#ni&`#ni&a#ni&b#ni&c#ni&d#ni&e#ni&f#ni&g#ni&h#ni&i#ni&j#ni%Z#ni%_#ni~OV)zOo0cOv0qO{$jO~P'vOo0cOv0qO{&xa~P'vOz*OO{&xa~OV*SOa*TOg*WO%q*UO%uWO~O{$jO&{*YO~Oh'_O~Oh!iO{$jO~O%[*_O~O%[*aO~OV$}Oa$}Oo0cOv0qOg&Ua~P'vOz*dOg&Ua~Oo0cOv0qO{*gO!W&Xa~P'vOz*hO!W&Xa~Oo0cOv0qOz*hO{*kO!W&Xa~P'vOo0cOv0qOz*hO!W&Xa~P'vOz*hO{*kO!W&Xa~Om0dOn0dOo0mOp0nOgjikjisjizji!Tji!Uji%{ji!Wji{ji![ji#gji%[ji%_ji!Qji#[jitji!mji%zji~Ol0fO~P!N_Olji~P!N_OV'|Og*pOo0cOv0qO~P'vOn*rO~Og*pOz*tO~Og*uO~OV'|Oo0cOv0qO!W&Si~P'vOz*vO!W&Si~O!W*wO~OV(]Oo0cOv0qO![%}i#g%}i%[%}i%_%}ig%}i{%}i!m%}i%z%}i~P'vOz*zO!T%dO!U%cO![&Ti~Oz*}O![%}i#g%}i%[%}i%_%}ig%}i{%}i!m%}i%z%}i~O![+OO~Oa+QOo0cOv0qO![&Ti~P'vOz*zO![&Ti~O![+SO~OV+UOo0cOv0qO{&la![&la!m&la%z&la~P'vOz+VO{&la![&la!m&la%z&la~O!]+YO&n+[O![!nX~O![+^O~O{(kO![+_O~O{(kO![+_O!m+`O~OV&OOopOvqO{%hq!x%hq#g%hq%[%hq%_%hq%z%hq~P'vOz$ri{$ri!x$ri#g$ri%[$ri%_$ri%z$ri~P%SOV&OOopOvqO~P'vOV&OOo0cOv0qO#g%ha%[%ha%_%ha%z%ha~P'vOz+aO#g%ha%[%ha%_%ha%z%ha~Oz$ia#g$ia%[$ia%_$ian$ia~P%SO#g&Pi%[&Pi%_&Pin&Pi~P'vOz+dO#g#Wq%[#Wq%_#Wq~O#[+eOz$va#g$va%[$va%_$vag$va~O%uWO#g&ri%[&ri%_&rig&ri~Oz+gO#g&ri%[&ri%_&rig&ri~OV+iOh$WO%uWO~O%uWO#g&ti%[&ti%_&ti~Oo0cOv0qO#g&pi%[&pi%_&pi{&pi~P'vO{#{Oz#eX!W#eX~Oz+mO!W&uX~O!W+oO~Ot+rO#j)gOP#hqV#hqf#hqh#hqo#hqs#hqv#hq!P#hq!Q#hq!T#hq!U#hq!X#hq!]#hq!h#hq!r#hq!s#hq!t#hq!{#hq!}#hq#P#hq#R#hq#T#hq#X#hq#Z#hq#^#hq#_#hq#a#hq#c#hq#l#hq#o#hq#s#hq#u#hq#z#hq#}#hq$P#hq%X#hq%o#hq%p#hq%t#hq%u#hq&Z#hq&[#hq&]#hq&^#hq&_#hq&`#hq&a#hq&b#hq&c#hq&d#hq&e#hq&f#hq&g#hq&h#hq&i#hq&j#hq%Z#hq%_#hq~On$|az$|a~P%SOV)kOn&wi~P'vOz+yOn&wi~Oz,TO{$jO#[,TO~O#q,VOP#nqV#nqf#nqh#nqo#nqs#nqv#nq!P#nq!Q#nq!T#nq!U#nq!X#nq!]#nq!h#nq!r#nq!s#nq!t#nq!{#nq!}#nq#P#nq#R#nq#T#nq#X#nq#Z#nq#^#nq#_#nq#a#nq#c#nq#l#nq#o#nq#s#nq#u#nq#z#nq#}#nq$P#nq%X#nq%o#nq%p#nq%t#nq%u#nq&Z#nq&[#nq&]#nq&^#nq&_#nq&`#nq&a#nq&b#nq&c#nq&d#nq&e#nq&f#nq&g#nq&h#nq&i#nq&j#nq%Z#nq%_#nq~O#[,WOz%Oa{%Oa~Oo0cOv0qO{&xi~P'vOz,YO{&xi~O{#{O%z,[Og&zXz&zX~O%uWOg&zXz&zX~Oz,`Og&yX~Og,bO~O%Y,eO~O!T%dO!U%cOg&Viz&Vi~OV$}Oa$}Oo0cOv0qOg&Ui~P'vO{,hOz$la!W$la~Oo0cOv0qO{,iOz$la!W$la~P'vOo0cOv0qO{*gO!W&Xi~P'vOz,lO!W&Xi~Oo0cOv0qOz,lO!W&Xi~P'vOz,lO{,oO!W&Xi~Og$hiz$hi!W$hi~P%SOV'|Oo0cOv0qO~P'vOn,qO~OV'|Og,rOo0cOv0qO~P'vOV'|Oo0cOv0qO!W&Sq~P'vOz$gi![$gi#g$gi%[$gi%_$gig$gi{$gi!m$gi%z$gi~P%SOV(]Oo0cOv0qO~P'vOa+QOo0cOv0qO![&Tq~P'vOz,sO![&Tq~O![,tO~OV(]Oo0cOv0qO![%}q#g%}q%[%}q%_%}qg%}q{%}q!m%}q%z%}q~P'vO{,uO~OV+UOo0cOv0qO{&li![&li!m&li%z&li~P'vOz,zO{&li![&li!m&li%z&li~O!]+YO&n+[O![!na~O{(kO![,}O~OV&OOo0cOv0qO#g%hi%[%hi%_%hi%z%hi~P'vOz-OO#g%hi%[%hi%_%hi%z%hi~O%uWO#g&rq%[&rq%_&rqg&rq~Oz-RO#g&rq%[&rq%_&rqg&rq~OV)`Oa)`O%uWO!W&ua~Oz-TO!W&ua~On$|iz$|i~P%SOV)kO~P'vOV)kOn&wq~P'vOt-XOP#myV#myf#myh#myo#mys#myv#my!P#my!Q#my!T#my!U#my!X#my!]#my!h#my!r#my!s#my!t#my!{#my!}#my#P#my#R#my#T#my#X#my#Z#my#^#my#_#my#a#my#c#my#l#my#o#my#s#my#u#my#z#my#}#my$P#my%X#my%o#my%p#my%t#my%u#my&Z#my&[#my&]#my&^#my&_#my&`#my&a#my&b#my&c#my&d#my&e#my&f#my&g#my&h#my&i#my&j#my%Z#my%_#my~O%Z-]O%_-]O~P`O#q-^OP#nyV#nyf#nyh#nyo#nys#nyv#ny!P#ny!Q#ny!T#ny!U#ny!X#ny!]#ny!h#ny!r#ny!s#ny!t#ny!{#ny!}#ny#P#ny#R#ny#T#ny#X#ny#Z#ny#^#ny#_#ny#a#ny#c#ny#l#ny#o#ny#s#ny#u#ny#z#ny#}#ny$P#ny%X#ny%o#ny%p#ny%t#ny%u#ny&Z#ny&[#ny&]#ny&^#ny&_#ny&`#ny&a#ny&b#ny&c#ny&d#ny&e#ny&f#ny&g#ny&h#ny&i#ny&j#ny%Z#ny%_#ny~Oz-aO{$jO#[-aO~Oo0cOv0qO{&xq~P'vOz-dO{&xq~O%z,[Og&zaz&za~OV*SOa*TO%q*UO%uWOg&ya~Oz-hOg&ya~O$S-lO~OV$}Oa$}Oo0cOv0qO~P'vOo0cOv0qO{-mOz$li!W$li~P'vOo0cOv0qOz$li!W$li~P'vO{-mOz$li!W$li~Oo0cOv0qO{*gO~P'vOo0cOv0qO{*gO!W&Xq~P'vOz-pO!W&Xq~Oo0cOv0qOz-pO!W&Xq~P'vOs-sO!T%dO!U%cOg&Oq!W&Oq![&Oqz&Oq~P!/aOa+QOo0cOv0qO![&Ty~P'vOz$ji![$ji~P%SOa+QOo0cOv0qO~P'vOV+UOo0cOv0qO~P'vOV+UOo0cOv0qO{&lq![&lq!m&lq%z&lq~P'vO{(kO![-xO!m-yO%z-wO~OV&OOo0cOv0qO#g%hq%[%hq%_%hq%z%hq~P'vO%uWO#g&ry%[&ry%_&ryg&ry~OV)`Oa)`O%uWO!W&ui~Ot-}OP#m!RV#m!Rf#m!Rh#m!Ro#m!Rs#m!Rv#m!R!P#m!R!Q#m!R!T#m!R!U#m!R!X#m!R!]#m!R!h#m!R!r#m!R!s#m!R!t#m!R!{#m!R!}#m!R#P#m!R#R#m!R#T#m!R#X#m!R#Z#m!R#^#m!R#_#m!R#a#m!R#c#m!R#l#m!R#o#m!R#s#m!R#u#m!R#z#m!R#}#m!R$P#m!R%X#m!R%o#m!R%p#m!R%t#m!R%u#m!R&Z#m!R&[#m!R&]#m!R&^#m!R&_#m!R&`#m!R&a#m!R&b#m!R&c#m!R&d#m!R&e#m!R&f#m!R&g#m!R&h#m!R&i#m!R&j#m!R%Z#m!R%_#m!R~Oo0cOv0qO{&xy~P'vOV*SOa*TO%q*UO%uWOg&yi~O$S-lO%Z.VO%_.VO~OV.aOh._O!X.^O!].`O!h.YO!s.[O!t.[O%p.XO%uWO&Z]O&[]O&]]O&^]O&_]O&`]O&a]O&b]O~Oo0cOv0qOz$lq!W$lq~P'vO{.fOz$lq!W$lq~Oo0cOv0qO{*gO!W&Xy~P'vOz.gO!W&Xy~Oo0cOv.kO~P'vOs-sO!T%dO!U%cOg&Oy!W&Oy![&Oyz&Oy~P!/aO{(kO![.nO~O{(kO![.nO!m.oO~OV*SOa*TO%q*UO%uWO~Oh.tO!f.rOz$TX#[$TX%j$TXg$TX~Os$TX{$TX!W$TX![$TX~P$,yO%o.vO%p.vOs$UXz$UX{$UX#[$UX%j$UX!W$UXg$UX![$UX~O!h.xO~Oz.|O#[/OO%j.yOs&|X{&|X!W&|Xg&|X~Oa/RO~P$)cOh.tOs&}Xz&}X{&}X#[&}X%j&}X!W&}Xg&}X![&}X~Os/VO{$jO~Oo0cOv0qOz$ly!W$ly~P'vOo0cOv0qO{*gO!W&X!R~P'vOz/ZO!W&X!R~Og&RXs&RX!T&RX!U&RX!W&RX![&RXz&RX~P!/aOs-sO!T%dO!U%cOg&Qa!W&Qa![&Qaz&Qa~O{(kO![/^O~O!f.rOh$[as$[az$[a{$[a#[$[a%j$[a!W$[ag$[a![$[a~O!h/eO~O%o.vO%p.vOs$Uaz$Ua{$Ua#[$Ua%j$Ua!W$Uag$Ua![$Ua~O%j.yOs$Yaz$Ya{$Ya#[$Ya!W$Yag$Ya![$Ya~Os&|a{&|a!W&|ag&|a~P$)VOz/jOs&|a{&|a!W&|ag&|a~O!W/mO~Og/mO~O{/oO~O![/pO~Oo0cOv0qO{*gO!W&X!Z~P'vO{/sO~O%z/tO~P$,yOz/uO#[/OO%j.yOg'PX~Oz/uOg'PX~Og/wO~O!h/xO~O#[/OOs%Saz%Sa{%Sa%j%Sa!W%Sag%Sa![%Sa~O#[/OO%j.yOs%Waz%Wa{%Wa!W%Wag%Wa~Os&|i{&|i!W&|ig&|i~P$)VOz/zO#[/OO%j.yO!['Oa~O{$da~P%SOg'Pa~P$)VOz0SOg'Pa~Oa0UO!['Oi~P$)cOz0WO!['Oi~Oz0WO#[/OO%j.yO!['Oi~O#[/OO%j.yOg$biz$bi~O%z0ZO~P$,yO#[/OO%j.yOg%Vaz%Va~Og'Pi~P$)VO{0^O~Oa0UO!['Oq~P$)cOz0`O!['Oq~O#[/OO%j.yOz%Ui![%Ui~Oa0UO~P$)cOa0UO!['Oy~P$)cO#[/OO%j.yOg$ciz$ci~O#[/OO%j.yOz%Uq![%Uq~Oz+aO#g%ha%[%ha%_%ha%z%ha~P%SOV&OOo0cOv0qO~P'vOn0hO~Oo0hO~P'vO{0iO~Ot0jO~P!/aO&]&Z&j&h&i&g&f&d&e&c&b&`&a&_&^&[%u~",
      goto: "!=l'QPPPPPP'RP'Z*s+]+v,b,}-kP.YP'Z.y.y'ZPPP'Z2cPPPPPP2c5VPP5VP7g7p=xPP={>m>pPP'Z'ZPP?PPP'Z'ZPP'Z'Z'Z'Z'Z?T?}'ZP@QP@WD_G{HPPHSH^Hb'ZPPPHeHn'RP'R'RP'RP'RP'RP'RP'R'R'RP'RPP'RPP'RP'RPHtIQIYPIaIgPIaPIaIaPPPIaPKuPLOLYL`KuPIaLiPIaPLpLvPLzM`M}NhLzLzNnN{LzLzLzLz! a! g! j! o! r! |!!S!!`!!r!!x!#S!#Y!#v!#|!$S!$^!$d!$j!$|!%W!%^!%d!%n!%t!%z!&Q!&W!&^!&h!&n!&x!'O!'X!'_!'n!'v!(Q!(XPPPPPPPPPPP!(_!(b!(h!(q!({!)WPPPPPPPPPPPP!-z!/`!3`!6pPP!6x!7X!7b!8Z!8Q!8d!8j!8m!8p!8s!8{!9lPPPPPPPPPPPPPPPPP!9o!9s!9yP!:_!:c!:o!:x!;U!;l!;o!;r!;x!<O!<U!<XP!<a!<j!=f!=i]eOn#g$j)t,P'}`OTYZ[adnoprtxy}!P!Q!R!U!X!c!d!e!f!g!h!i!k!o!p!q!s!t!z#O#S#T#[#d#g#x#y#{#}$Q$e$g$h$j$q$}%S%Z%^%`%c%g%l%n%w%|&O&Z&_&h&j&k&u&x&|'P'W'Z'l'm'p'r's'w'|(O(S(W(](^(d(g(p(r(z(})^)e)g)k)l)p)t)z*O*Y*d*g*h*k*q*r*t*v*y*z*}+Q+U+V+Y+a+c+d+k+x+y,P,X,Y,],g,h,i,k,l,o,q,s,u,w,y,z-O-d-f-m-p-s.f.g/V/Z/s0c0d0e0f0h0i0j0k0l0n0r}!cQ#c#p$R$d$p%e%j%p%q&`'O'g(q(|)j*o*x+w,v/q0g!P!dQ#c#p$R$d$p$u%e%j%p%q&`'O'g(q(|)j*o*x+w,v/q0g!R!eQ#c#p$R$d$p$u$v%e%j%p%q&`'O'g(q(|)j*o*x+w,v/q0g!T!fQ#c#p$R$d$p$u$v$w%e%j%p%q&`'O'g(q(|)j*o*x+w,v/q0g!V!gQ#c#p$R$d$p$u$v$w$x%e%j%p%q&`'O'g(q(|)j*o*x+w,v/q0g!X!hQ#c#p$R$d$p$u$v$w$x$y%e%j%p%q&`'O'g(q(|)j*o*x+w,v/q0g!]!hQ!n#c#p$R$d$p$u$v$w$x$y$z%e%j%p%q&`'O'g(q(|)j*o*x+w,v/q0g'}TOTYZ[adnoprtxy}!P!Q!R!U!X!c!d!e!f!g!h!i!k!o!p!q!s!t!z#O#S#T#[#d#g#x#y#{#}$Q$e$g$h$j$q$}%S%Z%^%`%c%g%l%n%w%|&O&Z&_&h&j&k&u&x&|'P'W'Z'l'm'p'r's'w'|(O(S(W(](^(d(g(p(r(z(})^)e)g)k)l)p)t)z*O*Y*d*g*h*k*q*r*t*v*y*z*}+Q+U+V+Y+a+c+d+k+x+y,P,X,Y,],g,h,i,k,l,o,q,s,u,w,y,z-O-d-f-m-p-s.f.g/V/Z/s0c0d0e0f0h0i0j0k0l0n0r&cVOYZ[dnprxy}!P!Q!U!i!k!o!p!q!s!t#[#d#g#y#{#}$Q$h$j$}%S%Z%^%`%g%l%n%w%|&Z&_&j&k&u&x'P'W'Z'l'm'p'r's'w(O(W(^(d(g(p(r(z)^)e)g)p)t)z*O*Y*d*g*h*k*q*r*t*v*y*z*}+U+V+Y+a+d+k,P,X,Y,],g,h,i,k,l,o,q,s,u,w,y,z-O-d-f-m-p-s.f.g/Z/s0c0d0e0f0h0i0j0k0n0r%mXOYZ[dnrxy}!P!Q!U!i!k#[#d#g#y#{#}$Q$h$j$}%S%^%`%g%l%n%w%|&Z&_&j&k&u&x'P'W'Z'l'm'p'r's'w(O(W(^(d(g(p(r(z)^)e)g)p)t)z*O*Y*d*g*h*k*q*t*v*y*z*}+U+V+Y+a+d+k,P,X,Y,],g,h,i,k,l,o,s,u,w,y,z-O-d-f-m-p.f.g/Z0i0j0kQ#vqQ/[.kR0o0q't`OTYZ[adnoprtxy}!P!Q!R!U!X!c!d!e!f!g!h!k!o!p!q!s!t!z#O#S#T#[#d#g#x#y#{#}$Q$e$g$h$j$q$}%S%Z%^%`%c%g%l%n%w%|&O&Z&_&h&j&k&u&x&|'P'W'Z'l'p'r's'w'|(O(S(W(](^(d(g(p(r(z(})^)e)g)k)l)p)t)z*O*Y*g*h*k*q*r*t*v*y*z*}+Q+U+V+Y+a+c+d+k+x+y,P,X,Y,],h,i,k,l,o,q,s,u,w,y,z-O-d-f-m-p-s.f.g/V/Z/s0c0d0e0f0h0i0j0k0l0n0rh#jhz{$W$Z&l&q)S)X+f+g-RW#rq&].k0qQ$]|Q$a!OQ$n!VQ$o!WW$|!i'm*d,gS&[#s#tQ'S$iQ(s&UQ)U&nU)Y&s)Z+jW)a&w+m-T-{Q*Q']W*R'_,`-h.TQ+l)`S,_*S*TQ-Q+eQ-_,TQ-c,WQ.R-al.W-l.^._.a.z.|/R/j/o/t/y0U0Z0^Q/S.`Q/a.tQ/l/OU0P/u0S0[X0V/z0W0_0`R&Z#r!_!wYZ!P!Q!k%S%`%g'p'r's(O(W)g*g*h*k*q*t*v,h,i,k,l,o-m-p.f.g/ZR%^!vQ!{YQ%x#[Q&d#}Q&g$QR,{+YT.j-s/s![!jQ!n#c#p$R$d$p$u$v$w$x$y$z%e%j%p%q&`'O'g(q(|)j*o*x+w,v/q0gQ&X#kQ'c$oR*^'dR'l$|Q%V!mR/_.r'|_OTYZ[adnoprtxy}!P!Q!R!U!X!c!d!e!f!g!h!i!k!o!p!q!s!t!z#O#S#T#[#d#g#x#y#{#}$Q$e$g$h$j$q$}%S%Z%^%`%c%g%l%n%w%|&O&Z&_&h&j&k&u&x&|'P'W'Z'l'm'p'r's'w'|(O(S(W(](^(d(g(p(r(z(})^)e)g)k)l)p)t)z*O*Y*d*g*h*k*q*r*t*v*y*z*}+Q+U+V+Y+a+c+d+k+x+y,P,X,Y,],g,h,i,k,l,o,q,s,u,w,y,z-O-d-f-m-p-s.f.g/V/Z/s0c0d0e0f0h0i0j0k0l0n0rS#a_#b!P.[-l.^._.`.a.t.z.|/R/j/o/t/u/y/z0S0U0W0Z0[0^0_0`'|_OTYZ[adnoprtxy}!P!Q!R!U!X!c!d!e!f!g!h!i!k!o!p!q!s!t!z#O#S#T#[#d#g#x#y#{#}$Q$e$g$h$j$q$}%S%Z%^%`%c%g%l%n%w%|&O&Z&_&h&j&k&u&x&|'P'W'Z'l'm'p'r's'w'|(O(S(W(](^(d(g(p(r(z(})^)e)g)k)l)p)t)z*O*Y*d*g*h*k*q*r*t*v*y*z*}+Q+U+V+Y+a+c+d+k+x+y,P,X,Y,],g,h,i,k,l,o,q,s,u,w,y,z-O-d-f-m-p-s.f.g/V/Z/s0c0d0e0f0h0i0j0k0l0n0rT#a_#bT#^^#_R(o%xa(l%x(n(o+`,{-y-z.oT+[(k+]R-z,{Q$PsQ+l)aR,^*RX#}s$O$P&fQ&y$aQ'a$nQ'd$oR)s'SQ)b&wV-S+m-T-{ZgOn$j)t,PXkOn)t,PQ$k!TQ&z$bQ&{$cQ'^$mQ'b$oQ)q'RQ)x'WQ){'XQ)|'YQ*Z'`S*]'c'dQ+s)gQ+u)hQ+v)iQ+z)oS+|)r*[Q,Q)vQ,R)wS,S)y)zQ,d*^Q-V+rQ-W+tQ-Y+{S-Z+},OQ-`,UQ-b,VQ-|-XQ.O-[Q.P-^Q.Q-_Q.p-}Q.q.RQ/W.dR/r/XWkOn)t,PR#mjQ'`$nS)r'S'aR,O)sQ,]*RR-f,^Q*['`Q+})rR-[,OZiOjn)t,PQ'f$pR*`'gT-j,e-ku.c-l.^._.a.t.z.|/R/j/o/t/u/y0S0U0Z0[0^t.c-l.^._.a.t.z.|/R/j/o/t/u/y0S0U0Z0[0^Q/S.`X0V/z0W0_0`!P.Z-l.^._.`.a.t.z.|/R/j/o/t/u/y/z0S0U0W0Z0[0^0_0`Q.w.YR/f.xg.z.].{/b/i/n/|0O0Q0]0a0bu.b-l.^._.a.t.z.|/R/j/o/t/u/y0S0U0Z0[0^X.u.W.b/a0PR/c.tV0R/u0S0[R/X.dQnOS#on,PR,P)tQ&^#uR(x&^S%m#R#wS(_%m(bT(b%p&`Q%a!yQ%h!}W(P%a%h(U(YQ(U%eR(Y%jQ&i$RR)O&iQ(e%qQ*{(`T+R(e*{Q'n%OR*e'nS'q%R%SY*i'q*j,m-q.hU*j'r's'tU,m*k*l*mS-q,n,oR.h-rQ#Y]R%t#YQ#_^R%y#_Q(h%vS+W(h+XR+X(iQ+](kR,|+]Q#b_R%{#bQ#ebQ%}#cW&Q#e%}({+bQ({&cR+b0gQ$OsS&e$O&fR&f$PQ&v$_R)_&vQ&V#jR(t&VQ&m$VS)T&m+hR+h)UQ$Z{R&p$ZQ&t$]R)[&tQ+n)bR-U+nQ#hfR&S#hQ)f&zR+q)fQ&}$dS)m&})nR)n'OQ'V$kR)u'VQ'[$lS*P'[,ZR,Z*QQ,a*VR-i,aWjOn)t,PR#ljQ-k,eR.U-kd.{.]/b/i/n/|0O0Q0]0a0bR/h.{U.s.W/a0PR/`.sQ/{/nS0X/{0YR0Y/|S/v/b/cR0T/vQ.}.]R/k.}R!ZPXmOn)t,PWlOn)t,PR'T$jYfOn$j)t,PR&R#g[sOn#g$j)t,PR&d#}&bQOYZ[dnprxy}!P!Q!U!i!k!o!p!q!s!t#[#d#g#y#{#}$Q$h$j$}%S%Z%^%`%g%l%n%w%|&Z&_&j&k&u&x'P'W'Z'l'm'p'r's'w(O(W(^(d(g(p(r(z)^)e)g)p)t)z*O*Y*d*g*h*k*q*r*t*v*y*z*}+U+V+Y+a+d+k,P,X,Y,],g,h,i,k,l,o,q,s,u,w,y,z-O-d-f-m-p-s.f.g/Z/s0c0d0e0f0h0i0j0k0n0rQ!nTQ#caQ#poU$Rt%c(SS$d!R$gQ$p!XQ$u!cQ$v!dQ$w!eQ$x!fQ$y!gQ$z!hQ%e!zQ%j#OQ%p#SQ%q#TQ&`#xQ'O$eQ'g$qQ(q&OU(|&h(}+cW)j&|)l+x+yQ*o'|Q*x(]Q+w)kQ,v+QQ/q/VR0g0lQ!yYQ!}ZQ$b!PQ$c!QQ%R!kQ't%S^'{%`%g(O(W*q*t*v^*f'p*h,k,l-p.g/ZQ*l'rQ*m'sQ+t)gQ,j*gQ,n*kQ-n,hQ-o,iQ-r,oQ.e-mR/Y.f[bOn#g$j)t,P!^!vYZ!P!Q!k%S%`%g'p'r's(O(W)g*g*h*k*q*t*v,h,i,k,l,o-m-p.f.g/ZQ#R[Q#fdS#wrxQ$UyW$_}$Q'P)pS$l!U$hW${!i'm*d,gS%v#[+Y`&P#d%|(p(r(z+a-O0kQ&a#yQ&b#{Q&c#}Q'j$}Q'z%^W([%l(^*y*}Q(`%nQ(i%wQ(v&ZS(y&_0iQ)P&jQ)Q&kU)]&u)^+kQ)d&xQ)y'WY)}'Z*O,X,Y-dQ*b'lS*n'w0jW+P(d*z,s,wW+T(g+V,y,zQ+p)eQ,U)zQ,c*YQ,x+UQ-P+dQ-e,]Q-v,uR.S-fhUOn#d#g$j%|&_'w(p(r)t,P%S!uYZ[drxy}!P!Q!U!i!k#[#y#{#}$Q$h$}%S%^%`%g%l%n%w&Z&j&k&u&x'P'W'Z'l'm'p'r's(O(W(^(d(g(z)^)e)g)p)z*O*Y*d*g*h*k*q*t*v*y*z*}+U+V+Y+a+d+k,X,Y,],g,h,i,k,l,o,s,u,w,y,z-O-d-f-m-p.f.g/Z0i0j0kQ#qpW%W!o!s0d0nQ%X!pQ%Y!qQ%[!tQ%f0cS'v%Z0hQ'x0eQ'y0fQ,p*rQ-u,qS.i-s/sR0p0rU#uq.k0qR(w&][cOn#g$j)t,PZ!xY#[#}$Q+YQ#W[Q#zrR$TxQ%b!yQ%i!}Q%o#RQ'j${Q(V%eQ(Z%jQ(c%pQ(f%qQ*|(`Q,f*bQ-t,pQ.m-uR/].lQ$StQ(R%cR*s(SQ.l-sR/}/sR#QZR#V[R%Q!iQ%O!iV*c'm*d,g!]!lQ!n#c#p$R$d$p$u$v$w$x$y$z%e%j%p%q&`'O'g(q(|)j*o*x+w,v/q0gR%T!kT#]^#_Q%x#[R,{+YQ(m%xS+_(n(oQ,}+`Q-x,{S.n-y-zR/^.oT+Z(k+]Q$`}Q&g$QQ)o'PR+{)pQ$XzQ)W&qR+i)XQ$XzQ&o$WQ)W&qR+i)XQ#khW$Vz$W&q)XQ$[{Q&r$ZZ)R&l)S+f+g-RR$^|R)c&wXlOn)t,PQ$f!RR'Q$gQ$m!UR'R$hR*X'_Q*V'_V-g,`-h.TQ.d-lQ/P.^R/Q._U.]-l.^._Q/U.aQ/b.tQ/g.zU/i.|/j/yQ/n/RQ/|/oQ0O/tU0Q/u0S0[Q0]0UQ0a0ZR0b0^R/T.`R/d.t",
      nodeNames: "⚠ print Escape { Comment Script AssignStatement * BinaryExpression BitOp BitOp BitOp BitOp ArithOp ArithOp @ ArithOp ** UnaryExpression ArithOp BitOp AwaitExpression await ) ( ParenthesizedExpression BinaryExpression or and CompareOp in not is UnaryExpression ConditionalExpression if else LambdaExpression lambda ParamList VariableName AssignOp , : NamedExpression AssignOp YieldExpression yield from TupleExpression ComprehensionExpression async for LambdaExpression ] [ ArrayExpression ArrayComprehensionExpression } { DictionaryExpression DictionaryComprehensionExpression SetExpression SetComprehensionExpression CallExpression ArgList AssignOp MemberExpression . PropertyName Number String FormatString FormatReplacement FormatSelfDoc FormatConversion FormatSpec FormatReplacement FormatSelfDoc ContinuedString Ellipsis None Boolean TypeDef AssignOp UpdateStatement UpdateOp ExpressionStatement DeleteStatement del PassStatement pass BreakStatement break ContinueStatement continue ReturnStatement return YieldStatement PrintStatement RaiseStatement raise ImportStatement import as ScopeStatement global nonlocal AssertStatement assert TypeDefinition type TypeParamList TypeParam StatementGroup ; IfStatement Body elif WhileStatement while ForStatement TryStatement try except finally WithStatement with FunctionDefinition def ParamList AssignOp TypeDef ClassDefinition class DecoratedStatement Decorator At MatchStatement match MatchBody MatchClause case CapturePattern LiteralPattern ArithOp ArithOp AsPattern OrPattern LogicOp AttributePattern SequencePattern MappingPattern StarPattern ClassPattern PatternArgList KeywordPattern KeywordPattern Guard",
      maxTerm: 277,
      context: trackIndent,
      nodeProps: [
        ["isolate", -5,4,71,72,73,77,""],
        ["group", -15,6,85,87,88,90,92,94,96,98,99,100,102,105,108,110,"Statement Statement",-22,8,18,21,25,40,49,50,56,57,60,61,62,63,64,67,70,71,72,79,80,81,82,"Expression",-10,114,116,119,121,122,126,128,133,135,138,"Statement",-9,143,144,147,148,150,151,152,153,154,"Pattern"],
        ["openedBy", 23,"(",54,"[",58,"{"],
        ["closedBy", 24,")",55,"]",59,"}"]
      ],
      propSources: [pythonHighlighting],
      skippedNodes: [0,4],
      repeatNodeCount: 34,
      tokenData: "!2|~R!`OX%TXY%oY[%T[]%o]p%Tpq%oqr'ars)Yst*xtu%Tuv,dvw-hwx.Uxy/tyz0[z{0r{|2S|}2p}!O3W!O!P4_!P!Q:Z!Q!R;k!R![>_![!]Do!]!^Es!^!_FZ!_!`Gk!`!aHX!a!b%T!b!cIf!c!dJU!d!eK^!e!hJU!h!i!#f!i!tJU!t!u!,|!u!wJU!w!x!.t!x!}JU!}#O!0S#O#P&o#P#Q!0j#Q#R!1Q#R#SJU#S#T%T#T#UJU#U#VK^#V#YJU#Y#Z!#f#Z#fJU#f#g!,|#g#iJU#i#j!.t#j#oJU#o#p!1n#p#q!1s#q#r!2a#r#s!2f#s$g%T$g;'SJU;'S;=`KW<%lOJU`%YT&n`O#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%T`%lP;=`<%l%To%v]&n`%c_OX%TXY%oY[%T[]%o]p%Tpq%oq#O%T#O#P&o#P#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%To&tX&n`OY%TYZ%oZ]%T]^%o^#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tc'f[&n`O!_%T!_!`([!`#T%T#T#U(r#U#f%T#f#g(r#g#h(r#h#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tc(cTmR&n`O#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tc(yT!mR&n`O#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tk)aV&n`&[ZOr%Trs)vs#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tk){V&n`Or%Trs*bs#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tk*iT&n`&^ZO#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%To+PZS_&n`OY*xYZ%TZ]*x]^%T^#o*x#o#p+r#p#q*x#q#r+r#r;'S*x;'S;=`,^<%lO*x_+wTS_OY+rZ]+r^;'S+r;'S;=`,W<%lO+r_,ZP;=`<%l+ro,aP;=`<%l*xj,kV%rQ&n`O!_%T!_!`-Q!`#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tj-XT!xY&n`O#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tj-oV%lQ&n`O!_%T!_!`-Q!`#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tk.]V&n`&ZZOw%Twx.rx#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tk.wV&n`Ow%Twx/^x#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tk/eT&n`&]ZO#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tk/{ThZ&n`O#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tc0cTgR&n`O#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tk0yXVZ&n`Oz%Tz{1f{!_%T!_!`-Q!`#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tk1mVaR&n`O!_%T!_!`-Q!`#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tk2ZV%oZ&n`O!_%T!_!`-Q!`#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tc2wTzR&n`O#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%To3_W%pZ&n`O!_%T!_!`-Q!`!a3w!a#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Td4OT&{S&n`O#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tk4fX!fQ&n`O!O%T!O!P5R!P!Q%T!Q![6T![#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tk5WV&n`O!O%T!O!P5m!P#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tk5tT!rZ&n`O#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Ti6[a!hX&n`O!Q%T!Q![6T![!g%T!g!h7a!h!l%T!l!m9s!m#R%T#R#S6T#S#X%T#X#Y7a#Y#^%T#^#_9s#_#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Ti7fZ&n`O{%T{|8X|}%T}!O8X!O!Q%T!Q![8s![#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Ti8^V&n`O!Q%T!Q![8s![#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Ti8z]!hX&n`O!Q%T!Q![8s![!l%T!l!m9s!m#R%T#R#S8s#S#^%T#^#_9s#_#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Ti9zT!hX&n`O#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tk:bX%qR&n`O!P%T!P!Q:}!Q!_%T!_!`-Q!`#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tj;UV%sQ&n`O!_%T!_!`-Q!`#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Ti;ro!hX&n`O!O%T!O!P=s!P!Q%T!Q![>_![!d%T!d!e?q!e!g%T!g!h7a!h!l%T!l!m9s!m!q%T!q!rA]!r!z%T!z!{Bq!{#R%T#R#S>_#S#U%T#U#V?q#V#X%T#X#Y7a#Y#^%T#^#_9s#_#c%T#c#dA]#d#l%T#l#mBq#m#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Ti=xV&n`O!Q%T!Q![6T![#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Ti>fc!hX&n`O!O%T!O!P=s!P!Q%T!Q![>_![!g%T!g!h7a!h!l%T!l!m9s!m#R%T#R#S>_#S#X%T#X#Y7a#Y#^%T#^#_9s#_#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Ti?vY&n`O!Q%T!Q!R@f!R!S@f!S#R%T#R#S@f#S#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Ti@mY!hX&n`O!Q%T!Q!R@f!R!S@f!S#R%T#R#S@f#S#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%TiAbX&n`O!Q%T!Q!YA}!Y#R%T#R#SA}#S#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%TiBUX!hX&n`O!Q%T!Q!YA}!Y#R%T#R#SA}#S#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%TiBv]&n`O!Q%T!Q![Co![!c%T!c!iCo!i#R%T#R#SCo#S#T%T#T#ZCo#Z#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%TiCv]!hX&n`O!Q%T!Q![Co![!c%T!c!iCo!i#R%T#R#SCo#S#T%T#T#ZCo#Z#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%ToDvV{_&n`O!_%T!_!`E]!`#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%TcEdT%{R&n`O#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%TkEzT#gZ&n`O#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%TkFbXmR&n`O!^%T!^!_F}!_!`([!`!a([!a#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%TjGUV%mQ&n`O!_%T!_!`-Q!`#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%TkGrV%zZ&n`O!_%T!_!`([!`#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%TkH`WmR&n`O!_%T!_!`([!`!aHx!a#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%TjIPV%nQ&n`O!_%T!_!`-Q!`#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%TkIoV_Q#}P&n`O!_%T!_!`-Q!`#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%ToJ_]&n`&YS%uZO!Q%T!Q![JU![!c%T!c!}JU!}#R%T#R#SJU#S#T%T#T#oJU#p#q%T#r$g%T$g;'SJU;'S;=`KW<%lOJUoKZP;=`<%lJUoKge&n`&YS%uZOr%Trs)Ysw%Twx.Ux!Q%T!Q![JU![!c%T!c!tJU!t!uLx!u!}JU!}#R%T#R#SJU#S#T%T#T#fJU#f#gLx#g#oJU#p#q%T#r$g%T$g;'SJU;'S;=`KW<%lOJUoMRa&n`&YS%uZOr%TrsNWsw%Twx! vx!Q%T!Q![JU![!c%T!c!}JU!}#R%T#R#SJU#S#T%T#T#oJU#p#q%T#r$g%T$g;'SJU;'S;=`KW<%lOJUkN_V&n`&`ZOr%TrsNts#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%TkNyV&n`Or%Trs! `s#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tk! gT&n`&bZO#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tk! }V&n`&_ZOw%Twx!!dx#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tk!!iV&n`Ow%Twx!#Ox#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tk!#VT&n`&aZO#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%To!#oe&n`&YS%uZOr%Trs!%Qsw%Twx!&px!Q%T!Q![JU![!c%T!c!tJU!t!u!(`!u!}JU!}#R%T#R#SJU#S#T%T#T#fJU#f#g!(`#g#oJU#p#q%T#r$g%T$g;'SJU;'S;=`KW<%lOJUk!%XV&n`&dZOr%Trs!%ns#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tk!%sV&n`Or%Trs!&Ys#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tk!&aT&n`&fZO#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tk!&wV&n`&cZOw%Twx!'^x#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tk!'cV&n`Ow%Twx!'xx#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tk!(PT&n`&eZO#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%To!(ia&n`&YS%uZOr%Trs!)nsw%Twx!+^x!Q%T!Q![JU![!c%T!c!}JU!}#R%T#R#SJU#S#T%T#T#oJU#p#q%T#r$g%T$g;'SJU;'S;=`KW<%lOJUk!)uV&n`&hZOr%Trs!*[s#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tk!*aV&n`Or%Trs!*vs#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tk!*}T&n`&jZO#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tk!+eV&n`&gZOw%Twx!+zx#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tk!,PV&n`Ow%Twx!,fx#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tk!,mT&n`&iZO#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%To!-Vi&n`&YS%uZOr%TrsNWsw%Twx! vx!Q%T!Q![JU![!c%T!c!dJU!d!eLx!e!hJU!h!i!(`!i!}JU!}#R%T#R#SJU#S#T%T#T#UJU#U#VLx#V#YJU#Y#Z!(`#Z#oJU#p#q%T#r$g%T$g;'SJU;'S;=`KW<%lOJUo!.}a&n`&YS%uZOr%Trs)Ysw%Twx.Ux!Q%T!Q![JU![!c%T!c!}JU!}#R%T#R#SJU#S#T%T#T#oJU#p#q%T#r$g%T$g;'SJU;'S;=`KW<%lOJUk!0ZT!XZ&n`O#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tc!0qT!WR&n`O#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tj!1XV%kQ&n`O!_%T!_!`-Q!`#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%T~!1sO!]~k!1zV%jR&n`O!_%T!_!`-Q!`#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%T~!2fO![~i!2mT%tX&n`O#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%T",
      tokenizers: [legacyPrint, indentation, newlines, strings, 0, 1, 2, 3, 4],
      topRules: {"Script":[0,5]},
      specialized: [{term: 221, get: (value) => spec_identifier$1[value] || -1}],
      tokenPrec: 7652
    });

    const cache = /*@__PURE__*/new NodeWeakMap();
    const ScopeNodes = /*@__PURE__*/new Set([
        "Script", "Body",
        "FunctionDefinition", "ClassDefinition", "LambdaExpression",
        "ForStatement", "MatchClause"
    ]);
    function defID(type) {
        return (node, def, outer) => {
            if (outer)
                return false;
            let id = node.node.getChild("VariableName");
            if (id)
                def(id, type);
            return true;
        };
    }
    const gatherCompletions = {
        FunctionDefinition: /*@__PURE__*/defID("function"),
        ClassDefinition: /*@__PURE__*/defID("class"),
        ForStatement(node, def, outer) {
            if (outer)
                for (let child = node.node.firstChild; child; child = child.nextSibling) {
                    if (child.name == "VariableName")
                        def(child, "variable");
                    else if (child.name == "in")
                        break;
                }
        },
        ImportStatement(_node, def) {
            var _a, _b;
            let { node } = _node;
            let isFrom = ((_a = node.firstChild) === null || _a === void 0 ? void 0 : _a.name) == "from";
            for (let ch = node.getChild("import"); ch; ch = ch.nextSibling) {
                if (ch.name == "VariableName" && ((_b = ch.nextSibling) === null || _b === void 0 ? void 0 : _b.name) != "as")
                    def(ch, isFrom ? "variable" : "namespace");
            }
        },
        AssignStatement(node, def) {
            for (let child = node.node.firstChild; child; child = child.nextSibling) {
                if (child.name == "VariableName")
                    def(child, "variable");
                else if (child.name == ":" || child.name == "AssignOp")
                    break;
            }
        },
        ParamList(node, def) {
            for (let prev = null, child = node.node.firstChild; child; child = child.nextSibling) {
                if (child.name == "VariableName" && (!prev || !/\*|AssignOp/.test(prev.name)))
                    def(child, "variable");
                prev = child;
            }
        },
        CapturePattern: /*@__PURE__*/defID("variable"),
        AsPattern: /*@__PURE__*/defID("variable"),
        __proto__: null
    };
    function getScope(doc, node) {
        let cached = cache.get(node);
        if (cached)
            return cached;
        let completions = [], top = true;
        function def(node, type) {
            let name = doc.sliceString(node.from, node.to);
            completions.push({ label: name, type });
        }
        node.cursor(IterMode.IncludeAnonymous).iterate(node => {
            if (node.name) {
                let gather = gatherCompletions[node.name];
                if (gather && gather(node, def, top) || !top && ScopeNodes.has(node.name))
                    return false;
                top = false;
            }
            else if (node.to - node.from > 8192) {
                // Allow caching for bigger internal nodes
                for (let c of getScope(doc, node.node))
                    completions.push(c);
                return false;
            }
        });
        cache.set(node, completions);
        return completions;
    }
    const Identifier$1 = /^[\w\xa1-\uffff][\w\d\xa1-\uffff]*$/;
    const dontComplete = ["String", "FormatString", "Comment", "PropertyName"];
    /**
    Completion source that looks up locally defined names in
    Python code.
    */
    function localCompletionSource(context) {
        let inner = syntaxTree(context.state).resolveInner(context.pos, -1);
        if (dontComplete.indexOf(inner.name) > -1)
            return null;
        let isWord = inner.name == "VariableName" ||
            inner.to - inner.from < 20 && Identifier$1.test(context.state.sliceDoc(inner.from, inner.to));
        if (!isWord && !context.explicit)
            return null;
        let options = [];
        for (let pos = inner; pos; pos = pos.parent) {
            if (ScopeNodes.has(pos.name))
                options = options.concat(getScope(context.state.doc, pos));
        }
        return {
            options,
            from: isWord ? inner.from : context.pos,
            validFor: Identifier$1
        };
    }
    const globals = /*@__PURE__*/[
        "__annotations__", "__builtins__", "__debug__", "__doc__", "__import__", "__name__",
        "__loader__", "__package__", "__spec__",
        "False", "None", "True"
    ].map(n => ({ label: n, type: "constant" })).concat(/*@__PURE__*/[
        "ArithmeticError", "AssertionError", "AttributeError", "BaseException", "BlockingIOError",
        "BrokenPipeError", "BufferError", "BytesWarning", "ChildProcessError", "ConnectionAbortedError",
        "ConnectionError", "ConnectionRefusedError", "ConnectionResetError", "DeprecationWarning",
        "EOFError", "Ellipsis", "EncodingWarning", "EnvironmentError", "Exception", "FileExistsError",
        "FileNotFoundError", "FloatingPointError", "FutureWarning", "GeneratorExit", "IOError",
        "ImportError", "ImportWarning", "IndentationError", "IndexError", "InterruptedError",
        "IsADirectoryError", "KeyError", "KeyboardInterrupt", "LookupError", "MemoryError",
        "ModuleNotFoundError", "NameError", "NotADirectoryError", "NotImplemented", "NotImplementedError",
        "OSError", "OverflowError", "PendingDeprecationWarning", "PermissionError", "ProcessLookupError",
        "RecursionError", "ReferenceError", "ResourceWarning", "RuntimeError", "RuntimeWarning",
        "StopAsyncIteration", "StopIteration", "SyntaxError", "SyntaxWarning", "SystemError",
        "SystemExit", "TabError", "TimeoutError", "TypeError", "UnboundLocalError", "UnicodeDecodeError",
        "UnicodeEncodeError", "UnicodeError", "UnicodeTranslateError", "UnicodeWarning", "UserWarning",
        "ValueError", "Warning", "ZeroDivisionError"
    ].map(n => ({ label: n, type: "type" }))).concat(/*@__PURE__*/[
        "bool", "bytearray", "bytes", "classmethod", "complex", "float", "frozenset", "int", "list",
        "map", "memoryview", "object", "range", "set", "staticmethod", "str", "super", "tuple", "type"
    ].map(n => ({ label: n, type: "class" }))).concat(/*@__PURE__*/[
        "abs", "aiter", "all", "anext", "any", "ascii", "bin", "breakpoint", "callable", "chr",
        "compile", "delattr", "dict", "dir", "divmod", "enumerate", "eval", "exec", "exit", "filter",
        "format", "getattr", "globals", "hasattr", "hash", "help", "hex", "id", "input", "isinstance",
        "issubclass", "iter", "len", "license", "locals", "max", "min", "next", "oct", "open",
        "ord", "pow", "print", "property", "quit", "repr", "reversed", "round", "setattr", "slice",
        "sorted", "sum", "vars", "zip"
    ].map(n => ({ label: n, type: "function" })));
    const snippets = [
        /*@__PURE__*/snippetCompletion("def ${name}(${params}):\n\t${}", {
            label: "def",
            detail: "function",
            type: "keyword"
        }),
        /*@__PURE__*/snippetCompletion("for ${name} in ${collection}:\n\t${}", {
            label: "for",
            detail: "loop",
            type: "keyword"
        }),
        /*@__PURE__*/snippetCompletion("while ${}:\n\t${}", {
            label: "while",
            detail: "loop",
            type: "keyword"
        }),
        /*@__PURE__*/snippetCompletion("try:\n\t${}\nexcept ${error}:\n\t${}", {
            label: "try",
            detail: "/ except block",
            type: "keyword"
        }),
        /*@__PURE__*/snippetCompletion("if ${}:\n\t\n", {
            label: "if",
            detail: "block",
            type: "keyword"
        }),
        /*@__PURE__*/snippetCompletion("if ${}:\n\t${}\nelse:\n\t${}", {
            label: "if",
            detail: "/ else block",
            type: "keyword"
        }),
        /*@__PURE__*/snippetCompletion("class ${name}:\n\tdef __init__(self, ${params}):\n\t\t\t${}", {
            label: "class",
            detail: "definition",
            type: "keyword"
        }),
        /*@__PURE__*/snippetCompletion("import ${module}", {
            label: "import",
            detail: "statement",
            type: "keyword"
        }),
        /*@__PURE__*/snippetCompletion("from ${module} import ${names}", {
            label: "from",
            detail: "import",
            type: "keyword"
        })
    ];
    /**
    Autocompletion for built-in Python globals and keywords.
    */
    const globalCompletion = /*@__PURE__*/ifNotIn(dontComplete, /*@__PURE__*/completeFromList(/*@__PURE__*/globals.concat(snippets)));

    function innerBody(context) {
        let { node, pos } = context;
        let lineIndent = context.lineIndent(pos, -1);
        let found = null;
        for (;;) {
            let before = node.childBefore(pos);
            if (!before) {
                break;
            }
            else if (before.name == "Comment") {
                pos = before.from;
            }
            else if (before.name == "Body") {
                if (context.baseIndentFor(before) + context.unit <= lineIndent)
                    found = before;
                node = before;
            }
            else if (before.type.is("Statement")) {
                node = before;
            }
            else {
                break;
            }
        }
        return found;
    }
    function indentBody(context, node) {
        let base = context.baseIndentFor(node);
        let line = context.lineAt(context.pos, -1), to = line.from + line.text.length;
        // Don't consider blank, deindented lines at the end of the
        // block part of the block
        if (/^\s*($|#)/.test(line.text) &&
            context.node.to < to + 100 &&
            !/\S/.test(context.state.sliceDoc(to, context.node.to)) &&
            context.lineIndent(context.pos, -1) <= base)
            return null;
        // A normally deindenting keyword that appears at a higher
        // indentation than the block should probably be handled by the next
        // level
        if (/^\s*(else:|elif |except |finally:)/.test(context.textAfter) && context.lineIndent(context.pos, -1) > base)
            return null;
        return base + context.unit;
    }
    /**
    A language provider based on the [Lezer Python
    parser](https://github.com/lezer-parser/python), extended with
    highlighting and indentation information.
    */
    const pythonLanguage = /*@__PURE__*/LRLanguage.define({
        name: "python",
        parser: /*@__PURE__*/parser$5.configure({
            props: [
                /*@__PURE__*/indentNodeProp.add({
                    Body: context => {
                        var _a;
                        let inner = innerBody(context);
                        return (_a = indentBody(context, inner || context.node)) !== null && _a !== void 0 ? _a : context.continue();
                    },
                    IfStatement: cx => /^\s*(else:|elif )/.test(cx.textAfter) ? cx.baseIndent : cx.continue(),
                    "ForStatement WhileStatement": cx => /^\s*else:/.test(cx.textAfter) ? cx.baseIndent : cx.continue(),
                    TryStatement: cx => /^\s*(except |finally:|else:)/.test(cx.textAfter) ? cx.baseIndent : cx.continue(),
                    "TupleExpression ComprehensionExpression ParamList ArgList ParenthesizedExpression": /*@__PURE__*/delimitedIndent({ closing: ")" }),
                    "DictionaryExpression DictionaryComprehensionExpression SetExpression SetComprehensionExpression": /*@__PURE__*/delimitedIndent({ closing: "}" }),
                    "ArrayExpression ArrayComprehensionExpression": /*@__PURE__*/delimitedIndent({ closing: "]" }),
                    "String FormatString": () => null,
                    Script: context => {
                        var _a;
                        let inner = innerBody(context);
                        return (_a = (inner && indentBody(context, inner))) !== null && _a !== void 0 ? _a : context.continue();
                    }
                }),
                /*@__PURE__*/foldNodeProp.add({
                    "ArrayExpression DictionaryExpression SetExpression TupleExpression": foldInside,
                    Body: (node, state) => ({ from: node.from + 1, to: node.to - (node.to == state.doc.length ? 0 : 1) })
                })
            ],
        }),
        languageData: {
            closeBrackets: {
                brackets: ["(", "[", "{", "'", '"', "'''", '"""'],
                stringPrefixes: ["f", "fr", "rf", "r", "u", "b", "br", "rb",
                    "F", "FR", "RF", "R", "U", "B", "BR", "RB"]
            },
            commentTokens: { line: "#" },
            indentOnInput: /^\s*([\}\]\)]|else:|elif |except |finally:)$/
        }
    });
    /**
    Python language support.
    */
    function python() {
        return new LanguageSupport(pythonLanguage, [
            pythonLanguage.data.of({ autocomplete: localCompletionSource }),
            pythonLanguage.data.of({ autocomplete: globalCompletion }),
        ]);
    }

    // This file was generated by lezer-generator. You probably shouldn't edit it.
    const scriptText = 54,
      StartCloseScriptTag = 1,
      styleText = 55,
      StartCloseStyleTag = 2,
      textareaText = 56,
      StartCloseTextareaTag = 3,
      EndTag = 4,
      SelfClosingEndTag = 5,
      StartTag = 6,
      StartScriptTag = 7,
      StartStyleTag = 8,
      StartTextareaTag = 9,
      StartSelfClosingTag = 10,
      StartCloseTag = 11,
      NoMatchStartCloseTag = 12,
      MismatchedStartCloseTag = 13,
      missingCloseTag = 57,
      IncompleteCloseTag = 14,
      commentContent$1 = 58,
      Element = 20,
      TagName = 22,
      Attribute = 23,
      AttributeName = 24,
      AttributeValue = 26,
      UnquotedAttributeValue = 27,
      ScriptText = 28,
      StyleText = 31,
      TextareaText = 34,
      OpenTag = 36,
      CloseTag = 37,
      Dialect_noMatch = 0,
      Dialect_selfClosing = 1;

    /* Hand-written tokenizers for HTML. */

    const selfClosers$2 = {
      area: true, base: true, br: true, col: true, command: true,
      embed: true, frame: true, hr: true, img: true, input: true,
      keygen: true, link: true, meta: true, param: true, source: true,
      track: true, wbr: true, menuitem: true
    };

    const implicitlyClosed = {
      dd: true, li: true, optgroup: true, option: true, p: true,
      rp: true, rt: true, tbody: true, td: true, tfoot: true,
      th: true, tr: true
    };

    const closeOnOpen = {
      dd: {dd: true, dt: true},
      dt: {dd: true, dt: true},
      li: {li: true},
      option: {option: true, optgroup: true},
      optgroup: {optgroup: true},
      p: {
        address: true, article: true, aside: true, blockquote: true, dir: true,
        div: true, dl: true, fieldset: true, footer: true, form: true,
        h1: true, h2: true, h3: true, h4: true, h5: true, h6: true,
        header: true, hgroup: true, hr: true, menu: true, nav: true, ol: true,
        p: true, pre: true, section: true, table: true, ul: true
      },
      rp: {rp: true, rt: true},
      rt: {rp: true, rt: true},
      tbody: {tbody: true, tfoot: true},
      td: {td: true, th: true},
      tfoot: {tbody: true},
      th: {td: true, th: true},
      thead: {tbody: true, tfoot: true},
      tr: {tr: true}
    };

    function nameChar(ch) {
      return ch == 45 || ch == 46 || ch == 58 || ch >= 65 && ch <= 90 || ch == 95 || ch >= 97 && ch <= 122 || ch >= 161
    }

    function isSpace(ch) {
      return ch == 9 || ch == 10 || ch == 13 || ch == 32
    }

    let cachedName = null, cachedInput = null, cachedPos = 0;
    function tagNameAfter(input, offset) {
      let pos = input.pos + offset;
      if (cachedPos == pos && cachedInput == input) return cachedName
      let next = input.peek(offset);
      while (isSpace(next)) next = input.peek(++offset);
      let name = "";
      for (;;) {
        if (!nameChar(next)) break
        name += String.fromCharCode(next);
        next = input.peek(++offset);
      }
      // Undefined to signal there's a <? or <!, null for just missing
      cachedInput = input; cachedPos = pos;
      return cachedName = name ? name.toLowerCase() : next == question || next == bang ? undefined : null
    }

    const lessThan = 60, greaterThan = 62, slash = 47, question = 63, bang = 33, dash$1 = 45;

    function ElementContext(name, parent) {
      this.name = name;
      this.parent = parent;
    }

    const startTagTerms = [StartTag, StartSelfClosingTag, StartScriptTag, StartStyleTag, StartTextareaTag];

    const elementContext = new ContextTracker({
      start: null,
      shift(context, term, stack, input) {
        return startTagTerms.indexOf(term) > -1 ? new ElementContext(tagNameAfter(input, 1) || "", context) : context
      },
      reduce(context, term) {
        return term == Element && context ? context.parent : context
      },
      reuse(context, node, stack, input) {
        let type = node.type.id;
        return type == StartTag || type == OpenTag
          ? new ElementContext(tagNameAfter(input, 1) || "", context) : context
      },
      strict: false
    });

    const tagStart = new ExternalTokenizer((input, stack) => {
      if (input.next != lessThan) {
        // End of file, close any open tags
        if (input.next < 0 && stack.context) input.acceptToken(missingCloseTag);
        return
      }
      input.advance();
      let close = input.next == slash;
      if (close) input.advance();
      let name = tagNameAfter(input, 0);
      if (name === undefined) return
      if (!name) return input.acceptToken(close ? IncompleteCloseTag : StartTag)

      let parent = stack.context ? stack.context.name : null;
      if (close) {
        if (name == parent) return input.acceptToken(StartCloseTag)
        if (parent && implicitlyClosed[parent]) return input.acceptToken(missingCloseTag, -2)
        if (stack.dialectEnabled(Dialect_noMatch)) return input.acceptToken(NoMatchStartCloseTag)
        for (let cx = stack.context; cx; cx = cx.parent) if (cx.name == name) return
        input.acceptToken(MismatchedStartCloseTag);
      } else {
        if (name == "script") return input.acceptToken(StartScriptTag)
        if (name == "style") return input.acceptToken(StartStyleTag)
        if (name == "textarea") return input.acceptToken(StartTextareaTag)
        if (selfClosers$2.hasOwnProperty(name)) return input.acceptToken(StartSelfClosingTag)
        if (parent && closeOnOpen[parent] && closeOnOpen[parent][name]) input.acceptToken(missingCloseTag, -1);
        else input.acceptToken(StartTag);
      }
    }, {contextual: true});

    const commentContent = new ExternalTokenizer(input => {
      for (let dashes = 0, i = 0;; i++) {
        if (input.next < 0) {
          if (i) input.acceptToken(commentContent$1);
          break
        }
        if (input.next == dash$1) {
          dashes++;
        } else if (input.next == greaterThan && dashes >= 2) {
          if (i >= 3) input.acceptToken(commentContent$1, -2);
          break
        } else {
          dashes = 0;
        }
        input.advance();
      }
    });

    function inForeignElement(context) {
      for (; context; context = context.parent)
        if (context.name == "svg" || context.name == "math") return true
      return false
    }

    const endTag = new ExternalTokenizer((input, stack) => {
      if (input.next == slash && input.peek(1) == greaterThan) {
        let selfClosing = stack.dialectEnabled(Dialect_selfClosing) || inForeignElement(stack.context);
        input.acceptToken(selfClosing ? SelfClosingEndTag : EndTag, 2);
      } else if (input.next == greaterThan) {
        input.acceptToken(EndTag, 1);
      }
    });

    function contentTokenizer(tag, textToken, endToken) {
      let lastState = 2 + tag.length;
      return new ExternalTokenizer(input => {
        // state means:
        // - 0 nothing matched
        // - 1 '<' matched
        // - 2 '</' + possibly whitespace matched
        // - 3-(1+tag.length) part of the tag matched
        // - lastState whole tag + possibly whitespace matched
        for (let state = 0, matchedLen = 0, i = 0;; i++) {
          if (input.next < 0) {
            if (i) input.acceptToken(textToken);
            break
          }
          if (state == 0 && input.next == lessThan ||
              state == 1 && input.next == slash ||
              state >= 2 && state < lastState && input.next == tag.charCodeAt(state - 2)) {
            state++;
            matchedLen++;
          } else if ((state == 2 || state == lastState) && isSpace(input.next)) {
            matchedLen++;
          } else if (state == lastState && input.next == greaterThan) {
            if (i > matchedLen)
              input.acceptToken(textToken, -matchedLen);
            else
              input.acceptToken(endToken, -(matchedLen - 2));
            break
          } else if ((input.next == 10 /* '\n' */ || input.next == 13 /* '\r' */) && i) {
            input.acceptToken(textToken, 1);
            break
          } else {
            state = matchedLen = 0;
          }
          input.advance();
        }
      })
    }

    const scriptTokens = contentTokenizer("script", scriptText, StartCloseScriptTag);

    const styleTokens = contentTokenizer("style", styleText, StartCloseStyleTag);

    const textareaTokens = contentTokenizer("textarea", textareaText, StartCloseTextareaTag);

    const htmlHighlighting = styleTags({
      "Text RawText": tags$1.content,
      "StartTag StartCloseTag SelfClosingEndTag EndTag": tags$1.angleBracket,
      TagName: tags$1.tagName,
      "MismatchedCloseTag/TagName": [tags$1.tagName,  tags$1.invalid],
      AttributeName: tags$1.attributeName,
      "AttributeValue UnquotedAttributeValue": tags$1.attributeValue,
      Is: tags$1.definitionOperator,
      "EntityReference CharacterReference": tags$1.character,
      Comment: tags$1.blockComment,
      ProcessingInst: tags$1.processingInstruction,
      DoctypeDecl: tags$1.documentMeta
    });

    // This file was generated by lezer-generator. You probably shouldn't edit it.
    const parser$4 = LRParser.deserialize({
      version: 14,
      states: ",xOVO!rOOO!WQ#tO'#CqO!]Q#tO'#CzO!bQ#tO'#C}O!gQ#tO'#DQO!lQ#tO'#DSO!qOaO'#CpO!|ObO'#CpO#XOdO'#CpO$eO!rO'#CpOOO`'#Cp'#CpO$lO$fO'#DTO$tQ#tO'#DVO$yQ#tO'#DWOOO`'#Dk'#DkOOO`'#DY'#DYQVO!rOOO%OQ&rO,59]O%ZQ&rO,59fO%fQ&rO,59iO%qQ&rO,59lO%|Q&rO,59nOOOa'#D^'#D^O&XOaO'#CxO&dOaO,59[OOOb'#D_'#D_O&lObO'#C{O&wObO,59[OOOd'#D`'#D`O'POdO'#DOO'[OdO,59[OOO`'#Da'#DaO'dO!rO,59[O'kQ#tO'#DROOO`,59[,59[OOOp'#Db'#DbO'pO$fO,59oOOO`,59o,59oO'xQ#|O,59qO'}Q#|O,59rOOO`-E7W-E7WO(SQ&rO'#CsOOQW'#DZ'#DZO(bQ&rO1G.wOOOa1G.w1G.wOOO`1G/Y1G/YO(mQ&rO1G/QOOOb1G/Q1G/QO(xQ&rO1G/TOOOd1G/T1G/TO)TQ&rO1G/WOOO`1G/W1G/WO)`Q&rO1G/YOOOa-E7[-E7[O)kQ#tO'#CyOOO`1G.v1G.vOOOb-E7]-E7]O)pQ#tO'#C|OOOd-E7^-E7^O)uQ#tO'#DPOOO`-E7_-E7_O)zQ#|O,59mOOOp-E7`-E7`OOO`1G/Z1G/ZOOO`1G/]1G/]OOO`1G/^1G/^O*PQ,UO,59_OOQW-E7X-E7XOOOa7+$c7+$cOOO`7+$t7+$tOOOb7+$l7+$lOOOd7+$o7+$oOOO`7+$r7+$rO*[Q#|O,59eO*aQ#|O,59hO*fQ#|O,59kOOO`1G/X1G/XO*kO7[O'#CvO*|OMhO'#CvOOQW1G.y1G.yOOO`1G/P1G/POOO`1G/S1G/SOOO`1G/V1G/VOOOO'#D['#D[O+_O7[O,59bOOQW,59b,59bOOOO'#D]'#D]O+pOMhO,59bOOOO-E7Y-E7YOOQW1G.|1G.|OOOO-E7Z-E7Z",
      stateData: ",]~O!^OS~OUSOVPOWQOXROYTO[]O][O^^O`^Oa^Ob^Oc^Ox^O{_O!dZO~OfaO~OfbO~OfcO~OfdO~OfeO~O!WfOPlP!ZlP~O!XiOQoP!ZoP~O!YlORrP!ZrP~OUSOVPOWQOXROYTOZqO[]O][O^^O`^Oa^Ob^Oc^Ox^O!dZO~O!ZrO~P#dO![sO!euO~OfvO~OfwO~OS|OT}OhyO~OS!POT}OhyO~OS!ROT}OhyO~OS!TOT}OhyO~OS}OT}OhyO~O!WfOPlX!ZlX~OP!WO!Z!XO~O!XiOQoX!ZoX~OQ!ZO!Z!XO~O!YlORrX!ZrX~OR!]O!Z!XO~O!Z!XO~P#dOf!_O~O![sO!e!aO~OS!bO~OS!cO~Oi!dOSgXTgXhgX~OS!fOT!gOhyO~OS!hOT!gOhyO~OS!iOT!gOhyO~OS!jOT!gOhyO~OS!gOT!gOhyO~Of!kO~Of!lO~Of!mO~OS!nO~Ok!qO!`!oO!b!pO~OS!rO~OS!sO~OS!tO~Oa!uOb!uOc!uO!`!wO!a!uO~Oa!xOb!xOc!xO!b!wO!c!xO~Oa!uOb!uOc!uO!`!{O!a!uO~Oa!xOb!xOc!xO!b!{O!c!xO~OT~bac!dx{!d~",
      goto: "%p!`PPPPPPPPPPPPPPPPPPPP!a!gP!mPP!yP!|#P#S#Y#]#`#f#i#l#r#x!aP!a!aP$O$U$l$r$x%O%U%[%bPPPPPPPP%hX^OX`pXUOX`pezabcde{!O!Q!S!UR!q!dRhUR!XhXVOX`pRkVR!XkXWOX`pRnWR!XnXXOX`pQrXR!XpXYOX`pQ`ORx`Q{aQ!ObQ!QcQ!SdQ!UeZ!e{!O!Q!S!UQ!v!oR!z!vQ!y!pR!|!yQgUR!VgQjVR!YjQmWR![mQpXR!^pQtZR!`tS_O`ToXp",
      nodeNames: "⚠ StartCloseTag StartCloseTag StartCloseTag EndTag SelfClosingEndTag StartTag StartTag StartTag StartTag StartTag StartCloseTag StartCloseTag StartCloseTag IncompleteCloseTag Document Text EntityReference CharacterReference InvalidEntity Element OpenTag TagName Attribute AttributeName Is AttributeValue UnquotedAttributeValue ScriptText CloseTag OpenTag StyleText CloseTag OpenTag TextareaText CloseTag OpenTag CloseTag SelfClosingTag Comment ProcessingInst MismatchedCloseTag CloseTag DoctypeDecl",
      maxTerm: 67,
      context: elementContext,
      nodeProps: [
        ["closedBy", -10,1,2,3,7,8,9,10,11,12,13,"EndTag",6,"EndTag SelfClosingEndTag",-4,21,30,33,36,"CloseTag"],
        ["openedBy", 4,"StartTag StartCloseTag",5,"StartTag",-4,29,32,35,37,"OpenTag"],
        ["group", -9,14,17,18,19,20,39,40,41,42,"Entity",16,"Entity TextContent",-3,28,31,34,"TextContent Entity"],
        ["isolate", -11,21,29,30,32,33,35,36,37,38,41,42,"ltr",-3,26,27,39,""]
      ],
      propSources: [htmlHighlighting],
      skippedNodes: [0],
      repeatNodeCount: 9,
      tokenData: "!<p!aR!YOX$qXY,QYZ,QZ[$q[]&X]^,Q^p$qpq,Qqr-_rs3_sv-_vw3}wxHYx}-_}!OH{!O!P-_!P!Q$q!Q![-_![!]Mz!]!^-_!^!_!$S!_!`!;x!`!a&X!a!c-_!c!}Mz!}#R-_#R#SMz#S#T1k#T#oMz#o#s-_#s$f$q$f%W-_%W%oMz%o%p-_%p&aMz&a&b-_&b1pMz1p4U-_4U4dMz4d4e-_4e$ISMz$IS$I`-_$I`$IbMz$Ib$Kh-_$Kh%#tMz%#t&/x-_&/x&EtMz&Et&FV-_&FV;'SMz;'S;:j!#|;:j;=`3X<%l?&r-_?&r?AhMz?Ah?BY$q?BY?MnMz?MnO$q!Z$|c`PkW!a`!cpOX$qXZ&XZ[$q[^&X^p$qpq&Xqr$qrs&}sv$qvw+Pwx(tx!^$q!^!_*V!_!a&X!a#S$q#S#T&X#T;'S$q;'S;=`+z<%lO$q!R&bX`P!a`!cpOr&Xrs&}sv&Xwx(tx!^&X!^!_*V!_;'S&X;'S;=`*y<%lO&Xq'UV`P!cpOv&}wx'kx!^&}!^!_(V!_;'S&};'S;=`(n<%lO&}P'pT`POv'kw!^'k!_;'S'k;'S;=`(P<%lO'kP(SP;=`<%l'kp([S!cpOv(Vx;'S(V;'S;=`(h<%lO(Vp(kP;=`<%l(Vq(qP;=`<%l&}a({W`P!a`Or(trs'ksv(tw!^(t!^!_)e!_;'S(t;'S;=`*P<%lO(t`)jT!a`Or)esv)ew;'S)e;'S;=`)y<%lO)e`)|P;=`<%l)ea*SP;=`<%l(t!Q*^V!a`!cpOr*Vrs(Vsv*Vwx)ex;'S*V;'S;=`*s<%lO*V!Q*vP;=`<%l*V!R*|P;=`<%l&XW+UYkWOX+PZ[+P^p+Pqr+Psw+Px!^+P!a#S+P#T;'S+P;'S;=`+t<%lO+PW+wP;=`<%l+P!Z+}P;=`<%l$q!a,]``P!a`!cp!^^OX&XXY,QYZ,QZ]&X]^,Q^p&Xpq,Qqr&Xrs&}sv&Xwx(tx!^&X!^!_*V!_;'S&X;'S;=`*y<%lO&X!_-ljhS`PkW!a`!cpOX$qXZ&XZ[$q[^&X^p$qpq&Xqr-_rs&}sv-_vw/^wx(tx!P-_!P!Q$q!Q!^-_!^!_*V!_!a&X!a#S-_#S#T1k#T#s-_#s$f$q$f;'S-_;'S;=`3X<%l?Ah-_?Ah?BY$q?BY?Mn-_?MnO$q[/ebhSkWOX+PZ[+P^p+Pqr/^sw/^x!P/^!P!Q+P!Q!^/^!a#S/^#S#T0m#T#s/^#s$f+P$f;'S/^;'S;=`1e<%l?Ah/^?Ah?BY+P?BY?Mn/^?MnO+PS0rXhSqr0msw0mx!P0m!Q!^0m!a#s0m$f;'S0m;'S;=`1_<%l?Ah0m?BY?Mn0mS1bP;=`<%l0m[1hP;=`<%l/^!V1vchS`P!a`!cpOq&Xqr1krs&}sv1kvw0mwx(tx!P1k!P!Q&X!Q!^1k!^!_*V!_!a&X!a#s1k#s$f&X$f;'S1k;'S;=`3R<%l?Ah1k?Ah?BY&X?BY?Mn1k?MnO&X!V3UP;=`<%l1k!_3[P;=`<%l-_!Z3hV!`h`P!cpOv&}wx'kx!^&}!^!_(V!_;'S&};'S;=`(n<%lO&}!_4WihSkWc!ROX5uXZ7SZ[5u[^7S^p5uqr8trs7Sst>]tw8twx7Sx!P8t!P!Q5u!Q!]8t!]!^/^!^!a7S!a#S8t#S#T;{#T#s8t#s$f5u$f;'S8t;'S;=`>V<%l?Ah8t?Ah?BY5u?BY?Mn8t?MnO5u!Z5zbkWOX5uXZ7SZ[5u[^7S^p5uqr5urs7Sst+Ptw5uwx7Sx!]5u!]!^7w!^!a7S!a#S5u#S#T7S#T;'S5u;'S;=`8n<%lO5u!R7VVOp7Sqs7St!]7S!]!^7l!^;'S7S;'S;=`7q<%lO7S!R7qOa!R!R7tP;=`<%l7S!Z8OYkWa!ROX+PZ[+P^p+Pqr+Psw+Px!^+P!a#S+P#T;'S+P;'S;=`+t<%lO+P!Z8qP;=`<%l5u!_8{ihSkWOX5uXZ7SZ[5u[^7S^p5uqr8trs7Sst/^tw8twx7Sx!P8t!P!Q5u!Q!]8t!]!^:j!^!a7S!a#S8t#S#T;{#T#s8t#s$f5u$f;'S8t;'S;=`>V<%l?Ah8t?Ah?BY5u?BY?Mn8t?MnO5u!_:sbhSkWa!ROX+PZ[+P^p+Pqr/^sw/^x!P/^!P!Q+P!Q!^/^!a#S/^#S#T0m#T#s/^#s$f+P$f;'S/^;'S;=`1e<%l?Ah/^?Ah?BY+P?BY?Mn/^?MnO+P!V<QchSOp7Sqr;{rs7Sst0mtw;{wx7Sx!P;{!P!Q7S!Q!];{!]!^=]!^!a7S!a#s;{#s$f7S$f;'S;{;'S;=`>P<%l?Ah;{?Ah?BY7S?BY?Mn;{?MnO7S!V=dXhSa!Rqr0msw0mx!P0m!Q!^0m!a#s0m$f;'S0m;'S;=`1_<%l?Ah0m?BY?Mn0m!V>SP;=`<%l;{!_>YP;=`<%l8t!_>dhhSkWOX@OXZAYZ[@O[^AY^p@OqrBwrsAYswBwwxAYx!PBw!P!Q@O!Q!]Bw!]!^/^!^!aAY!a#SBw#S#TE{#T#sBw#s$f@O$f;'SBw;'S;=`HS<%l?AhBw?Ah?BY@O?BY?MnBw?MnO@O!Z@TakWOX@OXZAYZ[@O[^AY^p@Oqr@OrsAYsw@OwxAYx!]@O!]!^Az!^!aAY!a#S@O#S#TAY#T;'S@O;'S;=`Bq<%lO@O!RA]UOpAYq!]AY!]!^Ao!^;'SAY;'S;=`At<%lOAY!RAtOb!R!RAwP;=`<%lAY!ZBRYkWb!ROX+PZ[+P^p+Pqr+Psw+Px!^+P!a#S+P#T;'S+P;'S;=`+t<%lO+P!ZBtP;=`<%l@O!_COhhSkWOX@OXZAYZ[@O[^AY^p@OqrBwrsAYswBwwxAYx!PBw!P!Q@O!Q!]Bw!]!^Dj!^!aAY!a#SBw#S#TE{#T#sBw#s$f@O$f;'SBw;'S;=`HS<%l?AhBw?Ah?BY@O?BY?MnBw?MnO@O!_DsbhSkWb!ROX+PZ[+P^p+Pqr/^sw/^x!P/^!P!Q+P!Q!^/^!a#S/^#S#T0m#T#s/^#s$f+P$f;'S/^;'S;=`1e<%l?Ah/^?Ah?BY+P?BY?Mn/^?MnO+P!VFQbhSOpAYqrE{rsAYswE{wxAYx!PE{!P!QAY!Q!]E{!]!^GY!^!aAY!a#sE{#s$fAY$f;'SE{;'S;=`G|<%l?AhE{?Ah?BYAY?BY?MnE{?MnOAY!VGaXhSb!Rqr0msw0mx!P0m!Q!^0m!a#s0m$f;'S0m;'S;=`1_<%l?Ah0m?BY?Mn0m!VHPP;=`<%lE{!_HVP;=`<%lBw!ZHcW!bx`P!a`Or(trs'ksv(tw!^(t!^!_)e!_;'S(t;'S;=`*P<%lO(t!aIYlhS`PkW!a`!cpOX$qXZ&XZ[$q[^&X^p$qpq&Xqr-_rs&}sv-_vw/^wx(tx}-_}!OKQ!O!P-_!P!Q$q!Q!^-_!^!_*V!_!a&X!a#S-_#S#T1k#T#s-_#s$f$q$f;'S-_;'S;=`3X<%l?Ah-_?Ah?BY$q?BY?Mn-_?MnO$q!aK_khS`PkW!a`!cpOX$qXZ&XZ[$q[^&X^p$qpq&Xqr-_rs&}sv-_vw/^wx(tx!P-_!P!Q$q!Q!^-_!^!_*V!_!`&X!`!aMS!a#S-_#S#T1k#T#s-_#s$f$q$f;'S-_;'S;=`3X<%l?Ah-_?Ah?BY$q?BY?Mn-_?MnO$q!TM_X`P!a`!cp!eQOr&Xrs&}sv&Xwx(tx!^&X!^!_*V!_;'S&X;'S;=`*y<%lO&X!aNZ!ZhSfQ`PkW!a`!cpOX$qXZ&XZ[$q[^&X^p$qpq&Xqr-_rs&}sv-_vw/^wx(tx}-_}!OMz!O!PMz!P!Q$q!Q![Mz![!]Mz!]!^-_!^!_*V!_!a&X!a!c-_!c!}Mz!}#R-_#R#SMz#S#T1k#T#oMz#o#s-_#s$f$q$f$}-_$}%OMz%O%W-_%W%oMz%o%p-_%p&aMz&a&b-_&b1pMz1p4UMz4U4dMz4d4e-_4e$ISMz$IS$I`-_$I`$IbMz$Ib$Je-_$Je$JgMz$Jg$Kh-_$Kh%#tMz%#t&/x-_&/x&EtMz&Et&FV-_&FV;'SMz;'S;:j!#|;:j;=`3X<%l?&r-_?&r?AhMz?Ah?BY$q?BY?MnMz?MnO$q!a!$PP;=`<%lMz!R!$ZY!a`!cpOq*Vqr!$yrs(Vsv*Vwx)ex!a*V!a!b!4t!b;'S*V;'S;=`*s<%lO*V!R!%Q]!a`!cpOr*Vrs(Vsv*Vwx)ex}*V}!O!%y!O!f*V!f!g!']!g#W*V#W#X!0`#X;'S*V;'S;=`*s<%lO*V!R!&QX!a`!cpOr*Vrs(Vsv*Vwx)ex}*V}!O!&m!O;'S*V;'S;=`*s<%lO*V!R!&vV!a`!cp!dPOr*Vrs(Vsv*Vwx)ex;'S*V;'S;=`*s<%lO*V!R!'dX!a`!cpOr*Vrs(Vsv*Vwx)ex!q*V!q!r!(P!r;'S*V;'S;=`*s<%lO*V!R!(WX!a`!cpOr*Vrs(Vsv*Vwx)ex!e*V!e!f!(s!f;'S*V;'S;=`*s<%lO*V!R!(zX!a`!cpOr*Vrs(Vsv*Vwx)ex!v*V!v!w!)g!w;'S*V;'S;=`*s<%lO*V!R!)nX!a`!cpOr*Vrs(Vsv*Vwx)ex!{*V!{!|!*Z!|;'S*V;'S;=`*s<%lO*V!R!*bX!a`!cpOr*Vrs(Vsv*Vwx)ex!r*V!r!s!*}!s;'S*V;'S;=`*s<%lO*V!R!+UX!a`!cpOr*Vrs(Vsv*Vwx)ex!g*V!g!h!+q!h;'S*V;'S;=`*s<%lO*V!R!+xY!a`!cpOr!+qrs!,hsv!+qvw!-Swx!.[x!`!+q!`!a!/j!a;'S!+q;'S;=`!0Y<%lO!+qq!,mV!cpOv!,hvx!-Sx!`!,h!`!a!-q!a;'S!,h;'S;=`!.U<%lO!,hP!-VTO!`!-S!`!a!-f!a;'S!-S;'S;=`!-k<%lO!-SP!-kO{PP!-nP;=`<%l!-Sq!-xS!cp{POv(Vx;'S(V;'S;=`(h<%lO(Vq!.XP;=`<%l!,ha!.aX!a`Or!.[rs!-Ssv!.[vw!-Sw!`!.[!`!a!.|!a;'S!.[;'S;=`!/d<%lO!.[a!/TT!a`{POr)esv)ew;'S)e;'S;=`)y<%lO)ea!/gP;=`<%l!.[!R!/sV!a`!cp{POr*Vrs(Vsv*Vwx)ex;'S*V;'S;=`*s<%lO*V!R!0]P;=`<%l!+q!R!0gX!a`!cpOr*Vrs(Vsv*Vwx)ex#c*V#c#d!1S#d;'S*V;'S;=`*s<%lO*V!R!1ZX!a`!cpOr*Vrs(Vsv*Vwx)ex#V*V#V#W!1v#W;'S*V;'S;=`*s<%lO*V!R!1}X!a`!cpOr*Vrs(Vsv*Vwx)ex#h*V#h#i!2j#i;'S*V;'S;=`*s<%lO*V!R!2qX!a`!cpOr*Vrs(Vsv*Vwx)ex#m*V#m#n!3^#n;'S*V;'S;=`*s<%lO*V!R!3eX!a`!cpOr*Vrs(Vsv*Vwx)ex#d*V#d#e!4Q#e;'S*V;'S;=`*s<%lO*V!R!4XX!a`!cpOr*Vrs(Vsv*Vwx)ex#X*V#X#Y!+q#Y;'S*V;'S;=`*s<%lO*V!R!4{Y!a`!cpOr!4trs!5ksv!4tvw!6Vwx!8]x!a!4t!a!b!:]!b;'S!4t;'S;=`!;r<%lO!4tq!5pV!cpOv!5kvx!6Vx!a!5k!a!b!7W!b;'S!5k;'S;=`!8V<%lO!5kP!6YTO!a!6V!a!b!6i!b;'S!6V;'S;=`!7Q<%lO!6VP!6lTO!`!6V!`!a!6{!a;'S!6V;'S;=`!7Q<%lO!6VP!7QOxPP!7TP;=`<%l!6Vq!7]V!cpOv!5kvx!6Vx!`!5k!`!a!7r!a;'S!5k;'S;=`!8V<%lO!5kq!7yS!cpxPOv(Vx;'S(V;'S;=`(h<%lO(Vq!8YP;=`<%l!5ka!8bX!a`Or!8]rs!6Vsv!8]vw!6Vw!a!8]!a!b!8}!b;'S!8];'S;=`!:V<%lO!8]a!9SX!a`Or!8]rs!6Vsv!8]vw!6Vw!`!8]!`!a!9o!a;'S!8];'S;=`!:V<%lO!8]a!9vT!a`xPOr)esv)ew;'S)e;'S;=`)y<%lO)ea!:YP;=`<%l!8]!R!:dY!a`!cpOr!4trs!5ksv!4tvw!6Vwx!8]x!`!4t!`!a!;S!a;'S!4t;'S;=`!;r<%lO!4t!R!;]V!a`!cpxPOr*Vrs(Vsv*Vwx)ex;'S*V;'S;=`*s<%lO*V!R!;uP;=`<%l!4t!V!<TXiS`P!a`!cpOr&Xrs&}sv&Xwx(tx!^&X!^!_*V!_;'S&X;'S;=`*y<%lO&X",
      tokenizers: [scriptTokens, styleTokens, textareaTokens, endTag, tagStart, commentContent, 0, 1, 2, 3, 4, 5],
      topRules: {"Document":[0,15]},
      dialects: {noMatch: 0, selfClosing: 509},
      tokenPrec: 511
    });

    function getAttrs(openTag, input) {
      let attrs = Object.create(null);
      for (let att of openTag.getChildren(Attribute)) {
        let name = att.getChild(AttributeName), value = att.getChild(AttributeValue) || att.getChild(UnquotedAttributeValue);
        if (name) attrs[input.read(name.from, name.to)] =
          !value ? "" : value.type.id == AttributeValue ? input.read(value.from + 1, value.to - 1) : input.read(value.from, value.to);
      }
      return attrs
    }

    function findTagName(openTag, input) {
      let tagNameNode = openTag.getChild(TagName);
      return tagNameNode ? input.read(tagNameNode.from, tagNameNode.to) : " "
    }

    function maybeNest(node, input, tags) {
      let attrs;
      for (let tag of tags) {
        if (!tag.attrs || tag.attrs(attrs || (attrs = getAttrs(node.node.parent.firstChild, input))))
          return {parser: tag.parser}
      }
      return null
    }

    // tags?: {
    //   tag: string,
    //   attrs?: ({[attr: string]: string}) => boolean,
    //   parser: Parser
    // }[]
    // attributes?: {
    //   name: string,
    //   tagName?: string,
    //   parser: Parser
    // }[]

    function configureNesting(tags = [], attributes = []) {
      let script = [], style = [], textarea = [], other = [];
      for (let tag of tags) {
        let array = tag.tag == "script" ? script : tag.tag == "style" ? style : tag.tag == "textarea" ? textarea : other;
        array.push(tag);
      }
      let attrs = attributes.length ? Object.create(null) : null;
      for (let attr of attributes) (attrs[attr.name] || (attrs[attr.name] = [])).push(attr);

      return parseMixed((node, input) => {
        let id = node.type.id;
        if (id == ScriptText) return maybeNest(node, input, script)
        if (id == StyleText) return maybeNest(node, input, style)
        if (id == TextareaText) return maybeNest(node, input, textarea)

        if (id == Element && other.length) {
          let n = node.node, open = n.firstChild, tagName = open && findTagName(open, input), attrs;
          if (tagName) for (let tag of other) {
            if (tag.tag == tagName && (!tag.attrs || tag.attrs(attrs || (attrs = getAttrs(open, input))))) {
              let close = n.lastChild;
              let to = close.type.id == CloseTag ? close.from : n.to;
              if (to > open.to)
                return {parser: tag.parser, overlay: [{from: open.to, to}]}
            }
          }
        }

        if (attrs && id == Attribute) {
          let n = node.node, nameNode;
          if (nameNode = n.firstChild) {
            let matches = attrs[input.read(nameNode.from, nameNode.to)];
            if (matches) for (let attr of matches) {
              if (attr.tagName && attr.tagName != findTagName(n.parent, input)) continue
              let value = n.lastChild;
              if (value.type.id == AttributeValue) {
                let from = value.from + 1;
                let last = value.lastChild, to = value.to - (last && last.isError ? 0 : 1);
                if (to > from) return {parser: attr.parser, overlay: [{from, to}]}
              } else if (value.type.id == UnquotedAttributeValue) {
                return {parser: attr.parser, overlay: [{from: value.from, to: value.to}]}
              }
            }
          }
        }
        return null
      })
    }

    // This file was generated by lezer-generator. You probably shouldn't edit it.
    const descendantOp = 99,
      Unit = 1,
      callee = 100,
      identifier$2 = 101,
      VariableName = 2;

    /* Hand-written tokenizers for CSS tokens that can't be
       expressed by Lezer's built-in tokenizer. */

    const space = [9, 10, 11, 12, 13, 32, 133, 160, 5760, 8192, 8193, 8194, 8195, 8196, 8197,
                   8198, 8199, 8200, 8201, 8202, 8232, 8233, 8239, 8287, 12288];
    const colon = 58, parenL = 40, underscore = 95, bracketL = 91, dash = 45, period = 46,
          hash = 35, percent = 37, ampersand = 38, backslash = 92, newline = 10;

    function isAlpha$1(ch) { return ch >= 65 && ch <= 90 || ch >= 97 && ch <= 122 || ch >= 161 }

    function isDigit(ch) { return ch >= 48 && ch <= 57 }

    const identifiers = new ExternalTokenizer((input, stack) => {
      for (let inside = false, dashes = 0, i = 0;; i++) {
        let {next} = input;
        if (isAlpha$1(next) || next == dash || next == underscore || (inside && isDigit(next))) {
          if (!inside && (next != dash || i > 0)) inside = true;
          if (dashes === i && next == dash) dashes++;
          input.advance();
        } else if (next == backslash && input.peek(1) != newline) {
          input.advance();
          if (input.next > -1) input.advance();
          inside = true;
        } else {
          if (inside)
            input.acceptToken(next == parenL ? callee : dashes == 2 && stack.canShift(VariableName) ? VariableName : identifier$2);
          break
        }
      }
    });

    const descendant = new ExternalTokenizer(input => {
      if (space.includes(input.peek(-1))) {
        let {next} = input;
        if (isAlpha$1(next) || next == underscore || next == hash || next == period ||
            next == bracketL || next == colon && isAlpha$1(input.peek(1)) ||
            next == dash || next == ampersand)
          input.acceptToken(descendantOp);
      }
    });

    const unitToken = new ExternalTokenizer(input => {
      if (!space.includes(input.peek(-1))) {
        let {next} = input;
        if (next == percent) { input.advance(); input.acceptToken(Unit); }
        if (isAlpha$1(next)) {
          do { input.advance(); } while (isAlpha$1(input.next) || isDigit(input.next))
          input.acceptToken(Unit);
        }
      }
    });

    const cssHighlighting = styleTags({
      "AtKeyword import charset namespace keyframes media supports": tags$1.definitionKeyword,
      "from to selector": tags$1.keyword,
      NamespaceName: tags$1.namespace,
      KeyframeName: tags$1.labelName,
      KeyframeRangeName: tags$1.operatorKeyword,
      TagName: tags$1.tagName,
      ClassName: tags$1.className,
      PseudoClassName: tags$1.constant(tags$1.className),
      IdName: tags$1.labelName,
      "FeatureName PropertyName": tags$1.propertyName,
      AttributeName: tags$1.attributeName,
      NumberLiteral: tags$1.number,
      KeywordQuery: tags$1.keyword,
      UnaryQueryOp: tags$1.operatorKeyword,
      "CallTag ValueName": tags$1.atom,
      VariableName: tags$1.variableName,
      Callee: tags$1.operatorKeyword,
      Unit: tags$1.unit,
      "UniversalSelector NestingSelector": tags$1.definitionOperator,
      MatchOp: tags$1.compareOperator,
      "ChildOp SiblingOp, LogicOp": tags$1.logicOperator,
      BinOp: tags$1.arithmeticOperator,
      Important: tags$1.modifier,
      Comment: tags$1.blockComment,
      ColorLiteral: tags$1.color,
      "ParenthesizedContent StringLiteral": tags$1.string,
      ":": tags$1.punctuation,
      "PseudoOp #": tags$1.derefOperator,
      "; ,": tags$1.separator,
      "( )": tags$1.paren,
      "[ ]": tags$1.squareBracket,
      "{ }": tags$1.brace
    });

    // This file was generated by lezer-generator. You probably shouldn't edit it.
    const spec_callee = {__proto__:null,lang:32, "nth-child":32, "nth-last-child":32, "nth-of-type":32, "nth-last-of-type":32, dir:32, "host-context":32, url:60, "url-prefix":60, domain:60, regexp:60, selector:138};
    const spec_AtKeyword = {__proto__:null,"@import":118, "@media":142, "@charset":146, "@namespace":150, "@keyframes":156, "@supports":168};
    const spec_identifier = {__proto__:null,not:132, only:132};
    const parser$3 = LRParser.deserialize({
      version: 14,
      states: ":jQYQ[OOO#_Q[OOP#fOWOOOOQP'#Cd'#CdOOQP'#Cc'#CcO#kQ[O'#CfO$_QXO'#CaO$fQ[O'#ChO$qQ[O'#DTO$vQ[O'#DWOOQP'#Em'#EmO${QdO'#DgO%jQ[O'#DtO${QdO'#DvO%{Q[O'#DxO&WQ[O'#D{O&`Q[O'#ERO&nQ[O'#ETOOQS'#El'#ElOOQS'#EW'#EWQYQ[OOO&uQXO'#CdO'jQWO'#DcO'oQWO'#EsO'zQ[O'#EsQOQWOOP(UO#tO'#C_POOO)C@[)C@[OOQP'#Cg'#CgOOQP,59Q,59QO#kQ[O,59QO(aQ[O'#E[O({QWO,58{O)TQ[O,59SO$qQ[O,59oO$vQ[O,59rO(aQ[O,59uO(aQ[O,59wO(aQ[O,59xO)`Q[O'#DbOOQS,58{,58{OOQP'#Ck'#CkOOQO'#DR'#DROOQP,59S,59SO)gQWO,59SO)lQWO,59SOOQP'#DV'#DVOOQP,59o,59oOOQO'#DX'#DXO)qQ`O,59rOOQS'#Cp'#CpO${QdO'#CqO)yQvO'#CsO+ZQtO,5:ROOQO'#Cx'#CxO)lQWO'#CwO+oQWO'#CyO+tQ[O'#DOOOQS'#Ep'#EpOOQO'#Dj'#DjO+|Q[O'#DqO,[QWO'#EtO&`Q[O'#DoO,jQWO'#DrOOQO'#Eu'#EuO)OQWO,5:`O,oQpO,5:bOOQS'#Dz'#DzO,wQWO,5:dO,|Q[O,5:dOOQO'#D}'#D}O-UQWO,5:gO-ZQWO,5:mO-cQWO,5:oOOQS-E8U-E8UO-kQdO,59}O-{Q[O'#E^O.YQWO,5;_O.YQWO,5;_POOO'#EV'#EVP.eO#tO,58yPOOO,58y,58yOOQP1G.l1G.lO/[QXO,5:vOOQO-E8Y-E8YOOQS1G.g1G.gOOQP1G.n1G.nO)gQWO1G.nO)lQWO1G.nOOQP1G/Z1G/ZO/iQ`O1G/^O0SQXO1G/aO0jQXO1G/cO1QQXO1G/dO1hQWO,59|O1mQ[O'#DSO1tQdO'#CoOOQP1G/^1G/^O${QdO1G/^O1{QpO,59]OOQS,59_,59_O${QdO,59aO2TQWO1G/mOOQS,59c,59cO2YQ!bO,59eOOQS'#DP'#DPOOQS'#EY'#EYO2eQ[O,59jOOQS,59j,59jO2mQWO'#DjO2xQWO,5:VO2}QWO,5:]O&`Q[O,5:XO&`Q[O'#E_O3VQWO,5;`O3bQWO,5:ZO(aQ[O,5:^OOQS1G/z1G/zOOQS1G/|1G/|OOQS1G0O1G0OO3sQWO1G0OO3xQdO'#EOOOQS1G0R1G0ROOQS1G0X1G0XOOQS1G0Z1G0ZO4TQtO1G/iOOQO1G/i1G/iOOQO,5:x,5:xO4kQ[O,5:xOOQO-E8[-E8[O4xQWO1G0yPOOO-E8T-E8TPOOO1G.e1G.eOOQP7+$Y7+$YOOQP7+$x7+$xO${QdO7+$xOOQS1G/h1G/hO5TQXO'#ErO5[QWO,59nO5aQtO'#EXO6XQdO'#EoO6cQWO,59ZO6hQpO7+$xOOQS1G.w1G.wOOQS1G.{1G.{OOQS7+%X7+%XOOQS1G/P1G/PO6pQWO1G/POOQS-E8W-E8WOOQS1G/U1G/UO${QdO1G/qOOQO1G/w1G/wOOQO1G/s1G/sO6uQWO,5:yOOQO-E8]-E8]O7TQXO1G/xOOQS7+%j7+%jO7[QYO'#CsOOQO'#EQ'#EQO7gQ`O'#EPOOQO'#EP'#EPO7rQWO'#E`O7zQdO,5:jOOQS,5:j,5:jO8VQtO'#E]O${QdO'#E]O9WQdO7+%TOOQO7+%T7+%TOOQO1G0d1G0dO9kQpO<<HdO9sQWO,5;^OOQP1G/Y1G/YOOQS-E8V-E8VO${QdO'#EZO9{QWO,5;ZOOQT1G.u1G.uOOQP<<Hd<<HdOOQS7+$k7+$kO:TQdO7+%]OOQO7+%d7+%dOOQO,5:k,5:kO3{QdO'#EaO7rQWO,5:zOOQS,5:z,5:zOOQS-E8^-E8^OOQS1G0U1G0UO:[QtO,5:wOOQS-E8Z-E8ZOOQO<<Ho<<HoOOQPAN>OAN>OO;]QdO,5:uOOQO-E8X-E8XOOQO<<Hw<<HwOOQO,5:{,5:{OOQO-E8_-E8_OOQS1G0f1G0f",
      stateData: ";o~O#ZOS#[QQ~OUYOXYO]VO^VOqXOxWO![aO!]ZO!i[O!k]O!m^O!p_O!v`O#XRO#bTO~OQfOUYOXYO]VO^VOqXOxWO![aO!]ZO!i[O!k]O!m^O!p_O!v`O#XeO#bTO~O#U#gP~P!ZO#[jO~O#XlO~O]qO^qOqsOtoOxrO!OtO!RvO#VuO#bnO~O!TwO~P#pO`}O#WzO#XyO~O#X!OO~O#X!QO~OQ![Ob!TOf![Oh![On!YOq!ZO#W!WO#X!SO#e!UO~Ob!^O!d!`O!g!aO#X!]O!T#hP~Oh!fOn!YO#X!eO~Oh!hO#X!hO~Ob!^O!d!`O!g!aO#X!]O~O!Y#hP~P%jO]WX]!WX^WXqWXtWXxWX!OWX!RWX!TWX#VWX#bWX~O]!mO~O!Y!nO#U#gX!S#gX~O#U#gX!S#gX~P!ZO#]!qO#^!qO#_!sO~OUYOXYO]VO^VOqXOxWO#XRO#bTO~OtoO!TwO~O`!zO#WzO#XyO~O!S#gP~P!ZOb#RO~Ob#SO~Op#TO|#UO~OP#WObgXjgX!YgX!dgX!ggX#XgXagXQgXfgXhgXngXqgXtgX!XgX#UgX#WgX#egXpgX!SgX~Ob!^Oj#XO!d!`O!g!aO#X!]O!Y#hP~Ob#[O~Op#`O#X#]O~Ob!^O!d!`O!g!aO#X#aO~Ot#eO!b#dO!T#hX!Y#hX~Ob#hO~Oj#XO!Y#jO~O!Y#kO~Oh#lOn!YO~O!T#mO~O!TwO!b#dO~O!TwO!Y#pO~O!X#rO!Y!Va#U!Va!S!Va~P${O!Y#QX#U#QX!S#QX~P!ZO!Y!nO#U#ga!S#ga~O#]!qO#^!qO#_#xO~O]qO^qOqsOxrO!OtO!RvO#VuO#bnO~Ot#Oa!T#Oaa#Oa~P.pOp#zO|#{O~O]qO^qOqsOxrO#bnO~Ot}i!O}i!R}i!T}i#V}ia}i~P/qOt!Pi!O!Pi!R!Pi!T!Pi#V!Pia!Pi~P/qOt!Qi!O!Qi!R!Qi!T!Qi#V!Qia!Qi~P/qO!S#|O~Oa#fP~P(aOa#cP~P${Oa$TOj#XO~O!Y$VO~Oa$WOh$XOo$XO~Op$ZO#X#]O~O]!`Xa!^X!b!^X~O]$[O~Oa$]O!b#dO~Ot#eO!T#ha!Y#ha~O!b#dOt!ca!T!ca!Y!caa!ca~O!Y$bO~O!S$iO#X$dO#e$cO~Oj#XOt$kO!X$mO!Y!Vi#U!Vi!S!Vi~P${O!Y#Qa#U#Qa!S#Qa~P!ZO!Y!nO#U#gi!S#gi~Oa#fX~P#pOa$qO~Oj#XOQ!{Xa!{Xb!{Xf!{Xh!{Xn!{Xq!{Xt!{X#W!{X#X!{X#e!{X~Ot$sOa#cX~P${Oa$uO~Oj#XOp$vO~Oa$wO~O!b#dOt#Ra!T#Ra!Y#Ra~Oa$yO~P.pOP#WOtgX!TgX~O#e$cOt!sX!T!sX~Ot${O!TwO~O!S%PO#X$dO#e$cO~Oj#XOQ#PXb#PXf#PXh#PXn#PXq#PXt#PX!X#PX!Y#PX#U#PX#W#PX#X#PX#e#PX!S#PX~Ot$kO!X%SO!Y!Vq#U!Vq!S!Vq~P${Oj#XOp%TO~OtoOa#fa~Ot$sOa#ca~Oa%WO~P${Oj#XOQ#Pab#Paf#Pah#Pan#Paq#Pat#Pa!X#Pa!Y#Pa#U#Pa#W#Pa#X#Pa#e#Pa!S#Pa~Oa!}at!}a~P${O#Zo#[#ej!R#e~",
      goto: "-g#jPPP#kP#nP#w$WP#w$g#wPP$mPPP$s$|$|P%`P$|P$|%z&^PPPP$|&vP&z'Q#wP'W#w'^P#wP#w#wPPP'd'y(WPP#nPP(_(_(i(_P(_P(_(_P#nP#nP#nP(l#nP(o(r(u(|#nP#nP)R)X)h)v)|*S*^*d*n*t*zPPPPPPPPPP+Q+ZP+v+yP,o,r,x-RRkQ_bOPdhw!n#tkYOPdhotuvw!n#R#h#tkSOPdhotuvw!n#R#h#tQmTR!tnQ{VR!xqQ!x}Q#Z!XR#y!zq![Z]!T!m#S#U#X#q#{$Q$[$k$l$s$x%Up![Z]!T!m#S#U#X#q#{$Q$[$k$l$s$x%UU$f#m$h${R$z$eq!XZ]!T!m#S#U#X#q#{$Q$[$k$l$s$x%Up![Z]!T!m#S#U#X#q#{$Q$[$k$l$s$x%UQ!f^R#l!gT#^!Z#_Q|VR!yqQ!x|R#y!yQ!PWR!{rQ!RXR!|sQxUQ!wpQ#i!cQ#o!jQ#p!kQ$}$gR%Z$|SgPwQ!phQ#s!nR$n#tZfPhw!n#ta!b[`a!V!^!`#d#eR#b!^R!g^R!i_R#n!iS$g#m$hR%X${V$e#m$h${Q!rjR#w!rQdOShPwU!ldh#tR#t!nQ$Q#SU$r$Q$x%UQ$x$[R%U$sQ#_!ZR$Y#_Q$t$QR%V$tQpUS!vp$pR$p#}Q$l#qR%R$lQ!ogS#u!o#vR#v!pQ#f!_R$`#fQ$h#mR%O$hQ$|$gR%Y$|_cOPdhw!n#t^UOPdhw!n#tQ!uoQ!}tQ#OuQ#PvQ#}#RR$a#hR$R#SQ!VZQ!d]Q#V!TQ#q!m[$P#S$Q$[$s$x%UQ$S#UQ$U#XS$j#q$lQ$o#{R%Q$kR$O#RQiPR#QwQ!c[Q!kaR#Y!VU!_[a!VQ!j`Q#c!^Q#g!`Q$^#dR$_#e",
      nodeNames: "⚠ Unit VariableName Comment StyleSheet RuleSet UniversalSelector TagSelector TagName NestingSelector ClassSelector ClassName PseudoClassSelector : :: PseudoClassName PseudoClassName ) ( ArgList ValueName ParenthesizedValue ColorLiteral NumberLiteral StringLiteral BinaryExpression BinOp CallExpression Callee CallLiteral CallTag ParenthesizedContent ] [ LineNames LineName , PseudoClassName ArgList IdSelector # IdName AttributeSelector AttributeName MatchOp ChildSelector ChildOp DescendantSelector SiblingSelector SiblingOp } { Block Declaration PropertyName Important ; ImportStatement AtKeyword import KeywordQuery FeatureQuery FeatureName BinaryQuery LogicOp UnaryQuery UnaryQueryOp ParenthesizedQuery SelectorQuery selector MediaStatement media CharsetStatement charset NamespaceStatement namespace NamespaceName KeyframesStatement keyframes KeyframeName KeyframeList KeyframeSelector KeyframeRangeName SupportsStatement supports AtRule Styles",
      maxTerm: 117,
      nodeProps: [
        ["isolate", -2,3,24,""],
        ["openedBy", 17,"(",32,"[",50,"{"],
        ["closedBy", 18,")",33,"]",51,"}"]
      ],
      propSources: [cssHighlighting],
      skippedNodes: [0,3,87],
      repeatNodeCount: 11,
      tokenData: "J^~R!^OX$}X^%u^p$}pq%uqr)Xrs.Rst/utu6duv$}vw7^wx7oxy9^yz9oz{9t{|:_|}?Q}!O?c!O!P@Q!P!Q@i!Q![Ab![!]B]!]!^CX!^!_$}!_!`Cj!`!aC{!a!b$}!b!cDw!c!}$}!}#OFa#O#P$}#P#QFr#Q#R6d#R#T$}#T#UGT#U#c$}#c#dHf#d#o$}#o#pH{#p#q6d#q#rI^#r#sIo#s#y$}#y#z%u#z$f$}$f$g%u$g#BY$}#BY#BZ%u#BZ$IS$}$IS$I_%u$I_$I|$}$I|$JO%u$JO$JT$}$JT$JU%u$JU$KV$}$KV$KW%u$KW&FU$}&FU&FV%u&FV;'S$};'S;=`JW<%lO$}`%QSOy%^z;'S%^;'S;=`%o<%lO%^`%cSo`Oy%^z;'S%^;'S;=`%o<%lO%^`%rP;=`<%l%^~%zh#Z~OX%^X^'f^p%^pq'fqy%^z#y%^#y#z'f#z$f%^$f$g'f$g#BY%^#BY#BZ'f#BZ$IS%^$IS$I_'f$I_$I|%^$I|$JO'f$JO$JT%^$JT$JU'f$JU$KV%^$KV$KW'f$KW&FU%^&FU&FV'f&FV;'S%^;'S;=`%o<%lO%^~'mh#Z~o`OX%^X^'f^p%^pq'fqy%^z#y%^#y#z'f#z$f%^$f$g'f$g#BY%^#BY#BZ'f#BZ$IS%^$IS$I_'f$I_$I|%^$I|$JO'f$JO$JT%^$JT$JU'f$JU$KV%^$KV$KW'f$KW&FU%^&FU&FV'f&FV;'S%^;'S;=`%o<%lO%^l)[UOy%^z#]%^#]#^)n#^;'S%^;'S;=`%o<%lO%^l)sUo`Oy%^z#a%^#a#b*V#b;'S%^;'S;=`%o<%lO%^l*[Uo`Oy%^z#d%^#d#e*n#e;'S%^;'S;=`%o<%lO%^l*sUo`Oy%^z#c%^#c#d+V#d;'S%^;'S;=`%o<%lO%^l+[Uo`Oy%^z#f%^#f#g+n#g;'S%^;'S;=`%o<%lO%^l+sUo`Oy%^z#h%^#h#i,V#i;'S%^;'S;=`%o<%lO%^l,[Uo`Oy%^z#T%^#T#U,n#U;'S%^;'S;=`%o<%lO%^l,sUo`Oy%^z#b%^#b#c-V#c;'S%^;'S;=`%o<%lO%^l-[Uo`Oy%^z#h%^#h#i-n#i;'S%^;'S;=`%o<%lO%^l-uS!X[o`Oy%^z;'S%^;'S;=`%o<%lO%^~.UWOY.RZr.Rrs.ns#O.R#O#P.s#P;'S.R;'S;=`/o<%lO.R~.sOh~~.vRO;'S.R;'S;=`/P;=`O.R~/SXOY.RZr.Rrs.ns#O.R#O#P.s#P;'S.R;'S;=`/o;=`<%l.R<%lO.R~/rP;=`<%l.Rn/zYxQOy%^z!Q%^!Q![0j![!c%^!c!i0j!i#T%^#T#Z0j#Z;'S%^;'S;=`%o<%lO%^l0oYo`Oy%^z!Q%^!Q![1_![!c%^!c!i1_!i#T%^#T#Z1_#Z;'S%^;'S;=`%o<%lO%^l1dYo`Oy%^z!Q%^!Q![2S![!c%^!c!i2S!i#T%^#T#Z2S#Z;'S%^;'S;=`%o<%lO%^l2ZYf[o`Oy%^z!Q%^!Q![2y![!c%^!c!i2y!i#T%^#T#Z2y#Z;'S%^;'S;=`%o<%lO%^l3QYf[o`Oy%^z!Q%^!Q![3p![!c%^!c!i3p!i#T%^#T#Z3p#Z;'S%^;'S;=`%o<%lO%^l3uYo`Oy%^z!Q%^!Q![4e![!c%^!c!i4e!i#T%^#T#Z4e#Z;'S%^;'S;=`%o<%lO%^l4lYf[o`Oy%^z!Q%^!Q![5[![!c%^!c!i5[!i#T%^#T#Z5[#Z;'S%^;'S;=`%o<%lO%^l5aYo`Oy%^z!Q%^!Q![6P![!c%^!c!i6P!i#T%^#T#Z6P#Z;'S%^;'S;=`%o<%lO%^l6WSf[o`Oy%^z;'S%^;'S;=`%o<%lO%^d6gUOy%^z!_%^!_!`6y!`;'S%^;'S;=`%o<%lO%^d7QS|So`Oy%^z;'S%^;'S;=`%o<%lO%^b7cSXQOy%^z;'S%^;'S;=`%o<%lO%^~7rWOY7oZw7owx.nx#O7o#O#P8[#P;'S7o;'S;=`9W<%lO7o~8_RO;'S7o;'S;=`8h;=`O7o~8kXOY7oZw7owx.nx#O7o#O#P8[#P;'S7o;'S;=`9W;=`<%l7o<%lO7o~9ZP;=`<%l7on9cSb^Oy%^z;'S%^;'S;=`%o<%lO%^~9tOa~n9{UUQjWOy%^z!_%^!_!`6y!`;'S%^;'S;=`%o<%lO%^n:fWjW!RQOy%^z!O%^!O!P;O!P!Q%^!Q![>T![;'S%^;'S;=`%o<%lO%^l;TUo`Oy%^z!Q%^!Q![;g![;'S%^;'S;=`%o<%lO%^l;nYo`#e[Oy%^z!Q%^!Q![;g![!g%^!g!h<^!h#X%^#X#Y<^#Y;'S%^;'S;=`%o<%lO%^l<cYo`Oy%^z{%^{|=R|}%^}!O=R!O!Q%^!Q![=j![;'S%^;'S;=`%o<%lO%^l=WUo`Oy%^z!Q%^!Q![=j![;'S%^;'S;=`%o<%lO%^l=qUo`#e[Oy%^z!Q%^!Q![=j![;'S%^;'S;=`%o<%lO%^l>[[o`#e[Oy%^z!O%^!O!P;g!P!Q%^!Q![>T![!g%^!g!h<^!h#X%^#X#Y<^#Y;'S%^;'S;=`%o<%lO%^n?VSt^Oy%^z;'S%^;'S;=`%o<%lO%^l?hWjWOy%^z!O%^!O!P;O!P!Q%^!Q![>T![;'S%^;'S;=`%o<%lO%^n@VU#bQOy%^z!Q%^!Q![;g![;'S%^;'S;=`%o<%lO%^~@nTjWOy%^z{@}{;'S%^;'S;=`%o<%lO%^~AUSo`#[~Oy%^z;'S%^;'S;=`%o<%lO%^lAg[#e[Oy%^z!O%^!O!P;g!P!Q%^!Q![>T![!g%^!g!h<^!h#X%^#X#Y<^#Y;'S%^;'S;=`%o<%lO%^bBbU]QOy%^z![%^![!]Bt!];'S%^;'S;=`%o<%lO%^bB{S^Qo`Oy%^z;'S%^;'S;=`%o<%lO%^nC^S!Y^Oy%^z;'S%^;'S;=`%o<%lO%^dCoS|SOy%^z;'S%^;'S;=`%o<%lO%^bDQU!OQOy%^z!`%^!`!aDd!a;'S%^;'S;=`%o<%lO%^bDkS!OQo`Oy%^z;'S%^;'S;=`%o<%lO%^bDzWOy%^z!c%^!c!}Ed!}#T%^#T#oEd#o;'S%^;'S;=`%o<%lO%^bEk[![Qo`Oy%^z}%^}!OEd!O!Q%^!Q![Ed![!c%^!c!}Ed!}#T%^#T#oEd#o;'S%^;'S;=`%o<%lO%^nFfSq^Oy%^z;'S%^;'S;=`%o<%lO%^nFwSp^Oy%^z;'S%^;'S;=`%o<%lO%^bGWUOy%^z#b%^#b#cGj#c;'S%^;'S;=`%o<%lO%^bGoUo`Oy%^z#W%^#W#XHR#X;'S%^;'S;=`%o<%lO%^bHYS!bQo`Oy%^z;'S%^;'S;=`%o<%lO%^bHiUOy%^z#f%^#f#gHR#g;'S%^;'S;=`%o<%lO%^fIQS!TUOy%^z;'S%^;'S;=`%o<%lO%^nIcS!S^Oy%^z;'S%^;'S;=`%o<%lO%^fItU!RQOy%^z!_%^!_!`6y!`;'S%^;'S;=`%o<%lO%^`JZP;=`<%l$}",
      tokenizers: [descendant, unitToken, identifiers, 1, 2, 3, 4, new LocalTokenGroup("m~RRYZ[z{a~~g~aO#^~~dP!P!Qg~lO#_~~", 28, 105)],
      topRules: {"StyleSheet":[0,4],"Styles":[1,86]},
      specialized: [{term: 100, get: (value) => spec_callee[value] || -1},{term: 58, get: (value) => spec_AtKeyword[value] || -1},{term: 101, get: (value) => spec_identifier[value] || -1}],
      tokenPrec: 1219
    });

    let _properties = null;
    function properties() {
        if (!_properties && typeof document == "object" && document.body) {
            let { style } = document.body, names = [], seen = new Set;
            for (let prop in style)
                if (prop != "cssText" && prop != "cssFloat") {
                    if (typeof style[prop] == "string") {
                        if (/[A-Z]/.test(prop))
                            prop = prop.replace(/[A-Z]/g, ch => "-" + ch.toLowerCase());
                        if (!seen.has(prop)) {
                            names.push(prop);
                            seen.add(prop);
                        }
                    }
                }
            _properties = names.sort().map(name => ({ type: "property", label: name, apply: name + ": " }));
        }
        return _properties || [];
    }
    const pseudoClasses = /*@__PURE__*/[
        "active", "after", "any-link", "autofill", "backdrop", "before",
        "checked", "cue", "default", "defined", "disabled", "empty",
        "enabled", "file-selector-button", "first", "first-child",
        "first-letter", "first-line", "first-of-type", "focus",
        "focus-visible", "focus-within", "fullscreen", "has", "host",
        "host-context", "hover", "in-range", "indeterminate", "invalid",
        "is", "lang", "last-child", "last-of-type", "left", "link", "marker",
        "modal", "not", "nth-child", "nth-last-child", "nth-last-of-type",
        "nth-of-type", "only-child", "only-of-type", "optional", "out-of-range",
        "part", "placeholder", "placeholder-shown", "read-only", "read-write",
        "required", "right", "root", "scope", "selection", "slotted", "target",
        "target-text", "valid", "visited", "where"
    ].map(name => ({ type: "class", label: name }));
    const values = /*@__PURE__*/[
        "above", "absolute", "activeborder", "additive", "activecaption", "after-white-space",
        "ahead", "alias", "all", "all-scroll", "alphabetic", "alternate", "always",
        "antialiased", "appworkspace", "asterisks", "attr", "auto", "auto-flow", "avoid", "avoid-column",
        "avoid-page", "avoid-region", "axis-pan", "background", "backwards", "baseline", "below",
        "bidi-override", "blink", "block", "block-axis", "bold", "bolder", "border", "border-box",
        "both", "bottom", "break", "break-all", "break-word", "bullets", "button", "button-bevel",
        "buttonface", "buttonhighlight", "buttonshadow", "buttontext", "calc", "capitalize",
        "caps-lock-indicator", "caption", "captiontext", "caret", "cell", "center", "checkbox", "circle",
        "cjk-decimal", "clear", "clip", "close-quote", "col-resize", "collapse", "color", "color-burn",
        "color-dodge", "column", "column-reverse", "compact", "condensed", "contain", "content",
        "contents", "content-box", "context-menu", "continuous", "copy", "counter", "counters", "cover",
        "crop", "cross", "crosshair", "currentcolor", "cursive", "cyclic", "darken", "dashed", "decimal",
        "decimal-leading-zero", "default", "default-button", "dense", "destination-atop", "destination-in",
        "destination-out", "destination-over", "difference", "disc", "discard", "disclosure-closed",
        "disclosure-open", "document", "dot-dash", "dot-dot-dash", "dotted", "double", "down", "e-resize",
        "ease", "ease-in", "ease-in-out", "ease-out", "element", "ellipse", "ellipsis", "embed", "end",
        "ethiopic-abegede-gez", "ethiopic-halehame-aa-er", "ethiopic-halehame-gez", "ew-resize", "exclusion",
        "expanded", "extends", "extra-condensed", "extra-expanded", "fantasy", "fast", "fill", "fill-box",
        "fixed", "flat", "flex", "flex-end", "flex-start", "footnotes", "forwards", "from",
        "geometricPrecision", "graytext", "grid", "groove", "hand", "hard-light", "help", "hidden", "hide",
        "higher", "highlight", "highlighttext", "horizontal", "hsl", "hsla", "hue", "icon", "ignore",
        "inactiveborder", "inactivecaption", "inactivecaptiontext", "infinite", "infobackground", "infotext",
        "inherit", "initial", "inline", "inline-axis", "inline-block", "inline-flex", "inline-grid",
        "inline-table", "inset", "inside", "intrinsic", "invert", "italic", "justify", "keep-all",
        "landscape", "large", "larger", "left", "level", "lighter", "lighten", "line-through", "linear",
        "linear-gradient", "lines", "list-item", "listbox", "listitem", "local", "logical", "loud", "lower",
        "lower-hexadecimal", "lower-latin", "lower-norwegian", "lowercase", "ltr", "luminosity", "manipulation",
        "match", "matrix", "matrix3d", "medium", "menu", "menutext", "message-box", "middle", "min-intrinsic",
        "mix", "monospace", "move", "multiple", "multiple_mask_images", "multiply", "n-resize", "narrower",
        "ne-resize", "nesw-resize", "no-close-quote", "no-drop", "no-open-quote", "no-repeat", "none",
        "normal", "not-allowed", "nowrap", "ns-resize", "numbers", "numeric", "nw-resize", "nwse-resize",
        "oblique", "opacity", "open-quote", "optimizeLegibility", "optimizeSpeed", "outset", "outside",
        "outside-shape", "overlay", "overline", "padding", "padding-box", "painted", "page", "paused",
        "perspective", "pinch-zoom", "plus-darker", "plus-lighter", "pointer", "polygon", "portrait",
        "pre", "pre-line", "pre-wrap", "preserve-3d", "progress", "push-button", "radial-gradient", "radio",
        "read-only", "read-write", "read-write-plaintext-only", "rectangle", "region", "relative", "repeat",
        "repeating-linear-gradient", "repeating-radial-gradient", "repeat-x", "repeat-y", "reset", "reverse",
        "rgb", "rgba", "ridge", "right", "rotate", "rotate3d", "rotateX", "rotateY", "rotateZ", "round",
        "row", "row-resize", "row-reverse", "rtl", "run-in", "running", "s-resize", "sans-serif", "saturation",
        "scale", "scale3d", "scaleX", "scaleY", "scaleZ", "screen", "scroll", "scrollbar", "scroll-position",
        "se-resize", "self-start", "self-end", "semi-condensed", "semi-expanded", "separate", "serif", "show",
        "single", "skew", "skewX", "skewY", "skip-white-space", "slide", "slider-horizontal",
        "slider-vertical", "sliderthumb-horizontal", "sliderthumb-vertical", "slow", "small", "small-caps",
        "small-caption", "smaller", "soft-light", "solid", "source-atop", "source-in", "source-out",
        "source-over", "space", "space-around", "space-between", "space-evenly", "spell-out", "square", "start",
        "static", "status-bar", "stretch", "stroke", "stroke-box", "sub", "subpixel-antialiased", "svg_masks",
        "super", "sw-resize", "symbolic", "symbols", "system-ui", "table", "table-caption", "table-cell",
        "table-column", "table-column-group", "table-footer-group", "table-header-group", "table-row",
        "table-row-group", "text", "text-bottom", "text-top", "textarea", "textfield", "thick", "thin",
        "threeddarkshadow", "threedface", "threedhighlight", "threedlightshadow", "threedshadow", "to", "top",
        "transform", "translate", "translate3d", "translateX", "translateY", "translateZ", "transparent",
        "ultra-condensed", "ultra-expanded", "underline", "unidirectional-pan", "unset", "up", "upper-latin",
        "uppercase", "url", "var", "vertical", "vertical-text", "view-box", "visible", "visibleFill",
        "visiblePainted", "visibleStroke", "visual", "w-resize", "wait", "wave", "wider", "window", "windowframe",
        "windowtext", "words", "wrap", "wrap-reverse", "x-large", "x-small", "xor", "xx-large", "xx-small"
    ].map(name => ({ type: "keyword", label: name })).concat(/*@__PURE__*/[
        "aliceblue", "antiquewhite", "aqua", "aquamarine", "azure", "beige",
        "bisque", "black", "blanchedalmond", "blue", "blueviolet", "brown",
        "burlywood", "cadetblue", "chartreuse", "chocolate", "coral", "cornflowerblue",
        "cornsilk", "crimson", "cyan", "darkblue", "darkcyan", "darkgoldenrod",
        "darkgray", "darkgreen", "darkkhaki", "darkmagenta", "darkolivegreen",
        "darkorange", "darkorchid", "darkred", "darksalmon", "darkseagreen",
        "darkslateblue", "darkslategray", "darkturquoise", "darkviolet",
        "deeppink", "deepskyblue", "dimgray", "dodgerblue", "firebrick",
        "floralwhite", "forestgreen", "fuchsia", "gainsboro", "ghostwhite",
        "gold", "goldenrod", "gray", "grey", "green", "greenyellow", "honeydew",
        "hotpink", "indianred", "indigo", "ivory", "khaki", "lavender",
        "lavenderblush", "lawngreen", "lemonchiffon", "lightblue", "lightcoral",
        "lightcyan", "lightgoldenrodyellow", "lightgray", "lightgreen", "lightpink",
        "lightsalmon", "lightseagreen", "lightskyblue", "lightslategray",
        "lightsteelblue", "lightyellow", "lime", "limegreen", "linen", "magenta",
        "maroon", "mediumaquamarine", "mediumblue", "mediumorchid", "mediumpurple",
        "mediumseagreen", "mediumslateblue", "mediumspringgreen", "mediumturquoise",
        "mediumvioletred", "midnightblue", "mintcream", "mistyrose", "moccasin",
        "navajowhite", "navy", "oldlace", "olive", "olivedrab", "orange", "orangered",
        "orchid", "palegoldenrod", "palegreen", "paleturquoise", "palevioletred",
        "papayawhip", "peachpuff", "peru", "pink", "plum", "powderblue",
        "purple", "rebeccapurple", "red", "rosybrown", "royalblue", "saddlebrown",
        "salmon", "sandybrown", "seagreen", "seashell", "sienna", "silver", "skyblue",
        "slateblue", "slategray", "snow", "springgreen", "steelblue", "tan",
        "teal", "thistle", "tomato", "turquoise", "violet", "wheat", "white",
        "whitesmoke", "yellow", "yellowgreen"
    ].map(name => ({ type: "constant", label: name })));
    const tags = /*@__PURE__*/[
        "a", "abbr", "address", "article", "aside", "b", "bdi", "bdo", "blockquote", "body",
        "br", "button", "canvas", "caption", "cite", "code", "col", "colgroup", "dd", "del",
        "details", "dfn", "dialog", "div", "dl", "dt", "em", "figcaption", "figure", "footer",
        "form", "header", "hgroup", "h1", "h2", "h3", "h4", "h5", "h6", "hr", "html", "i", "iframe",
        "img", "input", "ins", "kbd", "label", "legend", "li", "main", "meter", "nav", "ol", "output",
        "p", "pre", "ruby", "section", "select", "small", "source", "span", "strong", "sub", "summary",
        "sup", "table", "tbody", "td", "template", "textarea", "tfoot", "th", "thead", "tr", "u", "ul"
    ].map(name => ({ type: "type", label: name }));
    const atRules = /*@__PURE__*/[
        "@charset", "@color-profile", "@container", "@counter-style", "@font-face", "@font-feature-values",
        "@font-palette-values", "@import", "@keyframes", "@layer", "@media", "@namespace", "@page",
        "@position-try", "@property", "@scope", "@starting-style", "@supports", "@view-transition"
    ].map(label => ({ type: "keyword", label }));
    const identifier$1 = /^(\w[\w-]*|-\w[\w-]*|)$/, variable = /^-(-[\w-]*)?$/;
    function isVarArg(node, doc) {
        var _a;
        if (node.name == "(" || node.type.isError)
            node = node.parent || node;
        if (node.name != "ArgList")
            return false;
        let callee = (_a = node.parent) === null || _a === void 0 ? void 0 : _a.firstChild;
        if ((callee === null || callee === void 0 ? void 0 : callee.name) != "Callee")
            return false;
        return doc.sliceString(callee.from, callee.to) == "var";
    }
    const VariablesByNode = /*@__PURE__*/new NodeWeakMap();
    const declSelector = ["Declaration"];
    function astTop(node) {
        for (let cur = node;;) {
            if (cur.type.isTop)
                return cur;
            if (!(cur = cur.parent))
                return node;
        }
    }
    function variableNames(doc, node, isVariable) {
        if (node.to - node.from > 4096) {
            let known = VariablesByNode.get(node);
            if (known)
                return known;
            let result = [], seen = new Set, cursor = node.cursor(IterMode.IncludeAnonymous);
            if (cursor.firstChild())
                do {
                    for (let option of variableNames(doc, cursor.node, isVariable))
                        if (!seen.has(option.label)) {
                            seen.add(option.label);
                            result.push(option);
                        }
                } while (cursor.nextSibling());
            VariablesByNode.set(node, result);
            return result;
        }
        else {
            let result = [], seen = new Set;
            node.cursor().iterate(node => {
                var _a;
                if (isVariable(node) && node.matchContext(declSelector) && ((_a = node.node.nextSibling) === null || _a === void 0 ? void 0 : _a.name) == ":") {
                    let name = doc.sliceString(node.from, node.to);
                    if (!seen.has(name)) {
                        seen.add(name);
                        result.push({ label: name, type: "variable" });
                    }
                }
            });
            return result;
        }
    }
    /**
    Create a completion source for a CSS dialect, providing a
    predicate for determining what kind of syntax node can act as a
    completable variable. This is used by language modes like Sass and
    Less to reuse this package's completion logic.
    */
    const defineCSSCompletionSource = (isVariable) => context => {
        let { state, pos } = context, node = syntaxTree(state).resolveInner(pos, -1);
        let isDash = node.type.isError && node.from == node.to - 1 && state.doc.sliceString(node.from, node.to) == "-";
        if (node.name == "PropertyName" ||
            (isDash || node.name == "TagName") && /^(Block|Styles)$/.test(node.resolve(node.to).name))
            return { from: node.from, options: properties(), validFor: identifier$1 };
        if (node.name == "ValueName")
            return { from: node.from, options: values, validFor: identifier$1 };
        if (node.name == "PseudoClassName")
            return { from: node.from, options: pseudoClasses, validFor: identifier$1 };
        if (isVariable(node) || (context.explicit || isDash) && isVarArg(node, state.doc))
            return { from: isVariable(node) || isDash ? node.from : pos,
                options: variableNames(state.doc, astTop(node), isVariable),
                validFor: variable };
        if (node.name == "TagName") {
            for (let { parent } = node; parent; parent = parent.parent)
                if (parent.name == "Block")
                    return { from: node.from, options: properties(), validFor: identifier$1 };
            return { from: node.from, options: tags, validFor: identifier$1 };
        }
        if (node.name == "AtKeyword")
            return { from: node.from, options: atRules, validFor: identifier$1 };
        if (!context.explicit)
            return null;
        let above = node.resolve(pos), before = above.childBefore(pos);
        if (before && before.name == ":" && above.name == "PseudoClassSelector")
            return { from: pos, options: pseudoClasses, validFor: identifier$1 };
        if (before && before.name == ":" && above.name == "Declaration" || above.name == "ArgList")
            return { from: pos, options: values, validFor: identifier$1 };
        if (above.name == "Block" || above.name == "Styles")
            return { from: pos, options: properties(), validFor: identifier$1 };
        return null;
    };
    /**
    CSS property, variable, and value keyword completion source.
    */
    const cssCompletionSource = /*@__PURE__*/defineCSSCompletionSource(n => n.name == "VariableName");

    /**
    A language provider based on the [Lezer CSS
    parser](https://github.com/lezer-parser/css), extended with
    highlighting and indentation information.
    */
    const cssLanguage = /*@__PURE__*/LRLanguage.define({
        name: "css",
        parser: /*@__PURE__*/parser$3.configure({
            props: [
                /*@__PURE__*/indentNodeProp.add({
                    Declaration: /*@__PURE__*/continuedIndent()
                }),
                /*@__PURE__*/foldNodeProp.add({
                    "Block KeyframeList": foldInside
                })
            ]
        }),
        languageData: {
            commentTokens: { block: { open: "/*", close: "*/" } },
            indentOnInput: /^\s*\}$/,
            wordChars: "-"
        }
    });
    /**
    Language support for CSS.
    */
    function css() {
        return new LanguageSupport(cssLanguage, cssLanguage.data.of({ autocomplete: cssCompletionSource }));
    }

    const Targets = ["_blank", "_self", "_top", "_parent"];
    const Charsets = ["ascii", "utf-8", "utf-16", "latin1", "latin1"];
    const Methods = ["get", "post", "put", "delete"];
    const Encs = ["application/x-www-form-urlencoded", "multipart/form-data", "text/plain"];
    const Bool$1 = ["true", "false"];
    const S$3 = {}; // Empty tag spec
    const Tags = {
        a: {
            attrs: {
                href: null, ping: null, type: null,
                media: null,
                target: Targets,
                hreflang: null
            }
        },
        abbr: S$3,
        address: S$3,
        area: {
            attrs: {
                alt: null, coords: null, href: null, target: null, ping: null,
                media: null, hreflang: null, type: null,
                shape: ["default", "rect", "circle", "poly"]
            }
        },
        article: S$3,
        aside: S$3,
        audio: {
            attrs: {
                src: null, mediagroup: null,
                crossorigin: ["anonymous", "use-credentials"],
                preload: ["none", "metadata", "auto"],
                autoplay: ["autoplay"],
                loop: ["loop"],
                controls: ["controls"]
            }
        },
        b: S$3,
        base: { attrs: { href: null, target: Targets } },
        bdi: S$3,
        bdo: S$3,
        blockquote: { attrs: { cite: null } },
        body: S$3,
        br: S$3,
        button: {
            attrs: {
                form: null, formaction: null, name: null, value: null,
                autofocus: ["autofocus"],
                disabled: ["autofocus"],
                formenctype: Encs,
                formmethod: Methods,
                formnovalidate: ["novalidate"],
                formtarget: Targets,
                type: ["submit", "reset", "button"]
            }
        },
        canvas: { attrs: { width: null, height: null } },
        caption: S$3,
        center: S$3,
        cite: S$3,
        code: S$3,
        col: { attrs: { span: null } },
        colgroup: { attrs: { span: null } },
        command: {
            attrs: {
                type: ["command", "checkbox", "radio"],
                label: null, icon: null, radiogroup: null, command: null, title: null,
                disabled: ["disabled"],
                checked: ["checked"]
            }
        },
        data: { attrs: { value: null } },
        datagrid: { attrs: { disabled: ["disabled"], multiple: ["multiple"] } },
        datalist: { attrs: { data: null } },
        dd: S$3,
        del: { attrs: { cite: null, datetime: null } },
        details: { attrs: { open: ["open"] } },
        dfn: S$3,
        div: S$3,
        dl: S$3,
        dt: S$3,
        em: S$3,
        embed: { attrs: { src: null, type: null, width: null, height: null } },
        eventsource: { attrs: { src: null } },
        fieldset: { attrs: { disabled: ["disabled"], form: null, name: null } },
        figcaption: S$3,
        figure: S$3,
        footer: S$3,
        form: {
            attrs: {
                action: null, name: null,
                "accept-charset": Charsets,
                autocomplete: ["on", "off"],
                enctype: Encs,
                method: Methods,
                novalidate: ["novalidate"],
                target: Targets
            }
        },
        h1: S$3, h2: S$3, h3: S$3, h4: S$3, h5: S$3, h6: S$3,
        head: {
            children: ["title", "base", "link", "style", "meta", "script", "noscript", "command"]
        },
        header: S$3,
        hgroup: S$3,
        hr: S$3,
        html: {
            attrs: { manifest: null }
        },
        i: S$3,
        iframe: {
            attrs: {
                src: null, srcdoc: null, name: null, width: null, height: null,
                sandbox: ["allow-top-navigation", "allow-same-origin", "allow-forms", "allow-scripts"],
                seamless: ["seamless"]
            }
        },
        img: {
            attrs: {
                alt: null, src: null, ismap: null, usemap: null, width: null, height: null,
                crossorigin: ["anonymous", "use-credentials"]
            }
        },
        input: {
            attrs: {
                alt: null, dirname: null, form: null, formaction: null,
                height: null, list: null, max: null, maxlength: null, min: null,
                name: null, pattern: null, placeholder: null, size: null, src: null,
                step: null, value: null, width: null,
                accept: ["audio/*", "video/*", "image/*"],
                autocomplete: ["on", "off"],
                autofocus: ["autofocus"],
                checked: ["checked"],
                disabled: ["disabled"],
                formenctype: Encs,
                formmethod: Methods,
                formnovalidate: ["novalidate"],
                formtarget: Targets,
                multiple: ["multiple"],
                readonly: ["readonly"],
                required: ["required"],
                type: ["hidden", "text", "search", "tel", "url", "email", "password", "datetime", "date", "month",
                    "week", "time", "datetime-local", "number", "range", "color", "checkbox", "radio",
                    "file", "submit", "image", "reset", "button"]
            }
        },
        ins: { attrs: { cite: null, datetime: null } },
        kbd: S$3,
        keygen: {
            attrs: {
                challenge: null, form: null, name: null,
                autofocus: ["autofocus"],
                disabled: ["disabled"],
                keytype: ["RSA"]
            }
        },
        label: { attrs: { for: null, form: null } },
        legend: S$3,
        li: { attrs: { value: null } },
        link: {
            attrs: {
                href: null, type: null,
                hreflang: null,
                media: null,
                sizes: ["all", "16x16", "16x16 32x32", "16x16 32x32 64x64"]
            }
        },
        map: { attrs: { name: null } },
        mark: S$3,
        menu: { attrs: { label: null, type: ["list", "context", "toolbar"] } },
        meta: {
            attrs: {
                content: null,
                charset: Charsets,
                name: ["viewport", "application-name", "author", "description", "generator", "keywords"],
                "http-equiv": ["content-language", "content-type", "default-style", "refresh"]
            }
        },
        meter: { attrs: { value: null, min: null, low: null, high: null, max: null, optimum: null } },
        nav: S$3,
        noscript: S$3,
        object: {
            attrs: {
                data: null, type: null, name: null, usemap: null, form: null, width: null, height: null,
                typemustmatch: ["typemustmatch"]
            }
        },
        ol: { attrs: { reversed: ["reversed"], start: null, type: ["1", "a", "A", "i", "I"] },
            children: ["li", "script", "template", "ul", "ol"] },
        optgroup: { attrs: { disabled: ["disabled"], label: null } },
        option: { attrs: { disabled: ["disabled"], label: null, selected: ["selected"], value: null } },
        output: { attrs: { for: null, form: null, name: null } },
        p: S$3,
        param: { attrs: { name: null, value: null } },
        pre: S$3,
        progress: { attrs: { value: null, max: null } },
        q: { attrs: { cite: null } },
        rp: S$3,
        rt: S$3,
        ruby: S$3,
        samp: S$3,
        script: {
            attrs: {
                type: ["text/javascript"],
                src: null,
                async: ["async"],
                defer: ["defer"],
                charset: Charsets
            }
        },
        section: S$3,
        select: {
            attrs: {
                form: null, name: null, size: null,
                autofocus: ["autofocus"],
                disabled: ["disabled"],
                multiple: ["multiple"]
            }
        },
        slot: { attrs: { name: null } },
        small: S$3,
        source: { attrs: { src: null, type: null, media: null } },
        span: S$3,
        strong: S$3,
        style: {
            attrs: {
                type: ["text/css"],
                media: null,
                scoped: null
            }
        },
        sub: S$3,
        summary: S$3,
        sup: S$3,
        table: S$3,
        tbody: S$3,
        td: { attrs: { colspan: null, rowspan: null, headers: null } },
        template: S$3,
        textarea: {
            attrs: {
                dirname: null, form: null, maxlength: null, name: null, placeholder: null,
                rows: null, cols: null,
                autofocus: ["autofocus"],
                disabled: ["disabled"],
                readonly: ["readonly"],
                required: ["required"],
                wrap: ["soft", "hard"]
            }
        },
        tfoot: S$3,
        th: { attrs: { colspan: null, rowspan: null, headers: null, scope: ["row", "col", "rowgroup", "colgroup"] } },
        thead: S$3,
        time: { attrs: { datetime: null } },
        title: S$3,
        tr: S$3,
        track: {
            attrs: {
                src: null, label: null, default: null,
                kind: ["subtitles", "captions", "descriptions", "chapters", "metadata"],
                srclang: null
            }
        },
        ul: { children: ["li", "script", "template", "ul", "ol"] },
        var: S$3,
        video: {
            attrs: {
                src: null, poster: null, width: null, height: null,
                crossorigin: ["anonymous", "use-credentials"],
                preload: ["auto", "metadata", "none"],
                autoplay: ["autoplay"],
                mediagroup: ["movie"],
                muted: ["muted"],
                controls: ["controls"]
            }
        },
        wbr: S$3
    };
    const GlobalAttrs = {
        accesskey: null,
        class: null,
        contenteditable: Bool$1,
        contextmenu: null,
        dir: ["ltr", "rtl", "auto"],
        draggable: ["true", "false", "auto"],
        dropzone: ["copy", "move", "link", "string:", "file:"],
        hidden: ["hidden"],
        id: null,
        inert: ["inert"],
        itemid: null,
        itemprop: null,
        itemref: null,
        itemscope: ["itemscope"],
        itemtype: null,
        lang: ["ar", "bn", "de", "en-GB", "en-US", "es", "fr", "hi", "id", "ja", "pa", "pt", "ru", "tr", "zh"],
        spellcheck: Bool$1,
        autocorrect: Bool$1,
        autocapitalize: Bool$1,
        style: null,
        tabindex: null,
        title: null,
        translate: ["yes", "no"],
        rel: ["stylesheet", "alternate", "author", "bookmark", "help", "license", "next", "nofollow", "noreferrer", "prefetch", "prev", "search", "tag"],
        role: /*@__PURE__*/"alert application article banner button cell checkbox complementary contentinfo dialog document feed figure form grid gridcell heading img list listbox listitem main navigation region row rowgroup search switch tab table tabpanel textbox timer".split(" "),
        "aria-activedescendant": null,
        "aria-atomic": Bool$1,
        "aria-autocomplete": ["inline", "list", "both", "none"],
        "aria-busy": Bool$1,
        "aria-checked": ["true", "false", "mixed", "undefined"],
        "aria-controls": null,
        "aria-describedby": null,
        "aria-disabled": Bool$1,
        "aria-dropeffect": null,
        "aria-expanded": ["true", "false", "undefined"],
        "aria-flowto": null,
        "aria-grabbed": ["true", "false", "undefined"],
        "aria-haspopup": Bool$1,
        "aria-hidden": Bool$1,
        "aria-invalid": ["true", "false", "grammar", "spelling"],
        "aria-label": null,
        "aria-labelledby": null,
        "aria-level": null,
        "aria-live": ["off", "polite", "assertive"],
        "aria-multiline": Bool$1,
        "aria-multiselectable": Bool$1,
        "aria-owns": null,
        "aria-posinset": null,
        "aria-pressed": ["true", "false", "mixed", "undefined"],
        "aria-readonly": Bool$1,
        "aria-relevant": null,
        "aria-required": Bool$1,
        "aria-selected": ["true", "false", "undefined"],
        "aria-setsize": null,
        "aria-sort": ["ascending", "descending", "none", "other"],
        "aria-valuemax": null,
        "aria-valuemin": null,
        "aria-valuenow": null,
        "aria-valuetext": null
    };
    const eventAttributes = /*@__PURE__*/("beforeunload copy cut dragstart dragover dragleave dragenter dragend " +
        "drag paste focus blur change click load mousedown mouseenter mouseleave " +
        "mouseup keydown keyup resize scroll unload").split(" ").map(n => "on" + n);
    for (let a of eventAttributes)
        GlobalAttrs[a] = null;
    class Schema {
        constructor(extraTags, extraAttrs) {
            this.tags = Object.assign(Object.assign({}, Tags), extraTags);
            this.globalAttrs = Object.assign(Object.assign({}, GlobalAttrs), extraAttrs);
            this.allTags = Object.keys(this.tags);
            this.globalAttrNames = Object.keys(this.globalAttrs);
        }
    }
    Schema.default = /*@__PURE__*/new Schema;
    function elementName$1(doc, tree, max = doc.length) {
        if (!tree)
            return "";
        let tag = tree.firstChild;
        let name = tag && tag.getChild("TagName");
        return name ? doc.sliceString(name.from, Math.min(name.to, max)) : "";
    }
    function findParentElement(tree, skip = false) {
        for (; tree; tree = tree.parent)
            if (tree.name == "Element") {
                if (skip)
                    skip = false;
                else
                    return tree;
            }
        return null;
    }
    function allowedChildren(doc, tree, schema) {
        let parentInfo = schema.tags[elementName$1(doc, findParentElement(tree))];
        return (parentInfo === null || parentInfo === void 0 ? void 0 : parentInfo.children) || schema.allTags;
    }
    function openTags(doc, tree) {
        let open = [];
        for (let parent = findParentElement(tree); parent && !parent.type.isTop; parent = findParentElement(parent.parent)) {
            let tagName = elementName$1(doc, parent);
            if (tagName && parent.lastChild.name == "CloseTag")
                break;
            if (tagName && open.indexOf(tagName) < 0 && (tree.name == "EndTag" || tree.from >= parent.firstChild.to))
                open.push(tagName);
        }
        return open;
    }
    const identifier = /^[:\-\.\w\u00b7-\uffff]*$/;
    function completeTag(state, schema, tree, from, to) {
        let end = /\s*>/.test(state.sliceDoc(to, to + 5)) ? "" : ">";
        let parent = findParentElement(tree, true);
        return { from, to,
            options: allowedChildren(state.doc, parent, schema).map(tagName => ({ label: tagName, type: "type" })).concat(openTags(state.doc, tree).map((tag, i) => ({ label: "/" + tag, apply: "/" + tag + end,
                type: "type", boost: 99 - i }))),
            validFor: /^\/?[:\-\.\w\u00b7-\uffff]*$/ };
    }
    function completeCloseTag(state, tree, from, to) {
        let end = /\s*>/.test(state.sliceDoc(to, to + 5)) ? "" : ">";
        return { from, to,
            options: openTags(state.doc, tree).map((tag, i) => ({ label: tag, apply: tag + end, type: "type", boost: 99 - i })),
            validFor: identifier };
    }
    function completeStartTag(state, schema, tree, pos) {
        let options = [], level = 0;
        for (let tagName of allowedChildren(state.doc, tree, schema))
            options.push({ label: "<" + tagName, type: "type" });
        for (let open of openTags(state.doc, tree))
            options.push({ label: "</" + open + ">", type: "type", boost: 99 - level++ });
        return { from: pos, to: pos, options, validFor: /^<\/?[:\-\.\w\u00b7-\uffff]*$/ };
    }
    function completeAttrName(state, schema, tree, from, to) {
        let elt = findParentElement(tree), info = elt ? schema.tags[elementName$1(state.doc, elt)] : null;
        let localAttrs = info && info.attrs ? Object.keys(info.attrs) : [];
        let names = info && info.globalAttrs === false ? localAttrs
            : localAttrs.length ? localAttrs.concat(schema.globalAttrNames) : schema.globalAttrNames;
        return { from, to,
            options: names.map(attrName => ({ label: attrName, type: "property" })),
            validFor: identifier };
    }
    function completeAttrValue(state, schema, tree, from, to) {
        var _a;
        let nameNode = (_a = tree.parent) === null || _a === void 0 ? void 0 : _a.getChild("AttributeName");
        let options = [], token = undefined;
        if (nameNode) {
            let attrName = state.sliceDoc(nameNode.from, nameNode.to);
            let attrs = schema.globalAttrs[attrName];
            if (!attrs) {
                let elt = findParentElement(tree), info = elt ? schema.tags[elementName$1(state.doc, elt)] : null;
                attrs = (info === null || info === void 0 ? void 0 : info.attrs) && info.attrs[attrName];
            }
            if (attrs) {
                let base = state.sliceDoc(from, to).toLowerCase(), quoteStart = '"', quoteEnd = '"';
                if (/^['"]/.test(base)) {
                    token = base[0] == '"' ? /^[^"]*$/ : /^[^']*$/;
                    quoteStart = "";
                    quoteEnd = state.sliceDoc(to, to + 1) == base[0] ? "" : base[0];
                    base = base.slice(1);
                    from++;
                }
                else {
                    token = /^[^\s<>='"]*$/;
                }
                for (let value of attrs)
                    options.push({ label: value, apply: quoteStart + value + quoteEnd, type: "constant" });
            }
        }
        return { from, to, options, validFor: token };
    }
    function htmlCompletionFor(schema, context) {
        let { state, pos } = context, tree = syntaxTree(state).resolveInner(pos, -1), around = tree.resolve(pos);
        for (let scan = pos, before; around == tree && (before = tree.childBefore(scan));) {
            let last = before.lastChild;
            if (!last || !last.type.isError || last.from < last.to)
                break;
            around = tree = before;
            scan = last.from;
        }
        if (tree.name == "TagName") {
            return tree.parent && /CloseTag$/.test(tree.parent.name) ? completeCloseTag(state, tree, tree.from, pos)
                : completeTag(state, schema, tree, tree.from, pos);
        }
        else if (tree.name == "StartTag") {
            return completeTag(state, schema, tree, pos, pos);
        }
        else if (tree.name == "StartCloseTag" || tree.name == "IncompleteCloseTag") {
            return completeCloseTag(state, tree, pos, pos);
        }
        else if (tree.name == "OpenTag" || tree.name == "SelfClosingTag" || tree.name == "AttributeName") {
            return completeAttrName(state, schema, tree, tree.name == "AttributeName" ? tree.from : pos, pos);
        }
        else if (tree.name == "Is" || tree.name == "AttributeValue" || tree.name == "UnquotedAttributeValue") {
            return completeAttrValue(state, schema, tree, tree.name == "Is" ? pos : tree.from, pos);
        }
        else if (context.explicit && (around.name == "Element" || around.name == "Text" || around.name == "Document")) {
            return completeStartTag(state, schema, tree, pos);
        }
        else {
            return null;
        }
    }
    /**
    Create a completion source for HTML extended with additional tags
    or attributes.
    */
    function htmlCompletionSourceWith(config) {
        let { extraTags, extraGlobalAttributes: extraAttrs } = config;
        let schema = extraAttrs || extraTags ? new Schema(extraTags, extraAttrs) : Schema.default;
        return (context) => htmlCompletionFor(schema, context);
    }

    const jsonParser = /*@__PURE__*/javascriptLanguage.parser.configure({ top: "SingleExpression" });
    const defaultNesting = [
        { tag: "script",
            attrs: attrs => attrs.type == "text/typescript" || attrs.lang == "ts",
            parser: typescriptLanguage.parser },
        { tag: "script",
            attrs: attrs => attrs.type == "text/babel" || attrs.type == "text/jsx",
            parser: jsxLanguage.parser },
        { tag: "script",
            attrs: attrs => attrs.type == "text/typescript-jsx",
            parser: tsxLanguage.parser },
        { tag: "script",
            attrs(attrs) {
                return /^(importmap|speculationrules|application\/(.+\+)?json)$/i.test(attrs.type);
            },
            parser: jsonParser },
        { tag: "script",
            attrs(attrs) {
                return !attrs.type || /^(?:text|application)\/(?:x-)?(?:java|ecma)script$|^module$|^$/i.test(attrs.type);
            },
            parser: javascriptLanguage.parser },
        { tag: "style",
            attrs(attrs) {
                return (!attrs.lang || attrs.lang == "css") && (!attrs.type || /^(text\/)?(x-)?(stylesheet|css)$/i.test(attrs.type));
            },
            parser: cssLanguage.parser }
    ];
    const defaultAttrs = /*@__PURE__*/[
        { name: "style",
            parser: /*@__PURE__*/cssLanguage.parser.configure({ top: "Styles" }) }
    ].concat(/*@__PURE__*/eventAttributes.map(name => ({ name, parser: javascriptLanguage.parser })));
    /**
    A language provider based on the [Lezer HTML
    parser](https://github.com/lezer-parser/html), extended with the
    JavaScript and CSS parsers to parse the content of `<script>` and
    `<style>` tags.
    */
    const htmlPlain = /*@__PURE__*/LRLanguage.define({
        name: "html",
        parser: /*@__PURE__*/parser$4.configure({
            props: [
                /*@__PURE__*/indentNodeProp.add({
                    Element(context) {
                        let after = /^(\s*)(<\/)?/.exec(context.textAfter);
                        if (context.node.to <= context.pos + after[0].length)
                            return context.continue();
                        return context.lineIndent(context.node.from) + (after[2] ? 0 : context.unit);
                    },
                    "OpenTag CloseTag SelfClosingTag"(context) {
                        return context.column(context.node.from) + context.unit;
                    },
                    Document(context) {
                        if (context.pos + /\s*/.exec(context.textAfter)[0].length < context.node.to)
                            return context.continue();
                        let endElt = null, close;
                        for (let cur = context.node;;) {
                            let last = cur.lastChild;
                            if (!last || last.name != "Element" || last.to != cur.to)
                                break;
                            endElt = cur = last;
                        }
                        if (endElt && !((close = endElt.lastChild) && (close.name == "CloseTag" || close.name == "SelfClosingTag")))
                            return context.lineIndent(endElt.from) + context.unit;
                        return null;
                    }
                }),
                /*@__PURE__*/foldNodeProp.add({
                    Element(node) {
                        let first = node.firstChild, last = node.lastChild;
                        if (!first || first.name != "OpenTag")
                            return null;
                        return { from: first.to, to: last.name == "CloseTag" ? last.from : node.to };
                    }
                }),
                /*@__PURE__*/bracketMatchingHandle.add({
                    "OpenTag CloseTag": node => node.getChild("TagName")
                })
            ]
        }),
        languageData: {
            commentTokens: { block: { open: "<!--", close: "-->" } },
            indentOnInput: /^\s*<\/\w+\W$/,
            wordChars: "-._"
        }
    });
    /**
    A language provider based on the [Lezer HTML
    parser](https://github.com/lezer-parser/html), extended with the
    JavaScript and CSS parsers to parse the content of `<script>` and
    `<style>` tags.
    */
    const htmlLanguage = /*@__PURE__*/htmlPlain.configure({
        wrap: /*@__PURE__*/configureNesting(defaultNesting, defaultAttrs)
    });
    /**
    Language support for HTML, including
    [`htmlCompletion`](https://codemirror.net/6/docs/ref/#lang-html.htmlCompletion) and JavaScript and
    CSS support extensions.
    */
    function html(config = {}) {
        let dialect = "", wrap;
        if (config.matchClosingTags === false)
            dialect = "noMatch";
        if (config.selfClosingTags === true)
            dialect = (dialect ? dialect + " " : "") + "selfClosing";
        if (config.nestedLanguages && config.nestedLanguages.length ||
            config.nestedAttributes && config.nestedAttributes.length)
            wrap = configureNesting((config.nestedLanguages || []).concat(defaultNesting), (config.nestedAttributes || []).concat(defaultAttrs));
        let lang = wrap ? htmlPlain.configure({ wrap, dialect }) : dialect ? htmlLanguage.configure({ dialect }) : htmlLanguage;
        return new LanguageSupport(lang, [
            htmlLanguage.data.of({ autocomplete: htmlCompletionSourceWith(config) }),
            config.autoCloseTags !== false ? autoCloseTags : [],
            javascript().support,
            css().support
        ]);
    }
    const selfClosers$1 = /*@__PURE__*/new Set(/*@__PURE__*/"area base br col command embed frame hr img input keygen link meta param source track wbr menuitem".split(" "));
    /**
    Extension that will automatically insert close tags when a `>` or
    `/` is typed.
    */
    const autoCloseTags = /*@__PURE__*/EditorView.inputHandler.of((view, from, to, text, insertTransaction) => {
        if (view.composing || view.state.readOnly || from != to || (text != ">" && text != "/") ||
            !htmlLanguage.isActiveAt(view.state, from, -1))
            return false;
        let base = insertTransaction(), { state } = base;
        let closeTags = state.changeByRange(range => {
            var _a, _b, _c;
            let didType = state.doc.sliceString(range.from - 1, range.to) == text;
            let { head } = range, after = syntaxTree(state).resolveInner(head, -1), name;
            if (didType && text == ">" && after.name == "EndTag") {
                let tag = after.parent;
                if (((_b = (_a = tag.parent) === null || _a === void 0 ? void 0 : _a.lastChild) === null || _b === void 0 ? void 0 : _b.name) != "CloseTag" &&
                    (name = elementName$1(state.doc, tag.parent, head)) &&
                    !selfClosers$1.has(name)) {
                    let to = head + (state.doc.sliceString(head, head + 1) === ">" ? 1 : 0);
                    let insert = `</${name}>`;
                    return { range, changes: { from: head, to, insert } };
                }
            }
            else if (didType && text == "/" && after.name == "IncompleteCloseTag") {
                let tag = after.parent;
                if (after.from == head - 2 && ((_c = tag.lastChild) === null || _c === void 0 ? void 0 : _c.name) != "CloseTag" &&
                    (name = elementName$1(state.doc, tag, head)) && !selfClosers$1.has(name)) {
                    let to = head + (state.doc.sliceString(head, head + 1) === ">" ? 1 : 0);
                    let insert = `${name}>`;
                    return {
                        range: EditorSelection.cursor(head + insert.length, -1),
                        changes: { from: head, to, insert }
                    };
                }
            }
            return { range };
        });
        if (closeTags.changes.empty)
            return false;
        view.dispatch([
            base,
            state.update(closeTags, {
                userEvent: "input.complete",
                scrollIntoView: true
            })
        ]);
        return true;
    });

    const jsonHighlighting = styleTags({
      String: tags$1.string,
      Number: tags$1.number,
      "True False": tags$1.bool,
      PropertyName: tags$1.propertyName,
      Null: tags$1.null,
      ",": tags$1.separator,
      "[ ]": tags$1.squareBracket,
      "{ }": tags$1.brace
    });

    // This file was generated by lezer-generator. You probably shouldn't edit it.
    const parser$2 = LRParser.deserialize({
      version: 14,
      states: "$bOVQPOOOOQO'#Cb'#CbOnQPO'#CeOvQPO'#CjOOQO'#Cp'#CpQOQPOOOOQO'#Cg'#CgO}QPO'#CfO!SQPO'#CrOOQO,59P,59PO![QPO,59PO!aQPO'#CuOOQO,59U,59UO!iQPO,59UOVQPO,59QOqQPO'#CkO!nQPO,59^OOQO1G.k1G.kOVQPO'#ClO!vQPO,59aOOQO1G.p1G.pOOQO1G.l1G.lOOQO,59V,59VOOQO-E6i-E6iOOQO,59W,59WOOQO-E6j-E6j",
      stateData: "#O~OcOS~OQSORSOSSOTSOWQO]ROePO~OVXOeUO~O[[O~PVOg^O~Oh_OVfX~OVaO~OhbO[iX~O[dO~Oh_OVfa~OhbO[ia~O",
      goto: "!kjPPPPPPkPPkqwPPk{!RPPP!XP!ePP!hXSOR^bQWQRf_TVQ_Q`WRg`QcZRicQTOQZRQe^RhbRYQR]R",
      nodeNames: "⚠ JsonText True False Null Number String } { Object Property PropertyName ] [ Array",
      maxTerm: 25,
      nodeProps: [
        ["isolate", -2,6,11,""],
        ["openedBy", 7,"{",12,"["],
        ["closedBy", 8,"}",13,"]"]
      ],
      propSources: [jsonHighlighting],
      skippedNodes: [0],
      repeatNodeCount: 2,
      tokenData: "(|~RaXY!WYZ!W]^!Wpq!Wrs!]|}$u}!O$z!Q!R%T!R![&c![!]&t!}#O&y#P#Q'O#Y#Z'T#b#c'r#h#i(Z#o#p(r#q#r(w~!]Oc~~!`Wpq!]qr!]rs!xs#O!]#O#P!}#P;'S!];'S;=`$o<%lO!]~!}Oe~~#QXrs!]!P!Q!]#O#P!]#U#V!]#Y#Z!]#b#c!]#f#g!]#h#i!]#i#j#m~#pR!Q![#y!c!i#y#T#Z#y~#|R!Q![$V!c!i$V#T#Z$V~$YR!Q![$c!c!i$c#T#Z$c~$fR!Q![!]!c!i!]#T#Z!]~$rP;=`<%l!]~$zOh~~$}Q!Q!R%T!R![&c~%YRT~!O!P%c!g!h%w#X#Y%w~%fP!Q![%i~%nRT~!Q![%i!g!h%w#X#Y%w~%zR{|&T}!O&T!Q![&Z~&WP!Q![&Z~&`PT~!Q![&Z~&hST~!O!P%c!Q![&c!g!h%w#X#Y%w~&yOg~~'OO]~~'TO[~~'WP#T#U'Z~'^P#`#a'a~'dP#g#h'g~'jP#X#Y'm~'rOR~~'uP#i#j'x~'{P#`#a(O~(RP#`#a(U~(ZOS~~(^P#f#g(a~(dP#i#j(g~(jP#X#Y(m~(rOQ~~(wOW~~(|OV~",
      tokenizers: [0],
      topRules: {"JsonText":[0,1]},
      tokenPrec: 0
    });

    /**
    A language provider that provides JSON parsing.
    */
    const jsonLanguage = /*@__PURE__*/LRLanguage.define({
        name: "json",
        parser: /*@__PURE__*/parser$2.configure({
            props: [
                /*@__PURE__*/indentNodeProp.add({
                    Object: /*@__PURE__*/continuedIndent({ except: /^\s*\}/ }),
                    Array: /*@__PURE__*/continuedIndent({ except: /^\s*\]/ })
                }),
                /*@__PURE__*/foldNodeProp.add({
                    "Object Array": foldInside
                })
            ]
        }),
        languageData: {
            closeBrackets: { brackets: ["[", "{", '"'] },
            indentOnInput: /^\s*[\}\]]$/
        }
    });
    /**
    JSON language support.
    */
    function json() {
        return new LanguageSupport(jsonLanguage);
    }

    // This file was generated by lezer-generator. You probably shouldn't edit it.
    const whitespace = 36,
      LineComment = 1,
      BlockComment = 2,
      String$1 = 3,
      Number$1 = 4,
      Bool = 5,
      Null = 6,
      ParenL = 7,
      ParenR = 8,
      BraceL = 9,
      BraceR = 10,
      BracketL = 11,
      BracketR = 12,
      Semi = 13,
      Dot = 14,
      Operator = 15,
      Punctuation = 16,
      SpecialVar = 17,
      Identifier = 18,
      QuotedIdentifier = 19,
      Keyword = 20,
      Type = 21,
      Bits = 22,
      Bytes = 23,
      Builtin = 24;

    function isAlpha(ch) {
        return ch >= 65 /* Ch.A */ && ch <= 90 /* Ch.Z */ || ch >= 97 /* Ch.a */ && ch <= 122 /* Ch.z */ || ch >= 48 /* Ch._0 */ && ch <= 57 /* Ch._9 */;
    }
    function isHexDigit(ch) {
        return ch >= 48 /* Ch._0 */ && ch <= 57 /* Ch._9 */ || ch >= 97 /* Ch.a */ && ch <= 102 /* Ch.f */ || ch >= 65 /* Ch.A */ && ch <= 70 /* Ch.F */;
    }
    function readLiteral(input, endQuote, backslashEscapes) {
        for (let escaped = false;;) {
            if (input.next < 0)
                return;
            if (input.next == endQuote && !escaped) {
                input.advance();
                return;
            }
            escaped = backslashEscapes && !escaped && input.next == 92 /* Ch.Backslash */;
            input.advance();
        }
    }
    function readDoubleDollarLiteral(input, tag) {
        scan: for (;;) {
            if (input.next < 0)
                return;
            if (input.next == 36 /* Ch.Dollar */) {
                input.advance();
                for (let i = 0; i < tag.length; i++) {
                    if (input.next != tag.charCodeAt(i))
                        continue scan;
                    input.advance();
                }
                if (input.next == 36 /* Ch.Dollar */) {
                    input.advance();
                    return;
                }
            }
            else {
                input.advance();
            }
        }
    }
    function readPLSQLQuotedLiteral(input, openDelim) {
        let matchingDelim = "[{<(".indexOf(String.fromCharCode(openDelim));
        let closeDelim = matchingDelim < 0 ? openDelim : "]}>)".charCodeAt(matchingDelim);
        for (;;) {
            if (input.next < 0)
                return;
            if (input.next == closeDelim && input.peek(1) == 39 /* Ch.SingleQuote */) {
                input.advance(2);
                return;
            }
            input.advance();
        }
    }
    function readWord(input, result) {
        for (;;) {
            if (input.next != 95 /* Ch.Underscore */ && !isAlpha(input.next))
                break;
            if (result != null)
                result += String.fromCharCode(input.next);
            input.advance();
        }
        return result;
    }
    function readWordOrQuoted(input) {
        if (input.next == 39 /* Ch.SingleQuote */ || input.next == 34 /* Ch.DoubleQuote */ || input.next == 96 /* Ch.Backtick */) {
            let quote = input.next;
            input.advance();
            readLiteral(input, quote, false);
        }
        else {
            readWord(input);
        }
    }
    function readBits(input, endQuote) {
        while (input.next == 48 /* Ch._0 */ || input.next == 49 /* Ch._1 */)
            input.advance();
        if (endQuote && input.next == endQuote)
            input.advance();
    }
    function readNumber(input, sawDot) {
        for (;;) {
            if (input.next == 46 /* Ch.Dot */) {
                if (sawDot)
                    break;
                sawDot = true;
            }
            else if (input.next < 48 /* Ch._0 */ || input.next > 57 /* Ch._9 */) {
                break;
            }
            input.advance();
        }
        if (input.next == 69 /* Ch.E */ || input.next == 101 /* Ch.e */) {
            input.advance();
            if (input.next == 43 /* Ch.Plus */ || input.next == 45 /* Ch.Dash */)
                input.advance();
            while (input.next >= 48 /* Ch._0 */ && input.next <= 57 /* Ch._9 */)
                input.advance();
        }
    }
    function eol(input) {
        while (!(input.next < 0 || input.next == 10 /* Ch.Newline */))
            input.advance();
    }
    function inString(ch, str) {
        for (let i = 0; i < str.length; i++)
            if (str.charCodeAt(i) == ch)
                return true;
        return false;
    }
    const Space = " \t\r\n";
    function keywords(keywords, types, builtin) {
        let result = Object.create(null);
        result["true"] = result["false"] = Bool;
        result["null"] = result["unknown"] = Null;
        for (let kw of keywords.split(" "))
            if (kw)
                result[kw] = Keyword;
        for (let tp of types.split(" "))
            if (tp)
                result[tp] = Type;
        for (let kw of (builtin || "").split(" "))
            if (kw)
                result[kw] = Builtin;
        return result;
    }
    const SQLTypes = "array binary bit boolean char character clob date decimal double float int integer interval large national nchar nclob numeric object precision real smallint time timestamp varchar varying ";
    const SQLKeywords = "absolute action add after all allocate alter and any are as asc assertion at authorization before begin between both breadth by call cascade cascaded case cast catalog check close collate collation column commit condition connect connection constraint constraints constructor continue corresponding count create cross cube current current_date current_default_transform_group current_transform_group_for_type current_path current_role current_time current_timestamp current_user cursor cycle data day deallocate declare default deferrable deferred delete depth deref desc describe descriptor deterministic diagnostics disconnect distinct do domain drop dynamic each else elseif end end-exec equals escape except exception exec execute exists exit external fetch first for foreign found from free full function general get global go goto grant group grouping handle having hold hour identity if immediate in indicator initially inner inout input insert intersect into is isolation join key language last lateral leading leave left level like limit local localtime localtimestamp locator loop map match method minute modifies module month names natural nesting new next no none not of old on only open option or order ordinality out outer output overlaps pad parameter partial path prepare preserve primary prior privileges procedure public read reads recursive redo ref references referencing relative release repeat resignal restrict result return returns revoke right role rollback rollup routine row rows savepoint schema scroll search second section select session session_user set sets signal similar size some space specific specifictype sql sqlexception sqlstate sqlwarning start state static system_user table temporary then timezone_hour timezone_minute to trailing transaction translation treat trigger under undo union unique unnest until update usage user using value values view when whenever where while with without work write year zone ";
    const defaults = {
        backslashEscapes: false,
        hashComments: false,
        spaceAfterDashes: false,
        slashComments: false,
        doubleQuotedStrings: false,
        doubleDollarQuotedStrings: false,
        unquotedBitLiterals: false,
        treatBitsAsBytes: false,
        charSetCasts: false,
        plsqlQuotingMechanism: false,
        operatorChars: "*+\-%<>!=&|~^/",
        specialVar: "?",
        identifierQuotes: '"',
        caseInsensitiveIdentifiers: false,
        words: /*@__PURE__*/keywords(SQLKeywords, SQLTypes)
    };
    function dialect(spec, kws, types, builtin) {
        let dialect = {};
        for (let prop in defaults)
            dialect[prop] = (spec.hasOwnProperty(prop) ? spec : defaults)[prop];
        if (kws)
            dialect.words = keywords(kws, types || "", builtin);
        return dialect;
    }
    function tokensFor(d) {
        return new ExternalTokenizer(input => {
            var _a;
            let { next } = input;
            input.advance();
            if (inString(next, Space)) {
                while (inString(input.next, Space))
                    input.advance();
                input.acceptToken(whitespace);
            }
            else if (next == 36 /* Ch.Dollar */ && d.doubleDollarQuotedStrings) {
                let tag = readWord(input, "");
                if (input.next == 36 /* Ch.Dollar */) {
                    input.advance();
                    readDoubleDollarLiteral(input, tag);
                    input.acceptToken(String$1);
                }
            }
            else if (next == 39 /* Ch.SingleQuote */ || next == 34 /* Ch.DoubleQuote */ && d.doubleQuotedStrings) {
                readLiteral(input, next, d.backslashEscapes);
                input.acceptToken(String$1);
            }
            else if (next == 35 /* Ch.Hash */ && d.hashComments ||
                next == 47 /* Ch.Slash */ && input.next == 47 /* Ch.Slash */ && d.slashComments) {
                eol(input);
                input.acceptToken(LineComment);
            }
            else if (next == 45 /* Ch.Dash */ && input.next == 45 /* Ch.Dash */ &&
                (!d.spaceAfterDashes || input.peek(1) == 32 /* Ch.Space */)) {
                eol(input);
                input.acceptToken(LineComment);
            }
            else if (next == 47 /* Ch.Slash */ && input.next == 42 /* Ch.Star */) {
                input.advance();
                for (let depth = 1;;) {
                    let cur = input.next;
                    if (input.next < 0)
                        break;
                    input.advance();
                    if (cur == 42 /* Ch.Star */ && input.next == 47 /* Ch.Slash */) {
                        depth--;
                        input.advance();
                        if (!depth)
                            break;
                    }
                    else if (cur == 47 /* Ch.Slash */ && input.next == 42 /* Ch.Star */) {
                        depth++;
                        input.advance();
                    }
                }
                input.acceptToken(BlockComment);
            }
            else if ((next == 101 /* Ch.e */ || next == 69 /* Ch.E */) && input.next == 39 /* Ch.SingleQuote */) {
                input.advance();
                readLiteral(input, 39 /* Ch.SingleQuote */, true);
                input.acceptToken(String$1);
            }
            else if ((next == 110 /* Ch.n */ || next == 78 /* Ch.N */) && input.next == 39 /* Ch.SingleQuote */ &&
                d.charSetCasts) {
                input.advance();
                readLiteral(input, 39 /* Ch.SingleQuote */, d.backslashEscapes);
                input.acceptToken(String$1);
            }
            else if (next == 95 /* Ch.Underscore */ && d.charSetCasts) {
                for (let i = 0;; i++) {
                    if (input.next == 39 /* Ch.SingleQuote */ && i > 1) {
                        input.advance();
                        readLiteral(input, 39 /* Ch.SingleQuote */, d.backslashEscapes);
                        input.acceptToken(String$1);
                        break;
                    }
                    if (!isAlpha(input.next))
                        break;
                    input.advance();
                }
            }
            else if (d.plsqlQuotingMechanism &&
                (next == 113 /* Ch.q */ || next == 81 /* Ch.Q */) && input.next == 39 /* Ch.SingleQuote */ &&
                input.peek(1) > 0 && !inString(input.peek(1), Space)) {
                let openDelim = input.peek(1);
                input.advance(2);
                readPLSQLQuotedLiteral(input, openDelim);
                input.acceptToken(String$1);
            }
            else if (next == 40 /* Ch.ParenL */) {
                input.acceptToken(ParenL);
            }
            else if (next == 41 /* Ch.ParenR */) {
                input.acceptToken(ParenR);
            }
            else if (next == 123 /* Ch.BraceL */) {
                input.acceptToken(BraceL);
            }
            else if (next == 125 /* Ch.BraceR */) {
                input.acceptToken(BraceR);
            }
            else if (next == 91 /* Ch.BracketL */) {
                input.acceptToken(BracketL);
            }
            else if (next == 93 /* Ch.BracketR */) {
                input.acceptToken(BracketR);
            }
            else if (next == 59 /* Ch.Semi */) {
                input.acceptToken(Semi);
            }
            else if (d.unquotedBitLiterals && next == 48 /* Ch._0 */ && input.next == 98 /* Ch.b */) {
                input.advance();
                readBits(input);
                input.acceptToken(Bits);
            }
            else if ((next == 98 /* Ch.b */ || next == 66 /* Ch.B */) && (input.next == 39 /* Ch.SingleQuote */ || input.next == 34 /* Ch.DoubleQuote */)) {
                const quoteStyle = input.next;
                input.advance();
                if (d.treatBitsAsBytes) {
                    readLiteral(input, quoteStyle, d.backslashEscapes);
                    input.acceptToken(Bytes);
                }
                else {
                    readBits(input, quoteStyle);
                    input.acceptToken(Bits);
                }
            }
            else if (next == 48 /* Ch._0 */ && (input.next == 120 /* Ch.x */ || input.next == 88 /* Ch.X */) ||
                (next == 120 /* Ch.x */ || next == 88 /* Ch.X */) && input.next == 39 /* Ch.SingleQuote */) {
                let quoted = input.next == 39 /* Ch.SingleQuote */;
                input.advance();
                while (isHexDigit(input.next))
                    input.advance();
                if (quoted && input.next == 39 /* Ch.SingleQuote */)
                    input.advance();
                input.acceptToken(Number$1);
            }
            else if (next == 46 /* Ch.Dot */ && input.next >= 48 /* Ch._0 */ && input.next <= 57 /* Ch._9 */) {
                readNumber(input, true);
                input.acceptToken(Number$1);
            }
            else if (next == 46 /* Ch.Dot */) {
                input.acceptToken(Dot);
            }
            else if (next >= 48 /* Ch._0 */ && next <= 57 /* Ch._9 */) {
                readNumber(input, false);
                input.acceptToken(Number$1);
            }
            else if (inString(next, d.operatorChars)) {
                while (inString(input.next, d.operatorChars))
                    input.advance();
                input.acceptToken(Operator);
            }
            else if (inString(next, d.specialVar)) {
                if (input.next == next)
                    input.advance();
                readWordOrQuoted(input);
                input.acceptToken(SpecialVar);
            }
            else if (inString(next, d.identifierQuotes)) {
                readLiteral(input, next, false);
                input.acceptToken(QuotedIdentifier);
            }
            else if (next == 58 /* Ch.Colon */ || next == 44 /* Ch.Comma */) {
                input.acceptToken(Punctuation);
            }
            else if (isAlpha(next)) {
                let word = readWord(input, String.fromCharCode(next));
                input.acceptToken(input.next == 46 /* Ch.Dot */ || input.peek(-word.length - 1) == 46 /* Ch.Dot */
                    ? Identifier : (_a = d.words[word.toLowerCase()]) !== null && _a !== void 0 ? _a : Identifier);
            }
        });
    }
    const tokens = /*@__PURE__*/tokensFor(defaults);

    // This file was generated by lezer-generator. You probably shouldn't edit it.
    const parser$1 = /*@__PURE__*/LRParser.deserialize({
      version: 14,
      states: "%vQ]QQOOO#wQRO'#DSO$OQQO'#CwO%eQQO'#CxO%lQQO'#CyO%sQQO'#CzOOQQ'#DS'#DSOOQQ'#C}'#C}O'UQRO'#C{OOQQ'#Cv'#CvOOQQ'#C|'#C|Q]QQOOQOQQOOO'`QQO'#DOO(xQRO,59cO)PQQO,59cO)UQQO'#DSOOQQ,59d,59dO)cQQO,59dOOQQ,59e,59eO)jQQO,59eOOQQ,59f,59fO)qQQO,59fOOQQ-E6{-E6{OOQQ,59b,59bOOQQ-E6z-E6zOOQQ,59j,59jOOQQ-E6|-E6|O+VQRO1G.}O+^QQO,59cOOQQ1G/O1G/OOOQQ1G/P1G/POOQQ1G/Q1G/QP+kQQO'#C}O+rQQO1G.}O)PQQO,59cO,PQQO'#Cw",
      stateData: ",[~OtOSPOSQOS~ORUOSUOTUOUUOVROXSOZTO]XO^QO_UO`UOaPObPOcPOdUOeUOfUOgUOhUO~O^]ORvXSvXTvXUvXVvXXvXZvX]vX_vX`vXavXbvXcvXdvXevXfvXgvXhvX~OsvX~P!jOa_Ob_Oc_O~ORUOSUOTUOUUOVROXSOZTO^tO_UO`UOa`Ob`Oc`OdUOeUOfUOgUOhUO~OWaO~P$ZOYcO~P$ZO[eO~P$ZORUOSUOTUOUUOVROXSOZTO^QO_UO`UOaPObPOcPOdUOeUOfUOgUOhUO~O]hOsoX~P%zOajObjOcjO~O^]ORkaSkaTkaUkaVkaXkaZka]ka_ka`kaakabkackadkaekafkagkahka~Oska~P'kO^]O~OWvXYvX[vX~P!jOWnO~P$ZOYoO~P$ZO[pO~P$ZO^]ORkiSkiTkiUkiVkiXkiZki]ki_ki`kiakibkickidkiekifkigkihki~Oski~P)xOWkaYka[ka~P'kO]hO~P$ZOWkiYki[ki~P)xOasObsOcsO~O",
      goto: "#hwPPPPPPPPPPPPPPPPPPPPPPPPPPx||||!Y!^!d!xPPP#[TYOZeUORSTWZbdfqT[OZQZORiZSWOZQbRQdSQfTZgWbdfqQ^PWk^lmrQl_Qm`RrseVORSTWZbdfq",
      nodeNames: "⚠ LineComment BlockComment String Number Bool Null ( ) { } [ ] ; . Operator Punctuation SpecialVar Identifier QuotedIdentifier Keyword Type Bits Bytes Builtin Script Statement CompositeIdentifier Parens Braces Brackets Statement",
      maxTerm: 38,
      nodeProps: [
        ["isolate", -4,1,2,3,19,""]
      ],
      skippedNodes: [0,1,2],
      repeatNodeCount: 3,
      tokenData: "RORO",
      tokenizers: [0, tokens],
      topRules: {"Script":[0,25]},
      tokenPrec: 0
    });

    function tokenBefore(tree) {
        let cursor = tree.cursor().moveTo(tree.from, -1);
        while (/Comment/.test(cursor.name))
            cursor.moveTo(cursor.from, -1);
        return cursor.node;
    }
    function idName(doc, node) {
        let text = doc.sliceString(node.from, node.to);
        let quoted = /^([`'"])(.*)\1$/.exec(text);
        return quoted ? quoted[2] : text;
    }
    function plainID(node) {
        return node && (node.name == "Identifier" || node.name == "QuotedIdentifier");
    }
    function pathFor(doc, id) {
        if (id.name == "CompositeIdentifier") {
            let path = [];
            for (let ch = id.firstChild; ch; ch = ch.nextSibling)
                if (plainID(ch))
                    path.push(idName(doc, ch));
            return path;
        }
        return [idName(doc, id)];
    }
    function parentsFor(doc, node) {
        for (let path = [];;) {
            if (!node || node.name != ".")
                return path;
            let name = tokenBefore(node);
            if (!plainID(name))
                return path;
            path.unshift(idName(doc, name));
            node = tokenBefore(name);
        }
    }
    function sourceContext(state, startPos) {
        let pos = syntaxTree(state).resolveInner(startPos, -1);
        let aliases = getAliases(state.doc, pos);
        if (pos.name == "Identifier" || pos.name == "QuotedIdentifier" || pos.name == "Keyword") {
            return { from: pos.from,
                quoted: pos.name == "QuotedIdentifier" ? state.doc.sliceString(pos.from, pos.from + 1) : null,
                parents: parentsFor(state.doc, tokenBefore(pos)),
                aliases };
        }
        if (pos.name == ".") {
            return { from: startPos, quoted: null, parents: parentsFor(state.doc, pos), aliases };
        }
        else {
            return { from: startPos, quoted: null, parents: [], empty: true, aliases };
        }
    }
    const EndFrom = /*@__PURE__*/new Set(/*@__PURE__*/"where group having order union intersect except all distinct limit offset fetch for".split(" "));
    function getAliases(doc, at) {
        let statement;
        for (let parent = at; !statement; parent = parent.parent) {
            if (!parent)
                return null;
            if (parent.name == "Statement")
                statement = parent;
        }
        let aliases = null;
        for (let scan = statement.firstChild, sawFrom = false, prevID = null; scan; scan = scan.nextSibling) {
            let kw = scan.name == "Keyword" ? doc.sliceString(scan.from, scan.to).toLowerCase() : null;
            let alias = null;
            if (!sawFrom) {
                sawFrom = kw == "from";
            }
            else if (kw == "as" && prevID && plainID(scan.nextSibling)) {
                alias = idName(doc, scan.nextSibling);
            }
            else if (kw && EndFrom.has(kw)) {
                break;
            }
            else if (prevID && plainID(scan)) {
                alias = idName(doc, scan);
            }
            if (alias) {
                if (!aliases)
                    aliases = Object.create(null);
                aliases[alias] = pathFor(doc, prevID);
            }
            prevID = /Identifier$/.test(scan.name) ? scan : null;
        }
        return aliases;
    }
    function maybeQuoteCompletions(quote, completions) {
        if (!quote)
            return completions;
        return completions.map(c => (Object.assign(Object.assign({}, c), { label: c.label[0] == quote ? c.label : quote + c.label + quote, apply: undefined })));
    }
    const Span = /^\w*$/, QuotedSpan = /^[`'"]?\w*[`'"]?$/;
    function isSelfTag(namespace) {
        return namespace.self && typeof namespace.self.label == "string";
    }
    class CompletionLevel {
        constructor(idQuote, idCaseInsensitive) {
            this.idQuote = idQuote;
            this.idCaseInsensitive = idCaseInsensitive;
            this.list = [];
            this.children = undefined;
        }
        child(name) {
            let children = this.children || (this.children = Object.create(null));
            let found = children[name];
            if (found)
                return found;
            if (name && !this.list.some(c => c.label == name))
                this.list.push(nameCompletion(name, "type", this.idQuote, this.idCaseInsensitive));
            return (children[name] = new CompletionLevel(this.idQuote, this.idCaseInsensitive));
        }
        maybeChild(name) {
            return this.children ? this.children[name] : null;
        }
        addCompletion(option) {
            let found = this.list.findIndex(o => o.label == option.label);
            if (found > -1)
                this.list[found] = option;
            else
                this.list.push(option);
        }
        addCompletions(completions) {
            for (let option of completions)
                this.addCompletion(typeof option == "string" ? nameCompletion(option, "property", this.idQuote, this.idCaseInsensitive) : option);
        }
        addNamespace(namespace) {
            if (Array.isArray(namespace)) {
                this.addCompletions(namespace);
            }
            else if (isSelfTag(namespace)) {
                this.addNamespace(namespace.children);
            }
            else {
                this.addNamespaceObject(namespace);
            }
        }
        addNamespaceObject(namespace) {
            for (let name of Object.keys(namespace)) {
                let children = namespace[name], self = null;
                let parts = name.replace(/\\?\./g, p => p == "." ? "\0" : p).split("\0");
                let scope = this;
                if (isSelfTag(children)) {
                    self = children.self;
                    children = children.children;
                }
                for (let i = 0; i < parts.length; i++) {
                    if (self && i == parts.length - 1)
                        scope.addCompletion(self);
                    scope = scope.child(parts[i].replace(/\\\./g, "."));
                }
                scope.addNamespace(children);
            }
        }
    }
    function nameCompletion(label, type, idQuote, idCaseInsensitive) {
        if ((new RegExp("^[a-z_][a-z_\\d]*$", idCaseInsensitive ? "i" : "")).test(label))
            return { label, type };
        return { label, type, apply: idQuote + label + idQuote };
    }
    // Some of this is more gnarly than it has to be because we're also
    // supporting the deprecated, not-so-well-considered style of
    // supplying the schema (dotted property names for schemas, separate
    // `tables` and `schemas` completions).
    function completeFromSchema(schema, tables, schemas, defaultTableName, defaultSchemaName, dialect) {
        var _a;
        let idQuote = ((_a = dialect === null || dialect === void 0 ? void 0 : dialect.spec.identifierQuotes) === null || _a === void 0 ? void 0 : _a[0]) || '"';
        let top = new CompletionLevel(idQuote, !!(dialect === null || dialect === void 0 ? void 0 : dialect.spec.caseInsensitiveIdentifiers));
        let defaultSchema = defaultSchemaName ? top.child(defaultSchemaName) : null;
        top.addNamespace(schema);
        if (tables)
            (defaultSchema || top).addCompletions(tables);
        if (schemas)
            top.addCompletions(schemas);
        if (defaultSchema)
            top.addCompletions(defaultSchema.list);
        if (defaultTableName)
            top.addCompletions((defaultSchema || top).child(defaultTableName).list);
        return (context) => {
            let { parents, from, quoted, empty, aliases } = sourceContext(context.state, context.pos);
            if (empty && !context.explicit)
                return null;
            if (aliases && parents.length == 1)
                parents = aliases[parents[0]] || parents;
            let level = top;
            for (let name of parents) {
                while (!level.children || !level.children[name]) {
                    if (level == top && defaultSchema)
                        level = defaultSchema;
                    else if (level == defaultSchema && defaultTableName)
                        level = level.child(defaultTableName);
                    else
                        return null;
                }
                let next = level.maybeChild(name);
                if (!next)
                    return null;
                level = next;
            }
            let quoteAfter = quoted && context.state.sliceDoc(context.pos, context.pos + 1) == quoted;
            let options = level.list;
            if (level == top && aliases)
                options = options.concat(Object.keys(aliases).map(name => ({ label: name, type: "constant" })));
            return {
                from,
                to: quoteAfter ? context.pos + 1 : undefined,
                options: maybeQuoteCompletions(quoted, options),
                validFor: quoted ? QuotedSpan : Span
            };
        };
    }
    function completionType(tokenType) {
        return tokenType == Type ? "type" : tokenType == Keyword ? "keyword" : "variable";
    }
    function completeKeywords(keywords, upperCase, build) {
        let completions = Object.keys(keywords)
            .map(keyword => build(upperCase ? keyword.toUpperCase() : keyword, completionType(keywords[keyword])));
        return ifNotIn(["QuotedIdentifier", "SpecialVar", "String", "LineComment", "BlockComment", "."], completeFromList(completions));
    }

    let parser = /*@__PURE__*/parser$1.configure({
        props: [
            /*@__PURE__*/indentNodeProp.add({
                Statement: /*@__PURE__*/continuedIndent()
            }),
            /*@__PURE__*/foldNodeProp.add({
                Statement(tree, state) { return { from: Math.min(tree.from + 100, state.doc.lineAt(tree.from).to), to: tree.to }; },
                BlockComment(tree) { return { from: tree.from + 2, to: tree.to - 2 }; }
            }),
            /*@__PURE__*/styleTags({
                Keyword: tags$1.keyword,
                Type: tags$1.typeName,
                Builtin: /*@__PURE__*/tags$1.standard(tags$1.name),
                Bits: tags$1.number,
                Bytes: tags$1.string,
                Bool: tags$1.bool,
                Null: tags$1.null,
                Number: tags$1.number,
                String: tags$1.string,
                Identifier: tags$1.name,
                QuotedIdentifier: /*@__PURE__*/tags$1.special(tags$1.string),
                SpecialVar: /*@__PURE__*/tags$1.special(tags$1.name),
                LineComment: tags$1.lineComment,
                BlockComment: tags$1.blockComment,
                Operator: tags$1.operator,
                "Semi Punctuation": tags$1.punctuation,
                "( )": tags$1.paren,
                "{ }": tags$1.brace,
                "[ ]": tags$1.squareBracket
            })
        ]
    });
    /**
    Represents an SQL dialect.
    */
    class SQLDialect {
        constructor(
        /**
        @internal
        */
        dialect,
        /**
        The language for this dialect.
        */
        language,
        /**
        The spec used to define this dialect.
        */
        spec) {
            this.dialect = dialect;
            this.language = language;
            this.spec = spec;
        }
        /**
        Returns the language for this dialect as an extension.
        */
        get extension() { return this.language.extension; }
        /**
        Define a new dialect.
        */
        static define(spec) {
            let d = dialect(spec, spec.keywords, spec.types, spec.builtin);
            let language = LRLanguage.define({
                name: "sql",
                parser: parser.configure({
                    tokenizers: [{ from: tokens, to: tokensFor(d) }]
                }),
                languageData: {
                    commentTokens: { line: "--", block: { open: "/*", close: "*/" } },
                    closeBrackets: { brackets: ["(", "[", "{", "'", '"', "`"] }
                }
            });
            return new SQLDialect(d, language, spec);
        }
    }
    function defaultKeyword(label, type) { return { label, type, boost: -1 }; }
    /**
    Returns a completion source that provides keyword completion for
    the given SQL dialect.
    */
    function keywordCompletionSource(dialect, upperCase = false, build) {
        return completeKeywords(dialect.dialect.words, upperCase, build || defaultKeyword);
    }
    /**
    Returns a completion sources that provides schema-based completion
    for the given configuration.
    */
    function schemaCompletionSource(config) {
        return config.schema ? completeFromSchema(config.schema, config.tables, config.schemas, config.defaultTable, config.defaultSchema, config.dialect || StandardSQL)
            : () => null;
    }
    function schemaCompletion(config) {
        return config.schema ? (config.dialect || StandardSQL).language.data.of({
            autocomplete: schemaCompletionSource(config)
        }) : [];
    }
    /**
    SQL language support for the given SQL dialect, with keyword
    completion, and, if provided, schema-based completion as extra
    extensions.
    */
    function sql(config = {}) {
        let lang = config.dialect || StandardSQL;
        return new LanguageSupport(lang.language, [
            schemaCompletion(config),
            lang.language.data.of({
                autocomplete: keywordCompletionSource(lang, config.upperCaseKeywords, config.keywordCompletion)
            })
        ]);
    }
    /**
    The standard SQL dialect.
    */
    const StandardSQL = /*@__PURE__*/SQLDialect.define({});
    /**
    [SQLite](https://sqlite.org/) dialect.
    */
    const SQLite = /*@__PURE__*/SQLDialect.define({
        keywords: SQLKeywords + "abort analyze attach autoincrement conflict database detach exclusive fail glob ignore index indexed instead isnull notnull offset plan pragma query raise regexp reindex rename replace temp vacuum virtual",
        types: SQLTypes + "bool blob long longblob longtext medium mediumblob mediumint mediumtext tinyblob tinyint tinytext text bigint int2 int8 unsigned signed real",
        builtin: "auth backup bail changes clone databases dbinfo dump echo eqp explain fullschema headers help import imposter indexes iotrace lint load log mode nullvalue once print prompt quit restore save scanstats separator shell show stats system tables testcase timeout timer trace vfsinfo vfslist vfsname width",
        operatorChars: "*+-%<>!=&|/~",
        identifierQuotes: "`\"",
        specialVar: "@:?$"
    });

    var yu$1=Object.create;var vt$2=Object.defineProperty;var Au$1=Object.getOwnPropertyDescriptor;var vu$2=Object.getOwnPropertyNames;var Bu$1=Object.getPrototypeOf,wu$1=Object.prototype.hasOwnProperty;var fr$3=e=>{throw TypeError(e)};var dr$3=(e,t)=>()=>(t||e((t={exports:{}}).exports,t),t.exports),Bt$3=(e,t)=>{for(var r in t)vt$2(e,r,{get:t[r],enumerable:!0});},_u$1=(e,t,r,n)=>{if(t&&typeof t=="object"||typeof t=="function")for(let u of vu$2(t))!wu$1.call(e,u)&&u!==r&&vt$2(e,u,{get:()=>t[u],enumerable:!(n=Au$1(t,u))||n.enumerable});return e};var Me$3=(e,t,r)=>(r=e!=null?yu$1(Bu$1(e)):{},_u$1(vt$2(r,"default",{value:e,enumerable:!0}),e));var xu$1=(e,t,r)=>t.has(e)||fr$3("Cannot "+r);var pr$3=(e,t,r)=>t.has(e)?fr$3("Cannot add the same private member more than once"):t instanceof WeakSet?t.add(e):t.set(e,r);var pe$3=(e,t,r)=>(xu$1(e,t,"access private method"),r);var st$3=dr$3((na,Fn)=>{var pn=new Proxy(String,{get:()=>pn});Fn.exports=pn;});var Wn$3=dr$3(nr=>{Object.defineProperty(nr,"__esModule",{value:!0});function Bi(){return new Proxy({},{get:()=>e=>e})}var Hn=/\r\n|[\n\r\u2028\u2029]/;function wi(e,t,r){let n=Object.assign({column:0,line:-1},e.start),u=Object.assign({},n,e.end),{linesAbove:i=2,linesBelow:o=3}=r||{},s=n.line,a=n.column,D=u.line,l=u.column,p=Math.max(s-(i+1),0),f=Math.min(t.length,D+o);s===-1&&(p=0),D===-1&&(f=t.length);let d=D-s,c={};if(d)for(let F=0;F<=d;F++){let m=F+s;if(!a)c[m]=!0;else if(F===0){let h=t[m-1].length;c[m]=[a,h-a+1];}else if(F===d)c[m]=[0,l];else {let h=t[m-F].length;c[m]=[0,h];}}else a===l?a?c[s]=[a,0]:c[s]=!0:c[s]=[a,l-a];return {start:p,end:f,markerLines:c}}function _i(e,t,r={}){let u=Bi(),i=e.split(Hn),{start:o,end:s,markerLines:a}=wi(t,i,r),D=t.start&&typeof t.start.column=="number",l=String(s).length,f=e.split(Hn,s).slice(o,s).map((d,c)=>{let F=o+1+c,h=` ${` ${F}`.slice(-l)} |`,C=a[F],v=!a[F+1];if(C){let E="";if(Array.isArray(C)){let g=d.slice(0,Math.max(C[0]-1,0)).replace(/[^\t]/g," "),j=C[1]||1;E=[`
 `,u.gutter(h.replace(/\d/g," "))," ",g,u.marker("^").repeat(j)].join(""),v&&r.message&&(E+=" "+u.message(r.message));}return [u.marker(">"),u.gutter(h),d.length>0?` ${d}`:"",E].join("")}else return ` ${u.gutter(h)}${d.length>0?` ${d}`:""}`}).join(`
`);return r.message&&!D&&(f=`${" ".repeat(l+1)}${r.message}
${f}`),f}nr.codeFrameColumns=_i;});var cr$3={};Bt$3(cr$3,{__debug:()=>Do$2,check:()=>so$1,doc:()=>ar$3,format:()=>gu$2,formatWithCursor:()=>Cu$1,getSupportInfo:()=>ao$1,util:()=>lr$3,version:()=>lu$1});var bu$2=(e,t,r,n)=>{if(!(e&&t==null))return t.replaceAll?t.replaceAll(r,n):r.global?t.replace(r,n):t.split(r).join(n)},ne$1=bu$2;function M(){}M.prototype={diff:function(t,r){var n,u=arguments.length>2&&arguments[2]!==void 0?arguments[2]:{},i=u.callback;typeof u=="function"&&(i=u,u={});var o=this;function s(E){return E=o.postProcess(E,u),i?(setTimeout(function(){i(E);},0),!0):E}t=this.castInput(t,u),r=this.castInput(r,u),t=this.removeEmpty(this.tokenize(t,u)),r=this.removeEmpty(this.tokenize(r,u));var a=r.length,D=t.length,l=1,p=a+D;u.maxEditLength!=null&&(p=Math.min(p,u.maxEditLength));var f=(n=u.timeout)!==null&&n!==void 0?n:1/0,d=Date.now()+f,c=[{oldPos:-1,lastComponent:void 0}],F=this.extractCommon(c[0],r,t,0,u);if(c[0].oldPos+1>=D&&F+1>=a)return s(Fr$3(o,c[0].lastComponent,r,t,o.useLongestToken));var m=-1/0,h=1/0;function C(){for(var E=Math.max(m,-l);E<=Math.min(h,l);E+=2){var g=void 0,j=c[E-1],b=c[E+1];j&&(c[E-1]=void 0);var X=!1;if(b){var ae=b.oldPos-E;X=b&&0<=ae&&ae<a;}var $e=j&&j.oldPos+1<D;if(!X&&!$e){c[E]=void 0;continue}if(!$e||X&&j.oldPos<b.oldPos?g=o.addToPath(b,!0,!1,0,u):g=o.addToPath(j,!1,!0,1,u),F=o.extractCommon(g,r,t,E,u),g.oldPos+1>=D&&F+1>=a)return s(Fr$3(o,g.lastComponent,r,t,o.useLongestToken));c[E]=g,g.oldPos+1>=D&&(h=Math.min(h,E-1)),F+1>=a&&(m=Math.max(m,E+1));}l++;}if(i)(function E(){setTimeout(function(){if(l>p||Date.now()>d)return i();C()||E();},0);})();else for(;l<=p&&Date.now()<=d;){var v=C();if(v)return v}},addToPath:function(t,r,n,u,i){var o=t.lastComponent;return o&&!i.oneChangePerToken&&o.added===r&&o.removed===n?{oldPos:t.oldPos+u,lastComponent:{count:o.count+1,added:r,removed:n,previousComponent:o.previousComponent}}:{oldPos:t.oldPos+u,lastComponent:{count:1,added:r,removed:n,previousComponent:o}}},extractCommon:function(t,r,n,u,i){for(var o=r.length,s=n.length,a=t.oldPos,D=a-u,l=0;D+1<o&&a+1<s&&this.equals(n[a+1],r[D+1],i);)D++,a++,l++,i.oneChangePerToken&&(t.lastComponent={count:1,previousComponent:t.lastComponent,added:!1,removed:!1});return l&&!i.oneChangePerToken&&(t.lastComponent={count:l,previousComponent:t.lastComponent,added:!1,removed:!1}),t.oldPos=a,D},equals:function(t,r,n){return n.comparator?n.comparator(t,r):t===r||n.ignoreCase&&t.toLowerCase()===r.toLowerCase()},removeEmpty:function(t){for(var r=[],n=0;n<t.length;n++)t[n]&&r.push(t[n]);return r},castInput:function(t){return t},tokenize:function(t){return Array.from(t)},join:function(t){return t.join("")},postProcess:function(t){return t}};function Fr$3(e,t,r,n,u){for(var i=[],o;t;)i.push(t),o=t.previousComponent,delete t.previousComponent,t=o;i.reverse();for(var s=0,a=i.length,D=0,l=0;s<a;s++){var p=i[s];if(p.removed)p.value=e.join(n.slice(l,l+p.count)),l+=p.count;else {if(!p.added&&u){var f=r.slice(D,D+p.count);f=f.map(function(d,c){var F=n[l+c];return F.length>d.length?F:d}),p.value=e.join(f);}else p.value=e.join(r.slice(D,D+p.count));D+=p.count,p.added||(l+=p.count);}}return i}function mr$3(e,t){var r;for(r=0;r<e.length&&r<t.length;r++)if(e[r]!=t[r])return e.slice(0,r);return e.slice(0,r)}function hr$3(e,t){var r;if(!e||!t||e[e.length-1]!=t[t.length-1])return "";for(r=0;r<e.length&&r<t.length;r++)if(e[e.length-(r+1)]!=t[t.length-(r+1)])return e.slice(-r);return e.slice(-r)}function wt$3(e,t,r){if(e.slice(0,t.length)!=t)throw Error("string ".concat(JSON.stringify(e)," doesn't start with prefix ").concat(JSON.stringify(t),"; this is a bug"));return r+e.slice(t.length)}function _t$2(e,t,r){if(!t)return e+r;if(e.slice(-t.length)!=t)throw Error("string ".concat(JSON.stringify(e)," doesn't end with suffix ").concat(JSON.stringify(t),"; this is a bug"));return e.slice(0,-t.length)+r}function we$3(e,t){return wt$3(e,t,"")}function Ue$3(e,t){return _t$2(e,t,"")}function Er$3(e,t){return t.slice(0,Nu$2(e,t))}function Nu$2(e,t){var r=0;e.length>t.length&&(r=e.length-t.length);var n=t.length;e.length<t.length&&(n=e.length);var u=Array(n),i=0;u[0]=0;for(var o=1;o<n;o++){for(t[o]==t[i]?u[o]=u[i]:u[o]=i;i>0&&t[o]!=t[i];)i=u[i];t[o]==t[i]&&i++;}i=0;for(var s=r;s<e.length;s++){for(;i>0&&e[s]!=t[i];)i=u[i];e[s]==t[i]&&i++;}return i}var Ve$3="a-zA-Z0-9_\\u{C0}-\\u{FF}\\u{D8}-\\u{F6}\\u{F8}-\\u{2C6}\\u{2C8}-\\u{2D7}\\u{2DE}-\\u{2FF}\\u{1E00}-\\u{1EFF}",Ou$2=new RegExp("[".concat(Ve$3,"]+|\\s+|[^").concat(Ve$3,"]"),"ug"),Ge$3=new M;Ge$3.equals=function(e,t,r){return r.ignoreCase&&(e=e.toLowerCase(),t=t.toLowerCase()),e.trim()===t.trim()};Ge$3.tokenize=function(e){var t=arguments.length>1&&arguments[1]!==void 0?arguments[1]:{},r;if(t.intlSegmenter){if(t.intlSegmenter.resolvedOptions().granularity!="word")throw new Error('The segmenter passed must have a granularity of "word"');r=Array.from(t.intlSegmenter.segment(e),function(i){return i.segment});}else r=e.match(Ou$2)||[];var n=[],u=null;return r.forEach(function(i){/\s/.test(i)?u==null?n.push(i):n.push(n.pop()+i):/\s/.test(u)?n[n.length-1]==u?n.push(n.pop()+i):n.push(u+i):n.push(i),u=i;}),n};Ge$3.join=function(e){return e.map(function(t,r){return r==0?t:t.replace(/^\s+/,"")}).join("")};Ge$3.postProcess=function(e,t){if(!e||t.oneChangePerToken)return e;var r=null,n=null,u=null;return e.forEach(function(i){i.added?n=i:i.removed?u=i:((n||u)&&Cr$2(r,u,n,i),r=i,n=null,u=null);}),(n||u)&&Cr$2(r,u,n,null),e};function Cr$2(e,t,r,n){if(t&&r){var u=t.value.match(/^\s*/)[0],i=t.value.match(/\s*$/)[0],o=r.value.match(/^\s*/)[0],s=r.value.match(/\s*$/)[0];if(e){var a=mr$3(u,o);e.value=_t$2(e.value,o,a),t.value=we$3(t.value,a),r.value=we$3(r.value,a);}if(n){var D=hr$3(i,s);n.value=wt$3(n.value,s,D),t.value=Ue$3(t.value,D),r.value=Ue$3(r.value,D);}}else if(r)e&&(r.value=r.value.replace(/^\s*/,"")),n&&(n.value=n.value.replace(/^\s*/,""));else if(e&&n){var l=n.value.match(/^\s*/)[0],p=t.value.match(/^\s*/)[0],f=t.value.match(/\s*$/)[0],d=mr$3(l,p);t.value=we$3(t.value,d);var c=hr$3(we$3(l,d),f);t.value=Ue$3(t.value,c),n.value=wt$3(n.value,l,c),e.value=_t$2(e.value,l,l.slice(0,l.length-c.length));}else if(n){var F=n.value.match(/^\s*/)[0],m=t.value.match(/\s*$/)[0],h=Er$3(m,F);t.value=Ue$3(t.value,h);}else if(e){var C=e.value.match(/\s*$/)[0],v=t.value.match(/^\s*/)[0],E=Er$3(C,v);t.value=we$3(t.value,E);}}var Su$1=new M;Su$1.tokenize=function(e){var t=new RegExp("(\\r?\\n)|[".concat(Ve$3,"]+|[^\\S\\n\\r]+|[^").concat(Ve$3,"]"),"ug");return e.match(t)||[]};var Nt$3=new M;Nt$3.tokenize=function(e,t){t.stripTrailingCr&&(e=e.replace(/\r\n/g,`
`));var r=[],n=e.split(/(\n|\r\n)/);n[n.length-1]||n.pop();for(var u=0;u<n.length;u++){var i=n[u];u%2&&!t.newlineIsToken?r[r.length-1]+=i:r.push(i);}return r};Nt$3.equals=function(e,t,r){return r.ignoreWhitespace?((!r.newlineIsToken||!e.includes(`
`))&&(e=e.trim()),(!r.newlineIsToken||!t.includes(`
`))&&(t=t.trim())):r.ignoreNewlineAtEof&&!r.newlineIsToken&&(e.endsWith(`
`)&&(e=e.slice(0,-1)),t.endsWith(`
`)&&(t=t.slice(0,-1))),M.prototype.equals.call(this,e,t,r)};var Tu$2=new M;Tu$2.tokenize=function(e){return e.split(/(\S.+?[.!?])(?=\s+|$)/)};var ku$2=new M;ku$2.tokenize=function(e){return e.split(/([{}:;,]|\s+)/)};function xt$2(e){"@babel/helpers - typeof";return xt$2=typeof Symbol=="function"&&typeof Symbol.iterator=="symbol"?function(t){return typeof t}:function(t){return t&&typeof Symbol=="function"&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},xt$2(e)}var _e$3=new M;_e$3.useLongestToken=!0;_e$3.tokenize=Nt$3.tokenize;_e$3.castInput=function(e,t){var r=t.undefinedReplacement,n=t.stringifyReplacer,u=n===void 0?function(i,o){return typeof o>"u"?r:o}:n;return typeof e=="string"?e:JSON.stringify(bt$3(e,null,null,u),u,"  ")};_e$3.equals=function(e,t,r){return M.prototype.equals.call(_e$3,e.replace(/,([\r\n])/g,"$1"),t.replace(/,([\r\n])/g,"$1"),r)};function bt$3(e,t,r,n,u){t=t||[],r=r||[],n&&(e=n(u,e));var i;for(i=0;i<t.length;i+=1)if(t[i]===e)return r[i];var o;if(Object.prototype.toString.call(e)==="[object Array]"){for(t.push(e),o=new Array(e.length),r.push(o),i=0;i<e.length;i+=1)o[i]=bt$3(e[i],t,r,n,u);return t.pop(),r.pop(),o}if(e&&e.toJSON&&(e=e.toJSON()),xt$2(e)==="object"&&e!==null){t.push(e),o={},r.push(o);var s=[],a;for(a in e)Object.prototype.hasOwnProperty.call(e,a)&&s.push(a);for(s.sort(),i=0;i<s.length;i+=1)a=s[i],o[a]=bt$3(e[a],t,r,n,a);t.pop(),r.pop();}else o=e;return o}var ze$3=new M;ze$3.tokenize=function(e){return e.slice()};ze$3.join=ze$3.removeEmpty=function(e){return e};function gr$3(e,t,r){return ze$3.diff(e,t,r)}function yr$3(e){let t=e.indexOf("\r");return t!==-1?e.charAt(t+1)===`
`?"crlf":"cr":"lf"}function xe$4(e){switch(e){case"cr":return "\r";case"crlf":return `\r
`;default:return `
`}}function Ot$3(e,t){let r;switch(t){case`
`:r=/\n/gu;break;case"\r":r=/\r/gu;break;case`\r
`:r=/\r\n/gu;break;default:throw new Error(`Unexpected "eol" ${JSON.stringify(t)}.`)}let n=e.match(r);return n?n.length:0}function Ar$3(e){return ne$1(!1,e,/\r\n?/gu,`
`)}var U$2="string",H$2="array",V$1="cursor",T$1="indent",k$3="align",L$4="trim",B$3="group",N$2="fill",w$1="if-break",P$2="indent-if-break",I$1="line-suffix",R$1="line-suffix-boundary",A$1="line",O$2="label",_$2="break-parent",Ke$3=new Set([V$1,T$1,k$3,L$4,B$3,N$2,w$1,P$2,I$1,R$1,A$1,O$2,_$2]);function Lu$1(e){if(typeof e=="string")return U$2;if(Array.isArray(e))return H$2;if(!e)return;let{type:t}=e;if(Ke$3.has(t))return t}var z$3=Lu$1;var Pu$1=e=>new Intl.ListFormat("en-US",{type:"disjunction"}).format(e);function Iu$1(e){let t=e===null?"null":typeof e;if(t!=="string"&&t!=="object")return `Unexpected doc '${t}',
Expected it to be 'string' or 'object'.`;if(z$3(e))throw new Error("doc is valid.");let r=Object.prototype.toString.call(e);if(r!=="[object Object]")return `Unexpected doc '${r}'.`;let n=Pu$1([...Ke$3].map(u=>`'${u}'`));return `Unexpected doc.type '${e.type}'.
Expected it to be ${n}.`}var St$2=class St extends Error{name="InvalidDocError";constructor(t){super(Iu$1(t)),this.doc=t;}},Q$2=St$2;var vr$3={};function Ru$2(e,t,r,n){let u=[e];for(;u.length>0;){let i=u.pop();if(i===vr$3){r(u.pop());continue}r&&u.push(i,vr$3);let o=z$3(i);if(!o)throw new Q$2(i);if((t==null?void 0:t(i))!==!1)switch(o){case H$2:case N$2:{let s=o===H$2?i:i.parts;for(let a=s.length,D=a-1;D>=0;--D)u.push(s[D]);break}case w$1:u.push(i.flatContents,i.breakContents);break;case B$3:if(n&&i.expandedStates)for(let s=i.expandedStates.length,a=s-1;a>=0;--a)u.push(i.expandedStates[a]);else u.push(i.contents);break;case k$3:case T$1:case P$2:case O$2:case I$1:u.push(i.contents);break;case U$2:case V$1:case L$4:case R$1:case A$1:case _$2:break;default:throw new Q$2(i)}}}var be$3=Ru$2;var Br$3=()=>{},Je$3=Br$3;function le$2(e){return {type:T$1,contents:e}}function De$4(e,t){return {type:k$3,contents:t,n:e}}function Tt$4(e,t={}){return Je$3(t.expandedStates),{type:B$3,id:t.id,contents:e,break:!!t.shouldBreak,expandedStates:t.expandedStates}}function wr$3(e){return De$4(Number.NEGATIVE_INFINITY,e)}function _r$3(e){return De$4({type:"root"},e)}function xr$3(e){return De$4(-1,e)}function br$3(e,t){return Tt$4(e[0],{...t,expandedStates:e})}function Nr$2(e){return {type:N$2,parts:e}}function Or$3(e,t="",r={}){return {type:w$1,breakContents:e,flatContents:t,groupId:r.groupId}}function Sr$3(e,t){return {type:P$2,contents:e,groupId:t.groupId,negate:t.negate}}function Ne$3(e){return {type:I$1,contents:e}}var Tr$3={type:R$1},Fe$3={type:_$2},kr$3={type:L$4},Oe$4={type:A$1,hard:!0},kt$2={type:A$1,hard:!0,literal:!0},qe$2={type:A$1},Lr$3={type:A$1,soft:!0},K$4=[Oe$4,Fe$3],Xe$3=[kt$2,Fe$3],Z$2={type:V$1};function Se$3(e,t){let r=[];for(let n=0;n<t.length;n++)n!==0&&r.push(e),r.push(t[n]);return r}function Qe$3(e,t,r){let n=e;if(t>0){for(let u=0;u<Math.floor(t/r);++u)n=le$2(n);n=De$4(t%r,n),n=De$4(Number.NEGATIVE_INFINITY,n);}return n}function Pr$2(e,t){return e?{type:O$2,label:e,contents:t}:t}function ee$3(e){var t;if(!e)return "";if(Array.isArray(e)){let r=[];for(let n of e)if(Array.isArray(n))r.push(...ee$3(n));else {let u=ee$3(n);u!==""&&r.push(u);}return r}return e.type===w$1?{...e,breakContents:ee$3(e.breakContents),flatContents:ee$3(e.flatContents)}:e.type===B$3?{...e,contents:ee$3(e.contents),expandedStates:(t=e.expandedStates)==null?void 0:t.map(ee$3)}:e.type===N$2?{type:"fill",parts:e.parts.map(ee$3)}:e.contents?{...e,contents:ee$3(e.contents)}:e}function Ir$2(e){let t=Object.create(null),r=new Set;return n(ee$3(e));function n(i,o,s){var a,D;if(typeof i=="string")return JSON.stringify(i);if(Array.isArray(i)){let l=i.map(n).filter(Boolean);return l.length===1?l[0]:`[${l.join(", ")}]`}if(i.type===A$1){let l=((a=s==null?void 0:s[o+1])==null?void 0:a.type)===_$2;return i.literal?l?"literalline":"literallineWithoutBreakParent":i.hard?l?"hardline":"hardlineWithoutBreakParent":i.soft?"softline":"line"}if(i.type===_$2)return ((D=s==null?void 0:s[o-1])==null?void 0:D.type)===A$1&&s[o-1].hard?void 0:"breakParent";if(i.type===L$4)return "trim";if(i.type===T$1)return "indent("+n(i.contents)+")";if(i.type===k$3)return i.n===Number.NEGATIVE_INFINITY?"dedentToRoot("+n(i.contents)+")":i.n<0?"dedent("+n(i.contents)+")":i.n.type==="root"?"markAsRoot("+n(i.contents)+")":"align("+JSON.stringify(i.n)+", "+n(i.contents)+")";if(i.type===w$1)return "ifBreak("+n(i.breakContents)+(i.flatContents?", "+n(i.flatContents):"")+(i.groupId?(i.flatContents?"":', ""')+`, { groupId: ${u(i.groupId)} }`:"")+")";if(i.type===P$2){let l=[];i.negate&&l.push("negate: true"),i.groupId&&l.push(`groupId: ${u(i.groupId)}`);let p=l.length>0?`, { ${l.join(", ")} }`:"";return `indentIfBreak(${n(i.contents)}${p})`}if(i.type===B$3){let l=[];i.break&&i.break!=="propagated"&&l.push("shouldBreak: true"),i.id&&l.push(`id: ${u(i.id)}`);let p=l.length>0?`, { ${l.join(", ")} }`:"";return i.expandedStates?`conditionalGroup([${i.expandedStates.map(f=>n(f)).join(",")}]${p})`:`group(${n(i.contents)}${p})`}if(i.type===N$2)return `fill([${i.parts.map(l=>n(l)).join(", ")}])`;if(i.type===I$1)return "lineSuffix("+n(i.contents)+")";if(i.type===R$1)return "lineSuffixBoundary";if(i.type===O$2)return `label(${JSON.stringify(i.label)}, ${n(i.contents)})`;throw new Error("Unknown doc type "+i.type)}function u(i){if(typeof i!="symbol")return JSON.stringify(String(i));if(i in t)return t[i];let o=i.description||"symbol";for(let s=0;;s++){let a=o+(s>0?` #${s}`:"");if(!r.has(a))return r.add(a),t[i]=`Symbol.for(${JSON.stringify(a)})`}}}var Yu$2=(e,t,r)=>{if(!(e&&t==null))return Array.isArray(t)||typeof t=="string"?t[r<0?t.length+r:r]:t.at(r)},y=Yu$2;var Rr$2=()=>/[#*0-9]\uFE0F?\u20E3|[\xA9\xAE\u203C\u2049\u2122\u2139\u2194-\u2199\u21A9\u21AA\u231A\u231B\u2328\u23CF\u23ED-\u23EF\u23F1\u23F2\u23F8-\u23FA\u24C2\u25AA\u25AB\u25B6\u25C0\u25FB\u25FC\u25FE\u2600-\u2604\u260E\u2611\u2614\u2615\u2618\u2620\u2622\u2623\u2626\u262A\u262E\u262F\u2638-\u263A\u2640\u2642\u2648-\u2653\u265F\u2660\u2663\u2665\u2666\u2668\u267B\u267E\u267F\u2692\u2694-\u2697\u2699\u269B\u269C\u26A0\u26A7\u26AA\u26B0\u26B1\u26BD\u26BE\u26C4\u26C8\u26CF\u26D1\u26E9\u26F0-\u26F5\u26F7\u26F8\u26FA\u2702\u2708\u2709\u270F\u2712\u2714\u2716\u271D\u2721\u2733\u2734\u2744\u2747\u2757\u2763\u27A1\u2934\u2935\u2B05-\u2B07\u2B1B\u2B1C\u2B55\u3030\u303D\u3297\u3299]\uFE0F?|[\u261D\u270C\u270D](?:\uD83C[\uDFFB-\uDFFF]|\uFE0F)?|[\u270A\u270B](?:\uD83C[\uDFFB-\uDFFF])?|[\u23E9-\u23EC\u23F0\u23F3\u25FD\u2693\u26A1\u26AB\u26C5\u26CE\u26D4\u26EA\u26FD\u2705\u2728\u274C\u274E\u2753-\u2755\u2795-\u2797\u27B0\u27BF\u2B50]|\u26D3\uFE0F?(?:\u200D\uD83D\uDCA5)?|\u26F9(?:\uD83C[\uDFFB-\uDFFF]|\uFE0F)?(?:\u200D[\u2640\u2642]\uFE0F?)?|\u2764\uFE0F?(?:\u200D(?:\uD83D\uDD25|\uD83E\uDE79))?|\uD83C(?:[\uDC04\uDD70\uDD71\uDD7E\uDD7F\uDE02\uDE37\uDF21\uDF24-\uDF2C\uDF36\uDF7D\uDF96\uDF97\uDF99-\uDF9B\uDF9E\uDF9F\uDFCD\uDFCE\uDFD4-\uDFDF\uDFF5\uDFF7]\uFE0F?|[\uDF85\uDFC2\uDFC7](?:\uD83C[\uDFFB-\uDFFF])?|[\uDFC4\uDFCA](?:\uD83C[\uDFFB-\uDFFF])?(?:\u200D[\u2640\u2642]\uFE0F?)?|[\uDFCB\uDFCC](?:\uD83C[\uDFFB-\uDFFF]|\uFE0F)?(?:\u200D[\u2640\u2642]\uFE0F?)?|[\uDCCF\uDD8E\uDD91-\uDD9A\uDE01\uDE1A\uDE2F\uDE32-\uDE36\uDE38-\uDE3A\uDE50\uDE51\uDF00-\uDF20\uDF2D-\uDF35\uDF37-\uDF43\uDF45-\uDF4A\uDF4C-\uDF7C\uDF7E-\uDF84\uDF86-\uDF93\uDFA0-\uDFC1\uDFC5\uDFC6\uDFC8\uDFC9\uDFCF-\uDFD3\uDFE0-\uDFF0\uDFF8-\uDFFF]|\uDDE6\uD83C[\uDDE8-\uDDEC\uDDEE\uDDF1\uDDF2\uDDF4\uDDF6-\uDDFA\uDDFC\uDDFD\uDDFF]|\uDDE7\uD83C[\uDDE6\uDDE7\uDDE9-\uDDEF\uDDF1-\uDDF4\uDDF6-\uDDF9\uDDFB\uDDFC\uDDFE\uDDFF]|\uDDE8\uD83C[\uDDE6\uDDE8\uDDE9\uDDEB-\uDDEE\uDDF0-\uDDF7\uDDFA-\uDDFF]|\uDDE9\uD83C[\uDDEA\uDDEC\uDDEF\uDDF0\uDDF2\uDDF4\uDDFF]|\uDDEA\uD83C[\uDDE6\uDDE8\uDDEA\uDDEC\uDDED\uDDF7-\uDDFA]|\uDDEB\uD83C[\uDDEE-\uDDF0\uDDF2\uDDF4\uDDF7]|\uDDEC\uD83C[\uDDE6\uDDE7\uDDE9-\uDDEE\uDDF1-\uDDF3\uDDF5-\uDDFA\uDDFC\uDDFE]|\uDDED\uD83C[\uDDF0\uDDF2\uDDF3\uDDF7\uDDF9\uDDFA]|\uDDEE\uD83C[\uDDE8-\uDDEA\uDDF1-\uDDF4\uDDF6-\uDDF9]|\uDDEF\uD83C[\uDDEA\uDDF2\uDDF4\uDDF5]|\uDDF0\uD83C[\uDDEA\uDDEC-\uDDEE\uDDF2\uDDF3\uDDF5\uDDF7\uDDFC\uDDFE\uDDFF]|\uDDF1\uD83C[\uDDE6-\uDDE8\uDDEE\uDDF0\uDDF7-\uDDFB\uDDFE]|\uDDF2\uD83C[\uDDE6\uDDE8-\uDDED\uDDF0-\uDDFF]|\uDDF3\uD83C[\uDDE6\uDDE8\uDDEA-\uDDEC\uDDEE\uDDF1\uDDF4\uDDF5\uDDF7\uDDFA\uDDFF]|\uDDF4\uD83C\uDDF2|\uDDF5\uD83C[\uDDE6\uDDEA-\uDDED\uDDF0-\uDDF3\uDDF7-\uDDF9\uDDFC\uDDFE]|\uDDF6\uD83C\uDDE6|\uDDF7\uD83C[\uDDEA\uDDF4\uDDF8\uDDFA\uDDFC]|\uDDF8\uD83C[\uDDE6-\uDDEA\uDDEC-\uDDF4\uDDF7-\uDDF9\uDDFB\uDDFD-\uDDFF]|\uDDF9\uD83C[\uDDE6\uDDE8\uDDE9\uDDEB-\uDDED\uDDEF-\uDDF4\uDDF7\uDDF9\uDDFB\uDDFC\uDDFF]|\uDDFA\uD83C[\uDDE6\uDDEC\uDDF2\uDDF3\uDDF8\uDDFE\uDDFF]|\uDDFB\uD83C[\uDDE6\uDDE8\uDDEA\uDDEC\uDDEE\uDDF3\uDDFA]|\uDDFC\uD83C[\uDDEB\uDDF8]|\uDDFD\uD83C\uDDF0|\uDDFE\uD83C[\uDDEA\uDDF9]|\uDDFF\uD83C[\uDDE6\uDDF2\uDDFC]|\uDF44(?:\u200D\uD83D\uDFEB)?|\uDF4B(?:\u200D\uD83D\uDFE9)?|\uDFC3(?:\uD83C[\uDFFB-\uDFFF])?(?:\u200D(?:[\u2640\u2642]\uFE0F?(?:\u200D\u27A1\uFE0F?)?|\u27A1\uFE0F?))?|\uDFF3\uFE0F?(?:\u200D(?:\u26A7\uFE0F?|\uD83C\uDF08))?|\uDFF4(?:\u200D\u2620\uFE0F?|\uDB40\uDC67\uDB40\uDC62\uDB40(?:\uDC65\uDB40\uDC6E\uDB40\uDC67|\uDC73\uDB40\uDC63\uDB40\uDC74|\uDC77\uDB40\uDC6C\uDB40\uDC73)\uDB40\uDC7F)?)|\uD83D(?:[\uDC3F\uDCFD\uDD49\uDD4A\uDD6F\uDD70\uDD73\uDD76-\uDD79\uDD87\uDD8A-\uDD8D\uDDA5\uDDA8\uDDB1\uDDB2\uDDBC\uDDC2-\uDDC4\uDDD1-\uDDD3\uDDDC-\uDDDE\uDDE1\uDDE3\uDDE8\uDDEF\uDDF3\uDDFA\uDECB\uDECD-\uDECF\uDEE0-\uDEE5\uDEE9\uDEF0\uDEF3]\uFE0F?|[\uDC42\uDC43\uDC46-\uDC50\uDC66\uDC67\uDC6B-\uDC6D\uDC72\uDC74-\uDC76\uDC78\uDC7C\uDC83\uDC85\uDC8F\uDC91\uDCAA\uDD7A\uDD95\uDD96\uDE4C\uDE4F\uDEC0\uDECC](?:\uD83C[\uDFFB-\uDFFF])?|[\uDC6E\uDC70\uDC71\uDC73\uDC77\uDC81\uDC82\uDC86\uDC87\uDE45-\uDE47\uDE4B\uDE4D\uDE4E\uDEA3\uDEB4\uDEB5](?:\uD83C[\uDFFB-\uDFFF])?(?:\u200D[\u2640\u2642]\uFE0F?)?|[\uDD74\uDD90](?:\uD83C[\uDFFB-\uDFFF]|\uFE0F)?|[\uDC00-\uDC07\uDC09-\uDC14\uDC16-\uDC25\uDC27-\uDC3A\uDC3C-\uDC3E\uDC40\uDC44\uDC45\uDC51-\uDC65\uDC6A\uDC79-\uDC7B\uDC7D-\uDC80\uDC84\uDC88-\uDC8E\uDC90\uDC92-\uDCA9\uDCAB-\uDCFC\uDCFF-\uDD3D\uDD4B-\uDD4E\uDD50-\uDD67\uDDA4\uDDFB-\uDE2D\uDE2F-\uDE34\uDE37-\uDE41\uDE43\uDE44\uDE48-\uDE4A\uDE80-\uDEA2\uDEA4-\uDEB3\uDEB7-\uDEBF\uDEC1-\uDEC5\uDED0-\uDED2\uDED5-\uDED7\uDEDC-\uDEDF\uDEEB\uDEEC\uDEF4-\uDEFC\uDFE0-\uDFEB\uDFF0]|\uDC08(?:\u200D\u2B1B)?|\uDC15(?:\u200D\uD83E\uDDBA)?|\uDC26(?:\u200D(?:\u2B1B|\uD83D\uDD25))?|\uDC3B(?:\u200D\u2744\uFE0F?)?|\uDC41\uFE0F?(?:\u200D\uD83D\uDDE8\uFE0F?)?|\uDC68(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D\uD83D(?:\uDC8B\u200D\uD83D)?\uDC68|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D(?:[\uDC68\uDC69]\u200D\uD83D(?:\uDC66(?:\u200D\uD83D\uDC66)?|\uDC67(?:\u200D\uD83D[\uDC66\uDC67])?)|[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uDC66(?:\u200D\uD83D\uDC66)?|\uDC67(?:\u200D\uD83D[\uDC66\uDC67])?)|\uD83E(?:[\uDDAF\uDDBC\uDDBD](?:\u200D\u27A1\uFE0F?)?|[\uDDB0-\uDDB3]))|\uD83C(?:\uDFFB(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D\uD83D(?:\uDC8B\u200D\uD83D)?\uDC68\uD83C[\uDFFB-\uDFFF]|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF\uDDBC\uDDBD](?:\u200D\u27A1\uFE0F?)?|[\uDDB0-\uDDB3]|\uDD1D\u200D\uD83D\uDC68\uD83C[\uDFFC-\uDFFF])))?|\uDFFC(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D\uD83D(?:\uDC8B\u200D\uD83D)?\uDC68\uD83C[\uDFFB-\uDFFF]|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF\uDDBC\uDDBD](?:\u200D\u27A1\uFE0F?)?|[\uDDB0-\uDDB3]|\uDD1D\u200D\uD83D\uDC68\uD83C[\uDFFB\uDFFD-\uDFFF])))?|\uDFFD(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D\uD83D(?:\uDC8B\u200D\uD83D)?\uDC68\uD83C[\uDFFB-\uDFFF]|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF\uDDBC\uDDBD](?:\u200D\u27A1\uFE0F?)?|[\uDDB0-\uDDB3]|\uDD1D\u200D\uD83D\uDC68\uD83C[\uDFFB\uDFFC\uDFFE\uDFFF])))?|\uDFFE(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D\uD83D(?:\uDC8B\u200D\uD83D)?\uDC68\uD83C[\uDFFB-\uDFFF]|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF\uDDBC\uDDBD](?:\u200D\u27A1\uFE0F?)?|[\uDDB0-\uDDB3]|\uDD1D\u200D\uD83D\uDC68\uD83C[\uDFFB-\uDFFD\uDFFF])))?|\uDFFF(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D\uD83D(?:\uDC8B\u200D\uD83D)?\uDC68\uD83C[\uDFFB-\uDFFF]|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF\uDDBC\uDDBD](?:\u200D\u27A1\uFE0F?)?|[\uDDB0-\uDDB3]|\uDD1D\u200D\uD83D\uDC68\uD83C[\uDFFB-\uDFFE])))?))?|\uDC69(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D\uD83D(?:\uDC8B\u200D\uD83D)?[\uDC68\uDC69]|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D(?:[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uDC66(?:\u200D\uD83D\uDC66)?|\uDC67(?:\u200D\uD83D[\uDC66\uDC67])?|\uDC69\u200D\uD83D(?:\uDC66(?:\u200D\uD83D\uDC66)?|\uDC67(?:\u200D\uD83D[\uDC66\uDC67])?))|\uD83E(?:[\uDDAF\uDDBC\uDDBD](?:\u200D\u27A1\uFE0F?)?|[\uDDB0-\uDDB3]))|\uD83C(?:\uDFFB(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D\uD83D(?:[\uDC68\uDC69]|\uDC8B\u200D\uD83D[\uDC68\uDC69])\uD83C[\uDFFB-\uDFFF]|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF\uDDBC\uDDBD](?:\u200D\u27A1\uFE0F?)?|[\uDDB0-\uDDB3]|\uDD1D\u200D\uD83D[\uDC68\uDC69]\uD83C[\uDFFC-\uDFFF])))?|\uDFFC(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D\uD83D(?:[\uDC68\uDC69]|\uDC8B\u200D\uD83D[\uDC68\uDC69])\uD83C[\uDFFB-\uDFFF]|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF\uDDBC\uDDBD](?:\u200D\u27A1\uFE0F?)?|[\uDDB0-\uDDB3]|\uDD1D\u200D\uD83D[\uDC68\uDC69]\uD83C[\uDFFB\uDFFD-\uDFFF])))?|\uDFFD(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D\uD83D(?:[\uDC68\uDC69]|\uDC8B\u200D\uD83D[\uDC68\uDC69])\uD83C[\uDFFB-\uDFFF]|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF\uDDBC\uDDBD](?:\u200D\u27A1\uFE0F?)?|[\uDDB0-\uDDB3]|\uDD1D\u200D\uD83D[\uDC68\uDC69]\uD83C[\uDFFB\uDFFC\uDFFE\uDFFF])))?|\uDFFE(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D\uD83D(?:[\uDC68\uDC69]|\uDC8B\u200D\uD83D[\uDC68\uDC69])\uD83C[\uDFFB-\uDFFF]|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF\uDDBC\uDDBD](?:\u200D\u27A1\uFE0F?)?|[\uDDB0-\uDDB3]|\uDD1D\u200D\uD83D[\uDC68\uDC69]\uD83C[\uDFFB-\uDFFD\uDFFF])))?|\uDFFF(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D\uD83D(?:[\uDC68\uDC69]|\uDC8B\u200D\uD83D[\uDC68\uDC69])\uD83C[\uDFFB-\uDFFF]|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF\uDDBC\uDDBD](?:\u200D\u27A1\uFE0F?)?|[\uDDB0-\uDDB3]|\uDD1D\u200D\uD83D[\uDC68\uDC69]\uD83C[\uDFFB-\uDFFE])))?))?|\uDC6F(?:\u200D[\u2640\u2642]\uFE0F?)?|\uDD75(?:\uD83C[\uDFFB-\uDFFF]|\uFE0F)?(?:\u200D[\u2640\u2642]\uFE0F?)?|\uDE2E(?:\u200D\uD83D\uDCA8)?|\uDE35(?:\u200D\uD83D\uDCAB)?|\uDE36(?:\u200D\uD83C\uDF2B\uFE0F?)?|\uDE42(?:\u200D[\u2194\u2195]\uFE0F?)?|\uDEB6(?:\uD83C[\uDFFB-\uDFFF])?(?:\u200D(?:[\u2640\u2642]\uFE0F?(?:\u200D\u27A1\uFE0F?)?|\u27A1\uFE0F?))?)|\uD83E(?:[\uDD0C\uDD0F\uDD18-\uDD1F\uDD30-\uDD34\uDD36\uDD77\uDDB5\uDDB6\uDDBB\uDDD2\uDDD3\uDDD5\uDEC3-\uDEC5\uDEF0\uDEF2-\uDEF8](?:\uD83C[\uDFFB-\uDFFF])?|[\uDD26\uDD35\uDD37-\uDD39\uDD3D\uDD3E\uDDB8\uDDB9\uDDCD\uDDCF\uDDD4\uDDD6-\uDDDD](?:\uD83C[\uDFFB-\uDFFF])?(?:\u200D[\u2640\u2642]\uFE0F?)?|[\uDDDE\uDDDF](?:\u200D[\u2640\u2642]\uFE0F?)?|[\uDD0D\uDD0E\uDD10-\uDD17\uDD20-\uDD25\uDD27-\uDD2F\uDD3A\uDD3F-\uDD45\uDD47-\uDD76\uDD78-\uDDB4\uDDB7\uDDBA\uDDBC-\uDDCC\uDDD0\uDDE0-\uDDFF\uDE70-\uDE7C\uDE80-\uDE89\uDE8F-\uDEC2\uDEC6\uDECE-\uDEDC\uDEDF-\uDEE9]|\uDD3C(?:\u200D[\u2640\u2642]\uFE0F?|\uD83C[\uDFFB-\uDFFF])?|\uDDCE(?:\uD83C[\uDFFB-\uDFFF])?(?:\u200D(?:[\u2640\u2642]\uFE0F?(?:\u200D\u27A1\uFE0F?)?|\u27A1\uFE0F?))?|\uDDD1(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\uD83C[\uDF3E\uDF73\uDF7C\uDF84\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF\uDDBC\uDDBD](?:\u200D\u27A1\uFE0F?)?|[\uDDB0-\uDDB3]|\uDD1D\u200D\uD83E\uDDD1|\uDDD1\u200D\uD83E\uDDD2(?:\u200D\uD83E\uDDD2)?|\uDDD2(?:\u200D\uD83E\uDDD2)?))|\uD83C(?:\uDFFB(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D(?:\uD83D\uDC8B\u200D)?\uD83E\uDDD1\uD83C[\uDFFC-\uDFFF]|\uD83C[\uDF3E\uDF73\uDF7C\uDF84\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF\uDDBC\uDDBD](?:\u200D\u27A1\uFE0F?)?|[\uDDB0-\uDDB3]|\uDD1D\u200D\uD83E\uDDD1\uD83C[\uDFFB-\uDFFF])))?|\uDFFC(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D(?:\uD83D\uDC8B\u200D)?\uD83E\uDDD1\uD83C[\uDFFB\uDFFD-\uDFFF]|\uD83C[\uDF3E\uDF73\uDF7C\uDF84\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF\uDDBC\uDDBD](?:\u200D\u27A1\uFE0F?)?|[\uDDB0-\uDDB3]|\uDD1D\u200D\uD83E\uDDD1\uD83C[\uDFFB-\uDFFF])))?|\uDFFD(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D(?:\uD83D\uDC8B\u200D)?\uD83E\uDDD1\uD83C[\uDFFB\uDFFC\uDFFE\uDFFF]|\uD83C[\uDF3E\uDF73\uDF7C\uDF84\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF\uDDBC\uDDBD](?:\u200D\u27A1\uFE0F?)?|[\uDDB0-\uDDB3]|\uDD1D\u200D\uD83E\uDDD1\uD83C[\uDFFB-\uDFFF])))?|\uDFFE(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D(?:\uD83D\uDC8B\u200D)?\uD83E\uDDD1\uD83C[\uDFFB-\uDFFD\uDFFF]|\uD83C[\uDF3E\uDF73\uDF7C\uDF84\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF\uDDBC\uDDBD](?:\u200D\u27A1\uFE0F?)?|[\uDDB0-\uDDB3]|\uDD1D\u200D\uD83E\uDDD1\uD83C[\uDFFB-\uDFFF])))?|\uDFFF(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D(?:\uD83D\uDC8B\u200D)?\uD83E\uDDD1\uD83C[\uDFFB-\uDFFE]|\uD83C[\uDF3E\uDF73\uDF7C\uDF84\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF\uDDBC\uDDBD](?:\u200D\u27A1\uFE0F?)?|[\uDDB0-\uDDB3]|\uDD1D\u200D\uD83E\uDDD1\uD83C[\uDFFB-\uDFFF])))?))?|\uDEF1(?:\uD83C(?:\uDFFB(?:\u200D\uD83E\uDEF2\uD83C[\uDFFC-\uDFFF])?|\uDFFC(?:\u200D\uD83E\uDEF2\uD83C[\uDFFB\uDFFD-\uDFFF])?|\uDFFD(?:\u200D\uD83E\uDEF2\uD83C[\uDFFB\uDFFC\uDFFE\uDFFF])?|\uDFFE(?:\u200D\uD83E\uDEF2\uD83C[\uDFFB-\uDFFD\uDFFF])?|\uDFFF(?:\u200D\uD83E\uDEF2\uD83C[\uDFFB-\uDFFE])?))?)/g;function Yr$3(e){return e===12288||e>=65281&&e<=65376||e>=65504&&e<=65510}function jr$3(e){return e>=4352&&e<=4447||e===8986||e===8987||e===9001||e===9002||e>=9193&&e<=9196||e===9200||e===9203||e===9725||e===9726||e===9748||e===9749||e>=9776&&e<=9783||e>=9800&&e<=9811||e===9855||e>=9866&&e<=9871||e===9875||e===9889||e===9898||e===9899||e===9917||e===9918||e===9924||e===9925||e===9934||e===9940||e===9962||e===9970||e===9971||e===9973||e===9978||e===9981||e===9989||e===9994||e===9995||e===10024||e===10060||e===10062||e>=10067&&e<=10069||e===10071||e>=10133&&e<=10135||e===10160||e===10175||e===11035||e===11036||e===11088||e===11093||e>=11904&&e<=11929||e>=11931&&e<=12019||e>=12032&&e<=12245||e>=12272&&e<=12287||e>=12289&&e<=12350||e>=12353&&e<=12438||e>=12441&&e<=12543||e>=12549&&e<=12591||e>=12593&&e<=12686||e>=12688&&e<=12773||e>=12783&&e<=12830||e>=12832&&e<=12871||e>=12880&&e<=42124||e>=42128&&e<=42182||e>=43360&&e<=43388||e>=44032&&e<=55203||e>=63744&&e<=64255||e>=65040&&e<=65049||e>=65072&&e<=65106||e>=65108&&e<=65126||e>=65128&&e<=65131||e>=94176&&e<=94180||e===94192||e===94193||e>=94208&&e<=100343||e>=100352&&e<=101589||e>=101631&&e<=101640||e>=110576&&e<=110579||e>=110581&&e<=110587||e===110589||e===110590||e>=110592&&e<=110882||e===110898||e>=110928&&e<=110930||e===110933||e>=110948&&e<=110951||e>=110960&&e<=111355||e>=119552&&e<=119638||e>=119648&&e<=119670||e===126980||e===127183||e===127374||e>=127377&&e<=127386||e>=127488&&e<=127490||e>=127504&&e<=127547||e>=127552&&e<=127560||e===127568||e===127569||e>=127584&&e<=127589||e>=127744&&e<=127776||e>=127789&&e<=127797||e>=127799&&e<=127868||e>=127870&&e<=127891||e>=127904&&e<=127946||e>=127951&&e<=127955||e>=127968&&e<=127984||e===127988||e>=127992&&e<=128062||e===128064||e>=128066&&e<=128252||e>=128255&&e<=128317||e>=128331&&e<=128334||e>=128336&&e<=128359||e===128378||e===128405||e===128406||e===128420||e>=128507&&e<=128591||e>=128640&&e<=128709||e===128716||e>=128720&&e<=128722||e>=128725&&e<=128727||e>=128732&&e<=128735||e===128747||e===128748||e>=128756&&e<=128764||e>=128992&&e<=129003||e===129008||e>=129292&&e<=129338||e>=129340&&e<=129349||e>=129351&&e<=129535||e>=129648&&e<=129660||e>=129664&&e<=129673||e>=129679&&e<=129734||e>=129742&&e<=129756||e>=129759&&e<=129769||e>=129776&&e<=129784||e>=131072&&e<=196605||e>=196608&&e<=262141}var Hr$3=e=>!(Yr$3(e)||jr$3(e));var ju$1=/[^\x20-\x7F]/u;function Hu$1(e){if(!e)return 0;if(!ju$1.test(e))return e.length;e=e.replace(Rr$2(),"  ");let t=0;for(let r of e){let n=r.codePointAt(0);n<=31||n>=127&&n<=159||n>=768&&n<=879||(t+=Hr$3(n)?1:2);}return t}var Te$3=Hu$1;function Le$3(e,t){if(typeof e=="string")return t(e);let r=new Map;return n(e);function n(i){if(r.has(i))return r.get(i);let o=u(i);return r.set(i,o),o}function u(i){switch(z$3(i)){case H$2:return t(i.map(n));case N$2:return t({...i,parts:i.parts.map(n)});case w$1:return t({...i,breakContents:n(i.breakContents),flatContents:n(i.flatContents)});case B$3:{let{expandedStates:o,contents:s}=i;return o?(o=o.map(n),s=o[0]):s=n(s),t({...i,contents:s,expandedStates:o})}case k$3:case T$1:case P$2:case O$2:case I$1:return t({...i,contents:n(i.contents)});case U$2:case V$1:case L$4:case R$1:case A$1:case _$2:return t(i);default:throw new Q$2(i)}}}function Ze$3(e,t,r){let n=r,u=!1;function i(o){if(u)return !1;let s=t(o);s!==void 0&&(u=!0,n=s);}return be$3(e,i),n}function Wu$1(e){if(e.type===B$3&&e.break||e.type===A$1&&e.hard||e.type===_$2)return !0}function Mr$3(e){return Ze$3(e,Wu$1,!1)}function Wr$3(e){if(e.length>0){let t=y(!1,e,-1);!t.expandedStates&&!t.break&&(t.break="propagated");}return null}function Ur$4(e){let t=new Set,r=[];function n(i){if(i.type===_$2&&Wr$3(r),i.type===B$3){if(r.push(i),t.has(i))return !1;t.add(i);}}function u(i){i.type===B$3&&r.pop().break&&Wr$3(r);}be$3(e,n,u,!0);}function $u$1(e){return e.type===A$1&&!e.hard?e.soft?"":" ":e.type===w$1?e.flatContents:e}function Vr$4(e){return Le$3(e,$u$1)}function $r$4(e){for(e=[...e];e.length>=2&&y(!1,e,-2).type===A$1&&y(!1,e,-1).type===_$2;)e.length-=2;if(e.length>0){let t=ke$3(y(!1,e,-1));e[e.length-1]=t;}return e}function ke$3(e){switch(z$3(e)){case T$1:case P$2:case B$3:case I$1:case O$2:{let t=ke$3(e.contents);return {...e,contents:t}}case w$1:return {...e,breakContents:ke$3(e.breakContents),flatContents:ke$3(e.flatContents)};case N$2:return {...e,parts:$r$4(e.parts)};case H$2:return $r$4(e);case U$2:return e.replace(/[\n\r]*$/u,"");case k$3:case V$1:case L$4:case R$1:case A$1:case _$2:break;default:throw new Q$2(e)}return e}function et$3(e){return ke$3(Uu$1(e))}function Mu$2(e){switch(z$3(e)){case N$2:if(e.parts.every(t=>t===""))return "";break;case B$3:if(!e.contents&&!e.id&&!e.break&&!e.expandedStates)return "";if(e.contents.type===B$3&&e.contents.id===e.id&&e.contents.break===e.break&&e.contents.expandedStates===e.expandedStates)return e.contents;break;case k$3:case T$1:case P$2:case I$1:if(!e.contents)return "";break;case w$1:if(!e.flatContents&&!e.breakContents)return "";break;case H$2:{let t=[];for(let r of e){if(!r)continue;let[n,...u]=Array.isArray(r)?r:[r];typeof n=="string"&&typeof y(!1,t,-1)=="string"?t[t.length-1]+=n:t.push(n),t.push(...u);}return t.length===0?"":t.length===1?t[0]:t}case U$2:case V$1:case L$4:case R$1:case A$1:case O$2:case _$2:break;default:throw new Q$2(e)}return e}function Uu$1(e){return Le$3(e,t=>Mu$2(t))}function zr$4(e,t=Xe$3){return Le$3(e,r=>typeof r=="string"?Se$3(t,r.split(`
`)):r)}function Vu$2(e){if(e.type===A$1)return !0}function Gr$3(e){return Ze$3(e,Vu$2,!1)}function me$3(e,t){return e.type===O$2?{...e,contents:t(e.contents)}:t(e)}var Y$3=Symbol("MODE_BREAK"),J$3=Symbol("MODE_FLAT"),he$3=Symbol("cursor"),Lt$3=Symbol("DOC_FILL_PRINTED_LENGTH");function Kr$3(){return {value:"",length:0,queue:[]}}function zu$1(e,t){return Pt$3(e,{type:"indent"},t)}function Gu$1(e,t,r){return t===Number.NEGATIVE_INFINITY?e.root||Kr$3():t<0?Pt$3(e,{type:"dedent"},r):t?t.type==="root"?{...e,root:e}:Pt$3(e,{type:typeof t=="string"?"stringAlign":"numberAlign",n:t},r):e}function Pt$3(e,t,r){let n=t.type==="dedent"?e.queue.slice(0,-1):[...e.queue,t],u="",i=0,o=0,s=0;for(let c of n)switch(c.type){case"indent":l(),r.useTabs?a(1):D(r.tabWidth);break;case"stringAlign":l(),u+=c.n,i+=c.n.length;break;case"numberAlign":o+=1,s+=c.n;break;default:throw new Error(`Unexpected type '${c.type}'`)}return f(),{...e,value:u,length:i,queue:n};function a(c){u+="	".repeat(c),i+=r.tabWidth*c;}function D(c){u+=" ".repeat(c),i+=c;}function l(){r.useTabs?p():f();}function p(){o>0&&a(o),d();}function f(){s>0&&D(s),d();}function d(){o=0,s=0;}}function It$4(e){let t=0,r=0,n=e.length;e:for(;n--;){let u=e[n];if(u===he$3){r++;continue}for(let i=u.length-1;i>=0;i--){let o=u[i];if(o===" "||o==="	")t++;else {e[n]=u.slice(0,i+1);break e}}}if(t>0||r>0)for(e.length=n+1;r-- >0;)e.push(he$3);return t}function tt$3(e,t,r,n,u,i){if(r===Number.POSITIVE_INFINITY)return !0;let o=t.length,s=[e],a=[];for(;r>=0;){if(s.length===0){if(o===0)return !0;s.push(t[--o]);continue}let{mode:D,doc:l}=s.pop(),p=z$3(l);switch(p){case U$2:a.push(l),r-=Te$3(l);break;case H$2:case N$2:{let f=p===H$2?l:l.parts,d=l[Lt$3]??0;for(let c=f.length-1;c>=d;c--)s.push({mode:D,doc:f[c]});break}case T$1:case k$3:case P$2:case O$2:s.push({mode:D,doc:l.contents});break;case L$4:r+=It$4(a);break;case B$3:{if(i&&l.break)return !1;let f=l.break?Y$3:D,d=l.expandedStates&&f===Y$3?y(!1,l.expandedStates,-1):l.contents;s.push({mode:f,doc:d});break}case w$1:{let d=(l.groupId?u[l.groupId]||J$3:D)===Y$3?l.breakContents:l.flatContents;d&&s.push({mode:D,doc:d});break}case A$1:if(D===Y$3||l.hard)return !0;l.soft||(a.push(" "),r--);break;case I$1:n=!0;break;case R$1:if(n)return !1;break}}return !1}function Ee$3(e,t){let r={},n=t.printWidth,u=xe$4(t.endOfLine),i=0,o=[{ind:Kr$3(),mode:Y$3,doc:e}],s=[],a=!1,D=[],l=0;for(Ur$4(e);o.length>0;){let{ind:f,mode:d,doc:c}=o.pop();switch(z$3(c)){case U$2:{let F=u!==`
`?ne$1(!1,c,`
`,u):c;s.push(F),o.length>0&&(i+=Te$3(F));break}case H$2:for(let F=c.length-1;F>=0;F--)o.push({ind:f,mode:d,doc:c[F]});break;case V$1:if(l>=2)throw new Error("There are too many 'cursor' in doc.");s.push(he$3),l++;break;case T$1:o.push({ind:zu$1(f,t),mode:d,doc:c.contents});break;case k$3:o.push({ind:Gu$1(f,c.n,t),mode:d,doc:c.contents});break;case L$4:i-=It$4(s);break;case B$3:switch(d){case J$3:if(!a){o.push({ind:f,mode:c.break?Y$3:J$3,doc:c.contents});break}case Y$3:{a=!1;let F={ind:f,mode:J$3,doc:c.contents},m=n-i,h=D.length>0;if(!c.break&&tt$3(F,o,m,h,r))o.push(F);else if(c.expandedStates){let C=y(!1,c.expandedStates,-1);if(c.break){o.push({ind:f,mode:Y$3,doc:C});break}else for(let v=1;v<c.expandedStates.length+1;v++)if(v>=c.expandedStates.length){o.push({ind:f,mode:Y$3,doc:C});break}else {let E=c.expandedStates[v],g={ind:f,mode:J$3,doc:E};if(tt$3(g,o,m,h,r)){o.push(g);break}}}else o.push({ind:f,mode:Y$3,doc:c.contents});break}}c.id&&(r[c.id]=y(!1,o,-1).mode);break;case N$2:{let F=n-i,m=c[Lt$3]??0,{parts:h}=c,C=h.length-m;if(C===0)break;let v=h[m+0],E=h[m+1],g={ind:f,mode:J$3,doc:v},j={ind:f,mode:Y$3,doc:v},b=tt$3(g,[],F,D.length>0,r,!0);if(C===1){b?o.push(g):o.push(j);break}let X={ind:f,mode:J$3,doc:E},ae={ind:f,mode:Y$3,doc:E};if(C===2){b?o.push(X,g):o.push(ae,j);break}let $e=h[m+2],At={ind:f,mode:d,doc:{...c,[Lt$3]:m+2}};tt$3({ind:f,mode:J$3,doc:[v,E,$e]},[],F,D.length>0,r,!0)?o.push(At,X,g):b?o.push(At,ae,g):o.push(At,ae,j);break}case w$1:case P$2:{let F=c.groupId?r[c.groupId]:d;if(F===Y$3){let m=c.type===w$1?c.breakContents:c.negate?c.contents:le$2(c.contents);m&&o.push({ind:f,mode:d,doc:m});}if(F===J$3){let m=c.type===w$1?c.flatContents:c.negate?le$2(c.contents):c.contents;m&&o.push({ind:f,mode:d,doc:m});}break}case I$1:D.push({ind:f,mode:d,doc:c.contents});break;case R$1:D.length>0&&o.push({ind:f,mode:d,doc:Oe$4});break;case A$1:switch(d){case J$3:if(c.hard)a=!0;else {c.soft||(s.push(" "),i+=1);break}case Y$3:if(D.length>0){o.push({ind:f,mode:d,doc:c},...D.reverse()),D.length=0;break}c.literal?f.root?(s.push(u,f.root.value),i=f.root.length):(s.push(u),i=0):(i-=It$4(s),s.push(u+f.value),i=f.length);break}break;case O$2:o.push({ind:f,mode:d,doc:c.contents});break;case _$2:break;default:throw new Q$2(c)}o.length===0&&D.length>0&&(o.push(...D.reverse()),D.length=0);}let p=s.indexOf(he$3);if(p!==-1){let f=s.indexOf(he$3,p+1);if(f===-1)return {formatted:s.filter(m=>m!==he$3).join("")};let d=s.slice(0,p).join(""),c=s.slice(p+1,f).join(""),F=s.slice(f+1).join("");return {formatted:d+c+F,cursorNodeStart:d.length,cursorNodeText:c}}return {formatted:s.join("")}}function Ku$2(e,t,r=0){let n=0;for(let u=r;u<e.length;++u)e[u]==="	"?n=n+t-n%t:n++;return n}var Ce$3=Ku$2;var te$2,Yt$3,rt$3,Rt$3=class Rt{constructor(t){pr$3(this,te$2);this.stack=[t];}get key(){let{stack:t,siblings:r}=this;return y(!1,t,r===null?-2:-4)??null}get index(){return this.siblings===null?null:y(!1,this.stack,-2)}get node(){return y(!1,this.stack,-1)}get parent(){return this.getNode(1)}get grandparent(){return this.getNode(2)}get isInArray(){return this.siblings!==null}get siblings(){let{stack:t}=this,r=y(!1,t,-3);return Array.isArray(r)?r:null}get next(){let{siblings:t}=this;return t===null?null:t[this.index+1]}get previous(){let{siblings:t}=this;return t===null?null:t[this.index-1]}get isFirst(){return this.index===0}get isLast(){let{siblings:t,index:r}=this;return t!==null&&r===t.length-1}get isRoot(){return this.stack.length===1}get root(){return this.stack[0]}get ancestors(){return [...pe$3(this,te$2,rt$3).call(this)]}getName(){let{stack:t}=this,{length:r}=t;return r>1?y(!1,t,-2):null}getValue(){return y(!1,this.stack,-1)}getNode(t=0){let r=pe$3(this,te$2,Yt$3).call(this,t);return r===-1?null:this.stack[r]}getParentNode(t=0){return this.getNode(t+1)}call(t,...r){let{stack:n}=this,{length:u}=n,i=y(!1,n,-1);for(let o of r)i=i[o],n.push(o,i);try{return t(this)}finally{n.length=u;}}callParent(t,r=0){let n=pe$3(this,te$2,Yt$3).call(this,r+1),u=this.stack.splice(n+1);try{return t(this)}finally{this.stack.push(...u);}}each(t,...r){let{stack:n}=this,{length:u}=n,i=y(!1,n,-1);for(let o of r)i=i[o],n.push(o,i);try{for(let o=0;o<i.length;++o)n.push(o,i[o]),t(this,o,i),n.length-=2;}finally{n.length=u;}}map(t,...r){let n=[];return this.each((u,i,o)=>{n[i]=t(u,i,o);},...r),n}match(...t){let r=this.stack.length-1,n=null,u=this.stack[r--];for(let i of t){if(u===void 0)return !1;let o=null;if(typeof n=="number"&&(o=n,n=this.stack[r--],u=this.stack[r--]),i&&!i(u,n,o))return !1;n=this.stack[r--],u=this.stack[r--];}return !0}findAncestor(t){for(let r of pe$3(this,te$2,rt$3).call(this))if(t(r))return r}hasAncestor(t){for(let r of pe$3(this,te$2,rt$3).call(this))if(t(r))return !0;return !1}};te$2=new WeakSet,Yt$3=function(t){let{stack:r}=this;for(let n=r.length-1;n>=0;n-=2)if(!Array.isArray(r[n])&&--t<0)return n;return -1},rt$3=function*(){let{stack:t}=this;for(let r=t.length-3;r>=0;r-=2){let n=t[r];Array.isArray(n)||(yield n);}};var Jr$3=Rt$3;var qr$2=new Proxy(()=>{},{get:()=>qr$2}),Pe$3=qr$2;function Ju$2(e){return e!==null&&typeof e=="object"}var Xr$3=Ju$2;function*ge$3(e,t){let{getVisitorKeys:r,filter:n=()=>!0}=t,u=i=>Xr$3(i)&&n(i);for(let i of r(e)){let o=e[i];if(Array.isArray(o))for(let s of o)u(s)&&(yield s);else u(o)&&(yield o);}}function*Qr$2(e,t){let r=[e];for(let n=0;n<r.length;n++){let u=r[n];for(let i of ge$3(u,t))yield i,r.push(i);}}function Zr$3(e,t){return ge$3(e,t).next().done}function ye$3(e){return (t,r,n)=>{let u=!!(n!=null&&n.backwards);if(r===!1)return !1;let{length:i}=t,o=r;for(;o>=0&&o<i;){let s=t.charAt(o);if(e instanceof RegExp){if(!e.test(s))return o}else if(!e.includes(s))return o;u?o--:o++;}return o===-1||o===i?o:!1}}var en$3=ye$3(/\s/u),S$2=ye$3(" 	"),nt$3=ye$3(",; 	"),ut$3=ye$3(/[^\n\r]/u);function qu$2(e,t,r){let n=!!(r!=null&&r.backwards);if(t===!1)return !1;let u=e.charAt(t);if(n){if(e.charAt(t-1)==="\r"&&u===`
`)return t-2;if(u===`
`||u==="\r"||u==="\u2028"||u==="\u2029")return t-1}else {if(u==="\r"&&e.charAt(t+1)===`
`)return t+2;if(u===`
`||u==="\r"||u==="\u2028"||u==="\u2029")return t+1}return t}var W$3=qu$2;function Xu$2(e,t,r={}){let n=S$2(e,r.backwards?t-1:t,r),u=W$3(e,n,r);return n!==u}var $$3=Xu$2;function Qu$2(e){return Array.isArray(e)&&e.length>0}var jt$3=Qu$2;var tn$3=new Set(["tokens","comments","parent","enclosingNode","precedingNode","followingNode"]),Zu$2=e=>Object.keys(e).filter(t=>!tn$3.has(t));function ei$3(e){return e?t=>e(t,tn$3):Zu$2}var q$3=ei$3;function ti$2(e){let t=e.type||e.kind||"(unknown type)",r=String(e.name||e.id&&(typeof e.id=="object"?e.id.name:e.id)||e.key&&(typeof e.key=="object"?e.key.name:e.key)||e.value&&(typeof e.value=="object"?"":String(e.value))||e.operator||"");return r.length>20&&(r=r.slice(0,19)+"\u2026"),t+(r?" "+r:"")}function Ht$2(e,t){(e.comments??(e.comments=[])).push(t),t.printed=!1,t.nodeDescription=ti$2(e);}function ue$1(e,t){t.leading=!0,t.trailing=!1,Ht$2(e,t);}function re$3(e,t,r){t.leading=!1,t.trailing=!1,r&&(t.marker=r),Ht$2(e,t);}function ie$4(e,t){t.leading=!1,t.trailing=!0,Ht$2(e,t);}var Wt$3=new WeakMap;function it$3(e,t){if(Wt$3.has(e))return Wt$3.get(e);let{printer:{getCommentChildNodes:r,canAttachComment:n,getVisitorKeys:u},locStart:i,locEnd:o}=t;if(!n)return [];let s=((r==null?void 0:r(e,t))??[...ge$3(e,{getVisitorKeys:q$3(u)})]).flatMap(a=>n(a)?[a]:it$3(a,t));return s.sort((a,D)=>i(a)-i(D)||o(a)-o(D)),Wt$3.set(e,s),s}function nn$3(e,t,r,n){let{locStart:u,locEnd:i}=r,o=u(t),s=i(t),a=it$3(e,r),D,l,p=0,f=a.length;for(;p<f;){let d=p+f>>1,c=a[d],F=u(c),m=i(c);if(F<=o&&s<=m)return nn$3(c,t,r,c);if(m<=o){D=c,p=d+1;continue}if(s<=F){l=c,f=d;continue}throw new Error("Comment location overlaps with node location")}if((n==null?void 0:n.type)==="TemplateLiteral"){let{quasis:d}=n,c=Mt$3(d,t,r);D&&Mt$3(d,D,r)!==c&&(D=null),l&&Mt$3(d,l,r)!==c&&(l=null);}return {enclosingNode:n,precedingNode:D,followingNode:l}}var $t$3=()=>!1;function un$3(e,t){let{comments:r}=e;if(delete e.comments,!jt$3(r)||!t.printer.canAttachComment)return;let n=[],{locStart:u,locEnd:i,printer:{experimentalFeatures:{avoidAstMutation:o=!1}={},handleComments:s={}},originalText:a}=t,{ownLine:D=$t$3,endOfLine:l=$t$3,remaining:p=$t$3}=s,f=r.map((d,c)=>({...nn$3(e,d,t),comment:d,text:a,options:t,ast:e,isLastComment:r.length-1===c}));for(let[d,c]of f.entries()){let{comment:F,precedingNode:m,enclosingNode:h,followingNode:C,text:v,options:E,ast:g,isLastComment:j}=c;if(E.parser==="json"||E.parser==="json5"||E.parser==="jsonc"||E.parser==="__js_expression"||E.parser==="__ts_expression"||E.parser==="__vue_expression"||E.parser==="__vue_ts_expression"){if(u(F)-u(g)<=0){ue$1(g,F);continue}if(i(F)-i(g)>=0){ie$4(g,F);continue}}let b;if(o?b=[c]:(F.enclosingNode=h,F.precedingNode=m,F.followingNode=C,b=[F,v,E,g,j]),ri$3(v,E,f,d))F.placement="ownLine",D(...b)||(C?ue$1(C,F):m?ie$4(m,F):h?re$3(h,F):re$3(g,F));else if(ni$3(v,E,f,d))F.placement="endOfLine",l(...b)||(m?ie$4(m,F):C?ue$1(C,F):h?re$3(h,F):re$3(g,F));else if(F.placement="remaining",!p(...b))if(m&&C){let X=n.length;X>0&&n[X-1].followingNode!==C&&rn$3(n,E),n.push(c);}else m?ie$4(m,F):C?ue$1(C,F):h?re$3(h,F):re$3(g,F);}if(rn$3(n,t),!o)for(let d of r)delete d.precedingNode,delete d.enclosingNode,delete d.followingNode;}var on$3=e=>!/[\S\n\u2028\u2029]/u.test(e);function ri$3(e,t,r,n){let{comment:u,precedingNode:i}=r[n],{locStart:o,locEnd:s}=t,a=o(u);if(i)for(let D=n-1;D>=0;D--){let{comment:l,precedingNode:p}=r[D];if(p!==i||!on$3(e.slice(s(l),a)))break;a=o(l);}return $$3(e,a,{backwards:!0})}function ni$3(e,t,r,n){let{comment:u,followingNode:i}=r[n],{locStart:o,locEnd:s}=t,a=s(u);if(i)for(let D=n+1;D<r.length;D++){let{comment:l,followingNode:p}=r[D];if(p!==i||!on$3(e.slice(a,o(l))))break;a=s(l);}return $$3(e,a)}function rn$3(e,t){var s,a;let r=e.length;if(r===0)return;let{precedingNode:n,followingNode:u}=e[0],i=t.locStart(u),o;for(o=r;o>0;--o){let{comment:D,precedingNode:l,followingNode:p}=e[o-1];Pe$3.strictEqual(l,n),Pe$3.strictEqual(p,u);let f=t.originalText.slice(t.locEnd(D),i);if(((a=(s=t.printer).isGap)==null?void 0:a.call(s,f,t))??/^[\s(]*$/u.test(f))i=t.locStart(D);else break}for(let[D,{comment:l}]of e.entries())D<o?ie$4(n,l):ue$1(u,l);for(let D of [n,u])D.comments&&D.comments.length>1&&D.comments.sort((l,p)=>t.locStart(l)-t.locStart(p));e.length=0;}function Mt$3(e,t,r){let n=r.locStart(t)-1;for(let u=1;u<e.length;++u)if(n<r.locStart(e[u]))return u-1;return 0}function ui$3(e,t){let r=t-1;r=S$2(e,r,{backwards:!0}),r=W$3(e,r,{backwards:!0}),r=S$2(e,r,{backwards:!0});let n=W$3(e,r,{backwards:!0});return r!==n}var Ie$2=ui$3;function sn$3(e,t){let r=e.node;return r.printed=!0,t.printer.printComment(e,t)}function ii$3(e,t){var l;let r=e.node,n=[sn$3(e,t)],{printer:u,originalText:i,locStart:o,locEnd:s}=t;if((l=u.isBlockComment)==null?void 0:l.call(u,r)){let p=$$3(i,s(r))?$$3(i,o(r),{backwards:!0})?K$4:qe$2:" ";n.push(p);}else n.push(K$4);let D=W$3(i,S$2(i,s(r)));return D!==!1&&$$3(i,D)&&n.push(K$4),n}function oi$3(e,t,r){var D;let n=e.node,u=sn$3(e,t),{printer:i,originalText:o,locStart:s}=t,a=(D=i.isBlockComment)==null?void 0:D.call(i,n);if(r!=null&&r.hasLineSuffix&&!(r!=null&&r.isBlock)||$$3(o,s(n),{backwards:!0})){let l=Ie$2(o,s(n));return {doc:Ne$3([K$4,l?K$4:"",u]),isBlock:a,hasLineSuffix:!0}}return !a||r!=null&&r.hasLineSuffix?{doc:[Ne$3([" ",u]),Fe$3],isBlock:a,hasLineSuffix:!0}:{doc:[" ",u],isBlock:a,hasLineSuffix:!1}}function si$3(e,t){let r=e.node;if(!r)return {};let n=t[Symbol.for("printedComments")];if((r.comments||[]).filter(a=>!n.has(a)).length===0)return {leading:"",trailing:""};let i=[],o=[],s;return e.each(()=>{let a=e.node;if(n!=null&&n.has(a))return;let{leading:D,trailing:l}=a;D?i.push(ii$3(e,t)):l&&(s=oi$3(e,t,s),o.push(s.doc));},"comments"),{leading:i,trailing:o}}function an$3(e,t,r){let{leading:n,trailing:u}=si$3(e,r);return !n&&!u?t:me$3(t,i=>[n,i,u])}function Dn$3(e){let{[Symbol.for("comments")]:t,[Symbol.for("printedComments")]:r}=e;for(let n of t){if(!n.printed&&!r.has(n))throw new Error('Comment "'+n.value.trim()+'" was not printed. Please report this error!');delete n.printed;}}var Re$4=class Re extends Error{name="ConfigError"},Ye$3=class Ye extends Error{name="UndefinedParserError"};var cn$3={cursorOffset:{category:"Special",type:"int",default:-1,range:{start:-1,end:1/0,step:1},description:"Print (to stderr) where a cursor at the given position would move to after formatting.",cliCategory:"Editor"},endOfLine:{category:"Global",type:"choice",default:"lf",description:"Which end of line characters to apply.",choices:[{value:"lf",description:"Line Feed only (\\n), common on Linux and macOS as well as inside git repos"},{value:"crlf",description:"Carriage Return + Line Feed characters (\\r\\n), common on Windows"},{value:"cr",description:"Carriage Return character only (\\r), used very rarely"},{value:"auto",description:`Maintain existing
(mixed values within one file are normalised by looking at what's used after the first line)`}]},filepath:{category:"Special",type:"path",description:"Specify the input filepath. This will be used to do parser inference.",cliName:"stdin-filepath",cliCategory:"Other",cliDescription:"Path to the file to pretend that stdin comes from."},insertPragma:{category:"Special",type:"boolean",default:!1,description:"Insert @format pragma into file's first docblock comment.",cliCategory:"Other"},parser:{category:"Global",type:"choice",default:void 0,description:"Which parser to use.",exception:e=>typeof e=="string"||typeof e=="function",choices:[{value:"flow",description:"Flow"},{value:"babel",description:"JavaScript"},{value:"babel-flow",description:"Flow"},{value:"babel-ts",description:"TypeScript"},{value:"typescript",description:"TypeScript"},{value:"acorn",description:"JavaScript"},{value:"espree",description:"JavaScript"},{value:"meriyah",description:"JavaScript"},{value:"css",description:"CSS"},{value:"less",description:"Less"},{value:"scss",description:"SCSS"},{value:"json",description:"JSON"},{value:"json5",description:"JSON5"},{value:"jsonc",description:"JSON with Comments"},{value:"json-stringify",description:"JSON.stringify"},{value:"graphql",description:"GraphQL"},{value:"markdown",description:"Markdown"},{value:"mdx",description:"MDX"},{value:"vue",description:"Vue"},{value:"yaml",description:"YAML"},{value:"glimmer",description:"Ember / Handlebars"},{value:"html",description:"HTML"},{value:"angular",description:"Angular"},{value:"lwc",description:"Lightning Web Components"}]},plugins:{type:"path",array:!0,default:[{value:[]}],category:"Global",description:"Add a plugin. Multiple plugins can be passed as separate `--plugin`s.",exception:e=>typeof e=="string"||typeof e=="object",cliName:"plugin",cliCategory:"Config"},printWidth:{category:"Global",type:"int",default:80,description:"The line length where Prettier will try wrap.",range:{start:0,end:1/0,step:1}},rangeEnd:{category:"Special",type:"int",default:1/0,range:{start:0,end:1/0,step:1},description:`Format code ending at a given character offset (exclusive).
The range will extend forwards to the end of the selected statement.`,cliCategory:"Editor"},rangeStart:{category:"Special",type:"int",default:0,range:{start:0,end:1/0,step:1},description:`Format code starting at a given character offset.
The range will extend backwards to the start of the first line containing the selected statement.`,cliCategory:"Editor"},requirePragma:{category:"Special",type:"boolean",default:!1,description:`Require either '@prettier' or '@format' to be present in the file's first docblock comment
in order for it to be formatted.`,cliCategory:"Other"},tabWidth:{type:"int",category:"Global",default:2,description:"Number of spaces per indentation level.",range:{start:0,end:1/0,step:1}},useTabs:{category:"Global",type:"boolean",default:!1,description:"Indent with tabs instead of spaces."},embeddedLanguageFormatting:{category:"Global",type:"choice",default:"auto",description:"Control how Prettier formats quoted code embedded in the file.",choices:[{value:"auto",description:"Format embedded code if Prettier can automatically identify it."},{value:"off",description:"Never automatically format embedded code."}]}};function ot$1({plugins:e=[],showDeprecated:t=!1}={}){let r=e.flatMap(u=>u.languages??[]),n=[];for(let u of li$3(Object.assign({},...e.map(({options:i})=>i),cn$3)))!t&&u.deprecated||(Array.isArray(u.choices)&&(t||(u.choices=u.choices.filter(i=>!i.deprecated)),u.name==="parser"&&(u.choices=[...u.choices,...Di$2(u.choices,r,e)])),u.pluginDefaults=Object.fromEntries(e.filter(i=>{var o;return ((o=i.defaultOptions)==null?void 0:o[u.name])!==void 0}).map(i=>[i.name,i.defaultOptions[u.name]])),n.push(u));return {languages:r,options:n}}function*Di$2(e,t,r){let n=new Set(e.map(u=>u.value));for(let u of t)if(u.parsers){for(let i of u.parsers)if(!n.has(i)){n.add(i);let o=r.find(a=>a.parsers&&Object.prototype.hasOwnProperty.call(a.parsers,i)),s=u.name;o!=null&&o.name&&(s+=` (plugin: ${o.name})`),yield {value:i,description:s};}}}function li$3(e){let t=[];for(let[r,n]of Object.entries(e)){let u={name:r,...n};Array.isArray(u.default)&&(u.default=y(!1,u.default,-1).value),t.push(u);}return t}var ci$3=e=>String(e).split(/[/\\]/u).pop();function fn$3(e,t){if(!t)return;let r=ci$3(t).toLowerCase();return e.find(({filenames:n})=>n==null?void 0:n.some(u=>u.toLowerCase()===r))??e.find(({extensions:n})=>n==null?void 0:n.some(u=>r.endsWith(u)))}function fi$3(e,t){if(t)return e.find(({name:r})=>r.toLowerCase()===t)??e.find(({aliases:r})=>r==null?void 0:r.includes(t))??e.find(({extensions:r})=>r==null?void 0:r.includes(`.${t}`))}function di$3(e,t){let r=e.plugins.flatMap(u=>u.languages??[]),n=fi$3(r,t.language)??fn$3(r,t.physicalFile)??fn$3(r,t.file)??(t.physicalFile,void 0);return n==null?void 0:n.parsers[0]}var dn$3=di$3;var oe$2={key:e=>/^[$_a-zA-Z][$_a-zA-Z0-9]*$/.test(e)?e:JSON.stringify(e),value(e){if(e===null||typeof e!="object")return JSON.stringify(e);if(Array.isArray(e))return `[${e.map(r=>oe$2.value(r)).join(", ")}]`;let t=Object.keys(e);return t.length===0?"{}":`{ ${t.map(r=>`${oe$2.key(r)}: ${oe$2.value(e[r])}`).join(", ")} }`},pair:({key:e,value:t})=>oe$2.value({[e]:t})};var Ut$3=Me$3(st$3()),mn$3=(e,t,{descriptor:r})=>{let n=[`${Ut$3.default.yellow(typeof e=="string"?r.key(e):r.pair(e))} is deprecated`];return t&&n.push(`we now treat it as ${Ut$3.default.blue(typeof t=="string"?r.key(t):r.pair(t))}`),n.join("; ")+"."};var ce$2=Me$3(st$3());var at$2=Symbol.for("vnopts.VALUE_NOT_EXIST"),Ae$2=Symbol.for("vnopts.VALUE_UNCHANGED");var hn$3=" ".repeat(2),Cn$4=(e,t,r)=>{let{text:n,list:u}=r.normalizeExpectedResult(r.schemas[e].expected(r)),i=[];return n&&i.push(En$3(e,t,n,r.descriptor)),u&&i.push([En$3(e,t,u.title,r.descriptor)].concat(u.values.map(o=>gn$3(o,r.loggerPrintWidth))).join(`
`)),yn$3(i,r.loggerPrintWidth)};function En$3(e,t,r,n){return [`Invalid ${ce$2.default.red(n.key(e))} value.`,`Expected ${ce$2.default.blue(r)},`,`but received ${t===at$2?ce$2.default.gray("nothing"):ce$2.default.red(n.value(t))}.`].join(" ")}function gn$3({text:e,list:t},r){let n=[];return e&&n.push(`- ${ce$2.default.blue(e)}`),t&&n.push([`- ${ce$2.default.blue(t.title)}:`].concat(t.values.map(u=>gn$3(u,r-hn$3.length).replace(/^|\n/g,`$&${hn$3}`))).join(`
`)),yn$3(n,r)}function yn$3(e,t){if(e.length===1)return e[0];let[r,n]=e,[u,i]=e.map(o=>o.split(`
`,1)[0].length);return u>t&&u>i?n:r}var Gt$3=Me$3(st$3());var Vt$2=[],An$3=[];function zt$2(e,t){if(e===t)return 0;let r=e;e.length>t.length&&(e=t,t=r);let n=e.length,u=t.length;for(;n>0&&e.charCodeAt(~-n)===t.charCodeAt(~-u);)n--,u--;let i=0;for(;i<n&&e.charCodeAt(i)===t.charCodeAt(i);)i++;if(n-=i,u-=i,n===0)return u;let o,s,a,D,l=0,p=0;for(;l<n;)An$3[l]=e.charCodeAt(i+l),Vt$2[l]=++l;for(;p<u;)for(o=t.charCodeAt(i+p),a=p++,s=p,l=0;l<n;l++)D=o===An$3[l]?a:a+1,a=Vt$2[l],s=Vt$2[l]=a>s?D>s?s+1:D:D>a?a+1:D;return s}var Dt$3=(e,t,{descriptor:r,logger:n,schemas:u})=>{let i=[`Ignored unknown option ${Gt$3.default.yellow(r.pair({key:e,value:t}))}.`],o=Object.keys(u).sort().find(s=>zt$2(e,s)<3);o&&i.push(`Did you mean ${Gt$3.default.blue(r.key(o))}?`),n.warn(i.join(" "));};var pi$3=["default","expected","validate","deprecated","forward","redirect","overlap","preprocess","postprocess"];function Fi$3(e,t){let r=new e(t),n=Object.create(r);for(let u of pi$3)u in t&&(n[u]=mi$3(t[u],r,x$1.prototype[u].length));return n}var x$1=class x{static create(t){return Fi$3(this,t)}constructor(t){this.name=t.name;}default(t){}expected(t){return "nothing"}validate(t,r){return !1}deprecated(t,r){return !1}forward(t,r){}redirect(t,r){}overlap(t,r,n){return t}preprocess(t,r){return t}postprocess(t,r){return Ae$2}};function mi$3(e,t,r){return typeof e=="function"?(...n)=>e(...n.slice(0,r-1),t,...n.slice(r-1)):()=>e}var lt$2=class lt extends x$1{constructor(t){super(t),this._sourceName=t.sourceName;}expected(t){return t.schemas[this._sourceName].expected(t)}validate(t,r){return r.schemas[this._sourceName].validate(t,r)}redirect(t,r){return this._sourceName}};var ct$2=class ct extends x$1{expected(){return "anything"}validate(){return !0}};var ft$2=class ft extends x$1{constructor({valueSchema:t,name:r=t.name,...n}){super({...n,name:r}),this._valueSchema=t;}expected(t){let{text:r,list:n}=t.normalizeExpectedResult(this._valueSchema.expected(t));return {text:r&&`an array of ${r}`,list:n&&{title:"an array of the following values",values:[{list:n}]}}}validate(t,r){if(!Array.isArray(t))return !1;let n=[];for(let u of t){let i=r.normalizeValidateResult(this._valueSchema.validate(u,r),u);i!==!0&&n.push(i.value);}return n.length===0?!0:{value:n}}deprecated(t,r){let n=[];for(let u of t){let i=r.normalizeDeprecatedResult(this._valueSchema.deprecated(u,r),u);i!==!1&&n.push(...i.map(({value:o})=>({value:[o]})));}return n}forward(t,r){let n=[];for(let u of t){let i=r.normalizeForwardResult(this._valueSchema.forward(u,r),u);n.push(...i.map(vn$3));}return n}redirect(t,r){let n=[],u=[];for(let i of t){let o=r.normalizeRedirectResult(this._valueSchema.redirect(i,r),i);"remain"in o&&n.push(o.remain),u.push(...o.redirect.map(vn$3));}return n.length===0?{redirect:u}:{redirect:u,remain:n}}overlap(t,r){return t.concat(r)}};function vn$3({from:e,to:t}){return {from:[e],to:t}}var dt$2=class dt extends x$1{expected(){return "true or false"}validate(t){return typeof t=="boolean"}};function wn$3(e,t){let r=Object.create(null);for(let n of e){let u=n[t];if(r[u])throw new Error(`Duplicate ${t} ${JSON.stringify(u)}`);r[u]=n;}return r}function _n$3(e,t){let r=new Map;for(let n of e){let u=n[t];if(r.has(u))throw new Error(`Duplicate ${t} ${JSON.stringify(u)}`);r.set(u,n);}return r}function xn$3(){let e=Object.create(null);return t=>{let r=JSON.stringify(t);return e[r]?!0:(e[r]=!0,!1)}}function bn$3(e,t){let r=[],n=[];for(let u of e)t(u)?r.push(u):n.push(u);return [r,n]}function Nn$3(e){return e===Math.floor(e)}function On$3(e,t){if(e===t)return 0;let r=typeof e,n=typeof t,u=["undefined","object","boolean","number","string"];return r!==n?u.indexOf(r)-u.indexOf(n):r!=="string"?Number(e)-Number(t):e.localeCompare(t)}function Sn$3(e){return (...t)=>{let r=e(...t);return typeof r=="string"?new Error(r):r}}function Kt$1(e){return e===void 0?{}:e}function Jt$2(e){if(typeof e=="string")return {text:e};let{text:t,list:r}=e;return hi$3((t||r)!==void 0,"Unexpected `expected` result, there should be at least one field."),r?{text:t,list:{title:r.title,values:r.values.map(Jt$2)}}:{text:t}}function qt$3(e,t){return e===!0?!0:e===!1?{value:t}:e}function Xt$1(e,t,r=!1){return e===!1?!1:e===!0?r?!0:[{value:t}]:"value"in e?[e]:e.length===0?!1:e}function Bn$3(e,t){return typeof e=="string"||"key"in e?{from:t,to:e}:"from"in e?{from:e.from,to:e.to}:{from:t,to:e.to}}function pt$3(e,t){return e===void 0?[]:Array.isArray(e)?e.map(r=>Bn$3(r,t)):[Bn$3(e,t)]}function Qt$1(e,t){let r=pt$3(typeof e=="object"&&"redirect"in e?e.redirect:e,t);return r.length===0?{remain:t,redirect:r}:typeof e=="object"&&"remain"in e?{remain:e.remain,redirect:r}:{redirect:r}}function hi$3(e,t){if(!e)throw new Error(t)}var Ft$2=class Ft extends x$1{constructor(t){super(t),this._choices=_n$3(t.choices.map(r=>r&&typeof r=="object"?r:{value:r}),"value");}expected({descriptor:t}){let r=Array.from(this._choices.keys()).map(o=>this._choices.get(o)).filter(({hidden:o})=>!o).map(o=>o.value).sort(On$3).map(t.value),n=r.slice(0,-2),u=r.slice(-2);return {text:n.concat(u.join(" or ")).join(", "),list:{title:"one of the following values",values:r}}}validate(t){return this._choices.has(t)}deprecated(t){let r=this._choices.get(t);return r&&r.deprecated?{value:t}:!1}forward(t){let r=this._choices.get(t);return r?r.forward:void 0}redirect(t){let r=this._choices.get(t);return r?r.redirect:void 0}};var mt$2=class mt extends x$1{expected(){return "a number"}validate(t,r){return typeof t=="number"}};var ht$2=class ht extends mt$2{expected(){return "an integer"}validate(t,r){return r.normalizeValidateResult(super.validate(t,r),t)===!0&&Nn$3(t)}};var je$3=class je extends x$1{expected(){return "a string"}validate(t){return typeof t=="string"}};var Tn$3=oe$2,kn$2=Dt$3,Ln$3=Cn$4,Pn$3=mn$3;var Et$3=class Et{constructor(t,r){let{logger:n=console,loggerPrintWidth:u=80,descriptor:i=Tn$3,unknown:o=kn$2,invalid:s=Ln$3,deprecated:a=Pn$3,missing:D=()=>!1,required:l=()=>!1,preprocess:p=d=>d,postprocess:f=()=>Ae$2}=r||{};this._utils={descriptor:i,logger:n||{warn:()=>{}},loggerPrintWidth:u,schemas:wn$3(t,"name"),normalizeDefaultResult:Kt$1,normalizeExpectedResult:Jt$2,normalizeDeprecatedResult:Xt$1,normalizeForwardResult:pt$3,normalizeRedirectResult:Qt$1,normalizeValidateResult:qt$3},this._unknownHandler=o,this._invalidHandler=Sn$3(s),this._deprecatedHandler=a,this._identifyMissing=(d,c)=>!(d in c)||D(d,c),this._identifyRequired=l,this._preprocess=p,this._postprocess=f,this.cleanHistory();}cleanHistory(){this._hasDeprecationWarned=xn$3();}normalize(t){let r={},u=[this._preprocess(t,this._utils)],i=()=>{for(;u.length!==0;){let o=u.shift(),s=this._applyNormalization(o,r);u.push(...s);}};i();for(let o of Object.keys(this._utils.schemas)){let s=this._utils.schemas[o];if(!(o in r)){let a=Kt$1(s.default(this._utils));"value"in a&&u.push({[o]:a.value});}}i();for(let o of Object.keys(this._utils.schemas)){if(!(o in r))continue;let s=this._utils.schemas[o],a=r[o],D=s.postprocess(a,this._utils);D!==Ae$2&&(this._applyValidation(D,o,s),r[o]=D);}return this._applyPostprocess(r),this._applyRequiredCheck(r),r}_applyNormalization(t,r){let n=[],{knownKeys:u,unknownKeys:i}=this._partitionOptionKeys(t);for(let o of u){let s=this._utils.schemas[o],a=s.preprocess(t[o],this._utils);this._applyValidation(a,o,s);let D=({from:d,to:c})=>{n.push(typeof c=="string"?{[c]:d}:{[c.key]:c.value});},l=({value:d,redirectTo:c})=>{let F=Xt$1(s.deprecated(d,this._utils),a,!0);if(F!==!1)if(F===!0)this._hasDeprecationWarned(o)||this._utils.logger.warn(this._deprecatedHandler(o,c,this._utils));else for(let{value:m}of F){let h={key:o,value:m};if(!this._hasDeprecationWarned(h)){let C=typeof c=="string"?{key:c,value:m}:c;this._utils.logger.warn(this._deprecatedHandler(h,C,this._utils));}}};pt$3(s.forward(a,this._utils),a).forEach(D);let f=Qt$1(s.redirect(a,this._utils),a);if(f.redirect.forEach(D),"remain"in f){let d=f.remain;r[o]=o in r?s.overlap(r[o],d,this._utils):d,l({value:d});}for(let{from:d,to:c}of f.redirect)l({value:d,redirectTo:c});}for(let o of i){let s=t[o];this._applyUnknownHandler(o,s,r,(a,D)=>{n.push({[a]:D});});}return n}_applyRequiredCheck(t){for(let r of Object.keys(this._utils.schemas))if(this._identifyMissing(r,t)&&this._identifyRequired(r))throw this._invalidHandler(r,at$2,this._utils)}_partitionOptionKeys(t){let[r,n]=bn$3(Object.keys(t).filter(u=>!this._identifyMissing(u,t)),u=>u in this._utils.schemas);return {knownKeys:r,unknownKeys:n}}_applyValidation(t,r,n){let u=qt$3(n.validate(t,this._utils),t);if(u!==!0)throw this._invalidHandler(r,u.value,this._utils)}_applyUnknownHandler(t,r,n,u){let i=this._unknownHandler(t,r,this._utils);if(i)for(let o of Object.keys(i)){if(this._identifyMissing(o,i))continue;let s=i[o];o in this._utils.schemas?u(o,s):n[o]=s;}}_applyPostprocess(t){let r=this._postprocess(t,this._utils);if(r!==Ae$2){if(r.delete)for(let n of r.delete)delete t[n];if(r.override){let{knownKeys:n,unknownKeys:u}=this._partitionOptionKeys(r.override);for(let i of n){let o=r.override[i];this._applyValidation(o,i,this._utils.schemas[i]),t[i]=o;}for(let i of u){let o=r.override[i];this._applyUnknownHandler(i,o,t,(s,a)=>{let D=this._utils.schemas[s];this._applyValidation(a,s,D),t[s]=a;});}}}}};var Zt$3;function Ci$2(e,t,{logger:r=!1,isCLI:n=!1,passThrough:u=!1,FlagSchema:i,descriptor:o}={}){if(n){if(!i)throw new Error("'FlagSchema' option is required.");if(!o)throw new Error("'descriptor' option is required.")}else o=oe$2;let s=u?Array.isArray(u)?(f,d)=>u.includes(f)?{[f]:d}:void 0:(f,d)=>({[f]:d}):(f,d,c)=>{let{_:F,...m}=c.schemas;return Dt$3(f,d,{...c,schemas:m})},a=gi$3(t,{isCLI:n,FlagSchema:i}),D=new Et$3(a,{logger:r,unknown:s,descriptor:o}),l=r!==!1;l&&Zt$3&&(D._hasDeprecationWarned=Zt$3);let p=D.normalize(e);return l&&(Zt$3=D._hasDeprecationWarned),p}function gi$3(e,{isCLI:t,FlagSchema:r}){let n=[];t&&n.push(ct$2.create({name:"_"}));for(let u of e)n.push(yi$3(u,{isCLI:t,optionInfos:e,FlagSchema:r})),u.alias&&t&&n.push(lt$2.create({name:u.alias,sourceName:u.name}));return n}function yi$3(e,{isCLI:t,optionInfos:r,FlagSchema:n}){let{name:u}=e,i={name:u},o,s={};switch(e.type){case"int":o=ht$2,t&&(i.preprocess=Number);break;case"string":o=je$3;break;case"choice":o=Ft$2,i.choices=e.choices.map(a=>a!=null&&a.redirect?{...a,redirect:{to:{key:e.name,value:a.redirect}}}:a);break;case"boolean":o=dt$2;break;case"flag":o=n,i.flags=r.flatMap(a=>[a.alias,a.description&&a.name,a.oppositeDescription&&`no-${a.name}`].filter(Boolean));break;case"path":o=je$3;break;default:throw new Error(`Unexpected type ${e.type}`)}if(e.exception?i.validate=(a,D,l)=>e.exception(a)||D.validate(a,l):i.validate=(a,D,l)=>a===void 0||D.validate(a,l),e.redirect&&(s.redirect=a=>a?{to:typeof e.redirect=="string"?e.redirect:{key:e.redirect.option,value:e.redirect.value}}:void 0),e.deprecated&&(s.deprecated=!0),t&&!e.array){let a=i.preprocess||(D=>D);i.preprocess=(D,l,p)=>l.preprocess(a(Array.isArray(D)?y(!1,D,-1):D),p);}return e.array?ft$2.create({...t?{preprocess:a=>Array.isArray(a)?a:[a]}:{},...s,valueSchema:o.create(i)}):o.create({...i,...s})}var In$3=Ci$2;var Ai$2=(e,t,r)=>{if(!(e&&t==null)){if(t.findLast)return t.findLast(r);for(let n=t.length-1;n>=0;n--){let u=t[n];if(r(u,n,t))return u}}},er$3=Ai$2;function tr$3(e,t){if(!t)throw new Error("parserName is required.");let r=er$3(!1,e,u=>u.parsers&&Object.prototype.hasOwnProperty.call(u.parsers,t));if(r)return r;let n=`Couldn't resolve parser "${t}".`;throw n+=" Plugins must be explicitly added to the standalone bundle.",new Re$4(n)}function Rn$3(e,t){if(!t)throw new Error("astFormat is required.");let r=er$3(!1,e,u=>u.printers&&Object.prototype.hasOwnProperty.call(u.printers,t));if(r)return r;let n=`Couldn't find plugin for AST format "${t}".`;throw n+=" Plugins must be explicitly added to the standalone bundle.",new Re$4(n)}function Ct$4({plugins:e,parser:t}){let r=tr$3(e,t);return rr$2(r,t)}function rr$2(e,t){let r=e.parsers[t];return typeof r=="function"?r():r}function Yn$3(e,t){let r=e.printers[t];return typeof r=="function"?r():r}var jn$3={astFormat:"estree",printer:{},originalText:void 0,locStart:null,locEnd:null};async function vi$2(e,t={}){var p;let r={...e};if(!r.parser)if(r.filepath){if(r.parser=dn$3(r,{physicalFile:r.filepath}),!r.parser)throw new Ye$3(`No parser could be inferred for file "${r.filepath}".`)}else throw new Ye$3("No parser and no file path given, couldn't infer a parser.");let n=ot$1({plugins:e.plugins,showDeprecated:!0}).options,u={...jn$3,...Object.fromEntries(n.filter(f=>f.default!==void 0).map(f=>[f.name,f.default]))},i=tr$3(r.plugins,r.parser),o=await rr$2(i,r.parser);r.astFormat=o.astFormat,r.locEnd=o.locEnd,r.locStart=o.locStart;let s=(p=i.printers)!=null&&p[o.astFormat]?i:Rn$3(r.plugins,o.astFormat),a=await Yn$3(s,o.astFormat);r.printer=a;let D=s.defaultOptions?Object.fromEntries(Object.entries(s.defaultOptions).filter(([,f])=>f!==void 0)):{},l={...u,...D};for(let[f,d]of Object.entries(l))(r[f]===null||r[f]===void 0)&&(r[f]=d);return r.parser==="json"&&(r.trailingComma="none"),In$3(r,n,{passThrough:Object.keys(jn$3),...t})}var se$4=vi$2;var $n$3=Me$3(Wn$3());async function xi$3(e,t){let r=await Ct$4(t),n=r.preprocess?r.preprocess(e,t):e;t.originalText=n;let u;try{u=await r.parse(n,t,t);}catch(i){bi$2(i,e);}return {text:n,ast:u}}function bi$2(e,t){let{loc:r}=e;if(r){let n=(0, $n$3.codeFrameColumns)(t,r,{highlightCode:!0});throw e.message+=`
`+n,e.codeFrame=n,e}throw e}var fe$3=xi$3;async function Mn$3(e,t,r,n,u){let{embeddedLanguageFormatting:i,printer:{embed:o,hasPrettierIgnore:s=()=>!1,getVisitorKeys:a}}=r;if(!o||i!=="auto")return;if(o.length>2)throw new Error("printer.embed has too many parameters. The API changed in Prettier v3. Please update your plugin. See https://prettier.io/docs/en/plugins.html#optional-embed");let D=q$3(o.getVisitorKeys??a),l=[];d();let p=e.stack;for(let{print:c,node:F,pathStack:m}of l)try{e.stack=m;let h=await c(f,t,e,r);h&&u.set(F,h);}catch(h){if(globalThis.PRETTIER_DEBUG)throw h}e.stack=p;function f(c,F){return Ni$2(c,F,r,n)}function d(){let{node:c}=e;if(c===null||typeof c!="object"||s(e))return;for(let m of D(c))Array.isArray(c[m])?e.each(d,m):e.call(d,m);let F=o(e,r);if(F){if(typeof F=="function"){l.push({print:F,node:c,pathStack:[...e.stack]});return}u.set(c,F);}}}async function Ni$2(e,t,r,n){let u=await se$4({...r,...t,parentParser:r.parser,originalText:e},{passThrough:!0}),{ast:i}=await fe$3(e,u),o=await n(i,u);return et$3(o)}function Oi$2(e,t){let{originalText:r,[Symbol.for("comments")]:n,locStart:u,locEnd:i,[Symbol.for("printedComments")]:o}=t,{node:s}=e,a=u(s),D=i(s);for(let l of n)u(l)>=a&&i(l)<=D&&o.add(l);return r.slice(a,D)}var Un$3=Oi$2;async function He$2(e,t){({ast:e}=await ur$3(e,t));let r=new Map,n=new Jr$3(e),i=new Map;await Mn$3(n,s,t,He$2,i);let o=await Vn$3(n,t,s,void 0,i);if(Dn$3(t),t.nodeAfterCursor&&!t.nodeBeforeCursor)return [Z$2,o];if(t.nodeBeforeCursor&&!t.nodeAfterCursor)return [o,Z$2];return o;function s(D,l){return D===void 0||D===n?a(l):Array.isArray(D)?n.call(()=>a(l),...D):n.call(()=>a(l),D)}function a(D){let l=n.node;if(l==null)return "";let p=l&&typeof l=="object"&&D===void 0;if(p&&r.has(l))return r.get(l);let f=Vn$3(n,t,s,D,i);return p&&r.set(l,f),f}}function Vn$3(e,t,r,n,u){var a;let{node:i}=e,{printer:o}=t,s;switch((a=o.hasPrettierIgnore)!=null&&a.call(o,e)?s=Un$3(e,t):u.has(i)?s=u.get(i):s=o.print(e,t,r,n),i){case t.cursorNode:s=me$3(s,D=>[Z$2,D,Z$2]);break;case t.nodeBeforeCursor:s=me$3(s,D=>[D,Z$2]);break;case t.nodeAfterCursor:s=me$3(s,D=>[Z$2,D]);break}return o.printComment&&(!o.willPrintOwnComments||!o.willPrintOwnComments(e,t))&&(s=an$3(e,s,t)),s}async function ur$3(e,t){let r=e.comments??[];t[Symbol.for("comments")]=r,t[Symbol.for("tokens")]=e.tokens??[],t[Symbol.for("printedComments")]=new Set,un$3(e,t);let{printer:{preprocess:n}}=t;return e=n?await n(e,t):e,{ast:e,comments:r}}function Si$2(e,t){let{cursorOffset:r,locStart:n,locEnd:u}=t,i=q$3(t.printer.getVisitorKeys),o=d=>n(d)<=r&&u(d)>=r,s=e,a=[e];for(let d of Qr$2(e,{getVisitorKeys:i,filter:o}))a.push(d),s=d;if(Zr$3(s,{getVisitorKeys:i}))return {cursorNode:s};let D,l,p=-1,f=Number.POSITIVE_INFINITY;for(;a.length>0&&(D===void 0||l===void 0);){s=a.pop();let d=D!==void 0,c=l!==void 0;for(let F of ge$3(s,{getVisitorKeys:i})){if(!d){let m=u(F);m<=r&&m>p&&(D=F,p=m);}if(!c){let m=n(F);m>=r&&m<f&&(l=F,f=m);}}}return {nodeBeforeCursor:D,nodeAfterCursor:l}}var zn$3=Si$2;function Ti$2(e,t){let{printer:{massageAstNode:r,getVisitorKeys:n}}=t;if(!r)return e;let u=q$3(n),i=r.ignoredProperties??new Set;return o(e);function o(s,a){if(!(s!==null&&typeof s=="object"))return s;if(Array.isArray(s))return s.map(f=>o(f,a)).filter(Boolean);let D={},l=new Set(u(s));for(let f in s)!Object.prototype.hasOwnProperty.call(s,f)||i.has(f)||(l.has(f)?D[f]=o(s[f],s):D[f]=s[f]);let p=r(s,D,a);if(p!==null)return p??D}}var Gn$3=Ti$2;var ki$2=(e,t,r)=>{if(!(e&&t==null)){if(t.findLastIndex)return t.findLastIndex(r);for(let n=t.length-1;n>=0;n--){let u=t[n];if(r(u,n,t))return n}return -1}},Kn$3=ki$2;var Li$2=({parser:e})=>e==="json"||e==="json5"||e==="jsonc"||e==="json-stringify";function Pi$2(e,t){let r=[e.node,...e.parentNodes],n=new Set([t.node,...t.parentNodes]);return r.find(u=>Xn$3.has(u.type)&&n.has(u))}function Jn$3(e){let t=Kn$3(!1,e,r=>r.type!=="Program"&&r.type!=="File");return t===-1?e:e.slice(0,t+1)}function Ii$2(e,t,{locStart:r,locEnd:n}){let u=e.node,i=t.node;if(u===i)return {startNode:u,endNode:i};let o=r(e.node);for(let a of Jn$3(t.parentNodes))if(r(a)>=o)i=a;else break;let s=n(t.node);for(let a of Jn$3(e.parentNodes)){if(n(a)<=s)u=a;else break;if(u===i)break}return {startNode:u,endNode:i}}function ir$2(e,t,r,n,u=[],i){let{locStart:o,locEnd:s}=r,a=o(e),D=s(e);if(!(t>D||t<a||i==="rangeEnd"&&t===a||i==="rangeStart"&&t===D)){for(let l of it$3(e,r)){let p=ir$2(l,t,r,n,[e,...u],i);if(p)return p}if(!n||n(e,u[0]))return {node:e,parentNodes:u}}}function Ri$2(e,t){return t!=="DeclareExportDeclaration"&&e!=="TypeParameterDeclaration"&&(e==="Directive"||e==="TypeAlias"||e==="TSExportAssignment"||e.startsWith("Declare")||e.startsWith("TSDeclare")||e.endsWith("Statement")||e.endsWith("Declaration"))}var Xn$3=new Set(["JsonRoot","ObjectExpression","ArrayExpression","StringLiteral","NumericLiteral","BooleanLiteral","NullLiteral","UnaryExpression","TemplateLiteral"]),Yi$2=new Set(["OperationDefinition","FragmentDefinition","VariableDefinition","TypeExtensionDefinition","ObjectTypeDefinition","FieldDefinition","DirectiveDefinition","EnumTypeDefinition","EnumValueDefinition","InputValueDefinition","InputObjectTypeDefinition","SchemaDefinition","OperationTypeDefinition","InterfaceTypeDefinition","UnionTypeDefinition","ScalarTypeDefinition"]);function qn$3(e,t,r){if(!t)return !1;switch(e.parser){case"flow":case"babel":case"babel-flow":case"babel-ts":case"typescript":case"acorn":case"espree":case"meriyah":case"__babel_estree":return Ri$2(t.type,r==null?void 0:r.type);case"json":case"json5":case"jsonc":case"json-stringify":return Xn$3.has(t.type);case"graphql":return Yi$2.has(t.kind);case"vue":return t.tag!=="root"}return !1}function Qn$3(e,t,r){let{rangeStart:n,rangeEnd:u,locStart:i,locEnd:o}=t;Pe$3.ok(u>n);let s=e.slice(n,u).search(/\S/u),a=s===-1;if(!a)for(n+=s;u>n&&!/\S/u.test(e[u-1]);--u);let D=ir$2(r,n,t,(d,c)=>qn$3(t,d,c),[],"rangeStart"),l=a?D:ir$2(r,u,t,d=>qn$3(t,d),[],"rangeEnd");if(!D||!l)return {rangeStart:0,rangeEnd:0};let p,f;if(Li$2(t)){let d=Pi$2(D,l);p=d,f=d;}else ({startNode:p,endNode:f}=Ii$2(D,l,t));return {rangeStart:Math.min(i(p),i(f)),rangeEnd:Math.max(o(p),o(f))}}var ru$2="\uFEFF",Zn$3=Symbol("cursor");async function nu$1(e,t,r=0){if(!e||e.trim().length===0)return {formatted:"",cursorOffset:-1,comments:[]};let{ast:n,text:u}=await fe$3(e,t);t.cursorOffset>=0&&(t={...t,...zn$3(n,t)});let i=await He$2(n,t);r>0&&(i=Qe$3([K$4,i],r,t.tabWidth));let o=Ee$3(i,t);if(r>0){let a=o.formatted.trim();o.cursorNodeStart!==void 0&&(o.cursorNodeStart-=o.formatted.indexOf(a),o.cursorNodeStart<0&&(o.cursorNodeStart=0,o.cursorNodeText=o.cursorNodeText.trimStart()),o.cursorNodeStart+o.cursorNodeText.length>a.length&&(o.cursorNodeText=o.cursorNodeText.trimEnd())),o.formatted=a+xe$4(t.endOfLine);}let s=t[Symbol.for("comments")];if(t.cursorOffset>=0){let a,D,l,p;if((t.cursorNode||t.nodeBeforeCursor||t.nodeAfterCursor)&&o.cursorNodeText)if(l=o.cursorNodeStart,p=o.cursorNodeText,t.cursorNode)a=t.locStart(t.cursorNode),D=u.slice(a,t.locEnd(t.cursorNode));else {if(!t.nodeBeforeCursor&&!t.nodeAfterCursor)throw new Error("Cursor location must contain at least one of cursorNode, nodeBeforeCursor, nodeAfterCursor");a=t.nodeBeforeCursor?t.locEnd(t.nodeBeforeCursor):0;let h=t.nodeAfterCursor?t.locStart(t.nodeAfterCursor):u.length;D=u.slice(a,h);}else a=0,D=u,l=0,p=o.formatted;let f=t.cursorOffset-a;if(D===p)return {formatted:o.formatted,cursorOffset:l+f,comments:s};let d=D.split("");d.splice(f,0,Zn$3);let c=p.split(""),F=gr$3(d,c),m=l;for(let h of F)if(h.removed){if(h.value.includes(Zn$3))break}else m+=h.count;return {formatted:o.formatted,cursorOffset:m,comments:s}}return {formatted:o.formatted,cursorOffset:-1,comments:s}}async function ji$2(e,t){let{ast:r,text:n}=await fe$3(e,t),{rangeStart:u,rangeEnd:i}=Qn$3(n,t,r),o=n.slice(u,i),s=Math.min(u,n.lastIndexOf(`
`,u)+1),a=n.slice(s,u).match(/^\s*/u)[0],D=Ce$3(a,t.tabWidth),l=await nu$1(o,{...t,rangeStart:0,rangeEnd:Number.POSITIVE_INFINITY,cursorOffset:t.cursorOffset>u&&t.cursorOffset<=i?t.cursorOffset-u:-1,endOfLine:"lf"},D),p=l.formatted.trimEnd(),{cursorOffset:f}=t;f>i?f+=p.length-o.length:l.cursorOffset>=0&&(f=l.cursorOffset+u);let d=n.slice(0,u)+p+n.slice(i);if(t.endOfLine!=="lf"){let c=xe$4(t.endOfLine);f>=0&&c===`\r
`&&(f+=Ot$3(d.slice(0,f),`
`)),d=ne$1(!1,d,`
`,c);}return {formatted:d,cursorOffset:f,comments:l.comments}}function or$2(e,t,r){return typeof t!="number"||Number.isNaN(t)||t<0||t>e.length?r:t}function eu$1(e,t){let{cursorOffset:r,rangeStart:n,rangeEnd:u}=t;return r=or$2(e,r,-1),n=or$2(e,n,0),u=or$2(e,u,e.length),{...t,cursorOffset:r,rangeStart:n,rangeEnd:u}}function uu$2(e,t){let{cursorOffset:r,rangeStart:n,rangeEnd:u,endOfLine:i}=eu$1(e,t),o=e.charAt(0)===ru$2;if(o&&(e=e.slice(1),r--,n--,u--),i==="auto"&&(i=yr$3(e)),e.includes("\r")){let s=a=>Ot$3(e.slice(0,Math.max(a,0)),`\r
`);r-=s(r),n-=s(n),u-=s(u),e=Ar$3(e);}return {hasBOM:o,text:e,options:eu$1(e,{...t,cursorOffset:r,rangeStart:n,rangeEnd:u,endOfLine:i})}}async function tu$1(e,t){let r=await Ct$4(t);return !r.hasPragma||r.hasPragma(e)}async function sr$2(e,t){let{hasBOM:r,text:n,options:u}=uu$2(e,await se$4(t));if(u.rangeStart>=u.rangeEnd&&n!==""||u.requirePragma&&!await tu$1(n,u))return {formatted:e,cursorOffset:t.cursorOffset,comments:[]};let i;return u.rangeStart>0||u.rangeEnd<n.length?i=await ji$2(n,u):(!u.requirePragma&&u.insertPragma&&u.printer.insertPragma&&!await tu$1(n,u)&&(n=u.printer.insertPragma(n)),i=await nu$1(n,u)),r&&(i.formatted=ru$2+i.formatted,i.cursorOffset>=0&&i.cursorOffset++),i}async function iu$2(e,t,r){let{text:n,options:u}=uu$2(e,await se$4(t)),i=await fe$3(n,u);return r&&(r.preprocessForPrint&&(i.ast=await ur$3(i.ast,u)),r.massage&&(i.ast=Gn$3(i.ast,u))),i}async function ou$1(e,t){t=await se$4(t);let r=await He$2(e,t);return Ee$3(r,t)}async function su$1(e,t){let r=Ir$2(e),{formatted:n}=await sr$2(r,{...t,parser:"__js_expression"});return n}async function au$2(e,t){t=await se$4(t);let{ast:r}=await fe$3(e,t);return He$2(r,t)}async function Du$2(e,t){return Ee$3(e,await se$4(t))}var ar$3={};Bt$3(ar$3,{builders:()=>Wi$2,printer:()=>$i$3,utils:()=>Mi$2});var Wi$2={join:Se$3,line:qe$2,softline:Lr$3,hardline:K$4,literalline:Xe$3,group:Tt$4,conditionalGroup:br$3,fill:Nr$2,lineSuffix:Ne$3,lineSuffixBoundary:Tr$3,cursor:Z$2,breakParent:Fe$3,ifBreak:Or$3,trim:kr$3,indent:le$2,indentIfBreak:Sr$3,align:De$4,addAlignmentToDoc:Qe$3,markAsRoot:_r$3,dedentToRoot:wr$3,dedent:xr$3,hardlineWithoutBreakParent:Oe$4,literallineWithoutBreakParent:kt$2,label:Pr$2,concat:e=>e},$i$3={printDocToString:Ee$3},Mi$2={willBreak:Mr$3,traverseDoc:be$3,findInDoc:Ze$3,mapDoc:Le$3,removeLines:Vr$4,stripTrailingHardline:et$3,replaceEndOfLine:zr$4,canBreak:Gr$3};var lu$1="3.4.2";var lr$3={};Bt$3(lr$3,{addDanglingComment:()=>re$3,addLeadingComment:()=>ue$1,addTrailingComment:()=>ie$4,getAlignmentSize:()=>Ce$3,getIndentSize:()=>cu$1,getMaxContinuousCount:()=>fu$1,getNextNonSpaceNonCommentCharacter:()=>du$2,getNextNonSpaceNonCommentCharacterIndex:()=>ro$1,getPreferredQuote:()=>Fu$2,getStringWidth:()=>Te$3,hasNewline:()=>$$3,hasNewlineInRange:()=>mu$1,hasSpaces:()=>hu$1,isNextLineEmpty:()=>oo$1,isNextLineEmptyAfterIndex:()=>gt$3,isPreviousLineEmpty:()=>uo$2,makeString:()=>Eu$1,skip:()=>ye$3,skipEverythingButNewLine:()=>ut$3,skipInlineComment:()=>ve$3,skipNewline:()=>W$3,skipSpaces:()=>S$2,skipToLineEnd:()=>nt$3,skipTrailingComment:()=>Be$3,skipWhitespace:()=>en$3});function Ui$2(e,t){if(t===!1)return !1;if(e.charAt(t)==="/"&&e.charAt(t+1)==="*"){for(let r=t+2;r<e.length;++r)if(e.charAt(r)==="*"&&e.charAt(r+1)==="/")return r+2}return t}var ve$3=Ui$2;function Vi$2(e,t){return t===!1?!1:e.charAt(t)==="/"&&e.charAt(t+1)==="/"?ut$3(e,t):t}var Be$3=Vi$2;function zi$2(e,t){let r=null,n=t;for(;n!==r;)r=n,n=S$2(e,n),n=ve$3(e,n),n=Be$3(e,n),n=W$3(e,n);return n}var We$3=zi$2;function Gi$2(e,t){let r=null,n=t;for(;n!==r;)r=n,n=nt$3(e,n),n=ve$3(e,n),n=S$2(e,n);return n=Be$3(e,n),n=W$3(e,n),n!==!1&&$$3(e,n)}var gt$3=Gi$2;function Ki$2(e,t){let r=e.lastIndexOf(`
`);return r===-1?0:Ce$3(e.slice(r+1).match(/^[\t ]*/u)[0],t)}var cu$1=Ki$2;function Dr$3(e){if(typeof e!="string")throw new TypeError("Expected a string");return e.replace(/[|\\{}()[\]^$+*?.]/g,"\\$&").replace(/-/g,"\\x2d")}function Ji$2(e,t){let r=e.match(new RegExp(`(${Dr$3(t)})+`,"gu"));return r===null?0:r.reduce((n,u)=>Math.max(n,u.length/t.length),0)}var fu$1=Ji$2;function qi$2(e,t){let r=We$3(e,t);return r===!1?"":e.charAt(r)}var du$2=qi$2;var yt$2="'",pu$2='"';function Xi$2(e,t){let r=t===!0||t===yt$2?yt$2:pu$2,n=r===yt$2?pu$2:yt$2,u=0,i=0;for(let o of e)o===r?u++:o===n&&i++;return u>i?n:r}var Fu$2=Xi$2;function Qi$2(e,t,r){for(let n=t;n<r;++n)if(e.charAt(n)===`
`)return !0;return !1}var mu$1=Qi$2;function Zi$2(e,t,r={}){return S$2(e,r.backwards?t-1:t,r)!==t}var hu$1=Zi$2;function eo$1(e,t,r){let n=t==='"'?"'":'"',i=ne$1(!1,e,/\\(.)|(["'])/gsu,(o,s,a)=>s===n?s:a===t?"\\"+a:a||(r&&/^[^\n\r"'0-7\\bfnrt-vx\u2028\u2029]$/u.test(s)?s:"\\"+s));return t+i+t}var Eu$1=eo$1;function to$1(e,t,r){return We$3(e,r(t))}function ro$1(e,t){return arguments.length===2||typeof t=="number"?We$3(e,t):to$1(...arguments)}function no$1(e,t,r){return Ie$2(e,r(t))}function uo$2(e,t){return arguments.length===2||typeof t=="number"?Ie$2(e,t):no$1(...arguments)}function io$1(e,t,r){return gt$3(e,r(t))}function oo$1(e,t){return arguments.length===2||typeof t=="number"?gt$3(e,t):io$1(...arguments)}function de$2(e,t=1){return async(...r)=>{let n=r[t]??{},u=n.plugins??[];return r[t]={...n,plugins:Array.isArray(u)?u:Object.values(u)},e(...r)}}var Cu$1=de$2(sr$2);async function gu$2(e,t){let{formatted:r}=await Cu$1(e,{...t,cursorOffset:-1});return r}async function so$1(e,t){return await gu$2(e,t)===e}var ao$1=de$2(ot$1,0),Do$2={parse:de$2(iu$2),formatAST:de$2(ou$1),formatDoc:de$2(su$1),printToDoc:de$2(au$2),printDocToString:de$2(Du$2)};var lc$2=cr$3;

    var Bs$3=Object.create;var Re$3=Object.defineProperty;var Rs$1=Object.getOwnPropertyDescriptor;var Us$2=Object.getOwnPropertyNames;var _s$2=Object.getPrototypeOf,js$1=Object.prototype.hasOwnProperty;var $s$2=(a,t)=>()=>(t||a((t={exports:{}}).exports,t),t.exports),zs$2=(a,t)=>{for(var e in t)Re$3(a,e,{get:t[e],enumerable:!0});},Vs$1=(a,t,e,s)=>{if(t&&typeof t=="object"||typeof t=="function")for(let i of Us$2(t))!js$1.call(a,i)&&i!==e&&Re$3(a,i,{get:()=>t[i],enumerable:!(s=Rs$1(t,i))||s.enumerable});return a};var It$3=(a,t,e)=>(e=a!=null?Bs$3(_s$2(a)):{},Vs$1(Re$3(e,"default",{value:a,enumerable:!0}),a));var gt$2=$s$2(me=>{Object.defineProperty(me,"__esModule",{value:!0});function qs(a,t){if(a==null)return {};var e={};for(var s in a)if({}.hasOwnProperty.call(a,s)){if(t.includes(s))continue;e[s]=a[s];}return e}var O=class{constructor(t,e,s){this.line=void 0,this.column=void 0,this.index=void 0,this.line=t,this.column=e,this.index=s;}},Z=class{constructor(t,e){this.start=void 0,this.end=void 0,this.filename=void 0,this.identifierName=void 0,this.start=t,this.end=e;}};function v(a,t){let{line:e,column:s,index:i}=a;return new O(e,s+t,i+t)}var Nt="BABEL_PARSER_SOURCETYPE_MODULE_REQUIRED",Ks={ImportMetaOutsideModule:{message:`import.meta may appear only with 'sourceType: "module"'`,code:Nt},ImportOutsideModule:{message:`'import' and 'export' may appear only with 'sourceType: "module"'`,code:Nt}},kt={ArrayPattern:"array destructuring pattern",AssignmentExpression:"assignment expression",AssignmentPattern:"assignment expression",ArrowFunctionExpression:"arrow function expression",ConditionalExpression:"conditional expression",CatchClause:"catch clause",ForOfStatement:"for-of statement",ForInStatement:"for-in statement",ForStatement:"for-loop",FormalParameters:"function parameter list",Identifier:"identifier",ImportSpecifier:"import specifier",ImportDefaultSpecifier:"import default specifier",ImportNamespaceSpecifier:"import namespace specifier",ObjectPattern:"object destructuring pattern",ParenthesizedExpression:"parenthesized expression",RestElement:"rest element",UpdateExpression:{true:"prefix operation",false:"postfix operation"},VariableDeclarator:"variable declaration",YieldExpression:"yield expression"},Se=a=>a.type==="UpdateExpression"?kt.UpdateExpression[`${a.prefix}`]:kt[a.type],Hs={AccessorIsGenerator:({kind:a})=>`A ${a}ter cannot be a generator.`,ArgumentsInClass:"'arguments' is only allowed in functions and class methods.",AsyncFunctionInSingleStatementContext:"Async functions can only be declared at the top level or inside a block.",AwaitBindingIdentifier:"Can not use 'await' as identifier inside an async function.",AwaitBindingIdentifierInStaticBlock:"Can not use 'await' as identifier inside a static block.",AwaitExpressionFormalParameter:"'await' is not allowed in async function parameters.",AwaitUsingNotInAsyncContext:"'await using' is only allowed within async functions and at the top levels of modules.",AwaitNotInAsyncContext:"'await' is only allowed within async functions and at the top levels of modules.",AwaitNotInAsyncFunction:"'await' is only allowed within async functions.",BadGetterArity:"A 'get' accessor must not have any formal parameters.",BadSetterArity:"A 'set' accessor must have exactly one formal parameter.",BadSetterRestParameter:"A 'set' accessor function argument must not be a rest parameter.",ConstructorClassField:"Classes may not have a field named 'constructor'.",ConstructorClassPrivateField:"Classes may not have a private field named '#constructor'.",ConstructorIsAccessor:"Class constructor may not be an accessor.",ConstructorIsAsync:"Constructor can't be an async function.",ConstructorIsGenerator:"Constructor can't be a generator.",DeclarationMissingInitializer:({kind:a})=>`Missing initializer in ${a} declaration.`,DecoratorArgumentsOutsideParentheses:"Decorator arguments must be moved inside parentheses: use '@(decorator(args))' instead of '@(decorator)(args)'.",DecoratorBeforeExport:"Decorators must be placed *before* the 'export' keyword. Remove the 'decoratorsBeforeExport: true' option to use the 'export @decorator class {}' syntax.",DecoratorsBeforeAfterExport:"Decorators can be placed *either* before or after the 'export' keyword, but not in both locations at the same time.",DecoratorConstructor:"Decorators can't be used with a constructor. Did you mean '@dec class { ... }'?",DecoratorExportClass:"Decorators must be placed *after* the 'export' keyword. Remove the 'decoratorsBeforeExport: false' option to use the '@decorator export class {}' syntax.",DecoratorSemicolon:"Decorators must not be followed by a semicolon.",DecoratorStaticBlock:"Decorators can't be used with a static block.",DeferImportRequiresNamespace:'Only `import defer * as x from "./module"` is valid.',DeletePrivateField:"Deleting a private field is not allowed.",DestructureNamedImport:"ES2015 named imports do not destructure. Use another statement for destructuring after the import.",DuplicateConstructor:"Duplicate constructor in the same class.",DuplicateDefaultExport:"Only one default export allowed per module.",DuplicateExport:({exportName:a})=>`\`${a}\` has already been exported. Exported identifiers must be unique.`,DuplicateProto:"Redefinition of __proto__ property.",DuplicateRegExpFlags:"Duplicate regular expression flag.",DynamicImportPhaseRequiresImportExpressions:({phase:a})=>`'import.${a}(...)' can only be parsed when using the 'createImportExpressions' option.`,ElementAfterRest:"Rest element must be last element.",EscapedCharNotAnIdentifier:"Invalid Unicode escape.",ExportBindingIsString:({localName:a,exportName:t})=>`A string literal cannot be used as an exported binding without \`from\`.
- Did you mean \`export { '${a}' as '${t}' } from 'some-module'\`?`,ExportDefaultFromAsIdentifier:"'from' is not allowed as an identifier after 'export default'.",ForInOfLoopInitializer:({type:a})=>`'${a==="ForInStatement"?"for-in":"for-of"}' loop variable declaration may not have an initializer.`,ForInUsing:"For-in loop may not start with 'using' declaration.",ForOfAsync:"The left-hand side of a for-of loop may not be 'async'.",ForOfLet:"The left-hand side of a for-of loop may not start with 'let'.",GeneratorInSingleStatementContext:"Generators can only be declared at the top level or inside a block.",IllegalBreakContinue:({type:a})=>`Unsyntactic ${a==="BreakStatement"?"break":"continue"}.`,IllegalLanguageModeDirective:"Illegal 'use strict' directive in function with non-simple parameter list.",IllegalReturn:"'return' outside of function.",ImportAttributesUseAssert:"The `assert` keyword in import attributes is deprecated and it has been replaced by the `with` keyword. You can enable the `deprecatedImportAssert` parser plugin to suppress this error.",ImportBindingIsString:({importName:a})=>`A string literal cannot be used as an imported binding.
- Did you mean \`import { "${a}" as foo }\`?`,ImportCallArity:"`import()` requires exactly one or two arguments.",ImportCallNotNewExpression:"Cannot use new with import(...).",ImportCallSpreadArgument:"`...` is not allowed in `import()`.",ImportJSONBindingNotDefault:"A JSON module can only be imported with `default`.",ImportReflectionHasAssertion:"`import module x` cannot have assertions.",ImportReflectionNotBinding:'Only `import module x from "./module"` is valid.',IncompatibleRegExpUVFlags:"The 'u' and 'v' regular expression flags cannot be enabled at the same time.",InvalidBigIntLiteral:"Invalid BigIntLiteral.",InvalidCodePoint:"Code point out of bounds.",InvalidCoverInitializedName:"Invalid shorthand property initializer.",InvalidDecimal:"Invalid decimal.",InvalidDigit:({radix:a})=>`Expected number in radix ${a}.`,InvalidEscapeSequence:"Bad character escape sequence.",InvalidEscapeSequenceTemplate:"Invalid escape sequence in template.",InvalidEscapedReservedWord:({reservedWord:a})=>`Escape sequence in keyword ${a}.`,InvalidIdentifier:({identifierName:a})=>`Invalid identifier ${a}.`,InvalidLhs:({ancestor:a})=>`Invalid left-hand side in ${Se(a)}.`,InvalidLhsBinding:({ancestor:a})=>`Binding invalid left-hand side in ${Se(a)}.`,InvalidLhsOptionalChaining:({ancestor:a})=>`Invalid optional chaining in the left-hand side of ${Se(a)}.`,InvalidNumber:"Invalid number.",InvalidOrMissingExponent:"Floating-point numbers require a valid exponent after the 'e'.",InvalidOrUnexpectedToken:({unexpected:a})=>`Unexpected character '${a}'.`,InvalidParenthesizedAssignment:"Invalid parenthesized assignment pattern.",InvalidPrivateFieldResolution:({identifierName:a})=>`Private name #${a} is not defined.`,InvalidPropertyBindingPattern:"Binding member expression.",InvalidRecordProperty:"Only properties and spread elements are allowed in record definitions.",InvalidRestAssignmentPattern:"Invalid rest operator's argument.",LabelRedeclaration:({labelName:a})=>`Label '${a}' is already declared.`,LetInLexicalBinding:"'let' is disallowed as a lexically bound name.",LineTerminatorBeforeArrow:"No line break is allowed before '=>'.",MalformedRegExpFlags:"Invalid regular expression flag.",MissingClassName:"A class name is required.",MissingEqInAssignment:"Only '=' operator can be used for specifying default value.",MissingSemicolon:"Missing semicolon.",MissingPlugin:({missingPlugin:a})=>`This experimental syntax requires enabling the parser plugin: ${a.map(t=>JSON.stringify(t)).join(", ")}.`,MissingOneOfPlugins:({missingPlugin:a})=>`This experimental syntax requires enabling one of the following parser plugin(s): ${a.map(t=>JSON.stringify(t)).join(", ")}.`,MissingUnicodeEscape:"Expecting Unicode escape sequence \\uXXXX.",MixingCoalesceWithLogical:"Nullish coalescing operator(??) requires parens when mixing with logical operators.",ModuleAttributeDifferentFromType:"The only accepted module attribute is `type`.",ModuleAttributeInvalidValue:"Only string literals are allowed as module attribute values.",ModuleAttributesWithDuplicateKeys:({key:a})=>`Duplicate key "${a}" is not allowed in module attributes.`,ModuleExportNameHasLoneSurrogate:({surrogateCharCode:a})=>`An export name cannot include a lone surrogate, found '\\u${a.toString(16)}'.`,ModuleExportUndefined:({localName:a})=>`Export '${a}' is not defined.`,MultipleDefaultsInSwitch:"Multiple default clauses.",NewlineAfterThrow:"Illegal newline after throw.",NoCatchOrFinally:"Missing catch or finally clause.",NumberIdentifier:"Identifier directly after number.",NumericSeparatorInEscapeSequence:"Numeric separators are not allowed inside unicode escape sequences or hex escape sequences.",ObsoleteAwaitStar:"'await*' has been removed from the async functions proposal. Use Promise.all() instead.",OptionalChainingNoNew:"Constructors in/after an Optional Chain are not allowed.",OptionalChainingNoTemplate:"Tagged Template Literals are not allowed in optionalChain.",OverrideOnConstructor:"'override' modifier cannot appear on a constructor declaration.",ParamDupe:"Argument name clash.",PatternHasAccessor:"Object pattern can't contain getter or setter.",PatternHasMethod:"Object pattern can't contain methods.",PrivateInExpectedIn:({identifierName:a})=>`Private names are only allowed in property accesses (\`obj.#${a}\`) or in \`in\` expressions (\`#${a} in obj\`).`,PrivateNameRedeclaration:({identifierName:a})=>`Duplicate private name #${a}.`,RecordExpressionBarIncorrectEndSyntaxType:"Record expressions ending with '|}' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.",RecordExpressionBarIncorrectStartSyntaxType:"Record expressions starting with '{|' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.",RecordExpressionHashIncorrectStartSyntaxType:"Record expressions starting with '#{' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'hash'.",RecordNoProto:"'__proto__' is not allowed in Record expressions.",RestTrailingComma:"Unexpected trailing comma after rest element.",SloppyFunction:"In non-strict mode code, functions can only be declared at top level or inside a block.",SloppyFunctionAnnexB:"In non-strict mode code, functions can only be declared at top level, inside a block, or as the body of an if statement.",SourcePhaseImportRequiresDefault:'Only `import source x from "./module"` is valid.',StaticPrototype:"Classes may not have static property named prototype.",SuperNotAllowed:"`super()` is only valid inside a class constructor of a subclass. Maybe a typo in the method name ('constructor') or not extending another class?",SuperPrivateField:"Private fields can't be accessed on super.",TrailingDecorator:"Decorators must be attached to a class element.",TupleExpressionBarIncorrectEndSyntaxType:"Tuple expressions ending with '|]' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.",TupleExpressionBarIncorrectStartSyntaxType:"Tuple expressions starting with '[|' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.",TupleExpressionHashIncorrectStartSyntaxType:"Tuple expressions starting with '#[' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'hash'.",UnexpectedArgumentPlaceholder:"Unexpected argument placeholder.",UnexpectedAwaitAfterPipelineBody:'Unexpected "await" after pipeline body; await must have parentheses in minimal proposal.',UnexpectedDigitAfterHash:"Unexpected digit after hash token.",UnexpectedImportExport:"'import' and 'export' may only appear at the top level.",UnexpectedKeyword:({keyword:a})=>`Unexpected keyword '${a}'.`,UnexpectedLeadingDecorator:"Leading decorators must be attached to a class declaration.",UnexpectedLexicalDeclaration:"Lexical declaration cannot appear in a single-statement context.",UnexpectedNewTarget:"`new.target` can only be used in functions or class properties.",UnexpectedNumericSeparator:"A numeric separator is only allowed between two digits.",UnexpectedPrivateField:"Unexpected private name.",UnexpectedReservedWord:({reservedWord:a})=>`Unexpected reserved word '${a}'.`,UnexpectedSuper:"'super' is only allowed in object methods and classes.",UnexpectedToken:({expected:a,unexpected:t})=>`Unexpected token${t?` '${t}'.`:""}${a?`, expected "${a}"`:""}`,UnexpectedTokenUnaryExponentiation:"Illegal expression. Wrap left hand side or entire exponentiation in parentheses.",UnexpectedUsingDeclaration:"Using declaration cannot appear in the top level when source type is `script`.",UnsupportedBind:"Binding should be performed on object property.",UnsupportedDecoratorExport:"A decorated export must export a class declaration.",UnsupportedDefaultExport:"Only expressions, functions or classes are allowed as the `default` export.",UnsupportedImport:"`import` can only be used in `import()` or `import.meta`.",UnsupportedMetaProperty:({target:a,onlyValidPropertyName:t})=>`The only valid meta property for ${a} is ${a}.${t}.`,UnsupportedParameterDecorator:"Decorators cannot be used to decorate parameters.",UnsupportedPropertyDecorator:"Decorators cannot be used to decorate object literal properties.",UnsupportedSuper:"'super' can only be used with function calls (i.e. super()) or in property accesses (i.e. super.prop or super[prop]).",UnterminatedComment:"Unterminated comment.",UnterminatedRegExp:"Unterminated regular expression.",UnterminatedString:"Unterminated string constant.",UnterminatedTemplate:"Unterminated template.",UsingDeclarationExport:"Using declaration cannot be exported.",UsingDeclarationHasBindingPattern:"Using declaration cannot have destructuring patterns.",VarRedeclaration:({identifierName:a})=>`Identifier '${a}' has already been declared.`,YieldBindingIdentifier:"Can not use 'yield' as identifier inside a generator.",YieldInParameter:"Yield expression is not allowed in formal parameters.",ZeroDigitNumericSeparator:"Numeric separator can not be used after leading 0."},Js={StrictDelete:"Deleting local variable in strict mode.",StrictEvalArguments:({referenceName:a})=>`Assigning to '${a}' in strict mode.`,StrictEvalArgumentsBinding:({bindingName:a})=>`Binding '${a}' in strict mode.`,StrictFunction:"In strict mode code, functions can only be declared at top level or inside a block.",StrictNumericEscape:"The only valid numeric escape in strict mode is '\\0'.",StrictOctalLiteral:"Legacy octal literals are not allowed in strict mode.",StrictWith:"'with' in strict mode."},Ws=new Set(["ArrowFunctionExpression","AssignmentExpression","ConditionalExpression","YieldExpression"]),Xs={PipeBodyIsTighter:"Unexpected yield after pipeline body; any yield expression acting as Hack-style pipe body must be parenthesized due to its loose operator precedence.",PipeTopicRequiresHackPipes:'Topic reference is used, but the pipelineOperator plugin was not passed a "proposal": "hack" or "smart" option.',PipeTopicUnbound:"Topic reference is unbound; it must be inside a pipe body.",PipeTopicUnconfiguredToken:({token:a})=>`Invalid topic token ${a}. In order to use ${a} as a topic reference, the pipelineOperator plugin must be configured with { "proposal": "hack", "topicToken": "${a}" }.`,PipeTopicUnused:"Hack-style pipe body does not contain a topic reference; Hack-style pipes must use topic at least once.",PipeUnparenthesizedBody:({type:a})=>`Hack-style pipe body cannot be an unparenthesized ${Se({type:a})}; please wrap it in parentheses.`,PipelineBodyNoArrow:'Unexpected arrow "=>" after pipeline body; arrow function in pipeline body must be parenthesized.',PipelineBodySequenceExpression:"Pipeline body may not be a comma-separated sequence expression.",PipelineHeadSequenceExpression:"Pipeline head should not be a comma-separated sequence expression.",PipelineTopicUnused:"Pipeline is in topic style but does not use topic reference.",PrimaryTopicNotAllowed:"Topic reference was used in a lexical context without topic binding.",PrimaryTopicRequiresSmartPipeline:'Topic reference is used, but the pipelineOperator plugin was not passed a "proposal": "hack" or "smart" option.'},Gs=["message"];function vt(a,t,e){Object.defineProperty(a,t,{enumerable:!1,configurable:!0,value:e});}function Ys({toMessage:a,code:t,reasonCode:e,syntaxPlugin:s}){let i=e==="MissingPlugin"||e==="MissingOneOfPlugins";{let r={AccessorCannotDeclareThisParameter:"AccesorCannotDeclareThisParameter",AccessorCannotHaveTypeParameters:"AccesorCannotHaveTypeParameters",ConstInitializerMustBeStringOrNumericLiteralOrLiteralEnumReference:"ConstInitiailizerMustBeStringOrNumericLiteralOrLiteralEnumReference",SetAccessorCannotHaveOptionalParameter:"SetAccesorCannotHaveOptionalParameter",SetAccessorCannotHaveRestParameter:"SetAccesorCannotHaveRestParameter",SetAccessorCannotHaveReturnType:"SetAccesorCannotHaveReturnType"};r[e]&&(e=r[e]);}return function r(n,o){let h=new SyntaxError;return h.code=t,h.reasonCode=e,h.loc=n,h.pos=n.index,h.syntaxPlugin=s,i&&(h.missingPlugin=o.missingPlugin),vt(h,"clone",function(c={}){var u;let{line:f,column:d,index:x}=(u=c.loc)!=null?u:n;return r(new O(f,d,x),Object.assign({},o,c.details))}),vt(h,"details",o),Object.defineProperty(h,"message",{configurable:!0,get(){let l=`${a(o)} (${n.line}:${n.column})`;return this.message=l,l},set(l){Object.defineProperty(this,"message",{value:l,writable:!0});}}),h}}function U(a,t){if(Array.isArray(a))return s=>U(s,a[0]);let e={};for(let s of Object.keys(a)){let i=a[s],r=typeof i=="string"?{message:()=>i}:typeof i=="function"?{message:i}:i,{message:n}=r,o=qs(r,Gs),h=typeof n=="string"?()=>n:n;e[s]=Ys(Object.assign({code:"BABEL_PARSER_SYNTAX_ERROR",reasonCode:s,toMessage:h},t?{syntaxPlugin:t}:{},o));}return e}var p=Object.assign({},U(Ks),U(Hs),U(Js),U`pipelineOperator`(Xs)),{defineProperty:Qs}=Object,Lt=(a,t)=>{a&&Qs(a,t,{enumerable:!1,value:a[t]});};function ne(a){return Lt(a.loc.start,"index"),Lt(a.loc.end,"index"),a}var Zs=a=>class extends a{parse(){let e=ne(super.parse());return this.options.tokens&&(e.tokens=e.tokens.map(ne)),e}parseRegExpLiteral({pattern:e,flags:s}){let i=null;try{i=new RegExp(e,s);}catch{}let r=this.estreeParseLiteral(i);return r.regex={pattern:e,flags:s},r}parseBigIntLiteral(e){let s;try{s=BigInt(e);}catch{s=null;}let i=this.estreeParseLiteral(s);return i.bigint=String(i.value||e),i}parseDecimalLiteral(e){let i=this.estreeParseLiteral(null);return i.decimal=String(i.value||e),i}estreeParseLiteral(e){return this.parseLiteral(e,"Literal")}parseStringLiteral(e){return this.estreeParseLiteral(e)}parseNumericLiteral(e){return this.estreeParseLiteral(e)}parseNullLiteral(){return this.estreeParseLiteral(null)}parseBooleanLiteral(e){return this.estreeParseLiteral(e)}directiveToStmt(e){let s=e.value;delete e.value,s.type="Literal",s.raw=s.extra.raw,s.value=s.extra.expressionValue;let i=e;return i.type="ExpressionStatement",i.expression=s,i.directive=s.extra.rawValue,delete s.extra,i}initFunction(e,s){super.initFunction(e,s),e.expression=!1;}checkDeclaration(e){e!=null&&this.isObjectProperty(e)?this.checkDeclaration(e.value):super.checkDeclaration(e);}getObjectOrClassMethodParams(e){return e.value.params}isValidDirective(e){var s;return e.type==="ExpressionStatement"&&e.expression.type==="Literal"&&typeof e.expression.value=="string"&&!((s=e.expression.extra)!=null&&s.parenthesized)}parseBlockBody(e,s,i,r,n){super.parseBlockBody(e,s,i,r,n);let o=e.directives.map(h=>this.directiveToStmt(h));e.body=o.concat(e.body),delete e.directives;}pushClassMethod(e,s,i,r,n,o){this.parseMethod(s,i,r,n,o,"ClassMethod",!0),s.typeParameters&&(s.value.typeParameters=s.typeParameters,delete s.typeParameters),e.body.push(s);}parsePrivateName(){let e=super.parsePrivateName();return this.getPluginOption("estree","classFeatures")?this.convertPrivateNameToPrivateIdentifier(e):e}convertPrivateNameToPrivateIdentifier(e){let s=super.getPrivateNameSV(e);return e=e,delete e.id,e.name=s,e.type="PrivateIdentifier",e}isPrivateName(e){return this.getPluginOption("estree","classFeatures")?e.type==="PrivateIdentifier":super.isPrivateName(e)}getPrivateNameSV(e){return this.getPluginOption("estree","classFeatures")?e.name:super.getPrivateNameSV(e)}parseLiteral(e,s){let i=super.parseLiteral(e,s);return i.raw=i.extra.raw,delete i.extra,i}parseFunctionBody(e,s,i=!1){super.parseFunctionBody(e,s,i),e.expression=e.body.type!=="BlockStatement";}parseMethod(e,s,i,r,n,o,h=!1){let l=this.startNode();return l.kind=e.kind,l=super.parseMethod(l,s,i,r,n,o,h),l.type="FunctionExpression",delete l.kind,e.value=l,o==="ClassPrivateMethod"&&(e.computed=!1),this.finishNode(e,"MethodDefinition")}nameIsConstructor(e){return e.type==="Literal"?e.value==="constructor":super.nameIsConstructor(e)}parseClassProperty(...e){let s=super.parseClassProperty(...e);return this.getPluginOption("estree","classFeatures")&&(s.type="PropertyDefinition"),s}parseClassPrivateProperty(...e){let s=super.parseClassPrivateProperty(...e);return this.getPluginOption("estree","classFeatures")&&(s.type="PropertyDefinition",s.computed=!1),s}parseObjectMethod(e,s,i,r,n){let o=super.parseObjectMethod(e,s,i,r,n);return o&&(o.type="Property",o.kind==="method"&&(o.kind="init"),o.shorthand=!1),o}parseObjectProperty(e,s,i,r){let n=super.parseObjectProperty(e,s,i,r);return n&&(n.kind="init",n.type="Property"),n}isValidLVal(e,s,i){return e==="Property"?"value":super.isValidLVal(e,s,i)}isAssignable(e,s){return e!=null&&this.isObjectProperty(e)?this.isAssignable(e.value,s):super.isAssignable(e,s)}toAssignable(e,s=!1){if(e!=null&&this.isObjectProperty(e)){let{key:i,value:r}=e;this.isPrivateName(i)&&this.classScope.usePrivateName(this.getPrivateNameSV(i),i.loc.start),this.toAssignable(r,s);}else super.toAssignable(e,s);}toAssignableObjectExpressionProp(e,s,i){e.type==="Property"&&(e.kind==="get"||e.kind==="set")?this.raise(p.PatternHasAccessor,e.key):e.type==="Property"&&e.method?this.raise(p.PatternHasMethod,e.key):super.toAssignableObjectExpressionProp(e,s,i);}finishCallExpression(e,s){let i=super.finishCallExpression(e,s);if(i.callee.type==="Import"){var r,n;i.type="ImportExpression",i.source=i.arguments[0],i.options=(r=i.arguments[1])!=null?r:null,i.attributes=(n=i.arguments[1])!=null?n:null,delete i.arguments,delete i.callee;}return i}toReferencedArguments(e){e.type!=="ImportExpression"&&super.toReferencedArguments(e);}parseExport(e,s){let i=this.state.lastTokStartLoc,r=super.parseExport(e,s);switch(r.type){case"ExportAllDeclaration":r.exported=null;break;case"ExportNamedDeclaration":r.specifiers.length===1&&r.specifiers[0].type==="ExportNamespaceSpecifier"&&(r.type="ExportAllDeclaration",r.exported=r.specifiers[0].exported,delete r.specifiers);case"ExportDefaultDeclaration":{var n;let{declaration:o}=r;(o==null?void 0:o.type)==="ClassDeclaration"&&((n=o.decorators)==null?void 0:n.length)>0&&o.start===r.start&&this.resetStartLocation(r,i);}break}return r}parseSubscript(e,s,i,r){let n=super.parseSubscript(e,s,i,r);if(r.optionalChainMember){if((n.type==="OptionalMemberExpression"||n.type==="OptionalCallExpression")&&(n.type=n.type.substring(8)),r.stop){let o=this.startNodeAtNode(n);return o.expression=n,this.finishNode(o,"ChainExpression")}}else (n.type==="MemberExpression"||n.type==="CallExpression")&&(n.optional=!1);return n}isOptionalMemberExpression(e){return e.type==="ChainExpression"?e.expression.type==="MemberExpression":super.isOptionalMemberExpression(e)}hasPropertyAsPrivateName(e){return e.type==="ChainExpression"&&(e=e.expression),super.hasPropertyAsPrivateName(e)}isObjectProperty(e){return e.type==="Property"&&e.kind==="init"&&!e.method}isObjectMethod(e){return e.type==="Property"&&(e.method||e.kind==="get"||e.kind==="set")}finishNodeAt(e,s,i){return ne(super.finishNodeAt(e,s,i))}resetStartLocation(e,s){super.resetStartLocation(e,s),ne(e);}resetEndLocation(e,s=this.state.lastTokEndLoc){super.resetEndLocation(e,s),ne(e);}},J=class{constructor(t,e){this.token=void 0,this.preserveSpace=void 0,this.token=t,this.preserveSpace=!!e;}},E={brace:new J("{"),j_oTag:new J("<tag"),j_cTag:new J("</tag"),j_expr:new J("<tag>...</tag>",!0)};E.template=new J("`",!0);var b=!0,m=!0,Ue=!0,oe=!0,z=!0,ei=!0,Ee=class{constructor(t,e={}){this.label=void 0,this.keyword=void 0,this.beforeExpr=void 0,this.startsExpr=void 0,this.rightAssociative=void 0,this.isLoop=void 0,this.isAssign=void 0,this.prefix=void 0,this.postfix=void 0,this.binop=void 0,this.label=t,this.keyword=e.keyword,this.beforeExpr=!!e.beforeExpr,this.startsExpr=!!e.startsExpr,this.rightAssociative=!!e.rightAssociative,this.isLoop=!!e.isLoop,this.isAssign=!!e.isAssign,this.prefix=!!e.prefix,this.postfix=!!e.postfix,this.binop=e.binop!=null?e.binop:null,this.updateContext=null;}},lt=new Map;function A(a,t={}){t.keyword=a;let e=P(a,t);return lt.set(a,e),e}function k(a,t){return P(a,{beforeExpr:b,binop:t})}var pe=-1,B=[],ct=[],pt=[],ut=[],ft=[],dt=[];function P(a,t={}){var e,s,i,r;return ++pe,ct.push(a),pt.push((e=t.binop)!=null?e:-1),ut.push((s=t.beforeExpr)!=null?s:!1),ft.push((i=t.startsExpr)!=null?i:!1),dt.push((r=t.prefix)!=null?r:!1),B.push(new Ee(a,t)),pe}function T(a,t={}){var e,s,i,r;return ++pe,lt.set(a,pe),ct.push(a),pt.push((e=t.binop)!=null?e:-1),ut.push((s=t.beforeExpr)!=null?s:!1),ft.push((i=t.startsExpr)!=null?i:!1),dt.push((r=t.prefix)!=null?r:!1),B.push(new Ee("name",t)),pe}var ti={bracketL:P("[",{beforeExpr:b,startsExpr:m}),bracketHashL:P("#[",{beforeExpr:b,startsExpr:m}),bracketBarL:P("[|",{beforeExpr:b,startsExpr:m}),bracketR:P("]"),bracketBarR:P("|]"),braceL:P("{",{beforeExpr:b,startsExpr:m}),braceBarL:P("{|",{beforeExpr:b,startsExpr:m}),braceHashL:P("#{",{beforeExpr:b,startsExpr:m}),braceR:P("}"),braceBarR:P("|}"),parenL:P("(",{beforeExpr:b,startsExpr:m}),parenR:P(")"),comma:P(",",{beforeExpr:b}),semi:P(";",{beforeExpr:b}),colon:P(":",{beforeExpr:b}),doubleColon:P("::",{beforeExpr:b}),dot:P("."),question:P("?",{beforeExpr:b}),questionDot:P("?."),arrow:P("=>",{beforeExpr:b}),template:P("template"),ellipsis:P("...",{beforeExpr:b}),backQuote:P("`",{startsExpr:m}),dollarBraceL:P("${",{beforeExpr:b,startsExpr:m}),templateTail:P("...`",{startsExpr:m}),templateNonTail:P("...${",{beforeExpr:b,startsExpr:m}),at:P("@"),hash:P("#",{startsExpr:m}),interpreterDirective:P("#!..."),eq:P("=",{beforeExpr:b,isAssign:oe}),assign:P("_=",{beforeExpr:b,isAssign:oe}),slashAssign:P("_=",{beforeExpr:b,isAssign:oe}),xorAssign:P("_=",{beforeExpr:b,isAssign:oe}),moduloAssign:P("_=",{beforeExpr:b,isAssign:oe}),incDec:P("++/--",{prefix:z,postfix:ei,startsExpr:m}),bang:P("!",{beforeExpr:b,prefix:z,startsExpr:m}),tilde:P("~",{beforeExpr:b,prefix:z,startsExpr:m}),doubleCaret:P("^^",{startsExpr:m}),doubleAt:P("@@",{startsExpr:m}),pipeline:k("|>",0),nullishCoalescing:k("??",1),logicalOR:k("||",1),logicalAND:k("&&",2),bitwiseOR:k("|",3),bitwiseXOR:k("^",4),bitwiseAND:k("&",5),equality:k("==/!=/===/!==",6),lt:k("</>/<=/>=",7),gt:k("</>/<=/>=",7),relational:k("</>/<=/>=",7),bitShift:k("<</>>/>>>",8),bitShiftL:k("<</>>/>>>",8),bitShiftR:k("<</>>/>>>",8),plusMin:P("+/-",{beforeExpr:b,binop:9,prefix:z,startsExpr:m}),modulo:P("%",{binop:10,startsExpr:m}),star:P("*",{binop:10}),slash:k("/",10),exponent:P("**",{beforeExpr:b,binop:11,rightAssociative:!0}),_in:A("in",{beforeExpr:b,binop:7}),_instanceof:A("instanceof",{beforeExpr:b,binop:7}),_break:A("break"),_case:A("case",{beforeExpr:b}),_catch:A("catch"),_continue:A("continue"),_debugger:A("debugger"),_default:A("default",{beforeExpr:b}),_else:A("else",{beforeExpr:b}),_finally:A("finally"),_function:A("function",{startsExpr:m}),_if:A("if"),_return:A("return",{beforeExpr:b}),_switch:A("switch"),_throw:A("throw",{beforeExpr:b,prefix:z,startsExpr:m}),_try:A("try"),_var:A("var"),_const:A("const"),_with:A("with"),_new:A("new",{beforeExpr:b,startsExpr:m}),_this:A("this",{startsExpr:m}),_super:A("super",{startsExpr:m}),_class:A("class",{startsExpr:m}),_extends:A("extends",{beforeExpr:b}),_export:A("export"),_import:A("import",{startsExpr:m}),_null:A("null",{startsExpr:m}),_true:A("true",{startsExpr:m}),_false:A("false",{startsExpr:m}),_typeof:A("typeof",{beforeExpr:b,prefix:z,startsExpr:m}),_void:A("void",{beforeExpr:b,prefix:z,startsExpr:m}),_delete:A("delete",{beforeExpr:b,prefix:z,startsExpr:m}),_do:A("do",{isLoop:Ue,beforeExpr:b}),_for:A("for",{isLoop:Ue}),_while:A("while",{isLoop:Ue}),_as:T("as",{startsExpr:m}),_assert:T("assert",{startsExpr:m}),_async:T("async",{startsExpr:m}),_await:T("await",{startsExpr:m}),_defer:T("defer",{startsExpr:m}),_from:T("from",{startsExpr:m}),_get:T("get",{startsExpr:m}),_let:T("let",{startsExpr:m}),_meta:T("meta",{startsExpr:m}),_of:T("of",{startsExpr:m}),_sent:T("sent",{startsExpr:m}),_set:T("set",{startsExpr:m}),_source:T("source",{startsExpr:m}),_static:T("static",{startsExpr:m}),_using:T("using",{startsExpr:m}),_yield:T("yield",{startsExpr:m}),_asserts:T("asserts",{startsExpr:m}),_checks:T("checks",{startsExpr:m}),_exports:T("exports",{startsExpr:m}),_global:T("global",{startsExpr:m}),_implements:T("implements",{startsExpr:m}),_intrinsic:T("intrinsic",{startsExpr:m}),_infer:T("infer",{startsExpr:m}),_is:T("is",{startsExpr:m}),_mixins:T("mixins",{startsExpr:m}),_proto:T("proto",{startsExpr:m}),_require:T("require",{startsExpr:m}),_satisfies:T("satisfies",{startsExpr:m}),_keyof:T("keyof",{startsExpr:m}),_readonly:T("readonly",{startsExpr:m}),_unique:T("unique",{startsExpr:m}),_abstract:T("abstract",{startsExpr:m}),_declare:T("declare",{startsExpr:m}),_enum:T("enum",{startsExpr:m}),_module:T("module",{startsExpr:m}),_namespace:T("namespace",{startsExpr:m}),_interface:T("interface",{startsExpr:m}),_type:T("type",{startsExpr:m}),_opaque:T("opaque",{startsExpr:m}),name:P("name",{startsExpr:m}),placeholder:P("%%",{startsExpr:!0}),string:P("string",{startsExpr:m}),num:P("num",{startsExpr:m}),bigint:P("bigint",{startsExpr:m}),decimal:P("decimal",{startsExpr:m}),regexp:P("regexp",{startsExpr:m}),privateName:P("#name",{startsExpr:m}),eof:P("eof"),jsxName:P("jsxName"),jsxText:P("jsxText",{beforeExpr:!0}),jsxTagStart:P("jsxTagStart",{startsExpr:!0}),jsxTagEnd:P("jsxTagEnd")};function C(a){return a>=93&&a<=133}function si(a){return a<=92}function D(a){return a>=58&&a<=133}function Vt(a){return a>=58&&a<=137}function ii(a){return ut[a]}function Ve(a){return ft[a]}function ri(a){return a>=29&&a<=33}function Dt(a){return a>=129&&a<=131}function ai(a){return a>=90&&a<=92}function mt(a){return a>=58&&a<=92}function ni(a){return a>=39&&a<=59}function oi(a){return a===34}function hi(a){return dt[a]}function li(a){return a>=121&&a<=123}function ci(a){return a>=124&&a<=130}function q(a){return ct[a]}function we(a){return pt[a]}function pi(a){return a===57}function Ie(a){return a>=24&&a<=25}function F(a){return B[a]}B[8].updateContext=a=>{a.pop();},B[5].updateContext=B[7].updateContext=B[23].updateContext=a=>{a.push(E.brace);},B[22].updateContext=a=>{a[a.length-1]===E.template?a.pop():a.push(E.template);},B[143].updateContext=a=>{a.push(E.j_expr,E.j_oTag);};var yt="\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0560-\u0588\u05D0-\u05EA\u05EF-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u0860-\u086A\u0870-\u0887\u0889-\u088E\u08A0-\u08C9\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u09FC\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0AF9\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C5D\u0C60\u0C61\u0C80\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D04-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D54-\u0D56\u0D5F-\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E86-\u0E8A\u0E8C-\u0EA3\u0EA5\u0EA7-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u1711\u171F-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1878\u1880-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4C\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1C80-\u1C8A\u1C90-\u1CBA\u1CBD-\u1CBF\u1CE9-\u1CEC\u1CEE-\u1CF3\u1CF5\u1CF6\u1CFA\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2118-\u211D\u2124\u2126\u2128\u212A-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303C\u3041-\u3096\u309B-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312F\u3131-\u318E\u31A0-\u31BF\u31F0-\u31FF\u3400-\u4DBF\u4E00-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6EF\uA717-\uA71F\uA722-\uA788\uA78B-\uA7CD\uA7D0\uA7D1\uA7D3\uA7D5-\uA7DC\uA7F2-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA8FD\uA8FE\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB69\uAB70-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC",qt="\xB7\u0300-\u036F\u0387\u0483-\u0487\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u0610-\u061A\u064B-\u0669\u0670\u06D6-\u06DC\u06DF-\u06E4\u06E7\u06E8\u06EA-\u06ED\u06F0-\u06F9\u0711\u0730-\u074A\u07A6-\u07B0\u07C0-\u07C9\u07EB-\u07F3\u07FD\u0816-\u0819\u081B-\u0823\u0825-\u0827\u0829-\u082D\u0859-\u085B\u0897-\u089F\u08CA-\u08E1\u08E3-\u0903\u093A-\u093C\u093E-\u094F\u0951-\u0957\u0962\u0963\u0966-\u096F\u0981-\u0983\u09BC\u09BE-\u09C4\u09C7\u09C8\u09CB-\u09CD\u09D7\u09E2\u09E3\u09E6-\u09EF\u09FE\u0A01-\u0A03\u0A3C\u0A3E-\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A66-\u0A71\u0A75\u0A81-\u0A83\u0ABC\u0ABE-\u0AC5\u0AC7-\u0AC9\u0ACB-\u0ACD\u0AE2\u0AE3\u0AE6-\u0AEF\u0AFA-\u0AFF\u0B01-\u0B03\u0B3C\u0B3E-\u0B44\u0B47\u0B48\u0B4B-\u0B4D\u0B55-\u0B57\u0B62\u0B63\u0B66-\u0B6F\u0B82\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCD\u0BD7\u0BE6-\u0BEF\u0C00-\u0C04\u0C3C\u0C3E-\u0C44\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C62\u0C63\u0C66-\u0C6F\u0C81-\u0C83\u0CBC\u0CBE-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCD\u0CD5\u0CD6\u0CE2\u0CE3\u0CE6-\u0CEF\u0CF3\u0D00-\u0D03\u0D3B\u0D3C\u0D3E-\u0D44\u0D46-\u0D48\u0D4A-\u0D4D\u0D57\u0D62\u0D63\u0D66-\u0D6F\u0D81-\u0D83\u0DCA\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DE6-\u0DEF\u0DF2\u0DF3\u0E31\u0E34-\u0E3A\u0E47-\u0E4E\u0E50-\u0E59\u0EB1\u0EB4-\u0EBC\u0EC8-\u0ECE\u0ED0-\u0ED9\u0F18\u0F19\u0F20-\u0F29\u0F35\u0F37\u0F39\u0F3E\u0F3F\u0F71-\u0F84\u0F86\u0F87\u0F8D-\u0F97\u0F99-\u0FBC\u0FC6\u102B-\u103E\u1040-\u1049\u1056-\u1059\u105E-\u1060\u1062-\u1064\u1067-\u106D\u1071-\u1074\u1082-\u108D\u108F-\u109D\u135D-\u135F\u1369-\u1371\u1712-\u1715\u1732-\u1734\u1752\u1753\u1772\u1773\u17B4-\u17D3\u17DD\u17E0-\u17E9\u180B-\u180D\u180F-\u1819\u18A9\u1920-\u192B\u1930-\u193B\u1946-\u194F\u19D0-\u19DA\u1A17-\u1A1B\u1A55-\u1A5E\u1A60-\u1A7C\u1A7F-\u1A89\u1A90-\u1A99\u1AB0-\u1ABD\u1ABF-\u1ACE\u1B00-\u1B04\u1B34-\u1B44\u1B50-\u1B59\u1B6B-\u1B73\u1B80-\u1B82\u1BA1-\u1BAD\u1BB0-\u1BB9\u1BE6-\u1BF3\u1C24-\u1C37\u1C40-\u1C49\u1C50-\u1C59\u1CD0-\u1CD2\u1CD4-\u1CE8\u1CED\u1CF4\u1CF7-\u1CF9\u1DC0-\u1DFF\u200C\u200D\u203F\u2040\u2054\u20D0-\u20DC\u20E1\u20E5-\u20F0\u2CEF-\u2CF1\u2D7F\u2DE0-\u2DFF\u302A-\u302F\u3099\u309A\u30FB\uA620-\uA629\uA66F\uA674-\uA67D\uA69E\uA69F\uA6F0\uA6F1\uA802\uA806\uA80B\uA823-\uA827\uA82C\uA880\uA881\uA8B4-\uA8C5\uA8D0-\uA8D9\uA8E0-\uA8F1\uA8FF-\uA909\uA926-\uA92D\uA947-\uA953\uA980-\uA983\uA9B3-\uA9C0\uA9D0-\uA9D9\uA9E5\uA9F0-\uA9F9\uAA29-\uAA36\uAA43\uAA4C\uAA4D\uAA50-\uAA59\uAA7B-\uAA7D\uAAB0\uAAB2-\uAAB4\uAAB7\uAAB8\uAABE\uAABF\uAAC1\uAAEB-\uAAEF\uAAF5\uAAF6\uABE3-\uABEA\uABEC\uABED\uABF0-\uABF9\uFB1E\uFE00-\uFE0F\uFE20-\uFE2F\uFE33\uFE34\uFE4D-\uFE4F\uFF10-\uFF19\uFF3F\uFF65",ui=new RegExp("["+yt+"]"),fi=new RegExp("["+yt+qt+"]");yt=qt=null;var Kt=[0,11,2,25,2,18,2,1,2,14,3,13,35,122,70,52,268,28,4,48,48,31,14,29,6,37,11,29,3,35,5,7,2,4,43,157,19,35,5,35,5,39,9,51,13,10,2,14,2,6,2,1,2,10,2,14,2,6,2,1,4,51,13,310,10,21,11,7,25,5,2,41,2,8,70,5,3,0,2,43,2,1,4,0,3,22,11,22,10,30,66,18,2,1,11,21,11,25,71,55,7,1,65,0,16,3,2,2,2,28,43,28,4,28,36,7,2,27,28,53,11,21,11,18,14,17,111,72,56,50,14,50,14,35,39,27,10,22,251,41,7,1,17,2,60,28,11,0,9,21,43,17,47,20,28,22,13,52,58,1,3,0,14,44,33,24,27,35,30,0,3,0,9,34,4,0,13,47,15,3,22,0,2,0,36,17,2,24,20,1,64,6,2,0,2,3,2,14,2,9,8,46,39,7,3,1,3,21,2,6,2,1,2,4,4,0,19,0,13,4,31,9,2,0,3,0,2,37,2,0,26,0,2,0,45,52,19,3,21,2,31,47,21,1,2,0,185,46,42,3,37,47,21,0,60,42,14,0,72,26,38,6,186,43,117,63,32,7,3,0,3,7,2,1,2,23,16,0,2,0,95,7,3,38,17,0,2,0,29,0,11,39,8,0,22,0,12,45,20,0,19,72,200,32,32,8,2,36,18,0,50,29,113,6,2,1,2,37,22,0,26,5,2,1,2,31,15,0,328,18,16,0,2,12,2,33,125,0,80,921,103,110,18,195,2637,96,16,1071,18,5,26,3994,6,582,6842,29,1763,568,8,30,18,78,18,29,19,47,17,3,32,20,6,18,433,44,212,63,129,74,6,0,67,12,65,1,2,0,29,6135,9,1237,42,9,8936,3,2,6,2,1,2,290,16,0,30,2,3,0,15,3,9,395,2309,106,6,12,4,8,8,9,5991,84,2,70,2,1,3,0,3,1,3,3,2,11,2,0,2,6,2,64,2,3,3,7,2,6,2,27,2,3,2,4,2,0,4,6,2,339,3,24,2,24,2,30,2,24,2,30,2,24,2,30,2,24,2,30,2,24,2,7,1845,30,7,5,262,61,147,44,11,6,17,0,322,29,19,43,485,27,229,29,3,0,496,6,2,3,2,1,2,14,2,196,60,67,8,0,1205,3,2,26,2,1,2,0,3,0,2,9,2,3,2,0,2,0,7,0,5,0,2,0,2,0,2,2,2,1,2,0,3,0,2,0,2,0,2,0,2,0,2,1,2,0,3,3,2,6,2,3,2,3,2,0,2,9,2,16,6,2,2,4,2,16,4421,42719,33,4153,7,221,3,5761,15,7472,16,621,2467,541,1507,4938,6,4191],di=[509,0,227,0,150,4,294,9,1368,2,2,1,6,3,41,2,5,0,166,1,574,3,9,9,7,9,32,4,318,1,80,3,71,10,50,3,123,2,54,14,32,10,3,1,11,3,46,10,8,0,46,9,7,2,37,13,2,9,6,1,45,0,13,2,49,13,9,3,2,11,83,11,7,0,3,0,158,11,6,9,7,3,56,1,2,6,3,1,3,2,10,0,11,1,3,6,4,4,68,8,2,0,3,0,2,3,2,4,2,0,15,1,83,17,10,9,5,0,82,19,13,9,214,6,3,8,28,1,83,16,16,9,82,12,9,9,7,19,58,14,5,9,243,14,166,9,71,5,2,1,3,3,2,0,2,1,13,9,120,6,3,6,4,0,29,9,41,6,2,3,9,0,10,10,47,15,343,9,54,7,2,7,17,9,57,21,2,13,123,5,4,0,2,1,2,6,2,0,9,9,49,4,2,1,2,4,9,9,330,3,10,1,2,0,49,6,4,4,14,10,5350,0,7,14,11465,27,2343,9,87,9,39,4,60,6,26,9,535,9,470,0,2,54,8,3,82,0,12,1,19628,1,4178,9,519,45,3,22,543,4,4,5,9,7,3,6,31,3,149,2,1418,49,513,54,5,49,9,0,15,0,23,4,2,14,1361,6,2,16,3,6,2,1,2,4,101,0,161,6,10,9,357,0,62,13,499,13,245,1,2,9,726,6,110,6,6,9,4759,9,787719,239];function qe(a,t){let e=65536;for(let s=0,i=t.length;s<i;s+=2){if(e+=t[s],e>a)return !1;if(e+=t[s+1],e>=a)return !0}return !1}function R(a){return a<65?a===36:a<=90?!0:a<97?a===95:a<=122?!0:a<=65535?a>=170&&ui.test(String.fromCharCode(a)):qe(a,Kt)}function G(a){return a<48?a===36:a<58?!0:a<65?!1:a<=90?!0:a<97?a===95:a<=122?!0:a<=65535?a>=170&&fi.test(String.fromCharCode(a)):qe(a,Kt)||qe(a,di)}var xt={keyword:["break","case","catch","continue","debugger","default","do","else","finally","for","function","if","return","switch","throw","try","var","const","while","with","new","this","super","class","extends","export","import","null","true","false","in","instanceof","typeof","void","delete"],strict:["implements","interface","let","package","private","protected","public","static","yield"],strictBind:["eval","arguments"]},mi=new Set(xt.keyword),yi=new Set(xt.strict),xi=new Set(xt.strictBind);function Ht(a,t){return t&&a==="await"||a==="enum"}function Jt(a,t){return Ht(a,t)||yi.has(a)}function Wt(a){return xi.has(a)}function Xt(a,t){return Jt(a,t)||Wt(a)}function Pi(a){return mi.has(a)}function gi(a,t,e){return a===64&&t===64&&R(e)}var Ti=new Set(["break","case","catch","continue","debugger","default","do","else","finally","for","function","if","return","switch","throw","try","var","const","while","with","new","this","super","class","extends","export","import","null","true","false","in","instanceof","typeof","void","delete","implements","interface","let","package","private","protected","public","static","yield","eval","arguments","enum","await"]);function bi(a){return Ti.has(a)}var ue=class{constructor(t){this.flags=0,this.names=new Map,this.firstLexicalName="",this.flags=t;}},fe=class{constructor(t,e){this.parser=void 0,this.scopeStack=[],this.inModule=void 0,this.undefinedExports=new Map,this.parser=t,this.inModule=e;}get inTopLevel(){return (this.currentScope().flags&1)>0}get inFunction(){return (this.currentVarScopeFlags()&2)>0}get allowSuper(){return (this.currentThisScopeFlags()&16)>0}get allowDirectSuper(){return (this.currentThisScopeFlags()&32)>0}get inClass(){return (this.currentThisScopeFlags()&64)>0}get inClassAndNotInNonArrowFunction(){let t=this.currentThisScopeFlags();return (t&64)>0&&(t&2)===0}get inStaticBlock(){for(let t=this.scopeStack.length-1;;t--){let{flags:e}=this.scopeStack[t];if(e&128)return !0;if(e&451)return !1}}get inNonArrowFunction(){return (this.currentThisScopeFlags()&2)>0}get treatFunctionsAsVar(){return this.treatFunctionsAsVarInScope(this.currentScope())}createScope(t){return new ue(t)}enter(t){this.scopeStack.push(this.createScope(t));}exit(){return this.scopeStack.pop().flags}treatFunctionsAsVarInScope(t){return !!(t.flags&130||!this.parser.inModule&&t.flags&1)}declareName(t,e,s){let i=this.currentScope();if(e&8||e&16){this.checkRedeclarationInScope(i,t,e,s);let r=i.names.get(t)||0;e&16?r=r|4:(i.firstLexicalName||(i.firstLexicalName=t),r=r|2),i.names.set(t,r),e&8&&this.maybeExportDefined(i,t);}else if(e&4)for(let r=this.scopeStack.length-1;r>=0&&(i=this.scopeStack[r],this.checkRedeclarationInScope(i,t,e,s),i.names.set(t,(i.names.get(t)||0)|1),this.maybeExportDefined(i,t),!(i.flags&387));--r);this.parser.inModule&&i.flags&1&&this.undefinedExports.delete(t);}maybeExportDefined(t,e){this.parser.inModule&&t.flags&1&&this.undefinedExports.delete(e);}checkRedeclarationInScope(t,e,s,i){this.isRedeclaredInScope(t,e,s)&&this.parser.raise(p.VarRedeclaration,i,{identifierName:e});}isRedeclaredInScope(t,e,s){if(!(s&1))return !1;if(s&8)return t.names.has(e);let i=t.names.get(e);return s&16?(i&2)>0||!this.treatFunctionsAsVarInScope(t)&&(i&1)>0:(i&2)>0&&!(t.flags&8&&t.firstLexicalName===e)||!this.treatFunctionsAsVarInScope(t)&&(i&4)>0}checkLocalExport(t){let{name:e}=t;this.scopeStack[0].names.has(e)||this.undefinedExports.set(e,t.loc.start);}currentScope(){return this.scopeStack[this.scopeStack.length-1]}currentVarScopeFlags(){for(let t=this.scopeStack.length-1;;t--){let{flags:e}=this.scopeStack[t];if(e&387)return e}}currentThisScopeFlags(){for(let t=this.scopeStack.length-1;;t--){let{flags:e}=this.scopeStack[t];if(e&451&&!(e&4))return e}}},Ke=class extends ue{constructor(...t){super(...t),this.declareFunctions=new Set;}},He=class extends fe{createScope(t){return new Ke(t)}declareName(t,e,s){let i=this.currentScope();if(e&2048){this.checkRedeclarationInScope(i,t,e,s),this.maybeExportDefined(i,t),i.declareFunctions.add(t);return}super.declareName(t,e,s);}isRedeclaredInScope(t,e,s){if(super.isRedeclaredInScope(t,e,s))return !0;if(s&2048&&!t.declareFunctions.has(e)){let i=t.names.get(e);return (i&4)>0||(i&2)>0}return !1}checkLocalExport(t){this.scopeStack[0].declareFunctions.has(t.name)||super.checkLocalExport(t);}},Je=class{constructor(){this.sawUnambiguousESM=!1,this.ambiguousScriptDifferentAst=!1;}sourceToOffsetPos(t){return t+this.startIndex}offsetToSourcePos(t){return t-this.startIndex}hasPlugin(t){if(typeof t=="string")return this.plugins.has(t);{let[e,s]=t;if(!this.hasPlugin(e))return !1;let i=this.plugins.get(e);for(let r of Object.keys(s))if((i==null?void 0:i[r])!==s[r])return !1;return !0}}getPluginOption(t,e){var s;return (s=this.plugins.get(t))==null?void 0:s[e]}};function Gt(a,t){a.trailingComments===void 0?a.trailingComments=t:a.trailingComments.unshift(...t);}function Ai(a,t){a.leadingComments===void 0?a.leadingComments=t:a.leadingComments.unshift(...t);}function de(a,t){a.innerComments===void 0?a.innerComments=t:a.innerComments.unshift(...t);}function he(a,t,e){let s=null,i=t.length;for(;s===null&&i>0;)s=t[--i];s===null||s.start>e.start?de(a,e.comments):Gt(s,e.comments);}var We=class extends Je{addComment(t){this.filename&&(t.loc.filename=this.filename);let{commentsLen:e}=this.state;this.comments.length!==e&&(this.comments.length=e),this.comments.push(t),this.state.commentsLen++;}processComment(t){let{commentStack:e}=this.state,s=e.length;if(s===0)return;let i=s-1,r=e[i];r.start===t.end&&(r.leadingNode=t,i--);let{start:n}=t;for(;i>=0;i--){let o=e[i],h=o.end;if(h>n)o.containingNode=t,this.finalizeComment(o),e.splice(i,1);else {h===n&&(o.trailingNode=t);break}}}finalizeComment(t){let{comments:e}=t;if(t.leadingNode!==null||t.trailingNode!==null)t.leadingNode!==null&&Gt(t.leadingNode,e),t.trailingNode!==null&&Ai(t.trailingNode,e);else {let{containingNode:s,start:i}=t;if(this.input.charCodeAt(this.offsetToSourcePos(i)-1)===44)switch(s.type){case"ObjectExpression":case"ObjectPattern":case"RecordExpression":he(s,s.properties,t);break;case"CallExpression":case"OptionalCallExpression":he(s,s.arguments,t);break;case"FunctionDeclaration":case"FunctionExpression":case"ArrowFunctionExpression":case"ObjectMethod":case"ClassMethod":case"ClassPrivateMethod":he(s,s.params,t);break;case"ArrayExpression":case"ArrayPattern":case"TupleExpression":he(s,s.elements,t);break;case"ExportNamedDeclaration":case"ImportDeclaration":he(s,s.specifiers,t);break;default:de(s,e);}else de(s,e);}}finalizeRemainingComments(){let{commentStack:t}=this.state;for(let e=t.length-1;e>=0;e--)this.finalizeComment(t[e]);this.state.commentStack=[];}resetPreviousNodeTrailingComments(t){let{commentStack:e}=this.state,{length:s}=e;if(s===0)return;let i=e[s-1];i.leadingNode===t&&(i.leadingNode=null);}resetPreviousIdentifierLeadingComments(t){let{commentStack:e}=this.state,{length:s}=e;s!==0&&(e[s-1].trailingNode===t?e[s-1].trailingNode=null:s>=2&&e[s-2].trailingNode===t&&(e[s-2].trailingNode=null));}takeSurroundingComments(t,e,s){let{commentStack:i}=this.state,r=i.length;if(r===0)return;let n=r-1;for(;n>=0;n--){let o=i[n],h=o.end;if(o.start===s)o.leadingNode=t;else if(h===e)o.trailingNode=t;else if(h<e)break}}},Si=/\r\n|[\r\n\u2028\u2029]/,be=new RegExp(Si.source,"g");function Y(a){switch(a){case 10:case 13:case 8232:case 8233:return !0;default:return !1}}function Mt(a,t,e){for(let s=t;s<e;s++)if(Y(a.charCodeAt(s)))return !0;return !1}var _e=/(?:\s|\/\/.*|\/\*[^]*?\*\/)*/g,je=/(?:[^\S\n\r\u2028\u2029]|\/\/.*|\/\*.*?\*\/)*/g;function wi(a){switch(a){case 9:case 11:case 12:case 32:case 160:case 5760:case 8192:case 8193:case 8194:case 8195:case 8196:case 8197:case 8198:case 8199:case 8200:case 8201:case 8202:case 8239:case 8287:case 12288:case 65279:return !0;default:return !1}}var Xe=class a{constructor(){this.flags=1024,this.startIndex=void 0,this.curLine=void 0,this.lineStart=void 0,this.startLoc=void 0,this.endLoc=void 0,this.errors=[],this.potentialArrowAt=-1,this.noArrowAt=[],this.noArrowParamsConversionAt=[],this.topicContext={maxNumOfResolvableTopics:0,maxTopicIndex:null},this.labels=[],this.commentsLen=0,this.commentStack=[],this.pos=0,this.type=140,this.value=null,this.start=0,this.end=0,this.lastTokEndLoc=null,this.lastTokStartLoc=null,this.context=[E.brace],this.firstInvalidTemplateEscapePos=null,this.strictErrors=new Map,this.tokensLength=0;}get strict(){return (this.flags&1)>0}set strict(t){t?this.flags|=1:this.flags&=-2;}init({strictMode:t,sourceType:e,startIndex:s,startLine:i,startColumn:r}){this.strict=t===!1?!1:t===!0?!0:e==="module",this.startIndex=s,this.curLine=i,this.lineStart=-r,this.startLoc=this.endLoc=new O(i,r,s);}get maybeInArrowParameters(){return (this.flags&2)>0}set maybeInArrowParameters(t){t?this.flags|=2:this.flags&=-3;}get inType(){return (this.flags&4)>0}set inType(t){t?this.flags|=4:this.flags&=-5;}get noAnonFunctionType(){return (this.flags&8)>0}set noAnonFunctionType(t){t?this.flags|=8:this.flags&=-9;}get hasFlowComment(){return (this.flags&16)>0}set hasFlowComment(t){t?this.flags|=16:this.flags&=-17;}get isAmbientContext(){return (this.flags&32)>0}set isAmbientContext(t){t?this.flags|=32:this.flags&=-33;}get inAbstractClass(){return (this.flags&64)>0}set inAbstractClass(t){t?this.flags|=64:this.flags&=-65;}get inDisallowConditionalTypesContext(){return (this.flags&128)>0}set inDisallowConditionalTypesContext(t){t?this.flags|=128:this.flags&=-129;}get soloAwait(){return (this.flags&256)>0}set soloAwait(t){t?this.flags|=256:this.flags&=-257;}get inFSharpPipelineDirectBody(){return (this.flags&512)>0}set inFSharpPipelineDirectBody(t){t?this.flags|=512:this.flags&=-513;}get canStartJSXElement(){return (this.flags&1024)>0}set canStartJSXElement(t){t?this.flags|=1024:this.flags&=-1025;}get containsEsc(){return (this.flags&2048)>0}set containsEsc(t){t?this.flags|=2048:this.flags&=-2049;}get hasTopLevelAwait(){return (this.flags&4096)>0}set hasTopLevelAwait(t){t?this.flags|=4096:this.flags&=-4097;}curPosition(){return new O(this.curLine,this.pos-this.lineStart,this.pos+this.startIndex)}clone(){let t=new a;return t.flags=this.flags,t.startIndex=this.startIndex,t.curLine=this.curLine,t.lineStart=this.lineStart,t.startLoc=this.startLoc,t.endLoc=this.endLoc,t.errors=this.errors.slice(),t.potentialArrowAt=this.potentialArrowAt,t.noArrowAt=this.noArrowAt.slice(),t.noArrowParamsConversionAt=this.noArrowParamsConversionAt.slice(),t.topicContext=this.topicContext,t.labels=this.labels.slice(),t.commentsLen=this.commentsLen,t.commentStack=this.commentStack.slice(),t.pos=this.pos,t.type=this.type,t.value=this.value,t.start=this.start,t.end=this.end,t.lastTokEndLoc=this.lastTokEndLoc,t.lastTokStartLoc=this.lastTokStartLoc,t.context=this.context.slice(),t.firstInvalidTemplateEscapePos=this.firstInvalidTemplateEscapePos,t.strictErrors=this.strictErrors,t.tokensLength=this.tokensLength,t}},Ci=function(t){return t>=48&&t<=57},Ot={decBinOct:new Set([46,66,69,79,95,98,101,111]),hex:new Set([46,88,95,120])},Ae={bin:a=>a===48||a===49,oct:a=>a>=48&&a<=55,dec:a=>a>=48&&a<=57,hex:a=>a>=48&&a<=57||a>=65&&a<=70||a>=97&&a<=102};function Ft(a,t,e,s,i,r){let n=e,o=s,h=i,l="",c=null,u=e,{length:f}=t;for(;;){if(e>=f){r.unterminated(n,o,h),l+=t.slice(u,e);break}let d=t.charCodeAt(e);if(Ei(a,d,t,e)){l+=t.slice(u,e);break}if(d===92){l+=t.slice(u,e);let x=Ii(t,e,s,i,a==="template",r);x.ch===null&&!c?c={pos:e,lineStart:s,curLine:i}:l+=x.ch,{pos:e,lineStart:s,curLine:i}=x,u=e;}else d===8232||d===8233?(++e,++i,s=e):d===10||d===13?a==="template"?(l+=t.slice(u,e)+`
`,++e,d===13&&t.charCodeAt(e)===10&&++e,++i,u=s=e):r.unterminated(n,o,h):++e;}return {pos:e,str:l,firstInvalidLoc:c,lineStart:s,curLine:i,containsInvalid:!!c}}function Ei(a,t,e,s){return a==="template"?t===96||t===36&&e.charCodeAt(s+1)===123:t===(a==="double"?34:39)}function Ii(a,t,e,s,i,r){let n=!i;t++;let o=l=>({pos:t,ch:l,lineStart:e,curLine:s}),h=a.charCodeAt(t++);switch(h){case 110:return o(`
`);case 114:return o("\r");case 120:{let l;return {code:l,pos:t}=Ge(a,t,e,s,2,!1,n,r),o(l===null?null:String.fromCharCode(l))}case 117:{let l;return {code:l,pos:t}=Qt(a,t,e,s,n,r),o(l===null?null:String.fromCodePoint(l))}case 116:return o("	");case 98:return o("\b");case 118:return o("\v");case 102:return o("\f");case 13:a.charCodeAt(t)===10&&++t;case 10:e=t,++s;case 8232:case 8233:return o("");case 56:case 57:if(i)return o(null);r.strictNumericEscape(t-1,e,s);default:if(h>=48&&h<=55){let l=t-1,u=/^[0-7]+/.exec(a.slice(l,t+2))[0],f=parseInt(u,8);f>255&&(u=u.slice(0,-1),f=parseInt(u,8)),t+=u.length-1;let d=a.charCodeAt(t);if(u!=="0"||d===56||d===57){if(i)return o(null);r.strictNumericEscape(l,e,s);}return o(String.fromCharCode(f))}return o(String.fromCharCode(h))}}function Ge(a,t,e,s,i,r,n,o){let h=t,l;return {n:l,pos:t}=Yt(a,t,e,s,16,i,r,!1,o,!n),l===null&&(n?o.invalidEscapeSequence(h,e,s):t=h-1),{code:l,pos:t}}function Yt(a,t,e,s,i,r,n,o,h,l){let c=t,u=i===16?Ot.hex:Ot.decBinOct,f=i===16?Ae.hex:i===10?Ae.dec:i===8?Ae.oct:Ae.bin,d=!1,x=0;for(let S=0,N=r??1/0;S<N;++S){let w=a.charCodeAt(t),I;if(w===95&&o!=="bail"){let Te=a.charCodeAt(t-1),ae=a.charCodeAt(t+1);if(o){if(Number.isNaN(ae)||!f(ae)||u.has(Te)||u.has(ae)){if(l)return {n:null,pos:t};h.unexpectedNumericSeparator(t,e,s);}}else {if(l)return {n:null,pos:t};h.numericSeparatorInEscapeSequence(t,e,s);}++t;continue}if(w>=97?I=w-97+10:w>=65?I=w-65+10:Ci(w)?I=w-48:I=1/0,I>=i){if(I<=9&&l)return {n:null,pos:t};if(I<=9&&h.invalidDigit(t,e,s,i))I=0;else if(n)I=0,d=!0;else break}++t,x=x*i+I;}return t===c||r!=null&&t-c!==r||d?{n:null,pos:t}:{n:x,pos:t}}function Qt(a,t,e,s,i,r){let n=a.charCodeAt(t),o;if(n===123){if(++t,{code:o,pos:t}=Ge(a,t,e,s,a.indexOf("}",t)-t,!0,i,r),++t,o!==null&&o>1114111)if(i)r.invalidCodePoint(t,e,s);else return {code:null,pos:t}}else ({code:o,pos:t}=Ge(a,t,e,s,4,!1,i,r));return {code:o,pos:t}}function le(a,t,e){return new O(e,a-t,a)}var Ni=new Set([103,109,115,105,121,117,100,118]),M=class{constructor(t){let e=t.startIndex||0;this.type=t.type,this.value=t.value,this.start=e+t.start,this.end=e+t.end,this.loc=new Z(t.startLoc,t.endLoc);}},Ye=class extends We{constructor(t,e){super(),this.isLookahead=void 0,this.tokens=[],this.errorHandlers_readInt={invalidDigit:(s,i,r,n)=>this.options.errorRecovery?(this.raise(p.InvalidDigit,le(s,i,r),{radix:n}),!0):!1,numericSeparatorInEscapeSequence:this.errorBuilder(p.NumericSeparatorInEscapeSequence),unexpectedNumericSeparator:this.errorBuilder(p.UnexpectedNumericSeparator)},this.errorHandlers_readCodePoint=Object.assign({},this.errorHandlers_readInt,{invalidEscapeSequence:this.errorBuilder(p.InvalidEscapeSequence),invalidCodePoint:this.errorBuilder(p.InvalidCodePoint)}),this.errorHandlers_readStringContents_string=Object.assign({},this.errorHandlers_readCodePoint,{strictNumericEscape:(s,i,r)=>{this.recordStrictModeErrors(p.StrictNumericEscape,le(s,i,r));},unterminated:(s,i,r)=>{throw this.raise(p.UnterminatedString,le(s-1,i,r))}}),this.errorHandlers_readStringContents_template=Object.assign({},this.errorHandlers_readCodePoint,{strictNumericEscape:this.errorBuilder(p.StrictNumericEscape),unterminated:(s,i,r)=>{throw this.raise(p.UnterminatedTemplate,le(s,i,r))}}),this.state=new Xe,this.state.init(t),this.input=e,this.length=e.length,this.comments=[],this.isLookahead=!1;}pushToken(t){this.tokens.length=this.state.tokensLength,this.tokens.push(t),++this.state.tokensLength;}next(){this.checkKeywordEscapes(),this.options.tokens&&this.pushToken(new M(this.state)),this.state.lastTokEndLoc=this.state.endLoc,this.state.lastTokStartLoc=this.state.startLoc,this.nextToken();}eat(t){return this.match(t)?(this.next(),!0):!1}match(t){return this.state.type===t}createLookaheadState(t){return {pos:t.pos,value:null,type:t.type,start:t.start,end:t.end,context:[this.curContext()],inType:t.inType,startLoc:t.startLoc,lastTokEndLoc:t.lastTokEndLoc,curLine:t.curLine,lineStart:t.lineStart,curPosition:t.curPosition}}lookahead(){let t=this.state;this.state=this.createLookaheadState(t),this.isLookahead=!0,this.nextToken(),this.isLookahead=!1;let e=this.state;return this.state=t,e}nextTokenStart(){return this.nextTokenStartSince(this.state.pos)}nextTokenStartSince(t){return _e.lastIndex=t,_e.test(this.input)?_e.lastIndex:t}lookaheadCharCode(){return this.input.charCodeAt(this.nextTokenStart())}nextTokenInLineStart(){return this.nextTokenInLineStartSince(this.state.pos)}nextTokenInLineStartSince(t){return je.lastIndex=t,je.test(this.input)?je.lastIndex:t}lookaheadInLineCharCode(){return this.input.charCodeAt(this.nextTokenInLineStart())}codePointAtPos(t){let e=this.input.charCodeAt(t);if((e&64512)===55296&&++t<this.input.length){let s=this.input.charCodeAt(t);(s&64512)===56320&&(e=65536+((e&1023)<<10)+(s&1023));}return e}setStrict(t){this.state.strict=t,t&&(this.state.strictErrors.forEach(([e,s])=>this.raise(e,s)),this.state.strictErrors.clear());}curContext(){return this.state.context[this.state.context.length-1]}nextToken(){if(this.skipSpace(),this.state.start=this.state.pos,this.isLookahead||(this.state.startLoc=this.state.curPosition()),this.state.pos>=this.length){this.finishToken(140);return}this.getTokenFromCode(this.codePointAtPos(this.state.pos));}skipBlockComment(t){let e;this.isLookahead||(e=this.state.curPosition());let s=this.state.pos,i=this.input.indexOf(t,s+2);if(i===-1)throw this.raise(p.UnterminatedComment,this.state.curPosition());for(this.state.pos=i+t.length,be.lastIndex=s+2;be.test(this.input)&&be.lastIndex<=i;)++this.state.curLine,this.state.lineStart=be.lastIndex;if(this.isLookahead)return;let r={type:"CommentBlock",value:this.input.slice(s+2,i),start:this.sourceToOffsetPos(s),end:this.sourceToOffsetPos(i+t.length),loc:new Z(e,this.state.curPosition())};return this.options.tokens&&this.pushToken(r),r}skipLineComment(t){let e=this.state.pos,s;this.isLookahead||(s=this.state.curPosition());let i=this.input.charCodeAt(this.state.pos+=t);if(this.state.pos<this.length)for(;!Y(i)&&++this.state.pos<this.length;)i=this.input.charCodeAt(this.state.pos);if(this.isLookahead)return;let r=this.state.pos,o={type:"CommentLine",value:this.input.slice(e+t,r),start:this.sourceToOffsetPos(e),end:this.sourceToOffsetPos(r),loc:new Z(s,this.state.curPosition())};return this.options.tokens&&this.pushToken(o),o}skipSpace(){let t=this.state.pos,e=[];e:for(;this.state.pos<this.length;){let s=this.input.charCodeAt(this.state.pos);switch(s){case 32:case 160:case 9:++this.state.pos;break;case 13:this.input.charCodeAt(this.state.pos+1)===10&&++this.state.pos;case 10:case 8232:case 8233:++this.state.pos,++this.state.curLine,this.state.lineStart=this.state.pos;break;case 47:switch(this.input.charCodeAt(this.state.pos+1)){case 42:{let i=this.skipBlockComment("*/");i!==void 0&&(this.addComment(i),this.options.attachComment&&e.push(i));break}case 47:{let i=this.skipLineComment(2);i!==void 0&&(this.addComment(i),this.options.attachComment&&e.push(i));break}default:break e}break;default:if(wi(s))++this.state.pos;else if(s===45&&!this.inModule&&this.options.annexB){let i=this.state.pos;if(this.input.charCodeAt(i+1)===45&&this.input.charCodeAt(i+2)===62&&(t===0||this.state.lineStart>t)){let r=this.skipLineComment(3);r!==void 0&&(this.addComment(r),this.options.attachComment&&e.push(r));}else break e}else if(s===60&&!this.inModule&&this.options.annexB){let i=this.state.pos;if(this.input.charCodeAt(i+1)===33&&this.input.charCodeAt(i+2)===45&&this.input.charCodeAt(i+3)===45){let r=this.skipLineComment(4);r!==void 0&&(this.addComment(r),this.options.attachComment&&e.push(r));}else break e}else break e}}if(e.length>0){let s=this.state.pos,i={start:this.sourceToOffsetPos(t),end:this.sourceToOffsetPos(s),comments:e,leadingNode:null,trailingNode:null,containingNode:null};this.state.commentStack.push(i);}}finishToken(t,e){this.state.end=this.state.pos,this.state.endLoc=this.state.curPosition();let s=this.state.type;this.state.type=t,this.state.value=e,this.isLookahead||this.updateContext(s);}replaceToken(t){this.state.type=t,this.updateContext();}readToken_numberSign(){if(this.state.pos===0&&this.readToken_interpreter())return;let t=this.state.pos+1,e=this.codePointAtPos(t);if(e>=48&&e<=57)throw this.raise(p.UnexpectedDigitAfterHash,this.state.curPosition());if(e===123||e===91&&this.hasPlugin("recordAndTuple")){if(this.expectPlugin("recordAndTuple"),this.getPluginOption("recordAndTuple","syntaxType")==="bar")throw this.raise(e===123?p.RecordExpressionHashIncorrectStartSyntaxType:p.TupleExpressionHashIncorrectStartSyntaxType,this.state.curPosition());this.state.pos+=2,e===123?this.finishToken(7):this.finishToken(1);}else R(e)?(++this.state.pos,this.finishToken(139,this.readWord1(e))):e===92?(++this.state.pos,this.finishToken(139,this.readWord1())):this.finishOp(27,1);}readToken_dot(){let t=this.input.charCodeAt(this.state.pos+1);if(t>=48&&t<=57){this.readNumber(!0);return}t===46&&this.input.charCodeAt(this.state.pos+2)===46?(this.state.pos+=3,this.finishToken(21)):(++this.state.pos,this.finishToken(16));}readToken_slash(){this.input.charCodeAt(this.state.pos+1)===61?this.finishOp(31,2):this.finishOp(56,1);}readToken_interpreter(){if(this.state.pos!==0||this.length<2)return !1;let t=this.input.charCodeAt(this.state.pos+1);if(t!==33)return !1;let e=this.state.pos;for(this.state.pos+=1;!Y(t)&&++this.state.pos<this.length;)t=this.input.charCodeAt(this.state.pos);let s=this.input.slice(e+2,this.state.pos);return this.finishToken(28,s),!0}readToken_mult_modulo(t){let e=t===42?55:54,s=1,i=this.input.charCodeAt(this.state.pos+1);t===42&&i===42&&(s++,i=this.input.charCodeAt(this.state.pos+2),e=57),i===61&&!this.state.inType&&(s++,e=t===37?33:30),this.finishOp(e,s);}readToken_pipe_amp(t){let e=this.input.charCodeAt(this.state.pos+1);if(e===t){this.input.charCodeAt(this.state.pos+2)===61?this.finishOp(30,3):this.finishOp(t===124?41:42,2);return}if(t===124){if(e===62){this.finishOp(39,2);return}if(this.hasPlugin("recordAndTuple")&&e===125){if(this.getPluginOption("recordAndTuple","syntaxType")!=="bar")throw this.raise(p.RecordExpressionBarIncorrectEndSyntaxType,this.state.curPosition());this.state.pos+=2,this.finishToken(9);return}if(this.hasPlugin("recordAndTuple")&&e===93){if(this.getPluginOption("recordAndTuple","syntaxType")!=="bar")throw this.raise(p.TupleExpressionBarIncorrectEndSyntaxType,this.state.curPosition());this.state.pos+=2,this.finishToken(4);return}}if(e===61){this.finishOp(30,2);return}this.finishOp(t===124?43:45,1);}readToken_caret(){let t=this.input.charCodeAt(this.state.pos+1);t===61&&!this.state.inType?this.finishOp(32,2):t===94&&this.hasPlugin(["pipelineOperator",{proposal:"hack",topicToken:"^^"}])?(this.finishOp(37,2),this.input.codePointAt(this.state.pos)===94&&this.unexpected()):this.finishOp(44,1);}readToken_atSign(){this.input.charCodeAt(this.state.pos+1)===64&&this.hasPlugin(["pipelineOperator",{proposal:"hack",topicToken:"@@"}])?this.finishOp(38,2):this.finishOp(26,1);}readToken_plus_min(t){let e=this.input.charCodeAt(this.state.pos+1);if(e===t){this.finishOp(34,2);return}e===61?this.finishOp(30,2):this.finishOp(53,1);}readToken_lt(){let{pos:t}=this.state,e=this.input.charCodeAt(t+1);if(e===60){if(this.input.charCodeAt(t+2)===61){this.finishOp(30,3);return}this.finishOp(51,2);return}if(e===61){this.finishOp(49,2);return}this.finishOp(47,1);}readToken_gt(){let{pos:t}=this.state,e=this.input.charCodeAt(t+1);if(e===62){let s=this.input.charCodeAt(t+2)===62?3:2;if(this.input.charCodeAt(t+s)===61){this.finishOp(30,s+1);return}this.finishOp(52,s);return}if(e===61){this.finishOp(49,2);return}this.finishOp(48,1);}readToken_eq_excl(t){let e=this.input.charCodeAt(this.state.pos+1);if(e===61){this.finishOp(46,this.input.charCodeAt(this.state.pos+2)===61?3:2);return}if(t===61&&e===62){this.state.pos+=2,this.finishToken(19);return}this.finishOp(t===61?29:35,1);}readToken_question(){let t=this.input.charCodeAt(this.state.pos+1),e=this.input.charCodeAt(this.state.pos+2);t===63?e===61?this.finishOp(30,3):this.finishOp(40,2):t===46&&!(e>=48&&e<=57)?(this.state.pos+=2,this.finishToken(18)):(++this.state.pos,this.finishToken(17));}getTokenFromCode(t){switch(t){case 46:this.readToken_dot();return;case 40:++this.state.pos,this.finishToken(10);return;case 41:++this.state.pos,this.finishToken(11);return;case 59:++this.state.pos,this.finishToken(13);return;case 44:++this.state.pos,this.finishToken(12);return;case 91:if(this.hasPlugin("recordAndTuple")&&this.input.charCodeAt(this.state.pos+1)===124){if(this.getPluginOption("recordAndTuple","syntaxType")!=="bar")throw this.raise(p.TupleExpressionBarIncorrectStartSyntaxType,this.state.curPosition());this.state.pos+=2,this.finishToken(2);}else ++this.state.pos,this.finishToken(0);return;case 93:++this.state.pos,this.finishToken(3);return;case 123:if(this.hasPlugin("recordAndTuple")&&this.input.charCodeAt(this.state.pos+1)===124){if(this.getPluginOption("recordAndTuple","syntaxType")!=="bar")throw this.raise(p.RecordExpressionBarIncorrectStartSyntaxType,this.state.curPosition());this.state.pos+=2,this.finishToken(6);}else ++this.state.pos,this.finishToken(5);return;case 125:++this.state.pos,this.finishToken(8);return;case 58:this.hasPlugin("functionBind")&&this.input.charCodeAt(this.state.pos+1)===58?this.finishOp(15,2):(++this.state.pos,this.finishToken(14));return;case 63:this.readToken_question();return;case 96:this.readTemplateToken();return;case 48:{let e=this.input.charCodeAt(this.state.pos+1);if(e===120||e===88){this.readRadixNumber(16);return}if(e===111||e===79){this.readRadixNumber(8);return}if(e===98||e===66){this.readRadixNumber(2);return}}case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:this.readNumber(!1);return;case 34:case 39:this.readString(t);return;case 47:this.readToken_slash();return;case 37:case 42:this.readToken_mult_modulo(t);return;case 124:case 38:this.readToken_pipe_amp(t);return;case 94:this.readToken_caret();return;case 43:case 45:this.readToken_plus_min(t);return;case 60:this.readToken_lt();return;case 62:this.readToken_gt();return;case 61:case 33:this.readToken_eq_excl(t);return;case 126:this.finishOp(36,1);return;case 64:this.readToken_atSign();return;case 35:this.readToken_numberSign();return;case 92:this.readWord();return;default:if(R(t)){this.readWord(t);return}}throw this.raise(p.InvalidOrUnexpectedToken,this.state.curPosition(),{unexpected:String.fromCodePoint(t)})}finishOp(t,e){let s=this.input.slice(this.state.pos,this.state.pos+e);this.state.pos+=e,this.finishToken(t,s);}readRegexp(){let t=this.state.startLoc,e=this.state.start+1,s,i,{pos:r}=this.state;for(;;++r){if(r>=this.length)throw this.raise(p.UnterminatedRegExp,v(t,1));let l=this.input.charCodeAt(r);if(Y(l))throw this.raise(p.UnterminatedRegExp,v(t,1));if(s)s=!1;else {if(l===91)i=!0;else if(l===93&&i)i=!1;else if(l===47&&!i)break;s=l===92;}}let n=this.input.slice(e,r);++r;let o="",h=()=>v(t,r+2-e);for(;r<this.length;){let l=this.codePointAtPos(r),c=String.fromCharCode(l);if(Ni.has(l))l===118?o.includes("u")&&this.raise(p.IncompatibleRegExpUVFlags,h()):l===117&&o.includes("v")&&this.raise(p.IncompatibleRegExpUVFlags,h()),o.includes(c)&&this.raise(p.DuplicateRegExpFlags,h());else if(G(l)||l===92)this.raise(p.MalformedRegExpFlags,h());else break;++r,o+=c;}this.state.pos=r,this.finishToken(138,{pattern:n,flags:o});}readInt(t,e,s=!1,i=!0){let{n:r,pos:n}=Yt(this.input,this.state.pos,this.state.lineStart,this.state.curLine,t,e,s,i,this.errorHandlers_readInt,!1);return this.state.pos=n,r}readRadixNumber(t){let e=this.state.pos,s=this.state.curPosition(),i=!1;this.state.pos+=2;let r=this.readInt(t);r==null&&this.raise(p.InvalidDigit,v(s,2),{radix:t});let n=this.input.charCodeAt(this.state.pos);if(n===110)++this.state.pos,i=!0;else if(n===109)throw this.raise(p.InvalidDecimal,s);if(R(this.codePointAtPos(this.state.pos)))throw this.raise(p.NumberIdentifier,this.state.curPosition());if(i){let o=this.input.slice(e,this.state.pos).replace(/[_n]/g,"");this.finishToken(136,o);return}this.finishToken(135,r);}readNumber(t){let e=this.state.pos,s=this.state.curPosition(),i=!1,r=!1,n=!1,o=!1;!t&&this.readInt(10)===null&&this.raise(p.InvalidNumber,this.state.curPosition());let h=this.state.pos-e>=2&&this.input.charCodeAt(e)===48;if(h){let d=this.input.slice(e,this.state.pos);if(this.recordStrictModeErrors(p.StrictOctalLiteral,s),!this.state.strict){let x=d.indexOf("_");x>0&&this.raise(p.ZeroDigitNumericSeparator,v(s,x));}o=h&&!/[89]/.test(d);}let l=this.input.charCodeAt(this.state.pos);if(l===46&&!o&&(++this.state.pos,this.readInt(10),i=!0,l=this.input.charCodeAt(this.state.pos)),(l===69||l===101)&&!o&&(l=this.input.charCodeAt(++this.state.pos),(l===43||l===45)&&++this.state.pos,this.readInt(10)===null&&this.raise(p.InvalidOrMissingExponent,s),i=!0,n=!0,l=this.input.charCodeAt(this.state.pos)),l===110&&((i||h)&&this.raise(p.InvalidBigIntLiteral,s),++this.state.pos,r=!0),l===109){this.expectPlugin("decimal",this.state.curPosition()),(n||h)&&this.raise(p.InvalidDecimal,s),++this.state.pos;var c=!0;}if(R(this.codePointAtPos(this.state.pos)))throw this.raise(p.NumberIdentifier,this.state.curPosition());let u=this.input.slice(e,this.state.pos).replace(/[_mn]/g,"");if(r){this.finishToken(136,u);return}if(c){this.finishToken(137,u);return}let f=o?parseInt(u,8):parseFloat(u);this.finishToken(135,f);}readCodePoint(t){let{code:e,pos:s}=Qt(this.input,this.state.pos,this.state.lineStart,this.state.curLine,t,this.errorHandlers_readCodePoint);return this.state.pos=s,e}readString(t){let{str:e,pos:s,curLine:i,lineStart:r}=Ft(t===34?"double":"single",this.input,this.state.pos+1,this.state.lineStart,this.state.curLine,this.errorHandlers_readStringContents_string);this.state.pos=s+1,this.state.lineStart=r,this.state.curLine=i,this.finishToken(134,e);}readTemplateContinuation(){this.match(8)||this.unexpected(null,8),this.state.pos--,this.readTemplateToken();}readTemplateToken(){let t=this.input[this.state.pos],{str:e,firstInvalidLoc:s,pos:i,curLine:r,lineStart:n}=Ft("template",this.input,this.state.pos+1,this.state.lineStart,this.state.curLine,this.errorHandlers_readStringContents_template);this.state.pos=i+1,this.state.lineStart=n,this.state.curLine=r,s&&(this.state.firstInvalidTemplateEscapePos=new O(s.curLine,s.pos-s.lineStart,this.sourceToOffsetPos(s.pos))),this.input.codePointAt(i)===96?this.finishToken(24,s?null:t+e+"`"):(this.state.pos++,this.finishToken(25,s?null:t+e+"${"));}recordStrictModeErrors(t,e){let s=e.index;this.state.strict&&!this.state.strictErrors.has(s)?this.raise(t,e):this.state.strictErrors.set(s,[t,e]);}readWord1(t){this.state.containsEsc=!1;let e="",s=this.state.pos,i=this.state.pos;for(t!==void 0&&(this.state.pos+=t<=65535?1:2);this.state.pos<this.length;){let r=this.codePointAtPos(this.state.pos);if(G(r))this.state.pos+=r<=65535?1:2;else if(r===92){this.state.containsEsc=!0,e+=this.input.slice(i,this.state.pos);let n=this.state.curPosition(),o=this.state.pos===s?R:G;if(this.input.charCodeAt(++this.state.pos)!==117){this.raise(p.MissingUnicodeEscape,this.state.curPosition()),i=this.state.pos-1;continue}++this.state.pos;let h=this.readCodePoint(!0);h!==null&&(o(h)||this.raise(p.EscapedCharNotAnIdentifier,n),e+=String.fromCodePoint(h)),i=this.state.pos;}else break}return e+this.input.slice(i,this.state.pos)}readWord(t){let e=this.readWord1(t),s=lt.get(e);s!==void 0?this.finishToken(s,q(s)):this.finishToken(132,e);}checkKeywordEscapes(){let{type:t}=this.state;mt(t)&&this.state.containsEsc&&this.raise(p.InvalidEscapedReservedWord,this.state.startLoc,{reservedWord:q(t)});}raise(t,e,s={}){let i=e instanceof O?e:e.loc.start,r=t(i,s);if(!this.options.errorRecovery)throw r;return this.isLookahead||this.state.errors.push(r),r}raiseOverwrite(t,e,s={}){let i=e instanceof O?e:e.loc.start,r=i.index,n=this.state.errors;for(let o=n.length-1;o>=0;o--){let h=n[o];if(h.loc.index===r)return n[o]=t(i,s);if(h.loc.index<r)break}return this.raise(t,e,s)}updateContext(t){}unexpected(t,e){throw this.raise(p.UnexpectedToken,t??this.state.startLoc,{expected:e?q(e):null})}expectPlugin(t,e){if(this.hasPlugin(t))return !0;throw this.raise(p.MissingPlugin,e??this.state.startLoc,{missingPlugin:[t]})}expectOnePlugin(t){if(!t.some(e=>this.hasPlugin(e)))throw this.raise(p.MissingOneOfPlugins,this.state.startLoc,{missingPlugin:t})}errorBuilder(t){return (e,s,i)=>{this.raise(t,le(e,s,i));}}},Qe=class{constructor(){this.privateNames=new Set,this.loneAccessors=new Map,this.undefinedPrivateNames=new Map;}},Ze=class{constructor(t){this.parser=void 0,this.stack=[],this.undefinedPrivateNames=new Map,this.parser=t;}current(){return this.stack[this.stack.length-1]}enter(){this.stack.push(new Qe);}exit(){let t=this.stack.pop(),e=this.current();for(let[s,i]of Array.from(t.undefinedPrivateNames))e?e.undefinedPrivateNames.has(s)||e.undefinedPrivateNames.set(s,i):this.parser.raise(p.InvalidPrivateFieldResolution,i,{identifierName:s});}declarePrivateName(t,e,s){let{privateNames:i,loneAccessors:r,undefinedPrivateNames:n}=this.current(),o=i.has(t);if(e&3){let h=o&&r.get(t);if(h){let l=h&4,c=e&4,u=h&3,f=e&3;o=u===f||l!==c,o||r.delete(t);}else o||r.set(t,e);}o&&this.parser.raise(p.PrivateNameRedeclaration,s,{identifierName:t}),i.add(t),n.delete(t);}usePrivateName(t,e){let s;for(s of this.stack)if(s.privateNames.has(t))return;s?s.undefinedPrivateNames.set(t,e):this.parser.raise(p.InvalidPrivateFieldResolution,e,{identifierName:t});}},ee=class{constructor(t=0){this.type=t;}canBeArrowParameterDeclaration(){return this.type===2||this.type===1}isCertainlyParameterDeclaration(){return this.type===3}},Ne=class extends ee{constructor(t){super(t),this.declarationErrors=new Map;}recordDeclarationError(t,e){let s=e.index;this.declarationErrors.set(s,[t,e]);}clearDeclarationError(t){this.declarationErrors.delete(t);}iterateErrors(t){this.declarationErrors.forEach(t);}},et=class{constructor(t){this.parser=void 0,this.stack=[new ee],this.parser=t;}enter(t){this.stack.push(t);}exit(){this.stack.pop();}recordParameterInitializerError(t,e){let s=e.loc.start,{stack:i}=this,r=i.length-1,n=i[r];for(;!n.isCertainlyParameterDeclaration();){if(n.canBeArrowParameterDeclaration())n.recordDeclarationError(t,s);else return;n=i[--r];}this.parser.raise(t,s);}recordArrowParameterBindingError(t,e){let{stack:s}=this,i=s[s.length-1],r=e.loc.start;if(i.isCertainlyParameterDeclaration())this.parser.raise(t,r);else if(i.canBeArrowParameterDeclaration())i.recordDeclarationError(t,r);else return}recordAsyncArrowParametersError(t){let{stack:e}=this,s=e.length-1,i=e[s];for(;i.canBeArrowParameterDeclaration();)i.type===2&&i.recordDeclarationError(p.AwaitBindingIdentifier,t),i=e[--s];}validateAsPattern(){let{stack:t}=this,e=t[t.length-1];e.canBeArrowParameterDeclaration()&&e.iterateErrors(([s,i])=>{this.parser.raise(s,i);let r=t.length-2,n=t[r];for(;n.canBeArrowParameterDeclaration();)n.clearDeclarationError(i.index),n=t[--r];});}};function ki(){return new ee(3)}function vi(){return new Ne(1)}function Li(){return new Ne(2)}function Zt(){return new ee}var tt=class{constructor(){this.stacks=[];}enter(t){this.stacks.push(t);}exit(){this.stacks.pop();}currentFlags(){return this.stacks[this.stacks.length-1]}get hasAwait(){return (this.currentFlags()&2)>0}get hasYield(){return (this.currentFlags()&1)>0}get hasReturn(){return (this.currentFlags()&4)>0}get hasIn(){return (this.currentFlags()&8)>0}};function Ce(a,t){return (a?2:0)|(t?1:0)}var st=class extends Ye{addExtra(t,e,s,i=!0){if(!t)return;let{extra:r}=t;r==null&&(r={},t.extra=r),i?r[e]=s:Object.defineProperty(r,e,{enumerable:i,value:s});}isContextual(t){return this.state.type===t&&!this.state.containsEsc}isUnparsedContextual(t,e){let s=t+e.length;if(this.input.slice(t,s)===e){let i=this.input.charCodeAt(s);return !(G(i)||(i&64512)===55296)}return !1}isLookaheadContextual(t){let e=this.nextTokenStart();return this.isUnparsedContextual(e,t)}eatContextual(t){return this.isContextual(t)?(this.next(),!0):!1}expectContextual(t,e){if(!this.eatContextual(t)){if(e!=null)throw this.raise(e,this.state.startLoc);this.unexpected(null,t);}}canInsertSemicolon(){return this.match(140)||this.match(8)||this.hasPrecedingLineBreak()}hasPrecedingLineBreak(){return Mt(this.input,this.offsetToSourcePos(this.state.lastTokEndLoc.index),this.state.start)}hasFollowingLineBreak(){return Mt(this.input,this.state.end,this.nextTokenStart())}isLineTerminator(){return this.eat(13)||this.canInsertSemicolon()}semicolon(t=!0){(t?this.isLineTerminator():this.eat(13))||this.raise(p.MissingSemicolon,this.state.lastTokEndLoc);}expect(t,e){this.eat(t)||this.unexpected(e,t);}tryParse(t,e=this.state.clone()){let s={node:null};try{let i=t((r=null)=>{throw s.node=r,s});if(this.state.errors.length>e.errors.length){let r=this.state;return this.state=e,this.state.tokensLength=r.tokensLength,{node:i,error:r.errors[e.errors.length],thrown:!1,aborted:!1,failState:r}}return {node:i,error:null,thrown:!1,aborted:!1,failState:null}}catch(i){let r=this.state;if(this.state=e,i instanceof SyntaxError)return {node:null,error:i,thrown:!0,aborted:!1,failState:r};if(i===s)return {node:s.node,error:null,thrown:!1,aborted:!0,failState:r};throw i}}checkExpressionErrors(t,e){if(!t)return !1;let{shorthandAssignLoc:s,doubleProtoLoc:i,privateKeyLoc:r,optionalParametersLoc:n}=t,o=!!s||!!i||!!n||!!r;if(!e)return o;s!=null&&this.raise(p.InvalidCoverInitializedName,s),i!=null&&this.raise(p.DuplicateProto,i),r!=null&&this.raise(p.UnexpectedPrivateField,r),n!=null&&this.unexpected(n);}isLiteralPropertyName(){return Vt(this.state.type)}isPrivateName(t){return t.type==="PrivateName"}getPrivateNameSV(t){return t.id.name}hasPropertyAsPrivateName(t){return (t.type==="MemberExpression"||t.type==="OptionalMemberExpression")&&this.isPrivateName(t.property)}isObjectProperty(t){return t.type==="ObjectProperty"}isObjectMethod(t){return t.type==="ObjectMethod"}initializeScopes(t=this.options.sourceType==="module"){let e=this.state.labels;this.state.labels=[];let s=this.exportedIdentifiers;this.exportedIdentifiers=new Set;let i=this.inModule;this.inModule=t;let r=this.scope,n=this.getScopeHandler();this.scope=new n(this,t);let o=this.prodParam;this.prodParam=new tt;let h=this.classScope;this.classScope=new Ze(this);let l=this.expressionScope;return this.expressionScope=new et(this),()=>{this.state.labels=e,this.exportedIdentifiers=s,this.inModule=i,this.scope=r,this.prodParam=o,this.classScope=h,this.expressionScope=l;}}enterInitialScopes(){let t=0;this.inModule&&(t|=2),this.scope.enter(1),this.prodParam.enter(t);}checkDestructuringPrivate(t){let{privateKeyLoc:e}=t;e!==null&&this.expectPlugin("destructuringPrivate",e);}},Q=class{constructor(){this.shorthandAssignLoc=null,this.doubleProtoLoc=null,this.privateKeyLoc=null,this.optionalParametersLoc=null;}},te=class{constructor(t,e,s){this.type="",this.start=e,this.end=0,this.loc=new Z(s),t!=null&&t.options.ranges&&(this.range=[e,0]),t!=null&&t.filename&&(this.loc.filename=t.filename);}},Pt=te.prototype;Pt.__clone=function(){let a=new te(void 0,this.start,this.loc.start),t=Object.keys(this);for(let e=0,s=t.length;e<s;e++){let i=t[e];i!=="leadingComments"&&i!=="trailingComments"&&i!=="innerComments"&&(a[i]=this[i]);}return a};function Di(a){return _(a)}function _(a){let{type:t,start:e,end:s,loc:i,range:r,extra:n,name:o}=a,h=Object.create(Pt);return h.type=t,h.start=e,h.end=s,h.loc=i,h.range=r,h.extra=n,h.name=o,t==="Placeholder"&&(h.expectedNode=a.expectedNode),h}function Mi(a){let{type:t,start:e,end:s,loc:i,range:r,extra:n}=a;if(t==="Placeholder")return Di(a);let o=Object.create(Pt);return o.type=t,o.start=e,o.end=s,o.loc=i,o.range=r,a.raw!==void 0?o.raw=a.raw:o.extra=n,o.value=a.value,o}var it=class extends st{startNode(){let t=this.state.startLoc;return new te(this,t.index,t)}startNodeAt(t){return new te(this,t.index,t)}startNodeAtNode(t){return this.startNodeAt(t.loc.start)}finishNode(t,e){return this.finishNodeAt(t,e,this.state.lastTokEndLoc)}finishNodeAt(t,e,s){return t.type=e,t.end=s.index,t.loc.end=s,this.options.ranges&&(t.range[1]=s.index),this.options.attachComment&&this.processComment(t),t}resetStartLocation(t,e){t.start=e.index,t.loc.start=e,this.options.ranges&&(t.range[0]=e.index);}resetEndLocation(t,e=this.state.lastTokEndLoc){t.end=e.index,t.loc.end=e,this.options.ranges&&(t.range[1]=e.index);}resetStartLocationFromNode(t,e){this.resetStartLocation(t,e.loc.start);}},Oi=new Set(["_","any","bool","boolean","empty","extends","false","interface","mixed","null","number","static","string","true","typeof","void"]),g=U`flow`({AmbiguousConditionalArrow:"Ambiguous expression: wrap the arrow functions in parentheses to disambiguate.",AmbiguousDeclareModuleKind:"Found both `declare module.exports` and `declare export` in the same module. Modules can only have 1 since they are either an ES module or they are a CommonJS module.",AssignReservedType:({reservedType:a})=>`Cannot overwrite reserved type ${a}.`,DeclareClassElement:"The `declare` modifier can only appear on class fields.",DeclareClassFieldInitializer:"Initializers are not allowed in fields with the `declare` modifier.",DuplicateDeclareModuleExports:"Duplicate `declare module.exports` statement.",EnumBooleanMemberNotInitialized:({memberName:a,enumName:t})=>`Boolean enum members need to be initialized. Use either \`${a} = true,\` or \`${a} = false,\` in enum \`${t}\`.`,EnumDuplicateMemberName:({memberName:a,enumName:t})=>`Enum member names need to be unique, but the name \`${a}\` has already been used before in enum \`${t}\`.`,EnumInconsistentMemberValues:({enumName:a})=>`Enum \`${a}\` has inconsistent member initializers. Either use no initializers, or consistently use literals (either booleans, numbers, or strings) for all member initializers.`,EnumInvalidExplicitType:({invalidEnumType:a,enumName:t})=>`Enum type \`${a}\` is not valid. Use one of \`boolean\`, \`number\`, \`string\`, or \`symbol\` in enum \`${t}\`.`,EnumInvalidExplicitTypeUnknownSupplied:({enumName:a})=>`Supplied enum type is not valid. Use one of \`boolean\`, \`number\`, \`string\`, or \`symbol\` in enum \`${a}\`.`,EnumInvalidMemberInitializerPrimaryType:({enumName:a,memberName:t,explicitType:e})=>`Enum \`${a}\` has type \`${e}\`, so the initializer of \`${t}\` needs to be a ${e} literal.`,EnumInvalidMemberInitializerSymbolType:({enumName:a,memberName:t})=>`Symbol enum members cannot be initialized. Use \`${t},\` in enum \`${a}\`.`,EnumInvalidMemberInitializerUnknownType:({enumName:a,memberName:t})=>`The enum member initializer for \`${t}\` needs to be a literal (either a boolean, number, or string) in enum \`${a}\`.`,EnumInvalidMemberName:({enumName:a,memberName:t,suggestion:e})=>`Enum member names cannot start with lowercase 'a' through 'z'. Instead of using \`${t}\`, consider using \`${e}\`, in enum \`${a}\`.`,EnumNumberMemberNotInitialized:({enumName:a,memberName:t})=>`Number enum members need to be initialized, e.g. \`${t} = 1\` in enum \`${a}\`.`,EnumStringMemberInconsistentlyInitialized:({enumName:a})=>`String enum members need to consistently either all use initializers, or use no initializers, in enum \`${a}\`.`,GetterMayNotHaveThisParam:"A getter cannot have a `this` parameter.",ImportReflectionHasImportType:"An `import module` declaration can not use `type` or `typeof` keyword.",ImportTypeShorthandOnlyInPureImport:"The `type` and `typeof` keywords on named imports can only be used on regular `import` statements. It cannot be used with `import type` or `import typeof` statements.",InexactInsideExact:"Explicit inexact syntax cannot appear inside an explicit exact object type.",InexactInsideNonObject:"Explicit inexact syntax cannot appear in class or interface definitions.",InexactVariance:"Explicit inexact syntax cannot have variance.",InvalidNonTypeImportInDeclareModule:"Imports within a `declare module` body must always be `import type` or `import typeof`.",MissingTypeParamDefault:"Type parameter declaration needs a default, since a preceding type parameter declaration has a default.",NestedDeclareModule:"`declare module` cannot be used inside another `declare module`.",NestedFlowComment:"Cannot have a flow comment inside another flow comment.",PatternIsOptional:Object.assign({message:"A binding pattern parameter cannot be optional in an implementation signature."},{reasonCode:"OptionalBindingPattern"}),SetterMayNotHaveThisParam:"A setter cannot have a `this` parameter.",SpreadVariance:"Spread properties cannot have variance.",ThisParamAnnotationRequired:"A type annotation is required for the `this` parameter.",ThisParamBannedInConstructor:"Constructors cannot have a `this` parameter; constructors don't bind `this` like other functions.",ThisParamMayNotBeOptional:"The `this` parameter cannot be optional.",ThisParamMustBeFirst:"The `this` parameter must be the first function parameter.",ThisParamNoDefault:"The `this` parameter may not have a default value.",TypeBeforeInitializer:"Type annotations must come before default assignments, e.g. instead of `age = 25: number` use `age: number = 25`.",TypeCastInPattern:"The type cast expression is expected to be wrapped with parenthesis.",UnexpectedExplicitInexactInObject:"Explicit inexact syntax must appear at the end of an inexact object.",UnexpectedReservedType:({reservedType:a})=>`Unexpected reserved type ${a}.`,UnexpectedReservedUnderscore:"`_` is only allowed as a type argument to call or new.",UnexpectedSpaceBetweenModuloChecks:"Spaces between `%` and `checks` are not allowed here.",UnexpectedSpreadType:"Spread operator cannot appear in class or interface definitions.",UnexpectedSubtractionOperand:'Unexpected token, expected "number" or "bigint".',UnexpectedTokenAfterTypeParameter:"Expected an arrow function after this type parameter declaration.",UnexpectedTypeParameterBeforeAsyncArrowFunction:"Type parameters must come after the async keyword, e.g. instead of `<T> async () => {}`, use `async <T>() => {}`.",UnsupportedDeclareExportKind:({unsupportedExportKind:a,suggestion:t})=>`\`declare export ${a}\` is not supported. Use \`${t}\` instead.`,UnsupportedStatementInDeclareModule:"Only declares and type imports are allowed inside declare module.",UnterminatedFlowComment:"Unterminated flow-comment."});function Fi(a){return a.type==="DeclareExportAllDeclaration"||a.type==="DeclareExportDeclaration"&&(!a.declaration||a.declaration.type!=="TypeAlias"&&a.declaration.type!=="InterfaceDeclaration")}function Bt(a){return a.importKind==="type"||a.importKind==="typeof"}var Bi={const:"declare export var",let:"declare export var",type:"export type",interface:"export interface"};function Ri(a,t){let e=[],s=[];for(let i=0;i<a.length;i++)(t(a[i],i,a)?e:s).push(a[i]);return [e,s]}var Ui=/\*?\s*@((?:no)?flow)\b/,_i=a=>class extends a{constructor(...e){super(...e),this.flowPragma=void 0;}getScopeHandler(){return He}shouldParseTypes(){return this.getPluginOption("flow","all")||this.flowPragma==="flow"}finishToken(e,s){e!==134&&e!==13&&e!==28&&this.flowPragma===void 0&&(this.flowPragma=null),super.finishToken(e,s);}addComment(e){if(this.flowPragma===void 0){let s=Ui.exec(e.value);if(s)if(s[1]==="flow")this.flowPragma="flow";else if(s[1]==="noflow")this.flowPragma="noflow";else throw new Error("Unexpected flow pragma")}super.addComment(e);}flowParseTypeInitialiser(e){let s=this.state.inType;this.state.inType=!0,this.expect(e||14);let i=this.flowParseType();return this.state.inType=s,i}flowParsePredicate(){let e=this.startNode(),s=this.state.startLoc;return this.next(),this.expectContextual(110),this.state.lastTokStartLoc.index>s.index+1&&this.raise(g.UnexpectedSpaceBetweenModuloChecks,s),this.eat(10)?(e.value=super.parseExpression(),this.expect(11),this.finishNode(e,"DeclaredPredicate")):this.finishNode(e,"InferredPredicate")}flowParseTypeAndPredicateInitialiser(){let e=this.state.inType;this.state.inType=!0,this.expect(14);let s=null,i=null;return this.match(54)?(this.state.inType=e,i=this.flowParsePredicate()):(s=this.flowParseType(),this.state.inType=e,this.match(54)&&(i=this.flowParsePredicate())),[s,i]}flowParseDeclareClass(e){return this.next(),this.flowParseInterfaceish(e,!0),this.finishNode(e,"DeclareClass")}flowParseDeclareFunction(e){this.next();let s=e.id=this.parseIdentifier(),i=this.startNode(),r=this.startNode();this.match(47)?i.typeParameters=this.flowParseTypeParameterDeclaration():i.typeParameters=null,this.expect(10);let n=this.flowParseFunctionTypeParams();return i.params=n.params,i.rest=n.rest,i.this=n._this,this.expect(11),[i.returnType,e.predicate]=this.flowParseTypeAndPredicateInitialiser(),r.typeAnnotation=this.finishNode(i,"FunctionTypeAnnotation"),s.typeAnnotation=this.finishNode(r,"TypeAnnotation"),this.resetEndLocation(s),this.semicolon(),this.scope.declareName(e.id.name,2048,e.id.loc.start),this.finishNode(e,"DeclareFunction")}flowParseDeclare(e,s){if(this.match(80))return this.flowParseDeclareClass(e);if(this.match(68))return this.flowParseDeclareFunction(e);if(this.match(74))return this.flowParseDeclareVariable(e);if(this.eatContextual(127))return this.match(16)?this.flowParseDeclareModuleExports(e):(s&&this.raise(g.NestedDeclareModule,this.state.lastTokStartLoc),this.flowParseDeclareModule(e));if(this.isContextual(130))return this.flowParseDeclareTypeAlias(e);if(this.isContextual(131))return this.flowParseDeclareOpaqueType(e);if(this.isContextual(129))return this.flowParseDeclareInterface(e);if(this.match(82))return this.flowParseDeclareExportDeclaration(e,s);this.unexpected();}flowParseDeclareVariable(e){return this.next(),e.id=this.flowParseTypeAnnotatableIdentifier(!0),this.scope.declareName(e.id.name,5,e.id.loc.start),this.semicolon(),this.finishNode(e,"DeclareVariable")}flowParseDeclareModule(e){this.scope.enter(0),this.match(134)?e.id=super.parseExprAtom():e.id=this.parseIdentifier();let s=e.body=this.startNode(),i=s.body=[];for(this.expect(5);!this.match(8);){let o=this.startNode();this.match(83)?(this.next(),!this.isContextual(130)&&!this.match(87)&&this.raise(g.InvalidNonTypeImportInDeclareModule,this.state.lastTokStartLoc),super.parseImport(o)):(this.expectContextual(125,g.UnsupportedStatementInDeclareModule),o=this.flowParseDeclare(o,!0)),i.push(o);}this.scope.exit(),this.expect(8),this.finishNode(s,"BlockStatement");let r=null,n=!1;return i.forEach(o=>{Fi(o)?(r==="CommonJS"&&this.raise(g.AmbiguousDeclareModuleKind,o),r="ES"):o.type==="DeclareModuleExports"&&(n&&this.raise(g.DuplicateDeclareModuleExports,o),r==="ES"&&this.raise(g.AmbiguousDeclareModuleKind,o),r="CommonJS",n=!0);}),e.kind=r||"CommonJS",this.finishNode(e,"DeclareModule")}flowParseDeclareExportDeclaration(e,s){if(this.expect(82),this.eat(65))return this.match(68)||this.match(80)?e.declaration=this.flowParseDeclare(this.startNode()):(e.declaration=this.flowParseType(),this.semicolon()),e.default=!0,this.finishNode(e,"DeclareExportDeclaration");if(this.match(75)||this.isLet()||(this.isContextual(130)||this.isContextual(129))&&!s){let i=this.state.value;throw this.raise(g.UnsupportedDeclareExportKind,this.state.startLoc,{unsupportedExportKind:i,suggestion:Bi[i]})}if(this.match(74)||this.match(68)||this.match(80)||this.isContextual(131))return e.declaration=this.flowParseDeclare(this.startNode()),e.default=!1,this.finishNode(e,"DeclareExportDeclaration");if(this.match(55)||this.match(5)||this.isContextual(129)||this.isContextual(130)||this.isContextual(131))return e=this.parseExport(e,null),e.type==="ExportNamedDeclaration"&&(e.type="ExportDeclaration",e.default=!1,delete e.exportKind),e.type="Declare"+e.type,e;this.unexpected();}flowParseDeclareModuleExports(e){return this.next(),this.expectContextual(111),e.typeAnnotation=this.flowParseTypeAnnotation(),this.semicolon(),this.finishNode(e,"DeclareModuleExports")}flowParseDeclareTypeAlias(e){this.next();let s=this.flowParseTypeAlias(e);return s.type="DeclareTypeAlias",s}flowParseDeclareOpaqueType(e){this.next();let s=this.flowParseOpaqueType(e,!0);return s.type="DeclareOpaqueType",s}flowParseDeclareInterface(e){return this.next(),this.flowParseInterfaceish(e,!1),this.finishNode(e,"DeclareInterface")}flowParseInterfaceish(e,s){if(e.id=this.flowParseRestrictedIdentifier(!s,!0),this.scope.declareName(e.id.name,s?17:8201,e.id.loc.start),this.match(47)?e.typeParameters=this.flowParseTypeParameterDeclaration():e.typeParameters=null,e.extends=[],this.eat(81))do e.extends.push(this.flowParseInterfaceExtends());while(!s&&this.eat(12));if(s){if(e.implements=[],e.mixins=[],this.eatContextual(117))do e.mixins.push(this.flowParseInterfaceExtends());while(this.eat(12));if(this.eatContextual(113))do e.implements.push(this.flowParseInterfaceExtends());while(this.eat(12))}e.body=this.flowParseObjectType({allowStatic:s,allowExact:!1,allowSpread:!1,allowProto:s,allowInexact:!1});}flowParseInterfaceExtends(){let e=this.startNode();return e.id=this.flowParseQualifiedTypeIdentifier(),this.match(47)?e.typeParameters=this.flowParseTypeParameterInstantiation():e.typeParameters=null,this.finishNode(e,"InterfaceExtends")}flowParseInterface(e){return this.flowParseInterfaceish(e,!1),this.finishNode(e,"InterfaceDeclaration")}checkNotUnderscore(e){e==="_"&&this.raise(g.UnexpectedReservedUnderscore,this.state.startLoc);}checkReservedType(e,s,i){Oi.has(e)&&this.raise(i?g.AssignReservedType:g.UnexpectedReservedType,s,{reservedType:e});}flowParseRestrictedIdentifier(e,s){return this.checkReservedType(this.state.value,this.state.startLoc,s),this.parseIdentifier(e)}flowParseTypeAlias(e){return e.id=this.flowParseRestrictedIdentifier(!1,!0),this.scope.declareName(e.id.name,8201,e.id.loc.start),this.match(47)?e.typeParameters=this.flowParseTypeParameterDeclaration():e.typeParameters=null,e.right=this.flowParseTypeInitialiser(29),this.semicolon(),this.finishNode(e,"TypeAlias")}flowParseOpaqueType(e,s){return this.expectContextual(130),e.id=this.flowParseRestrictedIdentifier(!0,!0),this.scope.declareName(e.id.name,8201,e.id.loc.start),this.match(47)?e.typeParameters=this.flowParseTypeParameterDeclaration():e.typeParameters=null,e.supertype=null,this.match(14)&&(e.supertype=this.flowParseTypeInitialiser(14)),e.impltype=null,s||(e.impltype=this.flowParseTypeInitialiser(29)),this.semicolon(),this.finishNode(e,"OpaqueType")}flowParseTypeParameter(e=!1){let s=this.state.startLoc,i=this.startNode(),r=this.flowParseVariance(),n=this.flowParseTypeAnnotatableIdentifier();return i.name=n.name,i.variance=r,i.bound=n.typeAnnotation,this.match(29)?(this.eat(29),i.default=this.flowParseType()):e&&this.raise(g.MissingTypeParamDefault,s),this.finishNode(i,"TypeParameter")}flowParseTypeParameterDeclaration(){let e=this.state.inType,s=this.startNode();s.params=[],this.state.inType=!0,this.match(47)||this.match(143)?this.next():this.unexpected();let i=!1;do{let r=this.flowParseTypeParameter(i);s.params.push(r),r.default&&(i=!0),this.match(48)||this.expect(12);}while(!this.match(48));return this.expect(48),this.state.inType=e,this.finishNode(s,"TypeParameterDeclaration")}flowParseTypeParameterInstantiation(){let e=this.startNode(),s=this.state.inType;e.params=[],this.state.inType=!0,this.expect(47);let i=this.state.noAnonFunctionType;for(this.state.noAnonFunctionType=!1;!this.match(48);)e.params.push(this.flowParseType()),this.match(48)||this.expect(12);return this.state.noAnonFunctionType=i,this.expect(48),this.state.inType=s,this.finishNode(e,"TypeParameterInstantiation")}flowParseTypeParameterInstantiationCallOrNew(){let e=this.startNode(),s=this.state.inType;for(e.params=[],this.state.inType=!0,this.expect(47);!this.match(48);)e.params.push(this.flowParseTypeOrImplicitInstantiation()),this.match(48)||this.expect(12);return this.expect(48),this.state.inType=s,this.finishNode(e,"TypeParameterInstantiation")}flowParseInterfaceType(){let e=this.startNode();if(this.expectContextual(129),e.extends=[],this.eat(81))do e.extends.push(this.flowParseInterfaceExtends());while(this.eat(12));return e.body=this.flowParseObjectType({allowStatic:!1,allowExact:!1,allowSpread:!1,allowProto:!1,allowInexact:!1}),this.finishNode(e,"InterfaceTypeAnnotation")}flowParseObjectPropertyKey(){return this.match(135)||this.match(134)?super.parseExprAtom():this.parseIdentifier(!0)}flowParseObjectTypeIndexer(e,s,i){return e.static=s,this.lookahead().type===14?(e.id=this.flowParseObjectPropertyKey(),e.key=this.flowParseTypeInitialiser()):(e.id=null,e.key=this.flowParseType()),this.expect(3),e.value=this.flowParseTypeInitialiser(),e.variance=i,this.finishNode(e,"ObjectTypeIndexer")}flowParseObjectTypeInternalSlot(e,s){return e.static=s,e.id=this.flowParseObjectPropertyKey(),this.expect(3),this.expect(3),this.match(47)||this.match(10)?(e.method=!0,e.optional=!1,e.value=this.flowParseObjectTypeMethodish(this.startNodeAt(e.loc.start))):(e.method=!1,this.eat(17)&&(e.optional=!0),e.value=this.flowParseTypeInitialiser()),this.finishNode(e,"ObjectTypeInternalSlot")}flowParseObjectTypeMethodish(e){for(e.params=[],e.rest=null,e.typeParameters=null,e.this=null,this.match(47)&&(e.typeParameters=this.flowParseTypeParameterDeclaration()),this.expect(10),this.match(78)&&(e.this=this.flowParseFunctionTypeParam(!0),e.this.name=null,this.match(11)||this.expect(12));!this.match(11)&&!this.match(21);)e.params.push(this.flowParseFunctionTypeParam(!1)),this.match(11)||this.expect(12);return this.eat(21)&&(e.rest=this.flowParseFunctionTypeParam(!1)),this.expect(11),e.returnType=this.flowParseTypeInitialiser(),this.finishNode(e,"FunctionTypeAnnotation")}flowParseObjectTypeCallProperty(e,s){let i=this.startNode();return e.static=s,e.value=this.flowParseObjectTypeMethodish(i),this.finishNode(e,"ObjectTypeCallProperty")}flowParseObjectType({allowStatic:e,allowExact:s,allowSpread:i,allowProto:r,allowInexact:n}){let o=this.state.inType;this.state.inType=!0;let h=this.startNode();h.callProperties=[],h.properties=[],h.indexers=[],h.internalSlots=[];let l,c,u=!1;for(s&&this.match(6)?(this.expect(6),l=9,c=!0):(this.expect(5),l=8,c=!1),h.exact=c;!this.match(l);){let d=!1,x=null,S=null,N=this.startNode();if(r&&this.isContextual(118)){let I=this.lookahead();I.type!==14&&I.type!==17&&(this.next(),x=this.state.startLoc,e=!1);}if(e&&this.isContextual(106)){let I=this.lookahead();I.type!==14&&I.type!==17&&(this.next(),d=!0);}let w=this.flowParseVariance();if(this.eat(0))x!=null&&this.unexpected(x),this.eat(0)?(w&&this.unexpected(w.loc.start),h.internalSlots.push(this.flowParseObjectTypeInternalSlot(N,d))):h.indexers.push(this.flowParseObjectTypeIndexer(N,d,w));else if(this.match(10)||this.match(47))x!=null&&this.unexpected(x),w&&this.unexpected(w.loc.start),h.callProperties.push(this.flowParseObjectTypeCallProperty(N,d));else {let I="init";if(this.isContextual(99)||this.isContextual(104)){let ae=this.lookahead();Vt(ae.type)&&(I=this.state.value,this.next());}let Te=this.flowParseObjectTypeProperty(N,d,x,w,I,i,n??!c);Te===null?(u=!0,S=this.state.lastTokStartLoc):h.properties.push(Te);}this.flowObjectTypeSemicolon(),S&&!this.match(8)&&!this.match(9)&&this.raise(g.UnexpectedExplicitInexactInObject,S);}this.expect(l),i&&(h.inexact=u);let f=this.finishNode(h,"ObjectTypeAnnotation");return this.state.inType=o,f}flowParseObjectTypeProperty(e,s,i,r,n,o,h){if(this.eat(21))return this.match(12)||this.match(13)||this.match(8)||this.match(9)?(o?h||this.raise(g.InexactInsideExact,this.state.lastTokStartLoc):this.raise(g.InexactInsideNonObject,this.state.lastTokStartLoc),r&&this.raise(g.InexactVariance,r),null):(o||this.raise(g.UnexpectedSpreadType,this.state.lastTokStartLoc),i!=null&&this.unexpected(i),r&&this.raise(g.SpreadVariance,r),e.argument=this.flowParseType(),this.finishNode(e,"ObjectTypeSpreadProperty"));{e.key=this.flowParseObjectPropertyKey(),e.static=s,e.proto=i!=null,e.kind=n;let l=!1;return this.match(47)||this.match(10)?(e.method=!0,i!=null&&this.unexpected(i),r&&this.unexpected(r.loc.start),e.value=this.flowParseObjectTypeMethodish(this.startNodeAt(e.loc.start)),(n==="get"||n==="set")&&this.flowCheckGetterSetterParams(e),!o&&e.key.name==="constructor"&&e.value.this&&this.raise(g.ThisParamBannedInConstructor,e.value.this)):(n!=="init"&&this.unexpected(),e.method=!1,this.eat(17)&&(l=!0),e.value=this.flowParseTypeInitialiser(),e.variance=r),e.optional=l,this.finishNode(e,"ObjectTypeProperty")}}flowCheckGetterSetterParams(e){let s=e.kind==="get"?0:1,i=e.value.params.length+(e.value.rest?1:0);e.value.this&&this.raise(e.kind==="get"?g.GetterMayNotHaveThisParam:g.SetterMayNotHaveThisParam,e.value.this),i!==s&&this.raise(e.kind==="get"?p.BadGetterArity:p.BadSetterArity,e),e.kind==="set"&&e.value.rest&&this.raise(p.BadSetterRestParameter,e);}flowObjectTypeSemicolon(){!this.eat(13)&&!this.eat(12)&&!this.match(8)&&!this.match(9)&&this.unexpected();}flowParseQualifiedTypeIdentifier(e,s){(e)!=null||(e=this.state.startLoc);let r=s||this.flowParseRestrictedIdentifier(!0);for(;this.eat(16);){let n=this.startNodeAt(e);n.qualification=r,n.id=this.flowParseRestrictedIdentifier(!0),r=this.finishNode(n,"QualifiedTypeIdentifier");}return r}flowParseGenericType(e,s){let i=this.startNodeAt(e);return i.typeParameters=null,i.id=this.flowParseQualifiedTypeIdentifier(e,s),this.match(47)&&(i.typeParameters=this.flowParseTypeParameterInstantiation()),this.finishNode(i,"GenericTypeAnnotation")}flowParseTypeofType(){let e=this.startNode();return this.expect(87),e.argument=this.flowParsePrimaryType(),this.finishNode(e,"TypeofTypeAnnotation")}flowParseTupleType(){let e=this.startNode();for(e.types=[],this.expect(0);this.state.pos<this.length&&!this.match(3)&&(e.types.push(this.flowParseType()),!this.match(3));)this.expect(12);return this.expect(3),this.finishNode(e,"TupleTypeAnnotation")}flowParseFunctionTypeParam(e){let s=null,i=!1,r=null,n=this.startNode(),o=this.lookahead(),h=this.state.type===78;return o.type===14||o.type===17?(h&&!e&&this.raise(g.ThisParamMustBeFirst,n),s=this.parseIdentifier(h),this.eat(17)&&(i=!0,h&&this.raise(g.ThisParamMayNotBeOptional,n)),r=this.flowParseTypeInitialiser()):r=this.flowParseType(),n.name=s,n.optional=i,n.typeAnnotation=r,this.finishNode(n,"FunctionTypeParam")}reinterpretTypeAsFunctionTypeParam(e){let s=this.startNodeAt(e.loc.start);return s.name=null,s.optional=!1,s.typeAnnotation=e,this.finishNode(s,"FunctionTypeParam")}flowParseFunctionTypeParams(e=[]){let s=null,i=null;for(this.match(78)&&(i=this.flowParseFunctionTypeParam(!0),i.name=null,this.match(11)||this.expect(12));!this.match(11)&&!this.match(21);)e.push(this.flowParseFunctionTypeParam(!1)),this.match(11)||this.expect(12);return this.eat(21)&&(s=this.flowParseFunctionTypeParam(!1)),{params:e,rest:s,_this:i}}flowIdentToTypeAnnotation(e,s,i){switch(i.name){case"any":return this.finishNode(s,"AnyTypeAnnotation");case"bool":case"boolean":return this.finishNode(s,"BooleanTypeAnnotation");case"mixed":return this.finishNode(s,"MixedTypeAnnotation");case"empty":return this.finishNode(s,"EmptyTypeAnnotation");case"number":return this.finishNode(s,"NumberTypeAnnotation");case"string":return this.finishNode(s,"StringTypeAnnotation");case"symbol":return this.finishNode(s,"SymbolTypeAnnotation");default:return this.checkNotUnderscore(i.name),this.flowParseGenericType(e,i)}}flowParsePrimaryType(){let e=this.state.startLoc,s=this.startNode(),i,r,n=!1,o=this.state.noAnonFunctionType;switch(this.state.type){case 5:return this.flowParseObjectType({allowStatic:!1,allowExact:!1,allowSpread:!0,allowProto:!1,allowInexact:!0});case 6:return this.flowParseObjectType({allowStatic:!1,allowExact:!0,allowSpread:!0,allowProto:!1,allowInexact:!1});case 0:return this.state.noAnonFunctionType=!1,r=this.flowParseTupleType(),this.state.noAnonFunctionType=o,r;case 47:{let h=this.startNode();return h.typeParameters=this.flowParseTypeParameterDeclaration(),this.expect(10),i=this.flowParseFunctionTypeParams(),h.params=i.params,h.rest=i.rest,h.this=i._this,this.expect(11),this.expect(19),h.returnType=this.flowParseType(),this.finishNode(h,"FunctionTypeAnnotation")}case 10:{let h=this.startNode();if(this.next(),!this.match(11)&&!this.match(21))if(C(this.state.type)||this.match(78)){let l=this.lookahead().type;n=l!==17&&l!==14;}else n=!0;if(n){if(this.state.noAnonFunctionType=!1,r=this.flowParseType(),this.state.noAnonFunctionType=o,this.state.noAnonFunctionType||!(this.match(12)||this.match(11)&&this.lookahead().type===19))return this.expect(11),r;this.eat(12);}return r?i=this.flowParseFunctionTypeParams([this.reinterpretTypeAsFunctionTypeParam(r)]):i=this.flowParseFunctionTypeParams(),h.params=i.params,h.rest=i.rest,h.this=i._this,this.expect(11),this.expect(19),h.returnType=this.flowParseType(),h.typeParameters=null,this.finishNode(h,"FunctionTypeAnnotation")}case 134:return this.parseLiteral(this.state.value,"StringLiteralTypeAnnotation");case 85:case 86:return s.value=this.match(85),this.next(),this.finishNode(s,"BooleanLiteralTypeAnnotation");case 53:if(this.state.value==="-"){if(this.next(),this.match(135))return this.parseLiteralAtNode(-this.state.value,"NumberLiteralTypeAnnotation",s);if(this.match(136))return this.parseLiteralAtNode(-this.state.value,"BigIntLiteralTypeAnnotation",s);throw this.raise(g.UnexpectedSubtractionOperand,this.state.startLoc)}this.unexpected();return;case 135:return this.parseLiteral(this.state.value,"NumberLiteralTypeAnnotation");case 136:return this.parseLiteral(this.state.value,"BigIntLiteralTypeAnnotation");case 88:return this.next(),this.finishNode(s,"VoidTypeAnnotation");case 84:return this.next(),this.finishNode(s,"NullLiteralTypeAnnotation");case 78:return this.next(),this.finishNode(s,"ThisTypeAnnotation");case 55:return this.next(),this.finishNode(s,"ExistsTypeAnnotation");case 87:return this.flowParseTypeofType();default:if(mt(this.state.type)){let h=q(this.state.type);return this.next(),super.createIdentifier(s,h)}else if(C(this.state.type))return this.isContextual(129)?this.flowParseInterfaceType():this.flowIdentToTypeAnnotation(e,s,this.parseIdentifier())}this.unexpected();}flowParsePostfixType(){let e=this.state.startLoc,s=this.flowParsePrimaryType(),i=!1;for(;(this.match(0)||this.match(18))&&!this.canInsertSemicolon();){let r=this.startNodeAt(e),n=this.eat(18);i=i||n,this.expect(0),!n&&this.match(3)?(r.elementType=s,this.next(),s=this.finishNode(r,"ArrayTypeAnnotation")):(r.objectType=s,r.indexType=this.flowParseType(),this.expect(3),i?(r.optional=n,s=this.finishNode(r,"OptionalIndexedAccessType")):s=this.finishNode(r,"IndexedAccessType"));}return s}flowParsePrefixType(){let e=this.startNode();return this.eat(17)?(e.typeAnnotation=this.flowParsePrefixType(),this.finishNode(e,"NullableTypeAnnotation")):this.flowParsePostfixType()}flowParseAnonFunctionWithoutParens(){let e=this.flowParsePrefixType();if(!this.state.noAnonFunctionType&&this.eat(19)){let s=this.startNodeAt(e.loc.start);return s.params=[this.reinterpretTypeAsFunctionTypeParam(e)],s.rest=null,s.this=null,s.returnType=this.flowParseType(),s.typeParameters=null,this.finishNode(s,"FunctionTypeAnnotation")}return e}flowParseIntersectionType(){let e=this.startNode();this.eat(45);let s=this.flowParseAnonFunctionWithoutParens();for(e.types=[s];this.eat(45);)e.types.push(this.flowParseAnonFunctionWithoutParens());return e.types.length===1?s:this.finishNode(e,"IntersectionTypeAnnotation")}flowParseUnionType(){let e=this.startNode();this.eat(43);let s=this.flowParseIntersectionType();for(e.types=[s];this.eat(43);)e.types.push(this.flowParseIntersectionType());return e.types.length===1?s:this.finishNode(e,"UnionTypeAnnotation")}flowParseType(){let e=this.state.inType;this.state.inType=!0;let s=this.flowParseUnionType();return this.state.inType=e,s}flowParseTypeOrImplicitInstantiation(){if(this.state.type===132&&this.state.value==="_"){let e=this.state.startLoc,s=this.parseIdentifier();return this.flowParseGenericType(e,s)}else return this.flowParseType()}flowParseTypeAnnotation(){let e=this.startNode();return e.typeAnnotation=this.flowParseTypeInitialiser(),this.finishNode(e,"TypeAnnotation")}flowParseTypeAnnotatableIdentifier(e){let s=e?this.parseIdentifier():this.flowParseRestrictedIdentifier();return this.match(14)&&(s.typeAnnotation=this.flowParseTypeAnnotation(),this.resetEndLocation(s)),s}typeCastToParameter(e){return e.expression.typeAnnotation=e.typeAnnotation,this.resetEndLocation(e.expression,e.typeAnnotation.loc.end),e.expression}flowParseVariance(){let e=null;return this.match(53)?(e=this.startNode(),this.state.value==="+"?e.kind="plus":e.kind="minus",this.next(),this.finishNode(e,"Variance")):e}parseFunctionBody(e,s,i=!1){if(s){this.forwardNoArrowParamsConversionAt(e,()=>super.parseFunctionBody(e,!0,i));return}super.parseFunctionBody(e,!1,i);}parseFunctionBodyAndFinish(e,s,i=!1){if(this.match(14)){let r=this.startNode();[r.typeAnnotation,e.predicate]=this.flowParseTypeAndPredicateInitialiser(),e.returnType=r.typeAnnotation?this.finishNode(r,"TypeAnnotation"):null;}return super.parseFunctionBodyAndFinish(e,s,i)}parseStatementLike(e){if(this.state.strict&&this.isContextual(129)){let i=this.lookahead();if(D(i.type)){let r=this.startNode();return this.next(),this.flowParseInterface(r)}}else if(this.isContextual(126)){let i=this.startNode();return this.next(),this.flowParseEnumDeclaration(i)}let s=super.parseStatementLike(e);return this.flowPragma===void 0&&!this.isValidDirective(s)&&(this.flowPragma=null),s}parseExpressionStatement(e,s,i){if(s.type==="Identifier"){if(s.name==="declare"){if(this.match(80)||C(this.state.type)||this.match(68)||this.match(74)||this.match(82))return this.flowParseDeclare(e)}else if(C(this.state.type)){if(s.name==="interface")return this.flowParseInterface(e);if(s.name==="type")return this.flowParseTypeAlias(e);if(s.name==="opaque")return this.flowParseOpaqueType(e,!1)}}return super.parseExpressionStatement(e,s,i)}shouldParseExportDeclaration(){let{type:e}=this.state;return e===126||Dt(e)?!this.state.containsEsc:super.shouldParseExportDeclaration()}isExportDefaultSpecifier(){let{type:e}=this.state;return e===126||Dt(e)?this.state.containsEsc:super.isExportDefaultSpecifier()}parseExportDefaultExpression(){if(this.isContextual(126)){let e=this.startNode();return this.next(),this.flowParseEnumDeclaration(e)}return super.parseExportDefaultExpression()}parseConditional(e,s,i){if(!this.match(17))return e;if(this.state.maybeInArrowParameters){let f=this.lookaheadCharCode();if(f===44||f===61||f===58||f===41)return this.setOptionalParametersError(i),e}this.expect(17);let r=this.state.clone(),n=this.state.noArrowAt,o=this.startNodeAt(s),{consequent:h,failed:l}=this.tryParseConditionalConsequent(),[c,u]=this.getArrowLikeExpressions(h);if(l||u.length>0){let f=[...n];if(u.length>0){this.state=r,this.state.noArrowAt=f;for(let d=0;d<u.length;d++)f.push(u[d].start);(({consequent:h,failed:l}=this.tryParseConditionalConsequent())),[c,u]=this.getArrowLikeExpressions(h);}l&&c.length>1&&this.raise(g.AmbiguousConditionalArrow,r.startLoc),l&&c.length===1&&(this.state=r,f.push(c[0].start),this.state.noArrowAt=f,{consequent:h,failed:l}=this.tryParseConditionalConsequent());}return this.getArrowLikeExpressions(h,!0),this.state.noArrowAt=n,this.expect(14),o.test=e,o.consequent=h,o.alternate=this.forwardNoArrowParamsConversionAt(o,()=>this.parseMaybeAssign(void 0,void 0)),this.finishNode(o,"ConditionalExpression")}tryParseConditionalConsequent(){this.state.noArrowParamsConversionAt.push(this.state.start);let e=this.parseMaybeAssignAllowIn(),s=!this.match(14);return this.state.noArrowParamsConversionAt.pop(),{consequent:e,failed:s}}getArrowLikeExpressions(e,s){let i=[e],r=[];for(;i.length!==0;){let n=i.pop();n.type==="ArrowFunctionExpression"&&n.body.type!=="BlockStatement"?(n.typeParameters||!n.returnType?this.finishArrowValidation(n):r.push(n),i.push(n.body)):n.type==="ConditionalExpression"&&(i.push(n.consequent),i.push(n.alternate));}return s?(r.forEach(n=>this.finishArrowValidation(n)),[r,[]]):Ri(r,n=>n.params.every(o=>this.isAssignable(o,!0)))}finishArrowValidation(e){var s;this.toAssignableList(e.params,(s=e.extra)==null?void 0:s.trailingCommaLoc,!1),this.scope.enter(6),super.checkParams(e,!1,!0),this.scope.exit();}forwardNoArrowParamsConversionAt(e,s){let i;return this.state.noArrowParamsConversionAt.includes(this.offsetToSourcePos(e.start))?(this.state.noArrowParamsConversionAt.push(this.state.start),i=s(),this.state.noArrowParamsConversionAt.pop()):i=s(),i}parseParenItem(e,s){let i=super.parseParenItem(e,s);if(this.eat(17)&&(i.optional=!0,this.resetEndLocation(e)),this.match(14)){let r=this.startNodeAt(s);return r.expression=i,r.typeAnnotation=this.flowParseTypeAnnotation(),this.finishNode(r,"TypeCastExpression")}return i}assertModuleNodeAllowed(e){e.type==="ImportDeclaration"&&(e.importKind==="type"||e.importKind==="typeof")||e.type==="ExportNamedDeclaration"&&e.exportKind==="type"||e.type==="ExportAllDeclaration"&&e.exportKind==="type"||super.assertModuleNodeAllowed(e);}parseExportDeclaration(e){if(this.isContextual(130)){e.exportKind="type";let s=this.startNode();return this.next(),this.match(5)?(e.specifiers=this.parseExportSpecifiers(!0),super.parseExportFrom(e),null):this.flowParseTypeAlias(s)}else if(this.isContextual(131)){e.exportKind="type";let s=this.startNode();return this.next(),this.flowParseOpaqueType(s,!1)}else if(this.isContextual(129)){e.exportKind="type";let s=this.startNode();return this.next(),this.flowParseInterface(s)}else if(this.isContextual(126)){e.exportKind="value";let s=this.startNode();return this.next(),this.flowParseEnumDeclaration(s)}else return super.parseExportDeclaration(e)}eatExportStar(e){return super.eatExportStar(e)?!0:this.isContextual(130)&&this.lookahead().type===55?(e.exportKind="type",this.next(),this.next(),!0):!1}maybeParseExportNamespaceSpecifier(e){let{startLoc:s}=this.state,i=super.maybeParseExportNamespaceSpecifier(e);return i&&e.exportKind==="type"&&this.unexpected(s),i}parseClassId(e,s,i){super.parseClassId(e,s,i),this.match(47)&&(e.typeParameters=this.flowParseTypeParameterDeclaration());}parseClassMember(e,s,i){let{startLoc:r}=this.state;if(this.isContextual(125)){if(super.parseClassMemberFromModifier(e,s))return;s.declare=!0;}super.parseClassMember(e,s,i),s.declare&&(s.type!=="ClassProperty"&&s.type!=="ClassPrivateProperty"&&s.type!=="PropertyDefinition"?this.raise(g.DeclareClassElement,r):s.value&&this.raise(g.DeclareClassFieldInitializer,s.value));}isIterator(e){return e==="iterator"||e==="asyncIterator"}readIterator(){let e=super.readWord1(),s="@@"+e;(!this.isIterator(e)||!this.state.inType)&&this.raise(p.InvalidIdentifier,this.state.curPosition(),{identifierName:s}),this.finishToken(132,s);}getTokenFromCode(e){let s=this.input.charCodeAt(this.state.pos+1);e===123&&s===124?this.finishOp(6,2):this.state.inType&&(e===62||e===60)?this.finishOp(e===62?48:47,1):this.state.inType&&e===63?s===46?this.finishOp(18,2):this.finishOp(17,1):gi(e,s,this.input.charCodeAt(this.state.pos+2))?(this.state.pos+=2,this.readIterator()):super.getTokenFromCode(e);}isAssignable(e,s){return e.type==="TypeCastExpression"?this.isAssignable(e.expression,s):super.isAssignable(e,s)}toAssignable(e,s=!1){!s&&e.type==="AssignmentExpression"&&e.left.type==="TypeCastExpression"&&(e.left=this.typeCastToParameter(e.left)),super.toAssignable(e,s);}toAssignableList(e,s,i){for(let r=0;r<e.length;r++){let n=e[r];(n==null?void 0:n.type)==="TypeCastExpression"&&(e[r]=this.typeCastToParameter(n));}super.toAssignableList(e,s,i);}toReferencedList(e,s){for(let r=0;r<e.length;r++){var i;let n=e[r];n&&n.type==="TypeCastExpression"&&!((i=n.extra)!=null&&i.parenthesized)&&(e.length>1||!s)&&this.raise(g.TypeCastInPattern,n.typeAnnotation);}return e}parseArrayLike(e,s,i,r){let n=super.parseArrayLike(e,s,i,r);return s&&!this.state.maybeInArrowParameters&&this.toReferencedList(n.elements),n}isValidLVal(e,s,i){return e==="TypeCastExpression"||super.isValidLVal(e,s,i)}parseClassProperty(e){return this.match(14)&&(e.typeAnnotation=this.flowParseTypeAnnotation()),super.parseClassProperty(e)}parseClassPrivateProperty(e){return this.match(14)&&(e.typeAnnotation=this.flowParseTypeAnnotation()),super.parseClassPrivateProperty(e)}isClassMethod(){return this.match(47)||super.isClassMethod()}isClassProperty(){return this.match(14)||super.isClassProperty()}isNonstaticConstructor(e){return !this.match(14)&&super.isNonstaticConstructor(e)}pushClassMethod(e,s,i,r,n,o){if(s.variance&&this.unexpected(s.variance.loc.start),delete s.variance,this.match(47)&&(s.typeParameters=this.flowParseTypeParameterDeclaration()),super.pushClassMethod(e,s,i,r,n,o),s.params&&n){let h=s.params;h.length>0&&this.isThisParam(h[0])&&this.raise(g.ThisParamBannedInConstructor,s);}else if(s.type==="MethodDefinition"&&n&&s.value.params){let h=s.value.params;h.length>0&&this.isThisParam(h[0])&&this.raise(g.ThisParamBannedInConstructor,s);}}pushClassPrivateMethod(e,s,i,r){s.variance&&this.unexpected(s.variance.loc.start),delete s.variance,this.match(47)&&(s.typeParameters=this.flowParseTypeParameterDeclaration()),super.pushClassPrivateMethod(e,s,i,r);}parseClassSuper(e){if(super.parseClassSuper(e),e.superClass&&this.match(47)&&(e.superTypeParameters=this.flowParseTypeParameterInstantiation()),this.isContextual(113)){this.next();let s=e.implements=[];do{let i=this.startNode();i.id=this.flowParseRestrictedIdentifier(!0),this.match(47)?i.typeParameters=this.flowParseTypeParameterInstantiation():i.typeParameters=null,s.push(this.finishNode(i,"ClassImplements"));}while(this.eat(12))}}checkGetterSetterParams(e){super.checkGetterSetterParams(e);let s=this.getObjectOrClassMethodParams(e);if(s.length>0){let i=s[0];this.isThisParam(i)&&e.kind==="get"?this.raise(g.GetterMayNotHaveThisParam,i):this.isThisParam(i)&&this.raise(g.SetterMayNotHaveThisParam,i);}}parsePropertyNamePrefixOperator(e){e.variance=this.flowParseVariance();}parseObjPropValue(e,s,i,r,n,o,h){e.variance&&this.unexpected(e.variance.loc.start),delete e.variance;let l;this.match(47)&&!o&&(l=this.flowParseTypeParameterDeclaration(),this.match(10)||this.unexpected());let c=super.parseObjPropValue(e,s,i,r,n,o,h);return l&&((c.value||c).typeParameters=l),c}parseFunctionParamType(e){return this.eat(17)&&(e.type!=="Identifier"&&this.raise(g.PatternIsOptional,e),this.isThisParam(e)&&this.raise(g.ThisParamMayNotBeOptional,e),e.optional=!0),this.match(14)?e.typeAnnotation=this.flowParseTypeAnnotation():this.isThisParam(e)&&this.raise(g.ThisParamAnnotationRequired,e),this.match(29)&&this.isThisParam(e)&&this.raise(g.ThisParamNoDefault,e),this.resetEndLocation(e),e}parseMaybeDefault(e,s){let i=super.parseMaybeDefault(e,s);return i.type==="AssignmentPattern"&&i.typeAnnotation&&i.right.start<i.typeAnnotation.start&&this.raise(g.TypeBeforeInitializer,i.typeAnnotation),i}checkImportReflection(e){super.checkImportReflection(e),e.module&&e.importKind!=="value"&&this.raise(g.ImportReflectionHasImportType,e.specifiers[0].loc.start);}parseImportSpecifierLocal(e,s,i){s.local=Bt(e)?this.flowParseRestrictedIdentifier(!0,!0):this.parseIdentifier(),e.specifiers.push(this.finishImportSpecifier(s,i));}isPotentialImportPhase(e){if(super.isPotentialImportPhase(e))return !0;if(this.isContextual(130)){if(!e)return !0;let s=this.lookaheadCharCode();return s===123||s===42}return !e&&this.isContextual(87)}applyImportPhase(e,s,i,r){if(super.applyImportPhase(e,s,i,r),s){if(!i&&this.match(65))return;e.exportKind=i==="type"?i:"value";}else i==="type"&&this.match(55)&&this.unexpected(),e.importKind=i==="type"||i==="typeof"?i:"value";}parseImportSpecifier(e,s,i,r,n){let o=e.imported,h=null;o.type==="Identifier"&&(o.name==="type"?h="type":o.name==="typeof"&&(h="typeof"));let l=!1;if(this.isContextual(93)&&!this.isLookaheadContextual("as")){let u=this.parseIdentifier(!0);h!==null&&!D(this.state.type)?(e.imported=u,e.importKind=h,e.local=_(u)):(e.imported=o,e.importKind=null,e.local=this.parseIdentifier());}else {if(h!==null&&D(this.state.type))e.imported=this.parseIdentifier(!0),e.importKind=h;else {if(s)throw this.raise(p.ImportBindingIsString,e,{importName:o.value});e.imported=o,e.importKind=null;}this.eatContextual(93)?e.local=this.parseIdentifier():(l=!0,e.local=_(e.imported));}let c=Bt(e);return i&&c&&this.raise(g.ImportTypeShorthandOnlyInPureImport,e),(i||c)&&this.checkReservedType(e.local.name,e.local.loc.start,!0),l&&!i&&!c&&this.checkReservedWord(e.local.name,e.loc.start,!0,!0),this.finishImportSpecifier(e,"ImportSpecifier")}parseBindingAtom(){switch(this.state.type){case 78:return this.parseIdentifier(!0);default:return super.parseBindingAtom()}}parseFunctionParams(e,s){let i=e.kind;i!=="get"&&i!=="set"&&this.match(47)&&(e.typeParameters=this.flowParseTypeParameterDeclaration()),super.parseFunctionParams(e,s);}parseVarId(e,s){super.parseVarId(e,s),this.match(14)&&(e.id.typeAnnotation=this.flowParseTypeAnnotation(),this.resetEndLocation(e.id));}parseAsyncArrowFromCallExpression(e,s){if(this.match(14)){let i=this.state.noAnonFunctionType;this.state.noAnonFunctionType=!0,e.returnType=this.flowParseTypeAnnotation(),this.state.noAnonFunctionType=i;}return super.parseAsyncArrowFromCallExpression(e,s)}shouldParseAsyncArrow(){return this.match(14)||super.shouldParseAsyncArrow()}parseMaybeAssign(e,s){var i;let r=null,n;if(this.hasPlugin("jsx")&&(this.match(143)||this.match(47))){if(r=this.state.clone(),n=this.tryParse(()=>super.parseMaybeAssign(e,s),r),!n.error)return n.node;let{context:l}=this.state,c=l[l.length-1];(c===E.j_oTag||c===E.j_expr)&&l.pop();}if((i=n)!=null&&i.error||this.match(47)){var o,h;r=r||this.state.clone();let l,c=this.tryParse(f=>{var d;l=this.flowParseTypeParameterDeclaration();let x=this.forwardNoArrowParamsConversionAt(l,()=>{let N=super.parseMaybeAssign(e,s);return this.resetStartLocationFromNode(N,l),N});(d=x.extra)!=null&&d.parenthesized&&f();let S=this.maybeUnwrapTypeCastExpression(x);return S.type!=="ArrowFunctionExpression"&&f(),S.typeParameters=l,this.resetStartLocationFromNode(S,l),x},r),u=null;if(c.node&&this.maybeUnwrapTypeCastExpression(c.node).type==="ArrowFunctionExpression"){if(!c.error&&!c.aborted)return c.node.async&&this.raise(g.UnexpectedTypeParameterBeforeAsyncArrowFunction,l),c.node;u=c.node;}if((o=n)!=null&&o.node)return this.state=n.failState,n.node;if(u)return this.state=c.failState,u;throw (h=n)!=null&&h.thrown?n.error:c.thrown?c.error:this.raise(g.UnexpectedTokenAfterTypeParameter,l)}return super.parseMaybeAssign(e,s)}parseArrow(e){if(this.match(14)){let s=this.tryParse(()=>{let i=this.state.noAnonFunctionType;this.state.noAnonFunctionType=!0;let r=this.startNode();return [r.typeAnnotation,e.predicate]=this.flowParseTypeAndPredicateInitialiser(),this.state.noAnonFunctionType=i,this.canInsertSemicolon()&&this.unexpected(),this.match(19)||this.unexpected(),r});if(s.thrown)return null;s.error&&(this.state=s.failState),e.returnType=s.node.typeAnnotation?this.finishNode(s.node,"TypeAnnotation"):null;}return super.parseArrow(e)}shouldParseArrow(e){return this.match(14)||super.shouldParseArrow(e)}setArrowFunctionParameters(e,s){this.state.noArrowParamsConversionAt.includes(this.offsetToSourcePos(e.start))?e.params=s:super.setArrowFunctionParameters(e,s);}checkParams(e,s,i,r=!0){if(!(i&&this.state.noArrowParamsConversionAt.includes(this.offsetToSourcePos(e.start)))){for(let n=0;n<e.params.length;n++)this.isThisParam(e.params[n])&&n>0&&this.raise(g.ThisParamMustBeFirst,e.params[n]);super.checkParams(e,s,i,r);}}parseParenAndDistinguishExpression(e){return super.parseParenAndDistinguishExpression(e&&!this.state.noArrowAt.includes(this.sourceToOffsetPos(this.state.start)))}parseSubscripts(e,s,i){if(e.type==="Identifier"&&e.name==="async"&&this.state.noArrowAt.includes(s.index)){this.next();let r=this.startNodeAt(s);r.callee=e,r.arguments=super.parseCallExpressionArguments(11),e=this.finishNode(r,"CallExpression");}else if(e.type==="Identifier"&&e.name==="async"&&this.match(47)){let r=this.state.clone(),n=this.tryParse(h=>this.parseAsyncArrowWithTypeParameters(s)||h(),r);if(!n.error&&!n.aborted)return n.node;let o=this.tryParse(()=>super.parseSubscripts(e,s,i),r);if(o.node&&!o.error)return o.node;if(n.node)return this.state=n.failState,n.node;if(o.node)return this.state=o.failState,o.node;throw n.error||o.error}return super.parseSubscripts(e,s,i)}parseSubscript(e,s,i,r){if(this.match(18)&&this.isLookaheadToken_lt()){if(r.optionalChainMember=!0,i)return r.stop=!0,e;this.next();let n=this.startNodeAt(s);return n.callee=e,n.typeArguments=this.flowParseTypeParameterInstantiation(),this.expect(10),n.arguments=this.parseCallExpressionArguments(11),n.optional=!0,this.finishCallExpression(n,!0)}else if(!i&&this.shouldParseTypes()&&this.match(47)){let n=this.startNodeAt(s);n.callee=e;let o=this.tryParse(()=>(n.typeArguments=this.flowParseTypeParameterInstantiationCallOrNew(),this.expect(10),n.arguments=super.parseCallExpressionArguments(11),r.optionalChainMember&&(n.optional=!1),this.finishCallExpression(n,r.optionalChainMember)));if(o.node)return o.error&&(this.state=o.failState),o.node}return super.parseSubscript(e,s,i,r)}parseNewCallee(e){super.parseNewCallee(e);let s=null;this.shouldParseTypes()&&this.match(47)&&(s=this.tryParse(()=>this.flowParseTypeParameterInstantiationCallOrNew()).node),e.typeArguments=s;}parseAsyncArrowWithTypeParameters(e){let s=this.startNodeAt(e);if(this.parseFunctionParams(s,!1),!!this.parseArrow(s))return super.parseArrowExpression(s,void 0,!0)}readToken_mult_modulo(e){let s=this.input.charCodeAt(this.state.pos+1);if(e===42&&s===47&&this.state.hasFlowComment){this.state.hasFlowComment=!1,this.state.pos+=2,this.nextToken();return}super.readToken_mult_modulo(e);}readToken_pipe_amp(e){let s=this.input.charCodeAt(this.state.pos+1);if(e===124&&s===125){this.finishOp(9,2);return}super.readToken_pipe_amp(e);}parseTopLevel(e,s){let i=super.parseTopLevel(e,s);return this.state.hasFlowComment&&this.raise(g.UnterminatedFlowComment,this.state.curPosition()),i}skipBlockComment(){if(this.hasPlugin("flowComments")&&this.skipFlowComment()){if(this.state.hasFlowComment)throw this.raise(g.NestedFlowComment,this.state.startLoc);this.hasFlowCommentCompletion();let e=this.skipFlowComment();e&&(this.state.pos+=e,this.state.hasFlowComment=!0);return}return super.skipBlockComment(this.state.hasFlowComment?"*-/":"*/")}skipFlowComment(){let{pos:e}=this.state,s=2;for(;[32,9].includes(this.input.charCodeAt(e+s));)s++;let i=this.input.charCodeAt(s+e),r=this.input.charCodeAt(s+e+1);return i===58&&r===58?s+2:this.input.slice(s+e,s+e+12)==="flow-include"?s+12:i===58&&r!==58?s:!1}hasFlowCommentCompletion(){if(this.input.indexOf("*/",this.state.pos)===-1)throw this.raise(p.UnterminatedComment,this.state.curPosition())}flowEnumErrorBooleanMemberNotInitialized(e,{enumName:s,memberName:i}){this.raise(g.EnumBooleanMemberNotInitialized,e,{memberName:i,enumName:s});}flowEnumErrorInvalidMemberInitializer(e,s){return this.raise(s.explicitType?s.explicitType==="symbol"?g.EnumInvalidMemberInitializerSymbolType:g.EnumInvalidMemberInitializerPrimaryType:g.EnumInvalidMemberInitializerUnknownType,e,s)}flowEnumErrorNumberMemberNotInitialized(e,s){this.raise(g.EnumNumberMemberNotInitialized,e,s);}flowEnumErrorStringMemberInconsistentlyInitialized(e,s){this.raise(g.EnumStringMemberInconsistentlyInitialized,e,s);}flowEnumMemberInit(){let e=this.state.startLoc,s=()=>this.match(12)||this.match(8);switch(this.state.type){case 135:{let i=this.parseNumericLiteral(this.state.value);return s()?{type:"number",loc:i.loc.start,value:i}:{type:"invalid",loc:e}}case 134:{let i=this.parseStringLiteral(this.state.value);return s()?{type:"string",loc:i.loc.start,value:i}:{type:"invalid",loc:e}}case 85:case 86:{let i=this.parseBooleanLiteral(this.match(85));return s()?{type:"boolean",loc:i.loc.start,value:i}:{type:"invalid",loc:e}}default:return {type:"invalid",loc:e}}}flowEnumMemberRaw(){let e=this.state.startLoc,s=this.parseIdentifier(!0),i=this.eat(29)?this.flowEnumMemberInit():{type:"none",loc:e};return {id:s,init:i}}flowEnumCheckExplicitTypeMismatch(e,s,i){let{explicitType:r}=s;r!==null&&r!==i&&this.flowEnumErrorInvalidMemberInitializer(e,s);}flowEnumMembers({enumName:e,explicitType:s}){let i=new Set,r={booleanMembers:[],numberMembers:[],stringMembers:[],defaultedMembers:[]},n=!1;for(;!this.match(8);){if(this.eat(21)){n=!0;break}let o=this.startNode(),{id:h,init:l}=this.flowEnumMemberRaw(),c=h.name;if(c==="")continue;/^[a-z]/.test(c)&&this.raise(g.EnumInvalidMemberName,h,{memberName:c,suggestion:c[0].toUpperCase()+c.slice(1),enumName:e}),i.has(c)&&this.raise(g.EnumDuplicateMemberName,h,{memberName:c,enumName:e}),i.add(c);let u={enumName:e,explicitType:s,memberName:c};switch(o.id=h,l.type){case"boolean":{this.flowEnumCheckExplicitTypeMismatch(l.loc,u,"boolean"),o.init=l.value,r.booleanMembers.push(this.finishNode(o,"EnumBooleanMember"));break}case"number":{this.flowEnumCheckExplicitTypeMismatch(l.loc,u,"number"),o.init=l.value,r.numberMembers.push(this.finishNode(o,"EnumNumberMember"));break}case"string":{this.flowEnumCheckExplicitTypeMismatch(l.loc,u,"string"),o.init=l.value,r.stringMembers.push(this.finishNode(o,"EnumStringMember"));break}case"invalid":throw this.flowEnumErrorInvalidMemberInitializer(l.loc,u);case"none":switch(s){case"boolean":this.flowEnumErrorBooleanMemberNotInitialized(l.loc,u);break;case"number":this.flowEnumErrorNumberMemberNotInitialized(l.loc,u);break;default:r.defaultedMembers.push(this.finishNode(o,"EnumDefaultedMember"));}}this.match(8)||this.expect(12);}return {members:r,hasUnknownMembers:n}}flowEnumStringMembers(e,s,{enumName:i}){if(e.length===0)return s;if(s.length===0)return e;if(s.length>e.length){for(let r of e)this.flowEnumErrorStringMemberInconsistentlyInitialized(r,{enumName:i});return s}else {for(let r of s)this.flowEnumErrorStringMemberInconsistentlyInitialized(r,{enumName:i});return e}}flowEnumParseExplicitType({enumName:e}){if(!this.eatContextual(102))return null;if(!C(this.state.type))throw this.raise(g.EnumInvalidExplicitTypeUnknownSupplied,this.state.startLoc,{enumName:e});let{value:s}=this.state;return this.next(),s!=="boolean"&&s!=="number"&&s!=="string"&&s!=="symbol"&&this.raise(g.EnumInvalidExplicitType,this.state.startLoc,{enumName:e,invalidEnumType:s}),s}flowEnumBody(e,s){let i=s.name,r=s.loc.start,n=this.flowEnumParseExplicitType({enumName:i});this.expect(5);let{members:o,hasUnknownMembers:h}=this.flowEnumMembers({enumName:i,explicitType:n});switch(e.hasUnknownMembers=h,n){case"boolean":return e.explicitType=!0,e.members=o.booleanMembers,this.expect(8),this.finishNode(e,"EnumBooleanBody");case"number":return e.explicitType=!0,e.members=o.numberMembers,this.expect(8),this.finishNode(e,"EnumNumberBody");case"string":return e.explicitType=!0,e.members=this.flowEnumStringMembers(o.stringMembers,o.defaultedMembers,{enumName:i}),this.expect(8),this.finishNode(e,"EnumStringBody");case"symbol":return e.members=o.defaultedMembers,this.expect(8),this.finishNode(e,"EnumSymbolBody");default:{let l=()=>(e.members=[],this.expect(8),this.finishNode(e,"EnumStringBody"));e.explicitType=!1;let c=o.booleanMembers.length,u=o.numberMembers.length,f=o.stringMembers.length,d=o.defaultedMembers.length;if(!c&&!u&&!f&&!d)return l();if(!c&&!u)return e.members=this.flowEnumStringMembers(o.stringMembers,o.defaultedMembers,{enumName:i}),this.expect(8),this.finishNode(e,"EnumStringBody");if(!u&&!f&&c>=d){for(let x of o.defaultedMembers)this.flowEnumErrorBooleanMemberNotInitialized(x.loc.start,{enumName:i,memberName:x.id.name});return e.members=o.booleanMembers,this.expect(8),this.finishNode(e,"EnumBooleanBody")}else if(!c&&!f&&u>=d){for(let x of o.defaultedMembers)this.flowEnumErrorNumberMemberNotInitialized(x.loc.start,{enumName:i,memberName:x.id.name});return e.members=o.numberMembers,this.expect(8),this.finishNode(e,"EnumNumberBody")}else return this.raise(g.EnumInconsistentMemberValues,r,{enumName:i}),l()}}}flowParseEnumDeclaration(e){let s=this.parseIdentifier();return e.id=s,e.body=this.flowEnumBody(this.startNode(),s),this.finishNode(e,"EnumDeclaration")}isLookaheadToken_lt(){let e=this.nextTokenStart();if(this.input.charCodeAt(e)===60){let s=this.input.charCodeAt(e+1);return s!==60&&s!==61}return !1}maybeUnwrapTypeCastExpression(e){return e.type==="TypeCastExpression"?e.expression:e}},H=U`jsx`({AttributeIsEmpty:"JSX attributes must only be assigned a non-empty expression.",MissingClosingTagElement:({openingTagName:a})=>`Expected corresponding JSX closing tag for <${a}>.`,MissingClosingTagFragment:"Expected corresponding JSX closing tag for <>.",UnexpectedSequenceExpression:"Sequence expressions cannot be directly nested inside JSX. Did you mean to wrap it in parentheses (...)?",UnexpectedToken:({unexpected:a,HTMLEntity:t})=>`Unexpected token \`${a}\`. Did you mean \`${t}\` or \`{'${a}'}\`?`,UnsupportedJsxValue:"JSX value should be either an expression or a quoted JSX text.",UnterminatedJsxContent:"Unterminated JSX contents.",UnwrappedAdjacentJSXElements:"Adjacent JSX elements must be wrapped in an enclosing tag. Did you want a JSX fragment <>...</>?"});function V(a){return a?a.type==="JSXOpeningFragment"||a.type==="JSXClosingFragment":!1}function X(a){if(a.type==="JSXIdentifier")return a.name;if(a.type==="JSXNamespacedName")return a.namespace.name+":"+a.name.name;if(a.type==="JSXMemberExpression")return X(a.object)+"."+X(a.property);throw new Error("Node had unexpected type: "+a.type)}var ji=a=>class extends a{jsxReadToken(){let e="",s=this.state.pos;for(;;){if(this.state.pos>=this.length)throw this.raise(H.UnterminatedJsxContent,this.state.startLoc);let i=this.input.charCodeAt(this.state.pos);switch(i){case 60:case 123:if(this.state.pos===this.state.start){i===60&&this.state.canStartJSXElement?(++this.state.pos,this.finishToken(143)):super.getTokenFromCode(i);return}e+=this.input.slice(s,this.state.pos),this.finishToken(142,e);return;case 38:e+=this.input.slice(s,this.state.pos),e+=this.jsxReadEntity(),s=this.state.pos;break;case 62:case 125:default:Y(i)?(e+=this.input.slice(s,this.state.pos),e+=this.jsxReadNewLine(!0),s=this.state.pos):++this.state.pos;}}}jsxReadNewLine(e){let s=this.input.charCodeAt(this.state.pos),i;return ++this.state.pos,s===13&&this.input.charCodeAt(this.state.pos)===10?(++this.state.pos,i=e?`
`:`\r
`):i=String.fromCharCode(s),++this.state.curLine,this.state.lineStart=this.state.pos,i}jsxReadString(e){let s="",i=++this.state.pos;for(;;){if(this.state.pos>=this.length)throw this.raise(p.UnterminatedString,this.state.startLoc);let r=this.input.charCodeAt(this.state.pos);if(r===e)break;r===38?(s+=this.input.slice(i,this.state.pos),s+=this.jsxReadEntity(),i=this.state.pos):Y(r)?(s+=this.input.slice(i,this.state.pos),s+=this.jsxReadNewLine(!1),i=this.state.pos):++this.state.pos;}s+=this.input.slice(i,this.state.pos++),this.finishToken(134,s);}jsxReadEntity(){let e=++this.state.pos;if(this.codePointAtPos(this.state.pos)===35){++this.state.pos;let s=10;this.codePointAtPos(this.state.pos)===120&&(s=16,++this.state.pos);let i=this.readInt(s,void 0,!1,"bail");if(i!==null&&this.codePointAtPos(this.state.pos)===59)return ++this.state.pos,String.fromCodePoint(i)}else {let s=0,i=!1;for(;s++<10&&this.state.pos<this.length&&!(i=this.codePointAtPos(this.state.pos)===59);)++this.state.pos;if(i){this.input.slice(e,this.state.pos);let n=void 0;if(++this.state.pos,n);}}return this.state.pos=e,"&"}jsxReadWord(){let e,s=this.state.pos;do e=this.input.charCodeAt(++this.state.pos);while(G(e)||e===45);this.finishToken(141,this.input.slice(s,this.state.pos));}jsxParseIdentifier(){let e=this.startNode();return this.match(141)?e.name=this.state.value:mt(this.state.type)?e.name=q(this.state.type):this.unexpected(),this.next(),this.finishNode(e,"JSXIdentifier")}jsxParseNamespacedName(){let e=this.state.startLoc,s=this.jsxParseIdentifier();if(!this.eat(14))return s;let i=this.startNodeAt(e);return i.namespace=s,i.name=this.jsxParseIdentifier(),this.finishNode(i,"JSXNamespacedName")}jsxParseElementName(){let e=this.state.startLoc,s=this.jsxParseNamespacedName();if(s.type==="JSXNamespacedName")return s;for(;this.eat(16);){let i=this.startNodeAt(e);i.object=s,i.property=this.jsxParseIdentifier(),s=this.finishNode(i,"JSXMemberExpression");}return s}jsxParseAttributeValue(){let e;switch(this.state.type){case 5:return e=this.startNode(),this.setContext(E.brace),this.next(),e=this.jsxParseExpressionContainer(e,E.j_oTag),e.expression.type==="JSXEmptyExpression"&&this.raise(H.AttributeIsEmpty,e),e;case 143:case 134:return this.parseExprAtom();default:throw this.raise(H.UnsupportedJsxValue,this.state.startLoc)}}jsxParseEmptyExpression(){let e=this.startNodeAt(this.state.lastTokEndLoc);return this.finishNodeAt(e,"JSXEmptyExpression",this.state.startLoc)}jsxParseSpreadChild(e){return this.next(),e.expression=this.parseExpression(),this.setContext(E.j_expr),this.state.canStartJSXElement=!0,this.expect(8),this.finishNode(e,"JSXSpreadChild")}jsxParseExpressionContainer(e,s){if(this.match(8))e.expression=this.jsxParseEmptyExpression();else {let i=this.parseExpression();e.expression=i;}return this.setContext(s),this.state.canStartJSXElement=!0,this.expect(8),this.finishNode(e,"JSXExpressionContainer")}jsxParseAttribute(){let e=this.startNode();return this.match(5)?(this.setContext(E.brace),this.next(),this.expect(21),e.argument=this.parseMaybeAssignAllowIn(),this.setContext(E.j_oTag),this.state.canStartJSXElement=!0,this.expect(8),this.finishNode(e,"JSXSpreadAttribute")):(e.name=this.jsxParseNamespacedName(),e.value=this.eat(29)?this.jsxParseAttributeValue():null,this.finishNode(e,"JSXAttribute"))}jsxParseOpeningElementAt(e){let s=this.startNodeAt(e);return this.eat(144)?this.finishNode(s,"JSXOpeningFragment"):(s.name=this.jsxParseElementName(),this.jsxParseOpeningElementAfterName(s))}jsxParseOpeningElementAfterName(e){let s=[];for(;!this.match(56)&&!this.match(144);)s.push(this.jsxParseAttribute());return e.attributes=s,e.selfClosing=this.eat(56),this.expect(144),this.finishNode(e,"JSXOpeningElement")}jsxParseClosingElementAt(e){let s=this.startNodeAt(e);return this.eat(144)?this.finishNode(s,"JSXClosingFragment"):(s.name=this.jsxParseElementName(),this.expect(144),this.finishNode(s,"JSXClosingElement"))}jsxParseElementAt(e){let s=this.startNodeAt(e),i=[],r=this.jsxParseOpeningElementAt(e),n=null;if(!r.selfClosing){e:for(;;)switch(this.state.type){case 143:if(e=this.state.startLoc,this.next(),this.eat(56)){n=this.jsxParseClosingElementAt(e);break e}i.push(this.jsxParseElementAt(e));break;case 142:i.push(this.parseLiteral(this.state.value,"JSXText"));break;case 5:{let o=this.startNode();this.setContext(E.brace),this.next(),this.match(21)?i.push(this.jsxParseSpreadChild(o)):i.push(this.jsxParseExpressionContainer(o,E.j_expr));break}default:this.unexpected();}V(r)&&!V(n)&&n!==null?this.raise(H.MissingClosingTagFragment,n):!V(r)&&V(n)?this.raise(H.MissingClosingTagElement,n,{openingTagName:X(r.name)}):!V(r)&&!V(n)&&X(n.name)!==X(r.name)&&this.raise(H.MissingClosingTagElement,n,{openingTagName:X(r.name)});}if(V(r)?(s.openingFragment=r,s.closingFragment=n):(s.openingElement=r,s.closingElement=n),s.children=i,this.match(47))throw this.raise(H.UnwrappedAdjacentJSXElements,this.state.startLoc);return V(r)?this.finishNode(s,"JSXFragment"):this.finishNode(s,"JSXElement")}jsxParseElement(){let e=this.state.startLoc;return this.next(),this.jsxParseElementAt(e)}setContext(e){let{context:s}=this.state;s[s.length-1]=e;}parseExprAtom(e){return this.match(143)?this.jsxParseElement():this.match(47)&&this.input.charCodeAt(this.state.pos)!==33?(this.replaceToken(143),this.jsxParseElement()):super.parseExprAtom(e)}skipSpace(){this.curContext().preserveSpace||super.skipSpace();}getTokenFromCode(e){let s=this.curContext();if(s===E.j_expr){this.jsxReadToken();return}if(s===E.j_oTag||s===E.j_cTag){if(R(e)){this.jsxReadWord();return}if(e===62){++this.state.pos,this.finishToken(144);return}if((e===34||e===39)&&s===E.j_oTag){this.jsxReadString(e);return}}if(e===60&&this.state.canStartJSXElement&&this.input.charCodeAt(this.state.pos+1)!==33){++this.state.pos,this.finishToken(143);return}super.getTokenFromCode(e);}updateContext(e){let{context:s,type:i}=this.state;if(i===56&&e===143)s.splice(-2,2,E.j_cTag),this.state.canStartJSXElement=!1;else if(i===143)s.push(E.j_oTag);else if(i===144){let r=s[s.length-1];r===E.j_oTag&&e===56||r===E.j_cTag?(s.pop(),this.state.canStartJSXElement=s[s.length-1]===E.j_expr):(this.setContext(E.j_expr),this.state.canStartJSXElement=!0);}else this.state.canStartJSXElement=ii(i);}},rt=class extends ue{constructor(...t){super(...t),this.tsNames=new Map;}},at=class extends fe{constructor(...t){super(...t),this.importsStack=[];}createScope(t){return this.importsStack.push(new Set),new rt(t)}enter(t){t===256&&this.importsStack.push(new Set),super.enter(t);}exit(){let t=super.exit();return t===256&&this.importsStack.pop(),t}hasImport(t,e){let s=this.importsStack.length;if(this.importsStack[s-1].has(t))return !0;if(!e&&s>1){for(let i=0;i<s-1;i++)if(this.importsStack[i].has(t))return !0}return !1}declareName(t,e,s){if(e&4096){this.hasImport(t,!0)&&this.parser.raise(p.VarRedeclaration,s,{identifierName:t}),this.importsStack[this.importsStack.length-1].add(t);return}let i=this.currentScope(),r=i.tsNames.get(t)||0;if(e&1024){this.maybeExportDefined(i,t),i.tsNames.set(t,r|16);return}super.declareName(t,e,s),e&2&&(e&1||(this.checkRedeclarationInScope(i,t,e,s),this.maybeExportDefined(i,t)),r=r|1),e&256&&(r=r|2),e&512&&(r=r|4),e&128&&(r=r|8),r&&i.tsNames.set(t,r);}isRedeclaredInScope(t,e,s){let i=t.tsNames.get(e);if((i&2)>0){if(s&256){let r=!!(s&512),n=(i&4)>0;return r!==n}return !0}return s&128&&(i&8)>0?t.names.get(e)&2?!!(s&1):!1:s&2&&(i&1)>0?!0:super.isRedeclaredInScope(t,e,s)}checkLocalExport(t){let{name:e}=t;if(this.hasImport(e))return;let s=this.scopeStack.length;for(let i=s-1;i>=0;i--){let n=this.scopeStack[i].tsNames.get(e);if((n&1)>0||(n&16)>0)return}super.checkLocalExport(t);}},es=a=>a.type==="ParenthesizedExpression"?es(a.expression):a,nt=class extends it{toAssignable(t,e=!1){var s,i;let r;switch((t.type==="ParenthesizedExpression"||(s=t.extra)!=null&&s.parenthesized)&&(r=es(t),e?r.type==="Identifier"?this.expressionScope.recordArrowParameterBindingError(p.InvalidParenthesizedAssignment,t):r.type!=="MemberExpression"&&!this.isOptionalMemberExpression(r)&&this.raise(p.InvalidParenthesizedAssignment,t):this.raise(p.InvalidParenthesizedAssignment,t)),t.type){case"Identifier":case"ObjectPattern":case"ArrayPattern":case"AssignmentPattern":case"RestElement":break;case"ObjectExpression":t.type="ObjectPattern";for(let o=0,h=t.properties.length,l=h-1;o<h;o++){var n;let c=t.properties[o],u=o===l;this.toAssignableObjectExpressionProp(c,u,e),u&&c.type==="RestElement"&&(n=t.extra)!=null&&n.trailingCommaLoc&&this.raise(p.RestTrailingComma,t.extra.trailingCommaLoc);}break;case"ObjectProperty":{let{key:o,value:h}=t;this.isPrivateName(o)&&this.classScope.usePrivateName(this.getPrivateNameSV(o),o.loc.start),this.toAssignable(h,e);break}case"SpreadElement":throw new Error("Internal @babel/parser error (this is a bug, please report it). SpreadElement should be converted by .toAssignable's caller.");case"ArrayExpression":t.type="ArrayPattern",this.toAssignableList(t.elements,(i=t.extra)==null?void 0:i.trailingCommaLoc,e);break;case"AssignmentExpression":t.operator!=="="&&this.raise(p.MissingEqInAssignment,t.left.loc.end),t.type="AssignmentPattern",delete t.operator,this.toAssignable(t.left,e);break;case"ParenthesizedExpression":this.toAssignable(r,e);break}}toAssignableObjectExpressionProp(t,e,s){if(t.type==="ObjectMethod")this.raise(t.kind==="get"||t.kind==="set"?p.PatternHasAccessor:p.PatternHasMethod,t.key);else if(t.type==="SpreadElement"){t.type="RestElement";let i=t.argument;this.checkToRestConversion(i,!1),this.toAssignable(i,s),e||this.raise(p.RestTrailingComma,t);}else this.toAssignable(t,s);}toAssignableList(t,e,s){let i=t.length-1;for(let r=0;r<=i;r++){let n=t[r];if(n){if(n.type==="SpreadElement"){n.type="RestElement";let o=n.argument;this.checkToRestConversion(o,!0),this.toAssignable(o,s);}else this.toAssignable(n,s);n.type==="RestElement"&&(r<i?this.raise(p.RestTrailingComma,n):e&&this.raise(p.RestTrailingComma,e));}}}isAssignable(t,e){switch(t.type){case"Identifier":case"ObjectPattern":case"ArrayPattern":case"AssignmentPattern":case"RestElement":return !0;case"ObjectExpression":{let s=t.properties.length-1;return t.properties.every((i,r)=>i.type!=="ObjectMethod"&&(r===s||i.type!=="SpreadElement")&&this.isAssignable(i))}case"ObjectProperty":return this.isAssignable(t.value);case"SpreadElement":return this.isAssignable(t.argument);case"ArrayExpression":return t.elements.every(s=>s===null||this.isAssignable(s));case"AssignmentExpression":return t.operator==="=";case"ParenthesizedExpression":return this.isAssignable(t.expression);case"MemberExpression":case"OptionalMemberExpression":return !e;default:return !1}}toReferencedList(t,e){return t}toReferencedListDeep(t,e){this.toReferencedList(t,e);for(let s of t)(s==null?void 0:s.type)==="ArrayExpression"&&this.toReferencedListDeep(s.elements);}parseSpread(t){let e=this.startNode();return this.next(),e.argument=this.parseMaybeAssignAllowIn(t,void 0),this.finishNode(e,"SpreadElement")}parseRestBinding(){let t=this.startNode();return this.next(),t.argument=this.parseBindingAtom(),this.finishNode(t,"RestElement")}parseBindingAtom(){switch(this.state.type){case 0:{let t=this.startNode();return this.next(),t.elements=this.parseBindingList(3,93,1),this.finishNode(t,"ArrayPattern")}case 5:return this.parseObjectLike(8,!0)}return this.parseIdentifier()}parseBindingList(t,e,s){let i=s&1,r=[],n=!0;for(;!this.eat(t);)if(n?n=!1:this.expect(12),i&&this.match(12))r.push(null);else {if(this.eat(t))break;if(this.match(21)){let o=this.parseRestBinding();if((this.hasPlugin("flow")||s&2)&&(o=this.parseFunctionParamType(o)),r.push(o),!this.checkCommaAfterRest(e)){this.expect(t);break}}else {let o=[];for(this.match(26)&&this.hasPlugin("decorators")&&this.raise(p.UnsupportedParameterDecorator,this.state.startLoc);this.match(26);)o.push(this.parseDecorator());r.push(this.parseAssignableListItem(s,o));}}return r}parseBindingRestProperty(t){return this.next(),t.argument=this.parseIdentifier(),this.checkCommaAfterRest(125),this.finishNode(t,"RestElement")}parseBindingProperty(){let{type:t,startLoc:e}=this.state;if(t===21)return this.parseBindingRestProperty(this.startNode());let s=this.startNode();return t===139?(this.expectPlugin("destructuringPrivate",e),this.classScope.usePrivateName(this.state.value,e),s.key=this.parsePrivateName()):this.parsePropertyName(s),s.method=!1,this.parseObjPropValue(s,e,!1,!1,!0,!1)}parseAssignableListItem(t,e){let s=this.parseMaybeDefault();(this.hasPlugin("flow")||t&2)&&this.parseFunctionParamType(s);let i=this.parseMaybeDefault(s.loc.start,s);return e.length&&(s.decorators=e),i}parseFunctionParamType(t){return t}parseMaybeDefault(t,e){var i;if((t)!=null||(t=this.state.startLoc),e=(i=e)!=null?i:this.parseBindingAtom(),!this.eat(29))return e;let r=this.startNodeAt(t);return r.left=e,r.right=this.parseMaybeAssignAllowIn(),this.finishNode(r,"AssignmentPattern")}isValidLVal(t,e,s){switch(t){case"AssignmentPattern":return "left";case"RestElement":return "argument";case"ObjectProperty":return "value";case"ParenthesizedExpression":return "expression";case"ArrayPattern":return "elements";case"ObjectPattern":return "properties"}return !1}isOptionalMemberExpression(t){return t.type==="OptionalMemberExpression"}checkLVal(t,e,s=64,i=!1,r=!1,n=!1){var o;let h=t.type;if(this.isObjectMethod(t))return;let l=this.isOptionalMemberExpression(t);if(l||h==="MemberExpression"){l&&(this.expectPlugin("optionalChainingAssign",t.loc.start),e.type!=="AssignmentExpression"&&this.raise(p.InvalidLhsOptionalChaining,t,{ancestor:e})),s!==64&&this.raise(p.InvalidPropertyBindingPattern,t);return}if(h==="Identifier"){this.checkIdentifier(t,s,r);let{name:S}=t;i&&(i.has(S)?this.raise(p.ParamDupe,t):i.add(S));return}let c=this.isValidLVal(h,!(n||(o=t.extra)!=null&&o.parenthesized)&&e.type==="AssignmentExpression",s);if(c===!0)return;if(c===!1){let S=s===64?p.InvalidLhs:p.InvalidLhsBinding;this.raise(S,t,{ancestor:e});return}let u,f;typeof c=="string"?(u=c,f=h==="ParenthesizedExpression"):[u,f]=c;let d=h==="ArrayPattern"||h==="ObjectPattern"?{type:h}:e,x=t[u];if(Array.isArray(x))for(let S of x)S&&this.checkLVal(S,d,s,i,r,f);else x&&this.checkLVal(x,d,s,i,r,f);}checkIdentifier(t,e,s=!1){this.state.strict&&(s?Xt(t.name,this.inModule):Wt(t.name))&&(e===64?this.raise(p.StrictEvalArguments,t,{referenceName:t.name}):this.raise(p.StrictEvalArgumentsBinding,t,{bindingName:t.name})),e&8192&&t.name==="let"&&this.raise(p.LetInLexicalBinding,t),e&64||this.declareNameFromIdentifier(t,e);}declareNameFromIdentifier(t,e){this.scope.declareName(t.name,e,t.loc.start);}checkToRestConversion(t,e){switch(t.type){case"ParenthesizedExpression":this.checkToRestConversion(t.expression,e);break;case"Identifier":case"MemberExpression":break;case"ArrayExpression":case"ObjectExpression":if(e)break;default:this.raise(p.InvalidRestAssignmentPattern,t);}}checkCommaAfterRest(t){return this.match(12)?(this.raise(this.lookaheadCharCode()===t?p.RestTrailingComma:p.ElementAfterRest,this.state.startLoc),!0):!1}};function $i(a){if(a==null)throw new Error(`Unexpected ${a} value.`);return a}function Rt(a){if(!a)throw new Error("Assert fail")}var y=U`typescript`({AbstractMethodHasImplementation:({methodName:a})=>`Method '${a}' cannot have an implementation because it is marked abstract.`,AbstractPropertyHasInitializer:({propertyName:a})=>`Property '${a}' cannot have an initializer because it is marked abstract.`,AccessorCannotBeOptional:"An 'accessor' property cannot be declared optional.",AccessorCannotDeclareThisParameter:"'get' and 'set' accessors cannot declare 'this' parameters.",AccessorCannotHaveTypeParameters:"An accessor cannot have type parameters.",ClassMethodHasDeclare:"Class methods cannot have the 'declare' modifier.",ClassMethodHasReadonly:"Class methods cannot have the 'readonly' modifier.",ConstInitializerMustBeStringOrNumericLiteralOrLiteralEnumReference:"A 'const' initializer in an ambient context must be a string or numeric literal or literal enum reference.",ConstructorHasTypeParameters:"Type parameters cannot appear on a constructor declaration.",DeclareAccessor:({kind:a})=>`'declare' is not allowed in ${a}ters.`,DeclareClassFieldHasInitializer:"Initializers are not allowed in ambient contexts.",DeclareFunctionHasImplementation:"An implementation cannot be declared in ambient contexts.",DuplicateAccessibilityModifier:({modifier:a})=>"Accessibility modifier already seen.",DuplicateModifier:({modifier:a})=>`Duplicate modifier: '${a}'.`,EmptyHeritageClauseType:({token:a})=>`'${a}' list cannot be empty.`,EmptyTypeArguments:"Type argument list cannot be empty.",EmptyTypeParameters:"Type parameter list cannot be empty.",ExpectedAmbientAfterExportDeclare:"'export declare' must be followed by an ambient declaration.",ImportAliasHasImportType:"An import alias can not use 'import type'.",ImportReflectionHasImportType:"An `import module` declaration can not use `type` modifier",IncompatibleModifiers:({modifiers:a})=>`'${a[0]}' modifier cannot be used with '${a[1]}' modifier.`,IndexSignatureHasAbstract:"Index signatures cannot have the 'abstract' modifier.",IndexSignatureHasAccessibility:({modifier:a})=>`Index signatures cannot have an accessibility modifier ('${a}').`,IndexSignatureHasDeclare:"Index signatures cannot have the 'declare' modifier.",IndexSignatureHasOverride:"'override' modifier cannot appear on an index signature.",IndexSignatureHasStatic:"Index signatures cannot have the 'static' modifier.",InitializerNotAllowedInAmbientContext:"Initializers are not allowed in ambient contexts.",InvalidModifierOnTypeMember:({modifier:a})=>`'${a}' modifier cannot appear on a type member.`,InvalidModifierOnTypeParameter:({modifier:a})=>`'${a}' modifier cannot appear on a type parameter.`,InvalidModifierOnTypeParameterPositions:({modifier:a})=>`'${a}' modifier can only appear on a type parameter of a class, interface or type alias.`,InvalidModifiersOrder:({orderedModifiers:a})=>`'${a[0]}' modifier must precede '${a[1]}' modifier.`,InvalidPropertyAccessAfterInstantiationExpression:"Invalid property access after an instantiation expression. You can either wrap the instantiation expression in parentheses, or delete the type arguments.",InvalidTupleMemberLabel:"Tuple members must be labeled with a simple identifier.",MissingInterfaceName:"'interface' declarations must be followed by an identifier.",NonAbstractClassHasAbstractMethod:"Abstract methods can only appear within an abstract class.",NonClassMethodPropertyHasAbstractModifer:"'abstract' modifier can only appear on a class, method, or property declaration.",OptionalTypeBeforeRequired:"A required element cannot follow an optional element.",OverrideNotInSubClass:"This member cannot have an 'override' modifier because its containing class does not extend another class.",PatternIsOptional:"A binding pattern parameter cannot be optional in an implementation signature.",PrivateElementHasAbstract:"Private elements cannot have the 'abstract' modifier.",PrivateElementHasAccessibility:({modifier:a})=>`Private elements cannot have an accessibility modifier ('${a}').`,ReadonlyForMethodSignature:"'readonly' modifier can only appear on a property declaration or index signature.",ReservedArrowTypeParam:"This syntax is reserved in files with the .mts or .cts extension. Add a trailing comma, as in `<T,>() => ...`.",ReservedTypeAssertion:"This syntax is reserved in files with the .mts or .cts extension. Use an `as` expression instead.",SetAccessorCannotHaveOptionalParameter:"A 'set' accessor cannot have an optional parameter.",SetAccessorCannotHaveRestParameter:"A 'set' accessor cannot have rest parameter.",SetAccessorCannotHaveReturnType:"A 'set' accessor cannot have a return type annotation.",SingleTypeParameterWithoutTrailingComma:({typeParameterName:a})=>`Single type parameter ${a} should have a trailing comma. Example usage: <${a},>.`,StaticBlockCannotHaveModifier:"Static class blocks cannot have any modifier.",TupleOptionalAfterType:"A labeled tuple optional element must be declared using a question mark after the name and before the colon (`name?: type`), rather than after the type (`name: type?`).",TypeAnnotationAfterAssign:"Type annotations must come before default assignments, e.g. instead of `age = 25: number` use `age: number = 25`.",TypeImportCannotSpecifyDefaultAndNamed:"A type-only import can specify a default import or named bindings, but not both.",TypeModifierIsUsedInTypeExports:"The 'type' modifier cannot be used on a named export when 'export type' is used on its export statement.",TypeModifierIsUsedInTypeImports:"The 'type' modifier cannot be used on a named import when 'import type' is used on its import statement.",UnexpectedParameterModifier:"A parameter property is only allowed in a constructor implementation.",UnexpectedReadonly:"'readonly' type modifier is only permitted on array and tuple literal types.",UnexpectedTypeAnnotation:"Did not expect a type annotation here.",UnexpectedTypeCastInParameter:"Unexpected type cast in parameter position.",UnsupportedImportTypeArgument:"Argument in a type import must be a string literal.",UnsupportedParameterPropertyKind:"A parameter property may not be declared using a binding pattern.",UnsupportedSignatureParameterKind:({type:a})=>`Name in a signature must be an Identifier, ObjectPattern or ArrayPattern, instead got ${a}.`});function zi(a){switch(a){case"any":return "TSAnyKeyword";case"boolean":return "TSBooleanKeyword";case"bigint":return "TSBigIntKeyword";case"never":return "TSNeverKeyword";case"number":return "TSNumberKeyword";case"object":return "TSObjectKeyword";case"string":return "TSStringKeyword";case"symbol":return "TSSymbolKeyword";case"undefined":return "TSUndefinedKeyword";case"unknown":return "TSUnknownKeyword";default:return}}function Ut(a){return a==="private"||a==="public"||a==="protected"}function Vi(a){return a==="in"||a==="out"}var qi=a=>class extends a{constructor(...e){super(...e),this.tsParseInOutModifiers=this.tsParseModifiers.bind(this,{allowedModifiers:["in","out"],disallowedModifiers:["const","public","private","protected","readonly","declare","abstract","override"],errorTemplate:y.InvalidModifierOnTypeParameter}),this.tsParseConstModifier=this.tsParseModifiers.bind(this,{allowedModifiers:["const"],disallowedModifiers:["in","out"],errorTemplate:y.InvalidModifierOnTypeParameterPositions}),this.tsParseInOutConstModifiers=this.tsParseModifiers.bind(this,{allowedModifiers:["in","out","const"],disallowedModifiers:["public","private","protected","readonly","declare","abstract","override"],errorTemplate:y.InvalidModifierOnTypeParameter});}getScopeHandler(){return at}tsIsIdentifier(){return C(this.state.type)}tsTokenCanFollowModifier(){return this.match(0)||this.match(5)||this.match(55)||this.match(21)||this.match(139)||this.isLiteralPropertyName()}tsNextTokenOnSameLineAndCanFollowModifier(){return this.next(),this.hasPrecedingLineBreak()?!1:this.tsTokenCanFollowModifier()}tsNextTokenCanFollowModifier(){return this.match(106)?(this.next(),this.tsTokenCanFollowModifier()):this.tsNextTokenOnSameLineAndCanFollowModifier()}tsParseModifier(e,s){if(!C(this.state.type)&&this.state.type!==58&&this.state.type!==75)return;let i=this.state.value;if(e.includes(i)){if(s&&this.tsIsStartOfStaticBlocks())return;if(this.tsTryParse(this.tsNextTokenCanFollowModifier.bind(this)))return i}}tsParseModifiers({allowedModifiers:e,disallowedModifiers:s,stopOnStartOfClassStaticBlock:i,errorTemplate:r=y.InvalidModifierOnTypeMember},n){let o=(l,c,u,f)=>{c===u&&n[f]&&this.raise(y.InvalidModifiersOrder,l,{orderedModifiers:[u,f]});},h=(l,c,u,f)=>{(n[u]&&c===f||n[f]&&c===u)&&this.raise(y.IncompatibleModifiers,l,{modifiers:[u,f]});};for(;;){let{startLoc:l}=this.state,c=this.tsParseModifier(e.concat(s??[]),i);if(!c)break;Ut(c)?n.accessibility?this.raise(y.DuplicateAccessibilityModifier,l,{modifier:c}):(o(l,c,c,"override"),o(l,c,c,"static"),o(l,c,c,"readonly"),n.accessibility=c):Vi(c)?(n[c]&&this.raise(y.DuplicateModifier,l,{modifier:c}),n[c]=!0,o(l,c,"in","out")):(hasOwnProperty.call(n,c)?this.raise(y.DuplicateModifier,l,{modifier:c}):(o(l,c,"static","readonly"),o(l,c,"static","override"),o(l,c,"override","readonly"),o(l,c,"abstract","override"),h(l,c,"declare","override"),h(l,c,"static","abstract")),n[c]=!0),s!=null&&s.includes(c)&&this.raise(r,l,{modifier:c});}}tsIsListTerminator(e){switch(e){case"EnumMembers":case"TypeMembers":return this.match(8);case"HeritageClauseElement":return this.match(5);case"TupleElementTypes":return this.match(3);case"TypeParametersOrArguments":return this.match(48)}}tsParseList(e,s){let i=[];for(;!this.tsIsListTerminator(e);)i.push(s());return i}tsParseDelimitedList(e,s,i){return $i(this.tsParseDelimitedListWorker(e,s,!0,i))}tsParseDelimitedListWorker(e,s,i,r){let n=[],o=-1;for(;!this.tsIsListTerminator(e);){o=-1;let h=s();if(h==null)return;if(n.push(h),this.eat(12)){o=this.state.lastTokStartLoc.index;continue}if(this.tsIsListTerminator(e))break;i&&this.expect(12);return}return r&&(r.value=o),n}tsParseBracketedList(e,s,i,r,n){r||(i?this.expect(0):this.expect(47));let o=this.tsParseDelimitedList(e,s,n);return i?this.expect(3):this.expect(48),o}tsParseImportType(){let e=this.startNode();return this.expect(83),this.expect(10),this.match(134)||this.raise(y.UnsupportedImportTypeArgument,this.state.startLoc),e.argument=super.parseExprAtom(),this.eat(12)&&!this.match(11)?(e.options=super.parseMaybeAssignAllowIn(),this.eat(12)):e.options=null,this.expect(11),this.eat(16)&&(e.qualifier=this.tsParseEntityName()),this.match(47)&&(e.typeParameters=this.tsParseTypeArguments()),this.finishNode(e,"TSImportType")}tsParseEntityName(e=!0){let s=this.parseIdentifier(e);for(;this.eat(16);){let i=this.startNodeAtNode(s);i.left=s,i.right=this.parseIdentifier(e),s=this.finishNode(i,"TSQualifiedName");}return s}tsParseTypeReference(){let e=this.startNode();return e.typeName=this.tsParseEntityName(),!this.hasPrecedingLineBreak()&&this.match(47)&&(e.typeParameters=this.tsParseTypeArguments()),this.finishNode(e,"TSTypeReference")}tsParseThisTypePredicate(e){this.next();let s=this.startNodeAtNode(e);return s.parameterName=e,s.typeAnnotation=this.tsParseTypeAnnotation(!1),s.asserts=!1,this.finishNode(s,"TSTypePredicate")}tsParseThisTypeNode(){let e=this.startNode();return this.next(),this.finishNode(e,"TSThisType")}tsParseTypeQuery(){let e=this.startNode();return this.expect(87),this.match(83)?e.exprName=this.tsParseImportType():e.exprName=this.tsParseEntityName(),!this.hasPrecedingLineBreak()&&this.match(47)&&(e.typeParameters=this.tsParseTypeArguments()),this.finishNode(e,"TSTypeQuery")}tsParseTypeParameter(e){let s=this.startNode();return e(s),s.name=this.tsParseTypeParameterName(),s.constraint=this.tsEatThenParseType(81),s.default=this.tsEatThenParseType(29),this.finishNode(s,"TSTypeParameter")}tsTryParseTypeParameters(e){if(this.match(47))return this.tsParseTypeParameters(e)}tsParseTypeParameters(e){let s=this.startNode();this.match(47)||this.match(143)?this.next():this.unexpected();let i={value:-1};return s.params=this.tsParseBracketedList("TypeParametersOrArguments",this.tsParseTypeParameter.bind(this,e),!1,!0,i),s.params.length===0&&this.raise(y.EmptyTypeParameters,s),i.value!==-1&&this.addExtra(s,"trailingComma",i.value),this.finishNode(s,"TSTypeParameterDeclaration")}tsFillSignature(e,s){let i=e===19,r="parameters",n="typeAnnotation";s.typeParameters=this.tsTryParseTypeParameters(this.tsParseConstModifier),this.expect(10),s[r]=this.tsParseBindingListForSignature(),i?s[n]=this.tsParseTypeOrTypePredicateAnnotation(e):this.match(e)&&(s[n]=this.tsParseTypeOrTypePredicateAnnotation(e));}tsParseBindingListForSignature(){let e=super.parseBindingList(11,41,2);for(let s of e){let{type:i}=s;(i==="AssignmentPattern"||i==="TSParameterProperty")&&this.raise(y.UnsupportedSignatureParameterKind,s,{type:i});}return e}tsParseTypeMemberSemicolon(){!this.eat(12)&&!this.isLineTerminator()&&this.expect(13);}tsParseSignatureMember(e,s){return this.tsFillSignature(14,s),this.tsParseTypeMemberSemicolon(),this.finishNode(s,e)}tsIsUnambiguouslyIndexSignature(){return this.next(),C(this.state.type)?(this.next(),this.match(14)):!1}tsTryParseIndexSignature(e){if(!(this.match(0)&&this.tsLookAhead(this.tsIsUnambiguouslyIndexSignature.bind(this))))return;this.expect(0);let s=this.parseIdentifier();s.typeAnnotation=this.tsParseTypeAnnotation(),this.resetEndLocation(s),this.expect(3),e.parameters=[s];let i=this.tsTryParseTypeAnnotation();return i&&(e.typeAnnotation=i),this.tsParseTypeMemberSemicolon(),this.finishNode(e,"TSIndexSignature")}tsParsePropertyOrMethodSignature(e,s){this.eat(17)&&(e.optional=!0);let i=e;if(this.match(10)||this.match(47)){s&&this.raise(y.ReadonlyForMethodSignature,e);let r=i;r.kind&&this.match(47)&&this.raise(y.AccessorCannotHaveTypeParameters,this.state.curPosition()),this.tsFillSignature(14,r),this.tsParseTypeMemberSemicolon();let n="parameters",o="typeAnnotation";if(r.kind==="get")r[n].length>0&&(this.raise(p.BadGetterArity,this.state.curPosition()),this.isThisParam(r[n][0])&&this.raise(y.AccessorCannotDeclareThisParameter,this.state.curPosition()));else if(r.kind==="set"){if(r[n].length!==1)this.raise(p.BadSetterArity,this.state.curPosition());else {let h=r[n][0];this.isThisParam(h)&&this.raise(y.AccessorCannotDeclareThisParameter,this.state.curPosition()),h.type==="Identifier"&&h.optional&&this.raise(y.SetAccessorCannotHaveOptionalParameter,this.state.curPosition()),h.type==="RestElement"&&this.raise(y.SetAccessorCannotHaveRestParameter,this.state.curPosition());}r[o]&&this.raise(y.SetAccessorCannotHaveReturnType,r[o]);}else r.kind="method";return this.finishNode(r,"TSMethodSignature")}else {let r=i;s&&(r.readonly=!0);let n=this.tsTryParseTypeAnnotation();return n&&(r.typeAnnotation=n),this.tsParseTypeMemberSemicolon(),this.finishNode(r,"TSPropertySignature")}}tsParseTypeMember(){let e=this.startNode();if(this.match(10)||this.match(47))return this.tsParseSignatureMember("TSCallSignatureDeclaration",e);if(this.match(77)){let i=this.startNode();return this.next(),this.match(10)||this.match(47)?this.tsParseSignatureMember("TSConstructSignatureDeclaration",e):(e.key=this.createIdentifier(i,"new"),this.tsParsePropertyOrMethodSignature(e,!1))}this.tsParseModifiers({allowedModifiers:["readonly"],disallowedModifiers:["declare","abstract","private","protected","public","static","override"]},e);let s=this.tsTryParseIndexSignature(e);return s||(super.parsePropertyName(e),!e.computed&&e.key.type==="Identifier"&&(e.key.name==="get"||e.key.name==="set")&&this.tsTokenCanFollowModifier()&&(e.kind=e.key.name,super.parsePropertyName(e)),this.tsParsePropertyOrMethodSignature(e,!!e.readonly))}tsParseTypeLiteral(){let e=this.startNode();return e.members=this.tsParseObjectTypeMembers(),this.finishNode(e,"TSTypeLiteral")}tsParseObjectTypeMembers(){this.expect(5);let e=this.tsParseList("TypeMembers",this.tsParseTypeMember.bind(this));return this.expect(8),e}tsIsStartOfMappedType(){return this.next(),this.eat(53)?this.isContextual(122):(this.isContextual(122)&&this.next(),!this.match(0)||(this.next(),!this.tsIsIdentifier())?!1:(this.next(),this.match(58)))}tsParseMappedType(){let e=this.startNode();this.expect(5),this.match(53)?(e.readonly=this.state.value,this.next(),this.expectContextual(122)):this.eatContextual(122)&&(e.readonly=!0),this.expect(0);{let s=this.startNode();s.name=this.tsParseTypeParameterName(),s.constraint=this.tsExpectThenParseType(58),e.typeParameter=this.finishNode(s,"TSTypeParameter");}return e.nameType=this.eatContextual(93)?this.tsParseType():null,this.expect(3),this.match(53)?(e.optional=this.state.value,this.next(),this.expect(17)):this.eat(17)&&(e.optional=!0),e.typeAnnotation=this.tsTryParseType(),this.semicolon(),this.expect(8),this.finishNode(e,"TSMappedType")}tsParseTupleType(){let e=this.startNode();e.elementTypes=this.tsParseBracketedList("TupleElementTypes",this.tsParseTupleElementType.bind(this),!0,!1);let s=!1;return e.elementTypes.forEach(i=>{let{type:r}=i;s&&r!=="TSRestType"&&r!=="TSOptionalType"&&!(r==="TSNamedTupleMember"&&i.optional)&&this.raise(y.OptionalTypeBeforeRequired,i),s||(s=r==="TSNamedTupleMember"&&i.optional||r==="TSOptionalType");}),this.finishNode(e,"TSTupleType")}tsParseTupleElementType(){let{startLoc:e}=this.state,s=this.eat(21),i,r,n,o,l=D(this.state.type)?this.lookaheadCharCode():null;if(l===58)i=!0,n=!1,r=this.parseIdentifier(!0),this.expect(14),o=this.tsParseType();else if(l===63){n=!0;let c=this.state.startLoc,u=this.state.value,f=this.tsParseNonArrayType();this.lookaheadCharCode()===58?(i=!0,r=this.createIdentifier(this.startNodeAt(c),u),this.expect(17),this.expect(14),o=this.tsParseType()):(i=!1,o=f,this.expect(17));}else o=this.tsParseType(),n=this.eat(17),i=this.eat(14);if(i){let c;r?(c=this.startNodeAtNode(r),c.optional=n,c.label=r,c.elementType=o,this.eat(17)&&(c.optional=!0,this.raise(y.TupleOptionalAfterType,this.state.lastTokStartLoc))):(c=this.startNodeAtNode(o),c.optional=n,this.raise(y.InvalidTupleMemberLabel,o),c.label=o,c.elementType=this.tsParseType()),o=this.finishNode(c,"TSNamedTupleMember");}else if(n){let c=this.startNodeAtNode(o);c.typeAnnotation=o,o=this.finishNode(c,"TSOptionalType");}if(s){let c=this.startNodeAt(e);c.typeAnnotation=o,o=this.finishNode(c,"TSRestType");}return o}tsParseParenthesizedType(){let e=this.startNode();return this.expect(10),e.typeAnnotation=this.tsParseType(),this.expect(11),this.finishNode(e,"TSParenthesizedType")}tsParseFunctionOrConstructorType(e,s){let i=this.startNode();return e==="TSConstructorType"&&(i.abstract=!!s,s&&this.next(),this.next()),this.tsInAllowConditionalTypesContext(()=>this.tsFillSignature(19,i)),this.finishNode(i,e)}tsParseLiteralTypeNode(){let e=this.startNode();switch(this.state.type){case 135:case 136:case 134:case 85:case 86:e.literal=super.parseExprAtom();break;default:this.unexpected();}return this.finishNode(e,"TSLiteralType")}tsParseTemplateLiteralType(){let e=this.startNode();return e.literal=super.parseTemplate(!1),this.finishNode(e,"TSLiteralType")}parseTemplateSubstitution(){return this.state.inType?this.tsParseType():super.parseTemplateSubstitution()}tsParseThisTypeOrThisTypePredicate(){let e=this.tsParseThisTypeNode();return this.isContextual(116)&&!this.hasPrecedingLineBreak()?this.tsParseThisTypePredicate(e):e}tsParseNonArrayType(){switch(this.state.type){case 134:case 135:case 136:case 85:case 86:return this.tsParseLiteralTypeNode();case 53:if(this.state.value==="-"){let e=this.startNode(),s=this.lookahead();return s.type!==135&&s.type!==136&&this.unexpected(),e.literal=this.parseMaybeUnary(),this.finishNode(e,"TSLiteralType")}break;case 78:return this.tsParseThisTypeOrThisTypePredicate();case 87:return this.tsParseTypeQuery();case 83:return this.tsParseImportType();case 5:return this.tsLookAhead(this.tsIsStartOfMappedType.bind(this))?this.tsParseMappedType():this.tsParseTypeLiteral();case 0:return this.tsParseTupleType();case 10:return this.tsParseParenthesizedType();case 25:case 24:return this.tsParseTemplateLiteralType();default:{let{type:e}=this.state;if(C(e)||e===88||e===84){let s=e===88?"TSVoidKeyword":e===84?"TSNullKeyword":zi(this.state.value);if(s!==void 0&&this.lookaheadCharCode()!==46){let i=this.startNode();return this.next(),this.finishNode(i,s)}return this.tsParseTypeReference()}}}this.unexpected();}tsParseArrayTypeOrHigher(){let e=this.tsParseNonArrayType();for(;!this.hasPrecedingLineBreak()&&this.eat(0);)if(this.match(3)){let s=this.startNodeAtNode(e);s.elementType=e,this.expect(3),e=this.finishNode(s,"TSArrayType");}else {let s=this.startNodeAtNode(e);s.objectType=e,s.indexType=this.tsParseType(),this.expect(3),e=this.finishNode(s,"TSIndexedAccessType");}return e}tsParseTypeOperator(){let e=this.startNode(),s=this.state.value;return this.next(),e.operator=s,e.typeAnnotation=this.tsParseTypeOperatorOrHigher(),s==="readonly"&&this.tsCheckTypeAnnotationForReadOnly(e),this.finishNode(e,"TSTypeOperator")}tsCheckTypeAnnotationForReadOnly(e){switch(e.typeAnnotation.type){case"TSTupleType":case"TSArrayType":return;default:this.raise(y.UnexpectedReadonly,e);}}tsParseInferType(){let e=this.startNode();this.expectContextual(115);let s=this.startNode();return s.name=this.tsParseTypeParameterName(),s.constraint=this.tsTryParse(()=>this.tsParseConstraintForInferType()),e.typeParameter=this.finishNode(s,"TSTypeParameter"),this.finishNode(e,"TSInferType")}tsParseConstraintForInferType(){if(this.eat(81)){let e=this.tsInDisallowConditionalTypesContext(()=>this.tsParseType());if(this.state.inDisallowConditionalTypesContext||!this.match(17))return e}}tsParseTypeOperatorOrHigher(){return li(this.state.type)&&!this.state.containsEsc?this.tsParseTypeOperator():this.isContextual(115)?this.tsParseInferType():this.tsInAllowConditionalTypesContext(()=>this.tsParseArrayTypeOrHigher())}tsParseUnionOrIntersectionType(e,s,i){let r=this.startNode(),n=this.eat(i),o=[];do o.push(s());while(this.eat(i));return o.length===1&&!n?o[0]:(r.types=o,this.finishNode(r,e))}tsParseIntersectionTypeOrHigher(){return this.tsParseUnionOrIntersectionType("TSIntersectionType",this.tsParseTypeOperatorOrHigher.bind(this),45)}tsParseUnionTypeOrHigher(){return this.tsParseUnionOrIntersectionType("TSUnionType",this.tsParseIntersectionTypeOrHigher.bind(this),43)}tsIsStartOfFunctionType(){return this.match(47)?!0:this.match(10)&&this.tsLookAhead(this.tsIsUnambiguouslyStartOfFunctionType.bind(this))}tsSkipParameterStart(){if(C(this.state.type)||this.match(78))return this.next(),!0;if(this.match(5)){let{errors:e}=this.state,s=e.length;try{return this.parseObjectLike(8,!0),e.length===s}catch{return !1}}if(this.match(0)){this.next();let{errors:e}=this.state,s=e.length;try{return super.parseBindingList(3,93,1),e.length===s}catch{return !1}}return !1}tsIsUnambiguouslyStartOfFunctionType(){return this.next(),!!(this.match(11)||this.match(21)||this.tsSkipParameterStart()&&(this.match(14)||this.match(12)||this.match(17)||this.match(29)||this.match(11)&&(this.next(),this.match(19))))}tsParseTypeOrTypePredicateAnnotation(e){return this.tsInType(()=>{let s=this.startNode();this.expect(e);let i=this.startNode(),r=!!this.tsTryParse(this.tsParseTypePredicateAsserts.bind(this));if(r&&this.match(78)){let h=this.tsParseThisTypeOrThisTypePredicate();return h.type==="TSThisType"?(i.parameterName=h,i.asserts=!0,i.typeAnnotation=null,h=this.finishNode(i,"TSTypePredicate")):(this.resetStartLocationFromNode(h,i),h.asserts=!0),s.typeAnnotation=h,this.finishNode(s,"TSTypeAnnotation")}let n=this.tsIsIdentifier()&&this.tsTryParse(this.tsParseTypePredicatePrefix.bind(this));if(!n)return r?(i.parameterName=this.parseIdentifier(),i.asserts=r,i.typeAnnotation=null,s.typeAnnotation=this.finishNode(i,"TSTypePredicate"),this.finishNode(s,"TSTypeAnnotation")):this.tsParseTypeAnnotation(!1,s);let o=this.tsParseTypeAnnotation(!1);return i.parameterName=n,i.typeAnnotation=o,i.asserts=r,s.typeAnnotation=this.finishNode(i,"TSTypePredicate"),this.finishNode(s,"TSTypeAnnotation")})}tsTryParseTypeOrTypePredicateAnnotation(){if(this.match(14))return this.tsParseTypeOrTypePredicateAnnotation(14)}tsTryParseTypeAnnotation(){if(this.match(14))return this.tsParseTypeAnnotation()}tsTryParseType(){return this.tsEatThenParseType(14)}tsParseTypePredicatePrefix(){let e=this.parseIdentifier();if(this.isContextual(116)&&!this.hasPrecedingLineBreak())return this.next(),e}tsParseTypePredicateAsserts(){if(this.state.type!==109)return !1;let e=this.state.containsEsc;return this.next(),!C(this.state.type)&&!this.match(78)?!1:(e&&this.raise(p.InvalidEscapedReservedWord,this.state.lastTokStartLoc,{reservedWord:"asserts"}),!0)}tsParseTypeAnnotation(e=!0,s=this.startNode()){return this.tsInType(()=>{e&&this.expect(14),s.typeAnnotation=this.tsParseType();}),this.finishNode(s,"TSTypeAnnotation")}tsParseType(){Rt(this.state.inType);let e=this.tsParseNonConditionalType();if(this.state.inDisallowConditionalTypesContext||this.hasPrecedingLineBreak()||!this.eat(81))return e;let s=this.startNodeAtNode(e);return s.checkType=e,s.extendsType=this.tsInDisallowConditionalTypesContext(()=>this.tsParseNonConditionalType()),this.expect(17),s.trueType=this.tsInAllowConditionalTypesContext(()=>this.tsParseType()),this.expect(14),s.falseType=this.tsInAllowConditionalTypesContext(()=>this.tsParseType()),this.finishNode(s,"TSConditionalType")}isAbstractConstructorSignature(){return this.isContextual(124)&&this.lookahead().type===77}tsParseNonConditionalType(){return this.tsIsStartOfFunctionType()?this.tsParseFunctionOrConstructorType("TSFunctionType"):this.match(77)?this.tsParseFunctionOrConstructorType("TSConstructorType"):this.isAbstractConstructorSignature()?this.tsParseFunctionOrConstructorType("TSConstructorType",!0):this.tsParseUnionTypeOrHigher()}tsParseTypeAssertion(){this.getPluginOption("typescript","disallowAmbiguousJSXLike")&&this.raise(y.ReservedTypeAssertion,this.state.startLoc);let e=this.startNode();return e.typeAnnotation=this.tsInType(()=>(this.next(),this.match(75)?this.tsParseTypeReference():this.tsParseType())),this.expect(48),e.expression=this.parseMaybeUnary(),this.finishNode(e,"TSTypeAssertion")}tsParseHeritageClause(e){let s=this.state.startLoc,i=this.tsParseDelimitedList("HeritageClauseElement",()=>{let r=this.startNode();return r.expression=this.tsParseEntityName(),this.match(47)&&(r.typeParameters=this.tsParseTypeArguments()),this.finishNode(r,"TSExpressionWithTypeArguments")});return i.length||this.raise(y.EmptyHeritageClauseType,s,{token:e}),i}tsParseInterfaceDeclaration(e,s={}){if(this.hasFollowingLineBreak())return null;this.expectContextual(129),s.declare&&(e.declare=!0),C(this.state.type)?(e.id=this.parseIdentifier(),this.checkIdentifier(e.id,130)):(e.id=null,this.raise(y.MissingInterfaceName,this.state.startLoc)),e.typeParameters=this.tsTryParseTypeParameters(this.tsParseInOutConstModifiers),this.eat(81)&&(e.extends=this.tsParseHeritageClause("extends"));let i=this.startNode();return i.body=this.tsInType(this.tsParseObjectTypeMembers.bind(this)),e.body=this.finishNode(i,"TSInterfaceBody"),this.finishNode(e,"TSInterfaceDeclaration")}tsParseTypeAliasDeclaration(e){return e.id=this.parseIdentifier(),this.checkIdentifier(e.id,2),e.typeAnnotation=this.tsInType(()=>{if(e.typeParameters=this.tsTryParseTypeParameters(this.tsParseInOutModifiers),this.expect(29),this.isContextual(114)&&this.lookahead().type!==16){let s=this.startNode();return this.next(),this.finishNode(s,"TSIntrinsicKeyword")}return this.tsParseType()}),this.semicolon(),this.finishNode(e,"TSTypeAliasDeclaration")}tsInNoContext(e){let s=this.state.context;this.state.context=[s[0]];try{return e()}finally{this.state.context=s;}}tsInType(e){let s=this.state.inType;this.state.inType=!0;try{return e()}finally{this.state.inType=s;}}tsInDisallowConditionalTypesContext(e){let s=this.state.inDisallowConditionalTypesContext;this.state.inDisallowConditionalTypesContext=!0;try{return e()}finally{this.state.inDisallowConditionalTypesContext=s;}}tsInAllowConditionalTypesContext(e){let s=this.state.inDisallowConditionalTypesContext;this.state.inDisallowConditionalTypesContext=!1;try{return e()}finally{this.state.inDisallowConditionalTypesContext=s;}}tsEatThenParseType(e){if(this.match(e))return this.tsNextThenParseType()}tsExpectThenParseType(e){return this.tsInType(()=>(this.expect(e),this.tsParseType()))}tsNextThenParseType(){return this.tsInType(()=>(this.next(),this.tsParseType()))}tsParseEnumMember(){let e=this.startNode();return e.id=this.match(134)?super.parseStringLiteral(this.state.value):this.parseIdentifier(!0),this.eat(29)&&(e.initializer=super.parseMaybeAssignAllowIn()),this.finishNode(e,"TSEnumMember")}tsParseEnumDeclaration(e,s={}){return s.const&&(e.const=!0),s.declare&&(e.declare=!0),this.expectContextual(126),e.id=this.parseIdentifier(),this.checkIdentifier(e.id,e.const?8971:8459),this.expect(5),e.members=this.tsParseDelimitedList("EnumMembers",this.tsParseEnumMember.bind(this)),this.expect(8),this.finishNode(e,"TSEnumDeclaration")}tsParseModuleBlock(){let e=this.startNode();return this.scope.enter(0),this.expect(5),super.parseBlockOrModuleBlockBody(e.body=[],void 0,!0,8),this.scope.exit(),this.finishNode(e,"TSModuleBlock")}tsParseModuleOrNamespaceDeclaration(e,s=!1){if(e.id=this.parseIdentifier(),s||this.checkIdentifier(e.id,1024),this.eat(16)){let i=this.startNode();this.tsParseModuleOrNamespaceDeclaration(i,!0),e.body=i;}else this.scope.enter(256),this.prodParam.enter(0),e.body=this.tsParseModuleBlock(),this.prodParam.exit(),this.scope.exit();return this.finishNode(e,"TSModuleDeclaration")}tsParseAmbientExternalModuleDeclaration(e){return this.isContextual(112)?(e.kind="global",e.global=!0,e.id=this.parseIdentifier()):this.match(134)?(e.kind="module",e.id=super.parseStringLiteral(this.state.value)):this.unexpected(),this.match(5)?(this.scope.enter(256),this.prodParam.enter(0),e.body=this.tsParseModuleBlock(),this.prodParam.exit(),this.scope.exit()):this.semicolon(),this.finishNode(e,"TSModuleDeclaration")}tsParseImportEqualsDeclaration(e,s,i){e.isExport=i||!1,e.id=s||this.parseIdentifier(),this.checkIdentifier(e.id,4096),this.expect(29);let r=this.tsParseModuleReference();return e.importKind==="type"&&r.type!=="TSExternalModuleReference"&&this.raise(y.ImportAliasHasImportType,r),e.moduleReference=r,this.semicolon(),this.finishNode(e,"TSImportEqualsDeclaration")}tsIsExternalModuleReference(){return this.isContextual(119)&&this.lookaheadCharCode()===40}tsParseModuleReference(){return this.tsIsExternalModuleReference()?this.tsParseExternalModuleReference():this.tsParseEntityName(!1)}tsParseExternalModuleReference(){let e=this.startNode();return this.expectContextual(119),this.expect(10),this.match(134)||this.unexpected(),e.expression=super.parseExprAtom(),this.expect(11),this.sawUnambiguousESM=!0,this.finishNode(e,"TSExternalModuleReference")}tsLookAhead(e){let s=this.state.clone(),i=e();return this.state=s,i}tsTryParseAndCatch(e){let s=this.tryParse(i=>e()||i());if(!(s.aborted||!s.node))return s.error&&(this.state=s.failState),s.node}tsTryParse(e){let s=this.state.clone(),i=e();if(i!==void 0&&i!==!1)return i;this.state=s;}tsTryParseDeclare(e){if(this.isLineTerminator())return;let s=this.state.type,i;return this.isContextual(100)&&(s=74,i="let"),this.tsInAmbientContext(()=>{switch(s){case 68:return e.declare=!0,super.parseFunctionStatement(e,!1,!1);case 80:return e.declare=!0,this.parseClass(e,!0,!1);case 126:return this.tsParseEnumDeclaration(e,{declare:!0});case 112:return this.tsParseAmbientExternalModuleDeclaration(e);case 75:case 74:return !this.match(75)||!this.isLookaheadContextual("enum")?(e.declare=!0,this.parseVarStatement(e,i||this.state.value,!0)):(this.expect(75),this.tsParseEnumDeclaration(e,{const:!0,declare:!0}));case 129:{let r=this.tsParseInterfaceDeclaration(e,{declare:!0});if(r)return r}default:if(C(s))return this.tsParseDeclaration(e,this.state.value,!0,null)}})}tsTryParseExportDeclaration(){return this.tsParseDeclaration(this.startNode(),this.state.value,!0,null)}tsParseExpressionStatement(e,s,i){switch(s.name){case"declare":{let r=this.tsTryParseDeclare(e);return r&&(r.declare=!0),r}case"global":if(this.match(5)){this.scope.enter(256),this.prodParam.enter(0);let r=e;return r.kind="global",r.global=!0,r.id=s,r.body=this.tsParseModuleBlock(),this.scope.exit(),this.prodParam.exit(),this.finishNode(r,"TSModuleDeclaration")}break;default:return this.tsParseDeclaration(e,s.name,!1,i)}}tsParseDeclaration(e,s,i,r){switch(s){case"abstract":if(this.tsCheckLineTerminator(i)&&(this.match(80)||C(this.state.type)))return this.tsParseAbstractDeclaration(e,r);break;case"module":if(this.tsCheckLineTerminator(i)){if(this.match(134))return this.tsParseAmbientExternalModuleDeclaration(e);if(C(this.state.type))return e.kind="module",this.tsParseModuleOrNamespaceDeclaration(e)}break;case"namespace":if(this.tsCheckLineTerminator(i)&&C(this.state.type))return e.kind="namespace",this.tsParseModuleOrNamespaceDeclaration(e);break;case"type":if(this.tsCheckLineTerminator(i)&&C(this.state.type))return this.tsParseTypeAliasDeclaration(e);break}}tsCheckLineTerminator(e){return e?this.hasFollowingLineBreak()?!1:(this.next(),!0):!this.isLineTerminator()}tsTryParseGenericAsyncArrowFunction(e){if(!this.match(47))return;let s=this.state.maybeInArrowParameters;this.state.maybeInArrowParameters=!0;let i=this.tsTryParseAndCatch(()=>{let r=this.startNodeAt(e);return r.typeParameters=this.tsParseTypeParameters(this.tsParseConstModifier),super.parseFunctionParams(r),r.returnType=this.tsTryParseTypeOrTypePredicateAnnotation(),this.expect(19),r});if(this.state.maybeInArrowParameters=s,!!i)return super.parseArrowExpression(i,null,!0)}tsParseTypeArgumentsInExpression(){if(this.reScan_lt()===47)return this.tsParseTypeArguments()}tsParseTypeArguments(){let e=this.startNode();return e.params=this.tsInType(()=>this.tsInNoContext(()=>(this.expect(47),this.tsParseDelimitedList("TypeParametersOrArguments",this.tsParseType.bind(this))))),e.params.length===0?this.raise(y.EmptyTypeArguments,e):!this.state.inType&&this.curContext()===E.brace&&this.reScan_lt_gt(),this.expect(48),this.finishNode(e,"TSTypeParameterInstantiation")}tsIsDeclarationStart(){return ci(this.state.type)}isExportDefaultSpecifier(){return this.tsIsDeclarationStart()?!1:super.isExportDefaultSpecifier()}parseAssignableListItem(e,s){let i=this.state.startLoc,r={};this.tsParseModifiers({allowedModifiers:["public","private","protected","override","readonly"]},r);let n=r.accessibility,o=r.override,h=r.readonly;!(e&4)&&(n||h||o)&&this.raise(y.UnexpectedParameterModifier,i);let l=this.parseMaybeDefault();e&2&&this.parseFunctionParamType(l);let c=this.parseMaybeDefault(l.loc.start,l);if(n||h||o){let u=this.startNodeAt(i);return s.length&&(u.decorators=s),n&&(u.accessibility=n),h&&(u.readonly=h),o&&(u.override=o),c.type!=="Identifier"&&c.type!=="AssignmentPattern"&&this.raise(y.UnsupportedParameterPropertyKind,u),u.parameter=c,this.finishNode(u,"TSParameterProperty")}return s.length&&(l.decorators=s),c}isSimpleParameter(e){return e.type==="TSParameterProperty"&&super.isSimpleParameter(e.parameter)||super.isSimpleParameter(e)}tsDisallowOptionalPattern(e){for(let s of e.params)s.type!=="Identifier"&&s.optional&&!this.state.isAmbientContext&&this.raise(y.PatternIsOptional,s);}setArrowFunctionParameters(e,s,i){super.setArrowFunctionParameters(e,s,i),this.tsDisallowOptionalPattern(e);}parseFunctionBodyAndFinish(e,s,i=!1){this.match(14)&&(e.returnType=this.tsParseTypeOrTypePredicateAnnotation(14));let r=s==="FunctionDeclaration"?"TSDeclareFunction":s==="ClassMethod"||s==="ClassPrivateMethod"?"TSDeclareMethod":void 0;return r&&!this.match(5)&&this.isLineTerminator()?this.finishNode(e,r):r==="TSDeclareFunction"&&this.state.isAmbientContext&&(this.raise(y.DeclareFunctionHasImplementation,e),e.declare)?super.parseFunctionBodyAndFinish(e,r,i):(this.tsDisallowOptionalPattern(e),super.parseFunctionBodyAndFinish(e,s,i))}registerFunctionStatementId(e){!e.body&&e.id?this.checkIdentifier(e.id,1024):super.registerFunctionStatementId(e);}tsCheckForInvalidTypeCasts(e){e.forEach(s=>{(s==null?void 0:s.type)==="TSTypeCastExpression"&&this.raise(y.UnexpectedTypeAnnotation,s.typeAnnotation);});}toReferencedList(e,s){return this.tsCheckForInvalidTypeCasts(e),e}parseArrayLike(e,s,i,r){let n=super.parseArrayLike(e,s,i,r);return n.type==="ArrayExpression"&&this.tsCheckForInvalidTypeCasts(n.elements),n}parseSubscript(e,s,i,r){if(!this.hasPrecedingLineBreak()&&this.match(35)){this.state.canStartJSXElement=!1,this.next();let o=this.startNodeAt(s);return o.expression=e,this.finishNode(o,"TSNonNullExpression")}let n=!1;if(this.match(18)&&this.lookaheadCharCode()===60){if(i)return r.stop=!0,e;r.optionalChainMember=n=!0,this.next();}if(this.match(47)||this.match(51)){let o,h=this.tsTryParseAndCatch(()=>{if(!i&&this.atPossibleAsyncArrow(e)){let f=this.tsTryParseGenericAsyncArrowFunction(s);if(f)return f}let l=this.tsParseTypeArgumentsInExpression();if(!l)return;if(n&&!this.match(10)){o=this.state.curPosition();return}if(Ie(this.state.type)){let f=super.parseTaggedTemplateExpression(e,s,r);return f.typeParameters=l,f}if(!i&&this.eat(10)){let f=this.startNodeAt(s);return f.callee=e,f.arguments=this.parseCallExpressionArguments(11),this.tsCheckForInvalidTypeCasts(f.arguments),f.typeParameters=l,r.optionalChainMember&&(f.optional=n),this.finishCallExpression(f,r.optionalChainMember)}let c=this.state.type;if(c===48||c===52||c!==10&&Ve(c)&&!this.hasPrecedingLineBreak())return;let u=this.startNodeAt(s);return u.expression=e,u.typeParameters=l,this.finishNode(u,"TSInstantiationExpression")});if(o&&this.unexpected(o,10),h)return h.type==="TSInstantiationExpression"&&(this.match(16)||this.match(18)&&this.lookaheadCharCode()!==40)&&this.raise(y.InvalidPropertyAccessAfterInstantiationExpression,this.state.startLoc),h}return super.parseSubscript(e,s,i,r)}parseNewCallee(e){var s;super.parseNewCallee(e);let{callee:i}=e;i.type==="TSInstantiationExpression"&&!((s=i.extra)!=null&&s.parenthesized)&&(e.typeParameters=i.typeParameters,e.callee=i.expression);}parseExprOp(e,s,i){let r;if(we(58)>i&&!this.hasPrecedingLineBreak()&&(this.isContextual(93)||(r=this.isContextual(120)))){let n=this.startNodeAt(s);return n.expression=e,n.typeAnnotation=this.tsInType(()=>(this.next(),this.match(75)?(r&&this.raise(p.UnexpectedKeyword,this.state.startLoc,{keyword:"const"}),this.tsParseTypeReference()):this.tsParseType())),this.finishNode(n,r?"TSSatisfiesExpression":"TSAsExpression"),this.reScan_lt_gt(),this.parseExprOp(n,s,i)}return super.parseExprOp(e,s,i)}checkReservedWord(e,s,i,r){this.state.isAmbientContext||super.checkReservedWord(e,s,i,r);}checkImportReflection(e){super.checkImportReflection(e),e.module&&e.importKind!=="value"&&this.raise(y.ImportReflectionHasImportType,e.specifiers[0].loc.start);}checkDuplicateExports(){}isPotentialImportPhase(e){if(super.isPotentialImportPhase(e))return !0;if(this.isContextual(130)){let s=this.lookaheadCharCode();return e?s===123||s===42:s!==61}return !e&&this.isContextual(87)}applyImportPhase(e,s,i,r){super.applyImportPhase(e,s,i,r),s?e.exportKind=i==="type"?"type":"value":e.importKind=i==="type"||i==="typeof"?i:"value";}parseImport(e){if(this.match(134))return e.importKind="value",super.parseImport(e);let s;if(C(this.state.type)&&this.lookaheadCharCode()===61)return e.importKind="value",this.tsParseImportEqualsDeclaration(e);if(this.isContextual(130)){let i=this.parseMaybeImportPhase(e,!1);if(this.lookaheadCharCode()===61)return this.tsParseImportEqualsDeclaration(e,i);s=super.parseImportSpecifiersAndAfter(e,i);}else s=super.parseImport(e);return s.importKind==="type"&&s.specifiers.length>1&&s.specifiers[0].type==="ImportDefaultSpecifier"&&this.raise(y.TypeImportCannotSpecifyDefaultAndNamed,s),s}parseExport(e,s){if(this.match(83)){this.next();let i=e,r=null;return this.isContextual(130)&&this.isPotentialImportPhase(!1)?r=this.parseMaybeImportPhase(i,!1):i.importKind="value",this.tsParseImportEqualsDeclaration(i,r,!0)}else if(this.eat(29)){let i=e;return i.expression=super.parseExpression(),this.semicolon(),this.sawUnambiguousESM=!0,this.finishNode(i,"TSExportAssignment")}else if(this.eatContextual(93)){let i=e;return this.expectContextual(128),i.id=this.parseIdentifier(),this.semicolon(),this.finishNode(i,"TSNamespaceExportDeclaration")}else return super.parseExport(e,s)}isAbstractClass(){return this.isContextual(124)&&this.lookahead().type===80}parseExportDefaultExpression(){if(this.isAbstractClass()){let e=this.startNode();return this.next(),e.abstract=!0,this.parseClass(e,!0,!0)}if(this.match(129)){let e=this.tsParseInterfaceDeclaration(this.startNode());if(e)return e}return super.parseExportDefaultExpression()}parseVarStatement(e,s,i=!1){let{isAmbientContext:r}=this.state,n=super.parseVarStatement(e,s,i||r);if(!r)return n;for(let{id:o,init:h}of n.declarations)h&&(s!=="const"||o.typeAnnotation?this.raise(y.InitializerNotAllowedInAmbientContext,h):Hi(h,this.hasPlugin("estree"))||this.raise(y.ConstInitializerMustBeStringOrNumericLiteralOrLiteralEnumReference,h));return n}parseStatementContent(e,s){if(this.match(75)&&this.isLookaheadContextual("enum")){let i=this.startNode();return this.expect(75),this.tsParseEnumDeclaration(i,{const:!0})}if(this.isContextual(126))return this.tsParseEnumDeclaration(this.startNode());if(this.isContextual(129)){let i=this.tsParseInterfaceDeclaration(this.startNode());if(i)return i}return super.parseStatementContent(e,s)}parseAccessModifier(){return this.tsParseModifier(["public","protected","private"])}tsHasSomeModifiers(e,s){return s.some(i=>Ut(i)?e.accessibility===i:!!e[i])}tsIsStartOfStaticBlocks(){return this.isContextual(106)&&this.lookaheadCharCode()===123}parseClassMember(e,s,i){let r=["declare","private","public","protected","override","abstract","readonly","static"];this.tsParseModifiers({allowedModifiers:r,disallowedModifiers:["in","out"],stopOnStartOfClassStaticBlock:!0,errorTemplate:y.InvalidModifierOnTypeParameterPositions},s);let n=()=>{this.tsIsStartOfStaticBlocks()?(this.next(),this.next(),this.tsHasSomeModifiers(s,r)&&this.raise(y.StaticBlockCannotHaveModifier,this.state.curPosition()),super.parseClassStaticBlock(e,s)):this.parseClassMemberWithIsStatic(e,s,i,!!s.static);};s.declare?this.tsInAmbientContext(n):n();}parseClassMemberWithIsStatic(e,s,i,r){let n=this.tsTryParseIndexSignature(s);if(n){e.body.push(n),s.abstract&&this.raise(y.IndexSignatureHasAbstract,s),s.accessibility&&this.raise(y.IndexSignatureHasAccessibility,s,{modifier:s.accessibility}),s.declare&&this.raise(y.IndexSignatureHasDeclare,s),s.override&&this.raise(y.IndexSignatureHasOverride,s);return}!this.state.inAbstractClass&&s.abstract&&this.raise(y.NonAbstractClassHasAbstractMethod,s),s.override&&(i.hadSuperClass||this.raise(y.OverrideNotInSubClass,s)),super.parseClassMemberWithIsStatic(e,s,i,r);}parsePostMemberNameModifiers(e){this.eat(17)&&(e.optional=!0),e.readonly&&this.match(10)&&this.raise(y.ClassMethodHasReadonly,e),e.declare&&this.match(10)&&this.raise(y.ClassMethodHasDeclare,e);}parseExpressionStatement(e,s,i){return (s.type==="Identifier"?this.tsParseExpressionStatement(e,s,i):void 0)||super.parseExpressionStatement(e,s,i)}shouldParseExportDeclaration(){return this.tsIsDeclarationStart()?!0:super.shouldParseExportDeclaration()}parseConditional(e,s,i){if(!this.state.maybeInArrowParameters||!this.match(17))return super.parseConditional(e,s,i);let r=this.tryParse(()=>super.parseConditional(e,s));return r.node?(r.error&&(this.state=r.failState),r.node):(r.error&&super.setOptionalParametersError(i,r.error),e)}parseParenItem(e,s){let i=super.parseParenItem(e,s);if(this.eat(17)&&(i.optional=!0,this.resetEndLocation(e)),this.match(14)){let r=this.startNodeAt(s);return r.expression=e,r.typeAnnotation=this.tsParseTypeAnnotation(),this.finishNode(r,"TSTypeCastExpression")}return e}parseExportDeclaration(e){if(!this.state.isAmbientContext&&this.isContextual(125))return this.tsInAmbientContext(()=>this.parseExportDeclaration(e));let s=this.state.startLoc,i=this.eatContextual(125);if(i&&(this.isContextual(125)||!this.shouldParseExportDeclaration()))throw this.raise(y.ExpectedAmbientAfterExportDeclare,this.state.startLoc);let n=C(this.state.type)&&this.tsTryParseExportDeclaration()||super.parseExportDeclaration(e);return n?((n.type==="TSInterfaceDeclaration"||n.type==="TSTypeAliasDeclaration"||i)&&(e.exportKind="type"),i&&(this.resetStartLocation(n,s),n.declare=!0),n):null}parseClassId(e,s,i,r){if((!s||i)&&this.isContextual(113))return;super.parseClassId(e,s,i,e.declare?1024:8331);let n=this.tsTryParseTypeParameters(this.tsParseInOutConstModifiers);n&&(e.typeParameters=n);}parseClassPropertyAnnotation(e){e.optional||(this.eat(35)?e.definite=!0:this.eat(17)&&(e.optional=!0));let s=this.tsTryParseTypeAnnotation();s&&(e.typeAnnotation=s);}parseClassProperty(e){if(this.parseClassPropertyAnnotation(e),this.state.isAmbientContext&&!(e.readonly&&!e.typeAnnotation)&&this.match(29)&&this.raise(y.DeclareClassFieldHasInitializer,this.state.startLoc),e.abstract&&this.match(29)){let{key:s}=e;this.raise(y.AbstractPropertyHasInitializer,this.state.startLoc,{propertyName:s.type==="Identifier"&&!e.computed?s.name:`[${this.input.slice(this.offsetToSourcePos(s.start),this.offsetToSourcePos(s.end))}]`});}return super.parseClassProperty(e)}parseClassPrivateProperty(e){return e.abstract&&this.raise(y.PrivateElementHasAbstract,e),e.accessibility&&this.raise(y.PrivateElementHasAccessibility,e,{modifier:e.accessibility}),this.parseClassPropertyAnnotation(e),super.parseClassPrivateProperty(e)}parseClassAccessorProperty(e){return this.parseClassPropertyAnnotation(e),e.optional&&this.raise(y.AccessorCannotBeOptional,e),super.parseClassAccessorProperty(e)}pushClassMethod(e,s,i,r,n,o){let h=this.tsTryParseTypeParameters(this.tsParseConstModifier);h&&n&&this.raise(y.ConstructorHasTypeParameters,h);let{declare:l=!1,kind:c}=s;l&&(c==="get"||c==="set")&&this.raise(y.DeclareAccessor,s,{kind:c}),h&&(s.typeParameters=h),super.pushClassMethod(e,s,i,r,n,o);}pushClassPrivateMethod(e,s,i,r){let n=this.tsTryParseTypeParameters(this.tsParseConstModifier);n&&(s.typeParameters=n),super.pushClassPrivateMethod(e,s,i,r);}declareClassPrivateMethodInScope(e,s){e.type!=="TSDeclareMethod"&&(e.type==="MethodDefinition"&&!hasOwnProperty.call(e.value,"body")||super.declareClassPrivateMethodInScope(e,s));}parseClassSuper(e){super.parseClassSuper(e),e.superClass&&(this.match(47)||this.match(51))&&(e.superTypeParameters=this.tsParseTypeArgumentsInExpression()),this.eatContextual(113)&&(e.implements=this.tsParseHeritageClause("implements"));}parseObjPropValue(e,s,i,r,n,o,h){let l=this.tsTryParseTypeParameters(this.tsParseConstModifier);return l&&(e.typeParameters=l),super.parseObjPropValue(e,s,i,r,n,o,h)}parseFunctionParams(e,s){let i=this.tsTryParseTypeParameters(this.tsParseConstModifier);i&&(e.typeParameters=i),super.parseFunctionParams(e,s);}parseVarId(e,s){super.parseVarId(e,s),e.id.type==="Identifier"&&!this.hasPrecedingLineBreak()&&this.eat(35)&&(e.definite=!0);let i=this.tsTryParseTypeAnnotation();i&&(e.id.typeAnnotation=i,this.resetEndLocation(e.id));}parseAsyncArrowFromCallExpression(e,s){return this.match(14)&&(e.returnType=this.tsParseTypeAnnotation()),super.parseAsyncArrowFromCallExpression(e,s)}parseMaybeAssign(e,s){var i,r,n,o,h;let l,c,u;if(this.hasPlugin("jsx")&&(this.match(143)||this.match(47))){if(l=this.state.clone(),c=this.tryParse(()=>super.parseMaybeAssign(e,s),l),!c.error)return c.node;let{context:x}=this.state,S=x[x.length-1];(S===E.j_oTag||S===E.j_expr)&&x.pop();}if(!((i=c)!=null&&i.error)&&!this.match(47))return super.parseMaybeAssign(e,s);(!l||l===this.state)&&(l=this.state.clone());let f,d=this.tryParse(x=>{var S,N;f=this.tsParseTypeParameters(this.tsParseConstModifier);let w=super.parseMaybeAssign(e,s);return (w.type!=="ArrowFunctionExpression"||(S=w.extra)!=null&&S.parenthesized)&&x(),((N=f)==null?void 0:N.params.length)!==0&&this.resetStartLocationFromNode(w,f),w.typeParameters=f,w},l);if(!d.error&&!d.aborted)return f&&this.reportReservedArrowTypeParam(f),d.node;if(!c&&(Rt(!this.hasPlugin("jsx")),u=this.tryParse(()=>super.parseMaybeAssign(e,s),l),!u.error))return u.node;if((r=c)!=null&&r.node)return this.state=c.failState,c.node;if(d.node)return this.state=d.failState,f&&this.reportReservedArrowTypeParam(f),d.node;if((n=u)!=null&&n.node)return this.state=u.failState,u.node;throw ((o=c)==null?void 0:o.error)||d.error||((h=u)==null?void 0:h.error)}reportReservedArrowTypeParam(e){var s;e.params.length===1&&!e.params[0].constraint&&!((s=e.extra)!=null&&s.trailingComma)&&this.getPluginOption("typescript","disallowAmbiguousJSXLike")&&this.raise(y.ReservedArrowTypeParam,e);}parseMaybeUnary(e,s){return !this.hasPlugin("jsx")&&this.match(47)?this.tsParseTypeAssertion():super.parseMaybeUnary(e,s)}parseArrow(e){if(this.match(14)){let s=this.tryParse(i=>{let r=this.tsParseTypeOrTypePredicateAnnotation(14);return (this.canInsertSemicolon()||!this.match(19))&&i(),r});if(s.aborted)return;s.thrown||(s.error&&(this.state=s.failState),e.returnType=s.node);}return super.parseArrow(e)}parseFunctionParamType(e){this.eat(17)&&(e.optional=!0);let s=this.tsTryParseTypeAnnotation();return s&&(e.typeAnnotation=s),this.resetEndLocation(e),e}isAssignable(e,s){switch(e.type){case"TSTypeCastExpression":return this.isAssignable(e.expression,s);case"TSParameterProperty":return !0;default:return super.isAssignable(e,s)}}toAssignable(e,s=!1){switch(e.type){case"ParenthesizedExpression":this.toAssignableParenthesizedExpression(e,s);break;case"TSAsExpression":case"TSSatisfiesExpression":case"TSNonNullExpression":case"TSTypeAssertion":s?this.expressionScope.recordArrowParameterBindingError(y.UnexpectedTypeCastInParameter,e):this.raise(y.UnexpectedTypeCastInParameter,e),this.toAssignable(e.expression,s);break;case"AssignmentExpression":!s&&e.left.type==="TSTypeCastExpression"&&(e.left=this.typeCastToParameter(e.left));default:super.toAssignable(e,s);}}toAssignableParenthesizedExpression(e,s){switch(e.expression.type){case"TSAsExpression":case"TSSatisfiesExpression":case"TSNonNullExpression":case"TSTypeAssertion":case"ParenthesizedExpression":this.toAssignable(e.expression,s);break;default:super.toAssignable(e,s);}}checkToRestConversion(e,s){switch(e.type){case"TSAsExpression":case"TSSatisfiesExpression":case"TSTypeAssertion":case"TSNonNullExpression":this.checkToRestConversion(e.expression,!1);break;default:super.checkToRestConversion(e,s);}}isValidLVal(e,s,i){switch(e){case"TSTypeCastExpression":return !0;case"TSParameterProperty":return "parameter";case"TSNonNullExpression":case"TSInstantiationExpression":return "expression";case"TSAsExpression":case"TSSatisfiesExpression":case"TSTypeAssertion":return (i!==64||!s)&&["expression",!0];default:return super.isValidLVal(e,s,i)}}parseBindingAtom(){return this.state.type===78?this.parseIdentifier(!0):super.parseBindingAtom()}parseMaybeDecoratorArguments(e){if(this.match(47)||this.match(51)){let s=this.tsParseTypeArgumentsInExpression();if(this.match(10)){let i=super.parseMaybeDecoratorArguments(e);return i.typeParameters=s,i}this.unexpected(null,10);}return super.parseMaybeDecoratorArguments(e)}checkCommaAfterRest(e){return this.state.isAmbientContext&&this.match(12)&&this.lookaheadCharCode()===e?(this.next(),!1):super.checkCommaAfterRest(e)}isClassMethod(){return this.match(47)||super.isClassMethod()}isClassProperty(){return this.match(35)||this.match(14)||super.isClassProperty()}parseMaybeDefault(e,s){let i=super.parseMaybeDefault(e,s);return i.type==="AssignmentPattern"&&i.typeAnnotation&&i.right.start<i.typeAnnotation.start&&this.raise(y.TypeAnnotationAfterAssign,i.typeAnnotation),i}getTokenFromCode(e){if(this.state.inType){if(e===62){this.finishOp(48,1);return}if(e===60){this.finishOp(47,1);return}}super.getTokenFromCode(e);}reScan_lt_gt(){let{type:e}=this.state;e===47?(this.state.pos-=1,this.readToken_lt()):e===48&&(this.state.pos-=1,this.readToken_gt());}reScan_lt(){let{type:e}=this.state;return e===51?(this.state.pos-=2,this.finishOp(47,1),47):e}toAssignableList(e,s,i){for(let r=0;r<e.length;r++){let n=e[r];(n==null?void 0:n.type)==="TSTypeCastExpression"&&(e[r]=this.typeCastToParameter(n));}super.toAssignableList(e,s,i);}typeCastToParameter(e){return e.expression.typeAnnotation=e.typeAnnotation,this.resetEndLocation(e.expression,e.typeAnnotation.loc.end),e.expression}shouldParseArrow(e){return this.match(14)?e.every(s=>this.isAssignable(s,!0)):super.shouldParseArrow(e)}shouldParseAsyncArrow(){return this.match(14)||super.shouldParseAsyncArrow()}canHaveLeadingDecorator(){return super.canHaveLeadingDecorator()||this.isAbstractClass()}jsxParseOpeningElementAfterName(e){if(this.match(47)||this.match(51)){let s=this.tsTryParseAndCatch(()=>this.tsParseTypeArgumentsInExpression());s&&(e.typeParameters=s);}return super.jsxParseOpeningElementAfterName(e)}getGetterSetterExpectedParamCount(e){let s=super.getGetterSetterExpectedParamCount(e),r=this.getObjectOrClassMethodParams(e)[0];return r&&this.isThisParam(r)?s+1:s}parseCatchClauseParam(){let e=super.parseCatchClauseParam(),s=this.tsTryParseTypeAnnotation();return s&&(e.typeAnnotation=s,this.resetEndLocation(e)),e}tsInAmbientContext(e){let{isAmbientContext:s,strict:i}=this.state;this.state.isAmbientContext=!0,this.state.strict=!1;try{return e()}finally{this.state.isAmbientContext=s,this.state.strict=i;}}parseClass(e,s,i){let r=this.state.inAbstractClass;this.state.inAbstractClass=!!e.abstract;try{return super.parseClass(e,s,i)}finally{this.state.inAbstractClass=r;}}tsParseAbstractDeclaration(e,s){if(this.match(80))return e.abstract=!0,this.maybeTakeDecorators(s,this.parseClass(e,!0,!1));if(this.isContextual(129)){if(!this.hasFollowingLineBreak())return e.abstract=!0,this.raise(y.NonClassMethodPropertyHasAbstractModifer,e),this.tsParseInterfaceDeclaration(e)}else this.unexpected(null,80);}parseMethod(e,s,i,r,n,o,h){let l=super.parseMethod(e,s,i,r,n,o,h);if(l.abstract&&(this.hasPlugin("estree")?!!l.value.body:!!l.body)){let{key:u}=l;this.raise(y.AbstractMethodHasImplementation,l,{methodName:u.type==="Identifier"&&!l.computed?u.name:`[${this.input.slice(this.offsetToSourcePos(u.start),this.offsetToSourcePos(u.end))}]`});}return l}tsParseTypeParameterName(){return this.parseIdentifier().name}shouldParseAsAmbientContext(){return !!this.getPluginOption("typescript","dts")}parse(){return this.shouldParseAsAmbientContext()&&(this.state.isAmbientContext=!0),super.parse()}getExpression(){return this.shouldParseAsAmbientContext()&&(this.state.isAmbientContext=!0),super.getExpression()}parseExportSpecifier(e,s,i,r){return !s&&r?(this.parseTypeOnlyImportExportSpecifier(e,!1,i),this.finishNode(e,"ExportSpecifier")):(e.exportKind="value",super.parseExportSpecifier(e,s,i,r))}parseImportSpecifier(e,s,i,r,n){return !s&&r?(this.parseTypeOnlyImportExportSpecifier(e,!0,i),this.finishNode(e,"ImportSpecifier")):(e.importKind="value",super.parseImportSpecifier(e,s,i,r,i?4098:4096))}parseTypeOnlyImportExportSpecifier(e,s,i){let r=s?"imported":"local",n=s?"local":"exported",o=e[r],h,l=!1,c=!0,u=o.loc.start;if(this.isContextual(93)){let d=this.parseIdentifier();if(this.isContextual(93)){let x=this.parseIdentifier();D(this.state.type)?(l=!0,o=d,h=s?this.parseIdentifier():this.parseModuleExportName(),c=!1):(h=x,c=!1);}else D(this.state.type)?(c=!1,h=s?this.parseIdentifier():this.parseModuleExportName()):(l=!0,o=d);}else D(this.state.type)&&(l=!0,s?(o=this.parseIdentifier(!0),this.isContextual(93)||this.checkReservedWord(o.name,o.loc.start,!0,!0)):o=this.parseModuleExportName());l&&i&&this.raise(s?y.TypeModifierIsUsedInTypeImports:y.TypeModifierIsUsedInTypeExports,u),e[r]=o,e[n]=h;let f=s?"importKind":"exportKind";e[f]=l?"type":"value",c&&this.eatContextual(93)&&(e[n]=s?this.parseIdentifier():this.parseModuleExportName()),e[n]||(e[n]=_(e[r])),s&&this.checkIdentifier(e[n],l?4098:4096);}};function Ki(a){if(a.type!=="MemberExpression")return !1;let{computed:t,property:e}=a;return t&&e.type!=="StringLiteral"&&(e.type!=="TemplateLiteral"||e.expressions.length>0)?!1:ss(a.object)}function Hi(a,t){var e;let{type:s}=a;if((e=a.extra)!=null&&e.parenthesized)return !1;if(t){if(s==="Literal"){let{value:i}=a;if(typeof i=="string"||typeof i=="boolean")return !0}}else if(s==="StringLiteral"||s==="BooleanLiteral")return !0;return !!(ts(a,t)||Ji(a,t)||s==="TemplateLiteral"&&a.expressions.length===0||Ki(a))}function ts(a,t){return t?a.type==="Literal"&&(typeof a.value=="number"||"bigint"in a):a.type==="NumericLiteral"||a.type==="BigIntLiteral"}function Ji(a,t){if(a.type==="UnaryExpression"){let{operator:e,argument:s}=a;if(e==="-"&&ts(s,t))return !0}return !1}function ss(a){return a.type==="Identifier"?!0:a.type!=="MemberExpression"||a.computed?!1:ss(a.object)}var _t=U`placeholders`({ClassNameIsRequired:"A class name is required.",UnexpectedSpace:"Unexpected space in placeholder."}),Wi=a=>class extends a{parsePlaceholder(e){if(this.match(133)){let s=this.startNode();return this.next(),this.assertNoSpace(),s.name=super.parseIdentifier(!0),this.assertNoSpace(),this.expect(133),this.finishPlaceholder(s,e)}}finishPlaceholder(e,s){let i=e;return (!i.expectedNode||!i.type)&&(i=this.finishNode(i,"Placeholder")),i.expectedNode=s,i}getTokenFromCode(e){e===37&&this.input.charCodeAt(this.state.pos+1)===37?this.finishOp(133,2):super.getTokenFromCode(e);}parseExprAtom(e){return this.parsePlaceholder("Expression")||super.parseExprAtom(e)}parseIdentifier(e){return this.parsePlaceholder("Identifier")||super.parseIdentifier(e)}checkReservedWord(e,s,i,r){e!==void 0&&super.checkReservedWord(e,s,i,r);}parseBindingAtom(){return this.parsePlaceholder("Pattern")||super.parseBindingAtom()}isValidLVal(e,s,i){return e==="Placeholder"||super.isValidLVal(e,s,i)}toAssignable(e,s){e&&e.type==="Placeholder"&&e.expectedNode==="Expression"?e.expectedNode="Pattern":super.toAssignable(e,s);}chStartsBindingIdentifier(e,s){return !!(super.chStartsBindingIdentifier(e,s)||this.lookahead().type===133)}verifyBreakContinue(e,s){e.label&&e.label.type==="Placeholder"||super.verifyBreakContinue(e,s);}parseExpressionStatement(e,s){var i;if(s.type!=="Placeholder"||(i=s.extra)!=null&&i.parenthesized)return super.parseExpressionStatement(e,s);if(this.match(14)){let n=e;return n.label=this.finishPlaceholder(s,"Identifier"),this.next(),n.body=super.parseStatementOrSloppyAnnexBFunctionDeclaration(),this.finishNode(n,"LabeledStatement")}this.semicolon();let r=e;return r.name=s.name,this.finishPlaceholder(r,"Statement")}parseBlock(e,s,i){return this.parsePlaceholder("BlockStatement")||super.parseBlock(e,s,i)}parseFunctionId(e){return this.parsePlaceholder("Identifier")||super.parseFunctionId(e)}parseClass(e,s,i){let r=s?"ClassDeclaration":"ClassExpression";this.next();let n=this.state.strict,o=this.parsePlaceholder("Identifier");if(o)if(this.match(81)||this.match(133)||this.match(5))e.id=o;else {if(i||!s)return e.id=null,e.body=this.finishPlaceholder(o,"ClassBody"),this.finishNode(e,r);throw this.raise(_t.ClassNameIsRequired,this.state.startLoc)}else this.parseClassId(e,s,i);return super.parseClassSuper(e),e.body=this.parsePlaceholder("ClassBody")||super.parseClassBody(!!e.superClass,n),this.finishNode(e,r)}parseExport(e,s){let i=this.parsePlaceholder("Identifier");if(!i)return super.parseExport(e,s);let r=e;if(!this.isContextual(98)&&!this.match(12))return r.specifiers=[],r.source=null,r.declaration=this.finishPlaceholder(i,"Declaration"),this.finishNode(r,"ExportNamedDeclaration");this.expectPlugin("exportDefaultFrom");let n=this.startNode();return n.exported=i,r.specifiers=[this.finishNode(n,"ExportDefaultSpecifier")],super.parseExport(r,s)}isExportDefaultSpecifier(){if(this.match(65)){let e=this.nextTokenStart();if(this.isUnparsedContextual(e,"from")&&this.input.startsWith(q(133),this.nextTokenStartSince(e+4)))return !0}return super.isExportDefaultSpecifier()}maybeParseExportDefaultSpecifier(e,s){var i;return (i=e.specifiers)!=null&&i.length?!0:super.maybeParseExportDefaultSpecifier(e,s)}checkExport(e){let{specifiers:s}=e;s!=null&&s.length&&(e.specifiers=s.filter(i=>i.exported.type==="Placeholder")),super.checkExport(e),e.specifiers=s;}parseImport(e){let s=this.parsePlaceholder("Identifier");if(!s)return super.parseImport(e);if(e.specifiers=[],!this.isContextual(98)&&!this.match(12))return e.source=this.finishPlaceholder(s,"StringLiteral"),this.semicolon(),this.finishNode(e,"ImportDeclaration");let i=this.startNodeAtNode(s);return i.local=s,e.specifiers.push(this.finishNode(i,"ImportDefaultSpecifier")),this.eat(12)&&(this.maybeParseStarImportSpecifier(e)||this.parseNamedImportSpecifiers(e)),this.expectContextual(98),e.source=this.parseImportSource(),this.semicolon(),this.finishNode(e,"ImportDeclaration")}parseImportSource(){return this.parsePlaceholder("StringLiteral")||super.parseImportSource()}assertNoSpace(){this.state.start>this.offsetToSourcePos(this.state.lastTokEndLoc.index)&&this.raise(_t.UnexpectedSpace,this.state.lastTokEndLoc);}},Xi=a=>class extends a{parseV8Intrinsic(){if(this.match(54)){let e=this.state.startLoc,s=this.startNode();if(this.next(),C(this.state.type)){let i=this.parseIdentifierName(),r=this.createIdentifier(s,i);if(r.type="V8IntrinsicIdentifier",this.match(10))return r}this.unexpected(e);}}parseExprAtom(e){return this.parseV8Intrinsic()||super.parseExprAtom(e)}},jt=["minimal","fsharp","hack","smart"],$t=["^^","@@","^","%","#"];function Gi(a){if(a.has("decorators")){if(a.has("decorators-legacy"))throw new Error("Cannot use the decorators and decorators-legacy plugin together");let e=a.get("decorators").decoratorsBeforeExport;if(e!=null&&typeof e!="boolean")throw new Error("'decoratorsBeforeExport' must be a boolean, if specified.");let s=a.get("decorators").allowCallParenthesized;if(s!=null&&typeof s!="boolean")throw new Error("'allowCallParenthesized' must be a boolean.")}if(a.has("flow")&&a.has("typescript"))throw new Error("Cannot combine flow and typescript plugins.");if(a.has("placeholders")&&a.has("v8intrinsic"))throw new Error("Cannot combine placeholders and v8intrinsic plugins.");if(a.has("pipelineOperator")){var t;let e=a.get("pipelineOperator").proposal;if(!jt.includes(e)){let i=jt.map(r=>`"${r}"`).join(", ");throw new Error(`"pipelineOperator" requires "proposal" option whose value must be one of: ${i}.`)}let s=((t=a.get("recordAndTuple"))==null?void 0:t.syntaxType)==="hash";if(e==="hack"){if(a.has("placeholders"))throw new Error("Cannot combine placeholders plugin and Hack-style pipes.");if(a.has("v8intrinsic"))throw new Error("Cannot combine v8intrinsic plugin and Hack-style pipes.");let i=a.get("pipelineOperator").topicToken;if(!$t.includes(i)){let r=$t.map(n=>`"${n}"`).join(", ");throw new Error(`"pipelineOperator" in "proposal": "hack" mode also requires a "topicToken" option whose value must be one of: ${r}.`)}if(i==="#"&&s)throw new Error(`Plugin conflict between \`["pipelineOperator", { proposal: "hack", topicToken: "#" }]\` and \`${JSON.stringify(["recordAndTuple",a.get("recordAndTuple")])}\`.`)}else if(e==="smart"&&s)throw new Error(`Plugin conflict between \`["pipelineOperator", { proposal: "smart" }]\` and \`${JSON.stringify(["recordAndTuple",a.get("recordAndTuple")])}\`.`)}if(a.has("moduleAttributes")){if(a.has("deprecatedImportAssert")||a.has("importAssertions"))throw new Error("Cannot combine importAssertions, deprecatedImportAssert and moduleAttributes plugins.");if(a.get("moduleAttributes").version!=="may-2020")throw new Error("The 'moduleAttributes' plugin requires a 'version' option, representing the last proposal update. Currently, the only supported value is 'may-2020'.")}if(a.has("importAssertions")&&a.has("deprecatedImportAssert"))throw new Error("Cannot combine importAssertions and deprecatedImportAssert plugins.");if(!a.has("deprecatedImportAssert")&&a.has("importAttributes")&&a.get("importAttributes").deprecatedAssertSyntax&&a.set("deprecatedImportAssert",{}),a.has("recordAndTuple")){let e=a.get("recordAndTuple").syntaxType;if(e!=null){let s=["hash","bar"];if(!s.includes(e))throw new Error("The 'syntaxType' option of the 'recordAndTuple' plugin must be one of: "+s.map(i=>`'${i}'`).join(", "))}}if(a.has("asyncDoExpressions")&&!a.has("doExpressions")){let e=new Error("'asyncDoExpressions' requires 'doExpressions', please add 'doExpressions' to parser plugins.");throw e.missingPlugins="doExpressions",e}if(a.has("optionalChainingAssign")&&a.get("optionalChainingAssign").version!=="2023-07")throw new Error("The 'optionalChainingAssign' plugin requires a 'version' option, representing the last proposal update. Currently, the only supported value is '2023-07'.")}var is={estree:Zs,jsx:ji,flow:_i,typescript:qi,v8intrinsic:Xi,placeholders:Wi},Yi=Object.keys(is);function Qi(){return {sourceType:"script",sourceFilename:void 0,startIndex:0,startColumn:0,startLine:1,allowAwaitOutsideFunction:!1,allowReturnOutsideFunction:!1,allowNewTargetOutsideFunction:!1,allowImportExportEverywhere:!1,allowSuperOutsideMethod:!1,allowUndeclaredExports:!1,plugins:[],strictMode:null,ranges:!1,tokens:!1,createImportExpressions:!1,createParenthesizedExpressions:!1,errorRecovery:!1,attachComment:!0,annexB:!0}}function Zi(a){let t=Qi();if(a==null)return t;if(a.annexB!=null&&a.annexB!==!1)throw new Error("The `annexB` option can only be set to `false`.");for(let e of Object.keys(t))a[e]!=null&&(t[e]=a[e]);if(t.startLine===1)a.startIndex==null&&t.startColumn>0?t.startIndex=t.startColumn:a.startColumn==null&&t.startIndex>0&&(t.startColumn=t.startIndex);else if((a.startColumn==null||a.startIndex==null)&&a.startIndex!=null)throw new Error("With a `startLine > 1` you must also specify `startIndex` and `startColumn`.");return t}var ot=class extends nt{checkProto(t,e,s,i){if(t.type==="SpreadElement"||this.isObjectMethod(t)||t.computed||t.shorthand)return;let r=t.key;if((r.type==="Identifier"?r.name:r.value)==="__proto__"){if(e){this.raise(p.RecordNoProto,r);return}s.used&&(i?i.doubleProtoLoc===null&&(i.doubleProtoLoc=r.loc.start):this.raise(p.DuplicateProto,r)),s.used=!0;}}shouldExitDescending(t,e){return t.type==="ArrowFunctionExpression"&&this.offsetToSourcePos(t.start)===e}getExpression(){this.enterInitialScopes(),this.nextToken();let t=this.parseExpression();return this.match(140)||this.unexpected(),this.finalizeRemainingComments(),t.comments=this.comments,t.errors=this.state.errors,this.options.tokens&&(t.tokens=this.tokens),t}parseExpression(t,e){return t?this.disallowInAnd(()=>this.parseExpressionBase(e)):this.allowInAnd(()=>this.parseExpressionBase(e))}parseExpressionBase(t){let e=this.state.startLoc,s=this.parseMaybeAssign(t);if(this.match(12)){let i=this.startNodeAt(e);for(i.expressions=[s];this.eat(12);)i.expressions.push(this.parseMaybeAssign(t));return this.toReferencedList(i.expressions),this.finishNode(i,"SequenceExpression")}return s}parseMaybeAssignDisallowIn(t,e){return this.disallowInAnd(()=>this.parseMaybeAssign(t,e))}parseMaybeAssignAllowIn(t,e){return this.allowInAnd(()=>this.parseMaybeAssign(t,e))}setOptionalParametersError(t,e){var s;t.optionalParametersLoc=(s=e==null?void 0:e.loc)!=null?s:this.state.startLoc;}parseMaybeAssign(t,e){let s=this.state.startLoc;if(this.isContextual(108)&&this.prodParam.hasYield){let o=this.parseYield();return e&&(o=e.call(this,o,s)),o}let i;t?i=!1:(t=new Q,i=!0);let{type:r}=this.state;(r===10||C(r))&&(this.state.potentialArrowAt=this.state.start);let n=this.parseMaybeConditional(t);if(e&&(n=e.call(this,n,s)),ri(this.state.type)){let o=this.startNodeAt(s),h=this.state.value;if(o.operator=h,this.match(29)){this.toAssignable(n,!0),o.left=n;let l=s.index;t.doubleProtoLoc!=null&&t.doubleProtoLoc.index>=l&&(t.doubleProtoLoc=null),t.shorthandAssignLoc!=null&&t.shorthandAssignLoc.index>=l&&(t.shorthandAssignLoc=null),t.privateKeyLoc!=null&&t.privateKeyLoc.index>=l&&(this.checkDestructuringPrivate(t),t.privateKeyLoc=null);}else o.left=n;return this.next(),o.right=this.parseMaybeAssign(),this.checkLVal(n,this.finishNode(o,"AssignmentExpression")),o}else i&&this.checkExpressionErrors(t,!0);return n}parseMaybeConditional(t){let e=this.state.startLoc,s=this.state.potentialArrowAt,i=this.parseExprOps(t);return this.shouldExitDescending(i,s)?i:this.parseConditional(i,e,t)}parseConditional(t,e,s){if(this.eat(17)){let i=this.startNodeAt(e);return i.test=t,i.consequent=this.parseMaybeAssignAllowIn(),this.expect(14),i.alternate=this.parseMaybeAssign(),this.finishNode(i,"ConditionalExpression")}return t}parseMaybeUnaryOrPrivate(t){return this.match(139)?this.parsePrivateName():this.parseMaybeUnary(t)}parseExprOps(t){let e=this.state.startLoc,s=this.state.potentialArrowAt,i=this.parseMaybeUnaryOrPrivate(t);return this.shouldExitDescending(i,s)?i:this.parseExprOp(i,e,-1)}parseExprOp(t,e,s){if(this.isPrivateName(t)){let r=this.getPrivateNameSV(t);(s>=we(58)||!this.prodParam.hasIn||!this.match(58))&&this.raise(p.PrivateInExpectedIn,t,{identifierName:r}),this.classScope.usePrivateName(r,t.loc.start);}let i=this.state.type;if(ni(i)&&(this.prodParam.hasIn||!this.match(58))){let r=we(i);if(r>s){if(i===39){if(this.expectPlugin("pipelineOperator"),this.state.inFSharpPipelineDirectBody)return t;this.checkPipelineAtInfixOperator(t,e);}let n=this.startNodeAt(e);n.left=t,n.operator=this.state.value;let o=i===41||i===42,h=i===40;if(h&&(r=we(42)),this.next(),i===39&&this.hasPlugin(["pipelineOperator",{proposal:"minimal"}])&&this.state.type===96&&this.prodParam.hasAwait)throw this.raise(p.UnexpectedAwaitAfterPipelineBody,this.state.startLoc);n.right=this.parseExprOpRightExpr(i,r);let l=this.finishNode(n,o||h?"LogicalExpression":"BinaryExpression"),c=this.state.type;if(h&&(c===41||c===42)||o&&c===40)throw this.raise(p.MixingCoalesceWithLogical,this.state.startLoc);return this.parseExprOp(l,e,s)}}return t}parseExprOpRightExpr(t,e){let s=this.state.startLoc;switch(t){case 39:switch(this.getPluginOption("pipelineOperator","proposal")){case"hack":return this.withTopicBindingContext(()=>this.parseHackPipeBody());case"smart":return this.withTopicBindingContext(()=>{if(this.prodParam.hasYield&&this.isContextual(108))throw this.raise(p.PipeBodyIsTighter,this.state.startLoc);return this.parseSmartPipelineBodyInStyle(this.parseExprOpBaseRightExpr(t,e),s)});case"fsharp":return this.withSoloAwaitPermittingContext(()=>this.parseFSharpPipelineBody(e))}default:return this.parseExprOpBaseRightExpr(t,e)}}parseExprOpBaseRightExpr(t,e){let s=this.state.startLoc;return this.parseExprOp(this.parseMaybeUnaryOrPrivate(),s,pi(t)?e-1:e)}parseHackPipeBody(){var t;let{startLoc:e}=this.state,s=this.parseMaybeAssign();return Ws.has(s.type)&&!((t=s.extra)!=null&&t.parenthesized)&&this.raise(p.PipeUnparenthesizedBody,e,{type:s.type}),this.topicReferenceWasUsedInCurrentContext()||this.raise(p.PipeTopicUnused,e),s}checkExponentialAfterUnary(t){this.match(57)&&this.raise(p.UnexpectedTokenUnaryExponentiation,t.argument);}parseMaybeUnary(t,e){let s=this.state.startLoc,i=this.isContextual(96);if(i&&this.recordAwaitIfAllowed()){this.next();let h=this.parseAwait(s);return e||this.checkExponentialAfterUnary(h),h}let r=this.match(34),n=this.startNode();if(hi(this.state.type)){n.operator=this.state.value,n.prefix=!0,this.match(72)&&this.expectPlugin("throwExpressions");let h=this.match(89);if(this.next(),n.argument=this.parseMaybeUnary(null,!0),this.checkExpressionErrors(t,!0),this.state.strict&&h){let l=n.argument;l.type==="Identifier"?this.raise(p.StrictDelete,n):this.hasPropertyAsPrivateName(l)&&this.raise(p.DeletePrivateField,n);}if(!r)return e||this.checkExponentialAfterUnary(n),this.finishNode(n,"UnaryExpression")}let o=this.parseUpdate(n,r,t);if(i){let{type:h}=this.state;if((this.hasPlugin("v8intrinsic")?Ve(h):Ve(h)&&!this.match(54))&&!this.isAmbiguousAwait())return this.raiseOverwrite(p.AwaitNotInAsyncContext,s),this.parseAwait(s)}return o}parseUpdate(t,e,s){if(e){let n=t;return this.checkLVal(n.argument,this.finishNode(n,"UpdateExpression")),t}let i=this.state.startLoc,r=this.parseExprSubscripts(s);if(this.checkExpressionErrors(s,!1))return r;for(;oi(this.state.type)&&!this.canInsertSemicolon();){let n=this.startNodeAt(i);n.operator=this.state.value,n.prefix=!1,n.argument=r,this.next(),this.checkLVal(r,r=this.finishNode(n,"UpdateExpression"));}return r}parseExprSubscripts(t){let e=this.state.startLoc,s=this.state.potentialArrowAt,i=this.parseExprAtom(t);return this.shouldExitDescending(i,s)?i:this.parseSubscripts(i,e)}parseSubscripts(t,e,s){let i={optionalChainMember:!1,maybeAsyncArrow:this.atPossibleAsyncArrow(t),stop:!1};do t=this.parseSubscript(t,e,s,i),i.maybeAsyncArrow=!1;while(!i.stop);return t}parseSubscript(t,e,s,i){let{type:r}=this.state;if(!s&&r===15)return this.parseBind(t,e,s,i);if(Ie(r))return this.parseTaggedTemplateExpression(t,e,i);let n=!1;if(r===18){if(s&&(this.raise(p.OptionalChainingNoNew,this.state.startLoc),this.lookaheadCharCode()===40))return i.stop=!0,t;i.optionalChainMember=n=!0,this.next();}if(!s&&this.match(10))return this.parseCoverCallAndAsyncArrowHead(t,e,i,n);{let o=this.eat(0);return o||n||this.eat(16)?this.parseMember(t,e,i,o,n):(i.stop=!0,t)}}parseMember(t,e,s,i,r){let n=this.startNodeAt(e);return n.object=t,n.computed=i,i?(n.property=this.parseExpression(),this.expect(3)):this.match(139)?(t.type==="Super"&&this.raise(p.SuperPrivateField,e),this.classScope.usePrivateName(this.state.value,this.state.startLoc),n.property=this.parsePrivateName()):n.property=this.parseIdentifier(!0),s.optionalChainMember?(n.optional=r,this.finishNode(n,"OptionalMemberExpression")):this.finishNode(n,"MemberExpression")}parseBind(t,e,s,i){let r=this.startNodeAt(e);return r.object=t,this.next(),r.callee=this.parseNoCallExpr(),i.stop=!0,this.parseSubscripts(this.finishNode(r,"BindExpression"),e,s)}parseCoverCallAndAsyncArrowHead(t,e,s,i){let r=this.state.maybeInArrowParameters,n=null;this.state.maybeInArrowParameters=!0,this.next();let o=this.startNodeAt(e);o.callee=t;let{maybeAsyncArrow:h,optionalChainMember:l}=s;h&&(this.expressionScope.enter(Li()),n=new Q),l&&(o.optional=i),i?o.arguments=this.parseCallExpressionArguments(11):o.arguments=this.parseCallExpressionArguments(11,t.type!=="Super",o,n);let c=this.finishCallExpression(o,l);return h&&this.shouldParseAsyncArrow()&&!i?(s.stop=!0,this.checkDestructuringPrivate(n),this.expressionScope.validateAsPattern(),this.expressionScope.exit(),c=this.parseAsyncArrowFromCallExpression(this.startNodeAt(e),c)):(h&&(this.checkExpressionErrors(n,!0),this.expressionScope.exit()),this.toReferencedArguments(c)),this.state.maybeInArrowParameters=r,c}toReferencedArguments(t,e){this.toReferencedListDeep(t.arguments,e);}parseTaggedTemplateExpression(t,e,s){let i=this.startNodeAt(e);return i.tag=t,i.quasi=this.parseTemplate(!0),s.optionalChainMember&&this.raise(p.OptionalChainingNoTemplate,e),this.finishNode(i,"TaggedTemplateExpression")}atPossibleAsyncArrow(t){return t.type==="Identifier"&&t.name==="async"&&this.state.lastTokEndLoc.index===t.end&&!this.canInsertSemicolon()&&t.end-t.start===5&&this.offsetToSourcePos(t.start)===this.state.potentialArrowAt}finishCallExpression(t,e){if(t.callee.type==="Import")if(t.arguments.length===0||t.arguments.length>2)this.raise(p.ImportCallArity,t);else for(let s of t.arguments)s.type==="SpreadElement"&&this.raise(p.ImportCallSpreadArgument,s);return this.finishNode(t,e?"OptionalCallExpression":"CallExpression")}parseCallExpressionArguments(t,e,s,i){let r=[],n=!0,o=this.state.inFSharpPipelineDirectBody;for(this.state.inFSharpPipelineDirectBody=!1;!this.eat(t);){if(n)n=!1;else if(this.expect(12),this.match(t)){s&&this.addTrailingCommaExtraToNode(s),this.next();break}r.push(this.parseExprListItem(!1,i,e));}return this.state.inFSharpPipelineDirectBody=o,r}shouldParseAsyncArrow(){return this.match(19)&&!this.canInsertSemicolon()}parseAsyncArrowFromCallExpression(t,e){var s;return this.resetPreviousNodeTrailingComments(e),this.expect(19),this.parseArrowExpression(t,e.arguments,!0,(s=e.extra)==null?void 0:s.trailingCommaLoc),e.innerComments&&de(t,e.innerComments),e.callee.trailingComments&&de(t,e.callee.trailingComments),t}parseNoCallExpr(){let t=this.state.startLoc;return this.parseSubscripts(this.parseExprAtom(),t,!0)}parseExprAtom(t){let e,s=null,{type:i}=this.state;switch(i){case 79:return this.parseSuper();case 83:return e=this.startNode(),this.next(),this.match(16)?this.parseImportMetaProperty(e):this.match(10)?this.options.createImportExpressions?this.parseImportCall(e):this.finishNode(e,"Import"):(this.raise(p.UnsupportedImport,this.state.lastTokStartLoc),this.finishNode(e,"Import"));case 78:return e=this.startNode(),this.next(),this.finishNode(e,"ThisExpression");case 90:return this.parseDo(this.startNode(),!1);case 56:case 31:return this.readRegexp(),this.parseRegExpLiteral(this.state.value);case 135:return this.parseNumericLiteral(this.state.value);case 136:return this.parseBigIntLiteral(this.state.value);case 134:return this.parseStringLiteral(this.state.value);case 84:return this.parseNullLiteral();case 85:return this.parseBooleanLiteral(!0);case 86:return this.parseBooleanLiteral(!1);case 10:{let r=this.state.potentialArrowAt===this.state.start;return this.parseParenAndDistinguishExpression(r)}case 2:case 1:return this.parseArrayLike(this.state.type===2?4:3,!1,!0);case 0:return this.parseArrayLike(3,!0,!1,t);case 6:case 7:return this.parseObjectLike(this.state.type===6?9:8,!1,!0);case 5:return this.parseObjectLike(8,!1,!1,t);case 68:return this.parseFunctionOrFunctionSent();case 26:s=this.parseDecorators();case 80:return this.parseClass(this.maybeTakeDecorators(s,this.startNode()),!1);case 77:return this.parseNewOrNewTarget();case 25:case 24:return this.parseTemplate(!1);case 15:{e=this.startNode(),this.next(),e.object=null;let r=e.callee=this.parseNoCallExpr();if(r.type==="MemberExpression")return this.finishNode(e,"BindExpression");throw this.raise(p.UnsupportedBind,r)}case 139:return this.raise(p.PrivateInExpectedIn,this.state.startLoc,{identifierName:this.state.value}),this.parsePrivateName();case 33:return this.parseTopicReferenceThenEqualsSign(54,"%");case 32:return this.parseTopicReferenceThenEqualsSign(44,"^");case 37:case 38:return this.parseTopicReference("hack");case 44:case 54:case 27:{let r=this.getPluginOption("pipelineOperator","proposal");if(r)return this.parseTopicReference(r);this.unexpected();break}case 47:{let r=this.input.codePointAt(this.nextTokenStart());R(r)||r===62?this.expectOnePlugin(["jsx","flow","typescript"]):this.unexpected();break}default:if(i===137)return this.parseDecimalLiteral(this.state.value);if(C(i)){if(this.isContextual(127)&&this.lookaheadInLineCharCode()===123)return this.parseModuleExpression();let r=this.state.potentialArrowAt===this.state.start,n=this.state.containsEsc,o=this.parseIdentifier();if(!n&&o.name==="async"&&!this.canInsertSemicolon()){let{type:h}=this.state;if(h===68)return this.resetPreviousNodeTrailingComments(o),this.next(),this.parseAsyncFunctionExpression(this.startNodeAtNode(o));if(C(h))return this.lookaheadCharCode()===61?this.parseAsyncArrowUnaryFunction(this.startNodeAtNode(o)):o;if(h===90)return this.resetPreviousNodeTrailingComments(o),this.parseDo(this.startNodeAtNode(o),!0)}return r&&this.match(19)&&!this.canInsertSemicolon()?(this.next(),this.parseArrowExpression(this.startNodeAtNode(o),[o],!1)):o}else this.unexpected();}}parseTopicReferenceThenEqualsSign(t,e){let s=this.getPluginOption("pipelineOperator","proposal");if(s)return this.state.type=t,this.state.value=e,this.state.pos--,this.state.end--,this.state.endLoc=v(this.state.endLoc,-1),this.parseTopicReference(s);this.unexpected();}parseTopicReference(t){let e=this.startNode(),s=this.state.startLoc,i=this.state.type;return this.next(),this.finishTopicReference(e,s,t,i)}finishTopicReference(t,e,s,i){if(this.testTopicReferenceConfiguration(s,e,i)){let r=s==="smart"?"PipelinePrimaryTopicReference":"TopicReference";return this.topicReferenceIsAllowedInCurrentContext()||this.raise(s==="smart"?p.PrimaryTopicNotAllowed:p.PipeTopicUnbound,e),this.registerTopicReference(),this.finishNode(t,r)}else throw this.raise(p.PipeTopicUnconfiguredToken,e,{token:q(i)})}testTopicReferenceConfiguration(t,e,s){switch(t){case"hack":return this.hasPlugin(["pipelineOperator",{topicToken:q(s)}]);case"smart":return s===27;default:throw this.raise(p.PipeTopicRequiresHackPipes,e)}}parseAsyncArrowUnaryFunction(t){this.prodParam.enter(Ce(!0,this.prodParam.hasYield));let e=[this.parseIdentifier()];return this.prodParam.exit(),this.hasPrecedingLineBreak()&&this.raise(p.LineTerminatorBeforeArrow,this.state.curPosition()),this.expect(19),this.parseArrowExpression(t,e,!0)}parseDo(t,e){this.expectPlugin("doExpressions"),e&&this.expectPlugin("asyncDoExpressions"),t.async=e,this.next();let s=this.state.labels;return this.state.labels=[],e?(this.prodParam.enter(2),t.body=this.parseBlock(),this.prodParam.exit()):t.body=this.parseBlock(),this.state.labels=s,this.finishNode(t,"DoExpression")}parseSuper(){let t=this.startNode();return this.next(),this.match(10)&&!this.scope.allowDirectSuper&&!this.options.allowSuperOutsideMethod?this.raise(p.SuperNotAllowed,t):!this.scope.allowSuper&&!this.options.allowSuperOutsideMethod&&this.raise(p.UnexpectedSuper,t),!this.match(10)&&!this.match(0)&&!this.match(16)&&this.raise(p.UnsupportedSuper,t),this.finishNode(t,"Super")}parsePrivateName(){let t=this.startNode(),e=this.startNodeAt(v(this.state.startLoc,1)),s=this.state.value;return this.next(),t.id=this.createIdentifier(e,s),this.finishNode(t,"PrivateName")}parseFunctionOrFunctionSent(){let t=this.startNode();if(this.next(),this.prodParam.hasYield&&this.match(16)){let e=this.createIdentifier(this.startNodeAtNode(t),"function");return this.next(),this.match(103)?this.expectPlugin("functionSent"):this.hasPlugin("functionSent")||this.unexpected(),this.parseMetaProperty(t,e,"sent")}return this.parseFunction(t)}parseMetaProperty(t,e,s){t.meta=e;let i=this.state.containsEsc;return t.property=this.parseIdentifier(!0),(t.property.name!==s||i)&&this.raise(p.UnsupportedMetaProperty,t.property,{target:e.name,onlyValidPropertyName:s}),this.finishNode(t,"MetaProperty")}parseImportMetaProperty(t){let e=this.createIdentifier(this.startNodeAtNode(t),"import");if(this.next(),this.isContextual(101))this.inModule||this.raise(p.ImportMetaOutsideModule,e),this.sawUnambiguousESM=!0;else if(this.isContextual(105)||this.isContextual(97)){let s=this.isContextual(105);if(s||this.unexpected(),this.expectPlugin(s?"sourcePhaseImports":"deferredImportEvaluation"),!this.options.createImportExpressions)throw this.raise(p.DynamicImportPhaseRequiresImportExpressions,this.state.startLoc,{phase:this.state.value});return this.next(),t.phase=s?"source":"defer",this.parseImportCall(t)}return this.parseMetaProperty(t,e,"meta")}parseLiteralAtNode(t,e,s){return this.addExtra(s,"rawValue",t),this.addExtra(s,"raw",this.input.slice(this.offsetToSourcePos(s.start),this.state.end)),s.value=t,this.next(),this.finishNode(s,e)}parseLiteral(t,e){let s=this.startNode();return this.parseLiteralAtNode(t,e,s)}parseStringLiteral(t){return this.parseLiteral(t,"StringLiteral")}parseNumericLiteral(t){return this.parseLiteral(t,"NumericLiteral")}parseBigIntLiteral(t){return this.parseLiteral(t,"BigIntLiteral")}parseDecimalLiteral(t){return this.parseLiteral(t,"DecimalLiteral")}parseRegExpLiteral(t){let e=this.startNode();return this.addExtra(e,"raw",this.input.slice(this.offsetToSourcePos(e.start),this.state.end)),e.pattern=t.pattern,e.flags=t.flags,this.next(),this.finishNode(e,"RegExpLiteral")}parseBooleanLiteral(t){let e=this.startNode();return e.value=t,this.next(),this.finishNode(e,"BooleanLiteral")}parseNullLiteral(){let t=this.startNode();return this.next(),this.finishNode(t,"NullLiteral")}parseParenAndDistinguishExpression(t){let e=this.state.startLoc,s;this.next(),this.expressionScope.enter(vi());let i=this.state.maybeInArrowParameters,r=this.state.inFSharpPipelineDirectBody;this.state.maybeInArrowParameters=!0,this.state.inFSharpPipelineDirectBody=!1;let n=this.state.startLoc,o=[],h=new Q,l=!0,c,u;for(;!this.match(11);){if(l)l=!1;else if(this.expect(12,h.optionalParametersLoc===null?null:h.optionalParametersLoc),this.match(11)){u=this.state.startLoc;break}if(this.match(21)){let x=this.state.startLoc;if(c=this.state.startLoc,o.push(this.parseParenItem(this.parseRestBinding(),x)),!this.checkCommaAfterRest(41))break}else o.push(this.parseMaybeAssignAllowIn(h,this.parseParenItem));}let f=this.state.lastTokEndLoc;this.expect(11),this.state.maybeInArrowParameters=i,this.state.inFSharpPipelineDirectBody=r;let d=this.startNodeAt(e);return t&&this.shouldParseArrow(o)&&(d=this.parseArrow(d))?(this.checkDestructuringPrivate(h),this.expressionScope.validateAsPattern(),this.expressionScope.exit(),this.parseArrowExpression(d,o,!1),d):(this.expressionScope.exit(),o.length||this.unexpected(this.state.lastTokStartLoc),u&&this.unexpected(u),c&&this.unexpected(c),this.checkExpressionErrors(h,!0),this.toReferencedListDeep(o,!0),o.length>1?(s=this.startNodeAt(n),s.expressions=o,this.finishNode(s,"SequenceExpression"),this.resetEndLocation(s,f)):s=o[0],this.wrapParenthesis(e,s))}wrapParenthesis(t,e){if(!this.options.createParenthesizedExpressions)return this.addExtra(e,"parenthesized",!0),this.addExtra(e,"parenStart",t.index),this.takeSurroundingComments(e,t.index,this.state.lastTokEndLoc.index),e;let s=this.startNodeAt(t);return s.expression=e,this.finishNode(s,"ParenthesizedExpression")}shouldParseArrow(t){return !this.canInsertSemicolon()}parseArrow(t){if(this.eat(19))return t}parseParenItem(t,e){return t}parseNewOrNewTarget(){let t=this.startNode();if(this.next(),this.match(16)){let e=this.createIdentifier(this.startNodeAtNode(t),"new");this.next();let s=this.parseMetaProperty(t,e,"target");return !this.scope.inNonArrowFunction&&!this.scope.inClass&&!this.options.allowNewTargetOutsideFunction&&this.raise(p.UnexpectedNewTarget,s),s}return this.parseNew(t)}parseNew(t){if(this.parseNewCallee(t),this.eat(10)){let e=this.parseExprList(11);this.toReferencedList(e),t.arguments=e;}else t.arguments=[];return this.finishNode(t,"NewExpression")}parseNewCallee(t){let e=this.match(83),s=this.parseNoCallExpr();t.callee=s,e&&(s.type==="Import"||s.type==="ImportExpression")&&this.raise(p.ImportCallNotNewExpression,s);}parseTemplateElement(t){let{start:e,startLoc:s,end:i,value:r}=this.state,n=e+1,o=this.startNodeAt(v(s,1));r===null&&(t||this.raise(p.InvalidEscapeSequenceTemplate,v(this.state.firstInvalidTemplateEscapePos,1)));let h=this.match(24),l=h?-1:-2,c=i+l;o.value={raw:this.input.slice(n,c).replace(/\r\n?/g,`
`),cooked:r===null?null:r.slice(1,l)},o.tail=h,this.next();let u=this.finishNode(o,"TemplateElement");return this.resetEndLocation(u,v(this.state.lastTokEndLoc,l)),u}parseTemplate(t){let e=this.startNode(),s=this.parseTemplateElement(t),i=[s],r=[];for(;!s.tail;)r.push(this.parseTemplateSubstitution()),this.readTemplateContinuation(),i.push(s=this.parseTemplateElement(t));return e.expressions=r,e.quasis=i,this.finishNode(e,"TemplateLiteral")}parseTemplateSubstitution(){return this.parseExpression()}parseObjectLike(t,e,s,i){s&&this.expectPlugin("recordAndTuple");let r=this.state.inFSharpPipelineDirectBody;this.state.inFSharpPipelineDirectBody=!1;let n=Object.create(null),o=!0,h=this.startNode();for(h.properties=[],this.next();!this.match(t);){if(o)o=!1;else if(this.expect(12),this.match(t)){this.addTrailingCommaExtraToNode(h);break}let c;e?c=this.parseBindingProperty():(c=this.parsePropertyDefinition(i),this.checkProto(c,s,n,i)),s&&!this.isObjectProperty(c)&&c.type!=="SpreadElement"&&this.raise(p.InvalidRecordProperty,c),c.shorthand&&this.addExtra(c,"shorthand",!0),h.properties.push(c);}this.next(),this.state.inFSharpPipelineDirectBody=r;let l="ObjectExpression";return e?l="ObjectPattern":s&&(l="RecordExpression"),this.finishNode(h,l)}addTrailingCommaExtraToNode(t){this.addExtra(t,"trailingComma",this.state.lastTokStartLoc.index),this.addExtra(t,"trailingCommaLoc",this.state.lastTokStartLoc,!1);}maybeAsyncOrAccessorProp(t){return !t.computed&&t.key.type==="Identifier"&&(this.isLiteralPropertyName()||this.match(0)||this.match(55))}parsePropertyDefinition(t){let e=[];if(this.match(26))for(this.hasPlugin("decorators")&&this.raise(p.UnsupportedPropertyDecorator,this.state.startLoc);this.match(26);)e.push(this.parseDecorator());let s=this.startNode(),i=!1,r=!1,n;if(this.match(21))return e.length&&this.unexpected(),this.parseSpread();e.length&&(s.decorators=e,e=[]),s.method=!1,t&&(n=this.state.startLoc);let o=this.eat(55);this.parsePropertyNamePrefixOperator(s);let h=this.state.containsEsc;if(this.parsePropertyName(s,t),!o&&!h&&this.maybeAsyncOrAccessorProp(s)){let{key:l}=s,c=l.name;c==="async"&&!this.hasPrecedingLineBreak()&&(i=!0,this.resetPreviousNodeTrailingComments(l),o=this.eat(55),this.parsePropertyName(s)),(c==="get"||c==="set")&&(r=!0,this.resetPreviousNodeTrailingComments(l),s.kind=c,this.match(55)&&(o=!0,this.raise(p.AccessorIsGenerator,this.state.curPosition(),{kind:c}),this.next()),this.parsePropertyName(s));}return this.parseObjPropValue(s,n,o,i,!1,r,t)}getGetterSetterExpectedParamCount(t){return t.kind==="get"?0:1}getObjectOrClassMethodParams(t){return t.params}checkGetterSetterParams(t){var e;let s=this.getGetterSetterExpectedParamCount(t),i=this.getObjectOrClassMethodParams(t);i.length!==s&&this.raise(t.kind==="get"?p.BadGetterArity:p.BadSetterArity,t),t.kind==="set"&&((e=i[i.length-1])==null?void 0:e.type)==="RestElement"&&this.raise(p.BadSetterRestParameter,t);}parseObjectMethod(t,e,s,i,r){if(r){let n=this.parseMethod(t,e,!1,!1,!1,"ObjectMethod");return this.checkGetterSetterParams(n),n}if(s||e||this.match(10))return i&&this.unexpected(),t.kind="method",t.method=!0,this.parseMethod(t,e,s,!1,!1,"ObjectMethod")}parseObjectProperty(t,e,s,i){if(t.shorthand=!1,this.eat(14))return t.value=s?this.parseMaybeDefault(this.state.startLoc):this.parseMaybeAssignAllowIn(i),this.finishNode(t,"ObjectProperty");if(!t.computed&&t.key.type==="Identifier"){if(this.checkReservedWord(t.key.name,t.key.loc.start,!0,!1),s)t.value=this.parseMaybeDefault(e,_(t.key));else if(this.match(29)){let r=this.state.startLoc;i!=null?i.shorthandAssignLoc===null&&(i.shorthandAssignLoc=r):this.raise(p.InvalidCoverInitializedName,r),t.value=this.parseMaybeDefault(e,_(t.key));}else t.value=_(t.key);return t.shorthand=!0,this.finishNode(t,"ObjectProperty")}}parseObjPropValue(t,e,s,i,r,n,o){let h=this.parseObjectMethod(t,s,i,r,n)||this.parseObjectProperty(t,e,r,o);return h||this.unexpected(),h}parsePropertyName(t,e){if(this.eat(0))t.computed=!0,t.key=this.parseMaybeAssignAllowIn(),this.expect(3);else {let{type:s,value:i}=this.state,r;if(D(s))r=this.parseIdentifier(!0);else switch(s){case 135:r=this.parseNumericLiteral(i);break;case 134:r=this.parseStringLiteral(i);break;case 136:r=this.parseBigIntLiteral(i);break;case 139:{let n=this.state.startLoc;e!=null?e.privateKeyLoc===null&&(e.privateKeyLoc=n):this.raise(p.UnexpectedPrivateField,n),r=this.parsePrivateName();break}default:if(s===137){r=this.parseDecimalLiteral(i);break}this.unexpected();}t.key=r,s!==139&&(t.computed=!1);}}initFunction(t,e){t.id=null,t.generator=!1,t.async=e;}parseMethod(t,e,s,i,r,n,o=!1){this.initFunction(t,s),t.generator=e,this.scope.enter(18|(o?64:0)|(r?32:0)),this.prodParam.enter(Ce(s,t.generator)),this.parseFunctionParams(t,i);let h=this.parseFunctionBodyAndFinish(t,n,!0);return this.prodParam.exit(),this.scope.exit(),h}parseArrayLike(t,e,s,i){s&&this.expectPlugin("recordAndTuple");let r=this.state.inFSharpPipelineDirectBody;this.state.inFSharpPipelineDirectBody=!1;let n=this.startNode();return this.next(),n.elements=this.parseExprList(t,!s,i,n),this.state.inFSharpPipelineDirectBody=r,this.finishNode(n,s?"TupleExpression":"ArrayExpression")}parseArrowExpression(t,e,s,i){this.scope.enter(6);let r=Ce(s,!1);!this.match(5)&&this.prodParam.hasIn&&(r|=8),this.prodParam.enter(r),this.initFunction(t,s);let n=this.state.maybeInArrowParameters;return e&&(this.state.maybeInArrowParameters=!0,this.setArrowFunctionParameters(t,e,i)),this.state.maybeInArrowParameters=!1,this.parseFunctionBody(t,!0),this.prodParam.exit(),this.scope.exit(),this.state.maybeInArrowParameters=n,this.finishNode(t,"ArrowFunctionExpression")}setArrowFunctionParameters(t,e,s){this.toAssignableList(e,s,!1),t.params=e;}parseFunctionBodyAndFinish(t,e,s=!1){return this.parseFunctionBody(t,!1,s),this.finishNode(t,e)}parseFunctionBody(t,e,s=!1){let i=e&&!this.match(5);if(this.expressionScope.enter(Zt()),i)t.body=this.parseMaybeAssign(),this.checkParams(t,!1,e,!1);else {let r=this.state.strict,n=this.state.labels;this.state.labels=[],this.prodParam.enter(this.prodParam.currentFlags()|4),t.body=this.parseBlock(!0,!1,o=>{let h=!this.isSimpleParamList(t.params);o&&h&&this.raise(p.IllegalLanguageModeDirective,(t.kind==="method"||t.kind==="constructor")&&t.key?t.key.loc.end:t);let l=!r&&this.state.strict;this.checkParams(t,!this.state.strict&&!e&&!s&&!h,e,l),this.state.strict&&t.id&&this.checkIdentifier(t.id,65,l);}),this.prodParam.exit(),this.state.labels=n;}this.expressionScope.exit();}isSimpleParameter(t){return t.type==="Identifier"}isSimpleParamList(t){for(let e=0,s=t.length;e<s;e++)if(!this.isSimpleParameter(t[e]))return !1;return !0}checkParams(t,e,s,i=!0){let r=!e&&new Set,n={type:"FormalParameters"};for(let o of t.params)this.checkLVal(o,n,5,r,i);}parseExprList(t,e,s,i){let r=[],n=!0;for(;!this.eat(t);){if(n)n=!1;else if(this.expect(12),this.match(t)){i&&this.addTrailingCommaExtraToNode(i),this.next();break}r.push(this.parseExprListItem(e,s));}return r}parseExprListItem(t,e,s){let i;if(this.match(12))t||this.raise(p.UnexpectedToken,this.state.curPosition(),{unexpected:","}),i=null;else if(this.match(21)){let r=this.state.startLoc;i=this.parseParenItem(this.parseSpread(e),r);}else if(this.match(17)){this.expectPlugin("partialApplication"),s||this.raise(p.UnexpectedArgumentPlaceholder,this.state.startLoc);let r=this.startNode();this.next(),i=this.finishNode(r,"ArgumentPlaceholder");}else i=this.parseMaybeAssignAllowIn(e,this.parseParenItem);return i}parseIdentifier(t){let e=this.startNode(),s=this.parseIdentifierName(t);return this.createIdentifier(e,s)}createIdentifier(t,e){return t.name=e,t.loc.identifierName=e,this.finishNode(t,"Identifier")}parseIdentifierName(t){let e,{startLoc:s,type:i}=this.state;D(i)?e=this.state.value:this.unexpected();let r=si(i);return t?r&&this.replaceToken(132):this.checkReservedWord(e,s,r,!1),this.next(),e}checkReservedWord(t,e,s,i){if(t.length>10||!bi(t))return;if(s&&Pi(t)){this.raise(p.UnexpectedKeyword,e,{keyword:t});return}if((this.state.strict?i?Xt:Jt:Ht)(t,this.inModule)){this.raise(p.UnexpectedReservedWord,e,{reservedWord:t});return}else if(t==="yield"){if(this.prodParam.hasYield){this.raise(p.YieldBindingIdentifier,e);return}}else if(t==="await"){if(this.prodParam.hasAwait){this.raise(p.AwaitBindingIdentifier,e);return}if(this.scope.inStaticBlock){this.raise(p.AwaitBindingIdentifierInStaticBlock,e);return}this.expressionScope.recordAsyncArrowParametersError(e);}else if(t==="arguments"&&this.scope.inClassAndNotInNonArrowFunction){this.raise(p.ArgumentsInClass,e);return}}recordAwaitIfAllowed(){let t=this.prodParam.hasAwait||this.options.allowAwaitOutsideFunction&&!this.scope.inFunction;return t&&!this.scope.inFunction&&(this.state.hasTopLevelAwait=!0),t}parseAwait(t){let e=this.startNodeAt(t);return this.expressionScope.recordParameterInitializerError(p.AwaitExpressionFormalParameter,e),this.eat(55)&&this.raise(p.ObsoleteAwaitStar,e),!this.scope.inFunction&&!this.options.allowAwaitOutsideFunction&&(this.isAmbiguousAwait()?this.ambiguousScriptDifferentAst=!0:this.sawUnambiguousESM=!0),this.state.soloAwait||(e.argument=this.parseMaybeUnary(null,!0)),this.finishNode(e,"AwaitExpression")}isAmbiguousAwait(){if(this.hasPrecedingLineBreak())return !0;let{type:t}=this.state;return t===53||t===10||t===0||Ie(t)||t===102&&!this.state.containsEsc||t===138||t===56||this.hasPlugin("v8intrinsic")&&t===54}parseYield(){let t=this.startNode();this.expressionScope.recordParameterInitializerError(p.YieldInParameter,t),this.next();let e=!1,s=null;if(!this.hasPrecedingLineBreak())switch(e=this.eat(55),this.state.type){case 13:case 140:case 8:case 11:case 3:case 9:case 14:case 12:if(!e)break;default:s=this.parseMaybeAssign();}return t.delegate=e,t.argument=s,this.finishNode(t,"YieldExpression")}parseImportCall(t){if(this.next(),t.source=this.parseMaybeAssignAllowIn(),t.options=null,this.eat(12)&&!this.match(11)&&(t.options=this.parseMaybeAssignAllowIn(),this.eat(12)&&!this.match(11))){do this.parseMaybeAssignAllowIn();while(this.eat(12)&&!this.match(11));this.raise(p.ImportCallArity,t);}return this.expect(11),this.finishNode(t,"ImportExpression")}checkPipelineAtInfixOperator(t,e){this.hasPlugin(["pipelineOperator",{proposal:"smart"}])&&t.type==="SequenceExpression"&&this.raise(p.PipelineHeadSequenceExpression,e);}parseSmartPipelineBodyInStyle(t,e){if(this.isSimpleReference(t)){let s=this.startNodeAt(e);return s.callee=t,this.finishNode(s,"PipelineBareFunction")}else {let s=this.startNodeAt(e);return this.checkSmartPipeTopicBodyEarlyErrors(e),s.expression=t,this.finishNode(s,"PipelineTopicExpression")}}isSimpleReference(t){switch(t.type){case"MemberExpression":return !t.computed&&this.isSimpleReference(t.object);case"Identifier":return !0;default:return !1}}checkSmartPipeTopicBodyEarlyErrors(t){if(this.match(19))throw this.raise(p.PipelineBodyNoArrow,this.state.startLoc);this.topicReferenceWasUsedInCurrentContext()||this.raise(p.PipelineTopicUnused,t);}withTopicBindingContext(t){let e=this.state.topicContext;this.state.topicContext={maxNumOfResolvableTopics:1,maxTopicIndex:null};try{return t()}finally{this.state.topicContext=e;}}withSmartMixTopicForbiddingContext(t){if(this.hasPlugin(["pipelineOperator",{proposal:"smart"}])){let e=this.state.topicContext;this.state.topicContext={maxNumOfResolvableTopics:0,maxTopicIndex:null};try{return t()}finally{this.state.topicContext=e;}}else return t()}withSoloAwaitPermittingContext(t){let e=this.state.soloAwait;this.state.soloAwait=!0;try{return t()}finally{this.state.soloAwait=e;}}allowInAnd(t){let e=this.prodParam.currentFlags();if(8&~e){this.prodParam.enter(e|8);try{return t()}finally{this.prodParam.exit();}}return t()}disallowInAnd(t){let e=this.prodParam.currentFlags();if(8&e){this.prodParam.enter(e&-9);try{return t()}finally{this.prodParam.exit();}}return t()}registerTopicReference(){this.state.topicContext.maxTopicIndex=0;}topicReferenceIsAllowedInCurrentContext(){return this.state.topicContext.maxNumOfResolvableTopics>=1}topicReferenceWasUsedInCurrentContext(){return this.state.topicContext.maxTopicIndex!=null&&this.state.topicContext.maxTopicIndex>=0}parseFSharpPipelineBody(t){let e=this.state.startLoc;this.state.potentialArrowAt=this.state.start;let s=this.state.inFSharpPipelineDirectBody;this.state.inFSharpPipelineDirectBody=!0;let i=this.parseExprOp(this.parseMaybeUnaryOrPrivate(),e,t);return this.state.inFSharpPipelineDirectBody=s,i}parseModuleExpression(){this.expectPlugin("moduleBlocks");let t=this.startNode();this.next(),this.match(5)||this.unexpected(null,5);let e=this.startNodeAt(this.state.endLoc);this.next();let s=this.initializeScopes(!0);this.enterInitialScopes();try{t.body=this.parseProgram(e,8,"module");}finally{s();}return this.finishNode(t,"ModuleExpression")}parsePropertyNamePrefixOperator(t){}},$e={kind:1},er={kind:2},tr=/[\uD800-\uDFFF]/u,ze=/in(?:stanceof)?/y;function sr(a,t,e){for(let s=0;s<a.length;s++){let i=a[s],{type:r}=i;if(typeof r=="number"){{if(r===139){let{loc:n,start:o,value:h,end:l}=i,c=o+1,u=v(n.start,1);a.splice(s,1,new M({type:F(27),value:"#",start:o,end:c,startLoc:n.start,endLoc:u}),new M({type:F(132),value:h,start:c,end:l,startLoc:u,endLoc:n.end})),s++;continue}if(Ie(r)){let{loc:n,start:o,value:h,end:l}=i,c=o+1,u=v(n.start,1),f;t.charCodeAt(o-e)===96?f=new M({type:F(22),value:"`",start:o,end:c,startLoc:n.start,endLoc:u}):f=new M({type:F(8),value:"}",start:o,end:c,startLoc:n.start,endLoc:u});let d,x,S,N;r===24?(x=l-1,S=v(n.end,-1),d=h===null?null:h.slice(1,-1),N=new M({type:F(22),value:"`",start:x,end:l,startLoc:S,endLoc:n.end})):(x=l-2,S=v(n.end,-2),d=h===null?null:h.slice(1,-2),N=new M({type:F(23),value:"${",start:x,end:l,startLoc:S,endLoc:n.end})),a.splice(s,1,f,new M({type:F(20),value:d,start:c,end:x,startLoc:u,endLoc:S}),N),s+=2;continue}}i.type=F(r);}}return a}var ht=class extends ot{parseTopLevel(t,e){return t.program=this.parseProgram(e),t.comments=this.comments,this.options.tokens&&(t.tokens=sr(this.tokens,this.input,this.startIndex)),this.finishNode(t,"File")}parseProgram(t,e=140,s=this.options.sourceType){if(t.sourceType=s,t.interpreter=this.parseInterpreterDirective(),this.parseBlockBody(t,!0,!0,e),this.inModule){if(!this.options.allowUndeclaredExports&&this.scope.undefinedExports.size>0)for(let[r,n]of Array.from(this.scope.undefinedExports))this.raise(p.ModuleExportUndefined,n,{localName:r});this.addExtra(t,"topLevelAwait",this.state.hasTopLevelAwait);}let i;return e===140?i=this.finishNode(t,"Program"):i=this.finishNodeAt(t,"Program",v(this.state.startLoc,-1)),i}stmtToDirective(t){let e=t;e.type="Directive",e.value=e.expression,delete e.expression;let s=e.value,i=s.value,r=this.input.slice(this.offsetToSourcePos(s.start),this.offsetToSourcePos(s.end)),n=s.value=r.slice(1,-1);return this.addExtra(s,"raw",r),this.addExtra(s,"rawValue",n),this.addExtra(s,"expressionValue",i),s.type="DirectiveLiteral",e}parseInterpreterDirective(){if(!this.match(28))return null;let t=this.startNode();return t.value=this.state.value,this.next(),this.finishNode(t,"InterpreterDirective")}isLet(){return this.isContextual(100)?this.hasFollowingBindingAtom():!1}chStartsBindingIdentifier(t,e){if(R(t)){if(ze.lastIndex=e,ze.test(this.input)){let s=this.codePointAtPos(ze.lastIndex);if(!G(s)&&s!==92)return !1}return !0}else return t===92}chStartsBindingPattern(t){return t===91||t===123}hasFollowingBindingAtom(){let t=this.nextTokenStart(),e=this.codePointAtPos(t);return this.chStartsBindingPattern(e)||this.chStartsBindingIdentifier(e,t)}hasInLineFollowingBindingIdentifierOrBrace(){let t=this.nextTokenInLineStart(),e=this.codePointAtPos(t);return e===123||this.chStartsBindingIdentifier(e,t)}startsUsingForOf(){let{type:t,containsEsc:e}=this.lookahead();if(t===102&&!e)return !1;if(C(t)&&!this.hasFollowingLineBreak())return this.expectPlugin("explicitResourceManagement"),!0}startsAwaitUsing(){let t=this.nextTokenInLineStart();if(this.isUnparsedContextual(t,"using")){t=this.nextTokenInLineStartSince(t+5);let e=this.codePointAtPos(t);if(this.chStartsBindingIdentifier(e,t))return this.expectPlugin("explicitResourceManagement"),!0}return !1}parseModuleItem(){return this.parseStatementLike(15)}parseStatementListItem(){return this.parseStatementLike(6|(!this.options.annexB||this.state.strict?0:8))}parseStatementOrSloppyAnnexBFunctionDeclaration(t=!1){let e=0;return this.options.annexB&&!this.state.strict&&(e|=4,t&&(e|=8)),this.parseStatementLike(e)}parseStatement(){return this.parseStatementLike(0)}parseStatementLike(t){let e=null;return this.match(26)&&(e=this.parseDecorators(!0)),this.parseStatementContent(t,e)}parseStatementContent(t,e){let s=this.state.type,i=this.startNode(),r=!!(t&2),n=!!(t&4),o=t&1;switch(s){case 60:return this.parseBreakContinueStatement(i,!0);case 63:return this.parseBreakContinueStatement(i,!1);case 64:return this.parseDebuggerStatement(i);case 90:return this.parseDoWhileStatement(i);case 91:return this.parseForStatement(i);case 68:if(this.lookaheadCharCode()===46)break;return n||this.raise(this.state.strict?p.StrictFunction:this.options.annexB?p.SloppyFunctionAnnexB:p.SloppyFunction,this.state.startLoc),this.parseFunctionStatement(i,!1,!r&&n);case 80:return r||this.unexpected(),this.parseClass(this.maybeTakeDecorators(e,i),!0);case 69:return this.parseIfStatement(i);case 70:return this.parseReturnStatement(i);case 71:return this.parseSwitchStatement(i);case 72:return this.parseThrowStatement(i);case 73:return this.parseTryStatement(i);case 96:if(!this.state.containsEsc&&this.startsAwaitUsing())return this.recordAwaitIfAllowed()?r||this.raise(p.UnexpectedLexicalDeclaration,i):this.raise(p.AwaitUsingNotInAsyncContext,i),this.next(),this.parseVarStatement(i,"await using");break;case 107:if(this.state.containsEsc||!this.hasInLineFollowingBindingIdentifierOrBrace())break;return this.expectPlugin("explicitResourceManagement"),!this.scope.inModule&&this.scope.inTopLevel?this.raise(p.UnexpectedUsingDeclaration,this.state.startLoc):r||this.raise(p.UnexpectedLexicalDeclaration,this.state.startLoc),this.parseVarStatement(i,"using");case 100:{if(this.state.containsEsc)break;let c=this.nextTokenStart(),u=this.codePointAtPos(c);if(u!==91&&(!r&&this.hasFollowingLineBreak()||!this.chStartsBindingIdentifier(u,c)&&u!==123))break}case 75:r||this.raise(p.UnexpectedLexicalDeclaration,this.state.startLoc);case 74:{let c=this.state.value;return this.parseVarStatement(i,c)}case 92:return this.parseWhileStatement(i);case 76:return this.parseWithStatement(i);case 5:return this.parseBlock();case 13:return this.parseEmptyStatement(i);case 83:{let c=this.lookaheadCharCode();if(c===40||c===46)break}case 82:{!this.options.allowImportExportEverywhere&&!o&&this.raise(p.UnexpectedImportExport,this.state.startLoc),this.next();let c;return s===83?(c=this.parseImport(i),c.type==="ImportDeclaration"&&(!c.importKind||c.importKind==="value")&&(this.sawUnambiguousESM=!0)):(c=this.parseExport(i,e),(c.type==="ExportNamedDeclaration"&&(!c.exportKind||c.exportKind==="value")||c.type==="ExportAllDeclaration"&&(!c.exportKind||c.exportKind==="value")||c.type==="ExportDefaultDeclaration")&&(this.sawUnambiguousESM=!0)),this.assertModuleNodeAllowed(c),c}default:if(this.isAsyncFunction())return r||this.raise(p.AsyncFunctionInSingleStatementContext,this.state.startLoc),this.next(),this.parseFunctionStatement(i,!0,!r&&n)}let h=this.state.value,l=this.parseExpression();return C(s)&&l.type==="Identifier"&&this.eat(14)?this.parseLabeledStatement(i,h,l,t):this.parseExpressionStatement(i,l,e)}assertModuleNodeAllowed(t){!this.options.allowImportExportEverywhere&&!this.inModule&&this.raise(p.ImportOutsideModule,t);}decoratorsEnabledBeforeExport(){return this.hasPlugin("decorators-legacy")?!0:this.hasPlugin("decorators")&&this.getPluginOption("decorators","decoratorsBeforeExport")!==!1}maybeTakeDecorators(t,e,s){return t&&(e.decorators&&e.decorators.length>0?(typeof this.getPluginOption("decorators","decoratorsBeforeExport")!="boolean"&&this.raise(p.DecoratorsBeforeAfterExport,e.decorators[0]),e.decorators.unshift(...t)):e.decorators=t,this.resetStartLocationFromNode(e,t[0]),s&&this.resetStartLocationFromNode(s,e)),e}canHaveLeadingDecorator(){return this.match(80)}parseDecorators(t){let e=[];do e.push(this.parseDecorator());while(this.match(26));if(this.match(82))t||this.unexpected(),this.decoratorsEnabledBeforeExport()||this.raise(p.DecoratorExportClass,this.state.startLoc);else if(!this.canHaveLeadingDecorator())throw this.raise(p.UnexpectedLeadingDecorator,this.state.startLoc);return e}parseDecorator(){this.expectOnePlugin(["decorators","decorators-legacy"]);let t=this.startNode();if(this.next(),this.hasPlugin("decorators")){let e=this.state.startLoc,s;if(this.match(10)){let i=this.state.startLoc;this.next(),s=this.parseExpression(),this.expect(11),s=this.wrapParenthesis(i,s);let r=this.state.startLoc;t.expression=this.parseMaybeDecoratorArguments(s),this.getPluginOption("decorators","allowCallParenthesized")===!1&&t.expression!==s&&this.raise(p.DecoratorArgumentsOutsideParentheses,r);}else {for(s=this.parseIdentifier(!1);this.eat(16);){let i=this.startNodeAt(e);i.object=s,this.match(139)?(this.classScope.usePrivateName(this.state.value,this.state.startLoc),i.property=this.parsePrivateName()):i.property=this.parseIdentifier(!0),i.computed=!1,s=this.finishNode(i,"MemberExpression");}t.expression=this.parseMaybeDecoratorArguments(s);}}else t.expression=this.parseExprSubscripts();return this.finishNode(t,"Decorator")}parseMaybeDecoratorArguments(t){if(this.eat(10)){let e=this.startNodeAtNode(t);return e.callee=t,e.arguments=this.parseCallExpressionArguments(11),this.toReferencedList(e.arguments),this.finishNode(e,"CallExpression")}return t}parseBreakContinueStatement(t,e){return this.next(),this.isLineTerminator()?t.label=null:(t.label=this.parseIdentifier(),this.semicolon()),this.verifyBreakContinue(t,e),this.finishNode(t,e?"BreakStatement":"ContinueStatement")}verifyBreakContinue(t,e){let s;for(s=0;s<this.state.labels.length;++s){let i=this.state.labels[s];if((t.label==null||i.name===t.label.name)&&(i.kind!=null&&(e||i.kind===1)||t.label&&e))break}if(s===this.state.labels.length){let i=e?"BreakStatement":"ContinueStatement";this.raise(p.IllegalBreakContinue,t,{type:i});}}parseDebuggerStatement(t){return this.next(),this.semicolon(),this.finishNode(t,"DebuggerStatement")}parseHeaderExpression(){this.expect(10);let t=this.parseExpression();return this.expect(11),t}parseDoWhileStatement(t){return this.next(),this.state.labels.push($e),t.body=this.withSmartMixTopicForbiddingContext(()=>this.parseStatement()),this.state.labels.pop(),this.expect(92),t.test=this.parseHeaderExpression(),this.eat(13),this.finishNode(t,"DoWhileStatement")}parseForStatement(t){this.next(),this.state.labels.push($e);let e=null;if(this.isContextual(96)&&this.recordAwaitIfAllowed()&&(e=this.state.startLoc,this.next()),this.scope.enter(0),this.expect(10),this.match(13))return e!==null&&this.unexpected(e),this.parseFor(t,null);let s=this.isContextual(100);{let h=this.isContextual(96)&&this.startsAwaitUsing(),l=h||this.isContextual(107)&&this.startsUsingForOf(),c=s&&this.hasFollowingBindingAtom()||l;if(this.match(74)||this.match(75)||c){let u=this.startNode(),f;h?(f="await using",this.recordAwaitIfAllowed()||this.raise(p.AwaitUsingNotInAsyncContext,this.state.startLoc),this.next()):f=this.state.value,this.next(),this.parseVar(u,!0,f);let d=this.finishNode(u,"VariableDeclaration"),x=this.match(58);return x&&l&&this.raise(p.ForInUsing,d),(x||this.isContextual(102))&&d.declarations.length===1?this.parseForIn(t,d,e):(e!==null&&this.unexpected(e),this.parseFor(t,d))}}let i=this.isContextual(95),r=new Q,n=this.parseExpression(!0,r),o=this.isContextual(102);if(o&&(s&&this.raise(p.ForOfLet,n),e===null&&i&&n.type==="Identifier"&&this.raise(p.ForOfAsync,n)),o||this.match(58)){this.checkDestructuringPrivate(r),this.toAssignable(n,!0);let h=o?"ForOfStatement":"ForInStatement";return this.checkLVal(n,{type:h}),this.parseForIn(t,n,e)}else this.checkExpressionErrors(r,!0);return e!==null&&this.unexpected(e),this.parseFor(t,n)}parseFunctionStatement(t,e,s){return this.next(),this.parseFunction(t,1|(s?2:0)|(e?8:0))}parseIfStatement(t){return this.next(),t.test=this.parseHeaderExpression(),t.consequent=this.parseStatementOrSloppyAnnexBFunctionDeclaration(),t.alternate=this.eat(66)?this.parseStatementOrSloppyAnnexBFunctionDeclaration():null,this.finishNode(t,"IfStatement")}parseReturnStatement(t){return !this.prodParam.hasReturn&&!this.options.allowReturnOutsideFunction&&this.raise(p.IllegalReturn,this.state.startLoc),this.next(),this.isLineTerminator()?t.argument=null:(t.argument=this.parseExpression(),this.semicolon()),this.finishNode(t,"ReturnStatement")}parseSwitchStatement(t){this.next(),t.discriminant=this.parseHeaderExpression();let e=t.cases=[];this.expect(5),this.state.labels.push(er),this.scope.enter(0);let s;for(let i;!this.match(8);)if(this.match(61)||this.match(65)){let r=this.match(61);s&&this.finishNode(s,"SwitchCase"),e.push(s=this.startNode()),s.consequent=[],this.next(),r?s.test=this.parseExpression():(i&&this.raise(p.MultipleDefaultsInSwitch,this.state.lastTokStartLoc),i=!0,s.test=null),this.expect(14);}else s?s.consequent.push(this.parseStatementListItem()):this.unexpected();return this.scope.exit(),s&&this.finishNode(s,"SwitchCase"),this.next(),this.state.labels.pop(),this.finishNode(t,"SwitchStatement")}parseThrowStatement(t){return this.next(),this.hasPrecedingLineBreak()&&this.raise(p.NewlineAfterThrow,this.state.lastTokEndLoc),t.argument=this.parseExpression(),this.semicolon(),this.finishNode(t,"ThrowStatement")}parseCatchClauseParam(){let t=this.parseBindingAtom();return this.scope.enter(this.options.annexB&&t.type==="Identifier"?8:0),this.checkLVal(t,{type:"CatchClause"},9),t}parseTryStatement(t){if(this.next(),t.block=this.parseBlock(),t.handler=null,this.match(62)){let e=this.startNode();this.next(),this.match(10)?(this.expect(10),e.param=this.parseCatchClauseParam(),this.expect(11)):(e.param=null,this.scope.enter(0)),e.body=this.withSmartMixTopicForbiddingContext(()=>this.parseBlock(!1,!1)),this.scope.exit(),t.handler=this.finishNode(e,"CatchClause");}return t.finalizer=this.eat(67)?this.parseBlock():null,!t.handler&&!t.finalizer&&this.raise(p.NoCatchOrFinally,t),this.finishNode(t,"TryStatement")}parseVarStatement(t,e,s=!1){return this.next(),this.parseVar(t,!1,e,s),this.semicolon(),this.finishNode(t,"VariableDeclaration")}parseWhileStatement(t){return this.next(),t.test=this.parseHeaderExpression(),this.state.labels.push($e),t.body=this.withSmartMixTopicForbiddingContext(()=>this.parseStatement()),this.state.labels.pop(),this.finishNode(t,"WhileStatement")}parseWithStatement(t){return this.state.strict&&this.raise(p.StrictWith,this.state.startLoc),this.next(),t.object=this.parseHeaderExpression(),t.body=this.withSmartMixTopicForbiddingContext(()=>this.parseStatement()),this.finishNode(t,"WithStatement")}parseEmptyStatement(t){return this.next(),this.finishNode(t,"EmptyStatement")}parseLabeledStatement(t,e,s,i){for(let n of this.state.labels)n.name===e&&this.raise(p.LabelRedeclaration,s,{labelName:e});let r=ai(this.state.type)?1:this.match(71)?2:null;for(let n=this.state.labels.length-1;n>=0;n--){let o=this.state.labels[n];if(o.statementStart===t.start)o.statementStart=this.sourceToOffsetPos(this.state.start),o.kind=r;else break}return this.state.labels.push({name:e,kind:r,statementStart:this.sourceToOffsetPos(this.state.start)}),t.body=i&8?this.parseStatementOrSloppyAnnexBFunctionDeclaration(!0):this.parseStatement(),this.state.labels.pop(),t.label=s,this.finishNode(t,"LabeledStatement")}parseExpressionStatement(t,e,s){return t.expression=e,this.semicolon(),this.finishNode(t,"ExpressionStatement")}parseBlock(t=!1,e=!0,s){let i=this.startNode();return t&&this.state.strictErrors.clear(),this.expect(5),e&&this.scope.enter(0),this.parseBlockBody(i,t,!1,8,s),e&&this.scope.exit(),this.finishNode(i,"BlockStatement")}isValidDirective(t){return t.type==="ExpressionStatement"&&t.expression.type==="StringLiteral"&&!t.expression.extra.parenthesized}parseBlockBody(t,e,s,i,r){let n=t.body=[],o=t.directives=[];this.parseBlockOrModuleBlockBody(n,e?o:void 0,s,i,r);}parseBlockOrModuleBlockBody(t,e,s,i,r){let n=this.state.strict,o=!1,h=!1;for(;!this.match(i);){let l=s?this.parseModuleItem():this.parseStatementListItem();if(e&&!h){if(this.isValidDirective(l)){let c=this.stmtToDirective(l);e.push(c),!o&&c.value.value==="use strict"&&(o=!0,this.setStrict(!0));continue}h=!0,this.state.strictErrors.clear();}t.push(l);}r==null||r.call(this,o),n||this.setStrict(!1),this.next();}parseFor(t,e){return t.init=e,this.semicolon(!1),t.test=this.match(13)?null:this.parseExpression(),this.semicolon(!1),t.update=this.match(11)?null:this.parseExpression(),this.expect(11),t.body=this.withSmartMixTopicForbiddingContext(()=>this.parseStatement()),this.scope.exit(),this.state.labels.pop(),this.finishNode(t,"ForStatement")}parseForIn(t,e,s){let i=this.match(58);return this.next(),i?s!==null&&this.unexpected(s):t.await=s!==null,e.type==="VariableDeclaration"&&e.declarations[0].init!=null&&(!i||!this.options.annexB||this.state.strict||e.kind!=="var"||e.declarations[0].id.type!=="Identifier")&&this.raise(p.ForInOfLoopInitializer,e,{type:i?"ForInStatement":"ForOfStatement"}),e.type==="AssignmentPattern"&&this.raise(p.InvalidLhs,e,{ancestor:{type:"ForStatement"}}),t.left=e,t.right=i?this.parseExpression():this.parseMaybeAssignAllowIn(),this.expect(11),t.body=this.withSmartMixTopicForbiddingContext(()=>this.parseStatement()),this.scope.exit(),this.state.labels.pop(),this.finishNode(t,i?"ForInStatement":"ForOfStatement")}parseVar(t,e,s,i=!1){let r=t.declarations=[];for(t.kind=s;;){let n=this.startNode();if(this.parseVarId(n,s),n.init=this.eat(29)?e?this.parseMaybeAssignDisallowIn():this.parseMaybeAssignAllowIn():null,n.init===null&&!i&&(n.id.type!=="Identifier"&&!(e&&(this.match(58)||this.isContextual(102)))?this.raise(p.DeclarationMissingInitializer,this.state.lastTokEndLoc,{kind:"destructuring"}):(s==="const"||s==="using"||s==="await using")&&!(this.match(58)||this.isContextual(102))&&this.raise(p.DeclarationMissingInitializer,this.state.lastTokEndLoc,{kind:s})),r.push(this.finishNode(n,"VariableDeclarator")),!this.eat(12))break}return t}parseVarId(t,e){let s=this.parseBindingAtom();(e==="using"||e==="await using")&&(s.type==="ArrayPattern"||s.type==="ObjectPattern")&&this.raise(p.UsingDeclarationHasBindingPattern,s.loc.start),this.checkLVal(s,{type:"VariableDeclarator"},e==="var"?5:8201),t.id=s;}parseAsyncFunctionExpression(t){return this.parseFunction(t,8)}parseFunction(t,e=0){let s=e&2,i=!!(e&1),r=i&&!(e&4),n=!!(e&8);this.initFunction(t,n),this.match(55)&&(s&&this.raise(p.GeneratorInSingleStatementContext,this.state.startLoc),this.next(),t.generator=!0),i&&(t.id=this.parseFunctionId(r));let o=this.state.maybeInArrowParameters;return this.state.maybeInArrowParameters=!1,this.scope.enter(2),this.prodParam.enter(Ce(n,t.generator)),i||(t.id=this.parseFunctionId()),this.parseFunctionParams(t,!1),this.withSmartMixTopicForbiddingContext(()=>{this.parseFunctionBodyAndFinish(t,i?"FunctionDeclaration":"FunctionExpression");}),this.prodParam.exit(),this.scope.exit(),i&&!s&&this.registerFunctionStatementId(t),this.state.maybeInArrowParameters=o,t}parseFunctionId(t){return t||C(this.state.type)?this.parseIdentifier():null}parseFunctionParams(t,e){this.expect(10),this.expressionScope.enter(ki()),t.params=this.parseBindingList(11,41,2|(e?4:0)),this.expressionScope.exit();}registerFunctionStatementId(t){t.id&&this.scope.declareName(t.id.name,!this.options.annexB||this.state.strict||t.generator||t.async?this.scope.treatFunctionsAsVar?5:8201:17,t.id.loc.start);}parseClass(t,e,s){this.next();let i=this.state.strict;return this.state.strict=!0,this.parseClassId(t,e,s),this.parseClassSuper(t),t.body=this.parseClassBody(!!t.superClass,i),this.finishNode(t,e?"ClassDeclaration":"ClassExpression")}isClassProperty(){return this.match(29)||this.match(13)||this.match(8)}isClassMethod(){return this.match(10)}nameIsConstructor(t){return t.type==="Identifier"&&t.name==="constructor"||t.type==="StringLiteral"&&t.value==="constructor"}isNonstaticConstructor(t){return !t.computed&&!t.static&&this.nameIsConstructor(t.key)}parseClassBody(t,e){this.classScope.enter();let s={hadConstructor:!1,hadSuperClass:t},i=[],r=this.startNode();if(r.body=[],this.expect(5),this.withSmartMixTopicForbiddingContext(()=>{for(;!this.match(8);){if(this.eat(13)){if(i.length>0)throw this.raise(p.DecoratorSemicolon,this.state.lastTokEndLoc);continue}if(this.match(26)){i.push(this.parseDecorator());continue}let n=this.startNode();i.length&&(n.decorators=i,this.resetStartLocationFromNode(n,i[0]),i=[]),this.parseClassMember(r,n,s),n.kind==="constructor"&&n.decorators&&n.decorators.length>0&&this.raise(p.DecoratorConstructor,n);}}),this.state.strict=e,this.next(),i.length)throw this.raise(p.TrailingDecorator,this.state.startLoc);return this.classScope.exit(),this.finishNode(r,"ClassBody")}parseClassMemberFromModifier(t,e){let s=this.parseIdentifier(!0);if(this.isClassMethod()){let i=e;return i.kind="method",i.computed=!1,i.key=s,i.static=!1,this.pushClassMethod(t,i,!1,!1,!1,!1),!0}else if(this.isClassProperty()){let i=e;return i.computed=!1,i.key=s,i.static=!1,t.body.push(this.parseClassProperty(i)),!0}return this.resetPreviousNodeTrailingComments(s),!1}parseClassMember(t,e,s){let i=this.isContextual(106);if(i){if(this.parseClassMemberFromModifier(t,e))return;if(this.eat(5)){this.parseClassStaticBlock(t,e);return}}this.parseClassMemberWithIsStatic(t,e,s,i);}parseClassMemberWithIsStatic(t,e,s,i){let r=e,n=e,o=e,h=e,l=e,c=r,u=r;if(e.static=i,this.parsePropertyNamePrefixOperator(e),this.eat(55)){c.kind="method";let w=this.match(139);if(this.parseClassElementName(c),w){this.pushClassPrivateMethod(t,n,!0,!1);return}this.isNonstaticConstructor(r)&&this.raise(p.ConstructorIsGenerator,r.key),this.pushClassMethod(t,r,!0,!1,!1,!1);return}let f=!this.state.containsEsc&&C(this.state.type),d=this.parseClassElementName(e),x=f?d.name:null,S=this.isPrivateName(d),N=this.state.startLoc;if(this.parsePostMemberNameModifiers(u),this.isClassMethod()){if(c.kind="method",S){this.pushClassPrivateMethod(t,n,!1,!1);return}let w=this.isNonstaticConstructor(r),I=!1;w&&(r.kind="constructor",s.hadConstructor&&!this.hasPlugin("typescript")&&this.raise(p.DuplicateConstructor,d),w&&this.hasPlugin("typescript")&&e.override&&this.raise(p.OverrideOnConstructor,d),s.hadConstructor=!0,I=s.hadSuperClass),this.pushClassMethod(t,r,!1,!1,w,I);}else if(this.isClassProperty())S?this.pushClassPrivateProperty(t,h):this.pushClassProperty(t,o);else if(x==="async"&&!this.isLineTerminator()){this.resetPreviousNodeTrailingComments(d);let w=this.eat(55);u.optional&&this.unexpected(N),c.kind="method";let I=this.match(139);this.parseClassElementName(c),this.parsePostMemberNameModifiers(u),I?this.pushClassPrivateMethod(t,n,w,!0):(this.isNonstaticConstructor(r)&&this.raise(p.ConstructorIsAsync,r.key),this.pushClassMethod(t,r,w,!0,!1,!1));}else if((x==="get"||x==="set")&&!(this.match(55)&&this.isLineTerminator())){this.resetPreviousNodeTrailingComments(d),c.kind=x;let w=this.match(139);this.parseClassElementName(r),w?this.pushClassPrivateMethod(t,n,!1,!1):(this.isNonstaticConstructor(r)&&this.raise(p.ConstructorIsAccessor,r.key),this.pushClassMethod(t,r,!1,!1,!1,!1)),this.checkGetterSetterParams(r);}else if(x==="accessor"&&!this.isLineTerminator()){this.expectPlugin("decoratorAutoAccessors"),this.resetPreviousNodeTrailingComments(d);let w=this.match(139);this.parseClassElementName(o),this.pushClassAccessorProperty(t,l,w);}else this.isLineTerminator()?S?this.pushClassPrivateProperty(t,h):this.pushClassProperty(t,o):this.unexpected();}parseClassElementName(t){let{type:e,value:s}=this.state;if((e===132||e===134)&&t.static&&s==="prototype"&&this.raise(p.StaticPrototype,this.state.startLoc),e===139){s==="constructor"&&this.raise(p.ConstructorClassPrivateField,this.state.startLoc);let i=this.parsePrivateName();return t.key=i,i}return this.parsePropertyName(t),t.key}parseClassStaticBlock(t,e){var s;this.scope.enter(208);let i=this.state.labels;this.state.labels=[],this.prodParam.enter(0);let r=e.body=[];this.parseBlockOrModuleBlockBody(r,void 0,!1,8),this.prodParam.exit(),this.scope.exit(),this.state.labels=i,t.body.push(this.finishNode(e,"StaticBlock")),(s=e.decorators)!=null&&s.length&&this.raise(p.DecoratorStaticBlock,e);}pushClassProperty(t,e){!e.computed&&this.nameIsConstructor(e.key)&&this.raise(p.ConstructorClassField,e.key),t.body.push(this.parseClassProperty(e));}pushClassPrivateProperty(t,e){let s=this.parseClassPrivateProperty(e);t.body.push(s),this.classScope.declarePrivateName(this.getPrivateNameSV(s.key),0,s.key.loc.start);}pushClassAccessorProperty(t,e,s){!s&&!e.computed&&this.nameIsConstructor(e.key)&&this.raise(p.ConstructorClassField,e.key);let i=this.parseClassAccessorProperty(e);t.body.push(i),s&&this.classScope.declarePrivateName(this.getPrivateNameSV(i.key),0,i.key.loc.start);}pushClassMethod(t,e,s,i,r,n){t.body.push(this.parseMethod(e,s,i,r,n,"ClassMethod",!0));}pushClassPrivateMethod(t,e,s,i){let r=this.parseMethod(e,s,i,!1,!1,"ClassPrivateMethod",!0);t.body.push(r);let n=r.kind==="get"?r.static?6:2:r.kind==="set"?r.static?5:1:0;this.declareClassPrivateMethodInScope(r,n);}declareClassPrivateMethodInScope(t,e){this.classScope.declarePrivateName(this.getPrivateNameSV(t.key),e,t.key.loc.start);}parsePostMemberNameModifiers(t){}parseClassPrivateProperty(t){return this.parseInitializer(t),this.semicolon(),this.finishNode(t,"ClassPrivateProperty")}parseClassProperty(t){return this.parseInitializer(t),this.semicolon(),this.finishNode(t,"ClassProperty")}parseClassAccessorProperty(t){return this.parseInitializer(t),this.semicolon(),this.finishNode(t,"ClassAccessorProperty")}parseInitializer(t){this.scope.enter(80),this.expressionScope.enter(Zt()),this.prodParam.enter(0),t.value=this.eat(29)?this.parseMaybeAssignAllowIn():null,this.expressionScope.exit(),this.prodParam.exit(),this.scope.exit();}parseClassId(t,e,s,i=8331){if(C(this.state.type))t.id=this.parseIdentifier(),e&&this.declareNameFromIdentifier(t.id,i);else if(s||!e)t.id=null;else throw this.raise(p.MissingClassName,this.state.startLoc)}parseClassSuper(t){t.superClass=this.eat(81)?this.parseExprSubscripts():null;}parseExport(t,e){let s=this.parseMaybeImportPhase(t,!0),i=this.maybeParseExportDefaultSpecifier(t,s),r=!i||this.eat(12),n=r&&this.eatExportStar(t),o=n&&this.maybeParseExportNamespaceSpecifier(t),h=r&&(!o||this.eat(12)),l=i||n;if(n&&!o){if(i&&this.unexpected(),e)throw this.raise(p.UnsupportedDecoratorExport,t);return this.parseExportFrom(t,!0),this.finishNode(t,"ExportAllDeclaration")}let c=this.maybeParseExportNamedSpecifiers(t);i&&r&&!n&&!c&&this.unexpected(null,5),o&&h&&this.unexpected(null,98);let u;if(l||c){if(u=!1,e)throw this.raise(p.UnsupportedDecoratorExport,t);this.parseExportFrom(t,l);}else u=this.maybeParseExportDeclaration(t);if(l||c||u){var f;let d=t;if(this.checkExport(d,!0,!1,!!d.source),((f=d.declaration)==null?void 0:f.type)==="ClassDeclaration")this.maybeTakeDecorators(e,d.declaration,d);else if(e)throw this.raise(p.UnsupportedDecoratorExport,t);return this.finishNode(d,"ExportNamedDeclaration")}if(this.eat(65)){let d=t,x=this.parseExportDefaultExpression();if(d.declaration=x,x.type==="ClassDeclaration")this.maybeTakeDecorators(e,x,d);else if(e)throw this.raise(p.UnsupportedDecoratorExport,t);return this.checkExport(d,!0,!0),this.finishNode(d,"ExportDefaultDeclaration")}this.unexpected(null,5);}eatExportStar(t){return this.eat(55)}maybeParseExportDefaultSpecifier(t,e){if(e||this.isExportDefaultSpecifier()){this.expectPlugin("exportDefaultFrom",e==null?void 0:e.loc.start);let s=e||this.parseIdentifier(!0),i=this.startNodeAtNode(s);return i.exported=s,t.specifiers=[this.finishNode(i,"ExportDefaultSpecifier")],!0}return !1}maybeParseExportNamespaceSpecifier(t){if(this.isContextual(93)){var e;((e=t).specifiers)!=null||(e.specifiers=[]);let i=this.startNodeAt(this.state.lastTokStartLoc);return this.next(),i.exported=this.parseModuleExportName(),t.specifiers.push(this.finishNode(i,"ExportNamespaceSpecifier")),!0}return !1}maybeParseExportNamedSpecifiers(t){if(this.match(5)){let e=t;e.specifiers||(e.specifiers=[]);let s=e.exportKind==="type";return e.specifiers.push(...this.parseExportSpecifiers(s)),e.source=null,e.declaration=null,this.hasPlugin("importAssertions")&&(e.assertions=[]),!0}return !1}maybeParseExportDeclaration(t){return this.shouldParseExportDeclaration()?(t.specifiers=[],t.source=null,this.hasPlugin("importAssertions")&&(t.assertions=[]),t.declaration=this.parseExportDeclaration(t),!0):!1}isAsyncFunction(){if(!this.isContextual(95))return !1;let t=this.nextTokenInLineStart();return this.isUnparsedContextual(t,"function")}parseExportDefaultExpression(){let t=this.startNode();if(this.match(68))return this.next(),this.parseFunction(t,5);if(this.isAsyncFunction())return this.next(),this.next(),this.parseFunction(t,13);if(this.match(80))return this.parseClass(t,!0,!0);if(this.match(26))return this.hasPlugin("decorators")&&this.getPluginOption("decorators","decoratorsBeforeExport")===!0&&this.raise(p.DecoratorBeforeExport,this.state.startLoc),this.parseClass(this.maybeTakeDecorators(this.parseDecorators(!1),this.startNode()),!0,!0);if(this.match(75)||this.match(74)||this.isLet())throw this.raise(p.UnsupportedDefaultExport,this.state.startLoc);let e=this.parseMaybeAssignAllowIn();return this.semicolon(),e}parseExportDeclaration(t){return this.match(80)?this.parseClass(this.startNode(),!0,!1):this.parseStatementListItem()}isExportDefaultSpecifier(){let{type:t}=this.state;if(C(t)){if(t===95&&!this.state.containsEsc||t===100)return !1;if((t===130||t===129)&&!this.state.containsEsc){let{type:i}=this.lookahead();if(C(i)&&i!==98||i===5)return this.expectOnePlugin(["flow","typescript"]),!1}}else if(!this.match(65))return !1;let e=this.nextTokenStart(),s=this.isUnparsedContextual(e,"from");if(this.input.charCodeAt(e)===44||C(this.state.type)&&s)return !0;if(this.match(65)&&s){let i=this.input.charCodeAt(this.nextTokenStartSince(e+4));return i===34||i===39}return !1}parseExportFrom(t,e){this.eatContextual(98)?(t.source=this.parseImportSource(),this.checkExport(t),this.maybeParseImportAttributes(t),this.checkJSONModuleImport(t)):e&&this.unexpected(),this.semicolon();}shouldParseExportDeclaration(){let{type:t}=this.state;return t===26&&(this.expectOnePlugin(["decorators","decorators-legacy"]),this.hasPlugin("decorators"))?(this.getPluginOption("decorators","decoratorsBeforeExport")===!0&&this.raise(p.DecoratorBeforeExport,this.state.startLoc),!0):this.isContextual(107)?(this.raise(p.UsingDeclarationExport,this.state.startLoc),!0):this.isContextual(96)&&this.startsAwaitUsing()?(this.raise(p.UsingDeclarationExport,this.state.startLoc),!0):t===74||t===75||t===68||t===80||this.isLet()||this.isAsyncFunction()}checkExport(t,e,s,i){if(e){var r;if(s){if(this.checkDuplicateExports(t,"default"),this.hasPlugin("exportDefaultFrom")){var n;let o=t.declaration;o.type==="Identifier"&&o.name==="from"&&o.end-o.start===4&&!((n=o.extra)!=null&&n.parenthesized)&&this.raise(p.ExportDefaultFromAsIdentifier,o);}}else if((r=t.specifiers)!=null&&r.length)for(let o of t.specifiers){let{exported:h}=o,l=h.type==="Identifier"?h.name:h.value;if(this.checkDuplicateExports(o,l),!i&&o.local){let{local:c}=o;c.type!=="Identifier"?this.raise(p.ExportBindingIsString,o,{localName:c.value,exportName:l}):(this.checkReservedWord(c.name,c.loc.start,!0,!1),this.scope.checkLocalExport(c));}}else if(t.declaration){let o=t.declaration;if(o.type==="FunctionDeclaration"||o.type==="ClassDeclaration"){let{id:h}=o;if(!h)throw new Error("Assertion failure");this.checkDuplicateExports(t,h.name);}else if(o.type==="VariableDeclaration")for(let h of o.declarations)this.checkDeclaration(h.id);}}}checkDeclaration(t){if(t.type==="Identifier")this.checkDuplicateExports(t,t.name);else if(t.type==="ObjectPattern")for(let e of t.properties)this.checkDeclaration(e);else if(t.type==="ArrayPattern")for(let e of t.elements)e&&this.checkDeclaration(e);else t.type==="ObjectProperty"?this.checkDeclaration(t.value):t.type==="RestElement"?this.checkDeclaration(t.argument):t.type==="AssignmentPattern"&&this.checkDeclaration(t.left);}checkDuplicateExports(t,e){this.exportedIdentifiers.has(e)&&(e==="default"?this.raise(p.DuplicateDefaultExport,t):this.raise(p.DuplicateExport,t,{exportName:e})),this.exportedIdentifiers.add(e);}parseExportSpecifiers(t){let e=[],s=!0;for(this.expect(5);!this.eat(8);){if(s)s=!1;else if(this.expect(12),this.eat(8))break;let i=this.isContextual(130),r=this.match(134),n=this.startNode();n.local=this.parseModuleExportName(),e.push(this.parseExportSpecifier(n,r,t,i));}return e}parseExportSpecifier(t,e,s,i){return this.eatContextual(93)?t.exported=this.parseModuleExportName():e?t.exported=Mi(t.local):t.exported||(t.exported=_(t.local)),this.finishNode(t,"ExportSpecifier")}parseModuleExportName(){if(this.match(134)){let t=this.parseStringLiteral(this.state.value),e=tr.exec(t.value);return e&&this.raise(p.ModuleExportNameHasLoneSurrogate,t,{surrogateCharCode:e[0].charCodeAt(0)}),t}return this.parseIdentifier(!0)}isJSONModuleImport(t){return t.assertions!=null?t.assertions.some(({key:e,value:s})=>s.value==="json"&&(e.type==="Identifier"?e.name==="type":e.value==="type")):!1}checkImportReflection(t){let{specifiers:e}=t,s=e.length===1?e[0].type:null;if(t.phase==="source")s!=="ImportDefaultSpecifier"&&this.raise(p.SourcePhaseImportRequiresDefault,e[0].loc.start);else if(t.phase==="defer")s!=="ImportNamespaceSpecifier"&&this.raise(p.DeferImportRequiresNamespace,e[0].loc.start);else if(t.module){var i;s!=="ImportDefaultSpecifier"&&this.raise(p.ImportReflectionNotBinding,e[0].loc.start),((i=t.assertions)==null?void 0:i.length)>0&&this.raise(p.ImportReflectionHasAssertion,e[0].loc.start);}}checkJSONModuleImport(t){if(this.isJSONModuleImport(t)&&t.type!=="ExportAllDeclaration"){let{specifiers:e}=t;if(e!=null){let s=e.find(i=>{let r;if(i.type==="ExportSpecifier"?r=i.local:i.type==="ImportSpecifier"&&(r=i.imported),r!==void 0)return r.type==="Identifier"?r.name!=="default":r.value!=="default"});s!==void 0&&this.raise(p.ImportJSONBindingNotDefault,s.loc.start);}}}isPotentialImportPhase(t){return t?!1:this.isContextual(105)||this.isContextual(97)||this.isContextual(127)}applyImportPhase(t,e,s,i){e||(s==="module"?(this.expectPlugin("importReflection",i),t.module=!0):this.hasPlugin("importReflection")&&(t.module=!1),s==="source"?(this.expectPlugin("sourcePhaseImports",i),t.phase="source"):s==="defer"?(this.expectPlugin("deferredImportEvaluation",i),t.phase="defer"):this.hasPlugin("sourcePhaseImports")&&(t.phase=null));}parseMaybeImportPhase(t,e){if(!this.isPotentialImportPhase(e))return this.applyImportPhase(t,e,null),null;let s=this.parseIdentifier(!0),{type:i}=this.state;return (D(i)?i!==98||this.lookaheadCharCode()===102:i!==12)?(this.resetPreviousIdentifierLeadingComments(s),this.applyImportPhase(t,e,s.name,s.loc.start),null):(this.applyImportPhase(t,e,null),s)}isPrecedingIdImportPhase(t){let{type:e}=this.state;return C(e)?e!==98||this.lookaheadCharCode()===102:e!==12}parseImport(t){return this.match(134)?this.parseImportSourceAndAttributes(t):this.parseImportSpecifiersAndAfter(t,this.parseMaybeImportPhase(t,!1))}parseImportSpecifiersAndAfter(t,e){t.specifiers=[];let i=!this.maybeParseDefaultImportSpecifier(t,e)||this.eat(12),r=i&&this.maybeParseStarImportSpecifier(t);return i&&!r&&this.parseNamedImportSpecifiers(t),this.expectContextual(98),this.parseImportSourceAndAttributes(t)}parseImportSourceAndAttributes(t){return (t.specifiers)!=null||(t.specifiers=[]),t.source=this.parseImportSource(),this.maybeParseImportAttributes(t),this.checkImportReflection(t),this.checkJSONModuleImport(t),this.semicolon(),this.finishNode(t,"ImportDeclaration")}parseImportSource(){return this.match(134)||this.unexpected(),this.parseExprAtom()}parseImportSpecifierLocal(t,e,s){e.local=this.parseIdentifier(),t.specifiers.push(this.finishImportSpecifier(e,s));}finishImportSpecifier(t,e,s=8201){return this.checkLVal(t.local,{type:e},s),this.finishNode(t,e)}parseImportAttributes(){this.expect(5);let t=[],e=new Set;do{if(this.match(8))break;let s=this.startNode(),i=this.state.value;if(e.has(i)&&this.raise(p.ModuleAttributesWithDuplicateKeys,this.state.startLoc,{key:i}),e.add(i),this.match(134)?s.key=this.parseStringLiteral(i):s.key=this.parseIdentifier(!0),this.expect(14),!this.match(134))throw this.raise(p.ModuleAttributeInvalidValue,this.state.startLoc);s.value=this.parseStringLiteral(this.state.value),t.push(this.finishNode(s,"ImportAttribute"));}while(this.eat(12));return this.expect(8),t}parseModuleAttributes(){let t=[],e=new Set;do{let s=this.startNode();if(s.key=this.parseIdentifier(!0),s.key.name!=="type"&&this.raise(p.ModuleAttributeDifferentFromType,s.key),e.has(s.key.name)&&this.raise(p.ModuleAttributesWithDuplicateKeys,s.key,{key:s.key.name}),e.add(s.key.name),this.expect(14),!this.match(134))throw this.raise(p.ModuleAttributeInvalidValue,this.state.startLoc);s.value=this.parseStringLiteral(this.state.value),t.push(this.finishNode(s,"ImportAttribute"));}while(this.eat(12));return t}maybeParseImportAttributes(t){let e;var s=!1;if(this.match(76)){if(this.hasPrecedingLineBreak()&&this.lookaheadCharCode()===40)return;this.next(),this.hasPlugin("moduleAttributes")?e=this.parseModuleAttributes():e=this.parseImportAttributes(),s=!0;}else this.isContextual(94)&&!this.hasPrecedingLineBreak()?(!this.hasPlugin("deprecatedImportAssert")&&!this.hasPlugin("importAssertions")&&this.raise(p.ImportAttributesUseAssert,this.state.startLoc),this.hasPlugin("importAssertions")||this.addExtra(t,"deprecatedAssertSyntax",!0),this.next(),e=this.parseImportAttributes()):e=[];!s&&this.hasPlugin("importAssertions")?t.assertions=e:t.attributes=e;}maybeParseDefaultImportSpecifier(t,e){if(e){let s=this.startNodeAtNode(e);return s.local=e,t.specifiers.push(this.finishImportSpecifier(s,"ImportDefaultSpecifier")),!0}else if(D(this.state.type))return this.parseImportSpecifierLocal(t,this.startNode(),"ImportDefaultSpecifier"),!0;return !1}maybeParseStarImportSpecifier(t){if(this.match(55)){let e=this.startNode();return this.next(),this.expectContextual(93),this.parseImportSpecifierLocal(t,e,"ImportNamespaceSpecifier"),!0}return !1}parseNamedImportSpecifiers(t){let e=!0;for(this.expect(5);!this.eat(8);){if(e)e=!1;else {if(this.eat(14))throw this.raise(p.DestructureNamedImport,this.state.startLoc);if(this.expect(12),this.eat(8))break}let s=this.startNode(),i=this.match(134),r=this.isContextual(130);s.imported=this.parseModuleExportName();let n=this.parseImportSpecifier(s,i,t.importKind==="type"||t.importKind==="typeof",r,void 0);t.specifiers.push(n);}}parseImportSpecifier(t,e,s,i,r){if(this.eatContextual(93))t.local=this.parseIdentifier();else {let{imported:n}=t;if(e)throw this.raise(p.ImportBindingIsString,t,{importName:n.value});this.checkReservedWord(n.name,t.loc.start,!0,!0),t.local||(t.local=_(n));}return this.finishImportSpecifier(t,"ImportSpecifier",r)}isThisParam(t){return t.type==="Identifier"&&t.name==="this"}},ke=class extends ht{constructor(t,e,s){t=Zi(t),super(t,e),this.options=t,this.initializeScopes(),this.plugins=s,this.filename=t.sourceFilename,this.startIndex=t.startIndex;}getScopeHandler(){return fe}parse(){this.enterInitialScopes();let t=this.startNode(),e=this.startNode();return this.nextToken(),t.errors=null,this.parseTopLevel(t,e),t.errors=this.state.errors,t.comments.length=this.state.commentsLen,t}};function ir(a,t){var e;if(((e=t)==null?void 0:e.sourceType)==="unambiguous"){t=Object.assign({},t);try{t.sourceType="module";let s=ce(t,a),i=s.parse();if(s.sawUnambiguousESM)return i;if(s.ambiguousScriptDifferentAst)try{return t.sourceType="script",ce(t,a).parse()}catch{}else i.program.sourceType="script";return i}catch(s){try{return t.sourceType="script",ce(t,a).parse()}catch{}throw s}}else return ce(t,a).parse()}function rr(a,t){let e=ce(t,a);return e.options.strictMode&&(e.state.strict=!0),e.getExpression()}function ar(a){let t={};for(let e of Object.keys(a))t[e]=F(a[e]);return t}var nr=ar(ti);function ce(a,t){let e=ke,s=new Map;if(a!=null&&a.plugins){for(let i of a.plugins){let r,n;typeof i=="string"?r=i:[r,n]=i,s.has(r)||s.set(r,n||{});}Gi(s),e=or(s);}return new e(a,t,s)}var zt=new Map;function or(a){let t=[];for(let i of Yi)a.has(i)&&t.push(i);let e=t.join("|"),s=zt.get(e);if(!s){s=ke;for(let i of t)s=is[i](s);zt.set(e,s);}return s}me.parse=ir;me.parseExpression=rr;me.tokTypes=nr;});var Et$2={};zs$2(Et$2,{parsers:()=>Hr$2});var Be$2=It$3(gt$2());function ve$2(a){return (t,e,s)=>{let i=!!(s!=null&&s.backwards);if(e===!1)return !1;let{length:r}=t,n=e;for(;n>=0&&n<r;){let o=t.charAt(n);if(a instanceof RegExp){if(!a.test(o))return n}else if(!a.includes(o))return n;i?n--:n++;}return n===-1||n===r?n:!1}}var rs$2=ve$2(" 	"),as$2=ve$2(/[^\n\r]/u);function hr$2(a,t){if(t===!1)return !1;if(a.charAt(t)==="/"&&a.charAt(t+1)==="*"){for(let e=t+2;e<a.length;++e)if(a.charAt(e)==="*"&&a.charAt(e+1)==="/")return e+2}return t}var ns$2=hr$2;function lr$2(a,t,e){let s=!!(e!=null&&e.backwards);if(t===!1)return !1;let i=a.charAt(t);if(s){if(a.charAt(t-1)==="\r"&&i===`
`)return t-2;if(i===`
`||i==="\r"||i==="\u2028"||i==="\u2029")return t-1}else {if(i==="\r"&&a.charAt(t+1)===`
`)return t+2;if(i===`
`||i==="\r"||i==="\u2028"||i==="\u2029")return t+1}return t}var os$2=lr$2;function cr$2(a,t){return t===!1?!1:a.charAt(t)==="/"&&a.charAt(t+1)==="/"?as$2(a,t):t}var hs$2=cr$2;function pr$2(a,t){let e=null,s=t;for(;s!==e;)e=s,s=rs$2(a,s),s=ns$2(a,s),s=hs$2(a,s),s=os$2(a,s);return s}var ls$3=pr$2;function ur$2(a){let t=[];for(let e of a)try{return e()}catch(s){t.push(s);}throw Object.assign(new Error("All combinations failed"),{errors:t})}var cs$2=ur$2;function fr$2(a){if(!a.startsWith("#!"))return "";let t=a.indexOf(`
`);return t===-1?a:a.slice(0,t)}var Le$2=fr$2;var dr$2=(a,t,e)=>{if(!(a&&t==null))return Array.isArray(t)||typeof t=="string"?t[e<0?t.length+e:e]:t.at(e)},Tt$3=dr$2;function mr$2(a){return Array.isArray(a)&&a.length>0}var ye$2=mr$2;function L$3(a){var s,i,r;let t=((s=a.range)==null?void 0:s[0])??a.start,e=(r=((i=a.declaration)==null?void 0:i.decorators)??a.decorators)==null?void 0:r[0];return e?Math.min(L$3(e),t):t}function j$1(a){var t;return ((t=a.range)==null?void 0:t[1])??a.end}function yr$2(a){let t=new Set(a);return e=>t.has(e==null?void 0:e.type)}var ps$2=yr$2;var xr$2=ps$2(["Block","CommentBlock","MultiLine"]),xe$3=xr$2;function Pr$1(a){let t=`*${a.value}*`.split(`
`);return t.length>1&&t.every(e=>e.trimStart()[0]==="*")}var bt$2=Pr$1;function gr$2(a){return xe$3(a)&&a.value[0]==="*"&&/@(?:type|satisfies)\b/u.test(a.value)}var us$2=gr$2;var Pe$2=null;function ge$2(a){if(Pe$2!==null&&typeof Pe$2.property){let t=Pe$2;return Pe$2=ge$2.prototype=null,t}return Pe$2=ge$2.prototype=a??Object.create(null),new ge$2}var Tr$2=10;for(let a=0;a<=Tr$2;a++)ge$2();function At$3(a){return ge$2(a)}function br$2(a,t="type"){At$3(a);function e(s){let i=s[t],r=a[i];if(!Array.isArray(r))throw Object.assign(new Error(`Missing visitor keys for '${i}'.`),{node:s});return r}return e}var fs$2=br$2;var ds$3={ArrayExpression:["elements"],AssignmentExpression:["left","right"],BinaryExpression:["left","right"],InterpreterDirective:[],Directive:["value"],DirectiveLiteral:[],BlockStatement:["directives","body"],BreakStatement:["label"],CallExpression:["callee","arguments","typeParameters","typeArguments"],CatchClause:["param","body"],ConditionalExpression:["test","consequent","alternate"],ContinueStatement:["label"],DebuggerStatement:[],DoWhileStatement:["body","test"],EmptyStatement:[],ExpressionStatement:["expression"],File:["program"],ForInStatement:["left","right","body"],ForStatement:["init","test","update","body"],FunctionDeclaration:["id","typeParameters","params","returnType","body","predicate"],FunctionExpression:["id","typeParameters","params","returnType","body"],Identifier:["typeAnnotation","decorators"],IfStatement:["test","consequent","alternate"],LabeledStatement:["label","body"],StringLiteral:[],NumericLiteral:[],NullLiteral:[],BooleanLiteral:[],RegExpLiteral:[],LogicalExpression:["left","right"],MemberExpression:["object","property"],NewExpression:["callee","arguments","typeParameters","typeArguments"],Program:["directives","body"],ObjectExpression:["properties"],ObjectMethod:["decorators","key","typeParameters","params","returnType","body"],ObjectProperty:["key","value","decorators"],RestElement:["argument","typeAnnotation","decorators"],ReturnStatement:["argument"],SequenceExpression:["expressions"],ParenthesizedExpression:["expression"],SwitchCase:["test","consequent"],SwitchStatement:["discriminant","cases"],ThisExpression:[],ThrowStatement:["argument"],TryStatement:["block","handler","finalizer"],UnaryExpression:["argument"],UpdateExpression:["argument"],VariableDeclaration:["declarations"],VariableDeclarator:["id","init"],WhileStatement:["test","body"],WithStatement:["object","body"],AssignmentPattern:["left","right","decorators","typeAnnotation"],ArrayPattern:["elements","typeAnnotation","decorators"],ArrowFunctionExpression:["typeParameters","params","returnType","body","predicate"],ClassBody:["body"],ClassExpression:["decorators","id","typeParameters","superClass","superTypeParameters","mixins","implements","body","superTypeArguments"],ClassDeclaration:["decorators","id","typeParameters","superClass","superTypeParameters","mixins","implements","body","superTypeArguments"],ExportAllDeclaration:["source","attributes","exported"],ExportDefaultDeclaration:["declaration"],ExportNamedDeclaration:["declaration","specifiers","source","attributes"],ExportSpecifier:["local","exported"],ForOfStatement:["left","right","body"],ImportDeclaration:["specifiers","source","attributes"],ImportDefaultSpecifier:["local"],ImportNamespaceSpecifier:["local"],ImportSpecifier:["imported","local"],ImportExpression:["source","options"],MetaProperty:["meta","property"],ClassMethod:["decorators","key","typeParameters","params","returnType","body"],ObjectPattern:["properties","typeAnnotation","decorators"],SpreadElement:["argument"],Super:[],TaggedTemplateExpression:["tag","typeParameters","quasi","typeArguments"],TemplateElement:[],TemplateLiteral:["quasis","expressions"],YieldExpression:["argument"],AwaitExpression:["argument"],BigIntLiteral:[],ExportNamespaceSpecifier:["exported"],OptionalMemberExpression:["object","property"],OptionalCallExpression:["callee","arguments","typeParameters","typeArguments"],ClassProperty:["decorators","key","typeAnnotation","value","variance"],ClassAccessorProperty:["decorators","key","typeAnnotation","value"],ClassPrivateProperty:["decorators","key","typeAnnotation","value","variance"],ClassPrivateMethod:["decorators","key","typeParameters","params","returnType","body"],PrivateName:["id"],StaticBlock:["body"],AnyTypeAnnotation:[],ArrayTypeAnnotation:["elementType"],BooleanTypeAnnotation:[],BooleanLiteralTypeAnnotation:[],NullLiteralTypeAnnotation:[],ClassImplements:["id","typeParameters"],DeclareClass:["id","typeParameters","extends","mixins","implements","body"],DeclareFunction:["id","predicate"],DeclareInterface:["id","typeParameters","extends","body"],DeclareModule:["id","body"],DeclareModuleExports:["typeAnnotation"],DeclareTypeAlias:["id","typeParameters","right"],DeclareOpaqueType:["id","typeParameters","supertype"],DeclareVariable:["id"],DeclareExportDeclaration:["declaration","specifiers","source","attributes"],DeclareExportAllDeclaration:["source","attributes"],DeclaredPredicate:["value"],ExistsTypeAnnotation:[],FunctionTypeAnnotation:["typeParameters","params","rest","returnType","this"],FunctionTypeParam:["name","typeAnnotation"],GenericTypeAnnotation:["id","typeParameters"],InferredPredicate:[],InterfaceExtends:["id","typeParameters"],InterfaceDeclaration:["id","typeParameters","extends","body"],InterfaceTypeAnnotation:["extends","body"],IntersectionTypeAnnotation:["types"],MixedTypeAnnotation:[],EmptyTypeAnnotation:[],NullableTypeAnnotation:["typeAnnotation"],NumberLiteralTypeAnnotation:[],NumberTypeAnnotation:[],ObjectTypeAnnotation:["properties","indexers","callProperties","internalSlots"],ObjectTypeInternalSlot:["id","value"],ObjectTypeCallProperty:["value"],ObjectTypeIndexer:["variance","id","key","value"],ObjectTypeProperty:["key","value","variance"],ObjectTypeSpreadProperty:["argument"],OpaqueType:["id","typeParameters","supertype","impltype"],QualifiedTypeIdentifier:["qualification","id"],StringLiteralTypeAnnotation:[],StringTypeAnnotation:[],SymbolTypeAnnotation:[],ThisTypeAnnotation:[],TupleTypeAnnotation:["types","elementTypes"],TypeofTypeAnnotation:["argument","typeArguments"],TypeAlias:["id","typeParameters","right"],TypeAnnotation:["typeAnnotation"],TypeCastExpression:["expression","typeAnnotation"],TypeParameter:["bound","default","variance"],TypeParameterDeclaration:["params"],TypeParameterInstantiation:["params"],UnionTypeAnnotation:["types"],Variance:[],VoidTypeAnnotation:[],EnumDeclaration:["id","body"],EnumBooleanBody:["members"],EnumNumberBody:["members"],EnumStringBody:["members"],EnumSymbolBody:["members"],EnumBooleanMember:["id","init"],EnumNumberMember:["id","init"],EnumStringMember:["id","init"],EnumDefaultedMember:["id"],IndexedAccessType:["objectType","indexType"],OptionalIndexedAccessType:["objectType","indexType"],JSXAttribute:["name","value"],JSXClosingElement:["name"],JSXElement:["openingElement","children","closingElement"],JSXEmptyExpression:[],JSXExpressionContainer:["expression"],JSXSpreadChild:["expression"],JSXIdentifier:[],JSXMemberExpression:["object","property"],JSXNamespacedName:["namespace","name"],JSXOpeningElement:["name","attributes","typeArguments","typeParameters"],JSXSpreadAttribute:["argument"],JSXText:[],JSXFragment:["openingFragment","children","closingFragment"],JSXOpeningFragment:[],JSXClosingFragment:[],Noop:[],Placeholder:[],V8IntrinsicIdentifier:[],ArgumentPlaceholder:[],BindExpression:["object","callee"],ImportAttribute:["key","value"],Decorator:["expression"],DoExpression:["body"],ExportDefaultSpecifier:["exported"],RecordExpression:["properties"],TupleExpression:["elements"],ModuleExpression:["body"],TopicReference:[],PipelineTopicExpression:["expression"],PipelineBareFunction:["callee"],PipelinePrimaryTopicReference:[],TSParameterProperty:["parameter","decorators"],TSDeclareFunction:["id","typeParameters","params","returnType","body"],TSDeclareMethod:["decorators","key","typeParameters","params","returnType"],TSQualifiedName:["left","right"],TSCallSignatureDeclaration:["typeParameters","parameters","typeAnnotation","params","returnType"],TSConstructSignatureDeclaration:["typeParameters","parameters","typeAnnotation","params","returnType"],TSPropertySignature:["key","typeAnnotation"],TSMethodSignature:["key","typeParameters","parameters","typeAnnotation","params","returnType"],TSIndexSignature:["parameters","typeAnnotation"],TSAnyKeyword:[],TSBooleanKeyword:[],TSBigIntKeyword:[],TSIntrinsicKeyword:[],TSNeverKeyword:[],TSNullKeyword:[],TSNumberKeyword:[],TSObjectKeyword:[],TSStringKeyword:[],TSSymbolKeyword:[],TSUndefinedKeyword:[],TSUnknownKeyword:[],TSVoidKeyword:[],TSThisType:[],TSFunctionType:["typeParameters","parameters","typeAnnotation","params","returnType"],TSConstructorType:["typeParameters","parameters","typeAnnotation","params","returnType"],TSTypeReference:["typeName","typeParameters","typeArguments"],TSTypePredicate:["parameterName","typeAnnotation"],TSTypeQuery:["exprName","typeParameters","typeArguments"],TSTypeLiteral:["members"],TSArrayType:["elementType"],TSTupleType:["elementTypes"],TSOptionalType:["typeAnnotation"],TSRestType:["typeAnnotation"],TSNamedTupleMember:["label","elementType"],TSUnionType:["types"],TSIntersectionType:["types"],TSConditionalType:["checkType","extendsType","trueType","falseType"],TSInferType:["typeParameter"],TSParenthesizedType:["typeAnnotation"],TSTypeOperator:["typeAnnotation"],TSIndexedAccessType:["objectType","indexType"],TSMappedType:["typeParameter","nameType","typeAnnotation"],TSLiteralType:["literal"],TSExpressionWithTypeArguments:["expression","typeParameters"],TSInterfaceDeclaration:["id","typeParameters","extends","body"],TSInterfaceBody:["body"],TSTypeAliasDeclaration:["id","typeParameters","typeAnnotation"],TSInstantiationExpression:["expression","typeParameters","typeArguments"],TSAsExpression:["expression","typeAnnotation"],TSSatisfiesExpression:["expression","typeAnnotation"],TSTypeAssertion:["typeAnnotation","expression"],TSEnumDeclaration:["id","members"],TSEnumMember:["id","initializer"],TSModuleDeclaration:["id","body"],TSModuleBlock:["body"],TSImportType:["argument","qualifier","typeParameters","typeArguments"],TSImportEqualsDeclaration:["id","moduleReference"],TSExternalModuleReference:["expression"],TSNonNullExpression:["expression"],TSExportAssignment:["expression"],TSNamespaceExportDeclaration:["id"],TSTypeAnnotation:["typeAnnotation"],TSTypeParameterInstantiation:["params"],TSTypeParameterDeclaration:["params"],TSTypeParameter:["constraint","default","name"],ChainExpression:["expression"],ExperimentalRestProperty:["argument"],ExperimentalSpreadProperty:["argument"],Literal:[],MethodDefinition:["decorators","key","value"],PrivateIdentifier:[],Property:["key","value"],PropertyDefinition:["decorators","key","typeAnnotation","value","variance"],AccessorProperty:["decorators","key","typeAnnotation","value"],TSAbstractAccessorProperty:["decorators","key","typeAnnotation"],TSAbstractKeyword:[],TSAbstractMethodDefinition:["key","value"],TSAbstractPropertyDefinition:["decorators","key","typeAnnotation"],TSAsyncKeyword:[],TSClassImplements:["expression","typeArguments","typeParameters"],TSDeclareKeyword:[],TSEmptyBodyFunctionExpression:["id","typeParameters","params","returnType"],TSEnumBody:["members"],TSExportKeyword:[],TSInterfaceHeritage:["expression","typeArguments","typeParameters"],TSPrivateKeyword:[],TSProtectedKeyword:[],TSPublicKeyword:[],TSReadonlyKeyword:[],TSStaticKeyword:[],TSTemplateLiteralType:["quasis","types"],AsConstExpression:["expression"],AsExpression:["expression","typeAnnotation"],BigIntLiteralTypeAnnotation:[],BigIntTypeAnnotation:[],ComponentDeclaration:["id","params","body","typeParameters","rendersType"],ComponentParameter:["name","local"],ComponentTypeAnnotation:["params","rest","typeParameters","rendersType"],ComponentTypeParameter:["name","typeAnnotation"],ConditionalTypeAnnotation:["checkType","extendsType","trueType","falseType"],DeclareComponent:["id","params","rest","typeParameters","rendersType"],DeclareEnum:["id","body"],DeclareHook:["id"],DeclareNamespace:["id","body"],EnumBigIntBody:["members"],EnumBigIntMember:["id","init"],HookDeclaration:["id","params","body","typeParameters","returnType"],HookTypeAnnotation:["params","returnType","rest","typeParameters"],InferTypeAnnotation:["typeParameter"],KeyofTypeAnnotation:["argument"],ObjectTypeMappedTypeProperty:["keyTparam","propType","sourceType","variance"],QualifiedTypeofIdentifier:["qualification","id"],TupleTypeLabeledElement:["label","elementType","variance"],TupleTypeSpreadElement:["label","typeAnnotation"],TypeOperator:["typeAnnotation"],TypePredicate:["parameterName","typeAnnotation","asserts"],NGRoot:["node"],NGPipeExpression:["left","right","arguments"],NGChainedExpression:["expressions"],NGEmptyExpression:[],NGMicrosyntax:["body"],NGMicrosyntaxKey:[],NGMicrosyntaxExpression:["expression","alias"],NGMicrosyntaxKeyedExpression:["key","expression"],NGMicrosyntaxLet:["key","value"],NGMicrosyntaxAs:["key","alias"],JsExpressionRoot:["node"],JsonRoot:["node"],TSJSDocAllType:[],TSJSDocUnknownType:[],TSJSDocNullableType:["typeAnnotation"],TSJSDocNonNullableType:["typeAnnotation"],NeverTypeAnnotation:[],UndefinedTypeAnnotation:[],UnknownTypeAnnotation:[],SatisfiesExpression:["expression","typeAnnotation"]};var Ar$2=fs$2(ds$3),ms$2=Ar$2;function St$1(a,t){if(!(a!==null&&typeof a=="object"))return a;if(Array.isArray(a)){for(let s=0;s<a.length;s++)a[s]=St$1(a[s],t);return a}let e=ms$2(a);for(let s=0;s<e.length;s++)a[e[s]]=St$1(a[e[s]],t);return t(a)||a}var De$3=St$1;function Sr$2(a,t){let{parser:e,text:s}=t;if(a.type==="File"&&a.program.interpreter){let{program:{interpreter:i},comments:r}=a;delete a.program.interpreter,r.unshift(i);}if(e==="babel"){let i=new Set;a=De$3(a,r=>{var n;(n=r.leadingComments)!=null&&n.some(us$2)&&i.add(L$3(r));}),a=De$3(a,r=>{if(r.type==="ParenthesizedExpression"){let{expression:n}=r;if(n.type==="TypeCastExpression")return n.range=[...r.range],n;let o=L$3(r);if(!i.has(o))return n.extra={...n.extra,parenthesized:!0},n}});}if(a=De$3(a,i=>{switch(i.type){case"LogicalExpression":if(ys$2(i))return wt$2(i);break;case"VariableDeclaration":{let r=Tt$3(!1,i.declarations,-1);r!=null&&r.init&&s[j$1(r)]!==";"&&(i.range=[L$3(i),j$1(r)]);break}case"TSParenthesizedType":return i.typeAnnotation;case"TSTypeParameter":if(typeof i.name=="string"){let r=L$3(i);i.name={type:"Identifier",name:i.name,range:[r,r+i.name.length]};}break;case"TopicReference":a.extra={...a.extra,__isUsingHackPipeline:!0};break;case"TSUnionType":case"TSIntersectionType":if(i.types.length===1)return i.types[0];break}}),ye$2(a.comments)){let i=Tt$3(!1,a.comments,-1);for(let r=a.comments.length-2;r>=0;r--){let n=a.comments[r];j$1(n)===L$3(i)&&xe$3(n)&&xe$3(i)&&bt$2(n)&&bt$2(i)&&(a.comments.splice(r+1,1),n.value+="*//*"+i.value,n.range=[L$3(n),j$1(i)]),i=n;}}return a.type==="Program"&&(a.range=[0,s.length]),a}function ys$2(a){return a.type==="LogicalExpression"&&a.right.type==="LogicalExpression"&&a.operator===a.right.operator}function wt$2(a){return ys$2(a)?wt$2({type:"LogicalExpression",operator:a.operator,left:wt$2({type:"LogicalExpression",operator:a.operator,left:a.left,right:a.right.left,range:[L$3(a.left),j$1(a.right.left)]}),right:a.right.right,range:[L$3(a),j$1(a)]}):a}var xs$3=Sr$2;function wr$2(a,t){let e=new SyntaxError(a+" ("+t.loc.start.line+":"+t.loc.start.column+")");return Object.assign(e,t)}var Me$2=wr$2;function Cr$1(a){let{message:t,loc:{line:e,column:s},reasonCode:i}=a,r=a;(i==="MissingPlugin"||i==="MissingOneOfPlugins")&&(t="Unexpected token.",r=void 0);let n=` (${e}:${s})`;return t.endsWith(n)&&(t=t.slice(0,-n.length)),Me$2(t,{loc:{start:{line:e,column:s+1}},cause:r})}var Oe$3=Cr$1;var Er$2=(a,t,e,s)=>{if(!(a&&t==null))return t.replaceAll?t.replaceAll(e,s):e.global?t.replace(e,s):t.split(e).join(s)},se$3=Er$2;var Ir$1=/\*\/$/,Nr$1=/^\/\*\*?/,kr$2=/^\s*(\/\*\*?(.|\r?\n)*?\*\/)/,vr$2=/(^|\s+)\/\/([^\n\r]*)/g,Ps$1=/^(\r?\n)+/,Lr$2=/(?:^|\r?\n) *(@[^\n\r]*?) *\r?\n *(?![^\n\r@]*\/\/[^]*)([^\s@][^\n\r@]+?) *\r?\n/g,gs$2=/(?:^|\r?\n) *@(\S+) *([^\n\r]*)/g,Dr$2=/(\r?\n|^) *\* ?/g,Mr$2=[];function Ts$2(a){let t=a.match(kr$2);return t?t[0].trimStart():""}function bs$2(a){let t=`
`;a=se$3(!1,a.replace(Nr$1,"").replace(Ir$1,""),Dr$2,"$1");let e="";for(;e!==a;)e=a,a=se$3(!1,a,Lr$2,`${t}$1 $2${t}`);a=a.replace(Ps$1,"").trimEnd();let s=Object.create(null),i=se$3(!1,a,gs$2,"").replace(Ps$1,"").trimEnd(),r;for(;r=gs$2.exec(a);){let n=se$3(!1,r[2],vr$2,"");if(typeof s[r[1]]=="string"||Array.isArray(s[r[1]])){let o=s[r[1]];s[r[1]]=[...Mr$2,...Array.isArray(o)?o:[o],n];}else s[r[1]]=n;}return {comments:i,pragmas:s}}function Or$2(a){let t=Le$2(a);t&&(a=a.slice(t.length+1));let e=Ts$2(a),{pragmas:s,comments:i}=bs$2(e);return {shebang:t,text:a,pragmas:s,comments:i}}function As$2(a){let{pragmas:t}=Or$2(a);return Object.prototype.hasOwnProperty.call(t,"prettier")||Object.prototype.hasOwnProperty.call(t,"format")}function Fr$2(a){return a=typeof a=="function"?{parse:a}:a,{astFormat:"estree",hasPragma:As$2,locStart:L$3,locEnd:j$1,...a}}var W$2=Fr$2;function Br$2(a){let{filepath:t}=a;if(t){if(t=t.toLowerCase(),t.endsWith(".cjs")||t.endsWith(".cts"))return "script";if(t.endsWith(".mjs")||t.endsWith(".mts"))return "module"}}var Ss$2=Br$2;function Rr$1(a,t){let{type:e="JsExpressionRoot",rootMarker:s,text:i}=t,{tokens:r,comments:n}=a;return delete a.tokens,delete a.comments,{tokens:r,comments:n,type:e,node:a,range:[0,i.length],rootMarker:s}}var Fe$2=Rr$1;var ie$3=a=>W$2(zr$3(a)),Ur$3={sourceType:"module",allowImportExportEverywhere:!0,allowReturnOutsideFunction:!0,allowNewTargetOutsideFunction:!0,allowSuperOutsideMethod:!0,allowUndeclaredExports:!0,errorRecovery:!0,createParenthesizedExpressions:!0,createImportExpressions:!0,plugins:["doExpressions","exportDefaultFrom","functionBind","functionSent","throwExpressions","partialApplication","decorators","moduleBlocks","asyncDoExpressions","destructuringPrivate","decoratorAutoAccessors","explicitResourceManagement","sourcePhaseImports","deferredImportEvaluation",["optionalChainingAssign",{version:"2023-07"}],"recordAndTuple"],tokens:!0,ranges:!0},ws$3="v8intrinsic",Cs$1=[["pipelineOperator",{proposal:"hack",topicToken:"%"}],["pipelineOperator",{proposal:"fsharp"}]],$$2=(a,t=Ur$3)=>({...t,plugins:[...t.plugins,...a]}),_r$2=/@(?:no)?flow\b/u;function jr$2(a,t){var i;if((i=t.filepath)!=null&&i.endsWith(".js.flow"))return !0;let e=Le$2(a);e&&(a=a.slice(e.length));let s=ls$3(a,0);return s!==!1&&(a=a.slice(0,s)),_r$2.test(a)}function $r$3(a,t,e){let s=a(t,e),i=s.errors.find(r=>!Vr$3.has(r.reasonCode));if(i)throw i;return s}function zr$3({isExpression:a=!1,optionsCombinations:t}){return (e,s={})=>{if((s.parser==="babel"||s.parser==="__babel_estree")&&jr$2(e,s))return s.parser="babel-flow",Ls$2.parse(e,s);let i=t;(s.__babelSourceType??Ss$2(s))==="script"&&(i=i.map(l=>({...l,sourceType:"script"})));let n=/%[A-Z]/u.test(e);e.includes("|>")?i=(n?[...Cs$1,ws$3]:Cs$1).flatMap(c=>i.map(u=>$$2([c],u))):n&&(i=i.map(l=>$$2([ws$3],l)));let o=a?Be$2.parseExpression:Be$2.parse,h;try{h=cs$2(i.map(l=>()=>$r$3(o,e,l)));}catch({errors:[l]}){throw Oe$3(l)}return a&&(h=Fe$2(h,{text:e,rootMarker:s.rootMarker})),xs$3(h,{parser:"babel",text:e})}}var Vr$3=new Set(["StrictNumericEscape","StrictWith","StrictOctalLiteral","StrictDelete","StrictEvalArguments","StrictEvalArgumentsBinding","StrictFunction","ForInOfLoopInitializer","EmptyTypeArguments","EmptyTypeParameters","ConstructorHasTypeParameters","UnsupportedParameterPropertyKind","DecoratorExportClass","ParamDupe","InvalidDecimal","RestTrailingComma","UnsupportedParameterDecorator","UnterminatedJsxContent","UnexpectedReservedWord","ModuleAttributesWithDuplicateKeys","LineTerminatorBeforeArrow","InvalidEscapeSequenceTemplate","NonAbstractClassHasAbstractMethod","OptionalTypeBeforeRequired","PatternIsOptional","OptionalBindingPattern","DeclareClassFieldHasInitializer","TypeImportCannotSpecifyDefaultAndNamed","ConstructorClassField","VarRedeclaration","InvalidPrivateFieldResolution","DuplicateExport","ImportAttributesUseAssert"]),vs$2=[$$2(["jsx"])],Es$2=ie$3({optionsCombinations:vs$2}),Is$2=ie$3({optionsCombinations:[$$2(["jsx","typescript"]),$$2(["typescript"])]}),Ns$2=ie$3({isExpression:!0,optionsCombinations:[$$2(["jsx"])]}),ks$3=ie$3({isExpression:!0,optionsCombinations:[$$2(["typescript"])]}),Ls$2=ie$3({optionsCombinations:[$$2(["jsx",["flow",{all:!0}],"flowComments"])]}),qr$1=ie$3({optionsCombinations:vs$2.map(a=>$$2(["estree"],a))}),Ds$3={babel:Es$2,"babel-flow":Ls$2,"babel-ts":Is$2,__js_expression:Ns$2,__ts_expression:ks$3,__vue_expression:Ns$2,__vue_ts_expression:ks$3,__vue_event_binding:Es$2,__vue_ts_event_binding:Is$2,__babel_estree:qr$1};var Ms$1=It$3(gt$2());function Os$3(a={}){let{allowComments:t=!0}=a;return function(s){let i;try{i=(0,Ms$1.parseExpression)(s,{tokens:!0,ranges:!0,attachComment:!1});}catch(r){throw Oe$3(r)}if(!t&&ye$2(i.comments))throw K$3(i.comments[0],"Comment");return re$2(i),Fe$2(i,{type:"JsonRoot",text:s})}}function K$3(a,t){let[e,s]=[a.loc.start,a.loc.end].map(({line:i,column:r})=>({line:i,column:r+1}));return Me$2(`${t} is not allowed in JSON.`,{loc:{start:e,end:s}})}function re$2(a){switch(a.type){case"ArrayExpression":for(let t of a.elements)t!==null&&re$2(t);return;case"ObjectExpression":for(let t of a.properties)re$2(t);return;case"ObjectProperty":if(a.computed)throw K$3(a.key,"Computed key");if(a.shorthand)throw K$3(a.key,"Shorthand property");a.key.type!=="Identifier"&&re$2(a.key),re$2(a.value);return;case"UnaryExpression":{let{operator:t,argument:e}=a;if(t!=="+"&&t!=="-")throw K$3(a,`Operator '${a.operator}'`);if(e.type==="NumericLiteral"||e.type==="Identifier"&&(e.name==="Infinity"||e.name==="NaN"))return;throw K$3(e,`Operator '${t}' before '${e.type}'`)}case"Identifier":if(a.name!=="Infinity"&&a.name!=="NaN"&&a.name!=="undefined")throw K$3(a,`Identifier '${a.name}'`);return;case"TemplateLiteral":if(ye$2(a.expressions))throw K$3(a.expressions[0],"'TemplateLiteral' with expression");for(let t of a.quasis)re$2(t);return;case"NullLiteral":case"BooleanLiteral":case"NumericLiteral":case"StringLiteral":case"TemplateElement":return;default:throw K$3(a,`'${a.type}'`)}}var Ct$3=Os$3(),Kr$2={json:W$2({parse:Ct$3,hasPragma(){return !0}}),json5:W$2(Ct$3),jsonc:W$2(Ct$3),"json-stringify":W$2({parse:Os$3({allowComments:!1}),astFormat:"estree-json"})},Fs$1=Kr$2;var Hr$2={...Ds$3,...Fs$1};var Cn$3=Et$2;

    var ri$2=Object.defineProperty;var Xr$2=t=>{throw TypeError(t)};var Jr$2=(t,e)=>{for(var r in e)ri$2(t,r,{get:e[r],enumerable:!0});};var Zr$2=(t,e,r)=>e.has(t)||Xr$2("Cannot "+r);var K$2=(t,e,r)=>(Zr$2(t,e,"read from private field"),e.get(t)),en$2=(t,e,r)=>e.has(t)?Xr$2("Cannot add the same private member more than once"):e instanceof WeakSet?e.add(t):e.set(t,r),tn$2=(t,e,r,n)=>(Zr$2(t,e,"write to private field"),e.set(t,r),r);var Yr$2={};Jr$2(Yr$2,{languages:()=>As$1,options:()=>vs$1,parsers:()=>Gr$2,printers:()=>Io$1});var ni$2=(t,e,r,n)=>{if(!(t&&e==null))return e.replaceAll?e.replaceAll(r,n):r.global?e.replace(r,n):e.split(r).join(n)},w=ni$2;var Ve$2="string",Ue$2="array",We$2="cursor",De$2="indent",ve$1="align",ze$2="trim",ye$1="group",we$2="fill",be$2="if-break",Te$2="indent-if-break",Ge$2="line-suffix",Ye$2="line-suffix-boundary",Q$1="line",je$2="label",xe$2="break-parent",St=new Set([We$2,De$2,ve$1,ze$2,ye$1,we$2,be$2,Te$2,Ge$2,Ye$2,Q$1,je$2,xe$2]);function si$2(t){if(typeof t=="string")return Ve$2;if(Array.isArray(t))return Ue$2;if(!t)return;let{type:e}=t;if(St.has(e))return e}var Ke$2=si$2;var ii$2=t=>new Intl.ListFormat("en-US",{type:"disjunction"}).format(t);function ai$2(t){let e=t===null?"null":typeof t;if(e!=="string"&&e!=="object")return `Unexpected doc '${e}',
Expected it to be 'string' or 'object'.`;if(Ke$2(t))throw new Error("doc is valid.");let r=Object.prototype.toString.call(t);if(r!=="[object Object]")return `Unexpected doc '${r}'.`;let n=ii$2([...St].map(s=>`'${s}'`));return `Unexpected doc.type '${t.type}'.
Expected it to be ${n}.`}var or$1=class or extends Error{name="InvalidDocError";constructor(e){super(ai$2(e)),this.doc=e;}},ur$1=or$1;var rn$2=()=>{},_t$1=rn$2;function k$2(t){return {type:De$2,contents:t}}function nn$2(t,e){return {type:ve$1,contents:e,n:t}}function _$1(t,e={}){return _t$1(e.expandedStates),{type:ye$1,id:e.id,contents:t,break:!!e.shouldBreak,expandedStates:e.expandedStates}}function sn$2(t){return nn$2(Number.NEGATIVE_INFINITY,t)}function an$2(t){return nn$2({type:"root"},t)}function Et$1(t){return {type:we$2,parts:t}}function le$1(t,e="",r={}){return {type:be$2,breakContents:t,flatContents:e,groupId:r.groupId}}function on$2(t,e){return {type:Te$2,contents:t,groupId:e.groupId,negate:e.negate}}var ne={type:xe$2};var oi$2={type:Q$1,hard:!0},ui$2={type:Q$1,hard:!0,literal:!0},E$1={type:Q$1},v$1={type:Q$1,soft:!0},S$1=[oi$2,ne],un$2=[ui$2,ne];function q$2(t,e){let r=[];for(let n=0;n<e.length;n++)n!==0&&r.push(t),r.push(e[n]);return r}var li$2=(t,e,r)=>{if(!(t&&e==null))return Array.isArray(e)||typeof e=="string"?e[r<0?e.length+r:r]:e.at(r)},se$2=li$2;function lr$1(t,e){if(typeof t=="string")return e(t);let r=new Map;return n(t);function n(i){if(r.has(i))return r.get(i);let a=s(i);return r.set(i,a),a}function s(i){switch(Ke$2(i)){case Ue$2:return e(i.map(n));case we$2:return e({...i,parts:i.parts.map(n)});case be$2:return e({...i,breakContents:n(i.breakContents),flatContents:n(i.flatContents)});case ye$1:{let{expandedStates:a,contents:o}=i;return a?(a=a.map(n),o=a[0]):o=n(o),e({...i,contents:o,expandedStates:a})}case ve$1:case De$2:case Te$2:case je$2:case Ge$2:return e({...i,contents:n(i.contents)});case Ve$2:case We$2:case ze$2:case Ye$2:case Q$1:case xe$2:return e(i);default:throw new ur$1(i)}}}function B$2(t,e=un$2){return lr$1(t,r=>typeof r=="string"?q$2(e,r.split(`
`)):r)}var At$2="'",ln$2='"';function ci$2(t,e){let r=e===!0||e===At$2?At$2:ln$2,n=r===At$2?ln$2:At$2,s=0,i=0;for(let a of t)a===r?s++:a===n&&i++;return s>i?n:r}var cn$2=ci$2;function cr$1(t){if(typeof t!="string")throw new TypeError("Expected a string");return t.replace(/[|\\{}()[\]^$+*?.]/g,"\\$&").replace(/-/g,"\\x2d")}var H$1,pr$1=class pr{constructor(e){en$2(this,H$1);tn$2(this,H$1,new Set(e));}getLeadingWhitespaceCount(e){let r=K$2(this,H$1),n=0;for(let s=0;s<e.length&&r.has(e.charAt(s));s++)n++;return n}getTrailingWhitespaceCount(e){let r=K$2(this,H$1),n=0;for(let s=e.length-1;s>=0&&r.has(e.charAt(s));s--)n++;return n}getLeadingWhitespace(e){let r=this.getLeadingWhitespaceCount(e);return e.slice(0,r)}getTrailingWhitespace(e){let r=this.getTrailingWhitespaceCount(e);return e.slice(e.length-r)}hasLeadingWhitespace(e){return K$2(this,H$1).has(e.charAt(0))}hasTrailingWhitespace(e){return K$2(this,H$1).has(se$2(!1,e,-1))}trimStart(e){let r=this.getLeadingWhitespaceCount(e);return e.slice(r)}trimEnd(e){let r=this.getTrailingWhitespaceCount(e);return e.slice(0,e.length-r)}trim(e){return this.trimEnd(this.trimStart(e))}split(e,r=!1){let n=`[${cr$1([...K$2(this,H$1)].join(""))}]+`,s=new RegExp(r?`(${n})`:n,"u");return e.split(s)}hasWhitespaceCharacter(e){let r=K$2(this,H$1);return Array.prototype.some.call(e,n=>r.has(n))}hasNonWhitespaceCharacter(e){let r=K$2(this,H$1);return Array.prototype.some.call(e,n=>!r.has(n))}isWhitespaceOnly(e){let r=K$2(this,H$1);return Array.prototype.every.call(e,n=>r.has(n))}};H$1=new WeakMap;var pn$2=pr$1;var pi$2=["	",`
`,"\f","\r"," "],hi$2=new pn$2(pi$2),N$1=hi$2;var hr$1=class hr extends Error{name="UnexpectedNodeError";constructor(e,r,n="type"){super(`Unexpected ${r} node ${n}: ${JSON.stringify(e[n])}.`),this.node=e;}},hn$2=hr$1;function mi$2(t){return (t==null?void 0:t.type)==="front-matter"}var ke$2=mi$2;var fi$2=new Set(["sourceSpan","startSourceSpan","endSourceSpan","nameSpan","valueSpan","keySpan","tagDefinition","tokens","valueTokens","switchValueSourceSpan","expSourceSpan","valueSourceSpan"]),di$2=new Set(["if","else if","for","switch","case"]);function mn$2(t,e){var r;if(t.type==="text"||t.type==="comment"||ke$2(t)||t.type==="yaml"||t.type==="toml")return null;if(t.type==="attribute"&&delete e.value,t.type==="docType"&&delete e.value,t.type==="angularControlFlowBlock"&&((r=t.parameters)!=null&&r.children))for(let n of e.parameters.children)di$2.has(t.name)?delete n.expression:n.expression=n.expression.trim();t.type==="angularIcuExpression"&&(e.switchValue=t.switchValue.trim()),t.type==="angularLetDeclarationInitializer"&&delete e.value;}mn$2.ignoredProperties=fi$2;var fn$2=mn$2;async function gi$2(t,e){if(t.language==="yaml"){let r=t.value.trim(),n=r?await e(r,{parser:"yaml"}):"";return an$2([t.startDelimiter,t.explicitLanguage,S$1,n,n?S$1:"",t.endDelimiter])}}var dn$2=gi$2;function ce$1(t,e=!0){return [k$2([v$1,t]),e?v$1:""]}function Y$2(t,e){let r=t.type==="NGRoot"?t.node.type==="NGMicrosyntax"&&t.node.body.length===1&&t.node.body[0].type==="NGMicrosyntaxExpression"?t.node.body[0].expression:t.node:t.type==="JsExpressionRoot"?t.node:t;return r&&(r.type==="ObjectExpression"||r.type==="ArrayExpression"||(e.parser==="__vue_expression"||e.parser==="__vue_ts_expression")&&(r.type==="TemplateLiteral"||r.type==="StringLiteral"))}async function T(t,e,r,n){r={__isInHtmlAttribute:!0,__embeddedInHtml:!0,...r};let s=!0;n&&(r.__onHtmlBindingRoot=(a,o)=>{s=n(a,o);});let i=await e(t,r,e);return s?_$1(i):ce$1(i)}function Ci$1(t,e,r,n){let{node:s}=r,i=n.originalText.slice(s.sourceSpan.start.offset,s.sourceSpan.end.offset);return /^\s*$/u.test(i)?"":T(i,t,{parser:"__ng_directive",__isInHtmlAttribute:!1},Y$2)}var gn$2=Ci$1;var Si$1=t=>String(t).split(/[/\\]/u).pop();function Cn$2(t,e){if(!e)return;let r=Si$1(e).toLowerCase();return t.find(({filenames:n})=>n==null?void 0:n.some(s=>s.toLowerCase()===r))??t.find(({extensions:n})=>n==null?void 0:n.some(s=>r.endsWith(s)))}function _i$1(t,e){if(e)return t.find(({name:r})=>r.toLowerCase()===e)??t.find(({aliases:r})=>r==null?void 0:r.includes(e))??t.find(({extensions:r})=>r==null?void 0:r.includes(`.${e}`))}function Ei$1(t,e){let r=t.plugins.flatMap(s=>s.languages??[]),n=_i$1(r,e.language)??Cn$2(r,e.physicalFile)??Cn$2(r,e.file)??(e.physicalFile,void 0);return n==null?void 0:n.parsers[0]}var Be$1=Ei$1;var Sn$2="inline",_n$2={area:"none",base:"none",basefont:"none",datalist:"none",head:"none",link:"none",meta:"none",noembed:"none",noframes:"none",param:"block",rp:"none",script:"block",style:"none",template:"inline",title:"none",html:"block",body:"block",address:"block",blockquote:"block",center:"block",dialog:"block",div:"block",figure:"block",figcaption:"block",footer:"block",form:"block",header:"block",hr:"block",legend:"block",listing:"block",main:"block",p:"block",plaintext:"block",pre:"block",search:"block",xmp:"block",slot:"contents",ruby:"ruby",rt:"ruby-text",article:"block",aside:"block",h1:"block",h2:"block",h3:"block",h4:"block",h5:"block",h6:"block",hgroup:"block",nav:"block",section:"block",dir:"block",dd:"block",dl:"block",dt:"block",menu:"block",ol:"block",ul:"block",li:"list-item",table:"table",caption:"table-caption",colgroup:"table-column-group",col:"table-column",thead:"table-header-group",tbody:"table-row-group",tfoot:"table-footer-group",tr:"table-row",td:"table-cell",th:"table-cell",input:"inline-block",button:"inline-block",fieldset:"block",details:"block",summary:"block",marquee:"inline-block",source:"block",track:"block",meter:"inline-block",progress:"inline-block",object:"inline-block",video:"inline-block",audio:"inline-block",select:"inline-block",option:"block",optgroup:"block"},En$2="normal",An$2={listing:"pre",plaintext:"pre",pre:"pre",xmp:"pre",nobr:"nowrap",table:"initial",textarea:"pre-wrap"};function Ai$1(t){return t.type==="element"&&!t.hasExplicitNamespace&&!["html","svg"].includes(t.namespace)}var pe$2=Ai$1;var Di$1=t=>w(!1,t,/^[\t\f\r ]*\n/gu,""),mr$1=t=>Di$1(N$1.trimEnd(t)),Dn$2=t=>{let e=t,r=N$1.getLeadingWhitespace(e);r&&(e=e.slice(r.length));let n=N$1.getTrailingWhitespace(e);return n&&(e=e.slice(0,-n.length)),{leadingWhitespace:r,trailingWhitespace:n,text:e}};function Dt$2(t,e){return !!(t.type==="ieConditionalComment"&&t.lastChild&&!t.lastChild.isSelfClosing&&!t.lastChild.endSourceSpan||t.type==="ieConditionalComment"&&!t.complete||he$2(t)&&t.children.some(r=>r.type!=="text"&&r.type!=="interpolation")||wt$1(t,e)&&!U$1(t)&&t.type!=="interpolation")}function me$2(t){return t.type==="attribute"||!t.parent||!t.prev?!1:vi$1(t.prev)}function vi$1(t){return t.type==="comment"&&t.value.trim()==="prettier-ignore"}function O$1(t){return t.type==="text"||t.type==="comment"}function U$1(t){return t.type==="element"&&(t.fullName==="script"||t.fullName==="style"||t.fullName==="svg:style"||t.fullName==="svg:script"||pe$2(t)&&(t.name==="script"||t.name==="style"))}function vn$2(t){return t.children&&!U$1(t)}function yn$2(t){return U$1(t)||t.type==="interpolation"||fr$1(t)}function fr$1(t){return In$2(t).startsWith("pre")}function wn$2(t,e){var s,i;let r=n();if(r&&!t.prev&&((i=(s=t.parent)==null?void 0:s.tagDefinition)!=null&&i.ignoreFirstLf))return t.type==="interpolation";return r;function n(){return ke$2(t)||t.type==="angularControlFlowBlock"?!1:(t.type==="text"||t.type==="interpolation")&&t.prev&&(t.prev.type==="text"||t.prev.type==="interpolation")?!0:!t.parent||t.parent.cssDisplay==="none"?!1:he$2(t.parent)?!0:!(!t.prev&&(t.parent.type==="root"||he$2(t)&&t.parent||U$1(t.parent)||Je$2(t.parent,e)||!ki$1(t.parent.cssDisplay))||t.prev&&!Fi$2(t.prev.cssDisplay))}}function bn$2(t,e){return ke$2(t)||t.type==="angularControlFlowBlock"?!1:(t.type==="text"||t.type==="interpolation")&&t.next&&(t.next.type==="text"||t.next.type==="interpolation")?!0:!t.parent||t.parent.cssDisplay==="none"?!1:he$2(t.parent)?!0:!(!t.next&&(t.parent.type==="root"||he$2(t)&&t.parent||U$1(t.parent)||Je$2(t.parent,e)||!Bi$1(t.parent.cssDisplay))||t.next&&!Li$1(t.next.cssDisplay))}function Tn$2(t){return Ni$1(t.cssDisplay)&&!U$1(t)}function Qe$2(t){return ke$2(t)||t.next&&t.sourceSpan.end&&t.sourceSpan.end.line+1<t.next.sourceSpan.start.line}function xn$2(t){return dr$1(t)||t.type==="element"&&t.children.length>0&&(["body","script","style"].includes(t.name)||t.children.some(e=>wi$2(e)))||t.firstChild&&t.firstChild===t.lastChild&&t.firstChild.type!=="text"&&Bn$2(t.firstChild)&&(!t.lastChild.isTrailingSpaceSensitive||Ln$2(t.lastChild))}function dr$1(t){return t.type==="element"&&t.children.length>0&&(["html","head","ul","ol","select"].includes(t.name)||t.cssDisplay.startsWith("table")&&t.cssDisplay!=="table-cell")}function vt$1(t){return Fn$2(t)||t.prev&&yi$2(t.prev)||kn$1(t)}function yi$2(t){return Fn$2(t)||t.type==="element"&&t.fullName==="br"||kn$1(t)}function kn$1(t){return Bn$2(t)&&Ln$2(t)}function Bn$2(t){return t.hasLeadingSpaces&&(t.prev?t.prev.sourceSpan.end.line<t.sourceSpan.start.line:t.parent.type==="root"||t.parent.startSourceSpan.end.line<t.sourceSpan.start.line)}function Ln$2(t){return t.hasTrailingSpaces&&(t.next?t.next.sourceSpan.start.line>t.sourceSpan.end.line:t.parent.type==="root"||t.parent.endSourceSpan&&t.parent.endSourceSpan.start.line>t.sourceSpan.end.line)}function Fn$2(t){switch(t.type){case"ieConditionalComment":case"comment":case"directive":return !0;case"element":return ["script","select"].includes(t.name)}return !1}function yt$1(t){return t.lastChild?yt$1(t.lastChild):t}function wi$2(t){var e;return (e=t.children)==null?void 0:e.some(r=>r.type!=="text")}function Nn$2(t){if(t)switch(t){case"module":case"text/javascript":case"text/babel":case"application/javascript":return "babel";case"application/x-typescript":return "typescript";case"text/markdown":return "markdown";case"text/html":return "html";case"text/x-handlebars-template":return "glimmer";default:if(t.endsWith("json")||t.endsWith("importmap")||t==="speculationrules")return "json"}}function bi$1(t,e){let{name:r,attrMap:n}=t;if(r!=="script"||Object.prototype.hasOwnProperty.call(n,"src"))return;let{type:s,lang:i}=t.attrMap;return !i&&!s?"babel":Be$1(e,{language:i})??Nn$2(s)}function Ti$1(t,e){if(!wt$1(t,e))return;let{attrMap:r}=t;if(Object.prototype.hasOwnProperty.call(r,"src"))return;let{type:n,lang:s}=r;return Be$1(e,{language:s})??Nn$2(n)}function xi$2(t,e){if(t.name!=="style")return;let{lang:r}=t.attrMap;return r?Be$1(e,{language:r}):"css"}function gr$1(t,e){return bi$1(t,e)??xi$2(t,e)??Ti$1(t,e)}function Xe$2(t){return t==="block"||t==="list-item"||t.startsWith("table")}function ki$1(t){return !Xe$2(t)&&t!=="inline-block"}function Bi$1(t){return !Xe$2(t)&&t!=="inline-block"}function Li$1(t){return !Xe$2(t)}function Fi$2(t){return !Xe$2(t)}function Ni$1(t){return !Xe$2(t)&&t!=="inline-block"}function he$2(t){return In$2(t).startsWith("pre")}function Pi$1(t,e){let r=t;for(;r;){if(e(r))return !0;r=r.parent;}return !1}function Pn$2(t,e){var n;if(fe$2(t,e))return "block";if(((n=t.prev)==null?void 0:n.type)==="comment"){let s=t.prev.value.match(/^\s*display:\s*([a-z]+)\s*$/u);if(s)return s[1]}let r=!1;if(t.type==="element"&&t.namespace==="svg")if(Pi$1(t,s=>s.fullName==="svg:foreignObject"))r=!0;else return t.name==="svg"?"inline-block":"block";switch(e.htmlWhitespaceSensitivity){case"strict":return "inline";case"ignore":return "block";default:return t.type==="element"&&(!t.namespace||r||pe$2(t))&&_n$2[t.name]||Sn$2}}function In$2(t){return t.type==="element"&&(!t.namespace||pe$2(t))&&An$2[t.name]||En$2}function Ii$1(t){let e=Number.POSITIVE_INFINITY;for(let r of t.split(`
`)){if(r.length===0)continue;let n=N$1.getLeadingWhitespaceCount(r);if(n===0)return 0;r.length!==n&&n<e&&(e=n);}return e===Number.POSITIVE_INFINITY?0:e}function Cr(t,e=Ii$1(t)){return e===0?t:t.split(`
`).map(r=>r.slice(e)).join(`
`)}function Sr$1(t){return w(!1,w(!1,t,"&apos;","'"),"&quot;",'"')}function P$1(t){return Sr$1(t.value)}var Ri$1=new Set(["template","style","script"]);function Je$2(t,e){return fe$2(t,e)&&!Ri$1.has(t.fullName)}function fe$2(t,e){return e.parser==="vue"&&t.type==="element"&&t.parent.type==="root"&&t.fullName.toLowerCase()!=="html"}function wt$1(t,e){return fe$2(t,e)&&(Je$2(t,e)||t.attrMap.lang&&t.attrMap.lang!=="html")}function Rn$2(t){let e=t.fullName;return e.charAt(0)==="#"||e==="slot-scope"||e==="v-slot"||e.startsWith("v-slot:")}function On$2(t,e){let r=t.parent;if(!fe$2(r,e))return !1;let n=r.fullName,s=t.fullName;return n==="script"&&s==="setup"||n==="style"&&s==="vars"}function bt$1(t,e=t.value){return t.parent.isWhitespaceSensitive?t.parent.isIndentationSensitive?B$2(e):B$2(Cr(mr$1(e)),S$1):q$2(E$1,N$1.split(e))}function Tt$2(t,e){return fe$2(t,e)&&t.name==="script"}var _r$1=/\{\{(.+?)\}\}/su;async function $n$2(t,e){let r=[];for(let[n,s]of t.split(_r$1).entries())if(n%2===0)r.push(B$2(s));else try{r.push(_$1(["{{",k$2([E$1,await T(s,e,{parser:"__ng_interpolation",__isInHtmlInterpolation:!0})]),E$1,"}}"]));}catch{r.push("{{",B$2(s),"}}");}return r}function Er$1({parser:t}){return (e,r,n)=>T(P$1(n.node),e,{parser:t},Y$2)}var Oi$1=Er$1({parser:"__ng_action"}),$i$2=Er$1({parser:"__ng_binding"}),Mi$1=Er$1({parser:"__ng_directive"});function qi$1(t,e){if(e.parser!=="angular")return;let{node:r}=t,n=r.fullName;if(n.startsWith("(")&&n.endsWith(")")||n.startsWith("on-"))return Oi$1;if(n.startsWith("[")&&n.endsWith("]")||/^bind(?:on)?-/u.test(n)||/^ng-(?:if|show|hide|class|style)$/u.test(n))return $i$2;if(n.startsWith("*"))return Mi$1;let s=P$1(r);if(/^i18n(?:-.+)?$/u.test(n))return ()=>ce$1(Et$1(bt$1(r,s.trim())),!s.includes("@@"));if(_r$1.test(s))return i=>$n$2(s,i)}var Mn$2=qi$1;function Hi$1(t,e){let{node:r}=t,n=P$1(r);if(r.fullName==="class"&&!e.parentParser&&!n.includes("{{"))return ()=>n.trim().split(/\s+/u).join(" ")}var qn$2=Hi$1;function Hn$2(t){return t==="	"||t===`
`||t==="\f"||t==="\r"||t===" "}var Vi$1=/^[ \t\n\r\u000c]+/,Ui$1=/^[, \t\n\r\u000c]+/,Wi$1=/^[^ \t\n\r\u000c]+/,zi$1=/[,]+$/,Vn$2=/^\d+$/,Gi$1=/^-?(?:[0-9]+|[0-9]*\.[0-9]+)(?:[eE][+-]?[0-9]+)?$/;function Yi$1(t){let e=t.length,r,n,s,i,a,o=0,u;function p(C){let A,D=C.exec(t.substring(o));if(D)return [A]=D,o+=A.length,A}let l=[];for(;;){if(p(Ui$1),o>=e){if(l.length===0)throw new Error("Must contain one or more image candidate strings.");return l}u=o,r=p(Wi$1),n=[],r.slice(-1)===","?(r=r.replace(zi$1,""),d()):f();}function f(){for(p(Vi$1),s="",i="in descriptor";;){if(a=t.charAt(o),i==="in descriptor")if(Hn$2(a))s&&(n.push(s),s="",i="after descriptor");else if(a===","){o+=1,s&&n.push(s),d();return}else if(a==="(")s+=a,i="in parens";else if(a===""){s&&n.push(s),d();return}else s+=a;else if(i==="in parens")if(a===")")s+=a,i="in descriptor";else if(a===""){n.push(s),d();return}else s+=a;else if(i==="after descriptor"&&!Hn$2(a))if(a===""){d();return}else i="in descriptor",o-=1;o+=1;}}function d(){let C=!1,A,D,R,F,c={},g,y,M,x,V;for(F=0;F<n.length;F++)g=n[F],y=g[g.length-1],M=g.substring(0,g.length-1),x=parseInt(M,10),V=parseFloat(M),Vn$2.test(M)&&y==="w"?((A||D)&&(C=!0),x===0?C=!0:A=x):Gi$1.test(M)&&y==="x"?((A||D||R)&&(C=!0),V<0?C=!0:D=V):Vn$2.test(M)&&y==="h"?((R||D)&&(C=!0),x===0?C=!0:R=x):C=!0;if(!C)c.source={value:r,startOffset:u},A&&(c.width={value:A}),D&&(c.density={value:D}),R&&(c.height={value:R}),l.push(c);else throw new Error(`Invalid srcset descriptor found in "${t}" at "${g}".`)}}var Un$2=Yi$1;function ji$1(t){if(t.node.fullName==="srcset"&&(t.parent.fullName==="img"||t.parent.fullName==="source"))return ()=>Qi$1(P$1(t.node))}var Wn$2={width:"w",height:"h",density:"x"},Ki$1=Object.keys(Wn$2);function Qi$1(t){let e=Un$2(t),r=Ki$1.filter(l=>e.some(f=>Object.prototype.hasOwnProperty.call(f,l)));if(r.length>1)throw new Error("Mixed descriptor in srcset is not supported");let[n]=r,s=Wn$2[n],i=e.map(l=>l.source.value),a=Math.max(...i.map(l=>l.length)),o=e.map(l=>l[n]?String(l[n].value):""),u=o.map(l=>{let f=l.indexOf(".");return f===-1?l.length:f}),p=Math.max(...u);return ce$1(q$2([",",E$1],i.map((l,f)=>{let d=[l],C=o[f];if(C){let A=a-l.length+1,D=p-u[f],R=" ".repeat(A+D);d.push(le$1(R," "),C+s);}return d})))}var zn$2=ji$1;function Gn$2(t,e){let{node:r}=t,n=P$1(t.node).trim();if(r.fullName==="style"&&!e.parentParser&&!n.includes("{{"))return async s=>ce$1(await s(n,{parser:"css",__isHTMLStyleAttribute:!0}))}var Ar$1=new WeakMap;function Xi$1(t,e){let{root:r}=t;return Ar$1.has(r)||Ar$1.set(r,r.children.some(n=>Tt$2(n,e)&&["ts","typescript"].includes(n.attrMap.lang))),Ar$1.get(r)}var Le$1=Xi$1;function Yn$2(t,e,r){let{node:n}=r,s=P$1(n);return T(`type T<${s}> = any`,t,{parser:"babel-ts",__isEmbeddedTypescriptGenericParameters:!0},Y$2)}function jn$2(t,e,{parseWithTs:r}){return T(`function _(${t}) {}`,e,{parser:r?"babel-ts":"babel",__isVueBindings:!0})}async function Kn$2(t,e,r,n){let s=P$1(r.node),{left:i,operator:a,right:o}=Ji$1(s),u=Le$1(r,n);return [_$1(await T(`function _(${i}) {}`,t,{parser:u?"babel-ts":"babel",__isVueForBindingLeft:!0}))," ",a," ",await T(o,t,{parser:u?"__ts_expression":"__js_expression"})]}function Ji$1(t){let e=/(.*?)\s+(in|of)\s+(.*)/su,r=/,([^,\]}]*)(?:,([^,\]}]*))?$/u,n=/^\(|\)$/gu,s=t.match(e);if(!s)return;let i={};if(i.for=s[3].trim(),!i.for)return;let a=w(!1,s[1].trim(),n,""),o=a.match(r);o?(i.alias=a.replace(r,""),i.iterator1=o[1].trim(),o[2]&&(i.iterator2=o[2].trim())):i.alias=a;let u=[i.alias,i.iterator1,i.iterator2];if(!u.some((p,l)=>!p&&(l===0||u.slice(l+1).some(Boolean))))return {left:u.filter(Boolean).join(","),operator:s[2],right:i.for}}function Zi$1(t,e){if(e.parser!=="vue")return;let{node:r}=t,n=r.fullName;if(n==="v-for")return Kn$2;if(n==="generic"&&Tt$2(r.parent,e))return Yn$2;let s=P$1(r),i=Le$1(t,e);if(Rn$2(r)||On$2(r,e))return a=>jn$2(s,a,{parseWithTs:i});if(n.startsWith("@")||n.startsWith("v-on:"))return a=>ea$1(s,a,{parseWithTs:i});if(n.startsWith(":")||n.startsWith("v-bind:"))return a=>ta$2(s,a,{parseWithTs:i});if(n.startsWith("v-"))return a=>Qn$2(s,a,{parseWithTs:i})}async function ea$1(t,e,{parseWithTs:r}){var n;try{return await Qn$2(t,e,{parseWithTs:r})}catch(s){if(((n=s.cause)==null?void 0:n.code)!=="BABEL_PARSER_SYNTAX_ERROR")throw s}return T(t,e,{parser:r?"__vue_ts_event_binding":"__vue_event_binding"},Y$2)}function ta$2(t,e,{parseWithTs:r}){return T(t,e,{parser:r?"__vue_ts_expression":"__vue_expression"},Y$2)}function Qn$2(t,e,{parseWithTs:r}){return T(t,e,{parser:r?"__ts_expression":"__js_expression"},Y$2)}var Xn$2=Zi$1;function ra$1(t,e){let{node:r}=t;if(r.value){if(/^PRETTIER_HTML_PLACEHOLDER_\d+_\d+_IN_JS$/u.test(e.originalText.slice(r.valueSpan.start.offset,r.valueSpan.end.offset))||e.parser==="lwc"&&r.value.startsWith("{")&&r.value.endsWith("}"))return [r.rawName,"=",r.value];for(let n of [zn$2,Gn$2,qn$2,Xn$2,Mn$2]){let s=n(t,e);if(s)return na$1(s)}}}function na$1(t){return async(e,r,n,s)=>{let i=await t(e,r,n,s);if(i)return i=lr$1(i,a=>typeof a=="string"?w(!1,a,'"',"&quot;"):a),[n.node.rawName,'="',_$1(i),'"']}}var Jn$2=ra$1;var Zn$2=new Proxy(()=>{},{get:()=>Zn$2}),Dr$1=Zn$2;function sa$2(t){return Array.isArray(t)&&t.length>0}var Fe$1=sa$2;function X$2(t){return t.sourceSpan.start.offset}function J$2(t){return t.sourceSpan.end.offset}function Ze$2(t,e){return [t.isSelfClosing?"":ia$2(t,e),de$1(t,e)]}function ia$2(t,e){return t.lastChild&&Se$2(t.lastChild)?"":[aa$1(t,e),xt$1(t,e)]}function de$1(t,e){return (t.next?j(t.next):Ce$2(t.parent))?"":[ge$1(t,e),W$1(t,e)]}function aa$1(t,e){return Ce$2(t)?ge$1(t.lastChild,e):""}function W$1(t,e){return Se$2(t)?xt$1(t.parent,e):et$2(t)?kt$1(t.next,e):""}function xt$1(t,e){if(Dr$1(!t.isSelfClosing),ts$2(t,e))return "";switch(t.type){case"ieConditionalComment":return "<!";case"element":if(t.hasHtmComponentClosingTag)return "<//";default:return `</${t.rawName}`}}function ge$1(t,e){if(ts$2(t,e))return "";switch(t.type){case"ieConditionalComment":case"ieConditionalEndComment":return "[endif]-->";case"ieConditionalStartComment":return "]><!-->";case"interpolation":return "}}";case"angularIcuExpression":return "}";case"element":if(t.isSelfClosing)return "/>";default:return ">"}}function ts$2(t,e){return !t.isSelfClosing&&!t.endSourceSpan&&(me$2(t)||Dt$2(t.parent,e))}function j(t){return t.prev&&t.prev.type!=="docType"&&t.type!=="angularControlFlowBlock"&&!O$1(t.prev)&&t.isLeadingSpaceSensitive&&!t.hasLeadingSpaces}function Ce$2(t){var e;return ((e=t.lastChild)==null?void 0:e.isTrailingSpaceSensitive)&&!t.lastChild.hasTrailingSpaces&&!O$1(yt$1(t.lastChild))&&!he$2(t)}function Se$2(t){return !t.next&&!t.hasTrailingSpaces&&t.isTrailingSpaceSensitive&&O$1(yt$1(t))}function et$2(t){return t.next&&!O$1(t.next)&&O$1(t)&&t.isTrailingSpaceSensitive&&!t.hasTrailingSpaces}function oa$2(t){let e=t.trim().match(/^prettier-ignore-attribute(?:\s+(.+))?$/su);return e?e[1]?e[1].split(/\s+/u):!0:!1}function tt$2(t){return !t.prev&&t.isLeadingSpaceSensitive&&!t.hasLeadingSpaces}function ua$1(t,e,r){var f;let{node:n}=t;if(!Fe$1(n.attrs))return n.isSelfClosing?" ":"";let s=((f=n.prev)==null?void 0:f.type)==="comment"&&oa$2(n.prev.value),i=typeof s=="boolean"?()=>s:Array.isArray(s)?d=>s.includes(d.rawName):()=>!1,a=t.map(({node:d})=>i(d)?B$2(e.originalText.slice(X$2(d),J$2(d))):r(),"attrs"),o=n.type==="element"&&n.fullName==="script"&&n.attrs.length===1&&n.attrs[0].fullName==="src"&&n.children.length===0,p=e.singleAttributePerLine&&n.attrs.length>1&&!fe$2(n,e)?S$1:E$1,l=[k$2([o?" ":E$1,q$2(p,a)])];return n.firstChild&&tt$2(n.firstChild)||n.isSelfClosing&&Ce$2(n.parent)||o?l.push(n.isSelfClosing?" ":""):l.push(e.bracketSameLine?n.isSelfClosing?" ":"":n.isSelfClosing?E$1:v$1),l}function la$1(t){return t.firstChild&&tt$2(t.firstChild)?"":Bt$2(t)}function rt$2(t,e,r){let{node:n}=t;return [_e$2(n,e),ua$1(t,e,r),n.isSelfClosing?"":la$1(n)]}function _e$2(t,e){return t.prev&&et$2(t.prev)?"":[z$2(t,e),kt$1(t,e)]}function z$2(t,e){return tt$2(t)?Bt$2(t.parent):j(t)?ge$1(t.prev,e):""}var es$2="<!doctype";function kt$1(t,e){switch(t.type){case"ieConditionalComment":case"ieConditionalStartComment":return `<!--[if ${t.condition}`;case"ieConditionalEndComment":return "<!--<!";case"interpolation":return "{{";case"docType":{if(t.value==="html"){let n=e.filepath??"";if(/\.html?$/u.test(n))return es$2}return e.originalText.slice(X$2(t),J$2(t)).slice(0,es$2.length)}case"angularIcuExpression":return "{";case"element":if(t.condition)return `<!--[if ${t.condition}]><!--><${t.rawName}`;default:return `<${t.rawName}`}}function Bt$2(t){switch(Dr$1(!t.isSelfClosing),t.type){case"ieConditionalComment":return "]>";case"element":if(t.condition)return "><!--<![endif]-->";default:return ">"}}function ca$1(t,e){if(!t.endSourceSpan)return "";let r=t.startSourceSpan.end.offset;t.firstChild&&tt$2(t.firstChild)&&(r-=Bt$2(t).length);let n=t.endSourceSpan.start.offset;return t.lastChild&&Se$2(t.lastChild)?n+=xt$1(t,e).length:Ce$2(t)&&(n-=ge$1(t.lastChild,e).length),e.originalText.slice(r,n)}var Lt$2=ca$1;var pa$2=new Set(["if","else if","for","switch","case"]);function ha$2(t,e){let{node:r}=t;switch(r.type){case"element":if(U$1(r)||r.type==="interpolation")return;if(!r.isSelfClosing&&wt$1(r,e)){let n=gr$1(r,e);return n?async(s,i)=>{let a=Lt$2(r,e),o=/^\s*$/u.test(a),u="";return o||(u=await s(mr$1(a),{parser:n,__embeddedInHtml:!0}),o=u===""),[z$2(r,e),_$1(rt$2(t,e,i)),o?"":S$1,u,o?"":S$1,Ze$2(r,e),W$1(r,e)]}:void 0}break;case"text":if(U$1(r.parent)){let n=gr$1(r.parent,e);if(n)return async s=>{let i=n==="markdown"?Cr(r.value.replace(/^[^\S\n]*\n/u,"")):r.value,a={parser:n,__embeddedInHtml:!0};if(e.parser==="html"&&n==="babel"){let o="script",{attrMap:u}=r.parent;u&&(u.type==="module"||u.type==="text/babel"&&u["data-type"]==="module")&&(o="module"),a.__babelSourceType=o;}return [ne,z$2(r,e),await s(i,a),W$1(r,e)]}}else if(r.parent.type==="interpolation")return async n=>{let s={__isInHtmlInterpolation:!0,__embeddedInHtml:!0};return e.parser==="angular"?s.parser="__ng_interpolation":e.parser==="vue"?s.parser=Le$1(t,e)?"__vue_ts_expression":"__vue_expression":s.parser="__js_expression",[k$2([E$1,await n(r.value,s)]),r.parent.next&&j(r.parent.next)?" ":E$1]};break;case"attribute":return Jn$2(t,e);case"front-matter":return n=>dn$2(r,n);case"angularControlFlowBlockParameters":return pa$2.has(t.parent.name)?gn$2:void 0;case"angularLetDeclarationInitializer":return n=>T(r.value,n,{parser:"__ng_binding",__isInHtmlAttribute:!1})}}var rs$1=ha$2;var nt$2=null;function st$2(t){if(nt$2!==null&&typeof nt$2.property){let e=nt$2;return nt$2=st$2.prototype=null,e}return nt$2=st$2.prototype=t??Object.create(null),new st$2}var ma$1=10;for(let t=0;t<=ma$1;t++)st$2();function vr$1(t){return st$2(t)}function fa$2(t,e="type"){vr$1(t);function r(n){let s=n[e],i=t[s];if(!Array.isArray(i))throw Object.assign(new Error(`Missing visitor keys for '${s}'.`),{node:n});return i}return r}var ns$1=fa$2;var da$2={"front-matter":[],root:["children"],element:["attrs","children"],ieConditionalComment:["children"],ieConditionalStartComment:[],ieConditionalEndComment:[],interpolation:["children"],text:["children"],docType:[],comment:[],attribute:[],cdata:[],angularControlFlowBlock:["children","parameters"],angularControlFlowBlockParameters:["children"],angularControlFlowBlockParameter:[],angularLetDeclaration:["init"],angularLetDeclarationInitializer:[],angularIcuExpression:["cases"],angularIcuCase:["expression"]},ss$2=da$2;var ga$1=ns$1(ss$2),is$1=ga$1;function as$1(t){return /^\s*<!--\s*@(?:format|prettier)\s*-->/u.test(t)}function os$1(t){return `<!-- @format -->

`+t}var us$1=new Map([["if",new Set(["else if","else"])],["else if",new Set(["else if","else"])],["for",new Set(["empty"])],["defer",new Set(["placeholder","error","loading"])],["placeholder",new Set(["placeholder","error","loading"])],["error",new Set(["placeholder","error","loading"])],["loading",new Set(["placeholder","error","loading"])]]);function ls$2(t){let e=J$2(t);return t.type==="element"&&!t.endSourceSpan&&Fe$1(t.children)?Math.max(e,ls$2(se$2(!1,t.children,-1))):e}function it$2(t,e,r){let n=t.node;if(me$2(n)){let s=ls$2(n);return [z$2(n,e),B$2(N$1.trimEnd(e.originalText.slice(X$2(n)+(n.prev&&et$2(n.prev)?kt$1(n).length:0),s-(n.next&&j(n.next)?ge$1(n,e).length:0)))),W$1(n,e)]}return r()}function Ft$1(t,e){return O$1(t)&&O$1(e)?t.isTrailingSpaceSensitive?t.hasTrailingSpaces?vt$1(e)?S$1:E$1:"":vt$1(e)?S$1:v$1:et$2(t)&&(me$2(e)||e.firstChild||e.isSelfClosing||e.type==="element"&&e.attrs.length>0)||t.type==="element"&&t.isSelfClosing&&j(e)?"":!e.isLeadingSpaceSensitive||vt$1(e)||j(e)&&t.lastChild&&Se$2(t.lastChild)&&t.lastChild.lastChild&&Se$2(t.lastChild.lastChild)?S$1:e.hasLeadingSpaces?E$1:v$1}function Ne$2(t,e,r){let{node:n}=t;if(dr$1(n))return [ne,...t.map(i=>{let a=i.node,o=a.prev?Ft$1(a.prev,a):"";return [o?[o,Qe$2(a.prev)?S$1:""]:"",it$2(i,e,r)]},"children")];let s=n.children.map(()=>Symbol(""));return t.map((i,a)=>{let o=i.node;if(O$1(o)){if(o.prev&&O$1(o.prev)){let A=Ft$1(o.prev,o);if(A)return Qe$2(o.prev)?[S$1,S$1,it$2(i,e,r)]:[A,it$2(i,e,r)]}return it$2(i,e,r)}let u=[],p=[],l=[],f=[],d=o.prev?Ft$1(o.prev,o):"",C=o.next?Ft$1(o,o.next):"";return d&&(Qe$2(o.prev)?u.push(S$1,S$1):d===S$1?u.push(S$1):O$1(o.prev)?p.push(d):p.push(le$1("",v$1,{groupId:s[a-1]}))),C&&(Qe$2(o)?O$1(o.next)&&f.push(S$1,S$1):C===S$1?O$1(o.next)&&f.push(S$1):l.push(C)),[...u,_$1([...p,_$1([it$2(i,e,r),...l],{id:s[a]})]),...f]},"children")}function cs$1(t,e,r){let{node:n}=t,s=[];Ca$2(t)&&s.push("} "),s.push("@",n.name),n.parameters&&s.push(" (",_$1(r("parameters")),")"),s.push(" {");let i=ps$1(n);return n.children.length>0?(n.firstChild.hasLeadingSpaces=!0,n.lastChild.hasTrailingSpaces=!0,s.push(k$2([S$1,Ne$2(t,e,r)])),i&&s.push(S$1,"}")):i&&s.push("}"),_$1(s,{shouldBreak:!0})}function ps$1(t){var e,r;return !(((e=t.next)==null?void 0:e.type)==="angularControlFlowBlock"&&((r=us$1.get(t.name))!=null&&r.has(t.next.name)))}function Ca$2(t){let{previous:e}=t;return (e==null?void 0:e.type)==="angularControlFlowBlock"&&!me$2(e)&&!ps$1(e)}function hs$1(t,e,r){return [k$2([v$1,q$2([";",E$1],t.map(r,"children"))]),v$1]}function ms$1(t,e,r){let{node:n}=t;return [_e$2(n,e),_$1([n.switchValue.trim(),", ",n.clause,n.cases.length>0?[",",k$2([E$1,q$2(E$1,t.map(r,"cases"))])]:"",v$1]),de$1(n,e)]}function fs$1(t,e,r){let{node:n}=t;return [n.value," {",_$1([k$2([v$1,t.map(({node:s})=>s.type==="text"&&!N$1.trim(s.value)?"":r(),"expression")]),v$1]),"}"]}function ds$2(t,e,r){let{node:n}=t;if(Dt$2(n,e))return [z$2(n,e),_$1(rt$2(t,e,r)),B$2(Lt$2(n,e)),...Ze$2(n,e),W$1(n,e)];let s=n.children.length===1&&(n.firstChild.type==="interpolation"||n.firstChild.type==="angularIcuExpression")&&n.firstChild.isLeadingSpaceSensitive&&!n.firstChild.hasLeadingSpaces&&n.lastChild.isTrailingSpaceSensitive&&!n.lastChild.hasTrailingSpaces,i=Symbol("element-attr-group-id"),a=l=>_$1([_$1(rt$2(t,e,r),{id:i}),l,Ze$2(n,e)]),o=l=>s?on$2(l,{groupId:i}):(U$1(n)||Je$2(n,e))&&n.parent.type==="root"&&e.parser==="vue"&&!e.vueIndentScriptAndStyle?l:k$2(l),u=()=>s?le$1(v$1,"",{groupId:i}):n.firstChild.hasLeadingSpaces&&n.firstChild.isLeadingSpaceSensitive?E$1:n.firstChild.type==="text"&&n.isWhitespaceSensitive&&n.isIndentationSensitive?sn$2(v$1):v$1,p=()=>(n.next?j(n.next):Ce$2(n.parent))?n.lastChild.hasTrailingSpaces&&n.lastChild.isTrailingSpaceSensitive?" ":"":s?le$1(v$1,"",{groupId:i}):n.lastChild.hasTrailingSpaces&&n.lastChild.isTrailingSpaceSensitive?E$1:(n.lastChild.type==="comment"||n.lastChild.type==="text"&&n.isWhitespaceSensitive&&n.isIndentationSensitive)&&new RegExp(`\\n[\\t ]{${e.tabWidth*(t.ancestors.length-1)}}$`,"u").test(n.lastChild.value)?"":v$1;return n.children.length===0?a(n.hasDanglingSpaces&&n.isDanglingSpaceSensitive?E$1:""):a([xn$2(n)?ne:"",o([u(),Ne$2(t,e,r)]),p()])}function at$1(t){return t>=9&&t<=32||t==160}function Nt$2(t){return 48<=t&&t<=57}function ot(t){return t>=97&&t<=122||t>=65&&t<=90}function gs$1(t){return t>=97&&t<=102||t>=65&&t<=70||Nt$2(t)}function Pt$2(t){return t===10||t===13}function yr$1(t){return 48<=t&&t<=55}function It$2(t){return t===39||t===34||t===96}var Sa$1=/-+([a-z0-9])/g;function Ss$1(t){return t.replace(Sa$1,(...e)=>e[1].toUpperCase())}var ie$2=class t{constructor(e,r,n,s){this.file=e,this.offset=r,this.line=n,this.col=s;}toString(){return this.offset!=null?`${this.file.url}@${this.line}:${this.col}`:this.file.url}moveBy(e){let r=this.file.content,n=r.length,s=this.offset,i=this.line,a=this.col;for(;s>0&&e<0;)if(s--,e++,r.charCodeAt(s)==10){i--;let u=r.substring(0,s-1).lastIndexOf(String.fromCharCode(10));a=u>0?s-u:s;}else a--;for(;s<n&&e>0;){let o=r.charCodeAt(s);s++,e--,o==10?(i++,a=0):a++;}return new t(this.file,s,i,a)}getContext(e,r){let n=this.file.content,s=this.offset;if(s!=null){s>n.length-1&&(s=n.length-1);let i=s,a=0,o=0;for(;a<e&&s>0&&(s--,a++,!(n[s]==`
`&&++o==r)););for(a=0,o=0;a<e&&i<n.length-1&&(i++,a++,!(n[i]==`
`&&++o==r)););return {before:n.substring(s,this.offset),after:n.substring(this.offset,i+1)}}return null}},Ee$2=class Ee{constructor(e,r){this.content=e,this.url=r;}},h$1=class h{constructor(e,r,n=e,s=null){this.start=e,this.end=r,this.fullStart=n,this.details=s;}toString(){return this.start.file.content.substring(this.start.offset,this.end.offset)}},Rt$2;(function(t){t[t.WARNING=0]="WARNING",t[t.ERROR=1]="ERROR";})(Rt$2||(Rt$2={}));var Ie$1=class Ie{constructor(e,r,n=Rt$2.ERROR){this.span=e,this.msg=r,this.level=n;}contextualMessage(){let e=this.span.start.getContext(100,3);return e?`${this.msg} ("${e.before}[${Rt$2[this.level]} ->]${e.after}")`:this.msg}toString(){let e=this.span.details?`, ${this.span.details}`:"";return `${this.contextualMessage()}: ${this.span.start}${e}`}};var _a$2=[Aa$2,Da$1,ya$1,ba$1,Ta$1,Ba$2,xa$1,ka$1,La$2,wa$1];function Ea$2(t,e){for(let r of _a$2)r(t,e);return t}function Aa$2(t){t.walk(e=>{if(e.type==="element"&&e.tagDefinition.ignoreFirstLf&&e.children.length>0&&e.children[0].type==="text"&&e.children[0].value[0]===`
`){let r=e.children[0];r.value.length===1?e.removeChild(r):r.value=r.value.slice(1);}});}function Da$1(t){let e=r=>{var n,s;return r.type==="element"&&((n=r.prev)==null?void 0:n.type)==="ieConditionalStartComment"&&r.prev.sourceSpan.end.offset===r.startSourceSpan.start.offset&&((s=r.firstChild)==null?void 0:s.type)==="ieConditionalEndComment"&&r.firstChild.sourceSpan.start.offset===r.startSourceSpan.end.offset};t.walk(r=>{if(r.children)for(let n=0;n<r.children.length;n++){let s=r.children[n];if(!e(s))continue;let i=s.prev,a=s.firstChild;r.removeChild(i),n--;let o=new h$1(i.sourceSpan.start,a.sourceSpan.end),u=new h$1(o.start,s.sourceSpan.end);s.condition=i.condition,s.sourceSpan=u,s.startSourceSpan=o,s.removeChild(a);}});}function va$1(t,e,r){t.walk(n=>{if(n.children)for(let s=0;s<n.children.length;s++){let i=n.children[s];if(i.type!=="text"&&!e(i))continue;i.type!=="text"&&(i.type="text",i.value=r(i));let a=i.prev;!a||a.type!=="text"||(a.value+=i.value,a.sourceSpan=new h$1(a.sourceSpan.start,i.sourceSpan.end),n.removeChild(i),s--);}});}function ya$1(t){return va$1(t,e=>e.type==="cdata",e=>`<![CDATA[${e.value}]]>`)}function wa$1(t){let e=r=>{var n,s;return r.type==="element"&&r.attrs.length===0&&r.children.length===1&&r.firstChild.type==="text"&&!N$1.hasWhitespaceCharacter(r.children[0].value)&&!r.firstChild.hasLeadingSpaces&&!r.firstChild.hasTrailingSpaces&&r.isLeadingSpaceSensitive&&!r.hasLeadingSpaces&&r.isTrailingSpaceSensitive&&!r.hasTrailingSpaces&&((n=r.prev)==null?void 0:n.type)==="text"&&((s=r.next)==null?void 0:s.type)==="text"};t.walk(r=>{if(r.children)for(let n=0;n<r.children.length;n++){let s=r.children[n];if(!e(s))continue;let i=s.prev,a=s.next;i.value+=`<${s.rawName}>`+s.firstChild.value+`</${s.rawName}>`+a.value,i.sourceSpan=new h$1(i.sourceSpan.start,a.sourceSpan.end),i.isTrailingSpaceSensitive=a.isTrailingSpaceSensitive,i.hasTrailingSpaces=a.hasTrailingSpaces,r.removeChild(s),n--,r.removeChild(a);}});}function ba$1(t,e){if(e.parser==="html")return;let r=/\{\{(.+?)\}\}/su;t.walk(n=>{if(vn$2(n))for(let s of n.children){if(s.type!=="text")continue;let i=s.sourceSpan.start,a=null,o=s.value.split(r);for(let u=0;u<o.length;u++,i=a){let p=o[u];if(u%2===0){a=i.moveBy(p.length),p.length>0&&n.insertChildBefore(s,{type:"text",value:p,sourceSpan:new h$1(i,a)});continue}a=i.moveBy(p.length+4),n.insertChildBefore(s,{type:"interpolation",sourceSpan:new h$1(i,a),children:p.length===0?[]:[{type:"text",value:p,sourceSpan:new h$1(i.moveBy(2),a.moveBy(-2))}]});}n.removeChild(s);}});}function Ta$1(t){t.walk(e=>{if(!e.children)return;if(e.children.length===0||e.children.length===1&&e.children[0].type==="text"&&N$1.trim(e.children[0].value).length===0){e.hasDanglingSpaces=e.children.length>0,e.children=[];return}let r=yn$2(e),n=fr$1(e);if(!r)for(let s=0;s<e.children.length;s++){let i=e.children[s];if(i.type!=="text")continue;let{leadingWhitespace:a,text:o,trailingWhitespace:u}=Dn$2(i.value),p=i.prev,l=i.next;o?(i.value=o,i.sourceSpan=new h$1(i.sourceSpan.start.moveBy(a.length),i.sourceSpan.end.moveBy(-u.length)),a&&(p&&(p.hasTrailingSpaces=!0),i.hasLeadingSpaces=!0),u&&(i.hasTrailingSpaces=!0,l&&(l.hasLeadingSpaces=!0))):(e.removeChild(i),s--,(a||u)&&(p&&(p.hasTrailingSpaces=!0),l&&(l.hasLeadingSpaces=!0)));}e.isWhitespaceSensitive=r,e.isIndentationSensitive=n;});}function xa$1(t){t.walk(e=>{e.isSelfClosing=!e.children||e.type==="element"&&(e.tagDefinition.isVoid||e.endSourceSpan&&e.startSourceSpan.start===e.endSourceSpan.start&&e.startSourceSpan.end===e.endSourceSpan.end);});}function ka$1(t,e){t.walk(r=>{r.type==="element"&&(r.hasHtmComponentClosingTag=r.endSourceSpan&&/^<\s*\/\s*\/\s*>$/u.test(e.originalText.slice(r.endSourceSpan.start.offset,r.endSourceSpan.end.offset)));});}function Ba$2(t,e){t.walk(r=>{r.cssDisplay=Pn$2(r,e);});}function La$2(t,e){t.walk(r=>{let{children:n}=r;if(n){if(n.length===0){r.isDanglingSpaceSensitive=Tn$2(r);return}for(let s of n)s.isLeadingSpaceSensitive=wn$2(s,e),s.isTrailingSpaceSensitive=bn$2(s,e);for(let s=0;s<n.length;s++){let i=n[s];i.isLeadingSpaceSensitive=(s===0||i.prev.isTrailingSpaceSensitive)&&i.isLeadingSpaceSensitive,i.isTrailingSpaceSensitive=(s===n.length-1||i.next.isLeadingSpaceSensitive)&&i.isTrailingSpaceSensitive;}}});}var _s$1=Ea$2;function Fa$1(t,e,r){let{node:n}=t;switch(n.type){case"front-matter":return B$2(n.raw);case"root":return e.__onHtmlRoot&&e.__onHtmlRoot(n),[_$1(Ne$2(t,e,r)),S$1];case"element":case"ieConditionalComment":return ds$2(t,e,r);case"angularControlFlowBlock":return cs$1(t,e,r);case"angularControlFlowBlockParameters":return hs$1(t,e,r);case"angularControlFlowBlockParameter":return N$1.trim(n.expression);case"angularLetDeclaration":return _$1(["@let ",_$1([n.id," =",_$1(k$2([E$1,r("init")]))]),";"]);case"angularLetDeclarationInitializer":return n.value;case"angularIcuExpression":return ms$1(t,e,r);case"angularIcuCase":return fs$1(t,e,r);case"ieConditionalStartComment":case"ieConditionalEndComment":return [_e$2(n),de$1(n)];case"interpolation":return [_e$2(n,e),...t.map(r,"children"),de$1(n,e)];case"text":{if(n.parent.type==="interpolation"){let o=/\n[^\S\n]*$/u,u=o.test(n.value),p=u?n.value.replace(o,""):n.value;return [B$2(p),u?S$1:""]}let s=z$2(n,e),i=bt$1(n),a=W$1(n,e);return i[0]=[s,i[0]],i.push([i.pop(),a]),Et$1(i)}case"docType":return [_$1([_e$2(n,e)," ",w(!1,n.value.replace(/^html\b/iu,"html"),/\s+/gu," ")]),de$1(n,e)];case"comment":return [z$2(n,e),B$2(e.originalText.slice(X$2(n),J$2(n))),W$1(n,e)];case"attribute":{if(n.value===null)return n.rawName;let s=Sr$1(n.value),i=cn$2(s,'"');return [n.rawName,"=",i,B$2(i==='"'?w(!1,s,'"',"&quot;"):w(!1,s,"'","&apos;")),i]}case"cdata":default:throw new hn$2(n,"HTML")}}var Na$1={preprocess:_s$1,print:Fa$1,insertPragma:os$1,massageAstNode:fn$2,embed:rs$1,getVisitorKeys:is$1},Es$1=Na$1;var As$1=[{linguistLanguageId:146,name:"Angular",type:"markup",tmScope:"text.html.basic",aceMode:"html",codemirrorMode:"htmlmixed",codemirrorMimeType:"text/html",color:"#e34c26",aliases:["xhtml"],extensions:[".component.html"],parsers:["angular"],vscodeLanguageIds:["html"],filenames:[]},{linguistLanguageId:146,name:"HTML",type:"markup",tmScope:"text.html.basic",aceMode:"html",codemirrorMode:"htmlmixed",codemirrorMimeType:"text/html",color:"#e34c26",aliases:["xhtml"],extensions:[".html",".hta",".htm",".html.hl",".inc",".xht",".xhtml",".mjml"],parsers:["html"],vscodeLanguageIds:["html"]},{linguistLanguageId:146,name:"Lightning Web Components",type:"markup",tmScope:"text.html.basic",aceMode:"html",codemirrorMode:"htmlmixed",codemirrorMimeType:"text/html",color:"#e34c26",aliases:["xhtml"],extensions:[],parsers:["lwc"],vscodeLanguageIds:["html"],filenames:[]},{linguistLanguageId:391,name:"Vue",type:"markup",color:"#41b883",extensions:[".vue"],tmScope:"text.html.vue",aceMode:"html",parsers:["vue"],vscodeLanguageIds:["vue"]}];var wr$1={bracketSpacing:{category:"Common",type:"boolean",default:!0,description:"Print spaces between brackets.",oppositeDescription:"Do not print spaces between brackets."},singleQuote:{category:"Common",type:"boolean",default:!1,description:"Use single quotes instead of double quotes."},proseWrap:{category:"Common",type:"choice",default:"preserve",description:"How to wrap prose.",choices:[{value:"always",description:"Wrap prose if it exceeds the print width."},{value:"never",description:"Do not wrap prose."},{value:"preserve",description:"Wrap prose as-is."}]},bracketSameLine:{category:"Common",type:"boolean",default:!1,description:"Put > of opening tags on the last line instead of on a new line."},singleAttributePerLine:{category:"Common",type:"boolean",default:!1,description:"Enforce single attribute per line in HTML, Vue and JSX."}};var Ds$2="HTML",Pa$2={bracketSameLine:wr$1.bracketSameLine,htmlWhitespaceSensitivity:{category:Ds$2,type:"choice",default:"css",description:"How to handle whitespaces in HTML.",choices:[{value:"css",description:"Respect the default value of CSS display property."},{value:"strict",description:"Whitespaces are considered sensitive."},{value:"ignore",description:"Whitespaces are considered insensitive."}]},singleAttributePerLine:wr$1.singleAttributePerLine,vueIndentScriptAndStyle:{category:Ds$2,type:"boolean",default:!1,description:"Indent script and style tags in Vue files."}},vs$1=Pa$2;var Gr$2={};Jr$2(Gr$2,{angular:()=>Fo$1,html:()=>Lo$1,lwc:()=>Po$1,vue:()=>No$2});var ys$1;(function(t){t[t.Emulated=0]="Emulated",t[t.None=2]="None",t[t.ShadowDom=3]="ShadowDom";})(ys$1||(ys$1={}));var ws$2;(function(t){t[t.OnPush=0]="OnPush",t[t.Default=1]="Default";})(ws$2||(ws$2={}));var bs$1;(function(t){t[t.None=0]="None",t[t.SignalBased=1]="SignalBased",t[t.HasDecoratorInputTransform=2]="HasDecoratorInputTransform";})(bs$1||(bs$1={}));var br$1={name:"custom-elements"},Tr$1={name:"no-errors-schema"};var Z$1;(function(t){t[t.NONE=0]="NONE",t[t.HTML=1]="HTML",t[t.STYLE=2]="STYLE",t[t.SCRIPT=3]="SCRIPT",t[t.URL=4]="URL",t[t.RESOURCE_URL=5]="RESOURCE_URL";})(Z$1||(Z$1={}));var Ts$1;(function(t){t[t.Error=0]="Error",t[t.Warning=1]="Warning",t[t.Ignore=2]="Ignore";})(Ts$1||(Ts$1={}));var I;(function(t){t[t.RAW_TEXT=0]="RAW_TEXT",t[t.ESCAPABLE_RAW_TEXT=1]="ESCAPABLE_RAW_TEXT",t[t.PARSABLE_DATA=2]="PARSABLE_DATA";})(I||(I={}));function ut$2(t,e=!0){if(t[0]!=":")return [null,t];let r=t.indexOf(":",1);if(r===-1){if(e)throw new Error(`Unsupported format "${t}" expecting ":namespace:name"`);return [null,t]}return [t.slice(1,r),t.slice(r+1)]}function xr$1(t){return ut$2(t)[1]==="ng-container"}function kr$1(t){return ut$2(t)[1]==="ng-content"}function Re$2(t){return t===null?null:ut$2(t)[0]}function Oe$2(t,e){return t?`:${t}:${e}`:e}var $t$2;function Br$1(){return $t$2||($t$2={},Ot$2(Z$1.HTML,["iframe|srcdoc","*|innerHTML","*|outerHTML"]),Ot$2(Z$1.STYLE,["*|style"]),Ot$2(Z$1.URL,["*|formAction","area|href","area|ping","audio|src","a|href","a|ping","blockquote|cite","body|background","del|cite","form|action","img|src","input|src","ins|cite","q|cite","source|src","track|src","video|poster","video|src"]),Ot$2(Z$1.RESOURCE_URL,["applet|code","applet|codebase","base|href","embed|src","frame|src","head|profile","html|manifest","iframe|src","link|href","media|src","object|codebase","object|data","script|src"])),$t$2}function Ot$2(t,e){for(let r of e)$t$2[r.toLowerCase()]=t;}var Mt$2=class Mt{};var Ia$2="boolean",Ra$1="number",Oa$1="string",$a$2="object",Ma$1=["[Element]|textContent,%ariaAtomic,%ariaAutoComplete,%ariaBusy,%ariaChecked,%ariaColCount,%ariaColIndex,%ariaColSpan,%ariaCurrent,%ariaDescription,%ariaDisabled,%ariaExpanded,%ariaHasPopup,%ariaHidden,%ariaKeyShortcuts,%ariaLabel,%ariaLevel,%ariaLive,%ariaModal,%ariaMultiLine,%ariaMultiSelectable,%ariaOrientation,%ariaPlaceholder,%ariaPosInSet,%ariaPressed,%ariaReadOnly,%ariaRelevant,%ariaRequired,%ariaRoleDescription,%ariaRowCount,%ariaRowIndex,%ariaRowSpan,%ariaSelected,%ariaSetSize,%ariaSort,%ariaValueMax,%ariaValueMin,%ariaValueNow,%ariaValueText,%classList,className,elementTiming,id,innerHTML,*beforecopy,*beforecut,*beforepaste,*fullscreenchange,*fullscreenerror,*search,*webkitfullscreenchange,*webkitfullscreenerror,outerHTML,%part,#scrollLeft,#scrollTop,slot,*message,*mozfullscreenchange,*mozfullscreenerror,*mozpointerlockchange,*mozpointerlockerror,*webglcontextcreationerror,*webglcontextlost,*webglcontextrestored","[HTMLElement]^[Element]|accessKey,autocapitalize,!autofocus,contentEditable,dir,!draggable,enterKeyHint,!hidden,!inert,innerText,inputMode,lang,nonce,*abort,*animationend,*animationiteration,*animationstart,*auxclick,*beforexrselect,*blur,*cancel,*canplay,*canplaythrough,*change,*click,*close,*contextmenu,*copy,*cuechange,*cut,*dblclick,*drag,*dragend,*dragenter,*dragleave,*dragover,*dragstart,*drop,*durationchange,*emptied,*ended,*error,*focus,*formdata,*gotpointercapture,*input,*invalid,*keydown,*keypress,*keyup,*load,*loadeddata,*loadedmetadata,*loadstart,*lostpointercapture,*mousedown,*mouseenter,*mouseleave,*mousemove,*mouseout,*mouseover,*mouseup,*mousewheel,*paste,*pause,*play,*playing,*pointercancel,*pointerdown,*pointerenter,*pointerleave,*pointermove,*pointerout,*pointerover,*pointerrawupdate,*pointerup,*progress,*ratechange,*reset,*resize,*scroll,*securitypolicyviolation,*seeked,*seeking,*select,*selectionchange,*selectstart,*slotchange,*stalled,*submit,*suspend,*timeupdate,*toggle,*transitioncancel,*transitionend,*transitionrun,*transitionstart,*volumechange,*waiting,*webkitanimationend,*webkitanimationiteration,*webkitanimationstart,*webkittransitionend,*wheel,outerText,!spellcheck,%style,#tabIndex,title,!translate,virtualKeyboardPolicy","abbr,address,article,aside,b,bdi,bdo,cite,content,code,dd,dfn,dt,em,figcaption,figure,footer,header,hgroup,i,kbd,main,mark,nav,noscript,rb,rp,rt,rtc,ruby,s,samp,section,small,strong,sub,sup,u,var,wbr^[HTMLElement]|accessKey,autocapitalize,!autofocus,contentEditable,dir,!draggable,enterKeyHint,!hidden,innerText,inputMode,lang,nonce,*abort,*animationend,*animationiteration,*animationstart,*auxclick,*beforexrselect,*blur,*cancel,*canplay,*canplaythrough,*change,*click,*close,*contextmenu,*copy,*cuechange,*cut,*dblclick,*drag,*dragend,*dragenter,*dragleave,*dragover,*dragstart,*drop,*durationchange,*emptied,*ended,*error,*focus,*formdata,*gotpointercapture,*input,*invalid,*keydown,*keypress,*keyup,*load,*loadeddata,*loadedmetadata,*loadstart,*lostpointercapture,*mousedown,*mouseenter,*mouseleave,*mousemove,*mouseout,*mouseover,*mouseup,*mousewheel,*paste,*pause,*play,*playing,*pointercancel,*pointerdown,*pointerenter,*pointerleave,*pointermove,*pointerout,*pointerover,*pointerrawupdate,*pointerup,*progress,*ratechange,*reset,*resize,*scroll,*securitypolicyviolation,*seeked,*seeking,*select,*selectionchange,*selectstart,*slotchange,*stalled,*submit,*suspend,*timeupdate,*toggle,*transitioncancel,*transitionend,*transitionrun,*transitionstart,*volumechange,*waiting,*webkitanimationend,*webkitanimationiteration,*webkitanimationstart,*webkittransitionend,*wheel,outerText,!spellcheck,%style,#tabIndex,title,!translate,virtualKeyboardPolicy","media^[HTMLElement]|!autoplay,!controls,%controlsList,%crossOrigin,#currentTime,!defaultMuted,#defaultPlaybackRate,!disableRemotePlayback,!loop,!muted,*encrypted,*waitingforkey,#playbackRate,preload,!preservesPitch,src,%srcObject,#volume",":svg:^[HTMLElement]|!autofocus,nonce,*abort,*animationend,*animationiteration,*animationstart,*auxclick,*beforexrselect,*blur,*cancel,*canplay,*canplaythrough,*change,*click,*close,*contextmenu,*copy,*cuechange,*cut,*dblclick,*drag,*dragend,*dragenter,*dragleave,*dragover,*dragstart,*drop,*durationchange,*emptied,*ended,*error,*focus,*formdata,*gotpointercapture,*input,*invalid,*keydown,*keypress,*keyup,*load,*loadeddata,*loadedmetadata,*loadstart,*lostpointercapture,*mousedown,*mouseenter,*mouseleave,*mousemove,*mouseout,*mouseover,*mouseup,*mousewheel,*paste,*pause,*play,*playing,*pointercancel,*pointerdown,*pointerenter,*pointerleave,*pointermove,*pointerout,*pointerover,*pointerrawupdate,*pointerup,*progress,*ratechange,*reset,*resize,*scroll,*securitypolicyviolation,*seeked,*seeking,*select,*selectionchange,*selectstart,*slotchange,*stalled,*submit,*suspend,*timeupdate,*toggle,*transitioncancel,*transitionend,*transitionrun,*transitionstart,*volumechange,*waiting,*webkitanimationend,*webkitanimationiteration,*webkitanimationstart,*webkittransitionend,*wheel,%style,#tabIndex",":svg:graphics^:svg:|",":svg:animation^:svg:|*begin,*end,*repeat",":svg:geometry^:svg:|",":svg:componentTransferFunction^:svg:|",":svg:gradient^:svg:|",":svg:textContent^:svg:graphics|",":svg:textPositioning^:svg:textContent|","a^[HTMLElement]|charset,coords,download,hash,host,hostname,href,hreflang,name,password,pathname,ping,port,protocol,referrerPolicy,rel,%relList,rev,search,shape,target,text,type,username","area^[HTMLElement]|alt,coords,download,hash,host,hostname,href,!noHref,password,pathname,ping,port,protocol,referrerPolicy,rel,%relList,search,shape,target,username","audio^media|","br^[HTMLElement]|clear","base^[HTMLElement]|href,target","body^[HTMLElement]|aLink,background,bgColor,link,*afterprint,*beforeprint,*beforeunload,*blur,*error,*focus,*hashchange,*languagechange,*load,*message,*messageerror,*offline,*online,*pagehide,*pageshow,*popstate,*rejectionhandled,*resize,*scroll,*storage,*unhandledrejection,*unload,text,vLink","button^[HTMLElement]|!disabled,formAction,formEnctype,formMethod,!formNoValidate,formTarget,name,type,value","canvas^[HTMLElement]|#height,#width","content^[HTMLElement]|select","dl^[HTMLElement]|!compact","data^[HTMLElement]|value","datalist^[HTMLElement]|","details^[HTMLElement]|!open","dialog^[HTMLElement]|!open,returnValue","dir^[HTMLElement]|!compact","div^[HTMLElement]|align","embed^[HTMLElement]|align,height,name,src,type,width","fieldset^[HTMLElement]|!disabled,name","font^[HTMLElement]|color,face,size","form^[HTMLElement]|acceptCharset,action,autocomplete,encoding,enctype,method,name,!noValidate,target","frame^[HTMLElement]|frameBorder,longDesc,marginHeight,marginWidth,name,!noResize,scrolling,src","frameset^[HTMLElement]|cols,*afterprint,*beforeprint,*beforeunload,*blur,*error,*focus,*hashchange,*languagechange,*load,*message,*messageerror,*offline,*online,*pagehide,*pageshow,*popstate,*rejectionhandled,*resize,*scroll,*storage,*unhandledrejection,*unload,rows","hr^[HTMLElement]|align,color,!noShade,size,width","head^[HTMLElement]|","h1,h2,h3,h4,h5,h6^[HTMLElement]|align","html^[HTMLElement]|version","iframe^[HTMLElement]|align,allow,!allowFullscreen,!allowPaymentRequest,csp,frameBorder,height,loading,longDesc,marginHeight,marginWidth,name,referrerPolicy,%sandbox,scrolling,src,srcdoc,width","img^[HTMLElement]|align,alt,border,%crossOrigin,decoding,#height,#hspace,!isMap,loading,longDesc,lowsrc,name,referrerPolicy,sizes,src,srcset,useMap,#vspace,#width","input^[HTMLElement]|accept,align,alt,autocomplete,!checked,!defaultChecked,defaultValue,dirName,!disabled,%files,formAction,formEnctype,formMethod,!formNoValidate,formTarget,#height,!incremental,!indeterminate,max,#maxLength,min,#minLength,!multiple,name,pattern,placeholder,!readOnly,!required,selectionDirection,#selectionEnd,#selectionStart,#size,src,step,type,useMap,value,%valueAsDate,#valueAsNumber,#width","li^[HTMLElement]|type,#value","label^[HTMLElement]|htmlFor","legend^[HTMLElement]|align","link^[HTMLElement]|as,charset,%crossOrigin,!disabled,href,hreflang,imageSizes,imageSrcset,integrity,media,referrerPolicy,rel,%relList,rev,%sizes,target,type","map^[HTMLElement]|name","marquee^[HTMLElement]|behavior,bgColor,direction,height,#hspace,#loop,#scrollAmount,#scrollDelay,!trueSpeed,#vspace,width","menu^[HTMLElement]|!compact","meta^[HTMLElement]|content,httpEquiv,media,name,scheme","meter^[HTMLElement]|#high,#low,#max,#min,#optimum,#value","ins,del^[HTMLElement]|cite,dateTime","ol^[HTMLElement]|!compact,!reversed,#start,type","object^[HTMLElement]|align,archive,border,code,codeBase,codeType,data,!declare,height,#hspace,name,standby,type,useMap,#vspace,width","optgroup^[HTMLElement]|!disabled,label","option^[HTMLElement]|!defaultSelected,!disabled,label,!selected,text,value","output^[HTMLElement]|defaultValue,%htmlFor,name,value","p^[HTMLElement]|align","param^[HTMLElement]|name,type,value,valueType","picture^[HTMLElement]|","pre^[HTMLElement]|#width","progress^[HTMLElement]|#max,#value","q,blockquote,cite^[HTMLElement]|","script^[HTMLElement]|!async,charset,%crossOrigin,!defer,event,htmlFor,integrity,!noModule,%referrerPolicy,src,text,type","select^[HTMLElement]|autocomplete,!disabled,#length,!multiple,name,!required,#selectedIndex,#size,value","slot^[HTMLElement]|name","source^[HTMLElement]|#height,media,sizes,src,srcset,type,#width","span^[HTMLElement]|","style^[HTMLElement]|!disabled,media,type","caption^[HTMLElement]|align","th,td^[HTMLElement]|abbr,align,axis,bgColor,ch,chOff,#colSpan,headers,height,!noWrap,#rowSpan,scope,vAlign,width","col,colgroup^[HTMLElement]|align,ch,chOff,#span,vAlign,width","table^[HTMLElement]|align,bgColor,border,%caption,cellPadding,cellSpacing,frame,rules,summary,%tFoot,%tHead,width","tr^[HTMLElement]|align,bgColor,ch,chOff,vAlign","tfoot,thead,tbody^[HTMLElement]|align,ch,chOff,vAlign","template^[HTMLElement]|","textarea^[HTMLElement]|autocomplete,#cols,defaultValue,dirName,!disabled,#maxLength,#minLength,name,placeholder,!readOnly,!required,#rows,selectionDirection,#selectionEnd,#selectionStart,value,wrap","time^[HTMLElement]|dateTime","title^[HTMLElement]|text","track^[HTMLElement]|!default,kind,label,src,srclang","ul^[HTMLElement]|!compact,type","unknown^[HTMLElement]|","video^media|!disablePictureInPicture,#height,*enterpictureinpicture,*leavepictureinpicture,!playsInline,poster,#width",":svg:a^:svg:graphics|",":svg:animate^:svg:animation|",":svg:animateMotion^:svg:animation|",":svg:animateTransform^:svg:animation|",":svg:circle^:svg:geometry|",":svg:clipPath^:svg:graphics|",":svg:defs^:svg:graphics|",":svg:desc^:svg:|",":svg:discard^:svg:|",":svg:ellipse^:svg:geometry|",":svg:feBlend^:svg:|",":svg:feColorMatrix^:svg:|",":svg:feComponentTransfer^:svg:|",":svg:feComposite^:svg:|",":svg:feConvolveMatrix^:svg:|",":svg:feDiffuseLighting^:svg:|",":svg:feDisplacementMap^:svg:|",":svg:feDistantLight^:svg:|",":svg:feDropShadow^:svg:|",":svg:feFlood^:svg:|",":svg:feFuncA^:svg:componentTransferFunction|",":svg:feFuncB^:svg:componentTransferFunction|",":svg:feFuncG^:svg:componentTransferFunction|",":svg:feFuncR^:svg:componentTransferFunction|",":svg:feGaussianBlur^:svg:|",":svg:feImage^:svg:|",":svg:feMerge^:svg:|",":svg:feMergeNode^:svg:|",":svg:feMorphology^:svg:|",":svg:feOffset^:svg:|",":svg:fePointLight^:svg:|",":svg:feSpecularLighting^:svg:|",":svg:feSpotLight^:svg:|",":svg:feTile^:svg:|",":svg:feTurbulence^:svg:|",":svg:filter^:svg:|",":svg:foreignObject^:svg:graphics|",":svg:g^:svg:graphics|",":svg:image^:svg:graphics|decoding",":svg:line^:svg:geometry|",":svg:linearGradient^:svg:gradient|",":svg:mpath^:svg:|",":svg:marker^:svg:|",":svg:mask^:svg:|",":svg:metadata^:svg:|",":svg:path^:svg:geometry|",":svg:pattern^:svg:|",":svg:polygon^:svg:geometry|",":svg:polyline^:svg:geometry|",":svg:radialGradient^:svg:gradient|",":svg:rect^:svg:geometry|",":svg:svg^:svg:graphics|#currentScale,#zoomAndPan",":svg:script^:svg:|type",":svg:set^:svg:animation|",":svg:stop^:svg:|",":svg:style^:svg:|!disabled,media,title,type",":svg:switch^:svg:graphics|",":svg:symbol^:svg:|",":svg:tspan^:svg:textPositioning|",":svg:text^:svg:textPositioning|",":svg:textPath^:svg:textContent|",":svg:title^:svg:|",":svg:use^:svg:graphics|",":svg:view^:svg:|#zoomAndPan","data^[HTMLElement]|value","keygen^[HTMLElement]|!autofocus,challenge,!disabled,form,keytype,name","menuitem^[HTMLElement]|type,label,icon,!disabled,!checked,radiogroup,!default","summary^[HTMLElement]|","time^[HTMLElement]|dateTime",":svg:cursor^:svg:|",":math:^[HTMLElement]|!autofocus,nonce,*abort,*animationend,*animationiteration,*animationstart,*auxclick,*beforeinput,*beforematch,*beforetoggle,*beforexrselect,*blur,*cancel,*canplay,*canplaythrough,*change,*click,*close,*contentvisibilityautostatechange,*contextlost,*contextmenu,*contextrestored,*copy,*cuechange,*cut,*dblclick,*drag,*dragend,*dragenter,*dragleave,*dragover,*dragstart,*drop,*durationchange,*emptied,*ended,*error,*focus,*formdata,*gotpointercapture,*input,*invalid,*keydown,*keypress,*keyup,*load,*loadeddata,*loadedmetadata,*loadstart,*lostpointercapture,*mousedown,*mouseenter,*mouseleave,*mousemove,*mouseout,*mouseover,*mouseup,*mousewheel,*paste,*pause,*play,*playing,*pointercancel,*pointerdown,*pointerenter,*pointerleave,*pointermove,*pointerout,*pointerover,*pointerrawupdate,*pointerup,*progress,*ratechange,*reset,*resize,*scroll,*scrollend,*securitypolicyviolation,*seeked,*seeking,*select,*selectionchange,*selectstart,*slotchange,*stalled,*submit,*suspend,*timeupdate,*toggle,*transitioncancel,*transitionend,*transitionrun,*transitionstart,*volumechange,*waiting,*webkitanimationend,*webkitanimationiteration,*webkitanimationstart,*webkittransitionend,*wheel,%style,#tabIndex",":math:math^:math:|",":math:maction^:math:|",":math:menclose^:math:|",":math:merror^:math:|",":math:mfenced^:math:|",":math:mfrac^:math:|",":math:mi^:math:|",":math:mmultiscripts^:math:|",":math:mn^:math:|",":math:mo^:math:|",":math:mover^:math:|",":math:mpadded^:math:|",":math:mphantom^:math:|",":math:mroot^:math:|",":math:mrow^:math:|",":math:ms^:math:|",":math:mspace^:math:|",":math:msqrt^:math:|",":math:mstyle^:math:|",":math:msub^:math:|",":math:msubsup^:math:|",":math:msup^:math:|",":math:mtable^:math:|",":math:mtd^:math:|",":math:mtext^:math:|",":math:mtr^:math:|",":math:munder^:math:|",":math:munderover^:math:|",":math:semantics^:math:|"],xs$2=new Map(Object.entries({class:"className",for:"htmlFor",formaction:"formAction",innerHtml:"innerHTML",readonly:"readOnly",tabindex:"tabIndex"})),qa=Array.from(xs$2).reduce((t,[e,r])=>(t.set(e,r),t),new Map),qt$2=class qt extends Mt$2{constructor(){super(),this._schema=new Map,this._eventSchema=new Map,Ma$1.forEach(e=>{let r=new Map,n=new Set,[s,i]=e.split("|"),a=i.split(","),[o,u]=s.split("^");o.split(",").forEach(l=>{this._schema.set(l.toLowerCase(),r),this._eventSchema.set(l.toLowerCase(),n);});let p=u&&this._schema.get(u.toLowerCase());if(p){for(let[l,f]of p)r.set(l,f);for(let l of this._eventSchema.get(u.toLowerCase()))n.add(l);}a.forEach(l=>{if(l.length>0)switch(l[0]){case"*":n.add(l.substring(1));break;case"!":r.set(l.substring(1),Ia$2);break;case"#":r.set(l.substring(1),Ra$1);break;case"%":r.set(l.substring(1),$a$2);break;default:r.set(l,Oa$1);}});});}hasProperty(e,r,n){if(n.some(i=>i.name===Tr$1.name))return !0;if(e.indexOf("-")>-1){if(xr$1(e)||kr$1(e))return !1;if(n.some(i=>i.name===br$1.name))return !0}return (this._schema.get(e.toLowerCase())||this._schema.get("unknown")).has(r)}hasElement(e,r){return r.some(n=>n.name===Tr$1.name)||e.indexOf("-")>-1&&(xr$1(e)||kr$1(e)||r.some(n=>n.name===br$1.name))?!0:this._schema.has(e.toLowerCase())}securityContext(e,r,n){n&&(r=this.getMappedPropName(r)),e=e.toLowerCase(),r=r.toLowerCase();let s=Br$1()[e+"|"+r];return s||(s=Br$1()["*|"+r],s||Z$1.NONE)}getMappedPropName(e){return xs$2.get(e)??e}getDefaultComponentElementName(){return "ng-component"}validateProperty(e){return e.toLowerCase().startsWith("on")?{error:!0,msg:`Binding to event property '${e}' is disallowed for security reasons, please use (${e.slice(2)})=...
If '${e}' is a directive input, make sure the directive is imported by the current module.`}:{error:!1}}validateAttribute(e){return e.toLowerCase().startsWith("on")?{error:!0,msg:`Binding to event attribute '${e}' is disallowed for security reasons, please use (${e.slice(2)})=...`}:{error:!1}}allKnownElementNames(){return Array.from(this._schema.keys())}allKnownAttributesOfElement(e){let r=this._schema.get(e.toLowerCase())||this._schema.get("unknown");return Array.from(r.keys()).map(n=>qa.get(n)??n)}allKnownEventsOfElement(e){return Array.from(this._eventSchema.get(e.toLowerCase())??[])}normalizeAnimationStyleProperty(e){return Ss$1(e)}normalizeAnimationStyleValue(e,r,n){let s="",i=n.toString().trim(),a=null;if(Ha$1(e)&&n!==0&&n!=="0")if(typeof n=="number")s="px";else {let o=n.match(/^[+-]?[\d\.]+([a-z]*)$/);o&&o[1].length==0&&(a=`Please provide a CSS unit value for ${r}:${n}`);}return {error:a,value:i+s}}};function Ha$1(t){switch(t){case"width":case"height":case"minWidth":case"minHeight":case"maxWidth":case"maxHeight":case"left":case"top":case"bottom":case"right":case"fontSize":case"outlineWidth":case"outlineOffset":case"paddingTop":case"paddingLeft":case"paddingBottom":case"paddingRight":case"marginTop":case"marginLeft":case"marginBottom":case"marginRight":case"borderRadius":case"borderWidth":case"borderTopWidth":case"borderLeftWidth":case"borderRightWidth":case"borderBottomWidth":case"textIndent":return !0;default:return !1}}var m=class{constructor({closedByChildren:e,implicitNamespacePrefix:r,contentType:n=I.PARSABLE_DATA,closedByParent:s=!1,isVoid:i=!1,ignoreFirstLf:a=!1,preventNamespaceInheritance:o=!1,canSelfClose:u=!1}={}){this.closedByChildren={},this.closedByParent=!1,e&&e.length>0&&e.forEach(p=>this.closedByChildren[p]=!0),this.isVoid=i,this.closedByParent=s||i,this.implicitNamespacePrefix=r||null,this.contentType=n,this.ignoreFirstLf=a,this.preventNamespaceInheritance=o,this.canSelfClose=u??i;}isClosedByChild(e){return this.isVoid||e.toLowerCase()in this.closedByChildren}getContentType(e){return typeof this.contentType=="object"?(e===void 0?void 0:this.contentType[e])??this.contentType.default:this.contentType}},ks$2,lt$1;function $e(t){return lt$1||(ks$2=new m({canSelfClose:!0}),lt$1=Object.assign(Object.create(null),{base:new m({isVoid:!0}),meta:new m({isVoid:!0}),area:new m({isVoid:!0}),embed:new m({isVoid:!0}),link:new m({isVoid:!0}),img:new m({isVoid:!0}),input:new m({isVoid:!0}),param:new m({isVoid:!0}),hr:new m({isVoid:!0}),br:new m({isVoid:!0}),source:new m({isVoid:!0}),track:new m({isVoid:!0}),wbr:new m({isVoid:!0}),p:new m({closedByChildren:["address","article","aside","blockquote","div","dl","fieldset","footer","form","h1","h2","h3","h4","h5","h6","header","hgroup","hr","main","nav","ol","p","pre","section","table","ul"],closedByParent:!0}),thead:new m({closedByChildren:["tbody","tfoot"]}),tbody:new m({closedByChildren:["tbody","tfoot"],closedByParent:!0}),tfoot:new m({closedByChildren:["tbody"],closedByParent:!0}),tr:new m({closedByChildren:["tr"],closedByParent:!0}),td:new m({closedByChildren:["td","th"],closedByParent:!0}),th:new m({closedByChildren:["td","th"],closedByParent:!0}),col:new m({isVoid:!0}),svg:new m({implicitNamespacePrefix:"svg"}),foreignObject:new m({implicitNamespacePrefix:"svg",preventNamespaceInheritance:!0}),math:new m({implicitNamespacePrefix:"math"}),li:new m({closedByChildren:["li"],closedByParent:!0}),dt:new m({closedByChildren:["dt","dd"]}),dd:new m({closedByChildren:["dt","dd"],closedByParent:!0}),rb:new m({closedByChildren:["rb","rt","rtc","rp"],closedByParent:!0}),rt:new m({closedByChildren:["rb","rt","rtc","rp"],closedByParent:!0}),rtc:new m({closedByChildren:["rb","rtc","rp"],closedByParent:!0}),rp:new m({closedByChildren:["rb","rt","rtc","rp"],closedByParent:!0}),optgroup:new m({closedByChildren:["optgroup"],closedByParent:!0}),option:new m({closedByChildren:["option","optgroup"],closedByParent:!0}),pre:new m({ignoreFirstLf:!0}),listing:new m({ignoreFirstLf:!0}),style:new m({contentType:I.RAW_TEXT}),script:new m({contentType:I.RAW_TEXT}),title:new m({contentType:{default:I.ESCAPABLE_RAW_TEXT,svg:I.PARSABLE_DATA}}),textarea:new m({contentType:I.ESCAPABLE_RAW_TEXT,ignoreFirstLf:!0})}),new qt$2().allKnownElementNames().forEach(e=>{!lt$1[e]&&Re$2(e)===null&&(lt$1[e]=new m({canSelfClose:!1}));})),lt$1[t]??ks$2}var ae$2=class ae{constructor(e,r){this.sourceSpan=e,this.i18n=r;}},Ht$1=class Ht extends ae$2{constructor(e,r,n,s){super(r,s),this.value=e,this.tokens=n,this.type="text";}visit(e,r){return e.visitText(this,r)}},Vt$1=class Vt extends ae$2{constructor(e,r,n,s){super(r,s),this.value=e,this.tokens=n,this.type="cdata";}visit(e,r){return e.visitCdata(this,r)}},Ut$2=class Ut extends ae$2{constructor(e,r,n,s,i,a){super(s,a),this.switchValue=e,this.type=r,this.cases=n,this.switchValueSourceSpan=i;}visit(e,r){return e.visitExpansion(this,r)}},Wt$2=class Wt{constructor(e,r,n,s,i){this.value=e,this.expression=r,this.sourceSpan=n,this.valueSourceSpan=s,this.expSourceSpan=i,this.type="expansionCase";}visit(e,r){return e.visitExpansionCase(this,r)}},zt$1=class zt extends ae$2{constructor(e,r,n,s,i,a,o){super(n,o),this.name=e,this.value=r,this.keySpan=s,this.valueSpan=i,this.valueTokens=a,this.type="attribute";}visit(e,r){return e.visitAttribute(this,r)}get nameSpan(){return this.keySpan}},G$1=class G extends ae$2{constructor(e,r,n,s,i,a=null,o=null,u){super(s,u),this.name=e,this.attrs=r,this.children=n,this.startSourceSpan=i,this.endSourceSpan=a,this.nameSpan=o,this.type="element";}visit(e,r){return e.visitElement(this,r)}},Gt$2=class Gt{constructor(e,r){this.value=e,this.sourceSpan=r,this.type="comment";}visit(e,r){return e.visitComment(this,r)}},Yt$2=class Yt{constructor(e,r){this.value=e,this.sourceSpan=r,this.type="docType";}visit(e,r){return e.visitDocType(this,r)}},ee$2=class ee extends ae$2{constructor(e,r,n,s,i,a,o=null,u){super(s,u),this.name=e,this.parameters=r,this.children=n,this.nameSpan=i,this.startSourceSpan=a,this.endSourceSpan=o,this.type="block";}visit(e,r){return e.visitBlock(this,r)}},ct$1=class ct{constructor(e,r){this.expression=e,this.sourceSpan=r,this.type="blockParameter",this.startSourceSpan=null,this.endSourceSpan=null;}visit(e,r){return e.visitBlockParameter(this,r)}},pt$2=class pt{constructor(e,r,n,s,i){this.name=e,this.value=r,this.sourceSpan=n,this.nameSpan=s,this.valueSpan=i,this.type="letDeclaration",this.startSourceSpan=null,this.endSourceSpan=null;}visit(e,r){return e.visitLetDeclaration(this,r)}};function jt$2(t,e,r=null){let n=[],s=t.visit?i=>t.visit(i,r)||i.visit(t,r):i=>i.visit(t,r);return e.forEach(i=>{let a=s(i);a&&n.push(a);}),n}var ht$1=class ht{constructor(){}visitElement(e,r){this.visitChildren(r,n=>{n(e.attrs),n(e.children);});}visitAttribute(e,r){}visitText(e,r){}visitCdata(e,r){}visitComment(e,r){}visitDocType(e,r){}visitExpansion(e,r){return this.visitChildren(r,n=>{n(e.cases);})}visitExpansionCase(e,r){}visitBlock(e,r){this.visitChildren(r,n=>{n(e.parameters),n(e.children);});}visitBlockParameter(e,r){}visitLetDeclaration(e,r){}visitChildren(e,r){let n=[],s=this;function i(a){a&&n.push(jt$2(s,a,e));}return r(i),Array.prototype.concat.apply([],n)}};var Me$1={AElig:"\xC6",AMP:"&",amp:"&",Aacute:"\xC1",Abreve:"\u0102",Acirc:"\xC2",Acy:"\u0410",Afr:"\u{1D504}",Agrave:"\xC0",Alpha:"\u0391",Amacr:"\u0100",And:"\u2A53",Aogon:"\u0104",Aopf:"\u{1D538}",ApplyFunction:"\u2061",af:"\u2061",Aring:"\xC5",angst:"\xC5",Ascr:"\u{1D49C}",Assign:"\u2254",colone:"\u2254",coloneq:"\u2254",Atilde:"\xC3",Auml:"\xC4",Backslash:"\u2216",setminus:"\u2216",setmn:"\u2216",smallsetminus:"\u2216",ssetmn:"\u2216",Barv:"\u2AE7",Barwed:"\u2306",doublebarwedge:"\u2306",Bcy:"\u0411",Because:"\u2235",becaus:"\u2235",because:"\u2235",Bernoullis:"\u212C",Bscr:"\u212C",bernou:"\u212C",Beta:"\u0392",Bfr:"\u{1D505}",Bopf:"\u{1D539}",Breve:"\u02D8",breve:"\u02D8",Bumpeq:"\u224E",HumpDownHump:"\u224E",bump:"\u224E",CHcy:"\u0427",COPY:"\xA9",copy:"\xA9",Cacute:"\u0106",Cap:"\u22D2",CapitalDifferentialD:"\u2145",DD:"\u2145",Cayleys:"\u212D",Cfr:"\u212D",Ccaron:"\u010C",Ccedil:"\xC7",Ccirc:"\u0108",Cconint:"\u2230",Cdot:"\u010A",Cedilla:"\xB8",cedil:"\xB8",CenterDot:"\xB7",centerdot:"\xB7",middot:"\xB7",Chi:"\u03A7",CircleDot:"\u2299",odot:"\u2299",CircleMinus:"\u2296",ominus:"\u2296",CirclePlus:"\u2295",oplus:"\u2295",CircleTimes:"\u2297",otimes:"\u2297",ClockwiseContourIntegral:"\u2232",cwconint:"\u2232",CloseCurlyDoubleQuote:"\u201D",rdquo:"\u201D",rdquor:"\u201D",CloseCurlyQuote:"\u2019",rsquo:"\u2019",rsquor:"\u2019",Colon:"\u2237",Proportion:"\u2237",Colone:"\u2A74",Congruent:"\u2261",equiv:"\u2261",Conint:"\u222F",DoubleContourIntegral:"\u222F",ContourIntegral:"\u222E",conint:"\u222E",oint:"\u222E",Copf:"\u2102",complexes:"\u2102",Coproduct:"\u2210",coprod:"\u2210",CounterClockwiseContourIntegral:"\u2233",awconint:"\u2233",Cross:"\u2A2F",Cscr:"\u{1D49E}",Cup:"\u22D3",CupCap:"\u224D",asympeq:"\u224D",DDotrahd:"\u2911",DJcy:"\u0402",DScy:"\u0405",DZcy:"\u040F",Dagger:"\u2021",ddagger:"\u2021",Darr:"\u21A1",Dashv:"\u2AE4",DoubleLeftTee:"\u2AE4",Dcaron:"\u010E",Dcy:"\u0414",Del:"\u2207",nabla:"\u2207",Delta:"\u0394",Dfr:"\u{1D507}",DiacriticalAcute:"\xB4",acute:"\xB4",DiacriticalDot:"\u02D9",dot:"\u02D9",DiacriticalDoubleAcute:"\u02DD",dblac:"\u02DD",DiacriticalGrave:"`",grave:"`",DiacriticalTilde:"\u02DC",tilde:"\u02DC",Diamond:"\u22C4",diam:"\u22C4",diamond:"\u22C4",DifferentialD:"\u2146",dd:"\u2146",Dopf:"\u{1D53B}",Dot:"\xA8",DoubleDot:"\xA8",die:"\xA8",uml:"\xA8",DotDot:"\u20DC",DotEqual:"\u2250",doteq:"\u2250",esdot:"\u2250",DoubleDownArrow:"\u21D3",Downarrow:"\u21D3",dArr:"\u21D3",DoubleLeftArrow:"\u21D0",Leftarrow:"\u21D0",lArr:"\u21D0",DoubleLeftRightArrow:"\u21D4",Leftrightarrow:"\u21D4",hArr:"\u21D4",iff:"\u21D4",DoubleLongLeftArrow:"\u27F8",Longleftarrow:"\u27F8",xlArr:"\u27F8",DoubleLongLeftRightArrow:"\u27FA",Longleftrightarrow:"\u27FA",xhArr:"\u27FA",DoubleLongRightArrow:"\u27F9",Longrightarrow:"\u27F9",xrArr:"\u27F9",DoubleRightArrow:"\u21D2",Implies:"\u21D2",Rightarrow:"\u21D2",rArr:"\u21D2",DoubleRightTee:"\u22A8",vDash:"\u22A8",DoubleUpArrow:"\u21D1",Uparrow:"\u21D1",uArr:"\u21D1",DoubleUpDownArrow:"\u21D5",Updownarrow:"\u21D5",vArr:"\u21D5",DoubleVerticalBar:"\u2225",par:"\u2225",parallel:"\u2225",shortparallel:"\u2225",spar:"\u2225",DownArrow:"\u2193",ShortDownArrow:"\u2193",darr:"\u2193",downarrow:"\u2193",DownArrowBar:"\u2913",DownArrowUpArrow:"\u21F5",duarr:"\u21F5",DownBreve:"\u0311",DownLeftRightVector:"\u2950",DownLeftTeeVector:"\u295E",DownLeftVector:"\u21BD",leftharpoondown:"\u21BD",lhard:"\u21BD",DownLeftVectorBar:"\u2956",DownRightTeeVector:"\u295F",DownRightVector:"\u21C1",rhard:"\u21C1",rightharpoondown:"\u21C1",DownRightVectorBar:"\u2957",DownTee:"\u22A4",top:"\u22A4",DownTeeArrow:"\u21A7",mapstodown:"\u21A7",Dscr:"\u{1D49F}",Dstrok:"\u0110",ENG:"\u014A",ETH:"\xD0",Eacute:"\xC9",Ecaron:"\u011A",Ecirc:"\xCA",Ecy:"\u042D",Edot:"\u0116",Efr:"\u{1D508}",Egrave:"\xC8",Element:"\u2208",in:"\u2208",isin:"\u2208",isinv:"\u2208",Emacr:"\u0112",EmptySmallSquare:"\u25FB",EmptyVerySmallSquare:"\u25AB",Eogon:"\u0118",Eopf:"\u{1D53C}",Epsilon:"\u0395",Equal:"\u2A75",EqualTilde:"\u2242",eqsim:"\u2242",esim:"\u2242",Equilibrium:"\u21CC",rightleftharpoons:"\u21CC",rlhar:"\u21CC",Escr:"\u2130",expectation:"\u2130",Esim:"\u2A73",Eta:"\u0397",Euml:"\xCB",Exists:"\u2203",exist:"\u2203",ExponentialE:"\u2147",ee:"\u2147",exponentiale:"\u2147",Fcy:"\u0424",Ffr:"\u{1D509}",FilledSmallSquare:"\u25FC",FilledVerySmallSquare:"\u25AA",blacksquare:"\u25AA",squarf:"\u25AA",squf:"\u25AA",Fopf:"\u{1D53D}",ForAll:"\u2200",forall:"\u2200",Fouriertrf:"\u2131",Fscr:"\u2131",GJcy:"\u0403",GT:">",gt:">",Gamma:"\u0393",Gammad:"\u03DC",Gbreve:"\u011E",Gcedil:"\u0122",Gcirc:"\u011C",Gcy:"\u0413",Gdot:"\u0120",Gfr:"\u{1D50A}",Gg:"\u22D9",ggg:"\u22D9",Gopf:"\u{1D53E}",GreaterEqual:"\u2265",ge:"\u2265",geq:"\u2265",GreaterEqualLess:"\u22DB",gel:"\u22DB",gtreqless:"\u22DB",GreaterFullEqual:"\u2267",gE:"\u2267",geqq:"\u2267",GreaterGreater:"\u2AA2",GreaterLess:"\u2277",gl:"\u2277",gtrless:"\u2277",GreaterSlantEqual:"\u2A7E",geqslant:"\u2A7E",ges:"\u2A7E",GreaterTilde:"\u2273",gsim:"\u2273",gtrsim:"\u2273",Gscr:"\u{1D4A2}",Gt:"\u226B",NestedGreaterGreater:"\u226B",gg:"\u226B",HARDcy:"\u042A",Hacek:"\u02C7",caron:"\u02C7",Hat:"^",Hcirc:"\u0124",Hfr:"\u210C",Poincareplane:"\u210C",HilbertSpace:"\u210B",Hscr:"\u210B",hamilt:"\u210B",Hopf:"\u210D",quaternions:"\u210D",HorizontalLine:"\u2500",boxh:"\u2500",Hstrok:"\u0126",HumpEqual:"\u224F",bumpe:"\u224F",bumpeq:"\u224F",IEcy:"\u0415",IJlig:"\u0132",IOcy:"\u0401",Iacute:"\xCD",Icirc:"\xCE",Icy:"\u0418",Idot:"\u0130",Ifr:"\u2111",Im:"\u2111",image:"\u2111",imagpart:"\u2111",Igrave:"\xCC",Imacr:"\u012A",ImaginaryI:"\u2148",ii:"\u2148",Int:"\u222C",Integral:"\u222B",int:"\u222B",Intersection:"\u22C2",bigcap:"\u22C2",xcap:"\u22C2",InvisibleComma:"\u2063",ic:"\u2063",InvisibleTimes:"\u2062",it:"\u2062",Iogon:"\u012E",Iopf:"\u{1D540}",Iota:"\u0399",Iscr:"\u2110",imagline:"\u2110",Itilde:"\u0128",Iukcy:"\u0406",Iuml:"\xCF",Jcirc:"\u0134",Jcy:"\u0419",Jfr:"\u{1D50D}",Jopf:"\u{1D541}",Jscr:"\u{1D4A5}",Jsercy:"\u0408",Jukcy:"\u0404",KHcy:"\u0425",KJcy:"\u040C",Kappa:"\u039A",Kcedil:"\u0136",Kcy:"\u041A",Kfr:"\u{1D50E}",Kopf:"\u{1D542}",Kscr:"\u{1D4A6}",LJcy:"\u0409",LT:"<",lt:"<",Lacute:"\u0139",Lambda:"\u039B",Lang:"\u27EA",Laplacetrf:"\u2112",Lscr:"\u2112",lagran:"\u2112",Larr:"\u219E",twoheadleftarrow:"\u219E",Lcaron:"\u013D",Lcedil:"\u013B",Lcy:"\u041B",LeftAngleBracket:"\u27E8",lang:"\u27E8",langle:"\u27E8",LeftArrow:"\u2190",ShortLeftArrow:"\u2190",larr:"\u2190",leftarrow:"\u2190",slarr:"\u2190",LeftArrowBar:"\u21E4",larrb:"\u21E4",LeftArrowRightArrow:"\u21C6",leftrightarrows:"\u21C6",lrarr:"\u21C6",LeftCeiling:"\u2308",lceil:"\u2308",LeftDoubleBracket:"\u27E6",lobrk:"\u27E6",LeftDownTeeVector:"\u2961",LeftDownVector:"\u21C3",dharl:"\u21C3",downharpoonleft:"\u21C3",LeftDownVectorBar:"\u2959",LeftFloor:"\u230A",lfloor:"\u230A",LeftRightArrow:"\u2194",harr:"\u2194",leftrightarrow:"\u2194",LeftRightVector:"\u294E",LeftTee:"\u22A3",dashv:"\u22A3",LeftTeeArrow:"\u21A4",mapstoleft:"\u21A4",LeftTeeVector:"\u295A",LeftTriangle:"\u22B2",vartriangleleft:"\u22B2",vltri:"\u22B2",LeftTriangleBar:"\u29CF",LeftTriangleEqual:"\u22B4",ltrie:"\u22B4",trianglelefteq:"\u22B4",LeftUpDownVector:"\u2951",LeftUpTeeVector:"\u2960",LeftUpVector:"\u21BF",uharl:"\u21BF",upharpoonleft:"\u21BF",LeftUpVectorBar:"\u2958",LeftVector:"\u21BC",leftharpoonup:"\u21BC",lharu:"\u21BC",LeftVectorBar:"\u2952",LessEqualGreater:"\u22DA",leg:"\u22DA",lesseqgtr:"\u22DA",LessFullEqual:"\u2266",lE:"\u2266",leqq:"\u2266",LessGreater:"\u2276",lessgtr:"\u2276",lg:"\u2276",LessLess:"\u2AA1",LessSlantEqual:"\u2A7D",leqslant:"\u2A7D",les:"\u2A7D",LessTilde:"\u2272",lesssim:"\u2272",lsim:"\u2272",Lfr:"\u{1D50F}",Ll:"\u22D8",Lleftarrow:"\u21DA",lAarr:"\u21DA",Lmidot:"\u013F",LongLeftArrow:"\u27F5",longleftarrow:"\u27F5",xlarr:"\u27F5",LongLeftRightArrow:"\u27F7",longleftrightarrow:"\u27F7",xharr:"\u27F7",LongRightArrow:"\u27F6",longrightarrow:"\u27F6",xrarr:"\u27F6",Lopf:"\u{1D543}",LowerLeftArrow:"\u2199",swarr:"\u2199",swarrow:"\u2199",LowerRightArrow:"\u2198",searr:"\u2198",searrow:"\u2198",Lsh:"\u21B0",lsh:"\u21B0",Lstrok:"\u0141",Lt:"\u226A",NestedLessLess:"\u226A",ll:"\u226A",Map:"\u2905",Mcy:"\u041C",MediumSpace:"\u205F",Mellintrf:"\u2133",Mscr:"\u2133",phmmat:"\u2133",Mfr:"\u{1D510}",MinusPlus:"\u2213",mnplus:"\u2213",mp:"\u2213",Mopf:"\u{1D544}",Mu:"\u039C",NJcy:"\u040A",Nacute:"\u0143",Ncaron:"\u0147",Ncedil:"\u0145",Ncy:"\u041D",NegativeMediumSpace:"\u200B",NegativeThickSpace:"\u200B",NegativeThinSpace:"\u200B",NegativeVeryThinSpace:"\u200B",ZeroWidthSpace:"\u200B",NewLine:`
`,Nfr:"\u{1D511}",NoBreak:"\u2060",NonBreakingSpace:"\xA0",nbsp:"\xA0",Nopf:"\u2115",naturals:"\u2115",Not:"\u2AEC",NotCongruent:"\u2262",nequiv:"\u2262",NotCupCap:"\u226D",NotDoubleVerticalBar:"\u2226",npar:"\u2226",nparallel:"\u2226",nshortparallel:"\u2226",nspar:"\u2226",NotElement:"\u2209",notin:"\u2209",notinva:"\u2209",NotEqual:"\u2260",ne:"\u2260",NotEqualTilde:"\u2242\u0338",nesim:"\u2242\u0338",NotExists:"\u2204",nexist:"\u2204",nexists:"\u2204",NotGreater:"\u226F",ngt:"\u226F",ngtr:"\u226F",NotGreaterEqual:"\u2271",nge:"\u2271",ngeq:"\u2271",NotGreaterFullEqual:"\u2267\u0338",ngE:"\u2267\u0338",ngeqq:"\u2267\u0338",NotGreaterGreater:"\u226B\u0338",nGtv:"\u226B\u0338",NotGreaterLess:"\u2279",ntgl:"\u2279",NotGreaterSlantEqual:"\u2A7E\u0338",ngeqslant:"\u2A7E\u0338",nges:"\u2A7E\u0338",NotGreaterTilde:"\u2275",ngsim:"\u2275",NotHumpDownHump:"\u224E\u0338",nbump:"\u224E\u0338",NotHumpEqual:"\u224F\u0338",nbumpe:"\u224F\u0338",NotLeftTriangle:"\u22EA",nltri:"\u22EA",ntriangleleft:"\u22EA",NotLeftTriangleBar:"\u29CF\u0338",NotLeftTriangleEqual:"\u22EC",nltrie:"\u22EC",ntrianglelefteq:"\u22EC",NotLess:"\u226E",nless:"\u226E",nlt:"\u226E",NotLessEqual:"\u2270",nle:"\u2270",nleq:"\u2270",NotLessGreater:"\u2278",ntlg:"\u2278",NotLessLess:"\u226A\u0338",nLtv:"\u226A\u0338",NotLessSlantEqual:"\u2A7D\u0338",nleqslant:"\u2A7D\u0338",nles:"\u2A7D\u0338",NotLessTilde:"\u2274",nlsim:"\u2274",NotNestedGreaterGreater:"\u2AA2\u0338",NotNestedLessLess:"\u2AA1\u0338",NotPrecedes:"\u2280",npr:"\u2280",nprec:"\u2280",NotPrecedesEqual:"\u2AAF\u0338",npre:"\u2AAF\u0338",npreceq:"\u2AAF\u0338",NotPrecedesSlantEqual:"\u22E0",nprcue:"\u22E0",NotReverseElement:"\u220C",notni:"\u220C",notniva:"\u220C",NotRightTriangle:"\u22EB",nrtri:"\u22EB",ntriangleright:"\u22EB",NotRightTriangleBar:"\u29D0\u0338",NotRightTriangleEqual:"\u22ED",nrtrie:"\u22ED",ntrianglerighteq:"\u22ED",NotSquareSubset:"\u228F\u0338",NotSquareSubsetEqual:"\u22E2",nsqsube:"\u22E2",NotSquareSuperset:"\u2290\u0338",NotSquareSupersetEqual:"\u22E3",nsqsupe:"\u22E3",NotSubset:"\u2282\u20D2",nsubset:"\u2282\u20D2",vnsub:"\u2282\u20D2",NotSubsetEqual:"\u2288",nsube:"\u2288",nsubseteq:"\u2288",NotSucceeds:"\u2281",nsc:"\u2281",nsucc:"\u2281",NotSucceedsEqual:"\u2AB0\u0338",nsce:"\u2AB0\u0338",nsucceq:"\u2AB0\u0338",NotSucceedsSlantEqual:"\u22E1",nsccue:"\u22E1",NotSucceedsTilde:"\u227F\u0338",NotSuperset:"\u2283\u20D2",nsupset:"\u2283\u20D2",vnsup:"\u2283\u20D2",NotSupersetEqual:"\u2289",nsupe:"\u2289",nsupseteq:"\u2289",NotTilde:"\u2241",nsim:"\u2241",NotTildeEqual:"\u2244",nsime:"\u2244",nsimeq:"\u2244",NotTildeFullEqual:"\u2247",ncong:"\u2247",NotTildeTilde:"\u2249",nap:"\u2249",napprox:"\u2249",NotVerticalBar:"\u2224",nmid:"\u2224",nshortmid:"\u2224",nsmid:"\u2224",Nscr:"\u{1D4A9}",Ntilde:"\xD1",Nu:"\u039D",OElig:"\u0152",Oacute:"\xD3",Ocirc:"\xD4",Ocy:"\u041E",Odblac:"\u0150",Ofr:"\u{1D512}",Ograve:"\xD2",Omacr:"\u014C",Omega:"\u03A9",ohm:"\u03A9",Omicron:"\u039F",Oopf:"\u{1D546}",OpenCurlyDoubleQuote:"\u201C",ldquo:"\u201C",OpenCurlyQuote:"\u2018",lsquo:"\u2018",Or:"\u2A54",Oscr:"\u{1D4AA}",Oslash:"\xD8",Otilde:"\xD5",Otimes:"\u2A37",Ouml:"\xD6",OverBar:"\u203E",oline:"\u203E",OverBrace:"\u23DE",OverBracket:"\u23B4",tbrk:"\u23B4",OverParenthesis:"\u23DC",PartialD:"\u2202",part:"\u2202",Pcy:"\u041F",Pfr:"\u{1D513}",Phi:"\u03A6",Pi:"\u03A0",PlusMinus:"\xB1",plusmn:"\xB1",pm:"\xB1",Popf:"\u2119",primes:"\u2119",Pr:"\u2ABB",Precedes:"\u227A",pr:"\u227A",prec:"\u227A",PrecedesEqual:"\u2AAF",pre:"\u2AAF",preceq:"\u2AAF",PrecedesSlantEqual:"\u227C",prcue:"\u227C",preccurlyeq:"\u227C",PrecedesTilde:"\u227E",precsim:"\u227E",prsim:"\u227E",Prime:"\u2033",Product:"\u220F",prod:"\u220F",Proportional:"\u221D",prop:"\u221D",propto:"\u221D",varpropto:"\u221D",vprop:"\u221D",Pscr:"\u{1D4AB}",Psi:"\u03A8",QUOT:'"',quot:'"',Qfr:"\u{1D514}",Qopf:"\u211A",rationals:"\u211A",Qscr:"\u{1D4AC}",RBarr:"\u2910",drbkarow:"\u2910",REG:"\xAE",circledR:"\xAE",reg:"\xAE",Racute:"\u0154",Rang:"\u27EB",Rarr:"\u21A0",twoheadrightarrow:"\u21A0",Rarrtl:"\u2916",Rcaron:"\u0158",Rcedil:"\u0156",Rcy:"\u0420",Re:"\u211C",Rfr:"\u211C",real:"\u211C",realpart:"\u211C",ReverseElement:"\u220B",SuchThat:"\u220B",ni:"\u220B",niv:"\u220B",ReverseEquilibrium:"\u21CB",leftrightharpoons:"\u21CB",lrhar:"\u21CB",ReverseUpEquilibrium:"\u296F",duhar:"\u296F",Rho:"\u03A1",RightAngleBracket:"\u27E9",rang:"\u27E9",rangle:"\u27E9",RightArrow:"\u2192",ShortRightArrow:"\u2192",rarr:"\u2192",rightarrow:"\u2192",srarr:"\u2192",RightArrowBar:"\u21E5",rarrb:"\u21E5",RightArrowLeftArrow:"\u21C4",rightleftarrows:"\u21C4",rlarr:"\u21C4",RightCeiling:"\u2309",rceil:"\u2309",RightDoubleBracket:"\u27E7",robrk:"\u27E7",RightDownTeeVector:"\u295D",RightDownVector:"\u21C2",dharr:"\u21C2",downharpoonright:"\u21C2",RightDownVectorBar:"\u2955",RightFloor:"\u230B",rfloor:"\u230B",RightTee:"\u22A2",vdash:"\u22A2",RightTeeArrow:"\u21A6",map:"\u21A6",mapsto:"\u21A6",RightTeeVector:"\u295B",RightTriangle:"\u22B3",vartriangleright:"\u22B3",vrtri:"\u22B3",RightTriangleBar:"\u29D0",RightTriangleEqual:"\u22B5",rtrie:"\u22B5",trianglerighteq:"\u22B5",RightUpDownVector:"\u294F",RightUpTeeVector:"\u295C",RightUpVector:"\u21BE",uharr:"\u21BE",upharpoonright:"\u21BE",RightUpVectorBar:"\u2954",RightVector:"\u21C0",rharu:"\u21C0",rightharpoonup:"\u21C0",RightVectorBar:"\u2953",Ropf:"\u211D",reals:"\u211D",RoundImplies:"\u2970",Rrightarrow:"\u21DB",rAarr:"\u21DB",Rscr:"\u211B",realine:"\u211B",Rsh:"\u21B1",rsh:"\u21B1",RuleDelayed:"\u29F4",SHCHcy:"\u0429",SHcy:"\u0428",SOFTcy:"\u042C",Sacute:"\u015A",Sc:"\u2ABC",Scaron:"\u0160",Scedil:"\u015E",Scirc:"\u015C",Scy:"\u0421",Sfr:"\u{1D516}",ShortUpArrow:"\u2191",UpArrow:"\u2191",uarr:"\u2191",uparrow:"\u2191",Sigma:"\u03A3",SmallCircle:"\u2218",compfn:"\u2218",Sopf:"\u{1D54A}",Sqrt:"\u221A",radic:"\u221A",Square:"\u25A1",squ:"\u25A1",square:"\u25A1",SquareIntersection:"\u2293",sqcap:"\u2293",SquareSubset:"\u228F",sqsub:"\u228F",sqsubset:"\u228F",SquareSubsetEqual:"\u2291",sqsube:"\u2291",sqsubseteq:"\u2291",SquareSuperset:"\u2290",sqsup:"\u2290",sqsupset:"\u2290",SquareSupersetEqual:"\u2292",sqsupe:"\u2292",sqsupseteq:"\u2292",SquareUnion:"\u2294",sqcup:"\u2294",Sscr:"\u{1D4AE}",Star:"\u22C6",sstarf:"\u22C6",Sub:"\u22D0",Subset:"\u22D0",SubsetEqual:"\u2286",sube:"\u2286",subseteq:"\u2286",Succeeds:"\u227B",sc:"\u227B",succ:"\u227B",SucceedsEqual:"\u2AB0",sce:"\u2AB0",succeq:"\u2AB0",SucceedsSlantEqual:"\u227D",sccue:"\u227D",succcurlyeq:"\u227D",SucceedsTilde:"\u227F",scsim:"\u227F",succsim:"\u227F",Sum:"\u2211",sum:"\u2211",Sup:"\u22D1",Supset:"\u22D1",Superset:"\u2283",sup:"\u2283",supset:"\u2283",SupersetEqual:"\u2287",supe:"\u2287",supseteq:"\u2287",THORN:"\xDE",TRADE:"\u2122",trade:"\u2122",TSHcy:"\u040B",TScy:"\u0426",Tab:"	",Tau:"\u03A4",Tcaron:"\u0164",Tcedil:"\u0162",Tcy:"\u0422",Tfr:"\u{1D517}",Therefore:"\u2234",there4:"\u2234",therefore:"\u2234",Theta:"\u0398",ThickSpace:"\u205F\u200A",ThinSpace:"\u2009",thinsp:"\u2009",Tilde:"\u223C",sim:"\u223C",thicksim:"\u223C",thksim:"\u223C",TildeEqual:"\u2243",sime:"\u2243",simeq:"\u2243",TildeFullEqual:"\u2245",cong:"\u2245",TildeTilde:"\u2248",ap:"\u2248",approx:"\u2248",asymp:"\u2248",thickapprox:"\u2248",thkap:"\u2248",Topf:"\u{1D54B}",TripleDot:"\u20DB",tdot:"\u20DB",Tscr:"\u{1D4AF}",Tstrok:"\u0166",Uacute:"\xDA",Uarr:"\u219F",Uarrocir:"\u2949",Ubrcy:"\u040E",Ubreve:"\u016C",Ucirc:"\xDB",Ucy:"\u0423",Udblac:"\u0170",Ufr:"\u{1D518}",Ugrave:"\xD9",Umacr:"\u016A",UnderBar:"_",lowbar:"_",UnderBrace:"\u23DF",UnderBracket:"\u23B5",bbrk:"\u23B5",UnderParenthesis:"\u23DD",Union:"\u22C3",bigcup:"\u22C3",xcup:"\u22C3",UnionPlus:"\u228E",uplus:"\u228E",Uogon:"\u0172",Uopf:"\u{1D54C}",UpArrowBar:"\u2912",UpArrowDownArrow:"\u21C5",udarr:"\u21C5",UpDownArrow:"\u2195",updownarrow:"\u2195",varr:"\u2195",UpEquilibrium:"\u296E",udhar:"\u296E",UpTee:"\u22A5",bot:"\u22A5",bottom:"\u22A5",perp:"\u22A5",UpTeeArrow:"\u21A5",mapstoup:"\u21A5",UpperLeftArrow:"\u2196",nwarr:"\u2196",nwarrow:"\u2196",UpperRightArrow:"\u2197",nearr:"\u2197",nearrow:"\u2197",Upsi:"\u03D2",upsih:"\u03D2",Upsilon:"\u03A5",Uring:"\u016E",Uscr:"\u{1D4B0}",Utilde:"\u0168",Uuml:"\xDC",VDash:"\u22AB",Vbar:"\u2AEB",Vcy:"\u0412",Vdash:"\u22A9",Vdashl:"\u2AE6",Vee:"\u22C1",bigvee:"\u22C1",xvee:"\u22C1",Verbar:"\u2016",Vert:"\u2016",VerticalBar:"\u2223",mid:"\u2223",shortmid:"\u2223",smid:"\u2223",VerticalLine:"|",verbar:"|",vert:"|",VerticalSeparator:"\u2758",VerticalTilde:"\u2240",wr:"\u2240",wreath:"\u2240",VeryThinSpace:"\u200A",hairsp:"\u200A",Vfr:"\u{1D519}",Vopf:"\u{1D54D}",Vscr:"\u{1D4B1}",Vvdash:"\u22AA",Wcirc:"\u0174",Wedge:"\u22C0",bigwedge:"\u22C0",xwedge:"\u22C0",Wfr:"\u{1D51A}",Wopf:"\u{1D54E}",Wscr:"\u{1D4B2}",Xfr:"\u{1D51B}",Xi:"\u039E",Xopf:"\u{1D54F}",Xscr:"\u{1D4B3}",YAcy:"\u042F",YIcy:"\u0407",YUcy:"\u042E",Yacute:"\xDD",Ycirc:"\u0176",Ycy:"\u042B",Yfr:"\u{1D51C}",Yopf:"\u{1D550}",Yscr:"\u{1D4B4}",Yuml:"\u0178",ZHcy:"\u0416",Zacute:"\u0179",Zcaron:"\u017D",Zcy:"\u0417",Zdot:"\u017B",Zeta:"\u0396",Zfr:"\u2128",zeetrf:"\u2128",Zopf:"\u2124",integers:"\u2124",Zscr:"\u{1D4B5}",aacute:"\xE1",abreve:"\u0103",ac:"\u223E",mstpos:"\u223E",acE:"\u223E\u0333",acd:"\u223F",acirc:"\xE2",acy:"\u0430",aelig:"\xE6",afr:"\u{1D51E}",agrave:"\xE0",alefsym:"\u2135",aleph:"\u2135",alpha:"\u03B1",amacr:"\u0101",amalg:"\u2A3F",and:"\u2227",wedge:"\u2227",andand:"\u2A55",andd:"\u2A5C",andslope:"\u2A58",andv:"\u2A5A",ang:"\u2220",angle:"\u2220",ange:"\u29A4",angmsd:"\u2221",measuredangle:"\u2221",angmsdaa:"\u29A8",angmsdab:"\u29A9",angmsdac:"\u29AA",angmsdad:"\u29AB",angmsdae:"\u29AC",angmsdaf:"\u29AD",angmsdag:"\u29AE",angmsdah:"\u29AF",angrt:"\u221F",angrtvb:"\u22BE",angrtvbd:"\u299D",angsph:"\u2222",angzarr:"\u237C",aogon:"\u0105",aopf:"\u{1D552}",apE:"\u2A70",apacir:"\u2A6F",ape:"\u224A",approxeq:"\u224A",apid:"\u224B",apos:"'",aring:"\xE5",ascr:"\u{1D4B6}",ast:"*",midast:"*",atilde:"\xE3",auml:"\xE4",awint:"\u2A11",bNot:"\u2AED",backcong:"\u224C",bcong:"\u224C",backepsilon:"\u03F6",bepsi:"\u03F6",backprime:"\u2035",bprime:"\u2035",backsim:"\u223D",bsim:"\u223D",backsimeq:"\u22CD",bsime:"\u22CD",barvee:"\u22BD",barwed:"\u2305",barwedge:"\u2305",bbrktbrk:"\u23B6",bcy:"\u0431",bdquo:"\u201E",ldquor:"\u201E",bemptyv:"\u29B0",beta:"\u03B2",beth:"\u2136",between:"\u226C",twixt:"\u226C",bfr:"\u{1D51F}",bigcirc:"\u25EF",xcirc:"\u25EF",bigodot:"\u2A00",xodot:"\u2A00",bigoplus:"\u2A01",xoplus:"\u2A01",bigotimes:"\u2A02",xotime:"\u2A02",bigsqcup:"\u2A06",xsqcup:"\u2A06",bigstar:"\u2605",starf:"\u2605",bigtriangledown:"\u25BD",xdtri:"\u25BD",bigtriangleup:"\u25B3",xutri:"\u25B3",biguplus:"\u2A04",xuplus:"\u2A04",bkarow:"\u290D",rbarr:"\u290D",blacklozenge:"\u29EB",lozf:"\u29EB",blacktriangle:"\u25B4",utrif:"\u25B4",blacktriangledown:"\u25BE",dtrif:"\u25BE",blacktriangleleft:"\u25C2",ltrif:"\u25C2",blacktriangleright:"\u25B8",rtrif:"\u25B8",blank:"\u2423",blk12:"\u2592",blk14:"\u2591",blk34:"\u2593",block:"\u2588",bne:"=\u20E5",bnequiv:"\u2261\u20E5",bnot:"\u2310",bopf:"\u{1D553}",bowtie:"\u22C8",boxDL:"\u2557",boxDR:"\u2554",boxDl:"\u2556",boxDr:"\u2553",boxH:"\u2550",boxHD:"\u2566",boxHU:"\u2569",boxHd:"\u2564",boxHu:"\u2567",boxUL:"\u255D",boxUR:"\u255A",boxUl:"\u255C",boxUr:"\u2559",boxV:"\u2551",boxVH:"\u256C",boxVL:"\u2563",boxVR:"\u2560",boxVh:"\u256B",boxVl:"\u2562",boxVr:"\u255F",boxbox:"\u29C9",boxdL:"\u2555",boxdR:"\u2552",boxdl:"\u2510",boxdr:"\u250C",boxhD:"\u2565",boxhU:"\u2568",boxhd:"\u252C",boxhu:"\u2534",boxminus:"\u229F",minusb:"\u229F",boxplus:"\u229E",plusb:"\u229E",boxtimes:"\u22A0",timesb:"\u22A0",boxuL:"\u255B",boxuR:"\u2558",boxul:"\u2518",boxur:"\u2514",boxv:"\u2502",boxvH:"\u256A",boxvL:"\u2561",boxvR:"\u255E",boxvh:"\u253C",boxvl:"\u2524",boxvr:"\u251C",brvbar:"\xA6",bscr:"\u{1D4B7}",bsemi:"\u204F",bsol:"\\",bsolb:"\u29C5",bsolhsub:"\u27C8",bull:"\u2022",bullet:"\u2022",bumpE:"\u2AAE",cacute:"\u0107",cap:"\u2229",capand:"\u2A44",capbrcup:"\u2A49",capcap:"\u2A4B",capcup:"\u2A47",capdot:"\u2A40",caps:"\u2229\uFE00",caret:"\u2041",ccaps:"\u2A4D",ccaron:"\u010D",ccedil:"\xE7",ccirc:"\u0109",ccups:"\u2A4C",ccupssm:"\u2A50",cdot:"\u010B",cemptyv:"\u29B2",cent:"\xA2",cfr:"\u{1D520}",chcy:"\u0447",check:"\u2713",checkmark:"\u2713",chi:"\u03C7",cir:"\u25CB",cirE:"\u29C3",circ:"\u02C6",circeq:"\u2257",cire:"\u2257",circlearrowleft:"\u21BA",olarr:"\u21BA",circlearrowright:"\u21BB",orarr:"\u21BB",circledS:"\u24C8",oS:"\u24C8",circledast:"\u229B",oast:"\u229B",circledcirc:"\u229A",ocir:"\u229A",circleddash:"\u229D",odash:"\u229D",cirfnint:"\u2A10",cirmid:"\u2AEF",cirscir:"\u29C2",clubs:"\u2663",clubsuit:"\u2663",colon:":",comma:",",commat:"@",comp:"\u2201",complement:"\u2201",congdot:"\u2A6D",copf:"\u{1D554}",copysr:"\u2117",crarr:"\u21B5",cross:"\u2717",cscr:"\u{1D4B8}",csub:"\u2ACF",csube:"\u2AD1",csup:"\u2AD0",csupe:"\u2AD2",ctdot:"\u22EF",cudarrl:"\u2938",cudarrr:"\u2935",cuepr:"\u22DE",curlyeqprec:"\u22DE",cuesc:"\u22DF",curlyeqsucc:"\u22DF",cularr:"\u21B6",curvearrowleft:"\u21B6",cularrp:"\u293D",cup:"\u222A",cupbrcap:"\u2A48",cupcap:"\u2A46",cupcup:"\u2A4A",cupdot:"\u228D",cupor:"\u2A45",cups:"\u222A\uFE00",curarr:"\u21B7",curvearrowright:"\u21B7",curarrm:"\u293C",curlyvee:"\u22CE",cuvee:"\u22CE",curlywedge:"\u22CF",cuwed:"\u22CF",curren:"\xA4",cwint:"\u2231",cylcty:"\u232D",dHar:"\u2965",dagger:"\u2020",daleth:"\u2138",dash:"\u2010",hyphen:"\u2010",dbkarow:"\u290F",rBarr:"\u290F",dcaron:"\u010F",dcy:"\u0434",ddarr:"\u21CA",downdownarrows:"\u21CA",ddotseq:"\u2A77",eDDot:"\u2A77",deg:"\xB0",delta:"\u03B4",demptyv:"\u29B1",dfisht:"\u297F",dfr:"\u{1D521}",diamondsuit:"\u2666",diams:"\u2666",digamma:"\u03DD",gammad:"\u03DD",disin:"\u22F2",div:"\xF7",divide:"\xF7",divideontimes:"\u22C7",divonx:"\u22C7",djcy:"\u0452",dlcorn:"\u231E",llcorner:"\u231E",dlcrop:"\u230D",dollar:"$",dopf:"\u{1D555}",doteqdot:"\u2251",eDot:"\u2251",dotminus:"\u2238",minusd:"\u2238",dotplus:"\u2214",plusdo:"\u2214",dotsquare:"\u22A1",sdotb:"\u22A1",drcorn:"\u231F",lrcorner:"\u231F",drcrop:"\u230C",dscr:"\u{1D4B9}",dscy:"\u0455",dsol:"\u29F6",dstrok:"\u0111",dtdot:"\u22F1",dtri:"\u25BF",triangledown:"\u25BF",dwangle:"\u29A6",dzcy:"\u045F",dzigrarr:"\u27FF",eacute:"\xE9",easter:"\u2A6E",ecaron:"\u011B",ecir:"\u2256",eqcirc:"\u2256",ecirc:"\xEA",ecolon:"\u2255",eqcolon:"\u2255",ecy:"\u044D",edot:"\u0117",efDot:"\u2252",fallingdotseq:"\u2252",efr:"\u{1D522}",eg:"\u2A9A",egrave:"\xE8",egs:"\u2A96",eqslantgtr:"\u2A96",egsdot:"\u2A98",el:"\u2A99",elinters:"\u23E7",ell:"\u2113",els:"\u2A95",eqslantless:"\u2A95",elsdot:"\u2A97",emacr:"\u0113",empty:"\u2205",emptyset:"\u2205",emptyv:"\u2205",varnothing:"\u2205",emsp13:"\u2004",emsp14:"\u2005",emsp:"\u2003",eng:"\u014B",ensp:"\u2002",eogon:"\u0119",eopf:"\u{1D556}",epar:"\u22D5",eparsl:"\u29E3",eplus:"\u2A71",epsi:"\u03B5",epsilon:"\u03B5",epsiv:"\u03F5",straightepsilon:"\u03F5",varepsilon:"\u03F5",equals:"=",equest:"\u225F",questeq:"\u225F",equivDD:"\u2A78",eqvparsl:"\u29E5",erDot:"\u2253",risingdotseq:"\u2253",erarr:"\u2971",escr:"\u212F",eta:"\u03B7",eth:"\xF0",euml:"\xEB",euro:"\u20AC",excl:"!",fcy:"\u0444",female:"\u2640",ffilig:"\uFB03",fflig:"\uFB00",ffllig:"\uFB04",ffr:"\u{1D523}",filig:"\uFB01",fjlig:"fj",flat:"\u266D",fllig:"\uFB02",fltns:"\u25B1",fnof:"\u0192",fopf:"\u{1D557}",fork:"\u22D4",pitchfork:"\u22D4",forkv:"\u2AD9",fpartint:"\u2A0D",frac12:"\xBD",half:"\xBD",frac13:"\u2153",frac14:"\xBC",frac15:"\u2155",frac16:"\u2159",frac18:"\u215B",frac23:"\u2154",frac25:"\u2156",frac34:"\xBE",frac35:"\u2157",frac38:"\u215C",frac45:"\u2158",frac56:"\u215A",frac58:"\u215D",frac78:"\u215E",frasl:"\u2044",frown:"\u2322",sfrown:"\u2322",fscr:"\u{1D4BB}",gEl:"\u2A8C",gtreqqless:"\u2A8C",gacute:"\u01F5",gamma:"\u03B3",gap:"\u2A86",gtrapprox:"\u2A86",gbreve:"\u011F",gcirc:"\u011D",gcy:"\u0433",gdot:"\u0121",gescc:"\u2AA9",gesdot:"\u2A80",gesdoto:"\u2A82",gesdotol:"\u2A84",gesl:"\u22DB\uFE00",gesles:"\u2A94",gfr:"\u{1D524}",gimel:"\u2137",gjcy:"\u0453",glE:"\u2A92",gla:"\u2AA5",glj:"\u2AA4",gnE:"\u2269",gneqq:"\u2269",gnap:"\u2A8A",gnapprox:"\u2A8A",gne:"\u2A88",gneq:"\u2A88",gnsim:"\u22E7",gopf:"\u{1D558}",gscr:"\u210A",gsime:"\u2A8E",gsiml:"\u2A90",gtcc:"\u2AA7",gtcir:"\u2A7A",gtdot:"\u22D7",gtrdot:"\u22D7",gtlPar:"\u2995",gtquest:"\u2A7C",gtrarr:"\u2978",gvertneqq:"\u2269\uFE00",gvnE:"\u2269\uFE00",hardcy:"\u044A",harrcir:"\u2948",harrw:"\u21AD",leftrightsquigarrow:"\u21AD",hbar:"\u210F",hslash:"\u210F",planck:"\u210F",plankv:"\u210F",hcirc:"\u0125",hearts:"\u2665",heartsuit:"\u2665",hellip:"\u2026",mldr:"\u2026",hercon:"\u22B9",hfr:"\u{1D525}",hksearow:"\u2925",searhk:"\u2925",hkswarow:"\u2926",swarhk:"\u2926",hoarr:"\u21FF",homtht:"\u223B",hookleftarrow:"\u21A9",larrhk:"\u21A9",hookrightarrow:"\u21AA",rarrhk:"\u21AA",hopf:"\u{1D559}",horbar:"\u2015",hscr:"\u{1D4BD}",hstrok:"\u0127",hybull:"\u2043",iacute:"\xED",icirc:"\xEE",icy:"\u0438",iecy:"\u0435",iexcl:"\xA1",ifr:"\u{1D526}",igrave:"\xEC",iiiint:"\u2A0C",qint:"\u2A0C",iiint:"\u222D",tint:"\u222D",iinfin:"\u29DC",iiota:"\u2129",ijlig:"\u0133",imacr:"\u012B",imath:"\u0131",inodot:"\u0131",imof:"\u22B7",imped:"\u01B5",incare:"\u2105",infin:"\u221E",infintie:"\u29DD",intcal:"\u22BA",intercal:"\u22BA",intlarhk:"\u2A17",intprod:"\u2A3C",iprod:"\u2A3C",iocy:"\u0451",iogon:"\u012F",iopf:"\u{1D55A}",iota:"\u03B9",iquest:"\xBF",iscr:"\u{1D4BE}",isinE:"\u22F9",isindot:"\u22F5",isins:"\u22F4",isinsv:"\u22F3",itilde:"\u0129",iukcy:"\u0456",iuml:"\xEF",jcirc:"\u0135",jcy:"\u0439",jfr:"\u{1D527}",jmath:"\u0237",jopf:"\u{1D55B}",jscr:"\u{1D4BF}",jsercy:"\u0458",jukcy:"\u0454",kappa:"\u03BA",kappav:"\u03F0",varkappa:"\u03F0",kcedil:"\u0137",kcy:"\u043A",kfr:"\u{1D528}",kgreen:"\u0138",khcy:"\u0445",kjcy:"\u045C",kopf:"\u{1D55C}",kscr:"\u{1D4C0}",lAtail:"\u291B",lBarr:"\u290E",lEg:"\u2A8B",lesseqqgtr:"\u2A8B",lHar:"\u2962",lacute:"\u013A",laemptyv:"\u29B4",lambda:"\u03BB",langd:"\u2991",lap:"\u2A85",lessapprox:"\u2A85",laquo:"\xAB",larrbfs:"\u291F",larrfs:"\u291D",larrlp:"\u21AB",looparrowleft:"\u21AB",larrpl:"\u2939",larrsim:"\u2973",larrtl:"\u21A2",leftarrowtail:"\u21A2",lat:"\u2AAB",latail:"\u2919",late:"\u2AAD",lates:"\u2AAD\uFE00",lbarr:"\u290C",lbbrk:"\u2772",lbrace:"{",lcub:"{",lbrack:"[",lsqb:"[",lbrke:"\u298B",lbrksld:"\u298F",lbrkslu:"\u298D",lcaron:"\u013E",lcedil:"\u013C",lcy:"\u043B",ldca:"\u2936",ldrdhar:"\u2967",ldrushar:"\u294B",ldsh:"\u21B2",le:"\u2264",leq:"\u2264",leftleftarrows:"\u21C7",llarr:"\u21C7",leftthreetimes:"\u22CB",lthree:"\u22CB",lescc:"\u2AA8",lesdot:"\u2A7F",lesdoto:"\u2A81",lesdotor:"\u2A83",lesg:"\u22DA\uFE00",lesges:"\u2A93",lessdot:"\u22D6",ltdot:"\u22D6",lfisht:"\u297C",lfr:"\u{1D529}",lgE:"\u2A91",lharul:"\u296A",lhblk:"\u2584",ljcy:"\u0459",llhard:"\u296B",lltri:"\u25FA",lmidot:"\u0140",lmoust:"\u23B0",lmoustache:"\u23B0",lnE:"\u2268",lneqq:"\u2268",lnap:"\u2A89",lnapprox:"\u2A89",lne:"\u2A87",lneq:"\u2A87",lnsim:"\u22E6",loang:"\u27EC",loarr:"\u21FD",longmapsto:"\u27FC",xmap:"\u27FC",looparrowright:"\u21AC",rarrlp:"\u21AC",lopar:"\u2985",lopf:"\u{1D55D}",loplus:"\u2A2D",lotimes:"\u2A34",lowast:"\u2217",loz:"\u25CA",lozenge:"\u25CA",lpar:"(",lparlt:"\u2993",lrhard:"\u296D",lrm:"\u200E",lrtri:"\u22BF",lsaquo:"\u2039",lscr:"\u{1D4C1}",lsime:"\u2A8D",lsimg:"\u2A8F",lsquor:"\u201A",sbquo:"\u201A",lstrok:"\u0142",ltcc:"\u2AA6",ltcir:"\u2A79",ltimes:"\u22C9",ltlarr:"\u2976",ltquest:"\u2A7B",ltrPar:"\u2996",ltri:"\u25C3",triangleleft:"\u25C3",lurdshar:"\u294A",luruhar:"\u2966",lvertneqq:"\u2268\uFE00",lvnE:"\u2268\uFE00",mDDot:"\u223A",macr:"\xAF",strns:"\xAF",male:"\u2642",malt:"\u2720",maltese:"\u2720",marker:"\u25AE",mcomma:"\u2A29",mcy:"\u043C",mdash:"\u2014",mfr:"\u{1D52A}",mho:"\u2127",micro:"\xB5",midcir:"\u2AF0",minus:"\u2212",minusdu:"\u2A2A",mlcp:"\u2ADB",models:"\u22A7",mopf:"\u{1D55E}",mscr:"\u{1D4C2}",mu:"\u03BC",multimap:"\u22B8",mumap:"\u22B8",nGg:"\u22D9\u0338",nGt:"\u226B\u20D2",nLeftarrow:"\u21CD",nlArr:"\u21CD",nLeftrightarrow:"\u21CE",nhArr:"\u21CE",nLl:"\u22D8\u0338",nLt:"\u226A\u20D2",nRightarrow:"\u21CF",nrArr:"\u21CF",nVDash:"\u22AF",nVdash:"\u22AE",nacute:"\u0144",nang:"\u2220\u20D2",napE:"\u2A70\u0338",napid:"\u224B\u0338",napos:"\u0149",natur:"\u266E",natural:"\u266E",ncap:"\u2A43",ncaron:"\u0148",ncedil:"\u0146",ncongdot:"\u2A6D\u0338",ncup:"\u2A42",ncy:"\u043D",ndash:"\u2013",neArr:"\u21D7",nearhk:"\u2924",nedot:"\u2250\u0338",nesear:"\u2928",toea:"\u2928",nfr:"\u{1D52B}",nharr:"\u21AE",nleftrightarrow:"\u21AE",nhpar:"\u2AF2",nis:"\u22FC",nisd:"\u22FA",njcy:"\u045A",nlE:"\u2266\u0338",nleqq:"\u2266\u0338",nlarr:"\u219A",nleftarrow:"\u219A",nldr:"\u2025",nopf:"\u{1D55F}",not:"\xAC",notinE:"\u22F9\u0338",notindot:"\u22F5\u0338",notinvb:"\u22F7",notinvc:"\u22F6",notnivb:"\u22FE",notnivc:"\u22FD",nparsl:"\u2AFD\u20E5",npart:"\u2202\u0338",npolint:"\u2A14",nrarr:"\u219B",nrightarrow:"\u219B",nrarrc:"\u2933\u0338",nrarrw:"\u219D\u0338",nscr:"\u{1D4C3}",nsub:"\u2284",nsubE:"\u2AC5\u0338",nsubseteqq:"\u2AC5\u0338",nsup:"\u2285",nsupE:"\u2AC6\u0338",nsupseteqq:"\u2AC6\u0338",ntilde:"\xF1",nu:"\u03BD",num:"#",numero:"\u2116",numsp:"\u2007",nvDash:"\u22AD",nvHarr:"\u2904",nvap:"\u224D\u20D2",nvdash:"\u22AC",nvge:"\u2265\u20D2",nvgt:">\u20D2",nvinfin:"\u29DE",nvlArr:"\u2902",nvle:"\u2264\u20D2",nvlt:"<\u20D2",nvltrie:"\u22B4\u20D2",nvrArr:"\u2903",nvrtrie:"\u22B5\u20D2",nvsim:"\u223C\u20D2",nwArr:"\u21D6",nwarhk:"\u2923",nwnear:"\u2927",oacute:"\xF3",ocirc:"\xF4",ocy:"\u043E",odblac:"\u0151",odiv:"\u2A38",odsold:"\u29BC",oelig:"\u0153",ofcir:"\u29BF",ofr:"\u{1D52C}",ogon:"\u02DB",ograve:"\xF2",ogt:"\u29C1",ohbar:"\u29B5",olcir:"\u29BE",olcross:"\u29BB",olt:"\u29C0",omacr:"\u014D",omega:"\u03C9",omicron:"\u03BF",omid:"\u29B6",oopf:"\u{1D560}",opar:"\u29B7",operp:"\u29B9",or:"\u2228",vee:"\u2228",ord:"\u2A5D",order:"\u2134",orderof:"\u2134",oscr:"\u2134",ordf:"\xAA",ordm:"\xBA",origof:"\u22B6",oror:"\u2A56",orslope:"\u2A57",orv:"\u2A5B",oslash:"\xF8",osol:"\u2298",otilde:"\xF5",otimesas:"\u2A36",ouml:"\xF6",ovbar:"\u233D",para:"\xB6",parsim:"\u2AF3",parsl:"\u2AFD",pcy:"\u043F",percnt:"%",period:".",permil:"\u2030",pertenk:"\u2031",pfr:"\u{1D52D}",phi:"\u03C6",phiv:"\u03D5",straightphi:"\u03D5",varphi:"\u03D5",phone:"\u260E",pi:"\u03C0",piv:"\u03D6",varpi:"\u03D6",planckh:"\u210E",plus:"+",plusacir:"\u2A23",pluscir:"\u2A22",plusdu:"\u2A25",pluse:"\u2A72",plussim:"\u2A26",plustwo:"\u2A27",pointint:"\u2A15",popf:"\u{1D561}",pound:"\xA3",prE:"\u2AB3",prap:"\u2AB7",precapprox:"\u2AB7",precnapprox:"\u2AB9",prnap:"\u2AB9",precneqq:"\u2AB5",prnE:"\u2AB5",precnsim:"\u22E8",prnsim:"\u22E8",prime:"\u2032",profalar:"\u232E",profline:"\u2312",profsurf:"\u2313",prurel:"\u22B0",pscr:"\u{1D4C5}",psi:"\u03C8",puncsp:"\u2008",qfr:"\u{1D52E}",qopf:"\u{1D562}",qprime:"\u2057",qscr:"\u{1D4C6}",quatint:"\u2A16",quest:"?",rAtail:"\u291C",rHar:"\u2964",race:"\u223D\u0331",racute:"\u0155",raemptyv:"\u29B3",rangd:"\u2992",range:"\u29A5",raquo:"\xBB",rarrap:"\u2975",rarrbfs:"\u2920",rarrc:"\u2933",rarrfs:"\u291E",rarrpl:"\u2945",rarrsim:"\u2974",rarrtl:"\u21A3",rightarrowtail:"\u21A3",rarrw:"\u219D",rightsquigarrow:"\u219D",ratail:"\u291A",ratio:"\u2236",rbbrk:"\u2773",rbrace:"}",rcub:"}",rbrack:"]",rsqb:"]",rbrke:"\u298C",rbrksld:"\u298E",rbrkslu:"\u2990",rcaron:"\u0159",rcedil:"\u0157",rcy:"\u0440",rdca:"\u2937",rdldhar:"\u2969",rdsh:"\u21B3",rect:"\u25AD",rfisht:"\u297D",rfr:"\u{1D52F}",rharul:"\u296C",rho:"\u03C1",rhov:"\u03F1",varrho:"\u03F1",rightrightarrows:"\u21C9",rrarr:"\u21C9",rightthreetimes:"\u22CC",rthree:"\u22CC",ring:"\u02DA",rlm:"\u200F",rmoust:"\u23B1",rmoustache:"\u23B1",rnmid:"\u2AEE",roang:"\u27ED",roarr:"\u21FE",ropar:"\u2986",ropf:"\u{1D563}",roplus:"\u2A2E",rotimes:"\u2A35",rpar:")",rpargt:"\u2994",rppolint:"\u2A12",rsaquo:"\u203A",rscr:"\u{1D4C7}",rtimes:"\u22CA",rtri:"\u25B9",triangleright:"\u25B9",rtriltri:"\u29CE",ruluhar:"\u2968",rx:"\u211E",sacute:"\u015B",scE:"\u2AB4",scap:"\u2AB8",succapprox:"\u2AB8",scaron:"\u0161",scedil:"\u015F",scirc:"\u015D",scnE:"\u2AB6",succneqq:"\u2AB6",scnap:"\u2ABA",succnapprox:"\u2ABA",scnsim:"\u22E9",succnsim:"\u22E9",scpolint:"\u2A13",scy:"\u0441",sdot:"\u22C5",sdote:"\u2A66",seArr:"\u21D8",sect:"\xA7",semi:";",seswar:"\u2929",tosa:"\u2929",sext:"\u2736",sfr:"\u{1D530}",sharp:"\u266F",shchcy:"\u0449",shcy:"\u0448",shy:"\xAD",sigma:"\u03C3",sigmaf:"\u03C2",sigmav:"\u03C2",varsigma:"\u03C2",simdot:"\u2A6A",simg:"\u2A9E",simgE:"\u2AA0",siml:"\u2A9D",simlE:"\u2A9F",simne:"\u2246",simplus:"\u2A24",simrarr:"\u2972",smashp:"\u2A33",smeparsl:"\u29E4",smile:"\u2323",ssmile:"\u2323",smt:"\u2AAA",smte:"\u2AAC",smtes:"\u2AAC\uFE00",softcy:"\u044C",sol:"/",solb:"\u29C4",solbar:"\u233F",sopf:"\u{1D564}",spades:"\u2660",spadesuit:"\u2660",sqcaps:"\u2293\uFE00",sqcups:"\u2294\uFE00",sscr:"\u{1D4C8}",star:"\u2606",sub:"\u2282",subset:"\u2282",subE:"\u2AC5",subseteqq:"\u2AC5",subdot:"\u2ABD",subedot:"\u2AC3",submult:"\u2AC1",subnE:"\u2ACB",subsetneqq:"\u2ACB",subne:"\u228A",subsetneq:"\u228A",subplus:"\u2ABF",subrarr:"\u2979",subsim:"\u2AC7",subsub:"\u2AD5",subsup:"\u2AD3",sung:"\u266A",sup1:"\xB9",sup2:"\xB2",sup3:"\xB3",supE:"\u2AC6",supseteqq:"\u2AC6",supdot:"\u2ABE",supdsub:"\u2AD8",supedot:"\u2AC4",suphsol:"\u27C9",suphsub:"\u2AD7",suplarr:"\u297B",supmult:"\u2AC2",supnE:"\u2ACC",supsetneqq:"\u2ACC",supne:"\u228B",supsetneq:"\u228B",supplus:"\u2AC0",supsim:"\u2AC8",supsub:"\u2AD4",supsup:"\u2AD6",swArr:"\u21D9",swnwar:"\u292A",szlig:"\xDF",target:"\u2316",tau:"\u03C4",tcaron:"\u0165",tcedil:"\u0163",tcy:"\u0442",telrec:"\u2315",tfr:"\u{1D531}",theta:"\u03B8",thetasym:"\u03D1",thetav:"\u03D1",vartheta:"\u03D1",thorn:"\xFE",times:"\xD7",timesbar:"\u2A31",timesd:"\u2A30",topbot:"\u2336",topcir:"\u2AF1",topf:"\u{1D565}",topfork:"\u2ADA",tprime:"\u2034",triangle:"\u25B5",utri:"\u25B5",triangleq:"\u225C",trie:"\u225C",tridot:"\u25EC",triminus:"\u2A3A",triplus:"\u2A39",trisb:"\u29CD",tritime:"\u2A3B",trpezium:"\u23E2",tscr:"\u{1D4C9}",tscy:"\u0446",tshcy:"\u045B",tstrok:"\u0167",uHar:"\u2963",uacute:"\xFA",ubrcy:"\u045E",ubreve:"\u016D",ucirc:"\xFB",ucy:"\u0443",udblac:"\u0171",ufisht:"\u297E",ufr:"\u{1D532}",ugrave:"\xF9",uhblk:"\u2580",ulcorn:"\u231C",ulcorner:"\u231C",ulcrop:"\u230F",ultri:"\u25F8",umacr:"\u016B",uogon:"\u0173",uopf:"\u{1D566}",upsi:"\u03C5",upsilon:"\u03C5",upuparrows:"\u21C8",uuarr:"\u21C8",urcorn:"\u231D",urcorner:"\u231D",urcrop:"\u230E",uring:"\u016F",urtri:"\u25F9",uscr:"\u{1D4CA}",utdot:"\u22F0",utilde:"\u0169",uuml:"\xFC",uwangle:"\u29A7",vBar:"\u2AE8",vBarv:"\u2AE9",vangrt:"\u299C",varsubsetneq:"\u228A\uFE00",vsubne:"\u228A\uFE00",varsubsetneqq:"\u2ACB\uFE00",vsubnE:"\u2ACB\uFE00",varsupsetneq:"\u228B\uFE00",vsupne:"\u228B\uFE00",varsupsetneqq:"\u2ACC\uFE00",vsupnE:"\u2ACC\uFE00",vcy:"\u0432",veebar:"\u22BB",veeeq:"\u225A",vellip:"\u22EE",vfr:"\u{1D533}",vopf:"\u{1D567}",vscr:"\u{1D4CB}",vzigzag:"\u299A",wcirc:"\u0175",wedbar:"\u2A5F",wedgeq:"\u2259",weierp:"\u2118",wp:"\u2118",wfr:"\u{1D534}",wopf:"\u{1D568}",wscr:"\u{1D4CC}",xfr:"\u{1D535}",xi:"\u03BE",xnis:"\u22FB",xopf:"\u{1D569}",xscr:"\u{1D4CD}",yacute:"\xFD",yacy:"\u044F",ycirc:"\u0177",ycy:"\u044B",yen:"\xA5",yfr:"\u{1D536}",yicy:"\u0457",yopf:"\u{1D56A}",yscr:"\u{1D4CE}",yucy:"\u044E",yuml:"\xFF",zacute:"\u017A",zcaron:"\u017E",zcy:"\u0437",zdot:"\u017C",zeta:"\u03B6",zfr:"\u{1D537}",zhcy:"\u0436",zigrarr:"\u21DD",zopf:"\u{1D56B}",zscr:"\u{1D4CF}",zwj:"\u200D",zwnj:"\u200C"},Ua$1="\uE500";Me$1.ngsp=Ua$1;var Wa=[/@/,/^\s*$/,/[<>]/,/^[{}]$/,/&(#|[a-z])/i,/^\/\//];function Bs$2(t,e){if(e!=null&&!(Array.isArray(e)&&e.length==2))throw new Error(`Expected '${t}' to be an array, [start, end].`);if(e!=null){let r=e[0],n=e[1];Wa.forEach(s=>{if(s.test(r)||s.test(n))throw new Error(`['${r}', '${n}'] contains unusable interpolation symbol.`)});}}var Lr$1=class t{static fromArray(e){return e?(Bs$2("interpolation",e),new t(e[0],e[1])):Fr$1}constructor(e,r){this.start=e,this.end=r;}},Fr$1=new Lr$1("{{","}}");var ft$1=class ft extends Ie$1{constructor(e,r,n){super(n,e),this.tokenType=r;}},Or$1=class Or{constructor(e,r,n){this.tokens=e,this.errors=r,this.nonNormalizedIcuExpressions=n;}};function Us$1(t,e,r,n={}){let s=new $r$2(new Ee$2(t,e),r,n);return s.tokenize(),new Or$1(Co$1(s.tokens),s.errors,s.nonNormalizedIcuExpressions)}var lo$1=/\r\n?/g;function qe$1(t){return `Unexpected character "${t===0?"EOF":String.fromCharCode(t)}"`}function Is$1(t){return `Unknown entity "${t}" - use the "&#<decimal>;" or  "&#x<hex>;" syntax`}function co$2(t,e){return `Unable to parse entity "${e}" - ${t} character reference entities must end with ";"`}var Zt$2;(function(t){t.HEX="hexadecimal",t.DEC="decimal";})(Zt$2||(Zt$2={}));var dt$1=class dt{constructor(e){this.error=e;}},$r$2=class $r{constructor(e,r,n){this._getTagContentType=r,this._currentTokenStart=null,this._currentTokenType=null,this._expansionCaseStack=[],this._inInterpolation=!1,this._fullNameStack=[],this.tokens=[],this.errors=[],this.nonNormalizedIcuExpressions=[],this._tokenizeIcu=n.tokenizeExpansionForms||!1,this._interpolationConfig=n.interpolationConfig||Fr$1,this._leadingTriviaCodePoints=n.leadingTriviaChars&&n.leadingTriviaChars.map(i=>i.codePointAt(0)||0),this._canSelfClose=n.canSelfClose||!1,this._allowHtmComponentClosingTags=n.allowHtmComponentClosingTags||!1;let s=n.range||{endPos:e.content.length,startPos:0,startLine:0,startCol:0};this._cursor=n.escapedString?new Mr$1(e,s):new er$2(e,s),this._preserveLineEndings=n.preserveLineEndings||!1,this._i18nNormalizeLineEndingsInICUs=n.i18nNormalizeLineEndingsInICUs||!1,this._tokenizeBlocks=n.tokenizeBlocks??!0,this._tokenizeLet=n.tokenizeLet??!0;try{this._cursor.init();}catch(i){this.handleError(i);}}_processCarriageReturns(e){return this._preserveLineEndings?e:e.replace(lo$1,`
`)}tokenize(){for(;this._cursor.peek()!==0;){let e=this._cursor.clone();try{if(this._attemptCharCode(60))if(this._attemptCharCode(33))this._attemptStr("[CDATA[")?this._consumeCdata(e):this._attemptStr("--")?this._consumeComment(e):this._attemptStrCaseInsensitive("doctype")?this._consumeDocType(e):this._consumeBogusComment(e);else if(this._attemptCharCode(47))this._consumeTagClose(e);else {let r=this._cursor.clone();this._attemptCharCode(63)?(this._cursor=r,this._consumeBogusComment(e)):this._consumeTagOpen(e);}else this._tokenizeLet&&this._cursor.peek()===64&&!this._inInterpolation&&this._attemptStr("@let")?this._consumeLetDeclaration(e):this._tokenizeBlocks&&this._attemptCharCode(64)?this._consumeBlockStart(e):this._tokenizeBlocks&&!this._inInterpolation&&!this._isInExpansionCase()&&!this._isInExpansionForm()&&this._attemptCharCode(125)?this._consumeBlockEnd(e):this._tokenizeIcu&&this._tokenizeExpansionForm()||this._consumeWithInterpolation(5,8,()=>this._isTextEnd(),()=>this._isTagStart());}catch(r){this.handleError(r);}}this._beginToken(34),this._endToken([]);}_getBlockName(){let e=!1,r=this._cursor.clone();return this._attemptCharCodeUntilFn(n=>at$1(n)?!e:$s$1(n)?(e=!0,!1):!0),this._cursor.getChars(r).trim()}_consumeBlockStart(e){this._beginToken(25,e);let r=this._endToken([this._getBlockName()]);if(this._cursor.peek()===40)if(this._cursor.advance(),this._consumeBlockParameters(),this._attemptCharCodeUntilFn(b$1),this._attemptCharCode(41))this._attemptCharCodeUntilFn(b$1);else {r.type=29;return}this._attemptCharCode(123)?(this._beginToken(26),this._endToken([])):r.type=29;}_consumeBlockEnd(e){this._beginToken(27,e),this._endToken([]);}_consumeBlockParameters(){for(this._attemptCharCodeUntilFn(Ms);this._cursor.peek()!==41&&this._cursor.peek()!==0;){this._beginToken(28);let e=this._cursor.clone(),r=null,n=0;for(;this._cursor.peek()!==59&&this._cursor.peek()!==0||r!==null;){let s=this._cursor.peek();if(s===92)this._cursor.advance();else if(s===r)r=null;else if(r===null&&It$2(s))r=s;else if(s===40&&r===null)n++;else if(s===41&&r===null){if(n===0)break;n>0&&n--;}this._cursor.advance();}this._endToken([this._cursor.getChars(e)]),this._attemptCharCodeUntilFn(Ms);}}_consumeLetDeclaration(e){if(this._beginToken(30,e),at$1(this._cursor.peek()))this._attemptCharCodeUntilFn(b$1);else {let s=this._endToken([this._cursor.getChars(e)]);s.type=33;return}let r=this._endToken([this._getLetDeclarationName()]);if(this._attemptCharCodeUntilFn(b$1),!this._attemptCharCode(61)){r.type=33;return}this._attemptCharCodeUntilFn(s=>b$1(s)&&!Pt$2(s)),this._consumeLetDeclarationValue(),this._cursor.peek()===59?(this._beginToken(32),this._endToken([]),this._cursor.advance()):(r.type=33,r.sourceSpan=this._cursor.getSpan(e));}_getLetDeclarationName(){let e=this._cursor.clone(),r=!1;return this._attemptCharCodeUntilFn(n=>ot(n)||n===36||n===95||r&&Nt$2(n)?(r=!0,!1):!0),this._cursor.getChars(e).trim()}_consumeLetDeclarationValue(){let e=this._cursor.clone();for(this._beginToken(31,e);this._cursor.peek()!==0;){let r=this._cursor.peek();if(r===59)break;It$2(r)&&(this._cursor.advance(),this._attemptCharCodeUntilFn(n=>n===92?(this._cursor.advance(),!1):n===r)),this._cursor.advance();}this._endToken([this._cursor.getChars(e)]);}_tokenizeExpansionForm(){if(this.isExpansionFormStart())return this._consumeExpansionFormStart(),!0;if(fo$1(this._cursor.peek())&&this._isInExpansionForm())return this._consumeExpansionCaseStart(),!0;if(this._cursor.peek()===125){if(this._isInExpansionCase())return this._consumeExpansionCaseEnd(),!0;if(this._isInExpansionForm())return this._consumeExpansionFormEnd(),!0}return !1}_beginToken(e,r=this._cursor.clone()){this._currentTokenStart=r,this._currentTokenType=e;}_endToken(e,r){if(this._currentTokenStart===null)throw new ft$1("Programming error - attempted to end a token when there was no start to the token",this._currentTokenType,this._cursor.getSpan(r));if(this._currentTokenType===null)throw new ft$1("Programming error - attempted to end a token which has no token type",null,this._cursor.getSpan(this._currentTokenStart));let n={type:this._currentTokenType,parts:e,sourceSpan:(r??this._cursor).getSpan(this._currentTokenStart,this._leadingTriviaCodePoints)};return this.tokens.push(n),this._currentTokenStart=null,this._currentTokenType=null,n}_createError(e,r){this._isInExpansionForm()&&(e+=` (Do you have an unescaped "{" in your template? Use "{{ '{' }}") to escape it.)`);let n=new ft$1(e,this._currentTokenType,r);return this._currentTokenStart=null,this._currentTokenType=null,new dt$1(n)}handleError(e){if(e instanceof gt$1&&(e=this._createError(e.msg,this._cursor.getSpan(e.cursor))),e instanceof dt$1)this.errors.push(e.error);else throw e}_attemptCharCode(e){return this._cursor.peek()===e?(this._cursor.advance(),!0):!1}_attemptCharCodeCaseInsensitive(e){return go$1(this._cursor.peek(),e)?(this._cursor.advance(),!0):!1}_requireCharCode(e){let r=this._cursor.clone();if(!this._attemptCharCode(e))throw this._createError(qe$1(this._cursor.peek()),this._cursor.getSpan(r))}_attemptStr(e){let r=e.length;if(this._cursor.charsLeft()<r)return !1;let n=this._cursor.clone();for(let s=0;s<r;s++)if(!this._attemptCharCode(e.charCodeAt(s)))return this._cursor=n,!1;return !0}_attemptStrCaseInsensitive(e){for(let r=0;r<e.length;r++)if(!this._attemptCharCodeCaseInsensitive(e.charCodeAt(r)))return !1;return !0}_requireStr(e){let r=this._cursor.clone();if(!this._attemptStr(e))throw this._createError(qe$1(this._cursor.peek()),this._cursor.getSpan(r))}_requireStrCaseInsensitive(e){let r=this._cursor.clone();if(!this._attemptStrCaseInsensitive(e))throw this._createError(qe$1(this._cursor.peek()),this._cursor.getSpan(r))}_attemptCharCodeUntilFn(e){for(;!e(this._cursor.peek());)this._cursor.advance();}_requireCharCodeUntilFn(e,r){let n=this._cursor.clone();if(this._attemptCharCodeUntilFn(e),this._cursor.diff(n)<r)throw this._createError(qe$1(this._cursor.peek()),this._cursor.getSpan(n))}_attemptUntilChar(e){for(;this._cursor.peek()!==e;)this._cursor.advance();}_readChar(){let e=String.fromCodePoint(this._cursor.peek());return this._cursor.advance(),e}_consumeEntity(e){this._beginToken(9);let r=this._cursor.clone();if(this._cursor.advance(),this._attemptCharCode(35)){let n=this._attemptCharCode(120)||this._attemptCharCode(88),s=this._cursor.clone();if(this._attemptCharCodeUntilFn(ho$1),this._cursor.peek()!=59){this._cursor.advance();let a=n?Zt$2.HEX:Zt$2.DEC;throw this._createError(co$2(a,this._cursor.getChars(r)),this._cursor.getSpan())}let i=this._cursor.getChars(s);this._cursor.advance();try{let a=parseInt(i,n?16:10);this._endToken([String.fromCharCode(a),this._cursor.getChars(r)]);}catch{throw this._createError(Is$1(this._cursor.getChars(r)),this._cursor.getSpan())}}else {let n=this._cursor.clone();if(this._attemptCharCodeUntilFn(mo$2),this._cursor.peek()!=59)this._beginToken(e,r),this._cursor=n,this._endToken(["&"]);else {let s=this._cursor.getChars(n);this._cursor.advance();let i=Me$1[s];if(!i)throw this._createError(Is$1(s),this._cursor.getSpan(r));this._endToken([i,`&${s};`]);}}}_consumeRawText(e,r){this._beginToken(e?6:7);let n=[];for(;;){let s=this._cursor.clone(),i=r();if(this._cursor=s,i)break;e&&this._cursor.peek()===38?(this._endToken([this._processCarriageReturns(n.join(""))]),n.length=0,this._consumeEntity(6),this._beginToken(6)):n.push(this._readChar());}this._endToken([this._processCarriageReturns(n.join(""))]);}_consumeComment(e){this._beginToken(10,e),this._endToken([]),this._consumeRawText(!1,()=>this._attemptStr("-->")),this._beginToken(11),this._requireStr("-->"),this._endToken([]);}_consumeBogusComment(e){this._beginToken(10,e),this._endToken([]),this._consumeRawText(!1,()=>this._cursor.peek()===62),this._beginToken(11),this._cursor.advance(),this._endToken([]);}_consumeCdata(e){this._beginToken(12,e),this._endToken([]),this._consumeRawText(!1,()=>this._attemptStr("]]>")),this._beginToken(13),this._requireStr("]]>"),this._endToken([]);}_consumeDocType(e){this._beginToken(18,e),this._endToken([]),this._consumeRawText(!1,()=>this._cursor.peek()===62),this._beginToken(19),this._cursor.advance(),this._endToken([]);}_consumePrefixAndName(){let e=this._cursor.clone(),r="";for(;this._cursor.peek()!==58&&!po$2(this._cursor.peek());)this._cursor.advance();let n;this._cursor.peek()===58?(r=this._cursor.getChars(e),this._cursor.advance(),n=this._cursor.clone()):n=e,this._requireCharCodeUntilFn(Rs,r===""?0:1);let s=this._cursor.getChars(n);return [r,s]}_consumeTagOpen(e){let r,n,s,i=[];try{if(!ot(this._cursor.peek()))throw this._createError(qe$1(this._cursor.peek()),this._cursor.getSpan(e));for(s=this._consumeTagOpenStart(e),n=s.parts[0],r=s.parts[1],this._attemptCharCodeUntilFn(b$1);this._cursor.peek()!==47&&this._cursor.peek()!==62&&this._cursor.peek()!==60&&this._cursor.peek()!==0;){let[o,u]=this._consumeAttributeName();if(this._attemptCharCodeUntilFn(b$1),this._attemptCharCode(61)){this._attemptCharCodeUntilFn(b$1);let p=this._consumeAttributeValue();i.push({prefix:o,name:u,value:p});}else i.push({prefix:o,name:u});this._attemptCharCodeUntilFn(b$1);}this._consumeTagOpenEnd();}catch(o){if(o instanceof dt$1){s?s.type=4:(this._beginToken(5,e),this._endToken(["<"]));return}throw o}if(this._canSelfClose&&this.tokens[this.tokens.length-1].type===2)return;let a=this._getTagContentType(r,n,this._fullNameStack.length>0,i);this._handleFullNameStackForTagOpen(n,r),a===I.RAW_TEXT?this._consumeRawTextWithTagClose(n,r,!1):a===I.ESCAPABLE_RAW_TEXT&&this._consumeRawTextWithTagClose(n,r,!0);}_consumeRawTextWithTagClose(e,r,n){this._consumeRawText(n,()=>!this._attemptCharCode(60)||!this._attemptCharCode(47)||(this._attemptCharCodeUntilFn(b$1),!this._attemptStrCaseInsensitive(e?`${e}:${r}`:r))?!1:(this._attemptCharCodeUntilFn(b$1),this._attemptCharCode(62))),this._beginToken(3),this._requireCharCodeUntilFn(s=>s===62,3),this._cursor.advance(),this._endToken([e,r]),this._handleFullNameStackForTagClose(e,r);}_consumeTagOpenStart(e){this._beginToken(0,e);let r=this._consumePrefixAndName();return this._endToken(r)}_consumeAttributeName(){let e=this._cursor.peek();if(e===39||e===34)throw this._createError(qe$1(e),this._cursor.getSpan());this._beginToken(14);let r=this._consumePrefixAndName();return this._endToken(r),r}_consumeAttributeValue(){let e;if(this._cursor.peek()===39||this._cursor.peek()===34){let r=this._cursor.peek();this._consumeQuote(r);let n=()=>this._cursor.peek()===r;e=this._consumeWithInterpolation(16,17,n,n),this._consumeQuote(r);}else {let r=()=>Rs(this._cursor.peek());e=this._consumeWithInterpolation(16,17,r,r);}return e}_consumeQuote(e){this._beginToken(15),this._requireCharCode(e),this._endToken([String.fromCodePoint(e)]);}_consumeTagOpenEnd(){let e=this._attemptCharCode(47)?2:1;this._beginToken(e),this._requireCharCode(62),this._endToken([]);}_consumeTagClose(e){if(this._beginToken(3,e),this._attemptCharCodeUntilFn(b$1),this._allowHtmComponentClosingTags&&this._attemptCharCode(47))this._attemptCharCodeUntilFn(b$1),this._requireCharCode(62),this._endToken([]);else {let[r,n]=this._consumePrefixAndName();this._attemptCharCodeUntilFn(b$1),this._requireCharCode(62),this._endToken([r,n]),this._handleFullNameStackForTagClose(r,n);}}_consumeExpansionFormStart(){this._beginToken(20),this._requireCharCode(123),this._endToken([]),this._expansionCaseStack.push(20),this._beginToken(7);let e=this._readUntil(44),r=this._processCarriageReturns(e);if(this._i18nNormalizeLineEndingsInICUs)this._endToken([r]);else {let s=this._endToken([e]);r!==e&&this.nonNormalizedIcuExpressions.push(s);}this._requireCharCode(44),this._attemptCharCodeUntilFn(b$1),this._beginToken(7);let n=this._readUntil(44);this._endToken([n]),this._requireCharCode(44),this._attemptCharCodeUntilFn(b$1);}_consumeExpansionCaseStart(){this._beginToken(21);let e=this._readUntil(123).trim();this._endToken([e]),this._attemptCharCodeUntilFn(b$1),this._beginToken(22),this._requireCharCode(123),this._endToken([]),this._attemptCharCodeUntilFn(b$1),this._expansionCaseStack.push(22);}_consumeExpansionCaseEnd(){this._beginToken(23),this._requireCharCode(125),this._endToken([]),this._attemptCharCodeUntilFn(b$1),this._expansionCaseStack.pop();}_consumeExpansionFormEnd(){this._beginToken(24),this._requireCharCode(125),this._endToken([]),this._expansionCaseStack.pop();}_consumeWithInterpolation(e,r,n,s){this._beginToken(e);let i=[];for(;!n();){let o=this._cursor.clone();this._interpolationConfig&&this._attemptStr(this._interpolationConfig.start)?(this._endToken([this._processCarriageReturns(i.join(""))],o),i.length=0,this._consumeInterpolation(r,o,s),this._beginToken(e)):this._cursor.peek()===38?(this._endToken([this._processCarriageReturns(i.join(""))]),i.length=0,this._consumeEntity(e),this._beginToken(e)):i.push(this._readChar());}this._inInterpolation=!1;let a=this._processCarriageReturns(i.join(""));return this._endToken([a]),a}_consumeInterpolation(e,r,n){let s=[];this._beginToken(e,r),s.push(this._interpolationConfig.start);let i=this._cursor.clone(),a=null,o=!1;for(;this._cursor.peek()!==0&&(n===null||!n());){let u=this._cursor.clone();if(this._isTagStart()){this._cursor=u,s.push(this._getProcessedChars(i,u)),this._endToken(s);return}if(a===null)if(this._attemptStr(this._interpolationConfig.end)){s.push(this._getProcessedChars(i,u)),s.push(this._interpolationConfig.end),this._endToken(s);return}else this._attemptStr("//")&&(o=!0);let p=this._cursor.peek();this._cursor.advance(),p===92?this._cursor.advance():p===a?a=null:!o&&a===null&&It$2(p)&&(a=p);}s.push(this._getProcessedChars(i,this._cursor)),this._endToken(s);}_getProcessedChars(e,r){return this._processCarriageReturns(r.getChars(e))}_isTextEnd(){return !!(this._isTagStart()||this._cursor.peek()===0||this._tokenizeIcu&&!this._inInterpolation&&(this.isExpansionFormStart()||this._cursor.peek()===125&&this._isInExpansionCase())||this._tokenizeBlocks&&!this._inInterpolation&&!this._isInExpansion()&&(this._isBlockStart()||this._cursor.peek()===64||this._cursor.peek()===125))}_isTagStart(){if(this._cursor.peek()===60){let e=this._cursor.clone();e.advance();let r=e.peek();if(97<=r&&r<=122||65<=r&&r<=90||r===47||r===33)return !0}return !1}_isBlockStart(){if(this._tokenizeBlocks&&this._cursor.peek()===64){let e=this._cursor.clone();if(e.advance(),$s$1(e.peek()))return !0}return !1}_readUntil(e){let r=this._cursor.clone();return this._attemptUntilChar(e),this._cursor.getChars(r)}_isInExpansion(){return this._isInExpansionCase()||this._isInExpansionForm()}_isInExpansionCase(){return this._expansionCaseStack.length>0&&this._expansionCaseStack[this._expansionCaseStack.length-1]===22}_isInExpansionForm(){return this._expansionCaseStack.length>0&&this._expansionCaseStack[this._expansionCaseStack.length-1]===20}isExpansionFormStart(){if(this._cursor.peek()!==123)return !1;if(this._interpolationConfig){let e=this._cursor.clone(),r=this._attemptStr(this._interpolationConfig.start);return this._cursor=e,!r}return !0}_handleFullNameStackForTagOpen(e,r){let n=Oe$2(e,r);(this._fullNameStack.length===0||this._fullNameStack[this._fullNameStack.length-1]===n)&&this._fullNameStack.push(n);}_handleFullNameStackForTagClose(e,r){let n=Oe$2(e,r);this._fullNameStack.length!==0&&this._fullNameStack[this._fullNameStack.length-1]===n&&this._fullNameStack.pop();}};function b$1(t){return !at$1(t)||t===0}function Rs(t){return at$1(t)||t===62||t===60||t===47||t===39||t===34||t===61||t===0}function po$2(t){return (t<97||122<t)&&(t<65||90<t)&&(t<48||t>57)}function ho$1(t){return t===59||t===0||!gs$1(t)}function mo$2(t){return t===59||t===0||!ot(t)}function fo$1(t){return t!==125}function go$1(t,e){return Os$2(t)===Os$2(e)}function Os$2(t){return t>=97&&t<=122?t-97+65:t}function $s$1(t){return ot(t)||Nt$2(t)||t===95}function Ms(t){return t!==59&&b$1(t)}function Co$1(t){let e=[],r;for(let n=0;n<t.length;n++){let s=t[n];r&&r.type===5&&s.type===5||r&&r.type===16&&s.type===16?(r.parts[0]+=s.parts[0],r.sourceSpan.end=s.sourceSpan.end):(r=s,e.push(r));}return e}var er$2=class t{constructor(e,r){if(e instanceof t){this.file=e.file,this.input=e.input,this.end=e.end;let n=e.state;this.state={peek:n.peek,offset:n.offset,line:n.line,column:n.column};}else {if(!r)throw new Error("Programming error: the range argument must be provided with a file argument.");this.file=e,this.input=e.content,this.end=r.endPos,this.state={peek:-1,offset:r.startPos,line:r.startLine,column:r.startCol};}}clone(){return new t(this)}peek(){return this.state.peek}charsLeft(){return this.end-this.state.offset}diff(e){return this.state.offset-e.state.offset}advance(){this.advanceState(this.state);}init(){this.updatePeek(this.state);}getSpan(e,r){e=e||this;let n=e;if(r)for(;this.diff(e)>0&&r.indexOf(e.peek())!==-1;)n===e&&(e=e.clone()),e.advance();let s=this.locationFromCursor(e),i=this.locationFromCursor(this),a=n!==e?this.locationFromCursor(n):s;return new h$1(s,i,a)}getChars(e){return this.input.substring(e.state.offset,this.state.offset)}charAt(e){return this.input.charCodeAt(e)}advanceState(e){if(e.offset>=this.end)throw this.state=e,new gt$1('Unexpected character "EOF"',this);let r=this.charAt(e.offset);r===10?(e.line++,e.column=0):Pt$2(r)||e.column++,e.offset++,this.updatePeek(e);}updatePeek(e){e.peek=e.offset>=this.end?0:this.charAt(e.offset);}locationFromCursor(e){return new ie$2(e.file,e.state.offset,e.state.line,e.state.column)}},Mr$1=class t extends er$2{constructor(e,r){e instanceof t?(super(e),this.internalState={...e.internalState}):(super(e,r),this.internalState=this.state);}advance(){this.state=this.internalState,super.advance(),this.processEscapeSequence();}init(){super.init(),this.processEscapeSequence();}clone(){return new t(this)}getChars(e){let r=e.clone(),n="";for(;r.internalState.offset<this.internalState.offset;)n+=String.fromCodePoint(r.peek()),r.advance();return n}processEscapeSequence(){let e=()=>this.internalState.peek;if(e()===92)if(this.internalState={...this.state},this.advanceState(this.internalState),e()===110)this.state.peek=10;else if(e()===114)this.state.peek=13;else if(e()===118)this.state.peek=11;else if(e()===116)this.state.peek=9;else if(e()===98)this.state.peek=8;else if(e()===102)this.state.peek=12;else if(e()===117)if(this.advanceState(this.internalState),e()===123){this.advanceState(this.internalState);let r=this.clone(),n=0;for(;e()!==125;)this.advanceState(this.internalState),n++;this.state.peek=this.decodeHexDigits(r,n);}else {let r=this.clone();this.advanceState(this.internalState),this.advanceState(this.internalState),this.advanceState(this.internalState),this.state.peek=this.decodeHexDigits(r,4);}else if(e()===120){this.advanceState(this.internalState);let r=this.clone();this.advanceState(this.internalState),this.state.peek=this.decodeHexDigits(r,2);}else if(yr$1(e())){let r="",n=0,s=this.clone();for(;yr$1(e())&&n<3;)s=this.clone(),r+=String.fromCodePoint(e()),this.advanceState(this.internalState),n++;this.state.peek=parseInt(r,8),this.internalState=s.internalState;}else Pt$2(this.internalState.peek)?(this.advanceState(this.internalState),this.state=this.internalState):this.state.peek=this.internalState.peek;}decodeHexDigits(e,r){let n=this.input.slice(e.internalState.offset,e.internalState.offset+r),s=parseInt(n,16);if(isNaN(s))throw e.state=e.internalState,new gt$1("Invalid hexadecimal escape sequence",e);return s}},gt$1=class gt{constructor(e,r){this.msg=e,this.cursor=r;}};var L$2=class t extends Ie$1{static create(e,r,n){return new t(e,r,n)}constructor(e,r,n){super(r,n),this.elementName=e;}},Vr$2=class Vr{constructor(e,r){this.rootNodes=e,this.errors=r;}},tr$2=class tr{constructor(e){this.getTagDefinition=e;}parse(e,r,n,s=!1,i){let a=D=>(R,...F)=>D(R.toLowerCase(),...F),o=s?this.getTagDefinition:a(this.getTagDefinition),u=D=>o(D).getContentType(),p=s?i:a(i),f=Us$1(e,r,i?(D,R,F,c)=>{let g=p(D,R,F,c);return g!==void 0?g:u(D)}:u,n),d=n&&n.canSelfClose||!1,C=n&&n.allowHtmComponentClosingTags||!1,A=new Ur$2(f.tokens,o,d,C,s);return A.build(),new Vr$2(A.rootNodes,f.errors.concat(A.errors))}},Ur$2=class t{constructor(e,r,n,s,i){this.tokens=e,this.getTagDefinition=r,this.canSelfClose=n,this.allowHtmComponentClosingTags=s,this.isTagNameCaseSensitive=i,this._index=-1,this._containerStack=[],this.rootNodes=[],this.errors=[],this._advance();}build(){for(;this._peek.type!==34;)this._peek.type===0||this._peek.type===4?this._consumeStartTag(this._advance()):this._peek.type===3?(this._closeVoidElement(),this._consumeEndTag(this._advance())):this._peek.type===12?(this._closeVoidElement(),this._consumeCdata(this._advance())):this._peek.type===10?(this._closeVoidElement(),this._consumeComment(this._advance())):this._peek.type===5||this._peek.type===7||this._peek.type===6?(this._closeVoidElement(),this._consumeText(this._advance())):this._peek.type===20?this._consumeExpansion(this._advance()):this._peek.type===25?(this._closeVoidElement(),this._consumeBlockOpen(this._advance())):this._peek.type===27?(this._closeVoidElement(),this._consumeBlockClose(this._advance())):this._peek.type===29?(this._closeVoidElement(),this._consumeIncompleteBlock(this._advance())):this._peek.type===30?(this._closeVoidElement(),this._consumeLet(this._advance())):this._peek.type===18?this._consumeDocType(this._advance()):this._peek.type===33?(this._closeVoidElement(),this._consumeIncompleteLet(this._advance())):this._advance();for(let e of this._containerStack)e instanceof ee$2&&this.errors.push(L$2.create(e.name,e.sourceSpan,`Unclosed block "${e.name}"`));}_advance(){let e=this._peek;return this._index<this.tokens.length-1&&this._index++,this._peek=this.tokens[this._index],e}_advanceIf(e){return this._peek.type===e?this._advance():null}_consumeCdata(e){let r=this._advance(),n=this._getText(r),s=this._advanceIf(13);this._addToParent(new Vt$1(n,new h$1(e.sourceSpan.start,(s||r).sourceSpan.end),[r]));}_consumeComment(e){let r=this._advanceIf(7),n=this._advanceIf(11),s=r!=null?r.parts[0].trim():null,i=n==null?e.sourceSpan:new h$1(e.sourceSpan.start,n.sourceSpan.end,e.sourceSpan.fullStart);this._addToParent(new Gt$2(s,i));}_consumeDocType(e){let r=this._advanceIf(7),n=this._advanceIf(19),s=r!=null?r.parts[0].trim():null,i=new h$1(e.sourceSpan.start,(n||r||e).sourceSpan.end);this._addToParent(new Yt$2(s,i));}_consumeExpansion(e){let r=this._advance(),n=this._advance(),s=[];for(;this._peek.type===21;){let a=this._parseExpansionCase();if(!a)return;s.push(a);}if(this._peek.type!==24){this.errors.push(L$2.create(null,this._peek.sourceSpan,"Invalid ICU message. Missing '}'."));return}let i=new h$1(e.sourceSpan.start,this._peek.sourceSpan.end,e.sourceSpan.fullStart);this._addToParent(new Ut$2(r.parts[0],n.parts[0],s,i,r.sourceSpan)),this._advance();}_parseExpansionCase(){let e=this._advance();if(this._peek.type!==22)return this.errors.push(L$2.create(null,this._peek.sourceSpan,"Invalid ICU message. Missing '{'.")),null;let r=this._advance(),n=this._collectExpansionExpTokens(r);if(!n)return null;let s=this._advance();n.push({type:34,parts:[],sourceSpan:s.sourceSpan});let i=new t(n,this.getTagDefinition,this.canSelfClose,this.allowHtmComponentClosingTags,this.isTagNameCaseSensitive);if(i.build(),i.errors.length>0)return this.errors=this.errors.concat(i.errors),null;let a=new h$1(e.sourceSpan.start,s.sourceSpan.end,e.sourceSpan.fullStart),o=new h$1(r.sourceSpan.start,s.sourceSpan.end,r.sourceSpan.fullStart);return new Wt$2(e.parts[0],i.rootNodes,a,e.sourceSpan,o)}_collectExpansionExpTokens(e){let r=[],n=[22];for(;;){if((this._peek.type===20||this._peek.type===22)&&n.push(this._peek.type),this._peek.type===23)if(Ws$1(n,22)){if(n.pop(),n.length===0)return r}else return this.errors.push(L$2.create(null,e.sourceSpan,"Invalid ICU message. Missing '}'.")),null;if(this._peek.type===24)if(Ws$1(n,20))n.pop();else return this.errors.push(L$2.create(null,e.sourceSpan,"Invalid ICU message. Missing '}'.")),null;if(this._peek.type===34)return this.errors.push(L$2.create(null,e.sourceSpan,"Invalid ICU message. Missing '}'.")),null;r.push(this._advance());}}_getText(e){let r=e.parts[0];if(r.length>0&&r[0]==`
`){let n=this._getClosestParentElement();n!=null&&n.children.length==0&&this.getTagDefinition(n.name).ignoreFirstLf&&(r=r.substring(1));}return r}_consumeText(e){let r=[e],n=e.sourceSpan,s=e.parts[0];if(s.length>0&&s[0]===`
`){let i=this._getContainer();i!=null&&i.children.length===0&&this.getTagDefinition(i.name).ignoreFirstLf&&(s=s.substring(1),r[0]={type:e.type,sourceSpan:e.sourceSpan,parts:[s]});}for(;this._peek.type===8||this._peek.type===5||this._peek.type===9;)e=this._advance(),r.push(e),e.type===8?s+=e.parts.join("").replace(/&([^;]+);/g,zs$1):e.type===9?s+=e.parts[0]:s+=e.parts.join("");if(s.length>0){let i=e.sourceSpan;this._addToParent(new Ht$1(s,new h$1(n.start,i.end,n.fullStart,n.details),r));}}_closeVoidElement(){let e=this._getContainer();e instanceof G$1&&this.getTagDefinition(e.name).isVoid&&this._containerStack.pop();}_consumeStartTag(e){let[r,n]=e.parts,s=[];for(;this._peek.type===14;)s.push(this._consumeAttr(this._advance()));let i=this._getElementFullName(r,n,this._getClosestParentElement()),a=!1;if(this._peek.type===2){this._advance(),a=!0;let C=this.getTagDefinition(i);this.canSelfClose||C.canSelfClose||Re$2(i)!==null||C.isVoid||this.errors.push(L$2.create(i,e.sourceSpan,`Only void, custom and foreign elements can be self closed "${e.parts[1]}"`));}else this._peek.type===1&&(this._advance(),a=!1);let o=this._peek.sourceSpan.fullStart,u=new h$1(e.sourceSpan.start,o,e.sourceSpan.fullStart),p=new h$1(e.sourceSpan.start,o,e.sourceSpan.fullStart),l=new h$1(e.sourceSpan.start.moveBy(1),e.sourceSpan.end),f=new G$1(i,s,[],u,p,void 0,l),d=this._getContainer();this._pushContainer(f,d instanceof G$1&&this.getTagDefinition(d.name).isClosedByChild(f.name)),a?this._popContainer(i,G$1,u):e.type===4&&(this._popContainer(i,G$1,null),this.errors.push(L$2.create(i,u,`Opening tag "${i}" not terminated.`)));}_pushContainer(e,r){r&&this._containerStack.pop(),this._addToParent(e),this._containerStack.push(e);}_consumeEndTag(e){let r=this.allowHtmComponentClosingTags&&e.parts.length===0?null:this._getElementFullName(e.parts[0],e.parts[1],this._getClosestParentElement());if(r&&this.getTagDefinition(r).isVoid)this.errors.push(L$2.create(r,e.sourceSpan,`Void elements do not have end tags "${e.parts[1]}"`));else if(!this._popContainer(r,G$1,e.sourceSpan)){let n=`Unexpected closing tag "${r}". It may happen when the tag has already been closed by another tag. For more info see https://www.w3.org/TR/html5/syntax.html#closing-elements-that-have-implied-end-tags`;this.errors.push(L$2.create(r,e.sourceSpan,n));}}_popContainer(e,r,n){let s=!1;for(let i=this._containerStack.length-1;i>=0;i--){let a=this._containerStack[i];if(Re$2(a.name)?a.name===e:(e==null||a.name.toLowerCase()===e.toLowerCase())&&a instanceof r)return a.endSourceSpan=n,a.sourceSpan.end=n!==null?n.end:a.sourceSpan.end,this._containerStack.splice(i,this._containerStack.length-i),!s;(a instanceof ee$2||a instanceof G$1&&!this.getTagDefinition(a.name).closedByParent)&&(s=!0);}return !1}_consumeAttr(e){let r=Oe$2(e.parts[0],e.parts[1]),n=e.sourceSpan.end,s;this._peek.type===15&&(s=this._advance());let i="",a=[],o,u;if(this._peek.type===16)for(o=this._peek.sourceSpan,u=this._peek.sourceSpan.end;this._peek.type===16||this._peek.type===17||this._peek.type===9;){let f=this._advance();a.push(f),f.type===17?i+=f.parts.join("").replace(/&([^;]+);/g,zs$1):f.type===9?i+=f.parts[0]:i+=f.parts.join(""),u=n=f.sourceSpan.end;}this._peek.type===15&&(u=n=this._advance().sourceSpan.end);let l=o&&u&&new h$1((s==null?void 0:s.sourceSpan.start)??o.start,u,(s==null?void 0:s.sourceSpan.fullStart)??o.fullStart);return new zt$1(r,i,new h$1(e.sourceSpan.start,n,e.sourceSpan.fullStart),e.sourceSpan,l,a.length>0?a:void 0,void 0)}_consumeBlockOpen(e){let r=[];for(;this._peek.type===28;){let o=this._advance();r.push(new ct$1(o.parts[0],o.sourceSpan));}this._peek.type===26&&this._advance();let n=this._peek.sourceSpan.fullStart,s=new h$1(e.sourceSpan.start,n,e.sourceSpan.fullStart),i=new h$1(e.sourceSpan.start,n,e.sourceSpan.fullStart),a=new ee$2(e.parts[0],r,[],s,e.sourceSpan,i);this._pushContainer(a,!1);}_consumeBlockClose(e){this._popContainer(null,ee$2,e.sourceSpan)||this.errors.push(L$2.create(null,e.sourceSpan,'Unexpected closing block. The block may have been closed earlier. If you meant to write the } character, you should use the "&#125;" HTML entity instead.'));}_consumeIncompleteBlock(e){let r=[];for(;this._peek.type===28;){let o=this._advance();r.push(new ct$1(o.parts[0],o.sourceSpan));}let n=this._peek.sourceSpan.fullStart,s=new h$1(e.sourceSpan.start,n,e.sourceSpan.fullStart),i=new h$1(e.sourceSpan.start,n,e.sourceSpan.fullStart),a=new ee$2(e.parts[0],r,[],s,e.sourceSpan,i);this._pushContainer(a,!1),this._popContainer(null,ee$2,null),this.errors.push(L$2.create(e.parts[0],s,`Incomplete block "${e.parts[0]}". If you meant to write the @ character, you should use the "&#64;" HTML entity instead.`));}_consumeLet(e){let r=e.parts[0],n,s;if(this._peek.type!==31){this.errors.push(L$2.create(e.parts[0],e.sourceSpan,`Invalid @let declaration "${r}". Declaration must have a value.`));return}else n=this._advance();if(this._peek.type!==32){this.errors.push(L$2.create(e.parts[0],e.sourceSpan,`Unterminated @let declaration "${r}". Declaration must be terminated with a semicolon.`));return}else s=this._advance();let i=s.sourceSpan.fullStart,a=new h$1(e.sourceSpan.start,i,e.sourceSpan.fullStart),o=e.sourceSpan.toString().lastIndexOf(r),u=e.sourceSpan.start.moveBy(o),p=new h$1(u,e.sourceSpan.end),l=new pt$2(r,n.parts[0],a,p,n.sourceSpan);this._addToParent(l);}_consumeIncompleteLet(e){let r=e.parts[0]??"",n=r?` "${r}"`:"";if(r.length>0){let s=e.sourceSpan.toString().lastIndexOf(r),i=e.sourceSpan.start.moveBy(s),a=new h$1(i,e.sourceSpan.end),o=new h$1(e.sourceSpan.start,e.sourceSpan.start.moveBy(0)),u=new pt$2(r,"",e.sourceSpan,a,o);this._addToParent(u);}this.errors.push(L$2.create(e.parts[0],e.sourceSpan,`Incomplete @let declaration${n}. @let declarations must be written as \`@let <name> = <value>;\``));}_getContainer(){return this._containerStack.length>0?this._containerStack[this._containerStack.length-1]:null}_getClosestParentElement(){for(let e=this._containerStack.length-1;e>-1;e--)if(this._containerStack[e]instanceof G$1)return this._containerStack[e];return null}_addToParent(e){let r=this._getContainer();r===null?this.rootNodes.push(e):r.children.push(e);}_getElementFullName(e,r,n){if(e===""&&(e=this.getTagDefinition(r).implicitNamespacePrefix||"",e===""&&n!=null)){let s=ut$2(n.name)[1];this.getTagDefinition(s).preventNamespaceInheritance||(e=Re$2(n.name));}return Oe$2(e,r)}};function Ws$1(t,e){return t.length>0&&t[t.length-1]===e}function zs$1(t,e){return Me$1[e]!==void 0?Me$1[e]||t:/^#x[a-f0-9]+$/i.test(e)?String.fromCodePoint(parseInt(e.slice(2),16)):/^#\d+$/.test(e)?String.fromCodePoint(parseInt(e.slice(1),10)):t}var rr$1=class rr extends tr$2{constructor(){super($e);}parse(e,r,n,s=!1,i){return super.parse(e,r,n,s,i)}};var Wr$2=null,So$2=()=>(Wr$2||(Wr$2=new rr$1),Wr$2);function zr$2(t,e={}){let{canSelfClose:r=!1,allowHtmComponentClosingTags:n=!1,isTagNameCaseSensitive:s=!1,getTagContentType:i,tokenizeAngularBlocks:a=!1,tokenizeAngularLetDeclaration:o=!1}=e;return So$2().parse(t,"angular-html-parser",{tokenizeExpansionForms:a,interpolationConfig:void 0,canSelfClose:r,allowHtmComponentClosingTags:n,tokenizeBlocks:a,tokenizeLet:o},s,i)}function _o$2(t,e){let r=new SyntaxError(t+" ("+e.loc.start.line+":"+e.loc.start.column+")");return Object.assign(r,e)}var Gs$1=_o$2;var Ct$2=3;function Eo$2(t){let e=t.slice(0,Ct$2);if(e!=="---"&&e!=="+++")return;let r=t.indexOf(`
`,Ct$2);if(r===-1)return;let n=t.slice(Ct$2,r).trim(),s=t.indexOf(`
${e}`,r),i=n;if(i||(i=e==="+++"?"toml":"yaml"),s===-1&&e==="---"&&i==="yaml"&&(s=t.indexOf(`
...`,r)),s===-1)return;let a=s+1+Ct$2,o=t.charAt(a+1);if(!/\s?/u.test(o))return;let u=t.slice(0,a);return {type:"front-matter",language:i,explicitLanguage:n,value:t.slice(r+1,s),startDelimiter:e,endDelimiter:u.slice(-Ct$2),raw:u}}function Ao$1(t){let e=Eo$2(t);if(!e)return {content:t};let{raw:r}=e;return {frontMatter:e,content:w(!1,r,/[^\n]/gu," ")+t.slice(r.length)}}var Ys$1=Ao$1;var nr$1={attrs:!0,children:!0,cases:!0,expression:!0},js=new Set(["parent"]),sr$1=class t{constructor(e={}){for(let r of new Set([...js,...Object.keys(e)]))this.setProperty(r,e[r]);}setProperty(e,r){if(this[e]!==r){if(e in nr$1&&(r=r.map(n=>this.createChild(n))),!js.has(e)){this[e]=r;return}Object.defineProperty(this,e,{value:r,enumerable:!1,configurable:!0});}}map(e){let r;for(let n in nr$1){let s=this[n];if(s){let i=Do$1(s,a=>a.map(e));r!==s&&(r||(r=new t({parent:this.parent})),r.setProperty(n,i));}}if(r)for(let n in this)n in nr$1||(r[n]=this[n]);return e(r||this)}walk(e){for(let r in nr$1){let n=this[r];if(n)for(let s=0;s<n.length;s++)n[s].walk(e);}e(this);}createChild(e){let r=e instanceof t?e.clone():new t(e);return r.setProperty("parent",this),r}insertChildBefore(e,r){this.children.splice(this.children.indexOf(e),0,this.createChild(r));}removeChild(e){this.children.splice(this.children.indexOf(e),1);}replaceChild(e,r){this.children[this.children.indexOf(e)]=this.createChild(r);}clone(){return new t(this)}get firstChild(){var e;return (e=this.children)==null?void 0:e[0]}get lastChild(){var e;return (e=this.children)==null?void 0:e[this.children.length-1]}get prev(){var e,r;return (r=(e=this.parent)==null?void 0:e.children)==null?void 0:r[this.parent.children.indexOf(this)-1]}get next(){var e,r;return (r=(e=this.parent)==null?void 0:e.children)==null?void 0:r[this.parent.children.indexOf(this)+1]}get rawName(){return this.hasExplicitNamespace?this.fullName:this.name}get fullName(){return this.namespace?this.namespace+":"+this.name:this.name}get attrMap(){return Object.fromEntries(this.attrs.map(e=>[e.fullName,e.value]))}};function Do$1(t,e){let r=t.map(e);return r.some((n,s)=>n!==t[s])?r:t}var vo$2=[{regex:/^(\[if([^\]]*)\]>)(.*?)<!\s*\[endif\]$/su,parse:yo$1},{regex:/^\[if([^\]]*)\]><!$/u,parse:wo$1},{regex:/^<!\s*\[endif\]$/u,parse:bo$1}];function Ks$2(t,e){if(t.value)for(let{regex:r,parse:n}of vo$2){let s=t.value.match(r);if(s)return n(t,e,s)}return null}function yo$1(t,e,r){let[,n,s,i]=r,a=4+n.length,o=t.sourceSpan.start.moveBy(a),u=o.moveBy(i.length),[p,l]=(()=>{try{return [!0,e(i,o).children]}catch{return [!1,[{type:"text",value:i,sourceSpan:new h$1(o,u)}]]}})();return {type:"ieConditionalComment",complete:p,children:l,condition:w(!1,s.trim(),/\s+/gu," "),sourceSpan:t.sourceSpan,startSourceSpan:new h$1(t.sourceSpan.start,o),endSourceSpan:new h$1(u,t.sourceSpan.end)}}function wo$1(t,e,r){let[,n]=r;return {type:"ieConditionalStartComment",condition:w(!1,n.trim(),/\s+/gu," "),sourceSpan:t.sourceSpan}}function bo$1(t){return {type:"ieConditionalEndComment",sourceSpan:t.sourceSpan}}var ir$1=new Map([["*",new Set(["accesskey","autocapitalize","autofocus","class","contenteditable","dir","draggable","enterkeyhint","hidden","id","inert","inputmode","is","itemid","itemprop","itemref","itemscope","itemtype","lang","nonce","popover","slot","spellcheck","style","tabindex","title","translate","writingsuggestions"])],["a",new Set(["charset","coords","download","href","hreflang","name","ping","referrerpolicy","rel","rev","shape","target","type"])],["applet",new Set(["align","alt","archive","code","codebase","height","hspace","name","object","vspace","width"])],["area",new Set(["alt","coords","download","href","hreflang","nohref","ping","referrerpolicy","rel","shape","target","type"])],["audio",new Set(["autoplay","controls","crossorigin","loop","muted","preload","src"])],["base",new Set(["href","target"])],["basefont",new Set(["color","face","size"])],["blockquote",new Set(["cite"])],["body",new Set(["alink","background","bgcolor","link","text","vlink"])],["br",new Set(["clear"])],["button",new Set(["disabled","form","formaction","formenctype","formmethod","formnovalidate","formtarget","name","popovertarget","popovertargetaction","type","value"])],["canvas",new Set(["height","width"])],["caption",new Set(["align"])],["col",new Set(["align","char","charoff","span","valign","width"])],["colgroup",new Set(["align","char","charoff","span","valign","width"])],["data",new Set(["value"])],["del",new Set(["cite","datetime"])],["details",new Set(["name","open"])],["dialog",new Set(["open"])],["dir",new Set(["compact"])],["div",new Set(["align"])],["dl",new Set(["compact"])],["embed",new Set(["height","src","type","width"])],["fieldset",new Set(["disabled","form","name"])],["font",new Set(["color","face","size"])],["form",new Set(["accept","accept-charset","action","autocomplete","enctype","method","name","novalidate","target"])],["frame",new Set(["frameborder","longdesc","marginheight","marginwidth","name","noresize","scrolling","src"])],["frameset",new Set(["cols","rows"])],["h1",new Set(["align"])],["h2",new Set(["align"])],["h3",new Set(["align"])],["h4",new Set(["align"])],["h5",new Set(["align"])],["h6",new Set(["align"])],["head",new Set(["profile"])],["hr",new Set(["align","noshade","size","width"])],["html",new Set(["manifest","version"])],["iframe",new Set(["align","allow","allowfullscreen","allowpaymentrequest","allowusermedia","frameborder","height","loading","longdesc","marginheight","marginwidth","name","referrerpolicy","sandbox","scrolling","src","srcdoc","width"])],["img",new Set(["align","alt","border","crossorigin","decoding","fetchpriority","height","hspace","ismap","loading","longdesc","name","referrerpolicy","sizes","src","srcset","usemap","vspace","width"])],["input",new Set(["accept","align","alt","autocomplete","checked","dirname","disabled","form","formaction","formenctype","formmethod","formnovalidate","formtarget","height","ismap","list","max","maxlength","min","minlength","multiple","name","pattern","placeholder","popovertarget","popovertargetaction","readonly","required","size","src","step","type","usemap","value","width"])],["ins",new Set(["cite","datetime"])],["isindex",new Set(["prompt"])],["label",new Set(["for","form"])],["legend",new Set(["align"])],["li",new Set(["type","value"])],["link",new Set(["as","blocking","charset","color","crossorigin","disabled","fetchpriority","href","hreflang","imagesizes","imagesrcset","integrity","media","referrerpolicy","rel","rev","sizes","target","type"])],["map",new Set(["name"])],["menu",new Set(["compact"])],["meta",new Set(["charset","content","http-equiv","media","name","scheme"])],["meter",new Set(["high","low","max","min","optimum","value"])],["object",new Set(["align","archive","border","classid","codebase","codetype","data","declare","form","height","hspace","name","standby","type","typemustmatch","usemap","vspace","width"])],["ol",new Set(["compact","reversed","start","type"])],["optgroup",new Set(["disabled","label"])],["option",new Set(["disabled","label","selected","value"])],["output",new Set(["for","form","name"])],["p",new Set(["align"])],["param",new Set(["name","type","value","valuetype"])],["pre",new Set(["width"])],["progress",new Set(["max","value"])],["q",new Set(["cite"])],["script",new Set(["async","blocking","charset","crossorigin","defer","fetchpriority","integrity","language","nomodule","referrerpolicy","src","type"])],["select",new Set(["autocomplete","disabled","form","multiple","name","required","size"])],["slot",new Set(["name"])],["source",new Set(["height","media","sizes","src","srcset","type","width"])],["style",new Set(["blocking","media","type"])],["table",new Set(["align","bgcolor","border","cellpadding","cellspacing","frame","rules","summary","width"])],["tbody",new Set(["align","char","charoff","valign"])],["td",new Set(["abbr","align","axis","bgcolor","char","charoff","colspan","headers","height","nowrap","rowspan","scope","valign","width"])],["template",new Set(["shadowrootclonable","shadowrootdelegatesfocus","shadowrootmode"])],["textarea",new Set(["autocomplete","cols","dirname","disabled","form","maxlength","minlength","name","placeholder","readonly","required","rows","wrap"])],["tfoot",new Set(["align","char","charoff","valign"])],["th",new Set(["abbr","align","axis","bgcolor","char","charoff","colspan","headers","height","nowrap","rowspan","scope","valign","width"])],["thead",new Set(["align","char","charoff","valign"])],["time",new Set(["datetime"])],["tr",new Set(["align","bgcolor","char","charoff","valign"])],["track",new Set(["default","kind","label","src","srclang"])],["ul",new Set(["compact","type"])],["video",new Set(["autoplay","controls","crossorigin","height","loop","muted","playsinline","poster","preload","src","width"])]]);var Qs$2=new Set(["a","abbr","acronym","address","applet","area","article","aside","audio","b","base","basefont","bdi","bdo","bgsound","big","blink","blockquote","body","br","button","canvas","caption","center","cite","code","col","colgroup","command","content","data","datalist","dd","del","details","dfn","dialog","dir","div","dl","dt","element","em","embed","fieldset","figcaption","figure","font","footer","form","frame","frameset","h1","h2","h3","h4","h5","h6","head","header","hgroup","hr","html","i","iframe","image","img","input","ins","isindex","kbd","keygen","label","legend","li","link","listing","main","map","mark","marquee","math","menu","menuitem","meta","meter","multicol","nav","nextid","nobr","noembed","noframes","noscript","object","ol","optgroup","option","output","p","param","picture","plaintext","pre","progress","q","rb","rbc","rp","rt","rtc","ruby","s","samp","script","search","section","select","shadow","slot","small","source","spacer","span","strike","strong","style","sub","summary","sup","svg","table","tbody","td","template","textarea","tfoot","th","thead","time","title","tr","track","tt","u","ul","var","video","wbr","xmp"]);function To$1(t){if(t.type==="block"){if(t.name=w(!1,t.name.toLowerCase(),/\s+/gu," ").trim(),t.type="angularControlFlowBlock",!Fe$1(t.parameters)){delete t.parameters;return}for(let e of t.parameters)e.type="angularControlFlowBlockParameter";t.parameters={type:"angularControlFlowBlockParameters",children:t.parameters,sourceSpan:new h$1(t.parameters[0].sourceSpan.start,se$2(!1,t.parameters,-1).sourceSpan.end)};}}function xo$1(t){t.type==="letDeclaration"&&(t.type="angularLetDeclaration",t.id=t.name,t.init={type:"angularLetDeclarationInitializer",sourceSpan:new h$1(t.valueSpan.start,t.valueSpan.end),value:t.value},delete t.name,delete t.value);}function ko$1(t){(t.type==="plural"||t.type==="select")&&(t.clause=t.type,t.type="angularIcuExpression"),t.type==="expansionCase"&&(t.type="angularIcuCase");}function Js$2(t,e,r){let{name:n,canSelfClose:s=!0,normalizeTagName:i=!1,normalizeAttributeName:a=!1,allowHtmComponentClosingTags:o=!1,isTagNameCaseSensitive:u=!1,shouldParseAsRawText:p}=e,{rootNodes:l,errors:f}=zr$2(t,{canSelfClose:s,allowHtmComponentClosingTags:o,isTagNameCaseSensitive:u,getTagContentType:p?(...c)=>p(...c)?I.RAW_TEXT:void 0:void 0,tokenizeAngularBlocks:n==="angular"?!0:void 0,tokenizeAngularLetDeclaration:n==="angular"?!0:void 0});if(n==="vue"){if(l.some(x=>x.type==="docType"&&x.value==="html"||x.type==="element"&&x.name.toLowerCase()==="html"))return Js$2(t,ei$2,r);let g,y=()=>g??(g=zr$2(t,{canSelfClose:s,allowHtmComponentClosingTags:o,isTagNameCaseSensitive:u})),M=x=>y().rootNodes.find(({startSourceSpan:V})=>V&&V.start.offset===x.startSourceSpan.start.offset)??x;for(let[x,V]of l.entries()){let{endSourceSpan:jr,startSourceSpan:ti}=V;if(jr===null)f=y().errors,l[x]=M(V);else if(Bo$1(V,r)){let Kr=y().errors.find(Qr=>Qr.span.start.offset>ti.start.offset&&Qr.span.start.offset<jr.end.offset);Kr&&Xs$1(Kr),l[x]=M(V);}}}f.length>0&&Xs$1(f[0]);let d=c=>{let g=c.name.startsWith(":")?c.name.slice(1).split(":")[0]:null,y=c.nameSpan.toString(),M=g!==null&&y.startsWith(`${g}:`),x=M?y.slice(g.length+1):y;c.name=x,c.namespace=g,c.hasExplicitNamespace=M;},C=c=>{switch(c.type){case"element":d(c);for(let g of c.attrs)d(g),g.valueSpan?(g.value=g.valueSpan.toString(),/["']/u.test(g.value[0])&&(g.value=g.value.slice(1,-1))):g.value=null;break;case"comment":c.value=c.sourceSpan.toString().slice(4,-3);break;case"text":c.value=c.sourceSpan.toString();break}},A=(c,g)=>{let y=c.toLowerCase();return g(y)?y:c},D=c=>{if(c.type==="element"&&(i&&(!c.namespace||c.namespace===c.tagDefinition.implicitNamespacePrefix||pe$2(c))&&(c.name=A(c.name,g=>Qs$2.has(g))),a))for(let g of c.attrs)g.namespace||(g.name=A(g.name,y=>ir$1.has(c.name)&&(ir$1.get("*").has(y)||ir$1.get(c.name).has(y))));},R=c=>{c.sourceSpan&&c.endSourceSpan&&(c.sourceSpan=new h$1(c.sourceSpan.start,c.endSourceSpan.end));},F=c=>{if(c.type==="element"){let g=$e(u?c.name:c.name.toLowerCase());!c.namespace||c.namespace===g.implicitNamespacePrefix||pe$2(c)?c.tagDefinition=g:c.tagDefinition=$e("");}};return jt$2(new class extends ht$1{visitExpansionCase(c,g){n==="angular"&&this.visitChildren(g,y=>{y(c.expression);});}visit(c){C(c),F(c),D(c),R(c);}},l),l}function Bo$1(t,e){var n;if(t.type!=="element"||t.name!=="template")return !1;let r=(n=t.attrs.find(s=>s.name==="lang"))==null?void 0:n.value;return !r||Be$1(e,{language:r})==="html"}function Xs$1(t){let{msg:e,span:{start:r,end:n}}=t;throw Gs$1(e,{loc:{start:{line:r.line+1,column:r.col+1},end:{line:n.line+1,column:n.col+1}},cause:t})}function Zs$2(t,e,r={},n=!0){let{frontMatter:s,content:i}=n?Ys$1(t):{frontMatter:null,content:t},a=new Ee$2(t,r.filepath),o=new ie$2(a,0,0,0),u=o.moveBy(t.length),p={type:"root",sourceSpan:new h$1(o,u),children:Js$2(i,e,r)};if(s){let d=new ie$2(a,0,0,0),C=d.moveBy(s.raw.length);s.sourceSpan=new h$1(d,C),p.children.unshift(s);}let l=new sr$1(p),f=(d,C)=>{let{offset:A}=C,D=w(!1,t.slice(0,A),/[^\n\r]/gu," "),F=Zs$2(D+d,e,r,!1);F.sourceSpan=new h$1(C,se$2(!1,F.children,-1).sourceSpan.end);let c=F.children[0];return c.length===A?F.children.shift():(c.sourceSpan=new h$1(c.sourceSpan.start.moveBy(A),c.sourceSpan.end),c.value=c.value.slice(A)),F};return l.walk(d=>{if(d.type==="comment"){let C=Ks$2(d,f);C&&d.parent.replaceChild(d,C);}To$1(d),xo$1(d),ko$1(d);}),l}function ar$2(t){return {parse:(e,r)=>Zs$2(e,t,r),hasPragma:as$1,astFormat:"html",locStart:X$2,locEnd:J$2}}var ei$2={name:"html",normalizeTagName:!0,normalizeAttributeName:!0,allowHtmComponentClosingTags:!0},Lo$1=ar$2(ei$2),Fo$1=ar$2({name:"angular"}),No$2=ar$2({name:"vue",isTagNameCaseSensitive:!0,shouldParseAsRawText(t,e,r,n){return t.toLowerCase()!=="html"&&!r&&(t!=="template"||n.some(({name:s,value:i})=>s==="lang"&&i!=="html"&&i!==""&&i!==void 0))}}),Po$1=ar$2({name:"lwc",canSelfClose:!1});var Io$1={html:Es$1};var Nh=Yr$2;

    var pl$1=Object.create;var $r$1=Object.defineProperty;var hl$1=Object.getOwnPropertyDescriptor;var dl$1=Object.getOwnPropertyNames;var ml$1=Object.getPrototypeOf,yl$1=Object.prototype.hasOwnProperty;var g=(t,e)=>()=>(e||t((e={exports:{}}).exports,e),e.exports),Zs$1=(t,e)=>{for(var s in e)$r$1(t,s,{get:e[s],enumerable:!0});},gl$1=(t,e,s,r)=>{if(e&&typeof e=="object"||typeof e=="function")for(let n of dl$1(e))!yl$1.call(t,n)&&n!==s&&$r$1(t,n,{get:()=>e[n],enumerable:!(r=hl$1(e,n))||r.enumerable});return t};var xe$1=(t,e,s)=>(s=t!=null?pl$1(ml$1(t)):{},gl$1($r$1(s,"default",{value:t,enumerable:!0}),t));var xi$1=g((hv,rs)=>{var _=String,vi=function(){return {isColorSupported:!1,reset:_,bold:_,dim:_,italic:_,underline:_,inverse:_,hidden:_,strikethrough:_,black:_,red:_,green:_,yellow:_,blue:_,magenta:_,cyan:_,white:_,gray:_,bgBlack:_,bgRed:_,bgGreen:_,bgYellow:_,bgBlue:_,bgMagenta:_,bgCyan:_,bgWhite:_,blackBright:_,redBright:_,greenBright:_,yellowBright:_,blueBright:_,magentaBright:_,cyanBright:_,whiteBright:_,bgBlackBright:_,bgRedBright:_,bgGreenBright:_,bgYellowBright:_,bgBlueBright:_,bgMagentaBright:_,bgCyanBright:_,bgWhiteBright:_}};rs.exports=vi();rs.exports.createColors=vi;});var ss$1=g(()=>{});var Wt$1=g((yv,ki)=>{var bi=xi$1(),_i=ss$1(),ot=class t extends Error{constructor(e,s,r,n,i,o){super(e),this.name="CssSyntaxError",this.reason=e,i&&(this.file=i),n&&(this.source=n),o&&(this.plugin=o),typeof s<"u"&&typeof r<"u"&&(typeof s=="number"?(this.line=s,this.column=r):(this.line=s.line,this.column=s.column,this.endLine=r.line,this.endColumn=r.column)),this.setMessage(),Error.captureStackTrace&&Error.captureStackTrace(this,t);}setMessage(){this.message=this.plugin?this.plugin+": ":"",this.message+=this.file?this.file:"<css input>",typeof this.line<"u"&&(this.message+=":"+this.line+":"+this.column),this.message+=": "+this.reason;}showSourceCode(e){if(!this.source)return "";let s=this.source;e==null&&(e=bi.isColorSupported);let r=f=>f,n=f=>f,i=f=>f;if(e){let{bold:f,gray:p,red:l}=bi.createColors(!0);n=y=>f(l(y)),r=y=>p(y),_i&&(i=y=>_i(y));}let o=s.split(/\r?\n/),u=Math.max(this.line-3,0),a=Math.min(this.line+2,o.length),c=String(a).length;return o.slice(u,a).map((f,p)=>{let l=u+1+p,y=" "+(" "+l).slice(-c)+" | ";if(l===this.line){if(f.length>160){let h=20,d=Math.max(0,this.column-h),m=Math.max(this.column+h,this.endColumn+h),b=f.slice(d,m),w=r(y.replace(/\d/g," "))+f.slice(0,Math.min(this.column-1,h-1)).replace(/[^\t]/g," ");return n(">")+r(y)+i(b)+`
 `+w+n("^")}let x=r(y.replace(/\d/g," "))+f.slice(0,this.column-1).replace(/[^\t]/g," ");return n(">")+r(y)+i(f)+`
 `+x+n("^")}return " "+r(y)+i(f)}).join(`
`)}toString(){let e=this.showSourceCode();return e&&(e=`

`+e+`
`),this.name+": "+this.message+e}};ki.exports=ot;ot.default=ot;});var Yt$1=g((gv,Si)=>{var Ei={after:`
`,beforeClose:`
`,beforeComment:`
`,beforeDecl:`
`,beforeOpen:" ",beforeRule:`
`,colon:": ",commentLeft:" ",commentRight:" ",emptyBody:"",indent:"    ",semicolon:!1};function mc(t){return t[0].toUpperCase()+t.slice(1)}var at=class{constructor(e){this.builder=e;}atrule(e,s){let r="@"+e.name,n=e.params?this.rawValue(e,"params"):"";if(typeof e.raws.afterName<"u"?r+=e.raws.afterName:n&&(r+=" "),e.nodes)this.block(e,r+n);else {let i=(e.raws.between||"")+(s?";":"");this.builder(r+n+i,e);}}beforeAfter(e,s){let r;e.type==="decl"?r=this.raw(e,null,"beforeDecl"):e.type==="comment"?r=this.raw(e,null,"beforeComment"):s==="before"?r=this.raw(e,null,"beforeRule"):r=this.raw(e,null,"beforeClose");let n=e.parent,i=0;for(;n&&n.type!=="root";)i+=1,n=n.parent;if(r.includes(`
`)){let o=this.raw(e,null,"indent");if(o.length)for(let u=0;u<i;u++)r+=o;}return r}block(e,s){let r=this.raw(e,"between","beforeOpen");this.builder(s+r+"{",e,"start");let n;e.nodes&&e.nodes.length?(this.body(e),n=this.raw(e,"after")):n=this.raw(e,"after","emptyBody"),n&&this.builder(n),this.builder("}",e,"end");}body(e){let s=e.nodes.length-1;for(;s>0&&e.nodes[s].type==="comment";)s-=1;let r=this.raw(e,"semicolon");for(let n=0;n<e.nodes.length;n++){let i=e.nodes[n],o=this.raw(i,"before");o&&this.builder(o),this.stringify(i,s!==n||r);}}comment(e){let s=this.raw(e,"left","commentLeft"),r=this.raw(e,"right","commentRight");this.builder("/*"+s+e.text+r+"*/",e);}decl(e,s){let r=this.raw(e,"between","colon"),n=e.prop+r+this.rawValue(e,"value");e.important&&(n+=e.raws.important||" !important"),s&&(n+=";"),this.builder(n,e);}document(e){this.body(e);}raw(e,s,r){let n;if(r||(r=s),s&&(n=e.raws[s],typeof n<"u"))return n;let i=e.parent;if(r==="before"&&(!i||i.type==="root"&&i.first===e||i&&i.type==="document"))return "";if(!i)return Ei[r];let o=e.root();if(o.rawCache||(o.rawCache={}),typeof o.rawCache[r]<"u")return o.rawCache[r];if(r==="before"||r==="after")return this.beforeAfter(e,r);{let u="raw"+mc(r);this[u]?n=this[u](o,e):o.walk(a=>{if(n=a.raws[s],typeof n<"u")return !1});}return typeof n>"u"&&(n=Ei[r]),o.rawCache[r]=n,n}rawBeforeClose(e){let s;return e.walk(r=>{if(r.nodes&&r.nodes.length>0&&typeof r.raws.after<"u")return s=r.raws.after,s.includes(`
`)&&(s=s.replace(/[^\n]+$/,"")),!1}),s&&(s=s.replace(/\S/g,"")),s}rawBeforeComment(e,s){let r;return e.walkComments(n=>{if(typeof n.raws.before<"u")return r=n.raws.before,r.includes(`
`)&&(r=r.replace(/[^\n]+$/,"")),!1}),typeof r>"u"?r=this.raw(s,null,"beforeDecl"):r&&(r=r.replace(/\S/g,"")),r}rawBeforeDecl(e,s){let r;return e.walkDecls(n=>{if(typeof n.raws.before<"u")return r=n.raws.before,r.includes(`
`)&&(r=r.replace(/[^\n]+$/,"")),!1}),typeof r>"u"?r=this.raw(s,null,"beforeRule"):r&&(r=r.replace(/\S/g,"")),r}rawBeforeOpen(e){let s;return e.walk(r=>{if(r.type!=="decl"&&(s=r.raws.between,typeof s<"u"))return !1}),s}rawBeforeRule(e){let s;return e.walk(r=>{if(r.nodes&&(r.parent!==e||e.first!==r)&&typeof r.raws.before<"u")return s=r.raws.before,s.includes(`
`)&&(s=s.replace(/[^\n]+$/,"")),!1}),s&&(s=s.replace(/\S/g,"")),s}rawColon(e){let s;return e.walkDecls(r=>{if(typeof r.raws.between<"u")return s=r.raws.between.replace(/[^\s:]/g,""),!1}),s}rawEmptyBody(e){let s;return e.walk(r=>{if(r.nodes&&r.nodes.length===0&&(s=r.raws.after,typeof s<"u"))return !1}),s}rawIndent(e){if(e.raws.indent)return e.raws.indent;let s;return e.walk(r=>{let n=r.parent;if(n&&n!==e&&n.parent&&n.parent===e&&typeof r.raws.before<"u"){let i=r.raws.before.split(`
`);return s=i[i.length-1],s=s.replace(/\S/g,""),!1}}),s}rawSemicolon(e){let s;return e.walk(r=>{if(r.nodes&&r.nodes.length&&r.last.type==="decl"&&(s=r.raws.semicolon,typeof s<"u"))return !1}),s}rawValue(e,s){let r=e[s],n=e.raws[s];return n&&n.value===r?n.raw:r}root(e){this.body(e),e.raws.after&&this.builder(e.raws.after);}rule(e){this.block(e,this.rawValue(e,"selector")),e.raws.ownSemicolon&&this.builder(e.raws.ownSemicolon,e,"end");}stringify(e,s){if(!this[e.type])throw new Error("Unknown AST node type "+e.type+". Maybe you need to change PostCSS stringifier.");this[e.type](e,s);}};Si.exports=at;at.default=at;});var ut$1=g((wv,Ti)=>{var yc=Yt$1();function ns(t,e){new yc(e).stringify(t);}Ti.exports=ns;ns.default=ns;});var zt=g((vv,is)=>{is.exports.isClean=Symbol("isClean");is.exports.my=Symbol("my");});var pt$1=g((xv,Ci)=>{var gc=Wt$1(),wc=Yt$1(),vc=ut$1(),{isClean:lt,my:xc}=zt();function os(t,e){let s=new t.constructor;for(let r in t){if(!Object.prototype.hasOwnProperty.call(t,r)||r==="proxyCache")continue;let n=t[r],i=typeof n;r==="parent"&&i==="object"?e&&(s[r]=e):r==="source"?s[r]=n:Array.isArray(n)?s[r]=n.map(o=>os(o,s)):(i==="object"&&n!==null&&(n=os(n)),s[r]=n);}return s}function ct(t,e){if(e&&typeof e.offset<"u")return e.offset;let s=1,r=1,n=0;for(let i=0;i<t.length;i++){if(r===e.line&&s===e.column){n=i;break}t[i]===`
`?(s=1,r+=1):s+=1;}return n}var ft=class{constructor(e={}){this.raws={},this[lt]=!1,this[xc]=!0;for(let s in e)if(s==="nodes"){this.nodes=[];for(let r of e[s])typeof r.clone=="function"?this.append(r.clone()):this.append(r);}else this[s]=e[s];}addToError(e){if(e.postcssNode=this,e.stack&&this.source&&/\n\s{4}at /.test(e.stack)){let s=this.source;e.stack=e.stack.replace(/\n\s{4}at /,`$&${s.input.from}:${s.start.line}:${s.start.column}$&`);}return e}after(e){return this.parent.insertAfter(this,e),this}assign(e={}){for(let s in e)this[s]=e[s];return this}before(e){return this.parent.insertBefore(this,e),this}cleanRaws(e){delete this.raws.before,delete this.raws.after,e||delete this.raws.between;}clone(e={}){let s=os(this);for(let r in e)s[r]=e[r];return s}cloneAfter(e={}){let s=this.clone(e);return this.parent.insertAfter(this,s),s}cloneBefore(e={}){let s=this.clone(e);return this.parent.insertBefore(this,s),s}error(e,s={}){if(this.source){let{end:r,start:n}=this.rangeBy(s);return this.source.input.error(e,{column:n.column,line:n.line},{column:r.column,line:r.line},s)}return new gc(e)}getProxyProcessor(){return {get(e,s){return s==="proxyOf"?e:s==="root"?()=>e.root().toProxy():e[s]},set(e,s,r){return e[s]===r||(e[s]=r,(s==="prop"||s==="value"||s==="name"||s==="params"||s==="important"||s==="text")&&e.markDirty()),!0}}}markClean(){this[lt]=!0;}markDirty(){if(this[lt]){this[lt]=!1;let e=this;for(;e=e.parent;)e[lt]=!1;}}next(){if(!this.parent)return;let e=this.parent.index(this);return this.parent.nodes[e+1]}positionBy(e){let s=this.source.start;if(e.index)s=this.positionInside(e.index);else if(e.word){let n=this.source.input.css.slice(ct(this.source.input.css,this.source.start),ct(this.source.input.css,this.source.end)).indexOf(e.word);n!==-1&&(s=this.positionInside(n));}return s}positionInside(e){let s=this.source.start.column,r=this.source.start.line,n=ct(this.source.input.css,this.source.start),i=n+e;for(let o=n;o<i;o++)this.source.input.css[o]===`
`?(s=1,r+=1):s+=1;return {column:s,line:r}}prev(){if(!this.parent)return;let e=this.parent.index(this);return this.parent.nodes[e-1]}rangeBy(e){let s={column:this.source.start.column,line:this.source.start.line},r=this.source.end?{column:this.source.end.column+1,line:this.source.end.line}:{column:s.column+1,line:s.line};if(e.word){let i=this.source.input.css.slice(ct(this.source.input.css,this.source.start),ct(this.source.input.css,this.source.end)).indexOf(e.word);i!==-1&&(s=this.positionInside(i),r=this.positionInside(i+e.word.length));}else e.start?s={column:e.start.column,line:e.start.line}:e.index&&(s=this.positionInside(e.index)),e.end?r={column:e.end.column,line:e.end.line}:typeof e.endIndex=="number"?r=this.positionInside(e.endIndex):e.index&&(r=this.positionInside(e.index+1));return (r.line<s.line||r.line===s.line&&r.column<=s.column)&&(r={column:s.column+1,line:s.line}),{end:r,start:s}}raw(e,s){return new wc().raw(this,e,s)}remove(){return this.parent&&this.parent.removeChild(this),this.parent=void 0,this}replaceWith(...e){if(this.parent){let s=this,r=!1;for(let n of e)n===this?r=!0:r?(this.parent.insertAfter(s,n),s=n):this.parent.insertBefore(s,n);r||this.remove();}return this}root(){let e=this;for(;e.parent&&e.parent.type!=="document";)e=e.parent;return e}toJSON(e,s){let r={},n=s==null;s=s||new Map;let i=0;for(let o in this){if(!Object.prototype.hasOwnProperty.call(this,o)||o==="parent"||o==="proxyCache")continue;let u=this[o];if(Array.isArray(u))r[o]=u.map(a=>typeof a=="object"&&a.toJSON?a.toJSON(null,s):a);else if(typeof u=="object"&&u.toJSON)r[o]=u.toJSON(null,s);else if(o==="source"){let a=s.get(u.input);a==null&&(a=i,s.set(u.input,i),i++),r[o]={end:u.end,inputId:a,start:u.start};}else r[o]=u;}return n&&(r.inputs=[...s.keys()].map(o=>o.toJSON())),r}toProxy(){return this.proxyCache||(this.proxyCache=new Proxy(this,this.getProxyProcessor())),this.proxyCache}toString(e=vc){e.stringify&&(e=e.stringify);let s="";return e(this,r=>{s+=r;}),s}warn(e,s,r){let n={node:this};for(let i in r)n[i]=r[i];return e.warn(s,n)}get proxyOf(){return this}};Ci.exports=ft;ft.default=ft;});var Re$1=g((bv,Oi)=>{var bc=pt$1(),ht=class extends bc{constructor(e){super(e),this.type="comment";}};Oi.exports=ht;ht.default=ht;});var mt$1=g((_v,Ai)=>{var _c=pt$1(),dt=class extends _c{constructor(e){e&&typeof e.value<"u"&&typeof e.value!="string"&&(e={...e,value:String(e.value)}),super(e),this.type="decl";}get variable(){return this.prop.startsWith("--")||this.prop[0]==="$"}};Ai.exports=dt;dt.default=dt;});var ue=g((kv,Mi)=>{var Ni=Re$1(),Pi=mt$1(),kc=pt$1(),{isClean:Ri,my:Ii}=zt(),as,qi,Li,us;function Di(t){return t.map(e=>(e.nodes&&(e.nodes=Di(e.nodes)),delete e.source,e))}function Bi(t){if(t[Ri]=!1,t.proxyOf.nodes)for(let e of t.proxyOf.nodes)Bi(e);}var V=class t extends kc{append(...e){for(let s of e){let r=this.normalize(s,this.last);for(let n of r)this.proxyOf.nodes.push(n);}return this.markDirty(),this}cleanRaws(e){if(super.cleanRaws(e),this.nodes)for(let s of this.nodes)s.cleanRaws(e);}each(e){if(!this.proxyOf.nodes)return;let s=this.getIterator(),r,n;for(;this.indexes[s]<this.proxyOf.nodes.length&&(r=this.indexes[s],n=e(this.proxyOf.nodes[r],r),n!==!1);)this.indexes[s]+=1;return delete this.indexes[s],n}every(e){return this.nodes.every(e)}getIterator(){this.lastEach||(this.lastEach=0),this.indexes||(this.indexes={}),this.lastEach+=1;let e=this.lastEach;return this.indexes[e]=0,e}getProxyProcessor(){return {get(e,s){return s==="proxyOf"?e:e[s]?s==="each"||typeof s=="string"&&s.startsWith("walk")?(...r)=>e[s](...r.map(n=>typeof n=="function"?(i,o)=>n(i.toProxy(),o):n)):s==="every"||s==="some"?r=>e[s]((n,...i)=>r(n.toProxy(),...i)):s==="root"?()=>e.root().toProxy():s==="nodes"?e.nodes.map(r=>r.toProxy()):s==="first"||s==="last"?e[s].toProxy():e[s]:e[s]},set(e,s,r){return e[s]===r||(e[s]=r,(s==="name"||s==="params"||s==="selector")&&e.markDirty()),!0}}}index(e){return typeof e=="number"?e:(e.proxyOf&&(e=e.proxyOf),this.proxyOf.nodes.indexOf(e))}insertAfter(e,s){let r=this.index(e),n=this.normalize(s,this.proxyOf.nodes[r]).reverse();r=this.index(e);for(let o of n)this.proxyOf.nodes.splice(r+1,0,o);let i;for(let o in this.indexes)i=this.indexes[o],r<i&&(this.indexes[o]=i+n.length);return this.markDirty(),this}insertBefore(e,s){let r=this.index(e),n=r===0?"prepend":!1,i=this.normalize(s,this.proxyOf.nodes[r],n).reverse();r=this.index(e);for(let u of i)this.proxyOf.nodes.splice(r,0,u);let o;for(let u in this.indexes)o=this.indexes[u],r<=o&&(this.indexes[u]=o+i.length);return this.markDirty(),this}normalize(e,s){if(typeof e=="string")e=Di(qi(e).nodes);else if(typeof e>"u")e=[];else if(Array.isArray(e)){e=e.slice(0);for(let n of e)n.parent&&n.parent.removeChild(n,"ignore");}else if(e.type==="root"&&this.type!=="document"){e=e.nodes.slice(0);for(let n of e)n.parent&&n.parent.removeChild(n,"ignore");}else if(e.type)e=[e];else if(e.prop){if(typeof e.value>"u")throw new Error("Value field is missed in node creation");typeof e.value!="string"&&(e.value=String(e.value)),e=[new Pi(e)];}else if(e.selector||e.selectors)e=[new us(e)];else if(e.name)e=[new as(e)];else if(e.text)e=[new Ni(e)];else throw new Error("Unknown node type in node creation");return e.map(n=>(n[Ii]||t.rebuild(n),n=n.proxyOf,n.parent&&n.parent.removeChild(n),n[Ri]&&Bi(n),n.raws||(n.raws={}),typeof n.raws.before>"u"&&s&&typeof s.raws.before<"u"&&(n.raws.before=s.raws.before.replace(/\S/g,"")),n.parent=this.proxyOf,n))}prepend(...e){e=e.reverse();for(let s of e){let r=this.normalize(s,this.first,"prepend").reverse();for(let n of r)this.proxyOf.nodes.unshift(n);for(let n in this.indexes)this.indexes[n]=this.indexes[n]+r.length;}return this.markDirty(),this}push(e){return e.parent=this,this.proxyOf.nodes.push(e),this}removeAll(){for(let e of this.proxyOf.nodes)e.parent=void 0;return this.proxyOf.nodes=[],this.markDirty(),this}removeChild(e){e=this.index(e),this.proxyOf.nodes[e].parent=void 0,this.proxyOf.nodes.splice(e,1);let s;for(let r in this.indexes)s=this.indexes[r],s>=e&&(this.indexes[r]=s-1);return this.markDirty(),this}replaceValues(e,s,r){return r||(r=s,s={}),this.walkDecls(n=>{s.props&&!s.props.includes(n.prop)||s.fast&&!n.value.includes(s.fast)||(n.value=n.value.replace(e,r));}),this.markDirty(),this}some(e){return this.nodes.some(e)}walk(e){return this.each((s,r)=>{let n;try{n=e(s,r);}catch(i){throw s.addToError(i)}return n!==!1&&s.walk&&(n=s.walk(e)),n})}walkAtRules(e,s){return s?e instanceof RegExp?this.walk((r,n)=>{if(r.type==="atrule"&&e.test(r.name))return s(r,n)}):this.walk((r,n)=>{if(r.type==="atrule"&&r.name===e)return s(r,n)}):(s=e,this.walk((r,n)=>{if(r.type==="atrule")return s(r,n)}))}walkComments(e){return this.walk((s,r)=>{if(s.type==="comment")return e(s,r)})}walkDecls(e,s){return s?e instanceof RegExp?this.walk((r,n)=>{if(r.type==="decl"&&e.test(r.prop))return s(r,n)}):this.walk((r,n)=>{if(r.type==="decl"&&r.prop===e)return s(r,n)}):(s=e,this.walk((r,n)=>{if(r.type==="decl")return s(r,n)}))}walkRules(e,s){return s?e instanceof RegExp?this.walk((r,n)=>{if(r.type==="rule"&&e.test(r.selector))return s(r,n)}):this.walk((r,n)=>{if(r.type==="rule"&&r.selector===e)return s(r,n)}):(s=e,this.walk((r,n)=>{if(r.type==="rule")return s(r,n)}))}get first(){if(this.proxyOf.nodes)return this.proxyOf.nodes[0]}get last(){if(this.proxyOf.nodes)return this.proxyOf.nodes[this.proxyOf.nodes.length-1]}};V.registerParse=t=>{qi=t;};V.registerRule=t=>{us=t;};V.registerAtRule=t=>{as=t;};V.registerRoot=t=>{Li=t;};Mi.exports=V;V.default=V;V.rebuild=t=>{t.type==="atrule"?Object.setPrototypeOf(t,as.prototype):t.type==="rule"?Object.setPrototypeOf(t,us.prototype):t.type==="decl"?Object.setPrototypeOf(t,Pi.prototype):t.type==="comment"?Object.setPrototypeOf(t,Ni.prototype):t.type==="root"&&Object.setPrototypeOf(t,Li.prototype),t[Ii]=!0,t.nodes&&t.nodes.forEach(e=>{V.rebuild(e);});};});var Fi$1=g((Ev,Ui)=>{var Ec="useandom-26T198340PX75pxJACKVERYMINDBUSHWOLF_GQZbfghjklqvwyzrict",Sc=(t,e=21)=>(s=e)=>{let r="",n=s;for(;n--;)r+=t[Math.random()*t.length|0];return r},Tc=(t=21)=>{let e="",s=t;for(;s--;)e+=Ec[Math.random()*64|0];return e};Ui.exports={nanoid:Tc,customAlphabet:Sc};});var $i$1=g(()=>{});var ls$1=g((Cv,Wi)=>{Wi.exports=class{};});var qe=g((Av,Gi)=>{var{nanoid:Cc}=Fi$1(),{isAbsolute:ps,resolve:hs}={},{SourceMapConsumer:Oc,SourceMapGenerator:Ac}=$i$1(),{fileURLToPath:Yi,pathToFileURL:Vt}={},zi=Wt$1(),Nc=ls$1(),cs=ss$1(),fs=Symbol("fromOffsetCache"),Pc=!!(Oc&&Ac),Vi=!!(hs&&ps),Ie=class{constructor(e,s={}){if(e===null||typeof e>"u"||typeof e=="object"&&!e.toString)throw new Error(`PostCSS received ${e} instead of CSS string`);if(this.css=e.toString(),this.css[0]==="\uFEFF"||this.css[0]==="\uFFFE"?(this.hasBOM=!0,this.css=this.css.slice(1)):this.hasBOM=!1,s.from&&(!Vi||/^\w+:\/\//.test(s.from)||ps(s.from)?this.file=s.from:this.file=hs(s.from)),Vi&&Pc){let r=new Nc(this.css,s);if(r.text){this.map=r;let n=r.consumer().file;!this.file&&n&&(this.file=this.mapResolve(n));}}this.file||(this.id="<input css "+Cc(6)+">"),this.map&&(this.map.file=this.from);}error(e,s,r,n={}){let i,o,u;if(s&&typeof s=="object"){let c=s,f=r;if(typeof c.offset=="number"){let p=this.fromOffset(c.offset);s=p.line,r=p.col;}else s=c.line,r=c.column;if(typeof f.offset=="number"){let p=this.fromOffset(f.offset);o=p.line,i=p.col;}else o=f.line,i=f.column;}else if(!r){let c=this.fromOffset(s);s=c.line,r=c.col;}let a=this.origin(s,r,o,i);return a?u=new zi(e,a.endLine===void 0?a.line:{column:a.column,line:a.line},a.endLine===void 0?a.column:{column:a.endColumn,line:a.endLine},a.source,a.file,n.plugin):u=new zi(e,o===void 0?s:{column:r,line:s},o===void 0?r:{column:i,line:o},this.css,this.file,n.plugin),u.input={column:r,endColumn:i,endLine:o,line:s,source:this.css},this.file&&(Vt&&(u.input.url=Vt(this.file).toString()),u.input.file=this.file),u}fromOffset(e){let s,r;if(this[fs])r=this[fs];else {let i=this.css.split(`
`);r=new Array(i.length);let o=0;for(let u=0,a=i.length;u<a;u++)r[u]=o,o+=i[u].length+1;this[fs]=r;}s=r[r.length-1];let n=0;if(e>=s)n=r.length-1;else {let i=r.length-2,o;for(;n<i;)if(o=n+(i-n>>1),e<r[o])i=o-1;else if(e>=r[o+1])n=o+1;else {n=o;break}}return {col:e-r[n]+1,line:n+1}}mapResolve(e){return /^\w+:\/\//.test(e)?e:hs(this.map.consumer().sourceRoot||this.map.root||".",e)}origin(e,s,r,n){if(!this.map)return !1;let i=this.map.consumer(),o=i.originalPositionFor({column:s,line:e});if(!o.source)return !1;let u;typeof r=="number"&&(u=i.originalPositionFor({column:n,line:r}));let a;ps(o.source)?a=Vt(o.source):a=new URL(o.source,this.map.consumer().sourceRoot||Vt(this.map.mapFile));let c={column:o.column,endColumn:u&&u.column,endLine:u&&u.line,line:o.line,url:a.toString()};if(a.protocol==="file:")if(Yi)c.file=Yi(a);else throw new Error("file: protocol is not available in this PostCSS build");let f=i.sourceContentFor(o.source);return f&&(c.source=f),c}toJSON(){let e={};for(let s of ["hasBOM","css","file","id"])this[s]!=null&&(e[s]=this[s]);return this.map&&(e.map={...this.map},e.map.consumerCache&&(e.map.consumerCache=void 0)),e}get from(){return this.file||this.id}};Gi.exports=Ie;Ie.default=Ie;cs&&cs.registerInput&&cs.registerInput(Ie);});var Gt$1=g((Nv,Hi)=>{var ji=ue(),Le=class extends ji{constructor(e){super(e),this.type="atrule";}append(...e){return this.proxyOf.nodes||(this.nodes=[]),super.append(...e)}prepend(...e){return this.proxyOf.nodes||(this.nodes=[]),super.prepend(...e)}};Hi.exports=Le;Le.default=Le;ji.registerAtRule(Le);});var De$1=g((Pv,Xi)=>{var Ki=ue(),Qi,Ji,le=class extends Ki{constructor(e){super(e),this.type="root",this.nodes||(this.nodes=[]);}normalize(e,s,r){let n=super.normalize(e);if(s){if(r==="prepend")this.nodes.length>1?s.raws.before=this.nodes[1].raws.before:delete s.raws.before;else if(this.first!==s)for(let i of n)i.raws.before=s.raws.before;}return n}removeChild(e,s){let r=this.index(e);return !s&&r===0&&this.nodes.length>1&&(this.nodes[1].raws.before=this.nodes[r].raws.before),super.removeChild(e)}toResult(e={}){return new Qi(new Ji,this,e).stringify()}};le.registerLazyResult=t=>{Qi=t;};le.registerProcessor=t=>{Ji=t;};Xi.exports=le;le.default=le;Ki.registerRoot(le);});var ds$1=g((Rv,Zi)=>{var yt={comma(t){return yt.split(t,[","],!0)},space(t){let e=[" ",`
`,"	"];return yt.split(t,e)},split(t,e,s){let r=[],n="",i=!1,o=0,u=!1,a="",c=!1;for(let f of t)c?c=!1:f==="\\"?c=!0:u?f===a&&(u=!1):f==='"'||f==="'"?(u=!0,a=f):f==="("?o+=1:f===")"?o>0&&(o-=1):o===0&&e.includes(f)&&(i=!0),i?(n!==""&&r.push(n.trim()),n="",i=!1):n+=f;return (s||n!=="")&&r.push(n.trim()),r}};Zi.exports=yt;yt.default=yt;});var jt$1=g((Iv,to)=>{var eo=ue(),Rc=ds$1(),Be=class extends eo{constructor(e){super(e),this.type="rule",this.nodes||(this.nodes=[]);}get selectors(){return Rc.comma(this.selector)}set selectors(e){let s=this.selector?this.selector.match(/,\s*/):null,r=s?s[0]:","+this.raw("between","beforeOpen");this.selector=e.join(r);}};to.exports=Be;Be.default=Be;eo.registerRule(Be);});var Qt=g((qv,so)=>{var Ht=/[\t\n\f\r "#'()/;[\\\]{}]/g,Kt=/[\t\n\f\r !"#'():;@[\\\]{}]|\/(?=\*)/g,Ic=/.[\r\n"'(/\\]/,ro=/[\da-f]/i;so.exports=function(e,s={}){let r=e.css.valueOf(),n=s.ignoreErrors,i,o,u,a,c,f,p,l,y,x,h=r.length,d=0,m=[],b=[];function w(){return d}function v(W){throw e.error("Unclosed "+W,d)}function N(){return b.length===0&&d>=h}function F(W){if(b.length)return b.pop();if(d>=h)return;let T=W?W.ignoreUnclosed:!1;switch(i=r.charCodeAt(d),i){case 10:case 32:case 9:case 13:case 12:{a=d;do a+=1,i=r.charCodeAt(a);while(i===32||i===10||i===9||i===13||i===12);f=["space",r.slice(d,a)],d=a-1;break}case 91:case 93:case 123:case 125:case 58:case 59:case 41:{let C=String.fromCharCode(i);f=[C,C,d];break}case 40:{if(x=m.length?m.pop()[1]:"",y=r.charCodeAt(d+1),x==="url"&&y!==39&&y!==34&&y!==32&&y!==10&&y!==9&&y!==12&&y!==13){a=d;do{if(p=!1,a=r.indexOf(")",a+1),a===-1)if(n||T){a=d;break}else v("bracket");for(l=a;r.charCodeAt(l-1)===92;)l-=1,p=!p;}while(p);f=["brackets",r.slice(d,a+1),d,a],d=a;}else a=r.indexOf(")",d+1),o=r.slice(d,a+1),a===-1||Ic.test(o)?f=["(","(",d]:(f=["brackets",o,d,a],d=a);break}case 39:case 34:{c=i===39?"'":'"',a=d;do{if(p=!1,a=r.indexOf(c,a+1),a===-1)if(n||T){a=d+1;break}else v("string");for(l=a;r.charCodeAt(l-1)===92;)l-=1,p=!p;}while(p);f=["string",r.slice(d,a+1),d,a],d=a;break}case 64:{Ht.lastIndex=d+1,Ht.test(r),Ht.lastIndex===0?a=r.length-1:a=Ht.lastIndex-2,f=["at-word",r.slice(d,a+1),d,a],d=a;break}case 92:{for(a=d,u=!0;r.charCodeAt(a+1)===92;)a+=1,u=!u;if(i=r.charCodeAt(a+1),u&&i!==47&&i!==32&&i!==10&&i!==9&&i!==13&&i!==12&&(a+=1,ro.test(r.charAt(a)))){for(;ro.test(r.charAt(a+1));)a+=1;r.charCodeAt(a+1)===32&&(a+=1);}f=["word",r.slice(d,a+1),d,a],d=a;break}default:{i===47&&r.charCodeAt(d+1)===42?(a=r.indexOf("*/",d+2)+1,a===0&&(n||T?a=r.length:v("comment")),f=["comment",r.slice(d,a+1),d,a],d=a):(Kt.lastIndex=d+1,Kt.test(r),Kt.lastIndex===0?a=r.length-1:a=Kt.lastIndex-2,f=["word",r.slice(d,a+1),d,a],m.push(f),d=a);break}}return d++,f}function H(W){b.push(W);}return {back:H,endOfFile:N,nextToken:F,position:w}};});var Jt$1=g((Lv,oo)=>{var qc=Gt$1(),Lc=Re$1(),Dc=mt$1(),Bc=De$1(),no=jt$1(),Mc=Qt(),io={empty:!0,space:!0};function Uc(t){for(let e=t.length-1;e>=0;e--){let s=t[e],r=s[3]||s[2];if(r)return r}}var ms=class{constructor(e){this.input=e,this.root=new Bc,this.current=this.root,this.spaces="",this.semicolon=!1,this.createTokenizer(),this.root.source={input:e,start:{column:1,line:1,offset:0}};}atrule(e){let s=new qc;s.name=e[1].slice(1),s.name===""&&this.unnamedAtrule(s,e),this.init(s,e[2]);let r,n,i,o=!1,u=!1,a=[],c=[];for(;!this.tokenizer.endOfFile();){if(e=this.tokenizer.nextToken(),r=e[0],r==="("||r==="["?c.push(r==="("?")":"]"):r==="{"&&c.length>0?c.push("}"):r===c[c.length-1]&&c.pop(),c.length===0)if(r===";"){s.source.end=this.getPosition(e[2]),s.source.end.offset++,this.semicolon=!0;break}else if(r==="{"){u=!0;break}else if(r==="}"){if(a.length>0){for(i=a.length-1,n=a[i];n&&n[0]==="space";)n=a[--i];n&&(s.source.end=this.getPosition(n[3]||n[2]),s.source.end.offset++);}this.end(e);break}else a.push(e);else a.push(e);if(this.tokenizer.endOfFile()){o=!0;break}}s.raws.between=this.spacesAndCommentsFromEnd(a),a.length?(s.raws.afterName=this.spacesAndCommentsFromStart(a),this.raw(s,"params",a),o&&(e=a[a.length-1],s.source.end=this.getPosition(e[3]||e[2]),s.source.end.offset++,this.spaces=s.raws.between,s.raws.between="")):(s.raws.afterName="",s.params=""),u&&(s.nodes=[],this.current=s);}checkMissedSemicolon(e){let s=this.colon(e);if(s===!1)return;let r=0,n;for(let i=s-1;i>=0&&(n=e[i],!(n[0]!=="space"&&(r+=1,r===2)));i--);throw this.input.error("Missed semicolon",n[0]==="word"?n[3]+1:n[2])}colon(e){let s=0,r,n,i;for(let[o,u]of e.entries()){if(n=u,i=n[0],i==="("&&(s+=1),i===")"&&(s-=1),s===0&&i===":")if(!r)this.doubleColon(n);else {if(r[0]==="word"&&r[1]==="progid")continue;return o}r=n;}return !1}comment(e){let s=new Lc;this.init(s,e[2]),s.source.end=this.getPosition(e[3]||e[2]),s.source.end.offset++;let r=e[1].slice(2,-2);if(/^\s*$/.test(r))s.text="",s.raws.left=r,s.raws.right="";else {let n=r.match(/^(\s*)([^]*\S)(\s*)$/);s.text=n[2],s.raws.left=n[1],s.raws.right=n[3];}}createTokenizer(){this.tokenizer=Mc(this.input);}decl(e,s){let r=new Dc;this.init(r,e[0][2]);let n=e[e.length-1];for(n[0]===";"&&(this.semicolon=!0,e.pop()),r.source.end=this.getPosition(n[3]||n[2]||Uc(e)),r.source.end.offset++;e[0][0]!=="word";)e.length===1&&this.unknownWord(e),r.raws.before+=e.shift()[1];for(r.source.start=this.getPosition(e[0][2]),r.prop="";e.length;){let c=e[0][0];if(c===":"||c==="space"||c==="comment")break;r.prop+=e.shift()[1];}r.raws.between="";let i;for(;e.length;)if(i=e.shift(),i[0]===":"){r.raws.between+=i[1];break}else i[0]==="word"&&/\w/.test(i[1])&&this.unknownWord([i]),r.raws.between+=i[1];(r.prop[0]==="_"||r.prop[0]==="*")&&(r.raws.before+=r.prop[0],r.prop=r.prop.slice(1));let o=[],u;for(;e.length&&(u=e[0][0],!(u!=="space"&&u!=="comment"));)o.push(e.shift());this.precheckMissedSemicolon(e);for(let c=e.length-1;c>=0;c--){if(i=e[c],i[1].toLowerCase()==="!important"){r.important=!0;let f=this.stringFrom(e,c);f=this.spacesFromEnd(e)+f,f!==" !important"&&(r.raws.important=f);break}else if(i[1].toLowerCase()==="important"){let f=e.slice(0),p="";for(let l=c;l>0;l--){let y=f[l][0];if(p.trim().startsWith("!")&&y!=="space")break;p=f.pop()[1]+p;}p.trim().startsWith("!")&&(r.important=!0,r.raws.important=p,e=f);}if(i[0]!=="space"&&i[0]!=="comment")break}e.some(c=>c[0]!=="space"&&c[0]!=="comment")&&(r.raws.between+=o.map(c=>c[1]).join(""),o=[]),this.raw(r,"value",o.concat(e),s),r.value.includes(":")&&!s&&this.checkMissedSemicolon(e);}doubleColon(e){throw this.input.error("Double colon",{offset:e[2]},{offset:e[2]+e[1].length})}emptyRule(e){let s=new no;this.init(s,e[2]),s.selector="",s.raws.between="",this.current=s;}end(e){this.current.nodes&&this.current.nodes.length&&(this.current.raws.semicolon=this.semicolon),this.semicolon=!1,this.current.raws.after=(this.current.raws.after||"")+this.spaces,this.spaces="",this.current.parent?(this.current.source.end=this.getPosition(e[2]),this.current.source.end.offset++,this.current=this.current.parent):this.unexpectedClose(e);}endFile(){this.current.parent&&this.unclosedBlock(),this.current.nodes&&this.current.nodes.length&&(this.current.raws.semicolon=this.semicolon),this.current.raws.after=(this.current.raws.after||"")+this.spaces,this.root.source.end=this.getPosition(this.tokenizer.position());}freeSemicolon(e){if(this.spaces+=e[1],this.current.nodes){let s=this.current.nodes[this.current.nodes.length-1];s&&s.type==="rule"&&!s.raws.ownSemicolon&&(s.raws.ownSemicolon=this.spaces,this.spaces="");}}getPosition(e){let s=this.input.fromOffset(e);return {column:s.col,line:s.line,offset:e}}init(e,s){this.current.push(e),e.source={input:this.input,start:this.getPosition(s)},e.raws.before=this.spaces,this.spaces="",e.type!=="comment"&&(this.semicolon=!1);}other(e){let s=!1,r=null,n=!1,i=null,o=[],u=e[1].startsWith("--"),a=[],c=e;for(;c;){if(r=c[0],a.push(c),r==="("||r==="[")i||(i=c),o.push(r==="("?")":"]");else if(u&&n&&r==="{")i||(i=c),o.push("}");else if(o.length===0)if(r===";")if(n){this.decl(a,u);return}else break;else if(r==="{"){this.rule(a);return}else if(r==="}"){this.tokenizer.back(a.pop()),s=!0;break}else r===":"&&(n=!0);else r===o[o.length-1]&&(o.pop(),o.length===0&&(i=null));c=this.tokenizer.nextToken();}if(this.tokenizer.endOfFile()&&(s=!0),o.length>0&&this.unclosedBracket(i),s&&n){if(!u)for(;a.length&&(c=a[a.length-1][0],!(c!=="space"&&c!=="comment"));)this.tokenizer.back(a.pop());this.decl(a,u);}else this.unknownWord(a);}parse(){let e;for(;!this.tokenizer.endOfFile();)switch(e=this.tokenizer.nextToken(),e[0]){case"space":this.spaces+=e[1];break;case";":this.freeSemicolon(e);break;case"}":this.end(e);break;case"comment":this.comment(e);break;case"at-word":this.atrule(e);break;case"{":this.emptyRule(e);break;default:this.other(e);break}this.endFile();}precheckMissedSemicolon(){}raw(e,s,r,n){let i,o,u=r.length,a="",c=!0,f,p;for(let l=0;l<u;l+=1)i=r[l],o=i[0],o==="space"&&l===u-1&&!n?c=!1:o==="comment"?(p=r[l-1]?r[l-1][0]:"empty",f=r[l+1]?r[l+1][0]:"empty",!io[p]&&!io[f]?a.slice(-1)===","?c=!1:a+=i[1]:c=!1):a+=i[1];if(!c){let l=r.reduce((y,x)=>y+x[1],"");e.raws[s]={raw:l,value:a};}e[s]=a;}rule(e){e.pop();let s=new no;this.init(s,e[0][2]),s.raws.between=this.spacesAndCommentsFromEnd(e),this.raw(s,"selector",e),this.current=s;}spacesAndCommentsFromEnd(e){let s,r="";for(;e.length&&(s=e[e.length-1][0],!(s!=="space"&&s!=="comment"));)r=e.pop()[1]+r;return r}spacesAndCommentsFromStart(e){let s,r="";for(;e.length&&(s=e[0][0],!(s!=="space"&&s!=="comment"));)r+=e.shift()[1];return r}spacesFromEnd(e){let s,r="";for(;e.length&&(s=e[e.length-1][0],s==="space");)r=e.pop()[1]+r;return r}stringFrom(e,s){let r="";for(let n=s;n<e.length;n++)r+=e[n][1];return e.splice(s,e.length-s),r}unclosedBlock(){let e=this.current.source.start;throw this.input.error("Unclosed block",e.line,e.column)}unclosedBracket(e){throw this.input.error("Unclosed bracket",{offset:e[2]},{offset:e[2]+1})}unexpectedClose(e){throw this.input.error("Unexpected }",{offset:e[2]},{offset:e[2]+1})}unknownWord(e){throw this.input.error("Unknown word",{offset:e[0][2]},{offset:e[0][2]+e[0][1].length})}unnamedAtrule(e,s){throw this.input.error("At-rule without name",{offset:s[2]},{offset:s[2]+s[1].length})}};oo.exports=ms;});var gt=g((Dv,ao)=>{var Fc=ue(),$c=qe(),Wc=Jt$1();function Xt(t,e){let s=new $c(t,e),r=new Wc(s);try{r.parse();}catch(n){throw n}return r.root}ao.exports=Xt;Xt.default=Xt;Fc.registerParse(Xt);});var uo$1=g((Bv,ys)=>{var Yc=Qt(),zc=qe();ys.exports={isInlineComment(t){if(t[0]==="word"&&t[1].slice(0,2)==="//"){let e=t,s=[],r,n;for(;t;){if(/\r?\n/.test(t[1])){if(/['"].*\r?\n/.test(t[1])){s.push(t[1].substring(0,t[1].indexOf(`
`))),n=t[1].substring(t[1].indexOf(`
`));let o=this.input.css.valueOf().substring(this.tokenizer.position());n+=o,r=t[3]+o.length-n.length;}else this.tokenizer.back(t);break}s.push(t[1]),r=t[2],t=this.tokenizer.nextToken({ignoreUnclosed:!0});}let i=["comment",s.join(""),e[2],r];return this.inlineComment(i),n&&(this.input=new zc(n),this.tokenizer=Yc(this.input)),!0}else if(t[1]==="/"){let e=this.tokenizer.nextToken({ignoreUnclosed:!0});if(e[0]==="comment"&&/^\/\*/.test(e[1]))return e[0]="word",e[1]=e[1].slice(1),t[1]="//",this.tokenizer.back(e),ys.exports.isInlineComment.bind(this)(t)}return !1}};});var co$1=g((Mv,lo)=>{lo.exports={interpolation(t){let e=[t,this.tokenizer.nextToken()],s=["word","}"];if(e[0][1].length>1||e[1][0]!=="{")return this.tokenizer.back(e[1]),!1;for(t=this.tokenizer.nextToken();t&&s.includes(t[0]);)e.push(t),t=this.tokenizer.nextToken();let r=e.map(u=>u[1]),[n]=e,i=e.pop(),o=["word",r.join(""),n[2],i[2]];return this.tokenizer.back(t),this.tokenizer.back(o),!0}};});var po$1=g((Uv,fo)=>{var Vc=/^#[0-9a-fA-F]{6}$|^#[0-9a-fA-F]{3}$/,Gc=/\.[0-9]/,jc=t=>{let[,e]=t,[s]=e;return (s==="."||s==="#")&&Vc.test(e)===!1&&Gc.test(e)===!1};fo.exports={isMixinToken:jc};});var mo$1=g((Fv,ho)=>{var Hc=Qt(),Kc=/^url\((.+)\)/;ho.exports=t=>{let{name:e,params:s=""}=t;if(e==="import"&&s.length){t.import=!0;let r=Hc({css:s});for(t.filename=s.replace(Kc,"$1");!r.endOfFile();){let[n,i]=r.nextToken();if(n==="word"&&i==="url")return;if(n==="brackets"){t.options=i,t.filename=s.replace(i,"").trim();break}}}};});var vo$1=g(($v,wo)=>{var yo=/:$/,go=/^:(\s+)?/;wo.exports=t=>{let{name:e,params:s=""}=t;if(t.name.slice(-1)===":"){if(yo.test(e)){let[r]=e.match(yo);t.name=e.replace(r,""),t.raws.afterName=r+(t.raws.afterName||""),t.variable=!0,t.value=t.params;}if(go.test(s)){let[r]=s.match(go);t.value=s.replace(r,""),t.raws.afterName=(t.raws.afterName||"")+r,t.variable=!0;}}};});var _o$1=g((Yv,bo)=>{var Qc=Re$1(),Jc=Jt$1(),{isInlineComment:Xc}=uo$1(),{interpolation:xo}=co$1(),{isMixinToken:Zc}=po$1(),ef=mo$1(),tf=vo$1(),rf=/(!\s*important)$/i;bo.exports=class extends Jc{constructor(...e){super(...e),this.lastNode=null;}atrule(e){xo.bind(this)(e)||(super.atrule(e),ef(this.lastNode),tf(this.lastNode));}decl(...e){super.decl(...e),/extend\(.+\)/i.test(this.lastNode.value)&&(this.lastNode.extend=!0);}each(e){e[0][1]=` ${e[0][1]}`;let s=e.findIndex(u=>u[0]==="("),r=e.reverse().find(u=>u[0]===")"),n=e.reverse().indexOf(r),o=e.splice(s,n).map(u=>u[1]).join("");for(let u of e.reverse())this.tokenizer.back(u);this.atrule(this.tokenizer.nextToken()),this.lastNode.function=!0,this.lastNode.params=o;}init(e,s,r){super.init(e,s,r),this.lastNode=e;}inlineComment(e){let s=new Qc,r=e[1].slice(2);if(this.init(s,e[2]),s.source.end=this.getPosition(e[3]||e[2]),s.inline=!0,s.raws.begin="//",/^\s*$/.test(r))s.text="",s.raws.left=r,s.raws.right="";else {let n=r.match(/^(\s*)([^]*[^\s])(\s*)$/);[,s.raws.left,s.text,s.raws.right]=n;}}mixin(e){let[s]=e,r=s[1].slice(0,1),n=e.findIndex(c=>c[0]==="brackets"),i=e.findIndex(c=>c[0]==="("),o="";if((n<0||n>3)&&i>0){let c=e.reduce((w,v,N)=>v[0]===")"?N:w),p=e.slice(i,c+i).map(w=>w[1]).join(""),[l]=e.slice(i),y=[l[2],l[3]],[x]=e.slice(c,c+1),h=[x[2],x[3]],d=["brackets",p].concat(y,h),m=e.slice(0,i),b=e.slice(c+1);e=m,e.push(d),e=e.concat(b);}let u=[];for(let c of e)if((c[1]==="!"||u.length)&&u.push(c),c[1]==="important")break;if(u.length){let[c]=u,f=e.indexOf(c),p=u[u.length-1],l=[c[2],c[3]],y=[p[4],p[5]],h=["word",u.map(d=>d[1]).join("")].concat(l,y);e.splice(f,u.length,h);}let a=e.findIndex(c=>rf.test(c[1]));a>0&&([,o]=e[a],e.splice(a,1));for(let c of e.reverse())this.tokenizer.back(c);this.atrule(this.tokenizer.nextToken()),this.lastNode.mixin=!0,this.lastNode.raws.identifier=r,o&&(this.lastNode.important=!0,this.lastNode.raws.important=o);}other(e){Xc.bind(this)(e)||super.other(e);}rule(e){let s=e[e.length-1],r=e[e.length-2];if(r[0]==="at-word"&&s[0]==="{"&&(this.tokenizer.back(s),xo.bind(this)(r))){let i=this.tokenizer.nextToken();e=e.slice(0,e.length-2).concat([i]);for(let o of e.reverse())this.tokenizer.back(o);return}super.rule(e),/:extend\(.+\)/i.test(this.lastNode.selector)&&(this.lastNode.extend=!0);}unknownWord(e){let[s]=e;if(e[0][1]==="each"&&e[1][0]==="("){this.each(e);return}if(Zc(s)){this.mixin(e);return}super.unknownWord(e);}};});var Eo$1=g((Vv,ko)=>{var sf=Yt$1();ko.exports=class extends sf{atrule(e,s){if(!e.mixin&&!e.variable&&!e.function){super.atrule(e,s);return}let n=`${e.function?"":e.raws.identifier||"@"}${e.name}`,i=e.params?this.rawValue(e,"params"):"",o=e.raws.important||"";if(e.variable&&(i=e.value),typeof e.raws.afterName<"u"?n+=e.raws.afterName:i&&(n+=" "),e.nodes)this.block(e,n+i+o);else {let u=(e.raws.between||"")+o+(s?";":"");this.builder(n+i+u,e);}}comment(e){if(e.inline){let s=this.raw(e,"left","commentLeft"),r=this.raw(e,"right","commentRight");this.builder(`//${s}${e.text}${r}`,e);}else super.comment(e);}};});var So$1=g((Gv,gs)=>{var nf=qe(),of=_o$1(),af=Eo$1();gs.exports={parse(t,e){let s=new nf(t,e),r=new of(s);return r.parse(),r.root.walk(n=>{let i=s.css.lastIndexOf(n.source.input.css);if(i===0)return;if(i+n.source.input.css.length!==s.css.length)throw new Error("Invalid state detected in postcss-less");let o=i+n.source.start.offset,u=s.fromOffset(i+n.source.start.offset);if(n.source.start={offset:o,line:u.line,column:u.col},n.source.end){let a=i+n.source.end.offset,c=s.fromOffset(i+n.source.end.offset);n.source.end={offset:a,line:c.line,column:c.col};}}),r.root},stringify(t,e){new af(e).stringify(t);},nodeToString(t){let e="";return gs.exports.stringify(t,s=>{e+=s;}),e}};});var Zt$1=g((jv,Oo)=>{var uf=ue(),To,Co,ye=class extends uf{constructor(e){super({type:"document",...e}),this.nodes||(this.nodes=[]);}toResult(e={}){return new To(new Co,this,e).stringify()}};ye.registerLazyResult=t=>{To=t;};ye.registerProcessor=t=>{Co=t;};Oo.exports=ye;ye.default=ye;});var No$1=g((Hv,Ao)=>{var lf=Gt$1(),cf=Re$1(),ff=mt$1(),pf=qe(),hf=ls$1(),df=De$1(),mf=jt$1();function wt(t,e){if(Array.isArray(t))return t.map(n=>wt(n));let{inputs:s,...r}=t;if(s){e=[];for(let n of s){let i={...n,__proto__:pf.prototype};i.map&&(i.map={...i.map,__proto__:hf.prototype}),e.push(i);}}if(r.nodes&&(r.nodes=t.nodes.map(n=>wt(n,e))),r.source){let{inputId:n,...i}=r.source;r.source=i,n!=null&&(r.source.input=e[n]);}if(r.type==="root")return new df(r);if(r.type==="decl")return new ff(r);if(r.type==="rule")return new mf(r);if(r.type==="comment")return new cf(r);if(r.type==="atrule")return new lf(r);throw new Error("Unknown node type: "+t.type)}Ao.exports=wt;wt.default=wt;});var ws$1=g((Kv,Po)=>{Po.exports=class{generate(){}};});var vs=g((Jv,Ro)=>{var vt=class{constructor(e,s={}){if(this.type="warning",this.text=e,s.node&&s.node.source){let r=s.node.rangeBy(s);this.line=r.start.line,this.column=r.start.column,this.endLine=r.end.line,this.endColumn=r.end.column;}for(let r in s)this[r]=s[r];}toString(){return this.node?this.node.error(this.text,{index:this.index,plugin:this.plugin,word:this.word}).message:this.plugin?this.plugin+": "+this.text:this.text}};Ro.exports=vt;vt.default=vt;});var er$1=g((Xv,Io)=>{var yf=vs(),xt=class{constructor(e,s,r){this.processor=e,this.messages=[],this.root=s,this.opts=r,this.css=void 0,this.map=void 0;}toString(){return this.css}warn(e,s={}){s.plugin||this.lastPlugin&&this.lastPlugin.postcssPlugin&&(s.plugin=this.lastPlugin.postcssPlugin);let r=new yf(e,s);return this.messages.push(r),r}warnings(){return this.messages.filter(e=>e.type==="warning")}get content(){return this.css}};Io.exports=xt;xt.default=xt;});var xs$1=g((Zv,Lo)=>{var qo={};Lo.exports=function(e){qo[e]||(qo[e]=!0,typeof console<"u"&&console.warn&&console.warn(e));};});var ks$1=g((tx,Uo)=>{var gf=ue(),wf=Zt$1(),vf=ws$1(),xf=gt(),Do=er$1(),bf=De$1(),_f=ut$1(),{isClean:j,my:kf}=zt();xs$1();var Ef={atrule:"AtRule",comment:"Comment",decl:"Declaration",document:"Document",root:"Root",rule:"Rule"},Sf={AtRule:!0,AtRuleExit:!0,Comment:!0,CommentExit:!0,Declaration:!0,DeclarationExit:!0,Document:!0,DocumentExit:!0,Once:!0,OnceExit:!0,postcssPlugin:!0,prepare:!0,Root:!0,RootExit:!0,Rule:!0,RuleExit:!0},Tf={Once:!0,postcssPlugin:!0,prepare:!0},Me=0;function bt(t){return typeof t=="object"&&typeof t.then=="function"}function Mo(t){let e=!1,s=Ef[t.type];return t.type==="decl"?e=t.prop.toLowerCase():t.type==="atrule"&&(e=t.name.toLowerCase()),e&&t.append?[s,s+"-"+e,Me,s+"Exit",s+"Exit-"+e]:e?[s,s+"-"+e,s+"Exit",s+"Exit-"+e]:t.append?[s,Me,s+"Exit"]:[s,s+"Exit"]}function Bo(t){let e;return t.type==="document"?e=["Document",Me,"DocumentExit"]:t.type==="root"?e=["Root",Me,"RootExit"]:e=Mo(t),{eventIndex:0,events:e,iterator:0,node:t,visitorIndex:0,visitors:[]}}function bs(t){return t[j]=!1,t.nodes&&t.nodes.forEach(e=>bs(e)),t}var _s={},ce=class t{constructor(e,s,r){this.stringified=!1,this.processed=!1;let n;if(typeof s=="object"&&s!==null&&(s.type==="root"||s.type==="document"))n=bs(s);else if(s instanceof t||s instanceof Do)n=bs(s.root),s.map&&(typeof r.map>"u"&&(r.map={}),r.map.inline||(r.map.inline=!1),r.map.prev=s.map);else {let i=xf;r.syntax&&(i=r.syntax.parse),r.parser&&(i=r.parser),i.parse&&(i=i.parse);try{n=i(s,r);}catch(o){this.processed=!0,this.error=o;}n&&!n[kf]&&gf.rebuild(n);}this.result=new Do(e,n,r),this.helpers={..._s,postcss:_s,result:this.result},this.plugins=this.processor.plugins.map(i=>typeof i=="object"&&i.prepare?{...i,...i.prepare(this.result)}:i);}async(){return this.error?Promise.reject(this.error):this.processed?Promise.resolve(this.result):(this.processing||(this.processing=this.runAsync()),this.processing)}catch(e){return this.async().catch(e)}finally(e){return this.async().then(e,e)}getAsyncError(){throw new Error("Use process(css).then(cb) to work with async plugins")}handleError(e,s){let r=this.result.lastPlugin;try{s&&s.addToError(e),this.error=e,e.name==="CssSyntaxError"&&!e.plugin?(e.plugin=r.postcssPlugin,e.setMessage()):r.postcssVersion;}catch(n){console&&console.error&&console.error(n);}return e}prepareVisitors(){this.listeners={};let e=(s,r,n)=>{this.listeners[r]||(this.listeners[r]=[]),this.listeners[r].push([s,n]);};for(let s of this.plugins)if(typeof s=="object")for(let r in s){if(!Sf[r]&&/^[A-Z]/.test(r))throw new Error(`Unknown event ${r} in ${s.postcssPlugin}. Try to update PostCSS (${this.processor.version} now).`);if(!Tf[r])if(typeof s[r]=="object")for(let n in s[r])n==="*"?e(s,r,s[r][n]):e(s,r+"-"+n.toLowerCase(),s[r][n]);else typeof s[r]=="function"&&e(s,r,s[r]);}this.hasListener=Object.keys(this.listeners).length>0;}async runAsync(){this.plugin=0;for(let e=0;e<this.plugins.length;e++){let s=this.plugins[e],r=this.runOnRoot(s);if(bt(r))try{await r;}catch(n){throw this.handleError(n)}}if(this.prepareVisitors(),this.hasListener){let e=this.result.root;for(;!e[j];){e[j]=!0;let s=[Bo(e)];for(;s.length>0;){let r=this.visitTick(s);if(bt(r))try{await r;}catch(n){let i=s[s.length-1].node;throw this.handleError(n,i)}}}if(this.listeners.OnceExit)for(let[s,r]of this.listeners.OnceExit){this.result.lastPlugin=s;try{if(e.type==="document"){let n=e.nodes.map(i=>r(i,this.helpers));await Promise.all(n);}else await r(e,this.helpers);}catch(n){throw this.handleError(n)}}}return this.processed=!0,this.stringify()}runOnRoot(e){this.result.lastPlugin=e;try{if(typeof e=="object"&&e.Once){if(this.result.root.type==="document"){let s=this.result.root.nodes.map(r=>e.Once(r,this.helpers));return bt(s[0])?Promise.all(s):s}return e.Once(this.result.root,this.helpers)}else if(typeof e=="function")return e(this.result.root,this.result)}catch(s){throw this.handleError(s)}}stringify(){if(this.error)throw this.error;if(this.stringified)return this.result;this.stringified=!0,this.sync();let e=this.result.opts,s=_f;e.syntax&&(s=e.syntax.stringify),e.stringifier&&(s=e.stringifier),s.stringify&&(s=s.stringify);let n=new vf(s,this.result.root,this.result.opts).generate();return this.result.css=n[0],this.result.map=n[1],this.result}sync(){if(this.error)throw this.error;if(this.processed)return this.result;if(this.processed=!0,this.processing)throw this.getAsyncError();for(let e of this.plugins){let s=this.runOnRoot(e);if(bt(s))throw this.getAsyncError()}if(this.prepareVisitors(),this.hasListener){let e=this.result.root;for(;!e[j];)e[j]=!0,this.walkSync(e);if(this.listeners.OnceExit)if(e.type==="document")for(let s of e.nodes)this.visitSync(this.listeners.OnceExit,s);else this.visitSync(this.listeners.OnceExit,e);}return this.result}then(e,s){return this.async().then(e,s)}toString(){return this.css}visitSync(e,s){for(let[r,n]of e){this.result.lastPlugin=r;let i;try{i=n(s,this.helpers);}catch(o){throw this.handleError(o,s.proxyOf)}if(s.type!=="root"&&s.type!=="document"&&!s.parent)return !0;if(bt(i))throw this.getAsyncError()}}visitTick(e){let s=e[e.length-1],{node:r,visitors:n}=s;if(r.type!=="root"&&r.type!=="document"&&!r.parent){e.pop();return}if(n.length>0&&s.visitorIndex<n.length){let[o,u]=n[s.visitorIndex];s.visitorIndex+=1,s.visitorIndex===n.length&&(s.visitors=[],s.visitorIndex=0),this.result.lastPlugin=o;try{return u(r.toProxy(),this.helpers)}catch(a){throw this.handleError(a,r)}}if(s.iterator!==0){let o=s.iterator,u;for(;u=r.nodes[r.indexes[o]];)if(r.indexes[o]+=1,!u[j]){u[j]=!0,e.push(Bo(u));return}s.iterator=0,delete r.indexes[o];}let i=s.events;for(;s.eventIndex<i.length;){let o=i[s.eventIndex];if(s.eventIndex+=1,o===Me){r.nodes&&r.nodes.length&&(r[j]=!0,s.iterator=r.getIterator());return}else if(this.listeners[o]){s.visitors=this.listeners[o];return}}e.pop();}walkSync(e){e[j]=!0;let s=Mo(e);for(let r of s)if(r===Me)e.nodes&&e.each(n=>{n[j]||this.walkSync(n);});else {let n=this.listeners[r];if(n&&this.visitSync(n,e.toProxy()))return}}warnings(){return this.sync().warnings()}get content(){return this.stringify().content}get css(){return this.stringify().css}get map(){return this.stringify().map}get messages(){return this.sync().messages}get opts(){return this.result.opts}get processor(){return this.result.processor}get root(){return this.sync().root}get[Symbol.toStringTag](){return "LazyResult"}};ce.registerPostcss=t=>{_s=t;};Uo.exports=ce;ce.default=ce;bf.registerLazyResult(ce);wf.registerLazyResult(ce);});var $o$1=g((sx,Fo)=>{var Cf=ws$1(),Of=gt(),Af=er$1(),Nf=ut$1();xs$1();var _t=class{constructor(e,s,r){s=s.toString(),this.stringified=!1,this._processor=e,this._css=s,this._opts=r,this._map=void 0;let n,i=Nf;this.result=new Af(this._processor,n,this._opts),this.result.css=s;let o=this;Object.defineProperty(this.result,"root",{get(){return o.root}});let u=new Cf(i,n,this._opts,s);if(u.isMap()){let[a,c]=u.generate();a&&(this.result.css=a),c&&(this.result.map=c);}else u.clearAnnotation(),this.result.css=u.css;}async(){return this.error?Promise.reject(this.error):Promise.resolve(this.result)}catch(e){return this.async().catch(e)}finally(e){return this.async().then(e,e)}sync(){if(this.error)throw this.error;return this.result}then(e,s){return this.async().then(e,s)}toString(){return this._css}warnings(){return []}get content(){return this.result.css}get css(){return this.result.css}get map(){return this.result.map}get messages(){return []}get opts(){return this.result.opts}get processor(){return this.result.processor}get root(){if(this._root)return this._root;let e,s=Of;try{e=s(this._css,this._opts);}catch(r){this.error=r;}if(this.error)throw this.error;return this._root=e,e}get[Symbol.toStringTag](){return "NoWorkResult"}};Fo.exports=_t;_t.default=_t;});var Yo$1=g((nx,Wo)=>{var Pf=Zt$1(),Rf=ks$1(),If=$o$1(),qf=De$1(),ge=class{constructor(e=[]){this.version="8.4.49",this.plugins=this.normalize(e);}normalize(e){let s=[];for(let r of e)if(r.postcss===!0?r=r():r.postcss&&(r=r.postcss),typeof r=="object"&&Array.isArray(r.plugins))s=s.concat(r.plugins);else if(typeof r=="object"&&r.postcssPlugin)s.push(r);else if(typeof r=="function")s.push(r);else if(!(typeof r=="object"&&(r.parse||r.stringify)))throw new Error(r+" is not a PostCSS plugin");return s}process(e,s={}){return !this.plugins.length&&!s.parser&&!s.stringifier&&!s.syntax?new If(this,e,s):new Rf(this,e,s)}use(e){return this.plugins=this.plugins.concat(this.normalize([e])),this}};Wo.exports=ge;ge.default=ge;qf.registerProcessor(ge);Pf.registerProcessor(ge);});var tr$1=g((ix,Qo)=>{var zo=Gt$1(),Vo=Re$1(),Lf=ue(),Df=Wt$1(),Go=mt$1(),jo=Zt$1(),Bf=No$1(),Mf=qe(),Uf=ks$1(),Ff=ds$1(),$f=pt$1(),Wf=gt(),Es=Yo$1(),Yf=er$1(),Ho=De$1(),Ko=jt$1(),zf=ut$1(),Vf=vs();function E(...t){return t.length===1&&Array.isArray(t[0])&&(t=t[0]),new Es(t)}E.plugin=function(e,s){let r=!1;function n(...o){console&&console.warn&&!r&&(r=!0,console.warn(e+`: postcss.plugin was deprecated. Migration guide:
https://evilmartians.com/chronicles/postcss-8-plugin-migration`));let u=s(...o);return u.postcssPlugin=e,u.postcssVersion=new Es().version,u}let i;return Object.defineProperty(n,"postcss",{get(){return i||(i=n()),i}}),n.process=function(o,u,a){return E([n(a)]).process(o,u)},n};E.stringify=zf;E.parse=Wf;E.fromJSON=Bf;E.list=Ff;E.comment=t=>new Vo(t);E.atRule=t=>new zo(t);E.decl=t=>new Go(t);E.rule=t=>new Ko(t);E.root=t=>new Ho(t);E.document=t=>new jo(t);E.CssSyntaxError=Df;E.Declaration=Go;E.Container=Lf;E.Processor=Es;E.Document=jo;E.Comment=Vo;E.Warning=Vf;E.AtRule=zo;E.Result=Yf;E.Input=Mf;E.Rule=Ko;E.Root=Ho;E.Node=$f;Uf.registerPostcss(E);Qo.exports=E;E.default=E;});var Xo$1=g((ox,Jo)=>{var{Container:Gf}=tr$1(),Ss=class extends Gf{constructor(e){super(e),this.type="decl",this.isNested=!0,this.nodes||(this.nodes=[]);}};Jo.exports=Ss;});var ta$1=g((ax,ea)=>{var rr=/[\t\n\f\r "#'()/;[\\\]{}]/g,sr=/[,\t\n\f\r !"#'():;@[\\\]{}]|\/(?=\*)/g,jf=/.[\r\n"'(/\\]/,Zo=/[\da-f]/i,nr=/[\n\f\r]/g;ea.exports=function(e,s={}){let r=e.css.valueOf(),n=s.ignoreErrors,i,o,u,a,c,f,p,l,y,x=r.length,h=0,d=[],m=[],b;function w(){return h}function v(T){throw e.error("Unclosed "+T,h)}function N(){return m.length===0&&h>=x}function F(){let T=1,C=!1,O=!1;for(;T>0;)o+=1,r.length<=o&&v("interpolation"),i=r.charCodeAt(o),l=r.charCodeAt(o+1),C?!O&&i===C?(C=!1,O=!1):i===92?O=!O:O&&(O=!1):i===39||i===34?C=i:i===125?T-=1:i===35&&l===123&&(T+=1);}function H(T){if(m.length)return m.pop();if(h>=x)return;let C=T?T.ignoreUnclosed:!1;switch(i=r.charCodeAt(h),i){case 10:case 32:case 9:case 13:case 12:{o=h;do o+=1,i=r.charCodeAt(o);while(i===32||i===10||i===9||i===13||i===12);y=["space",r.slice(h,o)],h=o-1;break}case 91:case 93:case 123:case 125:case 58:case 59:case 41:{let O=String.fromCharCode(i);y=[O,O,h];break}case 44:{y=["word",",",h,h+1];break}case 40:{if(p=d.length?d.pop()[1]:"",l=r.charCodeAt(h+1),p==="url"&&l!==39&&l!==34){for(b=1,f=!1,o=h+1;o<=r.length-1;){if(l=r.charCodeAt(o),l===92)f=!f;else if(l===40)b+=1;else if(l===41&&(b-=1,b===0))break;o+=1;}a=r.slice(h,o+1),y=["brackets",a,h,o],h=o;}else o=r.indexOf(")",h+1),a=r.slice(h,o+1),o===-1||jf.test(a)?y=["(","(",h]:(y=["brackets",a,h,o],h=o);break}case 39:case 34:{for(u=i,o=h,f=!1;o<x&&(o++,o===x&&v("string"),i=r.charCodeAt(o),l=r.charCodeAt(o+1),!(!f&&i===u));)i===92?f=!f:f?f=!1:i===35&&l===123&&F();y=["string",r.slice(h,o+1),h,o],h=o;break}case 64:{rr.lastIndex=h+1,rr.test(r),rr.lastIndex===0?o=r.length-1:o=rr.lastIndex-2,y=["at-word",r.slice(h,o+1),h,o],h=o;break}case 92:{for(o=h,c=!0;r.charCodeAt(o+1)===92;)o+=1,c=!c;if(i=r.charCodeAt(o+1),c&&i!==47&&i!==32&&i!==10&&i!==9&&i!==13&&i!==12&&(o+=1,Zo.test(r.charAt(o)))){for(;Zo.test(r.charAt(o+1));)o+=1;r.charCodeAt(o+1)===32&&(o+=1);}y=["word",r.slice(h,o+1),h,o],h=o;break}default:l=r.charCodeAt(h+1),i===35&&l===123?(o=h,F(),a=r.slice(h,o+1),y=["word",a,h,o],h=o):i===47&&l===42?(o=r.indexOf("*/",h+2)+1,o===0&&(n||C?o=r.length:v("comment")),y=["comment",r.slice(h,o+1),h,o],h=o):i===47&&l===47?(nr.lastIndex=h+1,nr.test(r),nr.lastIndex===0?o=r.length-1:o=nr.lastIndex-2,a=r.slice(h,o+1),y=["comment",a,h,o,"inline"],h=o):(sr.lastIndex=h+1,sr.test(r),sr.lastIndex===0?o=r.length-1:o=sr.lastIndex-2,y=["word",r.slice(h,o+1),h,o],d.push(y),h=o);break}return h++,y}function W(T){m.push(T);}return {back:W,endOfFile:N,nextToken:H,position:w}};});var sa$1=g((ux,ra)=>{var{Comment:Hf}=tr$1(),Kf=Jt$1(),Qf=Xo$1(),Jf=ta$1(),Ts=class extends Kf{atrule(e){let s=e[1],r=e;for(;!this.tokenizer.endOfFile();){let n=this.tokenizer.nextToken();if(n[0]==="word"&&n[2]===r[3]+1)s+=n[1],r=n;else {this.tokenizer.back(n);break}}super.atrule(["at-word",s,e[2],r[3]]);}comment(e){if(e[4]==="inline"){let s=new Hf;this.init(s,e[2]),s.raws.inline=!0;let r=this.input.fromOffset(e[3]);s.source.end={column:r.col,line:r.line,offset:e[3]+1};let n=e[1].slice(2);if(/^\s*$/.test(n))s.text="",s.raws.left=n,s.raws.right="";else {let i=n.match(/^(\s*)([^]*\S)(\s*)$/),o=i[2].replace(/(\*\/|\/\*)/g,"*//*");s.text=o,s.raws.left=i[1],s.raws.right=i[3],s.raws.text=i[2];}}else super.comment(e);}createTokenizer(){this.tokenizer=Jf(this.input);}raw(e,s,r,n){if(super.raw(e,s,r,n),e.raws[s]){let i=e.raws[s].raw;e.raws[s].raw=r.reduce((o,u)=>{if(u[0]==="comment"&&u[4]==="inline"){let a=u[1].slice(2).replace(/(\*\/|\/\*)/g,"*//*");return o+"/*"+a+"*/"}else return o+u[1]},""),i!==e.raws[s].raw&&(e.raws[s].scss=i);}}rule(e){let s=!1,r=0,n="";for(let i of e)if(s)i[0]!=="comment"&&i[0]!=="{"&&(n+=i[1]);else {if(i[0]==="space"&&i[1].includes(`
`))break;i[0]==="("?r+=1:i[0]===")"?r-=1:r===0&&i[0]===":"&&(s=!0);}if(!s||n.trim()===""||/^[#:A-Za-z-]/.test(n))super.rule(e);else {e.pop();let i=new Qf;this.init(i,e[0][2]);let o;for(let a=e.length-1;a>=0;a--)if(e[a][0]!=="space"){o=e[a];break}if(o[3]){let a=this.input.fromOffset(o[3]);i.source.end={column:a.col,line:a.line,offset:o[3]+1};}else {let a=this.input.fromOffset(o[2]);i.source.end={column:a.col,line:a.line,offset:o[2]+1};}for(;e[0][0]!=="word";)i.raws.before+=e.shift()[1];if(e[0][2]){let a=this.input.fromOffset(e[0][2]);i.source.start={column:a.col,line:a.line,offset:e[0][2]};}for(i.prop="";e.length;){let a=e[0][0];if(a===":"||a==="space"||a==="comment")break;i.prop+=e.shift()[1];}i.raws.between="";let u;for(;e.length;)if(u=e.shift(),u[0]===":"){i.raws.between+=u[1];break}else i.raws.between+=u[1];(i.prop[0]==="_"||i.prop[0]==="*")&&(i.raws.before+=i.prop[0],i.prop=i.prop.slice(1)),i.raws.between+=this.spacesAndCommentsFromStart(e),this.precheckMissedSemicolon(e);for(let a=e.length-1;a>0;a--){if(u=e[a],u[1]==="!important"){i.important=!0;let c=this.stringFrom(e,a);c=this.spacesFromEnd(e)+c,c!==" !important"&&(i.raws.important=c);break}else if(u[1]==="important"){let c=e.slice(0),f="";for(let p=a;p>0;p--){let l=c[p][0];if(f.trim().indexOf("!")===0&&l!=="space")break;f=c.pop()[1]+f;}f.trim().indexOf("!")===0&&(i.important=!0,i.raws.important=f,e=c);}if(u[0]!=="space"&&u[0]!=="comment")break}this.raw(i,"value",e),i.value.includes(":")&&this.checkMissedSemicolon(e),this.current=i;}}};ra.exports=Ts;});var ia$1=g((lx,na)=>{var{Input:Xf}=tr$1(),Zf=sa$1();na.exports=function(e,s){let r=new Xf(e,s),n=new Zf(r);return n.parse(),n.root};});var Os$1=g(Cs=>{Object.defineProperty(Cs,"__esModule",{value:!0});function tp(t){this.after=t.after,this.before=t.before,this.type=t.type,this.value=t.value,this.sourceIndex=t.sourceIndex;}Cs.default=tp;});var Ns$1=g(As=>{Object.defineProperty(As,"__esModule",{value:!0});var rp=Os$1(),aa=sp(rp);function sp(t){return t&&t.__esModule?t:{default:t}}function kt(t){var e=this;this.constructor(t),this.nodes=t.nodes,this.after===void 0&&(this.after=this.nodes.length>0?this.nodes[this.nodes.length-1].after:""),this.before===void 0&&(this.before=this.nodes.length>0?this.nodes[0].before:""),this.sourceIndex===void 0&&(this.sourceIndex=this.before.length),this.nodes.forEach(function(s){s.parent=e;});}kt.prototype=Object.create(aa.default.prototype);kt.constructor=aa.default;kt.prototype.walk=function(e,s){for(var r=typeof e=="string"||e instanceof RegExp,n=r?s:e,i=typeof e=="string"?new RegExp(e):e,o=0;o<this.nodes.length;o++){var u=this.nodes[o],a=r?i.test(u.type):!0;if(a&&n&&n(u,o,this.nodes)===!1||u.nodes&&u.walk(e,s)===!1)return !1}return !0};kt.prototype.each=function(){for(var e=arguments.length<=0||arguments[0]===void 0?function(){}:arguments[0],s=0;s<this.nodes.length;s++){var r=this.nodes[s];if(e(r,s,this.nodes)===!1)return !1}return !0};As.default=kt;});var fa$1=g(Et=>{Object.defineProperty(Et,"__esModule",{value:!0});Et.parseMediaFeature=ca;Et.parseMediaQuery=Rs;Et.parseMediaList=op;var np=Os$1(),ua=la(np),ip=Ns$1(),Ps=la(ip);function la(t){return t&&t.__esModule?t:{default:t}}function ca(t){var e=arguments.length<=1||arguments[1]===void 0?0:arguments[1],s=[{mode:"normal",character:null}],r=[],n=0,i="",o=null,u=null,a=e,c=t;t[0]==="("&&t[t.length-1]===")"&&(c=t.substring(1,t.length-1),a++);for(var f=0;f<c.length;f++){var p=c[f];if((p==="'"||p==='"')&&(s[n].isCalculationEnabled===!0?(s.push({mode:"string",isCalculationEnabled:!1,character:p}),n++):s[n].mode==="string"&&s[n].character===p&&c[f-1]!=="\\"&&(s.pop(),n--)),p==="{"?(s.push({mode:"interpolation",isCalculationEnabled:!0}),n++):p==="}"&&(s.pop(),n--),s[n].mode==="normal"&&p===":"){var l=c.substring(f+1);u={type:"value",before:/^(\s*)/.exec(l)[1],after:/(\s*)$/.exec(l)[1],value:l.trim()},u.sourceIndex=u.before.length+f+1+a,o={type:"colon",sourceIndex:f+a,after:u.before,value:":"};break}i+=p;}return i={type:"media-feature",before:/^(\s*)/.exec(i)[1],after:/(\s*)$/.exec(i)[1],value:i.trim()},i.sourceIndex=i.before.length+a,r.push(i),o!==null&&(o.before=i.after,r.push(o)),u!==null&&r.push(u),r}function Rs(t){var e=arguments.length<=1||arguments[1]===void 0?0:arguments[1],s=[],r=0,n=!1,i=void 0;function o(){return {before:"",after:"",value:""}}i=o();for(var u=0;u<t.length;u++){var a=t[u];n?(i.value+=a,(a==="{"||a==="(")&&r++,(a===")"||a==="}")&&r--):a.search(/\s/)!==-1?i.before+=a:(a==="("&&(i.type="media-feature-expression",r++),i.value=a,i.sourceIndex=e+u,n=!0),n&&r===0&&(a===")"||u===t.length-1||t[u+1].search(/\s/)!==-1)&&(["not","only","and"].indexOf(i.value)!==-1&&(i.type="keyword"),i.type==="media-feature-expression"&&(i.nodes=ca(i.value,i.sourceIndex)),s.push(Array.isArray(i.nodes)?new Ps.default(i):new ua.default(i)),i=o(),n=!1);}for(var c=0;c<s.length;c++)if(i=s[c],c>0&&(s[c-1].after=i.before),i.type===void 0){if(c>0){if(s[c-1].type==="media-feature-expression"){i.type="keyword";continue}if(s[c-1].value==="not"||s[c-1].value==="only"){i.type="media-type";continue}if(s[c-1].value==="and"){i.type="media-feature-expression";continue}s[c-1].type==="media-type"&&(s[c+1]?i.type=s[c+1].type==="media-feature-expression"?"keyword":"media-feature-expression":i.type="media-feature-expression");}if(c===0){if(!s[c+1]){i.type="media-type";continue}if(s[c+1]&&(s[c+1].type==="media-feature-expression"||s[c+1].type==="keyword")){i.type="media-type";continue}if(s[c+2]){if(s[c+2].type==="media-feature-expression"){i.type="media-type",s[c+1].type="keyword";continue}if(s[c+2].type==="keyword"){i.type="keyword",s[c+1].type="media-type";continue}}if(s[c+3]&&s[c+3].type==="media-feature-expression"){i.type="keyword",s[c+1].type="media-type",s[c+2].type="keyword";continue}}}return s}function op(t){var e=[],s=0,r=0,n=/^(\s*)url\s*\(/.exec(t);if(n!==null){for(var i=n[0].length,o=1;o>0;){var u=t[i];u==="("&&o++,u===")"&&o--,i++;}e.unshift(new ua.default({type:"url",value:t.substring(0,i).trim(),sourceIndex:n[1].length,before:n[1],after:/^(\s*)/.exec(t.substring(i))[1]})),s=i;}for(var a=s;a<t.length;a++){var c=t[a];if(c==="("&&r++,c===")"&&r--,r===0&&c===","){var f=t.substring(s,a),p=/^(\s*)/.exec(f)[1];e.push(new Ps.default({type:"media-query",value:f.trim(),sourceIndex:s+p.length,nodes:Rs(f,s),before:p,after:/(\s*)$/.exec(f)[1]})),s=a+1;}}var l=t.substring(s),y=/^(\s*)/.exec(l)[1];return e.push(new Ps.default({type:"media-query",value:l.trim(),sourceIndex:s+y.length,nodes:Rs(l,s),before:y,after:/(\s*)$/.exec(l)[1]})),e}});var pa$1=g(Is=>{Object.defineProperty(Is,"__esModule",{value:!0});Is.default=fp;var ap=Ns$1(),up=cp(ap),lp=fa$1();function cp(t){return t&&t.__esModule?t:{default:t}}function fp(t){return new up.default({nodes:(0, lp.parseMediaList)(t),type:"media-query-list",value:t.trim()})}});var Ls$1=g((wx,ma)=>{ma.exports=function(e,s){if(s=typeof s=="number"?s:1/0,!s)return Array.isArray(e)?e.map(function(n){return n}):e;return r(e,1);function r(n,i){return n.reduce(function(o,u){return Array.isArray(u)&&i<s?o.concat(r(u,i+1)):o.concat(u)},[])}};});var Ds$1=g((vx,ya)=>{ya.exports=function(t,e){for(var s=-1,r=[];(s=t.indexOf(e,s+1))!==-1;)r.push(s);return r};});var Bs$1=g((xx,ga)=>{function dp(t,e){for(var s=1,r=t.length,n=t[0],i=t[0],o=1;o<r;++o)if(i=n,n=t[o],e(n,i)){if(o===s){s++;continue}t[s++]=n;}return t.length=s,t}function mp(t){for(var e=1,s=t.length,r=t[0],n=t[0],i=1;i<s;++i,n=r)if(n=r,r=t[i],r!==n){if(i===e){e++;continue}t[e++]=r;}return t.length=e,t}function yp(t,e,s){return t.length===0?t:e?(s||t.sort(e),dp(t,e)):(s||t.sort(),mp(t))}ga.exports=yp;});var we$1=g((ir,va)=>{ir.__esModule=!0;var wa=typeof Symbol=="function"&&typeof Symbol.iterator=="symbol"?function(t){return typeof t}:function(t){return t&&typeof Symbol=="function"&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t};function gp(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}var wp=function t(e,s){if((typeof e>"u"?"undefined":wa(e))!=="object")return e;var r=new e.constructor;for(var n in e)if(e.hasOwnProperty(n)){var i=e[n],o=typeof i>"u"?"undefined":wa(i);n==="parent"&&o==="object"?s&&(r[n]=s):i instanceof Array?r[n]=i.map(function(u){return t(u,r)}):r[n]=t(i,r);}return r},vp=function(){function t(){var e=arguments.length>0&&arguments[0]!==void 0?arguments[0]:{};gp(this,t);for(var s in e)this[s]=e[s];var r=e.spaces;r=r===void 0?{}:r;var n=r.before,i=n===void 0?"":n,o=r.after,u=o===void 0?"":o;this.spaces={before:i,after:u};}return t.prototype.remove=function(){return this.parent&&this.parent.removeChild(this),this.parent=void 0,this},t.prototype.replaceWith=function(){if(this.parent){for(var s in arguments)this.parent.insertBefore(this,arguments[s]);this.remove();}return this},t.prototype.next=function(){return this.parent.at(this.parent.index(this)+1)},t.prototype.prev=function(){return this.parent.at(this.parent.index(this)-1)},t.prototype.clone=function(){var s=arguments.length>0&&arguments[0]!==void 0?arguments[0]:{},r=wp(this);for(var n in s)r[n]=s[n];return r},t.prototype.toString=function(){return [this.spaces.before,String(this.value),this.spaces.after].join("")},t}();ir.default=vp;va.exports=ir.default;});var D=g(M=>{M.__esModule=!0;M.TAG="tag";M.STRING="string";M.SELECTOR="selector";M.ROOT="root";M.PSEUDO="pseudo";M.NESTING="nesting";M.ID="id";M.COMMENT="comment";M.COMBINATOR="combinator";M.CLASS="class";M.ATTRIBUTE="attribute";M.UNIVERSAL="universal";});var ar$1=g((or,xa)=>{or.__esModule=!0;var xp=function(){function t(e,s){for(var r=0;r<s.length;r++){var n=s[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n);}}return function(e,s,r){return s&&t(e.prototype,s),r&&t(e,r),e}}(),bp=we$1(),_p=Sp(bp),kp=D(),Z=Ep(kp);function Ep(t){if(t&&t.__esModule)return t;var e={};if(t!=null)for(var s in t)Object.prototype.hasOwnProperty.call(t,s)&&(e[s]=t[s]);return e.default=t,e}function Sp(t){return t&&t.__esModule?t:{default:t}}function Tp(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function Cp(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e&&(typeof e=="object"||typeof e=="function")?e:t}function Op(t,e){if(typeof e!="function"&&e!==null)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e);}var Ap=function(t){Op(e,t);function e(s){Tp(this,e);var r=Cp(this,t.call(this,s));return r.nodes||(r.nodes=[]),r}return e.prototype.append=function(r){return r.parent=this,this.nodes.push(r),this},e.prototype.prepend=function(r){return r.parent=this,this.nodes.unshift(r),this},e.prototype.at=function(r){return this.nodes[r]},e.prototype.index=function(r){return typeof r=="number"?r:this.nodes.indexOf(r)},e.prototype.removeChild=function(r){r=this.index(r),this.at(r).parent=void 0,this.nodes.splice(r,1);var n=void 0;for(var i in this.indexes)n=this.indexes[i],n>=r&&(this.indexes[i]=n-1);return this},e.prototype.removeAll=function(){for(var i=this.nodes,r=Array.isArray(i),n=0,i=r?i:i[Symbol.iterator]();;){var o;if(r){if(n>=i.length)break;o=i[n++];}else {if(n=i.next(),n.done)break;o=n.value;}var u=o;u.parent=void 0;}return this.nodes=[],this},e.prototype.empty=function(){return this.removeAll()},e.prototype.insertAfter=function(r,n){var i=this.index(r);this.nodes.splice(i+1,0,n);var o=void 0;for(var u in this.indexes)o=this.indexes[u],i<=o&&(this.indexes[u]=o+this.nodes.length);return this},e.prototype.insertBefore=function(r,n){var i=this.index(r);this.nodes.splice(i,0,n);var o=void 0;for(var u in this.indexes)o=this.indexes[u],i<=o&&(this.indexes[u]=o+this.nodes.length);return this},e.prototype.each=function(r){this.lastEach||(this.lastEach=0),this.indexes||(this.indexes={}),this.lastEach++;var n=this.lastEach;if(this.indexes[n]=0,!!this.length){for(var i=void 0,o=void 0;this.indexes[n]<this.length&&(i=this.indexes[n],o=r(this.at(i),i),o!==!1);)this.indexes[n]+=1;if(delete this.indexes[n],o===!1)return !1}},e.prototype.walk=function(r){return this.each(function(n,i){var o=r(n,i);if(o!==!1&&n.length&&(o=n.walk(r)),o===!1)return !1})},e.prototype.walkAttributes=function(r){var n=this;return this.walk(function(i){if(i.type===Z.ATTRIBUTE)return r.call(n,i)})},e.prototype.walkClasses=function(r){var n=this;return this.walk(function(i){if(i.type===Z.CLASS)return r.call(n,i)})},e.prototype.walkCombinators=function(r){var n=this;return this.walk(function(i){if(i.type===Z.COMBINATOR)return r.call(n,i)})},e.prototype.walkComments=function(r){var n=this;return this.walk(function(i){if(i.type===Z.COMMENT)return r.call(n,i)})},e.prototype.walkIds=function(r){var n=this;return this.walk(function(i){if(i.type===Z.ID)return r.call(n,i)})},e.prototype.walkNesting=function(r){var n=this;return this.walk(function(i){if(i.type===Z.NESTING)return r.call(n,i)})},e.prototype.walkPseudos=function(r){var n=this;return this.walk(function(i){if(i.type===Z.PSEUDO)return r.call(n,i)})},e.prototype.walkTags=function(r){var n=this;return this.walk(function(i){if(i.type===Z.TAG)return r.call(n,i)})},e.prototype.walkUniversals=function(r){var n=this;return this.walk(function(i){if(i.type===Z.UNIVERSAL)return r.call(n,i)})},e.prototype.split=function(r){var n=this,i=[];return this.reduce(function(o,u,a){var c=r.call(n,u);return i.push(u),c?(o.push(i),i=[]):a===n.length-1&&o.push(i),o},[])},e.prototype.map=function(r){return this.nodes.map(r)},e.prototype.reduce=function(r,n){return this.nodes.reduce(r,n)},e.prototype.every=function(r){return this.nodes.every(r)},e.prototype.some=function(r){return this.nodes.some(r)},e.prototype.filter=function(r){return this.nodes.filter(r)},e.prototype.sort=function(r){return this.nodes.sort(r)},e.prototype.toString=function(){return this.map(String).join("")},xp(e,[{key:"first",get:function(){return this.at(0)}},{key:"last",get:function(){return this.at(this.length-1)}},{key:"length",get:function(){return this.nodes.length}}]),e}(_p.default);or.default=Ap;xa.exports=or.default;});var _a$1=g((ur,ba)=>{ur.__esModule=!0;var Np=ar$1(),Pp=Ip(Np),Rp=D();function Ip(t){return t&&t.__esModule?t:{default:t}}function qp(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function Lp(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e&&(typeof e=="object"||typeof e=="function")?e:t}function Dp(t,e){if(typeof e!="function"&&e!==null)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e);}var Bp=function(t){Dp(e,t);function e(s){qp(this,e);var r=Lp(this,t.call(this,s));return r.type=Rp.ROOT,r}return e.prototype.toString=function(){var r=this.reduce(function(n,i){var o=String(i);return o?n+o+",":""},"").slice(0,-1);return this.trailingComma?r+",":r},e}(Pp.default);ur.default=Bp;ba.exports=ur.default;});var Ea$1=g((lr,ka)=>{lr.__esModule=!0;var Mp=ar$1(),Up=$p(Mp),Fp=D();function $p(t){return t&&t.__esModule?t:{default:t}}function Wp(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function Yp(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e&&(typeof e=="object"||typeof e=="function")?e:t}function zp(t,e){if(typeof e!="function"&&e!==null)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e);}var Vp=function(t){zp(e,t);function e(s){Wp(this,e);var r=Yp(this,t.call(this,s));return r.type=Fp.SELECTOR,r}return e}(Up.default);lr.default=Vp;ka.exports=lr.default;});var Ue$1=g((cr,Sa)=>{cr.__esModule=!0;var Gp=function(){function t(e,s){for(var r=0;r<s.length;r++){var n=s[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n);}}return function(e,s,r){return s&&t(e.prototype,s),r&&t(e,r),e}}(),jp=we$1(),Hp=Kp(jp);function Kp(t){return t&&t.__esModule?t:{default:t}}function Qp(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function Jp(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e&&(typeof e=="object"||typeof e=="function")?e:t}function Xp(t,e){if(typeof e!="function"&&e!==null)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e);}var Zp=function(t){Xp(e,t);function e(){return Qp(this,e),Jp(this,t.apply(this,arguments))}return e.prototype.toString=function(){return [this.spaces.before,this.ns,String(this.value),this.spaces.after].join("")},Gp(e,[{key:"ns",get:function(){var r=this.namespace;return r?(typeof r=="string"?r:"")+"|":""}}]),e}(Hp.default);cr.default=Zp;Sa.exports=cr.default;});var Ca$1=g((fr,Ta)=>{fr.__esModule=!0;var eh=Ue$1(),th=sh(eh),rh=D();function sh(t){return t&&t.__esModule?t:{default:t}}function nh(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function ih(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e&&(typeof e=="object"||typeof e=="function")?e:t}function oh(t,e){if(typeof e!="function"&&e!==null)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e);}var ah=function(t){oh(e,t);function e(s){nh(this,e);var r=ih(this,t.call(this,s));return r.type=rh.CLASS,r}return e.prototype.toString=function(){return [this.spaces.before,this.ns,"."+this.value,this.spaces.after].join("")},e}(th.default);fr.default=ah;Ta.exports=fr.default;});var Aa$1=g((pr,Oa)=>{pr.__esModule=!0;var uh=we$1(),lh=fh(uh),ch=D();function fh(t){return t&&t.__esModule?t:{default:t}}function ph(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function hh(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e&&(typeof e=="object"||typeof e=="function")?e:t}function dh(t,e){if(typeof e!="function"&&e!==null)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e);}var mh=function(t){dh(e,t);function e(s){ph(this,e);var r=hh(this,t.call(this,s));return r.type=ch.COMMENT,r}return e}(lh.default);pr.default=mh;Oa.exports=pr.default;});var Pa$1=g((hr,Na)=>{hr.__esModule=!0;var yh=Ue$1(),gh=vh(yh),wh=D();function vh(t){return t&&t.__esModule?t:{default:t}}function xh(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function bh(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e&&(typeof e=="object"||typeof e=="function")?e:t}function _h(t,e){if(typeof e!="function"&&e!==null)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e);}var kh=function(t){_h(e,t);function e(s){xh(this,e);var r=bh(this,t.call(this,s));return r.type=wh.ID,r}return e.prototype.toString=function(){return [this.spaces.before,this.ns,"#"+this.value,this.spaces.after].join("")},e}(gh.default);hr.default=kh;Na.exports=hr.default;});var Ia$1=g((dr,Ra)=>{dr.__esModule=!0;var Eh=Ue$1(),Sh=Ch(Eh),Th=D();function Ch(t){return t&&t.__esModule?t:{default:t}}function Oh(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function Ah(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e&&(typeof e=="object"||typeof e=="function")?e:t}function Nh(t,e){if(typeof e!="function"&&e!==null)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e);}var Ph=function(t){Nh(e,t);function e(s){Oh(this,e);var r=Ah(this,t.call(this,s));return r.type=Th.TAG,r}return e}(Sh.default);dr.default=Ph;Ra.exports=dr.default;});var La$1=g((mr,qa)=>{mr.__esModule=!0;var Rh=we$1(),Ih=Lh(Rh),qh=D();function Lh(t){return t&&t.__esModule?t:{default:t}}function Dh(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function Bh(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e&&(typeof e=="object"||typeof e=="function")?e:t}function Mh(t,e){if(typeof e!="function"&&e!==null)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e);}var Uh=function(t){Mh(e,t);function e(s){Dh(this,e);var r=Bh(this,t.call(this,s));return r.type=qh.STRING,r}return e}(Ih.default);mr.default=Uh;qa.exports=mr.default;});var Ba$1=g((yr,Da)=>{yr.__esModule=!0;var Fh=ar$1(),$h=Yh(Fh),Wh=D();function Yh(t){return t&&t.__esModule?t:{default:t}}function zh(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function Vh(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e&&(typeof e=="object"||typeof e=="function")?e:t}function Gh(t,e){if(typeof e!="function"&&e!==null)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e);}var jh=function(t){Gh(e,t);function e(s){zh(this,e);var r=Vh(this,t.call(this,s));return r.type=Wh.PSEUDO,r}return e.prototype.toString=function(){var r=this.length?"("+this.map(String).join(",")+")":"";return [this.spaces.before,String(this.value),r,this.spaces.after].join("")},e}($h.default);yr.default=jh;Da.exports=yr.default;});var Ua=g((gr,Ma)=>{gr.__esModule=!0;var Hh=Ue$1(),Kh=Jh(Hh),Qh=D();function Jh(t){return t&&t.__esModule?t:{default:t}}function Xh(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function Zh(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e&&(typeof e=="object"||typeof e=="function")?e:t}function ed(t,e){if(typeof e!="function"&&e!==null)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e);}var td=function(t){ed(e,t);function e(s){Xh(this,e);var r=Zh(this,t.call(this,s));return r.type=Qh.ATTRIBUTE,r.raws={},r}return e.prototype.toString=function(){var r=[this.spaces.before,"[",this.ns,this.attribute];return this.operator&&r.push(this.operator),this.value&&r.push(this.value),this.raws.insensitive?r.push(this.raws.insensitive):this.insensitive&&r.push(" i"),r.push("]"),r.concat(this.spaces.after).join("")},e}(Kh.default);gr.default=td;Ma.exports=gr.default;});var $a$1=g((wr,Fa)=>{wr.__esModule=!0;var rd=Ue$1(),sd=id(rd),nd=D();function id(t){return t&&t.__esModule?t:{default:t}}function od(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function ad(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e&&(typeof e=="object"||typeof e=="function")?e:t}function ud(t,e){if(typeof e!="function"&&e!==null)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e);}var ld=function(t){ud(e,t);function e(s){od(this,e);var r=ad(this,t.call(this,s));return r.type=nd.UNIVERSAL,r.value="*",r}return e}(sd.default);wr.default=ld;Fa.exports=wr.default;});var Ya$1=g((vr,Wa)=>{vr.__esModule=!0;var cd=we$1(),fd=hd(cd),pd=D();function hd(t){return t&&t.__esModule?t:{default:t}}function dd(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function md(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e&&(typeof e=="object"||typeof e=="function")?e:t}function yd(t,e){if(typeof e!="function"&&e!==null)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e);}var gd=function(t){yd(e,t);function e(s){dd(this,e);var r=md(this,t.call(this,s));return r.type=pd.COMBINATOR,r}return e}(fd.default);vr.default=gd;Wa.exports=vr.default;});var Va$1=g((xr,za)=>{xr.__esModule=!0;var wd=we$1(),vd=bd(wd),xd=D();function bd(t){return t&&t.__esModule?t:{default:t}}function _d(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function kd(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e&&(typeof e=="object"||typeof e=="function")?e:t}function Ed(t,e){if(typeof e!="function"&&e!==null)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e);}var Sd=function(t){Ed(e,t);function e(s){_d(this,e);var r=kd(this,t.call(this,s));return r.type=xd.NESTING,r.value="&",r}return e}(vd.default);xr.default=Sd;za.exports=xr.default;});var ja$1=g((br,Ga)=>{br.__esModule=!0;br.default=Td;function Td(t){return t.sort(function(e,s){return e-s})}Ga.exports=br.default;});var ru$1=g((Er,tu)=>{Er.__esModule=!0;Er.default=Bd;var Ha=39,Cd=34,Ms=92,Ka=47,St=10,Us=32,Fs=12,$s=9,Ws=13,Qa=43,Ja=62,Xa=126,Za=124,Od=44,Ad=40,Nd=41,Pd=91,Rd=93,Id=59,eu=42,qd=58,Ld=38,Dd=64,_r=/[ \n\t\r\{\(\)'"\\;/]/g,kr=/[ \n\t\r\(\)\*:;@!&'"\+\|~>,\[\]\\]|\/(?=\*)/g;function Bd(t){for(var e=[],s=t.css.valueOf(),r=void 0,n=void 0,i=void 0,o=void 0,u=void 0,a=void 0,c=void 0,f=void 0,p=void 0,l=void 0,y=void 0,x=s.length,h=-1,d=1,m=0,b=function(v,N){if(t.safe)s+=N,n=s.length-1;else throw t.error("Unclosed "+v,d,m-h,m)};m<x;){switch(r=s.charCodeAt(m),r===St&&(h=m,d+=1),r){case St:case Us:case $s:case Ws:case Fs:n=m;do n+=1,r=s.charCodeAt(n),r===St&&(h=n,d+=1);while(r===Us||r===St||r===$s||r===Ws||r===Fs);e.push(["space",s.slice(m,n),d,m-h,m]),m=n-1;break;case Qa:case Ja:case Xa:case Za:n=m;do n+=1,r=s.charCodeAt(n);while(r===Qa||r===Ja||r===Xa||r===Za);e.push(["combinator",s.slice(m,n),d,m-h,m]),m=n-1;break;case eu:e.push(["*","*",d,m-h,m]);break;case Ld:e.push(["&","&",d,m-h,m]);break;case Od:e.push([",",",",d,m-h,m]);break;case Pd:e.push(["[","[",d,m-h,m]);break;case Rd:e.push(["]","]",d,m-h,m]);break;case qd:e.push([":",":",d,m-h,m]);break;case Id:e.push([";",";",d,m-h,m]);break;case Ad:e.push(["(","(",d,m-h,m]);break;case Nd:e.push([")",")",d,m-h,m]);break;case Ha:case Cd:i=r===Ha?"'":'"',n=m;do for(l=!1,n=s.indexOf(i,n+1),n===-1&&b("quote",i),y=n;s.charCodeAt(y-1)===Ms;)y-=1,l=!l;while(l);e.push(["string",s.slice(m,n+1),d,m-h,d,n-h,m]),m=n;break;case Dd:_r.lastIndex=m+1,_r.test(s),_r.lastIndex===0?n=s.length-1:n=_r.lastIndex-2,e.push(["at-word",s.slice(m,n+1),d,m-h,d,n-h,m]),m=n;break;case Ms:for(n=m,c=!0;s.charCodeAt(n+1)===Ms;)n+=1,c=!c;r=s.charCodeAt(n+1),c&&r!==Ka&&r!==Us&&r!==St&&r!==$s&&r!==Ws&&r!==Fs&&(n+=1),e.push(["word",s.slice(m,n+1),d,m-h,d,n-h,m]),m=n;break;default:r===Ka&&s.charCodeAt(m+1)===eu?(n=s.indexOf("*/",m+2)+1,n===0&&b("comment","*/"),a=s.slice(m,n+1),o=a.split(`
`),u=o.length-1,u>0?(f=d+u,p=n-o[u].length):(f=d,p=h),e.push(["comment",a,d,m-h,f,n-p,m]),h=p,d=f,m=n):(kr.lastIndex=m+1,kr.test(s),kr.lastIndex===0?n=s.length-1:n=kr.lastIndex-2,e.push(["word",s.slice(m,n+1),d,m-h,d,n-h,m]),m=n);break}m++;}return e}tu.exports=Er.default;});var iu$1=g((Sr,nu)=>{Sr.__esModule=!0;var Md=function(){function t(e,s){for(var r=0;r<s.length;r++){var n=s[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n);}}return function(e,s,r){return s&&t(e.prototype,s),r&&t(e,r),e}}(),Ud=Ls$1(),Fd=I(Ud),$d=Ds$1(),Ys=I($d),Wd=Bs$1(),Yd=I(Wd),zd=_a$1(),Vd=I(zd),Gd=Ea$1(),zs=I(Gd),jd=Ca$1(),Hd=I(jd),Kd=Aa$1(),Qd=I(Kd),Jd=Pa$1(),Xd=I(Jd),Zd=Ia$1(),em=I(Zd),tm=La$1(),rm=I(tm),sm=Ba$1(),nm=I(sm),im=Ua(),om=I(im),am=$a$1(),um=I(am),lm=Ya$1(),cm=I(lm),fm=Va$1(),pm=I(fm),hm=ja$1(),dm=I(hm),mm=ru$1(),su=I(mm),ym=D(),gm=wm(ym);function wm(t){if(t&&t.__esModule)return t;var e={};if(t!=null)for(var s in t)Object.prototype.hasOwnProperty.call(t,s)&&(e[s]=t[s]);return e.default=t,e}function I(t){return t&&t.__esModule?t:{default:t}}function vm(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}var xm=function(){function t(e){vm(this,t),this.input=e,this.lossy=e.options.lossless===!1,this.position=0,this.root=new Vd.default;var s=new zs.default;return this.root.append(s),this.current=s,this.lossy?this.tokens=(0, su.default)({safe:e.safe,css:e.css.trim()}):this.tokens=(0, su.default)(e),this.loop()}return t.prototype.attribute=function(){var s="",r=void 0,n=this.currToken;for(this.position++;this.position<this.tokens.length&&this.currToken[0]!=="]";)s+=this.tokens[this.position][1],this.position++;this.position===this.tokens.length&&!~s.indexOf("]")&&this.error("Expected a closing square bracket.");var i=s.split(/((?:[*~^$|]?=))([^]*)/),o=i[0].split(/(\|)/g),u={operator:i[1],value:i[2],source:{start:{line:n[2],column:n[3]},end:{line:this.currToken[2],column:this.currToken[3]}},sourceIndex:n[4]};if(o.length>1?(o[0]===""&&(o[0]=!0),u.attribute=this.parseValue(o[2]),u.namespace=this.parseNamespace(o[0])):u.attribute=this.parseValue(i[0]),r=new om.default(u),i[2]){var a=i[2].split(/(\s+i\s*?)$/),c=a[0].trim();r.value=this.lossy?c:a[0],a[1]&&(r.insensitive=!0,this.lossy||(r.raws.insensitive=a[1])),r.quoted=c[0]==="'"||c[0]==='"',r.raws.unquoted=r.quoted?c.slice(1,-1):c;}this.newNode(r),this.position++;},t.prototype.combinator=function(){if(this.currToken[1]==="|")return this.namespace();for(var s=new cm.default({value:"",source:{start:{line:this.currToken[2],column:this.currToken[3]},end:{line:this.currToken[2],column:this.currToken[3]}},sourceIndex:this.currToken[4]});this.position<this.tokens.length&&this.currToken&&(this.currToken[0]==="space"||this.currToken[0]==="combinator");)this.nextToken&&this.nextToken[0]==="combinator"?(s.spaces.before=this.parseSpace(this.currToken[1]),s.source.start.line=this.nextToken[2],s.source.start.column=this.nextToken[3],s.source.end.column=this.nextToken[3],s.source.end.line=this.nextToken[2],s.sourceIndex=this.nextToken[4]):this.prevToken&&this.prevToken[0]==="combinator"?s.spaces.after=this.parseSpace(this.currToken[1]):this.currToken[0]==="combinator"?s.value=this.currToken[1]:this.currToken[0]==="space"&&(s.value=this.parseSpace(this.currToken[1]," ")),this.position++;return this.newNode(s)},t.prototype.comma=function(){if(this.position===this.tokens.length-1){this.root.trailingComma=!0,this.position++;return}var s=new zs.default;this.current.parent.append(s),this.current=s,this.position++;},t.prototype.comment=function(){var s=new Qd.default({value:this.currToken[1],source:{start:{line:this.currToken[2],column:this.currToken[3]},end:{line:this.currToken[4],column:this.currToken[5]}},sourceIndex:this.currToken[6]});this.newNode(s),this.position++;},t.prototype.error=function(s){throw new this.input.error(s)},t.prototype.missingBackslash=function(){return this.error("Expected a backslash preceding the semicolon.")},t.prototype.missingParenthesis=function(){return this.error("Expected opening parenthesis.")},t.prototype.missingSquareBracket=function(){return this.error("Expected opening square bracket.")},t.prototype.namespace=function(){var s=this.prevToken&&this.prevToken[1]||!0;if(this.nextToken[0]==="word")return this.position++,this.word(s);if(this.nextToken[0]==="*")return this.position++,this.universal(s)},t.prototype.nesting=function(){this.newNode(new pm.default({value:this.currToken[1],source:{start:{line:this.currToken[2],column:this.currToken[3]},end:{line:this.currToken[2],column:this.currToken[3]}},sourceIndex:this.currToken[4]})),this.position++;},t.prototype.parentheses=function(){var s=this.current.last;if(s&&s.type===gm.PSEUDO){var r=new zs.default,n=this.current;s.append(r),this.current=r;var i=1;for(this.position++;this.position<this.tokens.length&&i;)this.currToken[0]==="("&&i++,this.currToken[0]===")"&&i--,i?this.parse():(r.parent.source.end.line=this.currToken[2],r.parent.source.end.column=this.currToken[3],this.position++);i&&this.error("Expected closing parenthesis."),this.current=n;}else {var o=1;for(this.position++,s.value+="(";this.position<this.tokens.length&&o;)this.currToken[0]==="("&&o++,this.currToken[0]===")"&&o--,s.value+=this.parseParenthesisToken(this.currToken),this.position++;o&&this.error("Expected closing parenthesis.");}},t.prototype.pseudo=function(){for(var s=this,r="",n=this.currToken;this.currToken&&this.currToken[0]===":";)r+=this.currToken[1],this.position++;if(!this.currToken)return this.error("Expected pseudo-class or pseudo-element");if(this.currToken[0]==="word"){var i=void 0;this.splitWord(!1,function(o,u){r+=o,i=new nm.default({value:r,source:{start:{line:n[2],column:n[3]},end:{line:s.currToken[4],column:s.currToken[5]}},sourceIndex:n[4]}),s.newNode(i),u>1&&s.nextToken&&s.nextToken[0]==="("&&s.error("Misplaced parenthesis.");});}else this.error('Unexpected "'+this.currToken[0]+'" found.');},t.prototype.space=function(){var s=this.currToken;this.position===0||this.prevToken[0]===","||this.prevToken[0]==="("?(this.spaces=this.parseSpace(s[1]),this.position++):this.position===this.tokens.length-1||this.nextToken[0]===","||this.nextToken[0]===")"?(this.current.last.spaces.after=this.parseSpace(s[1]),this.position++):this.combinator();},t.prototype.string=function(){var s=this.currToken;this.newNode(new rm.default({value:this.currToken[1],source:{start:{line:s[2],column:s[3]},end:{line:s[4],column:s[5]}},sourceIndex:s[6]})),this.position++;},t.prototype.universal=function(s){var r=this.nextToken;if(r&&r[1]==="|")return this.position++,this.namespace();this.newNode(new um.default({value:this.currToken[1],source:{start:{line:this.currToken[2],column:this.currToken[3]},end:{line:this.currToken[2],column:this.currToken[3]}},sourceIndex:this.currToken[4]}),s),this.position++;},t.prototype.splitWord=function(s,r){for(var n=this,i=this.nextToken,o=this.currToken[1];i&&i[0]==="word";){this.position++;var u=this.currToken[1];if(o+=u,u.lastIndexOf("\\")===u.length-1){var a=this.nextToken;a&&a[0]==="space"&&(o+=this.parseSpace(a[1]," "),this.position++);}i=this.nextToken;}var c=(0, Ys.default)(o,"."),f=(0, Ys.default)(o,"#"),p=(0, Ys.default)(o,"#{");p.length&&(f=f.filter(function(y){return !~p.indexOf(y)}));var l=(0, dm.default)((0, Yd.default)((0, Fd.default)([[0],c,f])));l.forEach(function(y,x){var h=l[x+1]||o.length,d=o.slice(y,h);if(x===0&&r)return r.call(n,d,l.length);var m=void 0;~c.indexOf(y)?m=new Hd.default({value:d.slice(1),source:{start:{line:n.currToken[2],column:n.currToken[3]+y},end:{line:n.currToken[4],column:n.currToken[3]+(h-1)}},sourceIndex:n.currToken[6]+l[x]}):~f.indexOf(y)?m=new Xd.default({value:d.slice(1),source:{start:{line:n.currToken[2],column:n.currToken[3]+y},end:{line:n.currToken[4],column:n.currToken[3]+(h-1)}},sourceIndex:n.currToken[6]+l[x]}):m=new em.default({value:d,source:{start:{line:n.currToken[2],column:n.currToken[3]+y},end:{line:n.currToken[4],column:n.currToken[3]+(h-1)}},sourceIndex:n.currToken[6]+l[x]}),n.newNode(m,s);}),this.position++;},t.prototype.word=function(s){var r=this.nextToken;return r&&r[1]==="|"?(this.position++,this.namespace()):this.splitWord(s)},t.prototype.loop=function(){for(;this.position<this.tokens.length;)this.parse(!0);return this.root},t.prototype.parse=function(s){switch(this.currToken[0]){case"space":this.space();break;case"comment":this.comment();break;case"(":this.parentheses();break;case")":s&&this.missingParenthesis();break;case"[":this.attribute();break;case"]":this.missingSquareBracket();break;case"at-word":case"word":this.word();break;case":":this.pseudo();break;case";":this.missingBackslash();break;case",":this.comma();break;case"*":this.universal();break;case"&":this.nesting();break;case"combinator":this.combinator();break;case"string":this.string();break}},t.prototype.parseNamespace=function(s){if(this.lossy&&typeof s=="string"){var r=s.trim();return r.length?r:!0}return s},t.prototype.parseSpace=function(s,r){return this.lossy?r||"":s},t.prototype.parseValue=function(s){return this.lossy&&s&&typeof s=="string"?s.trim():s},t.prototype.parseParenthesisToken=function(s){return this.lossy?s[0]==="space"?this.parseSpace(s[1]," "):this.parseValue(s[1]):s[1]},t.prototype.newNode=function(s,r){return r&&(s.namespace=this.parseNamespace(r)),this.spaces&&(s.spaces.before=this.spaces,this.spaces=""),this.current.append(s)},Md(t,[{key:"currToken",get:function(){return this.tokens[this.position]}},{key:"nextToken",get:function(){return this.tokens[this.position+1]}},{key:"prevToken",get:function(){return this.tokens[this.position-1]}}]),t}();Sr.default=xm;nu.exports=Sr.default;});var au$1=g((Tr,ou)=>{Tr.__esModule=!0;var bm=function(){function t(e,s){for(var r=0;r<s.length;r++){var n=s[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n);}}return function(e,s,r){return s&&t(e.prototype,s),r&&t(e,r),e}}(),_m=iu$1(),km=Em(_m);function Em(t){return t&&t.__esModule?t:{default:t}}function Sm(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}var Tm=function(){function t(e){return Sm(this,t),this.func=e||function(){},this}return t.prototype.process=function(s){var r=arguments.length>1&&arguments[1]!==void 0?arguments[1]:{},n=new km.default({css:s,error:function(o){throw new Error(o)},options:r});return this.res=n,this.func(n),this},bm(t,[{key:"result",get:function(){return String(this.res)}}]),t}();Tr.default=Tm;ou.exports=Tr.default;});var G=g((Bx,lu)=>{var Vs=function(t,e){let s=new t.constructor;for(let r in t){if(!t.hasOwnProperty(r))continue;let n=t[r],i=typeof n;r==="parent"&&i==="object"?e&&(s[r]=e):r==="source"?s[r]=n:n instanceof Array?s[r]=n.map(o=>Vs(o,s)):r!=="before"&&r!=="after"&&r!=="between"&&r!=="semicolon"&&(i==="object"&&n!==null&&(n=Vs(n)),s[r]=n);}return s};lu.exports=class{constructor(e){e=e||{},this.raws={before:"",after:""};for(let s in e)this[s]=e[s];}remove(){return this.parent&&this.parent.removeChild(this),this.parent=void 0,this}toString(){return [this.raws.before,String(this.value),this.raws.after].join("")}clone(e){e=e||{};let s=Vs(this);for(let r in e)s[r]=e[r];return s}cloneBefore(e){e=e||{};let s=this.clone(e);return this.parent.insertBefore(this,s),s}cloneAfter(e){e=e||{};let s=this.clone(e);return this.parent.insertAfter(this,s),s}replaceWith(){let e=Array.prototype.slice.call(arguments);if(this.parent){for(let s of e)this.parent.insertBefore(this,s);this.remove();}return this}moveTo(e){return this.cleanRaws(this.root()===e.root()),this.remove(),e.append(this),this}moveBefore(e){return this.cleanRaws(this.root()===e.root()),this.remove(),e.parent.insertBefore(e,this),this}moveAfter(e){return this.cleanRaws(this.root()===e.root()),this.remove(),e.parent.insertAfter(e,this),this}next(){let e=this.parent.index(this);return this.parent.nodes[e+1]}prev(){let e=this.parent.index(this);return this.parent.nodes[e-1]}toJSON(){let e={};for(let s in this){if(!this.hasOwnProperty(s)||s==="parent")continue;let r=this[s];r instanceof Array?e[s]=r.map(n=>typeof n=="object"&&n.toJSON?n.toJSON():n):typeof r=="object"&&r.toJSON?e[s]=r.toJSON():e[s]=r;}return e}root(){let e=this;for(;e.parent;)e=e.parent;return e}cleanRaws(e){delete this.raws.before,delete this.raws.after,e||delete this.raws.between;}positionInside(e){let s=this.toString(),r=this.source.start.column,n=this.source.start.line;for(let i=0;i<e;i++)s[i]===`
`?(r=1,n+=1):r+=1;return {line:n,column:r}}positionBy(e){let s=this.source.start;if(Object(e).index)s=this.positionInside(e.index);else if(Object(e).word){let r=this.toString().indexOf(e.word);r!==-1&&(s=this.positionInside(r));}return s}};});var U=g((Mx,cu)=>{var Om=G(),Fe=class extends Om{constructor(e){super(e),this.nodes||(this.nodes=[]);}push(e){return e.parent=this,this.nodes.push(e),this}each(e){this.lastEach||(this.lastEach=0),this.indexes||(this.indexes={}),this.lastEach+=1;let s=this.lastEach,r,n;if(this.indexes[s]=0,!!this.nodes){for(;this.indexes[s]<this.nodes.length&&(r=this.indexes[s],n=e(this.nodes[r],r),n!==!1);)this.indexes[s]+=1;return delete this.indexes[s],n}}walk(e){return this.each((s,r)=>{let n=e(s,r);return n!==!1&&s.walk&&(n=s.walk(e)),n})}walkType(e,s){if(!e||!s)throw new Error("Parameters {type} and {callback} are required.");let r=typeof e=="function";return this.walk((n,i)=>{if(r&&n instanceof e||!r&&n.type===e)return s.call(this,n,i)})}append(e){return e.parent=this,this.nodes.push(e),this}prepend(e){return e.parent=this,this.nodes.unshift(e),this}cleanRaws(e){if(super.cleanRaws(e),this.nodes)for(let s of this.nodes)s.cleanRaws(e);}insertAfter(e,s){let r=this.index(e),n;this.nodes.splice(r+1,0,s);for(let i in this.indexes)n=this.indexes[i],r<=n&&(this.indexes[i]=n+this.nodes.length);return this}insertBefore(e,s){let r=this.index(e),n;this.nodes.splice(r,0,s);for(let i in this.indexes)n=this.indexes[i],r<=n&&(this.indexes[i]=n+this.nodes.length);return this}removeChild(e){e=this.index(e),this.nodes[e].parent=void 0,this.nodes.splice(e,1);let s;for(let r in this.indexes)s=this.indexes[r],s>=e&&(this.indexes[r]=s-1);return this}removeAll(){for(let e of this.nodes)e.parent=void 0;return this.nodes=[],this}every(e){return this.nodes.every(e)}some(e){return this.nodes.some(e)}index(e){return typeof e=="number"?e:this.nodes.indexOf(e)}get first(){if(this.nodes)return this.nodes[0]}get last(){if(this.nodes)return this.nodes[this.nodes.length-1]}toString(){let e=this.nodes.map(String).join("");return this.value&&(e=this.value+e),this.raws.before&&(e=this.raws.before+e),this.raws.after&&(e+=this.raws.after),e}};Fe.registerWalker=t=>{let e="walk"+t.name;e.lastIndexOf("s")!==e.length-1&&(e+="s"),!Fe.prototype[e]&&(Fe.prototype[e]=function(s){return this.walkType(t,s)});};cu.exports=Fe;});var pu$1=g((Fx,fu)=>{var Am=U();fu.exports=class extends Am{constructor(e){super(e),this.type="root";}};});var du$1=g((Wx,hu)=>{var Nm=U();hu.exports=class extends Nm{constructor(e){super(e),this.type="value",this.unbalanced=0;}};});var gu$1=g((Yx,yu)=>{var mu=U(),Cr=class extends mu{constructor(e){super(e),this.type="atword";}toString(){this.quoted?this.raws.quote:"";return [this.raws.before,"@",String.prototype.toString.call(this.value),this.raws.after].join("")}};mu.registerWalker(Cr);yu.exports=Cr;});var vu$1=g((zx,wu)=>{var Pm=U(),Rm=G(),Or=class extends Rm{constructor(e){super(e),this.type="colon";}};Pm.registerWalker(Or);wu.exports=Or;});var bu$1=g((Vx,xu)=>{var Im=U(),qm=G(),Ar=class extends qm{constructor(e){super(e),this.type="comma";}};Im.registerWalker(Ar);xu.exports=Ar;});var ku$1=g((Gx,_u)=>{var Lm=U(),Dm=G(),Nr=class extends Dm{constructor(e){super(e),this.type="comment",this.inline=Object(e).inline||!1;}toString(){return [this.raws.before,this.inline?"//":"/*",String(this.value),this.inline?"":"*/",this.raws.after].join("")}};Lm.registerWalker(Nr);_u.exports=Nr;});var Tu$1=g((jx,Su)=>{var Eu=U(),Pr=class extends Eu{constructor(e){super(e),this.type="func",this.unbalanced=-1;}};Eu.registerWalker(Pr);Su.exports=Pr;});var Ou$1=g((Hx,Cu)=>{var Bm=U(),Mm=G(),Rr=class extends Mm{constructor(e){super(e),this.type="number",this.unit=Object(e).unit||"";}toString(){return [this.raws.before,String(this.value),this.unit,this.raws.after].join("")}};Bm.registerWalker(Rr);Cu.exports=Rr;});var Nu$1=g((Kx,Au)=>{var Um=U(),Fm=G(),Ir=class extends Fm{constructor(e){super(e),this.type="operator";}};Um.registerWalker(Ir);Au.exports=Ir;});var Ru$1=g((Qx,Pu)=>{var $m=U(),Wm=G(),qr=class extends Wm{constructor(e){super(e),this.type="paren",this.parenType="";}};$m.registerWalker(qr);Pu.exports=qr;});var qu$1=g((Jx,Iu)=>{var Ym=U(),zm=G(),Lr=class extends zm{constructor(e){super(e),this.type="string";}toString(){let e=this.quoted?this.raws.quote:"";return [this.raws.before,e,this.value+"",e,this.raws.after].join("")}};Ym.registerWalker(Lr);Iu.exports=Lr;});var Du$1=g((Xx,Lu)=>{var Vm=U(),Gm=G(),Dr=class extends Gm{constructor(e){super(e),this.type="word";}};Vm.registerWalker(Dr);Lu.exports=Dr;});var Mu$1=g((Zx,Bu)=>{var jm=U(),Hm=G(),Br=class extends Hm{constructor(e){super(e),this.type="unicode-range";}};jm.registerWalker(Br);Bu.exports=Br;});var Fu$1=g((eb,Uu)=>{var Gs=class extends Error{constructor(e){super(e),this.name=this.constructor.name,this.message=e||"An error ocurred while tokzenizing.",typeof Error.captureStackTrace=="function"?Error.captureStackTrace(this,this.constructor):this.stack=new Error(e).stack;}};Uu.exports=Gs;});var Yu$1=g((tb,Wu)=>{var Mr=/[ \n\t\r\{\(\)'"\\;,/]/g,Km=/[ \n\t\r\(\)\{\}\*:;@!&'"\+\|~>,\[\]\\]|\/(?=\*)/g,$e=/[ \n\t\r\(\)\{\}\*:;@!&'"\-\+\|~>,\[\]\\]|\//g,Qm=/^[a-z0-9]/i,Jm=/^[a-f0-9?\-]/i,$u=Fu$1();Wu.exports=function(e,s){s=s||{};let r=[],n=e.valueOf(),i=n.length,o=-1,u=1,a=0,c=0,f=null,p,l,y,x,h,d,b,w,v,N,F;function H(T){let C=`Unclosed ${T} at line: ${u}, column: ${a-o}, token: ${a}`;throw new $u(C)}for(;a<i;){switch(p=n.charCodeAt(a),p===10&&(o=a,u+=1),p){case 10:case 32:case 9:case 13:case 12:l=a;do l+=1,p=n.charCodeAt(l),p===10&&(o=l,u+=1);while(p===32||p===10||p===9||p===13||p===12);r.push(["space",n.slice(a,l),u,a-o,u,l-o,a]),a=l-1;break;case 58:l=a+1,r.push(["colon",n.slice(a,l),u,a-o,u,l-o,a]),a=l-1;break;case 44:l=a+1,r.push(["comma",n.slice(a,l),u,a-o,u,l-o,a]),a=l-1;break;case 123:r.push(["{","{",u,a-o,u,l-o,a]);break;case 125:r.push(["}","}",u,a-o,u,l-o,a]);break;case 40:c++,f=!f&&c===1&&r.length>0&&r[r.length-1][0]==="word"&&r[r.length-1][1]==="url",r.push(["(","(",u,a-o,u,l-o,a]);break;case 41:c--,f=f&&c>0,r.push([")",")",u,a-o,u,l-o,a]);break;case 39:case 34:y=p===39?"'":'"',l=a;do for(v=!1,l=n.indexOf(y,l+1),l===-1&&H("quote"),N=l;n.charCodeAt(N-1)===92;)N-=1,v=!v;while(v);r.push(["string",n.slice(a,l+1),u,a-o,u,l-o,a]),a=l;break;case 64:Mr.lastIndex=a+1,Mr.test(n),Mr.lastIndex===0?l=n.length-1:l=Mr.lastIndex-2,r.push(["atword",n.slice(a,l+1),u,a-o,u,l-o,a]),a=l;break;case 92:l=a,p=n.charCodeAt(l+1),r.push(["word",n.slice(a,l+1),u,a-o,u,l-o,a]),a=l;break;case 43:case 45:case 42:l=a+1,F=n.slice(a+1,l+1);n.slice(a-1,a);if(p===45&&F.charCodeAt(0)===45){l++,r.push(["word",n.slice(a,l),u,a-o,u,l-o,a]),a=l-1;break}r.push(["operator",n.slice(a,l),u,a-o,u,l-o,a]),a=l-1;break;default:if(p===47&&(n.charCodeAt(a+1)===42||s.loose&&!f&&n.charCodeAt(a+1)===47)){if(n.charCodeAt(a+1)===42)l=n.indexOf("*/",a+2)+1,l===0&&H("comment");else {let O=n.indexOf(`
`,a+2);l=O!==-1?O-1:i;}d=n.slice(a,l+1),x=d.split(`
`),h=x.length-1,h>0?(b=u+h,w=l-x[h].length):(b=u,w=o),r.push(["comment",d,u,a-o,b,l-w,a]),o=w,u=b,a=l;}else if(p===35&&!Qm.test(n.slice(a+1,a+2)))l=a+1,r.push(["#",n.slice(a,l),u,a-o,u,l-o,a]),a=l-1;else if((p===117||p===85)&&n.charCodeAt(a+1)===43){l=a+2;do l+=1,p=n.charCodeAt(l);while(l<i&&Jm.test(n.slice(l,l+1)));r.push(["unicoderange",n.slice(a,l),u,a-o,u,l-o,a]),a=l-1;}else if(p===47)l=a+1,r.push(["operator",n.slice(a,l),u,a-o,u,l-o,a]),a=l-1;else {let C=Km;if(p>=48&&p<=57&&(C=$e),C.lastIndex=a+1,C.test(n),C.lastIndex===0?l=n.length-1:l=C.lastIndex-2,C===$e||p===46){let O=n.charCodeAt(l),ve=n.charCodeAt(l+1),Xs=n.charCodeAt(l+2);(O===101||O===69)&&(ve===45||ve===43)&&Xs>=48&&Xs<=57&&($e.lastIndex=l+2,$e.test(n),$e.lastIndex===0?l=n.length-1:l=$e.lastIndex-2);}r.push(["word",n.slice(a,l+1),u,a-o,u,l-o,a]),a=l;}break}a++;}return r};});var Vu$1=g((rb,zu)=>{var js=class extends Error{constructor(e){super(e),this.name=this.constructor.name,this.message=e||"An error ocurred while parsing.",typeof Error.captureStackTrace=="function"?Error.captureStackTrace(this,this.constructor):this.stack=new Error(e).stack;}};zu.exports=js;});var Ku$1=g((nb,Hu)=>{var Xm=pu$1(),Zm=du$1(),ey=gu$1(),ty=vu$1(),ry=bu$1(),sy=ku$1(),ny=Tu$1(),iy=Ou$1(),oy=Nu$1(),Gu=Ru$1(),ay=qu$1(),ju=Du$1(),uy=Mu$1(),ly=Yu$1(),cy=Ls$1(),fy=Ds$1(),py=Bs$1(),hy=Vu$1();function dy(t){return t.sort((e,s)=>e-s)}Hu.exports=class{constructor(e,s){let r={loose:!1};this.cache=[],this.input=e,this.options=Object.assign({},r,s),this.position=0,this.unbalanced=0,this.root=new Xm;let n=new Zm;this.root.append(n),this.current=n,this.tokens=ly(e,this.options);}parse(){return this.loop()}colon(){let e=this.currToken;this.newNode(new ty({value:e[1],source:{start:{line:e[2],column:e[3]},end:{line:e[4],column:e[5]}},sourceIndex:e[6]})),this.position++;}comma(){let e=this.currToken;this.newNode(new ry({value:e[1],source:{start:{line:e[2],column:e[3]},end:{line:e[4],column:e[5]}},sourceIndex:e[6]})),this.position++;}comment(){let e=!1,s=this.currToken[1].replace(/\/\*|\*\//g,""),r;this.options.loose&&s.startsWith("//")&&(s=s.substring(2),e=!0),r=new sy({value:s,inline:e,source:{start:{line:this.currToken[2],column:this.currToken[3]},end:{line:this.currToken[4],column:this.currToken[5]}},sourceIndex:this.currToken[6]}),this.newNode(r),this.position++;}error(e,s){throw new hy(e+` at line: ${s[2]}, column ${s[3]}`)}loop(){for(;this.position<this.tokens.length;)this.parseTokens();return !this.current.last&&this.spaces?this.current.raws.before+=this.spaces:this.spaces&&(this.current.last.raws.after+=this.spaces),this.spaces="",this.root}operator(){let e=this.currToken[1],s;if(e==="+"||e==="-"){if(this.options.loose||this.position>0&&(this.current.type==="func"&&this.current.value==="calc"?this.prevToken[0]!=="space"&&this.prevToken[0]!=="("?this.error("Syntax Error",this.currToken):this.nextToken[0]!=="space"&&this.nextToken[0]!=="word"?this.error("Syntax Error",this.currToken):this.nextToken[0]==="word"&&this.current.last.type!=="operator"&&this.current.last.value!=="("&&this.error("Syntax Error",this.currToken):(this.nextToken[0]==="space"||this.nextToken[0]==="operator"||this.prevToken[0]==="operator")&&this.error("Syntax Error",this.currToken)),this.options.loose){if((!this.current.nodes.length||this.current.last&&this.current.last.type==="operator")&&this.nextToken[0]==="word")return this.word()}else if(this.nextToken[0]==="word")return this.word()}return s=new oy({value:this.currToken[1],source:{start:{line:this.currToken[2],column:this.currToken[3]},end:{line:this.currToken[2],column:this.currToken[3]}},sourceIndex:this.currToken[4]}),this.position++,this.newNode(s)}parseTokens(){switch(this.currToken[0]){case"space":this.space();break;case"colon":this.colon();break;case"comma":this.comma();break;case"comment":this.comment();break;case"(":this.parenOpen();break;case")":this.parenClose();break;case"atword":case"word":this.word();break;case"operator":this.operator();break;case"string":this.string();break;case"unicoderange":this.unicodeRange();break;default:this.word();break}}parenOpen(){let e=1,s=this.position+1,r=this.currToken,n;for(;s<this.tokens.length&&e;){let i=this.tokens[s];i[0]==="("&&e++,i[0]===")"&&e--,s++;}if(e&&this.error("Expected closing parenthesis",r),n=this.current.last,n&&n.type==="func"&&n.unbalanced<0&&(n.unbalanced=0,this.current=n),this.current.unbalanced++,this.newNode(new Gu({value:r[1],source:{start:{line:r[2],column:r[3]},end:{line:r[4],column:r[5]}},sourceIndex:r[6]})),this.position++,this.current.type==="func"&&this.current.unbalanced&&this.current.value==="url"&&this.currToken[0]!=="string"&&this.currToken[0]!==")"&&!this.options.loose){let i=this.nextToken,o=this.currToken[1],u={line:this.currToken[2],column:this.currToken[3]};for(;i&&i[0]!==")"&&this.current.unbalanced;)this.position++,o+=this.currToken[1],i=this.nextToken;this.position!==this.tokens.length-1&&(this.position++,this.newNode(new ju({value:o,source:{start:u,end:{line:this.currToken[4],column:this.currToken[5]}},sourceIndex:this.currToken[6]})));}}parenClose(){let e=this.currToken;this.newNode(new Gu({value:e[1],source:{start:{line:e[2],column:e[3]},end:{line:e[4],column:e[5]}},sourceIndex:e[6]})),this.position++,!(this.position>=this.tokens.length-1&&!this.current.unbalanced)&&(this.current.unbalanced--,this.current.unbalanced<0&&this.error("Expected opening parenthesis",e),!this.current.unbalanced&&this.cache.length&&(this.current=this.cache.pop()));}space(){let e=this.currToken;this.position===this.tokens.length-1||this.nextToken[0]===","||this.nextToken[0]===")"?(this.current.last.raws.after+=e[1],this.position++):(this.spaces=e[1],this.position++);}unicodeRange(){let e=this.currToken;this.newNode(new uy({value:e[1],source:{start:{line:e[2],column:e[3]},end:{line:e[4],column:e[5]}},sourceIndex:e[6]})),this.position++;}splitWord(){let e=this.nextToken,s=this.currToken[1],r=/^[\+\-]?((\d+(\.\d*)?)|(\.\d+))([eE][\+\-]?\d+)?/,n=/^(?!\#([a-z0-9]+))[\#\{\}]/gi,i,o;if(!n.test(s))for(;e&&e[0]==="word";){this.position++;let u=this.currToken[1];s+=u,e=this.nextToken;}i=fy(s,"@"),o=dy(py(cy([[0],i]))),o.forEach((u,a)=>{let c=o[a+1]||s.length,f=s.slice(u,c),p;if(~i.indexOf(u))p=new ey({value:f.slice(1),source:{start:{line:this.currToken[2],column:this.currToken[3]+u},end:{line:this.currToken[4],column:this.currToken[3]+(c-1)}},sourceIndex:this.currToken[6]+o[a]});else if(r.test(this.currToken[1])){let l=f.replace(r,"");p=new iy({value:f.replace(l,""),source:{start:{line:this.currToken[2],column:this.currToken[3]+u},end:{line:this.currToken[4],column:this.currToken[3]+(c-1)}},sourceIndex:this.currToken[6]+o[a],unit:l});}else p=new(e&&e[0]==="("?ny:ju)({value:f,source:{start:{line:this.currToken[2],column:this.currToken[3]+u},end:{line:this.currToken[4],column:this.currToken[3]+(c-1)}},sourceIndex:this.currToken[6]+o[a]}),p.type==="word"?(p.isHex=/^#(.+)/.test(f),p.isColor=/^#([0-9a-f]{3}|[0-9a-f]{4}|[0-9a-f]{6}|[0-9a-f]{8})$/i.test(f)):this.cache.push(this.current);this.newNode(p);}),this.position++;}string(){let e=this.currToken,s=this.currToken[1],r=/^(\"|\')/,n=r.test(s),i="",o;n&&(i=s.match(r)[0],s=s.slice(1,s.length-1)),o=new ay({value:s,source:{start:{line:e[2],column:e[3]},end:{line:e[4],column:e[5]}},sourceIndex:e[6],quoted:n}),o.raws.quote=i,this.newNode(o),this.position++;}word(){return this.splitWord()}newNode(e){return this.spaces&&(e.raws.before+=this.spaces,this.spaces=""),this.current.append(e)}get currToken(){return this.tokens[this.position]}get nextToken(){return this.tokens[this.position+1]}get prevToken(){return this.tokens[this.position-1]}};});var Js$1={};Zs$1(Js$1,{languages:()=>yi$1,options:()=>wi$1,parsers:()=>Qs$1,printers:()=>Ny});var wl$1=(t,e,s,r)=>{if(!(t&&e==null))return e.replaceAll?e.replaceAll(s,r):s.global?e.replace(s,r):e.split(s).join(r)},k$1=wl$1;var We$1="string",Ye$1="array",ze$1="cursor",te$1="indent",be$1="align",Ve$1="trim",re$1="group",se$1="fill",pe$1="if-break",Ge$1="indent-if-break",_e$1="line-suffix",je$1="line-suffix-boundary",K$1="line",He$1="label",ke$1="break-parent",Tt$1=new Set([ze$1,te$1,be$1,Ve$1,re$1,se$1,pe$1,Ge$1,_e$1,je$1,K$1,He$1,ke$1]);function vl$1(t){if(typeof t=="string")return We$1;if(Array.isArray(t))return Ye$1;if(!t)return;let{type:e}=t;if(Tt$1.has(e))return e}var Q=vl$1;var xl$1=t=>new Intl.ListFormat("en-US",{type:"disjunction"}).format(t);function bl$1(t){let e=t===null?"null":typeof t;if(e!=="string"&&e!=="object")return `Unexpected doc '${e}',
Expected it to be 'string' or 'object'.`;if(Q(t))throw new Error("doc is valid.");let s=Object.prototype.toString.call(t);if(s!=="[object Object]")return `Unexpected doc '${s}'.`;let r=xl$1([...Tt$1].map(n=>`'${n}'`));return `Unexpected doc.type '${t.type}'.
Expected it to be ${r}.`}var Wr$1=class Wr extends Error{name="InvalidDocError";constructor(e){super(bl$1(e)),this.doc=e;}},Yr$1=Wr$1;var en$1=()=>{},Ee$1=en$1;function q$1(t){return {type:te$1,contents:t}}function tn$1(t,e){return {type:be$1,contents:e,n:t}}function L$1(t,e={}){return Ee$1(e.expandedStates),{type:re$1,id:e.id,contents:t,break:!!e.shouldBreak,expandedStates:e.expandedStates}}function rn$1(t){return tn$1({type:"root"},t)}function ie$1(t){return tn$1(-1,t)}function Se$1(t){return {type:se$1,parts:t}}function Ct$1(t,e="",s={}){return {type:pe$1,breakContents:t,flatContents:e,groupId:s.groupId}}function sn$1(t){return {type:_e$1,contents:t}}var Ke$1={type:ke$1};var _l$1={type:K$1,hard:!0};var A={type:K$1},B$1={type:K$1,soft:!0},S=[_l$1,Ke$1];function Y$1(t,e){let s=[];for(let r=0;r<e.length;r++)r!==0&&s.push(t),s.push(e[r]);return s}var kl$1=(t,e,s)=>{if(!(t&&e==null))return Array.isArray(e)||typeof e=="string"?e[s<0?e.length+s:s]:e.at(s)},$$1=kl$1;function El$1(t,e){if(typeof t=="string")return e(t);let s=new Map;return r(t);function r(i){if(s.has(i))return s.get(i);let o=n(i);return s.set(i,o),o}function n(i){switch(Q(i)){case Ye$1:return e(i.map(r));case se$1:return e({...i,parts:i.parts.map(r)});case pe$1:return e({...i,breakContents:r(i.breakContents),flatContents:r(i.flatContents)});case re$1:{let{expandedStates:o,contents:u}=i;return o?(o=o.map(r),u=o[0]):u=r(u),e({...i,contents:u,expandedStates:o})}case be$1:case te$1:case Ge$1:case He$1:case _e$1:return e({...i,contents:r(i.contents)});case We$1:case ze$1:case Ve$1:case je$1:case K$1:case ke$1:return e(i);default:throw new Yr$1(i)}}}function Sl$1(t){return t.type===K$1&&!t.hard?t.soft?"":" ":t.type===pe$1?t.flatContents:t}function nn$1(t){return El$1(t,Sl$1)}function Tl$1(t){return Array.isArray(t)&&t.length>0}var oe$1=Tl$1;var on$1=new Proxy(()=>{},{get:()=>on$1}),an$1=on$1;var Ot$1="'",un$1='"';function Cl$1(t,e){let s=e===!0||e===Ot$1?Ot$1:un$1,r=s===Ot$1?un$1:Ot$1,n=0,i=0;for(let o of t)o===s?n++:o===r&&i++;return n>i?r:s}var ln$1=Cl$1;function Ol$1(t,e,s){let r=e==='"'?"'":'"',i=k$1(!1,t,/\\(.)|(["'])/gsu,(o,u,a)=>u===r?u:a===e?"\\"+a:a||(s&&/^[^\n\r"'0-7\\bfnrt-vx\u2028\u2029]$/u.test(u)?u:"\\"+u));return e+i+e}var cn$1=Ol$1;function Al$1(t,e){an$1(/^(?<quote>["']).*\k<quote>$/su.test(t));let s=t.slice(1,-1),r=e.parser==="json"||e.parser==="jsonc"||e.parser==="json5"&&e.quoteProps==="preserve"&&!e.singleQuote?'"':e.__isInHtmlAttribute?"'":ln$1(s,e.singleQuote);return t.charAt(0)===r?t:cn$1(s,r,!1)}var At$1=Al$1;var zr$1=class zr extends Error{name="UnexpectedNodeError";constructor(e,s,r="type"){super(`Unexpected ${s} node ${r}: ${JSON.stringify(e[r])}.`),this.node=e;}},fn$1=zr$1;function Nl$1(t){return (t==null?void 0:t.type)==="front-matter"}var Te$1=Nl$1;var Pl$1=new Set(["raw","raws","sourceIndex","source","before","after","trailingComma","spaces"]);function pn$1(t,e,s){if(Te$1(t)&&t.language==="yaml"&&delete e.value,t.type==="css-comment"&&s.type==="css-root"&&s.nodes.length>0&&((s.nodes[0]===t||Te$1(s.nodes[0])&&s.nodes[1]===t)&&(delete e.text,/^\*\s*@(?:format|prettier)\s*$/u.test(t.text))||s.type==="css-root"&&$$1(!1,s.nodes,-1)===t))return null;if(t.type==="value-root"&&delete e.text,(t.type==="media-query"||t.type==="media-query-list"||t.type==="media-feature-expression")&&delete e.value,t.type==="css-rule"&&delete e.params,(t.type==="media-feature"||t.type==="media-keyword"||t.type==="media-type"||t.type==="media-unknown"||t.type==="media-url"||t.type==="media-value"||t.type==="selector-attribute"||t.type==="selector-string"||t.type==="selector-class"||t.type==="selector-combinator"||t.type==="value-string")&&t.value&&(e.value=Rl$1(t.value)),t.type==="selector-combinator"&&(e.value=k$1(!1,e.value,/\s+/gu," ")),t.type==="media-feature"&&(e.value=k$1(!1,e.value," ","")),(t.type==="value-word"&&(t.isColor&&t.isHex||["initial","inherit","unset","revert"].includes(t.value.toLowerCase()))||t.type==="media-feature"||t.type==="selector-root-invalid"||t.type==="selector-pseudo")&&(e.value=e.value.toLowerCase()),t.type==="css-decl"&&(e.prop=t.prop.toLowerCase()),(t.type==="css-atrule"||t.type==="css-import")&&(e.name=t.name.toLowerCase()),t.type==="value-number"&&(e.unit=t.unit.toLowerCase()),t.type==="value-unknown"&&(e.value=k$1(!1,e.value,/;$/gu,"")),t.type==="selector-attribute"&&(e.attribute=t.attribute.trim(),t.namespace&&typeof t.namespace=="string"&&(e.namespace=t.namespace.trim()||!0),t.value&&(e.value=k$1(!1,e.value.trim(),/^["']|["']$/gu,""),delete e.quoted)),(t.type==="media-value"||t.type==="media-type"||t.type==="value-number"||t.type==="selector-root-invalid"||t.type==="selector-class"||t.type==="selector-combinator"||t.type==="selector-tag")&&t.value&&(e.value=k$1(!1,e.value,/([\d+.e-]+)([a-z]*)/giu,(r,n,i)=>{let o=Number(n);return Number.isNaN(o)?r:o+i.toLowerCase()})),t.type==="selector-tag"){let r=e.value.toLowerCase();["from","to"].includes(r)&&(e.value=r);}if(t.type==="css-atrule"&&t.name.toLowerCase()==="supports"&&delete e.value,t.type==="selector-unknown"&&delete e.value,t.type==="value-comma_group"){let r=t.groups.findIndex(n=>n.type==="value-number"&&n.unit==="...");r!==-1&&(e.groups[r].unit="",e.groups.splice(r+1,0,{type:"value-word",value:"...",isColor:!1,isHex:!1}));}if(t.type==="value-comma_group"&&t.groups.some(r=>r.type==="value-atword"&&r.value.endsWith("[")||r.type==="value-word"&&r.value.startsWith("]")))return {type:"value-atword",value:t.groups.map(r=>r.value).join(""),group:{open:null,close:null,groups:[],type:"value-paren_group"}}}pn$1.ignoredProperties=Pl$1;function Rl$1(t){return k$1(!1,k$1(!1,t,"'",'"'),/\\([^\da-f])/giu,"$1")}var hn$1=pn$1;async function Il$1(t,e){if(t.language==="yaml"){let s=t.value.trim(),r=s?await e(s,{parser:"yaml"}):"";return rn$1([t.startDelimiter,t.explicitLanguage,S,r,r?S:"",t.endDelimiter])}}var dn$1=Il$1;function mn$1(t){let{node:e}=t;if(e.type==="front-matter")return async s=>{let r=await dn$1(e,s);return r?[r,S]:void 0}}mn$1.getVisitorKeys=t=>t.type==="css-root"?["frontMatter"]:[];var yn$1=mn$1;var Qe$1=null;function Je$1(t){if(Qe$1!==null&&typeof Qe$1.property){let e=Qe$1;return Qe$1=Je$1.prototype=null,e}return Qe$1=Je$1.prototype=t??Object.create(null),new Je$1}var ql$1=10;for(let t=0;t<=ql$1;t++)Je$1();function Vr$1(t){return Je$1(t)}function Ll$1(t,e="type"){Vr$1(t);function s(r){let n=r[e],i=t[n];if(!Array.isArray(i))throw Object.assign(new Error(`Missing visitor keys for '${n}'.`),{node:r});return i}return s}var gn$1=Ll$1;var Dl$1={"front-matter":[],"css-root":["frontMatter","nodes"],"css-comment":[],"css-rule":["selector","nodes"],"css-decl":["value","selector","nodes"],"css-atrule":["selector","params","value","nodes"],"media-query-list":["nodes"],"media-query":["nodes"],"media-type":[],"media-feature-expression":["nodes"],"media-feature":[],"media-colon":[],"media-value":[],"media-keyword":[],"media-url":[],"media-unknown":[],"selector-root":["nodes"],"selector-selector":["nodes"],"selector-comment":[],"selector-string":[],"selector-tag":[],"selector-id":[],"selector-class":[],"selector-attribute":[],"selector-combinator":["nodes"],"selector-universal":[],"selector-pseudo":["nodes"],"selector-nesting":[],"selector-unknown":[],"value-value":["group"],"value-root":["group"],"value-comment":[],"value-comma_group":["groups"],"value-paren_group":["open","groups","close"],"value-func":["group"],"value-paren":[],"value-number":[],"value-operator":[],"value-word":[],"value-colon":[],"value-comma":[],"value-string":[],"value-atword":[],"value-unicode-range":[],"value-unknown":[]},wn$1=Dl$1;var Bl$1=gn$1(wn$1),vn$1=Bl$1;function Ml$1(t,e){let s=0;for(let r=0;r<t.line-1;++r)s=e.indexOf(`
`,s)+1;return s+t.column}var Gr$1=Ml$1;function Nt$1(t){return (e,s,r)=>{let n=!!(r!=null&&r.backwards);if(s===!1)return !1;let{length:i}=e,o=s;for(;o>=0&&o<i;){let u=e.charAt(o);if(t instanceof RegExp){if(!t.test(u))return o}else if(!t.includes(u))return o;n?o--:o++;}return o===-1||o===i?o:!1}}var Pt$1=Nt$1(" 	"),xn$1=Nt$1(",; 	"),Rt$1=Nt$1(/[^\n\r]/u);function bn$1(t,e){var s,r,n;if(typeof((r=(s=t.source)==null?void 0:s.start)==null?void 0:r.offset)=="number")return t.source.start.offset;if(typeof t.sourceIndex=="number")return t.sourceIndex;if((n=t.source)!=null&&n.start)return Gr$1(t.source.start,e);throw Object.assign(new Error("Can not locate node."),{node:t})}function jr$1(t,e){var s,r;if(t.type==="css-comment"&&t.inline)return Rt$1(e,t.source.startOffset);if(typeof((r=(s=t.source)==null?void 0:s.end)==null?void 0:r.offset)=="number")return t.source.end.offset;if(t.source){if(t.source.end)return Gr$1(t.source.end,e);if(oe$1(t.nodes))return jr$1($$1(!1,t.nodes,-1),e)}return null}function Hr$1(t,e){t.source&&(t.source.startOffset=bn$1(t,e),t.source.endOffset=jr$1(t,e));for(let s in t){let r=t[s];s==="source"||!r||typeof r!="object"||(r.type==="value-root"||r.type==="value-unknown"?_n$1(r,Ul$1(t),r.text||r.value):Hr$1(r,e));}}function _n$1(t,e,s){t.source&&(t.source.startOffset=bn$1(t,s)+e,t.source.endOffset=jr$1(t,s)+e);for(let r in t){let n=t[r];r==="source"||!n||typeof n!="object"||_n$1(n,e,s);}}function Ul$1(t){var s;let e=t.source.startOffset;return typeof t.prop=="string"&&(e+=t.prop.length),t.type==="css-atrule"&&typeof t.name=="string"&&(e+=1+t.name.length+t.raws.afterName.match(/^\s*:?\s*/u)[0].length),t.type!=="css-atrule"&&typeof((s=t.raws)==null?void 0:s.between)=="string"&&(e+=t.raws.between.length),e}function kn(t){let e="initial",s="initial",r,n=!1,i=[];for(let o=0;o<t.length;o++){let u=t[o];switch(e){case"initial":if(u==="'"){e="single-quotes";continue}if(u==='"'){e="double-quotes";continue}if((u==="u"||u==="U")&&t.slice(o,o+4).toLowerCase()==="url("){e="url",o+=3;continue}if(u==="*"&&t[o-1]==="/"){e="comment-block";continue}if(u==="/"&&t[o-1]==="/"){e="comment-inline",r=o-1;continue}continue;case"single-quotes":if(u==="'"&&t[o-1]!=="\\"&&(e=s,s="initial"),u===`
`||u==="\r")return t;continue;case"double-quotes":if(u==='"'&&t[o-1]!=="\\"&&(e=s,s="initial"),u===`
`||u==="\r")return t;continue;case"url":if(u===")"&&(e="initial"),u===`
`||u==="\r")return t;if(u==="'"){e="single-quotes",s="url";continue}if(u==='"'){e="double-quotes",s="url";continue}continue;case"comment-block":u==="/"&&t[o-1]==="*"&&(e="initial");continue;case"comment-inline":(u==='"'||u==="'"||u==="*")&&(n=!0),(u===`
`||u==="\r")&&(n&&i.push([r,o]),e="initial",n=!1);continue}}for(let[o,u]of i)t=t.slice(0,o)+k$1(!1,t.slice(o,u),/["'*]/gu," ")+t.slice(u);return t}function P(t){var e;return (e=t.source)==null?void 0:e.startOffset}function R(t){var e;return (e=t.source)==null?void 0:e.endOffset}var Fl$1=/\*\/$/,$l$1=/^\/\*\*?/,Cn$1=/^\s*(\/\*\*?(.|\r?\n)*?\*\/)/,Wl$1=/(^|\s+)\/\/([^\n\r]*)/g,En$1=/^(\r?\n)+/,Yl$1=/(?:^|\r?\n) *(@[^\n\r]*?) *\r?\n *(?![^\n\r@]*\/\/[^]*)([^\s@][^\n\r@]+?) *\r?\n/g,Sn$1=/(?:^|\r?\n) *@(\S+) *([^\n\r]*)/g,zl$1=/(\r?\n|^) *\* ?/g,On$1=[];function An$1(t){let e=t.match(Cn$1);return e?e[0].trimStart():""}function Nn$1(t){let e=t.match(Cn$1),s=e==null?void 0:e[0];return s==null?t:t.slice(s.length)}function Pn$1(t){let e=`
`;t=k$1(!1,t.replace($l$1,"").replace(Fl$1,""),zl$1,"$1");let s="";for(;s!==t;)s=t,t=k$1(!1,t,Yl$1,`${e}$1 $2${e}`);t=t.replace(En$1,"").trimEnd();let r=Object.create(null),n=k$1(!1,t,Sn$1,"").replace(En$1,"").trimEnd(),i;for(;i=Sn$1.exec(t);){let o=k$1(!1,i[2],Wl$1,"");if(typeof r[i[1]]=="string"||Array.isArray(r[i[1]])){let u=r[i[1]];r[i[1]]=[...On$1,...Array.isArray(u)?u:[u],o];}else r[i[1]]=o;}return {comments:n,pragmas:r}}function Rn$1({comments:t="",pragmas:e={}}){let s=`
`,r="/**",n=" *",i=" */",o=Object.keys(e),u=o.flatMap(c=>Tn$1(c,e[c])).map(c=>`${n} ${c}${s}`).join("");if(!t){if(o.length===0)return "";if(o.length===1&&!Array.isArray(e[o[0]])){let c=e[o[0]];return `${r} ${Tn$1(o[0],c)[0]}${i}`}}let a=t.split(s).map(c=>`${n} ${c}`).join(s)+s;return r+s+(t?a:"")+(t&&o.length>0?n+s:"")+u+i}function Tn$1(t,e){return [...On$1,...Array.isArray(e)?e:[e]].map(s=>`@${t} ${s}`.trim())}function Vl$1(t){if(!t.startsWith("#!"))return "";let e=t.indexOf(`
`);return e===-1?t:t.slice(0,e)}var In$1=Vl$1;function qn$1(t){let e=In$1(t);e&&(t=t.slice(e.length+1));let s=An$1(t),{pragmas:r,comments:n}=Pn$1(s);return {shebang:e,text:t,pragmas:r,comments:n}}function Ln$1(t){let{pragmas:e}=qn$1(t);return Object.prototype.hasOwnProperty.call(e,"prettier")||Object.prototype.hasOwnProperty.call(e,"format")}function Dn$1(t){let{shebang:e,text:s,pragmas:r,comments:n}=qn$1(t),i=Nn$1(s),o=Rn$1({pragmas:{format:"",...r},comments:n.trimStart()});return (e?`${e}
`:"")+o+(i.startsWith(`
`)?`
`:`

`)+i}var Xe$1=3;function Gl$1(t){let e=t.slice(0,Xe$1);if(e!=="---"&&e!=="+++")return;let s=t.indexOf(`
`,Xe$1);if(s===-1)return;let r=t.slice(Xe$1,s).trim(),n=t.indexOf(`
${e}`,s),i=r;if(i||(i=e==="+++"?"toml":"yaml"),n===-1&&e==="---"&&i==="yaml"&&(n=t.indexOf(`
...`,s)),n===-1)return;let o=n+1+Xe$1,u=t.charAt(o+1);if(!/\s?/u.test(u))return;let a=t.slice(0,o);return {type:"front-matter",language:i,explicitLanguage:r,value:t.slice(s+1,n),startDelimiter:e,endDelimiter:a.slice(-Xe$1),raw:a}}function jl$1(t){let e=Gl$1(t);if(!e)return {content:t};let{raw:s}=e;return {frontMatter:e,content:k$1(!1,s,/[^\n]/gu," ")+t.slice(s.length)}}var Ze$1=jl$1;function Bn$1(t){return Ln$1(Ze$1(t).content)}function Mn$1(t){let{frontMatter:e,content:s}=Ze$1(t);return (e?e.raw+`

`:"")+Dn$1(s)}var Hl$1=new Set(["red","green","blue","alpha","a","rgb","hue","h","saturation","s","lightness","l","whiteness","w","blackness","b","tint","shade","blend","blenda","contrast","hsl","hsla","hwb","hwba"]);function Un$1(t){var e,s;return (s=(e=t.findAncestor(r=>r.type==="css-decl"))==null?void 0:e.prop)==null?void 0:s.toLowerCase()}var Kl$1=new Set(["initial","inherit","unset","revert"]);function Fn$1(t){return Kl$1.has(t.toLowerCase())}function $n$1(t,e){var r;let s=t.findAncestor(n=>n.type==="css-atrule");return ((r=s==null?void 0:s.name)==null?void 0:r.toLowerCase().endsWith("keyframes"))&&["from","to"].includes(e.toLowerCase())}function ae$1(t){return t.includes("$")||t.includes("@")||t.includes("#")||t.startsWith("%")||t.startsWith("--")||t.startsWith(":--")||t.includes("(")&&t.includes(")")?t:t.toLowerCase()}function Ce$1(t,e){var r;let s=t.findAncestor(n=>n.type==="value-func");return ((r=s==null?void 0:s.value)==null?void 0:r.toLowerCase())===e}function Wn$1(t){var r;let e=t.findAncestor(n=>n.type==="css-rule"),s=(r=e==null?void 0:e.raws)==null?void 0:r.selector;return s&&(s.startsWith(":import")||s.startsWith(":export"))}function Oe$1(t,e){let s=Array.isArray(e)?e:[e],r=t.findAncestor(n=>n.type==="css-atrule");return r&&s.includes(r.name.toLowerCase())}function Yn$1(t){var s;let{node:e}=t;return e.groups[0].value==="url"&&e.groups.length===2&&((s=t.findAncestor(r=>r.type==="css-atrule"))==null?void 0:s.name)==="import"}function zn$1(t){return t.type==="value-func"&&t.value.toLowerCase()==="url"}function Vn$1(t){return t.type==="value-func"&&t.value.toLowerCase()==="var"}function Gn$1(t){let{selector:e}=t;return e?typeof e=="string"&&/^@.+:.*$/u.test(e)||e.value&&/^@.+:.*$/u.test(e.value):!1}function jn$1(t){return t.type==="value-word"&&["from","through","end"].includes(t.value)}function Hn$1(t){return t.type==="value-word"&&["and","or","not"].includes(t.value)}function Kn$1(t){return t.type==="value-word"&&t.value==="in"}function It$1(t){return t.type==="value-operator"&&t.value==="*"}function et$1(t){return t.type==="value-operator"&&t.value==="/"}function J$1(t){return t.type==="value-operator"&&t.value==="+"}function he$1(t){return t.type==="value-operator"&&t.value==="-"}function Ql$1(t){return t.type==="value-operator"&&t.value==="%"}function qt$1(t){return It$1(t)||et$1(t)||J$1(t)||he$1(t)||Ql$1(t)}function Qn$1(t){return t.type==="value-word"&&["==","!="].includes(t.value)}function Jn$1(t){return t.type==="value-word"&&["<",">","<=",">="].includes(t.value)}function tt$1(t,e){return e.parser==="scss"&&t.type==="css-atrule"&&["if","else","for","each","while"].includes(t.name)}function Qr$1(t){var e;return ((e=t.raws)==null?void 0:e.params)&&/^\(\s*\)$/u.test(t.raws.params)}function Lt$1(t){return t.name.startsWith("prettier-placeholder")}function Xn$1(t){return t.prop.startsWith("@prettier-placeholder")}function Zn$1(t,e){return t.value==="$$"&&t.type==="value-func"&&(e==null?void 0:e.type)==="value-word"&&!e.raws.before}function ei$1(t){var e,s;return ((e=t.value)==null?void 0:e.type)==="value-root"&&((s=t.value.group)==null?void 0:s.type)==="value-value"&&t.prop.toLowerCase()==="composes"}function ti$1(t){var e,s,r;return ((r=(s=(e=t.value)==null?void 0:e.group)==null?void 0:s.group)==null?void 0:r.type)==="value-paren_group"&&t.value.group.group.open!==null&&t.value.group.group.close!==null}function de(t){var e;return ((e=t.raws)==null?void 0:e.before)===""}function Dt$1(t){var e,s;return t.type==="value-comma_group"&&((s=(e=t.groups)==null?void 0:e[1])==null?void 0:s.type)==="value-colon"}function Kr$1(t){var e;return t.type==="value-paren_group"&&((e=t.groups)==null?void 0:e[0])&&Dt$1(t.groups[0])}function Jr$1(t,e){var i;if(e.parser!=="scss")return !1;let{node:s}=t;if(s.groups.length===0)return !1;let r=t.grandparent;if(!Kr$1(s)&&!(r&&Kr$1(r)))return !1;let n=t.findAncestor(o=>o.type==="css-decl");return !!((i=n==null?void 0:n.prop)!=null&&i.startsWith("$")||Kr$1(r)||r.type==="value-func")}function Ae$1(t){return t.type==="value-comment"&&t.inline}function Bt$1(t){return t.type==="value-word"&&t.value==="#"}function Xr$1(t){return t.type==="value-word"&&t.value==="{"}function Mt$1(t){return t.type==="value-word"&&t.value==="}"}function rt$1(t){return ["value-word","value-atword"].includes(t.type)}function st$1(t){return (t==null?void 0:t.type)==="value-colon"}function ri$1(t,e){if(!Dt$1(e))return !1;let{groups:s}=e,r=s.indexOf(t);return r===-1?!1:st$1(s[r+1])}function si$1(t){return t.value&&["not","and","or"].includes(t.value.toLowerCase())}function ni$1(t){return t.type!=="value-func"?!1:Hl$1.has(t.value.toLowerCase())}function Ne$1(t){return /\/\//u.test(t.split(/[\n\r]/u).pop())}function nt$1(t){return (t==null?void 0:t.type)==="value-atword"&&t.value.startsWith("prettier-placeholder-")}function ii$1(t,e){var s,r;if(((s=t.open)==null?void 0:s.value)!=="("||((r=t.close)==null?void 0:r.value)!==")"||t.groups.some(n=>n.type!=="value-comma_group"))return !1;if(e.type==="value-comma_group"){let n=e.groups.indexOf(t)-1,i=e.groups[n];if((i==null?void 0:i.type)==="value-word"&&i.value==="with")return !0}return !1}function it$1(t){var e,s;return t.type==="value-paren_group"&&((e=t.open)==null?void 0:e.value)==="("&&((s=t.close)==null?void 0:s.value)===")"}function Jl$1(t,e,s){var d;let{node:r}=t,n=t.parent,i=t.grandparent,o=Un$1(t),u=o&&n.type==="value-value"&&(o==="grid"||o.startsWith("grid-template")),a=t.findAncestor(m=>m.type==="css-atrule"),c=a&&tt$1(a,e),f=r.groups.some(m=>Ae$1(m)),p=t.map(s,"groups"),l=[""],y=Ce$1(t,"url"),x=!1,h=!1;for(let m=0;m<r.groups.length;++m){let b=r.groups[m-1],w=r.groups[m],v=r.groups[m+1],N=r.groups[m+2];if(Ae$1(w)&&!v){l.push([l.pop(),sn$1([" ",p[m]])]);continue}if(l.push([l.pop(),p[m]]),y){(v&&J$1(v)||J$1(w))&&l.push([l.pop()," "]);continue}if(st$1(v)&&w.type==="value-word"&&l.length>2&&r.groups.slice(0,m).every(O=>O.type==="value-comment")&&!Ae$1(b)&&(l[l.length-2]=ie$1($$1(!1,l,-2))),Oe$1(t,"forward")&&w.type==="value-word"&&w.value&&b!==void 0&&b.type==="value-word"&&b.value==="as"&&v.type==="value-operator"&&v.value==="*"||!v||w.type==="value-word"&&w.value.endsWith("-")&&nt$1(v))continue;if(w.type==="value-string"&&w.quoted){let O=w.value.lastIndexOf("#{"),ve=w.value.lastIndexOf("}");O!==-1&&ve!==-1?x=O>ve:O!==-1?x=!0:ve!==-1&&(x=!1);}if(x||st$1(w)||st$1(v)||w.type==="value-atword"&&(w.value===""||w.value.endsWith("["))||v.type==="value-word"&&v.value.startsWith("]")||w.value==="~"||w.type!=="value-string"&&w.value&&w.value.includes("\\")&&v&&v.type!=="value-comment"||b!=null&&b.value&&b.value.indexOf("\\")===b.value.length-1&&w.type==="value-operator"&&w.value==="/"||w.value==="\\"||Zn$1(w,v)||Bt$1(w)||Xr$1(w)||Mt$1(v)||Xr$1(v)&&de(v)||Mt$1(w)&&de(v)||w.value==="--"&&Bt$1(v))continue;let F=qt$1(w),H=qt$1(v);if((F&&Bt$1(v)||H&&Mt$1(w))&&de(v)||!b&&et$1(w)||Ce$1(t,"calc")&&(J$1(w)||J$1(v)||he$1(w)||he$1(v))&&de(v))continue;let W=(J$1(w)||he$1(w))&&m===0&&(v.type==="value-number"||v.isHex)&&i&&ni$1(i)&&!de(v),T=(N==null?void 0:N.type)==="value-func"||N&&rt$1(N)||w.type==="value-func"||rt$1(w),C=v.type==="value-func"||rt$1(v)||(b==null?void 0:b.type)==="value-func"||b&&rt$1(b);if(e.parser==="scss"&&F&&w.value==="-"&&v.type==="value-func"&&R(w)!==P(v)){l.push([l.pop()," "]);continue}if(!(!(It$1(v)||It$1(w))&&!Ce$1(t,"calc")&&!W&&(et$1(v)&&!T||et$1(w)&&!C||J$1(v)&&!T||J$1(w)&&!C||he$1(v)||he$1(w))&&(de(v)||F&&(!b||b&&qt$1(b))))&&!((e.parser==="scss"||e.parser==="less")&&F&&w.value==="-"&&it$1(v)&&R(w)===P(v.open)&&v.open.value==="(")){if(Ae$1(w)){if(n.type==="value-paren_group"){l.push(ie$1(S),"");continue}l.push(S,"");continue}if(c&&(Qn$1(v)||Jn$1(v)||Hn$1(v)||Kn$1(w)||jn$1(w))){l.push([l.pop()," "]);continue}if(a&&a.name.toLowerCase()==="namespace"){l.push([l.pop()," "]);continue}if(u){w.source&&v.source&&w.source.start.line!==v.source.start.line?(l.push(S,""),h=!0):l.push([l.pop()," "]);continue}if(H){l.push([l.pop()," "]);continue}if((v==null?void 0:v.value)!=="..."&&!(nt$1(w)&&nt$1(v)&&R(w)===P(v))){if(nt$1(w)&&it$1(v)&&R(w)===P(v.open)){l.push(B$1,"");continue}if(w.value==="with"&&it$1(v)){l=[[Se$1(l)," "]];continue}(d=w.value)!=null&&d.endsWith("#")&&v.value==="{"&&it$1(v.group)||Ae$1(v)&&!N||l.push(A,"");}}}return f&&l.push([l.pop(),Ke$1]),h&&l.unshift("",S),c?L$1(q$1(l)):Yn$1(t)?L$1(Se$1(l)):L$1(q$1(Se$1(l)))}var oi$1=Jl$1;function Xl$1(t){return t.length===1?t:t.toLowerCase().replace(/^([+-]?[\d.]+e)(?:\+|(-))?0*(?=\d)/u,"$1$2").replace(/^([+-]?[\d.]+)e[+-]?0+$/u,"$1").replace(/^([+-])?\./u,"$10.").replace(/(\.\d+?)0+(?=e|$)/u,"$1").replace(/\.(?=e|$)/u,"")}var ai$1=Xl$1;var Zr$1=new Map([["em","em"],["rem","rem"],["ex","ex"],["rex","rex"],["cap","cap"],["rcap","rcap"],["ch","ch"],["rch","rch"],["ic","ic"],["ric","ric"],["lh","lh"],["rlh","rlh"],["vw","vw"],["svw","svw"],["lvw","lvw"],["dvw","dvw"],["vh","vh"],["svh","svh"],["lvh","lvh"],["dvh","dvh"],["vi","vi"],["svi","svi"],["lvi","lvi"],["dvi","dvi"],["vb","vb"],["svb","svb"],["lvb","lvb"],["dvb","dvb"],["vmin","vmin"],["svmin","svmin"],["lvmin","lvmin"],["dvmin","dvmin"],["vmax","vmax"],["svmax","svmax"],["lvmax","lvmax"],["dvmax","dvmax"],["cm","cm"],["mm","mm"],["q","Q"],["in","in"],["pt","pt"],["pc","pc"],["px","px"],["deg","deg"],["grad","grad"],["rad","rad"],["turn","turn"],["s","s"],["ms","ms"],["hz","Hz"],["khz","kHz"],["dpi","dpi"],["dpcm","dpcm"],["dppx","dppx"],["x","x"],["cqw","cqw"],["cqh","cqh"],["cqi","cqi"],["cqb","cqb"],["cqmin","cqmin"],["cqmax","cqmax"],["fr","fr"]]);function ui$1(t){let e=t.toLowerCase();return Zr$1.has(e)?Zr$1.get(e):t}var li$1=/(["'])(?:(?!\1)[^\\]|\\.)*\1/gsu,Zl$1=/(?:\d*\.\d+|\d+\.?)(?:e[+-]?\d+)?/giu,ec$1=/[a-z]+/giu,tc$1=/[$@]?[_a-z\u0080-\uFFFF][\w\u0080-\uFFFF-]*/giu,rc$1=new RegExp(li$1.source+`|(${tc$1.source})?(${Zl$1.source})(${ec$1.source})?`,"giu");function z$1(t,e){return k$1(!1,t,li$1,s=>At$1(s,e))}function ci$1(t,e){let s=e.singleQuote?"'":'"';return t.includes('"')||t.includes("'")?t:s+t+s}function me$1(t){return k$1(!1,t,rc$1,(e,s,r,n,i)=>!r&&n?es$1(n)+ae$1(i||""):e)}function es$1(t){return ai$1(t).replace(/\.0(?=$|e)/u,"")}function fi$1(t){return t.trailingComma==="es5"||t.trailingComma==="all"}function sc$1(t,e,s){let r=!!(s!=null&&s.backwards);if(e===!1)return !1;let n=t.charAt(e);if(r){if(t.charAt(e-1)==="\r"&&n===`
`)return e-2;if(n===`
`||n==="\r"||n==="\u2028"||n==="\u2029")return e-1}else {if(n==="\r"&&t.charAt(e+1)===`
`)return e+2;if(n===`
`||n==="\r"||n==="\u2028"||n==="\u2029")return e+1}return e}var Ut$1=sc$1;function nc$1(t,e,s={}){let r=Pt$1(t,s.backwards?e-1:e,s),n=Ut$1(t,r,s);return r!==n}var Ft=nc$1;function ic$1(t,e){if(e===!1)return !1;if(t.charAt(e)==="/"&&t.charAt(e+1)==="*"){for(let s=e+2;s<t.length;++s)if(t.charAt(s)==="*"&&t.charAt(s+1)==="/")return s+2}return e}var pi$1=ic$1;function oc$1(t,e){return e===!1?!1:t.charAt(e)==="/"&&t.charAt(e+1)==="/"?Rt$1(t,e):e}var hi$1=oc$1;function ac$1(t,e){let s=null,r=e;for(;r!==s;)s=r,r=xn$1(t,r),r=pi$1(t,r),r=Pt$1(t,r);return r=hi$1(t,r),r=Ut$1(t,r),r!==!1&&Ft(t,r)}var $t$1=ac$1;function uc$1({node:t,parent:e},s){return !!(t.source&&s.originalText.slice(P(t),P(e.close)).trimEnd().endsWith(","))}function lc$1(t,e){return Vn$1(t.grandparent)&&uc$1(t,e)?",":t.node.type!=="value-comment"&&!(t.node.type==="value-comma_group"&&t.node.groups.every(s=>s.type==="value-comment"))&&fi$1(e)&&t.callParent(()=>Jr$1(t,e))?Ct$1(","):""}function di$1(t,e,s){let{node:r,parent:n}=t,i=t.map(({node:y})=>typeof y=="string"?y:s(),"groups");if(n&&zn$1(n)&&(r.groups.length===1||r.groups.length>0&&r.groups[0].type==="value-comma_group"&&r.groups[0].groups.length>0&&r.groups[0].groups[0].type==="value-word"&&r.groups[0].groups[0].value.startsWith("data:")))return [r.open?s("open"):"",Y$1(",",i),r.close?s("close"):""];if(!r.open){let y=ts$1(t);let x=cc$1(Y$1(",",i),2),h=Y$1(y?S:A,x);return q$1(y?[S,h]:L$1(Se$1(h)))}let o=t.map(({node:y,isLast:x,index:h})=>{var b;let d=i[h];Dt$1(y)&&y.type==="value-comma_group"&&y.groups&&y.groups[0].type!=="value-paren_group"&&((b=y.groups[2])==null?void 0:b.type)==="value-paren_group"&&Q(d)===re$1&&Q(d.contents)===te$1&&Q(d.contents.contents)===se$1&&(d=L$1(ie$1(d)));let m=[d,x?lc$1(t,e):","];if(!x&&y.type==="value-comma_group"&&oe$1(y.groups)){let w=$$1(!1,y.groups,-1);!w.source&&w.close&&(w=w.close),w.source&&$t$1(e.originalText,R(w))&&m.push(S);}return m},"groups"),u=ri$1(r,n),a=ii$1(r,n),c=Jr$1(t,e),f=a||c&&!u,p=a||u,l=L$1([r.open?s("open"):"",q$1([B$1,Y$1(A,o)]),B$1,r.close?s("close"):""],{shouldBreak:f});return p?ie$1(l):l}function ts$1(t){return t.match(e=>e.type==="value-paren_group"&&!e.open&&e.groups.some(s=>s.type==="value-comma_group"),(e,s)=>s==="group"&&e.type==="value-value",(e,s)=>s==="group"&&e.type==="value-root",(e,s)=>s==="value"&&(e.type==="css-decl"&&!e.prop.startsWith("--")||e.type==="css-atrule"&&e.variable))}function cc$1(t,e){let s=[];for(let r=0;r<t.length;r+=e)s.push(t.slice(r,r+e));return s}function fc$1(t,e,s){let r=[];return t.each(()=>{let{node:n,previous:i}=t;if((i==null?void 0:i.type)==="css-comment"&&i.text.trim()==="prettier-ignore"?r.push(e.originalText.slice(P(n),R(n))):r.push(s()),t.isLast)return;let{next:o}=t;o.type==="css-comment"&&!Ft(e.originalText,P(o),{backwards:!0})&&!Te$1(n)||o.type==="css-atrule"&&o.name==="else"&&n.type!=="css-comment"?r.push(" "):(r.push(e.__isHTMLStyleAttribute?A:S),$t$1(e.originalText,R(n))&&!Te$1(n)&&r.push(S));},"nodes"),r}var Pe$1=fc$1;function pc$1(t,e,s){var n,i,o,u,a,c;let{node:r}=t;switch(r.type){case"front-matter":return [r.raw,S];case"css-root":{let f=Pe$1(t,e,s),p=r.raws.after.trim();return p.startsWith(";")&&(p=p.slice(1).trim()),[r.frontMatter?[s("frontMatter"),S]:"",f,p?` ${p}`:"",r.nodes.length>0?S:""]}case"css-comment":{let f=r.inline||r.raws.inline,p=e.originalText.slice(P(r),R(r));return f?p.trimEnd():p}case"css-rule":return [s("selector"),r.important?" !important":"",r.nodes?[((n=r.selector)==null?void 0:n.type)==="selector-unknown"&&Ne$1(r.selector.value)?A:r.selector?" ":"","{",r.nodes.length>0?q$1([S,Pe$1(t,e,s)]):"",S,"}",Gn$1(r)?";":""]:";"];case"css-decl":{let f=t.parent,{between:p}=r.raws,l=p.trim(),y=l===":",x=typeof r.value=="string"&&/^ *$/u.test(r.value),h=typeof r.value=="string"?r.value:s("value");return h=ei$1(r)?nn$1(h):h,!y&&Ne$1(l)&&!((o=(i=r.value)==null?void 0:i.group)!=null&&o.group&&t.call(()=>ts$1(t),"value","group","group"))&&(h=q$1([S,ie$1(h)])),[k$1(!1,r.raws.before,/[\s;]/gu,""),f.type==="css-atrule"&&f.variable||Wn$1(t)?r.prop:ae$1(r.prop),l.startsWith("//")?" ":"",l,r.extend||x?"":" ",e.parser==="less"&&r.extend&&r.selector?["extend(",s("selector"),")"]:"",h,r.raws.important?r.raws.important.replace(/\s*!\s*important/iu," !important"):r.important?" !important":"",r.raws.scssDefault?r.raws.scssDefault.replace(/\s*!default/iu," !default"):r.scssDefault?" !default":"",r.raws.scssGlobal?r.raws.scssGlobal.replace(/\s*!global/iu," !global"):r.scssGlobal?" !global":"",r.nodes?[" {",q$1([B$1,Pe$1(t,e,s)]),B$1,"}"]:Xn$1(r)&&!f.raws.semicolon&&e.originalText[R(r)-1]!==";"?"":e.__isHTMLStyleAttribute&&t.isLast?Ct$1(";"):";"]}case"css-atrule":{let f=t.parent,p=Lt$1(r)&&!f.raws.semicolon&&e.originalText[R(r)-1]!==";";if(e.parser==="less"){if(r.mixin)return [s("selector"),r.important?" !important":"",p?"":";"];if(r.function)return [r.name,typeof r.params=="string"?r.params:s("params"),p?"":";"];if(r.variable)return ["@",r.name,": ",r.value?s("value"):"",r.raws.between.trim()?r.raws.between.trim()+" ":"",r.nodes?["{",q$1([r.nodes.length>0?B$1:"",Pe$1(t,e,s)]),B$1,"}"]:"",p?"":";"]}let l=r.name==="import"&&((u=r.params)==null?void 0:u.type)==="value-unknown"&&r.params.value.endsWith(";");return ["@",Qr$1(r)||r.name.endsWith(":")||Lt$1(r)?r.name:ae$1(r.name),r.params?[Qr$1(r)?"":Lt$1(r)?r.raws.afterName===""?"":r.name.endsWith(":")?" ":/^\s*\n\s*\n/u.test(r.raws.afterName)?[S,S]:/^\s*\n/u.test(r.raws.afterName)?S:" ":" ",typeof r.params=="string"?r.params:s("params")]:"",r.selector?q$1([" ",s("selector")]):"",r.value?L$1([" ",s("value"),tt$1(r,e)?ti$1(r)?" ":A:""]):r.name==="else"?" ":"",r.nodes?[tt$1(r,e)?"":r.selector&&!r.selector.nodes&&typeof r.selector.value=="string"&&Ne$1(r.selector.value)||!r.selector&&typeof r.params=="string"&&Ne$1(r.params)?A:" ","{",q$1([r.nodes.length>0?B$1:"",Pe$1(t,e,s)]),B$1,"}"]:p||l?"":";"]}case"media-query-list":{let f=[];return t.each(({node:p})=>{p.type==="media-query"&&p.value===""||f.push(s());},"nodes"),L$1(q$1(Y$1(A,f)))}case"media-query":return [Y$1(" ",t.map(s,"nodes")),t.isLast?"":","];case"media-type":return me$1(z$1(r.value,e));case"media-feature-expression":return r.nodes?["(",...t.map(s,"nodes"),")"]:r.value;case"media-feature":return ae$1(z$1(k$1(!1,r.value,/ +/gu," "),e));case"media-colon":return [r.value," "];case"media-value":return me$1(z$1(r.value,e));case"media-keyword":return z$1(r.value,e);case"media-url":return z$1(k$1(!1,k$1(!1,r.value,/^url\(\s+/giu,"url("),/\s+\)$/gu,")"),e);case"media-unknown":return r.value;case"selector-root":return L$1([Oe$1(t,"custom-selector")?[t.findAncestor(f=>f.type==="css-atrule").customSelector,A]:"",Y$1([",",Oe$1(t,["extend","custom-selector","nest"])?A:S],t.map(s,"nodes"))]);case"selector-selector":{let f=r.nodes.length>1;return L$1((f?q$1:p=>p)(t.map(s,"nodes")))}case"selector-comment":return r.value;case"selector-string":return z$1(r.value,e);case"selector-tag":return [r.namespace?[r.namespace===!0?"":r.namespace.trim(),"|"]:"",((a=t.previous)==null?void 0:a.type)==="selector-nesting"?r.value:me$1($n$1(t,r.value)?r.value.toLowerCase():r.value)];case"selector-id":return ["#",r.value];case"selector-class":return [".",me$1(z$1(r.value,e))];case"selector-attribute":return ["[",r.namespace?[r.namespace===!0?"":r.namespace.trim(),"|"]:"",r.attribute.trim(),r.operator??"",r.value?ci$1(z$1(r.value.trim(),e),e):"",r.insensitive?" i":"","]"];case"selector-combinator":{if(r.value==="+"||r.value===">"||r.value==="~"||r.value===">>>"){let l=t.parent;return [l.type==="selector-selector"&&l.nodes[0]===r?"":A,r.value,t.isLast?"":" "]}let f=r.value.trim().startsWith("(")?A:"",p=me$1(z$1(r.value.trim(),e))||A;return [f,p]}case"selector-universal":return [r.namespace?[r.namespace===!0?"":r.namespace.trim(),"|"]:"",r.value];case"selector-pseudo":return [ae$1(r.value),oe$1(r.nodes)?L$1(["(",q$1([B$1,Y$1([",",A],t.map(s,"nodes"))]),B$1,")"]):""];case"selector-nesting":return r.value;case"selector-unknown":{let f=t.findAncestor(y=>y.type==="css-rule");if(f!=null&&f.isSCSSNesterProperty)return me$1(z$1(ae$1(r.value),e));let p=t.parent;if((c=p.raws)!=null&&c.selector){let y=P(p),x=y+p.raws.selector.length;return e.originalText.slice(y,x).trim()}let l=t.grandparent;if(p.type==="value-paren_group"&&(l==null?void 0:l.type)==="value-func"&&l.value==="selector"){let y=R(p.open)+1,x=P(p.close),h=e.originalText.slice(y,x).trim();return Ne$1(h)?[Ke$1,h]:h}return r.value}case"value-value":case"value-root":return s("group");case"value-comment":return e.originalText.slice(P(r),R(r));case"value-comma_group":return oi$1(t,e,s);case"value-paren_group":return di$1(t,e,s);case"value-func":return [r.value,Oe$1(t,"supports")&&si$1(r)?" ":"",s("group")];case"value-paren":return r.value;case"value-number":return [es$1(r.value),ui$1(r.unit)];case"value-operator":return r.value;case"value-word":return r.isColor&&r.isHex||Fn$1(r.value)?r.value.toLowerCase():r.value;case"value-colon":{let{previous:f}=t;return L$1([r.value,typeof(f==null?void 0:f.value)=="string"&&f.value.endsWith("\\")||Ce$1(t,"url")?"":A])}case"value-string":return At$1(r.raws.quote+r.value+r.raws.quote,e);case"value-atword":return ["@",r.value];case"value-unicode-range":return r.value;case"value-unknown":return r.value;case"value-comma":default:throw new fn$1(r,"PostCSS")}}var hc$1={print:pc$1,embed:yn$1,insertPragma:Mn$1,massageAstNode:hn$1,getVisitorKeys:vn$1},mi$1=hc$1;var yi$1=[{linguistLanguageId:50,name:"CSS",type:"markup",tmScope:"source.css",aceMode:"css",codemirrorMode:"css",codemirrorMimeType:"text/css",color:"#563d7c",extensions:[".css",".wxss"],parsers:["css"],vscodeLanguageIds:["css"]},{linguistLanguageId:262764437,name:"PostCSS",type:"markup",color:"#dc3a0c",tmScope:"source.postcss",group:"CSS",extensions:[".pcss",".postcss"],aceMode:"text",parsers:["css"],vscodeLanguageIds:["postcss"]},{linguistLanguageId:198,name:"Less",type:"markup",color:"#1d365d",aliases:["less-css"],extensions:[".less"],tmScope:"source.css.less",aceMode:"less",codemirrorMode:"css",codemirrorMimeType:"text/css",parsers:["less"],vscodeLanguageIds:["less"]},{linguistLanguageId:329,name:"SCSS",type:"markup",color:"#c6538c",tmScope:"source.css.scss",aceMode:"scss",codemirrorMode:"css",codemirrorMimeType:"text/x-scss",extensions:[".scss"],parsers:["scss"],vscodeLanguageIds:["scss"]}];var gi$1={bracketSpacing:{category:"Common",type:"boolean",default:!0,description:"Print spaces between brackets.",oppositeDescription:"Do not print spaces between brackets."},singleQuote:{category:"Common",type:"boolean",default:!1,description:"Use single quotes instead of double quotes."},proseWrap:{category:"Common",type:"choice",default:"preserve",description:"How to wrap prose.",choices:[{value:"always",description:"Wrap prose if it exceeds the print width."},{value:"never",description:"Do not wrap prose."},{value:"preserve",description:"Wrap prose as-is."}]},bracketSameLine:{category:"Common",type:"boolean",default:!1,description:"Put > of opening tags on the last line instead of on a new line."},singleAttributePerLine:{category:"Common",type:"boolean",default:!1,description:"Enforce single attribute per line in HTML, Vue and JSX."}};var dc$1={singleQuote:gi$1.singleQuote},wi$1=dc$1;var Qs$1={};Zs$1(Qs$1,{css:()=>Cy,less:()=>Oy,scss:()=>Ay});var il$1=xe$1(gt()),ol$1=xe$1(So$1()),al$1=xe$1(ia$1());function ep$1(t,e){let s=new SyntaxError(t+" ("+e.loc.start.line+":"+e.loc.start.column+")");return Object.assign(s,e)}var oa$1=ep$1;var ha$1=xe$1(pa$1());function X$1(t,e,s){if(t&&typeof t=="object"){delete t.parent;for(let r in t)X$1(t[r],e,s),r==="type"&&typeof t[r]=="string"&&!t[r].startsWith(e)&&(!s||!s.test(t[r]))&&(t[r]=e+t[r]);}return t}function qs$1(t){if(t&&typeof t=="object"){delete t.parent;for(let e in t)qs$1(t[e]);!Array.isArray(t)&&t.value&&!t.type&&(t.type="unknown");}return t}var pp$1=ha$1.default.default;function hp$1(t){let e;try{e=pp$1(t);}catch{return {type:"selector-unknown",value:t}}return X$1(qs$1(e),"media-")}var da$1=hp$1;var uu$1=xe$1(au$1());function Cm(t){if(/\/\/|\/\*/u.test(t))return {type:"selector-unknown",value:t.trim()};let e;try{new uu$1.default(s=>{e=s;}).process(t);}catch{return {type:"selector-unknown",value:t}}return X$1(e,"selector-")}var ee$1=Cm;var tl$1=xe$1(Ku$1());var my=t=>{for(;t.parent;)t=t.parent;return t},Ur$1=my;function yy(t){return Ur$1(t).text.slice(t.group.open.sourceIndex+1,t.group.close.sourceIndex).trim()}var Qu$1=yy;function gy(t){if(oe$1(t)){for(let e=t.length-1;e>0;e--)if(t[e].type==="word"&&t[e].value==="{"&&t[e-1].type==="word"&&t[e-1].value.endsWith("#"))return !0}return !1}var Ju$1=gy;function wy(t){return t.some(e=>e.type==="string"||e.type==="func"&&!e.value.endsWith("\\"))}var Xu$1=wy;function vy(t,e){return !!(e.parser==="scss"&&(t==null?void 0:t.type)==="word"&&t.value.startsWith("$"))}var Zu$1=vy;var el$1=t=>t.type==="paren"&&t.value===")";function xy(t,e){var a;let{nodes:s}=t,r={open:null,close:null,groups:[],type:"paren_group"},n=[r],i=r,o={groups:[],type:"comma_group"},u=[o];for(let c=0;c<s.length;++c){let f=s[c];if(e.parser==="scss"&&f.type==="number"&&f.unit===".."&&f.value.endsWith(".")&&(f.value=f.value.slice(0,-1),f.unit="..."),f.type==="func"&&f.value==="selector"&&(f.group.groups=[ee$1(Ur$1(t).text.slice(f.group.open.sourceIndex+1,f.group.close.sourceIndex))]),f.type==="func"&&f.value==="url"){let p=((a=f.group)==null?void 0:a.groups)??[],l=[];for(let y=0;y<p.length;y++){let x=p[y];x.type==="comma_group"?l=[...l,...x.groups]:l.push(x);}(Ju$1(l)||!Xu$1(l)&&!Zu$1(l[0],e))&&(f.group.groups=[Qu$1(f)]);}if(f.type==="paren"&&f.value==="(")r={open:f,close:null,groups:[],type:"paren_group"},n.push(r),o={groups:[],type:"comma_group"},u.push(o);else if(el$1(f)){if(o.groups.length>0&&r.groups.push(o),r.close=f,u.length===1)throw new Error("Unbalanced parenthesis");u.pop(),o=$$1(!1,u,-1),o.groups.push(r),n.pop(),r=$$1(!1,n,-1);}else if(f.type==="comma"){if(c===s.length-3&&s[c+1].type==="comment"&&el$1(s[c+2]))continue;r.groups.push(o),o={groups:[],type:"comma_group"},u[u.length-1]=o;}else o.groups.push(f);}return o.groups.length>0&&r.groups.push(o),i}function Fr(t){return t.type==="paren_group"&&!t.open&&!t.close&&t.groups.length===1||t.type==="comma_group"&&t.groups.length===1?Fr(t.groups[0]):t.type==="paren_group"||t.type==="comma_group"?{...t,groups:t.groups.map(Fr)}:t}function rl$1(t,e){if(t&&typeof t=="object")for(let s in t)s!=="parent"&&(rl$1(t[s],e),s==="nodes"&&(t.group=Fr(xy(t,e)),delete t[s]));return t}function by(t,e){if(e.parser==="less"&&t.startsWith("~`"))return {type:"value-unknown",value:t};let s=null;try{s=new tl$1.default(t,{loose:!0}).parse();}catch{return {type:"value-unknown",value:t}}s.text=t;let r=rl$1(s,e);return X$1(r,"value-",/^selector-/u)}var fe$1=by;var _y=new Set(["import","use","forward"]);function ky(t){return _y.has(t)}var sl$1=ky;function Ey(t,e){return e.parser!=="scss"||!t.selector?!1:t.selector.replace(/\/\*.*?\*\//u,"").replace(/\/\/.*\n/u,"").trim().endsWith(":")}var nl$1=Ey;var Sy=/(\s*)(!default).*$/u,Ty=/(\s*)(!global).*$/u;function ul$1(t,e){var s,r;if(t&&typeof t=="object"){delete t.parent;for(let u in t)ul$1(t[u],e);if(!t.type)return t;if(t.raws??(t.raws={}),t.type==="css-decl"&&typeof t.prop=="string"&&t.prop.startsWith("--")&&typeof t.value=="string"&&t.value.startsWith("{")){let u;if(t.value.trimEnd().endsWith("}")){let a=e.originalText.slice(0,t.source.start.offset),c="a".repeat(t.prop.length)+e.originalText.slice(t.source.start.offset+t.prop.length,t.source.end.offset),f=k$1(!1,a,/[^\n]/gu," ")+c,p;e.parser==="scss"?p=fl$1:e.parser==="less"?p=cl$1:p=ll$1;let l;try{l=p(f,{...e});}catch{}((s=l==null?void 0:l.nodes)==null?void 0:s.length)===1&&l.nodes[0].type==="css-rule"&&(u=l.nodes[0].nodes);}return u?t.value={type:"css-rule",nodes:u}:t.value={type:"value-unknown",value:t.raws.value.raw},t}let n="";typeof t.selector=="string"&&(n=t.raws.selector?t.raws.selector.scss??t.raws.selector.raw:t.selector,t.raws.between&&t.raws.between.trim().length>0&&(n+=t.raws.between),t.raws.selector=n);let i="";typeof t.value=="string"&&(i=t.raws.value?t.raws.value.scss??t.raws.value.raw:t.value,t.raws.value=i.trim());let o="";if(typeof t.params=="string"&&(o=t.raws.params?t.raws.params.scss??t.raws.params.raw:t.params,t.raws.afterName&&t.raws.afterName.trim().length>0&&(o=t.raws.afterName+o),t.raws.between&&t.raws.between.trim().length>0&&(o=o+t.raws.between),o=o.trim(),t.raws.params=o),n.trim().length>0)return n.startsWith("@")&&n.endsWith(":")?t:t.mixin?(t.selector=fe$1(n,e),t):(nl$1(t,e)&&(t.isSCSSNesterProperty=!0),t.selector=ee$1(n),t);if(i.trim().length>0){let u=i.match(Sy);u&&(i=i.slice(0,u.index),t.scssDefault=!0,u[0].trim()!=="!default"&&(t.raws.scssDefault=u[0]));let a=i.match(Ty);if(a&&(i=i.slice(0,a.index),t.scssGlobal=!0,a[0].trim()!=="!global"&&(t.raws.scssGlobal=a[0])),i.startsWith("progid:"))return {type:"value-unknown",value:i};t.value=fe$1(i,e);}if(e.parser==="less"&&t.type==="css-decl"&&i.startsWith("extend(")&&(t.extend||(t.extend=t.raws.between===":"),t.extend&&!t.selector&&(delete t.value,t.selector=ee$1(i.slice(7,-1)))),t.type==="css-atrule"){if(e.parser==="less"){if(t.mixin){let u=t.raws.identifier+t.name+t.raws.afterName+t.raws.params;return t.selector=ee$1(u),delete t.params,t}if(t.function)return t}if(e.parser==="css"&&t.name==="custom-selector"){let u=t.params.match(/:--\S+\s+/u)[0].trim();return t.customSelector=u,t.selector=ee$1(t.params.slice(u.length).trim()),delete t.params,t}if(e.parser==="less"){if(t.name.includes(":")&&!t.params){t.variable=!0;let u=t.name.split(":");t.name=u[0],t.value=fe$1(u.slice(1).join(":"),e);}if(!["page","nest","keyframes"].includes(t.name)&&((r=t.params)==null?void 0:r[0])===":"){t.variable=!0;let u=t.params.slice(1);u&&(t.value=fe$1(u,e)),t.raws.afterName+=":";}if(t.variable)return delete t.params,t.value||delete t.value,t}}if(t.type==="css-atrule"&&o.length>0){let{name:u}=t,a=t.name.toLowerCase();return u==="warn"||u==="error"?(t.params={type:"media-unknown",value:o},t):u==="extend"||u==="nest"?(t.selector=ee$1(o),delete t.params,t):u==="at-root"?(/^\(\s*(?:without|with)\s*:.+\)$/su.test(o)?t.params=fe$1(o,e):(t.selector=ee$1(o),delete t.params),t):sl$1(a)?(t.import=!0,delete t.filename,t.params=fe$1(o,e),t):["namespace","supports","if","else","for","each","while","debug","mixin","include","function","return","define-mixin","add-mixin"].includes(u)?(o=o.replace(/(\$\S+?)(\s+)?\.{3}/u,"$1...$2"),o=o.replace(/^(?!if)(\S+)(\s+)\(/u,"$1($2"),t.value=fe$1(o,e),delete t.params,t):["media","custom-media"].includes(a)?o.includes("#{")?{type:"media-unknown",value:o}:(t.params=da$1(o),t):(t.params=o,t)}}return t}function Hs$1(t,e,s){let r=Ze$1(e),{frontMatter:n}=r;e=r.content;let i;try{i=t(e,{map:!1});}catch(o){let{name:u,reason:a,line:c,column:f}=o;throw typeof c!="number"?o:oa$1(`${u}: ${a}`,{loc:{start:{line:c,column:f}},cause:o})}return s.originalText=e,i=ul$1(X$1(i,"css-"),s),Hr$1(i,e),n&&(n.source={startOffset:0,endOffset:n.raw.length},i.frontMatter=n),i}function ll$1(t,e={}){return Hs$1(il$1.default.default,t,e)}function cl$1(t,e={}){return Hs$1(s=>ol$1.default.parse(kn(s)),t,e)}function fl$1(t,e={}){return Hs$1(al$1.default,t,e)}var Ks$1={astFormat:"postcss",hasPragma:Bn$1,locStart:P,locEnd:R},Cy={...Ks$1,parse:ll$1},Oy={...Ks$1,parse:cl$1},Ay={...Ks$1,parse:fl$1};var Ny={postcss:mi$1};var Ub=Js$1;

    var Xa=Object.defineProperty;var Js=e=>{throw TypeError(e)};var Ar=(e,t)=>{for(var r in t)Xa(e,r,{get:t[r],enumerable:!0});};var qs=(e,t,r)=>t.has(e)||Js("Cannot "+r);var pt=(e,t,r)=>(qs(e,t,"read from private field"),t.get(e)),Ws=(e,t,r)=>t.has(e)?Js("Cannot add the same private member more than once"):t instanceof WeakSet?t.add(e):t.set(e,r),Gs=(e,t,r,n)=>(qs(e,t,"write to private field"),t.set(e,r),r);var _s={};Ar(_s,{languages:()=>om,options:()=>Ja,printers:()=>am});var Us=[{linguistLanguageId:183,name:"JavaScript",type:"programming",tmScope:"source.js",aceMode:"javascript",codemirrorMode:"javascript",codemirrorMimeType:"text/javascript",color:"#f1e05a",aliases:["js","node"],extensions:[".js","._js",".bones",".cjs",".es",".es6",".frag",".gs",".jake",".javascript",".jsb",".jscad",".jsfl",".jslib",".jsm",".jspre",".jss",".mjs",".njs",".pac",".sjs",".ssjs",".xsjs",".xsjslib",".wxs"],filenames:["Jakefile"],interpreters:["chakra","d8","gjs","js","node","nodejs","qjs","rhino","v8","v8-shell","zx"],parsers:["babel","acorn","espree","meriyah","babel-flow","babel-ts","flow","typescript"],vscodeLanguageIds:["javascript","mongo"]},{linguistLanguageId:183,name:"Flow",type:"programming",tmScope:"source.js",aceMode:"javascript",codemirrorMode:"javascript",codemirrorMimeType:"text/javascript",color:"#f1e05a",aliases:[],extensions:[".js.flow"],filenames:[],interpreters:["chakra","d8","gjs","js","node","nodejs","qjs","rhino","v8","v8-shell"],parsers:["flow","babel-flow"],vscodeLanguageIds:["javascript"]},{linguistLanguageId:183,name:"JSX",type:"programming",tmScope:"source.js.jsx",aceMode:"javascript",codemirrorMode:"jsx",codemirrorMimeType:"text/jsx",color:void 0,aliases:void 0,extensions:[".jsx"],filenames:void 0,interpreters:void 0,parsers:["babel","babel-flow","babel-ts","flow","typescript","espree","meriyah"],vscodeLanguageIds:["javascriptreact"],group:"JavaScript"},{linguistLanguageId:378,name:"TypeScript",type:"programming",color:"#3178c6",aliases:["ts"],interpreters:["deno","ts-node"],extensions:[".ts",".cts",".mts"],tmScope:"source.ts",aceMode:"typescript",codemirrorMode:"javascript",codemirrorMimeType:"application/typescript",parsers:["typescript","babel-ts"],vscodeLanguageIds:["typescript"]},{linguistLanguageId:94901924,name:"TSX",type:"programming",color:"#3178c6",group:"TypeScript",extensions:[".tsx"],tmScope:"source.tsx",aceMode:"javascript",codemirrorMode:"jsx",codemirrorMimeType:"text/jsx",parsers:["typescript","babel-ts"],vscodeLanguageIds:["typescriptreact"]}];var ws={};Ar(ws,{canAttachComment:()=>Ap,embed:()=>Zu,experimentalFeatures:()=>tm,getCommentChildNodes:()=>Tp,getVisitorKeys:()=>gr,handleComments:()=>$n,insertPragma:()=>ci,isBlockComment:()=>ee,isGap:()=>dp,massageAstNode:()=>Au,print:()=>Oa,printComment:()=>ku,willPrintOwnComments:()=>Kn});var Ya=(e,t,r,n)=>{if(!(e&&t==null))return t.replaceAll?t.replaceAll(r,n):r.global?t.replace(r,n):t.split(r).join(n)},Y=Ya;var Ha=(e,t,r)=>{if(!(e&&t==null))return Array.isArray(t)||typeof t=="string"?t[r<0?t.length+r:r]:t.at(r)},_=Ha;function Na(e){return e!==null&&typeof e=="object"}var Xs=Na;function*Va(e,t){let{getVisitorKeys:r,filter:n=()=>!0}=t,s=u=>Xs(u)&&n(u);for(let u of r(e)){let i=e[u];if(Array.isArray(i))for(let a of i)s(a)&&(yield a);else s(i)&&(yield i);}}function*$a(e,t){let r=[e];for(let n=0;n<r.length;n++){let s=r[n];for(let u of Va(s,t))yield u,r.push(u);}}function Ys(e,{getVisitorKeys:t,predicate:r}){for(let n of $a(e,{getVisitorKeys:t}))if(r(n))return !0;return !1}var Hs=()=>/[#*0-9]\uFE0F?\u20E3|[\xA9\xAE\u203C\u2049\u2122\u2139\u2194-\u2199\u21A9\u21AA\u231A\u231B\u2328\u23CF\u23ED-\u23EF\u23F1\u23F2\u23F8-\u23FA\u24C2\u25AA\u25AB\u25B6\u25C0\u25FB\u25FC\u25FE\u2600-\u2604\u260E\u2611\u2614\u2615\u2618\u2620\u2622\u2623\u2626\u262A\u262E\u262F\u2638-\u263A\u2640\u2642\u2648-\u2653\u265F\u2660\u2663\u2665\u2666\u2668\u267B\u267E\u267F\u2692\u2694-\u2697\u2699\u269B\u269C\u26A0\u26A7\u26AA\u26B0\u26B1\u26BD\u26BE\u26C4\u26C8\u26CF\u26D1\u26E9\u26F0-\u26F5\u26F7\u26F8\u26FA\u2702\u2708\u2709\u270F\u2712\u2714\u2716\u271D\u2721\u2733\u2734\u2744\u2747\u2757\u2763\u27A1\u2934\u2935\u2B05-\u2B07\u2B1B\u2B1C\u2B55\u3030\u303D\u3297\u3299]\uFE0F?|[\u261D\u270C\u270D](?:\uD83C[\uDFFB-\uDFFF]|\uFE0F)?|[\u270A\u270B](?:\uD83C[\uDFFB-\uDFFF])?|[\u23E9-\u23EC\u23F0\u23F3\u25FD\u2693\u26A1\u26AB\u26C5\u26CE\u26D4\u26EA\u26FD\u2705\u2728\u274C\u274E\u2753-\u2755\u2795-\u2797\u27B0\u27BF\u2B50]|\u26D3\uFE0F?(?:\u200D\uD83D\uDCA5)?|\u26F9(?:\uD83C[\uDFFB-\uDFFF]|\uFE0F)?(?:\u200D[\u2640\u2642]\uFE0F?)?|\u2764\uFE0F?(?:\u200D(?:\uD83D\uDD25|\uD83E\uDE79))?|\uD83C(?:[\uDC04\uDD70\uDD71\uDD7E\uDD7F\uDE02\uDE37\uDF21\uDF24-\uDF2C\uDF36\uDF7D\uDF96\uDF97\uDF99-\uDF9B\uDF9E\uDF9F\uDFCD\uDFCE\uDFD4-\uDFDF\uDFF5\uDFF7]\uFE0F?|[\uDF85\uDFC2\uDFC7](?:\uD83C[\uDFFB-\uDFFF])?|[\uDFC4\uDFCA](?:\uD83C[\uDFFB-\uDFFF])?(?:\u200D[\u2640\u2642]\uFE0F?)?|[\uDFCB\uDFCC](?:\uD83C[\uDFFB-\uDFFF]|\uFE0F)?(?:\u200D[\u2640\u2642]\uFE0F?)?|[\uDCCF\uDD8E\uDD91-\uDD9A\uDE01\uDE1A\uDE2F\uDE32-\uDE36\uDE38-\uDE3A\uDE50\uDE51\uDF00-\uDF20\uDF2D-\uDF35\uDF37-\uDF43\uDF45-\uDF4A\uDF4C-\uDF7C\uDF7E-\uDF84\uDF86-\uDF93\uDFA0-\uDFC1\uDFC5\uDFC6\uDFC8\uDFC9\uDFCF-\uDFD3\uDFE0-\uDFF0\uDFF8-\uDFFF]|\uDDE6\uD83C[\uDDE8-\uDDEC\uDDEE\uDDF1\uDDF2\uDDF4\uDDF6-\uDDFA\uDDFC\uDDFD\uDDFF]|\uDDE7\uD83C[\uDDE6\uDDE7\uDDE9-\uDDEF\uDDF1-\uDDF4\uDDF6-\uDDF9\uDDFB\uDDFC\uDDFE\uDDFF]|\uDDE8\uD83C[\uDDE6\uDDE8\uDDE9\uDDEB-\uDDEE\uDDF0-\uDDF7\uDDFA-\uDDFF]|\uDDE9\uD83C[\uDDEA\uDDEC\uDDEF\uDDF0\uDDF2\uDDF4\uDDFF]|\uDDEA\uD83C[\uDDE6\uDDE8\uDDEA\uDDEC\uDDED\uDDF7-\uDDFA]|\uDDEB\uD83C[\uDDEE-\uDDF0\uDDF2\uDDF4\uDDF7]|\uDDEC\uD83C[\uDDE6\uDDE7\uDDE9-\uDDEE\uDDF1-\uDDF3\uDDF5-\uDDFA\uDDFC\uDDFE]|\uDDED\uD83C[\uDDF0\uDDF2\uDDF3\uDDF7\uDDF9\uDDFA]|\uDDEE\uD83C[\uDDE8-\uDDEA\uDDF1-\uDDF4\uDDF6-\uDDF9]|\uDDEF\uD83C[\uDDEA\uDDF2\uDDF4\uDDF5]|\uDDF0\uD83C[\uDDEA\uDDEC-\uDDEE\uDDF2\uDDF3\uDDF5\uDDF7\uDDFC\uDDFE\uDDFF]|\uDDF1\uD83C[\uDDE6-\uDDE8\uDDEE\uDDF0\uDDF7-\uDDFB\uDDFE]|\uDDF2\uD83C[\uDDE6\uDDE8-\uDDED\uDDF0-\uDDFF]|\uDDF3\uD83C[\uDDE6\uDDE8\uDDEA-\uDDEC\uDDEE\uDDF1\uDDF4\uDDF5\uDDF7\uDDFA\uDDFF]|\uDDF4\uD83C\uDDF2|\uDDF5\uD83C[\uDDE6\uDDEA-\uDDED\uDDF0-\uDDF3\uDDF7-\uDDF9\uDDFC\uDDFE]|\uDDF6\uD83C\uDDE6|\uDDF7\uD83C[\uDDEA\uDDF4\uDDF8\uDDFA\uDDFC]|\uDDF8\uD83C[\uDDE6-\uDDEA\uDDEC-\uDDF4\uDDF7-\uDDF9\uDDFB\uDDFD-\uDDFF]|\uDDF9\uD83C[\uDDE6\uDDE8\uDDE9\uDDEB-\uDDED\uDDEF-\uDDF4\uDDF7\uDDF9\uDDFB\uDDFC\uDDFF]|\uDDFA\uD83C[\uDDE6\uDDEC\uDDF2\uDDF3\uDDF8\uDDFE\uDDFF]|\uDDFB\uD83C[\uDDE6\uDDE8\uDDEA\uDDEC\uDDEE\uDDF3\uDDFA]|\uDDFC\uD83C[\uDDEB\uDDF8]|\uDDFD\uD83C\uDDF0|\uDDFE\uD83C[\uDDEA\uDDF9]|\uDDFF\uD83C[\uDDE6\uDDF2\uDDFC]|\uDF44(?:\u200D\uD83D\uDFEB)?|\uDF4B(?:\u200D\uD83D\uDFE9)?|\uDFC3(?:\uD83C[\uDFFB-\uDFFF])?(?:\u200D(?:[\u2640\u2642]\uFE0F?(?:\u200D\u27A1\uFE0F?)?|\u27A1\uFE0F?))?|\uDFF3\uFE0F?(?:\u200D(?:\u26A7\uFE0F?|\uD83C\uDF08))?|\uDFF4(?:\u200D\u2620\uFE0F?|\uDB40\uDC67\uDB40\uDC62\uDB40(?:\uDC65\uDB40\uDC6E\uDB40\uDC67|\uDC73\uDB40\uDC63\uDB40\uDC74|\uDC77\uDB40\uDC6C\uDB40\uDC73)\uDB40\uDC7F)?)|\uD83D(?:[\uDC3F\uDCFD\uDD49\uDD4A\uDD6F\uDD70\uDD73\uDD76-\uDD79\uDD87\uDD8A-\uDD8D\uDDA5\uDDA8\uDDB1\uDDB2\uDDBC\uDDC2-\uDDC4\uDDD1-\uDDD3\uDDDC-\uDDDE\uDDE1\uDDE3\uDDE8\uDDEF\uDDF3\uDDFA\uDECB\uDECD-\uDECF\uDEE0-\uDEE5\uDEE9\uDEF0\uDEF3]\uFE0F?|[\uDC42\uDC43\uDC46-\uDC50\uDC66\uDC67\uDC6B-\uDC6D\uDC72\uDC74-\uDC76\uDC78\uDC7C\uDC83\uDC85\uDC8F\uDC91\uDCAA\uDD7A\uDD95\uDD96\uDE4C\uDE4F\uDEC0\uDECC](?:\uD83C[\uDFFB-\uDFFF])?|[\uDC6E\uDC70\uDC71\uDC73\uDC77\uDC81\uDC82\uDC86\uDC87\uDE45-\uDE47\uDE4B\uDE4D\uDE4E\uDEA3\uDEB4\uDEB5](?:\uD83C[\uDFFB-\uDFFF])?(?:\u200D[\u2640\u2642]\uFE0F?)?|[\uDD74\uDD90](?:\uD83C[\uDFFB-\uDFFF]|\uFE0F)?|[\uDC00-\uDC07\uDC09-\uDC14\uDC16-\uDC25\uDC27-\uDC3A\uDC3C-\uDC3E\uDC40\uDC44\uDC45\uDC51-\uDC65\uDC6A\uDC79-\uDC7B\uDC7D-\uDC80\uDC84\uDC88-\uDC8E\uDC90\uDC92-\uDCA9\uDCAB-\uDCFC\uDCFF-\uDD3D\uDD4B-\uDD4E\uDD50-\uDD67\uDDA4\uDDFB-\uDE2D\uDE2F-\uDE34\uDE37-\uDE41\uDE43\uDE44\uDE48-\uDE4A\uDE80-\uDEA2\uDEA4-\uDEB3\uDEB7-\uDEBF\uDEC1-\uDEC5\uDED0-\uDED2\uDED5-\uDED7\uDEDC-\uDEDF\uDEEB\uDEEC\uDEF4-\uDEFC\uDFE0-\uDFEB\uDFF0]|\uDC08(?:\u200D\u2B1B)?|\uDC15(?:\u200D\uD83E\uDDBA)?|\uDC26(?:\u200D(?:\u2B1B|\uD83D\uDD25))?|\uDC3B(?:\u200D\u2744\uFE0F?)?|\uDC41\uFE0F?(?:\u200D\uD83D\uDDE8\uFE0F?)?|\uDC68(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D\uD83D(?:\uDC8B\u200D\uD83D)?\uDC68|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D(?:[\uDC68\uDC69]\u200D\uD83D(?:\uDC66(?:\u200D\uD83D\uDC66)?|\uDC67(?:\u200D\uD83D[\uDC66\uDC67])?)|[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uDC66(?:\u200D\uD83D\uDC66)?|\uDC67(?:\u200D\uD83D[\uDC66\uDC67])?)|\uD83E(?:[\uDDAF\uDDBC\uDDBD](?:\u200D\u27A1\uFE0F?)?|[\uDDB0-\uDDB3]))|\uD83C(?:\uDFFB(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D\uD83D(?:\uDC8B\u200D\uD83D)?\uDC68\uD83C[\uDFFB-\uDFFF]|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF\uDDBC\uDDBD](?:\u200D\u27A1\uFE0F?)?|[\uDDB0-\uDDB3]|\uDD1D\u200D\uD83D\uDC68\uD83C[\uDFFC-\uDFFF])))?|\uDFFC(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D\uD83D(?:\uDC8B\u200D\uD83D)?\uDC68\uD83C[\uDFFB-\uDFFF]|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF\uDDBC\uDDBD](?:\u200D\u27A1\uFE0F?)?|[\uDDB0-\uDDB3]|\uDD1D\u200D\uD83D\uDC68\uD83C[\uDFFB\uDFFD-\uDFFF])))?|\uDFFD(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D\uD83D(?:\uDC8B\u200D\uD83D)?\uDC68\uD83C[\uDFFB-\uDFFF]|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF\uDDBC\uDDBD](?:\u200D\u27A1\uFE0F?)?|[\uDDB0-\uDDB3]|\uDD1D\u200D\uD83D\uDC68\uD83C[\uDFFB\uDFFC\uDFFE\uDFFF])))?|\uDFFE(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D\uD83D(?:\uDC8B\u200D\uD83D)?\uDC68\uD83C[\uDFFB-\uDFFF]|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF\uDDBC\uDDBD](?:\u200D\u27A1\uFE0F?)?|[\uDDB0-\uDDB3]|\uDD1D\u200D\uD83D\uDC68\uD83C[\uDFFB-\uDFFD\uDFFF])))?|\uDFFF(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D\uD83D(?:\uDC8B\u200D\uD83D)?\uDC68\uD83C[\uDFFB-\uDFFF]|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF\uDDBC\uDDBD](?:\u200D\u27A1\uFE0F?)?|[\uDDB0-\uDDB3]|\uDD1D\u200D\uD83D\uDC68\uD83C[\uDFFB-\uDFFE])))?))?|\uDC69(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D\uD83D(?:\uDC8B\u200D\uD83D)?[\uDC68\uDC69]|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D(?:[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uDC66(?:\u200D\uD83D\uDC66)?|\uDC67(?:\u200D\uD83D[\uDC66\uDC67])?|\uDC69\u200D\uD83D(?:\uDC66(?:\u200D\uD83D\uDC66)?|\uDC67(?:\u200D\uD83D[\uDC66\uDC67])?))|\uD83E(?:[\uDDAF\uDDBC\uDDBD](?:\u200D\u27A1\uFE0F?)?|[\uDDB0-\uDDB3]))|\uD83C(?:\uDFFB(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D\uD83D(?:[\uDC68\uDC69]|\uDC8B\u200D\uD83D[\uDC68\uDC69])\uD83C[\uDFFB-\uDFFF]|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF\uDDBC\uDDBD](?:\u200D\u27A1\uFE0F?)?|[\uDDB0-\uDDB3]|\uDD1D\u200D\uD83D[\uDC68\uDC69]\uD83C[\uDFFC-\uDFFF])))?|\uDFFC(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D\uD83D(?:[\uDC68\uDC69]|\uDC8B\u200D\uD83D[\uDC68\uDC69])\uD83C[\uDFFB-\uDFFF]|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF\uDDBC\uDDBD](?:\u200D\u27A1\uFE0F?)?|[\uDDB0-\uDDB3]|\uDD1D\u200D\uD83D[\uDC68\uDC69]\uD83C[\uDFFB\uDFFD-\uDFFF])))?|\uDFFD(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D\uD83D(?:[\uDC68\uDC69]|\uDC8B\u200D\uD83D[\uDC68\uDC69])\uD83C[\uDFFB-\uDFFF]|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF\uDDBC\uDDBD](?:\u200D\u27A1\uFE0F?)?|[\uDDB0-\uDDB3]|\uDD1D\u200D\uD83D[\uDC68\uDC69]\uD83C[\uDFFB\uDFFC\uDFFE\uDFFF])))?|\uDFFE(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D\uD83D(?:[\uDC68\uDC69]|\uDC8B\u200D\uD83D[\uDC68\uDC69])\uD83C[\uDFFB-\uDFFF]|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF\uDDBC\uDDBD](?:\u200D\u27A1\uFE0F?)?|[\uDDB0-\uDDB3]|\uDD1D\u200D\uD83D[\uDC68\uDC69]\uD83C[\uDFFB-\uDFFD\uDFFF])))?|\uDFFF(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D\uD83D(?:[\uDC68\uDC69]|\uDC8B\u200D\uD83D[\uDC68\uDC69])\uD83C[\uDFFB-\uDFFF]|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF\uDDBC\uDDBD](?:\u200D\u27A1\uFE0F?)?|[\uDDB0-\uDDB3]|\uDD1D\u200D\uD83D[\uDC68\uDC69]\uD83C[\uDFFB-\uDFFE])))?))?|\uDC6F(?:\u200D[\u2640\u2642]\uFE0F?)?|\uDD75(?:\uD83C[\uDFFB-\uDFFF]|\uFE0F)?(?:\u200D[\u2640\u2642]\uFE0F?)?|\uDE2E(?:\u200D\uD83D\uDCA8)?|\uDE35(?:\u200D\uD83D\uDCAB)?|\uDE36(?:\u200D\uD83C\uDF2B\uFE0F?)?|\uDE42(?:\u200D[\u2194\u2195]\uFE0F?)?|\uDEB6(?:\uD83C[\uDFFB-\uDFFF])?(?:\u200D(?:[\u2640\u2642]\uFE0F?(?:\u200D\u27A1\uFE0F?)?|\u27A1\uFE0F?))?)|\uD83E(?:[\uDD0C\uDD0F\uDD18-\uDD1F\uDD30-\uDD34\uDD36\uDD77\uDDB5\uDDB6\uDDBB\uDDD2\uDDD3\uDDD5\uDEC3-\uDEC5\uDEF0\uDEF2-\uDEF8](?:\uD83C[\uDFFB-\uDFFF])?|[\uDD26\uDD35\uDD37-\uDD39\uDD3D\uDD3E\uDDB8\uDDB9\uDDCD\uDDCF\uDDD4\uDDD6-\uDDDD](?:\uD83C[\uDFFB-\uDFFF])?(?:\u200D[\u2640\u2642]\uFE0F?)?|[\uDDDE\uDDDF](?:\u200D[\u2640\u2642]\uFE0F?)?|[\uDD0D\uDD0E\uDD10-\uDD17\uDD20-\uDD25\uDD27-\uDD2F\uDD3A\uDD3F-\uDD45\uDD47-\uDD76\uDD78-\uDDB4\uDDB7\uDDBA\uDDBC-\uDDCC\uDDD0\uDDE0-\uDDFF\uDE70-\uDE7C\uDE80-\uDE89\uDE8F-\uDEC2\uDEC6\uDECE-\uDEDC\uDEDF-\uDEE9]|\uDD3C(?:\u200D[\u2640\u2642]\uFE0F?|\uD83C[\uDFFB-\uDFFF])?|\uDDCE(?:\uD83C[\uDFFB-\uDFFF])?(?:\u200D(?:[\u2640\u2642]\uFE0F?(?:\u200D\u27A1\uFE0F?)?|\u27A1\uFE0F?))?|\uDDD1(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\uD83C[\uDF3E\uDF73\uDF7C\uDF84\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF\uDDBC\uDDBD](?:\u200D\u27A1\uFE0F?)?|[\uDDB0-\uDDB3]|\uDD1D\u200D\uD83E\uDDD1|\uDDD1\u200D\uD83E\uDDD2(?:\u200D\uD83E\uDDD2)?|\uDDD2(?:\u200D\uD83E\uDDD2)?))|\uD83C(?:\uDFFB(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D(?:\uD83D\uDC8B\u200D)?\uD83E\uDDD1\uD83C[\uDFFC-\uDFFF]|\uD83C[\uDF3E\uDF73\uDF7C\uDF84\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF\uDDBC\uDDBD](?:\u200D\u27A1\uFE0F?)?|[\uDDB0-\uDDB3]|\uDD1D\u200D\uD83E\uDDD1\uD83C[\uDFFB-\uDFFF])))?|\uDFFC(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D(?:\uD83D\uDC8B\u200D)?\uD83E\uDDD1\uD83C[\uDFFB\uDFFD-\uDFFF]|\uD83C[\uDF3E\uDF73\uDF7C\uDF84\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF\uDDBC\uDDBD](?:\u200D\u27A1\uFE0F?)?|[\uDDB0-\uDDB3]|\uDD1D\u200D\uD83E\uDDD1\uD83C[\uDFFB-\uDFFF])))?|\uDFFD(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D(?:\uD83D\uDC8B\u200D)?\uD83E\uDDD1\uD83C[\uDFFB\uDFFC\uDFFE\uDFFF]|\uD83C[\uDF3E\uDF73\uDF7C\uDF84\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF\uDDBC\uDDBD](?:\u200D\u27A1\uFE0F?)?|[\uDDB0-\uDDB3]|\uDD1D\u200D\uD83E\uDDD1\uD83C[\uDFFB-\uDFFF])))?|\uDFFE(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D(?:\uD83D\uDC8B\u200D)?\uD83E\uDDD1\uD83C[\uDFFB-\uDFFD\uDFFF]|\uD83C[\uDF3E\uDF73\uDF7C\uDF84\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF\uDDBC\uDDBD](?:\u200D\u27A1\uFE0F?)?|[\uDDB0-\uDDB3]|\uDD1D\u200D\uD83E\uDDD1\uD83C[\uDFFB-\uDFFF])))?|\uDFFF(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D(?:\uD83D\uDC8B\u200D)?\uD83E\uDDD1\uD83C[\uDFFB-\uDFFE]|\uD83C[\uDF3E\uDF73\uDF7C\uDF84\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF\uDDBC\uDDBD](?:\u200D\u27A1\uFE0F?)?|[\uDDB0-\uDDB3]|\uDD1D\u200D\uD83E\uDDD1\uD83C[\uDFFB-\uDFFF])))?))?|\uDEF1(?:\uD83C(?:\uDFFB(?:\u200D\uD83E\uDEF2\uD83C[\uDFFC-\uDFFF])?|\uDFFC(?:\u200D\uD83E\uDEF2\uD83C[\uDFFB\uDFFD-\uDFFF])?|\uDFFD(?:\u200D\uD83E\uDEF2\uD83C[\uDFFB\uDFFC\uDFFE\uDFFF])?|\uDFFE(?:\u200D\uD83E\uDEF2\uD83C[\uDFFB-\uDFFD\uDFFF])?|\uDFFF(?:\u200D\uD83E\uDEF2\uD83C[\uDFFB-\uDFFE])?))?)/g;function Ns(e){return e===12288||e>=65281&&e<=65376||e>=65504&&e<=65510}function Vs(e){return e>=4352&&e<=4447||e===8986||e===8987||e===9001||e===9002||e>=9193&&e<=9196||e===9200||e===9203||e===9725||e===9726||e===9748||e===9749||e>=9776&&e<=9783||e>=9800&&e<=9811||e===9855||e>=9866&&e<=9871||e===9875||e===9889||e===9898||e===9899||e===9917||e===9918||e===9924||e===9925||e===9934||e===9940||e===9962||e===9970||e===9971||e===9973||e===9978||e===9981||e===9989||e===9994||e===9995||e===10024||e===10060||e===10062||e>=10067&&e<=10069||e===10071||e>=10133&&e<=10135||e===10160||e===10175||e===11035||e===11036||e===11088||e===11093||e>=11904&&e<=11929||e>=11931&&e<=12019||e>=12032&&e<=12245||e>=12272&&e<=12287||e>=12289&&e<=12350||e>=12353&&e<=12438||e>=12441&&e<=12543||e>=12549&&e<=12591||e>=12593&&e<=12686||e>=12688&&e<=12773||e>=12783&&e<=12830||e>=12832&&e<=12871||e>=12880&&e<=42124||e>=42128&&e<=42182||e>=43360&&e<=43388||e>=44032&&e<=55203||e>=63744&&e<=64255||e>=65040&&e<=65049||e>=65072&&e<=65106||e>=65108&&e<=65126||e>=65128&&e<=65131||e>=94176&&e<=94180||e===94192||e===94193||e>=94208&&e<=100343||e>=100352&&e<=101589||e>=101631&&e<=101640||e>=110576&&e<=110579||e>=110581&&e<=110587||e===110589||e===110590||e>=110592&&e<=110882||e===110898||e>=110928&&e<=110930||e===110933||e>=110948&&e<=110951||e>=110960&&e<=111355||e>=119552&&e<=119638||e>=119648&&e<=119670||e===126980||e===127183||e===127374||e>=127377&&e<=127386||e>=127488&&e<=127490||e>=127504&&e<=127547||e>=127552&&e<=127560||e===127568||e===127569||e>=127584&&e<=127589||e>=127744&&e<=127776||e>=127789&&e<=127797||e>=127799&&e<=127868||e>=127870&&e<=127891||e>=127904&&e<=127946||e>=127951&&e<=127955||e>=127968&&e<=127984||e===127988||e>=127992&&e<=128062||e===128064||e>=128066&&e<=128252||e>=128255&&e<=128317||e>=128331&&e<=128334||e>=128336&&e<=128359||e===128378||e===128405||e===128406||e===128420||e>=128507&&e<=128591||e>=128640&&e<=128709||e===128716||e>=128720&&e<=128722||e>=128725&&e<=128727||e>=128732&&e<=128735||e===128747||e===128748||e>=128756&&e<=128764||e>=128992&&e<=129003||e===129008||e>=129292&&e<=129338||e>=129340&&e<=129349||e>=129351&&e<=129535||e>=129648&&e<=129660||e>=129664&&e<=129673||e>=129679&&e<=129734||e>=129742&&e<=129756||e>=129759&&e<=129769||e>=129776&&e<=129784||e>=131072&&e<=196605||e>=196608&&e<=262141}var $s=e=>!(Ns(e)||Vs(e));var Ka=/[^\x20-\x7F]/u;function Qa(e){if(!e)return 0;if(!Ka.test(e))return e.length;e=e.replace(Hs(),"  ");let t=0;for(let r of e){let n=r.codePointAt(0);n<=31||n>=127&&n<=159||n>=768&&n<=879||(t+=$s(n)?1:2);}return t}var ze=Qa;function Tr(e){return (t,r,n)=>{let s=!!(n!=null&&n.backwards);if(r===!1)return !1;let{length:u}=t,i=r;for(;i>=0&&i<u;){let a=t.charAt(i);if(e instanceof RegExp){if(!e.test(a))return i}else if(!e.includes(a))return i;s?i--:i++;}return i===-1||i===u?i:!1}}var We=Tr(" 	"),Ks=Tr(",; 	"),Qs=Tr(/[^\n\r]/u);function za(e,t,r){let n=!!(r!=null&&r.backwards);if(t===!1)return !1;let s=e.charAt(t);if(n){if(e.charAt(t-1)==="\r"&&s===`
`)return t-2;if(s===`
`||s==="\r"||s==="\u2028"||s==="\u2029")return t-1}else {if(s==="\r"&&e.charAt(t+1)===`
`)return t+2;if(s===`
`||s==="\r"||s==="\u2028"||s==="\u2029")return t+1}return t}var Ge=za;function Za(e,t,r={}){let n=We(e,r.backwards?t-1:t,r),s=Ge(e,n,r);return n!==s}var Z=Za;function eo(e,t){if(t===!1)return !1;if(e.charAt(t)==="/"&&e.charAt(t+1)==="*"){for(let r=t+2;r<e.length;++r)if(e.charAt(r)==="*"&&e.charAt(r+1)==="/")return r+2}return t}var Ot=eo;function to(e,t){return t===!1?!1:e.charAt(t)==="/"&&e.charAt(t+1)==="/"?Qs(e,t):t}var _t=to;function ro(e,t){let r=null,n=t;for(;n!==r;)r=n,n=Ks(e,n),n=Ot(e,n),n=We(e,n);return n=_t(e,n),n=Ge(e,n),n!==!1&&Z(e,n)}var jt=ro;function no(e){return Array.isArray(e)&&e.length>0}var O=no;var zs=new Proxy(()=>{},{get:()=>zs}),vt=zs;var dr="'",Zs='"';function so(e,t){let r=t===!0||t===dr?dr:Zs,n=r===dr?Zs:dr,s=0,u=0;for(let i of e)i===r?s++:i===n&&u++;return s>u?n:r}var xr=so;function uo(e,t,r){let n=t==='"'?"'":'"',u=Y(!1,e,/\\(.)|(["'])/gsu,(i,a,p)=>a===n?a:p===t?"\\"+p:p||(r&&/^[^\n\r"'0-7\\bfnrt-vx\u2028\u2029]$/u.test(a)?a:"\\"+a));return t+u+t}var eu=uo;function io(e,t){vt(/^(?<quote>["']).*\k<quote>$/su.test(e));let r=e.slice(1,-1),n=t.parser==="json"||t.parser==="jsonc"||t.parser==="json5"&&t.quoteProps==="preserve"&&!t.singleQuote?'"':t.__isInHtmlAttribute?"'":xr(r,t.singleQuote);return e.charAt(0)===n?e:eu(r,n,!1)}var Ze=io;function q(e){var n,s,u;let t=((n=e.range)==null?void 0:n[0])??e.start,r=(u=((s=e.declaration)==null?void 0:s.decorators)??e.decorators)==null?void 0:u[0];return r?Math.min(q(r),t):t}function k(e){var t;return ((t=e.range)==null?void 0:t[1])??e.end}function Bt(e,t){let r=q(e);return Number.isInteger(r)&&r===q(t)}function ao(e,t){let r=k(e);return Number.isInteger(r)&&r===k(t)}function tu(e,t){return Bt(e,t)&&ao(e,t)}var Zt=null;function er(e){if(Zt!==null&&typeof Zt.property){let t=Zt;return Zt=er.prototype=null,t}return Zt=er.prototype=e??Object.create(null),new er}var oo=10;for(let e=0;e<=oo;e++)er();function In(e){return er(e)}function po(e,t="type"){In(e);function r(n){let s=n[t],u=e[s];if(!Array.isArray(u))throw Object.assign(new Error(`Missing visitor keys for '${s}'.`),{node:n});return u}return r}var hr=po;var ru={ArrayExpression:["elements"],AssignmentExpression:["left","right"],BinaryExpression:["left","right"],InterpreterDirective:[],Directive:["value"],DirectiveLiteral:[],BlockStatement:["directives","body"],BreakStatement:["label"],CallExpression:["callee","arguments","typeParameters","typeArguments"],CatchClause:["param","body"],ConditionalExpression:["test","consequent","alternate"],ContinueStatement:["label"],DebuggerStatement:[],DoWhileStatement:["body","test"],EmptyStatement:[],ExpressionStatement:["expression"],File:["program"],ForInStatement:["left","right","body"],ForStatement:["init","test","update","body"],FunctionDeclaration:["id","typeParameters","params","returnType","body","predicate"],FunctionExpression:["id","typeParameters","params","returnType","body"],Identifier:["typeAnnotation","decorators"],IfStatement:["test","consequent","alternate"],LabeledStatement:["label","body"],StringLiteral:[],NumericLiteral:[],NullLiteral:[],BooleanLiteral:[],RegExpLiteral:[],LogicalExpression:["left","right"],MemberExpression:["object","property"],NewExpression:["callee","arguments","typeParameters","typeArguments"],Program:["directives","body"],ObjectExpression:["properties"],ObjectMethod:["decorators","key","typeParameters","params","returnType","body"],ObjectProperty:["key","value","decorators"],RestElement:["argument","typeAnnotation","decorators"],ReturnStatement:["argument"],SequenceExpression:["expressions"],ParenthesizedExpression:["expression"],SwitchCase:["test","consequent"],SwitchStatement:["discriminant","cases"],ThisExpression:[],ThrowStatement:["argument"],TryStatement:["block","handler","finalizer"],UnaryExpression:["argument"],UpdateExpression:["argument"],VariableDeclaration:["declarations"],VariableDeclarator:["id","init"],WhileStatement:["test","body"],WithStatement:["object","body"],AssignmentPattern:["left","right","decorators","typeAnnotation"],ArrayPattern:["elements","typeAnnotation","decorators"],ArrowFunctionExpression:["typeParameters","params","returnType","body","predicate"],ClassBody:["body"],ClassExpression:["decorators","id","typeParameters","superClass","superTypeParameters","mixins","implements","body","superTypeArguments"],ClassDeclaration:["decorators","id","typeParameters","superClass","superTypeParameters","mixins","implements","body","superTypeArguments"],ExportAllDeclaration:["source","attributes","exported"],ExportDefaultDeclaration:["declaration"],ExportNamedDeclaration:["declaration","specifiers","source","attributes"],ExportSpecifier:["local","exported"],ForOfStatement:["left","right","body"],ImportDeclaration:["specifiers","source","attributes"],ImportDefaultSpecifier:["local"],ImportNamespaceSpecifier:["local"],ImportSpecifier:["imported","local"],ImportExpression:["source","options"],MetaProperty:["meta","property"],ClassMethod:["decorators","key","typeParameters","params","returnType","body"],ObjectPattern:["properties","typeAnnotation","decorators"],SpreadElement:["argument"],Super:[],TaggedTemplateExpression:["tag","typeParameters","quasi","typeArguments"],TemplateElement:[],TemplateLiteral:["quasis","expressions"],YieldExpression:["argument"],AwaitExpression:["argument"],BigIntLiteral:[],ExportNamespaceSpecifier:["exported"],OptionalMemberExpression:["object","property"],OptionalCallExpression:["callee","arguments","typeParameters","typeArguments"],ClassProperty:["decorators","key","typeAnnotation","value","variance"],ClassAccessorProperty:["decorators","key","typeAnnotation","value"],ClassPrivateProperty:["decorators","key","typeAnnotation","value","variance"],ClassPrivateMethod:["decorators","key","typeParameters","params","returnType","body"],PrivateName:["id"],StaticBlock:["body"],AnyTypeAnnotation:[],ArrayTypeAnnotation:["elementType"],BooleanTypeAnnotation:[],BooleanLiteralTypeAnnotation:[],NullLiteralTypeAnnotation:[],ClassImplements:["id","typeParameters"],DeclareClass:["id","typeParameters","extends","mixins","implements","body"],DeclareFunction:["id","predicate"],DeclareInterface:["id","typeParameters","extends","body"],DeclareModule:["id","body"],DeclareModuleExports:["typeAnnotation"],DeclareTypeAlias:["id","typeParameters","right"],DeclareOpaqueType:["id","typeParameters","supertype"],DeclareVariable:["id"],DeclareExportDeclaration:["declaration","specifiers","source","attributes"],DeclareExportAllDeclaration:["source","attributes"],DeclaredPredicate:["value"],ExistsTypeAnnotation:[],FunctionTypeAnnotation:["typeParameters","params","rest","returnType","this"],FunctionTypeParam:["name","typeAnnotation"],GenericTypeAnnotation:["id","typeParameters"],InferredPredicate:[],InterfaceExtends:["id","typeParameters"],InterfaceDeclaration:["id","typeParameters","extends","body"],InterfaceTypeAnnotation:["extends","body"],IntersectionTypeAnnotation:["types"],MixedTypeAnnotation:[],EmptyTypeAnnotation:[],NullableTypeAnnotation:["typeAnnotation"],NumberLiteralTypeAnnotation:[],NumberTypeAnnotation:[],ObjectTypeAnnotation:["properties","indexers","callProperties","internalSlots"],ObjectTypeInternalSlot:["id","value"],ObjectTypeCallProperty:["value"],ObjectTypeIndexer:["variance","id","key","value"],ObjectTypeProperty:["key","value","variance"],ObjectTypeSpreadProperty:["argument"],OpaqueType:["id","typeParameters","supertype","impltype"],QualifiedTypeIdentifier:["qualification","id"],StringLiteralTypeAnnotation:[],StringTypeAnnotation:[],SymbolTypeAnnotation:[],ThisTypeAnnotation:[],TupleTypeAnnotation:["types","elementTypes"],TypeofTypeAnnotation:["argument","typeArguments"],TypeAlias:["id","typeParameters","right"],TypeAnnotation:["typeAnnotation"],TypeCastExpression:["expression","typeAnnotation"],TypeParameter:["bound","default","variance"],TypeParameterDeclaration:["params"],TypeParameterInstantiation:["params"],UnionTypeAnnotation:["types"],Variance:[],VoidTypeAnnotation:[],EnumDeclaration:["id","body"],EnumBooleanBody:["members"],EnumNumberBody:["members"],EnumStringBody:["members"],EnumSymbolBody:["members"],EnumBooleanMember:["id","init"],EnumNumberMember:["id","init"],EnumStringMember:["id","init"],EnumDefaultedMember:["id"],IndexedAccessType:["objectType","indexType"],OptionalIndexedAccessType:["objectType","indexType"],JSXAttribute:["name","value"],JSXClosingElement:["name"],JSXElement:["openingElement","children","closingElement"],JSXEmptyExpression:[],JSXExpressionContainer:["expression"],JSXSpreadChild:["expression"],JSXIdentifier:[],JSXMemberExpression:["object","property"],JSXNamespacedName:["namespace","name"],JSXOpeningElement:["name","attributes","typeArguments","typeParameters"],JSXSpreadAttribute:["argument"],JSXText:[],JSXFragment:["openingFragment","children","closingFragment"],JSXOpeningFragment:[],JSXClosingFragment:[],Noop:[],Placeholder:[],V8IntrinsicIdentifier:[],ArgumentPlaceholder:[],BindExpression:["object","callee"],ImportAttribute:["key","value"],Decorator:["expression"],DoExpression:["body"],ExportDefaultSpecifier:["exported"],RecordExpression:["properties"],TupleExpression:["elements"],ModuleExpression:["body"],TopicReference:[],PipelineTopicExpression:["expression"],PipelineBareFunction:["callee"],PipelinePrimaryTopicReference:[],TSParameterProperty:["parameter","decorators"],TSDeclareFunction:["id","typeParameters","params","returnType","body"],TSDeclareMethod:["decorators","key","typeParameters","params","returnType"],TSQualifiedName:["left","right"],TSCallSignatureDeclaration:["typeParameters","parameters","typeAnnotation","params","returnType"],TSConstructSignatureDeclaration:["typeParameters","parameters","typeAnnotation","params","returnType"],TSPropertySignature:["key","typeAnnotation"],TSMethodSignature:["key","typeParameters","parameters","typeAnnotation","params","returnType"],TSIndexSignature:["parameters","typeAnnotation"],TSAnyKeyword:[],TSBooleanKeyword:[],TSBigIntKeyword:[],TSIntrinsicKeyword:[],TSNeverKeyword:[],TSNullKeyword:[],TSNumberKeyword:[],TSObjectKeyword:[],TSStringKeyword:[],TSSymbolKeyword:[],TSUndefinedKeyword:[],TSUnknownKeyword:[],TSVoidKeyword:[],TSThisType:[],TSFunctionType:["typeParameters","parameters","typeAnnotation","params","returnType"],TSConstructorType:["typeParameters","parameters","typeAnnotation","params","returnType"],TSTypeReference:["typeName","typeParameters","typeArguments"],TSTypePredicate:["parameterName","typeAnnotation"],TSTypeQuery:["exprName","typeParameters","typeArguments"],TSTypeLiteral:["members"],TSArrayType:["elementType"],TSTupleType:["elementTypes"],TSOptionalType:["typeAnnotation"],TSRestType:["typeAnnotation"],TSNamedTupleMember:["label","elementType"],TSUnionType:["types"],TSIntersectionType:["types"],TSConditionalType:["checkType","extendsType","trueType","falseType"],TSInferType:["typeParameter"],TSParenthesizedType:["typeAnnotation"],TSTypeOperator:["typeAnnotation"],TSIndexedAccessType:["objectType","indexType"],TSMappedType:["typeParameter","nameType","typeAnnotation"],TSLiteralType:["literal"],TSExpressionWithTypeArguments:["expression","typeParameters"],TSInterfaceDeclaration:["id","typeParameters","extends","body"],TSInterfaceBody:["body"],TSTypeAliasDeclaration:["id","typeParameters","typeAnnotation"],TSInstantiationExpression:["expression","typeParameters","typeArguments"],TSAsExpression:["expression","typeAnnotation"],TSSatisfiesExpression:["expression","typeAnnotation"],TSTypeAssertion:["typeAnnotation","expression"],TSEnumDeclaration:["id","members"],TSEnumMember:["id","initializer"],TSModuleDeclaration:["id","body"],TSModuleBlock:["body"],TSImportType:["argument","qualifier","typeParameters","typeArguments"],TSImportEqualsDeclaration:["id","moduleReference"],TSExternalModuleReference:["expression"],TSNonNullExpression:["expression"],TSExportAssignment:["expression"],TSNamespaceExportDeclaration:["id"],TSTypeAnnotation:["typeAnnotation"],TSTypeParameterInstantiation:["params"],TSTypeParameterDeclaration:["params"],TSTypeParameter:["constraint","default","name"],ChainExpression:["expression"],ExperimentalRestProperty:["argument"],ExperimentalSpreadProperty:["argument"],Literal:[],MethodDefinition:["decorators","key","value"],PrivateIdentifier:[],Property:["key","value"],PropertyDefinition:["decorators","key","typeAnnotation","value","variance"],AccessorProperty:["decorators","key","typeAnnotation","value"],TSAbstractAccessorProperty:["decorators","key","typeAnnotation"],TSAbstractKeyword:[],TSAbstractMethodDefinition:["key","value"],TSAbstractPropertyDefinition:["decorators","key","typeAnnotation"],TSAsyncKeyword:[],TSClassImplements:["expression","typeArguments","typeParameters"],TSDeclareKeyword:[],TSEmptyBodyFunctionExpression:["id","typeParameters","params","returnType"],TSEnumBody:["members"],TSExportKeyword:[],TSInterfaceHeritage:["expression","typeArguments","typeParameters"],TSPrivateKeyword:[],TSProtectedKeyword:[],TSPublicKeyword:[],TSReadonlyKeyword:[],TSStaticKeyword:[],TSTemplateLiteralType:["quasis","types"],AsConstExpression:["expression"],AsExpression:["expression","typeAnnotation"],BigIntLiteralTypeAnnotation:[],BigIntTypeAnnotation:[],ComponentDeclaration:["id","params","body","typeParameters","rendersType"],ComponentParameter:["name","local"],ComponentTypeAnnotation:["params","rest","typeParameters","rendersType"],ComponentTypeParameter:["name","typeAnnotation"],ConditionalTypeAnnotation:["checkType","extendsType","trueType","falseType"],DeclareComponent:["id","params","rest","typeParameters","rendersType"],DeclareEnum:["id","body"],DeclareHook:["id"],DeclareNamespace:["id","body"],EnumBigIntBody:["members"],EnumBigIntMember:["id","init"],HookDeclaration:["id","params","body","typeParameters","returnType"],HookTypeAnnotation:["params","returnType","rest","typeParameters"],InferTypeAnnotation:["typeParameter"],KeyofTypeAnnotation:["argument"],ObjectTypeMappedTypeProperty:["keyTparam","propType","sourceType","variance"],QualifiedTypeofIdentifier:["qualification","id"],TupleTypeLabeledElement:["label","elementType","variance"],TupleTypeSpreadElement:["label","typeAnnotation"],TypeOperator:["typeAnnotation"],TypePredicate:["parameterName","typeAnnotation","asserts"],NGRoot:["node"],NGPipeExpression:["left","right","arguments"],NGChainedExpression:["expressions"],NGEmptyExpression:[],NGMicrosyntax:["body"],NGMicrosyntaxKey:[],NGMicrosyntaxExpression:["expression","alias"],NGMicrosyntaxKeyedExpression:["key","expression"],NGMicrosyntaxLet:["key","value"],NGMicrosyntaxAs:["key","alias"],JsExpressionRoot:["node"],JsonRoot:["node"],TSJSDocAllType:[],TSJSDocUnknownType:[],TSJSDocNullableType:["typeAnnotation"],TSJSDocNonNullableType:["typeAnnotation"],NeverTypeAnnotation:[],UndefinedTypeAnnotation:[],UnknownTypeAnnotation:[],SatisfiesExpression:["expression","typeAnnotation"]};var co=hr(ru),gr=co;function lo(e){let t=new Set(e);return r=>t.has(r==null?void 0:r.type)}var v=lo;var mo=v(["Block","CommentBlock","MultiLine"]),ee=mo;var yo=v(["AnyTypeAnnotation","ThisTypeAnnotation","NumberTypeAnnotation","VoidTypeAnnotation","BooleanTypeAnnotation","BigIntTypeAnnotation","SymbolTypeAnnotation","StringTypeAnnotation","NeverTypeAnnotation","UndefinedTypeAnnotation","UnknownTypeAnnotation","EmptyTypeAnnotation","MixedTypeAnnotation"]),Sr=yo;function Do(e,t){let r=t.split(".");for(let n=r.length-1;n>=0;n--){let s=r[n];if(n===0)return e.type==="Identifier"&&e.name===s;if(e.type!=="MemberExpression"||e.optional||e.computed||e.property.type!=="Identifier"||e.property.name!==s)return !1;e=e.object;}}function fo(e,t){return t.some(r=>Do(e,r))}var nu=fo;function Eo({type:e}){return e.startsWith("TS")&&e.endsWith("Keyword")}var Br=Eo;function rr(e,t){return t(e)||Ys(e,{getVisitorKeys:gr,predicate:t})}function Rt(e){return e.type==="AssignmentExpression"||e.type==="BinaryExpression"||e.type==="LogicalExpression"||e.type==="NGPipeExpression"||e.type==="ConditionalExpression"||L(e)||W(e)||e.type==="SequenceExpression"||e.type==="TaggedTemplateExpression"||e.type==="BindExpression"||e.type==="UpdateExpression"&&!e.prefix||Ae(e)||e.type==="TSNonNullExpression"||e.type==="ChainExpression"}function iu(e){return e.expressions?e.expressions[0]:e.left??e.test??e.callee??e.object??e.tag??e.argument??e.expression}function Pr(e){if(e.expressions)return ["expressions",0];if(e.left)return ["left"];if(e.test)return ["test"];if(e.object)return ["object"];if(e.callee)return ["callee"];if(e.tag)return ["tag"];if(e.argument)return ["argument"];if(e.expression)return ["expression"];throw new Error("Unexpected node has no left side.")}var Ct=v(["Line","CommentLine","SingleLine","HashbangComment","HTMLOpen","HTMLClose","Hashbang","InterpreterDirective"]),au=v(["ExportDefaultDeclaration","DeclareExportDeclaration","ExportNamedDeclaration","ExportAllDeclaration","DeclareExportAllDeclaration"]),X=v(["ArrayExpression","TupleExpression"]),se=v(["ObjectExpression","RecordExpression"]);function ou(e){return e.type==="LogicalExpression"&&e.operator==="??"}function Fe(e){return e.type==="NumericLiteral"||e.type==="Literal"&&typeof e.value=="number"}function jn(e){return e.type==="UnaryExpression"&&(e.operator==="+"||e.operator==="-")&&Fe(e.argument)}function te(e){return !!(e&&(e.type==="StringLiteral"||e.type==="Literal"&&typeof e.value=="string"))}function vn(e){return e.type==="RegExpLiteral"||e.type==="Literal"&&!!e.regex}var kr=v(["Literal","BooleanLiteral","BigIntLiteral","DirectiveLiteral","NullLiteral","NumericLiteral","RegExpLiteral","StringLiteral"]),Fo=v(["Identifier","ThisExpression","Super","PrivateName","PrivateIdentifier"]),we=v(["ObjectTypeAnnotation","TSTypeLiteral","TSMappedType"]),Mt=v(["FunctionExpression","ArrowFunctionExpression"]);function Co(e){return e.type==="FunctionExpression"||e.type==="ArrowFunctionExpression"&&e.body.type==="BlockStatement"}function Ln(e){return L(e)&&e.callee.type==="Identifier"&&["async","inject","fakeAsync","waitForAsync"].includes(e.callee.name)}var H=v(["JSXElement","JSXFragment"]);function bt(e){return e.method&&e.kind==="init"||e.kind==="get"||e.kind==="set"}function Ir(e){return (e.type==="ObjectTypeProperty"||e.type==="ObjectTypeInternalSlot")&&!e.static&&!e.method&&e.kind!=="get"&&e.kind!=="set"&&e.value.type==="FunctionTypeAnnotation"}function pu(e){return (e.type==="TypeAnnotation"||e.type==="TSTypeAnnotation")&&e.typeAnnotation.type==="FunctionTypeAnnotation"&&!e.static&&!Bt(e,e.typeAnnotation)}var De=v(["BinaryExpression","LogicalExpression","NGPipeExpression"]);function At(e){return W(e)||e.type==="BindExpression"&&!!e.object}var Ao=v(["TSThisType","NullLiteralTypeAnnotation","BooleanLiteralTypeAnnotation","StringLiteralTypeAnnotation","BigIntLiteralTypeAnnotation","NumberLiteralTypeAnnotation","TSLiteralType","TSTemplateLiteralType"]);function Jt(e){return Br(e)||Sr(e)||Ao(e)||(e.type==="GenericTypeAnnotation"||e.type==="TSTypeReference")&&!e.typeParameters&&!e.typeArguments}function To(e){return e.type==="Identifier"&&(e.name==="beforeEach"||e.name==="beforeAll"||e.name==="afterEach"||e.name==="afterAll")}var xo=["it","it.only","it.skip","describe","describe.only","describe.skip","test","test.only","test.skip","test.step","test.describe","test.describe.only","test.describe.parallel","test.describe.parallel.only","test.describe.serial","test.describe.serial.only","skip","xit","xdescribe","xtest","fit","fdescribe","ftest"];function ho(e){return nu(e,xo)}function Pt(e,t){if((e==null?void 0:e.type)!=="CallExpression"||e.optional)return !1;let r=oe(e);if(r.length===1){if(Ln(e)&&Pt(t))return Mt(r[0]);if(To(e.callee))return Ln(r[0])}else if((r.length===2||r.length===3)&&(r[0].type==="TemplateLiteral"||te(r[0]))&&ho(e.callee))return r[2]&&!Fe(r[2])?!1:(r.length===2?Mt(r[1]):Co(r[1])&&z(r[1]).length<=1)||Ln(r[1]);return !1}var cu=e=>t=>((t==null?void 0:t.type)==="ChainExpression"&&(t=t.expression),e(t)),L=cu(v(["CallExpression","OptionalCallExpression"])),W=cu(v(["MemberExpression","OptionalMemberExpression"]));function Mn(e,t=5){return lu(e,t)<=t}function lu(e,t){let r=0;for(let n in e){let s=e[n];if(s&&typeof s=="object"&&typeof s.type=="string"&&(r++,r+=lu(s,t-r)),r>t)return r}return r}var go=.25;function nr(e,t){let{printWidth:r}=t;if(d(e))return !1;let n=r*go;if(e.type==="ThisExpression"||e.type==="Identifier"&&e.name.length<=n||jn(e)&&!d(e.argument))return !0;let s=e.type==="Literal"&&"regex"in e&&e.regex.pattern||e.type==="RegExpLiteral"&&e.pattern;return s?s.length<=n:te(e)?Ze(fe(e),t).length<=n:e.type==="TemplateLiteral"?e.expressions.length===0&&e.quasis[0].value.raw.length<=n&&!e.quasis[0].value.raw.includes(`
`):e.type==="UnaryExpression"?nr(e.argument,{printWidth:r}):e.type==="CallExpression"&&e.arguments.length===0&&e.callee.type==="Identifier"?e.callee.name.length<=n-2:kr(e)}function Oe(e,t){return H(t)?kt(t):d(t,h.Leading,r=>Z(e,k(r)))}function su(e){return e.quasis.some(t=>t.value.raw.includes(`
`))}function Lr(e,t){return (e.type==="TemplateLiteral"&&su(e)||e.type==="TaggedTemplateExpression"&&su(e.quasi))&&!Z(t,q(e),{backwards:!0})}function wr(e){if(!d(e))return !1;let t=_(!1,ct(e,h.Dangling),-1);return t&&!ee(t)}function mu(e){if(e.length<=1)return !1;let t=0;for(let r of e)if(Mt(r)){if(t+=1,t>1)return !0}else if(L(r)){for(let n of oe(r))if(Mt(n))return !0}return !1}function Or(e){let{node:t,parent:r,key:n}=e;return n==="callee"&&L(t)&&L(r)&&r.arguments.length>0&&t.arguments.length>r.arguments.length}var So=new Set(["!","-","+","~"]);function be(e,t=2){if(t<=0)return !1;if(e.type==="ChainExpression"||e.type==="TSNonNullExpression")return be(e.expression,t);let r=n=>be(n,t-1);if(vn(e))return ze(e.pattern??e.regex.pattern)<=5;if(kr(e)||Fo(e)||e.type==="ArgumentPlaceholder")return !0;if(e.type==="TemplateLiteral")return e.quasis.every(n=>!n.value.raw.includes(`
`))&&e.expressions.every(r);if(se(e))return e.properties.every(n=>!n.computed&&(n.shorthand||n.value&&r(n.value)));if(X(e))return e.elements.every(n=>n===null||r(n));if(lt(e)){if(e.type==="ImportExpression"||be(e.callee,t)){let n=oe(e);return n.length<=t&&n.every(r)}return !1}return W(e)?be(e.object,t)&&be(e.property,t):e.type==="UnaryExpression"&&So.has(e.operator)||e.type==="UpdateExpression"?be(e.argument,t):!1}function fe(e){var t;return ((t=e.extra)==null?void 0:t.raw)??e.raw}function yu(e){return e}function ae(e,t="es5"){return e.trailingComma==="es5"&&t==="es5"||e.trailingComma==="all"&&(t==="all"||t==="es5")}function ie(e,t){switch(e.type){case"BinaryExpression":case"LogicalExpression":case"AssignmentExpression":case"NGPipeExpression":return ie(e.left,t);case"MemberExpression":case"OptionalMemberExpression":return ie(e.object,t);case"TaggedTemplateExpression":return e.tag.type==="FunctionExpression"?!1:ie(e.tag,t);case"CallExpression":case"OptionalCallExpression":return e.callee.type==="FunctionExpression"?!1:ie(e.callee,t);case"ConditionalExpression":return ie(e.test,t);case"UpdateExpression":return !e.prefix&&ie(e.argument,t);case"BindExpression":return e.object&&ie(e.object,t);case"SequenceExpression":return ie(e.expressions[0],t);case"ChainExpression":case"TSSatisfiesExpression":case"TSAsExpression":case"TSNonNullExpression":case"AsExpression":case"AsConstExpression":case"SatisfiesExpression":return ie(e.expression,t);default:return t(e)}}var uu={"==":!0,"!=":!0,"===":!0,"!==":!0},br={"*":!0,"/":!0,"%":!0},_n={">>":!0,">>>":!0,"<<":!0};function sr(e,t){return !(tr(t)!==tr(e)||e==="**"||uu[e]&&uu[t]||t==="%"&&br[e]||e==="%"&&br[t]||t!==e&&br[t]&&br[e]||_n[e]&&_n[t])}var Bo=new Map([["|>"],["??"],["||"],["&&"],["|"],["^"],["&"],["==","===","!=","!=="],["<",">","<=",">=","in","instanceof"],[">>","<<",">>>"],["+","-"],["*","/","%"],["**"]].flatMap((e,t)=>e.map(r=>[r,t])));function tr(e){return Bo.get(e)}function Du(e){return !!_n[e]||e==="|"||e==="^"||e==="&"}function fu(e){var r;if(e.rest)return !0;let t=z(e);return ((r=_(!1,t,-1))==null?void 0:r.type)==="RestElement"}var wn=new WeakMap;function z(e){if(wn.has(e))return wn.get(e);let t=[];return e.this&&t.push(e.this),Array.isArray(e.parameters)?t.push(...e.parameters):Array.isArray(e.params)&&t.push(...e.params),e.rest&&t.push(e.rest),wn.set(e,t),t}function Eu(e,t){let{node:r}=e,n=0,s=u=>t(u,n++);r.this&&e.call(s,"this"),Array.isArray(r.parameters)?e.each(s,"parameters"):Array.isArray(r.params)&&e.each(s,"params"),r.rest&&e.call(s,"rest");}var On=new WeakMap;function oe(e){if(On.has(e))return On.get(e);if(e.type==="ChainExpression")return oe(e.expression);let t=e.arguments;return e.type==="ImportExpression"&&(t=[e.source],e.options&&t.push(e.options)),On.set(e,t),t}function qt(e,t){let{node:r}=e;if(r.type==="ChainExpression")return e.call(()=>qt(e,t),"expression");r.type==="ImportExpression"?(e.call(n=>t(n,0),"source"),r.options&&e.call(n=>t(n,1),"options")):e.each(t,"arguments");}function Rn(e,t){let r=[];if(e.type==="ChainExpression"&&(e=e.expression,r.push("expression")),e.type==="ImportExpression"){if(t===0||t===(e.options?-2:-1))return [...r,"source"];if(e.options&&(t===1||t===-1))return [...r,"options"];throw new RangeError("Invalid argument index")}if(t<0&&(t=e.arguments.length+t),t<0||t>=e.arguments.length)throw new RangeError("Invalid argument index");return [...r,"arguments",t]}function ur(e){return e.value.trim()==="prettier-ignore"&&!e.unignore}function kt(e){return (e==null?void 0:e.prettierIgnore)||d(e,h.PrettierIgnore)}var h={Leading:2,Trailing:4,Dangling:8,Block:16,Line:32,PrettierIgnore:64,First:128,Last:256},Fu=(e,t)=>{if(typeof e=="function"&&(t=e,e=0),e||t)return (r,n,s)=>!(e&h.Leading&&!r.leading||e&h.Trailing&&!r.trailing||e&h.Dangling&&(r.leading||r.trailing)||e&h.Block&&!ee(r)||e&h.Line&&!Ct(r)||e&h.First&&n!==0||e&h.Last&&n!==s.length-1||e&h.PrettierIgnore&&!ur(r)||t&&!t(r))};function d(e,t,r){if(!O(e==null?void 0:e.comments))return !1;let n=Fu(t,r);return n?e.comments.some(n):!0}function ct(e,t,r){if(!Array.isArray(e==null?void 0:e.comments))return [];let n=Fu(t,r);return n?e.comments.filter(n):e.comments}var pe=(e,{originalText:t})=>jt(t,k(e));function lt(e){return L(e)||e.type==="NewExpression"||e.type==="ImportExpression"}function Ce(e){return e&&(e.type==="ObjectProperty"||e.type==="Property"&&!bt(e))}var Ae=v(["TSAsExpression","TSSatisfiesExpression","AsExpression","AsConstExpression","SatisfiesExpression"]),Ue=v(["UnionTypeAnnotation","TSUnionType"]),_r=v(["IntersectionTypeAnnotation","TSIntersectionType"]);var bo=new Set(["range","raw","comments","leadingComments","trailingComments","innerComments","extra","start","end","loc","flags","errors","tokens"]),Wt=e=>{for(let t of e.quasis)delete t.value;};function Cu(e,t,r){var s,u;if(e.type==="Program"&&delete t.sourceType,(e.type==="BigIntLiteral"||e.type==="BigIntLiteralTypeAnnotation")&&e.value&&(t.value=e.value.toLowerCase()),(e.type==="BigIntLiteral"||e.type==="Literal")&&e.bigint&&(t.bigint=e.bigint.toLowerCase()),e.type==="EmptyStatement"||e.type==="JSXText"||e.type==="JSXExpressionContainer"&&(e.expression.type==="Literal"||e.expression.type==="StringLiteral")&&e.expression.value===" ")return null;if((e.type==="Property"||e.type==="ObjectProperty"||e.type==="MethodDefinition"||e.type==="ClassProperty"||e.type==="ClassMethod"||e.type==="PropertyDefinition"||e.type==="TSDeclareMethod"||e.type==="TSPropertySignature"||e.type==="ObjectTypeProperty"||e.type==="ImportAttribute")&&e.key&&!e.computed){let{key:i}=e;te(i)||Fe(i)?t.key=String(i.value):i.type==="Identifier"&&(t.key=i.name);}if(e.type==="JSXElement"&&e.openingElement.name.name==="style"&&e.openingElement.attributes.some(i=>i.type==="JSXAttribute"&&i.name.name==="jsx"))for(let{type:i,expression:a}of t.children)i==="JSXExpressionContainer"&&a.type==="TemplateLiteral"&&Wt(a);e.type==="JSXAttribute"&&e.name.name==="css"&&e.value.type==="JSXExpressionContainer"&&e.value.expression.type==="TemplateLiteral"&&Wt(t.value.expression),e.type==="JSXAttribute"&&((s=e.value)==null?void 0:s.type)==="Literal"&&/["']|&quot;|&apos;/u.test(e.value.value)&&(t.value.value=Y(!1,e.value.value,/["']|&quot;|&apos;/gu,'"'));let n=e.expression||e.callee;if(e.type==="Decorator"&&n.type==="CallExpression"&&n.callee.name==="Component"&&n.arguments.length===1){let i=e.expression.arguments[0].properties;for(let[a,p]of t.expression.arguments[0].properties.entries())switch(i[a].key.name){case"styles":X(p.value)&&Wt(p.value.elements[0]);break;case"template":p.value.type==="TemplateLiteral"&&Wt(p.value);break}}e.type==="TaggedTemplateExpression"&&(e.tag.type==="MemberExpression"||e.tag.type==="Identifier"&&(e.tag.name==="gql"||e.tag.name==="graphql"||e.tag.name==="css"||e.tag.name==="md"||e.tag.name==="markdown"||e.tag.name==="html")||e.tag.type==="CallExpression")&&Wt(t.quasi),e.type==="TemplateLiteral"&&((u=e.leadingComments)!=null&&u.some(a=>ee(a)&&["GraphQL","HTML"].some(p=>a.value===` ${p} `))||r.type==="CallExpression"&&r.callee.name==="graphql"||!e.leadingComments)&&Wt(t),e.type==="ChainExpression"&&e.expression.type==="TSNonNullExpression"&&(t.type="TSNonNullExpression",t.expression.type="ChainExpression"),e.type==="TSMappedType"&&(delete t.key,delete t.constraint),e.type==="TSEnumDeclaration"&&delete t.body;}Cu.ignoredProperties=bo;var Au=Cu;var et="string",_e="array",tt="cursor",Xe="indent",Ye="align",rt="trim",le="group",Pe="fill",xe="if-break",He="indent-if-break",Ne="line-suffix",Ve="line-suffix-boundary",me="line",je="label",ve="break-parent",jr=new Set([tt,Xe,Ye,rt,le,Pe,xe,He,Ne,Ve,me,je,ve]);function Po(e){if(typeof e=="string")return et;if(Array.isArray(e))return _e;if(!e)return;let{type:t}=e;if(jr.has(t))return t}var nt=Po;var ko=e=>new Intl.ListFormat("en-US",{type:"disjunction"}).format(e);function Io(e){let t=e===null?"null":typeof e;if(t!=="string"&&t!=="object")return `Unexpected doc '${t}',
Expected it to be 'string' or 'object'.`;if(nt(e))throw new Error("doc is valid.");let r=Object.prototype.toString.call(e);if(r!=="[object Object]")return `Unexpected doc '${r}'.`;let n=ko([...jr].map(s=>`'${s}'`));return `Unexpected doc.type '${e.type}'.
Expected it to be ${n}.`}var Jn=class extends Error{name="InvalidDocError";constructor(t){super(Io(t)),this.doc=t;}},Tt=Jn;var Tu={};function Lo(e,t,r,n){let s=[e];for(;s.length>0;){let u=s.pop();if(u===Tu){r(s.pop());continue}r&&s.push(u,Tu);let i=nt(u);if(!i)throw new Tt(u);if((t==null?void 0:t(u))!==!1)switch(i){case _e:case Pe:{let a=i===_e?u:u.parts;for(let p=a.length,o=p-1;o>=0;--o)s.push(a[o]);break}case xe:s.push(u.flatContents,u.breakContents);break;case le:if(n&&u.expandedStates)for(let a=u.expandedStates.length,p=a-1;p>=0;--p)s.push(u.expandedStates[p]);else s.push(u.contents);break;case Ye:case Xe:case He:case je:case Ne:s.push(u.contents);break;case et:case tt:case rt:case Ve:case me:case ve:break;default:throw new Tt(u)}}}var qn=Lo;var du=()=>{},vr=du;function f(e){return {type:Xe,contents:e}}function he(e,t){return {type:Ye,contents:t,n:e}}function l(e,t={}){return vr(t.expandedStates),{type:le,id:t.id,contents:e,break:!!t.shouldBreak,expandedStates:t.expandedStates}}function xu(e){return he(Number.NEGATIVE_INFINITY,e)}function Mr(e){return he(-1,e)}function Ke(e,t){return l(e[0],{...t,expandedStates:e})}function Rr(e){return {type:Pe,parts:e}}function B(e,t="",r={}){return {type:xe,breakContents:e,flatContents:t,groupId:r.groupId}}function dt(e,t){return {type:He,contents:e,groupId:t.groupId,negate:t.negate}}function Wn(e){return {type:Ne,contents:e}}var ke={type:Ve},Ee={type:ve};var Gn={type:me,hard:!0},wo={type:me,hard:!0,literal:!0},x={type:me},E={type:me,soft:!0},F=[Gn,Ee],Jr=[wo,Ee],ir={type:tt};function b(e,t){let r=[];for(let n=0;n<t.length;n++)n!==0&&r.push(e),r.push(t[n]);return r}function hu(e,t,r){let n=e;if(t>0){for(let s=0;s<Math.floor(t/r);++s)n=f(n);n=he(t%r,n),n=he(Number.NEGATIVE_INFINITY,n);}return n}function st(e,t){return e?{type:je,label:e,contents:t}:t}function mt(e,t){if(typeof e=="string")return t(e);let r=new Map;return n(e);function n(u){if(r.has(u))return r.get(u);let i=s(u);return r.set(u,i),i}function s(u){switch(nt(u)){case _e:return t(u.map(n));case Pe:return t({...u,parts:u.parts.map(n)});case xe:return t({...u,breakContents:n(u.breakContents),flatContents:n(u.flatContents)});case le:{let{expandedStates:i,contents:a}=u;return i?(i=i.map(n),a=i[0]):a=n(a),t({...u,contents:a,expandedStates:i})}case Ye:case Xe:case He:case je:case Ne:return t({...u,contents:n(u.contents)});case et:case tt:case rt:case Ve:case me:case ve:return t(u);default:throw new Tt(u)}}}function Su(e,t,r){let n=r,s=!1;function u(i){if(s)return !1;let a=t(i);a!==void 0&&(s=!0,n=a);}return qn(e,u),n}function Oo(e){if(e.type===le&&e.break||e.type===me&&e.hard||e.type===ve)return !0}function re(e){return Su(e,Oo,!1)}function gu(e){if(e.length>0){let t=_(!1,e,-1);!t.expandedStates&&!t.break&&(t.break="propagated");}return null}function Bu(e){let t=new Set,r=[];function n(u){if(u.type===ve&&gu(r),u.type===le){if(r.push(u),t.has(u))return !1;t.add(u);}}function s(u){u.type===le&&r.pop().break&&gu(r);}qn(e,n,s,!0);}function _o(e){return e.type===me&&!e.hard?e.soft?"":" ":e.type===xe?e.flatContents:e}function ar(e){return mt(e,_o)}function jo(e){switch(nt(e)){case Pe:if(e.parts.every(t=>t===""))return "";break;case le:if(!e.contents&&!e.id&&!e.break&&!e.expandedStates)return "";if(e.contents.type===le&&e.contents.id===e.id&&e.contents.break===e.break&&e.contents.expandedStates===e.expandedStates)return e.contents;break;case Ye:case Xe:case He:case Ne:if(!e.contents)return "";break;case xe:if(!e.flatContents&&!e.breakContents)return "";break;case _e:{let t=[];for(let r of e){if(!r)continue;let[n,...s]=Array.isArray(r)?r:[r];typeof n=="string"&&typeof _(!1,t,-1)=="string"?t[t.length-1]+=n:t.push(n),t.push(...s);}return t.length===0?"":t.length===1?t[0]:t}case et:case tt:case rt:case Ve:case me:case je:case ve:break;default:throw new Tt(e)}return e}function Gt(e){return mt(e,t=>jo(t))}function Ie(e,t=Jr){return mt(e,r=>typeof r=="string"?b(t,r.split(`
`)):r)}function vo(e){if(e.type===me)return !0}function bu(e){return Su(e,vo,!1)}function or(e,t){return e.type===je?{...e,contents:t(e.contents)}:t(e)}function Mo(e){let t=`*${e.value}*`.split(`
`);return t.length>1&&t.every(r=>r.trimStart()[0]==="*")}var Pu=Mo;function ku(e,t){let r=e.node;if(Ct(r))return t.originalText.slice(q(r),k(r)).trimEnd();if(ee(r))return Pu(r)?Ro(r):["/*",Ie(r.value),"*/"];throw new Error("Not a comment: "+JSON.stringify(r))}function Ro(e){let t=e.value.split(`
`);return ["/*",b(F,t.map((r,n)=>n===0?r.trimEnd():" "+(n<t.length-1?r.trim():r.trimStart()))),"*/"]}var $n={};Ar($n,{endOfLine:()=>Yo,ownLine:()=>Xo,remaining:()=>Ho});function Jo(e){let t=e.type||e.kind||"(unknown type)",r=String(e.name||e.id&&(typeof e.id=="object"?e.id.name:e.id)||e.key&&(typeof e.key=="object"?e.key.name:e.key)||e.value&&(typeof e.value=="object"?"":String(e.value))||e.operator||"");return r.length>20&&(r=r.slice(0,19)+"\u2026"),t+(r?" "+r:"")}function Un(e,t){(e.comments??(e.comments=[])).push(t),t.printed=!1,t.nodeDescription=Jo(e);}function ce(e,t){t.leading=!0,t.trailing=!1,Un(e,t);}function Le(e,t,r){t.leading=!1,t.trailing=!1,r&&(t.marker=r),Un(e,t);}function V(e,t){t.leading=!1,t.trailing=!0,Un(e,t);}function qo(e,t){let r=null,n=t;for(;n!==r;)r=n,n=We(e,n),n=Ot(e,n),n=_t(e,n),n=Ge(e,n);return n}var ut=qo;function Wo(e,t){let r=ut(e,t);return r===!1?"":e.charAt(r)}var ge=Wo;function Go(e,t,r){for(let n=t;n<r;++n)if(e.charAt(n)===`
`)return !0;return !1}var Te=Go;function Uo(e){return ee(e)&&e.value[0]==="*"&&/@(?:type|satisfies)\b/u.test(e.value)}var Iu=Uo;function Xo(e){return [Ru,wu,ju,np,Vo,Yn,Hn,Lu,Ou,ap,up,Vn,Mu,op,_u,vu,Nn,$o,Ep].some(t=>t(e))}function Yo(e){return [No,ju,wu,Mu,Yn,Hn,Lu,Ou,vu,sp,ip,Vn,lp,Nn,Dp,fp,Fp].some(t=>t(e))}function Ho(e){return [Ru,Yn,Hn,Ko,rp,_u,Vn,tp,ep,yp,Nn,mp].some(t=>t(e))}function It(e,t){let r=(e.body||e.properties).find(({type:n})=>n!=="EmptyStatement");r?ce(r,t):Le(e,t);}function Xn(e,t){e.type==="BlockStatement"?It(e,t):ce(e,t);}function No({comment:e,followingNode:t}){return t&&Iu(e)?(ce(t,e),!0):!1}function Yn({comment:e,precedingNode:t,enclosingNode:r,followingNode:n,text:s}){if((r==null?void 0:r.type)!=="IfStatement"||!n)return !1;if(ge(s,k(e))===")")return V(t,e),!0;if(t===r.consequent&&n===r.alternate){let i=ut(s,k(r.consequent));if(q(e)<i||r.alternate.type==="BlockStatement"){if(t.type==="BlockStatement")V(t,e);else {let a=Ct(e)||e.loc.start.line===e.loc.end.line,p=e.loc.start.line===t.loc.start.line;a&&p?V(t,e):Le(r,e);}return !0}}return n.type==="BlockStatement"?(It(n,e),!0):n.type==="IfStatement"?(Xn(n.consequent,e),!0):r.consequent===n?(ce(n,e),!0):!1}function Hn({comment:e,precedingNode:t,enclosingNode:r,followingNode:n,text:s}){return (r==null?void 0:r.type)!=="WhileStatement"||!n?!1:ge(s,k(e))===")"?(V(t,e),!0):n.type==="BlockStatement"?(It(n,e),!0):r.body===n?(ce(n,e),!0):!1}function Lu({comment:e,precedingNode:t,enclosingNode:r,followingNode:n}){return (r==null?void 0:r.type)!=="TryStatement"&&(r==null?void 0:r.type)!=="CatchClause"||!n?!1:r.type==="CatchClause"&&t?(V(t,e),!0):n.type==="BlockStatement"?(It(n,e),!0):n.type==="TryStatement"?(Xn(n.finalizer,e),!0):n.type==="CatchClause"?(Xn(n.body,e),!0):!1}function Vo({comment:e,enclosingNode:t,followingNode:r}){return W(t)&&(r==null?void 0:r.type)==="Identifier"?(ce(t,e),!0):!1}function $o({comment:e,enclosingNode:t,followingNode:r,options:n}){return !n.experimentalTernaries||!((t==null?void 0:t.type)==="ConditionalExpression"||(t==null?void 0:t.type)==="ConditionalTypeAnnotation"||(t==null?void 0:t.type)==="TSConditionalType")?!1:(r==null?void 0:r.type)==="ConditionalExpression"||(r==null?void 0:r.type)==="ConditionalTypeAnnotation"||(r==null?void 0:r.type)==="TSConditionalType"?(Le(t,e),!0):!1}function wu({comment:e,precedingNode:t,enclosingNode:r,followingNode:n,text:s,options:u}){let i=t&&!Te(s,k(t),q(e));return (!t||!i)&&((r==null?void 0:r.type)==="ConditionalExpression"||(r==null?void 0:r.type)==="ConditionalTypeAnnotation"||(r==null?void 0:r.type)==="TSConditionalType")&&n?u.experimentalTernaries&&r.alternate===n&&!(ee(e)&&!Te(u.originalText,q(e),k(e)))?(Le(r,e),!0):(ce(n,e),!0):!1}function Ko({comment:e,precedingNode:t,enclosingNode:r}){return Ce(r)&&r.shorthand&&r.key===t&&r.value.type==="AssignmentPattern"?(V(r.value.left,e),!0):!1}var Qo=new Set(["ClassDeclaration","ClassExpression","DeclareClass","DeclareInterface","InterfaceDeclaration","TSInterfaceDeclaration"]);function Ou({comment:e,precedingNode:t,enclosingNode:r,followingNode:n}){if(Qo.has(r==null?void 0:r.type)){if(O(r.decorators)&&(n==null?void 0:n.type)!=="Decorator")return V(_(!1,r.decorators,-1),e),!0;if(r.body&&n===r.body)return It(r.body,e),!0;if(n){if(r.superClass&&n===r.superClass&&t&&(t===r.id||t===r.typeParameters))return V(t,e),!0;for(let s of ["implements","extends","mixins"])if(r[s]&&n===r[s][0])return t&&(t===r.id||t===r.typeParameters||t===r.superClass)?V(t,e):Le(r,e,s),!0}}return !1}var zo=new Set(["ClassMethod","ClassProperty","PropertyDefinition","TSAbstractPropertyDefinition","TSAbstractMethodDefinition","TSDeclareMethod","MethodDefinition","ClassAccessorProperty","AccessorProperty","TSAbstractAccessorProperty","TSParameterProperty"]);function _u({comment:e,precedingNode:t,enclosingNode:r,text:n}){return r&&t&&ge(n,k(e))==="("&&(r.type==="Property"||r.type==="TSDeclareMethod"||r.type==="TSAbstractMethodDefinition")&&t.type==="Identifier"&&r.key===t&&ge(n,k(t))!==":"?(V(t,e),!0):(t==null?void 0:t.type)==="Decorator"&&zo.has(r==null?void 0:r.type)&&(Ct(e)||e.placement==="ownLine")?(V(t,e),!0):!1}var Zo=new Set(["FunctionDeclaration","FunctionExpression","ClassMethod","MethodDefinition","ObjectMethod"]);function ep({comment:e,precedingNode:t,enclosingNode:r,text:n}){return ge(n,k(e))!=="("?!1:t&&Zo.has(r==null?void 0:r.type)?(V(t,e),!0):!1}function tp({comment:e,enclosingNode:t,text:r}){if((t==null?void 0:t.type)!=="ArrowFunctionExpression")return !1;let n=ut(r,k(e));return n!==!1&&r.slice(n,n+2)==="=>"?(Le(t,e),!0):!1}function rp({comment:e,enclosingNode:t,text:r}){return ge(r,k(e))!==")"?!1:t&&(Ju(t)&&z(t).length===0||lt(t)&&oe(t).length===0)?(Le(t,e),!0):((t==null?void 0:t.type)==="MethodDefinition"||(t==null?void 0:t.type)==="TSAbstractMethodDefinition")&&z(t.value).length===0?(Le(t.value,e),!0):!1}function np({comment:e,precedingNode:t,enclosingNode:r,followingNode:n,text:s}){return (t==null?void 0:t.type)==="ComponentTypeParameter"&&((r==null?void 0:r.type)==="DeclareComponent"||(r==null?void 0:r.type)==="ComponentTypeAnnotation")&&(n==null?void 0:n.type)!=="ComponentTypeParameter"?(V(t,e),!0):((t==null?void 0:t.type)==="ComponentParameter"||(t==null?void 0:t.type)==="RestElement")&&(r==null?void 0:r.type)==="ComponentDeclaration"&&ge(s,k(e))===")"?(V(t,e),!0):!1}function ju({comment:e,precedingNode:t,enclosingNode:r,followingNode:n,text:s}){return (t==null?void 0:t.type)==="FunctionTypeParam"&&(r==null?void 0:r.type)==="FunctionTypeAnnotation"&&(n==null?void 0:n.type)!=="FunctionTypeParam"?(V(t,e),!0):((t==null?void 0:t.type)==="Identifier"||(t==null?void 0:t.type)==="AssignmentPattern"||(t==null?void 0:t.type)==="ObjectPattern"||(t==null?void 0:t.type)==="ArrayPattern"||(t==null?void 0:t.type)==="RestElement"||(t==null?void 0:t.type)==="TSParameterProperty")&&Ju(r)&&ge(s,k(e))===")"?(V(t,e),!0):!ee(e)&&((r==null?void 0:r.type)==="FunctionDeclaration"||(r==null?void 0:r.type)==="FunctionExpression"||(r==null?void 0:r.type)==="ObjectMethod")&&(n==null?void 0:n.type)==="BlockStatement"&&r.body===n&&ut(s,k(e))===q(n)?(It(n,e),!0):!1}function vu({comment:e,enclosingNode:t}){return (t==null?void 0:t.type)==="LabeledStatement"?(ce(t,e),!0):!1}function Nn({comment:e,enclosingNode:t}){return ((t==null?void 0:t.type)==="ContinueStatement"||(t==null?void 0:t.type)==="BreakStatement")&&!t.label?(V(t,e),!0):!1}function sp({comment:e,precedingNode:t,enclosingNode:r}){return L(r)&&t&&r.callee===t&&r.arguments.length>0?(ce(r.arguments[0],e),!0):!1}function up({comment:e,precedingNode:t,enclosingNode:r,followingNode:n}){return Ue(r)?(ur(e)&&(n.prettierIgnore=!0,e.unignore=!0),t?(V(t,e),!0):!1):(Ue(n)&&ur(e)&&(n.types[0].prettierIgnore=!0,e.unignore=!0),!1)}function ip({comment:e,enclosingNode:t}){return Ce(t)?(ce(t,e),!0):!1}function Vn({comment:e,enclosingNode:t,ast:r,isLastComment:n}){var s;return ((s=r==null?void 0:r.body)==null?void 0:s.length)===0?(n?Le(r,e):ce(r,e),!0):(t==null?void 0:t.type)==="Program"&&t.body.length===0&&!O(t.directives)?(n?Le(t,e):ce(t,e),!0):!1}function ap({comment:e,enclosingNode:t}){return (t==null?void 0:t.type)==="ForInStatement"||(t==null?void 0:t.type)==="ForOfStatement"?(ce(t,e),!0):!1}function Mu({comment:e,precedingNode:t,enclosingNode:r,text:n}){if((r==null?void 0:r.type)==="ImportSpecifier"||(r==null?void 0:r.type)==="ExportSpecifier")return ce(r,e),!0;let s=(t==null?void 0:t.type)==="ImportSpecifier"&&(r==null?void 0:r.type)==="ImportDeclaration",u=(t==null?void 0:t.type)==="ExportSpecifier"&&(r==null?void 0:r.type)==="ExportNamedDeclaration";return (s||u)&&Z(n,k(e))?(V(t,e),!0):!1}function op({comment:e,enclosingNode:t}){return (t==null?void 0:t.type)==="AssignmentPattern"?(ce(t,e),!0):!1}var pp=new Set(["VariableDeclarator","AssignmentExpression","TypeAlias","TSTypeAliasDeclaration"]),cp=new Set(["ObjectExpression","RecordExpression","ArrayExpression","TupleExpression","TemplateLiteral","TaggedTemplateExpression","ObjectTypeAnnotation","TSTypeLiteral"]);function lp({comment:e,enclosingNode:t,followingNode:r}){return pp.has(t==null?void 0:t.type)&&r&&(cp.has(r.type)||ee(e))?(ce(r,e),!0):!1}function mp({comment:e,enclosingNode:t,followingNode:r,text:n}){return !r&&((t==null?void 0:t.type)==="TSMethodSignature"||(t==null?void 0:t.type)==="TSDeclareFunction"||(t==null?void 0:t.type)==="TSAbstractMethodDefinition")&&ge(n,k(e))===";"?(V(t,e),!0):!1}function Ru({comment:e,enclosingNode:t,followingNode:r}){if(ur(e)&&(t==null?void 0:t.type)==="TSMappedType"&&(r==null?void 0:r.type)==="TSTypeParameter"&&r.constraint)return t.prettierIgnore=!0,e.unignore=!0,!0}function yp({comment:e,precedingNode:t,enclosingNode:r,followingNode:n}){return (r==null?void 0:r.type)!=="TSMappedType"?!1:(n==null?void 0:n.type)==="TSTypeParameter"&&n.name?(ce(n.name,e),!0):(t==null?void 0:t.type)==="TSTypeParameter"&&t.constraint?(V(t.constraint,e),!0):!1}function Dp({comment:e,enclosingNode:t,followingNode:r}){return !t||t.type!=="SwitchCase"||t.test||!r||r!==t.consequent[0]?!1:(r.type==="BlockStatement"&&Ct(e)?It(r,e):Le(t,e),!0)}function fp({comment:e,precedingNode:t,enclosingNode:r,followingNode:n}){return Ue(t)&&((r.type==="TSArrayType"||r.type==="ArrayTypeAnnotation")&&!n||_r(r))?(V(_(!1,t.types,-1),e),!0):!1}function Ep({comment:e,enclosingNode:t,precedingNode:r,followingNode:n}){if(((t==null?void 0:t.type)==="ObjectPattern"||(t==null?void 0:t.type)==="ArrayPattern")&&(n==null?void 0:n.type)==="TSTypeAnnotation")return r?V(r,e):Le(t,e),!0}function Fp({comment:e,precedingNode:t,enclosingNode:r,followingNode:n}){var s;if(!n&&(r==null?void 0:r.type)==="UnaryExpression"&&((t==null?void 0:t.type)==="LogicalExpression"||(t==null?void 0:t.type)==="BinaryExpression")){let u=((s=r.argument.loc)==null?void 0:s.start.line)!==t.right.loc.start.line,i=Ct(e)||e.loc.start.line===e.loc.end.line,a=e.loc.start.line===t.right.loc.start.line;if(u&&i&&a)return V(t.right,e),!0}return !1}var Ju=v(["ArrowFunctionExpression","FunctionExpression","FunctionDeclaration","ObjectMethod","ClassMethod","TSDeclareFunction","TSCallSignatureDeclaration","TSConstructSignatureDeclaration","TSMethodSignature","TSConstructorType","TSFunctionType","TSDeclareMethod"]);var Cp=new Set(["EmptyStatement","TemplateElement","TSEmptyBodyFunctionExpression","ChainExpression"]);function Ap(e){return !Cp.has(e.type)}function Tp(e,t){var r;if((t.parser==="typescript"||t.parser==="flow"||t.parser==="acorn"||t.parser==="espree"||t.parser==="meriyah"||t.parser==="__babel_estree")&&e.type==="MethodDefinition"&&((r=e.value)==null?void 0:r.type)==="FunctionExpression"&&z(e.value).length===0&&!e.value.returnType&&!O(e.value.typeParameters)&&e.value.body)return [...e.decorators||[],e.key,e.value.body]}function Kn(e){let{node:t,parent:r}=e;return (H(t)||r&&(r.type==="JSXSpreadAttribute"||r.type==="JSXSpreadChild"||Ue(r)||(r.type==="ClassDeclaration"||r.type==="ClassExpression")&&r.superClass===t))&&(!kt(t)||Ue(r))}function dp(e,{parser:t}){if(t==="flow"||t==="babel-flow")return e=Y(!1,e,/[\s(]/gu,""),e===""||e==="/*"||e==="/*::"}function qu(e){switch(e){case"cr":return "\r";case"crlf":return `\r
`;default:return `
`}}var Se=Symbol("MODE_BREAK"),it=Symbol("MODE_FLAT"),Ut=Symbol("cursor"),Qn=Symbol("DOC_FILL_PRINTED_LENGTH");function Wu(){return {value:"",length:0,queue:[]}}function xp(e,t){return zn(e,{type:"indent"},t)}function hp(e,t,r){return t===Number.NEGATIVE_INFINITY?e.root||Wu():t<0?zn(e,{type:"dedent"},r):t?t.type==="root"?{...e,root:e}:zn(e,{type:typeof t=="string"?"stringAlign":"numberAlign",n:t},r):e}function zn(e,t,r){let n=t.type==="dedent"?e.queue.slice(0,-1):[...e.queue,t],s="",u=0,i=0,a=0;for(let c of n)switch(c.type){case"indent":m(),r.useTabs?p(1):o(r.tabWidth);break;case"stringAlign":m(),s+=c.n,u+=c.n.length;break;case"numberAlign":i+=1,a+=c.n;break;default:throw new Error(`Unexpected type '${c.type}'`)}return D(),{...e,value:s,length:u,queue:n};function p(c){s+="	".repeat(c),u+=r.tabWidth*c;}function o(c){s+=" ".repeat(c),u+=c;}function m(){r.useTabs?y():D();}function y(){i>0&&p(i),C();}function D(){a>0&&o(a),C();}function C(){i=0,a=0;}}function Zn(e){let t=0,r=0,n=e.length;e:for(;n--;){let s=e[n];if(s===Ut){r++;continue}for(let u=s.length-1;u>=0;u--){let i=s[u];if(i===" "||i==="	")t++;else {e[n]=s.slice(0,u+1);break e}}}if(t>0||r>0)for(e.length=n+1;r-- >0;)e.push(Ut);return t}function qr(e,t,r,n,s,u){if(r===Number.POSITIVE_INFINITY)return !0;let i=t.length,a=[e],p=[];for(;r>=0;){if(a.length===0){if(i===0)return !0;a.push(t[--i]);continue}let{mode:o,doc:m}=a.pop(),y=nt(m);switch(y){case et:p.push(m),r-=ze(m);break;case _e:case Pe:{let D=y===_e?m:m.parts,C=m[Qn]??0;for(let c=D.length-1;c>=C;c--)a.push({mode:o,doc:D[c]});break}case Xe:case Ye:case He:case je:a.push({mode:o,doc:m.contents});break;case rt:r+=Zn(p);break;case le:{if(u&&m.break)return !1;let D=m.break?Se:o,C=m.expandedStates&&D===Se?_(!1,m.expandedStates,-1):m.contents;a.push({mode:D,doc:C});break}case xe:{let C=(m.groupId?s[m.groupId]||it:o)===Se?m.breakContents:m.flatContents;C&&a.push({mode:o,doc:C});break}case me:if(o===Se||m.hard)return !0;m.soft||(p.push(" "),r--);break;case Ne:n=!0;break;case Ve:if(n)return !1;break}}return !1}function es(e,t){let r={},n=t.printWidth,s=qu(t.endOfLine),u=0,i=[{ind:Wu(),mode:Se,doc:e}],a=[],p=!1,o=[],m=0;for(Bu(e);i.length>0;){let{ind:D,mode:C,doc:c}=i.pop();switch(nt(c)){case et:{let A=s!==`
`?Y(!1,c,`
`,s):c;a.push(A),i.length>0&&(u+=ze(A));break}case _e:for(let A=c.length-1;A>=0;A--)i.push({ind:D,mode:C,doc:c[A]});break;case tt:if(m>=2)throw new Error("There are too many 'cursor' in doc.");a.push(Ut),m++;break;case Xe:i.push({ind:xp(D,t),mode:C,doc:c.contents});break;case Ye:i.push({ind:hp(D,c.n,t),mode:C,doc:c.contents});break;case rt:u-=Zn(a);break;case le:switch(C){case it:if(!p){i.push({ind:D,mode:c.break?Se:it,doc:c.contents});break}case Se:{p=!1;let A={ind:D,mode:it,doc:c.contents},T=n-u,S=o.length>0;if(!c.break&&qr(A,i,T,S,r))i.push(A);else if(c.expandedStates){let g=_(!1,c.expandedStates,-1);if(c.break){i.push({ind:D,mode:Se,doc:g});break}else for(let M=1;M<c.expandedStates.length+1;M++)if(M>=c.expandedStates.length){i.push({ind:D,mode:Se,doc:g});break}else {let R=c.expandedStates[M],j={ind:D,mode:it,doc:R};if(qr(j,i,T,S,r)){i.push(j);break}}}else i.push({ind:D,mode:Se,doc:c.contents});break}}c.id&&(r[c.id]=_(!1,i,-1).mode);break;case Pe:{let A=n-u,T=c[Qn]??0,{parts:S}=c,g=S.length-T;if(g===0)break;let M=S[T+0],R=S[T+1],j={ind:D,mode:it,doc:M},I={ind:D,mode:Se,doc:M},U=qr(j,[],A,o.length>0,r,!0);if(g===1){U?i.push(j):i.push(I);break}let P={ind:D,mode:it,doc:R},G={ind:D,mode:Se,doc:R};if(g===2){U?i.push(P,j):i.push(G,I);break}let ue=S[T+2],Q={ind:D,mode:C,doc:{...c,[Qn]:T+2}};qr({ind:D,mode:it,doc:[M,R,ue]},[],A,o.length>0,r,!0)?i.push(Q,P,j):U?i.push(Q,G,j):i.push(Q,G,I);break}case xe:case He:{let A=c.groupId?r[c.groupId]:C;if(A===Se){let T=c.type===xe?c.breakContents:c.negate?c.contents:f(c.contents);T&&i.push({ind:D,mode:C,doc:T});}if(A===it){let T=c.type===xe?c.flatContents:c.negate?f(c.contents):c.contents;T&&i.push({ind:D,mode:C,doc:T});}break}case Ne:o.push({ind:D,mode:C,doc:c.contents});break;case Ve:o.length>0&&i.push({ind:D,mode:C,doc:Gn});break;case me:switch(C){case it:if(c.hard)p=!0;else {c.soft||(a.push(" "),u+=1);break}case Se:if(o.length>0){i.push({ind:D,mode:C,doc:c},...o.reverse()),o.length=0;break}c.literal?D.root?(a.push(s,D.root.value),u=D.root.length):(a.push(s),u=0):(u-=Zn(a),a.push(s+D.value),u=D.length);break}break;case je:i.push({ind:D,mode:C,doc:c.contents});break;case ve:break;default:throw new Tt(c)}i.length===0&&o.length>0&&(i.push(...o.reverse()),o.length=0);}let y=a.indexOf(Ut);if(y!==-1){let D=a.indexOf(Ut,y+1);if(D===-1)return {formatted:a.filter(T=>T!==Ut).join("")};let C=a.slice(0,y).join(""),c=a.slice(y+1,D).join(""),A=a.slice(D+1).join("");return {formatted:C+c+A,cursorNodeStart:C.length,cursorNodeText:c}}return {formatted:a.join("")}}function gp(e,t,r=0){let n=0;for(let s=r;s<e.length;++s)e[s]==="	"?n=n+t-n%t:n++;return n}var Gu=gp;function Sp(e,t){let r=e.lastIndexOf(`
`);return r===-1?0:Gu(e.slice(r+1).match(/^[\t ]*/u)[0],t)}var Uu=Sp;function Wr(e,t,r){let{node:n}=e;if(n.type==="TemplateLiteral"&&Pp(e)){let o=Bp(e,r,t);if(o)return o}let u="expressions";n.type==="TSTemplateLiteralType"&&(u="types");let i=[],a=e.map(t,u);i.push(ke,"`");let p=0;return e.each(({index:o,node:m})=>{if(i.push(t()),m.tail)return;let{tabWidth:y}=r,D=m.value.raw,C=D.includes(`
`)?Uu(D,y):p;p=C;let c=a[o],A=n[u][o],T=Te(r.originalText,k(m),q(n.quasis[o+1]));if(!T){let g=es(c,{...r,printWidth:Number.POSITIVE_INFINITY}).formatted;g.includes(`
`)?T=!0:c=g;}T&&(d(A)||A.type==="Identifier"||W(A)||A.type==="ConditionalExpression"||A.type==="SequenceExpression"||Ae(A)||De(A))&&(c=[f([E,c]),E]);let S=C===0&&D.endsWith(`
`)?he(Number.NEGATIVE_INFINITY,c):hu(c,C,y);i.push(l(["${",S,ke,"}"]));},"quasis"),i.push("`"),i}function Xu(e,t){let r=t("quasi");return st(r.label&&{tagged:!0,...r.label},[t("tag"),t(e.node.typeArguments?"typeArguments":"typeParameters"),ke,r])}function Bp(e,t,r){let{node:n}=e,s=n.quasis[0].value.raw.trim().split(/\s*\|\s*/u);if(s.length>1||s.some(u=>u.length>0)){t.__inJestEach=!0;let u=e.map(r,"expressions");t.__inJestEach=!1;let i=[],a=u.map(D=>"${"+es(D,{...t,printWidth:Number.POSITIVE_INFINITY,endOfLine:"lf"}).formatted+"}"),p=[{hasLineBreak:!1,cells:[]}];for(let D=1;D<n.quasis.length;D++){let C=_(!1,p,-1),c=a[D-1];C.cells.push(c),c.includes(`
`)&&(C.hasLineBreak=!0),n.quasis[D].value.raw.includes(`
`)&&p.push({hasLineBreak:!1,cells:[]});}let o=Math.max(s.length,...p.map(D=>D.cells.length)),m=Array.from({length:o}).fill(0),y=[{cells:s},...p.filter(D=>D.cells.length>0)];for(let{cells:D}of y.filter(C=>!C.hasLineBreak))for(let[C,c]of D.entries())m[C]=Math.max(m[C],ze(c));return i.push(ke,"`",f([F,b(F,y.map(D=>b(" | ",D.cells.map((C,c)=>D.hasLineBreak?C:C+" ".repeat(m[c]-ze(C))))))]),F,"`"),i}}function bp(e,t){let{node:r}=e,n=t();return d(r)&&(n=l([f([E,n]),E])),["${",n,ke,"}"]}function Xt(e,t){return e.map(r=>bp(r,t),"expressions")}function Gr(e,t){return mt(e,r=>typeof r=="string"?t?Y(!1,r,/(\\*)`/gu,"$1$1\\`"):ts(r):r)}function ts(e){return Y(!1,e,/([\\`]|\$\{)/gu,String.raw`\$1`)}function Pp({node:e,parent:t}){let r=/^[fx]?(?:describe|it|test)$/u;return t.type==="TaggedTemplateExpression"&&t.quasi===e&&t.tag.type==="MemberExpression"&&t.tag.property.type==="Identifier"&&t.tag.property.name==="each"&&(t.tag.object.type==="Identifier"&&r.test(t.tag.object.name)||t.tag.object.type==="MemberExpression"&&t.tag.object.property.type==="Identifier"&&(t.tag.object.property.name==="only"||t.tag.object.property.name==="skip")&&t.tag.object.object.type==="Identifier"&&r.test(t.tag.object.object.name))}var ns=[(e,t)=>e.type==="ObjectExpression"&&t==="properties",(e,t)=>e.type==="CallExpression"&&e.callee.type==="Identifier"&&e.callee.name==="Component"&&t==="arguments",(e,t)=>e.type==="Decorator"&&t==="expression"];function Yu(e){let t=n=>n.type==="TemplateLiteral",r=(n,s)=>Ce(n)&&!n.computed&&n.key.type==="Identifier"&&n.key.name==="styles"&&s==="value";return e.match(t,(n,s)=>X(n)&&s==="elements",r,...ns)||e.match(t,r,...ns)}function Hu(e){return e.match(t=>t.type==="TemplateLiteral",(t,r)=>Ce(t)&&!t.computed&&t.key.type==="Identifier"&&t.key.name==="template"&&r==="value",...ns)}function rs(e,t){return d(e,h.Block|h.Leading,({value:r})=>r===` ${t} `)}function Ur({node:e,parent:t},r){return rs(e,r)||kp(t)&&rs(t,r)||t.type==="ExpressionStatement"&&rs(t,r)}function kp(e){return e.type==="AsConstExpression"||e.type==="TSAsExpression"&&e.typeAnnotation.type==="TSTypeReference"&&e.typeAnnotation.typeName.type==="Identifier"&&e.typeAnnotation.typeName.name==="const"}async function Ip(e,t,r){let{node:n}=r,s=n.quasis.map(m=>m.value.raw),u=0,i=s.reduce((m,y,D)=>D===0?y:m+"@prettier-placeholder-"+u+++"-id"+y,""),a=await e(i,{parser:"scss"}),p=Xt(r,t),o=Lp(a,p);if(!o)throw new Error("Couldn't insert all the expressions");return ["`",f([F,o]),E,"`"]}function Lp(e,t){if(!O(t))return e;let r=0,n=mt(Gt(e),s=>typeof s!="string"||!s.includes("@prettier-placeholder")?s:s.split(/@prettier-placeholder-(\d+)-id/u).map((u,i)=>i%2===0?Ie(u):(r++,t[u])));return t.length===r?n:null}function wp({node:e,parent:t,grandparent:r}){return r&&e.quasis&&t.type==="JSXExpressionContainer"&&r.type==="JSXElement"&&r.openingElement.name.name==="style"&&r.openingElement.attributes.some(n=>n.type==="JSXAttribute"&&n.name.name==="jsx")||(t==null?void 0:t.type)==="TaggedTemplateExpression"&&t.tag.type==="Identifier"&&t.tag.name==="css"||(t==null?void 0:t.type)==="TaggedTemplateExpression"&&t.tag.type==="MemberExpression"&&t.tag.object.name==="css"&&(t.tag.property.name==="global"||t.tag.property.name==="resolve")}function Xr(e){return e.type==="Identifier"&&e.name==="styled"}function Nu(e){return /^[A-Z]/u.test(e.object.name)&&e.property.name==="extend"}function Op({parent:e}){if(!e||e.type!=="TaggedTemplateExpression")return !1;let t=e.tag.type==="ParenthesizedExpression"?e.tag.expression:e.tag;switch(t.type){case"MemberExpression":return Xr(t.object)||Nu(t);case"CallExpression":return Xr(t.callee)||t.callee.type==="MemberExpression"&&(t.callee.object.type==="MemberExpression"&&(Xr(t.callee.object.object)||Nu(t.callee.object))||t.callee.object.type==="CallExpression"&&Xr(t.callee.object.callee));case"Identifier":return t.name==="css";default:return !1}}function _p({parent:e,grandparent:t}){return (t==null?void 0:t.type)==="JSXAttribute"&&e.type==="JSXExpressionContainer"&&t.name.type==="JSXIdentifier"&&t.name.name==="css"}function jp(e){if(wp(e)||Op(e)||_p(e)||Yu(e))return Ip}var Vu=jp;async function vp(e,t,r){let{node:n}=r,s=n.quasis.length,u=Xt(r,t),i=[];for(let a=0;a<s;a++){let p=n.quasis[a],o=a===0,m=a===s-1,y=p.value.cooked,D=y.split(`
`),C=D.length,c=u[a],A=C>2&&D[0].trim()===""&&D[1].trim()==="",T=C>2&&D[C-1].trim()===""&&D[C-2].trim()==="",S=D.every(M=>/^\s*(?:#[^\n\r]*)?$/u.test(M));if(!m&&/#[^\n\r]*$/u.test(D[C-1]))return null;let g=null;S?g=Mp(D):g=await e(y,{parser:"graphql"}),g?(g=Gr(g,!1),!o&&A&&i.push(""),i.push(g),!m&&T&&i.push("")):!o&&!m&&A&&i.push(""),c&&i.push(c);}return ["`",f([F,b(F,i)]),F,"`"]}function Mp(e){let t=[],r=!1,n=e.map(s=>s.trim());for(let[s,u]of n.entries())u!==""&&(n[s-1]===""&&r?t.push([F,u]):t.push(u),r=!0);return t.length===0?null:b(F,t)}function Rp({node:e,parent:t}){return Ur({node:e,parent:t},"GraphQL")||t&&(t.type==="TaggedTemplateExpression"&&(t.tag.type==="MemberExpression"&&t.tag.object.name==="graphql"&&t.tag.property.name==="experimental"||t.tag.type==="Identifier"&&(t.tag.name==="gql"||t.tag.name==="graphql"))||t.type==="CallExpression"&&t.callee.type==="Identifier"&&t.callee.name==="graphql")}function Jp(e){if(Rp(e))return vp}var $u=Jp;var ss=0;async function Ku(e,t,r,n,s){let{node:u}=n,i=ss;ss=ss+1>>>0;let a=S=>`PRETTIER_HTML_PLACEHOLDER_${S}_${i}_IN_JS`,p=u.quasis.map((S,g,M)=>g===M.length-1?S.value.cooked:S.value.cooked+a(g)).join(""),o=Xt(n,r),m=new RegExp(a(String.raw`(\d+)`),"gu"),y=0,D=await t(p,{parser:e,__onHtmlRoot(S){y=S.children.length;}}),C=mt(D,S=>{if(typeof S!="string")return S;let g=[],M=S.split(m);for(let R=0;R<M.length;R++){let j=M[R];if(R%2===0){j&&(j=ts(j),s.__embeddedInHtml&&(j=Y(!1,j,/<\/(?=script\b)/giu,String.raw`<\/`)),g.push(j));continue}let I=Number(j);g.push(o[I]);}return g}),c=/^\s/u.test(p)?" ":"",A=/\s$/u.test(p)?" ":"",T=s.htmlWhitespaceSensitivity==="ignore"?F:c&&A?x:null;return T?l(["`",f([T,l(C)]),T,"`"]):st({hug:!1},l(["`",c,y>1?f(l(C)):l(C),A,"`"]))}function qp(e){return Ur(e,"HTML")||e.match(t=>t.type==="TemplateLiteral",(t,r)=>t.type==="TaggedTemplateExpression"&&t.tag.type==="Identifier"&&t.tag.name==="html"&&r==="quasi")}var Wp=Ku.bind(void 0,"html"),Gp=Ku.bind(void 0,"angular");function Up(e){if(qp(e))return Wp;if(Hu(e))return Gp}var Qu=Up;async function Xp(e,t,r){let{node:n}=r,s=Y(!1,n.quasis[0].value.raw,/((?:\\\\)*)\\`/gu,(p,o)=>"\\".repeat(o.length/2)+"`"),u=Yp(s),i=u!=="";i&&(s=Y(!1,s,new RegExp(`^${u}`,"gmu"),""));let a=Gr(await e(s,{parser:"markdown",__inJsTemplate:!0}),!0);return ["`",i?f([E,a]):[Jr,xu(a)],E,"`"]}function Yp(e){let t=e.match(/^([^\S\n]*)\S/mu);return t===null?"":t[1]}function Hp(e){if(Np(e))return Xp}function Np({node:e,parent:t}){return (t==null?void 0:t.type)==="TaggedTemplateExpression"&&e.quasis.length===1&&t.tag.type==="Identifier"&&(t.tag.name==="md"||t.tag.name==="markdown")}var zu=Hp;function Vp(e){let{node:t}=e;if(t.type!=="TemplateLiteral"||$p(t))return;let r;for(let n of [Vu,$u,Qu,zu])if(r=n(e),!!r)return t.quasis.length===1&&t.quasis[0].value.raw.trim()===""?"``":async(...s)=>{let u=await r(...s);return u&&st({embed:!0,...u.label},u)}}function $p({quasis:e}){return e.some(({value:{cooked:t}})=>t===null)}var Zu=Vp;var Kp=/\*\/$/,Qp=/^\/\*\*?/,ni=/^\s*(\/\*\*?(.|\r?\n)*?\*\/)/,zp=/(^|\s+)\/\/([^\n\r]*)/g,ei=/^(\r?\n)+/,Zp=/(?:^|\r?\n) *(@[^\n\r]*?) *\r?\n *(?![^\n\r@]*\/\/[^]*)([^\s@][^\n\r@]+?) *\r?\n/g,ti=/(?:^|\r?\n) *@(\S+) *([^\n\r]*)/g,ec=/(\r?\n|^) *\* ?/g,si=[];function ui(e){let t=e.match(ni);return t?t[0].trimStart():""}function ii(e){let t=e.match(ni),r=t==null?void 0:t[0];return r==null?e:e.slice(r.length)}function ai(e){let t=`
`;e=Y(!1,e.replace(Qp,"").replace(Kp,""),ec,"$1");let r="";for(;r!==e;)r=e,e=Y(!1,e,Zp,`${t}$1 $2${t}`);e=e.replace(ei,"").trimEnd();let n=Object.create(null),s=Y(!1,e,ti,"").replace(ei,"").trimEnd(),u;for(;u=ti.exec(e);){let i=Y(!1,u[2],zp,"");if(typeof n[u[1]]=="string"||Array.isArray(n[u[1]])){let a=n[u[1]];n[u[1]]=[...si,...Array.isArray(a)?a:[a],i];}else n[u[1]]=i;}return {comments:s,pragmas:n}}function oi({comments:e="",pragmas:t={}}){let r=`
`,n="/**",s=" *",u=" */",i=Object.keys(t),a=i.flatMap(o=>ri(o,t[o])).map(o=>`${s} ${o}${r}`).join("");if(!e){if(i.length===0)return "";if(i.length===1&&!Array.isArray(t[i[0]])){let o=t[i[0]];return `${n} ${ri(i[0],o)[0]}${u}`}}let p=e.split(r).map(o=>`${s} ${o}`).join(r)+r;return n+r+(e?p:"")+(e&&i.length>0?s+r:"")+a+u}function ri(e,t){return [...si,...Array.isArray(t)?t:[t]].map(r=>`@${e} ${r}`.trim())}function tc(e){if(!e.startsWith("#!"))return "";let t=e.indexOf(`
`);return t===-1?e:e.slice(0,t)}var pi=tc;function rc(e){let t=pi(e);t&&(e=e.slice(t.length+1));let r=ui(e),{pragmas:n,comments:s}=ai(r);return {shebang:t,text:e,pragmas:n,comments:s}}function ci(e){let{shebang:t,text:r,pragmas:n,comments:s}=rc(e),u=ii(r),i=oi({pragmas:{format:"",...n},comments:s.trimStart()});return (t?`${t}
`:"")+i+(u.startsWith(`
`)?`
`:`

`)+u}function nc(e,t){let{originalText:r,[Symbol.for("comments")]:n,locStart:s,locEnd:u,[Symbol.for("printedComments")]:i}=t,{node:a}=e,p=s(a),o=u(a);for(let m of n)s(m)>=p&&u(m)<=o&&i.add(m);return r.slice(p,o)}var li=nc;function us(e,t){var u,i,a,p,o,m,y,D,C;if(e.isRoot)return !1;let{node:r,key:n,parent:s}=e;if(t.__isInHtmlInterpolation&&!t.bracketSpacing&&ac(r)&&pr(e))return !0;if(sc(r))return !1;if(r.type==="Identifier"){if((u=r.extra)!=null&&u.parenthesized&&/^PRETTIER_HTML_PLACEHOLDER_\d+_\d+_IN_JS$/u.test(r.name)||n==="left"&&(r.name==="async"&&!s.await||r.name==="let")&&s.type==="ForOfStatement")return !0;if(r.name==="let"){let c=(i=e.findAncestor(A=>A.type==="ForOfStatement"))==null?void 0:i.left;if(c&&ie(c,A=>A===r))return !0}if(n==="object"&&r.name==="let"&&s.type==="MemberExpression"&&s.computed&&!s.optional){let c=e.findAncestor(T=>T.type==="ExpressionStatement"||T.type==="ForStatement"||T.type==="ForInStatement"),A=c?c.type==="ExpressionStatement"?c.expression:c.type==="ForStatement"?c.init:c.left:void 0;if(A&&ie(A,T=>T===r))return !0}if(n==="expression")switch(r.name){case"await":case"interface":case"module":case"using":case"yield":case"let":case"component":case"hook":case"type":{let c=e.findAncestor(A=>!Ae(A));if(c!==s&&c.type==="ExpressionStatement")return !0}}return !1}if(r.type==="ObjectExpression"||r.type==="FunctionExpression"||r.type==="ClassExpression"||r.type==="DoExpression"){let c=(a=e.findAncestor(A=>A.type==="ExpressionStatement"))==null?void 0:a.expression;if(c&&ie(c,A=>A===r))return !0}if(r.type==="ObjectExpression"){let c=(p=e.findAncestor(A=>A.type==="ArrowFunctionExpression"))==null?void 0:p.body;if(c&&c.type!=="SequenceExpression"&&c.type!=="AssignmentExpression"&&ie(c,A=>A===r))return !0}switch(s.type){case"ParenthesizedExpression":return !1;case"ClassDeclaration":case"ClassExpression":if(n==="superClass"&&(r.type==="ArrowFunctionExpression"||r.type==="AssignmentExpression"||r.type==="AwaitExpression"||r.type==="BinaryExpression"||r.type==="ConditionalExpression"||r.type==="LogicalExpression"||r.type==="NewExpression"||r.type==="ObjectExpression"||r.type==="SequenceExpression"||r.type==="TaggedTemplateExpression"||r.type==="UnaryExpression"||r.type==="UpdateExpression"||r.type==="YieldExpression"||r.type==="TSNonNullExpression"||r.type==="ClassExpression"&&O(r.decorators)))return !0;break;case"ExportDefaultDeclaration":return mi(e,t)||r.type==="SequenceExpression";case"Decorator":if(n==="expression"&&!pc(r))return !0;break;case"TypeAnnotation":if(e.match(void 0,void 0,(c,A)=>A==="returnType"&&c.type==="ArrowFunctionExpression")&&ic(r))return !0;break;case"BinaryExpression":if(n==="left"&&(s.operator==="in"||s.operator==="instanceof")&&r.type==="UnaryExpression")return !0;break;case"VariableDeclarator":if(n==="init"&&e.match(void 0,void 0,(c,A)=>A==="declarations"&&c.type==="VariableDeclaration",(c,A)=>A==="left"&&c.type==="ForInStatement"))return !0;break}switch(r.type){case"UpdateExpression":if(s.type==="UnaryExpression")return r.prefix&&(r.operator==="++"&&s.operator==="+"||r.operator==="--"&&s.operator==="-");case"UnaryExpression":switch(s.type){case"UnaryExpression":return r.operator===s.operator&&(r.operator==="+"||r.operator==="-");case"BindExpression":return !0;case"MemberExpression":case"OptionalMemberExpression":return n==="object";case"TaggedTemplateExpression":return !0;case"NewExpression":case"CallExpression":case"OptionalCallExpression":return n==="callee";case"BinaryExpression":return n==="left"&&s.operator==="**";case"TSNonNullExpression":return !0;default:return !1}case"BinaryExpression":if(s.type==="UpdateExpression"||r.operator==="in"&&uc(e))return !0;if(r.operator==="|>"&&((o=r.extra)!=null&&o.parenthesized)){let c=e.grandparent;if(c.type==="BinaryExpression"&&c.operator==="|>")return !0}case"TSTypeAssertion":case"TSAsExpression":case"TSSatisfiesExpression":case"AsExpression":case"AsConstExpression":case"SatisfiesExpression":case"LogicalExpression":switch(s.type){case"TSAsExpression":case"TSSatisfiesExpression":case"AsExpression":case"AsConstExpression":case"SatisfiesExpression":return !Ae(r);case"ConditionalExpression":return Ae(r)||ou(r);case"CallExpression":case"NewExpression":case"OptionalCallExpression":return n==="callee";case"ClassExpression":case"ClassDeclaration":return n==="superClass";case"TSTypeAssertion":case"TaggedTemplateExpression":case"UnaryExpression":case"JSXSpreadAttribute":case"SpreadElement":case"BindExpression":case"AwaitExpression":case"TSNonNullExpression":case"UpdateExpression":return !0;case"MemberExpression":case"OptionalMemberExpression":return n==="object";case"AssignmentExpression":case"AssignmentPattern":return n==="left"&&(r.type==="TSTypeAssertion"||Ae(r));case"LogicalExpression":if(r.type==="LogicalExpression")return s.operator!==r.operator;case"BinaryExpression":{let{operator:c,type:A}=r;if(!c&&A!=="TSTypeAssertion")return !0;let T=tr(c),S=s.operator,g=tr(S);return g>T||n==="right"&&g===T||g===T&&!sr(S,c)?!0:g<T&&c==="%"?S==="+"||S==="-":!!Du(S)}default:return !1}case"SequenceExpression":switch(s.type){case"ReturnStatement":return !1;case"ForStatement":return !1;case"ExpressionStatement":return n!=="expression";case"ArrowFunctionExpression":return n!=="body";default:return !0}case"YieldExpression":if(s.type==="AwaitExpression"||s.type==="TSTypeAssertion")return !0;case"AwaitExpression":switch(s.type){case"TaggedTemplateExpression":case"UnaryExpression":case"LogicalExpression":case"SpreadElement":case"TSAsExpression":case"TSSatisfiesExpression":case"TSNonNullExpression":case"AsExpression":case"AsConstExpression":case"SatisfiesExpression":case"BindExpression":return !0;case"MemberExpression":case"OptionalMemberExpression":return n==="object";case"NewExpression":case"CallExpression":case"OptionalCallExpression":return n==="callee";case"ConditionalExpression":return n==="test";case"BinaryExpression":return !(!r.argument&&s.operator==="|>");default:return !1}case"TSFunctionType":if(e.match(c=>c.type==="TSFunctionType",(c,A)=>A==="typeAnnotation"&&c.type==="TSTypeAnnotation",(c,A)=>A==="returnType"&&c.type==="ArrowFunctionExpression"))return !0;case"TSConditionalType":case"TSConstructorType":if(n==="extendsType"&&s.type==="TSConditionalType"){if(r.type==="TSConditionalType")return !0;let{typeAnnotation:c}=r.returnType||r.typeAnnotation;if(c.type==="TSTypePredicate"&&c.typeAnnotation&&(c=c.typeAnnotation.typeAnnotation),c.type==="TSInferType"&&c.typeParameter.constraint)return !0}if(n==="checkType"&&s.type==="TSConditionalType")return !0;case"TSUnionType":case"TSIntersectionType":if((s.type==="TSUnionType"||s.type==="TSIntersectionType")&&s.types.length>1&&(!r.types||r.types.length>1))return !0;case"TSInferType":if(r.type==="TSInferType"){if(s.type==="TSRestType")return !1;if(n==="types"&&(s.type==="TSUnionType"||s.type==="TSIntersectionType")&&r.typeParameter.type==="TSTypeParameter"&&r.typeParameter.constraint)return !0}case"TSTypeOperator":return s.type==="TSArrayType"||s.type==="TSOptionalType"||s.type==="TSRestType"||n==="objectType"&&s.type==="TSIndexedAccessType"||s.type==="TSTypeOperator"||s.type==="TSTypeAnnotation"&&e.grandparent.type.startsWith("TSJSDoc");case"TSTypeQuery":return n==="objectType"&&s.type==="TSIndexedAccessType"||n==="elementType"&&s.type==="TSArrayType";case"TypeOperator":return s.type==="ArrayTypeAnnotation"||s.type==="NullableTypeAnnotation"||n==="objectType"&&(s.type==="IndexedAccessType"||s.type==="OptionalIndexedAccessType")||s.type==="TypeOperator";case"TypeofTypeAnnotation":return n==="objectType"&&(s.type==="IndexedAccessType"||s.type==="OptionalIndexedAccessType")||n==="elementType"&&s.type==="ArrayTypeAnnotation";case"ArrayTypeAnnotation":return s.type==="NullableTypeAnnotation";case"IntersectionTypeAnnotation":case"UnionTypeAnnotation":return s.type==="TypeOperator"||s.type==="ArrayTypeAnnotation"||s.type==="NullableTypeAnnotation"||s.type==="IntersectionTypeAnnotation"||s.type==="UnionTypeAnnotation"||n==="objectType"&&(s.type==="IndexedAccessType"||s.type==="OptionalIndexedAccessType");case"InferTypeAnnotation":case"NullableTypeAnnotation":return s.type==="ArrayTypeAnnotation"||n==="objectType"&&(s.type==="IndexedAccessType"||s.type==="OptionalIndexedAccessType");case"ComponentTypeAnnotation":case"FunctionTypeAnnotation":{if(r.type==="ComponentTypeAnnotation"&&(r.rendersType===null||r.rendersType===void 0))return !1;if(e.match(void 0,(A,T)=>T==="typeAnnotation"&&A.type==="TypeAnnotation",(A,T)=>T==="returnType"&&A.type==="ArrowFunctionExpression")||e.match(void 0,(A,T)=>T==="typeAnnotation"&&A.type==="TypePredicate",(A,T)=>T==="typeAnnotation"&&A.type==="TypeAnnotation",(A,T)=>T==="returnType"&&A.type==="ArrowFunctionExpression"))return !0;let c=s.type==="NullableTypeAnnotation"?e.grandparent:s;return c.type==="UnionTypeAnnotation"||c.type==="IntersectionTypeAnnotation"||c.type==="ArrayTypeAnnotation"||n==="objectType"&&(c.type==="IndexedAccessType"||c.type==="OptionalIndexedAccessType")||n==="checkType"&&s.type==="ConditionalTypeAnnotation"||n==="extendsType"&&s.type==="ConditionalTypeAnnotation"&&((m=r.returnType)==null?void 0:m.type)==="InferTypeAnnotation"&&((y=r.returnType)==null?void 0:y.typeParameter.bound)||c.type==="NullableTypeAnnotation"||s.type==="FunctionTypeParam"&&s.name===null&&z(r).some(A=>{var T;return ((T=A.typeAnnotation)==null?void 0:T.type)==="NullableTypeAnnotation"})}case"ConditionalTypeAnnotation":if(n==="extendsType"&&s.type==="ConditionalTypeAnnotation"&&r.type==="ConditionalTypeAnnotation"||n==="checkType"&&s.type==="ConditionalTypeAnnotation")return !0;case"OptionalIndexedAccessType":return n==="objectType"&&s.type==="IndexedAccessType";case"StringLiteral":case"NumericLiteral":case"Literal":if(typeof r.value=="string"&&s.type==="ExpressionStatement"&&!s.directive){let c=e.grandparent;return c.type==="Program"||c.type==="BlockStatement"}return n==="object"&&s.type==="MemberExpression"&&typeof r.value=="number";case"AssignmentExpression":{let c=e.grandparent;return n==="body"&&s.type==="ArrowFunctionExpression"?!0:n==="key"&&(s.type==="ClassProperty"||s.type==="PropertyDefinition")&&s.computed||(n==="init"||n==="update")&&s.type==="ForStatement"?!1:s.type==="ExpressionStatement"?r.left.type==="ObjectPattern":!(n==="key"&&s.type==="TSPropertySignature"||s.type==="AssignmentExpression"||s.type==="SequenceExpression"&&c.type==="ForStatement"&&(c.init===s||c.update===s)||n==="value"&&s.type==="Property"&&c.type==="ObjectPattern"&&c.properties.includes(s)||s.type==="NGChainedExpression"||n==="node"&&s.type==="JsExpressionRoot")}case"ConditionalExpression":switch(s.type){case"TaggedTemplateExpression":case"UnaryExpression":case"SpreadElement":case"BinaryExpression":case"LogicalExpression":case"NGPipeExpression":case"ExportDefaultDeclaration":case"AwaitExpression":case"JSXSpreadAttribute":case"TSTypeAssertion":case"TypeCastExpression":case"TSAsExpression":case"TSSatisfiesExpression":case"AsExpression":case"AsConstExpression":case"SatisfiesExpression":case"TSNonNullExpression":return !0;case"NewExpression":case"CallExpression":case"OptionalCallExpression":return n==="callee";case"ConditionalExpression":return t.experimentalTernaries?!1:n==="test";case"MemberExpression":case"OptionalMemberExpression":return n==="object";default:return !1}case"FunctionExpression":switch(s.type){case"NewExpression":case"CallExpression":case"OptionalCallExpression":return n==="callee";case"TaggedTemplateExpression":return !0;default:return !1}case"ArrowFunctionExpression":switch(s.type){case"BinaryExpression":return s.operator!=="|>"||((D=r.extra)==null?void 0:D.parenthesized);case"NewExpression":case"CallExpression":case"OptionalCallExpression":return n==="callee";case"MemberExpression":case"OptionalMemberExpression":return n==="object";case"TSAsExpression":case"TSSatisfiesExpression":case"AsExpression":case"AsConstExpression":case"SatisfiesExpression":case"TSNonNullExpression":case"BindExpression":case"TaggedTemplateExpression":case"UnaryExpression":case"LogicalExpression":case"AwaitExpression":case"TSTypeAssertion":return !0;case"ConditionalExpression":return n==="test";default:return !1}case"ClassExpression":switch(s.type){case"NewExpression":return n==="callee";default:return !1}case"OptionalMemberExpression":case"OptionalCallExpression":case"CallExpression":case"MemberExpression":if(oc(e))return !0;case"TaggedTemplateExpression":case"TSNonNullExpression":if(n==="callee"&&(s.type==="BindExpression"||s.type==="NewExpression")){let c=r;for(;c;)switch(c.type){case"CallExpression":case"OptionalCallExpression":return !0;case"MemberExpression":case"OptionalMemberExpression":case"BindExpression":c=c.object;break;case"TaggedTemplateExpression":c=c.tag;break;case"TSNonNullExpression":c=c.expression;break;default:return !1}}return !1;case"BindExpression":return n==="callee"&&(s.type==="BindExpression"||s.type==="NewExpression")||n==="object"&&W(s);case"NGPipeExpression":return !(s.type==="NGRoot"||s.type==="NGMicrosyntaxExpression"||s.type==="ObjectProperty"&&!((C=r.extra)!=null&&C.parenthesized)||X(s)||n==="arguments"&&L(s)||n==="right"&&s.type==="NGPipeExpression"||n==="property"&&s.type==="MemberExpression"||s.type==="AssignmentExpression");case"JSXFragment":case"JSXElement":return n==="callee"||n==="left"&&s.type==="BinaryExpression"&&s.operator==="<"||!X(s)&&s.type!=="ArrowFunctionExpression"&&s.type!=="AssignmentExpression"&&s.type!=="AssignmentPattern"&&s.type!=="BinaryExpression"&&s.type!=="NewExpression"&&s.type!=="ConditionalExpression"&&s.type!=="ExpressionStatement"&&s.type!=="JsExpressionRoot"&&s.type!=="JSXAttribute"&&s.type!=="JSXElement"&&s.type!=="JSXExpressionContainer"&&s.type!=="JSXFragment"&&s.type!=="LogicalExpression"&&!L(s)&&!Ce(s)&&s.type!=="ReturnStatement"&&s.type!=="ThrowStatement"&&s.type!=="TypeCastExpression"&&s.type!=="VariableDeclarator"&&s.type!=="YieldExpression";case"TSInstantiationExpression":return n==="object"&&W(s)}return !1}var sc=v(["BlockStatement","BreakStatement","ComponentDeclaration","ClassBody","ClassDeclaration","ClassMethod","ClassProperty","PropertyDefinition","ClassPrivateProperty","ContinueStatement","DebuggerStatement","DeclareComponent","DeclareClass","DeclareExportAllDeclaration","DeclareExportDeclaration","DeclareFunction","DeclareHook","DeclareInterface","DeclareModule","DeclareModuleExports","DeclareNamespace","DeclareVariable","DeclareEnum","DoWhileStatement","EnumDeclaration","ExportAllDeclaration","ExportDefaultDeclaration","ExportNamedDeclaration","ExpressionStatement","ForInStatement","ForOfStatement","ForStatement","FunctionDeclaration","HookDeclaration","IfStatement","ImportDeclaration","InterfaceDeclaration","LabeledStatement","MethodDefinition","ReturnStatement","SwitchStatement","ThrowStatement","TryStatement","TSDeclareFunction","TSEnumDeclaration","TSImportEqualsDeclaration","TSInterfaceDeclaration","TSModuleDeclaration","TSNamespaceExportDeclaration","TypeAlias","VariableDeclaration","WhileStatement","WithStatement"]);function uc(e){let t=0,{node:r}=e;for(;r;){let n=e.getParentNode(t++);if((n==null?void 0:n.type)==="ForStatement"&&n.init===r)return !0;r=n;}return !1}function ic(e){return rr(e,t=>t.type==="ObjectTypeAnnotation"&&rr(t,r=>r.type==="FunctionTypeAnnotation"))}function ac(e){return se(e)}function pr(e){let{parent:t,key:r}=e;switch(t.type){case"NGPipeExpression":if(r==="arguments"&&e.isLast)return e.callParent(pr);break;case"ObjectProperty":if(r==="value")return e.callParent(()=>e.key==="properties"&&e.isLast);break;case"BinaryExpression":case"LogicalExpression":if(r==="right")return e.callParent(pr);break;case"ConditionalExpression":if(r==="alternate")return e.callParent(pr);break;case"UnaryExpression":if(t.prefix)return e.callParent(pr);break}return !1}function mi(e,t){let{node:r,parent:n}=e;return r.type==="FunctionExpression"||r.type==="ClassExpression"?n.type==="ExportDefaultDeclaration"||!us(e,t):!Rt(r)||n.type!=="ExportDefaultDeclaration"&&us(e,t)?!1:e.call(()=>mi(e,t),...Pr(r))}function oc(e){return !!(e.match(void 0,(t,r)=>r==="expression"&&t.type==="ChainExpression",(t,r)=>r==="tag"&&t.type==="TaggedTemplateExpression")||e.match(t=>t.type==="OptionalCallExpression"||t.type==="OptionalMemberExpression",(t,r)=>r==="tag"&&t.type==="TaggedTemplateExpression")||e.match(t=>t.type==="OptionalCallExpression"||t.type==="OptionalMemberExpression",(t,r)=>r==="expression"&&t.type==="TSNonNullExpression",(t,r)=>r==="tag"&&t.type==="TaggedTemplateExpression")||e.match(void 0,(t,r)=>r==="expression"&&t.type==="ChainExpression",(t,r)=>r==="expression"&&t.type==="TSNonNullExpression",(t,r)=>r==="tag"&&t.type==="TaggedTemplateExpression")||e.match(void 0,(t,r)=>r==="expression"&&t.type==="TSNonNullExpression",(t,r)=>r==="expression"&&t.type==="ChainExpression",(t,r)=>r==="tag"&&t.type==="TaggedTemplateExpression")||e.match(t=>t.type==="OptionalMemberExpression"||t.type==="OptionalCallExpression",(t,r)=>r==="object"&&t.type==="MemberExpression"||r==="callee"&&(t.type==="CallExpression"||t.type==="NewExpression"))||e.match(t=>t.type==="OptionalMemberExpression"||t.type==="OptionalCallExpression",(t,r)=>r==="expression"&&t.type==="TSNonNullExpression",(t,r)=>r==="object"&&t.type==="MemberExpression"||r==="callee"&&t.type==="CallExpression")||e.match(t=>t.type==="CallExpression"||t.type==="MemberExpression",(t,r)=>r==="expression"&&t.type==="ChainExpression")&&(e.match(void 0,void 0,(t,r)=>r==="callee"&&(t.type==="CallExpression"&&!t.optional||t.type==="NewExpression")||r==="object"&&t.type==="MemberExpression"&&!t.optional)||e.match(void 0,void 0,(t,r)=>r==="expression"&&t.type==="TSNonNullExpression",(t,r)=>r==="object"&&t.type==="MemberExpression"||r==="callee"&&t.type==="CallExpression"))||e.match(t=>t.type==="CallExpression"||t.type==="MemberExpression",(t,r)=>r==="expression"&&t.type==="TSNonNullExpression",(t,r)=>r==="expression"&&t.type==="ChainExpression",(t,r)=>r==="object"&&t.type==="MemberExpression"||r==="callee"&&t.type==="CallExpression"))}function is(e){return e.type==="Identifier"?!0:W(e)?!e.computed&&!e.optional&&e.property.type==="Identifier"&&is(e.object):!1}function pc(e){return e.type==="ChainExpression"&&(e=e.expression),is(e)||L(e)&&!e.optional&&is(e.callee)}var Be=us;function cc(e,t){let r=t-1;r=We(e,r,{backwards:!0}),r=Ge(e,r,{backwards:!0}),r=We(e,r,{backwards:!0});let n=Ge(e,r,{backwards:!0});return r!==n}var yi=cc;var lc=()=>!0;function as(e,t){let r=e.node;return r.printed=!0,t.printer.printComment(e,t)}function mc(e,t){var m;let r=e.node,n=[as(e,t)],{printer:s,originalText:u,locStart:i,locEnd:a}=t;if((m=s.isBlockComment)==null?void 0:m.call(s,r)){let y=Z(u,a(r))?Z(u,i(r),{backwards:!0})?F:x:" ";n.push(y);}else n.push(F);let o=Ge(u,We(u,a(r)));return o!==!1&&Z(u,o)&&n.push(F),n}function yc(e,t,r){var o;let n=e.node,s=as(e,t),{printer:u,originalText:i,locStart:a}=t,p=(o=u.isBlockComment)==null?void 0:o.call(u,n);if(r!=null&&r.hasLineSuffix&&!(r!=null&&r.isBlock)||Z(i,a(n),{backwards:!0})){let m=yi(i,a(n));return {doc:Wn([F,m?F:"",s]),isBlock:p,hasLineSuffix:!0}}return !p||r!=null&&r.hasLineSuffix?{doc:[Wn([" ",s]),Ee],isBlock:p,hasLineSuffix:!0}:{doc:[" ",s],isBlock:p,hasLineSuffix:!1}}function J(e,t,r={}){let{node:n}=e;if(!O(n==null?void 0:n.comments))return "";let{indent:s=!1,marker:u,filter:i=lc}=r,a=[];if(e.each(({node:o})=>{o.leading||o.trailing||o.marker!==u||!i(o)||a.push(as(e,t));},"comments"),a.length===0)return "";let p=b(F,a);return s?f([F,p]):p}function os(e,t){let r=e.node;if(!r)return {};let n=t[Symbol.for("printedComments")];if((r.comments||[]).filter(p=>!n.has(p)).length===0)return {leading:"",trailing:""};let u=[],i=[],a;return e.each(()=>{let p=e.node;if(n!=null&&n.has(p))return;let{leading:o,trailing:m}=p;o?u.push(mc(e,t)):m&&(a=yc(e,t,a),i.push(a.doc));},"comments"),{leading:u,trailing:i}}function ye(e,t,r){let{leading:n,trailing:s}=os(e,r);return !n&&!s?t:or(t,u=>[n,u,s])}var ps=class extends Error{name="UnexpectedNodeError";constructor(t,r,n="type"){super(`Unexpected ${r} node ${n}: ${JSON.stringify(t[n])}.`),this.node=t;}},Me=ps;function cs(e){if(typeof e!="string")throw new TypeError("Expected a string");return e.replace(/[|\\{}()[\]^$+*?.]/g,"\\$&").replace(/-/g,"\\x2d")}var Re,ls=class{constructor(t){Ws(this,Re);Gs(this,Re,new Set(t));}getLeadingWhitespaceCount(t){let r=pt(this,Re),n=0;for(let s=0;s<t.length&&r.has(t.charAt(s));s++)n++;return n}getTrailingWhitespaceCount(t){let r=pt(this,Re),n=0;for(let s=t.length-1;s>=0&&r.has(t.charAt(s));s--)n++;return n}getLeadingWhitespace(t){let r=this.getLeadingWhitespaceCount(t);return t.slice(0,r)}getTrailingWhitespace(t){let r=this.getTrailingWhitespaceCount(t);return t.slice(t.length-r)}hasLeadingWhitespace(t){return pt(this,Re).has(t.charAt(0))}hasTrailingWhitespace(t){return pt(this,Re).has(_(!1,t,-1))}trimStart(t){let r=this.getLeadingWhitespaceCount(t);return t.slice(r)}trimEnd(t){let r=this.getTrailingWhitespaceCount(t);return t.slice(0,t.length-r)}trim(t){return this.trimEnd(this.trimStart(t))}split(t,r=!1){let n=`[${cs([...pt(this,Re)].join(""))}]+`,s=new RegExp(r?`(${n})`:n,"u");return t.split(s)}hasWhitespaceCharacter(t){let r=pt(this,Re);return Array.prototype.some.call(t,n=>r.has(n))}hasNonWhitespaceCharacter(t){let r=pt(this,Re);return Array.prototype.some.call(t,n=>!r.has(n))}isWhitespaceOnly(t){let r=pt(this,Re);return Array.prototype.every.call(t,n=>r.has(n))}};Re=new WeakMap;var Di=ls;var Yr=new Di(`
\r	`),ms=e=>e===""||e===x||e===F||e===E;function Dc(e,t,r){var M,R,j,I,U;let{node:n}=e;if(n.type==="JSXElement"&&Pc(n))return [r("openingElement"),r("closingElement")];let s=n.type==="JSXElement"?r("openingElement"):r("openingFragment"),u=n.type==="JSXElement"?r("closingElement"):r("closingFragment");if(n.children.length===1&&n.children[0].type==="JSXExpressionContainer"&&(n.children[0].expression.type==="TemplateLiteral"||n.children[0].expression.type==="TaggedTemplateExpression"))return [s,...e.map(r,"children"),u];n.children=n.children.map(P=>kc(P)?{type:"JSXText",value:" ",raw:" "}:P);let i=n.children.some(H),a=n.children.filter(P=>P.type==="JSXExpressionContainer").length>1,p=n.type==="JSXElement"&&n.openingElement.attributes.length>1,o=re(s)||i||p||a,m=e.parent.rootMarker==="mdx",y=t.singleQuote?"{' '}":'{" "}',D=m?" ":B([y,E]," "),C=((R=(M=n.openingElement)==null?void 0:M.name)==null?void 0:R.name)==="fbt",c=fc(e,t,r,D,C),A=n.children.some(P=>cr(P));for(let P=c.length-2;P>=0;P--){let G=c[P]===""&&c[P+1]==="",ue=c[P]===F&&c[P+1]===""&&c[P+2]===F,Q=(c[P]===E||c[P]===F)&&c[P+1]===""&&c[P+2]===D,gt=c[P]===D&&c[P+1]===""&&(c[P+2]===E||c[P+2]===F),Ft=c[P]===D&&c[P+1]===""&&c[P+2]===D,w=c[P]===E&&c[P+1]===""&&c[P+2]===F||c[P]===F&&c[P+1]===""&&c[P+2]===E;ue&&A||G||Q||Ft||w?c.splice(P,2):gt&&c.splice(P+1,2);}for(;c.length>0&&ms(_(!1,c,-1));)c.pop();for(;c.length>1&&ms(c[0])&&ms(c[1]);)c.shift(),c.shift();let T=[];for(let[P,G]of c.entries()){if(G===D){if(P===1&&c[P-1]===""){if(c.length===2){T.push(y);continue}T.push([y,F]);continue}else if(P===c.length-1){T.push(y);continue}else if(c[P-1]===""&&c[P-2]===F){T.push(y);continue}}T.push(G),re(G)&&(o=!0);}let S=A?Rr(T):l(T,{shouldBreak:!0});if(((j=t.cursorNode)==null?void 0:j.type)==="JSXText"&&n.children.includes(t.cursorNode)?S=[ir,S,ir]:((I=t.nodeBeforeCursor)==null?void 0:I.type)==="JSXText"&&n.children.includes(t.nodeBeforeCursor)?S=[ir,S]:((U=t.nodeAfterCursor)==null?void 0:U.type)==="JSXText"&&n.children.includes(t.nodeAfterCursor)&&(S=[S,ir]),m)return S;let g=l([s,f([F,S]),F,u]);return o?g:Ke([l([s,...c,u]),g])}function fc(e,t,r,n,s){let u=[];return e.each(({node:i,next:a})=>{if(i.type==="JSXText"){let p=fe(i);if(cr(i)){let o=Yr.split(p,!0);o[0]===""&&(u.push(""),o.shift(),/\n/u.test(o[0])?u.push(Ei(s,o[1],i,a)):u.push(n),o.shift());let m;if(_(!1,o,-1)===""&&(o.pop(),m=o.pop()),o.length===0)return;for(let[y,D]of o.entries())y%2===1?u.push(x):u.push(D);m!==void 0?/\n/u.test(m)?u.push(Ei(s,_(!1,u,-1),i,a)):u.push(n):u.push(fi(s,_(!1,u,-1),i,a));}else /\n/u.test(p)?p.match(/\n/gu).length>1&&u.push("",F):u.push("",n);}else {let p=r();if(u.push(p),a&&cr(a)){let m=Yr.trim(fe(a)),[y]=Yr.split(m);u.push(fi(s,y,i,a));}else u.push(F);}},"children"),u}function fi(e,t,r,n){return e?"":r.type==="JSXElement"&&!r.closingElement||(n==null?void 0:n.type)==="JSXElement"&&!n.closingElement?t.length===1?E:F:E}function Ei(e,t,r,n){return e?F:t.length===1?r.type==="JSXElement"&&!r.closingElement||(n==null?void 0:n.type)==="JSXElement"&&!n.closingElement?F:E:F}var Ec=new Set(["ArrayExpression","TupleExpression","JSXAttribute","JSXElement","JSXExpressionContainer","JSXFragment","ExpressionStatement","CallExpression","OptionalCallExpression","ConditionalExpression","JsExpressionRoot"]);function Fc(e,t,r){let{parent:n}=e;if(Ec.has(n.type))return t;let s=e.match(void 0,i=>i.type==="ArrowFunctionExpression",L,i=>i.type==="JSXExpressionContainer"),u=Be(e,r);return l([u?"":B("("),f([E,t]),E,u?"":B(")")],{shouldBreak:s})}function Cc(e,t,r){let{node:n}=e,s=[];if(s.push(r("name")),n.value){let u;if(te(n.value)){let i=fe(n.value),a=Y(!1,Y(!1,i.slice(1,-1),"&apos;","'"),"&quot;",'"'),p=xr(a,t.jsxSingleQuote);a=p==='"'?Y(!1,a,'"',"&quot;"):Y(!1,a,"'","&apos;"),u=e.call(()=>ye(e,Ie(p+a+p),t),"value");}else u=r("value");s.push("=",u);}return s}function Ac(e,t,r){let{node:n}=e,s=(u,i)=>u.type==="JSXEmptyExpression"||!d(u)&&(X(u)||se(u)||u.type==="ArrowFunctionExpression"||u.type==="AwaitExpression"&&(s(u.argument,u)||u.argument.type==="JSXElement")||L(u)||u.type==="ChainExpression"&&L(u.expression)||u.type==="FunctionExpression"||u.type==="TemplateLiteral"||u.type==="TaggedTemplateExpression"||u.type==="DoExpression"||H(i)&&(u.type==="ConditionalExpression"||De(u)));return s(n.expression,e.parent)?l(["{",r("expression"),ke,"}"]):l(["{",f([E,r("expression")]),E,ke,"}"])}function Tc(e,t,r){var a,p;let{node:n}=e,s=d(n.name)||d(n.typeParameters)||d(n.typeArguments);if(n.selfClosing&&n.attributes.length===0&&!s)return ["<",r("name"),n.typeArguments?r("typeArguments"):r("typeParameters")," />"];if(((a=n.attributes)==null?void 0:a.length)===1&&te(n.attributes[0].value)&&!n.attributes[0].value.value.includes(`
`)&&!s&&!d(n.attributes[0]))return l(["<",r("name"),n.typeArguments?r("typeArguments"):r("typeParameters")," ",...e.map(r,"attributes"),n.selfClosing?" />":">"]);let u=(p=n.attributes)==null?void 0:p.some(o=>te(o.value)&&o.value.value.includes(`
`)),i=t.singleAttributePerLine&&n.attributes.length>1?F:x;return l(["<",r("name"),n.typeArguments?r("typeArguments"):r("typeParameters"),f(e.map(()=>[i,r()],"attributes")),...dc(n,t,s)],{shouldBreak:u})}function dc(e,t,r){return e.selfClosing?[x,"/>"]:xc(e,t,r)?[">"]:[E,">"]}function xc(e,t,r){let n=e.attributes.length>0&&d(_(!1,e.attributes,-1),h.Trailing);return e.attributes.length===0&&!r||(t.bracketSameLine||t.jsxBracketSameLine)&&(!r||e.attributes.length>0)&&!n}function hc(e,t,r){let{node:n}=e,s=[];s.push("</");let u=r("name");return d(n.name,h.Leading|h.Line)?s.push(f([F,u]),F):d(n.name,h.Leading|h.Block)?s.push(" ",u):s.push(u),s.push(">"),s}function gc(e,t){let{node:r}=e,n=d(r),s=d(r,h.Line),u=r.type==="JSXOpeningFragment";return [u?"<":"</",f([s?F:n&&!u?" ":"",J(e,t)]),s?F:"",">"]}function Sc(e,t,r){let n=ye(e,Dc(e,t,r),t);return Fc(e,n,t)}function Bc(e,t){let{node:r}=e,n=d(r,h.Line);return [J(e,t,{indent:n}),n?F:""]}function bc(e,t,r){let{node:n}=e;return ["{",e.call(({node:s})=>{let u=["...",r()];return !d(s)||!Kn(e)?u:[f([E,ye(e,u,t)]),E]},n.type==="JSXSpreadAttribute"?"argument":"expression"),"}"]}function Fi(e,t,r){let{node:n}=e;if(n.type.startsWith("JSX"))switch(n.type){case"JSXAttribute":return Cc(e,t,r);case"JSXIdentifier":return n.name;case"JSXNamespacedName":return b(":",[r("namespace"),r("name")]);case"JSXMemberExpression":return b(".",[r("object"),r("property")]);case"JSXSpreadAttribute":case"JSXSpreadChild":return bc(e,t,r);case"JSXExpressionContainer":return Ac(e,t,r);case"JSXFragment":case"JSXElement":return Sc(e,t,r);case"JSXOpeningElement":return Tc(e,t,r);case"JSXClosingElement":return hc(e,t,r);case"JSXOpeningFragment":case"JSXClosingFragment":return gc(e,t);case"JSXEmptyExpression":return Bc(e,t);case"JSXText":throw new Error("JSXText should be handled by JSXElement");default:throw new Me(n,"JSX")}}function Pc(e){if(e.children.length===0)return !0;if(e.children.length>1)return !1;let t=e.children[0];return t.type==="JSXText"&&!cr(t)}function cr(e){return e.type==="JSXText"&&(Yr.hasNonWhitespaceCharacter(fe(e))||!/\n/u.test(fe(e)))}function kc(e){return e.type==="JSXExpressionContainer"&&te(e.expression)&&e.expression.value===" "&&!d(e.expression)}function Ci(e){let{node:t,parent:r}=e;if(!H(t)||!H(r))return !1;let{index:n,siblings:s}=e,u;for(let i=n;i>0;i--){let a=s[i-1];if(!(a.type==="JSXText"&&!cr(a))){u=a;break}}return (u==null?void 0:u.type)==="JSXExpressionContainer"&&u.expression.type==="JSXEmptyExpression"&&kt(u.expression)}function Ic(e){return kt(e.node)||Ci(e)}var Hr=Ic;var Lc=0;function Nr(e,t,r){var R;let{node:n,parent:s,grandparent:u,key:i}=e,a=i!=="body"&&(s.type==="IfStatement"||s.type==="WhileStatement"||s.type==="SwitchStatement"||s.type==="DoWhileStatement"),p=n.operator==="|>"&&((R=e.root.extra)==null?void 0:R.__isUsingHackPipeline),o=ys(e,r,t,!1,a);if(a)return o;if(p)return l(o);if(L(s)&&s.callee===n||s.type==="UnaryExpression"||W(s)&&!s.computed)return l([f([E,...o]),E]);let m=s.type==="ReturnStatement"||s.type==="ThrowStatement"||s.type==="JSXExpressionContainer"&&u.type==="JSXAttribute"||n.operator!=="|"&&s.type==="JsExpressionRoot"||n.type!=="NGPipeExpression"&&(s.type==="NGRoot"&&t.parser==="__ng_binding"||s.type==="NGMicrosyntaxExpression"&&u.type==="NGMicrosyntax"&&u.body.length===1)||n===s.body&&s.type==="ArrowFunctionExpression"||n!==s.body&&s.type==="ForStatement"||s.type==="ConditionalExpression"&&u.type!=="ReturnStatement"&&u.type!=="ThrowStatement"&&!L(u)||s.type==="TemplateLiteral",y=s.type==="AssignmentExpression"||s.type==="VariableDeclarator"||s.type==="ClassProperty"||s.type==="PropertyDefinition"||s.type==="TSAbstractPropertyDefinition"||s.type==="ClassPrivateProperty"||Ce(s),D=De(n.left)&&sr(n.operator,n.left.operator);if(m||Yt(n)&&!D||!Yt(n)&&y)return l(o);if(o.length===0)return "";let C=H(n.right),c=o.findIndex(j=>typeof j!="string"&&!Array.isArray(j)&&j.type===le),A=o.slice(0,c===-1?1:c+1),T=o.slice(A.length,C?-1:void 0),S=Symbol("logicalChain-"+ ++Lc),g=l([...A,f(T)],{id:S});if(!C)return g;let M=_(!1,o,-1);return l([g,dt(M,{groupId:S})])}function ys(e,t,r,n,s){var A;let{node:u}=e;if(!De(u))return [l(t())];let i=[];sr(u.operator,u.left.operator)?i=e.call(T=>ys(T,t,r,!0,s),"left"):i.push(l(t("left")));let a=Yt(u),p=(u.operator==="|>"||u.type==="NGPipeExpression"||wc(e,r))&&!Oe(r.originalText,u.right),o=u.type==="NGPipeExpression"?"|":u.operator,m=u.type==="NGPipeExpression"&&u.arguments.length>0?l(f([E,": ",b([x,": "],e.map(()=>he(2,l(t())),"arguments"))])):"",y;if(a)y=[o," ",t("right"),m];else {let S=o==="|>"&&((A=e.root.extra)==null?void 0:A.__isUsingHackPipeline)?e.call(g=>ys(g,t,r,!0,s),"right"):t("right");y=[p?x:"",o,p?" ":x,S,m];}let{parent:D}=e,C=d(u.left,h.Trailing|h.Line),c=C||!(s&&u.type==="LogicalExpression")&&D.type!==u.type&&u.left.type!==u.type&&u.right.type!==u.type;if(i.push(p?"":" ",c?l(y,{shouldBreak:C}):y),n&&d(u)){let T=Gt(ye(e,i,r));return T.type===Pe?T.parts:Array.isArray(T)?T:[T]}return i}function Yt(e){return e.type!=="LogicalExpression"?!1:!!(se(e.right)&&e.right.properties.length>0||X(e.right)&&e.right.elements.length>0||H(e.right))}var Ai=e=>e.type==="BinaryExpression"&&e.operator==="|";function wc(e,t){return (t.parser==="__vue_expression"||t.parser==="__vue_ts_expression")&&Ai(e.node)&&!e.hasAncestor(r=>!Ai(r)&&r.type!=="JsExpressionRoot")}function di(e,t,r){let{node:n}=e;if(n.type.startsWith("NG"))switch(n.type){case"NGRoot":return [r("node"),d(n.node)?" //"+ct(n.node)[0].value.trimEnd():""];case"NGPipeExpression":return Nr(e,t,r);case"NGChainedExpression":return l(b([";",x],e.map(()=>_c(e)?r():["(",r(),")"],"expressions")));case"NGEmptyExpression":return "";case"NGMicrosyntax":return e.map(()=>[e.isFirst?"":Ti(e)?" ":[";",x],r()],"body");case"NGMicrosyntaxKey":return /^[$_a-z][\w$]*(?:-[$_a-z][\w$])*$/iu.test(n.name)?n.name:JSON.stringify(n.name);case"NGMicrosyntaxExpression":return [r("expression"),n.alias===null?"":[" as ",r("alias")]];case"NGMicrosyntaxKeyedExpression":{let{index:s,parent:u}=e,i=Ti(e)||(s===1&&(n.key.name==="then"||n.key.name==="else"||n.key.name==="as")||(s===2||s===3)&&(n.key.name==="else"&&u.body[s-1].type==="NGMicrosyntaxKeyedExpression"&&u.body[s-1].key.name==="then"||n.key.name==="track"))&&u.body[0].type==="NGMicrosyntaxExpression";return [r("key"),i?" ":": ",r("expression")]}case"NGMicrosyntaxLet":return ["let ",r("key"),n.value===null?"":[" = ",r("value")]];case"NGMicrosyntaxAs":return [r("key")," as ",r("alias")];default:throw new Me(n,"Angular")}}function Ti({node:e,index:t}){return e.type==="NGMicrosyntaxKeyedExpression"&&e.key.name==="of"&&t===1}var Oc=v(["CallExpression","OptionalCallExpression","AssignmentExpression"]);function _c({node:e}){return rr(e,Oc)}function Ds(e,t,r){let{node:n}=e;return l([b(x,e.map(r,"decorators")),gi(n,t)?F:x])}function xi(e,t,r){return Si(e.node)?[b(F,e.map(r,"declaration","decorators")),F]:""}function hi(e,t,r){let{node:n,parent:s}=e,{decorators:u}=n;if(!O(u)||Si(s)||Hr(e))return "";let i=n.type==="ClassExpression"||n.type==="ClassDeclaration"||gi(n,t);return [e.key==="declaration"&&au(s)?F:i?Ee:"",b(x,e.map(r,"decorators")),x]}function gi(e,t){return e.decorators.some(r=>Z(t.originalText,k(r)))}function Si(e){var r;if(e.type!=="ExportDefaultDeclaration"&&e.type!=="ExportNamedDeclaration"&&e.type!=="DeclareExportDeclaration")return !1;let t=(r=e.declaration)==null?void 0:r.decorators;return O(t)&&Bt(e,t[0])}var yt=class extends Error{name="ArgExpansionBailout"};function jc(e,t,r){let{node:n}=e,s=oe(n);if(s.length===0)return ["(",J(e,t),")"];let u=s.length-1;if(Rc(s)){let y=["("];return qt(e,(D,C)=>{y.push(r()),C!==u&&y.push(", ");}),y.push(")"),y}let i=!1,a=[];qt(e,({node:y},D)=>{let C=r();D===u||(pe(y,t)?(i=!0,C=[C,",",F,F]):C=[C,",",x]),a.push(C);});let p=!t.parser.startsWith("__ng_")&&n.type!=="ImportExpression"&&ae(t,"all")?",":"";function o(){return l(["(",f([x,...a]),p,x,")"],{shouldBreak:!0})}if(i||e.parent.type!=="Decorator"&&mu(s))return o();if(Mc(s)){let y=a.slice(1);if(y.some(re))return o();let D;try{D=r(Rn(n,0),{expandFirstArg:!0});}catch(C){if(C instanceof yt)return o();throw C}return re(D)?[Ee,Ke([["(",l(D,{shouldBreak:!0}),", ",...y,")"],o()])]:Ke([["(",D,", ",...y,")"],["(",l(D,{shouldBreak:!0}),", ",...y,")"],o()])}if(vc(s,a,t)){let y=a.slice(0,-1);if(y.some(re))return o();let D;try{D=r(Rn(n,-1),{expandLastArg:!0});}catch(C){if(C instanceof yt)return o();throw C}return re(D)?[Ee,Ke([["(",...y,l(D,{shouldBreak:!0}),")"],o()])]:Ke([["(",...y,D,")"],["(",...y,l(D,{shouldBreak:!0}),")"],o()])}let m=["(",f([E,...a]),B(p),E,")"];return Or(e)?m:l(m,{shouldBreak:a.some(re)||i})}function lr(e,t=!1){return se(e)&&(e.properties.length>0||d(e))||X(e)&&(e.elements.length>0||d(e))||e.type==="TSTypeAssertion"&&lr(e.expression)||Ae(e)&&lr(e.expression)||e.type==="FunctionExpression"||e.type==="ArrowFunctionExpression"&&(!e.returnType||!e.returnType.typeAnnotation||e.returnType.typeAnnotation.type!=="TSTypeReference"||Jc(e.body))&&(e.body.type==="BlockStatement"||e.body.type==="ArrowFunctionExpression"&&lr(e.body,!0)||se(e.body)||X(e.body)||!t&&(L(e.body)||e.body.type==="ConditionalExpression")||H(e.body))||e.type==="DoExpression"||e.type==="ModuleExpression"}function vc(e,t,r){var u,i;let n=_(!1,e,-1);if(e.length===1){let a=_(!1,t,-1);if((u=a.label)!=null&&u.embed&&((i=a.label)==null?void 0:i.hug)!==!1)return !0}let s=_(!1,e,-2);return !d(n,h.Leading)&&!d(n,h.Trailing)&&lr(n)&&(!s||s.type!==n.type)&&(e.length!==2||s.type!=="ArrowFunctionExpression"||!X(n))&&!(e.length>1&&fs(n,r))}function Mc(e){if(e.length!==2)return !1;let[t,r]=e;return t.type==="ModuleExpression"&&qc(r)?!0:!d(t)&&(t.type==="FunctionExpression"||t.type==="ArrowFunctionExpression"&&t.body.type==="BlockStatement")&&r.type!=="FunctionExpression"&&r.type!=="ArrowFunctionExpression"&&r.type!=="ConditionalExpression"&&bi(r)&&!lr(r)}function bi(e){if(e.type==="ParenthesizedExpression")return bi(e.expression);if(Ae(e)||e.type==="TypeCastExpression"){let{typeAnnotation:t}=e;if(t.type==="TypeAnnotation"&&(t=t.typeAnnotation),t.type==="TSArrayType"&&(t=t.elementType,t.type==="TSArrayType"&&(t=t.elementType)),t.type==="GenericTypeAnnotation"||t.type==="TSTypeReference"){let r=t.typeArguments??t.typeParameters;(r==null?void 0:r.params.length)===1&&(t=r.params[0]);}return Jt(t)&&be(e.expression,1)}return lt(e)&&oe(e).length>1?!1:De(e)?be(e.left,1)&&be(e.right,1):vn(e)||be(e)}function Rc(e){return e.length===2?Bi(e,0):e.length===3?e[0].type==="Identifier"&&Bi(e,1):!1}function Bi(e,t){let r=e[t],n=e[t+1];return r.type==="ArrowFunctionExpression"&&z(r).length===0&&r.body.type==="BlockStatement"&&n.type==="ArrayExpression"&&!e.some(s=>d(s))}function Jc(e){return e.type==="BlockStatement"&&(e.body.some(t=>t.type!=="EmptyStatement")||d(e,h.Dangling))}function qc(e){return e.type==="ObjectExpression"&&e.properties.length===1&&Ce(e.properties[0])&&e.properties[0].key.type==="Identifier"&&e.properties[0].key.name==="type"&&te(e.properties[0].value)&&e.properties[0].value.value==="module"}var mr=jc;var Wc=e=>((e.type==="ChainExpression"||e.type==="TSNonNullExpression")&&(e=e.expression),L(e)&&oe(e).length>0);function Pi(e,t,r){var o;let n=r("object"),s=Es(e,t,r),{node:u}=e,i=e.findAncestor(m=>!(W(m)||m.type==="TSNonNullExpression")),a=e.findAncestor(m=>!(m.type==="ChainExpression"||m.type==="TSNonNullExpression")),p=i&&(i.type==="NewExpression"||i.type==="BindExpression"||i.type==="AssignmentExpression"&&i.left.type!=="Identifier")||u.computed||u.object.type==="Identifier"&&u.property.type==="Identifier"&&!W(a)||(a.type==="AssignmentExpression"||a.type==="VariableDeclarator")&&(Wc(u.object)||((o=n.label)==null?void 0:o.memberChain));return st(n.label,[n,p?s:l(f([E,s]))])}function Es(e,t,r){let n=r("property"),{node:s}=e,u=$(e);return s.computed?!s.property||Fe(s.property)?[u,"[",n,"]"]:l([u,"[",f([E,n]),E,"]"]):[u,".",n]}function ki(e,t,r){if(e.node.type==="ChainExpression")return e.call(()=>ki(e,t,r),"expression");let{parent:n}=e,s=!n||n.type==="ExpressionStatement",u=[];function i(w){let{originalText:ne}=t,de=ut(ne,k(w));return ne.charAt(de)===")"?de!==!1&&jt(ne,de+1):pe(w,t)}function a(){let{node:w}=e;if(w.type==="ChainExpression")return e.call(a,"expression");if(L(w)&&(At(w.callee)||L(w.callee))){let ne=i(w);u.unshift({node:w,hasTrailingEmptyLine:ne,printed:[ye(e,[$(e),Qe(e,t,r),mr(e,t,r)],t),ne?F:""]}),e.call(a,"callee");}else At(w)?(u.unshift({node:w,needsParens:Be(e,t),printed:ye(e,W(w)?Es(e,t,r):Vr(e,t,r),t)}),e.call(a,"object")):w.type==="TSNonNullExpression"?(u.unshift({node:w,printed:ye(e,"!",t)}),e.call(a,"expression")):u.unshift({node:w,printed:r()});}let{node:p}=e;u.unshift({node:p,printed:[$(e),Qe(e,t,r),mr(e,t,r)]}),p.callee&&e.call(a,"callee");let o=[],m=[u[0]],y=1;for(;y<u.length&&(u[y].node.type==="TSNonNullExpression"||L(u[y].node)||W(u[y].node)&&u[y].node.computed&&Fe(u[y].node.property));++y)m.push(u[y]);if(!L(u[0].node))for(;y+1<u.length&&(At(u[y].node)&&At(u[y+1].node));++y)m.push(u[y]);o.push(m),m=[];let D=!1;for(;y<u.length;++y){if(D&&At(u[y].node)){if(u[y].node.computed&&Fe(u[y].node.property)){m.push(u[y]);continue}o.push(m),m=[],D=!1;}(L(u[y].node)||u[y].node.type==="ImportExpression")&&(D=!0),m.push(u[y]),d(u[y].node,h.Trailing)&&(o.push(m),m=[],D=!1);}m.length>0&&o.push(m);function C(w){return /^[A-Z]|^[$_]+$/u.test(w)}function c(w){return w.length<=t.tabWidth}function A(w){var ot;let ne=(ot=w[1][0])==null?void 0:ot.node.computed;if(w[0].length===1){let St=w[0][0].node;return St.type==="ThisExpression"||St.type==="Identifier"&&(C(St.name)||s&&c(St.name)||ne)}let de=_(!1,w[0],-1).node;return W(de)&&de.property.type==="Identifier"&&(C(de.property.name)||ne)}let T=o.length>=2&&!d(o[1][0].node)&&A(o);function S(w){let ne=w.map(de=>de.printed);return w.length>0&&_(!1,w,-1).needsParens?["(",...ne,")"]:ne}function g(w){return w.length===0?"":f([F,b(F,w.map(S))])}let M=o.map(S),R=M,j=T?3:2,I=o.flat(),U=I.slice(1,-1).some(w=>d(w.node,h.Leading))||I.slice(0,-1).some(w=>d(w.node,h.Trailing))||o[j]&&d(o[j][0].node,h.Leading);if(o.length<=j&&!U&&!o.some(w=>_(!1,w,-1).hasTrailingEmptyLine))return Or(e)?R:l(R);let P=_(!1,o[T?1:0],-1).node,G=!L(P)&&i(P),ue=[S(o[0]),T?o.slice(1,2).map(S):"",G?F:"",g(o.slice(T?2:1))],Q=u.map(({node:w})=>w).filter(L);function gt(){let w=_(!1,_(!1,o,-1),-1).node,ne=_(!1,M,-1);return L(w)&&re(ne)&&Q.slice(0,-1).some(de=>de.arguments.some(Mt))}let Ft;return U||Q.length>2&&Q.some(w=>!w.arguments.every(ne=>be(ne)))||M.slice(0,-1).some(re)||gt()?Ft=l(ue):Ft=[re(R)||G?Ee:"",Ke([R,ue])],st({memberChain:!0},Ft)}var Ii=ki;function $r(e,t,r){var m;let{node:n}=e,s=n.type==="NewExpression",u=n.type==="ImportExpression",i=$(e),a=oe(n),p=a.length===1&&Lr(a[0],t.originalText);if(p||Gc(e)||Pt(n,e.parent)){let y=[];if(qt(e,()=>{y.push(r());}),!(p&&((m=y[0].label)!=null&&m.embed)))return [s?"new ":"",Li(e,r),i,Qe(e,t,r),"(",b(", ",y),")"]}if(!u&&!s&&At(n.callee)&&!e.call(y=>Be(y,t),"callee",...n.callee.type==="ChainExpression"?["expression"]:[]))return Ii(e,t,r);let o=[s?"new ":"",Li(e,r),i,Qe(e,t,r),mr(e,t,r)];return u||L(n.callee)?l(o):o}function Li(e,t){let{node:r}=e;return r.type==="ImportExpression"?`import${r.phase?`.${r.phase}`:""}`:t("callee")}function Gc(e){let{node:t}=e;if(t.type!=="CallExpression"||t.optional||t.callee.type!=="Identifier")return !1;let r=oe(t);return t.callee.name==="require"?r.length===1&&te(r[0])||r.length>1:t.callee.name==="define"&&e.parent.type==="ExpressionStatement"?r.length===1||r.length===2&&r[0].type==="ArrayExpression"||r.length===3&&te(r[0])&&r[1].type==="ArrayExpression":!1}function xt(e,t,r,n,s,u){let i=Uc(e,t,r,n,u),a=u?r(u,{assignmentLayout:i}):"";switch(i){case"break-after-operator":return l([l(n),s,l(f([x,a]))]);case"never-break-after-operator":return l([l(n),s," ",a]);case"fluid":{let p=Symbol("assignment");return l([l(n),s,l(f(x),{id:p}),ke,dt(a,{groupId:p})])}case"break-lhs":return l([n,s," ",l(a)]);case"chain":return [l(n),s,x,a];case"chain-tail":return [l(n),s,f([x,a])];case"chain-tail-arrow-chain":return [l(n),s,a];case"only-left":return n}}function Oi(e,t,r){let{node:n}=e;return xt(e,t,r,r("left"),[" ",n.operator],"right")}function _i(e,t,r){return xt(e,t,r,r("id")," =","init")}function Uc(e,t,r,n,s){let{node:u}=e,i=u[s];if(!i)return "only-left";let a=!Kr(i);if(e.match(Kr,ji,D=>!a||D.type!=="ExpressionStatement"&&D.type!=="VariableDeclaration"))return a?i.type==="ArrowFunctionExpression"&&i.body.type==="ArrowFunctionExpression"?"chain-tail-arrow-chain":"chain-tail":"chain";if(!a&&Kr(i.right)||Oe(t.originalText,i))return "break-after-operator";if(u.type==="ImportAttribute"||i.type==="CallExpression"&&i.callee.name==="require"||t.parser==="json5"||t.parser==="jsonc"||t.parser==="json")return "never-break-after-operator";let m=bu(n);if(Yc(u)||$c(u)||Fs(u)&&m)return "break-lhs";let y=Qc(u,n,t);return e.call(()=>Xc(e,t,r,y),s)?"break-after-operator":Hc(u)?"break-lhs":!m&&(y||i.type==="TemplateLiteral"||i.type==="TaggedTemplateExpression"||i.type==="BooleanLiteral"||Fe(i)||i.type==="ClassExpression")?"never-break-after-operator":"fluid"}function Xc(e,t,r,n){let s=e.node;if(De(s)&&!Yt(s))return !0;switch(s.type){case"StringLiteralTypeAnnotation":case"SequenceExpression":return !0;case"TSConditionalType":case"ConditionalTypeAnnotation":if(!t.experimentalTernaries&&!el(s))break;return !0;case"ConditionalExpression":{if(!t.experimentalTernaries){let{test:o}=s;return De(o)&&!Yt(o)}let{consequent:a,alternate:p}=s;return a.type==="ConditionalExpression"||p.type==="ConditionalExpression"}case"ClassExpression":return O(s.decorators)}if(n)return !1;let u=s,i=[];for(;;)if(u.type==="UnaryExpression"||u.type==="AwaitExpression"||u.type==="YieldExpression"&&u.argument!==null)u=u.argument,i.push("argument");else if(u.type==="TSNonNullExpression")u=u.expression,i.push("expression");else break;return !!(te(u)||e.call(()=>vi(e,t,r),...i))}function Yc(e){if(ji(e)){let t=e.left||e.id;return t.type==="ObjectPattern"&&t.properties.length>2&&t.properties.some(r=>{var n;return Ce(r)&&(!r.shorthand||((n=r.value)==null?void 0:n.type)==="AssignmentPattern")})}return !1}function Kr(e){return e.type==="AssignmentExpression"}function ji(e){return Kr(e)||e.type==="VariableDeclarator"}function Hc(e){let t=Vc(e);if(O(t)){let r=e.type==="TSTypeAliasDeclaration"?"constraint":"bound";if(t.length>1&&t.some(n=>n[r]||n.default))return !0}return !1}var Nc=v(["TSTypeAliasDeclaration","TypeAlias"]);function Vc(e){var t;if(Nc(e))return (t=e.typeParameters)==null?void 0:t.params}function $c(e){if(e.type!=="VariableDeclarator")return !1;let{typeAnnotation:t}=e.id;if(!t||!t.typeAnnotation)return !1;let r=wi(t.typeAnnotation);return O(r)&&r.length>1&&r.some(n=>O(wi(n))||n.type==="TSConditionalType")}function Fs(e){var t;return e.type==="VariableDeclarator"&&((t=e.init)==null?void 0:t.type)==="ArrowFunctionExpression"}var Kc=v(["TSTypeReference","GenericTypeAnnotation"]);function wi(e){var t;if(Kc(e))return (t=e.typeArguments??e.typeParameters)==null?void 0:t.params}function vi(e,t,r,n=!1){var i;let{node:s}=e,u=()=>vi(e,t,r,!0);if(s.type==="ChainExpression"||s.type==="TSNonNullExpression")return e.call(u,"expression");if(L(s)){if((i=$r(e,t,r).label)!=null&&i.memberChain)return !1;let p=oe(s);return !(p.length===0||p.length===1&&nr(p[0],t))||zc(s,r)?!1:e.call(u,"callee")}return W(s)?e.call(u,"object"):n&&(s.type==="Identifier"||s.type==="ThisExpression")}function Qc(e,t,r){return Ce(e)?(t=Gt(t),typeof t=="string"&&ze(t)<r.tabWidth+3):!1}function zc(e,t){let r=Zc(e);if(O(r)){if(r.length>1)return !0;if(r.length===1){let s=r[0];if(Ue(s)||_r(s)||s.type==="TSTypeLiteral"||s.type==="ObjectTypeAnnotation")return !0}let n=e.typeParameters?"typeParameters":"typeArguments";if(re(t(n)))return !0}return !1}function Zc(e){var t;return (t=e.typeParameters??e.typeArguments)==null?void 0:t.params}function el(e){function t(r){switch(r.type){case"FunctionTypeAnnotation":case"GenericTypeAnnotation":case"TSFunctionType":return !!r.typeParameters;case"TSTypeReference":return !!(r.typeArguments??r.typeParameters);default:return !1}}return t(e.checkType)||t(e.extendsType)}function Je(e,t,r,n,s){let u=e.node,i=z(u),a=s?Qe(e,r,t):"";if(i.length===0)return [a,"(",J(e,r,{filter:c=>ge(r.originalText,k(c))===")"}),")"];let{parent:p}=e,o=Pt(p),m=Cs(u),y=[];if(Eu(e,(c,A)=>{let T=A===i.length-1;T&&u.rest&&y.push("..."),y.push(t()),!T&&(y.push(","),o||m?y.push(" "):pe(i[A],r)?y.push(F,F):y.push(x));}),n&&!rl(e)){if(re(a)||re(y))throw new yt;return l([ar(a),"(",ar(y),")"])}let D=i.every(c=>!O(c.decorators));return m&&D?[a,"(",...y,")"]:o?[a,"(",...y,")"]:(Ir(p)||pu(p)||p.type==="TypeAlias"||p.type==="UnionTypeAnnotation"||p.type==="IntersectionTypeAnnotation"||p.type==="FunctionTypeAnnotation"&&p.returnType===u)&&i.length===1&&i[0].name===null&&u.this!==i[0]&&i[0].typeAnnotation&&u.typeParameters===null&&Jt(i[0].typeAnnotation)&&!u.rest?r.arrowParens==="always"||u.type==="HookTypeAnnotation"?["(",...y,")"]:y:[a,"(",f([E,...y]),B(!fu(u)&&ae(r,"all")?",":""),E,")"]}function Cs(e){if(!e)return !1;let t=z(e);if(t.length!==1)return !1;let[r]=t;return !d(r)&&(r.type==="ObjectPattern"||r.type==="ArrayPattern"||r.type==="Identifier"&&r.typeAnnotation&&(r.typeAnnotation.type==="TypeAnnotation"||r.typeAnnotation.type==="TSTypeAnnotation")&&we(r.typeAnnotation.typeAnnotation)||r.type==="FunctionTypeParam"&&we(r.typeAnnotation)&&r!==e.rest||r.type==="AssignmentPattern"&&(r.left.type==="ObjectPattern"||r.left.type==="ArrayPattern")&&(r.right.type==="Identifier"||se(r.right)&&r.right.properties.length===0||X(r.right)&&r.right.elements.length===0))}function tl(e){let t;return e.returnType?(t=e.returnType,t.typeAnnotation&&(t=t.typeAnnotation)):e.typeAnnotation&&(t=e.typeAnnotation),t}function at(e,t){var s;let r=tl(e);if(!r)return !1;let n=(s=e.typeParameters)==null?void 0:s.params;if(n){if(n.length>1)return !1;if(n.length===1){let u=n[0];if(u.constraint||u.default)return !1}}return z(e).length===1&&(we(r)||re(t))}function rl(e){return e.match(t=>t.type==="ArrowFunctionExpression"&&t.body.type==="BlockStatement",(t,r)=>{if(t.type==="CallExpression"&&r==="arguments"&&t.arguments.length===1&&t.callee.type==="CallExpression"){let n=t.callee.callee;return n.type==="Identifier"||n.type==="MemberExpression"&&!n.computed&&n.object.type==="Identifier"&&n.property.type==="Identifier"}return !1},(t,r)=>t.type==="VariableDeclarator"&&r==="init"||t.type==="ExportDefaultDeclaration"&&r==="declaration"||t.type==="TSExportAssignment"&&r==="expression"||t.type==="AssignmentExpression"&&r==="right"&&t.left.type==="MemberExpression"&&t.left.object.type==="Identifier"&&t.left.object.name==="module"&&t.left.property.type==="Identifier"&&t.left.property.name==="exports",t=>t.type!=="VariableDeclaration"||t.kind==="const"&&t.declarations.length===1)}function Mi(e){let t=z(e);return t.length>1&&t.some(r=>r.type==="TSParameterProperty")}var nl=v(["VoidTypeAnnotation","TSVoidKeyword","NullLiteralTypeAnnotation","TSNullKeyword"]),sl=v(["ObjectTypeAnnotation","TSTypeLiteral","GenericTypeAnnotation","TSTypeReference"]);function ul(e){let{types:t}=e;if(t.some(n=>d(n)))return !1;let r=t.find(n=>sl(n));return r?t.every(n=>n===r||nl(n)):!1}function As(e){return Jt(e)||we(e)?!0:Ue(e)?ul(e):!1}function Ri(e,t,r){let n=t.semi?";":"",{node:s}=e,u=[K(e),"opaque type ",r("id"),r("typeParameters")];return s.supertype&&u.push(": ",r("supertype")),s.impltype&&u.push(" = ",r("impltype")),u.push(n),u}function Qr(e,t,r){let n=t.semi?";":"",{node:s}=e,u=[K(e)];u.push("type ",r("id"),r("typeParameters"));let i=s.type==="TSTypeAliasDeclaration"?"typeAnnotation":"right";return [xt(e,t,r,u," =",i),n]}function zr(e,t,r){let n=!1;return l(e.map(({isFirst:s,previous:u,node:i,index:a})=>{let p=r();if(s)return p;let o=we(i),m=we(u);return m&&o?[" & ",n?f(p):p]:!m&&!o?f([" &",x,p]):(a>1&&(n=!0),[" & ",a>1?f(p):p])},"types"))}function Zr(e,t,r){let{node:n}=e,{parent:s}=e,u=s.type!=="TypeParameterInstantiation"&&(s.type!=="TSConditionalType"||!t.experimentalTernaries)&&(s.type!=="ConditionalTypeAnnotation"||!t.experimentalTernaries)&&s.type!=="TSTypeParameterInstantiation"&&s.type!=="GenericTypeAnnotation"&&s.type!=="TSTypeReference"&&s.type!=="TSTypeAssertion"&&s.type!=="TupleTypeAnnotation"&&s.type!=="TSTupleType"&&!(s.type==="FunctionTypeParam"&&!s.name&&e.grandparent.this!==s)&&!((s.type==="TypeAlias"||s.type==="VariableDeclarator"||s.type==="TSTypeAliasDeclaration")&&Oe(t.originalText,n)),i=As(n),a=e.map(m=>{let y=r();return i||(y=he(2,y)),ye(m,y,t)},"types");if(i)return b(" | ",a);let p=u&&!Oe(t.originalText,n),o=[B([p?x:"","| "]),b([x,"| "],a)];return Be(e,t)?l([f(o),E]):(s.type==="TupleTypeAnnotation"||s.type==="TSTupleType")&&s[s.type==="TupleTypeAnnotation"&&s.types?"types":"elementTypes"].length>1?l([f([B(["(",E]),o]),E,B(")")]):l(u?f(o):o)}function il(e){var n;let{node:t,parent:r}=e;return t.type==="FunctionTypeAnnotation"&&(Ir(r)||!((r.type==="ObjectTypeProperty"||r.type==="ObjectTypeInternalSlot")&&!r.variance&&!r.optional&&Bt(r,t)||r.type==="ObjectTypeCallProperty"||((n=e.getParentNode(2))==null?void 0:n.type)==="DeclareFunction"))}function en(e,t,r){let{node:n}=e,s=[Ht(e)];(n.type==="TSConstructorType"||n.type==="TSConstructSignatureDeclaration")&&s.push("new ");let u=Je(e,r,t,!1,!0),i=[];return n.type==="FunctionTypeAnnotation"?i.push(il(e)?" => ":": ",r("returnType")):i.push(N(e,r,n.returnType?"returnType":"typeAnnotation")),at(n,i)&&(u=l(u)),s.push(u,i),l(s)}function tn(e,t,r){return [r("objectType"),$(e),"[",r("indexType"),"]"]}function rn(e,t,r){return ["infer ",r("typeParameter")]}function Ts(e,t,r){let{node:n}=e;return [n.postfix?"":r,N(e,t),n.postfix?r:""]}function nn(e,t,r){let{node:n}=e;return ["...",...n.type==="TupleTypeSpreadElement"&&n.label?[r("label"),": "]:[],r("typeAnnotation")]}function sn(e,t,r){let{node:n}=e;return [n.variance?r("variance"):"",r("label"),n.optional?"?":"",": ",r("elementType")]}var al=new WeakSet;function N(e,t,r="typeAnnotation"){let{node:{[r]:n}}=e;if(!n)return "";let s=!1;if(n.type==="TSTypeAnnotation"||n.type==="TypeAnnotation"){let u=e.call(Ji,r);(u==="=>"||u===":"&&d(n,h.Leading))&&(s=!0),al.add(n);}return s?[" ",t(r)]:t(r)}var Ji=e=>e.match(t=>t.type==="TSTypeAnnotation",(t,r)=>(r==="returnType"||r==="typeAnnotation")&&(t.type==="TSFunctionType"||t.type==="TSConstructorType"))?"=>":e.match(t=>t.type==="TSTypeAnnotation",(t,r)=>r==="typeAnnotation"&&(t.type==="TSJSDocNullableType"||t.type==="TSJSDocNonNullableType"||t.type==="TSTypePredicate"))||e.match(t=>t.type==="TypeAnnotation",(t,r)=>r==="typeAnnotation"&&t.type==="Identifier",(t,r)=>r==="id"&&t.type==="DeclareFunction")||e.match(t=>t.type==="TypeAnnotation",(t,r)=>r==="typeAnnotation"&&t.type==="Identifier",(t,r)=>r==="id"&&t.type==="DeclareHook")||e.match(t=>t.type==="TypeAnnotation",(t,r)=>r==="bound"&&t.type==="TypeParameter"&&t.usesExtendsBound)?"":":";function un(e,t,r){let n=Ji(e);return n?[n," ",r("typeAnnotation")]:r("typeAnnotation")}function an(e){return [e("elementType"),"[]"]}function on({node:e},t){let r=e.type==="TSTypeQuery"?"exprName":"argument",n=e.type==="TypeofTypeAnnotation"||e.typeArguments?"typeArguments":"typeParameters";return ["typeof ",t(r),t(n)]}function pn(e,t){let{node:r}=e;return [r.type==="TSTypePredicate"&&r.asserts?"asserts ":r.type==="TypePredicate"&&r.kind?`${r.kind} `:"",t("parameterName"),r.typeAnnotation?[" is ",N(e,t)]:""]}function $(e){let{node:t}=e;return !t.optional||t.type==="Identifier"&&t===e.parent.key?"":L(t)||W(t)&&t.computed||t.type==="OptionalIndexedAccessType"?"?.":"?"}function cn(e){return e.node.definite||e.match(void 0,(t,r)=>r==="id"&&t.type==="VariableDeclarator"&&t.definite)?"!":""}var ol=new Set(["DeclareClass","DeclareComponent","DeclareFunction","DeclareHook","DeclareVariable","DeclareExportDeclaration","DeclareExportAllDeclaration","DeclareOpaqueType","DeclareTypeAlias","DeclareEnum","DeclareInterface"]);function K(e){let{node:t}=e;return t.declare||ol.has(t.type)&&e.parent.type!=="DeclareExportDeclaration"?"declare ":""}var pl=new Set(["TSAbstractMethodDefinition","TSAbstractPropertyDefinition","TSAbstractAccessorProperty"]);function Ht({node:e}){return e.abstract||pl.has(e.type)?"abstract ":""}function Qe(e,t,r){let n=e.node;return n.typeArguments?r("typeArguments"):n.typeParameters?r("typeParameters"):""}function Vr(e,t,r){return ["::",r("callee")]}function Dt(e,t,r){return e.type==="EmptyStatement"?";":e.type==="BlockStatement"||r?[" ",t]:f([x,t])}function ln(e,t){return ["...",t("argument"),N(e,t)]}function Nt(e){return e.accessibility?e.accessibility+" ":""}function cl(e,t,r,n){let{node:s}=e,u=s.inexact?"...":"";return d(s,h.Dangling)?l([r,u,J(e,t,{indent:!0}),E,n]):[r,u,n]}function Vt(e,t,r){let{node:n}=e,s=[],u=n.type==="TupleExpression"?"#[":"[",i="]",a=n.type==="TupleTypeAnnotation"&&n.types?"types":n.type==="TSTupleType"||n.type==="TupleTypeAnnotation"?"elementTypes":"elements",p=n[a];if(p.length===0)s.push(cl(e,t,u,i));else {let o=_(!1,p,-1),m=(o==null?void 0:o.type)!=="RestElement"&&!n.inexact,y=o===null,D=Symbol("array"),C=!t.__inJestEach&&p.length>1&&p.every((T,S,g)=>{let M=T==null?void 0:T.type;if(!X(T)&&!se(T))return !1;let R=g[S+1];if(R&&M!==R.type)return !1;let j=X(T)?"elements":"properties";return T[j]&&T[j].length>1}),c=fs(n,t),A=m?y?",":ae(t)?c?B(",","",{groupId:D}):B(","):"":"";s.push(l([u,f([E,c?ml(e,t,r,A):[ll(e,t,a,n.inexact,r),A],J(e,t)]),E,i],{shouldBreak:C,id:D}));}return s.push($(e),N(e,r)),s}function fs(e,t){return X(e)&&e.elements.length>1&&e.elements.every(r=>r&&(Fe(r)||jn(r)&&!d(r.argument))&&!d(r,h.Trailing|h.Line,n=>!Z(t.originalText,q(n),{backwards:!0})))}function qi({node:e},{originalText:t}){let r=s=>Ot(t,_t(t,s)),n=s=>t[s]===","?s:n(r(s+1));return jt(t,n(k(e)))}function ll(e,t,r,n,s){let u=[];return e.each(({node:i,isLast:a})=>{u.push(i?l(s()):""),(!a||n)&&u.push([",",x,i&&qi(e,t)?E:""]);},r),n&&u.push("..."),u}function ml(e,t,r,n){let s=[];return e.each(({isLast:u,next:i})=>{s.push([r(),u?n:","]),u||s.push(qi(e,t)?[F,F]:d(i,h.Leading|h.Line)?F:x);},"elements"),Rr(s)}var yl=/^[\$A-Z_a-z\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u05D0-\u05EA\u05F0-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u08A0-\u08B4\u08B6-\u08BD\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0AF9\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C60\u0C61\u0C80\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D54-\u0D56\u0D5F-\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1877\u1880-\u1884\u1887-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4B\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1C80-\u1C88\u1CE9-\u1CEC\u1CEE-\u1CF1\u1CF5\u1CF6\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2E2F\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303C\u3041-\u3096\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FD5\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6EF\uA717-\uA71F\uA722-\uA788\uA78B-\uA7AE\uA7B0-\uA7B7\uA7F7-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA8FD\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB65\uAB70-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC][\$0-9A-Z_a-z\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0300-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u0483-\u0487\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u05D0-\u05EA\u05F0-\u05F2\u0610-\u061A\u0620-\u0669\u066E-\u06D3\u06D5-\u06DC\u06DF-\u06E8\u06EA-\u06FC\u06FF\u0710-\u074A\u074D-\u07B1\u07C0-\u07F5\u07FA\u0800-\u082D\u0840-\u085B\u08A0-\u08B4\u08B6-\u08BD\u08D4-\u08E1\u08E3-\u0963\u0966-\u096F\u0971-\u0983\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BC-\u09C4\u09C7\u09C8\u09CB-\u09CE\u09D7\u09DC\u09DD\u09DF-\u09E3\u09E6-\u09F1\u0A01-\u0A03\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A3C\u0A3E-\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A59-\u0A5C\u0A5E\u0A66-\u0A75\u0A81-\u0A83\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABC-\u0AC5\u0AC7-\u0AC9\u0ACB-\u0ACD\u0AD0\u0AE0-\u0AE3\u0AE6-\u0AEF\u0AF9\u0B01-\u0B03\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3C-\u0B44\u0B47\u0B48\u0B4B-\u0B4D\u0B56\u0B57\u0B5C\u0B5D\u0B5F-\u0B63\u0B66-\u0B6F\u0B71\u0B82\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCD\u0BD0\u0BD7\u0BE6-\u0BEF\u0C00-\u0C03\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D-\u0C44\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C58-\u0C5A\u0C60-\u0C63\u0C66-\u0C6F\u0C80-\u0C83\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBC-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCD\u0CD5\u0CD6\u0CDE\u0CE0-\u0CE3\u0CE6-\u0CEF\u0CF1\u0CF2\u0D01-\u0D03\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D-\u0D44\u0D46-\u0D48\u0D4A-\u0D4E\u0D54-\u0D57\u0D5F-\u0D63\u0D66-\u0D6F\u0D7A-\u0D7F\u0D82\u0D83\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0DCA\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DE6-\u0DEF\u0DF2\u0DF3\u0E01-\u0E3A\u0E40-\u0E4E\u0E50-\u0E59\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB9\u0EBB-\u0EBD\u0EC0-\u0EC4\u0EC6\u0EC8-\u0ECD\u0ED0-\u0ED9\u0EDC-\u0EDF\u0F00\u0F18\u0F19\u0F20-\u0F29\u0F35\u0F37\u0F39\u0F3E-\u0F47\u0F49-\u0F6C\u0F71-\u0F84\u0F86-\u0F97\u0F99-\u0FBC\u0FC6\u1000-\u1049\u1050-\u109D\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u135D-\u135F\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1714\u1720-\u1734\u1740-\u1753\u1760-\u176C\u176E-\u1770\u1772\u1773\u1780-\u17D3\u17D7\u17DC\u17DD\u17E0-\u17E9\u180B-\u180D\u1810-\u1819\u1820-\u1877\u1880-\u18AA\u18B0-\u18F5\u1900-\u191E\u1920-\u192B\u1930-\u193B\u1946-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u19D0-\u19D9\u1A00-\u1A1B\u1A20-\u1A5E\u1A60-\u1A7C\u1A7F-\u1A89\u1A90-\u1A99\u1AA7\u1AB0-\u1ABD\u1B00-\u1B4B\u1B50-\u1B59\u1B6B-\u1B73\u1B80-\u1BF3\u1C00-\u1C37\u1C40-\u1C49\u1C4D-\u1C7D\u1C80-\u1C88\u1CD0-\u1CD2\u1CD4-\u1CF6\u1CF8\u1CF9\u1D00-\u1DF5\u1DFB-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u200C\u200D\u203F\u2040\u2054\u2071\u207F\u2090-\u209C\u20D0-\u20DC\u20E1\u20E5-\u20F0\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D7F-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2DE0-\u2DFF\u2E2F\u3005-\u3007\u3021-\u302F\u3031-\u3035\u3038-\u303C\u3041-\u3096\u3099\u309A\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FD5\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA62B\uA640-\uA66F\uA674-\uA67D\uA67F-\uA6F1\uA717-\uA71F\uA722-\uA788\uA78B-\uA7AE\uA7B0-\uA7B7\uA7F7-\uA827\uA840-\uA873\uA880-\uA8C5\uA8D0-\uA8D9\uA8E0-\uA8F7\uA8FB\uA8FD\uA900-\uA92D\uA930-\uA953\uA960-\uA97C\uA980-\uA9C0\uA9CF-\uA9D9\uA9E0-\uA9FE\uAA00-\uAA36\uAA40-\uAA4D\uAA50-\uAA59\uAA60-\uAA76\uAA7A-\uAAC2\uAADB-\uAADD\uAAE0-\uAAEF\uAAF2-\uAAF6\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB65\uAB70-\uABEA\uABEC\uABED\uABF0-\uABF9\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE00-\uFE0F\uFE20-\uFE2F\uFE33\uFE34\uFE4D-\uFE4F\uFE70-\uFE74\uFE76-\uFEFC\uFF10-\uFF19\uFF21-\uFF3A\uFF3F\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]*$/,Dl=e=>yl.test(e),Wi=Dl;function fl(e){return e.length===1?e:e.toLowerCase().replace(/^([+-]?[\d.]+e)(?:\+|(-))?0*(?=\d)/u,"$1$2").replace(/^([+-]?[\d.]+)e[+-]?0+$/u,"$1").replace(/^([+-])?\./u,"$10.").replace(/(\.\d+?)0+(?=e|$)/u,"$1").replace(/\.(?=e|$)/u,"")}var ft=fl;var mn=new WeakMap;function Ui(e){return /^(?:\d+|\d+\.\d+)$/u.test(e)}function Gi(e,t){return t.parser==="json"||t.parser==="jsonc"||!te(e.key)||Ze(fe(e.key),t).slice(1,-1)!==e.key.value?!1:!!(Wi(e.key.value)&&!(t.parser==="babel-ts"&&e.type==="ClassProperty"||t.parser==="typescript"&&e.type==="PropertyDefinition")||Ui(e.key.value)&&String(Number(e.key.value))===e.key.value&&e.type!=="ImportAttribute"&&(t.parser==="babel"||t.parser==="acorn"||t.parser==="espree"||t.parser==="meriyah"||t.parser==="__babel_estree"))}function El(e,t){let{key:r}=e.node;return (r.type==="Identifier"||Fe(r)&&Ui(ft(fe(r)))&&String(r.value)===ft(fe(r))&&!(t.parser==="typescript"||t.parser==="babel-ts"))&&(t.parser==="json"||t.parser==="jsonc"||t.quoteProps==="consistent"&&mn.get(e.parent))}function Et(e,t,r){let{node:n}=e;if(n.computed)return ["[",r("key"),"]"];let{parent:s}=e,{key:u}=n;if(t.quoteProps==="consistent"&&!mn.has(s)){let i=e.siblings.some(a=>!a.computed&&te(a.key)&&!Gi(a,t));mn.set(s,i);}if(El(e,t)){let i=Ze(JSON.stringify(u.type==="Identifier"?u.name:u.value.toString()),t);return e.call(a=>ye(a,i,t),"key")}return Gi(n,t)&&(t.quoteProps==="as-needed"||t.quoteProps==="consistent"&&!mn.get(s))?e.call(i=>ye(i,/^\d/u.test(u.value)?ft(u.value):u.value,t),"key"):r("key")}function yn(e,t,r){let{node:n}=e;return n.shorthand?r("value"):xt(e,t,r,Et(e,t,r),":","value")}var Fl=({node:e,key:t,parent:r})=>t==="value"&&e.type==="FunctionExpression"&&(r.type==="ObjectMethod"||r.type==="ClassMethod"||r.type==="ClassPrivateMethod"||r.type==="MethodDefinition"||r.type==="TSAbstractMethodDefinition"||r.type==="TSDeclareMethod"||r.type==="Property"&&bt(r));function Dn(e,t,r,n){if(Fl(e))return fn(e,r,t);let{node:s}=e,u=!1;if((s.type==="FunctionDeclaration"||s.type==="FunctionExpression")&&(n!=null&&n.expandLastArg)){let{parent:m}=e;L(m)&&(oe(m).length>1||z(s).every(y=>y.type==="Identifier"&&!y.typeAnnotation))&&(u=!0);}let i=[K(e),s.async?"async ":"",`function${s.generator?"*":""} `,s.id?t("id"):""],a=Je(e,t,r,u),p=$t(e,t),o=at(s,p);return i.push(Qe(e,r,t),l([o?l(a):a,p]),s.body?" ":"",t("body")),r.semi&&(s.declare||!s.body)&&i.push(";"),i}function yr(e,t,r){let{node:n}=e,{kind:s}=n,u=n.value||n,i=[];return !s||s==="init"||s==="method"||s==="constructor"?u.async&&i.push("async "):(vt.ok(s==="get"||s==="set"),i.push(s," ")),u.generator&&i.push("*"),i.push(Et(e,t,r),n.optional||n.key.optional?"?":"",n===u?fn(e,t,r):r("value")),i}function fn(e,t,r){let{node:n}=e,s=Je(e,r,t),u=$t(e,r),i=Mi(n),a=at(n,u),p=[Qe(e,t,r),l([i?l(s,{shouldBreak:!0}):a?l(s):s,u])];return n.body?p.push(" ",r("body")):p.push(t.semi?";":""),p}function Cl(e){let t=z(e);return t.length===1&&!e.typeParameters&&!d(e,h.Dangling)&&t[0].type==="Identifier"&&!t[0].typeAnnotation&&!d(t[0])&&!t[0].optional&&!e.predicate&&!e.returnType}function En(e,t){if(t.arrowParens==="always")return !1;if(t.arrowParens==="avoid"){let{node:r}=e;return Cl(r)}return !1}function $t(e,t){let{node:r}=e,s=[N(e,t,"returnType")];return r.predicate&&s.push(t("predicate")),s}function Xi(e,t,r){let{node:n}=e,s=t.semi?";":"",u=[];if(n.argument){let p=r("argument");Al(t,n.argument)?p=["(",f([F,p]),F,")"]:(De(n.argument)||n.argument.type==="SequenceExpression"||t.experimentalTernaries&&n.argument.type==="ConditionalExpression"&&(n.argument.consequent.type==="ConditionalExpression"||n.argument.alternate.type==="ConditionalExpression"))&&(p=l([B("("),f([E,p]),E,B(")")])),u.push(" ",p);}let i=d(n,h.Dangling),a=s&&i&&d(n,h.Last|h.Line);return a&&u.push(s),i&&u.push(" ",J(e,t)),a||u.push(s),u}function Yi(e,t,r){return ["return",Xi(e,t,r)]}function Hi(e,t,r){return ["throw",Xi(e,t,r)]}function Al(e,t){if(Oe(e.originalText,t)||d(t,h.Leading,r=>Te(e.originalText,q(r),k(r)))&&!H(t))return !0;if(Rt(t)){let r=t,n;for(;n=iu(r);)if(r=n,Oe(e.originalText,r))return !0}return !1}var ds=new WeakMap;function Ni(e){return ds.has(e)||ds.set(e,e.type==="ConditionalExpression"&&!ie(e,t=>t.type==="ObjectExpression")),ds.get(e)}var Vi=e=>e.type==="SequenceExpression";function $i(e,t,r,n={}){let s=[],u,i=[],a=!1,p=!n.expandLastArg&&e.node.body.type==="ArrowFunctionExpression",o;(function S(){let{node:g}=e,M=Tl(e,t,r,n);if(s.length===0)s.push(M);else {let{leading:R,trailing:j}=os(e,t);s.push([R,M]),i.unshift(j);}p&&(a||(a=g.returnType&&z(g).length>0||g.typeParameters||z(g).some(R=>R.type!=="Identifier"))),!p||g.body.type!=="ArrowFunctionExpression"?(u=r("body",n),o=g.body):e.call(S,"body");})();let m=!Oe(t.originalText,o)&&(Vi(o)||dl(o,u,t)||!a&&Ni(o)),y=e.key==="callee"&&lt(e.parent),D=Symbol("arrow-chain"),C=xl(e,n,{signatureDocs:s,shouldBreak:a}),c=!1,A=!1,T=!1;return p&&(y||n.assignmentLayout)&&(A=!0,T=!d(e.node,h.Leading&h.Line),c=n.assignmentLayout==="chain-tail-arrow-chain"||y&&!m),u=hl(e,t,n,{bodyDoc:u,bodyComments:i,functionBody:o,shouldPutBodyOnSameLine:m}),l([l(A?f([T?E:"",C]):C,{shouldBreak:c,id:D})," =>",p?dt(u,{groupId:D}):l(u),p&&y?B(E,"",{groupId:D}):""])}function Tl(e,t,r,n){let{node:s}=e,u=[];if(s.async&&u.push("async "),En(e,t))u.push(r(["params",0]));else {let a=n.expandLastArg||n.expandFirstArg,p=$t(e,r);if(a){if(re(p))throw new yt;p=l(ar(p));}u.push(l([Je(e,r,t,a,!0),p]));}let i=J(e,t,{filter(a){let p=ut(t.originalText,k(a));return p!==!1&&t.originalText.slice(p,p+2)==="=>"}});return i&&u.push(" ",i),u}function dl(e,t,r){var n,s;return X(e)||se(e)||e.type==="ArrowFunctionExpression"||e.type==="DoExpression"||e.type==="BlockStatement"||H(e)||((n=t.label)==null?void 0:n.hug)!==!1&&(((s=t.label)==null?void 0:s.embed)||Lr(e,r.originalText))}function xl(e,t,{signatureDocs:r,shouldBreak:n}){if(r.length===1)return r[0];let{parent:s,key:u}=e;return u!=="callee"&&lt(s)||De(s)?l([r[0]," =>",f([x,b([" =>",x],r.slice(1))])],{shouldBreak:n}):u==="callee"&&lt(s)||t.assignmentLayout?l(b([" =>",x],r),{shouldBreak:n}):l(f(b([" =>",x],r)),{shouldBreak:n})}function hl(e,t,r,{bodyDoc:n,bodyComments:s,functionBody:u,shouldPutBodyOnSameLine:i}){let{node:a,parent:p}=e,o=r.expandLastArg&&ae(t,"all")?B(","):"",m=(r.expandLastArg||p.type==="JSXExpressionContainer")&&!d(a)?E:"";return i&&Ni(u)?[" ",l([B("","("),f([E,n]),B("",")"),o,m]),s]:(Vi(u)&&(n=l(["(",f([E,n]),E,")"])),i?[" ",n,s]:[f([x,n,s]),o,m])}var gl=(e,t,r)=>{if(!(e&&t==null)){if(t.findLast)return t.findLast(r);for(let n=t.length-1;n>=0;n--){let s=t[n];if(r(s,n,t))return s}}},Ki=gl;function Dr(e,t,r,n){let{node:s}=e,u=[],i=Ki(!1,s[n],a=>a.type!=="EmptyStatement");return e.each(({node:a})=>{a.type!=="EmptyStatement"&&(u.push(r()),a!==i&&(u.push(F),pe(a,t)&&u.push(F)));},n),u}function Fn(e,t,r){let n=Sl(e,t,r),{node:s,parent:u}=e;if(s.type==="Program"&&(u==null?void 0:u.type)!=="ModuleExpression")return n?[n,F]:"";let i=[];if(s.type==="StaticBlock"&&i.push("static "),i.push("{"),n)i.push(f([F,n]),F);else {let a=e.grandparent;u.type==="ArrowFunctionExpression"||u.type==="FunctionExpression"||u.type==="FunctionDeclaration"||u.type==="ComponentDeclaration"||u.type==="HookDeclaration"||u.type==="ObjectMethod"||u.type==="ClassMethod"||u.type==="ClassPrivateMethod"||u.type==="ForStatement"||u.type==="WhileStatement"||u.type==="DoWhileStatement"||u.type==="DoExpression"||u.type==="ModuleExpression"||u.type==="CatchClause"&&!a.finalizer||u.type==="TSModuleDeclaration"||s.type==="StaticBlock"||i.push(F);}return i.push("}"),i}function Sl(e,t,r){let{node:n}=e,s=O(n.directives),u=n.body.some(p=>p.type!=="EmptyStatement"),i=d(n,h.Dangling);if(!s&&!u&&!i)return "";let a=[];return s&&(a.push(Dr(e,t,r,"directives")),(u||i)&&(a.push(F),pe(_(!1,n.directives,-1),t)&&a.push(F))),u&&a.push(Dr(e,t,r,"body")),i&&a.push(J(e,t)),a}function Bl(e){let t=new WeakMap;return function(r){return t.has(r)||t.set(r,Symbol(e)),t.get(r)}}var Cn=Bl;function bl(e){switch(e){case null:return "";case"PlusOptional":return "+?";case"MinusOptional":return "-?";case"Optional":return "?"}}function Qi(e,t,r){let{node:n}=e;return l([n.variance?r("variance"):"","[",f([r("keyTparam")," in ",r("sourceType")]),"]",bl(n.optional),": ",r("propType")])}function xs(e,t){return e==="+"||e==="-"?e+t:t}function zi(e,t,r){let{node:n}=e,s=Te(t.originalText,q(n),q(n.typeParameter));return l(["{",f([t.bracketSpacing?x:E,l([r("typeParameter"),n.optional?xs(n.optional,"?"):"",n.typeAnnotation?": ":"",r("typeAnnotation")]),t.semi?B(";"):""]),J(e,t),t.bracketSpacing?x:E,"}"],{shouldBreak:s})}var fr=Cn("typeParameters");function Pl(e,t,r){let{node:n}=e;return z(n).length===1&&n.type.startsWith("TS")&&!n[r][0].constraint&&e.parent.type==="ArrowFunctionExpression"&&!(t.filepath&&/\.ts$/u.test(t.filepath))}function Lt(e,t,r,n){let{node:s}=e;if(!s[n])return "";if(!Array.isArray(s[n]))return r(n);let u=Pt(e.grandparent),i=e.match(o=>!(o[n].length===1&&we(o[n][0])),void 0,(o,m)=>m==="typeAnnotation",o=>o.type==="Identifier",Fs);if(s[n].length===0||!i&&(u||s[n].length===1&&(s[n][0].type==="NullableTypeAnnotation"||As(s[n][0]))))return ["<",b(", ",e.map(r,n)),kl(e,t),">"];let p=s.type==="TSTypeParameterInstantiation"?"":Pl(e,t,n)?",":ae(t)?B(","):"";return l(["<",f([E,b([",",x],e.map(r,n))]),p,E,">"],{id:fr(s)})}function kl(e,t){let{node:r}=e;if(!d(r,h.Dangling))return "";let n=!d(r,h.Line),s=J(e,t,{indent:!n});return n?s:[s,F]}function An(e,t,r){let{node:n,parent:s}=e,u=[n.type==="TSTypeParameter"&&n.const?"const ":""],i=n.type==="TSTypeParameter"?r("name"):n.name;if(s.type==="TSMappedType")return s.readonly&&u.push(xs(s.readonly,"readonly")," "),u.push("[",i),n.constraint&&u.push(" in ",r("constraint")),s.nameType&&u.push(" as ",e.callParent(()=>r("nameType"))),u.push("]"),u;if(n.variance&&u.push(r("variance")),n.in&&u.push("in "),n.out&&u.push("out "),u.push(i),n.bound&&(n.usesExtendsBound&&u.push(" extends "),u.push(N(e,r,"bound"))),n.constraint){let a=Symbol("constraint");u.push(" extends",l(f(x),{id:a}),ke,dt(r("constraint"),{groupId:a}));}return n.default&&u.push(" = ",r("default")),l(u)}var Zi=v(["ClassProperty","PropertyDefinition","ClassPrivateProperty","ClassAccessorProperty","AccessorProperty","TSAbstractPropertyDefinition","TSAbstractAccessorProperty"]);function Tn(e,t,r){let{node:n}=e,s=[K(e),Ht(e),"class"],u=d(n.id,h.Trailing)||d(n.typeParameters,h.Trailing)||d(n.superClass)||O(n.extends)||O(n.mixins)||O(n.implements),i=[],a=[];if(n.id&&i.push(" ",r("id")),i.push(r("typeParameters")),n.superClass){let m=[Ll(e,t,r),r(n.superTypeArguments?"superTypeArguments":"superTypeParameters")],y=e.call(D=>["extends ",ye(D,m,t)],"superClass");u?a.push(x,l(y)):a.push(" ",y);}else a.push(hs(e,t,r,"extends"));a.push(hs(e,t,r,"mixins"),hs(e,t,r,"implements"));let p;if(u){let m;ra(n)?m=[...i,f(a)]:m=f([...i,a]),p=ea(n),s.push(l(m,{id:p}));}else s.push(...i,...a);let o=n.body;return u&&O(o.body)?s.push(B(F," ",{groupId:p})):s.push(" "),s.push(r("body")),s}var ea=Cn("heritageGroup");function ta(e){return B(F,"",{groupId:ea(e)})}function Il(e){return ["extends","mixins","implements"].reduce((t,r)=>t+(Array.isArray(e[r])?e[r].length:0),e.superClass?1:0)>1}function ra(e){return e.typeParameters&&!d(e.typeParameters,h.Trailing|h.Line)&&!Il(e)}function hs(e,t,r,n){let{node:s}=e;if(!O(s[n]))return "";let u=J(e,t,{marker:n});return [ra(s)?B(" ",x,{groupId:fr(s.typeParameters)}):x,u,u&&F,n,l(f([x,b([",",x],e.map(r,n))]))]}function Ll(e,t,r){let n=r("superClass"),{parent:s}=e;return s.type==="AssignmentExpression"?l(B(["(",f([E,n]),E,")"],n)):n}function dn(e,t,r){let{node:n}=e,s=[];return O(n.decorators)&&s.push(Ds(e,t,r)),s.push(Nt(n)),n.static&&s.push("static "),s.push(Ht(e)),n.override&&s.push("override "),s.push(yr(e,t,r)),s}function xn(e,t,r){let{node:n}=e,s=[],u=t.semi?";":"";O(n.decorators)&&s.push(Ds(e,t,r)),s.push(K(e),Nt(n)),n.static&&s.push("static "),s.push(Ht(e)),n.override&&s.push("override "),n.readonly&&s.push("readonly "),n.variance&&s.push(r("variance")),(n.type==="ClassAccessorProperty"||n.type==="AccessorProperty"||n.type==="TSAbstractAccessorProperty")&&s.push("accessor "),s.push(Et(e,t,r),$(e),cn(e),N(e,r));let i=n.type==="TSAbstractPropertyDefinition"||n.type==="TSAbstractAccessorProperty";return [xt(e,t,r,s," =",i?void 0:"value"),u]}function na(e,t,r){let{node:n}=e,s=[];return e.each(({node:u,next:i,isLast:a})=>{s.push(r()),!t.semi&&Zi(u)&&wl(u,i)&&s.push(";"),a||(s.push(F),pe(u,t)&&s.push(F));},"body"),d(n,h.Dangling)&&s.push(J(e,t)),["{",s.length>0?[f([F,s]),F]:"","}"]}function wl(e,t){var s;let{type:r,name:n}=e.key;if(!e.computed&&r==="Identifier"&&(n==="static"||n==="get"||n==="set")&&!e.value&&!e.typeAnnotation)return !0;if(!t||t.static||t.accessibility||t.readonly)return !1;if(!t.computed){let u=(s=t.key)==null?void 0:s.name;if(u==="in"||u==="instanceof")return !0}if(Zi(t)&&t.variance&&!t.static&&!t.declare)return !0;switch(t.type){case"ClassProperty":case"PropertyDefinition":case"TSAbstractPropertyDefinition":return t.computed;case"MethodDefinition":case"TSAbstractMethodDefinition":case"ClassMethod":case"ClassPrivateMethod":{if((t.value?t.value.async:t.async)||t.kind==="get"||t.kind==="set")return !1;let i=t.value?t.value.generator:t.generator;return !!(t.computed||i)}case"TSIndexSignature":return !0}return !1}var Ol=v(["TSAsExpression","TSTypeAssertion","TSNonNullExpression","TSInstantiationExpression","TSSatisfiesExpression"]);function gs(e){return Ol(e)?gs(e.expression):e}var sa=v(["FunctionExpression","ArrowFunctionExpression"]);function ua(e){return e.type==="MemberExpression"||e.type==="OptionalMemberExpression"||e.type==="Identifier"&&e.name!=="undefined"}function ia(e,t){if(t.semi||Ss(e,t)||Bs(e,t))return !1;let{node:r,key:n,parent:s}=e;return !!(r.type==="ExpressionStatement"&&(n==="body"&&(s.type==="Program"||s.type==="BlockStatement"||s.type==="StaticBlock"||s.type==="TSModuleBlock")||n==="consequent"&&s.type==="SwitchCase")&&e.call(()=>aa(e,t),"expression"))}function aa(e,t){let{node:r}=e;switch(r.type){case"ParenthesizedExpression":case"TypeCastExpression":case"ArrayExpression":case"ArrayPattern":case"TemplateLiteral":case"TemplateElement":case"RegExpLiteral":return !0;case"ArrowFunctionExpression":if(!En(e,t))return !0;break;case"UnaryExpression":{let{prefix:n,operator:s}=r;if(n&&(s==="+"||s==="-"))return !0;break}case"BindExpression":if(!r.object)return !0;break;case"Literal":if(r.regex)return !0;break;default:if(H(r))return !0}return Be(e,t)?!0:Rt(r)?e.call(()=>aa(e,t),...Pr(r)):!1}function Ss({node:e,parent:t},r){return (r.parentParser==="markdown"||r.parentParser==="mdx")&&e.type==="ExpressionStatement"&&H(e.expression)&&t.type==="Program"&&t.body.length===1}function Bs({node:e,parent:t},r){return (r.parser==="__vue_event_binding"||r.parser==="__vue_ts_event_binding")&&e.type==="ExpressionStatement"&&t.type==="Program"&&t.body.length===1}function oa(e,t,r){let n=[r("expression")];if(Bs(e,t)){let s=gs(e.node.expression);(sa(s)||ua(s))&&n.push(";");}else Ss(e,t)||t.semi&&n.push(";");return n}function pa(e,t,r){if(t.__isVueBindings||t.__isVueForBindingLeft){let n=e.map(r,"program","body",0,"params");if(n.length===1)return n[0];let s=b([",",x],n);return t.__isVueForBindingLeft?["(",f([E,l(s)]),E,")"]:s}if(t.__isEmbeddedTypescriptGenericParameters){let n=e.map(r,"program","body",0,"typeParameters","params");return b([",",x],n)}}function ma(e,t){let{node:r}=e;switch(r.type){case"RegExpLiteral":return ca(r);case"BigIntLiteral":return hn(r.extra.raw);case"NumericLiteral":return ft(r.extra.raw);case"StringLiteral":return Ie(Ze(r.extra.raw,t));case"NullLiteral":return "null";case"BooleanLiteral":return String(r.value);case"DirectiveLiteral":return la(r.extra.raw,t);case"Literal":{if(r.regex)return ca(r.regex);if(r.bigint)return hn(r.raw);let{value:n}=r;return typeof n=="number"?ft(r.raw):typeof n=="string"?_l(e)?la(r.raw,t):Ie(Ze(r.raw,t)):String(n)}}}function _l(e){if(e.key!=="expression")return;let{parent:t}=e;return t.type==="ExpressionStatement"&&t.directive}function hn(e){return e.toLowerCase()}function ca({pattern:e,flags:t}){return t=[...t].sort().join(""),`/${e}/${t}`}function la(e,t){let r=e.slice(1,-1);if(r.includes('"')||r.includes("'"))return e;let n=t.singleQuote?"'":'"';return n+r+n}function jl(e,t,r){let n=e.originalText.slice(t,r);for(let s of e[Symbol.for("comments")]){let u=q(s);if(u>r)break;let i=k(s);if(i<t)continue;let a=i-u;n=n.slice(0,u-t)+" ".repeat(a)+n.slice(i-t);}return n}var bs=jl;function ya(e,t,r){let{node:n}=e;return ["import",n.phase?` ${n.phase}`:"",ks(n),Ea(e,t,r),fa(e,t,r),Ca(e,t,r),t.semi?";":""]}var Da=e=>e.type==="ExportDefaultDeclaration"||e.type==="DeclareExportDeclaration"&&e.default;function gn(e,t,r){let{node:n}=e,s=[xi(e,t,r),K(e),"export",Da(n)?" default":""],{declaration:u,exported:i}=n;return d(n,h.Dangling)&&(s.push(" ",J(e,t)),wr(n)&&s.push(F)),u?s.push(" ",r("declaration")):(s.push(Rl(n)),n.type==="ExportAllDeclaration"||n.type==="DeclareExportAllDeclaration"?(s.push(" *"),i&&s.push(" as ",r("exported"))):s.push(Ea(e,t,r)),s.push(fa(e,t,r),Ca(e,t,r))),s.push(Ml(n,t)),s}var vl=v(["ClassDeclaration","ComponentDeclaration","FunctionDeclaration","TSInterfaceDeclaration","DeclareClass","DeclareComponent","DeclareFunction","DeclareHook","HookDeclaration","TSDeclareFunction","EnumDeclaration"]);function Ml(e,t){return t.semi&&(!e.declaration||Da(e)&&!vl(e.declaration))?";":""}function Ps(e,t=!0){return e&&e!=="value"?`${t?" ":""}${e}${t?"":" "}`:""}function ks(e,t){return Ps(e.importKind,t)}function Rl(e){return Ps(e.exportKind)}function fa(e,t,r){let{node:n}=e;if(!n.source)return "";let s=[];return Fa(n,t)&&s.push(" from"),s.push(" ",r("source")),s}function Ea(e,t,r){let{node:n}=e;if(!Fa(n,t))return "";let s=[" "];if(O(n.specifiers)){let u=[],i=[];e.each(()=>{let a=e.node.type;if(a==="ExportNamespaceSpecifier"||a==="ExportDefaultSpecifier"||a==="ImportNamespaceSpecifier"||a==="ImportDefaultSpecifier")u.push(r());else if(a==="ExportSpecifier"||a==="ImportSpecifier")i.push(r());else throw new Me(n,"specifier")},"specifiers"),s.push(b(", ",u)),i.length>0&&(u.length>0&&s.push(", "),i.length>1||u.length>0||n.specifiers.some(p=>d(p))?s.push(l(["{",f([t.bracketSpacing?x:E,b([",",x],i)]),B(ae(t)?",":""),t.bracketSpacing?x:E,"}"])):s.push(["{",t.bracketSpacing?" ":"",...i,t.bracketSpacing?" ":"","}"]));}else s.push("{}");return s}function Fa(e,t){return e.type!=="ImportDeclaration"||O(e.specifiers)||e.importKind==="type"?!0:bs(t,q(e),q(e.source)).trimEnd().endsWith("from")}function Jl(e,t){var n,s;if((n=e.extra)!=null&&n.deprecatedAssertSyntax)return "assert";let r=bs(t,k(e.source),(s=e.attributes)!=null&&s[0]?q(e.attributes[0]):k(e)).trimStart();return r.startsWith("assert")?"assert":r.startsWith("with")||O(e.attributes)?"with":void 0}function Ca(e,t,r){let{node:n}=e;if(!n.source)return "";let s=Jl(n,t);if(!s)return "";let u=[` ${s} {`];return O(n.attributes)&&(t.bracketSpacing&&u.push(" "),u.push(b(", ",e.map(r,"attributes"))),t.bracketSpacing&&u.push(" ")),u.push("}"),u}function Aa(e,t,r){let{node:n}=e,{type:s}=n,u=s.startsWith("Import"),i=u?"imported":"local",a=u?"local":"exported",p=n[i],o=n[a],m="",y="";return s==="ExportNamespaceSpecifier"||s==="ImportNamespaceSpecifier"?m="*":p&&(m=r(i)),o&&!ql(n)&&(y=r(a)),[Ps(s==="ImportSpecifier"?n.importKind:n.exportKind,!1),m,m&&y?" as ":"",y]}function ql(e){if(e.type!=="ImportSpecifier"&&e.type!=="ExportSpecifier")return !1;let{local:t,[e.type==="ImportSpecifier"?"imported":"exported"]:r}=e;if(t.type!==r.type||!tu(t,r))return !1;if(te(t))return t.value===r.value&&fe(t)===fe(r);switch(t.type){case"Identifier":return t.name===r.name;default:return !1}}function ht(e,t,r){var j;let n=t.semi?";":"",{node:s}=e,u=s.type==="ObjectTypeAnnotation",i=s.type==="TSEnumDeclaration"||s.type==="EnumBooleanBody"||s.type==="EnumNumberBody"||s.type==="EnumBigIntBody"||s.type==="EnumStringBody"||s.type==="EnumSymbolBody",a=[s.type==="TSTypeLiteral"||i?"members":s.type==="TSInterfaceBody"?"body":"properties"];u&&a.push("indexers","callProperties","internalSlots");let p=a.flatMap(I=>e.map(({node:U})=>({node:U,printed:r(),loc:q(U)}),I));a.length>1&&p.sort((I,U)=>I.loc-U.loc);let{parent:o,key:m}=e,y=u&&m==="body"&&(o.type==="InterfaceDeclaration"||o.type==="DeclareInterface"||o.type==="DeclareClass"),D=s.type==="TSInterfaceBody"||i||y||s.type==="ObjectPattern"&&o.type!=="FunctionDeclaration"&&o.type!=="FunctionExpression"&&o.type!=="ArrowFunctionExpression"&&o.type!=="ObjectMethod"&&o.type!=="ClassMethod"&&o.type!=="ClassPrivateMethod"&&o.type!=="AssignmentPattern"&&o.type!=="CatchClause"&&s.properties.some(I=>I.value&&(I.value.type==="ObjectPattern"||I.value.type==="ArrayPattern"))||s.type!=="ObjectPattern"&&p.length>0&&Te(t.originalText,q(s),p[0].loc),C=y?";":s.type==="TSInterfaceBody"||s.type==="TSTypeLiteral"?B(n,";"):",",c=s.type==="RecordExpression"?"#{":s.exact?"{|":"{",A=s.exact?"|}":"}",T=[],S=p.map(I=>{let U=[...T,l(I.printed)];return T=[C,x],(I.node.type==="TSPropertySignature"||I.node.type==="TSMethodSignature"||I.node.type==="TSConstructSignatureDeclaration"||I.node.type==="TSCallSignatureDeclaration")&&d(I.node,h.PrettierIgnore)&&T.shift(),pe(I.node,t)&&T.push(F),U});if(s.inexact||s.hasUnknownMembers){let I;if(d(s,h.Dangling)){let U=d(s,h.Line);I=[J(e,t),U||Z(t.originalText,k(_(!1,ct(s),-1)))?F:x,"..."];}else I=["..."];S.push([...T,...I]);}let g=(j=_(!1,p,-1))==null?void 0:j.node,M=!(s.inexact||s.hasUnknownMembers||g&&(g.type==="RestElement"||(g.type==="TSPropertySignature"||g.type==="TSCallSignatureDeclaration"||g.type==="TSMethodSignature"||g.type==="TSConstructSignatureDeclaration")&&d(g,h.PrettierIgnore))),R;if(S.length===0){if(!d(s,h.Dangling))return [c,A,N(e,r)];R=l([c,J(e,t,{indent:!0}),E,A,$(e),N(e,r)]);}else R=[y&&O(s.properties)?ta(o):"",c,f([t.bracketSpacing?x:E,...S]),B(M&&(C!==","||ae(t))?C:""),t.bracketSpacing?x:E,A,$(e),N(e,r)];return e.match(I=>I.type==="ObjectPattern"&&!O(I.decorators),Is)||we(s)&&(e.match(void 0,(I,U)=>U==="typeAnnotation",(I,U)=>U==="typeAnnotation",Is)||e.match(void 0,(I,U)=>I.type==="FunctionTypeParam"&&U==="typeAnnotation",Is))||!D&&e.match(I=>I.type==="ObjectPattern",I=>I.type==="AssignmentExpression"||I.type==="VariableDeclarator")?R:l(R,{shouldBreak:D})}function Is(e,t){return (t==="params"||t==="parameters"||t==="this"||t==="rest")&&Cs(e)}function Wl(e){let t=[e];for(let r=0;r<t.length;r++){let n=t[r];for(let s of ["test","consequent","alternate"]){let u=n[s];if(H(u))return !0;u.type==="ConditionalExpression"&&t.push(u);}}return !1}function Gl(e,t,r){let{node:n}=e,s=n.type==="ConditionalExpression",u=s?"alternate":"falseType",{parent:i}=e,a=s?r("test"):[r("checkType")," ","extends"," ",r("extendsType")];return i.type===n.type&&i[u]===n?he(2,a):a}var Ul=new Map([["AssignmentExpression","right"],["VariableDeclarator","init"],["ReturnStatement","argument"],["ThrowStatement","argument"],["UnaryExpression","argument"],["YieldExpression","argument"],["AwaitExpression","argument"]]);function Xl(e){let{node:t}=e;if(t.type!=="ConditionalExpression")return !1;let r,n=t;for(let s=0;!r;s++){let u=e.getParentNode(s);if(u.type==="ChainExpression"&&u.expression===n||L(u)&&u.callee===n||W(u)&&u.object===n||u.type==="TSNonNullExpression"&&u.expression===n){n=u;continue}u.type==="NewExpression"&&u.callee===n||Ae(u)&&u.expression===n?(r=e.getParentNode(s+1),n=u):r=u;}return n===t?!1:r[Ul.get(r.type)]===n}function Ta(e,t,r){let{node:n}=e,s=n.type==="ConditionalExpression",u=s?"consequent":"trueType",i=s?"alternate":"falseType",a=s?["test"]:["checkType","extendsType"],p=n[u],o=n[i],m=[],y=!1,{parent:D}=e,C=D.type===n.type&&a.some(G=>D[G]===n),c=D.type===n.type&&!C,A,T,S=0;do T=A||n,A=e.getParentNode(S),S++;while(A&&A.type===n.type&&a.every(G=>A[G]!==T));let g=A||D,M=T;if(s&&(H(n[a[0]])||H(p)||H(o)||Wl(M))){y=!0,c=!0;let G=Q=>[B("("),f([E,Q]),E,B(")")],ue=Q=>Q.type==="NullLiteral"||Q.type==="Literal"&&Q.value===null||Q.type==="Identifier"&&Q.name==="undefined";m.push(" ? ",ue(p)?r(u):G(r(u))," : ",o.type===n.type||ue(o)?r(i):G(r(i)));}else {let G=Q=>t.useTabs?f(r(Q)):he(2,r(Q)),ue=[x,"? ",p.type===n.type?B("","("):"",G(u),p.type===n.type?B("",")"):"",x,": ",G(i)];m.push(D.type!==n.type||D[i]===n||C?ue:t.useTabs?Mr(f(ue)):he(Math.max(0,t.tabWidth-2),ue));}let R=[u,i,...a].some(G=>d(n[G],ue=>ee(ue)&&Te(t.originalText,q(ue),k(ue)))),j=G=>D===g?l(G,{shouldBreak:R}):R?[G,Ee]:G,I=!y&&(W(D)||D.type==="NGPipeExpression"&&D.left===n)&&!D.computed,U=Xl(e),P=j([Gl(e,t,r),c?m:f(m),s&&I&&!U?E:""]);return C||U?l([f([E,P]),E]):P}function Yl(e,t){return (W(t)||t.type==="NGPipeExpression"&&t.left===e)&&!t.computed}function Hl(e,t,r,n){return [...e.map(u=>ct(u)),ct(t),ct(r)].flat().some(u=>ee(u)&&Te(n.originalText,q(u),k(u)))}var Nl=new Map([["AssignmentExpression","right"],["VariableDeclarator","init"],["ReturnStatement","argument"],["ThrowStatement","argument"],["UnaryExpression","argument"],["YieldExpression","argument"],["AwaitExpression","argument"]]);function Vl(e){let{node:t}=e;if(t.type!=="ConditionalExpression")return !1;let r,n=t;for(let s=0;!r;s++){let u=e.getParentNode(s);if(u.type==="ChainExpression"&&u.expression===n||L(u)&&u.callee===n||W(u)&&u.object===n||u.type==="TSNonNullExpression"&&u.expression===n){n=u;continue}u.type==="NewExpression"&&u.callee===n||Ae(u)&&u.expression===n?(r=e.getParentNode(s+1),n=u):r=u;}return n===t?!1:r[Nl.get(r.type)]===n}var Ls=e=>[B("("),f([E,e]),E,B(")")];function Kt(e,t,r,n){if(!t.experimentalTernaries)return Ta(e,t,r);let{node:s}=e,u=s.type==="ConditionalExpression",i=s.type==="TSConditionalType"||s.type==="ConditionalTypeAnnotation",a=u?"consequent":"trueType",p=u?"alternate":"falseType",o=u?["test"]:["checkType","extendsType"],m=s[a],y=s[p],D=o.map(qe=>s[qe]),{parent:C}=e,c=C.type===s.type,A=c&&o.some(qe=>C[qe]===s),T=c&&C[p]===s,S=m.type===s.type,g=y.type===s.type,M=g||T,R=t.tabWidth>2||t.useTabs,j,I,U=0;do I=j||s,j=e.getParentNode(U),U++;while(j&&j.type===s.type&&o.every(qe=>j[qe]!==I));let P=j||C,G=n&&n.assignmentLayout&&n.assignmentLayout!=="break-after-operator"&&(C.type==="AssignmentExpression"||C.type==="VariableDeclarator"||C.type==="ClassProperty"||C.type==="PropertyDefinition"||C.type==="ClassPrivateProperty"||C.type==="ObjectProperty"||C.type==="Property"),ue=(C.type==="ReturnStatement"||C.type==="ThrowStatement")&&!(S||g),Q=u&&P.type==="JSXExpressionContainer"&&e.grandparent.type!=="JSXAttribute",gt=Vl(e),Ft=Yl(s,C),w=i&&Be(e,t),ne=R?t.useTabs?"	":" ".repeat(t.tabWidth-1):"",de=Hl(D,m,y,t)||S||g,ot=!M&&!c&&!i&&(Q?m.type==="NullLiteral"||m.type==="Literal"&&m.value===null:nr(m,t)&&Mn(s.test,3)),St=M||T||i&&!c||c&&u&&Mn(s.test,1)||ot,js=[];!S&&d(m,h.Dangling)&&e.call(qe=>{js.push(J(qe,t),F);},"consequent");let Qt=[];d(s.test,h.Dangling)&&e.call(qe=>{Qt.push(J(qe,t));},"test"),!g&&d(y,h.Dangling)&&e.call(qe=>{Qt.push(J(qe,t));},"alternate"),d(s,h.Dangling)&&Qt.push(J(e,t));let vs=Symbol("test"),qa=Symbol("consequent"),Fr=Symbol("test-and-consequent"),Wa=u?[Ls(r("test")),s.test.type==="ConditionalExpression"?Ee:""]:[r("checkType")," ","extends"," ",s.extendsType.type==="TSConditionalType"||s.extendsType.type==="ConditionalTypeAnnotation"||s.extendsType.type==="TSMappedType"?r("extendsType"):l(Ls(r("extendsType")))],Ms=l([Wa," ?"],{id:vs}),Ga=r(a),Cr=f([S||Q&&(H(m)||c||M)?F:x,js,Ga]),Ua=St?l([Ms,M?Cr:B(Cr,l(Cr,{id:qa}),{groupId:vs})],{id:Fr}):[Ms,Cr],kn=r(p),Rs=ot?B(kn,Mr(Ls(kn)),{groupId:Fr}):kn,zt=[Ua,Qt.length>0?[f([F,Qt]),F]:g?F:ot?B(x," ",{groupId:Fr}):x,":",g?" ":R?St?B(ne,B(M||ot?" ":ne," "),{groupId:Fr}):B(ne," "):" ",g?Rs:l([f(Rs),Q&&!ot?E:""]),Ft&&!gt?E:"",de?Ee:""];return G&&!de?l(f([E,l(zt)])):G||ue?l(f(zt)):gt||i&&A?l([f([E,zt]),w?E:""]):C===P?l(zt):zt}function da(e,t,r,n){let{node:s}=e;if(kr(s))return ma(e,t);let u=t.semi?";":"",i=[];switch(s.type){case"JsExpressionRoot":return r("node");case"JsonRoot":return [r("node"),F];case"File":return pa(e,t,r)??r("program");case"EmptyStatement":return "";case"ExpressionStatement":return oa(e,t,r);case"ChainExpression":return r("expression");case"ParenthesizedExpression":return !d(s.expression)&&(se(s.expression)||X(s.expression))?["(",r("expression"),")"]:l(["(",f([E,r("expression")]),E,")"]);case"AssignmentExpression":return Oi(e,t,r);case"VariableDeclarator":return _i(e,t,r);case"BinaryExpression":case"LogicalExpression":return Nr(e,t,r);case"AssignmentPattern":return [r("left")," = ",r("right")];case"OptionalMemberExpression":case"MemberExpression":return Pi(e,t,r);case"MetaProperty":return [r("meta"),".",r("property")];case"BindExpression":return s.object&&i.push(r("object")),i.push(l(f([E,Vr(e,t,r)]))),i;case"Identifier":return [s.name,$(e),cn(e),N(e,r)];case"V8IntrinsicIdentifier":return ["%",s.name];case"SpreadElement":case"SpreadElementPattern":case"SpreadPropertyPattern":case"RestElement":return ln(e,r);case"FunctionDeclaration":case"FunctionExpression":return Dn(e,r,t,n);case"ArrowFunctionExpression":return $i(e,t,r,n);case"YieldExpression":return i.push("yield"),s.delegate&&i.push("*"),s.argument&&i.push(" ",r("argument")),i;case"AwaitExpression":if(i.push("await"),s.argument){i.push(" ",r("argument"));let{parent:a}=e;if(L(a)&&a.callee===s||W(a)&&a.object===s){i=[f([E,...i]),E];let p=e.findAncestor(o=>o.type==="AwaitExpression"||o.type==="BlockStatement");if((p==null?void 0:p.type)!=="AwaitExpression"||!ie(p.argument,o=>o===s))return l(i)}}return i;case"ExportDefaultDeclaration":case"ExportNamedDeclaration":case"ExportAllDeclaration":return gn(e,t,r);case"ImportDeclaration":return ya(e,t,r);case"ImportSpecifier":case"ExportSpecifier":case"ImportNamespaceSpecifier":case"ExportNamespaceSpecifier":case"ImportDefaultSpecifier":case"ExportDefaultSpecifier":return Aa(e,t,r);case"ImportAttribute":return yn(e,t,r);case"Program":case"BlockStatement":case"StaticBlock":return Fn(e,t,r);case"ClassBody":return na(e,t,r);case"ThrowStatement":return Hi(e,t,r);case"ReturnStatement":return Yi(e,t,r);case"NewExpression":case"ImportExpression":case"OptionalCallExpression":case"CallExpression":return $r(e,t,r);case"ObjectExpression":case"ObjectPattern":case"RecordExpression":return ht(e,t,r);case"Property":return bt(s)?yr(e,t,r):yn(e,t,r);case"ObjectProperty":return yn(e,t,r);case"ObjectMethod":return yr(e,t,r);case"Decorator":return ["@",r("expression")];case"ArrayExpression":case"ArrayPattern":case"TupleExpression":return Vt(e,t,r);case"SequenceExpression":{let{parent:a}=e;if(a.type==="ExpressionStatement"||a.type==="ForStatement"){let p=[];return e.each(({isFirst:o})=>{o?p.push(r()):p.push(",",f([x,r()]));},"expressions"),l(p)}return l(b([",",x],e.map(r,"expressions")))}case"ThisExpression":return "this";case"Super":return "super";case"Directive":return [r("value"),u];case"UnaryExpression":return i.push(s.operator),/[a-z]$/u.test(s.operator)&&i.push(" "),d(s.argument)?i.push(l(["(",f([E,r("argument")]),E,")"])):i.push(r("argument")),i;case"UpdateExpression":return [s.prefix?s.operator:"",r("argument"),s.prefix?"":s.operator];case"ConditionalExpression":return Kt(e,t,r,n);case"VariableDeclaration":{let a=e.map(r,"declarations"),p=e.parent,o=p.type==="ForStatement"||p.type==="ForInStatement"||p.type==="ForOfStatement",m=s.declarations.some(D=>D.init),y;return a.length===1&&!d(s.declarations[0])?y=a[0]:a.length>0&&(y=f(a[0])),i=[K(e),s.kind,y?[" ",y]:"",f(a.slice(1).map(D=>[",",m&&!o?F:x,D]))],o&&p.body!==s||i.push(u),l(i)}case"WithStatement":return l(["with (",r("object"),")",Dt(s.body,r("body"))]);case"IfStatement":{let a=Dt(s.consequent,r("consequent")),p=l(["if (",l([f([E,r("test")]),E]),")",a]);if(i.push(p),s.alternate){let o=d(s.consequent,h.Trailing|h.Line)||wr(s),m=s.consequent.type==="BlockStatement"&&!o;i.push(m?" ":F),d(s,h.Dangling)&&i.push(J(e,t),o?F:" "),i.push("else",l(Dt(s.alternate,r("alternate"),s.alternate.type==="IfStatement")));}return i}case"ForStatement":{let a=Dt(s.body,r("body")),p=J(e,t),o=p?[p,E]:"";return !s.init&&!s.test&&!s.update?[o,l(["for (;;)",a])]:[o,l(["for (",l([f([E,r("init"),";",x,r("test"),";",x,r("update")]),E]),")",a])]}case"WhileStatement":return l(["while (",l([f([E,r("test")]),E]),")",Dt(s.body,r("body"))]);case"ForInStatement":return l(["for (",r("left")," in ",r("right"),")",Dt(s.body,r("body"))]);case"ForOfStatement":return l(["for",s.await?" await":""," (",r("left")," of ",r("right"),")",Dt(s.body,r("body"))]);case"DoWhileStatement":{let a=Dt(s.body,r("body"));return i=[l(["do",a])],s.body.type==="BlockStatement"?i.push(" "):i.push(F),i.push("while (",l([f([E,r("test")]),E]),")",u),i}case"DoExpression":return [s.async?"async ":"","do ",r("body")];case"BreakStatement":case"ContinueStatement":return i.push(s.type==="BreakStatement"?"break":"continue"),s.label&&i.push(" ",r("label")),i.push(u),i;case"LabeledStatement":return s.body.type==="EmptyStatement"?[r("label"),":;"]:[r("label"),": ",r("body")];case"TryStatement":return ["try ",r("block"),s.handler?[" ",r("handler")]:"",s.finalizer?[" finally ",r("finalizer")]:""];case"CatchClause":if(s.param){let a=d(s.param,o=>!ee(o)||o.leading&&Z(t.originalText,k(o))||o.trailing&&Z(t.originalText,q(o),{backwards:!0})),p=r("param");return ["catch ",a?["(",f([E,p]),E,") "]:["(",p,") "],r("body")]}return ["catch ",r("body")];case"SwitchStatement":return [l(["switch (",f([E,r("discriminant")]),E,")"])," {",s.cases.length>0?f([F,b(F,e.map(({node:a,isLast:p})=>[r(),!p&&pe(a,t)?F:""],"cases"))]):"",F,"}"];case"SwitchCase":{s.test?i.push("case ",r("test"),":"):i.push("default:"),d(s,h.Dangling)&&i.push(" ",J(e,t));let a=s.consequent.filter(p=>p.type!=="EmptyStatement");if(a.length>0){let p=Dr(e,t,r,"consequent");i.push(a.length===1&&a[0].type==="BlockStatement"?[" ",p]:f([F,p]));}return i}case"DebuggerStatement":return ["debugger",u];case"ClassDeclaration":case"ClassExpression":return Tn(e,t,r);case"ClassMethod":case"ClassPrivateMethod":case"MethodDefinition":return dn(e,t,r);case"ClassProperty":case"PropertyDefinition":case"ClassPrivateProperty":case"ClassAccessorProperty":case"AccessorProperty":return xn(e,t,r);case"TemplateElement":return Ie(s.value.raw);case"TemplateLiteral":return Wr(e,r,t);case"TaggedTemplateExpression":return Xu(e,r);case"PrivateIdentifier":return ["#",s.name];case"PrivateName":return ["#",r("id")];case"TopicReference":return "%";case"ArgumentPlaceholder":return "?";case"ModuleExpression":return ["module ",r("body")];case"InterpreterDirective":default:throw new Me(s,"ESTree")}}function Sn(e,t,r){let{parent:n,node:s,key:u}=e,i=[r("expression")];switch(s.type){case"AsConstExpression":i.push(" as const");break;case"AsExpression":case"TSAsExpression":i.push(" as ",r("typeAnnotation"));break;case"SatisfiesExpression":case"TSSatisfiesExpression":i.push(" satisfies ",r("typeAnnotation"));break}return u==="callee"&&L(n)||u==="object"&&W(n)?l([f([E,...i]),E]):i}function xa(e,t,r){let{node:n}=e,s=[K(e),"component"];n.id&&s.push(" ",r("id")),s.push(r("typeParameters"));let u=$l(e,r,t);return n.rendersType?s.push(l([u," ",r("rendersType")])):s.push(l([u])),n.body&&s.push(" ",r("body")),t.semi&&n.type==="DeclareComponent"&&s.push(";"),s}function $l(e,t,r){let{node:n}=e,s=n.params;if(n.rest&&(s=[...s,n.rest]),s.length===0)return ["(",J(e,r,{filter:i=>ge(r.originalText,k(i))===")"}),")"];let u=[];return Ql(e,(i,a)=>{let p=a===s.length-1;p&&n.rest&&u.push("..."),u.push(t()),!p&&(u.push(","),pe(s[a],r)?u.push(F,F):u.push(x));}),["(",f([E,...u]),B(ae(r,"all")&&!Kl(n,s)?",":""),E,")"]}function Kl(e,t){var r;return e.rest||((r=_(!1,t,-1))==null?void 0:r.type)==="RestElement"}function Ql(e,t){let{node:r}=e,n=0,s=u=>t(u,n++);e.each(s,"params"),r.rest&&e.call(s,"rest");}function ha(e,t,r){let{node:n}=e;return n.shorthand?r("local"):[r("name")," as ",r("local")]}function ga(e,t,r){let{node:n}=e,s=[];return n.name&&s.push(r("name"),n.optional?"?: ":": "),s.push(r("typeAnnotation")),s}function Sa(e,t,r){return ht(e,r,t)}function Bn(e,t){let{node:r}=e,n=t("id");r.computed&&(n=["[",n,"]"]);let s="";return r.initializer&&(s=t("initializer")),r.init&&(s=t("init")),s?[n," = ",s]:n}function Ba(e,t,r){let{node:n}=e,s;if(n.type==="EnumSymbolBody"||n.explicitType)switch(n.type){case"EnumBooleanBody":s="boolean";break;case"EnumNumberBody":s="number";break;case"EnumBigIntBody":s="bigint";break;case"EnumStringBody":s="string";break;case"EnumSymbolBody":s="symbol";break}return [s?`of ${s} `:"",Sa(e,t,r)]}function bn(e,t,r){let{node:n}=e;return [K(e),n.const?"const ":"","enum ",t("id")," ",n.type==="TSEnumDeclaration"?Sa(e,t,r):t("body")]}function Pa(e,t,r){let{node:n}=e,s=["hook"];n.id&&s.push(" ",r("id"));let u=Je(e,r,t,!1,!0),i=$t(e,r),a=at(n,i);return s.push(l([a?l(u):u,i]),n.body?" ":"",r("body")),s}function ka(e,t,r){let{node:n}=e,s=[K(e),"hook"];return n.id&&s.push(" ",r("id")),t.semi&&s.push(";"),s}function ba(e){var r;let{node:t}=e;return t.type==="HookTypeAnnotation"&&((r=e.getParentNode(2))==null?void 0:r.type)==="DeclareHook"}function Ia(e,t,r){let{node:n}=e,s=[];s.push(ba(e)?"":"hook ");let u=Je(e,r,t,!1,!0),i=[];return i.push(ba(e)?": ":" => ",r("returnType")),at(n,i)&&(u=l(u)),s.push(u,i),l(s)}function Pn(e,t,r){let{node:n}=e,s=[K(e),"interface"],u=[],i=[];n.type!=="InterfaceTypeAnnotation"&&u.push(" ",r("id"),r("typeParameters"));let a=n.typeParameters&&!d(n.typeParameters,h.Trailing|h.Line);return O(n.extends)&&i.push(a?B(" ",x,{groupId:fr(n.typeParameters)}):x,"extends ",(n.extends.length===1?yu:f)(b([",",x],e.map(r,"extends")))),d(n.id,h.Trailing)||O(n.extends)?a?s.push(l([...u,f(i)])):s.push(l(f([...u,...i]))):s.push(...u,...i),s.push(" ",r("body")),l(s)}function La(e,t,r){let{node:n}=e;if(Sr(n))return n.type.slice(0,-14).toLowerCase();let s=t.semi?";":"";switch(n.type){case"ComponentDeclaration":case"DeclareComponent":case"ComponentTypeAnnotation":return xa(e,t,r);case"ComponentParameter":return ha(e,t,r);case"ComponentTypeParameter":return ga(e,t,r);case"HookDeclaration":return Pa(e,t,r);case"DeclareHook":return ka(e,t,r);case"HookTypeAnnotation":return Ia(e,t,r);case"DeclareClass":return Tn(e,t,r);case"DeclareFunction":return [K(e),"function ",r("id"),r("predicate"),s];case"DeclareModule":return ["declare module ",r("id")," ",r("body")];case"DeclareModuleExports":return ["declare module.exports",N(e,r),s];case"DeclareNamespace":return ["declare namespace ",r("id")," ",r("body")];case"DeclareVariable":return [K(e),n.kind??"var"," ",r("id"),s];case"DeclareExportDeclaration":case"DeclareExportAllDeclaration":return gn(e,t,r);case"DeclareOpaqueType":case"OpaqueType":return Ri(e,t,r);case"DeclareTypeAlias":case"TypeAlias":return Qr(e,t,r);case"IntersectionTypeAnnotation":return zr(e,t,r);case"UnionTypeAnnotation":return Zr(e,t,r);case"ConditionalTypeAnnotation":return Kt(e,t,r);case"InferTypeAnnotation":return rn(e,t,r);case"FunctionTypeAnnotation":return en(e,t,r);case"TupleTypeAnnotation":return Vt(e,t,r);case"TupleTypeLabeledElement":return sn(e,t,r);case"TupleTypeSpreadElement":return nn(e,t,r);case"GenericTypeAnnotation":return [r("id"),Lt(e,t,r,"typeParameters")];case"IndexedAccessType":case"OptionalIndexedAccessType":return tn(e,t,r);case"TypeAnnotation":return un(e,t,r);case"TypeParameter":return An(e,t,r);case"TypeofTypeAnnotation":return on(e,r);case"ExistsTypeAnnotation":return "*";case"ArrayTypeAnnotation":return an(r);case"DeclareEnum":case"EnumDeclaration":return bn(e,r,t);case"EnumBooleanBody":case"EnumNumberBody":case"EnumBigIntBody":case"EnumStringBody":case"EnumSymbolBody":return Ba(e,r,t);case"EnumBooleanMember":case"EnumNumberMember":case"EnumBigIntMember":case"EnumStringMember":case"EnumDefaultedMember":return Bn(e,r);case"FunctionTypeParam":{let u=n.name?r("name"):e.parent.this===n?"this":"";return [u,$(e),u?": ":"",r("typeAnnotation")]}case"DeclareInterface":case"InterfaceDeclaration":case"InterfaceTypeAnnotation":return Pn(e,t,r);case"ClassImplements":case"InterfaceExtends":return [r("id"),r("typeParameters")];case"NullableTypeAnnotation":return ["?",r("typeAnnotation")];case"Variance":{let{kind:u}=n;return vt.ok(u==="plus"||u==="minus"),u==="plus"?"+":"-"}case"KeyofTypeAnnotation":return ["keyof ",r("argument")];case"ObjectTypeCallProperty":return [n.static?"static ":"",r("value")];case"ObjectTypeMappedTypeProperty":return Qi(e,t,r);case"ObjectTypeIndexer":return [n.static?"static ":"",n.variance?r("variance"):"","[",r("id"),n.id?": ":"",r("key"),"]: ",r("value")];case"ObjectTypeProperty":{let u="";return n.proto?u="proto ":n.static&&(u="static "),[u,n.kind!=="init"?n.kind+" ":"",n.variance?r("variance"):"",Et(e,t,r),$(e),bt(n)?"":": ",r("value")]}case"ObjectTypeAnnotation":return ht(e,t,r);case"ObjectTypeInternalSlot":return [n.static?"static ":"","[[",r("id"),"]]",$(e),n.method?"":": ",r("value")];case"ObjectTypeSpreadProperty":return ln(e,r);case"QualifiedTypeofIdentifier":case"QualifiedTypeIdentifier":return [r("qualification"),".",r("id")];case"NullLiteralTypeAnnotation":return "null";case"BooleanLiteralTypeAnnotation":return String(n.value);case"StringLiteralTypeAnnotation":return Ie(Ze(fe(n),t));case"NumberLiteralTypeAnnotation":return ft(n.raw??n.extra.raw);case"BigIntLiteralTypeAnnotation":return hn(n.raw??n.extra.raw);case"TypeCastExpression":return ["(",r("expression"),N(e,r),")"];case"TypePredicate":return pn(e,r);case"TypeOperator":return [n.operator," ",r("typeAnnotation")];case"TypeParameterDeclaration":case"TypeParameterInstantiation":return Lt(e,t,r,"params");case"InferredPredicate":case"DeclaredPredicate":return [e.key==="predicate"&&e.parent.type!=="DeclareFunction"&&!e.parent.returnType?": ":" ","%checks",...n.type==="DeclaredPredicate"?["(",r("value"),")"]:[]];case"AsExpression":case"AsConstExpression":case"SatisfiesExpression":return Sn(e,t,r)}}function wa(e,t,r){var i;let{node:n}=e;if(!n.type.startsWith("TS"))return;if(Br(n))return n.type.slice(2,-7).toLowerCase();let s=t.semi?";":"",u=[];switch(n.type){case"TSThisType":return "this";case"TSTypeAssertion":{let a=!(X(n.expression)||se(n.expression)),p=l(["<",f([E,r("typeAnnotation")]),E,">"]),o=[B("("),f([E,r("expression")]),E,B(")")];return a?Ke([[p,r("expression")],[p,l(o,{shouldBreak:!0})],[p,r("expression")]]):l([p,r("expression")])}case"TSDeclareFunction":return Dn(e,r,t);case"TSExportAssignment":return ["export = ",r("expression"),s];case"TSModuleBlock":return Fn(e,t,r);case"TSInterfaceBody":case"TSTypeLiteral":return ht(e,t,r);case"TSTypeAliasDeclaration":return Qr(e,t,r);case"TSQualifiedName":return [r("left"),".",r("right")];case"TSAbstractMethodDefinition":case"TSDeclareMethod":return dn(e,t,r);case"TSAbstractAccessorProperty":case"TSAbstractPropertyDefinition":return xn(e,t,r);case"TSInterfaceHeritage":case"TSClassImplements":case"TSExpressionWithTypeArguments":case"TSInstantiationExpression":return [r("expression"),r(n.typeArguments?"typeArguments":"typeParameters")];case"TSTemplateLiteralType":return Wr(e,r,t);case"TSNamedTupleMember":return sn(e,t,r);case"TSRestType":return nn(e,t,r);case"TSOptionalType":return [r("typeAnnotation"),"?"];case"TSInterfaceDeclaration":return Pn(e,t,r);case"TSTypeParameterDeclaration":case"TSTypeParameterInstantiation":return Lt(e,t,r,"params");case"TSTypeParameter":return An(e,t,r);case"TSAsExpression":case"TSSatisfiesExpression":return Sn(e,t,r);case"TSArrayType":return an(r);case"TSPropertySignature":return [n.readonly?"readonly ":"",Et(e,t,r),$(e),N(e,r)];case"TSParameterProperty":return [Nt(n),n.static?"static ":"",n.override?"override ":"",n.readonly?"readonly ":"",r("parameter")];case"TSTypeQuery":return on(e,r);case"TSIndexSignature":{let a=n.parameters.length>1?B(ae(t)?",":""):"",p=l([f([E,b([", ",E],e.map(r,"parameters"))]),a,E]),o=e.parent.type==="ClassBody"&&e.key==="body";return [o&&n.static?"static ":"",n.readonly?"readonly ":"","[",n.parameters?p:"","]",N(e,r),o?s:""]}case"TSTypePredicate":return pn(e,r);case"TSNonNullExpression":return [r("expression"),"!"];case"TSImportType":return ["import(",r("argument"),")",n.qualifier?[".",r("qualifier")]:"",Lt(e,t,r,n.typeArguments?"typeArguments":"typeParameters")];case"TSLiteralType":return r("literal");case"TSIndexedAccessType":return tn(e,t,r);case"TSTypeOperator":return [n.operator," ",r("typeAnnotation")];case"TSMappedType":return zi(e,t,r);case"TSMethodSignature":{let a=n.kind&&n.kind!=="method"?`${n.kind} `:"";u.push(Nt(n),a,n.computed?"[":"",r("key"),n.computed?"]":"",$(e));let p=Je(e,r,t,!1,!0),o=n.returnType?"returnType":"typeAnnotation",m=n[o],y=m?N(e,r,o):"",D=at(n,y);return u.push(D?l(p):p),m&&u.push(l(y)),l(u)}case"TSNamespaceExportDeclaration":return ["export as namespace ",r("id"),t.semi?";":""];case"TSEnumDeclaration":return bn(e,r,t);case"TSEnumMember":return Bn(e,r);case"TSImportEqualsDeclaration":return [n.isExport?"export ":"","import ",ks(n,!1),r("id")," = ",r("moduleReference"),t.semi?";":""];case"TSExternalModuleReference":return ["require(",r("expression"),")"];case"TSModuleDeclaration":{let{parent:a}=e,p=a.type==="TSModuleDeclaration",o=((i=n.body)==null?void 0:i.type)==="TSModuleDeclaration";return p?u.push("."):(u.push(K(e)),n.kind!=="global"&&u.push(n.kind," ")),u.push(r("id")),o?u.push(r("body")):n.body?u.push(" ",l(r("body"))):u.push(s),u}case"TSConditionalType":return Kt(e,t,r);case"TSInferType":return rn(e,t,r);case"TSIntersectionType":return zr(e,t,r);case"TSUnionType":return Zr(e,t,r);case"TSFunctionType":case"TSCallSignatureDeclaration":case"TSConstructorType":case"TSConstructSignatureDeclaration":return en(e,t,r);case"TSTupleType":return Vt(e,t,r);case"TSTypeReference":return [r("typeName"),Lt(e,t,r,n.typeArguments?"typeArguments":"typeParameters")];case"TSTypeAnnotation":return un(e,t,r);case"TSEmptyBodyFunctionExpression":return fn(e,t,r);case"TSJSDocAllType":return "*";case"TSJSDocUnknownType":return "?";case"TSJSDocNullableType":return Ts(e,r,"?");case"TSJSDocNonNullableType":return Ts(e,r,"!");case"TSParenthesizedType":default:throw new Me(n,"TypeScript")}}function zl(e,t,r,n){if(Hr(e))return li(e,t);for(let s of [di,Fi,La,wa,da]){let u=s(e,t,r,n);if(u!==void 0)return u}}var Zl=v(["ClassMethod","ClassPrivateMethod","ClassProperty","ClassAccessorProperty","AccessorProperty","TSAbstractAccessorProperty","PropertyDefinition","TSAbstractPropertyDefinition","ClassPrivateProperty","MethodDefinition","TSAbstractMethodDefinition","TSDeclareMethod"]);function em(e,t,r,n){var y;e.isRoot&&((y=t.__onHtmlBindingRoot)==null||y.call(t,e.node,t));let s=zl(e,t,r,n);if(!s)return "";let{node:u}=e;if(Zl(u))return s;let i=O(u.decorators),a=hi(e,t,r),p=u.type==="ClassExpression";if(i&&!p)return or(s,D=>l([a,D]));let o=Be(e,t),m=ia(e,t);return !a&&!o&&!m?s:or(s,D=>[m?";":"",o?"(":"",o&&p&&i?[f([x,a,D]),x]:[a,D],o?")":""])}var Oa=em;var tm={avoidAstMutation:!0};var _a=[{linguistLanguageId:174,name:"JSON.stringify",type:"data",color:"#292929",tmScope:"source.json",aceMode:"json",codemirrorMode:"javascript",codemirrorMimeType:"application/json",aliases:["geojson","jsonl","topojson"],extensions:[".importmap"],filenames:["package.json","package-lock.json","composer.json"],parsers:["json-stringify"],vscodeLanguageIds:["json"]},{linguistLanguageId:174,name:"JSON",type:"data",color:"#292929",tmScope:"source.json",aceMode:"json",codemirrorMode:"javascript",codemirrorMimeType:"application/json",aliases:["geojson","jsonl","topojson"],extensions:[".json",".4DForm",".4DProject",".avsc",".geojson",".gltf",".har",".ice",".JSON-tmLanguage",".mcmeta",".tfstate",".tfstate.backup",".topojson",".webapp",".webmanifest",".yy",".yyp"],filenames:[".all-contributorsrc",".arcconfig",".auto-changelog",".c8rc",".htmlhintrc",".imgbotconfig",".nycrc",".tern-config",".tern-project",".watchmanconfig","Pipfile.lock","composer.lock","flake.lock","mcmod.info",".babelrc",".jscsrc",".jshintrc",".jslintrc",".swcrc"],parsers:["json"],vscodeLanguageIds:["json"]},{linguistLanguageId:423,name:"JSON with Comments",type:"data",color:"#292929",group:"JSON",tmScope:"source.js",aceMode:"javascript",codemirrorMode:"javascript",codemirrorMimeType:"text/javascript",aliases:["jsonc"],extensions:[".jsonc",".code-snippets",".code-workspace",".sublime-build",".sublime-commands",".sublime-completions",".sublime-keymap",".sublime-macro",".sublime-menu",".sublime-mousemap",".sublime-project",".sublime-settings",".sublime-theme",".sublime-workspace",".sublime_metrics",".sublime_session"],filenames:[],parsers:["jsonc"],vscodeLanguageIds:["jsonc"]},{linguistLanguageId:175,name:"JSON5",type:"data",color:"#267CB9",extensions:[".json5"],tmScope:"source.js",aceMode:"javascript",codemirrorMode:"javascript",codemirrorMimeType:"application/json",parsers:["json5"],vscodeLanguageIds:["json5"]}];var Os={};Ar(Os,{getVisitorKeys:()=>va,massageAstNode:()=>Ra,print:()=>sm});var rm={JsonRoot:["node"],ArrayExpression:["elements"],ObjectExpression:["properties"],ObjectProperty:["key","value"],UnaryExpression:["argument"],NullLiteral:[],BooleanLiteral:[],StringLiteral:[],NumericLiteral:[],Identifier:[],TemplateLiteral:["quasis"],TemplateElement:[]},ja=rm;var nm=hr(ja),va=nm;function sm(e,t,r){let{node:n}=e;switch(n.type){case"JsonRoot":return [r("node"),F];case"ArrayExpression":{if(n.elements.length===0)return "[]";let s=e.map(()=>e.node===null?"null":r(),"elements");return ["[",f([F,b([",",F],s)]),F,"]"]}case"ObjectExpression":return n.properties.length===0?"{}":["{",f([F,b([",",F],e.map(r,"properties"))]),F,"}"];case"ObjectProperty":return [r("key"),": ",r("value")];case"UnaryExpression":return [n.operator==="+"?"":n.operator,r("argument")];case"NullLiteral":return "null";case"BooleanLiteral":return n.value?"true":"false";case"StringLiteral":return JSON.stringify(n.value);case"NumericLiteral":return Ma(e)?JSON.stringify(String(n.value)):JSON.stringify(n.value);case"Identifier":return Ma(e)?JSON.stringify(n.name):n.name;case"TemplateLiteral":return r(["quasis",0]);case"TemplateElement":return JSON.stringify(n.value.cooked);default:throw new Me(n,"JSON")}}function Ma(e){return e.key==="key"&&e.parent.type==="ObjectProperty"}var um=new Set(["start","end","extra","loc","comments","leadingComments","trailingComments","innerComments","errors","range","tokens"]);function Ra(e,t){let{type:r}=e;if(r==="ObjectProperty"){let{key:n}=e;n.type==="Identifier"?t.key={type:"StringLiteral",value:n.name}:n.type==="NumericLiteral"&&(t.key={type:"StringLiteral",value:String(n.value)});return}if(r==="UnaryExpression"&&e.operator==="+")return t.argument;if(r==="ArrayExpression"){for(let[n,s]of e.elements.entries())s===null&&t.elements.splice(n,0,{type:"NullLiteral"});return}if(r==="TemplateLiteral")return {type:"StringLiteral",value:e.quasis[0].value.cooked}}Ra.ignoredProperties=um;var Er={bracketSpacing:{category:"Common",type:"boolean",default:!0,description:"Print spaces between brackets.",oppositeDescription:"Do not print spaces between brackets."},singleQuote:{category:"Common",type:"boolean",default:!1,description:"Use single quotes instead of double quotes."},proseWrap:{category:"Common",type:"choice",default:"preserve",description:"How to wrap prose.",choices:[{value:"always",description:"Wrap prose if it exceeds the print width."},{value:"never",description:"Do not wrap prose."},{value:"preserve",description:"Wrap prose as-is."}]},bracketSameLine:{category:"Common",type:"boolean",default:!1,description:"Put > of opening tags on the last line instead of on a new line."},singleAttributePerLine:{category:"Common",type:"boolean",default:!1,description:"Enforce single attribute per line in HTML, Vue and JSX."}};var wt="JavaScript",im={arrowParens:{category:wt,type:"choice",default:"always",description:"Include parentheses around a sole arrow function parameter.",choices:[{value:"always",description:"Always include parens. Example: `(x) => x`"},{value:"avoid",description:"Omit parens when possible. Example: `x => x`"}]},bracketSameLine:Er.bracketSameLine,bracketSpacing:Er.bracketSpacing,jsxBracketSameLine:{category:wt,type:"boolean",description:"Put > on the last line instead of at a new line.",deprecated:"2.4.0"},semi:{category:wt,type:"boolean",default:!0,description:"Print semicolons.",oppositeDescription:"Do not print semicolons, except at the beginning of lines which may need them."},experimentalTernaries:{category:wt,type:"boolean",default:!1,description:"Use curious ternaries, with the question mark after the condition.",oppositeDescription:"Default behavior of ternaries; keep question marks on the same line as the consequent."},singleQuote:Er.singleQuote,jsxSingleQuote:{category:wt,type:"boolean",default:!1,description:"Use single quotes in JSX."},quoteProps:{category:wt,type:"choice",default:"as-needed",description:"Change when properties in objects are quoted.",choices:[{value:"as-needed",description:"Only add quotes around object properties where required."},{value:"consistent",description:"If at least one property in an object requires quotes, quote all properties."},{value:"preserve",description:"Respect the input use of quotes in object properties."}]},trailingComma:{category:wt,type:"choice",default:"all",description:"Print trailing commas wherever possible when multi-line.",choices:[{value:"all",description:"Trailing commas wherever possible (including function arguments)."},{value:"es5",description:"Trailing commas where valid in ES5 (objects, arrays, etc.)"},{value:"none",description:"No trailing commas."}]},singleAttributePerLine:Er.singleAttributePerLine},Ja=im;var am={estree:ws,"estree-json":Os},om=[...Us,..._a];var rx=_s;

    const basicNormalize = typeof String.prototype.normalize == "function"
        ? x => x.normalize("NFKD") : x => x;
    /**
    A search cursor provides an iterator over text matches in a
    document.
    */
    class SearchCursor {
        /**
        Create a text cursor. The query is the search string, `from` to
        `to` provides the region to search.

        When `normalize` is given, it will be called, on both the query
        string and the content it is matched against, before comparing.
        You can, for example, create a case-insensitive search by
        passing `s => s.toLowerCase()`.

        Text is always normalized with
        [`.normalize("NFKD")`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/normalize)
        (when supported).
        */
        constructor(text, query, from = 0, to = text.length, normalize, test) {
            this.test = test;
            /**
            The current match (only holds a meaningful value after
            [`next`](https://codemirror.net/6/docs/ref/#search.SearchCursor.next) has been called and when
            `done` is false).
            */
            this.value = { from: 0, to: 0 };
            /**
            Whether the end of the iterated region has been reached.
            */
            this.done = false;
            this.matches = [];
            this.buffer = "";
            this.bufferPos = 0;
            this.iter = text.iterRange(from, to);
            this.bufferStart = from;
            this.normalize = normalize ? x => normalize(basicNormalize(x)) : basicNormalize;
            this.query = this.normalize(query);
        }
        peek() {
            if (this.bufferPos == this.buffer.length) {
                this.bufferStart += this.buffer.length;
                this.iter.next();
                if (this.iter.done)
                    return -1;
                this.bufferPos = 0;
                this.buffer = this.iter.value;
            }
            return codePointAt(this.buffer, this.bufferPos);
        }
        /**
        Look for the next match. Updates the iterator's
        [`value`](https://codemirror.net/6/docs/ref/#search.SearchCursor.value) and
        [`done`](https://codemirror.net/6/docs/ref/#search.SearchCursor.done) properties. Should be called
        at least once before using the cursor.
        */
        next() {
            while (this.matches.length)
                this.matches.pop();
            return this.nextOverlapping();
        }
        /**
        The `next` method will ignore matches that partially overlap a
        previous match. This method behaves like `next`, but includes
        such matches.
        */
        nextOverlapping() {
            for (;;) {
                let next = this.peek();
                if (next < 0) {
                    this.done = true;
                    return this;
                }
                let str = fromCodePoint(next), start = this.bufferStart + this.bufferPos;
                this.bufferPos += codePointSize(next);
                let norm = this.normalize(str);
                if (norm.length)
                    for (let i = 0, pos = start;; i++) {
                        let code = norm.charCodeAt(i);
                        let match = this.match(code, pos, this.bufferPos + this.bufferStart);
                        if (i == norm.length - 1) {
                            if (match) {
                                this.value = match;
                                return this;
                            }
                            break;
                        }
                        if (pos == start && i < str.length && str.charCodeAt(i) == code)
                            pos++;
                    }
            }
        }
        match(code, pos, end) {
            let match = null;
            for (let i = 0; i < this.matches.length; i += 2) {
                let index = this.matches[i], keep = false;
                if (this.query.charCodeAt(index) == code) {
                    if (index == this.query.length - 1) {
                        match = { from: this.matches[i + 1], to: end };
                    }
                    else {
                        this.matches[i]++;
                        keep = true;
                    }
                }
                if (!keep) {
                    this.matches.splice(i, 2);
                    i -= 2;
                }
            }
            if (this.query.charCodeAt(0) == code) {
                if (this.query.length == 1)
                    match = { from: pos, to: end };
                else
                    this.matches.push(1, pos);
            }
            if (match && this.test && !this.test(match.from, match.to, this.buffer, this.bufferStart))
                match = null;
            return match;
        }
    }
    if (typeof Symbol != "undefined")
        SearchCursor.prototype[Symbol.iterator] = function () { return this; };

    const defaultHighlightOptions = {
        highlightWordAroundCursor: false,
        minSelectionLength: 1,
        maxMatches: 100,
        wholeWords: false
    };
    const highlightConfig = /*@__PURE__*/Facet.define({
        combine(options) {
            return combineConfig(options, defaultHighlightOptions, {
                highlightWordAroundCursor: (a, b) => a || b,
                minSelectionLength: Math.min,
                maxMatches: Math.min
            });
        }
    });
    /**
    This extension highlights text that matches the selection. It uses
    the `"cm-selectionMatch"` class for the highlighting. When
    `highlightWordAroundCursor` is enabled, the word at the cursor
    itself will be highlighted with `"cm-selectionMatch-main"`.
    */
    function highlightSelectionMatches(options) {
        let ext = [defaultTheme, matchHighlighter];
        return ext;
    }
    const matchDeco = /*@__PURE__*/Decoration.mark({ class: "cm-selectionMatch" });
    const mainMatchDeco = /*@__PURE__*/Decoration.mark({ class: "cm-selectionMatch cm-selectionMatch-main" });
    // Whether the characters directly outside the given positions are non-word characters
    function insideWordBoundaries(check, state, from, to) {
        return (from == 0 || check(state.sliceDoc(from - 1, from)) != CharCategory.Word) &&
            (to == state.doc.length || check(state.sliceDoc(to, to + 1)) != CharCategory.Word);
    }
    // Whether the characters directly at the given positions are word characters
    function insideWord(check, state, from, to) {
        return check(state.sliceDoc(from, from + 1)) == CharCategory.Word
            && check(state.sliceDoc(to - 1, to)) == CharCategory.Word;
    }
    const matchHighlighter = /*@__PURE__*/ViewPlugin.fromClass(class {
        constructor(view) {
            this.decorations = this.getDeco(view);
        }
        update(update) {
            if (update.selectionSet || update.docChanged || update.viewportChanged)
                this.decorations = this.getDeco(update.view);
        }
        getDeco(view) {
            let conf = view.state.facet(highlightConfig);
            let { state } = view, sel = state.selection;
            if (sel.ranges.length > 1)
                return Decoration.none;
            let range = sel.main, query, check = null;
            if (range.empty) {
                if (!conf.highlightWordAroundCursor)
                    return Decoration.none;
                let word = state.wordAt(range.head);
                if (!word)
                    return Decoration.none;
                check = state.charCategorizer(range.head);
                query = state.sliceDoc(word.from, word.to);
            }
            else {
                let len = range.to - range.from;
                if (len < conf.minSelectionLength || len > 200)
                    return Decoration.none;
                if (conf.wholeWords) {
                    query = state.sliceDoc(range.from, range.to); // TODO: allow and include leading/trailing space?
                    check = state.charCategorizer(range.head);
                    if (!(insideWordBoundaries(check, state, range.from, range.to) &&
                        insideWord(check, state, range.from, range.to)))
                        return Decoration.none;
                }
                else {
                    query = state.sliceDoc(range.from, range.to);
                    if (!query)
                        return Decoration.none;
                }
            }
            let deco = [];
            for (let part of view.visibleRanges) {
                let cursor = new SearchCursor(state.doc, query, part.from, part.to);
                while (!cursor.next().done) {
                    let { from, to } = cursor.value;
                    if (!check || insideWordBoundaries(check, state, from, to)) {
                        if (range.empty && from <= range.from && to >= range.to)
                            deco.push(mainMatchDeco.range(from, to));
                        else if (from >= range.to || to <= range.from)
                            deco.push(matchDeco.range(from, to));
                        if (deco.length > conf.maxMatches)
                            return Decoration.none;
                    }
                }
            }
            return Decoration.set(deco);
        }
    }, {
        decorations: v => v.decorations
    });
    const defaultTheme = /*@__PURE__*/EditorView.baseTheme({
        ".cm-selectionMatch": { backgroundColor: "#99ff7780" },
        ".cm-searchMatch .cm-selectionMatch": { backgroundColor: "transparent" }
    });

    /**
    Comment or uncomment the current selection. Will use line comments
    if available, otherwise falling back to block comments.
    */
    const toggleComment = target => {
        let { state } = target, line = state.doc.lineAt(state.selection.main.from), config = getConfig(target.state, line.from);
        return config.line ? toggleLineComment(target) : config.block ? toggleBlockCommentByLine(target) : false;
    };
    function command(f, option) {
        return ({ state, dispatch }) => {
            if (state.readOnly)
                return false;
            let tr = f(option, state);
            if (!tr)
                return false;
            dispatch(state.update(tr));
            return true;
        };
    }
    /**
    Comment or uncomment the current selection using line comments.
    The line comment syntax is taken from the
    [`commentTokens`](https://codemirror.net/6/docs/ref/#commands.CommentTokens) [language
    data](https://codemirror.net/6/docs/ref/#state.EditorState.languageDataAt).
    */
    const toggleLineComment = /*@__PURE__*/command(changeLineComment, 0 /* CommentOption.Toggle */);
    /**
    Comment or uncomment the current selection using block comments.
    The block comment syntax is taken from the
    [`commentTokens`](https://codemirror.net/6/docs/ref/#commands.CommentTokens) [language
    data](https://codemirror.net/6/docs/ref/#state.EditorState.languageDataAt).
    */
    const toggleBlockComment = /*@__PURE__*/command(changeBlockComment, 0 /* CommentOption.Toggle */);
    /**
    Comment or uncomment the lines around the current selection using
    block comments.
    */
    const toggleBlockCommentByLine = /*@__PURE__*/command((o, s) => changeBlockComment(o, s, selectedLineRanges(s)), 0 /* CommentOption.Toggle */);
    function getConfig(state, pos) {
        let data = state.languageDataAt("commentTokens", pos);
        return data.length ? data[0] : {};
    }
    const SearchMargin = 50;
    /**
    Determines if the given range is block-commented in the given
    state.
    */
    function findBlockComment(state, { open, close }, from, to) {
        let textBefore = state.sliceDoc(from - SearchMargin, from);
        let textAfter = state.sliceDoc(to, to + SearchMargin);
        let spaceBefore = /\s*$/.exec(textBefore)[0].length, spaceAfter = /^\s*/.exec(textAfter)[0].length;
        let beforeOff = textBefore.length - spaceBefore;
        if (textBefore.slice(beforeOff - open.length, beforeOff) == open &&
            textAfter.slice(spaceAfter, spaceAfter + close.length) == close) {
            return { open: { pos: from - spaceBefore, margin: spaceBefore && 1 },
                close: { pos: to + spaceAfter, margin: spaceAfter && 1 } };
        }
        let startText, endText;
        if (to - from <= 2 * SearchMargin) {
            startText = endText = state.sliceDoc(from, to);
        }
        else {
            startText = state.sliceDoc(from, from + SearchMargin);
            endText = state.sliceDoc(to - SearchMargin, to);
        }
        let startSpace = /^\s*/.exec(startText)[0].length, endSpace = /\s*$/.exec(endText)[0].length;
        let endOff = endText.length - endSpace - close.length;
        if (startText.slice(startSpace, startSpace + open.length) == open &&
            endText.slice(endOff, endOff + close.length) == close) {
            return { open: { pos: from + startSpace + open.length,
                    margin: /\s/.test(startText.charAt(startSpace + open.length)) ? 1 : 0 },
                close: { pos: to - endSpace - close.length,
                    margin: /\s/.test(endText.charAt(endOff - 1)) ? 1 : 0 } };
        }
        return null;
    }
    function selectedLineRanges(state) {
        let ranges = [];
        for (let r of state.selection.ranges) {
            let fromLine = state.doc.lineAt(r.from);
            let toLine = r.to <= fromLine.to ? fromLine : state.doc.lineAt(r.to);
            if (toLine.from > fromLine.from && toLine.from == r.to)
                toLine = r.to == fromLine.to + 1 ? fromLine : state.doc.lineAt(r.to - 1);
            let last = ranges.length - 1;
            if (last >= 0 && ranges[last].to > fromLine.from)
                ranges[last].to = toLine.to;
            else
                ranges.push({ from: fromLine.from + /^\s*/.exec(fromLine.text)[0].length, to: toLine.to });
        }
        return ranges;
    }
    // Performs toggle, comment and uncomment of block comments in
    // languages that support them.
    function changeBlockComment(option, state, ranges = state.selection.ranges) {
        let tokens = ranges.map(r => getConfig(state, r.from).block);
        if (!tokens.every(c => c))
            return null;
        let comments = ranges.map((r, i) => findBlockComment(state, tokens[i], r.from, r.to));
        if (option != 2 /* CommentOption.Uncomment */ && !comments.every(c => c)) {
            return { changes: state.changes(ranges.map((range, i) => {
                    if (comments[i])
                        return [];
                    return [{ from: range.from, insert: tokens[i].open + " " }, { from: range.to, insert: " " + tokens[i].close }];
                })) };
        }
        else if (option != 1 /* CommentOption.Comment */ && comments.some(c => c)) {
            let changes = [];
            for (let i = 0, comment; i < comments.length; i++)
                if (comment = comments[i]) {
                    let token = tokens[i], { open, close } = comment;
                    changes.push({ from: open.pos - token.open.length, to: open.pos + open.margin }, { from: close.pos - close.margin, to: close.pos + token.close.length });
                }
            return { changes };
        }
        return null;
    }
    // Performs toggle, comment and uncomment of line comments.
    function changeLineComment(option, state, ranges = state.selection.ranges) {
        let lines = [];
        let prevLine = -1;
        for (let { from, to } of ranges) {
            let startI = lines.length, minIndent = 1e9;
            let token = getConfig(state, from).line;
            if (!token)
                continue;
            for (let pos = from; pos <= to;) {
                let line = state.doc.lineAt(pos);
                if (line.from > prevLine && (from == to || to > line.from)) {
                    prevLine = line.from;
                    let indent = /^\s*/.exec(line.text)[0].length;
                    let empty = indent == line.length;
                    let comment = line.text.slice(indent, indent + token.length) == token ? indent : -1;
                    if (indent < line.text.length && indent < minIndent)
                        minIndent = indent;
                    lines.push({ line, comment, token, indent, empty, single: false });
                }
                pos = line.to + 1;
            }
            if (minIndent < 1e9)
                for (let i = startI; i < lines.length; i++)
                    if (lines[i].indent < lines[i].line.text.length)
                        lines[i].indent = minIndent;
            if (lines.length == startI + 1)
                lines[startI].single = true;
        }
        if (option != 2 /* CommentOption.Uncomment */ && lines.some(l => l.comment < 0 && (!l.empty || l.single))) {
            let changes = [];
            for (let { line, token, indent, empty, single } of lines)
                if (single || !empty)
                    changes.push({ from: line.from + indent, insert: token + " " });
            let changeSet = state.changes(changes);
            return { changes: changeSet, selection: state.selection.map(changeSet, 1) };
        }
        else if (option != 1 /* CommentOption.Comment */ && lines.some(l => l.comment >= 0)) {
            let changes = [];
            for (let { line, comment, token } of lines)
                if (comment >= 0) {
                    let from = line.from + comment, to = from + token.length;
                    if (line.text[to - line.from] == " ")
                        to++;
                    changes.push({ from, to });
                }
            return { changes };
        }
        return null;
    }

    const fromHistory = /*@__PURE__*/Annotation.define();
    /**
    Transaction annotation that will prevent that transaction from
    being combined with other transactions in the undo history. Given
    `"before"`, it'll prevent merging with previous transactions. With
    `"after"`, subsequent transactions won't be combined with this
    one. With `"full"`, the transaction is isolated on both sides.
    */
    const isolateHistory = /*@__PURE__*/Annotation.define();
    /**
    This facet provides a way to register functions that, given a
    transaction, provide a set of effects that the history should
    store when inverting the transaction. This can be used to
    integrate some kinds of effects in the history, so that they can
    be undone (and redone again).
    */
    const invertedEffects = /*@__PURE__*/Facet.define();
    const historyConfig = /*@__PURE__*/Facet.define({
        combine(configs) {
            return combineConfig(configs, {
                minDepth: 100,
                newGroupDelay: 500,
                joinToEvent: (_t, isAdjacent) => isAdjacent,
            }, {
                minDepth: Math.max,
                newGroupDelay: Math.min,
                joinToEvent: (a, b) => (tr, adj) => a(tr, adj) || b(tr, adj)
            });
        }
    });
    const historyField_ = /*@__PURE__*/StateField.define({
        create() {
            return HistoryState.empty;
        },
        update(state, tr) {
            let config = tr.state.facet(historyConfig);
            let fromHist = tr.annotation(fromHistory);
            if (fromHist) {
                let item = HistEvent.fromTransaction(tr, fromHist.selection), from = fromHist.side;
                let other = from == 0 /* BranchName.Done */ ? state.undone : state.done;
                if (item)
                    other = updateBranch(other, other.length, config.minDepth, item);
                else
                    other = addSelection(other, tr.startState.selection);
                return new HistoryState(from == 0 /* BranchName.Done */ ? fromHist.rest : other, from == 0 /* BranchName.Done */ ? other : fromHist.rest);
            }
            let isolate = tr.annotation(isolateHistory);
            if (isolate == "full" || isolate == "before")
                state = state.isolate();
            if (tr.annotation(Transaction.addToHistory) === false)
                return !tr.changes.empty ? state.addMapping(tr.changes.desc) : state;
            let event = HistEvent.fromTransaction(tr);
            let time = tr.annotation(Transaction.time), userEvent = tr.annotation(Transaction.userEvent);
            if (event)
                state = state.addChanges(event, time, userEvent, config, tr);
            else if (tr.selection)
                state = state.addSelection(tr.startState.selection, time, userEvent, config.newGroupDelay);
            if (isolate == "full" || isolate == "after")
                state = state.isolate();
            return state;
        },
        toJSON(value) {
            return { done: value.done.map(e => e.toJSON()), undone: value.undone.map(e => e.toJSON()) };
        },
        fromJSON(json) {
            return new HistoryState(json.done.map(HistEvent.fromJSON), json.undone.map(HistEvent.fromJSON));
        }
    });
    /**
    Create a history extension with the given configuration.
    */
    function history(config = {}) {
        return [
            historyField_,
            historyConfig.of(config),
            EditorView.domEventHandlers({
                beforeinput(e, view) {
                    let command = e.inputType == "historyUndo" ? undo : e.inputType == "historyRedo" ? redo : null;
                    if (!command)
                        return false;
                    e.preventDefault();
                    return command(view);
                }
            })
        ];
    }
    function cmd(side, selection) {
        return function ({ state, dispatch }) {
            if (!selection && state.readOnly)
                return false;
            let historyState = state.field(historyField_, false);
            if (!historyState)
                return false;
            let tr = historyState.pop(side, state, selection);
            if (!tr)
                return false;
            dispatch(tr);
            return true;
        };
    }
    /**
    Undo a single group of history events. Returns false if no group
    was available.
    */
    const undo = /*@__PURE__*/cmd(0 /* BranchName.Done */, false);
    /**
    Redo a group of history events. Returns false if no group was
    available.
    */
    const redo = /*@__PURE__*/cmd(1 /* BranchName.Undone */, false);
    // History events store groups of changes or effects that need to be
    // undone/redone together.
    class HistEvent {
        constructor(
        // The changes in this event. Normal events hold at least one
        // change or effect. But it may be necessary to store selection
        // events before the first change, in which case a special type of
        // instance is created which doesn't hold any changes, with
        // changes == startSelection == undefined
        changes,
        // The effects associated with this event
        effects,
        // Accumulated mapping (from addToHistory==false) that should be
        // applied to events below this one.
        mapped,
        // The selection before this event
        startSelection,
        // Stores selection changes after this event, to be used for
        // selection undo/redo.
        selectionsAfter) {
            this.changes = changes;
            this.effects = effects;
            this.mapped = mapped;
            this.startSelection = startSelection;
            this.selectionsAfter = selectionsAfter;
        }
        setSelAfter(after) {
            return new HistEvent(this.changes, this.effects, this.mapped, this.startSelection, after);
        }
        toJSON() {
            var _a, _b, _c;
            return {
                changes: (_a = this.changes) === null || _a === void 0 ? void 0 : _a.toJSON(),
                mapped: (_b = this.mapped) === null || _b === void 0 ? void 0 : _b.toJSON(),
                startSelection: (_c = this.startSelection) === null || _c === void 0 ? void 0 : _c.toJSON(),
                selectionsAfter: this.selectionsAfter.map(s => s.toJSON())
            };
        }
        static fromJSON(json) {
            return new HistEvent(json.changes && ChangeSet.fromJSON(json.changes), [], json.mapped && ChangeDesc.fromJSON(json.mapped), json.startSelection && EditorSelection.fromJSON(json.startSelection), json.selectionsAfter.map(EditorSelection.fromJSON));
        }
        // This does not check `addToHistory` and such, it assumes the
        // transaction needs to be converted to an item. Returns null when
        // there are no changes or effects in the transaction.
        static fromTransaction(tr, selection) {
            let effects = none;
            for (let invert of tr.startState.facet(invertedEffects)) {
                let result = invert(tr);
                if (result.length)
                    effects = effects.concat(result);
            }
            if (!effects.length && tr.changes.empty)
                return null;
            return new HistEvent(tr.changes.invert(tr.startState.doc), effects, undefined, selection || tr.startState.selection, none);
        }
        static selection(selections) {
            return new HistEvent(undefined, none, undefined, undefined, selections);
        }
    }
    function updateBranch(branch, to, maxLen, newEvent) {
        let start = to + 1 > maxLen + 20 ? to - maxLen - 1 : 0;
        let newBranch = branch.slice(start, to);
        newBranch.push(newEvent);
        return newBranch;
    }
    function isAdjacent(a, b) {
        let ranges = [], isAdjacent = false;
        a.iterChangedRanges((f, t) => ranges.push(f, t));
        b.iterChangedRanges((_f, _t, f, t) => {
            for (let i = 0; i < ranges.length;) {
                let from = ranges[i++], to = ranges[i++];
                if (t >= from && f <= to)
                    isAdjacent = true;
            }
        });
        return isAdjacent;
    }
    function eqSelectionShape(a, b) {
        return a.ranges.length == b.ranges.length &&
            a.ranges.filter((r, i) => r.empty != b.ranges[i].empty).length === 0;
    }
    function conc(a, b) {
        return !a.length ? b : !b.length ? a : a.concat(b);
    }
    const none = [];
    const MaxSelectionsPerEvent = 200;
    function addSelection(branch, selection) {
        if (!branch.length) {
            return [HistEvent.selection([selection])];
        }
        else {
            let lastEvent = branch[branch.length - 1];
            let sels = lastEvent.selectionsAfter.slice(Math.max(0, lastEvent.selectionsAfter.length - MaxSelectionsPerEvent));
            if (sels.length && sels[sels.length - 1].eq(selection))
                return branch;
            sels.push(selection);
            return updateBranch(branch, branch.length - 1, 1e9, lastEvent.setSelAfter(sels));
        }
    }
    // Assumes the top item has one or more selectionAfter values
    function popSelection(branch) {
        let last = branch[branch.length - 1];
        let newBranch = branch.slice();
        newBranch[branch.length - 1] = last.setSelAfter(last.selectionsAfter.slice(0, last.selectionsAfter.length - 1));
        return newBranch;
    }
    // Add a mapping to the top event in the given branch. If this maps
    // away all the changes and effects in that item, drop it and
    // propagate the mapping to the next item.
    function addMappingToBranch(branch, mapping) {
        if (!branch.length)
            return branch;
        let length = branch.length, selections = none;
        while (length) {
            let event = mapEvent(branch[length - 1], mapping, selections);
            if (event.changes && !event.changes.empty || event.effects.length) { // Event survived mapping
                let result = branch.slice(0, length);
                result[length - 1] = event;
                return result;
            }
            else { // Drop this event, since there's no changes or effects left
                mapping = event.mapped;
                length--;
                selections = event.selectionsAfter;
            }
        }
        return selections.length ? [HistEvent.selection(selections)] : none;
    }
    function mapEvent(event, mapping, extraSelections) {
        let selections = conc(event.selectionsAfter.length ? event.selectionsAfter.map(s => s.map(mapping)) : none, extraSelections);
        // Change-less events don't store mappings (they are always the last event in a branch)
        if (!event.changes)
            return HistEvent.selection(selections);
        let mappedChanges = event.changes.map(mapping), before = mapping.mapDesc(event.changes, true);
        let fullMapping = event.mapped ? event.mapped.composeDesc(before) : before;
        return new HistEvent(mappedChanges, StateEffect.mapEffects(event.effects, mapping), fullMapping, event.startSelection.map(before), selections);
    }
    const joinableUserEvent = /^(input\.type|delete)($|\.)/;
    class HistoryState {
        constructor(done, undone, prevTime = 0, prevUserEvent = undefined) {
            this.done = done;
            this.undone = undone;
            this.prevTime = prevTime;
            this.prevUserEvent = prevUserEvent;
        }
        isolate() {
            return this.prevTime ? new HistoryState(this.done, this.undone) : this;
        }
        addChanges(event, time, userEvent, config, tr) {
            let done = this.done, lastEvent = done[done.length - 1];
            if (lastEvent && lastEvent.changes && !lastEvent.changes.empty && event.changes &&
                (!userEvent || joinableUserEvent.test(userEvent)) &&
                ((!lastEvent.selectionsAfter.length &&
                    time - this.prevTime < config.newGroupDelay &&
                    config.joinToEvent(tr, isAdjacent(lastEvent.changes, event.changes))) ||
                    // For compose (but not compose.start) events, always join with previous event
                    userEvent == "input.type.compose")) {
                done = updateBranch(done, done.length - 1, config.minDepth, new HistEvent(event.changes.compose(lastEvent.changes), conc(StateEffect.mapEffects(event.effects, lastEvent.changes), lastEvent.effects), lastEvent.mapped, lastEvent.startSelection, none));
            }
            else {
                done = updateBranch(done, done.length, config.minDepth, event);
            }
            return new HistoryState(done, none, time, userEvent);
        }
        addSelection(selection, time, userEvent, newGroupDelay) {
            let last = this.done.length ? this.done[this.done.length - 1].selectionsAfter : none;
            if (last.length > 0 &&
                time - this.prevTime < newGroupDelay &&
                userEvent == this.prevUserEvent && userEvent && /^select($|\.)/.test(userEvent) &&
                eqSelectionShape(last[last.length - 1], selection))
                return this;
            return new HistoryState(addSelection(this.done, selection), this.undone, time, userEvent);
        }
        addMapping(mapping) {
            return new HistoryState(addMappingToBranch(this.done, mapping), addMappingToBranch(this.undone, mapping), this.prevTime, this.prevUserEvent);
        }
        pop(side, state, onlySelection) {
            let branch = side == 0 /* BranchName.Done */ ? this.done : this.undone;
            if (branch.length == 0)
                return null;
            let event = branch[branch.length - 1], selection = event.selectionsAfter[0] || state.selection;
            if (onlySelection && event.selectionsAfter.length) {
                return state.update({
                    selection: event.selectionsAfter[event.selectionsAfter.length - 1],
                    annotations: fromHistory.of({ side, rest: popSelection(branch), selection }),
                    userEvent: side == 0 /* BranchName.Done */ ? "select.undo" : "select.redo",
                    scrollIntoView: true
                });
            }
            else if (!event.changes) {
                return null;
            }
            else {
                let rest = branch.length == 1 ? none : branch.slice(0, branch.length - 1);
                if (event.mapped)
                    rest = addMappingToBranch(rest, event.mapped);
                return state.update({
                    changes: event.changes,
                    selection: event.startSelection,
                    effects: event.effects,
                    annotations: fromHistory.of({ side, rest, selection }),
                    filter: false,
                    userEvent: side == 0 /* BranchName.Done */ ? "undo" : "redo",
                    scrollIntoView: true
                });
            }
        }
    }
    HistoryState.empty = /*@__PURE__*/new HistoryState(none, none);

    function updateSel(sel, by) {
        return EditorSelection.create(sel.ranges.map(by), sel.mainIndex);
    }
    function setSel(state, selection) {
        return state.update({ selection, scrollIntoView: true, userEvent: "select" });
    }
    function moveSel({ state, dispatch }, how) {
        let selection = updateSel(state.selection, how);
        if (selection.eq(state.selection, true))
            return false;
        dispatch(setSel(state, selection));
        return true;
    }
    function rangeEnd(range, forward) {
        return EditorSelection.cursor(forward ? range.to : range.from);
    }
    function cursorByChar(view, forward) {
        return moveSel(view, range => range.empty ? view.moveByChar(range, forward) : rangeEnd(range, forward));
    }
    function ltrAtCursor(view) {
        return view.textDirectionAt(view.state.selection.main.head) == Direction.LTR;
    }
    /**
    Move the selection one character to the left (which is backward in
    left-to-right text, forward in right-to-left text).
    */
    const cursorCharLeft = view => cursorByChar(view, !ltrAtCursor(view));
    /**
    Move the selection one character to the right.
    */
    const cursorCharRight = view => cursorByChar(view, ltrAtCursor(view));
    function cursorByGroup(view, forward) {
        return moveSel(view, range => range.empty ? view.moveByGroup(range, forward) : rangeEnd(range, forward));
    }
    /**
    Move the selection to the left across one group of word or
    non-word (but also non-space) characters.
    */
    const cursorGroupLeft = view => cursorByGroup(view, !ltrAtCursor(view));
    /**
    Move the selection one group to the right.
    */
    const cursorGroupRight = view => cursorByGroup(view, ltrAtCursor(view));
    function interestingNode(state, node, bracketProp) {
        if (node.type.prop(bracketProp))
            return true;
        let len = node.to - node.from;
        return len && (len > 2 || /[^\s,.;:]/.test(state.sliceDoc(node.from, node.to))) || node.firstChild;
    }
    function moveBySyntax(state, start, forward) {
        let pos = syntaxTree(state).resolveInner(start.head);
        let bracketProp = forward ? NodeProp.closedBy : NodeProp.openedBy;
        // Scan forward through child nodes to see if there's an interesting
        // node ahead.
        for (let at = start.head;;) {
            let next = forward ? pos.childAfter(at) : pos.childBefore(at);
            if (!next)
                break;
            if (interestingNode(state, next, bracketProp))
                pos = next;
            else
                at = forward ? next.to : next.from;
        }
        let bracket = pos.type.prop(bracketProp), match, newPos;
        if (bracket && (match = forward ? matchBrackets(state, pos.from, 1) : matchBrackets(state, pos.to, -1)) && match.matched)
            newPos = forward ? match.end.to : match.end.from;
        else
            newPos = forward ? pos.to : pos.from;
        return EditorSelection.cursor(newPos, forward ? -1 : 1);
    }
    /**
    Move the cursor over the next syntactic element to the left.
    */
    const cursorSyntaxLeft = view => moveSel(view, range => moveBySyntax(view.state, range, !ltrAtCursor(view)));
    /**
    Move the cursor over the next syntactic element to the right.
    */
    const cursorSyntaxRight = view => moveSel(view, range => moveBySyntax(view.state, range, ltrAtCursor(view)));
    function cursorByLine(view, forward) {
        return moveSel(view, range => {
            if (!range.empty)
                return rangeEnd(range, forward);
            let moved = view.moveVertically(range, forward);
            return moved.head != range.head ? moved : view.moveToLineBoundary(range, forward);
        });
    }
    /**
    Move the selection one line up.
    */
    const cursorLineUp = view => cursorByLine(view, false);
    /**
    Move the selection one line down.
    */
    const cursorLineDown = view => cursorByLine(view, true);
    function pageInfo(view) {
        let selfScroll = view.scrollDOM.clientHeight < view.scrollDOM.scrollHeight - 2;
        let marginTop = 0, marginBottom = 0, height;
        if (selfScroll) {
            for (let source of view.state.facet(EditorView.scrollMargins)) {
                let margins = source(view);
                if (margins === null || margins === void 0 ? void 0 : margins.top)
                    marginTop = Math.max(margins === null || margins === void 0 ? void 0 : margins.top, marginTop);
                if (margins === null || margins === void 0 ? void 0 : margins.bottom)
                    marginBottom = Math.max(margins === null || margins === void 0 ? void 0 : margins.bottom, marginBottom);
            }
            height = view.scrollDOM.clientHeight - marginTop - marginBottom;
        }
        else {
            height = (view.dom.ownerDocument.defaultView || window).innerHeight;
        }
        return { marginTop, marginBottom, selfScroll,
            height: Math.max(view.defaultLineHeight, height - 5) };
    }
    function cursorByPage(view, forward) {
        let page = pageInfo(view);
        let { state } = view, selection = updateSel(state.selection, range => {
            return range.empty ? view.moveVertically(range, forward, page.height)
                : rangeEnd(range, forward);
        });
        if (selection.eq(state.selection))
            return false;
        let effect;
        if (page.selfScroll) {
            let startPos = view.coordsAtPos(state.selection.main.head);
            let scrollRect = view.scrollDOM.getBoundingClientRect();
            let scrollTop = scrollRect.top + page.marginTop, scrollBottom = scrollRect.bottom - page.marginBottom;
            if (startPos && startPos.top > scrollTop && startPos.bottom < scrollBottom)
                effect = EditorView.scrollIntoView(selection.main.head, { y: "start", yMargin: startPos.top - scrollTop });
        }
        view.dispatch(setSel(state, selection), { effects: effect });
        return true;
    }
    /**
    Move the selection one page up.
    */
    const cursorPageUp = view => cursorByPage(view, false);
    /**
    Move the selection one page down.
    */
    const cursorPageDown = view => cursorByPage(view, true);
    function moveByLineBoundary(view, start, forward) {
        let line = view.lineBlockAt(start.head), moved = view.moveToLineBoundary(start, forward);
        if (moved.head == start.head && moved.head != (forward ? line.to : line.from))
            moved = view.moveToLineBoundary(start, forward, false);
        if (!forward && moved.head == line.from && line.length) {
            let space = /^\s*/.exec(view.state.sliceDoc(line.from, Math.min(line.from + 100, line.to)))[0].length;
            if (space && start.head != line.from + space)
                moved = EditorSelection.cursor(line.from + space);
        }
        return moved;
    }
    /**
    Move the selection to the next line wrap point, or to the end of
    the line if there isn't one left on this line.
    */
    const cursorLineBoundaryForward = view => moveSel(view, range => moveByLineBoundary(view, range, true));
    /**
    Move the selection to previous line wrap point, or failing that to
    the start of the line. If the line is indented, and the cursor
    isn't already at the end of the indentation, this will move to the
    end of the indentation instead of the start of the line.
    */
    const cursorLineBoundaryBackward = view => moveSel(view, range => moveByLineBoundary(view, range, false));
    /**
    Move the selection one line wrap point to the left.
    */
    const cursorLineBoundaryLeft = view => moveSel(view, range => moveByLineBoundary(view, range, !ltrAtCursor(view)));
    /**
    Move the selection one line wrap point to the right.
    */
    const cursorLineBoundaryRight = view => moveSel(view, range => moveByLineBoundary(view, range, ltrAtCursor(view)));
    /**
    Move the selection to the start of the line.
    */
    const cursorLineStart = view => moveSel(view, range => EditorSelection.cursor(view.lineBlockAt(range.head).from, 1));
    /**
    Move the selection to the end of the line.
    */
    const cursorLineEnd = view => moveSel(view, range => EditorSelection.cursor(view.lineBlockAt(range.head).to, -1));
    function toMatchingBracket(state, dispatch, extend) {
        let found = false, selection = updateSel(state.selection, range => {
            let matching = matchBrackets(state, range.head, -1)
                || matchBrackets(state, range.head, 1)
                || (range.head > 0 && matchBrackets(state, range.head - 1, 1))
                || (range.head < state.doc.length && matchBrackets(state, range.head + 1, -1));
            if (!matching || !matching.end)
                return range;
            found = true;
            let head = matching.start.from == range.head ? matching.end.to : matching.end.from;
            return EditorSelection.cursor(head);
        });
        if (!found)
            return false;
        dispatch(setSel(state, selection));
        return true;
    }
    /**
    Move the selection to the bracket matching the one it is currently
    on, if any.
    */
    const cursorMatchingBracket = ({ state, dispatch }) => toMatchingBracket(state, dispatch);
    function extendSel(target, how) {
        let selection = updateSel(target.state.selection, range => {
            let head = how(range);
            return EditorSelection.range(range.anchor, head.head, head.goalColumn, head.bidiLevel || undefined);
        });
        if (selection.eq(target.state.selection))
            return false;
        target.dispatch(setSel(target.state, selection));
        return true;
    }
    function selectByChar(view, forward) {
        return extendSel(view, range => view.moveByChar(range, forward));
    }
    /**
    Move the selection head one character to the left, while leaving
    the anchor in place.
    */
    const selectCharLeft = view => selectByChar(view, !ltrAtCursor(view));
    /**
    Move the selection head one character to the right.
    */
    const selectCharRight = view => selectByChar(view, ltrAtCursor(view));
    function selectByGroup(view, forward) {
        return extendSel(view, range => view.moveByGroup(range, forward));
    }
    /**
    Move the selection head one [group](https://codemirror.net/6/docs/ref/#commands.cursorGroupLeft) to
    the left.
    */
    const selectGroupLeft = view => selectByGroup(view, !ltrAtCursor(view));
    /**
    Move the selection head one group to the right.
    */
    const selectGroupRight = view => selectByGroup(view, ltrAtCursor(view));
    /**
    Move the selection head over the next syntactic element to the left.
    */
    const selectSyntaxLeft = view => extendSel(view, range => moveBySyntax(view.state, range, !ltrAtCursor(view)));
    /**
    Move the selection head over the next syntactic element to the right.
    */
    const selectSyntaxRight = view => extendSel(view, range => moveBySyntax(view.state, range, ltrAtCursor(view)));
    function selectByLine(view, forward) {
        return extendSel(view, range => view.moveVertically(range, forward));
    }
    /**
    Move the selection head one line up.
    */
    const selectLineUp = view => selectByLine(view, false);
    /**
    Move the selection head one line down.
    */
    const selectLineDown = view => selectByLine(view, true);
    function selectByPage(view, forward) {
        return extendSel(view, range => view.moveVertically(range, forward, pageInfo(view).height));
    }
    /**
    Move the selection head one page up.
    */
    const selectPageUp = view => selectByPage(view, false);
    /**
    Move the selection head one page down.
    */
    const selectPageDown = view => selectByPage(view, true);
    /**
    Move the selection head to the next line boundary.
    */
    const selectLineBoundaryForward = view => extendSel(view, range => moveByLineBoundary(view, range, true));
    /**
    Move the selection head to the previous line boundary.
    */
    const selectLineBoundaryBackward = view => extendSel(view, range => moveByLineBoundary(view, range, false));
    /**
    Move the selection head one line boundary to the left.
    */
    const selectLineBoundaryLeft = view => extendSel(view, range => moveByLineBoundary(view, range, !ltrAtCursor(view)));
    /**
    Move the selection head one line boundary to the right.
    */
    const selectLineBoundaryRight = view => extendSel(view, range => moveByLineBoundary(view, range, ltrAtCursor(view)));
    /**
    Move the selection head to the start of the line.
    */
    const selectLineStart = view => extendSel(view, range => EditorSelection.cursor(view.lineBlockAt(range.head).from));
    /**
    Move the selection head to the end of the line.
    */
    const selectLineEnd = view => extendSel(view, range => EditorSelection.cursor(view.lineBlockAt(range.head).to));
    /**
    Move the selection to the start of the document.
    */
    const cursorDocStart = ({ state, dispatch }) => {
        dispatch(setSel(state, { anchor: 0 }));
        return true;
    };
    /**
    Move the selection to the end of the document.
    */
    const cursorDocEnd = ({ state, dispatch }) => {
        dispatch(setSel(state, { anchor: state.doc.length }));
        return true;
    };
    /**
    Move the selection head to the start of the document.
    */
    const selectDocStart = ({ state, dispatch }) => {
        dispatch(setSel(state, { anchor: state.selection.main.anchor, head: 0 }));
        return true;
    };
    /**
    Move the selection head to the end of the document.
    */
    const selectDocEnd = ({ state, dispatch }) => {
        dispatch(setSel(state, { anchor: state.selection.main.anchor, head: state.doc.length }));
        return true;
    };
    /**
    Select the entire document.
    */
    const selectAll = ({ state, dispatch }) => {
        dispatch(state.update({ selection: { anchor: 0, head: state.doc.length }, userEvent: "select" }));
        return true;
    };
    /**
    Expand the selection to cover entire lines.
    */
    const selectLine = ({ state, dispatch }) => {
        let ranges = selectedLineBlocks(state).map(({ from, to }) => EditorSelection.range(from, Math.min(to + 1, state.doc.length)));
        dispatch(state.update({ selection: EditorSelection.create(ranges), userEvent: "select" }));
        return true;
    };
    /**
    Select the next syntactic construct that is larger than the
    selection. Note that this will only work insofar as the language
    [provider](https://codemirror.net/6/docs/ref/#language.language) you use builds up a full
    syntax tree.
    */
    const selectParentSyntax = ({ state, dispatch }) => {
        let selection = updateSel(state.selection, range => {
            let tree = syntaxTree(state), stack = tree.resolveStack(range.from, 1);
            if (range.empty) {
                let stackBefore = tree.resolveStack(range.from, -1);
                if (stackBefore.node.from >= stack.node.from && stackBefore.node.to <= stack.node.to)
                    stack = stackBefore;
            }
            for (let cur = stack; cur; cur = cur.next) {
                let { node } = cur;
                if (((node.from < range.from && node.to >= range.to) ||
                    (node.to > range.to && node.from <= range.from)) &&
                    cur.next)
                    return EditorSelection.range(node.to, node.from);
            }
            return range;
        });
        if (selection.eq(state.selection))
            return false;
        dispatch(setSel(state, selection));
        return true;
    };
    /**
    Simplify the current selection. When multiple ranges are selected,
    reduce it to its main range. Otherwise, if the selection is
    non-empty, convert it to a cursor selection.
    */
    const simplifySelection = ({ state, dispatch }) => {
        let cur = state.selection, selection = null;
        if (cur.ranges.length > 1)
            selection = EditorSelection.create([cur.main]);
        else if (!cur.main.empty)
            selection = EditorSelection.create([EditorSelection.cursor(cur.main.head)]);
        if (!selection)
            return false;
        dispatch(setSel(state, selection));
        return true;
    };
    function deleteBy(target, by) {
        if (target.state.readOnly)
            return false;
        let event = "delete.selection", { state } = target;
        let changes = state.changeByRange(range => {
            let { from, to } = range;
            if (from == to) {
                let towards = by(range);
                if (towards < from) {
                    event = "delete.backward";
                    towards = skipAtomic(target, towards, false);
                }
                else if (towards > from) {
                    event = "delete.forward";
                    towards = skipAtomic(target, towards, true);
                }
                from = Math.min(from, towards);
                to = Math.max(to, towards);
            }
            else {
                from = skipAtomic(target, from, false);
                to = skipAtomic(target, to, true);
            }
            return from == to ? { range } : { changes: { from, to }, range: EditorSelection.cursor(from, from < range.head ? -1 : 1) };
        });
        if (changes.changes.empty)
            return false;
        target.dispatch(state.update(changes, {
            scrollIntoView: true,
            userEvent: event,
            effects: event == "delete.selection" ? EditorView.announce.of(state.phrase("Selection deleted")) : undefined
        }));
        return true;
    }
    function skipAtomic(target, pos, forward) {
        if (target instanceof EditorView)
            for (let ranges of target.state.facet(EditorView.atomicRanges).map(f => f(target)))
                ranges.between(pos, pos, (from, to) => {
                    if (from < pos && to > pos)
                        pos = forward ? to : from;
                });
        return pos;
    }
    const deleteByChar = (target, forward, byIndentUnit) => deleteBy(target, range => {
        let pos = range.from, { state } = target, line = state.doc.lineAt(pos), before, targetPos;
        if (byIndentUnit && !forward && pos > line.from && pos < line.from + 200 &&
            !/[^ \t]/.test(before = line.text.slice(0, pos - line.from))) {
            if (before[before.length - 1] == "\t")
                return pos - 1;
            let col = countColumn(before, state.tabSize), drop = col % getIndentUnit(state) || getIndentUnit(state);
            for (let i = 0; i < drop && before[before.length - 1 - i] == " "; i++)
                pos--;
            targetPos = pos;
        }
        else {
            targetPos = findClusterBreak(line.text, pos - line.from, forward, forward) + line.from;
            if (targetPos == pos && line.number != (forward ? state.doc.lines : 1))
                targetPos += forward ? 1 : -1;
            else if (!forward && /[\ufe00-\ufe0f]/.test(line.text.slice(targetPos - line.from, pos - line.from)))
                targetPos = findClusterBreak(line.text, targetPos - line.from, false, false) + line.from;
        }
        return targetPos;
    });
    /**
    Delete the selection, or, for cursor selections, the character or
    indentation unit before the cursor.
    */
    const deleteCharBackward = view => deleteByChar(view, false, true);
    /**
    Delete the selection or the character after the cursor.
    */
    const deleteCharForward = view => deleteByChar(view, true, false);
    const deleteByGroup = (target, forward) => deleteBy(target, range => {
        let pos = range.head, { state } = target, line = state.doc.lineAt(pos);
        let categorize = state.charCategorizer(pos);
        for (let cat = null;;) {
            if (pos == (forward ? line.to : line.from)) {
                if (pos == range.head && line.number != (forward ? state.doc.lines : 1))
                    pos += forward ? 1 : -1;
                break;
            }
            let next = findClusterBreak(line.text, pos - line.from, forward) + line.from;
            let nextChar = line.text.slice(Math.min(pos, next) - line.from, Math.max(pos, next) - line.from);
            let nextCat = categorize(nextChar);
            if (cat != null && nextCat != cat)
                break;
            if (nextChar != " " || pos != range.head)
                cat = nextCat;
            pos = next;
        }
        return pos;
    });
    /**
    Delete the selection or backward until the end of the next
    [group](https://codemirror.net/6/docs/ref/#view.EditorView.moveByGroup), only skipping groups of
    whitespace when they consist of a single space.
    */
    const deleteGroupBackward = target => deleteByGroup(target, false);
    /**
    Delete the selection or forward until the end of the next group.
    */
    const deleteGroupForward = target => deleteByGroup(target, true);
    /**
    Delete the selection, or, if it is a cursor selection, delete to
    the end of the line. If the cursor is directly at the end of the
    line, delete the line break after it.
    */
    const deleteToLineEnd = view => deleteBy(view, range => {
        let lineEnd = view.lineBlockAt(range.head).to;
        return range.head < lineEnd ? lineEnd : Math.min(view.state.doc.length, range.head + 1);
    });
    /**
    Delete the selection, or, if it is a cursor selection, delete to
    the start of the line or the next line wrap before the cursor.
    */
    const deleteLineBoundaryBackward = view => deleteBy(view, range => {
        let lineStart = view.moveToLineBoundary(range, false).head;
        return range.head > lineStart ? lineStart : Math.max(0, range.head - 1);
    });
    /**
    Delete the selection, or, if it is a cursor selection, delete to
    the end of the line or the next line wrap after the cursor.
    */
    const deleteLineBoundaryForward = view => deleteBy(view, range => {
        let lineStart = view.moveToLineBoundary(range, true).head;
        return range.head < lineStart ? lineStart : Math.min(view.state.doc.length, range.head + 1);
    });
    /**
    Replace each selection range with a line break, leaving the cursor
    on the line before the break.
    */
    const splitLine = ({ state, dispatch }) => {
        if (state.readOnly)
            return false;
        let changes = state.changeByRange(range => {
            return { changes: { from: range.from, to: range.to, insert: Text.of(["", ""]) },
                range: EditorSelection.cursor(range.from) };
        });
        dispatch(state.update(changes, { scrollIntoView: true, userEvent: "input" }));
        return true;
    };
    /**
    Flip the characters before and after the cursor(s).
    */
    const transposeChars = ({ state, dispatch }) => {
        if (state.readOnly)
            return false;
        let changes = state.changeByRange(range => {
            if (!range.empty || range.from == 0 || range.from == state.doc.length)
                return { range };
            let pos = range.from, line = state.doc.lineAt(pos);
            let from = pos == line.from ? pos - 1 : findClusterBreak(line.text, pos - line.from, false) + line.from;
            let to = pos == line.to ? pos + 1 : findClusterBreak(line.text, pos - line.from, true) + line.from;
            return { changes: { from, to, insert: state.doc.slice(pos, to).append(state.doc.slice(from, pos)) },
                range: EditorSelection.cursor(to) };
        });
        if (changes.changes.empty)
            return false;
        dispatch(state.update(changes, { scrollIntoView: true, userEvent: "move.character" }));
        return true;
    };
    function selectedLineBlocks(state) {
        let blocks = [], upto = -1;
        for (let range of state.selection.ranges) {
            let startLine = state.doc.lineAt(range.from), endLine = state.doc.lineAt(range.to);
            if (!range.empty && range.to == endLine.from)
                endLine = state.doc.lineAt(range.to - 1);
            if (upto >= startLine.number) {
                let prev = blocks[blocks.length - 1];
                prev.to = endLine.to;
                prev.ranges.push(range);
            }
            else {
                blocks.push({ from: startLine.from, to: endLine.to, ranges: [range] });
            }
            upto = endLine.number + 1;
        }
        return blocks;
    }
    function moveLine(state, dispatch, forward) {
        if (state.readOnly)
            return false;
        let changes = [], ranges = [];
        for (let block of selectedLineBlocks(state)) {
            if (forward ? block.to == state.doc.length : block.from == 0)
                continue;
            let nextLine = state.doc.lineAt(forward ? block.to + 1 : block.from - 1);
            let size = nextLine.length + 1;
            if (forward) {
                changes.push({ from: block.to, to: nextLine.to }, { from: block.from, insert: nextLine.text + state.lineBreak });
                for (let r of block.ranges)
                    ranges.push(EditorSelection.range(Math.min(state.doc.length, r.anchor + size), Math.min(state.doc.length, r.head + size)));
            }
            else {
                changes.push({ from: nextLine.from, to: block.from }, { from: block.to, insert: state.lineBreak + nextLine.text });
                for (let r of block.ranges)
                    ranges.push(EditorSelection.range(r.anchor - size, r.head - size));
            }
        }
        if (!changes.length)
            return false;
        dispatch(state.update({
            changes,
            scrollIntoView: true,
            selection: EditorSelection.create(ranges, state.selection.mainIndex),
            userEvent: "move.line"
        }));
        return true;
    }
    /**
    Move the selected lines up one line.
    */
    const moveLineUp = ({ state, dispatch }) => moveLine(state, dispatch, false);
    /**
    Move the selected lines down one line.
    */
    const moveLineDown = ({ state, dispatch }) => moveLine(state, dispatch, true);
    function copyLine(state, dispatch, forward) {
        if (state.readOnly)
            return false;
        let changes = [];
        for (let block of selectedLineBlocks(state)) {
            if (forward)
                changes.push({ from: block.from, insert: state.doc.slice(block.from, block.to) + state.lineBreak });
            else
                changes.push({ from: block.to, insert: state.lineBreak + state.doc.slice(block.from, block.to) });
        }
        dispatch(state.update({ changes, scrollIntoView: true, userEvent: "input.copyline" }));
        return true;
    }
    /**
    Create a copy of the selected lines. Keep the selection in the top copy.
    */
    const copyLineUp = ({ state, dispatch }) => copyLine(state, dispatch, false);
    /**
    Create a copy of the selected lines. Keep the selection in the bottom copy.
    */
    const copyLineDown = ({ state, dispatch }) => copyLine(state, dispatch, true);
    /**
    Delete selected lines.
    */
    const deleteLine = view => {
        if (view.state.readOnly)
            return false;
        let { state } = view, changes = state.changes(selectedLineBlocks(state).map(({ from, to }) => {
            if (from > 0)
                from--;
            else if (to < state.doc.length)
                to++;
            return { from, to };
        }));
        let selection = updateSel(state.selection, range => {
            let dist = undefined;
            if (view.lineWrapping) {
                let block = view.lineBlockAt(range.head), pos = view.coordsAtPos(range.head, range.assoc || 1);
                if (pos)
                    dist = (block.bottom + view.documentTop) - pos.bottom + view.defaultLineHeight / 2;
            }
            return view.moveVertically(range, true, dist);
        }).map(changes);
        view.dispatch({ changes, selection, scrollIntoView: true, userEvent: "delete.line" });
        return true;
    };
    function isBetweenBrackets(state, pos) {
        if (/\(\)|\[\]|\{\}/.test(state.sliceDoc(pos - 1, pos + 1)))
            return { from: pos, to: pos };
        let context = syntaxTree(state).resolveInner(pos);
        let before = context.childBefore(pos), after = context.childAfter(pos), closedBy;
        if (before && after && before.to <= pos && after.from >= pos &&
            (closedBy = before.type.prop(NodeProp.closedBy)) && closedBy.indexOf(after.name) > -1 &&
            state.doc.lineAt(before.to).from == state.doc.lineAt(after.from).from &&
            !/\S/.test(state.sliceDoc(before.to, after.from)))
            return { from: before.to, to: after.from };
        return null;
    }
    /**
    Replace the selection with a newline and indent the newly created
    line(s). If the current line consists only of whitespace, this
    will also delete that whitespace. When the cursor is between
    matching brackets, an additional newline will be inserted after
    the cursor.
    */
    const insertNewlineAndIndent = /*@__PURE__*/newlineAndIndent(false);
    /**
    Create a blank, indented line below the current line.
    */
    const insertBlankLine = /*@__PURE__*/newlineAndIndent(true);
    function newlineAndIndent(atEof) {
        return ({ state, dispatch }) => {
            if (state.readOnly)
                return false;
            let changes = state.changeByRange(range => {
                let { from, to } = range, line = state.doc.lineAt(from);
                let explode = !atEof && from == to && isBetweenBrackets(state, from);
                if (atEof)
                    from = to = (to <= line.to ? line : state.doc.lineAt(to)).to;
                let cx = new IndentContext(state, { simulateBreak: from, simulateDoubleBreak: !!explode });
                let indent = getIndentation(cx, from);
                if (indent == null)
                    indent = countColumn(/^\s*/.exec(state.doc.lineAt(from).text)[0], state.tabSize);
                while (to < line.to && /\s/.test(line.text[to - line.from]))
                    to++;
                if (explode)
                    ({ from, to } = explode);
                else if (from > line.from && from < line.from + 100 && !/\S/.test(line.text.slice(0, from)))
                    from = line.from;
                let insert = ["", indentString(state, indent)];
                if (explode)
                    insert.push(indentString(state, cx.lineIndent(line.from, -1)));
                return { changes: { from, to, insert: Text.of(insert) },
                    range: EditorSelection.cursor(from + 1 + insert[1].length) };
            });
            dispatch(state.update(changes, { scrollIntoView: true, userEvent: "input" }));
            return true;
        };
    }
    function changeBySelectedLine(state, f) {
        let atLine = -1;
        return state.changeByRange(range => {
            let changes = [];
            for (let pos = range.from; pos <= range.to;) {
                let line = state.doc.lineAt(pos);
                if (line.number > atLine && (range.empty || range.to > line.from)) {
                    f(line, changes, range);
                    atLine = line.number;
                }
                pos = line.to + 1;
            }
            let changeSet = state.changes(changes);
            return { changes,
                range: EditorSelection.range(changeSet.mapPos(range.anchor, 1), changeSet.mapPos(range.head, 1)) };
        });
    }
    /**
    Auto-indent the selected lines. This uses the [indentation service
    facet](https://codemirror.net/6/docs/ref/#language.indentService) as source for auto-indent
    information.
    */
    const indentSelection = ({ state, dispatch }) => {
        if (state.readOnly)
            return false;
        let updated = Object.create(null);
        let context = new IndentContext(state, { overrideIndentation: start => {
                let found = updated[start];
                return found == null ? -1 : found;
            } });
        let changes = changeBySelectedLine(state, (line, changes, range) => {
            let indent = getIndentation(context, line.from);
            if (indent == null)
                return;
            if (!/\S/.test(line.text))
                indent = 0;
            let cur = /^\s*/.exec(line.text)[0];
            let norm = indentString(state, indent);
            if (cur != norm || range.from < line.from + cur.length) {
                updated[line.from] = indent;
                changes.push({ from: line.from, to: line.from + cur.length, insert: norm });
            }
        });
        if (!changes.changes.empty)
            dispatch(state.update(changes, { userEvent: "indent" }));
        return true;
    };
    /**
    Add a [unit](https://codemirror.net/6/docs/ref/#language.indentUnit) of indentation to all selected
    lines.
    */
    const indentMore = ({ state, dispatch }) => {
        if (state.readOnly)
            return false;
        dispatch(state.update(changeBySelectedLine(state, (line, changes) => {
            changes.push({ from: line.from, insert: state.facet(indentUnit) });
        }), { userEvent: "input.indent" }));
        return true;
    };
    /**
    Remove a [unit](https://codemirror.net/6/docs/ref/#language.indentUnit) of indentation from all
    selected lines.
    */
    const indentLess = ({ state, dispatch }) => {
        if (state.readOnly)
            return false;
        dispatch(state.update(changeBySelectedLine(state, (line, changes) => {
            let space = /^\s*/.exec(line.text)[0];
            if (!space)
                return;
            let col = countColumn(space, state.tabSize), keep = 0;
            let insert = indentString(state, Math.max(0, col - getIndentUnit(state)));
            while (keep < space.length && keep < insert.length && space.charCodeAt(keep) == insert.charCodeAt(keep))
                keep++;
            changes.push({ from: line.from + keep, to: line.from + space.length, insert: insert.slice(keep) });
        }), { userEvent: "delete.dedent" }));
        return true;
    };
    /**
    Enables or disables
    [tab-focus mode](https://codemirror.net/6/docs/ref/#view.EditorView.setTabFocusMode). While on, this
    prevents the editor's key bindings from capturing Tab or
    Shift-Tab, making it possible for the user to move focus out of
    the editor with the keyboard.
    */
    const toggleTabFocusMode = view => {
        view.setTabFocusMode();
        return true;
    };
    /**
    Array of key bindings containing the Emacs-style bindings that are
    available on macOS by default.

     - Ctrl-b: [`cursorCharLeft`](https://codemirror.net/6/docs/ref/#commands.cursorCharLeft) ([`selectCharLeft`](https://codemirror.net/6/docs/ref/#commands.selectCharLeft) with Shift)
     - Ctrl-f: [`cursorCharRight`](https://codemirror.net/6/docs/ref/#commands.cursorCharRight) ([`selectCharRight`](https://codemirror.net/6/docs/ref/#commands.selectCharRight) with Shift)
     - Ctrl-p: [`cursorLineUp`](https://codemirror.net/6/docs/ref/#commands.cursorLineUp) ([`selectLineUp`](https://codemirror.net/6/docs/ref/#commands.selectLineUp) with Shift)
     - Ctrl-n: [`cursorLineDown`](https://codemirror.net/6/docs/ref/#commands.cursorLineDown) ([`selectLineDown`](https://codemirror.net/6/docs/ref/#commands.selectLineDown) with Shift)
     - Ctrl-a: [`cursorLineStart`](https://codemirror.net/6/docs/ref/#commands.cursorLineStart) ([`selectLineStart`](https://codemirror.net/6/docs/ref/#commands.selectLineStart) with Shift)
     - Ctrl-e: [`cursorLineEnd`](https://codemirror.net/6/docs/ref/#commands.cursorLineEnd) ([`selectLineEnd`](https://codemirror.net/6/docs/ref/#commands.selectLineEnd) with Shift)
     - Ctrl-d: [`deleteCharForward`](https://codemirror.net/6/docs/ref/#commands.deleteCharForward)
     - Ctrl-h: [`deleteCharBackward`](https://codemirror.net/6/docs/ref/#commands.deleteCharBackward)
     - Ctrl-k: [`deleteToLineEnd`](https://codemirror.net/6/docs/ref/#commands.deleteToLineEnd)
     - Ctrl-Alt-h: [`deleteGroupBackward`](https://codemirror.net/6/docs/ref/#commands.deleteGroupBackward)
     - Ctrl-o: [`splitLine`](https://codemirror.net/6/docs/ref/#commands.splitLine)
     - Ctrl-t: [`transposeChars`](https://codemirror.net/6/docs/ref/#commands.transposeChars)
     - Ctrl-v: [`cursorPageDown`](https://codemirror.net/6/docs/ref/#commands.cursorPageDown)
     - Alt-v: [`cursorPageUp`](https://codemirror.net/6/docs/ref/#commands.cursorPageUp)
    */
    const emacsStyleKeymap = [
        { key: "Ctrl-b", run: cursorCharLeft, shift: selectCharLeft, preventDefault: true },
        { key: "Ctrl-f", run: cursorCharRight, shift: selectCharRight },
        { key: "Ctrl-p", run: cursorLineUp, shift: selectLineUp },
        { key: "Ctrl-n", run: cursorLineDown, shift: selectLineDown },
        { key: "Ctrl-a", run: cursorLineStart, shift: selectLineStart },
        { key: "Ctrl-e", run: cursorLineEnd, shift: selectLineEnd },
        { key: "Ctrl-d", run: deleteCharForward },
        { key: "Ctrl-h", run: deleteCharBackward },
        { key: "Ctrl-k", run: deleteToLineEnd },
        { key: "Ctrl-Alt-h", run: deleteGroupBackward },
        { key: "Ctrl-o", run: splitLine },
        { key: "Ctrl-t", run: transposeChars },
        { key: "Ctrl-v", run: cursorPageDown },
    ];
    /**
    An array of key bindings closely sticking to platform-standard or
    widely used bindings. (This includes the bindings from
    [`emacsStyleKeymap`](https://codemirror.net/6/docs/ref/#commands.emacsStyleKeymap), with their `key`
    property changed to `mac`.)

     - ArrowLeft: [`cursorCharLeft`](https://codemirror.net/6/docs/ref/#commands.cursorCharLeft) ([`selectCharLeft`](https://codemirror.net/6/docs/ref/#commands.selectCharLeft) with Shift)
     - ArrowRight: [`cursorCharRight`](https://codemirror.net/6/docs/ref/#commands.cursorCharRight) ([`selectCharRight`](https://codemirror.net/6/docs/ref/#commands.selectCharRight) with Shift)
     - Ctrl-ArrowLeft (Alt-ArrowLeft on macOS): [`cursorGroupLeft`](https://codemirror.net/6/docs/ref/#commands.cursorGroupLeft) ([`selectGroupLeft`](https://codemirror.net/6/docs/ref/#commands.selectGroupLeft) with Shift)
     - Ctrl-ArrowRight (Alt-ArrowRight on macOS): [`cursorGroupRight`](https://codemirror.net/6/docs/ref/#commands.cursorGroupRight) ([`selectGroupRight`](https://codemirror.net/6/docs/ref/#commands.selectGroupRight) with Shift)
     - Cmd-ArrowLeft (on macOS): [`cursorLineStart`](https://codemirror.net/6/docs/ref/#commands.cursorLineStart) ([`selectLineStart`](https://codemirror.net/6/docs/ref/#commands.selectLineStart) with Shift)
     - Cmd-ArrowRight (on macOS): [`cursorLineEnd`](https://codemirror.net/6/docs/ref/#commands.cursorLineEnd) ([`selectLineEnd`](https://codemirror.net/6/docs/ref/#commands.selectLineEnd) with Shift)
     - ArrowUp: [`cursorLineUp`](https://codemirror.net/6/docs/ref/#commands.cursorLineUp) ([`selectLineUp`](https://codemirror.net/6/docs/ref/#commands.selectLineUp) with Shift)
     - ArrowDown: [`cursorLineDown`](https://codemirror.net/6/docs/ref/#commands.cursorLineDown) ([`selectLineDown`](https://codemirror.net/6/docs/ref/#commands.selectLineDown) with Shift)
     - Cmd-ArrowUp (on macOS): [`cursorDocStart`](https://codemirror.net/6/docs/ref/#commands.cursorDocStart) ([`selectDocStart`](https://codemirror.net/6/docs/ref/#commands.selectDocStart) with Shift)
     - Cmd-ArrowDown (on macOS): [`cursorDocEnd`](https://codemirror.net/6/docs/ref/#commands.cursorDocEnd) ([`selectDocEnd`](https://codemirror.net/6/docs/ref/#commands.selectDocEnd) with Shift)
     - Ctrl-ArrowUp (on macOS): [`cursorPageUp`](https://codemirror.net/6/docs/ref/#commands.cursorPageUp) ([`selectPageUp`](https://codemirror.net/6/docs/ref/#commands.selectPageUp) with Shift)
     - Ctrl-ArrowDown (on macOS): [`cursorPageDown`](https://codemirror.net/6/docs/ref/#commands.cursorPageDown) ([`selectPageDown`](https://codemirror.net/6/docs/ref/#commands.selectPageDown) with Shift)
     - PageUp: [`cursorPageUp`](https://codemirror.net/6/docs/ref/#commands.cursorPageUp) ([`selectPageUp`](https://codemirror.net/6/docs/ref/#commands.selectPageUp) with Shift)
     - PageDown: [`cursorPageDown`](https://codemirror.net/6/docs/ref/#commands.cursorPageDown) ([`selectPageDown`](https://codemirror.net/6/docs/ref/#commands.selectPageDown) with Shift)
     - Home: [`cursorLineBoundaryBackward`](https://codemirror.net/6/docs/ref/#commands.cursorLineBoundaryBackward) ([`selectLineBoundaryBackward`](https://codemirror.net/6/docs/ref/#commands.selectLineBoundaryBackward) with Shift)
     - End: [`cursorLineBoundaryForward`](https://codemirror.net/6/docs/ref/#commands.cursorLineBoundaryForward) ([`selectLineBoundaryForward`](https://codemirror.net/6/docs/ref/#commands.selectLineBoundaryForward) with Shift)
     - Ctrl-Home (Cmd-Home on macOS): [`cursorDocStart`](https://codemirror.net/6/docs/ref/#commands.cursorDocStart) ([`selectDocStart`](https://codemirror.net/6/docs/ref/#commands.selectDocStart) with Shift)
     - Ctrl-End (Cmd-Home on macOS): [`cursorDocEnd`](https://codemirror.net/6/docs/ref/#commands.cursorDocEnd) ([`selectDocEnd`](https://codemirror.net/6/docs/ref/#commands.selectDocEnd) with Shift)
     - Enter and Shift-Enter: [`insertNewlineAndIndent`](https://codemirror.net/6/docs/ref/#commands.insertNewlineAndIndent)
     - Ctrl-a (Cmd-a on macOS): [`selectAll`](https://codemirror.net/6/docs/ref/#commands.selectAll)
     - Backspace: [`deleteCharBackward`](https://codemirror.net/6/docs/ref/#commands.deleteCharBackward)
     - Delete: [`deleteCharForward`](https://codemirror.net/6/docs/ref/#commands.deleteCharForward)
     - Ctrl-Backspace (Alt-Backspace on macOS): [`deleteGroupBackward`](https://codemirror.net/6/docs/ref/#commands.deleteGroupBackward)
     - Ctrl-Delete (Alt-Delete on macOS): [`deleteGroupForward`](https://codemirror.net/6/docs/ref/#commands.deleteGroupForward)
     - Cmd-Backspace (macOS): [`deleteLineBoundaryBackward`](https://codemirror.net/6/docs/ref/#commands.deleteLineBoundaryBackward).
     - Cmd-Delete (macOS): [`deleteLineBoundaryForward`](https://codemirror.net/6/docs/ref/#commands.deleteLineBoundaryForward).
    */
    const standardKeymap = /*@__PURE__*/[
        { key: "ArrowLeft", run: cursorCharLeft, shift: selectCharLeft, preventDefault: true },
        { key: "Mod-ArrowLeft", mac: "Alt-ArrowLeft", run: cursorGroupLeft, shift: selectGroupLeft, preventDefault: true },
        { mac: "Cmd-ArrowLeft", run: cursorLineBoundaryLeft, shift: selectLineBoundaryLeft, preventDefault: true },
        { key: "ArrowRight", run: cursorCharRight, shift: selectCharRight, preventDefault: true },
        { key: "Mod-ArrowRight", mac: "Alt-ArrowRight", run: cursorGroupRight, shift: selectGroupRight, preventDefault: true },
        { mac: "Cmd-ArrowRight", run: cursorLineBoundaryRight, shift: selectLineBoundaryRight, preventDefault: true },
        { key: "ArrowUp", run: cursorLineUp, shift: selectLineUp, preventDefault: true },
        { mac: "Cmd-ArrowUp", run: cursorDocStart, shift: selectDocStart },
        { mac: "Ctrl-ArrowUp", run: cursorPageUp, shift: selectPageUp },
        { key: "ArrowDown", run: cursorLineDown, shift: selectLineDown, preventDefault: true },
        { mac: "Cmd-ArrowDown", run: cursorDocEnd, shift: selectDocEnd },
        { mac: "Ctrl-ArrowDown", run: cursorPageDown, shift: selectPageDown },
        { key: "PageUp", run: cursorPageUp, shift: selectPageUp },
        { key: "PageDown", run: cursorPageDown, shift: selectPageDown },
        { key: "Home", run: cursorLineBoundaryBackward, shift: selectLineBoundaryBackward, preventDefault: true },
        { key: "Mod-Home", run: cursorDocStart, shift: selectDocStart },
        { key: "End", run: cursorLineBoundaryForward, shift: selectLineBoundaryForward, preventDefault: true },
        { key: "Mod-End", run: cursorDocEnd, shift: selectDocEnd },
        { key: "Enter", run: insertNewlineAndIndent, shift: insertNewlineAndIndent },
        { key: "Mod-a", run: selectAll },
        { key: "Backspace", run: deleteCharBackward, shift: deleteCharBackward },
        { key: "Delete", run: deleteCharForward },
        { key: "Mod-Backspace", mac: "Alt-Backspace", run: deleteGroupBackward },
        { key: "Mod-Delete", mac: "Alt-Delete", run: deleteGroupForward },
        { mac: "Mod-Backspace", run: deleteLineBoundaryBackward },
        { mac: "Mod-Delete", run: deleteLineBoundaryForward }
    ].concat(/*@__PURE__*/emacsStyleKeymap.map(b => ({ mac: b.key, run: b.run, shift: b.shift })));
    /**
    The default keymap. Includes all bindings from
    [`standardKeymap`](https://codemirror.net/6/docs/ref/#commands.standardKeymap) plus the following:

    - Alt-ArrowLeft (Ctrl-ArrowLeft on macOS): [`cursorSyntaxLeft`](https://codemirror.net/6/docs/ref/#commands.cursorSyntaxLeft) ([`selectSyntaxLeft`](https://codemirror.net/6/docs/ref/#commands.selectSyntaxLeft) with Shift)
    - Alt-ArrowRight (Ctrl-ArrowRight on macOS): [`cursorSyntaxRight`](https://codemirror.net/6/docs/ref/#commands.cursorSyntaxRight) ([`selectSyntaxRight`](https://codemirror.net/6/docs/ref/#commands.selectSyntaxRight) with Shift)
    - Alt-ArrowUp: [`moveLineUp`](https://codemirror.net/6/docs/ref/#commands.moveLineUp)
    - Alt-ArrowDown: [`moveLineDown`](https://codemirror.net/6/docs/ref/#commands.moveLineDown)
    - Shift-Alt-ArrowUp: [`copyLineUp`](https://codemirror.net/6/docs/ref/#commands.copyLineUp)
    - Shift-Alt-ArrowDown: [`copyLineDown`](https://codemirror.net/6/docs/ref/#commands.copyLineDown)
    - Escape: [`simplifySelection`](https://codemirror.net/6/docs/ref/#commands.simplifySelection)
    - Ctrl-Enter (Cmd-Enter on macOS): [`insertBlankLine`](https://codemirror.net/6/docs/ref/#commands.insertBlankLine)
    - Alt-l (Ctrl-l on macOS): [`selectLine`](https://codemirror.net/6/docs/ref/#commands.selectLine)
    - Ctrl-i (Cmd-i on macOS): [`selectParentSyntax`](https://codemirror.net/6/docs/ref/#commands.selectParentSyntax)
    - Ctrl-[ (Cmd-[ on macOS): [`indentLess`](https://codemirror.net/6/docs/ref/#commands.indentLess)
    - Ctrl-] (Cmd-] on macOS): [`indentMore`](https://codemirror.net/6/docs/ref/#commands.indentMore)
    - Ctrl-Alt-\\ (Cmd-Alt-\\ on macOS): [`indentSelection`](https://codemirror.net/6/docs/ref/#commands.indentSelection)
    - Shift-Ctrl-k (Shift-Cmd-k on macOS): [`deleteLine`](https://codemirror.net/6/docs/ref/#commands.deleteLine)
    - Shift-Ctrl-\\ (Shift-Cmd-\\ on macOS): [`cursorMatchingBracket`](https://codemirror.net/6/docs/ref/#commands.cursorMatchingBracket)
    - Ctrl-/ (Cmd-/ on macOS): [`toggleComment`](https://codemirror.net/6/docs/ref/#commands.toggleComment).
    - Shift-Alt-a: [`toggleBlockComment`](https://codemirror.net/6/docs/ref/#commands.toggleBlockComment).
    - Ctrl-m (Alt-Shift-m on macOS): [`toggleTabFocusMode`](https://codemirror.net/6/docs/ref/#commands.toggleTabFocusMode).
    */
    const defaultKeymap = /*@__PURE__*/[
        { key: "Alt-ArrowLeft", mac: "Ctrl-ArrowLeft", run: cursorSyntaxLeft, shift: selectSyntaxLeft },
        { key: "Alt-ArrowRight", mac: "Ctrl-ArrowRight", run: cursorSyntaxRight, shift: selectSyntaxRight },
        { key: "Alt-ArrowUp", run: moveLineUp },
        { key: "Shift-Alt-ArrowUp", run: copyLineUp },
        { key: "Alt-ArrowDown", run: moveLineDown },
        { key: "Shift-Alt-ArrowDown", run: copyLineDown },
        { key: "Escape", run: simplifySelection },
        { key: "Mod-Enter", run: insertBlankLine },
        { key: "Alt-l", mac: "Ctrl-l", run: selectLine },
        { key: "Mod-i", run: selectParentSyntax, preventDefault: true },
        { key: "Mod-[", run: indentLess },
        { key: "Mod-]", run: indentMore },
        { key: "Mod-Alt-\\", run: indentSelection },
        { key: "Shift-Mod-k", run: deleteLine },
        { key: "Shift-Mod-\\", run: cursorMatchingBracket },
        { key: "Mod-/", run: toggleComment },
        { key: "Alt-A", run: toggleBlockComment },
        { key: "Ctrl-m", mac: "Shift-Alt-m", run: toggleTabFocusMode },
    ].concat(standardKeymap);

    // Base (neutral) colors
    const base00$1 = '#FFFFFF', // white, primary text color
    base01$1 = '#EDEEF6', // bluegrey-50, quote text and muted elements
    base02$1 = '#E4E6F1', // bluegrey-100, invalid border
    // base03 = '#CED0E2', // bluegrey-200, panels text and outlines
    base04$1 = '#A3A5C3', // bluegrey-400, comment text
    base05$1 = '#7A7CA6', //bluegrey-500, gutter text and tooltip background, angle brackets
    base06$1 = '#65B7FF40', // blue-400 / 25% on bg, matching selections
    base07$1 = '#226EC93D', // Light/Code/Blue @ 24% opacity on code bg, selection background
    base08$1 = '#3F4273', // bluegrey-800, slightly highlighted background
    base09$1 = '#333661'; // bluegrey-900
    // Highlight colors
    const // highlight01 = '#A7EAE5',
    highlight02$1 = '#B99AF4', highlight03$1 = '#FFC6AB', // orange-200
    highlight04$1 = '#86BDFE', highlight05$1 = '#F97F8D', highlight06$1 = '#DB9F83', highlight07$1 = '#FBDF83', highlight08$1 = '#97E58D', highlight09$1 = '#F9BFD7';
    // Specific/semantic colors
    const invalid$1 = '#F05A6E', background$1 = '#1D1F32', // code/background
    textWeak$1 = 'rgba(255, 255, 255, 0.8)', // text/weak
    tooltipBackground$1 = '#252746', // bluegrey-950, tooltip (suggestions) background
    tooltipBorder$1 = '#4A4D85', // line/secondary // bluegrey-700
    tooltipItemHighlighted$1 = '#333661', // bluegrey-900, highlighted item (first list item)
    tooltipItemPressed$1 = '#3F4273', // bluegrey-800, tapped/pressed item
    selection$1 = base07$1, cursor$1 = '#00C5FF'; // support/blue
    /// The editor theme styles for Mimo Dark.
    const mimoDarkTheme = EditorView.theme({
        // Overall appearance and text adjustments
        ':root': {
            fontSize: '16px', // Define global font size
        },
        '&': {
            color: base00$1,
            backgroundColor: background$1,
            fontSize: '0.875rem', // Editor font size (14px relative to global 16px)
            lineHeight: '1.625rem', // Line height (26px relative to global 16px)
        },
        '.cm-content': {
            caretColor: cursor$1,
            fontSize: '0.875rem', // Ensure consistent font size within the content
            lineHeight: '1.625rem', // Line height (26px relative to global 16px)
        },
        // Visual styles for the cursor and text selection
        '.cm-cursor, .cm-dropCursor': { borderLeftColor: cursor$1 },
        '&.cm-focused > .cm-scroller > .cm-selectionLayer .cm-selectionBackground, .cm-selectionBackground, .cm-content ::selection': { backgroundColor: selection$1 },
        // Styles for the active line and matched selections
        '.cm-activeLine': { backgroundColor: base08$1 },
        '.cm-selectionMatch': { backgroundColor: base06$1 },
        // Highlight and style matching brackets when focused
        '&.cm-focused .cm-matchingBracket, &.cm-focused .cm-nonmatchingBracket': {
            outline: `1px solid ${base05$1}`,
        },
        '&.cm-focused .cm-matchingBracket': {
            backgroundColor: base09$1,
        },
        // Appearance of the gutter (line numbers and markers)
        '.cm-gutters': {
            backgroundColor: background$1,
            color: base05$1,
            border: 'none',
        },
        '.cm-activeLineGutter': {
            color: base00$1,
            backgroundColor: 'inherit',
        },
        // Styling for folded (collapsed) regions of code
        '.cm-foldPlaceholder': {
            backgroundColor: 'transparent',
            border: 'none',
            color: base04$1,
        },
        // Tooltip (autocomplete) styles
        '.cm-tooltip': {
            borderRadius: '0.75rem', // Rounded corners (12px to rem)
            border: `1px solid ${tooltipBorder$1}`, // Border with specified color
            background: tooltipBackground$1, // Solid background color
            overflow: 'hidden', // Ensures border-radius works properly
            color: base00$1, // Default text color
        },
        '.cm-tooltip-autocomplete ul': {
            margin: '0',
            padding: '0',
            listStyle: 'none', // Removes default list styling
        },
        '.cm-tooltip-autocomplete ul li': {
            fontSize: '1rem', // Font size (16px to rem)
            minHeight: '2.5rem', // Equivalent to 40px with 16px base font size
            boxSizing: 'border-box', // Ensure padding is included in the height
            padding: '0.5rem 1rem', // Spacing inside each item (8px top/bottom, 16px left/right)
            position: 'relative', // To allow positioning
            backgroundColor: 'transparent', // No background by default
            cursor: 'pointer', // Indicate interactivity
            display: 'flex', // Use flexbox for layout
            justifyContent: 'flex-start', // Space between text and icon
            alignItems: 'center', // Vertical alignment
            whiteSpace: 'nowrap', // Prevent text wrapping
            overflow: 'hidden', // Hide overflowing text
            textOverflow: 'ellipsis', // Add ellipsis for truncated text
            textAlign: 'left', // Explicit text alignment
        },
        '.cm-tooltip-autocomplete ul li[aria-selected="true"]': {
            backgroundColor: tooltipItemHighlighted$1, // Pre-selected item background
            color: 'inherit', // Keep the same text color
        },
        '.cm-tooltip-autocomplete ul li:active, .cm-tooltip-autocomplete ul li:focus': {
            backgroundColor: `${tooltipItemPressed$1} !important`, // Tap or focus interaction highlight
            color: base00$1, // Ensure the text remains legible
        },
        '.cm-tooltip-autocomplete ul li:first-child::after': {
            content: "'\\e31b'", // Unicode for "keyboard_return"
            fontFamily: 'Material Symbols Outlined',
            fontWeight: 'normal',
            fontStyle: 'normal',
            fontSize: '1.25rem', // 20px to rem
            color: textWeak$1, // text/weak
            marginLeft: 'auto', // Push to the right
            display: 'inline-block',
            verticalAlign: 'middle', // Aligns with text
        },
        '.cm-tooltip-match': {
            color: highlight04$1, // Use blue for matching text
            textDecoration: 'none !important', // Remove underline
            fontWeight: 'bold', // Make the match more visually distinct
        },
    }, { dark: true });
    /// The highlighting style for code in the Mimo Dark theme.
    const mimoDarkHighlightStyle = HighlightStyle.define([
        // Note: the definitions are roughly organized by language
        // === HTML Definitions ===
        { tag: [tags$1.meta, tags$1.keyword], color: highlight09$1 }, // Pink for keywords like `html` within meta
        { tag: [tags$1.tagName], color: highlight05$1 }, // Red for HTML tags like <div>, <span>
        { tag: [tags$1.attributeName], color: highlight06$1 }, // Brown for attributes like class, id
        { tag: tags$1.meta, color: highlight04$1 }, // Blue for meta tags like <!DOCTYPE>
        // === CSS Definitions ===
        { tag: [tags$1.unit], color: highlight06$1 }, // Brown for units like px, %, rem
        { tag: [tags$1.propertyName], color: highlight03$1 }, // Orange for CSS properties like color, font-size
        { tag: [tags$1.color], color: highlight06$1 }, // Brown for hex colors like #FFFFFF
        { tag: [tags$1.standard(tags$1.name), tags$1.constant(tags$1.name)], color: highlight09$1 }, // Pink for constants and named values
        // === JS & Python Definitions ===
        { tag: tags$1.keyword, color: highlight09$1 }, // Pink for keywords like function, const, def, class, with
        { tag: [tags$1.controlKeyword], color: highlight09$1 }, // Pink for control flow (if, else, return, break, while, continue)
        { tag: [tags$1.variableName], color: highlight06$1 }, // Brown for variable names
        { tag: [tags$1.function(tags$1.variableName)], color: highlight04$1 }, // Blue for function names
        { tag: [tags$1.regexp], color: highlight04$1 }, // Blue for regular expressions
        { tag: [tags$1.atom, tags$1.bool, tags$1.special(tags$1.variableName)], color: highlight06$1 }, // Brown for booleans, atoms, and special variables
        { tag: [tags$1.labelName], color: highlight02$1 }, // Purple for labels -- used primarily in Python for labels in loops
        { tag: [tags$1.typeName], color: highlight05$1 }, // Red-pink for type names like int, str
        { tag: [tags$1.definition(tags$1.name), tags$1.separator], color: highlight08$1 }, // Green
        { tag: tags$1.standard(tags$1.variableName), color: highlight06$1 }, // Brown for built-in functions
        // === Generic & Shared Definitions ===
        { tag: [tags$1.className], color: highlight07$1 }, // Yellow for class names like MyClass; also for pseudo-classes like :hover
        { tag: [tags$1.string, tags$1.special(tags$1.string)], color: highlight08$1 }, // Green for strings
        { tag: [tags$1.comment], color: base04$1, fontStyle: 'italic' }, // Grey-blue for comments
        { tag: [tags$1.brace, tags$1.squareBracket], color: base05$1 }, // Neutral grey for less emphasis -- this could be highlighted
        { tag: [tags$1.angleBracket], color: base05$1 }, // Neutral grey for less emphasis
        { tag: [tags$1.punctuation, tags$1.separator], color: base00$1 }, // Default text for punctuation/separators
        { tag: [tags$1.quote], color: base01$1 }, // Grey
        { tag: [tags$1.url, tags$1.escape], color: highlight06$1 }, // Brown for URLs or escape sequences
        { tag: tags$1.link, color: highlight04$1, textDecoration: 'underline' }, // Blue for links
        { tag: [tags$1.operator, tags$1.operatorKeyword], color: base00$1 }, // Default text color for +, =
        { tag: [tags$1.number], color: highlight06$1 }, // Brown for numbers like 42, 3.14
        { tag: tags$1.processingInstruction, color: highlight04$1 }, // Blue for processing instructions
        { tag: tags$1.invalid, color: base02$1, borderBottom: `1px dotted ${invalid$1}` }, // Red with dotted underline
        { tag: tags$1.inserted, color: highlight08$1 }, // Green for inserted text
        { tag: tags$1.deleted, color: invalid$1 }, // Red for removed text
    ]);
    /// Extension to enable the Mimo Dark theme (both the editor theme and
    /// the highlight style).
    const mimoDark = [
        mimoDarkTheme,
        syntaxHighlighting(mimoDarkHighlightStyle),
    ];

    // Base (neutral) colors
    const base00 = '#252746', // bluegrey-950, primary text color
    base01 = '#333661', // bluegrey-900, quote text and muted elements
    base02 = '#3F4273', // bluegrey-800, invalid border
    // base03 = '#4A4D85', // bluegrey-700, panels text and outlines
    base04 = '#7A7CA6', // bluegrey-500, comment text
    base05 = '#A3A5C3', //bluegrey-400, gutter text and tooltip background, angle brackets
    base06 = '#D1E9FF', // blue-100, matching selections
    base07 = '#226EC93D', // Light/Code/Blue @ 24% opacity on code bg, selection background
    base08 = '#EDEEF6', // bluegrey-50, slightly highlighted background
    base09 = '#F6F7FB'; // bluegrey-25
    // Highlight colors
    const // highlight01 = '#29A298',
    highlight02 = '#6E3EC8', highlight03 = '#C03D00', // orange-700
    highlight04 = '#226EC9', highlight05 = '#CF4053', highlight06 = '#844A30', highlight07 = '#B88E02', highlight08 = '#337A29', highlight09 = '#BB6E8D';
    // Specific/semantic colors
    const invalid = '#DD4A5D', background = '#ffffff', // code/background
    textWeak = '#4A4D85', // text/weak
    tooltipBackground = '#F6F7FB', // bluegrey-25, tooltip (suggestions) background
    tooltipBorder = '#E4E6F1', // line/secondary // bluegrey-100
    tooltipItemHighlighted = '#EDEEF6', // bluegrey-50, highlighted item (first list item)
    tooltipItemPressed = '#E4E6F1', // bluegrey-100, tapped/pressed item
    selection = base07, cursor = '#3890FA'; // support/blue
    /// The editor theme styles for Mimo Light.
    const mimoLightTheme = EditorView.theme({
        // Overall appearance and text adjustments
        ':root': {
            fontSize: '16px', // Define global font size
        },
        '&': {
            color: base00,
            backgroundColor: background,
            fontSize: '0.875rem', // Editor font size (14px relative to global 16px)
            lineHeight: '1.625rem', // Line height (26px relative to global 16px)
        },
        '.cm-content': {
            caretColor: cursor,
            fontSize: '0.875rem', // Ensure consistent font size within the content
            lineHeight: '1.625rem', // Line height (26px relative to global 16px)
        },
        // Visual styles for the cursor and text selection
        '.cm-cursor, .cm-dropCursor': { borderLeftColor: cursor },
        '&.cm-focused > .cm-scroller > .cm-selectionLayer .cm-selectionBackground, .cm-selectionBackground, .cm-content ::selection': { backgroundColor: selection },
        // Styles for the active line and matched selections
        '.cm-activeLine': { backgroundColor: base08 },
        '.cm-selectionMatch': { backgroundColor: base06 },
        // Highlight and style matching brackets when focused
        '&.cm-focused .cm-matchingBracket, &.cm-focused .cm-nonmatchingBracket': {
            outline: `1px solid ${base05}`,
        },
        '&.cm-focused .cm-matchingBracket': {
            backgroundColor: base09,
        },
        // Appearance of the gutter (line numbers and markers)
        '.cm-gutters': {
            backgroundColor: background,
            color: base05,
            border: 'none',
        },
        '.cm-activeLineGutter': {
            color: base00,
            backgroundColor: 'inherit',
        },
        // Styling for folded (collapsed) regions of code
        '.cm-foldPlaceholder': {
            backgroundColor: 'transparent',
            border: 'none',
            color: base04,
        },
        // Tooltip (autocomplete) styles
        '.cm-tooltip': {
            borderRadius: '0.75rem', // Rounded corners (12px to rem)
            border: `1px solid ${tooltipBorder}`, // Border with specified color
            background: tooltipBackground, // Solid background color
            overflow: 'hidden', // Ensures border-radius works properly
            color: base00, // Default text color
        },
        '.cm-tooltip-autocomplete ul': {
            margin: '0',
            padding: '0',
            listStyle: 'none', // Removes default list styling
        },
        '.cm-tooltip-autocomplete ul li': {
            fontSize: '1rem', // Font size (16px to rem)
            minHeight: '2.5rem', // Equivalent to 40px with 16px base font size
            boxSizing: 'border-box', // Ensure padding is included in the height
            padding: '0.5rem 1rem', // Spacing inside each item (8px top/bottom, 16px left/right)
            position: 'relative', // To allow positioning
            backgroundColor: 'transparent', // No background by default
            cursor: 'pointer', // Indicate interactivity
            display: 'flex', // Use flexbox for layout
            justifyContent: 'flex-start', // Space between text and icon
            alignItems: 'center', // Vertical alignment
            whiteSpace: 'nowrap', // Prevent text wrapping
            overflow: 'hidden', // Hide overflowing text
            textOverflow: 'ellipsis', // Add ellipsis for truncated text
            textAlign: 'left', // Explicit text alignment
        },
        '.cm-tooltip-autocomplete ul li[aria-selected="true"]': {
            backgroundColor: tooltipItemHighlighted, // Pre-selected item background
            color: 'inherit', // Keep the same text color
        },
        '.cm-tooltip-autocomplete ul li:active, .cm-tooltip-autocomplete ul li:focus': {
            backgroundColor: `${tooltipItemPressed} !important`, // Tap or focus interaction highlight
            color: base00, // Ensure the text remains legible
        },
        '.cm-tooltip-autocomplete ul li:first-child::after': {
            content: "'\\e31b'", // Unicode for "keyboard_return"
            fontFamily: 'Material Symbols Outlined',
            fontWeight: 'normal',
            fontStyle: 'normal',
            fontSize: '1.25rem', // 20px to rem
            color: textWeak, // text/weak
            marginLeft: 'auto', // Push to the right
            display: 'inline-block',
            verticalAlign: 'middle', // Aligns with text
        },
        '.cm-tooltip-match': {
            color: highlight04, // Use blue for matching text
            textDecoration: 'none !important', // Remove underline
            fontWeight: 'bold', // Make the match more visually distinct
        },
    }, { dark: false });
    /// The highlighting style for code in the Mimo Light theme.
    const mimoLightHighlightStyle = HighlightStyle.define([
        // Note: the definitions are roughly organized by language
        // === HTML Definitions ===
        { tag: [tags$1.meta, tags$1.keyword], color: highlight09 }, // Pink for keywords like `html` within meta
        { tag: [tags$1.tagName], color: highlight05 }, // Red for HTML tags like <div>, <span>
        { tag: [tags$1.attributeName], color: highlight06 }, // Brown for attributes like class, id
        { tag: tags$1.meta, color: highlight04 }, // Blue for meta tags like <!DOCTYPE>
        // === CSS Definitions ===
        { tag: [tags$1.unit], color: highlight06 }, // Brown for units like px, %, rem
        { tag: [tags$1.propertyName], color: highlight03 }, // Orange for CSS properties like color, font-size
        { tag: [tags$1.color], color: highlight06 }, // Brown for hex colors like #FFFFFF
        { tag: [tags$1.standard(tags$1.name), tags$1.constant(tags$1.name)], color: highlight09 }, // Pink for constants and named values
        // === JS & Python Definitions ===
        { tag: tags$1.keyword, color: highlight09 }, // Pink for keywords like function, const, def, class, with
        { tag: [tags$1.controlKeyword], color: highlight09 }, // Pink for control flow (if, else, return, break, while, continue)
        { tag: [tags$1.variableName], color: highlight06 }, // Brown for variable names
        { tag: [tags$1.function(tags$1.variableName)], color: highlight04 }, // Blue for function names
        { tag: [tags$1.regexp], color: highlight04 }, // Blue for regular expressions
        { tag: [tags$1.atom, tags$1.bool, tags$1.special(tags$1.variableName)], color: highlight06 }, // Brown for booleans, atoms, and special variables
        { tag: [tags$1.labelName], color: highlight02 }, // Purple for labels -- used primarily in Python for labels in loops
        { tag: [tags$1.typeName], color: highlight05 }, // Red-pink for type names like int, str
        { tag: [tags$1.definition(tags$1.name), tags$1.separator], color: highlight08 }, // Green
        { tag: tags$1.standard(tags$1.variableName), color: highlight06 }, // Brown for built-in functions
        // === Generic & Shared Definitions ===
        { tag: [tags$1.className], color: highlight07 }, // Yellow for class names like MyClass; also for pseudo-classes like :hover
        { tag: [tags$1.string, tags$1.special(tags$1.string)], color: highlight08 }, // Green for strings
        { tag: [tags$1.comment], color: base04, fontStyle: 'italic' }, // Grey-blue for comments
        { tag: [tags$1.brace, tags$1.squareBracket], color: base05 }, // Neutral grey for less emphasis -- this could be highlighted
        { tag: [tags$1.angleBracket], color: base05 }, // Neutral grey for less emphasis
        { tag: [tags$1.punctuation, tags$1.separator], color: base00 }, // Default text for punctuation/separators
        { tag: [tags$1.quote], color: base01 }, // Grey
        { tag: [tags$1.url, tags$1.escape], color: highlight06 }, // Brown for URLs or escape sequences
        { tag: tags$1.link, color: highlight04, textDecoration: 'underline' }, // Blue for links
        { tag: [tags$1.operator, tags$1.operatorKeyword], color: base00 }, // Default text color for +, =
        { tag: [tags$1.number], color: highlight06 }, // Brown for numbers like 42, 3.14
        { tag: tags$1.processingInstruction, color: highlight04 }, // Blue for processing instructions
        { tag: tags$1.invalid, color: base02, borderBottom: `1px dotted ${invalid}` }, // Red with dotted underline
        { tag: tags$1.inserted, color: highlight08 }, // Green for inserted text
        { tag: tags$1.deleted, color: invalid }, // Red for removed text
    ]);
    /// Extension to enable the Mimo Light theme (both the editor theme and
    /// the highlight style).
    const mimoLight = [
        mimoLightTheme,
        syntaxHighlighting(mimoLightHighlightStyle),
    ];

    document.head.appendChild(document.createElement("style")).textContent="@font-face {\n  font-family: 'Aeonik';\n  src: url('assets/aeonik_mono.otf');\n}\n\n@font-face {\n  font-family: 'Material Symbols Rounded';\n  font-style: normal;\n  font-weight: 400;\n  src: url('https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined');\n}\n\nhtml,\nbody {\n  height: 100%;\n  min-height: 100%;\n  margin: 0;\n}\n\n#editor,\n.cm-editor {\n  min-height: 100%;\n  height: 100%;\n  width: 100%;\n}\n\n.cm-content {\n  white-space: pre-wrap;\n}\n\n#editor * {\n  font-family: 'Aeonik', 'Material Symbols Outlined', monospace;\n}\n";

    /**
     * Auto close tags for html. Shameless yoink from @codemirror/lang-html, as the original implementation is an input handler and does not work on inserting snippets
     * @param view - The editor view
     * @param from - The start of the range
     * @param text - The text to insert
     * @param insertTransaction - The transaction to insert
     * @returns - The transactions to insert (either the insert transaction or the insert transaction and the auto close transaction)
     */
    const htmlAutoCloseTags = (view, text, insertTransaction) => {
        if (view.composing || view.state.readOnly || (text != '>' && text != '/')) {
            return [insertTransaction];
        }
        let base = insertTransaction, { state } = base;
        let closeTags = state.changeByRange((range) => {
            var _a, _b, _c;
            let didType = state.doc.sliceString(range.from - 1, range.to) == text;
            let { head } = range, after = syntaxTree(state).resolveInner(head, -1), name;
            if (didType && text == '>' && after.name == 'EndTag') {
                let tag = after.parent;
                if (tag &&
                    ((_b =
                        (_a = tag.parent) === null || _a === void 0
                            ? void 0
                            : _a.lastChild) === null || _b === void 0
                        ? void 0
                        : _b.name) != 'CloseTag' &&
                    (name = elementName(state.doc, tag.parent, head)) &&
                    !selfClosers.has(name)) {
                    let to = head + (state.doc.sliceString(head, head + 1) === '>' ? 1 : 0);
                    let insert = `</${name}>`;
                    return { range, changes: { from: head, to, insert } };
                }
            }
            else if (didType && text == '/' && after.name == 'IncompleteCloseTag') {
                let tag = after.parent;
                if (tag &&
                    after.from == head - 2 &&
                    ((_c = tag.lastChild) === null || _c === void 0 ? void 0 : _c.name) !=
                        'CloseTag' &&
                    (name = elementName(state.doc, tag, head)) &&
                    !selfClosers.has(name)) {
                    let to = head + (state.doc.sliceString(head, head + 1) === '>' ? 1 : 0);
                    let insert = `${name}>`;
                    return {
                        range: EditorSelection.cursor(head + insert.length, -1),
                        changes: { from: head, to, insert },
                    };
                }
            }
            return { range };
        });
        if (closeTags.changes.empty)
            return [base];
        return [
            base,
            state.update(closeTags, {
                userEvent: 'input.complete',
                scrollIntoView: true,
            }),
        ];
    };
    const jsxAutoCloseTags = (view, text, defaultInsert) => {
        if (view.composing ||
            view.compositionStarted ||
            view.state.readOnly ||
            (text != '>' && text != '/'))
            return [defaultInsert];
        let base = defaultInsert, { state } = base;
        let closeTags = state.changeByRange((range) => {
            var _a;
            let { head } = range, around = syntaxTree(state).resolveInner(head - 1, -1), name;
            if (around?.name == 'JSXStartTag')
                around = around.parent;
            if (state.doc.sliceString(head - 1, head) != text ||
                (around?.name == 'JSXAttributeValue' && around?.to > head)) ;
            else if (text == '>' && around?.name == 'JSXFragmentTag') {
                return { range, changes: { from: head, insert: `</>` } };
            }
            else if (text == '/' && around?.name == 'JSXStartCloseTag') {
                let empty = around?.parent, base = empty?.parent;
                if (base &&
                    empty &&
                    empty.from == head - 2 &&
                    ((name = jsxElementName(state.doc, base.firstChild, head)) ||
                        ((_a = base.firstChild) === null || _a === void 0
                            ? void 0
                            : _a.name) == 'JSXFragmentTag')) {
                    let insert = `${name}>`;
                    return {
                        range: EditorSelection.cursor(head + insert.length, -1),
                        changes: { from: head, insert },
                    };
                }
            }
            else if (text == '>') {
                let openTag = around ? findOpenTag(around) : null;
                if (openTag &&
                    openTag.name == 'JSXOpenTag' &&
                    !/^\/?>|^<\//.test(state.doc.sliceString(head, head + 2)) &&
                    (name = jsxElementName(state.doc, openTag, head)))
                    return { range, changes: { from: head, insert: `</${name}>` } };
            }
            return { range };
        });
        if (closeTags.changes.empty)
            return [defaultInsert];
        return [
            base,
            state.update(closeTags, {
                userEvent: 'input.complete',
                scrollIntoView: true,
            }),
        ];
    };
    function elementName(doc, tree, max = doc.length) {
        if (!tree)
            return '';
        let tag = tree.firstChild;
        let name = tag && tag.getChild('TagName');
        return name ? doc.sliceString(name.from, Math.min(name.to, max)) : '';
    }
    function jsxElementName(doc, tree, max = doc.length) {
        for (let ch = tree === null || tree === void 0 ? void 0 : tree.firstChild; ch; ch = ch.nextSibling) {
            if (ch.name == 'JSXIdentifier' ||
                ch.name == 'JSXBuiltin' ||
                ch.name == 'JSXNamespacedName' ||
                ch.name == 'JSXMemberExpression')
                return doc.sliceString(ch.from, Math.min(ch.to, max));
        }
        return '';
    }
    function findOpenTag(node) {
        for (;;) {
            if (node.name == 'JSXOpenTag' ||
                node.name == 'JSXSelfClosingTag' ||
                node.name == 'JSXFragmentTag')
                return node;
            if (node.name == 'JSXEscape' || !node.parent)
                return null;
            node = node.parent;
        }
    }
    const selfClosers = new Set('area base br col command embed frame hr img input keygen link meta param source track wbr menuitem'.split(' '));

    function Diff() {}
    Diff.prototype = {
      diff: function diff(oldString, newString) {
        var _options$timeout;
        var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
        var callback = options.callback;
        if (typeof options === 'function') {
          callback = options;
          options = {};
        }
        var self = this;
        function done(value) {
          value = self.postProcess(value, options);
          if (callback) {
            setTimeout(function () {
              callback(value);
            }, 0);
            return true;
          } else {
            return value;
          }
        }

        // Allow subclasses to massage the input prior to running
        oldString = this.castInput(oldString, options);
        newString = this.castInput(newString, options);
        oldString = this.removeEmpty(this.tokenize(oldString, options));
        newString = this.removeEmpty(this.tokenize(newString, options));
        var newLen = newString.length,
          oldLen = oldString.length;
        var editLength = 1;
        var maxEditLength = newLen + oldLen;
        if (options.maxEditLength != null) {
          maxEditLength = Math.min(maxEditLength, options.maxEditLength);
        }
        var maxExecutionTime = (_options$timeout = options.timeout) !== null && _options$timeout !== void 0 ? _options$timeout : Infinity;
        var abortAfterTimestamp = Date.now() + maxExecutionTime;
        var bestPath = [{
          oldPos: -1,
          lastComponent: undefined
        }];

        // Seed editLength = 0, i.e. the content starts with the same values
        var newPos = this.extractCommon(bestPath[0], newString, oldString, 0, options);
        if (bestPath[0].oldPos + 1 >= oldLen && newPos + 1 >= newLen) {
          // Identity per the equality and tokenizer
          return done(buildValues(self, bestPath[0].lastComponent, newString, oldString, self.useLongestToken));
        }

        // Once we hit the right edge of the edit graph on some diagonal k, we can
        // definitely reach the end of the edit graph in no more than k edits, so
        // there's no point in considering any moves to diagonal k+1 any more (from
        // which we're guaranteed to need at least k+1 more edits).
        // Similarly, once we've reached the bottom of the edit graph, there's no
        // point considering moves to lower diagonals.
        // We record this fact by setting minDiagonalToConsider and
        // maxDiagonalToConsider to some finite value once we've hit the edge of
        // the edit graph.
        // This optimization is not faithful to the original algorithm presented in
        // Myers's paper, which instead pointlessly extends D-paths off the end of
        // the edit graph - see page 7 of Myers's paper which notes this point
        // explicitly and illustrates it with a diagram. This has major performance
        // implications for some common scenarios. For instance, to compute a diff
        // where the new text simply appends d characters on the end of the
        // original text of length n, the true Myers algorithm will take O(n+d^2)
        // time while this optimization needs only O(n+d) time.
        var minDiagonalToConsider = -Infinity,
          maxDiagonalToConsider = Infinity;

        // Main worker method. checks all permutations of a given edit length for acceptance.
        function execEditLength() {
          for (var diagonalPath = Math.max(minDiagonalToConsider, -editLength); diagonalPath <= Math.min(maxDiagonalToConsider, editLength); diagonalPath += 2) {
            var basePath = void 0;
            var removePath = bestPath[diagonalPath - 1],
              addPath = bestPath[diagonalPath + 1];
            if (removePath) {
              // No one else is going to attempt to use this value, clear it
              bestPath[diagonalPath - 1] = undefined;
            }
            var canAdd = false;
            if (addPath) {
              // what newPos will be after we do an insertion:
              var addPathNewPos = addPath.oldPos - diagonalPath;
              canAdd = addPath && 0 <= addPathNewPos && addPathNewPos < newLen;
            }
            var canRemove = removePath && removePath.oldPos + 1 < oldLen;
            if (!canAdd && !canRemove) {
              // If this path is a terminal then prune
              bestPath[diagonalPath] = undefined;
              continue;
            }

            // Select the diagonal that we want to branch from. We select the prior
            // path whose position in the old string is the farthest from the origin
            // and does not pass the bounds of the diff graph
            if (!canRemove || canAdd && removePath.oldPos < addPath.oldPos) {
              basePath = self.addToPath(addPath, true, false, 0, options);
            } else {
              basePath = self.addToPath(removePath, false, true, 1, options);
            }
            newPos = self.extractCommon(basePath, newString, oldString, diagonalPath, options);
            if (basePath.oldPos + 1 >= oldLen && newPos + 1 >= newLen) {
              // If we have hit the end of both strings, then we are done
              return done(buildValues(self, basePath.lastComponent, newString, oldString, self.useLongestToken));
            } else {
              bestPath[diagonalPath] = basePath;
              if (basePath.oldPos + 1 >= oldLen) {
                maxDiagonalToConsider = Math.min(maxDiagonalToConsider, diagonalPath - 1);
              }
              if (newPos + 1 >= newLen) {
                minDiagonalToConsider = Math.max(minDiagonalToConsider, diagonalPath + 1);
              }
            }
          }
          editLength++;
        }

        // Performs the length of edit iteration. Is a bit fugly as this has to support the
        // sync and async mode which is never fun. Loops over execEditLength until a value
        // is produced, or until the edit length exceeds options.maxEditLength (if given),
        // in which case it will return undefined.
        if (callback) {
          (function exec() {
            setTimeout(function () {
              if (editLength > maxEditLength || Date.now() > abortAfterTimestamp) {
                return callback();
              }
              if (!execEditLength()) {
                exec();
              }
            }, 0);
          })();
        } else {
          while (editLength <= maxEditLength && Date.now() <= abortAfterTimestamp) {
            var ret = execEditLength();
            if (ret) {
              return ret;
            }
          }
        }
      },
      addToPath: function addToPath(path, added, removed, oldPosInc, options) {
        var last = path.lastComponent;
        if (last && !options.oneChangePerToken && last.added === added && last.removed === removed) {
          return {
            oldPos: path.oldPos + oldPosInc,
            lastComponent: {
              count: last.count + 1,
              added: added,
              removed: removed,
              previousComponent: last.previousComponent
            }
          };
        } else {
          return {
            oldPos: path.oldPos + oldPosInc,
            lastComponent: {
              count: 1,
              added: added,
              removed: removed,
              previousComponent: last
            }
          };
        }
      },
      extractCommon: function extractCommon(basePath, newString, oldString, diagonalPath, options) {
        var newLen = newString.length,
          oldLen = oldString.length,
          oldPos = basePath.oldPos,
          newPos = oldPos - diagonalPath,
          commonCount = 0;
        while (newPos + 1 < newLen && oldPos + 1 < oldLen && this.equals(oldString[oldPos + 1], newString[newPos + 1], options)) {
          newPos++;
          oldPos++;
          commonCount++;
          if (options.oneChangePerToken) {
            basePath.lastComponent = {
              count: 1,
              previousComponent: basePath.lastComponent,
              added: false,
              removed: false
            };
          }
        }
        if (commonCount && !options.oneChangePerToken) {
          basePath.lastComponent = {
            count: commonCount,
            previousComponent: basePath.lastComponent,
            added: false,
            removed: false
          };
        }
        basePath.oldPos = oldPos;
        return newPos;
      },
      equals: function equals(left, right, options) {
        if (options.comparator) {
          return options.comparator(left, right);
        } else {
          return left === right || options.ignoreCase && left.toLowerCase() === right.toLowerCase();
        }
      },
      removeEmpty: function removeEmpty(array) {
        var ret = [];
        for (var i = 0; i < array.length; i++) {
          if (array[i]) {
            ret.push(array[i]);
          }
        }
        return ret;
      },
      castInput: function castInput(value) {
        return value;
      },
      tokenize: function tokenize(value) {
        return Array.from(value);
      },
      join: function join(chars) {
        return chars.join('');
      },
      postProcess: function postProcess(changeObjects) {
        return changeObjects;
      }
    };
    function buildValues(diff, lastComponent, newString, oldString, useLongestToken) {
      // First we convert our linked list of components in reverse order to an
      // array in the right order:
      var components = [];
      var nextComponent;
      while (lastComponent) {
        components.push(lastComponent);
        nextComponent = lastComponent.previousComponent;
        delete lastComponent.previousComponent;
        lastComponent = nextComponent;
      }
      components.reverse();
      var componentPos = 0,
        componentLen = components.length,
        newPos = 0,
        oldPos = 0;
      for (; componentPos < componentLen; componentPos++) {
        var component = components[componentPos];
        if (!component.removed) {
          if (!component.added && useLongestToken) {
            var value = newString.slice(newPos, newPos + component.count);
            value = value.map(function (value, i) {
              var oldValue = oldString[oldPos + i];
              return oldValue.length > value.length ? oldValue : value;
            });
            component.value = diff.join(value);
          } else {
            component.value = diff.join(newString.slice(newPos, newPos + component.count));
          }
          newPos += component.count;

          // Common case
          if (!component.added) {
            oldPos += component.count;
          }
        } else {
          component.value = diff.join(oldString.slice(oldPos, oldPos + component.count));
          oldPos += component.count;
        }
      }
      return components;
    }

    function longestCommonPrefix(str1, str2) {
      var i;
      for (i = 0; i < str1.length && i < str2.length; i++) {
        if (str1[i] != str2[i]) {
          return str1.slice(0, i);
        }
      }
      return str1.slice(0, i);
    }
    function longestCommonSuffix(str1, str2) {
      var i;

      // Unlike longestCommonPrefix, we need a special case to handle all scenarios
      // where we return the empty string since str1.slice(-0) will return the
      // entire string.
      if (!str1 || !str2 || str1[str1.length - 1] != str2[str2.length - 1]) {
        return '';
      }
      for (i = 0; i < str1.length && i < str2.length; i++) {
        if (str1[str1.length - (i + 1)] != str2[str2.length - (i + 1)]) {
          return str1.slice(-i);
        }
      }
      return str1.slice(-i);
    }
    function replacePrefix(string, oldPrefix, newPrefix) {
      if (string.slice(0, oldPrefix.length) != oldPrefix) {
        throw Error("string ".concat(JSON.stringify(string), " doesn't start with prefix ").concat(JSON.stringify(oldPrefix), "; this is a bug"));
      }
      return newPrefix + string.slice(oldPrefix.length);
    }
    function replaceSuffix(string, oldSuffix, newSuffix) {
      if (!oldSuffix) {
        return string + newSuffix;
      }
      if (string.slice(-oldSuffix.length) != oldSuffix) {
        throw Error("string ".concat(JSON.stringify(string), " doesn't end with suffix ").concat(JSON.stringify(oldSuffix), "; this is a bug"));
      }
      return string.slice(0, -oldSuffix.length) + newSuffix;
    }
    function removePrefix(string, oldPrefix) {
      return replacePrefix(string, oldPrefix, '');
    }
    function removeSuffix(string, oldSuffix) {
      return replaceSuffix(string, oldSuffix, '');
    }
    function maximumOverlap(string1, string2) {
      return string2.slice(0, overlapCount(string1, string2));
    }

    // Nicked from https://stackoverflow.com/a/60422853/1709587
    function overlapCount(a, b) {
      // Deal with cases where the strings differ in length
      var startA = 0;
      if (a.length > b.length) {
        startA = a.length - b.length;
      }
      var endB = b.length;
      if (a.length < b.length) {
        endB = a.length;
      }
      // Create a back-reference for each index
      //   that should be followed in case of a mismatch.
      //   We only need B to make these references:
      var map = Array(endB);
      var k = 0; // Index that lags behind j
      map[0] = 0;
      for (var j = 1; j < endB; j++) {
        if (b[j] == b[k]) {
          map[j] = map[k]; // skip over the same character (optional optimisation)
        } else {
          map[j] = k;
        }
        while (k > 0 && b[j] != b[k]) {
          k = map[k];
        }
        if (b[j] == b[k]) {
          k++;
        }
      }
      // Phase 2: use these references while iterating over A
      k = 0;
      for (var i = startA; i < a.length; i++) {
        while (k > 0 && a[i] != b[k]) {
          k = map[k];
        }
        if (a[i] == b[k]) {
          k++;
        }
      }
      return k;
    }

    // Based on https://en.wikipedia.org/wiki/Latin_script_in_Unicode
    //
    // Ranges and exceptions:
    // Latin-1 Supplement, 0080–00FF
    //  - U+00D7  × Multiplication sign
    //  - U+00F7  ÷ Division sign
    // Latin Extended-A, 0100–017F
    // Latin Extended-B, 0180–024F
    // IPA Extensions, 0250–02AF
    // Spacing Modifier Letters, 02B0–02FF
    //  - U+02C7  ˇ &#711;  Caron
    //  - U+02D8  ˘ &#728;  Breve
    //  - U+02D9  ˙ &#729;  Dot Above
    //  - U+02DA  ˚ &#730;  Ring Above
    //  - U+02DB  ˛ &#731;  Ogonek
    //  - U+02DC  ˜ &#732;  Small Tilde
    //  - U+02DD  ˝ &#733;  Double Acute Accent
    // Latin Extended Additional, 1E00–1EFF
    var extendedWordChars = "a-zA-Z0-9_\\u{C0}-\\u{FF}\\u{D8}-\\u{F6}\\u{F8}-\\u{2C6}\\u{2C8}-\\u{2D7}\\u{2DE}-\\u{2FF}\\u{1E00}-\\u{1EFF}";

    // Each token is one of the following:
    // - A punctuation mark plus the surrounding whitespace
    // - A word plus the surrounding whitespace
    // - Pure whitespace (but only in the special case where this the entire text
    //   is just whitespace)
    //
    // We have to include surrounding whitespace in the tokens because the two
    // alternative approaches produce horribly broken results:
    // * If we just discard the whitespace, we can't fully reproduce the original
    //   text from the sequence of tokens and any attempt to render the diff will
    //   get the whitespace wrong.
    // * If we have separate tokens for whitespace, then in a typical text every
    //   second token will be a single space character. But this often results in
    //   the optimal diff between two texts being a perverse one that preserves
    //   the spaces between words but deletes and reinserts actual common words.
    //   See https://github.com/kpdecker/jsdiff/issues/160#issuecomment-1866099640
    //   for an example.
    //
    // Keeping the surrounding whitespace of course has implications for .equals
    // and .join, not just .tokenize.

    // This regex does NOT fully implement the tokenization rules described above.
    // Instead, it gives runs of whitespace their own "token". The tokenize method
    // then handles stitching whitespace tokens onto adjacent word or punctuation
    // tokens.
    var tokenizeIncludingWhitespace = new RegExp("[".concat(extendedWordChars, "]+|\\s+|[^").concat(extendedWordChars, "]"), 'ug');
    var wordDiff = new Diff();
    wordDiff.equals = function (left, right, options) {
      if (options.ignoreCase) {
        left = left.toLowerCase();
        right = right.toLowerCase();
      }
      return left.trim() === right.trim();
    };
    wordDiff.tokenize = function (value) {
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      var parts;
      if (options.intlSegmenter) {
        if (options.intlSegmenter.resolvedOptions().granularity != 'word') {
          throw new Error('The segmenter passed must have a granularity of "word"');
        }
        parts = Array.from(options.intlSegmenter.segment(value), function (segment) {
          return segment.segment;
        });
      } else {
        parts = value.match(tokenizeIncludingWhitespace) || [];
      }
      var tokens = [];
      var prevPart = null;
      parts.forEach(function (part) {
        if (/\s/.test(part)) {
          if (prevPart == null) {
            tokens.push(part);
          } else {
            tokens.push(tokens.pop() + part);
          }
        } else if (/\s/.test(prevPart)) {
          if (tokens[tokens.length - 1] == prevPart) {
            tokens.push(tokens.pop() + part);
          } else {
            tokens.push(prevPart + part);
          }
        } else {
          tokens.push(part);
        }
        prevPart = part;
      });
      return tokens;
    };
    wordDiff.join = function (tokens) {
      // Tokens being joined here will always have appeared consecutively in the
      // same text, so we can simply strip off the leading whitespace from all the
      // tokens except the first (and except any whitespace-only tokens - but such
      // a token will always be the first and only token anyway) and then join them
      // and the whitespace around words and punctuation will end up correct.
      return tokens.map(function (token, i) {
        if (i == 0) {
          return token;
        } else {
          return token.replace(/^\s+/, '');
        }
      }).join('');
    };
    wordDiff.postProcess = function (changes, options) {
      if (!changes || options.oneChangePerToken) {
        return changes;
      }
      var lastKeep = null;
      // Change objects representing any insertion or deletion since the last
      // "keep" change object. There can be at most one of each.
      var insertion = null;
      var deletion = null;
      changes.forEach(function (change) {
        if (change.added) {
          insertion = change;
        } else if (change.removed) {
          deletion = change;
        } else {
          if (insertion || deletion) {
            // May be false at start of text
            dedupeWhitespaceInChangeObjects(lastKeep, deletion, insertion, change);
          }
          lastKeep = change;
          insertion = null;
          deletion = null;
        }
      });
      if (insertion || deletion) {
        dedupeWhitespaceInChangeObjects(lastKeep, deletion, insertion, null);
      }
      return changes;
    };
    function dedupeWhitespaceInChangeObjects(startKeep, deletion, insertion, endKeep) {
      // Before returning, we tidy up the leading and trailing whitespace of the
      // change objects to eliminate cases where trailing whitespace in one object
      // is repeated as leading whitespace in the next.
      // Below are examples of the outcomes we want here to explain the code.
      // I=insert, K=keep, D=delete
      // 1. diffing 'foo bar baz' vs 'foo baz'
      //    Prior to cleanup, we have K:'foo ' D:' bar ' K:' baz'
      //    After cleanup, we want:   K:'foo ' D:'bar ' K:'baz'
      //
      // 2. Diffing 'foo bar baz' vs 'foo qux baz'
      //    Prior to cleanup, we have K:'foo ' D:' bar ' I:' qux ' K:' baz'
      //    After cleanup, we want K:'foo ' D:'bar' I:'qux' K:' baz'
      //
      // 3. Diffing 'foo\nbar baz' vs 'foo baz'
      //    Prior to cleanup, we have K:'foo ' D:'\nbar ' K:' baz'
      //    After cleanup, we want K'foo' D:'\nbar' K:' baz'
      //
      // 4. Diffing 'foo baz' vs 'foo\nbar baz'
      //    Prior to cleanup, we have K:'foo\n' I:'\nbar ' K:' baz'
      //    After cleanup, we ideally want K'foo' I:'\nbar' K:' baz'
      //    but don't actually manage this currently (the pre-cleanup change
      //    objects don't contain enough information to make it possible).
      //
      // 5. Diffing 'foo   bar baz' vs 'foo  baz'
      //    Prior to cleanup, we have K:'foo  ' D:'   bar ' K:'  baz'
      //    After cleanup, we want K:'foo  ' D:' bar ' K:'baz'
      //
      // Our handling is unavoidably imperfect in the case where there's a single
      // indel between keeps and the whitespace has changed. For instance, consider
      // diffing 'foo\tbar\nbaz' vs 'foo baz'. Unless we create an extra change
      // object to represent the insertion of the space character (which isn't even
      // a token), we have no way to avoid losing information about the texts'
      // original whitespace in the result we return. Still, we do our best to
      // output something that will look sensible if we e.g. print it with
      // insertions in green and deletions in red.

      // Between two "keep" change objects (or before the first or after the last
      // change object), we can have either:
      // * A "delete" followed by an "insert"
      // * Just an "insert"
      // * Just a "delete"
      // We handle the three cases separately.
      if (deletion && insertion) {
        var oldWsPrefix = deletion.value.match(/^\s*/)[0];
        var oldWsSuffix = deletion.value.match(/\s*$/)[0];
        var newWsPrefix = insertion.value.match(/^\s*/)[0];
        var newWsSuffix = insertion.value.match(/\s*$/)[0];
        if (startKeep) {
          var commonWsPrefix = longestCommonPrefix(oldWsPrefix, newWsPrefix);
          startKeep.value = replaceSuffix(startKeep.value, newWsPrefix, commonWsPrefix);
          deletion.value = removePrefix(deletion.value, commonWsPrefix);
          insertion.value = removePrefix(insertion.value, commonWsPrefix);
        }
        if (endKeep) {
          var commonWsSuffix = longestCommonSuffix(oldWsSuffix, newWsSuffix);
          endKeep.value = replacePrefix(endKeep.value, newWsSuffix, commonWsSuffix);
          deletion.value = removeSuffix(deletion.value, commonWsSuffix);
          insertion.value = removeSuffix(insertion.value, commonWsSuffix);
        }
      } else if (insertion) {
        // The whitespaces all reflect what was in the new text rather than
        // the old, so we essentially have no information about whitespace
        // insertion or deletion. We just want to dedupe the whitespace.
        // We do that by having each change object keep its trailing
        // whitespace and deleting duplicate leading whitespace where
        // present.
        if (startKeep) {
          insertion.value = insertion.value.replace(/^\s*/, '');
        }
        if (endKeep) {
          endKeep.value = endKeep.value.replace(/^\s*/, '');
        }
        // otherwise we've got a deletion and no insertion
      } else if (startKeep && endKeep) {
        var newWsFull = endKeep.value.match(/^\s*/)[0],
          delWsStart = deletion.value.match(/^\s*/)[0],
          delWsEnd = deletion.value.match(/\s*$/)[0];

        // Any whitespace that comes straight after startKeep in both the old and
        // new texts, assign to startKeep and remove from the deletion.
        var newWsStart = longestCommonPrefix(newWsFull, delWsStart);
        deletion.value = removePrefix(deletion.value, newWsStart);

        // Any whitespace that comes straight before endKeep in both the old and
        // new texts, and hasn't already been assigned to startKeep, assign to
        // endKeep and remove from the deletion.
        var newWsEnd = longestCommonSuffix(removePrefix(newWsFull, newWsStart), delWsEnd);
        deletion.value = removeSuffix(deletion.value, newWsEnd);
        endKeep.value = replacePrefix(endKeep.value, newWsFull, newWsEnd);

        // If there's any whitespace from the new text that HASN'T already been
        // assigned, assign it to the start:
        startKeep.value = replaceSuffix(startKeep.value, newWsFull, newWsFull.slice(0, newWsFull.length - newWsEnd.length));
      } else if (endKeep) {
        // We are at the start of the text. Preserve all the whitespace on
        // endKeep, and just remove whitespace from the end of deletion to the
        // extent that it overlaps with the start of endKeep.
        var endKeepWsPrefix = endKeep.value.match(/^\s*/)[0];
        var deletionWsSuffix = deletion.value.match(/\s*$/)[0];
        var overlap = maximumOverlap(deletionWsSuffix, endKeepWsPrefix);
        deletion.value = removeSuffix(deletion.value, overlap);
      } else if (startKeep) {
        // We are at the END of the text. Preserve all the whitespace on
        // startKeep, and just remove whitespace from the start of deletion to
        // the extent that it overlaps with the end of startKeep.
        var startKeepWsSuffix = startKeep.value.match(/\s*$/)[0];
        var deletionWsPrefix = deletion.value.match(/^\s*/)[0];
        var _overlap = maximumOverlap(startKeepWsSuffix, deletionWsPrefix);
        deletion.value = removePrefix(deletion.value, _overlap);
      }
    }
    var wordWithSpaceDiff = new Diff();
    wordWithSpaceDiff.tokenize = function (value) {
      // Slightly different to the tokenizeIncludingWhitespace regex used above in
      // that this one treats each individual newline as a distinct tokens, rather
      // than merging them into other surrounding whitespace. This was requested
      // in https://github.com/kpdecker/jsdiff/issues/180 &
      //    https://github.com/kpdecker/jsdiff/issues/211
      var regex = new RegExp("(\\r?\\n)|[".concat(extendedWordChars, "]+|[^\\S\\n\\r]+|[^").concat(extendedWordChars, "]"), 'ug');
      return value.match(regex) || [];
    };

    var lineDiff = new Diff();
    lineDiff.tokenize = function (value, options) {
      if (options.stripTrailingCr) {
        // remove one \r before \n to match GNU diff's --strip-trailing-cr behavior
        value = value.replace(/\r\n/g, '\n');
      }
      var retLines = [],
        linesAndNewlines = value.split(/(\n|\r\n)/);

      // Ignore the final empty token that occurs if the string ends with a new line
      if (!linesAndNewlines[linesAndNewlines.length - 1]) {
        linesAndNewlines.pop();
      }

      // Merge the content and line separators into single tokens
      for (var i = 0; i < linesAndNewlines.length; i++) {
        var line = linesAndNewlines[i];
        if (i % 2 && !options.newlineIsToken) {
          retLines[retLines.length - 1] += line;
        } else {
          retLines.push(line);
        }
      }
      return retLines;
    };
    lineDiff.equals = function (left, right, options) {
      // If we're ignoring whitespace, we need to normalise lines by stripping
      // whitespace before checking equality. (This has an annoying interaction
      // with newlineIsToken that requires special handling: if newlines get their
      // own token, then we DON'T want to trim the *newline* tokens down to empty
      // strings, since this would cause us to treat whitespace-only line content
      // as equal to a separator between lines, which would be weird and
      // inconsistent with the documented behavior of the options.)
      if (options.ignoreWhitespace) {
        if (!options.newlineIsToken || !left.includes('\n')) {
          left = left.trim();
        }
        if (!options.newlineIsToken || !right.includes('\n')) {
          right = right.trim();
        }
      } else if (options.ignoreNewlineAtEof && !options.newlineIsToken) {
        if (left.endsWith('\n')) {
          left = left.slice(0, -1);
        }
        if (right.endsWith('\n')) {
          right = right.slice(0, -1);
        }
      }
      return Diff.prototype.equals.call(this, left, right, options);
    };
    function diffLines(oldStr, newStr, callback) {
      return lineDiff.diff(oldStr, newStr, callback);
    }

    var sentenceDiff = new Diff();
    sentenceDiff.tokenize = function (value) {
      return value.split(/(\S.+?[.!?])(?=\s+|$)/);
    };

    var cssDiff = new Diff();
    cssDiff.tokenize = function (value) {
      return value.split(/([{}:;,]|\s+)/);
    };
    function _typeof(o) {
      "@babel/helpers - typeof";

      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) {
        return typeof o;
      } : function (o) {
        return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o;
      }, _typeof(o);
    }

    var jsonDiff = new Diff();
    // Discriminate between two lines of pretty-printed, serialized JSON where one of them has a
    // dangling comma and the other doesn't. Turns out including the dangling comma yields the nicest output:
    jsonDiff.useLongestToken = true;
    jsonDiff.tokenize = lineDiff.tokenize;
    jsonDiff.castInput = function (value, options) {
      var undefinedReplacement = options.undefinedReplacement,
        _options$stringifyRep = options.stringifyReplacer,
        stringifyReplacer = _options$stringifyRep === void 0 ? function (k, v) {
          return typeof v === 'undefined' ? undefinedReplacement : v;
        } : _options$stringifyRep;
      return typeof value === 'string' ? value : JSON.stringify(canonicalize(value, null, null, stringifyReplacer), stringifyReplacer, '  ');
    };
    jsonDiff.equals = function (left, right, options) {
      return Diff.prototype.equals.call(jsonDiff, left.replace(/,([\r\n])/g, '$1'), right.replace(/,([\r\n])/g, '$1'), options);
    };

    // This function handles the presence of circular references by bailing out when encountering an
    // object that is already on the "stack" of items being processed. Accepts an optional replacer
    function canonicalize(obj, stack, replacementStack, replacer, key) {
      stack = stack || [];
      replacementStack = replacementStack || [];
      if (replacer) {
        obj = replacer(key, obj);
      }
      var i;
      for (i = 0; i < stack.length; i += 1) {
        if (stack[i] === obj) {
          return replacementStack[i];
        }
      }
      var canonicalizedObj;
      if ('[object Array]' === Object.prototype.toString.call(obj)) {
        stack.push(obj);
        canonicalizedObj = new Array(obj.length);
        replacementStack.push(canonicalizedObj);
        for (i = 0; i < obj.length; i += 1) {
          canonicalizedObj[i] = canonicalize(obj[i], stack, replacementStack, replacer, key);
        }
        stack.pop();
        replacementStack.pop();
        return canonicalizedObj;
      }
      if (obj && obj.toJSON) {
        obj = obj.toJSON();
      }
      if (_typeof(obj) === 'object' && obj !== null) {
        stack.push(obj);
        canonicalizedObj = {};
        replacementStack.push(canonicalizedObj);
        var sortedKeys = [],
          _key;
        for (_key in obj) {
          /* istanbul ignore else */
          if (Object.prototype.hasOwnProperty.call(obj, _key)) {
            sortedKeys.push(_key);
          }
        }
        sortedKeys.sort();
        for (i = 0; i < sortedKeys.length; i += 1) {
          _key = sortedKeys[i];
          canonicalizedObj[_key] = canonicalize(obj[_key], stack, replacementStack, replacer, _key);
        }
        stack.pop();
        replacementStack.pop();
      } else {
        canonicalizedObj = obj;
      }
      return canonicalizedObj;
    }

    var arrayDiff = new Diff();
    arrayDiff.tokenize = function (value) {
      return value.slice();
    };
    arrayDiff.join = arrayDiff.removeEmpty = function (value) {
      return value;
    };

    let language = new Compartment();
    let currentLanguageExtension = new Compartment();
    let theme = new Compartment();
    let editable = new Compartment();
    let editor;
    let onOutgoingMessageRef;
    let isDarkTheme = window.matchMedia('(prefers-color-scheme: dark)').matches;
    const currentLanguageExtensionFacet = Facet.define();
    function init(onOutgoingMessage) {
        onOutgoingMessageRef = onOutgoingMessage;
        const targetElement = document.querySelector('#editor');
        if (editor) {
            return editor;
        }
        editor = new EditorView({
            state: EditorState.create({
                doc: '',
                extensions: [
                    lineNumbers(),
                    highlightActiveLineGutter(),
                    highlightSpecialChars(),
                    history(),
                    foldGutter(),
                    drawSelection(),
                    indentOnInput(),
                    bracketMatching(),
                    closeBrackets(),
                    autocompletion(),
                    highlightActiveLine(),
                    highlightSelectionMatches(),
                    language.of(javascript()),
                    currentLanguageExtension.of(currentLanguageExtensionFacet.of('js')),
                    keymap.of(defaultKeymap),
                    EditorView.lineWrapping,
                    theme.of(isDarkTheme ? mimoDark : mimoLight),
                    editable.of(EditorView.editable.of(true)),
                    EditorView.updateListener.of((update) => {
                        if (update.docChanged) {
                            let content = editor.state.doc.toString();
                            sendOutgoingMessage({
                                type: 'changes',
                                content: content,
                            });
                        }
                        if (update.focusChanged) {
                            const hasFocus = editor.hasFocus;
                            sendOutgoingMessage({
                                type: 'editor focus changed',
                                hasFocus: hasFocus,
                            });
                        }
                    }),
                    highlightField,
                ],
            }),
            parent: targetElement,
        });
        return editor;
    }
    function undoCommand() {
        undo(editor);
    }
    function redoCommand() {
        redo(editor);
    }
    function sendOutgoingMessage(message) {
        let messageString = JSON.stringify(message);
        if (message.type == 'error') {
            console.error(message.error);
        }
        if (onOutgoingMessageRef) {
            // used for the web preview
            onOutgoingMessageRef(message);
        }
        if (window.android) {
            // used for the android app
            window.android.callNative('spieglein', messageString);
        }
        if (window.webkit) {
            // used send to iOS app
            window.webkit.messageHandlers.spieglein.postMessage(messageString);
        }
    }
    async function format(fileName) {
        try {
            const parser = getParserByFileName(fileName);
            // prettier will throw an error if the code is not valid
            const result = await lc$2.formatWithCursor(editor.state.doc.toString(), {
                parser: parser,
                cursorOffset: editor.state.doc.length,
                plugins: [Cn$3, Nh, Ub, rx],
                tabWidth: 2,
            });
            editor.dispatch({
                changes: {
                    from: 0,
                    to: editor.state.doc.length,
                    insert: result.formatted,
                },
            });
        }
        catch (error) {
            sendOutgoingMessage({
                type: 'error',
                error: error.message,
            });
        }
    }
    function setContent(newCode, fileName) {
        if (newCode == editor.state.doc.toString()) {
            return;
        }
        let languageExtension = fileName.split('.').pop();
        if (languageExtension) {
            let languageByExtension = languageByFileExtension(languageExtension);
            editor.dispatch({
                changes: { from: 0, to: editor.state.doc.length, insert: newCode },
                effects: [
                    language.reconfigure(languageByExtension),
                    currentLanguageExtension.reconfigure(currentLanguageExtensionFacet.of(languageExtension)),
                ],
            });
        }
    }
    function languageByFileExtension(extension) {
        switch (extension) {
            case 'js':
                return javascript();
            case 'jsx':
                return javascript({ jsx: true });
            case 'ts':
                return javascript({ typescript: true });
            case 'py':
                return python();
            case 'html':
                return html({
                    autoCloseTags: true,
                    selfClosingTags: true,
                });
            case 'css':
                return css();
            case 'json':
                return json();
            case 'sql':
                return sql({
                    dialect: SQLite,
                    upperCaseKeywords: true,
                });
            default:
                throw new Error(`Unsupported language: ${extension}`);
        }
    }
    function setTheme(theme) {
        setDarkTheme(theme === 'dark');
    }
    function setCursorPosition(colNumber, lineNumber) {
        try {
            editor.focus();
            const line = editor.state.doc.line(lineNumber);
            editor.dispatch({
                // Set selection to that entire line.
                selection: { head: line.from + colNumber, anchor: line.from + colNumber },
                // Ensure the selection is shown in viewport
                scrollIntoView: true,
            });
        }
        catch (error) {
            sendOutgoingMessage({
                type: 'error',
                error: error.message,
            });
        }
    }
    function setDarkTheme(isDark) {
        if (isDark) {
            //dark mode
            editor.dispatch({
                effects: [theme.reconfigure(mimoDark)],
            });
        }
        else {
            //light mode
            editor.dispatch({
                effects: [theme.reconfigure(mimoLight)],
            });
        }
    }
    function setEditable(newEditable) {
        editor.dispatch({
            effects: editable.reconfigure(EditorView.editable.of(newEditable)),
        });
        if (!newEditable) {
            removeEditorFocus();
        }
    }
    function getParserByFileName(fileName) {
        switch (fileName.split('.').pop()) {
            case 'js':
                return 'babel';
            case 'jsx':
                return 'babel';
            case 'html':
                return 'html';
            case 'css':
                return 'css';
            case 'ts':
                return 'babel';
        }
    }
    function addSnippet(snippet) {
        const from = editor.state.selection.main.from;
        editor.focus();
        let currentLanguageExtension = editor.state.facet(currentLanguageExtensionFacet);
        //check if the snippet is a bracket and if so, insert the matching bracket, this is done regardless of the language, as there might be brackets in other languagues (i.e. html script tags or JSX code)
        let bracketInsertion = insertBracket(editor.state, snippet);
        //this is the transaction that will be used to insert the snippet
        let insertTransaction = editor.state.update({
            changes: { from: from, insert: snippet },
            selection: { anchor: from + snippet.length },
            annotations: [
                Transaction.userEvent.of('input.type'),
                Transaction.addToHistory.of(true),
            ],
            scrollIntoView: true,
        });
        let languageSpecificCloseTagsTransactions = languageSpecificCloseTags(currentLanguageExtension, snippet, insertTransaction);
        // we chose the bracket insertion transaction if it exists, otherwise we chose language specific close tags transaction
        let transactions = bracketInsertion
            ? [bracketInsertion]
            : languageSpecificCloseTagsTransactions;
        editor.dispatch(transactions);
    }
    function languageSpecificCloseTags(currentLanguageExtension, snippet, insertTransaction) {
        if (currentLanguageExtension == 'html') {
            return htmlAutoCloseTags(editor, snippet, insertTransaction);
        }
        else if (currentLanguageExtension == 'jsx') {
            return jsxAutoCloseTags(editor, snippet, insertTransaction);
        }
        else {
            return [insertTransaction];
        }
    }
    function addEditorFocus() {
        editor.focus();
    }
    function removeEditorFocus() {
        editor.contentDOM.blur();
    }
    function highlightDiff(oldContent) {
        const newContent = editor.state.doc.toString();
        const changes = diffLines(oldContent, newContent, {
            ignoreNewlineAtEof: true,
            ignoreWhitespace: true,
            newlineIsToken: true,
        });
        let currentLineIndex = 0;
        changes.forEach((change) => {
            if (change.added) {
                const lines = change.value.split('\n');
                const newContentLines = newContent.split('\n');
                lines.forEach((lineContent) => {
                    if (lineContent.trim() !== '') {
                        for (let i = currentLineIndex; i < newContentLines.length; i++) {
                            if (newContentLines[i].trim() === lineContent.trim()) {
                                const lineNumber = i + 1; // Line numbers are 1-based
                                const line = editor.state.doc.line(lineNumber);
                                highlightRange(editor, line.from);
                                currentLineIndex = i + 1;
                                break;
                            }
                        }
                    }
                });
            }
        });
    }
    // Function to add highlight to a range
    function highlightRange(view, from) {
        view.dispatch({
            effects: addHighlight.of({ from, to: from }),
        });
    }
    // Define a state effect to add a highlight
    const addHighlight = StateEffect.define({
        map: ({ from, to }, change) => ({
            from: change.mapPos(from),
            to: change.mapPos(to),
        }),
    });
    // Define the decoration
    const highlightMark = Decoration.line({
        attributes: {
            style: `background-image: linear-gradient(to right, ${isDarkTheme ? 'rgba(185, 151, 248, 0.3)' : 'rgba(141, 96, 226, 0.3)'} 0%, ${isDarkTheme ? 'rgba(101, 183, 255, 0.3)' : 'rgba(56, 144, 250, 0.3)'} 100%); transition: background-color 1s ease-in-out;`,
        },
    });
    // Define a state field to manage the decorations
    const highlightField = StateField.define({
        create() {
            return Decoration.none;
        },
        update(highlights, tr) {
            // Clear highlights on document change or navigation
            if (tr.docChanged || tr.selection) {
                return Decoration.none;
            }
            highlights = highlights.map(tr.changes);
            for (let e of tr.effects) {
                if (e.is(addHighlight)) {
                    const selectionLine = tr.state.selection.main.head;
                    const line = tr.state.doc.lineAt(selectionLine);
                    // Only add highlight if it's not the selected line
                    if (e.value.from !== line.from || e.value.to !== line.to) {
                        highlights = highlights.update({
                            add: [highlightMark.range(e.value.from, e.value.to)],
                        });
                    }
                }
            }
            return highlights;
        },
        provide: (f) => EditorView.decorations.from(f),
    });
    function dispatchMessage(message) {
        switch (message.type) {
            case 'undo':
                undoCommand();
                break;
            case 'redo':
                redoCommand();
                break;
            case 'set cursor position':
                setCursorPosition(message.colNumber, message.lineNumber);
                break;
            case 'format':
                format(message.fileName);
                break;
            case 'set file':
                setContent(message.content, message.fileName);
                break;
            case 'set theme':
                setTheme(message.theme);
                break;
            case 'add snippet':
                addSnippet(message.snippet);
                break;
            case 'add editor focus':
                addEditorFocus();
                break;
            case 'remove editor focus':
                removeEditorFocus();
                break;
            case 'set editable':
                setEditable(message.editable);
                break;
            case 'highlight diff':
                highlightDiff(message.oldContent);
                break;
        }
    }

    exports.dispatchMessage = dispatchMessage;
    exports.init = init;

    return exports;

})({});
