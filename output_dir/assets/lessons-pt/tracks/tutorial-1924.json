{
  "tutorial": {
    "id": 1924,
    "version": 15,
    "type": "guidedProjectOptional",
    "isNew": false,
    "codeLanguage": "javascript",
    "title": "Pedidos de Restaurante",
    "descriptionContent": "Use seus conhecimentos de Javascript para criar um programa que faça pedidos a restaurantes.",
    "shortDescriptionContent": "",
    "showInTrack": true,
    "iconBanner": "tutorial-1924-icon-banner.svg",
    "chapters": [
      {
        "id": 12511,
        "title": "Pedidos de Restaurante",
        "type": "practiceLevel3",
        "lessons": [
          {
            "title": "Starter Code ",
            "id": 113174,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Vamos usar nosso conhecimento de condicionais e loops para criar funções que realizarão ações para um cliente que deseja pedir comida de um restaurante.\n\nVamos começar dando uma olhada no nosso código inicial para entender o que estaremos desenvolvendo.\n\nExistem três listas de menu, cada uma é uma lista com representações de refeições disponíveis. Cada refeição é um objeto que possui `mealName`, `quantity` e `price` como propriedades.\n\nTambém temos três funções vazias `findMeal`, `selectMeal` e `createSummary`.\n\nUsando seu conhecimento de Javascript, você definirá cada função para que elas possam realizar suas respectivas tarefas.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const italianFood = [{\n  mealName: \"Pasta Bolognese\",\n  quantity: 3,\n  price: 7\n}, {\n  mealName: \"Pepperoni pizza\",\n  quantity: 2,\n  price: 10\n}];\nconst thaiFood = [{\n  mealName: \"Pad Thai\",\n  quantity: 1,\n  price: 8\n}];\nconst indianFood = [{\n  mealName: \"Chapati\",\n  quantity: 8,\n  price: 7\n}, {\n  mealName: \"Chicken Massala\",\n  quantity: 5,\n  price: 9\n}, {\n  mealName: \"Tandoori Chicken\",\n  quantity: 5,\n  price: 9\n}];\n\nfunction findMeal(name, menu) {}\n\nfunction selectMeal(name, type) {}\n\nfunction createSummary(name, type, amount) {}",
                  "solvedContent": "const italianFood = [{\n  mealName: \"Pasta Bolognese\",\n  quantity: 3,\n  price: 7\n}, {\n  mealName: \"Pepperoni pizza\",\n  quantity: 2,\n  price: 10\n}];\nconst thaiFood = [{\n  mealName: \"Pad Thai\",\n  quantity: 1,\n  price: 8\n}];\nconst indianFood = [{\n  mealName: \"Chapati\",\n  quantity: 8,\n  price: 7\n}, {\n  mealName: \"Chicken Massala\",\n  quantity: 5,\n  price: 9\n}, {\n  mealName: \"Tandoori Chicken\",\n  quantity: 5,\n  price: 9\n}];\n\nfunction findMeal(name, menu) {}\n\nfunction selectMeal(name, type) {}\n\nfunction createSummary(name, type, amount) {}"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Define findMeal",
            "id": 113175,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Agora que revisamos nosso código inicial, vamos começar criando uma função `findMeal` que retorna os detalhes de uma refeição de um menu após inserir seu nome.\n\n1. Comece criando um loop `for` que itera através do array `menu`, um parâmetro na função `findMeal`.\n2. No corpo do loop `for`, adicione uma condição que verifica se o `mealName` do item atual do `menu` é igual à string `name`. Isso nos ajudará a verificar se o `menu` selecionado tem uma refeição com esse `name`.\n3. Retorne o item atual do menu se a condição for `true`. Isso significa que encontramos esse prato no menu.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const italianFood = [{\n  mealName: \"Pasta Bolognese\",\n  quantity: 3,\n  price: 7\n}, {\n  mealName: \"Pepperoni pizza\",\n  quantity: 2,\n  price: 10\n}];\nconst thaiFood = [{\n  mealName: \"Pad Thai\",\n  quantity: 1,\n  price: 8\n}];\nconst indianFood = [{\n  mealName: \"Chapati\",\n  quantity: 8,\n  price: 7\n}, {\n  mealName: \"Chicken Massala\",\n  quantity: 5,\n  price: 9\n}, {\n  mealName: \"Tandoori Chicken\",\n  quantity: 5,\n  price: 9\n}];\n\nfunction findMeal(name, menu) {}\n\nfunction selectMeal(name, type) {}\n\nfunction createSummary(name, type, amount) {}",
                  "solvedContent": "const italianFood = [{\n  mealName: \"Pasta Bolognese\",\n  quantity: 3,\n  price: 7\n}, {\n  mealName: \"Pepperoni pizza\",\n  quantity: 2,\n  price: 10\n}];\nconst thaiFood = [{\n  mealName: \"Pad Thai\",\n  quantity: 1,\n  price: 8\n}];\nconst indianFood = [{\n  mealName: \"Chapati\",\n  quantity: 8,\n  price: 7\n}, {\n  mealName: \"Chicken Massala\",\n  quantity: 5,\n  price: 9\n}, {\n  mealName: \"Tandoori Chicken\",\n  quantity: 5,\n  price: 9\n}];\n\nfunction findMeal(name, menu) {\n  for (let i = 0; i < menu.length; i++) {\n    if (menu[i].mealName === name) {\n      return menu[i];\n    }\n  }\n}\n\nfunction selectMeal(name, type) {}\n\nfunction createSummary(name, type, amount) {}"
                }
              ],
              "hints": [
                {
                  "title": "Hint",
                  "content": "1. Make sure the `for` loop looks like `for(let i = 0; i < menu.length; i++){}`\n2. Use an `if` statement inside the `for` loop. Use `menu[i].mealName` to access the `mealName` property of the current menu item.\n3. Use a `return` keyword."
                }
              ]
            }
          },
          {
            "title": "Define selectMeal pt 1",
            "id": 113176,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Bom trabalho! Agora vamos começar a definir uma função `selectMeal` que vai extrair informações da refeição com base no `name` da refeição e seu `type`.\n\n1. Adicione uma condicional onde, se `type` for igual a `\"italian\"`, `\"italian order\"` é retornado.\n2. Adicione outra condicional onde, se `type` for igual a `\"indian\"`, `\"indian order\"` é retornado.\n3. Adicione outra condicional onde, se `type` for igual a `\"thai\"`, `\"thai order\"` é retornado.\n4. Quando todas as condicionais falharem, retorne `\"not found\"`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const italianFood = [{\n  mealName: \"Pasta Bolognese\",\n  quantity: 3,\n  price: 7\n}, {\n  mealName: \"Pepperoni pizza\",\n  quantity: 2,\n  price: 10\n}];\nconst thaiFood = [{\n  mealName: \"Pad Thai\",\n  quantity: 1,\n  price: 8\n}];\nconst indianFood = [{\n  mealName: \"Chapati\",\n  quantity: 8,\n  price: 7\n}, {\n  mealName: \"Chicken Massala\",\n  quantity: 5,\n  price: 9\n}, {\n  mealName: \"Tandoori Chicken\",\n  quantity: 5,\n  price: 9\n}];\n\nfunction findMeal(name, menu) {\n  for (let i = 0; i < menu.length; i++) {\n    if (menu[i].mealName === name) {\n      return menu[i];\n    }\n  }\n}\n\nfunction selectMeal(name, type) {}\n\nfunction createSummary(name, type, amount) {}",
                  "solvedContent": "const italianFood = [{\n  mealName: \"Pasta Bolognese\",\n  quantity: 3,\n  price: 7\n}, {\n  mealName: \"Pepperoni pizza\",\n  quantity: 2,\n  price: 10\n}];\nconst thaiFood = [{\n  mealName: \"Pad Thai\",\n  quantity: 1,\n  price: 8\n}];\nconst indianFood = [{\n  mealName: \"Chapati\",\n  quantity: 8,\n  price: 7\n}, {\n  mealName: \"Chicken Massala\",\n  quantity: 5,\n  price: 9\n}, {\n  mealName: \"Tandoori Chicken\",\n  quantity: 5,\n  price: 9\n}];\n\nfunction findMeal(name, menu) {\n  for (let i = 0; i < menu.length; i++) {\n    if (menu[i].mealName === name) {\n      return menu[i];\n    }\n  }\n}\n\nfunction selectMeal(name, type) {\n  if (type === 'italian') {\n    return \"italian order\";\n  } else if (type === 'indian') {\n    return \"indian order\";\n  } else if (type === 'thai') {\n    return \"thai order\";\n  } else {\n    return \"not found\";\n  }\n}\n\nfunction createSummary(name, type, amount) {}"
                }
              ],
              "hints": [
                {
                  "title": "Hint",
                  "content": "Use `if`, `else if` and `else` statements."
                }
              ]
            }
          },
          {
            "title": "Define selectMeal pt 2",
            "id": 113177,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Parabéns! Vamos melhorar nossa função `selectMeal` para que ela retorne uma refeição antes de passarmos para nossa última função.\n\nComo nossa função `findMeal()` é construída para retornar uma refeição específica dado um `menu` e o `name` da refeição, podemos chamá-la dentro de `selectMeal()` para nos ajudar a encontrar a refeição solicitada.\n\n1. Substitua `\"italian order\"` por uma chamada da função `findMeal`, dando a ela `name` e `italianFood` como argumentos.\n2. Substitua `\"indian order\"` por uma chamada da função `findMeal`, dando a ela `name` e `indianFood` como argumentos.\n3. Substitua `\"thai order\"` por uma chamada da função `findMeal`, dando a ela `name` e `thaiFood` como argumentos.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const italianFood = [{\n  mealName: \"Pasta Bolognese\",\n  quantity: 3,\n  price: 7\n}, {\n  mealName: \"Pepperoni pizza\",\n  quantity: 2,\n  price: 10\n}];\nconst thaiFood = [{\n  mealName: \"Pad Thai\",\n  quantity: 1,\n  price: 8\n}];\nconst indianFood = [{\n  mealName: \"Chapati\",\n  quantity: 8,\n  price: 7\n}, {\n  mealName: \"Chicken Massala\",\n  quantity: 5,\n  price: 9\n}, {\n  mealName: \"Tandoori Chicken\",\n  quantity: 5,\n  price: 9\n}];\n\nfunction findMeal(name, menu) {\n  for (let i = 0; i < menu.length; i++) {\n    if (menu[i].mealName === name) {\n      return menu[i];\n    }\n  }\n}\n\nfunction selectMeal(name, type) {\n  if (type === 'italian') {\n    return \"italian order\";\n  } else if (type === 'indian') {\n    return \"indian order\";\n  } else if (type === 'thai') {\n    return \"thai order\";\n  } else {\n    return \"not found\";\n  }\n}\n\nfunction createSummary(name, type, amount) {}",
                  "solvedContent": "const italianFood = [{\n  mealName: \"Pasta Bolognese\",\n  quantity: 3,\n  price: 7\n}, {\n  mealName: \"Pepperoni pizza\",\n  quantity: 2,\n  price: 10\n}];\nconst thaiFood = [{\n  mealName: \"Pad Thai\",\n  quantity: 1,\n  price: 8\n}];\nconst indianFood = [{\n  mealName: \"Chapati\",\n  quantity: 8,\n  price: 7\n}, {\n  mealName: \"Chicken Massala\",\n  quantity: 5,\n  price: 9\n}, {\n  mealName: \"Tandoori Chicken\",\n  quantity: 5,\n  price: 9\n}];\n\nfunction findMeal(name, menu) {\n  for (let i = 0; i < menu.length; i++) {\n    if (menu[i].mealName === name) {\n      return menu[i];\n    }\n  }\n}\n\nfunction selectMeal(name, type) {\n  if (type === 'italian') {\n    return findMeal(name, italianFood);\n  } else if (type === 'indian') {\n    return findMeal(name, indianFood);\n  } else if (type === 'thai') {\n    return findMeal(name, thaiFood);\n  } else {\n    return \"not found\";\n  }\n}\n\nfunction createSummary(name, type, amount) {}"
                }
              ],
              "hints": [
                {
                  "title": "Hint",
                  "content": "Use `return findMeal()` with the arguments mentioned above."
                }
              ]
            }
          },
          {
            "title": "Define createSummary pt 1",
            "id": 113178,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Muito bem! Vamos começar a trabalhar na função `createSummary` para que possamos fornecer ao cliente um resumo do pedido realizado.\n\n1. Adicione uma variável `order` e atribua a ela o resultado da chamada da função `selectMeal()`.\n2. Adicione `name` e `type` como parâmetros na chamada da função `selectMeal()`. Isso passa os argumentos `name` e `type` de `createSummary()` para `selectMeal()`.\n3. Exiba a propriedade `mealName` da variável `order`.  \n4. Verifique o que sua função `createSummary()` faz atualmente chamando-a com `\"Pasta Bolognese\"`, `\"italian\"` e `3` como argumentos.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const italianFood = [{\n  mealName: \"Pasta Bolognese\",\n  quantity: 3,\n  price: 7\n}, {\n  mealName: \"Pepperoni pizza\",\n  quantity: 2,\n  price: 10\n}];\nconst thaiFood = [{\n  mealName: \"Pad Thai\",\n  quantity: 1,\n  price: 8\n}];\nconst indianFood = [{\n  mealName: \"Chapati\",\n  quantity: 8,\n  price: 7\n}, {\n  mealName: \"Chicken Massala\",\n  quantity: 5,\n  price: 9\n}, {\n  mealName: \"Tandoori Chicken\",\n  quantity: 5,\n  price: 9\n}];\n\nfunction findMeal(name, menu) {\n  for (let i = 0; i < menu.length; i++) {\n    if (menu[i].mealName === name) {\n      return menu[i];\n    }\n  }\n}\n\nfunction selectMeal(name, type) {\n  if (type === 'italian') {\n    return findMeal(name, italianFood);\n  } else if (type === 'indian') {\n    return findMeal(name, indianFood);\n  } else if (type === 'thai') {\n    return findMeal(name, thaiFood);\n  } else {\n    return \"not found\";\n  }\n}\n\nfunction createSummary(name, type, amount) {}",
                  "solvedContent": "const italianFood = [{\n  mealName: \"Pasta Bolognese\",\n  quantity: 3,\n  price: 7\n}, {\n  mealName: \"Pepperoni pizza\",\n  quantity: 2,\n  price: 10\n}];\nconst thaiFood = [{\n  mealName: \"Pad Thai\",\n  quantity: 1,\n  price: 8\n}];\nconst indianFood = [{\n  mealName: \"Chapati\",\n  quantity: 8,\n  price: 7\n}, {\n  mealName: \"Chicken Massala\",\n  quantity: 5,\n  price: 9\n}, {\n  mealName: \"Tandoori Chicken\",\n  quantity: 5,\n  price: 9\n}];\n\nfunction findMeal(name, menu) {\n  for (let i = 0; i < menu.length; i++) {\n    if (menu[i].mealName === name) {\n      return menu[i];\n    }\n  }\n}\n\nfunction selectMeal(name, type) {\n  if (type === 'italian') {\n    return findMeal(name, italianFood);\n  } else if (type === 'indian') {\n    return findMeal(name, indianFood);\n  } else if (type === 'thai') {\n    return findMeal(name, thaiFood);\n  } else {\n    return \"not found\";\n  }\n}\n\nfunction createSummary(name, type, amount) {\n  const order = selectMeal(name, type);\n  console.log(order.mealName);\n}\ncreateSummary('Pasta Bolognese', 'italian', 3);"
                }
              ],
              "hints": [
                {
                  "title": "Hint",
                  "content": "The function call for `createSummary()` should be placed after the code block where it is defined."
                }
              ]
            }
          },
          {
            "title": "Define createSummary pt 2",
            "id": 113179,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Bom trabalho! Vamos continuar definindo `createSummary`\n\n1. Adicione uma variável `orderPossible`, atribua a ela uma expressão lógica para verificar se nossa variável `order` não é igual a `\"not found\"`.\n2. Use `&&` para encadear uma condição a `orderPossible` para verificar se `amount` é menor ou igual à propriedade `quantity` de `order`.\n3. Adicione uma variável `errorMessage` e atribua a ela `\"Something went wrong, please try again later'\"`.\n4. Exiba o valor da variável `orderPossible`.  \n5. Exiba o valor da variável `errorMessage`.  ",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const italianFood = [{\n  mealName: \"Pasta Bolognese\",\n  quantity: 3,\n  price: 7\n}, {\n  mealName: \"Pepperoni pizza\",\n  quantity: 2,\n  price: 10\n}];\nconst thaiFood = [{\n  mealName: \"Pad Thai\",\n  quantity: 1,\n  price: 8\n}];\nconst indianFood = [{\n  mealName: \"Chapati\",\n  quantity: 8,\n  price: 7\n}, {\n  mealName: \"Chicken Massala\",\n  quantity: 5,\n  price: 9\n}, {\n  mealName: \"Tandoori Chicken\",\n  quantity: 5,\n  price: 9\n}];\n\nfunction findMeal(name, menu) {\n  for (let i = 0; i < menu.length; i++) {\n    if (menu[i].mealName === name) {\n      return menu[i];\n    }\n  }\n}\n\nfunction selectMeal(name, type) {\n  if (type === 'italian') {\n    return findMeal(name, italianFood);\n  } else if (type === 'indian') {\n    return findMeal(name, indianFood);\n  } else if (type === 'thai') {\n    return findMeal(name, thaiFood);\n  } else {\n    return \"not found\";\n  }\n}\n\nfunction createSummary(name, type, amount) {\n  const order = selectMeal(name, type);\n  console.log(order.mealName);\n}\ncreateSummary('Pasta Bolognese', 'italian', 3);",
                  "solvedContent": "const italianFood = [{\n  mealName: \"Pasta Bolognese\",\n  quantity: 3,\n  price: 7\n}, {\n  mealName: \"Pepperoni pizza\",\n  quantity: 2,\n  price: 10\n}];\nconst thaiFood = [{\n  mealName: \"Pad Thai\",\n  quantity: 1,\n  price: 8\n}];\nconst indianFood = [{\n  mealName: \"Chapati\",\n  quantity: 8,\n  price: 7\n}, {\n  mealName: \"Chicken Massala\",\n  quantity: 5,\n  price: 9\n}, {\n  mealName: \"Tandoori Chicken\",\n  quantity: 5,\n  price: 9\n}];\n\nfunction findMeal(name, menu) {\n  for (let i = 0; i < menu.length; i++) {\n    if (menu[i].mealName === name) {\n      return menu[i];\n    }\n  }\n}\n\nfunction selectMeal(name, type) {\n  if (type === 'italian') {\n    return findMeal(name, italianFood);\n  } else if (type === 'indian') {\n    return findMeal(name, indianFood);\n  } else if (type === 'thai') {\n    return findMeal(name, thaiFood);\n  } else {\n    return \"not found\";\n  }\n}\n\nfunction createSummary(name, type, amount) {\n  const order = selectMeal(name, type);\n  console.log(order.mealName);\n  const orderPossible = order !== 'not found' && amount <= order.quantity;\n  const errorMessage = 'Something went wrong, please try again later';\n  console.log(orderPossible);\n  console.log(errorMessage);\n}\ncreateSummary('Pasta Bolognese', 'italian', 3);"
                }
              ],
              "hints": [
                {
                  "title": "Hint",
                  "content": "1. You must define two logical expressions and chain them `condition1 && condition 2`. \n2. Use comparators such as `<=` `===` or` !==`to define each expression."
                }
              ]
            }
          },
          {
            "title": "Define createSummary pt3",
            "id": 113180,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Neste passo, vamos terminar de construir a função `createSummary` adicionando primeiro uma condicional para garantir que a refeição inserida foi encontrada. Em seguida, vamos exibir um resumo do pedido.\n\n1. Como não são mais necessários, você pode remover todas as declarações de console.\n2. Adicione uma declaração condicional para verificar se `orderPossible` é `true`.\n3. No corpo da condicional, adicione uma variável `total` e atribua a ela o produto do argumento `amount` com a propriedade `price` do objeto `order`.\n4. Sua condição deve retornar uma string que informe ao cliente o número de refeições pedidas, qual refeição foi pedida e quanto custa. Você *deve* usar `amount`, `name` e `total` na string.\n5. Retorne `errorMessage` se `orderPossible` for `false`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const italianFood = [{\n  mealName: \"Pasta Bolognese\",\n  quantity: 3,\n  price: 7\n}, {\n  mealName: \"Pepperoni pizza\",\n  quantity: 2,\n  price: 10\n}];\nconst thaiFood = [{\n  mealName: \"Pad Thai\",\n  quantity: 1,\n  price: 8\n}];\nconst indianFood = [{\n  mealName: \"Chapati\",\n  quantity: 8,\n  price: 7\n}, {\n  mealName: \"Chicken Massala\",\n  quantity: 5,\n  price: 9\n}, {\n  mealName: \"Tandoori Chicken\",\n  quantity: 5,\n  price: 9\n}];\n\nfunction findMeal(name, menu) {\n  for (let i = 0; i < menu.length; i++) {\n    if (menu[i].mealName === name) {\n      return menu[i];\n    }\n  }\n}\n\nfunction selectMeal(name, type) {\n  if (type === 'italian') {\n    return findMeal(name, italianFood);\n  } else if (type === 'indian') {\n    return findMeal(name, indianFood);\n  } else if (type === 'thai') {\n    return findMeal(name, thaiFood);\n  } else {\n    return \"not found\";\n  }\n}\n\nfunction createSummary(name, type, amount) {\n  const order = selectMeal(name, type);\n  console.log(order.mealName);\n  const orderPossible = order !== 'not found' && amount <= order.quantity;\n  const errorMessage = 'Something went wrong, please try again later';\n  console.log(orderPossible);\n  console.log(errorMessage);\n}\ncreateSummary('Pasta Bolognese', 'italian', 3);",
                  "solvedContent": "const italianFood = [{\n  mealName: \"Pasta Bolognese\",\n  quantity: 3,\n  price: 7\n}, {\n  mealName: \"Pepperoni pizza\",\n  quantity: 2,\n  price: 10\n}];\nconst thaiFood = [{\n  mealName: \"Pad Thai\",\n  quantity: 1,\n  price: 8\n}];\nconst indianFood = [{\n  mealName: \"Chapati\",\n  quantity: 8,\n  price: 7\n}, {\n  mealName: \"Chicken Massala\",\n  quantity: 5,\n  price: 9\n}, {\n  mealName: \"Tandoori Chicken\",\n  quantity: 5,\n  price: 9\n}];\n\nfunction findMeal(name, menu) {\n  for (let i = 0; i < menu.length; i++) {\n    if (menu[i].mealName === name) {\n      return menu[i];\n    }\n  }\n}\n\nfunction selectMeal(name, type) {\n  if (type === 'italian') {\n    return findMeal(name, italianFood);\n  } else if (type === 'indian') {\n    return findMeal(name, indianFood);\n  } else if (type === 'thai') {\n    return findMeal(name, thaiFood);\n  } else {\n    return \"not found\";\n  }\n}\n\nfunction createSummary(name, type, amount) {\n  const order = selectMeal(name, type);\n  const orderPossible = order !== 'not found' && amount <= order.quantity;\n  const errorMessage = 'Something went wrong, please try again later';\n  if (orderPossible) {\n    const total = amount * order.price;\n    return \"You ordered \" + amount + \" \" + name + \" for a total of \" + total +\n      \" euros\";\n  } else {\n    return errorMessage;\n  }\n}"
                }
              ],
              "hints": [
                {
                  "title": "Hint",
                  "content": "1. Use `object.propertyName `syntax to access a property value of an object.\n2. Make sure and include the `amount`, `name`, and `total` arguments from the `createSummary()` function in the return string."
                }
              ]
            }
          }
        ]
      }
    ]
  }
}