{
  "tutorial": {
    "id": 1914,
    "version": 11,
    "type": "guidedProjectOptional",
    "isNew": false,
    "codeLanguage": "jsx",
    "title": "Aplicação de Página Única",
    "descriptionContent": "Use React para criar um site básico de aplicação de página única",
    "shortDescriptionContent": "",
    "showInTrack": true,
    "iconBanner": "tutorial-1914-icon-banner.svg",
    "chapters": [
      {
        "id": 12483,
        "title": "Aplicação de Página Única",
        "type": "practiceLevel3",
        "lessons": [
          {
            "title": "Step 1 - Preparation",
            "id": 114677,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Neste projeto, vamos trabalhar no site **Camera Tips**, que possui quatro páginas: `Home`, `ShutterSpeed`, `Aperture` e `ISO`. Essas páginas são representadas como componentes funcionais dentro do arquivo `pages.jsx`.\n\nO componente `App` dentro de `index.jsx` é o componente pai. Todas as quatro páginas serão renderizadas dentro de `index.jsx`. Por enquanto, precisamos importar as quatro páginas para `index.jsx`.\n\n1. `import` os quatro componentes de `pages.jsx` para `index.jsx`.\n2. Por enquanto, adicione apenas o componente `<Home />` abaixo do elemento de cabeçalho `<h1>` dentro de `App`.",
              "preselectedFileIndex": 1,
              "hasVisualOutput": true,
              "files": [
                {
                  "name": "index.html",
                  "codeLanguage": "html",
                  "content": "<!doctype html>\n<html>\n  <head>\n    <style>\n      html,\n      body {\n        margin: 0;\n        padding: 0;\n        background-color: #fefef1;\n      }\n      \n      a {\n        text-decoration: underline;\n        color: blue;\n      }\n      \n      a:hover {\n        cursor: pointer;\n      }\n    </style>\n    <script type=\"module\" src=\"./index.js\"></script>\n  </head>\n  <body>\n    <div id=\"root\"></div>\n  </body>\n</html>",
                  "solvedContent": null
                },
                {
                  "name": "index.jsx",
                  "codeLanguage": "jsx",
                  "content": "import React from \"react\";\nimport { createRoot } from \"react-dom/client\";\n\nimport { wrapperStyle } from \"./styles.jsx\";\n\nconst App = () => {\n  return (\n    <div style={wrapperStyle.wrapper}>\n      <h1>Camera Tips</h1>\n    </div>\n  );\n};\n\nconst rootElement = document.getElementById(\"root\");\nconst root = createRoot(rootElement);\nroot.render(<App />);\n\nexport default App;",
                  "solvedContent": "import React from \"react\";\nimport { createRoot } from \"react-dom/client\";\n\nimport { wrapperStyle } from \"./styles.jsx\";\nimport { Home, Aperture, ShutterSpeed, ISO } from \"./pages.jsx\";\n\nconst App = () => {\n  return (\n    <div style={wrapperStyle.wrapper}>\n      <h1>Camera Tips</h1>\n      <Home />\n    </div>\n  );\n};\n\nconst rootElement = document.getElementById(\"root\");\nconst root = createRoot(rootElement);\nroot.render(<App />);\n\nexport default App;"
                },
                {
                  "name": "pages.jsx",
                  "codeLanguage": "jsx",
                  "content": "import React from \"react\";\nimport { pageStyle } from \"./styles\";\n\nconst Home = () => {\n  return (\n    <div>\n      <p>\n        Want a quick guide on how to take good photos? Confused about photo\n        terms? You've come to the right place!\n      </p>\n    </div>\n  );\n};\n\nconst ShutterSpeed = () => {\n  return (\n    <div>\n      <h3>Shutter Speed</h3>\n      <p>\n        <strong>Shutter Speed</strong> is how quickly your camera takes the\n        picture.\n      </p>\n      <div style={pageStyle.table}>\n        <div style={pageStyle.row}>\n          <div style={pageStyle.column}>\n            <strong>Fast Shutter Speed:</strong>\n          </div>\n          <div style={pageStyle.column}>\n            <strong>Slow Shutter Speed:</strong>\n          </div>\n        </div>\n        <div style={pageStyle.row}>\n          <div style={pageStyle.column}>\n            Clearer subjects when they are moving. Darker picture because less\n            light can enter your camera.\n          </div>\n          <div style={pageStyle.column}>\n            Blurrier subjects when they are moving. Brighter pictures because\n            more light can enter your camera.\n          </div>\n        </div>\n      </div>\n      <p>\n        A shutter speed of 1/60 is the lowest speed you can get for a bright\n        photo that isn't noticeably blurry.\n      </p>\n    </div>\n  );\n};\n\nconst Aperture = () => {\n  return (\n    <div>\n      <h3>Aperture</h3>\n      <p>\n        The <strong>Aperture</strong> is the camera lens' opening that allows\n        light in. The measurement of that opening is called the{\" \"}\n        <strong>F-Stop</strong>. The Aperture and F-Stop are inversely\n        proportional.\n      </p>\n      <div style={pageStyle.table}>\n        <div style={pageStyle.row}>\n          <div style={pageStyle.column}>\n            <strong>Low F-Stop / High Aperture:</strong>\n          </div>\n          <div style={pageStyle.column}>\n            <strong>High F-Stop / Low Aperture:</strong>\n          </div>\n        </div>\n        <div style={pageStyle.row}>\n          <div style={pageStyle.column}>\n            Your Depth of Field is very narrow; your pictures will be brighter\n            and will have foreground and background blur.\n          </div>\n          <div style={pageStyle.column}>\n            Your Depth of Field is very wide; your pictures will be darker but\n            will have less blurred backgrounds and foregrounds.\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nconst ISO = () => {\n  return (\n    <div>\n      <h3>ISO</h3>\n      <p>\n        Your camera's <strong>ISO</strong> is a measure of how sensitive your\n        camera's sensors are to light.\n      </p>\n      <p>\n        Increasing your camera's ISO makes your pictures brighter, but it also\n        increases their <strong>noise</strong>, or their grainy-ness. This is\n        why night photos, which usually are taken with high ISO, have black dots\n        when you look closely.\n      </p>\n      <div style={pageStyle.table}>\n        <div style={pageStyle.row}>\n          <div style={pageStyle.column}>\n            <strong>Low ISO:</strong>\n          </div>\n          <div style={pageStyle.column}>\n            <strong>High ISO:</strong>\n          </div>\n        </div>\n        <div style={pageStyle.row}>\n          <div style={pageStyle.column}>\n            Your camera's sensors are not very sensitive, reducing overall\n            brightness. This makes your pictures less noisy though.\n          </div>\n          <div style={pageStyle.column}>\n            Your camera's sensors are very sensitive to light, meaning brighter\n            images. However, this make your pictures more noisy.\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport { Home, Aperture, ShutterSpeed, ISO };",
                  "solvedContent": null
                },
                {
                  "name": "navigation.jsx",
                  "codeLanguage": "jsx",
                  "content": "import React from \"react\";\nimport { navStyle } from \"./styles.jsx\";\n\nconst Navigation = (props) => {\n  return (\n    <nav style={navStyle.nav}>\n      <button style={navStyle.navLink}>Home</button>\n      <button style={navStyle.navLink}>Aperture</button>\n      <button style={navStyle.navLink}>Shutter Speed</button>\n      <button style={navStyle.navLink}>ISO</button>\n    </nav>\n  );\n};\n\nexport default Navigation;",
                  "solvedContent": null
                },
                {
                  "name": "styles.jsx",
                  "codeLanguage": "jsx",
                  "content": "const wrapperStyle = {\n  wrapper: {\n    width: \"100%\",\n    fontFamily: \"Times New Roman, Verdana, Arial, sans-serif\",\n    fontSize: 16,\n    padding: 16,\n    boxSizing: \"border-box\",\n    textAlign: \"center\",\n  },\n};\n\nconst navStyle = {\n  nav: {\n    textAlign: \"center\",\n    display: \"flex\",\n    flexDirection: \"row\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    flexWrap: \"nowrap\",\n  },\n  navLink: {\n    flexBasis: \"100\",\n    flexShrink: \"1\",\n    margin: 2,\n    paddingLeft: 8,\n    paddingRight: 8,\n    paddingTop: 4,\n    paddingBottom: 4,\n    fontSize: 12,\n  },\n};\n\nconst pageStyle = {\n  table: {\n    width: \"100%\",\n    display: \"flex\",\n    flexDirection: \"column\",\n    flexWrap: \"nowrap\",\n    justifyContent: \"flex-start\",\n    alignItems: \"stretch\",\n  },\n  row: {\n    width: \"100%\",\n    marginBottom: 4,\n    display: \"flex\",\n    flexDirection: \"row\",\n    flexWrap: \"nowrap\",\n    justifyContent: \"space-between\",\n    alignItems: \"flex-start\",\n  },\n  column: {\n    flexBasis: \"50%\",\n    flexShrink: 1,\n    flexGrow: 0,\n    marginLeft: 4,\n    marginRight: 4,\n  },\n};\n\nexport { wrapperStyle, navStyle, pageStyle };",
                  "solvedContent": null
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Step 2 - import `react-router-dom`",
            "id": 114678,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Construir uma SPA com React é fácil de fazer com `react-router-dom`, um pacote NPM. O `react-router-dom` renderiza o JSX com base em qualquer URL fornecida, imitando sites e páginas da web normais. No entanto, o `react-router-dom` não requer que a página seja recarregada, economizando memória e reduzindo o tráfego na internet.\n\nPrecisamos importar o `react-router-dom` em nosso projeto, semelhante ao `React` e `ReactDOM`. Especificamente, três componentes do `react-router-dom` são necessários: `BrowserRouter`, `Routes` e `Route`.\n\n1. Do `react-router-dom`, importe os seguintes componentes: `BrowserRouter`, `Routes` e `Route`.",
              "preselectedFileIndex": 1,
              "hasVisualOutput": true,
              "files": [
                {
                  "name": "index.html",
                  "codeLanguage": "html",
                  "content": "<!doctype html>\n<html>\n  <head>\n    <style>\n      html,\n      body {\n        margin: 0;\n        padding: 0;\n        background-color: #fefef1;\n      }\n      \n      a {\n        text-decoration: underline;\n        color: blue;\n      }\n      \n      a:hover {\n        cursor: pointer;\n      }\n    </style>\n    <script type=\"module\" src=\"./index.js\"></script>\n  </head>\n  <body>\n    <div id=\"root\"></div>\n  </body>\n</html>",
                  "solvedContent": null
                },
                {
                  "name": "index.jsx",
                  "codeLanguage": "jsx",
                  "content": "import React from \"react\";\nimport { createRoot } from \"react-dom/client\";\n\nimport { wrapperStyle } from \"./styles.jsx\";\nimport { Home, Aperture, ShutterSpeed, ISO } from \"./pages.jsx\";\n\nconst App = () => {\n  return (\n    <div style={wrapperStyle.wrapper}>\n      <h1>Camera Tips</h1>\n      <Home />\n    </div>\n  );\n};\n\nconst rootElement = document.getElementById(\"root\");\nconst root = createRoot(rootElement);\nroot.render(<App />);\n\nexport default App;",
                  "solvedContent": "import React from \"react\";\nimport { createRoot } from \"react-dom/client\";\n\nimport { wrapperStyle } from \"./styles.jsx\";\nimport { Home, Aperture, ShutterSpeed, ISO } from \"./pages.jsx\";\nimport { BrowserRouter, Routes, Route } from \"react-router-dom\";\n\nconst App = () => {\n  return (\n    <div style={wrapperStyle.wrapper}>\n      <h1>Camera Tips</h1>\n      <Home />\n    </div>\n  );\n};\n\nconst rootElement = document.getElementById(\"root\");\nconst root = createRoot(rootElement);\nroot.render(<App />);\n\nexport default App;"
                },
                {
                  "name": "pages.jsx",
                  "codeLanguage": "jsx",
                  "content": "import React from \"react\";\nimport { pageStyle } from \"./styles\";\n\nconst Home = () => {\n  return (\n    <div>\n      <p>\n        Want a quick guide on how to take good photos? Confused about photo\n        terms? You've come to the right place!\n      </p>\n    </div>\n  );\n};\n\nconst ShutterSpeed = () => {\n  return (\n    <div>\n      <h3>Shutter Speed</h3>\n      <p>\n        <strong>Shutter Speed</strong> is how quickly your camera takes the\n        picture.\n      </p>\n      <div style={pageStyle.table}>\n        <div style={pageStyle.row}>\n          <div style={pageStyle.column}>\n            <strong>Fast Shutter Speed:</strong>\n          </div>\n          <div style={pageStyle.column}>\n            <strong>Slow Shutter Speed:</strong>\n          </div>\n        </div>\n        <div style={pageStyle.row}>\n          <div style={pageStyle.column}>\n            Clearer subjects when they are moving. Darker picture because less\n            light can enter your camera.\n          </div>\n          <div style={pageStyle.column}>\n            Blurrier subjects when they are moving. Brighter pictures because\n            more light can enter your camera.\n          </div>\n        </div>\n      </div>\n      <p>\n        A shutter speed of 1/60 is the lowest speed you can get for a bright\n        photo that isn't noticeably blurry.\n      </p>\n    </div>\n  );\n};\n\nconst Aperture = () => {\n  return (\n    <div>\n      <h3>Aperture</h3>\n      <p>\n        The <strong>Aperture</strong> is the camera lens' opening that allows\n        light in. The measurement of that opening is called the{\" \"}\n        <strong>F-Stop</strong>. The Aperture and F-Stop are inversely\n        proportional.\n      </p>\n      <div style={pageStyle.table}>\n        <div style={pageStyle.row}>\n          <div style={pageStyle.column}>\n            <strong>Low F-Stop / High Aperture:</strong>\n          </div>\n          <div style={pageStyle.column}>\n            <strong>High F-Stop / Low Aperture:</strong>\n          </div>\n        </div>\n        <div style={pageStyle.row}>\n          <div style={pageStyle.column}>\n            Your Depth of Field is very narrow; your pictures will be brighter\n            and will have foreground and background blur.\n          </div>\n          <div style={pageStyle.column}>\n            Your Depth of Field is very wide; your pictures will be darker but\n            will have less blurred backgrounds and foregrounds.\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nconst ISO = () => {\n  return (\n    <div>\n      <h3>ISO</h3>\n      <p>\n        Your camera's <strong>ISO</strong> is a measure of how sensitive your\n        camera's sensors are to light.\n      </p>\n      <p>\n        Increasing your camera's ISO makes your pictures brighter, but it also\n        increases their <strong>noise</strong>, or their grainy-ness. This is\n        why night photos, which usually are taken with high ISO, have black dots\n        when you look closely.\n      </p>\n      <div style={pageStyle.table}>\n        <div style={pageStyle.row}>\n          <div style={pageStyle.column}>\n            <strong>Low ISO:</strong>\n          </div>\n          <div style={pageStyle.column}>\n            <strong>High ISO:</strong>\n          </div>\n        </div>\n        <div style={pageStyle.row}>\n          <div style={pageStyle.column}>\n            Your camera's sensors are not very sensitive, reducing overall\n            brightness. This makes your pictures less noisy though.\n          </div>\n          <div style={pageStyle.column}>\n            Your camera's sensors are very sensitive to light, meaning brighter\n            images. However, this make your pictures more noisy.\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport { Home, Aperture, ShutterSpeed, ISO };",
                  "solvedContent": null
                },
                {
                  "name": "navigation.jsx",
                  "codeLanguage": "jsx",
                  "content": "import React from \"react\";\nimport { navStyle } from \"./styles.jsx\";\n\nconst Navigation = (props) => {\n  return (\n    <nav style={navStyle.nav}>\n      <button style={navStyle.navLink}>Home</button>\n      <button style={navStyle.navLink}>Aperture</button>\n      <button style={navStyle.navLink}>Shutter Speed</button>\n      <button style={navStyle.navLink}>ISO</button>\n    </nav>\n  );\n};\n\nexport default Navigation;",
                  "solvedContent": null
                },
                {
                  "name": "styles.jsx",
                  "codeLanguage": "jsx",
                  "content": "const wrapperStyle = {\n  wrapper: {\n    width: \"100%\",\n    fontFamily: \"Times New Roman, Verdana, Arial, sans-serif\",\n    fontSize: 16,\n    padding: 16,\n    boxSizing: \"border-box\",\n    textAlign: \"center\",\n  },\n};\n\nconst navStyle = {\n  nav: {\n    textAlign: \"center\",\n    display: \"flex\",\n    flexDirection: \"row\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    flexWrap: \"nowrap\",\n  },\n  navLink: {\n    flexBasis: \"100\",\n    flexShrink: \"1\",\n    margin: 2,\n    paddingLeft: 8,\n    paddingRight: 8,\n    paddingTop: 4,\n    paddingBottom: 4,\n    fontSize: 12,\n  },\n};\n\nconst pageStyle = {\n  table: {\n    width: \"100%\",\n    display: \"flex\",\n    flexDirection: \"column\",\n    flexWrap: \"nowrap\",\n    justifyContent: \"flex-start\",\n    alignItems: \"stretch\",\n  },\n  row: {\n    width: \"100%\",\n    marginBottom: 4,\n    display: \"flex\",\n    flexDirection: \"row\",\n    flexWrap: \"nowrap\",\n    justifyContent: \"space-between\",\n    alignItems: \"flex-start\",\n  },\n  column: {\n    flexBasis: \"50%\",\n    flexShrink: 1,\n    flexGrow: 0,\n    marginLeft: 4,\n    marginRight: 4,\n  },\n};\n\nexport { wrapperStyle, navStyle, pageStyle };",
                  "solvedContent": null
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Step 3 - BrowserRouter, Routes, Route",
            "id": 114681,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Com `react-dom-router` importado, a próxima coisa que precisamos fazer é adicionar os componentes necessários de `react-router-dom` em `App`.\n\n1. Em `App`, envolva todo o JSX existente em um novo componente wrapper `<BrowserRouter>`.\n2. Abaixo do cabeçalho `<h1>`, envolva o componente `<Home />` com um novo componente wrapper `<Routes>`.\n3. Substitua `<Home />` pelo seguinte código:\n```jsx\n<Route exact path=\"/\" element={ <Home /> } />\n```\n\n_As mudanças podem não ser óbvias quando completarmos essas etapas. No entanto, se ainda virmos o conteúdo de `<Home />` após essas etapas, então estamos no caminho certo._",
              "preselectedFileIndex": 1,
              "hasVisualOutput": true,
              "files": [
                {
                  "name": "index.html",
                  "codeLanguage": "html",
                  "content": "<!doctype html>\n<html>\n  <head>\n    <style>\n      html,\n      body {\n        margin: 0;\n        padding: 0;\n        background-color: #fefef1;\n      }\n      \n      a {\n        text-decoration: underline;\n        color: blue;\n      }\n      \n      a:hover {\n        cursor: pointer;\n      }\n    </style>\n    <script type=\"module\" src=\"./index.js\"></script>\n  </head>\n  <body>\n    <div id=\"root\"></div>\n  </body>\n</html>",
                  "solvedContent": null
                },
                {
                  "name": "index.jsx",
                  "codeLanguage": "jsx",
                  "content": "import React from \"react\";\nimport { createRoot } from \"react-dom/client\";\n\nimport { wrapperStyle } from \"./styles.jsx\";\nimport { Home, Aperture, ShutterSpeed, ISO } from \"./pages.jsx\";\nimport { BrowserRouter, Routes, Route } from \"react-router-dom\";\n\nconst App = () => {\n  return (\n    <div style={wrapperStyle.wrapper}>\n      <h1>Camera Tips</h1>\n      <Home />\n    </div>\n  );\n};\n\nconst rootElement = document.getElementById(\"root\");\nconst root = createRoot(rootElement);\nroot.render(<App />);\n\nexport default App;",
                  "solvedContent": "import React from \"react\";\nimport { createRoot } from \"react-dom/client\";\n\nimport { wrapperStyle } from \"./styles.jsx\";\nimport { Home, Aperture, ShutterSpeed, ISO } from \"./pages.jsx\";\nimport { BrowserRouter, Routes, Route } from \"react-router-dom\";\n\nconst App = () => {\n  return (\n    <BrowserRouter>\n      <div style={wrapperStyle.wrapper}>\n        <h1>Camera Tips</h1>\n        <Routes>\n          <Route exact path=\"/\" element={<Home />} />\n        </Routes>\n      </div>\n    </BrowserRouter>\n  );\n};\n\nconst rootElement = document.getElementById(\"root\");\nconst root = createRoot(rootElement);\nroot.render(<App />);\n\nexport default App;"
                },
                {
                  "name": "pages.jsx",
                  "codeLanguage": "jsx",
                  "content": "import React from \"react\";\nimport { pageStyle } from \"./styles\";\n\nconst Home = () => {\n  return (\n    <div>\n      <p>\n        Want a quick guide on how to take good photos? Confused about photo\n        terms? You've come to the right place!\n      </p>\n    </div>\n  );\n};\n\nconst ShutterSpeed = () => {\n  return (\n    <div>\n      <h3>Shutter Speed</h3>\n      <p>\n        <strong>Shutter Speed</strong> is how quickly your camera takes the\n        picture.\n      </p>\n      <div style={pageStyle.table}>\n        <div style={pageStyle.row}>\n          <div style={pageStyle.column}>\n            <strong>Fast Shutter Speed:</strong>\n          </div>\n          <div style={pageStyle.column}>\n            <strong>Slow Shutter Speed:</strong>\n          </div>\n        </div>\n        <div style={pageStyle.row}>\n          <div style={pageStyle.column}>\n            Clearer subjects when they are moving. Darker picture because less\n            light can enter your camera.\n          </div>\n          <div style={pageStyle.column}>\n            Blurrier subjects when they are moving. Brighter pictures because\n            more light can enter your camera.\n          </div>\n        </div>\n      </div>\n      <p>\n        A shutter speed of 1/60 is the lowest speed you can get for a bright\n        photo that isn't noticeably blurry.\n      </p>\n    </div>\n  );\n};\n\nconst Aperture = () => {\n  return (\n    <div>\n      <h3>Aperture</h3>\n      <p>\n        The <strong>Aperture</strong> is the camera lens' opening that allows\n        light in. The measurement of that opening is called the{\" \"}\n        <strong>F-Stop</strong>. The Aperture and F-Stop are inversely\n        proportional.\n      </p>\n      <div style={pageStyle.table}>\n        <div style={pageStyle.row}>\n          <div style={pageStyle.column}>\n            <strong>Low F-Stop / High Aperture:</strong>\n          </div>\n          <div style={pageStyle.column}>\n            <strong>High F-Stop / Low Aperture:</strong>\n          </div>\n        </div>\n        <div style={pageStyle.row}>\n          <div style={pageStyle.column}>\n            Your Depth of Field is very narrow; your pictures will be brighter\n            and will have foreground and background blur.\n          </div>\n          <div style={pageStyle.column}>\n            Your Depth of Field is very wide; your pictures will be darker but\n            will have less blurred backgrounds and foregrounds.\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nconst ISO = () => {\n  return (\n    <div>\n      <h3>ISO</h3>\n      <p>\n        Your camera's <strong>ISO</strong> is a measure of how sensitive your\n        camera's sensors are to light.\n      </p>\n      <p>\n        Increasing your camera's ISO makes your pictures brighter, but it also\n        increases their <strong>noise</strong>, or their grainy-ness. This is\n        why night photos, which usually are taken with high ISO, have black dots\n        when you look closely.\n      </p>\n      <div style={pageStyle.table}>\n        <div style={pageStyle.row}>\n          <div style={pageStyle.column}>\n            <strong>Low ISO:</strong>\n          </div>\n          <div style={pageStyle.column}>\n            <strong>High ISO:</strong>\n          </div>\n        </div>\n        <div style={pageStyle.row}>\n          <div style={pageStyle.column}>\n            Your camera's sensors are not very sensitive, reducing overall\n            brightness. This makes your pictures less noisy though.\n          </div>\n          <div style={pageStyle.column}>\n            Your camera's sensors are very sensitive to light, meaning brighter\n            images. However, this make your pictures more noisy.\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport { Home, Aperture, ShutterSpeed, ISO };",
                  "solvedContent": null
                },
                {
                  "name": "navigation.jsx",
                  "codeLanguage": "jsx",
                  "content": "import React from \"react\";\nimport { navStyle } from \"./styles.jsx\";\n\nconst Navigation = (props) => {\n  return (\n    <nav style={navStyle.nav}>\n      <button style={navStyle.navLink}>Home</button>\n      <button style={navStyle.navLink}>Aperture</button>\n      <button style={navStyle.navLink}>Shutter Speed</button>\n      <button style={navStyle.navLink}>ISO</button>\n    </nav>\n  );\n};\n\nexport default Navigation;",
                  "solvedContent": null
                },
                {
                  "name": "styles.jsx",
                  "codeLanguage": "jsx",
                  "content": "const wrapperStyle = {\n  wrapper: {\n    width: \"100%\",\n    fontFamily: \"Times New Roman, Verdana, Arial, sans-serif\",\n    fontSize: 16,\n    padding: 16,\n    boxSizing: \"border-box\",\n    textAlign: \"center\",\n  },\n};\n\nconst navStyle = {\n  nav: {\n    textAlign: \"center\",\n    display: \"flex\",\n    flexDirection: \"row\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    flexWrap: \"nowrap\",\n  },\n  navLink: {\n    flexBasis: \"100\",\n    flexShrink: \"1\",\n    margin: 2,\n    paddingLeft: 8,\n    paddingRight: 8,\n    paddingTop: 4,\n    paddingBottom: 4,\n    fontSize: 12,\n  },\n};\n\nconst pageStyle = {\n  table: {\n    width: \"100%\",\n    display: \"flex\",\n    flexDirection: \"column\",\n    flexWrap: \"nowrap\",\n    justifyContent: \"flex-start\",\n    alignItems: \"stretch\",\n  },\n  row: {\n    width: \"100%\",\n    marginBottom: 4,\n    display: \"flex\",\n    flexDirection: \"row\",\n    flexWrap: \"nowrap\",\n    justifyContent: \"space-between\",\n    alignItems: \"flex-start\",\n  },\n  column: {\n    flexBasis: \"50%\",\n    flexShrink: 1,\n    flexGrow: 0,\n    marginLeft: 4,\n    marginRight: 4,\n  },\n};\n\nexport { wrapperStyle, navStyle, pageStyle };",
                  "solvedContent": null
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Step 4 - <Route />",
            "id": 114682,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "No `react-router-dom`, queremos controlar qual JSX aparece com base no link da URL para a página da web. Cada caminho de URL possível é escrito como um `<Route>`, completo com os atributos `path` e `element`.\n\nOs atributos `path` e `element` trabalham juntos para informar ao app o que renderizar. Se a URL atual das páginas selecionadas corresponder ao `path`, então o JSX fornecido em `element` será renderizado.\n\nVamos adicionar outro caminho que o `react-dom-router` terá que acompanhar: `/aperture`.\n\n1. No componente `<Routes>`, adicione um novo componente `<Route>` acima da rota `Home` existente com os seguintes atributos e valores:\n    - `exact`\n    - `path=\"/aperture\"`\n    - `element={ <Aperture /> }`\n\n2. Para verificar se fizemos as alterações apropriadas, copie e cole a URL da janela de visualização em uma nova aba no seu navegador. Em seguida, faça o seguinte:\n    - Certifique-se de que a URL não tenha nada além de `el.mimo.run`. Confirme que a página `<Home />` aparece.\n    - Adicione `/aperture` ao final da URL e carregue a página. Confirme que a página agora mostra a página `<Aperture/>`. Verifique a dica para mais assistência sobre como verificar isso.",
              "preselectedFileIndex": 1,
              "hasVisualOutput": true,
              "files": [
                {
                  "name": "index.html",
                  "codeLanguage": "html",
                  "content": "<!doctype html>\n<html>\n  <head>\n    <style>\n      html,\n      body {\n        margin: 0;\n        padding: 0;\n        background-color: #fefef1;\n      }\n      \n      a {\n        text-decoration: underline;\n        color: blue;\n      }\n      \n      a:hover {\n        cursor: pointer;\n      }\n    </style>\n    <script type=\"module\" src=\"./index.js\"></script>\n  </head>\n  <body>\n    <div id=\"root\"></div>\n  </body>\n</html>",
                  "solvedContent": null
                },
                {
                  "name": "index.jsx",
                  "codeLanguage": "jsx",
                  "content": "import React from \"react\";\nimport { createRoot } from \"react-dom/client\";\n\nimport { wrapperStyle } from \"./styles.jsx\";\nimport { Home, Aperture, ShutterSpeed, ISO } from \"./pages.jsx\";\nimport { BrowserRouter, Routes, Route } from \"react-router-dom\";\n\nconst App = () => {\n  return (\n    <BrowserRouter>\n      <div style={wrapperStyle.wrapper}>\n        <h1>Camera Tips</h1>\n        <Routes>\n          <Route exact path=\"/\" element={<Home />} />\n        </Routes>\n      </div>\n    </BrowserRouter>\n  );\n};\n\nconst rootElement = document.getElementById(\"root\");\nconst root = createRoot(rootElement);\nroot.render(<App />);\n\nexport default App;",
                  "solvedContent": "import React from \"react\";\nimport { createRoot } from \"react-dom/client\";\n\nimport { wrapperStyle } from \"./styles.jsx\";\nimport { Home, Aperture, ShutterSpeed, ISO } from \"./pages.jsx\";\nimport { BrowserRouter, Routes, Route } from \"react-router-dom\";\n\nconst App = () => {\n  return (\n    <BrowserRouter>\n      <div style={wrapperStyle.wrapper}>\n        <h1>Camera Tips</h1>\n        <Routes>\n          <Route exact path=\"/aperture\" element={<Aperture />} />\n          <Route exact path=\"/\" element={<Home />} />\n        </Routes>\n      </div>\n    </BrowserRouter>\n  );\n};\n\nconst rootElement = document.getElementById(\"root\");\nconst root = createRoot(rootElement);\nroot.render(<App />);\n\nexport default App;"
                },
                {
                  "name": "pages.jsx",
                  "codeLanguage": "jsx",
                  "content": "import React from \"react\";\nimport { pageStyle } from \"./styles\";\n\nconst Home = () => {\n  return (\n    <div>\n      <p>\n        Want a quick guide on how to take good photos? Confused about photo\n        terms? You've come to the right place!\n      </p>\n    </div>\n  );\n};\n\nconst ShutterSpeed = () => {\n  return (\n    <div>\n      <h3>Shutter Speed</h3>\n      <p>\n        <strong>Shutter Speed</strong> is how quickly your camera takes the\n        picture.\n      </p>\n      <div style={pageStyle.table}>\n        <div style={pageStyle.row}>\n          <div style={pageStyle.column}>\n            <strong>Fast Shutter Speed:</strong>\n          </div>\n          <div style={pageStyle.column}>\n            <strong>Slow Shutter Speed:</strong>\n          </div>\n        </div>\n        <div style={pageStyle.row}>\n          <div style={pageStyle.column}>\n            Clearer subjects when they are moving. Darker picture because less\n            light can enter your camera.\n          </div>\n          <div style={pageStyle.column}>\n            Blurrier subjects when they are moving. Brighter pictures because\n            more light can enter your camera.\n          </div>\n        </div>\n      </div>\n      <p>\n        A shutter speed of 1/60 is the lowest speed you can get for a bright\n        photo that isn't noticeably blurry.\n      </p>\n    </div>\n  );\n};\n\nconst Aperture = () => {\n  return (\n    <div>\n      <h3>Aperture</h3>\n      <p>\n        The <strong>Aperture</strong> is the camera lens' opening that allows\n        light in. The measurement of that opening is called the{\" \"}\n        <strong>F-Stop</strong>. The Aperture and F-Stop are inversely\n        proportional.\n      </p>\n      <div style={pageStyle.table}>\n        <div style={pageStyle.row}>\n          <div style={pageStyle.column}>\n            <strong>Low F-Stop / High Aperture:</strong>\n          </div>\n          <div style={pageStyle.column}>\n            <strong>High F-Stop / Low Aperture:</strong>\n          </div>\n        </div>\n        <div style={pageStyle.row}>\n          <div style={pageStyle.column}>\n            Your Depth of Field is very narrow; your pictures will be brighter\n            and will have foreground and background blur.\n          </div>\n          <div style={pageStyle.column}>\n            Your Depth of Field is very wide; your pictures will be darker but\n            will have less blurred backgrounds and foregrounds.\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nconst ISO = () => {\n  return (\n    <div>\n      <h3>ISO</h3>\n      <p>\n        Your camera's <strong>ISO</strong> is a measure of how sensitive your\n        camera's sensors are to light.\n      </p>\n      <p>\n        Increasing your camera's ISO makes your pictures brighter, but it also\n        increases their <strong>noise</strong>, or their grainy-ness. This is\n        why night photos, which usually are taken with high ISO, have black dots\n        when you look closely.\n      </p>\n      <div style={pageStyle.table}>\n        <div style={pageStyle.row}>\n          <div style={pageStyle.column}>\n            <strong>Low ISO:</strong>\n          </div>\n          <div style={pageStyle.column}>\n            <strong>High ISO:</strong>\n          </div>\n        </div>\n        <div style={pageStyle.row}>\n          <div style={pageStyle.column}>\n            Your camera's sensors are not very sensitive, reducing overall\n            brightness. This makes your pictures less noisy though.\n          </div>\n          <div style={pageStyle.column}>\n            Your camera's sensors are very sensitive to light, meaning brighter\n            images. However, this make your pictures more noisy.\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport { Home, Aperture, ShutterSpeed, ISO };",
                  "solvedContent": null
                },
                {
                  "name": "navigation.jsx",
                  "codeLanguage": "jsx",
                  "content": "import React from \"react\";\nimport { navStyle } from \"./styles.jsx\";\n\nconst Navigation = (props) => {\n  return (\n    <nav style={navStyle.nav}>\n      <button style={navStyle.navLink}>Home</button>\n      <button style={navStyle.navLink}>Aperture</button>\n      <button style={navStyle.navLink}>Shutter Speed</button>\n      <button style={navStyle.navLink}>ISO</button>\n    </nav>\n  );\n};\n\nexport default Navigation;",
                  "solvedContent": null
                },
                {
                  "name": "styles.jsx",
                  "codeLanguage": "jsx",
                  "content": "const wrapperStyle = {\n  wrapper: {\n    width: \"100%\",\n    fontFamily: \"Times New Roman, Verdana, Arial, sans-serif\",\n    fontSize: 16,\n    padding: 16,\n    boxSizing: \"border-box\",\n    textAlign: \"center\",\n  },\n};\n\nconst navStyle = {\n  nav: {\n    textAlign: \"center\",\n    display: \"flex\",\n    flexDirection: \"row\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    flexWrap: \"nowrap\",\n  },\n  navLink: {\n    flexBasis: \"100\",\n    flexShrink: \"1\",\n    margin: 2,\n    paddingLeft: 8,\n    paddingRight: 8,\n    paddingTop: 4,\n    paddingBottom: 4,\n    fontSize: 12,\n  },\n};\n\nconst pageStyle = {\n  table: {\n    width: \"100%\",\n    display: \"flex\",\n    flexDirection: \"column\",\n    flexWrap: \"nowrap\",\n    justifyContent: \"flex-start\",\n    alignItems: \"stretch\",\n  },\n  row: {\n    width: \"100%\",\n    marginBottom: 4,\n    display: \"flex\",\n    flexDirection: \"row\",\n    flexWrap: \"nowrap\",\n    justifyContent: \"space-between\",\n    alignItems: \"flex-start\",\n  },\n  column: {\n    flexBasis: \"50%\",\n    flexShrink: 1,\n    flexGrow: 0,\n    marginLeft: 4,\n    marginRight: 4,\n  },\n};\n\nexport { wrapperStyle, navStyle, pageStyle };",
                  "solvedContent": null
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Step 5 - What's <Routes />?",
            "id": 114683,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "`<Routes>` renderiza apenas um de todos os componentes `<Route>` dentro dele. A ordem dos componentes `<Route>` dentro de `<Routes>` é importante: o primeiro `<Route>` que corresponde à URL atual é renderizado, e todos os outros componentes `<Route>` são ignorados.\n\n1. No componente `<Routes>`, adicione um novo componente `<Route>` entre as rotas \"Home\" e \"Aperture\" com os seguintes atributos: `exact`, caminho `path=\"/shutterspeed\"` e elemento `element={ <ShutterSpeed /> }`.\n2. Para verificar suas alterações, copie e cole a URL da janela de visualização em uma **nova aba no seu navegador**. Em seguida, faça o seguinte:\n   - Certifique-se de que a URL não tenha nada além de `el.mimo.run`. Confirme que a página `<Home />` aparece.\n   - Adicione `/shutterspeed` ao final da URL e carregue a página. Confirme que a página agora mostra a página `<Shutterspeed/>`.\n   - Experimente qualquer outro final de URL. Confirme que a página está vazia.\nVerifique o bloco de dicas para mais assistência sobre esta verificação.",
              "preselectedFileIndex": 1,
              "hasVisualOutput": true,
              "files": [
                {
                  "name": "index.html",
                  "codeLanguage": "html",
                  "content": "<!doctype html>\n<html>\n  <head>\n    <style>\n      html,\n      body {\n        margin: 0;\n        padding: 0;\n        background-color: #fefef1;\n      }\n      \n      a {\n        text-decoration: underline;\n        color: blue;\n      }\n      \n      a:hover {\n        cursor: pointer;\n      }\n    </style>\n    <script type=\"module\" src=\"./index.js\"></script>\n  </head>\n  <body>\n    <div id=\"root\"></div>\n  </body>\n</html>",
                  "solvedContent": null
                },
                {
                  "name": "index.jsx",
                  "codeLanguage": "jsx",
                  "content": "import React from \"react\";\nimport { createRoot } from \"react-dom/client\";\n\nimport { wrapperStyle } from \"./styles.jsx\";\nimport { Home, Aperture, ShutterSpeed, ISO } from \"./pages.jsx\";\nimport { BrowserRouter, Routes, Route } from \"react-router-dom\";\n\nconst App = () => {\n  return (\n    <BrowserRouter>\n      <div style={wrapperStyle.wrapper}>\n        <h1>Camera Tips</h1>\n        <Routes>\n          <Route exact path=\"/aperture\" element={<Aperture />} />\n          <Route exact path=\"/\" element={<Home />} />\n        </Routes>\n      </div>\n    </BrowserRouter>\n  );\n};\n\nconst rootElement = document.getElementById(\"root\");\nconst root = createRoot(rootElement);\nroot.render(<App />);\n\nexport default App;",
                  "solvedContent": "import React from \"react\";\nimport { createRoot } from \"react-dom/client\";\n\nimport { wrapperStyle } from \"./styles.jsx\";\nimport { Home, Aperture, ShutterSpeed, ISO } from \"./pages.jsx\";\nimport { BrowserRouter, Routes, Route } from \"react-router-dom\";\n\nconst App = () => {\n  return (\n    <BrowserRouter>\n      <div style={wrapperStyle.wrapper}>\n        <h1>Camera Tips</h1>\n        <Routes>\n          <Route exact path=\"/aperture\" element={<Aperture />} />\n          <Route exact path=\"/shutterspeed\" element={<ShutterSpeed />} />\n          <Route exact path=\"/\" element={<Home />} />\n        </Routes>\n      </div>\n    </BrowserRouter>\n  );\n};\n\nconst rootElement = document.getElementById(\"root\");\nconst root = createRoot(rootElement);\nroot.render(<App />);\n\nexport default App;"
                },
                {
                  "name": "pages.jsx",
                  "codeLanguage": "jsx",
                  "content": "import React from \"react\";\nimport { pageStyle } from \"./styles\";\n\nconst Home = () => {\n  return (\n    <div>\n      <p>\n        Want a quick guide on how to take good photos? Confused about photo\n        terms? You've come to the right place!\n      </p>\n    </div>\n  );\n};\n\nconst ShutterSpeed = () => {\n  return (\n    <div>\n      <h3>Shutter Speed</h3>\n      <p>\n        <strong>Shutter Speed</strong> is how quickly your camera takes the\n        picture.\n      </p>\n      <div style={pageStyle.table}>\n        <div style={pageStyle.row}>\n          <div style={pageStyle.column}>\n            <strong>Fast Shutter Speed:</strong>\n          </div>\n          <div style={pageStyle.column}>\n            <strong>Slow Shutter Speed:</strong>\n          </div>\n        </div>\n        <div style={pageStyle.row}>\n          <div style={pageStyle.column}>\n            Clearer subjects when they are moving. Darker picture because less\n            light can enter your camera.\n          </div>\n          <div style={pageStyle.column}>\n            Blurrier subjects when they are moving. Brighter pictures because\n            more light can enter your camera.\n          </div>\n        </div>\n      </div>\n      <p>\n        A shutter speed of 1/60 is the lowest speed you can get for a bright\n        photo that isn't noticeably blurry.\n      </p>\n    </div>\n  );\n};\n\nconst Aperture = () => {\n  return (\n    <div>\n      <h3>Aperture</h3>\n      <p>\n        The <strong>Aperture</strong> is the camera lens' opening that allows\n        light in. The measurement of that opening is called the{\" \"}\n        <strong>F-Stop</strong>. The Aperture and F-Stop are inversely\n        proportional.\n      </p>\n      <div style={pageStyle.table}>\n        <div style={pageStyle.row}>\n          <div style={pageStyle.column}>\n            <strong>Low F-Stop / High Aperture:</strong>\n          </div>\n          <div style={pageStyle.column}>\n            <strong>High F-Stop / Low Aperture:</strong>\n          </div>\n        </div>\n        <div style={pageStyle.row}>\n          <div style={pageStyle.column}>\n            Your Depth of Field is very narrow; your pictures will be brighter\n            and will have foreground and background blur.\n          </div>\n          <div style={pageStyle.column}>\n            Your Depth of Field is very wide; your pictures will be darker but\n            will have less blurred backgrounds and foregrounds.\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nconst ISO = () => {\n  return (\n    <div>\n      <h3>ISO</h3>\n      <p>\n        Your camera's <strong>ISO</strong> is a measure of how sensitive your\n        camera's sensors are to light.\n      </p>\n      <p>\n        Increasing your camera's ISO makes your pictures brighter, but it also\n        increases their <strong>noise</strong>, or their grainy-ness. This is\n        why night photos, which usually are taken with high ISO, have black dots\n        when you look closely.\n      </p>\n      <div style={pageStyle.table}>\n        <div style={pageStyle.row}>\n          <div style={pageStyle.column}>\n            <strong>Low ISO:</strong>\n          </div>\n          <div style={pageStyle.column}>\n            <strong>High ISO:</strong>\n          </div>\n        </div>\n        <div style={pageStyle.row}>\n          <div style={pageStyle.column}>\n            Your camera's sensors are not very sensitive, reducing overall\n            brightness. This makes your pictures less noisy though.\n          </div>\n          <div style={pageStyle.column}>\n            Your camera's sensors are very sensitive to light, meaning brighter\n            images. However, this make your pictures more noisy.\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport { Home, Aperture, ShutterSpeed, ISO };",
                  "solvedContent": null
                },
                {
                  "name": "navigation.jsx",
                  "codeLanguage": "jsx",
                  "content": "import React from \"react\";\nimport { navStyle } from \"./styles.jsx\";\n\nconst Navigation = (props) => {\n  return (\n    <nav style={navStyle.nav}>\n      <button style={navStyle.navLink}>Home</button>\n      <button style={navStyle.navLink}>Aperture</button>\n      <button style={navStyle.navLink}>Shutter Speed</button>\n      <button style={navStyle.navLink}>ISO</button>\n    </nav>\n  );\n};\n\nexport default Navigation;",
                  "solvedContent": null
                },
                {
                  "name": "styles.jsx",
                  "codeLanguage": "jsx",
                  "content": "const wrapperStyle = {\n  wrapper: {\n    width: \"100%\",\n    fontFamily: \"Times New Roman, Verdana, Arial, sans-serif\",\n    fontSize: 16,\n    padding: 16,\n    boxSizing: \"border-box\",\n    textAlign: \"center\",\n  },\n};\n\nconst navStyle = {\n  nav: {\n    textAlign: \"center\",\n    display: \"flex\",\n    flexDirection: \"row\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    flexWrap: \"nowrap\",\n  },\n  navLink: {\n    flexBasis: \"100\",\n    flexShrink: \"1\",\n    margin: 2,\n    paddingLeft: 8,\n    paddingRight: 8,\n    paddingTop: 4,\n    paddingBottom: 4,\n    fontSize: 12,\n  },\n};\n\nconst pageStyle = {\n  table: {\n    width: \"100%\",\n    display: \"flex\",\n    flexDirection: \"column\",\n    flexWrap: \"nowrap\",\n    justifyContent: \"flex-start\",\n    alignItems: \"stretch\",\n  },\n  row: {\n    width: \"100%\",\n    marginBottom: 4,\n    display: \"flex\",\n    flexDirection: \"row\",\n    flexWrap: \"nowrap\",\n    justifyContent: \"space-between\",\n    alignItems: \"flex-start\",\n  },\n  column: {\n    flexBasis: \"50%\",\n    flexShrink: 1,\n    flexGrow: 0,\n    marginLeft: 4,\n    marginRight: 4,\n  },\n};\n\nexport { wrapperStyle, navStyle, pageStyle };",
                  "solvedContent": null
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Step 6 - Final <Route />",
            "id": 114684,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Até agora, temos três componentes `<Route>`. Precisamos adicionar a página final: `/iso`.\n\n1. No componente `<Routes>`, adicione um novo componente `<Route>` entre as rotas `Shutter Speed` e `Home` com os seguintes atributos:\n    * `exact`\n    * `path=\"/iso\"`\n    * `element={ <ISO /> }`",
              "preselectedFileIndex": 1,
              "hasVisualOutput": true,
              "files": [
                {
                  "name": "index.html",
                  "codeLanguage": "html",
                  "content": "<!doctype html>\n<html>\n  <head>\n    <style>\n      html,\n      body {\n        margin: 0;\n        padding: 0;\n        background-color: #fefef1;\n      }\n      \n      a {\n        text-decoration: underline;\n        color: blue;\n      }\n      \n      a:hover {\n        cursor: pointer;\n      }\n    </style>\n    <script type=\"module\" src=\"./index.js\"></script>\n  </head>\n  <body>\n    <div id=\"root\"></div>\n  </body>\n</html>",
                  "solvedContent": null
                },
                {
                  "name": "index.jsx",
                  "codeLanguage": "jsx",
                  "content": "import React from \"react\";\nimport { createRoot } from \"react-dom/client\";\n\nimport { wrapperStyle } from \"./styles.jsx\";\nimport { Home, Aperture, ShutterSpeed, ISO } from \"./pages.jsx\";\nimport { BrowserRouter, Routes, Route } from \"react-router-dom\";\n\nconst App = () => {\n  return (\n    <BrowserRouter>\n      <div style={wrapperStyle.wrapper}>\n        <h1>Camera Tips</h1>\n        <Routes>\n          <Route exact path=\"/aperture\" element={<Aperture />} />\n          <Route exact path=\"/shutterspeed\" element={<ShutterSpeed />} />\n          <Route exact path=\"/\" element={<Home />} />\n        </Routes>\n      </div>\n    </BrowserRouter>\n  );\n};\n\nconst rootElement = document.getElementById(\"root\");\nconst root = createRoot(rootElement);\nroot.render(<App />);\n\nexport default App;",
                  "solvedContent": "import React from \"react\";\nimport { createRoot } from \"react-dom/client\";\n\nimport { wrapperStyle } from \"./styles.jsx\";\nimport { Home, Aperture, ShutterSpeed, ISO } from \"./pages.jsx\";\nimport { BrowserRouter, Routes, Route } from \"react-router-dom\";\n\nconst App = () => {\n  return (\n    <BrowserRouter>\n      <div style={wrapperStyle.wrapper}>\n        <h1>Camera Tips</h1>\n        <Routes>\n          <Route exact path=\"/aperture\" element={<Aperture />} />\n          <Route exact path=\"/shutterspeed\" element={<ShutterSpeed />} />\n          <Route exact path=\"/iso\" element={<ISO />} />\n          <Route exact path=\"/\" element={<Home />} />\n        </Routes>\n      </div>\n    </BrowserRouter>\n  );\n};\n\nconst rootElement = document.getElementById(\"root\");\nconst root = createRoot(rootElement);\nroot.render(<App />);\n\nexport default App;"
                },
                {
                  "name": "pages.jsx",
                  "codeLanguage": "jsx",
                  "content": "import React from \"react\";\nimport { pageStyle } from \"./styles\";\n\nconst Home = () => {\n  return (\n    <div>\n      <p>\n        Want a quick guide on how to take good photos? Confused about photo\n        terms? You've come to the right place!\n      </p>\n    </div>\n  );\n};\n\nconst ShutterSpeed = () => {\n  return (\n    <div>\n      <h3>Shutter Speed</h3>\n      <p>\n        <strong>Shutter Speed</strong> is how quickly your camera takes the\n        picture.\n      </p>\n      <div style={pageStyle.table}>\n        <div style={pageStyle.row}>\n          <div style={pageStyle.column}>\n            <strong>Fast Shutter Speed:</strong>\n          </div>\n          <div style={pageStyle.column}>\n            <strong>Slow Shutter Speed:</strong>\n          </div>\n        </div>\n        <div style={pageStyle.row}>\n          <div style={pageStyle.column}>\n            Clearer subjects when they are moving. Darker picture because less\n            light can enter your camera.\n          </div>\n          <div style={pageStyle.column}>\n            Blurrier subjects when they are moving. Brighter pictures because\n            more light can enter your camera.\n          </div>\n        </div>\n      </div>\n      <p>\n        A shutter speed of 1/60 is the lowest speed you can get for a bright\n        photo that isn't noticeably blurry.\n      </p>\n    </div>\n  );\n};\n\nconst Aperture = () => {\n  return (\n    <div>\n      <h3>Aperture</h3>\n      <p>\n        The <strong>Aperture</strong> is the camera lens' opening that allows\n        light in. The measurement of that opening is called the{\" \"}\n        <strong>F-Stop</strong>. The Aperture and F-Stop are inversely\n        proportional.\n      </p>\n      <div style={pageStyle.table}>\n        <div style={pageStyle.row}>\n          <div style={pageStyle.column}>\n            <strong>Low F-Stop / High Aperture:</strong>\n          </div>\n          <div style={pageStyle.column}>\n            <strong>High F-Stop / Low Aperture:</strong>\n          </div>\n        </div>\n        <div style={pageStyle.row}>\n          <div style={pageStyle.column}>\n            Your Depth of Field is very narrow; your pictures will be brighter\n            and will have foreground and background blur.\n          </div>\n          <div style={pageStyle.column}>\n            Your Depth of Field is very wide; your pictures will be darker but\n            will have less blurred backgrounds and foregrounds.\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nconst ISO = () => {\n  return (\n    <div>\n      <h3>ISO</h3>\n      <p>\n        Your camera's <strong>ISO</strong> is a measure of how sensitive your\n        camera's sensors are to light.\n      </p>\n      <p>\n        Increasing your camera's ISO makes your pictures brighter, but it also\n        increases their <strong>noise</strong>, or their grainy-ness. This is\n        why night photos, which usually are taken with high ISO, have black dots\n        when you look closely.\n      </p>\n      <div style={pageStyle.table}>\n        <div style={pageStyle.row}>\n          <div style={pageStyle.column}>\n            <strong>Low ISO:</strong>\n          </div>\n          <div style={pageStyle.column}>\n            <strong>High ISO:</strong>\n          </div>\n        </div>\n        <div style={pageStyle.row}>\n          <div style={pageStyle.column}>\n            Your camera's sensors are not very sensitive, reducing overall\n            brightness. This makes your pictures less noisy though.\n          </div>\n          <div style={pageStyle.column}>\n            Your camera's sensors are very sensitive to light, meaning brighter\n            images. However, this make your pictures more noisy.\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport { Home, Aperture, ShutterSpeed, ISO };",
                  "solvedContent": null
                },
                {
                  "name": "navigation.jsx",
                  "codeLanguage": "jsx",
                  "content": "import React from \"react\";\nimport { navStyle } from \"./styles.jsx\";\n\nconst Navigation = (props) => {\n  return (\n    <nav style={navStyle.nav}>\n      <button style={navStyle.navLink}>Home</button>\n      <button style={navStyle.navLink}>Aperture</button>\n      <button style={navStyle.navLink}>Shutter Speed</button>\n      <button style={navStyle.navLink}>ISO</button>\n    </nav>\n  );\n};\n\nexport default Navigation;",
                  "solvedContent": null
                },
                {
                  "name": "styles.jsx",
                  "codeLanguage": "jsx",
                  "content": "const wrapperStyle = {\n  wrapper: {\n    width: \"100%\",\n    fontFamily: \"Times New Roman, Verdana, Arial, sans-serif\",\n    fontSize: 16,\n    padding: 16,\n    boxSizing: \"border-box\",\n    textAlign: \"center\",\n  },\n};\n\nconst navStyle = {\n  nav: {\n    textAlign: \"center\",\n    display: \"flex\",\n    flexDirection: \"row\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    flexWrap: \"nowrap\",\n  },\n  navLink: {\n    flexBasis: \"100\",\n    flexShrink: \"1\",\n    margin: 2,\n    paddingLeft: 8,\n    paddingRight: 8,\n    paddingTop: 4,\n    paddingBottom: 4,\n    fontSize: 12,\n  },\n};\n\nconst pageStyle = {\n  table: {\n    width: \"100%\",\n    display: \"flex\",\n    flexDirection: \"column\",\n    flexWrap: \"nowrap\",\n    justifyContent: \"flex-start\",\n    alignItems: \"stretch\",\n  },\n  row: {\n    width: \"100%\",\n    marginBottom: 4,\n    display: \"flex\",\n    flexDirection: \"row\",\n    flexWrap: \"nowrap\",\n    justifyContent: \"space-between\",\n    alignItems: \"flex-start\",\n  },\n  column: {\n    flexBasis: \"50%\",\n    flexShrink: 1,\n    flexGrow: 0,\n    marginLeft: 4,\n    marginRight: 4,\n  },\n};\n\nexport { wrapperStyle, navStyle, pageStyle };",
                  "solvedContent": null
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Step 7 - Import Navigation",
            "id": 114685,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "É cansativo manipular diretamente a URL para mudar de página. Precisamos de uma barra de navegação para selecionar para qual página queremos ir. Já temos um componente `Navigation` com botões de navegação, então vamos importá-lo e adicioná-lo ao `App`. Faremos os botões funcionarem de verdade na próxima lição.\n\n1. Importe o componente `Navigation` de `./navigation.jsx`.\n2. Adicione `<Navigation />` acima do cabeçalho `<h1>`.",
              "preselectedFileIndex": 1,
              "hasVisualOutput": true,
              "files": [
                {
                  "name": "index.html",
                  "codeLanguage": "html",
                  "content": "<!doctype html>\n<html>\n  <head>\n    <style>\n      html,\n      body {\n        margin: 0;\n        padding: 0;\n        background-color: #fefef1;\n      }\n      \n      a {\n        text-decoration: underline;\n        color: blue;\n      }\n      \n      a:hover {\n        cursor: pointer;\n      }\n    </style>\n    <script type=\"module\" src=\"./index.js\"></script>\n  </head>\n  <body>\n    <div id=\"root\"></div>\n  </body>\n</html>",
                  "solvedContent": null
                },
                {
                  "name": "index.jsx",
                  "codeLanguage": "jsx",
                  "content": "import React from \"react\";\nimport { createRoot } from \"react-dom/client\";\n\nimport { wrapperStyle } from \"./styles.jsx\";\nimport { Home, Aperture, ShutterSpeed, ISO } from \"./pages.jsx\";\nimport { BrowserRouter, Routes, Route } from \"react-router-dom\";\n\nconst App = () => {\n  return (\n    <BrowserRouter>\n      <div style={wrapperStyle.wrapper}>\n        <h1>Camera Tips</h1>\n        <Routes>\n          <Route exact path=\"/aperture\" element={<Aperture />} />\n          <Route exact path=\"/shutterspeed\" element={<ShutterSpeed />} />\n          <Route exact path=\"/iso\" element={<ISO />} />\n          <Route exact path=\"/\" element={<Home />} />\n        </Routes>\n      </div>\n    </BrowserRouter>\n  );\n};\n\nconst rootElement = document.getElementById(\"root\");\nconst root = createRoot(rootElement);\nroot.render(<App />);\n\nexport default App;",
                  "solvedContent": "import React from \"react\";\nimport { createRoot } from \"react-dom/client\";\n\nimport { wrapperStyle } from \"./styles.jsx\";\nimport { Home, Aperture, ShutterSpeed, ISO } from \"./pages.jsx\";\nimport Navigation from \"./navigation.jsx\";\nimport { BrowserRouter, Routes, Route } from \"react-router-dom\";\n\nconst App = () => {\n  return (\n    <BrowserRouter>\n      <div style={wrapperStyle.wrapper}>\n        <Navigation />\n        <h1>Camera Tips</h1>\n        <Routes>\n          <Route exact path=\"/aperture\" element={<Aperture />} />\n          <Route exact path=\"/shutterspeed\" element={<ShutterSpeed />} />\n          <Route exact path=\"/iso\" element={<ISO />} />\n          <Route exact path=\"/\" element={<Home />} />\n        </Routes>\n      </div>\n    </BrowserRouter>\n  );\n};\n\nconst rootElement = document.getElementById(\"root\");\nconst root = createRoot(rootElement);\nroot.render(<App />);\n\nexport default App;"
                },
                {
                  "name": "pages.jsx",
                  "codeLanguage": "jsx",
                  "content": "import React from \"react\";\nimport { pageStyle } from \"./styles\";\n\nconst Home = () => {\n  return (\n    <div>\n      <p>\n        Want a quick guide on how to take good photos? Confused about photo\n        terms? You've come to the right place!\n      </p>\n    </div>\n  );\n};\n\nconst ShutterSpeed = () => {\n  return (\n    <div>\n      <h3>Shutter Speed</h3>\n      <p>\n        <strong>Shutter Speed</strong> is how quickly your camera takes the\n        picture.\n      </p>\n      <div style={pageStyle.table}>\n        <div style={pageStyle.row}>\n          <div style={pageStyle.column}>\n            <strong>Fast Shutter Speed:</strong>\n          </div>\n          <div style={pageStyle.column}>\n            <strong>Slow Shutter Speed:</strong>\n          </div>\n        </div>\n        <div style={pageStyle.row}>\n          <div style={pageStyle.column}>\n            Clearer subjects when they are moving. Darker picture because less\n            light can enter your camera.\n          </div>\n          <div style={pageStyle.column}>\n            Blurrier subjects when they are moving. Brighter pictures because\n            more light can enter your camera.\n          </div>\n        </div>\n      </div>\n      <p>\n        A shutter speed of 1/60 is the lowest speed you can get for a bright\n        photo that isn't noticeably blurry.\n      </p>\n    </div>\n  );\n};\n\nconst Aperture = () => {\n  return (\n    <div>\n      <h3>Aperture</h3>\n      <p>\n        The <strong>Aperture</strong> is the camera lens' opening that allows\n        light in. The measurement of that opening is called the{\" \"}\n        <strong>F-Stop</strong>. The Aperture and F-Stop are inversely\n        proportional.\n      </p>\n      <div style={pageStyle.table}>\n        <div style={pageStyle.row}>\n          <div style={pageStyle.column}>\n            <strong>Low F-Stop / High Aperture:</strong>\n          </div>\n          <div style={pageStyle.column}>\n            <strong>High F-Stop / Low Aperture:</strong>\n          </div>\n        </div>\n        <div style={pageStyle.row}>\n          <div style={pageStyle.column}>\n            Your Depth of Field is very narrow; your pictures will be brighter\n            and will have foreground and background blur.\n          </div>\n          <div style={pageStyle.column}>\n            Your Depth of Field is very wide; your pictures will be darker but\n            will have less blurred backgrounds and foregrounds.\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nconst ISO = () => {\n  return (\n    <div>\n      <h3>ISO</h3>\n      <p>\n        Your camera's <strong>ISO</strong> is a measure of how sensitive your\n        camera's sensors are to light.\n      </p>\n      <p>\n        Increasing your camera's ISO makes your pictures brighter, but it also\n        increases their <strong>noise</strong>, or their grainy-ness. This is\n        why night photos, which usually are taken with high ISO, have black dots\n        when you look closely.\n      </p>\n      <div style={pageStyle.table}>\n        <div style={pageStyle.row}>\n          <div style={pageStyle.column}>\n            <strong>Low ISO:</strong>\n          </div>\n          <div style={pageStyle.column}>\n            <strong>High ISO:</strong>\n          </div>\n        </div>\n        <div style={pageStyle.row}>\n          <div style={pageStyle.column}>\n            Your camera's sensors are not very sensitive, reducing overall\n            brightness. This makes your pictures less noisy though.\n          </div>\n          <div style={pageStyle.column}>\n            Your camera's sensors are very sensitive to light, meaning brighter\n            images. However, this make your pictures more noisy.\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport { Home, Aperture, ShutterSpeed, ISO };",
                  "solvedContent": null
                },
                {
                  "name": "navigation.jsx",
                  "codeLanguage": "jsx",
                  "content": "import React from \"react\";\nimport { navStyle } from \"./styles.jsx\";\n\nconst Navigation = (props) => {\n  return (\n    <nav style={navStyle.nav}>\n      <button style={navStyle.navLink}>Home</button>\n      <button style={navStyle.navLink}>Aperture</button>\n      <button style={navStyle.navLink}>Shutter Speed</button>\n      <button style={navStyle.navLink}>ISO</button>\n    </nav>\n  );\n};\n\nexport default Navigation;",
                  "solvedContent": null
                },
                {
                  "name": "styles.jsx",
                  "codeLanguage": "jsx",
                  "content": "const wrapperStyle = {\n  wrapper: {\n    width: \"100%\",\n    fontFamily: \"Times New Roman, Verdana, Arial, sans-serif\",\n    fontSize: 16,\n    padding: 16,\n    boxSizing: \"border-box\",\n    textAlign: \"center\",\n  },\n};\n\nconst navStyle = {\n  nav: {\n    textAlign: \"center\",\n    display: \"flex\",\n    flexDirection: \"row\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    flexWrap: \"nowrap\",\n  },\n  navLink: {\n    flexBasis: \"100\",\n    flexShrink: \"1\",\n    margin: 2,\n    paddingLeft: 8,\n    paddingRight: 8,\n    paddingTop: 4,\n    paddingBottom: 4,\n    fontSize: 12,\n  },\n};\n\nconst pageStyle = {\n  table: {\n    width: \"100%\",\n    display: \"flex\",\n    flexDirection: \"column\",\n    flexWrap: \"nowrap\",\n    justifyContent: \"flex-start\",\n    alignItems: \"stretch\",\n  },\n  row: {\n    width: \"100%\",\n    marginBottom: 4,\n    display: \"flex\",\n    flexDirection: \"row\",\n    flexWrap: \"nowrap\",\n    justifyContent: \"space-between\",\n    alignItems: \"flex-start\",\n  },\n  column: {\n    flexBasis: \"50%\",\n    flexShrink: 1,\n    flexGrow: 0,\n    marginLeft: 4,\n    marginRight: 4,\n  },\n};\n\nexport { wrapperStyle, navStyle, pageStyle };",
                  "solvedContent": null
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Step 8: Adding Nav Capabilities",
            "id": 114687,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Atualmente, clicar nos botões `<Navigation>` não tem nenhum efeito. Isso porque precisamos modificar os botões para funcionar com o `react-router-dom`.\n\nEm uma página web normal, usaríamos a tag `<a href=\"\">` para criar hiperlinks e elementos de navegação.\n\nAo usar `react-router-dom`, usamos o componente `Link` em vez das tags `<a>`, já que as tags `<a>` recarregarão a página e os componentes `Link` não.\n\nO primeiro passo é importar outro componente do `react-router-dom`.\n\n1. Dentro de `navigation.jsx`, importe `Link` de `react-router-dom`.",
              "preselectedFileIndex": 3,
              "hasVisualOutput": true,
              "files": [
                {
                  "name": "index.html",
                  "codeLanguage": "html",
                  "content": "<!doctype html>\n<html>\n  <head>\n    <style>\n      html,\n      body {\n        margin: 0;\n        padding: 0;\n        background-color: #fefef1;\n      }\n      \n      a {\n        text-decoration: underline;\n        color: blue;\n      }\n      \n      a:hover {\n        cursor: pointer;\n      }\n    </style>\n    <script type=\"module\" src=\"./index.js\"></script>\n  </head>\n  <body>\n    <div id=\"root\"></div>\n  </body>\n</html>",
                  "solvedContent": null
                },
                {
                  "name": "index.jsx",
                  "codeLanguage": "jsx",
                  "content": "import React from \"react\";\nimport { createRoot } from \"react-dom/client\";\n\n\nimport { wrapperStyle } from \"./styles.jsx\";\nimport { Home, Aperture, ShutterSpeed, ISO } from \"./pages.jsx\";\nimport Navigation from \"./navigation.jsx\";\nimport { BrowserRouter, Routes, Route } from \"react-router-dom\";\n\nconst App = () => {\n  return (\n    <BrowserRouter>\n      <div style={wrapperStyle.wrapper}>\n        <Navigation />\n        <h1>Camera Tips</h1>\n        <Routes>\n          <Route exact path=\"/aperture\" element={<Aperture />} />\n          <Route exact path=\"/shutterspeed\" element={<ShutterSpeed />} />\n          <Route exact path=\"/iso\" element={<ISO />} />\n          <Route exact path=\"/\" element={<Home />} />\n        </Routes>\n      </div>\n    </BrowserRouter>\n  );\n};\n\nconst rootElement = document.getElementById(\"root\");\nconst root = createRoot(rootElement);\nroot.render(<App />);\n\nexport default App;",
                  "solvedContent": null
                },
                {
                  "name": "pages.jsx",
                  "codeLanguage": "jsx",
                  "content": "import React from \"react\";\nimport { pageStyle } from \"./styles\";\n\nconst Home = () => {\n  return (\n    <div>\n      <p>\n        Want a quick guide on how to take good photos? Confused about photo\n        terms? You've come to the right place!\n      </p>\n    </div>\n  );\n};\n\nconst ShutterSpeed = () => {\n  return (\n    <div>\n      <h3>Shutter Speed</h3>\n      <p>\n        <strong>Shutter Speed</strong> is how quickly your camera takes the\n        picture.\n      </p>\n      <div style={pageStyle.table}>\n        <div style={pageStyle.row}>\n          <div style={pageStyle.column}>\n            <strong>Fast Shutter Speed:</strong>\n          </div>\n          <div style={pageStyle.column}>\n            <strong>Slow Shutter Speed:</strong>\n          </div>\n        </div>\n        <div style={pageStyle.row}>\n          <div style={pageStyle.column}>\n            Clearer subjects when they are moving. Darker picture because less\n            light can enter your camera.\n          </div>\n          <div style={pageStyle.column}>\n            Blurrier subjects when they are moving. Brighter pictures because\n            more light can enter your camera.\n          </div>\n        </div>\n      </div>\n      <p>\n        A shutter speed of 1/60 is the lowest speed you can get for a bright\n        photo that isn't noticeably blurry.\n      </p>\n    </div>\n  );\n};\n\nconst Aperture = () => {\n  return (\n    <div>\n      <h3>Aperture</h3>\n      <p>\n        The <strong>Aperture</strong> is the camera lens' opening that allows\n        light in. The measurement of that opening is called the{\" \"}\n        <strong>F-Stop</strong>. The Aperture and F-Stop are inversely\n        proportional.\n      </p>\n      <div style={pageStyle.table}>\n        <div style={pageStyle.row}>\n          <div style={pageStyle.column}>\n            <strong>Low F-Stop / High Aperture:</strong>\n          </div>\n          <div style={pageStyle.column}>\n            <strong>High F-Stop / Low Aperture:</strong>\n          </div>\n        </div>\n        <div style={pageStyle.row}>\n          <div style={pageStyle.column}>\n            Your Depth of Field is very narrow; your pictures will be brighter\n            and will have foreground and background blur.\n          </div>\n          <div style={pageStyle.column}>\n            Your Depth of Field is very wide; your pictures will be darker but\n            will have less blurred backgrounds and foregrounds.\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nconst ISO = () => {\n  return (\n    <div>\n      <h3>ISO</h3>\n      <p>\n        Your camera's <strong>ISO</strong> is a measure of how sensitive your\n        camera's sensors are to light.\n      </p>\n      <p>\n        Increasing your camera's ISO makes your pictures brighter, but it also\n        increases their <strong>noise</strong>, or their grainy-ness. This is\n        why night photos, which usually are taken with high ISO, have black dots\n        when you look closely.\n      </p>\n      <div style={pageStyle.table}>\n        <div style={pageStyle.row}>\n          <div style={pageStyle.column}>\n            <strong>Low ISO:</strong>\n          </div>\n          <div style={pageStyle.column}>\n            <strong>High ISO:</strong>\n          </div>\n        </div>\n        <div style={pageStyle.row}>\n          <div style={pageStyle.column}>\n            Your camera's sensors are not very sensitive, reducing overall\n            brightness. This makes your pictures less noisy though.\n          </div>\n          <div style={pageStyle.column}>\n            Your camera's sensors are very sensitive to light, meaning brighter\n            images. However, this make your pictures more noisy.\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport { Home, Aperture, ShutterSpeed, ISO };",
                  "solvedContent": null
                },
                {
                  "name": "navigation.jsx",
                  "codeLanguage": "jsx",
                  "content": "import React from \"react\";\n\nconst Navigation = (props) => {\n  return (\n    <nav style={navStyle.nav}>\n      <button style={navStyle.navLink}>Home</button>\n      <button style={navStyle.navLink}>Aperture</button>\n      <button style={navStyle.navLink}>Shutter Speed</button>\n      <button style={navStyle.navLink}>ISO</button>\n    </nav>\n  );\n};\n\nexport default Navigation;",
                  "solvedContent": "import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nconst Navigation = (props) => {\n  return (\n    <nav style={navStyle.nav}>\n      <button style={navStyle.navLink}>Home</button>\n      <button style={navStyle.navLink}>Aperture</button>\n      <button style={navStyle.navLink}>Shutter Speed</button>\n      <button style={navStyle.navLink}>ISO</button>\n    </nav>\n  );\n};\n\nexport default Navigation;"
                },
                {
                  "name": "styles.jsx",
                  "codeLanguage": "jsx",
                  "content": "const wrapperStyle = {\n  wrapper: {\n    width: \"100%\",\n    fontFamily: \"Times New Roman, Verdana, Arial, sans-serif\",\n    fontSize: 16,\n    padding: 16,\n    boxSizing: \"border-box\",\n    textAlign: \"center\",\n  },\n};\n\nconst navStyle = {\n  nav: {\n    textAlign: \"center\",\n    display: \"flex\",\n    flexDirection: \"row\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    flexWrap: \"nowrap\",\n  },\n  navLink: {\n    flexBasis: \"100\",\n    flexShrink: \"1\",\n    margin: 2,\n    paddingLeft: 8,\n    paddingRight: 8,\n    paddingTop: 4,\n    paddingBottom: 4,\n    fontSize: 12,\n  },\n};\n\nconst pageStyle = {\n  table: {\n    width: \"100%\",\n    display: \"flex\",\n    flexDirection: \"column\",\n    flexWrap: \"nowrap\",\n    justifyContent: \"flex-start\",\n    alignItems: \"stretch\",\n  },\n  row: {\n    width: \"100%\",\n    marginBottom: 4,\n    display: \"flex\",\n    flexDirection: \"row\",\n    flexWrap: \"nowrap\",\n    justifyContent: \"space-between\",\n    alignItems: \"flex-start\",\n  },\n  column: {\n    flexBasis: \"50%\",\n    flexShrink: 1,\n    flexGrow: 0,\n    marginLeft: 4,\n    marginRight: 4,\n  },\n};\n\nexport { wrapperStyle, navStyle, pageStyle };",
                  "solvedContent": null
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Step 9: One Link",
            "id": 114688,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Com o componente `Link` importado, agora podemos adicionar alguma funcionalidade à barra de navegação do nosso SPA. Por enquanto, vamos adicionar apenas um `Link` e ver se funciona.\n\n1. Envolva o botão `Aperture` com o novo componente `<Link>`.\n2. Adicione um atributo `to` ao `<Link>` e defina o valor de `to` como `\"/aperture\"` para vincular a `\"/aperture\"` ao clicar no botão.\n3. Carregue a página e clique no botão \"Aperture\" na visualização, você deve ver o conteúdo da página mudar para o componente `<Aperture/>`.",
              "preselectedFileIndex": 3,
              "hasVisualOutput": true,
              "files": [
                {
                  "name": "index.html",
                  "codeLanguage": "html",
                  "content": "<!doctype html>\n<html>\n  <head>\n    <style>\n      html,\n      body {\n        margin: 0;\n        padding: 0;\n        background-color: #fefef1;\n      }\n      \n      a {\n        text-decoration: underline;\n        color: blue;\n      }\n      \n      a:hover {\n        cursor: pointer;\n      }\n    </style>\n    <script type=\"module\" src=\"./index.js\"></script>\n  </head>\n  <body>\n    <div id=\"root\"></div>\n  </body>\n</html>",
                  "solvedContent": null
                },
                {
                  "name": "index.jsx",
                  "codeLanguage": "jsx",
                  "content": "import React from \"react\";\nimport { createRoot } from \"react-dom/client\";\nimport { wrapperStyle } from \"./styles.jsx\";\nimport { Home, Aperture, ShutterSpeed, ISO } from \"./pages.jsx\";\nimport Navigation from \"./navigation.jsx\";\nimport { BrowserRouter, Routes, Route } from \"react-router-dom\";\n\nconst App = () => {\n  return (\n    <BrowserRouter>\n      <div style={wrapperStyle.wrapper}>\n        <Navigation />\n        <h1>Camera Tips</h1>\n        <Routes>\n          <Route exact path=\"/aperture\" element={<Aperture />} />\n          <Route exact path=\"/shutterspeed\" element={<ShutterSpeed />} />\n          <Route exact path=\"/iso\" element={<ISO />} />\n          <Route exact path=\"/\" element={<Home />} />\n        </Routes>\n      </div>\n    </BrowserRouter>\n  );\n};\n\nconst rootElement = document.getElementById(\"root\");\nconst root = createRoot(rootElement);\nroot.render(<App />);\n\nexport default App;",
                  "solvedContent": null
                },
                {
                  "name": "pages.jsx",
                  "codeLanguage": "jsx",
                  "content": "import React from \"react\";\nimport { pageStyle } from \"./styles\";\n\nconst Home = () => {\n  return (\n    <div>\n      <p>\n        Want a quick guide on how to take good photos? Confused about photo\n        terms? You've come to the right place!\n      </p>\n    </div>\n  );\n};\n\nconst ShutterSpeed = () => {\n  return (\n    <div>\n      <h3>Shutter Speed</h3>\n      <p>\n        <strong>Shutter Speed</strong> is how quickly your camera takes the\n        picture.\n      </p>\n      <div style={pageStyle.table}>\n        <div style={pageStyle.row}>\n          <div style={pageStyle.column}>\n            <strong>Fast Shutter Speed:</strong>\n          </div>\n          <div style={pageStyle.column}>\n            <strong>Slow Shutter Speed:</strong>\n          </div>\n        </div>\n        <div style={pageStyle.row}>\n          <div style={pageStyle.column}>\n            Clearer subjects when they are moving. Darker picture because less\n            light can enter your camera.\n          </div>\n          <div style={pageStyle.column}>\n            Blurrier subjects when they are moving. Brighter pictures because\n            more light can enter your camera.\n          </div>\n        </div>\n      </div>\n      <p>\n        A shutter speed of 1/60 is the lowest speed you can get for a bright\n        photo that isn't noticeably blurry.\n      </p>\n    </div>\n  );\n};\n\nconst Aperture = () => {\n  return (\n    <div>\n      <h3>Aperture</h3>\n      <p>\n        The <strong>Aperture</strong> is the camera lens' opening that allows\n        light in. The measurement of that opening is called the{\" \"}\n        <strong>F-Stop</strong>. The Aperture and F-Stop are inversely\n        proportional.\n      </p>\n      <div style={pageStyle.table}>\n        <div style={pageStyle.row}>\n          <div style={pageStyle.column}>\n            <strong>Low F-Stop / High Aperture:</strong>\n          </div>\n          <div style={pageStyle.column}>\n            <strong>High F-Stop / Low Aperture:</strong>\n          </div>\n        </div>\n        <div style={pageStyle.row}>\n          <div style={pageStyle.column}>\n            Your Depth of Field is very narrow; your pictures will be brighter\n            and will have foreground and background blur.\n          </div>\n          <div style={pageStyle.column}>\n            Your Depth of Field is very wide; your pictures will be darker but\n            will have less blurred backgrounds and foregrounds.\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nconst ISO = () => {\n  return (\n    <div>\n      <h3>ISO</h3>\n      <p>\n        Your camera's <strong>ISO</strong> is a measure of how sensitive your\n        camera's sensors are to light.\n      </p>\n      <p>\n        Increasing your camera's ISO makes your pictures brighter, but it also\n        increases their <strong>noise</strong>, or their grainy-ness. This is\n        why night photos, which usually are taken with high ISO, have black dots\n        when you look closely.\n      </p>\n      <div style={pageStyle.table}>\n        <div style={pageStyle.row}>\n          <div style={pageStyle.column}>\n            <strong>Low ISO:</strong>\n          </div>\n          <div style={pageStyle.column}>\n            <strong>High ISO:</strong>\n          </div>\n        </div>\n        <div style={pageStyle.row}>\n          <div style={pageStyle.column}>\n            Your camera's sensors are not very sensitive, reducing overall\n            brightness. This makes your pictures less noisy though.\n          </div>\n          <div style={pageStyle.column}>\n            Your camera's sensors are very sensitive to light, meaning brighter\n            images. However, this make your pictures more noisy.\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport { Home, Aperture, ShutterSpeed, ISO };",
                  "solvedContent": null
                },
                {
                  "name": "navigation.jsx",
                  "codeLanguage": "jsx",
                  "content": "import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { navStyle } from \"./styles\";\n\nconst Navigation = (props) => {\n  return (\n    <nav style={navStyle.nav}>\n      <button style={navStyle.navLink}>Home</button>\n      <button style={navStyle.navLink}>Aperture</button>\n      <button style={navStyle.navLink}>Shutter Speed</button>\n      <button style={navStyle.navLink}>ISO</button>\n    </nav>\n  );\n};\n\nexport default Navigation;",
                  "solvedContent": "import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { navStyle } from \"./styles\";\n\nconst Navigation = (props) => {\n  return (\n    <nav style={navStyle.nav}>\n      <button style={navStyle.navLink}>Home</button>\n      <Link to=\"/aperture\">\n        <button style={navStyle.navLink}>Aperture</button>\n      </Link>\n      <button style={navStyle.navLink}>Shutter Speed</button>\n      <button style={navStyle.navLink}>ISO</button>\n    </nav>\n  );\n};\n\nexport default Navigation;"
                },
                {
                  "name": "styles.jsx",
                  "codeLanguage": "jsx",
                  "content": "const wrapperStyle = {\n  wrapper: {\n    width: \"100%\",\n    fontFamily: \"Times New Roman, Verdana, Arial, sans-serif\",\n    fontSize: 16,\n    padding: 16,\n    boxSizing: \"border-box\",\n    textAlign: \"center\",\n  },\n};\n\nconst navStyle = {\n  nav: {\n    textAlign: \"center\",\n    display: \"flex\",\n    flexDirection: \"row\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    flexWrap: \"nowrap\",\n  },\n  navLink: {\n    flexBasis: \"100\",\n    flexShrink: \"1\",\n    margin: 2,\n    paddingLeft: 8,\n    paddingRight: 8,\n    paddingTop: 4,\n    paddingBottom: 4,\n    fontSize: 12,\n  },\n};\n\nconst pageStyle = {\n  table: {\n    width: \"100%\",\n    display: \"flex\",\n    flexDirection: \"column\",\n    flexWrap: \"nowrap\",\n    justifyContent: \"flex-start\",\n    alignItems: \"stretch\",\n  },\n  row: {\n    width: \"100%\",\n    marginBottom: 4,\n    display: \"flex\",\n    flexDirection: \"row\",\n    flexWrap: \"nowrap\",\n    justifyContent: \"space-between\",\n    alignItems: \"flex-start\",\n  },\n  column: {\n    flexBasis: \"50%\",\n    flexShrink: 1,\n    flexGrow: 0,\n    marginLeft: 4,\n    marginRight: 4,\n  },\n};\n\nexport { wrapperStyle, navStyle, pageStyle };",
                  "solvedContent": null
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Step 10: Add all Links",
            "id": 114689,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Com o único `<Link>` funcionando, agora podemos adicionar o componente `<Link>` aos outros três botões dentro de `Navigation`.\n\n1. Para cada um dos botões restantes, envolva-os com o novo componente `<Link>` e defina seu atributo `to` para a URL correta:\n\n    - `Home` deve linkar para `/`.\n    - `Shutter Speed` deve linkar para `/shutterspeed`.\n    - `ISO` deve linkar para `/iso`.\n\n2. Execute o código e, em seguida, clique em cada um dos botões na barra de navegação. Você deve ver as páginas mudando como se estivesse navegando entre diferentes páginas da web.",
              "preselectedFileIndex": 3,
              "hasVisualOutput": true,
              "files": [
                {
                  "name": "index.html",
                  "codeLanguage": "html",
                  "content": "<!doctype html>\n<html>\n  <head>\n    <style>\n      html,\n      body {\n        margin: 0;\n        padding: 0;\n        background-color: #fefef1;\n      }\n      \n      a {\n        text-decoration: underline;\n        color: blue;\n      }\n      \n      a:hover {\n        cursor: pointer;\n      }\n    </style>\n    <script type=\"module\" src=\"./index.js\"></script>\n  </head>\n  <body>\n    <div id=\"root\"></div>\n  </body>\n</html>",
                  "solvedContent": null
                },
                {
                  "name": "index.jsx",
                  "codeLanguage": "jsx",
                  "content": "import React from \"react\";\nimport { createRoot } from \"react-dom/client\";\n\nimport { wrapperStyle } from \"./styles.jsx\";\nimport { Home, Aperture, ShutterSpeed, ISO } from \"./pages.jsx\";\nimport Navigation from \"./navigation.jsx\";\nimport { BrowserRouter, Routes, Route } from \"react-router-dom\";\n\nconst App = () => {\n  return (\n    <BrowserRouter>\n      <div style={wrapperStyle.wrapper}>\n        <Navigation />\n        <h1>Camera Tips</h1>\n        <Routes>\n          <Route exact path=\"/aperture\" element={<Aperture />} />\n          <Route exact path=\"/shutterspeed\" element={<ShutterSpeed />} />\n          <Route exact path=\"/iso\" element={<ISO />} />\n          <Route exact path=\"/\" element={<Home />} />\n        </Routes>\n      </div>\n    </BrowserRouter>\n  );\n};\n\nconst rootElement = document.getElementById(\"root\");\nconst root = createRoot(rootElement);\nroot.render(<App />);\n\nexport default App;",
                  "solvedContent": null
                },
                {
                  "name": "pages.jsx",
                  "codeLanguage": "jsx",
                  "content": "import React from \"react\";\nimport { pageStyle } from \"./styles\";\n\nconst Home = () => {\n  return (\n    <div>\n      <p>\n        Want a quick guide on how to take good photos? Confused about photo\n        terms? You've come to the right place!\n      </p>\n    </div>\n  );\n};\n\nconst ShutterSpeed = () => {\n  return (\n    <div>\n      <h3>Shutter Speed</h3>\n      <p>\n        <strong>Shutter Speed</strong> is how quickly your camera takes the\n        picture.\n      </p>\n      <div style={pageStyle.table}>\n        <div style={pageStyle.row}>\n          <div style={pageStyle.column}>\n            <strong>Fast Shutter Speed:</strong>\n          </div>\n          <div style={pageStyle.column}>\n            <strong>Slow Shutter Speed:</strong>\n          </div>\n        </div>\n        <div style={pageStyle.row}>\n          <div style={pageStyle.column}>\n            Clearer subjects when they are moving. Darker picture because less\n            light can enter your camera.\n          </div>\n          <div style={pageStyle.column}>\n            Blurrier subjects when they are moving. Brighter pictures because\n            more light can enter your camera.\n          </div>\n        </div>\n      </div>\n      <p>\n        A shutter speed of 1/60 is the lowest speed you can get for a bright\n        photo that isn't noticeably blurry.\n      </p>\n    </div>\n  );\n};\n\nconst Aperture = () => {\n  return (\n    <div>\n      <h3>Aperture</h3>\n      <p>\n        The <strong>Aperture</strong> is the camera lens' opening that allows\n        light in. The measurement of that opening is called the{\" \"}\n        <strong>F-Stop</strong>. The Aperture and F-Stop are inversely\n        proportional.\n      </p>\n      <div style={pageStyle.table}>\n        <div style={pageStyle.row}>\n          <div style={pageStyle.column}>\n            <strong>Low F-Stop / High Aperture:</strong>\n          </div>\n          <div style={pageStyle.column}>\n            <strong>High F-Stop / Low Aperture:</strong>\n          </div>\n        </div>\n        <div style={pageStyle.row}>\n          <div style={pageStyle.column}>\n            Your Depth of Field is very narrow; your pictures will be brighter\n            and will have foreground and background blur.\n          </div>\n          <div style={pageStyle.column}>\n            Your Depth of Field is very wide; your pictures will be darker but\n            will have less blurred backgrounds and foregrounds.\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nconst ISO = () => {\n  return (\n    <div>\n      <h3>ISO</h3>\n      <p>\n        Your camera's <strong>ISO</strong> is a measure of how sensitive your\n        camera's sensors are to light.\n      </p>\n      <p>\n        Increasing your camera's ISO makes your pictures brighter, but it also\n        increases their <strong>noise</strong>, or their grainy-ness. This is\n        why night photos, which usually are taken with high ISO, have black dots\n        when you look closely.\n      </p>\n      <div style={pageStyle.table}>\n        <div style={pageStyle.row}>\n          <div style={pageStyle.column}>\n            <strong>Low ISO:</strong>\n          </div>\n          <div style={pageStyle.column}>\n            <strong>High ISO:</strong>\n          </div>\n        </div>\n        <div style={pageStyle.row}>\n          <div style={pageStyle.column}>\n            Your camera's sensors are not very sensitive, reducing overall\n            brightness. This makes your pictures less noisy though.\n          </div>\n          <div style={pageStyle.column}>\n            Your camera's sensors are very sensitive to light, meaning brighter\n            images. However, this make your pictures more noisy.\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport { Home, Aperture, ShutterSpeed, ISO };",
                  "solvedContent": null
                },
                {
                  "name": "navigation.jsx",
                  "codeLanguage": "jsx",
                  "content": "import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { navStyle } from \"./styles.jsx\";\n\nconst Navigation = (props) => {\n  return (\n    <nav style={navStyle.nav}>\n      <button style={navStyle.navLink}>Home</button>\n      <Link to=\"/aperture\">\n        <button style={navStyle.navLink}>Aperture</button>\n      </Link>\n      <button style={navStyle.navLink}>Shutter Speed</button>\n      <button style={navStyle.navLink}>ISO</button>\n    </nav>\n  );\n};\n\nexport default Navigation;",
                  "solvedContent": "import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { navStyle } from \"./styles.jsx\";\n\nconst Navigation = (props) => {\n  return (\n    <nav style={navStyle.nav}>\n      <Link to=\"/\">\n        <button style={navStyle.navLink}>Home</button>\n      </Link>\n      <Link to=\"/aperture\">\n        <button style={navStyle.navLink}>Aperture</button>\n      </Link>\n      <Link to=\"/shutterspeed\">\n        <button style={navStyle.navLink}>Shutter Speed</button>\n      </Link>\n      <Link to=\"/iso\">\n        <button style={navStyle.navLink}>ISO</button>\n      </Link>\n    </nav>\n  );\n};\n\nexport default Navigation;"
                },
                {
                  "name": "styles.jsx",
                  "codeLanguage": "jsx",
                  "content": "const wrapperStyle = {\n  wrapper: {\n    width: \"100%\",\n    fontFamily: \"Times New Roman, Verdana, Arial, sans-serif\",\n    fontSize: 16,\n    padding: 16,\n    boxSizing: \"border-box\",\n    textAlign: \"center\",\n  },\n};\n\nconst navStyle = {\n  nav: {\n    textAlign: \"center\",\n    display: \"flex\",\n    flexDirection: \"row\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    flexWrap: \"nowrap\",\n  },\n  navLink: {\n    flexBasis: \"100\",\n    flexShrink: \"1\",\n    margin: 2,\n    paddingLeft: 8,\n    paddingRight: 8,\n    paddingTop: 4,\n    paddingBottom: 4,\n    fontSize: 12,\n  },\n};\n\nconst pageStyle = {\n  table: {\n    width: \"100%\",\n    display: \"flex\",\n    flexDirection: \"column\",\n    flexWrap: \"nowrap\",\n    justifyContent: \"flex-start\",\n    alignItems: \"stretch\",\n  },\n  row: {\n    width: \"100%\",\n    marginBottom: 4,\n    display: \"flex\",\n    flexDirection: \"row\",\n    flexWrap: \"nowrap\",\n    justifyContent: \"space-between\",\n    alignItems: \"flex-start\",\n  },\n  column: {\n    flexBasis: \"50%\",\n    flexShrink: 1,\n    flexGrow: 0,\n    marginLeft: 4,\n    marginRight: 4,\n  },\n};\n\nexport { wrapperStyle, navStyle, pageStyle };",
                  "solvedContent": null
                }
              ],
              "hints": []
            }
          }
        ]
      }
    ]
  }
}