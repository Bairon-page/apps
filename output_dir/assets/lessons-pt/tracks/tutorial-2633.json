{
  "tutorial": {
    "id": 2633,
    "version": 5,
    "type": "challenges",
    "isNew": false,
    "codeLanguage": "javascript",
    "title": "Arrays & Funções",
    "descriptionContent": "Desafios são exercícios mais difíceis que testarão suas habilidades.",
    "shortDescriptionContent": "",
    "showInTrack": true,
    "iconBanner": null,
    "chapters": [
      {
        "id": 14525,
        "title": "Lugares para Visitar",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "Places To Visit",
            "id": 129185,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Crie um array que contenha os nomes dos lugares para visitar nesta ordem: `\"New York\"`, `\"Tokyo\"`, `\"Hawaii\"`. Atribua este array à variável `places`. Em seguida, **sem causar qualquer alteração no array original**, acesse a última entrada do array e atribua esta sintaxe à variável `retirement`.\n\nSaída:\n`You should visit Hawaii.`",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const places;\nconst retirement;\nconsole.log(\"You should visit \" + retirement + \".\");",
                  "solvedContent": "const places = [\"New York\", \"Tokyo\", \"Hawaii\"];\nconst retirement = places[2];\nconsole.log(\"You should visit \" + retirement + \".\");"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 14526,
        "title": "Irmãos",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "Siblings",
            "id": 129186,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Vamos criar um array que contenha uma coleção de irmãos.\n\n1. Codifique um array que contenha os nomes dos irmãos nesta ordem: `\"Jon\",` `\"Jess\"`, `\"Jen\"`, `\"Jarod\"` e atribua-o à variável `siblings`.\n2. Use o método push() para adicionar um novo filho `\"Jacob\"` e atribua essa sintaxe à variável `add`.\n3. Acesse o filho do meio e salve essa sintaxe na variável `middleChild`.\n\nSaída:\n`The middle child is Jen.`",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const siblings;\nconst add;\nconst middleChild;\nconsole.log(`The middle child is ${middleChild}.`);",
                  "solvedContent": "const siblings = [\"Jon\", \"Jess\", \"Jen\", \"Jarod\"];\nconst add = siblings.push(\"Jacob\");\nconst middleChild = siblings[2];\nconsole.log(`The middle child is ${middleChild}.`);"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 14527,
        "title": "Todo",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "Todo",
            "id": 129187,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Vamos criar um array que contém uma lista de tarefas a fazer.\n\n1. Codifique um array que contenha uma lista dessas tarefas: `\"study\"`, `\"chores\"` e `\"meditate\"`. Armazene o array na variável `todos`.\n2. Use `pop` para remover a última tarefa do array e armazene isso na variável `remove`.\n3. Crie uma variável `const` chamada `leftToDo` que armazene o número de itens restantes no array `todos`. Use uma propriedade do array para codificar este passo.\n\nSaída:\n`You have 2 items left to do.`",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const todos;\nconst remove;\nconst;\nconsole.log(`You have ${leftToDo} items left to do.`);",
                  "solvedContent": "const todos = [\"study\", \"chores\", \"meditate\"];\nremove = todos.pop();\nconst leftToDo = todos.length;\nconsole.log(`You have ${leftToDo} items left to do.`);"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 14528,
        "title": "Primeiro Elemento em um Array",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "First Value Element in an Array",
            "id": 129188,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Codifique uma função que retorne o primeiro valor do seu parâmetro `array`.\n\nExemplos:\n\n`firstValue([9, 7, 11])` retorna `9`.\n\n`firstValue([2, 22, 7])` retorna `2`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "index.js",
                  "codeLanguage": "javascript",
                  "content": "function firstValue(array) {}",
                  "solvedContent": "function firstValue(array) {\n  return array[0];\n}"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 14529,
        "title": "Horas e Minutos para Segundos",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "Hours and Minutes to Seconds",
            "id": 129189,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Codifique uma função que retorne o resultado de converter os parâmetros `hours` e `minutes` para segundos.\n\nExemplos:\n`toSeconds(2, 5)` retorna `7500`.\n`toSeconds(1, 0)` retorna `3600`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "index.js",
                  "codeLanguage": "javascript",
                  "content": "function toSeconds(hours, minutes) {}",
                  "solvedContent": "function toSeconds(hours, minutes) {\n  return (hours * 60 + minutes) * 60;\n}"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 14530,
        "title": "Menor ou Igual a Zero",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "Less Than or Equal to Zero",
            "id": 129190,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Codifique uma função que retorne `true` se o parâmetro `number` for menor ou igual a 0. Caso contrário, retorne `false`.\n\nExemplos:  \n`lessThanOrEqualToZero(7)` retorna `false`.  \n`lessThanOrEqualToZero(-5)` retorna `true`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "index.js",
                  "codeLanguage": "javascript",
                  "content": "function lessThanOrEqualToZero(number) {}",
                  "solvedContent": "function lessThanOrEqualToZero(number) {\n  return number <= 0;\n}"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 14531,
        "title": "Função com dois argumentos",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "Function to Calculate and Display Value",
            "id": 129191,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Vamos criar uma função que recebe dois argumentos e exibe o resultado de um cálculo.\n\n1. Crie uma função `fuelCost`, que recebe dois argumentos, `litres` e `costPerLitre`.\n\n2. Dentro da função, crie uma variável `totalCost`, igual a `litres` * `costPerLitre`.\n\n3. Ainda dentro da função, exiba o valor de `totalCost`.\n\n4. Fora da função, chame a função com os valores `60` e `1.44` para `litres` e `costPerLitre`, respectivamente.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "",
                  "solvedContent": "function fuelCost (liters, costPerLiter) {\r\n const totalCost = liters * costPerLiter;\r\n console.log(totalCost);\r\n}\r\n\r\nfuelCost(60, 1.44);"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 14532,
        "title": "Retornar e usar um valor",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "Function to Return a Value",
            "id": 129192,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Vamos criar uma função que retorna um valor e, em seguida, escrever um código para exibir esse valor.\n\n1. Crie uma função `milesToKm()`, que recebe um único parâmetro `miles`.\n\n2. Dentro da função, crie uma variável `km`, igual a `(miles / 5) * 8`.\n\n3. Escreva uma instrução `return` no final da função para retornar o valor de `km`.\n\n4. Exiba o resultado de chamar a função com um valor de `70`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "",
                  "solvedContent": "function milesToKm(miles) {\r\n  const km = (miles / 5) * 8;\r\n  return km;\r\n}\r\n\r\nconsole.log(milesToKm(70));"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 14533,
        "title": "Condicional em função",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "If-else If-else in Function",
            "id": 129193,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Vamos criar uma função que retorna uma string assim que uma condição for atendida. Aqui, queremos retornar uma mensagem que nos diga, com base nas informações fornecidas, se não há estoque suficiente para todos os usuários, para alguns usuários ou para qualquer usuário.\n\n1. Complete a definição da função adicionando código em cada lado dos dois operadores `>` para retornar a declaração correta.\n  - Na declaração `if`, verifique se `minPerUser` é maior que `totalAvailable` (não há estoque suficiente nem para um usuário).\n  - Na declaração `else if`, verifique se `groupSize * minPerUser` é maior que `totalAvailable` (não há estoque suficiente para todos os usuários).\n2. Exiba o resultado da chamada da função usando os parâmetros `group`, `total` e `minimum`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const group = 4;\r\nconst total = 500;\r\nconst minimum = 150;\r\n\r\nfunction stockCheck (groupSize, totalAvailable, minPerUser) {\r\n if ( > ) {\r\n  return \"Insufficient for one user\";\r\n } else if ( > ) {\r\n   return \"Insufficient for all users\";\r\n } else {\r\n  return \"Sufficient for all users\";\r\n }\r\n}",
                  "solvedContent": "const group = 4;\r\nconst total = 500;\r\nconst minimum = 150;\r\n\r\nfunction stockCheck (groupSize, totalAvailable, minPerUser) {\r\n if (minPerUser > totalAvailable) {\r\n  return \"Insufficient for one user\";\r\n } else if (groupSize * minPerUser > totalAvailable) {\r\n   return \"Insufficient for all users\";\r\n } else {\r\n  return \"Sufficient for all users\";\r\n }\r\n}\r\n\r\nconsole.log(stockCheck(group, total, minimum));"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 14535,
        "title": "Nomes dos Visitantes",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "Visitor Names",
            "id": 129195,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Chame a função JavaScript embutida apropriada no array `visitors` para criar um novo array contendo apenas os nomes que começam com a letra \"C\". A função inline é fornecida para você.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "index.js",
                  "codeLanguage": "javascript",
                  "content": "let visitors = [\"Christina\", \"Andrew\", \"Chris\", \"Delia\"];\nlet C = (function(element) {\n return element[0] == \"C\";\n});\nconsole.log(C);",
                  "solvedContent": "let visitors = [\"Christina\", \"Andrew\", \"Chris\", \"Delia\"];\nlet C = visitors.filter(function(element) {\n return element[0] == \"C\";\n});\nconsole.log(C);"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 14536,
        "title": "Calcular Preço Total",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "Calculate Total Price",
            "id": 129196,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Chame a função JavaScript apropriada no array `prices` para calcular o total. A função inline é fornecida para você.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "index.js",
                  "codeLanguage": "javascript",
                  "content": "let prices = [2500.25, 3482.50, 1746.50];\nlet total = (function(prev, curr) {\n return prev + curr;\n});\nconsole.log(total);",
                  "solvedContent": "let prices = [2500.25, 3482.50, 1746.50];\nlet total = prices.reduce(function(prev, curr) {\n return prev + curr;\n});\nconsole.log(total);"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 14537,
        "title": "Quilos para Libras",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "Kilos to Pounds",
            "id": 129197,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Chame a função JavaScript apropriada no array `kilograms` para converter os valores para libras e armazene o array resultante em uma variável chamada `pounds`. A função inline é fornecida para você.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "index.js",
                  "codeLanguage": "javascript",
                  "content": "let kilograms = [25, 45, 55];\nlet pounds = (function(element) {\n return element * 2.2;\n});\nconsole.log(pounds);",
                  "solvedContent": "let kilograms = [25, 45, 55];\nlet pounds = kilograms.map(function(element) {\n return element * 2.2;\n});\nconsole.log(pounds);"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 11549,
        "title": "Top Três",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "Top Three",
            "id": 106219,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Adicione os três primeiros filmes de `topTen` ao array `topThree`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const topTen = ['Jack Reacher', 'Beautiful Creatures', 'Safe Haven',\n'Side Effects', 'The Last Stand',\n'Silver Linings Playbook',\n'Broken City', 'Cloud Atlas','Parker', 'Eternals'];\nconst topThree = [];\n\n\n",
                  "solvedContent": "const topTen = ['Jack Reacher', 'Beautiful Creatures', 'Safe Haven',\n'Side Effects', 'The Last Stand',\n'Silver Linings Playbook',\n'Broken City', 'Cloud Atlas','Parker', 'Eternals'];\nconst topThree = [];\ntopThree[0] = topTen[0];\ntopThree[1] = topTen[1];\ntopThree[2] = topTen[2];"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 7851,
        "title": "Inverter um Array",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "Reverse an Array",
            "id": 68803,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Codifique uma função que inverte o conteúdo do parâmetro `array` e o retorna como um novo array.\n\nExemplos:\n`reverse([1,2,5,8])` retorna `[8,5,2,1]`.\n`reverse([\"Deb\",\"Lee\"])` retorna `[\"Lee\",\"Deb\"]`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "function reverse(array) {}",
                  "solvedContent": "function reverse(array) {\r\n  const reversed = [];\r\n  for (let i = array.length - 1; i > -1; i--) {\r\n    reversed.push(array[i]);\r\n  }\r\n  return reversed;\r\n}"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 7852,
        "title": "Menor Número em um Array",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "Smallest Number in an Array",
            "id": 68868,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Codifique uma função que retorne o menor número do parâmetro `array` como resultado.\n\nExemplos:\n`smallest([10,44,2,11])` retorna `2`.\n`smallest([5,7,8,9])` retorna `5`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "function smallest(array) {}",
                  "solvedContent": "function smallest(array) {\r\n  let smallest = array[0];\r\n  for (let i = 0; i < array.length; i++) {\r\n    if (array[i] < smallest) {\r\n      smallest = array[i];\r\n    }\r\n  }\r\n  return smallest;\r\n}"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 7809,
        "title": "Diferença Entre Números em um Array",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "Difference between numbers in Array",
            "id": 68339,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Codifique uma função que receba um array de números e retorne a diferença entre o maior e o menor número como resultado.\n\nExemplos:\n`differenceMinMax([0, 7, 11, 100])` retorna `100`.\n`differenceMinMax([55, 9, 22, 11])` retorna `46`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "index.js",
                  "codeLanguage": "javascript",
                  "content": "function differenceMinMax(array) {}",
                  "solvedContent": "function differenceMinMax(array) {\n  let biggest = array[0];\n  let smallest = array[0];\n  for (let i = 0; i < array.length; i++) {\n    if (array[i] > biggest) {\n      biggest = array[i];\n    }\n    if (array[i] < smallest) {\n      smallest = array[i];\n    }\n  }\n  return biggest - smallest;\n}"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 7808,
        "title": "Um Array Contém um Número",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "Does an Array contain a number",
            "id": 68342,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Escreva uma função que retorna `true` se o `number` passado como segundo parâmetro existir no `array` que é passado no primeiro parâmetro. Caso contrário, deve retornar `false`.\n\nExemplos:\n\n<br>\n\n`contains([1, 2, 3, 4], 3)` retorna `true` porque o número 3 existe no array\n\n<br>\n\n`contains([2, 2, 4], 3)` retorna `false` porque o número 3 não existe no array",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "index.js",
                  "codeLanguage": "javascript",
                  "content": "function contains(array, number) {}",
                  "solvedContent": "function contains(array, number) {\n  for (let i = 0; i < array.length; i++) {\n    if (array[i] === number) {\n      return true;\n    }\n  }\n  return false;\n}"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 7873,
        "title": "Média de um Array",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "Average",
            "id": 68928,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Codifique uma função que receba um array de números como parâmetro e retorne a média deles como resultado.\n\nExemplos:\n`average([2,2,5,8])` retorna `4.25`.\n`average([59,60,40])` retorna `53`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "function average(array) {}",
                  "solvedContent": "function average(array) {\n  let total = 0;\n  if (array.length === 0) {\n    return total;\n  }\n  for (let i = 0; i < array.length; i++) {\n    total += array[i];\n  }\n  return total / array.length;\n}"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 11697,
        "title": "Função com iteração",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "iteration with simple logic",
            "id": 107125,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Vamos colocar um loop `for` dentro de uma função. Vamos criar uma exibição de contagem regressiva, de 5 a 1.\n\n1. Crie uma função chamada `countdown`, que não recebe argumentos.\n\n2. Adicione um loop `for` que itera uma variável `i` de `5` a `1`, reduzindo em incrementos de `1`, e a cada vez exibe o valor usando `console.log()`\n\n3. Chame a função `countdown()`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "",
                  "solvedContent": "function countdown() {\r\n  for (let i = 5; i > 0; i--) {\r\n    console.log(i);\r\n  }\r\n}\r\ncountdown();"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 11722,
        "title": "Chamadas condicionais em função",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "Function to make a decision",
            "id": 107407,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Vamos criar uma função que utiliza duas outras funções para calcular e chegar a uma decisão. Queremos usar algumas funções existentes para decidir se é seguro fazer uma viagem de mountain bike.\n\n1. Defina uma função `isSafe` com dois parâmetros: `wind` e `rain`.\n\n2. Dentro da função, crie uma variável `risk`. Chame `windRisk()` com `wind` e some o resultado ao de chamar `rainRisk` com `rain`. Salve a soma na variável `risk`.\n\n3. Dentro da função, escreva uma declaração `if`, que retorna `true` se `risk` for menor que `10`, e `false` caso contrário.\n\n4. Exiba o resultado de chamar `isSafe` com argumentos de `windSpeed` e `rainFall`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const windSpeed = 20;\r\nconst rainFall = 2;\r\n\r\nfunction windRisk(wind) {\r\n  return wind / 2.5;\r\n}\r\n\r\nfunction rainRisk(rain) {\r\n  return rain / 0.5;\r\n}",
                  "solvedContent": "const windSpeed = 20;\r\nconst rainFall = 2;\r\n\r\nfunction windRisk(wind) {\r\n  return wind / 2.5;\r\n}\r\n\r\nfunction rainRisk(rain) {\r\n  return rain / 0.5;\r\n}\r\n\r\nfunction isSafe(wind, rain) {\r\n  const risk = windRisk(wind) + rainRisk(rain);\r\n  if (risk < 10) {\r\n    return true;\r\n  } else {\r\n    return false;\r\n  }\r\n}\r\nconsole.log(isSafe(windSpeed, rainFall));"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 11686,
        "title": "Função usando argumentos mistos",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "Use of an array and another argument",
            "id": 107092,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Vamos codificar uma função que recebe um array como argumento. Nossa função nos dirá quantos lugares ainda estão disponíveis, dada a lista de participantes que fornecemos.\n\n1. Crie uma função `sparePlaces`, que recebe dois argumentos, `entries` e `capacity`.\n\n2. Crie uma variável `taken` dentro da função e atribua a ela o comprimento de `entries` usando a propriedade `.length`.\n\n3. Faça a função retornar o valor de `capacity - taken`.\n\n4. Exiba o resultado de uma chamada para `sparePlaces`, usando `attendees` e o número `8` como argumentos.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const attendees = ['John', 'Jane', 'Jemima'];\r\n",
                  "solvedContent": "const attendees = ['John', 'Jane', 'Jemima'];\r\n\r\nfunction sparePlaces(entries, capacity) {\r\n  const taken = entries.length;\r\n  return capacity - taken;\r\n}\r\n\r\nconsole.log(sparePlaces(attendees, 8));\r\n\r\n"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 11703,
        "title": "Função que chama outra função",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "Call a function within another",
            "id": 107131,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Vamos chamar uma função existente de dentro de outra. Vamos usar uma função existente que converte uma moeda para outra, para calcular quanto vamos obter após incluir a taxa.\n\n1. Defina uma função `convert`, com dois parâmetros, `value` e `fee`.\n\n2. Dentro da função, crie uma variável `gbpValue`. Chame `usdToGbp` com `value` como argumento. Subtraia `fee` do valor retornado por `usdToGbp()`. Salve o resultado em `gbpValue`.\n\n3. Dentro da função, exiba o `gbpValue`.\n\n4. Chame `convert()` com `100` e `2.5` como argumentos.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const usdGbp = 1.5;\r\n\r\nfunction usdToGbp(dollars) {\r\n  return dollars / usdGbp;\r\n}",
                  "solvedContent": "const usdGbp = 1.5;\r\n\r\nfunction usdToGbp(dollars) {\r\n  return dollars / usdGbp;\r\n}\r\n\r\nfunction convert(value, fee) {\r\n  const gbpValue = usdToGbp(value) - fee;\r\n  console.log(gbpValue);\r\n}\r\nconvert(100, 2.5);"
                }
              ],
              "hints": []
            }
          }
        ]
      }
    ]
  }
}