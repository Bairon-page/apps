{
  "tutorial": {
    "id": 2667,
    "version": 7,
    "type": "guidedProject",
    "isNew": false,
    "codeLanguage": "python",
    "title": "Star Wars API - Parte 1",
    "descriptionContent": "Lance-se na galáxia com um projeto que chama a Star Wars API para recuperar personagens do vasto universo de Star Wars",
    "shortDescriptionContent": "",
    "showInTrack": true,
    "iconBanner": "tutorial-2667-icon-banner.svg",
    "chapters": [
      {
        "id": 14642,
        "title": "Capítulo #1",
        "type": "practiceLevel3",
        "lessons": [
          {
            "title": "Lesson #1",
            "id": 129499,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Bem-vindo ao projeto **Star Wars API**, onde usaremos uma API externa para obter dados de um servidor remoto e exibi-los.\n\n1. Para começar, importe a biblioteca `requests`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "",
                  "solvedContent": "import requests"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Lesson #2",
            "id": 129500,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Planejamos buscar dados de uma REST API. Esta API possui múltiplos endpoints. Vamos chamar o endpoint de pessoas primeiro.\n\n1. Crie uma variável chamada `option` e atribua a ela o valor `\"people\"`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "import requests",
                  "solvedContent": "import requests\n\noption = \"people\""
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Lesson #3",
            "id": 129501,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Vamos montar a url. Usaremos o endpoint `/people`. Mas queremos ser flexíveis para permitir trocá-lo a qualquer momento. É por isso que usamos uma f-string para montá-lo.\n\n1. Crie uma nova variável chamada `url` e atribua a ela a seguinte f-string `f\"https://swapi.mimo.dev/api/{option}/\"`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "import requests\n\noption = \"people\"",
                  "solvedContent": "import requests\n\noption = \"people\"\nurl = f\"https://swapi.mimo.dev/api/{option}/\""
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Lesson #4",
            "id": 129502,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Está na hora de enviar a solicitação para o endpoint da API.\n\n1. Adicione `requests.get(url)` e armazene o objeto de resposta retornado em uma variável chamada `response`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "import requests\n\noption = \"people\"\nurl = f\"https://swapi.mimo.dev/api/{option}/\"",
                  "solvedContent": "import requests\n\noption = \"people\"\nurl = f\"https://swapi.mimo.dev/api/{option}/\"\nresponse = requests.get(url)"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Lesson #5",
            "id": 129503,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Precisamos lidar adequadamente com erros HTTP que podem ocorrer quando nossa solicitação não for bem-sucedida. Para esse propósito, usaremos o método `raise_for_status`.\n\n1. Chame o método `raise_for_status` em `response` para gerar uma exceção se a solicitação HTTP retornar um código de status malsucedido.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "import requests\n\noption = \"people\"\nurl = f\"https://swapi.mimo.dev/api/{option}/\"\nresponse = requests.get(url)",
                  "solvedContent": "import requests\n\noption = \"people\"\nurl = f\"https://swapi.mimo.dev/api/{option}/\"\nresponse = requests.get(url)\nresponse.raise_for_status()"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Lesson #6",
            "id": 129504,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Agora que garantimos que nossa solicitação foi bem-sucedida, é hora de analisar a resposta JSON.\n\n1. Chame o método `.json()` em `response` e armazene seu valor de retorno em uma variável chamada `data`.\n2. Imprima uma mensagem indicando o número de entidades que foram buscadas com sucesso, contando o comprimento da lista salva na variável `data`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "import requests\n\noption = \"people\"\nurl = f\"https://swapi.mimo.dev/api/{option}/\"\nresponse = requests.get(url)\nresponse.raise_for_status()",
                  "solvedContent": "import requests\n\noption = \"people\"\nurl = f\"https://swapi.mimo.dev/api/{option}/\"\nresponse = requests.get(url)\nresponse.raise_for_status()\n\ndata = response.json()\nprint(f\"Successfully fetched {len(data)} entities\")"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Lesson #7",
            "id": 129505,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Finalmente, vamos adicionar um bloco try-except para lidar com quaisquer erros HTTP que possam ter ocorrido durante nossa requisição.\n\n1. Mova o código de requisição e manipulação de resposta HTTP para dentro de um bloco `try`.\n   - Mantenha a declaração de importação, as variáveis `option` e `url` do lado de fora.\n   - O restante deve ir dentro do bloco `try`.\n2. Dentro do bloco `except`, capture `requests.HTTPError` como `e` e imprima uma mensagem de erro informando sobre o erro `e`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "import requests\n\noption = \"people\"\nurl = f\"https://swapi.mimo.dev/api/{option}/\"\nresponse = requests.get(url)\nresponse.raise_for_status()\n\ndata = response.json()\nprint(f\"Successfully fetched {len(data)} entities\")",
                  "solvedContent": "import requests\n\noption = \"people\"\nurl = f\"https://swapi.mimo.dev/api/{option}/\"\ntry:\n  response = requests.get(url)\n  response.raise_for_status()\n\n  data = response.json()\n  print(f\"Successfully fetched {len(data)} entities\")\nexcept requests.HTTPError as e:\n  print(f\"Error fetching data: {e}\")"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Lesson #9",
            "id": 129507,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Temos nossos dados buscados. Agora, vamos adicionar código para exibir esses dados de forma agradável.\n\n1. Após o bloco try-except, adicione uma declaração `if` que verifica se `data` tem valores associados a ele.\n   - No bloco if, itere sobre a lista `data`.\n   - Os elementos de `data` são dicionários. Para cada um, imprima o valor da chave `name`.\n2. Adicione uma declaração `else` para imprimir `Unable to download data` se `data` estiver vazio.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "import requests\n\noption = \"people\"\nurl = f\"https://swapi.mimo.dev/api/{option}/\"\ntry:\n  response = requests.get(url)\n  response.raise_for_status()\n\n  data = response.json()\n  print(f\"Successfully fetched {len(data)} entities\")\nexcept requests.HTTPError as e:\n  print(f\"Error fetching data: {e}\")",
                  "solvedContent": "import requests\n\noption = \"people\"\nurl = f\"https://swapi.mimo.dev/api/{option}/\"\ntry:\n  response = requests.get(url)\n  response.raise_for_status()\n\n  data = response.json()\n  print(f\"Successfully fetched {len(data)} entities\")\nexcept requests.HTTPError as e:\n  print(f\"Error fetching data: {e}\")\n\nif data:\n  for entity in data:\n    print(entity[\"name\"])\nelse:\n  print(\"Unable to download data\")"
                }
              ],
              "hints": []
            }
          }
        ]
      }
    ]
  }
}