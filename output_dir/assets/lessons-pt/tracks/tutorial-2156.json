{
  "tutorial": {
    "id": 2156,
    "version": 5,
    "type": "guidedProjectOptional",
    "isNew": false,
    "codeLanguage": "javascript",
    "title": "Dia aleatório no trabalho",
    "descriptionContent": "Uma analogia de Promises em JavaScript usando um dia aleatório no trabalho",
    "shortDescriptionContent": "",
    "showInTrack": true,
    "iconBanner": "tutorial-2156-icon-banner.svg",
    "chapters": [
      {
        "id": 13482,
        "title": "Dia aleatório no trabalho",
        "type": "practiceLevel3",
        "lessons": [
          {
            "title": "Order from Boss I",
            "id": 121197,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Todos os dias somos solicitados a completar algumas tarefas no trabalho. Vamos criar um programa que mostre um dia aleatório no trabalho. Vamos perceber que promises são muito relevantes para o nosso dia a dia ao final do projeto!\n\nComo trabalhadores, geralmente recebemos ordens de nossos chefes. Vamos criar uma função para imitar a ação de ordens vindas de nossos chefes.\n\n1. Escreva uma função `orderFromBoss()` que retorne uma `Promise`.\n2. Use uma função com `resolve` e `reject` como os parâmetros da `Promise`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "",
                  "solvedContent": "function orderFromBoss() {\r\n  return new Promise(function(resolve, reject) {});\r\n}"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Order from Boss II",
            "id": 121207,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Ordens dos chefes devem conter algumas instruções. Caso contrário, não saberíamos o que eles querem que façamos!\n\n1. Dentro da função promise, crie uma variável `isCodeDone` e defina o valor como `false`.\n2. Imprima ```Finish the code, it's an order!``` usando `console.log()`.\n3. Defina `isCodeDone` como o parâmetro para `resolve()`.\n\nNormalmente, não podemos rejeitar nossos chefes, então vamos deixar `reject` sem uso.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "function orderFromBoss() {\r\n  return new Promise(function(resolve, reject) {});\r\n}",
                  "solvedContent": "function orderFromBoss() {\r\n  return new Promise(function(resolve, reject) {\r\n    let isCodeDone = false;\r\n    console.log(\"Finish the code, it's an order!\");\r\n    resolve(isCodeDone);\r\n  });\r\n}"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Coding I",
            "id": 121198,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Em seguida, vamos criar uma função para você, o programador!\n\n1. Escreva uma função `coding()` que receba `isCodeDone` como parâmetro e retorne uma `Promise`.\n2. Use uma função com os parâmetros `resolve` e `reject` como o parâmetro da `Promise`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "function orderFromBoss() {\r\n  return new Promise(function(resolve, reject) {\r\n    let isCodeDone = false;\r\n    console.log(\"Finish the code, it's an order!\");\r\n    resolve(isCodeDone);\r\n  });\r\n}",
                  "solvedContent": "function orderFromBoss() {\r\n  return new Promise(function(resolve, reject) {\r\n    let isCodeDone = false;\r\n    console.log(\"Finish the code, it's an order!\");\r\n    resolve(isCodeDone);\r\n  });\r\n}\r\n\r\nfunction coding(isCodeDone) {\r\n  return new Promise(function(resolve, reject) {});\r\n}"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Coding II",
            "id": 121208,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Os programadores só precisam codificar quando têm uma tarefa para trabalhar. Vamos modificar a função `coding()` para refletir isso.\n\n1. Dentro da função de promessa `coding()`, verifique se `isCodeDone` é `false`.\n2. Se `isCodeDone` for `false`, imprima `Working...` usando `console.log()`.\n3. Em seguida, defina `isCodeDone` como `true` e defina `isCodeDone` como o parâmetro para `resolve()`.\n4. Se `isCodeDone` for verdadeiro, defina ```\"No instructions from boss yet.\"``` como o parâmetro para `reject()`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "function orderFromBoss() {\r\n  return new Promise(function(resolve, reject) {\r\n    let isCodeDone = false;\r\n    console.log(\"Finish the code, it's an order!\");\r\n    resolve(isCodeDone);\r\n  });\r\n}\r\n\r\nfunction coding(isCodeDone) {\r\n  return new Promise(function(resolve, reject) {});\r\n}",
                  "solvedContent": "function orderFromBoss() {\r\n  return new Promise(function(resolve, reject) {\r\n    let isCodeDone = false;\r\n    console.log(\"Finish the code, it's an order!\");\r\n    resolve(isCodeDone);\r\n  });\r\n}\r\n\r\nfunction coding(isCodeDone) {\r\n  return new Promise(function(resolve, reject) {\r\n    if (!isCodeDone) {\r\n      console.log(\"Working...\");\r\n      isCodeDone = true;\r\n      resolve(isCodeDone);\r\n    } else {\r\n      reject(\"No instructions from boss yet.\");\r\n    }\r\n  });\r\n}"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Performance Review I",
            "id": 121199,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Quando terminamos nosso trabalho, nossos chefes querem revisar nosso desempenho.\n\n1. Escreva uma função `performanceReview()` que recebe `isCodeDone` como parâmetro e retorna uma `Promise`.\n2. Use uma função com os parâmetros `resolve` e `reject` como parâmetro da `Promise`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "function orderFromBoss() {\r\n  return new Promise(function(resolve, reject) {\r\n    let isCodeDone = false;\r\n    console.log(\"Finish the code, it's an order!\");\r\n    resolve(isCodeDone);\r\n  });\r\n}\r\n\r\nfunction coding(isCodeDone) {\r\n  return new Promise(function(resolve, reject) {\r\n    if (!isCodeDone) {\r\n      console.log(\"Working...\");\r\n      isCodeDone = true;\r\n      resolve(isCodeDone);\r\n    } else {\r\n      reject(\"No instructions from boss yet.\");\r\n    }\r\n  });\r\n}",
                  "solvedContent": "function orderFromBoss() {\r\n  return new Promise(function(resolve, reject) {\r\n    let isCodeDone = false;\r\n    console.log(\"Finish the code, it's an order!\");\r\n    resolve(isCodeDone);\r\n  });\r\n}\r\n\r\nfunction coding(isCodeDone) {\r\n  return new Promise(function(resolve, reject) {\r\n    if (!isCodeDone) {\r\n      console.log(\"Working...\");\r\n      isCodeDone = true;\r\n      resolve(isCodeDone);\r\n    } else {\r\n      reject(\"No instructions from boss yet.\");\r\n    }\r\n  });\r\n}\r\n\r\nfunction performanceReview(isCodeDone) {\r\n  return new Promise(function(resolve, reject) {});\r\n}"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Performance Review II",
            "id": 121209,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Nossos chefes revisaram nossas performances, mas não podemos melhorar a menos que a revisão seja compartilhada conosco. Vamos modificar `performanceReview()` para fazer isso.\n\n1. Dentro da função promise `performanceReview()`, verifique se `isCodeDone` é `true`.\n2. Se `isCodeDone` for `true`, defina `\"You kept your promise and finished the code. You're getting promoted!\"` como o parâmetro para `resolve()`.\n3. Se `isCodeDone` for `false`, defina `\"You broke your promise, how can I trust you with bigger responsibilities?\"` como o parâmetro para `reject()`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "function orderFromBoss() {\r\n  return new Promise(function(resolve, reject) {\r\n    let isCodeDone = false;\r\n    console.log(\"Finish the code, it's an order!\");\r\n    resolve(isCodeDone);\r\n  });\r\n}\r\n\r\nfunction coding(isCodeDone) {\r\n  return new Promise(function(resolve, reject) {\r\n    if (!isCodeDone) {\r\n      console.log(\"Working...\");\r\n      isCodeDone = true;\r\n      resolve(isCodeDone);\r\n    } else {\r\n      reject(\"No instructions from boss yet.\");\r\n    }\r\n  });\r\n}\r\n\r\nfunction performanceReview(isCodeDone) {\r\n  return new Promise(function(resolve, reject) {});\r\n}",
                  "solvedContent": "function orderFromBoss() {\r\n  return new Promise(function(resolve, reject) {\r\n    let isCodeDone = false;\r\n    console.log(\"Finish the code, it's an order!\");\r\n    resolve(isCodeDone);\r\n  });\r\n}\r\n\r\nfunction coding(isCodeDone) {\r\n  return new Promise(function(resolve, reject) {\r\n    if (!isCodeDone) {\r\n      console.log(\"Working...\");\r\n      isCodeDone = true;\r\n      resolve(isCodeDone);\r\n    } else {\r\n      reject(\"No instructions from boss yet.\");\r\n    }\r\n  });\r\n}\r\n\r\nfunction performanceReview(isCodeDone) {\r\n  return new Promise(function(resolve, reject) {\r\n    if (isCodeDone) {\r\n      resolve(\r\n        \"You kept your promise and finished the code. You're getting promoted!\"\r\n        );\r\n    } else {\r\n      reject(\r\n        \"You broke your promise, how can I trust you with bigger responsibilities?\"\r\n        );\r\n    }\r\n  });\r\n}"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Random Day at Work I",
            "id": 121200,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Agora que todos os cenários já estão implementados, vamos juntá-los para formar um dia de trabalho. Como as coisas nem sempre acontecem uma após a outra na vida real, devemos tornar a função assíncrona também.\n\n1. Escreva uma função assíncrona `randomDayAtWork()`.\n2. Chame `orderFromBoss()` e armazene em uma variável `instruction`.\n3. Chame `coding()` usando `instruction` como parâmetro e armazene em uma variável `work`.\n4. Chame `performanceReview()` usando `work` como parâmetro e armazene em uma variável `review`.\n5. Imprima o valor de `review` usando `console.log()`",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "function orderFromBoss() {\r\n  return new Promise(function(resolve, reject) {\r\n    let isCodeDone = false;\r\n    console.log(\"Finish the code, it's an order!\");\r\n    resolve(isCodeDone);\r\n  });\r\n}\r\n\r\nfunction coding(isCodeDone) {\r\n  return new Promise(function(resolve, reject) {\r\n    if (!isCodeDone) {\r\n      console.log(\"Working...\");\r\n      isCodeDone = true;\r\n      resolve(isCodeDone);\r\n    } else {\r\n      reject(\"No instructions from boss yet.\");\r\n    }\r\n  });\r\n}\r\n\r\nfunction performanceReview(isCodeDone) {\r\n  return new Promise(function(resolve, reject) {\r\n    if (isCodeDone) {\r\n      resolve(\r\n        \"You kept your promise and finished the code. You're getting promoted!\"\r\n        );\r\n    } else {\r\n      reject(\r\n        \"You broke your promise, how can I trust you with bigger responsibilities?\"\r\n        );\r\n    }\r\n  });\r\n}",
                  "solvedContent": "function orderFromBoss() {\r\n  return new Promise(function(resolve, reject) {\r\n    let isCodeDone = false;\r\n    console.log(\"Finish the code, it's an order!\");\r\n    resolve(isCodeDone);\r\n  });\r\n}\r\n\r\nfunction coding(isCodeDone) {\r\n  return new Promise(function(resolve, reject) {\r\n    if (!isCodeDone) {\r\n      console.log(\"Working...\");\r\n      isCodeDone = true;\r\n      resolve(isCodeDone);\r\n    } else {\r\n      reject(\"No instructions from boss yet.\");\r\n    }\r\n  });\r\n}\r\n\r\nfunction performanceReview(isCodeDone) {\r\n  return new Promise(function(resolve, reject) {\r\n    if (isCodeDone) {\r\n      resolve(\r\n        \"You kept your promise and finished the code. You're getting promoted!\"\r\n        );\r\n    } else {\r\n      reject(\r\n        \"You broke your promise, how can I trust you with bigger responsibilities?\"\r\n        );\r\n    }\r\n  });\r\n}\r\nasync function randomDayAtWork() {\r\n  const instruction = orderFromBoss();\r\n  const work = coding(instruction);\r\n  const review = performanceReview(work);\r\n  console.log(review);\r\n}"
                }
              ],
              "hints": [
                {
                  "title": "Hint",
                  "content": "You can make your functions asynchronous by adding the `async` keyword before defining the function. The syntax is:\n```\nasync function myAsyncFunc(){\n\n//code here\n\n}\n```"
                }
              ]
            }
          },
          {
            "title": "Random Day at Work II",
            "id": 121210,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Como você sabe, às vezes o trabalho não está pronto para nós e precisamos esperar. Por exemplo, devemos esperar a ordem do nosso chefe chegar antes de começarmos a trabalhar em algo!\n\n1. Adicione a palavra-chave `await` às chamadas de função na função `randomDayAtWork()` para garantir que elas serão chamadas apenas após a execução da anterior ter sido concluída.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "function orderFromBoss() {\r\n  return new Promise(function(resolve, reject) {\r\n    let isCodeDone = false;\r\n    console.log(\"Finish the code, it's an order!\");\r\n    resolve(isCodeDone);\r\n  });\r\n}\r\n\r\nfunction coding(isCodeDone) {\r\n  return new Promise(function(resolve, reject) {\r\n    if (!isCodeDone) {\r\n      console.log(\"Working...\");\r\n      isCodeDone = true;\r\n      resolve(isCodeDone);\r\n    } else {\r\n      reject(\"No instructions from boss yet.\");\r\n    }\r\n  });\r\n}\r\n\r\nfunction performanceReview(isCodeDone) {\r\n  return new Promise(function(resolve, reject) {\r\n    if (isCodeDone) {\r\n      resolve(\r\n        \"You kept your promise and finished the code. You're getting promoted!\"\r\n        );\r\n    } else {\r\n      reject(\r\n        \"You broke your promise, how can I trust you with bigger responsibilities?\"\r\n        );\r\n    }\r\n  });\r\n}\r\nasync function randomDayAtWork() {\r\n  const instruction = orderFromBoss();\r\n  const work = coding(instruction);\r\n  const review = performanceReview(work);\r\n  console.log(review);\r\n}",
                  "solvedContent": "function orderFromBoss() {\r\n  return new Promise(function(resolve, reject) {\r\n    let isCodeDone = false;\r\n    console.log(\"Finish the code, it's an order!\");\r\n    resolve(isCodeDone);\r\n  });\r\n}\r\n\r\nfunction coding(isCodeDone) {\r\n  return new Promise(function(resolve, reject) {\r\n    if (!isCodeDone) {\r\n      console.log(\"Working...\");\r\n      isCodeDone = true;\r\n      resolve(isCodeDone);\r\n    } else {\r\n      reject(\"No instructions from boss yet.\");\r\n    }\r\n  });\r\n}\r\n\r\nfunction performanceReview(isCodeDone) {\r\n  return new Promise(function(resolve, reject) {\r\n    if (isCodeDone) {\r\n      resolve(\r\n        \"You kept your promise and finished the code. You're getting promoted!\"\r\n        );\r\n    } else {\r\n      reject(\r\n        \"You broke your promise, how can I trust you with bigger responsibilities?\"\r\n        );\r\n    }\r\n  });\r\n}\r\nasync function randomDayAtWork() {\r\n  const instruction = await orderFromBoss();\r\n  const work = await coding(instruction);\r\n  const review = await performanceReview(work);\r\n  console.log(review);\r\n}"
                }
              ],
              "hints": [
                {
                  "title": "Hint",
                  "content": "`await` should be before the function call.\n\n```\nawait myFunc();\n```"
                }
              ]
            }
          },
          {
            "title": "Random Day at Work III",
            "id": 121201,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Ótimo! O último passo é verificar se as promises foram concluídas. Promises nem sempre são cumpridas, então devemos **tentar** executar as funções que escrevemos anteriormente e **capturar** erros que podemos encontrar ao tentar executar o código.\n\n1. Use `try` para rodar o código dentro de `randomDayAtWork()`.\n2. Após o bloco `try` em `randomDayAtWork()`, codifique um `catch` com `error` como parâmetro.\n3. No bloco `catch`, imprima o `error` usando `console.log`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "function orderFromBoss() {\r\n  return new Promise(function(resolve, reject) {\r\n    let isCodeDone = false;\r\n    console.log(\"Finish the code, it's an order!\");\r\n    resolve(isCodeDone);\r\n  });\r\n}\r\n\r\nfunction coding(isCodeDone) {\r\n  return new Promise(function(resolve, reject) {\r\n    if (!isCodeDone) {\r\n      console.log(\"Working...\");\r\n      isCodeDone = true;\r\n      resolve(isCodeDone);\r\n    } else {\r\n      reject(\"No instructions from boss yet.\");\r\n    }\r\n  });\r\n}\r\n\r\nfunction performanceReview(isCodeDone) {\r\n  return new Promise(function(resolve, reject) {\r\n    if (isCodeDone) {\r\n      resolve(\r\n        \"You kept your promise and finished the code. You're getting promoted!\"\r\n        );\r\n    } else {\r\n      reject(\r\n        \"You broke your promise, how can I trust you with bigger responsibilities?\"\r\n        );\r\n    }\r\n  });\r\n}\r\nasync function randomDayAtWork() {\r\n  const instruction = await orderFromBoss();\r\n  const work = await coding(instruction);\r\n  const review = await performanceReview(work);\r\n  console.log(review);\r\n}",
                  "solvedContent": "function orderFromBoss() {\r\n  return new Promise(function(resolve, reject) {\r\n    let isCodeDone = false;\r\n    console.log(\"Finish the code, it's an order!\");\r\n    resolve(isCodeDone);\r\n  });\r\n}\r\n\r\nfunction coding(isCodeDone) {\r\n  return new Promise(function(resolve, reject) {\r\n    if (!isCodeDone) {\r\n      console.log(\"Working...\");\r\n      isCodeDone = true;\r\n      resolve(isCodeDone);\r\n    } else {\r\n      reject(\"No instructions from boss yet.\");\r\n    }\r\n  });\r\n}\r\n\r\nfunction performanceReview(isCodeDone) {\r\n  return new Promise(function(resolve, reject) {\r\n    if (isCodeDone) {\r\n      resolve(\r\n        \"You kept your promise and finished the code. You're getting promoted!\"\r\n        );\r\n    } else {\r\n      reject(\r\n        \"You broke your promise, how can I trust you with bigger responsibilities?\"\r\n        );\r\n    }\r\n  });\r\n}\r\nasync function randomDayAtWork() {\r\n  try {\r\n    const instruction = await orderFromBoss();\r\n    const work = await coding(instruction);\r\n    const review = await performanceReview(work);\r\n    console.log(review);\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n}"
                }
              ],
              "hints": [
                {
                  "title": "Hint",
                  "content": "The syntax for `try-catch` is as below:\n\n```\ntry {\n\n// code to try\n\n} catch(error) {\n\n//code to run when an error happens\n\n}\n```"
                }
              ]
            }
          },
          {
            "title": "Execute randomDayAtWork()!",
            "id": 121202,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Todas as nossas funções estão prontas agora, mas elas não vão rodar a menos que façamos algo a respeito! Vamos chamar a função que inicia um novo dia aleatório no trabalho.\n\n1. No final do código, chame `randomDayAtWork()`",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "function orderFromBoss() {\r\n  return new Promise(function(resolve, reject) {\r\n    let isCodeDone = false;\r\n    console.log(\"Finish the code, it's an order!\");\r\n    resolve(isCodeDone);\r\n  });\r\n}\r\n\r\nfunction coding(isCodeDone) {\r\n  return new Promise(function(resolve, reject) {\r\n    if (!isCodeDone) {\r\n      console.log(\"Working...\");\r\n      isCodeDone = true;\r\n      resolve(isCodeDone);\r\n    } else {\r\n      reject(\"No instructions from boss yet.\");\r\n    }\r\n  });\r\n}\r\n\r\nfunction performanceReview(isCodeDone) {\r\n  return new Promise(function(resolve, reject) {\r\n    if (isCodeDone) {\r\n      resolve(\r\n        \"You kept your promise and finished the code. You're getting promoted!\"\r\n        );\r\n    } else {\r\n      reject(\r\n        \"You broke your promise, how can I trust you with bigger responsibilities?\"\r\n        );\r\n    }\r\n  });\r\n}\r\nasync function randomDayAtWork() {\r\n  try {\r\n    const instruction = await orderFromBoss();\r\n    const work = await coding(instruction);\r\n    const review = await performanceReview(work);\r\n    console.log(review);\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n}",
                  "solvedContent": "function orderFromBoss() {\r\n  return new Promise(function(resolve, reject) {\r\n    let isCodeDone = false;\r\n    console.log(\"Finish the code, it's an order!\");\r\n    resolve(isCodeDone);\r\n  });\r\n}\r\n\r\nfunction coding(isCodeDone) {\r\n  return new Promise(function(resolve, reject) {\r\n    if (!isCodeDone) {\r\n      console.log(\"Working...\");\r\n      isCodeDone = true;\r\n      resolve(isCodeDone);\r\n    } else {\r\n      reject(\"No instructions from boss yet.\");\r\n    }\r\n  });\r\n}\r\n\r\nfunction performanceReview(isCodeDone) {\r\n  return new Promise(function(resolve, reject) {\r\n    if (isCodeDone) {\r\n      resolve(\r\n        \"You kept your promise and finished the code. You're getting promoted!\"\r\n        );\r\n    } else {\r\n      reject(\r\n        \"You broke your promise, how can I trust you with bigger responsibilities?\"\r\n        );\r\n    }\r\n  });\r\n}\r\nasync function randomDayAtWork() {\r\n  try {\r\n    const instruction = await orderFromBoss();\r\n    const work = await coding(instruction);\r\n    const review = await performanceReview(work);\r\n    console.log(review);\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n}\r\nrandomDayAtWork();"
                }
              ],
              "hints": []
            }
          }
        ]
      }
    ]
  }
}