{
  "tutorial": {
    "id": 3141,
    "version": 3,
    "type": "guidedProject",
    "isNew": false,
    "codeLanguage": "jsx",
    "title": "Grade de Pixels - Parte 4",
    "descriptionContent": "Na parte final, você vai estender o front-end para permitir que os usuários pintem na tela digital e exibam o desenho atualizado.",
    "shortDescriptionContent": "",
    "showInTrack": true,
    "iconBanner": "tutorial-3141-icon-banner.svg",
    "chapters": [
      {
        "id": 15460,
        "title": "Capítulo #1",
        "type": "practiceLevel3",
        "lessons": [
          {
            "title": "Lesson #1",
            "id": 135926,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Bem-vindo de volta ao projeto **Pixel Grid**. Na parte final, vamos estender o front-end para permitir que os usuários pintem na tela digital.\n\n1. No arquivo `Toolbar.jsx`, crie um novo componente React chamado `Toolbar`. Certifique-se de importar `React` e exportar o componente também.\n2. Certifique-se de que o componente receba `selectedColor` e `setSelectedColor` como props.\n3. Dentro do componente, defina um array chamado `colors`, com 8 cores CSS: `\"black\"`, `\"red\"`, `\"green\"`, `\"blue\"`, `\"yellow\"`, `\"purple\"`, `\"orange\"` e `\"pink\"`.\n4. Retorne um elemento `div` com o `className` definido como `\"toolbar\"`.\n5. Dentro do `div`, faça um loop sobre o array `colors`.\n   - Exiba um `button` para cada item no array.\n   - Defina uma chave única para cada botão renderizado.\n   - Use a propriedade `style` para definir a cor de fundo do elemento, que deve ser uma cor CSS.\n   - Certifique-se de que, quando um botão for clicado, a função passada `setSelectedColor` seja chamada com a cor do botão como argumento.",
              "preselectedFileIndex": 6,
              "hasVisualOutput": true,
              "files": [
                {
                  "name": "index.html",
                  "codeLanguage": "html",
                  "content": "<!doctype html>\n<html>\n  <head>\n    <script type=\"module\" src=\"./index.js\"></script>\n    <link rel=\"stylesheet\" href=\"./index.css\" />\n    <title>Pixel Grid</title>\n  </head>\n  <body>\n    <div id=\"root\">loading</div>\n  </body>\n</html>",
                  "solvedContent": null
                },
                {
                  "name": "index.jsx",
                  "codeLanguage": "jsx",
                  "content": "import React from \"react\";\nimport { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nconst root = createRoot(rootElement);\nroot.render(<App />);",
                  "solvedContent": null
                },
                {
                  "name": "App.jsx",
                  "codeLanguage": "jsx",
                  "content": "import React, { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport PixelGrid from \"./PixelGrid\";\n\nconst URL = process.env.BACKEND_URL;\n\nconst App = () => {\n  const [grid, setGrid] = useState([]);\n\n  useEffect(() => {\n    fetch(`${URL}/grid`)\n      .then((response) => response.json())\n      .then((data) => setGrid(data.grid))\n      .catch((error) => console.error(\"Error fetching grid data:\", error));\n  }, []);\n\n  return (\n    <div className=\"content-wrapper\">\n      <h1>Pixel Grid</h1>\n      <PixelGrid grid={grid} />\n    </div>\n  );\n};\n\nexport default App;",
                  "solvedContent": null
                },
                {
                  "name": "App.css",
                  "codeLanguage": "css",
                  "content": "html,\nbody,\n.content-wrapper {\n  height: 100%;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n}",
                  "solvedContent": null
                },
                {
                  "name": "PixelGrid.jsx",
                  "codeLanguage": "jsx",
                  "content": "import React from \"react\";\nimport \"./PixelGrid.css\";\n\nconst PixelGrid = ({ grid }) => {\n  return (\n    <div className=\"grid\">\n      {grid.map((cell) => (\n        <div\n          key={`${cell.x}-${cell.y}`}\n          className=\"gridItem\"\n          style={{\n            backgroundColor: cell.color,\n            gridColumnStart: cell.x + 1,\n            gridRowStart: cell.y + 1,\n          }}\n        ></div>\n      ))}\n    </div>\n  );\n};\n\nexport default PixelGrid;",
                  "solvedContent": null
                },
                {
                  "name": "PixelGrid.css",
                  "codeLanguage": "css",
                  "content": ".grid {\n  display: grid;\n  grid-template-columns: repeat(20, 20px);\n  grid-template-rows: repeat(20, 20px);\n}\n\n.gridItem {\n  width: 20px;\n  height: 20px;\n  border: 1px solid lightgray;\n}\n\n@media (max-width: 440px) {\n  .grid {\n    grid-template-columns: repeat(20, 4vw);\n    grid-template-rows: repeat(20, 4vw);\n  }\n\n  .gridItem {\n    width: 4vw;\n    height: 4vw;\n  }\n}\n",
                  "solvedContent": null
                },
                {
                  "name": "Toolbar.jsx",
                  "codeLanguage": "jsx",
                  "content": "",
                  "solvedContent": "import React from \"react\";\n\nconst Toolbar = ({ selectedColor, setSelectedColor }) => {\n  const colors = [\n    \"black\",\n    \"red\",\n    \"green\",\n    \"blue\",\n    \"yellow\",\n    \"purple\",\n    \"orange\",\n    \"pink\",\n  ];\n  return (\n    <div className=\"toolbar\">\n      {colors.map((color) => (\n        <button\n          key={color}\n          style={{ backgroundColor: color }}\n          onClick={() => setSelectedColor(color)}\n        ></button>\n      ))}\n    </div>\n  );\n};\n\nexport default Toolbar;"
                },
                {
                  "name": "Toolbar.css",
                  "codeLanguage": "css",
                  "content": "",
                  "solvedContent": null
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Lesson #2",
            "id": 135927,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "É hora de integrar o novo componente Toolbar.\n\n1. Importe o componente `Toolbar` no componente `App`.\n2. Defina um novo hook `useState` para armazenar `selectedColor` no componente `App`. Defina seu valor padrão como `\"black\"`.\n3. Renderize o componente `Toolbar` abaixo do componente `PixelGrid`.\n4. Passe `selectedColor` e `setSelectedColor` como props para o componente `Toolbar`.",
              "preselectedFileIndex": 2,
              "hasVisualOutput": true,
              "files": [
                {
                  "name": "index.html",
                  "codeLanguage": "html",
                  "content": "<!doctype html>\n<html>\n  <head>\n    <script type=\"module\" src=\"./index.js\"></script>\n    <link rel=\"stylesheet\" href=\"./index.css\" />\n    <title>Pixel Grid</title>\n  </head>\n  <body>\n    <div id=\"root\">loading</div>\n  </body>\n</html>",
                  "solvedContent": null
                },
                {
                  "name": "index.jsx",
                  "codeLanguage": "jsx",
                  "content": "import React from \"react\";\nimport { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nconst root = createRoot(rootElement);\nroot.render(<App />);",
                  "solvedContent": null
                },
                {
                  "name": "App.jsx",
                  "codeLanguage": "jsx",
                  "content": "import React, { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport PixelGrid from \"./PixelGrid\";\n\nconst URL = process.env.BACKEND_URL;\n\nconst App = () => {\n  const [grid, setGrid] = useState([]);\n\n  useEffect(() => {\n    fetch(`${URL}/grid`)\n      .then((response) => response.json())\n      .then((data) => setGrid(data.grid))\n      .catch((error) => console.error(\"Error fetching grid data:\", error));\n  }, []);\n\n  return (\n    <div className=\"content-wrapper\">\n      <h1>Pixel Grid</h1>\n      <PixelGrid grid={grid} />\n    </div>\n  );\n};\n\nexport default App;",
                  "solvedContent": "import React, { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport PixelGrid from \"./PixelGrid\";\nimport Toolbar from \"./Toolbar\";\n\nconst URL = process.env.BACKEND_URL;\n\nconst App = () => {\n  const [selectedColor, setSelectedColor] = useState(\"black\");\n  const [grid, setGrid] = useState([]);\n\n  useEffect(() => {\n    fetch(`${URL}/grid`)\n      .then((response) => response.json())\n      .then((data) => setGrid(data.grid))\n      .catch((error) => console.error(\"Error fetching grid data:\", error));\n  }, []);\n\n  return (\n    <div className=\"content-wrapper\">\n      <h1>Pixel Grid</h1>\n      <PixelGrid grid={grid} />\n      <Toolbar\n        selectedColor={selectedColor}\n        setSelectedColor={setSelectedColor}\n      />\n    </div>\n  );\n};\n\nexport default App;"
                },
                {
                  "name": "App.css",
                  "codeLanguage": "css",
                  "content": "html,\nbody,\n.content-wrapper {\n  height: 100%;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n}",
                  "solvedContent": null
                },
                {
                  "name": "PixelGrid.jsx",
                  "codeLanguage": "jsx",
                  "content": "import React from \"react\";\nimport \"./PixelGrid.css\";\n\nconst PixelGrid = ({ grid }) => {\n  return (\n    <div className=\"grid\">\n      {grid.map((cell) => (\n        <div\n          key={`${cell.x}-${cell.y}`}\n          className=\"gridItem\"\n          style={{\n            backgroundColor: cell.color,\n            gridColumnStart: cell.x + 1,\n            gridRowStart: cell.y + 1,\n          }}\n        ></div>\n      ))}\n    </div>\n  );\n};\n\nexport default PixelGrid;",
                  "solvedContent": null
                },
                {
                  "name": "PixelGrid.css",
                  "codeLanguage": "css",
                  "content": ".grid {\n  display: grid;\n  grid-template-columns: repeat(20, 20px);\n  grid-template-rows: repeat(20, 20px);\n}\n\n.gridItem {\n  width: 20px;\n  height: 20px;\n  border: 1px solid lightgray;\n}\n\n@media (max-width: 440px) {\n  .grid {\n    grid-template-columns: repeat(20, 4vw);\n    grid-template-rows: repeat(20, 4vw);\n  }\n\n  .gridItem {\n    width: 4vw;\n    height: 4vw;\n  }\n}\n",
                  "solvedContent": null
                },
                {
                  "name": "Toolbar.jsx",
                  "codeLanguage": "jsx",
                  "content": "import React from \"react\";\n\nconst Toolbar = ({ selectedColor, setSelectedColor }) => {\n  const colors = [\n    \"black\",\n    \"red\",\n    \"green\",\n    \"blue\",\n    \"yellow\",\n    \"purple\",\n    \"orange\",\n    \"pink\",\n  ];\n  return (\n    <div className=\"toolbar\">\n      {colors.map((color) => (\n        <button\n          key={color}\n          className={selectedColor === color ? \"selected-color\" : \"\"}\n          style={{ backgroundColor: color }}\n          onClick={() => setSelectedColor(color)}\n        ></button>\n      ))}\n    </div>\n  );\n};\n\nexport default Toolbar;",
                  "solvedContent": null
                },
                {
                  "name": "Toolbar.css",
                  "codeLanguage": "css",
                  "content": "",
                  "solvedContent": null
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Lesson #2 - Copy",
            "id": 135933,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Vamos adicionar estilos para o componente `Toolbar` para deixá-lo mais bonito.\n\n1. Importe o arquivo `Toolbar.css` no arquivo `Toolbar.jsx`.\n2. No arquivo `Toolbar.css`, crie uma regra `.toolbar`:\n   - Defina `display` como `flex`.\n   - Defina `margin` como `40px auto`.\n   - Defina `padding` como `12px`.\n   - Defina `border` como `1px solid lightgray`.\n   - Defina `border-radius` como `32px`.\n   - Defina `gap` como `8px`.\n3. Crie uma regra `.toolbar > button`:\n   - Defina `width` como `40px`.\n   - Defina `height` como `40px`.\n   - Defina `border-radius` como `20px`.\n   - Defina `border` como `2px solid white`.\n   - Defina `cursor` como `pointer`.\n4. Crie uma regra `.selected-color`:\n   - Defina `outline` como `outline: 3px solid black;`.\n   - Defina `box-shadow` como `0 4px 8px rgba(0, 0, 0, 0.3)`.",
              "preselectedFileIndex": 6,
              "hasVisualOutput": true,
              "files": [
                {
                  "name": "index.html",
                  "codeLanguage": "html",
                  "content": "<!doctype html>\n<html>\n  <head>\n    <script type=\"module\" src=\"./index.js\"></script>\n    <link rel=\"stylesheet\" href=\"./index.css\" />\n    <title>Pixel Grid</title>\n  </head>\n  <body>\n    <div id=\"root\">loading</div>\n  </body>\n</html>",
                  "solvedContent": null
                },
                {
                  "name": "index.jsx",
                  "codeLanguage": "jsx",
                  "content": "import React from \"react\";\nimport { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nconst root = createRoot(rootElement);\nroot.render(<App />);",
                  "solvedContent": null
                },
                {
                  "name": "App.jsx",
                  "codeLanguage": "jsx",
                  "content": "import React, { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport PixelGrid from \"./PixelGrid\";\nimport Toolbar from \"./Toolbar\";\n\nconst URL = process.env.BACKEND_URL;\n\nconst App = () => {\n  const [selectedColor, setSelectedColor] = useState(\"black\");\n  const [grid, setGrid] = useState([]);\n\n  useEffect(() => {\n    fetch(`${URL}/grid`)\n      .then((response) => response.json())\n      .then((data) => setGrid(data.grid))\n      .catch((error) => console.error(\"Error fetching grid data:\", error));\n  }, []);\n\n  return (\n    <div className=\"content-wrapper\">\n      <h1>Pixel Grid</h1>\n      <PixelGrid grid={grid} />\n      <Toolbar\n        selectedColor={selectedColor}\n        setSelectedColor={setSelectedColor}\n      />\n    </div>\n  );\n};\n\nexport default App;",
                  "solvedContent": null
                },
                {
                  "name": "App.css",
                  "codeLanguage": "css",
                  "content": "html,\nbody,\n.content-wrapper {\n  height: 100%;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n}",
                  "solvedContent": null
                },
                {
                  "name": "PixelGrid.jsx",
                  "codeLanguage": "jsx",
                  "content": "import React from \"react\";\nimport \"./PixelGrid.css\";\n\nconst PixelGrid = ({ grid }) => {\n  return (\n    <div className=\"grid\">\n      {grid.map((cell) => (\n        <div\n          key={`${cell.x}-${cell.y}`}\n          className=\"gridItem\"\n          style={{\n            backgroundColor: cell.color,\n            gridColumnStart: cell.x + 1,\n            gridRowStart: cell.y + 1,\n          }}\n        ></div>\n      ))}\n    </div>\n  );\n};\n\nexport default PixelGrid;",
                  "solvedContent": null
                },
                {
                  "name": "PixelGrid.css",
                  "codeLanguage": "css",
                  "content": ".grid {\n  display: grid;\n  grid-template-columns: repeat(20, 20px);\n  grid-template-rows: repeat(20, 20px);\n}\n\n.gridItem {\n  width: 20px;\n  height: 20px;\n  border: 1px solid lightgray;\n}\n\n@media (max-width: 440px) {\n  .grid {\n    grid-template-columns: repeat(20, 4vw);\n    grid-template-rows: repeat(20, 4vw);\n  }\n\n  .gridItem {\n    width: 4vw;\n    height: 4vw;\n  }\n}\n",
                  "solvedContent": null
                },
                {
                  "name": "Toolbar.jsx",
                  "codeLanguage": "jsx",
                  "content": "import React from \"react\";\n\nconst Toolbar = ({ selectedColor, setSelectedColor }) => {\n  const colors = [\n    \"black\",\n    \"red\",\n    \"green\",\n    \"blue\",\n    \"yellow\",\n    \"purple\",\n    \"orange\",\n    \"pink\",\n  ];\n  return (\n    <div className=\"toolbar\">\n      {colors.map((color) => (\n        <button\n          key={color}\n          className={selectedColor === color ? \"selected-color\" : \"\"}\n          style={{ backgroundColor: color }}\n          onClick={() => setSelectedColor(color)}\n        ></button>\n      ))}\n    </div>\n  );\n};\n\nexport default Toolbar;",
                  "solvedContent": "import React from \"react\";\nimport \"./Toolbar.css\";\n\nconst Toolbar = ({ selectedColor, setSelectedColor }) => {\n  const colors = [\n    \"black\",\n    \"red\",\n    \"green\",\n    \"blue\",\n    \"yellow\",\n    \"purple\",\n    \"orange\",\n    \"pink\",\n  ];\n  return (\n    <div className=\"toolbar\">\n      {colors.map((color) => (\n        <button\n          key={color}\n          className={selectedColor === color ? \"selected-color\" : \"\"}\n          style={{ backgroundColor: color }}\n          onClick={() => setSelectedColor(color)}\n        ></button>\n      ))}\n    </div>\n  );\n};\n\nexport default Toolbar;"
                },
                {
                  "name": "Toolbar.css",
                  "codeLanguage": "css",
                  "content": "",
                  "solvedContent": ".toolbar {\n  display: flex;\n  margin: 40px auto;\n  padding: 12px;\n  border: 1px solid lightgray;\n  border-radius: 32px;\n  gap: 8px;\n}\n\n.toolbar > button {\n  width: 40px;\n  height: 40px;\n  border-radius: 20px;\n  border: 2px solid white;\n  cursor: pointer;\n}\n\n.selected-color {\n  outline: 3px solid black;\n  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.3);\n}"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Lesson #2 - Copy - Copy",
            "id": 135936,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Otimizamos a grade para dispositivos móveis, e devemos fazer o mesmo para a barra de ferramentas.\n\n1. No arquivo `Toolbar.css`, adicione uma media query para arquivos com largura máxima de 440px.\n2. Alvo a classe `.toolbar` dentro da media query:\n   - Defina `padding` para `2vw`.\n   - Defina `gap` para `1vw`.\n3. Crie uma regra `.toolbar > button`:\n   - Defina `width` para `10vw`.\n   - Defina `height` para `10vw`.",
              "preselectedFileIndex": 7,
              "hasVisualOutput": true,
              "files": [
                {
                  "name": "index.html",
                  "codeLanguage": "html",
                  "content": "<!doctype html>\n<html>\n  <head>\n    <script type=\"module\" src=\"./index.js\"></script>\n    <link rel=\"stylesheet\" href=\"./index.css\" />\n    <title>Pixel Grid</title>\n  </head>\n  <body>\n    <div id=\"root\">loading</div>\n  </body>\n</html>",
                  "solvedContent": null
                },
                {
                  "name": "index.jsx",
                  "codeLanguage": "jsx",
                  "content": "import React from \"react\";\nimport { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nconst root = createRoot(rootElement);\nroot.render(<App />);",
                  "solvedContent": null
                },
                {
                  "name": "App.jsx",
                  "codeLanguage": "jsx",
                  "content": "import React, { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport PixelGrid from \"./PixelGrid\";\nimport Toolbar from \"./Toolbar\";\n\nconst URL = process.env.BACKEND_URL;\n\nconst App = () => {\n  const [selectedColor, setSelectedColor] = useState(\"black\");\n  const [grid, setGrid] = useState([]);\n\n  useEffect(() => {\n    fetch(`${URL}/grid`)\n      .then((response) => response.json())\n      .then((data) => setGrid(data.grid))\n      .catch((error) => console.error(\"Error fetching grid data:\", error));\n  }, []);\n\n  return (\n    <div className=\"content-wrapper\">\n      <h1>Pixel Grid</h1>\n      <PixelGrid grid={grid} />\n      <Toolbar\n        selectedColor={selectedColor}\n        setSelectedColor={setSelectedColor}\n      />\n    </div>\n  );\n};\n\nexport default App;",
                  "solvedContent": null
                },
                {
                  "name": "App.css",
                  "codeLanguage": "css",
                  "content": "html,\nbody,\n.content-wrapper {\n  height: 100%;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n}",
                  "solvedContent": null
                },
                {
                  "name": "PixelGrid.jsx",
                  "codeLanguage": "jsx",
                  "content": "import React from \"react\";\nimport \"./PixelGrid.css\";\n\nconst PixelGrid = ({ grid }) => {\n  return (\n    <div className=\"grid\">\n      {grid.map((cell) => (\n        <div\n          key={`${cell.x}-${cell.y}`}\n          className=\"gridItem\"\n          style={{\n            backgroundColor: cell.color,\n            gridColumnStart: cell.x + 1,\n            gridRowStart: cell.y + 1,\n          }}\n        ></div>\n      ))}\n    </div>\n  );\n};\n\nexport default PixelGrid;",
                  "solvedContent": null
                },
                {
                  "name": "PixelGrid.css",
                  "codeLanguage": "css",
                  "content": ".grid {\n  display: grid;\n  grid-template-columns: repeat(20, 20px);\n  grid-template-rows: repeat(20, 20px);\n}\n\n.gridItem {\n  width: 20px;\n  height: 20px;\n  border: 1px solid lightgray;\n}\n\n@media (max-width: 440px) {\n  .grid {\n    grid-template-columns: repeat(20, 4vw);\n    grid-template-rows: repeat(20, 4vw);\n  }\n\n  .gridItem {\n    width: 4vw;\n    height: 4vw;\n  }\n}\n",
                  "solvedContent": null
                },
                {
                  "name": "Toolbar.jsx",
                  "codeLanguage": "jsx",
                  "content": "import React from \"react\";\nimport \"./Toolbar.css\";\n\nconst Toolbar = ({ selectedColor, setSelectedColor }) => {\n  const colors = [\n    \"black\",\n    \"red\",\n    \"green\",\n    \"blue\",\n    \"yellow\",\n    \"purple\",\n    \"orange\",\n    \"pink\",\n  ];\n  return (\n    <div className=\"toolbar\">\n      {colors.map((color) => (\n        <button\n          key={color}\n          className={selectedColor === color ? \"selected-color\" : \"\"}\n          style={{ backgroundColor: color }}\n          onClick={() => setSelectedColor(color)}\n        ></button>\n      ))}\n    </div>\n  );\n};\n\nexport default Toolbar;",
                  "solvedContent": null
                },
                {
                  "name": "Toolbar.css",
                  "codeLanguage": "css",
                  "content": ".toolbar {\n  display: flex;\n  margin: 40px auto;\n  padding: 12px;\n  border: 1px solid lightgray;\n  border-radius: 32px;\n  gap: 8px;\n}\n\n.toolbar > button {\n  width: 40px;\n  height: 40px;\n  border-radius: 20px;\n  border: 2px solid white;\n  cursor: pointer;\n}\n\n.selected-color {\n  outline: 3px solid black;\n  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.3);\n}\n",
                  "solvedContent": ".toolbar {\n  display: flex;\n  margin: 40px auto;\n  padding: 12px;\n  border: 1px solid lightgray;\n  border-radius: 32px;\n  gap: 8px;\n}\n\n.toolbar > button {\n  width: 40px;\n  height: 40px;\n  border-radius: 20px;\n  border: 2px solid white;\n  cursor: pointer;\n}\n\n.selected-color {\n  outline: 3px solid black;\n  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.3);\n}\n\n@media (max-width: 440px) {\n.toolbar {\n    padding: 2vw;\n    gap: 1vw;\n}\n\n  .toolbar > button {\n    width: 10vw;\n    height: 10vw;\n  }\n}"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Lesson #3",
            "id": 135928,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Adicionamos o recurso de seleção de cor. No entanto, ainda precisamos saber qual pixel deve ser atualizado. Vamos tornar possível interagir com cada item da grade e mudar sua cor.\n\n1. Adicione um evento `onClick` a cada item da grade. Quando clicado, chame a função `updateColor` com as coordenadas do item. Passe o valor x como o primeiro argumento e o valor y como o segundo argumento.\n2. A função `updateColor` deve ser passada via props.",
              "preselectedFileIndex": 4,
              "hasVisualOutput": true,
              "files": [
                {
                  "name": "index.html",
                  "codeLanguage": "html",
                  "content": "<!doctype html>\n<html>\n  <head>\n    <script type=\"module\" src=\"./index.js\"></script>\n    <link rel=\"stylesheet\" href=\"./index.css\" />\n    <title>Pixel Grid</title>\n  </head>\n  <body>\n    <div id=\"root\">loading</div>\n  </body>\n</html>",
                  "solvedContent": null
                },
                {
                  "name": "index.jsx",
                  "codeLanguage": "jsx",
                  "content": "import React from \"react\";\nimport { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nconst root = createRoot(rootElement);\nroot.render(<App />);",
                  "solvedContent": null
                },
                {
                  "name": "App.jsx",
                  "codeLanguage": "jsx",
                  "content": "import React, { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport PixelGrid from \"./PixelGrid\";\nimport Toolbar from \"./Toolbar\";\n\nconst URL = process.env.BACKEND_URL;\n\nconst App = () => {\n  const [selectedColor, setSelectedColor] = useState(\"black\");\n  const [grid, setGrid] = useState([]);\n\n  useEffect(() => {\n    fetch(`${URL}/grid`)\n      .then((response) => response.json())\n      .then((data) => setGrid(data.grid))\n      .catch((error) => console.error(\"Error fetching grid data:\", error));\n  }, []);\n\n  return (\n    <div className=\"content-wrapper\">\n      <h1>Pixel Grid</h1>\n      <PixelGrid grid={grid} />\n      <Toolbar\n        selectedColor={selectedColor}\n        setSelectedColor={setSelectedColor}\n      />\n    </div>\n  );\n};\n\nexport default App;",
                  "solvedContent": null
                },
                {
                  "name": "App.css",
                  "codeLanguage": "css",
                  "content": "html,\nbody,\n.content-wrapper {\n  height: 100%;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n}",
                  "solvedContent": null
                },
                {
                  "name": "PixelGrid.jsx",
                  "codeLanguage": "jsx",
                  "content": "import React from \"react\";\nimport \"./PixelGrid.css\";\n\nconst PixelGrid = ({ grid }) => {\n  return (\n    <div className=\"grid\">\n      {grid.map((cell) => (\n        <div\n          key={`${cell.x}-${cell.y}`}\n          className=\"gridItem\"\n          style={{\n            backgroundColor: cell.color,\n            gridColumnStart: cell.x + 1,\n            gridRowStart: cell.y + 1,\n          }}\n        ></div>\n      ))}\n    </div>\n  );\n};\n\nexport default PixelGrid;",
                  "solvedContent": "import React from \"react\";\nimport \"./PixelGrid.css\";\n\nconst PixelGrid = ({ grid, updateColor }) => {\n  return (\n    <div className=\"grid\">\n      {grid.map((cell) => (\n        <div\n          key={`${cell.x}-${cell.y}`}\n          className=\"gridItem\"\n          style={{\n            backgroundColor: cell.color,\n            gridColumnStart: cell.x + 1,\n            gridRowStart: cell.y + 1,\n          }}\n          onClick={() => updateColor(cell.x, cell.y)}\n        ></div>\n      ))}\n    </div>\n  );\n};\n\nexport default PixelGrid;"
                },
                {
                  "name": "PixelGrid.css",
                  "codeLanguage": "css",
                  "content": ".grid {\n  display: grid;\n  grid-template-columns: repeat(20, 20px);\n  grid-template-rows: repeat(20, 20px);\n}\n\n.gridItem {\n  width: 20px;\n  height: 20px;\n  border: 1px solid lightgray;\n}\n\n@media (max-width: 440px) {\n  .grid {\n    grid-template-columns: repeat(20, 4vw);\n    grid-template-rows: repeat(20, 4vw);\n  }\n\n  .gridItem {\n    width: 4vw;\n    height: 4vw;\n  }\n}\n",
                  "solvedContent": null
                },
                {
                  "name": "Toolbar.jsx",
                  "codeLanguage": "jsx",
                  "content": "import React from \"react\";\nimport \"./Toolbar.css\";\n\nconst Toolbar = ({ selectedColor, setSelectedColor }) => {\n  const colors = [\n    \"black\",\n    \"red\",\n    \"green\",\n    \"blue\",\n    \"yellow\",\n    \"purple\",\n    \"orange\",\n    \"pink\",\n  ];\n  return (\n    <div className=\"toolbar\">\n      {colors.map((color) => (\n        <button\n          key={color}\n          className={selectedColor === color ? \"selected-color\" : \"\"}\n          style={{ backgroundColor: color }}\n          onClick={() => setSelectedColor(color)}\n        ></button>\n      ))}\n    </div>\n  );\n};\n\nexport default Toolbar;",
                  "solvedContent": null
                },
                {
                  "name": "Toolbar.css",
                  "codeLanguage": "css",
                  "content": ".toolbar {\n  display: flex;\n  margin: 40px auto;\n  padding: 12px;\n  border: 1px solid lightgray;\n  border-radius: 32px;\n  gap: 8px;\n}\n\n.toolbar > button {\n  width: 40px;\n  height: 40px;\n  border-radius: 20px;\n  border: 2px solid white;\n  cursor: pointer;\n}\n\n.selected-color {\n  outline: 3px solid black;\n  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.3);\n}\n\n@media (max-width: 440px) {\n.toolbar {\n    padding: 2vw;\n    gap: 1vw;\n}\n\n  .toolbar > button {\n    width: 10vw;\n    height: 10vw;\n  }\n}",
                  "solvedContent": null
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Lesson #4",
            "id": 135929,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Uma vez que clicamos em um pixel, chamamos a função passada `updateColor`. Mas essa função ainda não existe. Hora de mudar isso.\n\n1. Adicione uma nova função `updateColor` ao componente `App` que aceita dois argumentos, `x` e `y`.\n2. Passe essa função para a propriedade `updateColor` do componente `PixelGrid`.\n3. Faça uma requisição `fetch` para atualizar a cor da grade chamando o endpoint `\"/setGridColor\"` do nosso backend.\n   - Defina o `method` como `\"POST\"`.\n   - Defina os `headers` como `{ \"Content-Type\": \"application/json\" }`.\n   - Defina o `body` como `JSON.stringify({ x, y, color: selectedColor })` onde `x` e `y` são os argumentos da função e `selectedColor` é a variável de estado.\n4. A resposta do endpoint `\"/setGridColor\"` será um JSON contendo a chave `grid`. Acesse o valor dessa chave e atualize a variável de estado `grid` com ele.\n5. Caso haja um erro, registre o erro no console.",
              "preselectedFileIndex": 2,
              "hasVisualOutput": true,
              "files": [
                {
                  "name": "index.html",
                  "codeLanguage": "html",
                  "content": "<!doctype html>\n<html>\n  <head>\n    <script type=\"module\" src=\"./index.js\"></script>\n    <link rel=\"stylesheet\" href=\"./index.css\" />\n    <title>Pixel Grid</title>\n  </head>\n  <body>\n    <div id=\"root\">loading</div>\n  </body>\n</html>",
                  "solvedContent": null
                },
                {
                  "name": "index.jsx",
                  "codeLanguage": "jsx",
                  "content": "import React from \"react\";\nimport { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nconst root = createRoot(rootElement);\nroot.render(<App />);",
                  "solvedContent": null
                },
                {
                  "name": "App.jsx",
                  "codeLanguage": "jsx",
                  "content": "import React, { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport PixelGrid from \"./PixelGrid\";\nimport Toolbar from \"./Toolbar\";\n\nconst URL = process.env.BACKEND_URL;\n\nconst App = () => {\n  const [selectedColor, setSelectedColor] = useState(\"black\");\n  const [grid, setGrid] = useState([]);\n\n  useEffect(() => {\n    fetch(`${URL}/grid`)\n      .then((response) => response.json())\n      .then((data) => setGrid(data.grid))\n      .catch((error) => console.error(\"Error fetching grid data:\", error));\n  }, []);\n\n  return (\n    <div className=\"content-wrapper\">\n      <h1>Pixel Grid</h1>\n      <PixelGrid grid={grid} />\n      <Toolbar\n        selectedColor={selectedColor}\n        setSelectedColor={setSelectedColor}\n      />\n    </div>\n  );\n};\n\nexport default App;",
                  "solvedContent": "import React, { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport PixelGrid from \"./PixelGrid\";\nimport Toolbar from \"./Toolbar\";\n\nconst URL = process.env.BACKEND_URL;\n\nconst App = () => {\n  const [selectedColor, setSelectedColor] = useState(\"black\");\n  const [grid, setGrid] = useState([]);\n\n  useEffect(() => {\n    fetch(`${URL}/grid`)\n      .then((response) => response.json())\n      .then((data) => setGrid(data.grid))\n      .catch((error) => console.error(\"Error fetching grid data:\", error));\n  }, []);\n\n  const updateColor = async (x, y) => {\n    try {\n      const response = await fetch(`${URL}/setGridColor`, {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({ x, y, color: selectedColor }),\n      });\n      const { grid: updatedGrid } = await response.json();\n      setGrid(updatedGrid);\n    } catch (error) {\n      console.error(\"Error updating grid color:\", error);\n    }\n  };\n\n  return (\n    <div className=\"content-wrapper\">\n      <h1>Pixel Grid</h1>\n      <PixelGrid grid={grid} updateColor={updateColor} />\n      <Toolbar\n        selectedColor={selectedColor}\n        setSelectedColor={setSelectedColor}\n      />\n    </div>\n  );\n};\n\nexport default App;"
                },
                {
                  "name": "App.css",
                  "codeLanguage": "css",
                  "content": "html,\nbody,\n.content-wrapper {\n  height: 100%;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n}",
                  "solvedContent": null
                },
                {
                  "name": "PixelGrid.jsx",
                  "codeLanguage": "jsx",
                  "content": "import React from \"react\";\nimport \"./PixelGrid.css\";\n\nconst PixelGrid = ({ grid, updateColor }) => {\n  return (\n    <div className=\"grid\">\n      {grid.map((cell) => (\n        <div\n          key={`${cell.x}-${cell.y}`}\n          className=\"gridItem\"\n          style={{\n            backgroundColor: cell.color,\n            gridColumnStart: cell.x + 1,\n            gridRowStart: cell.y + 1,\n          }}\n          onClick={() => updateColor(cell.x, cell.y)}\n        ></div>\n      ))}\n    </div>\n  );\n};\n\nexport default PixelGrid;",
                  "solvedContent": null
                },
                {
                  "name": "PixelGrid.css",
                  "codeLanguage": "css",
                  "content": ".grid {\n  display: grid;\n  grid-template-columns: repeat(20, 20px);\n  grid-template-rows: repeat(20, 20px);\n}\n\n.gridItem {\n  width: 20px;\n  height: 20px;\n  border: 1px solid lightgray;\n}\n\n@media (max-width: 440px) {\n  .grid {\n    grid-template-columns: repeat(20, 4vw);\n    grid-template-rows: repeat(20, 4vw);\n  }\n\n  .gridItem {\n    width: 4vw;\n    height: 4vw;\n  }\n}\n",
                  "solvedContent": null
                },
                {
                  "name": "Toolbar.jsx",
                  "codeLanguage": "jsx",
                  "content": "import React from \"react\";\nimport \"./Toolbar.css\";\n\nconst Toolbar = ({ selectedColor, setSelectedColor }) => {\n  const colors = [\n    \"black\",\n    \"red\",\n    \"green\",\n    \"blue\",\n    \"yellow\",\n    \"purple\",\n    \"orange\",\n    \"pink\",\n  ];\n  return (\n    <div className=\"toolbar\">\n      {colors.map((color) => (\n        <button\n          key={color}\n          className={selectedColor === color ? \"selected-color\" : \"\"}\n          style={{ backgroundColor: color }}\n          onClick={() => setSelectedColor(color)}\n        ></button>\n      ))}\n    </div>\n  );\n};\n\nexport default Toolbar;",
                  "solvedContent": null
                },
                {
                  "name": "Toolbar.css",
                  "codeLanguage": "css",
                  "content": ".toolbar {\n  display: flex;\n  margin: 40px auto;\n  padding: 12px;\n  border: 1px solid lightgray;\n  border-radius: 32px;\n  gap: 8px;\n}\n\n.toolbar > button {\n  width: 40px;\n  height: 40px;\n  border-radius: 20px;\n  border: 2px solid white;\n  cursor: pointer;\n}\n\n.selected-color {\n  outline: 3px solid black;\n  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.3);\n}\n\n@media (max-width: 440px) {\n.toolbar {\n    padding: 2vw;\n    gap: 1vw;\n}\n\n  .toolbar > button {\n    width: 10vw;\n    height: 10vw;\n  }\n}",
                  "solvedContent": null
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Lesson #6",
            "id": 135931,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Vamos terminar melhorando os estilos dos itens da grade para fornecer feedback ao usuário durante a interação.\n\n1. No arquivo `PixelGrid.css`, direcione o `.gridItem:hover`:\n   - Defina `border` como `1px solid gray`.\n   - Defina `transform` como `scale(1.25)`.\n   - Defina `box-shadow` como `0 4px 8px rgba(0, 0, 0, 0.3)`.\n2. Na regra `.gridItem`, adicione o seguinte:\n   - Defina `cursor` como `pointer`.",
              "preselectedFileIndex": 5,
              "hasVisualOutput": true,
              "files": [
                {
                  "name": "index.html",
                  "codeLanguage": "html",
                  "content": "<!doctype html>\n<html>\n  <head>\n    <script type=\"module\" src=\"./index.js\"></script>\n    <link rel=\"stylesheet\" href=\"./index.css\" />\n    <title>Pixel Grid</title>\n  </head>\n  <body>\n    <div id=\"root\">loading</div>\n  </body>\n</html>",
                  "solvedContent": null
                },
                {
                  "name": "index.jsx",
                  "codeLanguage": "jsx",
                  "content": "import React from \"react\";\nimport { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nconst root = createRoot(rootElement);\nroot.render(<App />);",
                  "solvedContent": null
                },
                {
                  "name": "App.jsx",
                  "codeLanguage": "jsx",
                  "content": "import React, { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport PixelGrid from \"./PixelGrid\";\nimport Toolbar from \"./Toolbar\";\n\nconst URL = process.env.BACKEND_URL;\n\nconst App = () => {\n  const [selectedColor, setSelectedColor] = useState(\"black\");\n  const [grid, setGrid] = useState([]);\n\n  useEffect(() => {\n    fetch(`${URL}/grid`)\n      .then((response) => response.json())\n      .then((data) => setGrid(data.grid))\n      .catch((error) => console.error(\"Error fetching grid data:\", error));\n  }, []);\n\n  const updateColor = async (x, y) => {\n    try {\n      const response = await fetch(`${URL}/setGridColor`, {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({ x, y, color: selectedColor }),\n      });\n      const { grid: updatedGrid } = await response.json();\n      setGrid(updatedGrid);\n    } catch (error) {\n      console.error(\"Error updating grid color:\", error);\n    }\n  };\n\n  return (\n    <div className=\"content-wrapper\">\n      <h1>Pixel Grid</h1>\n      <PixelGrid grid={grid} updateColor={updateColor} />\n      <Toolbar\n        selectedColor={selectedColor}\n        setSelectedColor={setSelectedColor}\n      />\n    </div>\n  );\n};\n\nexport default App;",
                  "solvedContent": null
                },
                {
                  "name": "App.css",
                  "codeLanguage": "css",
                  "content": "html,\nbody,\n.content-wrapper {\n  height: 100%;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n}",
                  "solvedContent": null
                },
                {
                  "name": "PixelGrid.jsx",
                  "codeLanguage": "jsx",
                  "content": "import React from \"react\";\nimport \"./PixelGrid.css\";\n\nconst PixelGrid = ({ grid, updateColor }) => {\n  return (\n    <div className=\"grid\">\n      {grid.map((cell) => (\n        <div\n          key={`${cell.x}-${cell.y}`}\n          className=\"gridItem\"\n          style={{\n            backgroundColor: cell.color,\n            gridColumnStart: cell.x + 1,\n            gridRowStart: cell.y + 1,\n          }}\n          onClick={() => updateColor(cell.x, cell.y)}\n        ></div>\n      ))}\n    </div>\n  );\n};\n\nexport default PixelGrid;",
                  "solvedContent": null
                },
                {
                  "name": "PixelGrid.css",
                  "codeLanguage": "css",
                  "content": ".grid {\n  display: grid;\n  grid-template-columns: repeat(20, 20px);\n  grid-template-rows: repeat(20, 20px);\n}\n\n.gridItem {\n  width: 20px;\n  height: 20px;\n  border: 1px solid lightgray;\n}\n\n@media (max-width: 440px) {\n  .grid {\n    grid-template-columns: repeat(20, 4vw);\n    grid-template-rows: repeat(20, 4vw);\n  }\n\n  .gridItem {\n    width: 4vw;\n    height: 4vw;\n  }\n}\n",
                  "solvedContent": ".grid {\n  display: grid;\n  grid-template-columns: repeat(20, 20px);\n  grid-template-rows: repeat(20, 20px);\n}\n\n.gridItem {\n  width: 20px;\n  height: 20px;\n  border: 1px solid lightgray;\n  cursor: pointer;\n}\n\n@media (max-width: 440px) {\n  .grid {\n    grid-template-columns: repeat(20, 4vw);\n    grid-template-rows: repeat(20, 4vw);\n  }\n\n  .gridItem {\n    width: 4vw;\n    height: 4vw;\n  }\n}\n\n.gridItem:hover {\n  border: 1px solid gray;\n  transform: scale(1.25);\n  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.3);\n}\n"
                },
                {
                  "name": "Toolbar.jsx",
                  "codeLanguage": "jsx",
                  "content": "import React from \"react\";\nimport \"./Toolbar.css\";\n\nconst Toolbar = ({ selectedColor, setSelectedColor }) => {\n  const colors = [\n    \"black\",\n    \"red\",\n    \"green\",\n    \"blue\",\n    \"yellow\",\n    \"purple\",\n    \"orange\",\n    \"pink\",\n  ];\n  return (\n    <div className=\"toolbar\">\n      {colors.map((color) => (\n        <button\n          key={color}\n          className={selectedColor === color ? \"selected-color\" : \"\"}\n          style={{ backgroundColor: color }}\n          onClick={() => setSelectedColor(color)}\n        ></button>\n      ))}\n    </div>\n  );\n};\n\nexport default Toolbar;",
                  "solvedContent": null
                },
                {
                  "name": "Toolbar.css",
                  "codeLanguage": "css",
                  "content": ".toolbar {\n  display: flex;\n  margin: 40px auto;\n  padding: 12px;\n  border: 1px solid lightgray;\n  border-radius: 32px;\n  gap: 8px;\n}\n\n.toolbar > button {\n  width: 40px;\n  height: 40px;\n  border-radius: 20px;\n  border: 2px solid white;\n  cursor: pointer;\n}\n\n.selected-color {\n  outline: 3px solid black;\n  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.3);\n}\n\n@media (max-width: 440px) {\n.toolbar {\n    padding: 2vw;\n    gap: 1vw;\n}\n\n  .toolbar > button {\n    width: 10vw;\n    height: 10vw;\n  }\n}",
                  "solvedContent": null
                }
              ],
              "hints": []
            }
          }
        ]
      }
    ]
  }
}