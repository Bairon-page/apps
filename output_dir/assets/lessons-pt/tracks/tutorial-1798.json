{
  "tutorial": {
    "id": 1798,
    "version": 11,
    "type": "challenges",
    "isNew": false,
    "codeLanguage": "javascript",
    "title": "Classes em JavaScript",
    "descriptionContent": "Desafios são exercícios mais difíceis que testarão suas habilidades.",
    "shortDescriptionContent": "",
    "showInTrack": true,
    "iconBanner": "tutorial-1798-icon-banner.svg",
    "chapters": [
      {
        "id": 11990,
        "title": "Instância de Car",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "Car Instance",
            "id": 109261,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Usando a classe `Car` do desafio anterior, vamos construir uma nova instância dessa classe.\n\n1. Crie um novo objeto chamado `myCar` e especifique que é um carro construído em `2021`, com um motor `V8`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "index.js",
                  "codeLanguage": "javascript",
                  "content": "class Car {\r\n constructor(year, engine) {\r\n  this.year = year;\r\n  this.engine = engine;\r\n }\r\n}",
                  "solvedContent": "class Car {\r\n constructor(year, engine) {\r\n  this.year = year;\r\n  this.engine = engine;\r\n }\r\n}\r\nconst myCar = new Car(2021, 'V8');"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 11986,
        "title": "Detalhes do Carro Antigo",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "Old Timer Car Details",
            "id": 109259,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Vamos continuar a partir do desafio anterior usando a classe `Car`.\n\n1. Crie uma instância da classe `Car`. Nomeie a instância como `oldTimer`. Este carro foi fabricado em `1980` e possui um motor `diesel`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "index.js",
                  "codeLanguage": "javascript",
                  "content": "class Car {\r\n constructor(year, engine) {\r\n  this.year = year;\r\n  this.engine = engine;\r\n }\r\n}\r\nconst myCar = new Car(2021, 'V8');",
                  "solvedContent": "class Car {\r\n constructor(year, engine) {\r\n  this.year = year;\r\n  this.engine = engine;\r\n }\r\n}\r\nconst myCar = new Car(2021, 'V8');\r\nconst oldTimer = new Car(1980, 'diesel');"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 11987,
        "title": "Classe Vehicle",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "Vehicle Class",
            "id": 109258,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Vamos criar uma nova classe.\n\n1. Crie uma classe chamada `Vehicle`.\n2. Codifique a classe `Vehicle` para que ela aceite três parâmetros no construtor: `year`, `mileage`, `speed`.\n3. Atribua os parâmetros às propriedades corretas dentro do construtor, usando a palavra-chave `this`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "index.js",
                  "codeLanguage": "javascript",
                  "content": "class Vehicle",
                  "solvedContent": "class Vehicle {\n constructor(year, mileage, speed) {\n  this.year = year;\n  this.mileage = mileage;\n  this.speed = speed;\n }\n}"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 11984,
        "title": "Herdando propriedades",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "Inheriting properties",
            "id": 109255,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Vamos criar outra classe que herda propriedades de uma superclasse.\n\n1. Crie uma nova classe e nomeie-a: `Boat`.\n2. Codifique a classe `Boat` para que ela herde todas as propriedades da classe `Vehicle`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "index.js",
                  "codeLanguage": "javascript",
                  "content": "class Vehicle {\r\n constructor(year, mileage, speed) {\r\n  this.year = year;\r\n  this.mileage = mileage;\r\n  this.speed = speed;\r\n }\r\n}\r\nclass {\r\n\r\n\r\n\r\n}",
                  "solvedContent": "class Vehicle {\r\n constructor(year, mileage, speed) {\r\n  this.year = year;\r\n  this.mileage = mileage;\r\n  this.speed = speed;\r\n }\r\n}\r\nclass Boat extends Vehicle {\r\n constructor(year, mileage, speed) {\r\n  super(year, mileage, speed);\r\n }\r\n}"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 11982,
        "title": "Adicionar método a uma classe",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "Add method to a class",
            "id": 109256,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Vamos adicionar um método a uma classe.\n\n1. Atualize a superclasse `Vehicle` com um método chamado `turnOn`. Dentro do método `turnOn`, execute `console.log(\"It's on!\")`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "index.js",
                  "codeLanguage": "javascript",
                  "content": "class Vehicle {\n constructor(year, mileage, speed) {\n  this.year = year;\n  this.mileage = mileage;\n  this.speed = speed;\n }\n}\nclass Boat extends Vehicle {\n constructor(year, mileage, speed) {\n  super(year, mileage, speed);\n }\n}\n",
                  "solvedContent": "class Vehicle {\n constructor(year, mileage, speed) {\n  this.year = year;\n  this.mileage = mileage;\n  this.speed = speed;\n }\n turnOn() {\n  console.log(\"It's on!\");\n }\n}\nclass Boat extends Vehicle {\n constructor(year, mileage, speed) {\n  super(year, mileage, speed);\n }\n}\n"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 11983,
        "title": "Substituir método na subclasse",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "Overriding method in method in sub-class",
            "id": 109262,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Há um único método na superclasse. Agora vamos sobrescrever esse método na subclasse.\n\n1. Atualize a subclasse `Boat` com um método chamado `turnOn`.\n2. Dentro do método `turnOn`, use `console.log()` para exibir a propriedade `this.message`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "index.js",
                  "codeLanguage": "javascript",
                  "content": "class Vehicle {\n constructor(year, mileage, speed) {\n  this.year = year;\n  this.mileage = mileage;\n  this.speed = speed;\n }\n turnOn() {\n  console.log(\"It's on!\");\n }\n}\nclass Boat extends Vehicle {\n constructor(year, mileage, speed) {\n  super(year, mileage, speed);\n  this.message = \"Sailing!\";\n }\n}",
                  "solvedContent": "class Vehicle {\n constructor(year, mileage, speed) {\n  this.year = year;\n  this.mileage = mileage;\n  this.speed = speed;\n }\n turnOn() {\n  console.log(\"It's on!\");\n }\n}\nclass Boat extends Vehicle {\n constructor(year, mileage, speed) {\n  super(year, mileage, speed);\n  this.message = \"Sailing!\";\n }\n turnOn() {\n  console.log(this.message);\n }\n}"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 11991,
        "title": "Jogo de estratégia espacial 1",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "Space strategy game",
            "id": 109254,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Estamos construindo um jogo de estratégia espacial. Precisamos codificar a classe `Character`, depois estendê-la com `Earthling`, e então estender essa subclasse com outra, chamada `Builder`.\n\n1. Adicione à classe `Character` um único parâmetro, `health`.\n2. Faça a subclasse `Earthling` herdar o parâmetro `health` de `Character`.\n3. Adicione um novo parâmetro a `Earthling` e nomeie-o: `iq`.\n4. Crie uma subclasse chamada `Builder` e herde todas as propriedades da classe `Earthling`.\n5. Adicione um parâmetro à classe `Builder`. Nomeie o parâmetro: `tool`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "index.js",
                  "codeLanguage": "javascript",
                  "content": "class Character {\n}\nclass Earthling extends Character {\n constructor(health) {}\n}",
                  "solvedContent": "class Character {\n constructor(health) {\n  this.health = health;\n }\n}\nclass Earthling extends Character {\n constructor(health, iq) {\n  super(health);\n  this.iq = iq;\n }\n}\nclass Builder extends Earthling {\n constructor(health, iq, tool) {\n  super(health, iq);\n  this.tool = tool;\n }\n}"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 11985,
        "title": "Jogo de estratégia espacial 2",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "Challenge #8: Hard",
            "id": 109253,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Ainda estamos construindo nosso jogo de estratégia espacial. Precisamos codificar a classe `Vehicle`, e depois criar duas subclasses: `Spaceship` e `MoonBuggy`.\n\n1. Inclua um único parâmetro, `fuel`, na classe `Vehicle`.\n2. Faça a subclasse `Spaceship` herdar o parâmetro `fuel` de `Vehicle`.\n3. Adicione um novo parâmetro à `Spaceship` e nomeie-o como `speed`.\n4. Crie uma subclasse chamada `MoonBuggy` que herda o parâmetro `fuel` de `Vehicle`.\n5. Adicione o parâmetro `doors` à classe `MoonBuggy`. Afinal, precisamos de portas em um moon buggy.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "index.js",
                  "codeLanguage": "javascript",
                  "content": "class Vehicle {\n\n}\nclass Spaceship extends Vehicle {\n\n}",
                  "solvedContent": "class Vehicle {\n constructor(fuel) {\n  this.fuel = fuel;\n }\n}\nclass Spaceship extends Vehicle {\n constructor(fuel, speed) {\n  super(fuel);\n  this.speed = speed;\n }\n}\nclass MoonBuggy extends Vehicle {\n constructor(fuel, doors) {\n  super(fuel);\n  this.doors = doors;\n }\n}"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 11989,
        "title": "Jogo de estratégia espacial 3",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "Challenge #9: Hard",
            "id": 109263,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Estamos expandindo as classes em nosso jogo de estratégia espacial com alguns comportamentos, como métodos.\n\n1. Em `Vehicle`, adicione uma nova funcionalidade. Chame-a de `turnOn`, e faça com que `console.log` esta string: `Engine on`.\n2. Na subclasse `Spaceship`, herde a funcionalidade do método `turnOn`, e então estenda-a fazendo o console log de `Hyperspace engine on`.\n3. Construa um novo `Vehicle` chamado `firstPrototype`, e defina seu valor de `fuel` para `100`.\n4. Construa um novo objeto `Spaceship` chamado `endeavor`, e defina seu valor de `fuel` para `100` e a velocidade para `fast`.\n5. Chame o método `turnOn` no `firstPrototype`.\n6. Chame o método `turnOn` no `endeavor`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "index.js",
                  "codeLanguage": "javascript",
                  "content": "class Vehicle {\n constructor(fuel) {\n  this.fuel = fuel;\n }\n\n}\nclass Spaceship extends Vehicle {\n constructor(fuel, speed) {\n  super(fuel);\n  this.speed = speed;\n }\n\n}\n\n\n\n",
                  "solvedContent": "class Vehicle {\n constructor(fuel) {\n  this.fuel = fuel;\n }\n turnOn() {\n  console.log('Engine on');\n }\n}\nclass Spaceship extends Vehicle {\n constructor(fuel, speed) {\n  super(fuel);\n  this.speed = speed;\n }\n turnOn() {\n  super.turnOn();\n  console.log('Hyperspace engine on');\n }\n}\nconst firstPrototype = new Vehicle(100);\nconst endeavor = new Spaceship(100, 'fast');\nfirstPrototype.turnOn();\nendeavor.turnOn();"
                }
              ],
              "hints": []
            }
          }
        ]
      }
    ]
  }
}