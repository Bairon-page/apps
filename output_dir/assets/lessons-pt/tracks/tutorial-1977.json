{
  "tutorial": {
    "id": 1977,
    "version": 10,
    "type": "guidedProjectOptional",
    "isNew": false,
    "codeLanguage": "javascript",
    "title": "Agendador de Entregas",
    "descriptionContent": "Construa um programa de agendamento de entregas",
    "shortDescriptionContent": "",
    "showInTrack": true,
    "iconBanner": "tutorial-1977-icon-banner.svg",
    "chapters": [
      {
        "id": 12678,
        "title": "Agendador de Entregas",
        "type": "practiceLevel3",
        "lessons": [
          {
            "title": "Store day preferences",
            "id": 114891,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Sheila precisa receber um pacote e quer garantir que ele chegue quando ela estiver em casa. Vamos programar um agendamento de entrega para atender às suas preferências e garantir que ela esteja lá quando o pacote chegar!\n\nO programa de entrega levará em consideração as preferências de dia e horário de Sheila antes de agendar uma entrega. Vamos começar com suas preferências de dia e permitir dois dias preferidos.\n\n1. Crie uma `const` chamada `firstDay` para armazenar o primeiro dia preferido de Sheila, `\"Monday\"`.\n2. Crie uma `const` chamada `secondDay` para armazenar o segundo dia preferido de Sheila, `\"Friday\"`.\n3. Imprima no console uma mensagem neste estilo: `\"Available days: Monday and Friday\"`. Use uma concatenação de strings com as constantes `firstDay` e `secondDay`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "",
                  "solvedContent": "const firstDay = \"Monday\";\r\nconst secondDay = \"Friday\";\r\nconsole.log(\"Available days: \" + firstDay + \" and \" + secondDay);"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Declare program's day selection",
            "id": 114999,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "A empresa de entregas só trabalha um dia por semana. O dia de entrega desta semana é sexta-feira. Vamos armazenar esse valor.\n1. Crie uma `const` chamada `deliveryDay` e defina seu valor como `\"Friday\"`.\n2. Imprima `\"Delivery Day: Friday\"` no console, usando a constante `deliveryDay` e concatenação de strings.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const firstDay = \"Monday\";\r\nconst secondDay = \"Friday\";\r\nconsole.log(\"Available days: \" + firstDay + \" and \" + secondDay);",
                  "solvedContent": "const firstDay = \"Monday\";\r\nconst secondDay = \"Friday\";\r\nconsole.log(\"Available days: \" + firstDay + \" and \" + secondDay);\r\nconst deliveryDay = \"Friday\";\r\nconsole.log(\"Delivery Day: \" + deliveryDay);"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Check Day I",
            "id": 114895,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "É hora de verificar se o dia de entrega se encaixa na preferência de dia de entrega da Sheila! Sheila tem 2 dias preferidos, mas vamos começar verificando se o dia de entrega coincide com o primeiro dia.\n\n1. Verifique se `deliveryDay` é igual a `firstDay`, e defina essa comparação como o valor de uma nova variável `const` chamada `firstDayCheck`.\n2. Imprima `\"Entrega bem-sucedida no primeiro dia? \" + firstDayCheck` no console.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const firstDay = \"Monday\";\r\nconst secondDay = \"Friday\";\r\nconsole.log(\"Available days: \" + firstDay + \" and \" + secondDay);\r\nconst deliveryDay = \"Friday\";\r\nconsole.log(\"Delivery Day: \" + deliveryDay);",
                  "solvedContent": "const firstDay = \"Monday\";\r\nconst secondDay = \"Friday\";\r\nconsole.log(\"Available days: \" + firstDay + \" and \" + secondDay);\r\nconst deliveryDay = \"Friday\";\r\nconsole.log(\"Delivery Day: \" + deliveryDay);\r\nconst firstDayCheck = deliveryDay === firstDay;\r\nconsole.log(\"Successful delivery on the first day? \" + firstDayCheck);"
                }
              ],
              "hints": [
                {
                  "title": "Hint",
                  "content": "You can check if strings are equal using `===`."
                }
              ]
            }
          },
          {
            "title": "Check Day II",
            "id": 114903,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "A entrega não está disponível no primeiro dia! Vamos verificar se o dia de entrega corresponde ao segundo dia.\n\n1. Verifique se `deliveryDay` é igual a `secondDay` e defina essa comparação como o valor de uma nova variável `const` chamada `secondDayCheck`.\n2. Imprima `\"Entrega bem-sucedida no segundo dia? \" + secondDayCheck` no console.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const firstDay = \"Monday\";\r\nconst secondDay = \"Friday\";\r\nconsole.log(\"Available days: \" + firstDay + \" and \" + secondDay);\r\nconst deliveryDay = \"Friday\";\r\nconsole.log(\"Delivery Day: \" + deliveryDay);\r\nconst firstDayCheck = deliveryDay === firstDay;\r\nconsole.log(\"Successful delivery on the first day? \" + firstDayCheck);",
                  "solvedContent": "const firstDay = \"Monday\";\r\nconst secondDay = \"Friday\";\r\nconsole.log(\"Available days: \" + firstDay + \" and \" + secondDay);\r\nconst deliveryDay = \"Friday\";\r\nconsole.log(\"Delivery Day: \" + deliveryDay);\r\nconst firstDayCheck = deliveryDay === firstDay;\r\nconsole.log(\"Successful delivery on the first day? \" + firstDayCheck);\r\nconst secondDayCheck = deliveryDay === secondDay;\r\nconsole.log(\"Successful delivery on the second day? \" + secondDayCheck);"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Check Day III",
            "id": 114904,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Vamos simplificar a verificação se as preferências de dia da Sheila foram satisfeitas em um passo, usando o operador lógico *OU*.\n\n1. Crie uma variável `const` chamada `dayResult`.\n2. Verifique se `firstDayCheck` ou `secondDayCheck` são `true`, e armazene essa expressão lógica na variável `dayResult`.\n3. Imprima `\"Fulfilled Sheila's day preference? \" + dayResult` no console.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const firstDay = \"Monday\";\r\nconst secondDay = \"Friday\";\r\nconsole.log(\"Available days: \" + firstDay + \" and \" + secondDay);\r\nconst deliveryDay = \"Friday\";\r\nconsole.log(\"Delivery Day: \" + deliveryDay);\r\nconst firstDayCheck = deliveryDay === firstDay;\r\nconsole.log(\"Successful delivery on the first day? \" + firstDayCheck);\r\nconst secondDayCheck = deliveryDay === secondDay;\r\nconsole.log(\"Successful delivery on the second day? \" + secondDayCheck);",
                  "solvedContent": "const firstDay = \"Monday\";\r\nconst secondDay = \"Friday\";\r\nconsole.log(\"Available days: \" + firstDay + \" and \" + secondDay);\r\nconst deliveryDay = \"Friday\";\r\nconsole.log(\"Delivery Day: \" + deliveryDay);\r\nconst firstDayCheck = deliveryDay === firstDay;\r\nconsole.log(\"Successful delivery on the first day? \" + firstDayCheck);\r\nconst secondDayCheck = deliveryDay === secondDay;\r\nconsole.log(\"Successful delivery on the second day? \" + secondDayCheck);\r\nconst dayResult = firstDayCheck || secondDayCheck;\r\nconsole.log(\"Fulfilled Sheila's day preference? \" + dayResult);"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Declare Sheila's preferred time",
            "id": 114892,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "O dia da entrega coincide! Vamos agora explorar o horário da entrega. Sheila está em casa apenas entre 8h e 10h. Crie variáveis para declarar o horário preferido de Sheila.\n\n1. A entrega deve ser após as 8h, então defina `8` como o valor de uma nova variável `const` chamada `requestAfterTime`.\n2. A entrega deve ser antes das 10h, então defina `10` como o valor de uma nova variável `const` chamada `requestBeforeTime`.\n3. Imprima `\"Request delivery after \" + requestAfterTime + \" but before \" + requestBeforeTime` no console.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const firstDay = \"Monday\";\r\nconst secondDay = \"Friday\";\r\nconsole.log(\"Available days: \" + firstDay + \" and \" + secondDay);\r\nconst deliveryDay = \"Friday\";\r\nconsole.log(\"Delivery Day: \" + deliveryDay);\r\nconst firstDayCheck = deliveryDay === firstDay;\r\nconsole.log(\"Successful delivery on the first day? \" + firstDayCheck);\r\nconst secondDayCheck = deliveryDay === secondDay;\r\nconsole.log(\"Successful delivery on the second day? \" + secondDayCheck);\r\nconst dayResult = firstDayCheck || secondDayCheck;\r\nconsole.log(\"Fulfilled Sheila's day preference? \" + dayResult);",
                  "solvedContent": "const firstDay = \"Monday\";\r\nconst secondDay = \"Friday\";\r\nconsole.log(\"Available days: \" + firstDay + \" and \" + secondDay);\r\nconst deliveryDay = \"Friday\";\r\nconsole.log(\"Delivery Day: \" + deliveryDay);\r\nconst firstDayCheck = deliveryDay === firstDay;\r\nconsole.log(\"Successful delivery on the first day? \" + firstDayCheck);\r\nconst secondDayCheck = deliveryDay === secondDay;\r\nconsole.log(\"Successful delivery on the second day? \" + secondDayCheck);\r\nconst dayResult = firstDayCheck || secondDayCheck;\r\nconsole.log(\"Fulfilled Sheila's day preference? \" + dayResult);\r\nconst requestBeforeTime = 10;\r\nconst requestAfterTime = 8;\r\nconsole.log(\"Request delivery after \" + requestAfterTime + \" but before \" +\r\n  requestBeforeTime);"
                }
              ],
              "hints": [
                {
                  "title": "Hint",
                  "content": "Note that the variables should be numbers and not strings. Eg. `const <variableName> = <number>;`"
                }
              ]
            }
          },
          {
            "title": "Declare program's selection",
            "id": 114893,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "A empresa de entregas tem um horário de entrega às 9h na próxima sexta-feira. Vamos adicionar essa informação ao nosso aplicativo.\n\n1. Crie uma variável `const` chamada `deliveryTime` e armazene o número `9` como seu valor.\n2. Imprima `\"Delivery Time: \" + deliveryTime` no console.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const firstDay = \"Monday\";\r\nconst secondDay = \"Friday\";\r\nconsole.log(\"Available days: \" + firstDay + \" \" + secondDay);\r\nconst deliveryDay = \"Friday\";\r\nconsole.log(\"Delivery Day: \" + deliveryDay);\r\nconst firstDayCheck = deliveryDay === firstDay;\r\nconsole.log(\"Successful delivery on the first day? \" + firstDayCheck);\r\nconst secondDayCheck = deliveryDay === secondDay;\r\nconsole.log(\"Successful delivery on the second day? \" + secondDayCheck);\r\nconst dayResult = firstDayCheck || secondDayCheck;\r\nconsole.log(\"Fulfilled Sheila's day preference? \" + dayResult);\r\nconst requestBeforeTime = 10;\r\nconst requestAfterTime = 8;\r\nconsole.log(\"Request delivery after \" + requestAfterTime + \" but before \" +\r\n  requestBeforeTime);",
                  "solvedContent": "const firstDay = \"Monday\";\r\nconst secondDay = \"Friday\";\r\nconsole.log(\"Available days: \" + firstDay + \" \" + secondDay);\r\nconst deliveryDay = \"Friday\";\r\nconsole.log(\"Delivery Day: \" + deliveryDay);\r\nconst firstDayCheck = deliveryDay === firstDay;\r\nconsole.log(\"Successful delivery on the first day? \" + firstDayCheck);\r\nconst secondDayCheck = deliveryDay === secondDay;\r\nconsole.log(\"Successful delivery on the second day? \" + secondDayCheck);\r\nconst dayResult = firstDayCheck || secondDayCheck;\r\nconsole.log(\"Fulfilled Sheila's day preference? \" + dayResult);\r\nconst requestBeforeTime = 10;\r\nconst requestAfterTime = 8;\r\nconsole.log(\"Request delivery after \" + requestAfterTime + \" but before \" +\r\n  requestBeforeTime);\r\nconst deliveryTime = 9;\r\nconsole.log(\"Delivery Time: \" + deliveryTime);"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Check Time I",
            "id": 114897,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Vamos verificar se as preferências de Sheila se encaixam no tempo disponível. Verifique se a entrega é após as 8h.\n\n1. Verifique se `deliveryTime` é igual ou posterior a `requestAfterTime` e defina a comparação como o valor de uma nova variável `const` chamada `afterTimeCheck`.\n2. Imprima `\"Delivery is after \" + requestAfterTime + \"? \" + afterTimeCheck` no console.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const firstDay = \"Monday\";\r\nconst secondDay = \"Friday\";\r\nconsole.log(\"Available days: \" + firstDay + \" and \" + secondDay);\r\nconst deliveryDay = \"Friday\";\r\nconsole.log(\"Delivery Day: \" + deliveryDay);\r\nconst firstDayCheck = deliveryDay === firstDay;\r\nconsole.log(\"Successful delivery on the first day? \" + firstDayCheck);\r\nconst secondDayCheck = deliveryDay === secondDay;\r\nconsole.log(\"Successful delivery on the second day? \" + secondDayCheck);\r\nconst dayResult = firstDayCheck || secondDayCheck;\r\nconsole.log(\"Fulfilled Sheila's day preference? \" + dayResult);\r\nconst requestBeforeTime = 10;\r\nconst requestAfterTime = 8;\r\nconsole.log(\"Request delivery after \" + requestAfterTime + \" but before \" +\r\n  requestBeforeTime);\r\nconst deliveryTime = 9;\r\nconsole.log(\"Delivery Time: \" + deliveryTime);",
                  "solvedContent": "const firstDay = \"Monday\";\r\nconst secondDay = \"Friday\";\r\nconsole.log(\"Available days: \" + firstDay + \" and \" + secondDay);\r\nconst deliveryDay = \"Friday\";\r\nconsole.log(\"Delivery Day: \" + deliveryDay);\r\nconst firstDayCheck = deliveryDay === firstDay;\r\nconsole.log(\"Successful delivery on the first day? \" + firstDayCheck);\r\nconst secondDayCheck = deliveryDay === secondDay;\r\nconsole.log(\"Successful delivery on the second day? \" + secondDayCheck);\r\nconst dayResult = firstDayCheck || secondDayCheck;\r\nconsole.log(\"Fulfilled Sheila's day preference? \" + dayResult);\r\nconst requestBeforeTime = 10;\r\nconst requestAfterTime = 8;\r\nconsole.log(\"Request delivery after \" + requestAfterTime + \" but before \" +\r\n  requestBeforeTime);\r\nconst deliveryTime = 9;\r\nconsole.log(\"Delivery Time: \" + deliveryTime);\r\nconst afterTimeCheck = deliveryTime >= requestAfterTime;\r\nconsole.log(\"Delivery is after \" + requestAfterTime + \"? \" + afterTimeCheck);"
                }
              ],
              "hints": [
                {
                  "title": "Hint",
                  "content": "You can use >= to see if the `deliveryTime` is after or equal to the `requestAfterTime`."
                }
              ]
            }
          },
          {
            "title": "Check Time II",
            "id": 114894,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Agora vamos verificar se a entrega é antes das 10h!\n\n1. Verifique se `deliveryTime` é antes de `requestBeforeTime`, e defina a comparação como o valor de uma nova variável `const` chamada `beforeTimeCheck`.\n2. Imprima `\"Delivery is before \" + requestBeforeTime + \"? \" + beforeTimeCheck` no console.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const firstDay = \"Monday\";\r\nconst secondDay = \"Friday\";\r\nconsole.log(\"Available days: \" + firstDay + \" and \" + secondDay);\r\nconst deliveryDay = \"Friday\";\r\nconsole.log(\"Delivery Day: \" + deliveryDay);\r\nconst firstDayCheck = deliveryDay === firstDay;\r\nconsole.log(\"Successful delivery on the first day? \" + firstDayCheck);\r\nconst secondDayCheck = deliveryDay === secondDay;\r\nconsole.log(\"Successful delivery on the second day? \" + secondDayCheck);\r\nconst dayResult = firstDayCheck || secondDayCheck;\r\nconsole.log(\"Fulfilled Sheila's day preference? \" + dayResult);\r\nconst requestBeforeTime = 10;\r\nconst requestAfterTime = 8;\r\nconsole.log(\"Request delivery after \" + requestAfterTime + \" but before \" +\r\n  requestBeforeTime);\r\nconst deliveryTime = 9;\r\nconsole.log(\"Delivery Time: \" + deliveryTime);\r\nconst afterTimeCheck = deliveryTime >= requestAfterTime;\r\nconsole.log(\"Delivery is after \" + requestAfterTime + \"? \" + afterTimeCheck);",
                  "solvedContent": "const firstDay = \"Monday\";\r\nconst secondDay = \"Friday\";\r\nconsole.log(\"Available days: \" + firstDay + \" and \" + secondDay);\r\nconst deliveryDay = \"Friday\";\r\nconsole.log(\"Delivery Day: \" + deliveryDay);\r\nconst firstDayCheck = deliveryDay === firstDay;\r\nconsole.log(\"Successful delivery on the first day? \" + firstDayCheck);\r\nconst secondDayCheck = deliveryDay === secondDay;\r\nconsole.log(\"Successful delivery on the second day? \" + secondDayCheck);\r\nconst dayResult = firstDayCheck || secondDayCheck;\r\nconsole.log(\"Fulfilled Sheila's day preference? \" + dayResult);\r\nconst requestBeforeTime = 10;\r\nconst requestAfterTime = 8;\r\nconsole.log(\"Request delivery after \" + requestAfterTime + \" but before \" +\r\n  requestBeforeTime);\r\nconst deliveryTime = 9;\r\nconsole.log(\"Delivery Time: \" + deliveryTime);\r\nconst afterTimeCheck = deliveryTime >= requestAfterTime;\r\nconsole.log(\"Delivery is after \" + requestAfterTime + \"? \" + afterTimeCheck);\r\nconst beforeTimeCheck = deliveryTime <= requestBeforeTime;\r\nconsole.log(\"Delivery is before \" + requestBeforeTime + \"? \" + beforeTimeCheck);"
                }
              ],
              "hints": [
                {
                  "title": "Hint",
                  "content": "You can use <= to see if the `deliveryTime` is before or equal to the `requestBeforeTime`."
                }
              ]
            }
          },
          {
            "title": "Check Time III",
            "id": 114898,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Ótimo! Sheila estará em casa nesse horário! Mas agora vamos simplificar a verificação de horário com o operador lógico AND.\n\n1. Verifique se `beforeTimeCheck` e `afterTimeCheck` são `true`, e defina essa expressão lógica como o valor de uma nova variável `const` chamada `timeResult`.\n2. Imprima `\"Fulfilled Sheila's time preference? \" + timeResult` no console.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const firstDay = \"Monday\";\r\nconst secondDay = \"Friday\";\r\nconsole.log(\"Available days: \" + firstDay + \" and \" + secondDay);\r\nconst deliveryDay = \"Friday\";\r\nconsole.log(\"Delivery Day: \" + deliveryDay);\r\nconst firstDayCheck = deliveryDay === firstDay;\r\nconsole.log(\"Successful delivery on the first day? \" + firstDayCheck);\r\nconst secondDayCheck = deliveryDay === secondDay;\r\nconsole.log(\"Successful delivery on the second day? \" + secondDayCheck);\r\nconst dayResult = firstDayCheck || secondDayCheck;\r\nconsole.log(\"Fulfilled Sheila's day preference? \" + dayResult);\r\nconst requestBeforeTime = 10;\r\nconst requestAfterTime = 8;\r\nconsole.log(\"Request delivery after \" + requestAfterTime + \" but before \" +\r\n  requestBeforeTime);\r\nconst deliveryTime = 9;\r\nconsole.log(\"Delivery Time: \" + deliveryTime);\r\nconst afterTimeCheck = deliveryTime >= requestAfterTime;\r\nconsole.log(\"Delivery is after \" + requestAfterTime + \"? \" + afterTimeCheck);\r\nconst beforeTimeCheck = deliveryTime <= requestBeforeTime;\r\nconsole.log(\"Delivery is before \" + requestBeforeTime + \"? \" + beforeTimeCheck);",
                  "solvedContent": "const firstDay = \"Monday\";\r\nconst secondDay = \"Friday\";\r\nconsole.log(\"Available days: \" + firstDay + \" and \" + secondDay);\r\nconst deliveryDay = \"Friday\";\r\nconsole.log(\"Delivery Day: \" + deliveryDay);\r\nconst firstDayCheck = deliveryDay === firstDay;\r\nconsole.log(\"Successful delivery on the first day? \" + firstDayCheck);\r\nconst secondDayCheck = deliveryDay === secondDay;\r\nconsole.log(\"Successful delivery on the second day? \" + secondDayCheck);\r\nconst dayResult = firstDayCheck || secondDayCheck;\r\nconsole.log(\"Fulfilled Sheila's day preference? \" + dayResult);\r\nconst requestBeforeTime = 10;\r\nconst requestAfterTime = 8;\r\nconsole.log(\"Request delivery after \" + requestAfterTime + \" but before \" +\r\n  requestBeforeTime);\r\nconst deliveryTime = 9;\r\nconsole.log(\"Delivery Time: \" + deliveryTime);\r\nconst afterTimeCheck = deliveryTime >= requestAfterTime;\r\nconsole.log(\"Delivery is after \" + requestAfterTime + \"? \" + afterTimeCheck);\r\nconst beforeTimeCheck = deliveryTime <= requestBeforeTime;\r\nconsole.log(\"Delivery is before \" + requestBeforeTime + \"? \" + beforeTimeCheck);\r\nconst timeResult = beforeTimeCheck && afterTimeCheck;\r\nconsole.log(\"Fulfilled Sheila's time preference? \" + timeResult);"
                }
              ],
              "hints": [
                {
                  "title": "Hint",
                  "content": "You can use the AND operator  `&&`  for the check. It returns `false` if *any* of the conditions are `false`. It returns `true` if *both* of the conditions are `true`."
                }
              ]
            }
          },
          {
            "title": "Check day and time",
            "id": 114896,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Finalmente, precisamos verificar se a entrega atendeu tanto às preferências de dia quanto de horário da Sheila e imprimir o resultado da verificação!\n\n1. Verifique se tanto `timeResult` quanto `dayResult` são `true`, e defina essa expressão lógica como o valor da nova variável `const` `overallCheck`.\n2. Imprima `\"Program scheduled well? \" + overallCheck` no console.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const firstDay = \"Monday\";\r\nconst secondDay = \"Friday\";\r\nconsole.log(\"Available days: \" + firstDay + \" and \" + secondDay);\r\nconst deliveryDay = \"Friday\";\r\nconsole.log(\"Delivery Day: \" + deliveryDay);\r\nconst firstDayCheck = deliveryDay === firstDay;\r\nconsole.log(\"Successful delivery on the first day? \" + firstDayCheck);\r\nconst secondDayCheck = deliveryDay === secondDay;\r\nconsole.log(\"Successful delivery on the second day? \" + secondDayCheck);\r\nconst dayResult = firstDayCheck || secondDayCheck;\r\nconsole.log(\"Fulfilled Sheila's day preference? \" + dayResult);\r\nconst requestBeforeTime = 10;\r\nconst requestAfterTime = 8;\r\nconsole.log(\"Request delivery after \" + requestAfterTime + \" but before \" +\r\n  requestBeforeTime);\r\nconst deliveryTime = 9;\r\nconsole.log(\"Delivery Time: \" + deliveryTime);\r\nconst afterTimeCheck = deliveryTime >= requestAfterTime;\r\nconsole.log(\"Delivery is after \" + requestAfterTime + \"? \" + afterTimeCheck);\r\nconst beforeTimeCheck = deliveryTime <= requestBeforeTime;\r\nconsole.log(\"Delivery is before \" + requestBeforeTime + \"? \" + beforeTimeCheck);\r\nconst timeResult = beforeTimeCheck && afterTimeCheck;\r\nconsole.log(\"Fulfilled Sheila's time preference? \" + timeResult);",
                  "solvedContent": "const firstDay = \"Monday\";\r\nconst secondDay = \"Friday\";\r\nconsole.log(\"Available days: \" + firstDay + \" and \" + secondDay);\r\nconst deliveryDay = \"Friday\";\r\nconsole.log(\"Delivery Day: \" + deliveryDay);\r\nconst firstDayCheck = deliveryDay === firstDay;\r\nconsole.log(\"Successful delivery on the first day? \" + firstDayCheck);\r\nconst secondDayCheck = deliveryDay === secondDay;\r\nconsole.log(\"Successful delivery on the second day? \" + secondDayCheck);\r\nconst dayResult = firstDayCheck || secondDayCheck;\r\nconsole.log(\"Fulfilled Sheila's day preference? \" + dayResult);\r\nconst requestBeforeTime = 10;\r\nconst requestAfterTime = 8;\r\nconsole.log(\"Request delivery after \" + requestAfterTime + \" but before \" +\r\n  requestBeforeTime);\r\nconst deliveryTime = 9;\r\nconsole.log(\"Delivery Time: \" + deliveryTime);\r\nconst afterTimeCheck = deliveryTime >= requestAfterTime;\r\nconsole.log(\"Delivery is after \" + requestAfterTime + \"? \" + afterTimeCheck);\r\nconst beforeTimeCheck = deliveryTime <= requestBeforeTime;\r\nconsole.log(\"Delivery is before \" + requestBeforeTime + \"? \" + beforeTimeCheck);\r\nconst timeResult = beforeTimeCheck && afterTimeCheck;\r\nconsole.log(\"Fulfilled Sheila's time preference? \" + timeResult);\r\nconst overallCheck = timeResult && dayResult;\r\nconsole.log(\"Program scheduled well? \" + (overallCheck));"
                }
              ],
              "hints": []
            }
          }
        ]
      }
    ]
  }
}