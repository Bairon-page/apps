{
  "tutorial": {
    "id": 2651,
    "version": 4,
    "type": "challenges",
    "isNew": false,
    "codeLanguage": "python",
    "title": "Controle de Fluxo",
    "descriptionContent": "Exercícios de Desafio baseados em Controle de Fluxo",
    "shortDescriptionContent": "",
    "showInTrack": true,
    "iconBanner": null,
    "chapters": [
      {
        "id": 14664,
        "title": "Notificações lidas e não lidas",
        "type": "challengeLevel0",
        "lessons": [
          {
            "title": "Read and Unread Notifications",
            "id": 129692,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Vamos imprimir o número de notificações lidas ou não lidas que um usuário recebeu.\n\n1. Se `unread` não for `0`, imprima `You have {unread} unread messages`. Use f-string para exibir o valor de `unread` dentro da string.\n2. Caso contrário, imprima `No unread messages. Check your {read} read messages`. Use f-string para exibir o valor de `read` dentro da string.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "read = 5\r\nunread = 4",
                  "solvedContent": "read = 5\r\nunread = 4\r\nif unread != 0:\r\n print(f\"You have {unread} unread messages\")\r\nelse:\r\n print(f\"No unread messages. Check your {read} read messages\")"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 14665,
        "title": "Verificador de senha",
        "type": "challengeLevel0",
        "lessons": [
          {
            "title": "Password Checker",
            "id": 129693,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Vamos verificar se uma senha está correta usando Python.\n\n1. Se `actualPass` for igual a `enteredPass`, imprima `Login successful`.\n2. Caso contrário, imprima `Incorrect credentials. Please try again`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "actualPass = \"abc123\"\r\nenteredPass = \"Abc123\"",
                  "solvedContent": "actualPass = \"abc123\"\r\nenteredPass = \"Abc123\"\r\nif actualPass == enteredPass:\r\n print(\"Login successful\")\r\nelse:\r\n print(\"Incorrect credentials. Please try again\")"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 14666,
        "title": "Verificação de entrada",
        "type": "challengeLevel0",
        "lessons": [
          {
            "title": "Entry Check",
            "id": 129694,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Entrar em certos estabelecimentos como um clube depende de estar acima do limite de idade e ter uma reserva. Vamos escrever um programa em Python para verificar se uma pessoa pode entrar.\n\n1. Se `age` for maior ou igual a `18` e `hasReservation` for `True`, defina o `result` como `True`.\n2. Imprima `Entry granted: ` seguido pelo resultado. Por exemplo, se o resultado for `False`, então imprima `Entry granted: False`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "age = 21\r\nhasReservation = True\r\nresult = False",
                  "solvedContent": "age = 21\r\nhasReservation = True\r\nresult = False\r\nif age >= 18 and hasReservation:\r\n result = True\r\n\r\nprint(f\"Entry granted: {result}\")"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 14667,
        "title": "Inventário da Loja de Camisetas",
        "type": "challengeLevel0",
        "lessons": [
          {
            "title": "Shirt Store Inventory",
            "id": 129695,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Crie um programa de inventário simples para uma loja de camisetas. O programa deve aumentar a variável `sales` em 1 e diminuir a variável `inventory` em 1 quando uma camiseta for vendida.\n\n1. Entre a inicialização das variáveis e as instruções de impressão, aumente o valor da variável `sales` em `1` usando um operador.\n2. Diminua o valor da variável `inventory` em `1` usando um operador.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "sales = 0\r\ninventory = 10\r\n\r\n\r\nprint(f'Sales: {sales}')\r\nprint(f'Inventory: {inventory}')",
                  "solvedContent": "sales = 0\r\ninventory = 10\r\nsales += 1\r\ninventory -= 1\r\nprint(f'Sales: {sales}')\r\nprint(f'Inventory: {inventory}')"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 14668,
        "title": "Pare o Bot",
        "type": "challengeLevel0",
        "lessons": [
          {
            "title": "Stop the Bot",
            "id": 129696,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Crie um programa que nos lembre três vezes de parar o bot.\n\n1. Codifique um loop `while` que imprime `\"Reminder: Stop the bot!\"` quando `reminder_count` for menor que `3`.\n2. Após a instrução de impressão, aumente o valor de `reminder_count` em `1`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "reminder_count = 0\r\n\r\nprint(\"Reminder: Stop the bot!\")",
                  "solvedContent": "reminder_count = 0\r\nwhile reminder_count < 3:\r\n print(\"Reminder: Stop the bot!\")\r\n reminder_count += 1"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 14669,
        "title": "Verificação de Loop",
        "type": "challengeLevel0",
        "lessons": [
          {
            "title": "Loop Check",
            "id": 129697,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Escrevemos uma instrução `print` para nos informar que o programa entrou no loop. No entanto, o programa está em loop infinito, corrija isso antes que ele trave nosso computador!\n\n1. No `while` loop, altere o valor da variável `loop` de forma que `\"Entered the loop!\"` seja impresso apenas uma vez.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "loop = True\r\nwhile loop:\r\n print(\"Entered the loop!\")\r\n \r\n",
                  "solvedContent": "loop = True\r\nwhile loop:\r\n print(\"Entered the loop!\")\r\n loop = False"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 13091,
        "title": "Blackjack",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "Blackjack",
            "id": 118060,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Vamos programar uma versão simples de BlackJack em Python. Nesta versão, há dois jogadores que recebem duas cartas cada.\n\n`p1card1` e `p1card2` armazenam os valores das cartas do jogador um.\n\n`p2card1` e `p2card2` armazenam os valores das cartas do jogador dois.\n\n`p1check` armazena a soma das cartas do jogador um, e `p2check` armazena o mesmo para o jogador dois.\n\n1. Primeiro, vamos verificar se algum valor é igual ou maior que `21`.\n    - Se `p1check` ou `p2check` for `21`, defina o `status` como `blackjack`.\n    - Caso contrário, se `p1check` for maior que `21`, defina o `status` como `P1 lose`.\n    - Caso contrário, se `p2check` for maior que `21`, defina o `status` como `P2 lose`.\n    - Caso contrário, imprima `Checking player cards...`.\n2. Em segundo lugar, vamos comparar ambos os valores.\n    - Se `p1check` for maior que `p2check` e menor ou igual a `21`, defina o `winner` como `P1`.\n    - Caso contrário, se `p2check` for maior que `p1check` e menor ou igual a `21`, defina o `winner` como `P2`.\n    - Caso contrário, imprima `Draw`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "p1card1 = 10\r\np1card2 = 1\r\np2card1 = 10\r\np2card2 = 11\r\nstatus = \"\"\r\nwinner = \"\"\r\np1check = p1card1 + p1card2\r\np2check = p2card1 + p2card2\r\nprint(status)\r\nprint(\"Winner: \" + winner)",
                  "solvedContent": "p1card1 = 10\r\np1card2 = 1\r\np2card1 = 10\r\np2card2 = 11\r\nstatus = \"\"\r\nwinner = \"\"\r\np1check = p1card1 + p1card2\r\np2check = p2card1 + p2card2\r\n\r\nif p1check == 21 or p2check == 21:\r\n status = \"blackjack\"\r\nelif p1check > 21:\r\n status = \"P1 lose\"\r\nelif p2check > 21:\r\n status = \"P2 lose\"\r\nelse:\r\n print(\"Checking player cards...\")\r\n\r\nif p1check > p2check and p1check <= 21:\r\n winner = \"P1\"\r\nelif p1check < p2check and p2check <= 21:\r\n winner = \"P2\"\r\nelse:\r\n print(\"Draw\")\r\n\r\nprint(status)\r\nprint(\"Winner: \" + winner)"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 13094,
        "title": "Verificação de armazenamento",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "Storage check",
            "id": 118063,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Vamos escrever um programa em Python que exibe uma mensagem com base no espaço de armazenamento e no pin inserido.\n\n1. Se `stored` for menor que `limit` e `enteredPin` for igual a `correctPin`, imprima `{stored} GB cloud storage used. Limit is {limit} GB`. Use f-string para exibir o valor de `stored` e `limit`.\n2. Se `stored` for igual a `limit` e `enteredPin` for igual a `correctPin`, imprima `Cloud Storage limit reached`.\n3. Se `enteredPin` não for igual a `correctPin`, imprima `Pin not correct`.\n4. Caso contrário, imprima `System error`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "stored = 40\r\nlimit = 50\r\nenteredPin = 4351\r\ncorrectPin = 4351",
                  "solvedContent": "stored = 40\r\nlimit = 50\r\nenteredPin = 4351\r\ncorrectPin = 4351\r\nif stored < limit and enteredPin == correctPin:\r\n print(f\"{stored} GB cloud storage used. Limit is {limit} GB\")\r\nelif stored == limit and enteredPin == correctPin:\r\n print(\"Cloud Storage limit reached\")\r\nelif enteredPin != correctPin:\r\n print(\"Pin not correct\")\r\nelse:\r\n print(\"System error\")"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 13093,
        "title": "Relatório de saúde",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "Health report",
            "id": 118062,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Vamos escrever um programa em Python para verificar a pressão arterial (BP) e imprimir o resultado de acordo.\n\n1. Se `bpUpper` for igual a `120` e `bpLower` for igual a `80`, defina o `result` como `normal`.\n2. Se `bpUpper` for menor que `120` ou `bpLower` for menor que 80, defina o `result` como `low`.\n3. Caso contrário, defina o `result` como `high`.\n4. Imprima o resultado fora dos blocos condicionais.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "bpUpper = 118\r\nbpLower = 70\r\nresult = \"\"",
                  "solvedContent": "bpUpper = 118\r\nbpLower = 70\r\nresult = \"\"\r\nif bpUpper == 120 and bpLower == 80:\r\n result = \"normal\"\r\nelif bpUpper < 120 or bpLower < 80:\r\n result = \"low\"\r\nelse:\r\n result = \"high\"\r\n\r\nprint(\"BP \" + result)"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 13090,
        "title": "Iluminação automática",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "Automatic lighting",
            "id": 118059,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Vamos escrever um programa em Python para criar um sistema de iluminação automática.\n\n1. Se um objeto estiver presente e a luz estiver aumentada, então defina o `brightness` como `full`.\n2. Se um objeto estiver presente, mas a luz não estiver aumentada, então defina o `brightness` como `dim`.\n3. Caso contrário, defina o brilho como `off`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "objectPresent = True\r\nincreasedLight = False\r\nprint(\"Light brightness: \" + brightness)",
                  "solvedContent": "objectPresent = True\r\nincreasedLight = False\r\nbrightness = \"\"\r\nif objectPresent and increasedLight:\r\n brightness = \"full\"\r\nelif objectPresent and not increasedLight:\r\n brightness = \"dim\"\r\nelse:\r\n brightness = \"off\"\r\n\r\nprint(\"Light brightness: \" + brightness)"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 13089,
        "title": "Verificador de bateria",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "Battery checker",
            "id": 118058,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Nossos telefones exibem mensagens diferentes com base na porcentagem da bateria. Vamos escrever um programa em Python para informar os usuários sobre o estado da bateria.\n\n1. Se `percentage` for menor que `10`, imprima `Phone will shut down soon`.\n2. Se `percentage` for maior ou igual a `10` e menor que `20`, imprima `Low Battery`.\n3. Caso contrário, imprima o valor da porcentagem seguido de `%`. Por exemplo, se a porcentagem for `61`, imprima `61%`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "percentage = 49",
                  "solvedContent": "percentage = 49\r\nif percentage < 10:\r\n print(\"Phone will shut down soon\")\r\nelif percentage >= 10 and percentage < 20:\r\n print(\"Low Battery\")\r\nelse:\r\n print(f\"{percentage}%\")"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 13086,
        "title": "Calculadora de impostos",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "Tax calculator",
            "id": 118055,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Vamos escrever um programa em Python que calcula o imposto.\n\n1. Se a `income` for menor que `40000`, o imposto será `income * 0.1`.\n2. Se a `income` for maior ou igual a `40000` e menor que `170000`, o imposto será `income * 0.22`.\n3. Se a `income` for maior ou igual a `170000` e menor que `540000`, o imposto será `income * 0.32`.\n4. Caso contrário, o imposto será `income * 0.37`.\n5. Após as condicionais, imprima o valor do `tax`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "income = 44000\r\ntax = 0",
                  "solvedContent": "income = 44000\r\ntax = 0\r\nif income < 40000:\r\n tax = income * 0.1\r\nelif income >= 40000 and income < 170000:\r\n tax = income * 0.22\r\nelif income >= 170000 and income < 540000:\r\n tax = income * 0.32\r\nelse:\r\n tax = income * 0.37\r\n\r\nprint(f\"Tax: {tax}\")"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 13815,
        "title": "Para em range",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "For in range",
            "id": 123251,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Estamos criando um relógio que toca a cada hora.\n\n1. Codifique um loop `for` usando `range()` que irá iterar 12 vezes para as 12 horas que temos no relógio.\n2. Dentro do loop `for`, imprima `\"Ring\"`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "",
                  "solvedContent": "for i in range(12):\r\n print(\"Ring\")"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 13814,
        "title": "Loop while",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "While loop",
            "id": 123250,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Crie um programa para um passeio de montanha-russa. Há apenas 10 assentos disponíveis, queremos um programa que imprima o número de pessoas na montanha-russa para garantir que não esteja sobrecarregada.\n\n1. Escreva a condição para o loop while de forma que o valor da variável `counter` seja impresso de `1` até `10`.\n2. Após imprimir o valor da variável `counter`, use um operador para aumentar seu valor em `1`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "counter = 1\r\n\r\nwhile : \r\n  print(counter)\r\n",
                  "solvedContent": "counter = 1\r\n\r\nwhile counter <= 10: \r\n  print(counter)\r\n  counter += 1"
                }
              ],
              "hints": []
            }
          }
        ]
      }
    ]
  }
}