{
  "tutorial": {
    "id": 1896,
    "version": 12,
    "type": "course",
    "isNew": false,
    "codeLanguage": "javascript",
    "title": "Variáveis e Escopo no ES6",
    "descriptionContent": "Use diferentes maneiras de criar variáveis e entender o escopo.",
    "shortDescriptionContent": "",
    "showInTrack": true,
    "iconBanner": null,
    "chapters": [
      {
        "id": 12383,
        "title": "Variáveis Var",
        "type": "practiceLevel1",
        "lessons": [
          {
            "title": "Intro",
            "id": 112202,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Até agora, aprendemos muito sobre JavaScript, uma tecnologia que está em constante evolução.</p><p>Em 2015, houve uma grande revisão do JS chamada ECMAScript 2015 (ES6). Ela trouxe novas funcionalidades, como as duas variáveis que você já conhece.</p></body></html>"
          },
          {
            "title": "Var",
            "id": 112208,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Mas antes do uso de <code>let</code> e <code>const</code>, declarávamos variáveis usando a palavra-chave <code>var</code>, que significa <code>\"variável\"</code>.<br /></p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"var\" class=\"keyword\" /><text value=\" color = \" /><text value=\"&quot;red&quot;\" class=\"string\" /><text value=\";\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"0\" endIndex=\"3\" /></options></interaction></interactions></code><p visible-if=\"wrong\">Certifique-se de escolher <code>var</code>.</p></body></html>"
          },
          {
            "title": "Let and Const",
            "id": 112211,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>ES6 introduziu as variáveis <code>let</code> e <code>const</code> para superar as limitações com <code>var</code>. Portanto, você deve sempre tentar usar <code>let</code> e <code>const</code>.</p><p>Exiba os três diferentes tipos de variáveis no console na ordem em que as declaramos para ver que elas funcionam da mesma forma.</p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"var\" class=\"keyword\" /><text value=\" fullName = \" /><text value=\"&quot;Emma Watson&quot;\" class=\"string\" /><text value=\";\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" occupation = \" /><text value=\"&quot;Activist&quot;\" class=\"string\" /><text value=\";\" /><text type=\"break\" /><text value=\"let\" class=\"keyword\" /><text value=\" age = \" /><text value=\"30\" class=\"number\" /><text value=\";\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(fullName);\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(occupation);\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(age);\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"87\" endIndex=\"95\" /><option startIndex=\"110\" endIndex=\"120\" /><option startIndex=\"135\" endIndex=\"138\" /></options></interaction></interactions><output><content><text value=\"Emma Watson\" /><text type=\"break\" /><text value=\"Activist\" /><text type=\"break\" /><text value=\"30\" /></content></output></code><p visible-if=\"wrong\">Certifique-se de escolher <code>fullName</code> seguido de <code>occupation</code> e finalmente <code>age</code>.</p></body></html>"
          },
          {
            "title": "Let, const and var similarities",
            "id": 112212,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Usamos variáveis <code>var</code>, <code>let</code> e <code>const</code> para armazenar dados, e elas seguem as mesmas regras de nomenclatura que já aprendemos.</p><p>Escolha os nomes apropriados para as variáveis.</p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"var\" class=\"keyword\" /><text value=\" number = \" /><text value=\"20\" class=\"number\" /><text value=\";\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" player1 = \" /><text value=\"'Sonic'\" class=\"string\" /><text value=\";\" /><text type=\"break\" /><text value=\"let\" class=\"keyword\" /><text value=\" badWeather = \" /><text value=\"&quot;rainy&quot;\" class=\"string\" /><text value=\";\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(number);\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(player1);\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(badWeather);\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"4\" endIndex=\"10\" /><option startIndex=\"23\" endIndex=\"30\" /><option startIndex=\"46\" endIndex=\"56\" /></options></interaction></interactions><output><content><text value=\"20\" /><text type=\"break\" /><text value=\"Sonic\" /><text type=\"break\" /><text value=\"rainy\" /></content></output></code><p visible-if=\"wrong\">Certifique-se de escolher <code>number</code> seguido de <code>player1</code> e finalmente <code>badWeather</code>.</p></body></html>"
          },
          {
            "title": "Redeclaring var",
            "id": 112209,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Além da nomeação, essas variáveis se comportam de maneira bastante diferente. Por exemplo, <code>var</code> pode ser declarado várias vezes, enquanto <code>let</code> e <code>const</code> não podem.</p><p>Se exibirmos <code>surname</code> no console, veremos apenas o último valor que atribuímos à variável.</p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"var\" class=\"keyword\" /><text value=\" surname = \" /><text value=\"&quot;Smit&quot;\" class=\"string\" /><text value=\";\" /><text type=\"break\" /><text value=\"var\" class=\"keyword\" /><text value=\" surname = \" /><text value=\"&quot;Smith&quot;\" class=\"string\" /><text value=\";\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(surname);\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"57\" endIndex=\"64\" /><option correct=\"false\"><content><text value=\"firstName\" /></content></option></options></interaction></interactions><output><content><text value=\"Smith\" /></content></output></code><p visible-if=\"wrong\">Certifique-se de escolher <code>surname</code>.</p></body></html>"
          },
          {
            "title": "Redeclaring const",
            "id": 112213,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Podemos declarar <code>let</code> e <code>const</code> apenas uma vez. Se tentarmos redeclarar essas variáveis, receberemos um erro de sintaxe no console.</p><p>Exiba <code>color</code> no console para ver o erro.</p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" color = \" /><text value=\"&quot;Brow&quot;\" class=\"string\" /><text value=\";\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" color = \" /><text value=\"&quot;Brown&quot;\" class=\"string\" /><text value=\";\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(color);\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"57\" endIndex=\"62\" /></options></interaction></interactions><output><content><text value=\"SyntaxError: Identifier 'color' has already been declared\" /><text type=\"break\" /><text value=\" \" /></content></output></code><p visible-if=\"wrong\">Certifique-se de escolher <code>color</code>.</p></body></html>"
          },
          {
            "title": "Redeclaring let",
            "id": 112214,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>O mesmo acontece com uma variável <code>let</code> como <code>movie</code>. Não podemos declarar uma variável <code>let</code> várias vezes.</p><p>O que o console exibirá?</p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"let\" class=\"keyword\" /><text value=\" movie = \" /><text value=\"&quot;The Huner Games&quot;\" class=\"string\" /><text value=\";\" /><text type=\"break\" /><text value=\"let\" class=\"keyword\" /><text value=\" movie = \" /><text value=\"&quot;The Hunger Games&quot;\" class=\"string\" /><text value=\";\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(movie);\" /></content><output><content><text value=\"Uncaught SyntaxError: Identifier 'movie' has already been declared\" /></content></output></code><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\"><code>Uncaught SyntaxError: Identifier 'movie' has already been declared</code></item><item value=\"2\" correct=\"false\"><code>The Huner Games</code></item><item value=\"3\" correct=\"false\"><code>The Hunger Games</code></item></selection><p visible-if=\"wrong\"><code>Uncaught SyntaxError: Identifier 'movie' has already been declared</code>.</p></body></html>"
          },
          {
            "title": "Final explanation",
            "id": 112265,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Declarar variáveis com <code>let</code> e <code>const</code> é essencial para evitar muitos outros erros de código, então devemos usá-los como nossa primeira opção.</p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" canDance = \" /><text value=\"true\" class=\"literal\" /><text value=\";\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" canDance = \" /><text value=\"false\" class=\"literal\" /><text value=\";\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(canDance);\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"59\" endIndex=\"67\" /></options></interaction></interactions><output><content><text value=\"SyntaxError: Identifier 'canDance' has already been declared\" /></content></output></code><p visible-if=\"wrong\">Certifique-se de escolher <code>canDance</code>.</p></body></html>"
          },
          {
            "title": "Question 1",
            "id": 112210,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Verdadeiro ou falso? <code>var</code> é a única palavra reservada para criar variáveis.</p><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\">False</item><item value=\"2\" correct=\"false\">Verdadeiro</item></selection><p visible-if=\"wrong\">Certifique-se de escolher False.</p></body></html>"
          },
          {
            "title": "Question 2",
            "id": 112216,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>O que podemos armazenar nos três tipos de variáveis?</p><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\">Podemos armazenar todos os tipos de dados nos três tipos de variáveis</item><item value=\"2\" correct=\"false\">Podemos armazenar apenas objetos em <code>let</code> e <code>const</code> e números em <code>var</code></item></selection><p visible-if=\"wrong\">Podemos armazenar todos os tipos de dados nos três tipos de variáveis.</p></body></html>"
          },
          {
            "title": "Question 3",
            "id": 112217,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Qual tipo de variável podemos redeclarar?</p><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\"><code>var</code></item><item value=\"2\" correct=\"false\"><code>const</code></item><item value=\"3\" correct=\"false\"><code>let</code></item></selection><p visible-if=\"wrong\">Certifique-se de escolher <code>var</code>.</p></body></html>"
          },
          {
            "title": "Question 4",
            "id": 112224,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>O que significa ES6?</p><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\">ECMAScript 2015</item><item value=\"2\" correct=\"false\">JavaScript 2015</item><item value=\"3\" correct=\"false\">TypeScript 2015</item></selection><p visible-if=\"wrong\">ECMAScript 2015.</p></body></html>"
          },
          {
            "title": "Example 2",
            "id": 112219,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Crie uma nova variável <code>tree</code> usando <code>let</code>.</p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"let\" class=\"keyword\" /><text value=\" tree = \" /><text value=\"&quot;Crespon&quot;\" class=\"string\" /><text value=\";\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(tree);\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"0\" endIndex=\"3\" /><option startIndex=\"4\" endIndex=\"8\" /><option startIndex=\"9\" endIndex=\"10\" /><option startIndex=\"11\" endIndex=\"20\" /></options></interaction></interactions><output><content><text value=\"Crespon\" /></content></output></code><p visible-if=\"wrong\">Certifique-se de escolher <code>let</code> seguido de <code>tree</code> e depois <code>=</code>, <code>\"Crespon\"</code>.</p></body></html>"
          },
          {
            "title": "Example 3",
            "id": 112220,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Ordene as linhas para primeiro declarar a variável <code>year</code>, depois atualizá-la e, finalmente, exibi-la no console.</p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"let\" class=\"keyword\" /><text value=\" year = \" /><text value=\"2021\" class=\"number\" /><text value=\";\" /><text type=\"break\" /><text value=\"year = \" /><text value=\"2022\" class=\"number\" /><text value=\";\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(year);\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"0\" endIndex=\"16\" /><option startIndex=\"17\" endIndex=\"29\" /></options></interaction></interactions><output><content><text value=\"2022\" /></content></output></code><p visible-if=\"wrong\">Certifique-se de escolher <code>let year = 2021;</code> seguido de <code>year = 2022;</code>.</p></body></html>"
          },
          {
            "title": "Example 4",
            "id": 112267,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Declare a variável <code>forest</code> usando o tipo de variável <code>const</code>.</p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"let\" class=\"keyword\" /><text value=\" river = \" /><text value=\"&quot;Thames&quot;\" class=\"string\" /><text value=\";\" /><text type=\"break\" /><text value=\"var\" class=\"keyword\" /><text value=\" mountain = \" /><text value=\"&quot;Everest&quot;\" class=\"string\" /><text value=\";\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" forest = \" /><text value=\"&quot;Sequoia National Forest&quot;\" class=\"string\" /><text value=\";\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(forest);\" /></content><interactions><interaction type=\"validatedInput\" isDefault=\"true\" startIndex=\"48\" endIndex=\"53\" /></interactions><output><content><text value=\"Sequoia National Forest\" /></content></output></code><p visible-if=\"wrong\">Certifique-se de escolher <code>const</code>.</p></body></html>"
          }
        ]
      },
      {
        "id": 12389,
        "title": "Atualizar variáveis e Erros",
        "type": "practiceLevel1",
        "lessons": [
          {
            "title": "Intro",
            "id": 112215,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Já conhecemos os três tipos de variáveis <code>let</code>, <code>const</code> e <code>var</code>.</p><p>Vamos aprender mais sobre as diferenças entre eles para entender por que são usados em situações diferentes.</p></body></html>"
          },
          {
            "title": "Updating variables",
            "id": 112229,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Podemos atualizar variáveis <code>let</code> ou <code>var</code> com o operador de atribuição <code>=</code>. Mas não podemos mudar variáveis <code>const</code>. <code>const</code> é a abreviação de \"constante\".</p><p>\"Pi\" é um número matemático que não muda. Se o armazenarmos em um <code>const</code> e tentarmos alterá-lo, que erro obteremos?</p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" piNumber = \" /><text value=\"3.1416\" class=\"number\" /><text value=\";\" /><text type=\"break\" /><text value=\"piNumber = \" /><text value=\"90\" class=\"number\" /><text value=\";\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(piNumber);\" /></content><output><content><text value=\"TypeError: Assignment to constant variable.\" /></content></output></code><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\"><code>TypeError: Assignment to constant variable</code></item><item value=\"2\" correct=\"false\"><code>ReferenceError: piNumber is not defined</code></item></selection><p visible-if=\"wrong\"><code>TypeError: Assignment to constant variable</code>.</p></body></html>"
          },
          {
            "title": "Updating const - Arrays",
            "id": 112232,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Não podemos alterar um array inteiro armazenado em uma variável <code>const</code>. No entanto, podemos usar métodos de array para <em>atualizar</em> seu conteúdo.</p><p>Use o método de array correto para incluir o <code>newPresent</code> no <code>wardrobe</code>.</p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" newPresent = \" /><text value=\"&quot;Trousers&quot;\" class=\"string\" /><text value=\";\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" wardrobe = [\" /><text value=\"&quot;Shirt&quot;\" class=\"string\" /><text value=\"];\" /><text type=\"break\" /><text value=\"wardrobe.push(newPresent);\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(wardrobe);\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"59\" endIndex=\"67\" /><option startIndex=\"67\" endIndex=\"68\" /><option startIndex=\"68\" endIndex=\"72\" /></options></interaction></interactions><output><content><text value=\"[ 'Shirt', 'Trousers' ]\" /></content></output></code><p visible-if=\"wrong\">Certifique-se de escolher <code>wardrobe</code> seguido de <code>.</code> e finalmente <code>push</code>.</p></body></html>"
          },
          {
            "title": "Updating const - Object properties",
            "id": 112296,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Da mesma forma, não podemos mudar um objeto inteiro armazenado em uma constante, mas podemos <em>atualizar</em> suas propriedades.</p><p>Qual será a saída de <code>myClothes.shirts</code>?</p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" myClothes = {\" /><text type=\"break\" /><text value=\" \" /><text value=\"shirts\" class=\"attr\" /><text value=\": \" /><text value=\"1\" class=\"number\" /><text value=\",\" /><text type=\"break\" /><text value=\"};\" /><text type=\"break\" /><text value=\"myClothes.shirts++;\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(myClothes.shirts);\" /></content><output><content><text value=\"2\" /></content></output></code><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\">2</item><item value=\"2\" correct=\"false\">1</item></selection><p visible-if=\"wrong\">Certifique-se de escolher 2.</p></body></html>"
          },
          {
            "title": "Var Hoisting",
            "id": 112275,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Outra diferença entre os três tipos de variáveis é que podemos armazenar dados em uma variável <code>var</code> antes mesmo de declará-la.</p><p>Esse processo é chamado de \"hoisting\". Lembre-se de que <strong>isso não é uma boa prática</strong>.</p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"zodiacSign = \" /><text value=\"&quot;Aries&quot;\" class=\"string\" /><text value=\";\" /><text type=\"break\" /><text value=\"var\" class=\"keyword\" /><text value=\" zodiacSign;\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(zodiacSign);\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"22\" endIndex=\"25\" /></options></interaction></interactions><output><content><text value=\"Aries\" /></content></output></code><p visible-if=\"wrong\">Certifique-se de escolher <code>var</code>.</p></body></html>"
          },
          {
            "title": "let and const not hoisting",
            "id": 112274,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p><code>let</code> e <code>const</code> evitam hoisting porque sempre precisamos declarar essas variáveis antes de armazenar dados nelas.</p><p>Veremos um erro de inicialização no console se atribuirmos um valor a uma variável <code>const</code> ou <code>let</code> antes de tê-las declarado.</p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"car = \" /><text value=\"&quot;Renault&quot;\" class=\"string\" /><text value=\";\" /><text type=\"break\" /><text value=\"let\" class=\"keyword\" /><text value=\" car;\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(car);\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"17\" endIndex=\"20\" /><option startIndex=\"21\" endIndex=\"24\" /></options></interaction></interactions><output><content><text value=\"ReferenceError: Cannot access 'car' before initialization\" /></content></output></code><p visible-if=\"wrong\">Certifique-se de escolher <code>let</code> seguido de <code>car</code>.</p></body></html>"
          },
          {
            "title": "Question 1",
            "id": 112331,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Que tipo de variável você acharia apropriado para armazenar o número de Euler, que é sempre 2.71828?</p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" eulerNumber = \" /><text value=\"2.71828\" class=\"number\" /><text value=\";\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(eulerNumber);\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"0\" endIndex=\"5\" /><option correct=\"false\"><content><text value=\"var\" /></content></option><option correct=\"false\"><content><text value=\"let\" /></content></option></options></interaction></interactions><output><content><text value=\"2.71828\" /></content></output></code><p visible-if=\"wrong\">Certifique-se de escolher <code>const</code>.</p></body></html>"
          },
          {
            "title": "Question 2",
            "id": 112332,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>O que o console exibirá?</p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" placeOfBirth = \" /><text value=\"&quot;Tokyo&quot;\" class=\"string\" /><text value=\";\" /><text type=\"break\" /><text value=\"placeOfBirth = \" /><text value=\"&quot;Asunción&quot;\" class=\"string\" /><text value=\";\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(placeOfBirth);\" /></content><output><content><text value=\"TypeError: Assignment to constant variable.\" /></content></output></code><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\"><code>TypeError: Assignment to constant variable</code></item><item value=\"2\" correct=\"false\"><code>TypeError: Assignment to let variable</code></item><item value=\"3\" correct=\"false\">Assunção</item></selection><p visible-if=\"wrong\"><code>TypeError: Assignment to constant variable</code>.</p></body></html>"
          },
          {
            "title": "Question 3",
            "id": 112333,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Podemos atualizar uma <em>propriedade</em> de um objeto armazenado em uma variável <code>const</code>?</p><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\">Sim, você pode mudar as propriedades de um objeto armazenado em uma variável <code>const</code></item><item value=\"2\" correct=\"false\">Não</item></selection><p visible-if=\"wrong\">Sim, você pode mudar as propriedades de um objeto armazenado em uma variável <code>const</code>.</p></body></html>"
          },
          {
            "title": "Question 4",
            "id": 112334,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>O que o console exibirá?</p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"artist = \" /><text value=\"&quot;Frida Kahlo&quot;\" class=\"string\" /><text value=\";\" /><text type=\"break\" /><text value=\"let\" class=\"keyword\" /><text value=\" artist;\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(artist);\" /></content><output><content><text value=\"ReferenceError: Cannot access 'artist' before initialization\" /></content></output></code><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"false\"><code>TypeError: Assignment to constant variable</code></item><item value=\"2\" correct=\"true\"><code>ReferenceError: Cannot access 'artist' before initialization</code></item></selection><p visible-if=\"wrong\"><code>ReferenceError: Cannot access 'artist' before initialization</code>.</p></body></html>"
          },
          {
            "title": "Example 1",
            "id": 112335,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Ordene as linhas de código para evitar hoisting.</p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"var\" class=\"keyword\" /><text value=\" lotteryNumbers;\" /><text type=\"break\" /><text value=\"lotteryNumbers = [\" /><text value=\"20\" class=\"number\" /><text value=\", \" /><text value=\"34\" class=\"number\" /><text value=\", \" /><text value=\"645\" class=\"number\" /><text value=\", \" /><text value=\"01\" class=\"number\" /><text value=\"];\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(lotteryNumbers);\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"0\" endIndex=\"19\" /><option startIndex=\"20\" endIndex=\"55\" /></options></interaction></interactions><output><content><text value=\"[ 20, 34, 645, 1 ]\" /></content></output></code><p visible-if=\"wrong\">Certifique-se de escolher <code>var lotteryNumbers;</code> seguido de <code>lotteryNumbers = [20, 34, 645, 01];</code>.</p></body></html>"
          },
          {
            "title": "Example 2",
            "id": 112336,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Complete o código para que o valor da variável não possa ser atualizado.</p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" capitalOfZambia = \" /><text value=\"&quot;Lusaka&quot;\" class=\"string\" /><text value=\";\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(capitalOfZambia);\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"0\" endIndex=\"5\" /><option correct=\"false\"><content><text value=\"var\" /></content></option></options></interaction></interactions><output><content><text value=\"Lusaka\" /></content></output></code><p visible-if=\"wrong\">Certifique-se de escolher <code>const</code>.</p></body></html>"
          },
          {
            "title": "Example 3",
            "id": 112337,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Codifique um tipo de variável que <em>não</em> causará um erro.</p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"asleep = \" /><text value=\"true\" class=\"literal\" /><text value=\";\" /><text type=\"break\" /><text value=\"var\" class=\"keyword\" /><text value=\" asleep;\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(asleep);\" /></content><interactions><interaction type=\"validatedInput\" isDefault=\"true\" startIndex=\"15\" endIndex=\"18\" /></interactions><output><content><text value=\"true\" /></content></output></code><p visible-if=\"wrong\">Certifique-se de escolher <code>var</code>.</p></body></html>"
          }
        ]
      },
      {
        "id": 12384,
        "title": "Escopo",
        "type": "practiceLevel1",
        "lessons": [
          {
            "title": "Intro",
            "id": 112203,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Agora que estamos confortáveis com os três tipos de variáveis, vamos aprender sobre o conceito de \"escopo\".</p><p>\"Escopo\" é um termo usado para indicar onde as variáveis estão disponíveis. Existem partes do nosso código onde não temos acesso a elas.</p></body></html>"
          },
          {
            "title": "Local Scope",
            "id": 112339,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p><strong>Escopo</strong> ou <strong>escopo de função</strong> refere-se à parte do código dentro de uma função.</p><p>Aqui, <code>country</code> é uma variável local que podemos acessar apenas dentro da função <code>visitCountry</code>.</p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"function\" class=\"keyword\" /><text value=\" \" /><text value=\"visitCountry\" class=\"title\" /><text value=\"(\" /><text value=\"\" class=\"params\" /><text value=\") \" /><text value=\"{\" /><text type=\"break\" /><text value=\" \" /><text value=\"const\" class=\"keyword\" /><text value=\" country = \" /><text value=\"&quot;Argentina&quot;\" class=\"string\" /><text value=\";\" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(country);\" /><text type=\"break\" /><text value=\"}\" /><text type=\"break\" /><text value=\"visitCountry();\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"27\" endIndex=\"32\" /><option startIndex=\"44\" endIndex=\"55\" /><option startIndex=\"33\" endIndex=\"40\" /></options></interaction></interactions><output><content><text value=\"Argentina\" /></content></output></code><p visible-if=\"wrong\">Certifique-se de escolher <code>const</code> seguido de <code>country</code> e finalmente <code>Argentina\";</code>.</p></body></html>"
          },
          {
            "title": "Local Scope 2",
            "id": 112299,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Tentar acessar uma variável local de fora da função produzirá um erro.</p><p>Aqui, <code>myDiary</code> é privado, então não podemos acessá-lo de fora da função. Vamos tentar ver o que é exibido.</p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"function\" class=\"keyword\" /><text value=\" \" /><text value=\"readDiary\" class=\"title\" /><text value=\"(\" /><text value=\"\" class=\"params\" /><text value=\") \" /><text value=\"{\" /><text type=\"break\" /><text value=\" \" /><text value=\"const\" class=\"keyword\" /><text value=\" myDiary = \" /><text value=\"&quot;Dear diary, today...&quot;\" class=\"string\" /><text value=\";\" /><text type=\"break\" /><text value=\"}\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(myDiary);\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"78\" endIndex=\"85\" /><option correct=\"false\"><content><text value=\"myDiary()\" /></content></option></options></interaction></interactions><output><content><text value=\"ReferenceError: myDiary is not defined\" /></content></output></code><p visible-if=\"wrong\">Certifique-se de escolher <code>myDiary</code>.</p></body></html>"
          },
          {
            "title": "Global Scope",
            "id": 112298,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>O espaço fora de uma função é chamado de <strong>escopo global</strong>. Você pode pensar nele como o código entre funções.</p><p>Se declararmos <code>cityToVisit</code> no escopo global, podemos acessá-lo de qualquer lugar no código, inclusive dentro da função <code>travel</code>.</p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"let\" class=\"keyword\" /><text value=\" cityToVisit = \" /><text value=\"&quot;Salzburg&quot;\" class=\"string\" /><text value=\";\" /><text type=\"break\" /><text type=\"break\" /><text value=\"function\" class=\"keyword\" /><text value=\" \" /><text value=\"travel\" class=\"title\" /><text value=\"(\" /><text value=\"\" class=\"params\" /><text value=\") \" /><text value=\"{\" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;Let's go to &quot;\" class=\"string\" /><text value=\" + cityToVisit);\" /><text type=\"break\" /><text value=\"}\" /><text type=\"break\" /><text value=\"travel();\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(cityToVisit);\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"81\" endIndex=\"92\" /><option startIndex=\"119\" endIndex=\"130\" /></options></interaction></interactions><output><content><text value=\"Let's go to Salzburg\" /><text type=\"break\" /><text value=\"Salzburg\" /></content></output></code><p visible-if=\"wrong\">Certifique-se de escolher <code>cityToVisit</code> seguido de <code>cityToVisit</code>.</p></body></html>"
          },
          {
            "title": "Block scope",
            "id": 112301,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>O último tipo de escopo é chamado de <strong>escopo de bloco</strong>. É a parte do nosso código entre as chaves ( <code>{}</code> ) que pertencem a loops ou condicionais.</p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"if\" class=\"keyword\" /><text value=\" (\" /><text value=\"10\" class=\"number\" /><text value=\" === \" /><text value=\"10\" class=\"number\" /><text value=\") {\" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;This space here is block scope&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\"}\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"15\" endIndex=\"16\" /><option startIndex=\"65\" endIndex=\"66\" /></options></interaction></interactions><output><content><text value=\"This space here is block scope\" /></content></output></code><p visible-if=\"wrong\">Certifique-se de escolher <code>{</code> seguido de <code>}</code>.</p></body></html>"
          },
          {
            "title": "Block scope - var",
            "id": 112302,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Podemos acessar uma <code>var</code> declarada dentro de um bloco, de fora dele, o que pode causar confusão se a declararmos mais de uma vez.<br /></p><p>Aqui, estamos declarando a variável <code>access</code> duas vezes. Qual será a saída?</p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"var\" class=\"keyword\" /><text value=\" age = \" /><text value=\"18\" class=\"number\" /><text value=\";\" /><text type=\"break\" /><text value=\"var\" class=\"keyword\" /><text value=\" access = \" /><text value=\"true\" class=\"literal\" /><text value=\";\" /><text type=\"break\" /><text value=\"if\" class=\"keyword\" /><text value=\" (age === \" /><text value=\"18\" class=\"number\" /><text value=\") {\" /><text type=\"break\" /><text value=\" \" /><text value=\"var\" class=\"keyword\" /><text value=\" access = \" /><text value=\"false\" class=\"literal\" /><text value=\";\" /><text type=\"break\" /><text value=\"}\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(access);\" /></content><output><content><text value=\"false\" /></content></output></code><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\">false</item><item value=\"2\" correct=\"false\">true</item></selection><p visible-if=\"wrong\">Certifique-se de escolher false.</p></body></html>"
          },
          {
            "title": "Block scope - let, const",
            "id": 112303,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Se declararmos <code>let</code> e <code>const</code> em um escopo de bloco, só podemos acessá-los nesse bloco de código.</p><p>Aqui há duas variáveis <code>canDrive</code>, uma em um escopo global e a outra em um escopo de bloco. O que é exibido no console?</p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" drivingAge = \" /><text value=\"18\" class=\"number\" /><text value=\";\" /><text type=\"break\" /><text value=\"let\" class=\"keyword\" /><text value=\" canDrive = \" /><text value=\"false\" class=\"literal\" /><text value=\";\" /><text type=\"break\" /><text value=\"if\" class=\"keyword\" /><text value=\" (drivingAge === \" /><text value=\"18\" class=\"number\" /><text value=\") {\" /><text type=\"break\" /><text value=\" \" /><text value=\"let\" class=\"keyword\" /><text value=\" canDrive = \" /><text value=\"true\" class=\"literal\" /><text value=\";\" /><text type=\"break\" /><text value=\"}\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(canDrive);\" /></content><output><content><text value=\"false\" /></content></output></code><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\">A variável global</item><item value=\"2\" correct=\"false\">A variável de bloco</item></selection><p visible-if=\"wrong\">A variável global.</p></body></html>"
          },
          {
            "title": "Block scope - for",
            "id": 112304,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>O escopo de bloco também é útil para limitar onde usamos certas variáveis. É realmente útil para prevenir efeitos colaterais indesejados ou erros.</p><p>Aqui, podemos usar apenas a variável <code>index</code> no loop. Após o término do loop, <code>index</code> não está mais disponível.</p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"for\" class=\"keyword\" /><text value=\" (\" /><text value=\"let\" class=\"keyword\" /><text value=\" index = \" /><text value=\"1\" class=\"number\" /><text value=\"; index &lt;= \" /><text value=\"3\" class=\"number\" /><text value=\"; index++) {\" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;Let's count to three&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\"}\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(index);\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"95\" endIndex=\"100\" /></options></interaction></interactions><output><content><text value=\"Let's count to three\" /><text type=\"break\" /><text value=\"Let's count to three\" /><text type=\"break\" /><text value=\"Let's count to three\" /><text type=\"break\" /><text value=\"Uncaught ReferenceError: index is not defined\" /></content></output></code><p visible-if=\"wrong\">Certifique-se de escolher <code>index</code>.</p></body></html>"
          },
          {
            "title": "Question 1",
            "id": 112341,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Como é chamado o escopo dentro de uma função?</p><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\">Escopo Local ou de Função</item><item value=\"2\" correct=\"false\">Escopo Global</item></selection><p visible-if=\"wrong\">Escopo Local ou de Função.</p></body></html>"
          },
          {
            "title": "Question 2",
            "id": 112342,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Qual é o escopo da variável <code>dog</code>?</p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"function\" class=\"keyword\" /><text value=\" \" /><text value=\"annoyDog\" class=\"title\" /><text value=\"(\" /><text value=\"\" class=\"params\" /><text value=\") \" /><text value=\"{\" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;This cat doesn't like &quot;\" class=\"string\" /><text value=\" + dog.name + \" /><text value=\"&quot; the dog.&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\"}\" /><text type=\"break\" /><text value=\"var\" class=\"keyword\" /><text value=\" dog = {\" /><text type=\"break\" /><text value=\" \" /><text value=\"name\" class=\"attr\" /><text value=\": \" /><text value=\"&quot;Ryan&quot;\" class=\"string\" /><text value=\",\" /><text type=\"break\" /><text value=\" \" /><text value=\"eat\" class=\"attr\" /><text value=\": \" /><text value=\"&quot;dog food&quot;\" class=\"string\" /><text value=\",\" /><text type=\"break\" /><text value=\" \" /><text value=\"likes\" class=\"attr\" /><text value=\": [\" /><text value=\"&quot;ball&quot;\" class=\"string\" /><text value=\"]\" /><text type=\"break\" /><text value=\"};\" /><text type=\"break\" /><text value=\"annoyDog();\" /></content><output><content><text value=\"This cat doesn't like Ryan the dog.\" /></content></output></code><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\">Escopo Global</item><item value=\"2\" correct=\"false\">Escopo Local</item><item value=\"3\" correct=\"false\">Escopo de Bloco</item></selection><p visible-if=\"wrong\">Escopo Global.</p></body></html>"
          },
          {
            "title": "Question 3",
            "id": 112343,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>O escopo de bloco são as partes do código entre quais símbolos?</p><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\"><code>{ }</code></item><item value=\"2\" correct=\"false\"><code>[ ]</code></item></selection><p visible-if=\"wrong\"><code>{ }</code>.</p></body></html>"
          },
          {
            "title": "Question 4",
            "id": 112344,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Podemos acessar uma variável <code>var</code> declarada dentro de um escopo de bloco a partir de fora?</p><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\">Sim</item><item value=\"2\" correct=\"false\">Não</item></selection><p visible-if=\"wrong\">Certifique-se de escolher Sim.</p></body></html>"
          },
          {
            "title": "Example 1",
            "id": 112300,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Aqui, <code>neighborhood</code> é uma variável global, mas <code>BATH</code> é uma variável local, então o que o console exibirá?</p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"let\" class=\"keyword\" /><text value=\" neighborhood = {\" /><text type=\"break\" /><text value=\" \" /><text value=\"apartments\" class=\"attr\" /><text value=\": \" /><text value=\"13\" class=\"number\" /><text value=\",\" /><text type=\"break\" /><text value=\" \" /><text value=\"garden\" class=\"attr\" /><text value=\": \" /><text value=\"1\" class=\"number\" /><text type=\"break\" /><text value=\"};\" /><text type=\"break\" /><text type=\"break\" /><text value=\"function\" class=\"keyword\" /><text value=\" \" /><text value=\"fixMyHouse\" class=\"title\" /><text value=\"(\" /><text value=\"\" class=\"params\" /><text value=\") \" /><text value=\"{\" /><text type=\"break\" /><text value=\" \" /><text value=\"const\" class=\"keyword\" /><text value=\" BATH = \" /><text value=\"&quot;Fix Mirror&quot;\" class=\"string\" /><text value=\";\" /><text type=\"break\" /><text value=\"}\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(BATH);\" /></content><output><content><text value=\"ReferenceError: BATH is not defined\" /></content></output></code><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\">um ReferenceError</item><item value=\"2\" correct=\"false\">\"Consertar Espelho\"</item></selection><p visible-if=\"wrong\">um ReferenceError.</p></body></html>"
          },
          {
            "title": "Example 2",
            "id": 112345,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Crie uma variável <code>const</code> de escopo global e uma variável <code>let</code> de escopo de bloco.</p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" STUDY = \" /><text value=\"true\" class=\"literal\" /><text value=\";\" /><text type=\"break\" /><text value=\"if\" class=\"keyword\" /><text value=\" (STUDY) {\" /><text type=\"break\" /><text value=\" \" /><text value=\"let\" class=\"keyword\" /><text value=\" pass = \" /><text value=\"'You have passed the exam!'\" class=\"string\" /><text value=\";\" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(pass);\" /><text type=\"break\" /><text value=\"} \" /><text value=\"else\" class=\"keyword\" /><text value=\" {\" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;You have failed&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\"}\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"0\" endIndex=\"5\" /><option startIndex=\"34\" endIndex=\"37\" /></options></interaction></interactions><output><content><text value=\"You have passed the exam!\" /></content></output></code><p visible-if=\"wrong\">Certifique-se de escolher <code>const</code> seguido de <code>let</code>.</p></body></html>"
          },
          {
            "title": "Example 3",
            "id": 112340,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Que tipo de erro o console exibirá?</p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"for\" class=\"keyword\" /><text value=\" (\" /><text value=\"let\" class=\"keyword\" /><text value=\" index = \" /><text value=\"1\" class=\"number\" /><text value=\"; index &lt;= \" /><text value=\"3\" class=\"number\" /><text value=\"; index++) {\" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(index);\" /><text type=\"break\" /><text value=\"}\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(index);\" /></content><output><content><text value=\"ReferenceError: index is not defined\" /></content></output></code><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\">ReferenceError</item><item value=\"2\" correct=\"false\">ErroDeSintaxe</item></selection><p visible-if=\"wrong\">Certifique-se de escolher ReferenceError.</p></body></html>"
          },
          {
            "title": "Example 4",
            "id": 112346,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Qual é o escopo da variável <code>availableBand</code>?</p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"function\" class=\"keyword\" /><text value=\" \" /><text value=\"playMusic\" class=\"title\" /><text value=\"(\" /><text value=\"\" class=\"params\" /><text value=\") \" /><text value=\"{\" /><text type=\"break\" /><text value=\" \" /><text value=\"const\" class=\"keyword\" /><text value=\" band = [\" /><text value=\"&quot;Tina&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;Michael&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;Rue&quot;\" class=\"string\" /><text value=\"];\" /><text type=\"break\" /><text value=\" \" /><text value=\"if\" class=\"keyword\" /><text value=\" (band &amp;&amp; band.length) {\" /><text type=\"break\" /><text value=\"  \" /><text value=\"const\" class=\"keyword\" /><text value=\" availableBand = \" /><text value=\"&quot;Band is Available!&quot;\" class=\"string\" /><text value=\";\" /><text type=\"break\" /><text value=\"  \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(availableBand);\" /><text type=\"break\" /><text value=\" }\" /><text type=\"break\" /><text value=\"}\" /><text type=\"break\" /><text value=\"playMusic();\" /></content><output><content><text value=\"Band is Available!\" /></content></output></code><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\">Escopo de Bloco</item><item value=\"3\" correct=\"false\">Escopo Global</item></selection><p visible-if=\"wrong\">Escopo de Bloco.</p></body></html>"
          }
        ]
      }
    ]
  }
}