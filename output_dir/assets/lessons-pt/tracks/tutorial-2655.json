{
  "tutorial": {
    "id": 2655,
    "version": 4,
    "type": "challenges",
    "isNew": false,
    "codeLanguage": "python",
    "title": "Programação Orientada a Objetos",
    "descriptionContent": "Desafios baseados em Programação Orientada a Objetos",
    "shortDescriptionContent": "",
    "showInTrack": true,
    "iconBanner": null,
    "chapters": [
      {
        "id": 14688,
        "title": "Limite de Idade para Brinquedo",
        "type": "challengeLevel0",
        "lessons": [
          {
            "title": "Fair Ride Age Limit",
            "id": 129716,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Como voluntário em um festival, você acompanha as atrações sendo instaladas. Temos uma classe chamada `Ride` que armazena o nome da atração e o grupo etário adequado. Use instâncias dessa classe para acompanhar as atrações instaladas hoje.\n\n1. Crie uma nova instância da classe `Ride` chamada `roller_coaster` e especifique que seu nome é `Roller coaster` e uma atração para `adults`.\n2. Crie uma nova instância da classe `Ride` chamada `ferris_wheel` e especifique que seu nome é `Ferris wheel` e uma atração para `kids`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "class Ride:\r\n    def __init__(self, name, age_group):\r\n        self.name = name\r\n        self.age_group = age_group\r\n\r\n\r\nprint(roller_coaster.age_group)\r\nprint(ferris_wheel.name)",
                  "solvedContent": "class Ride:\r\n    def __init__(self, name, age_group):\r\n        self.name = name\r\n        self.age_group = age_group\r\nroller_coaster = Ride(\"Roller coaster\", \"adults\")\r\nferris_wheel = Ride(\"Ferris wheel\", \"kids\")\r\nprint(roller_coaster.age_group)\r\nprint(ferris_wheel.name)"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 14689,
        "title": "Menu de Bebidas do Café",
        "type": "challengeLevel0",
        "lessons": [
          {
            "title": "Cafe Drink Menu",
            "id": 129717,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Há um café nas proximidades que oferece uma nova variedade de bebidas todos os dias. Temos uma classe `Beverage` e duas instâncias: `fruity` e `cocoa`. Descubra o que há nas bebidas de hoje.\n\n1. Acesse a propriedade `name` da bebida `fruity` e imprima no console.\n2. Acesse a propriedade `is_alcoholic` da bebida `cocoa` e imprima no console.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "class Beverage:\r\n    def __init__(self, name, is_alcoholic):\r\n        self.name = name\r\n        self.is_alcoholic = is_alcoholic\r\n\r\nfruity = Beverage(\"Fruit punch\", False)\r\ncocoa = Beverage(\"Hot chocolate\", False)",
                  "solvedContent": "class Beverage:\r\n    def __init__(self, name, is_alcoholic):\r\n        self.name = name\r\n        self.is_alcoholic = is_alcoholic\r\n\r\nfruity = Beverage(\"Fruit punch\", False)\r\ncocoa = Beverage(\"Hot chocolate\", False)\r\nprint(fruity.name)\r\nprint(cocoa.is_alcoholic)"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 14690,
        "title": "Detalhes do Pet",
        "type": "challengeLevel0",
        "lessons": [
          {
            "title": "Pet Details",
            "id": 129718,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Você é um amante de animais e tem diferentes pets em casa. Seu irmão está te visitando e não consegue se lembrar dos nomes dos seus pets. Complete a classe `Pet` para ajudar seu irmão a associar o nome de um pet com suas propriedades, como sua família ou cor.\n\n1. Dentro da classe `Pet`, crie variáveis de instância `name`, `family`, `animal_type` e `color` para armazenar as informações específicas recebidas nos parâmetros.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "class Pet:\r\n    def __init__(self, name, family, animal_type, color):\r\n        \r\n        \r\nrio = Pet(\"Rio\", \"Macaw\", \"Parrot\", \"Blue\")\r\ncoco = Pet(\"Coco\", \"Poodle\", \"Dog\", \"White\")\r\nbud = Pet(\"Bud\", \"Labrador\", \"Dog\", \"Brown\")\r\ndaisy = Pet(\"Daisy\", \"Burmese\", \"Cat\", \"Grey\")\r\nprint(f\"{rio.name} is a {rio.color} colored {rio.family} {rio.animal_type}\")",
                  "solvedContent": "class Pet:\r\n    def __init__(self, name, family, animal_type, color):\r\n        self.name = name\r\n        self.family = family\r\n        self.animal_type = animal_type\r\n        self.color = color\r\n\r\nrio = Pet(\"Rio\", \"Macaw\", \"Parrot\", \"Blue\")\r\ncoco = Pet(\"Coco\", \"Poodle\", \"Dog\", \"White\")\r\nbud = Pet(\"Bud\", \"Labrador\", \"Dog\", \"Brown\")\r\ndaisy = Pet(\"Daisy\", \"Burmese\", \"Cat\", \"Grey\")\r\nprint(f\"{rio.name} is a {rio.color} colored {rio.family} {rio.animal_type}\")"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 14692,
        "title": "Instruções do Elevador",
        "type": "challengeLevel0",
        "lessons": [
          {
            "title": "Elevator Instructions",
            "id": 129720,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Este elevador está dizendo às pessoas que está se movendo, mas na realidade ele sempre permanece no mesmo andar.\n\n1. Atualize a propriedade `current_floor` para que o elevador se mova sempre que for chamado para fazê-lo.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "class Elevator:\r\n    def __init__(self):\r\n        self.current_floor = 0\r\n\r\n    def go_to_floor(self, floor):\r\n        if self.current_floor == floor:\r\n            print(f\"Elevator is in floor {floor}\")\r\n        else:\r\n            print(f\"Going to floor {floor}\")\r\n\r\nelevator = Elevator()\r\nelevator.go_to_floor(3)\r\nelevator.go_to_floor(3)",
                  "solvedContent": "class Elevator:\r\n    def __init__(self):\r\n        self.current_floor = 0\r\n\r\n    def go_to_floor(self, floor):\r\n        if self.current_floor == floor:\r\n            print(f\"Elevator is in floor {floor}\")\r\n        else:\r\n            print(f\"Going to floor {floor}\")\r\n            self.current_floor = floor\r\n\r\nelevator = Elevator()\r\nelevator.go_to_floor(3)\r\nelevator.go_to_floor(3)"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 14693,
        "title": "Máquina de Café",
        "type": "challengeLevel0",
        "lessons": [
          {
            "title": "Coffee Machine",
            "id": 129721,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Máquinas de café podem fazer uma quantidade limitada de tipos de café.\n\n1. Verifique se o `coffee_type` é válido para nossa máquina e armazene o resultado na variável `is_valid_coffee_type`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "class CoffeeMachine:\r\n    def __init__(self):\r\n        self.coffee_options = {\"Capuccino\", \"Espresso\"}\r\n        \r\n    def make_coffee(self, coffee_type):\r\n        is_valid_coffee_type = \r\n        if is_valid_coffee_type:\r\n            return f\"{coffee_type} made!\"\r\n        else:\r\n            return f\"{coffee_type} is not a valid option!\"\r\n\r\nmachine = CoffeeMachine()\r\nprint(machine.make_coffee(\"Espresso\"))\r\nprint(machine.make_coffee(\"Moka\"))",
                  "solvedContent": "class CoffeeMachine:\r\n    def __init__(self):\r\n        self.coffee_options = {\"Capuccino\", \"Espresso\"}\r\n        \r\n    def make_coffee(self, coffee_type):\r\n        is_valid_coffee_type = coffee_type in self.coffee_options\r\n        if is_valid_coffee_type:\r\n            return f\"{coffee_type} made!\"\r\n        else:\r\n            return f\"{coffee_type} is not a valid option!\"\r\n\r\nmachine = CoffeeMachine()\r\nprint(machine.make_coffee(\"Espresso\"))\r\nprint(machine.make_coffee(\"Moka\"))"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 14694,
        "title": "Castelos",
        "type": "challengeLevel0",
        "lessons": [
          {
            "title": "Castles",
            "id": 129722,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Castelos podem ser feitos de diferentes materiais, ajude-nos a descrever a classe `WoodCastle`.\n\n1. Crie o método apropriado para descrever `WoodCastle`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "class Castle:\r\n    def description(self):\r\n        return \"This is a generic castle.\"\r\n\r\nclass StoneCastle(Castle):\r\n    def description(self):\r\n        return \"This is a stone castle.\"\r\n\r\nclass WoodCastle(Castle):\r\n\r\nstone_castle = StoneCastle()\r\nstone_castle_description = stone_castle.description()\r\nprint(stone_castle_description)\r\n\r\nwood_castle = WoodCastle()\r\nwood_castle_description = wood_castle.description()\r\nprint(wood_castle_description)\r\n",
                  "solvedContent": "class Castle:\r\n    def description(self):\r\n        return \"This is a generic castle.\"\r\n\r\nclass StoneCastle(Castle):\r\n    def description(self):\r\n        return \"This is a stone castle.\"\r\n\r\nclass WoodCastle(Castle):\r\n    def description(self):\r\n        return \"This is a wood castle\"\r\n\r\nstone_castle = StoneCastle()\r\nstone_castle_description = stone_castle.description()\r\nprint(stone_castle_description)\r\n\r\nwood_castle = WoodCastle()\r\nwood_castle_description = wood_castle.description()\r\nprint(wood_castle_description)\r\n"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 13903,
        "title": "Criando um método",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "Creating a method",
            "id": 123716,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Você adora viajar e explora novos destinos todos os anos. Para te ajudar a se organizar, você criou uma classe `Destination` que mantém o controle dos detalhes de viagem para cada lugar que visita.\n\n1. Crie um método `detail` na classe `Destination` que use todas as suas propriedades para retornar o detalhe da viagem no seguinte formato:\n```\nTraveling to <country> by <mode> for 15 <number_of_days>\n```",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "class Destination:\r\n    def __init__(self, country, mode, number_of_days):\r\n        self.country = country\r\n        self.mode = mode\r\n        self.number_of_days = number_of_days\r\n        \r\n    \r\n        \r\ndestination_one = Destination(\"Italy\", \"plane\", 10)\r\ndestination_two = Destination(\"England\", \"plane\", 5)",
                  "solvedContent": "class Destination:\r\n    def __init__(self, country, mode, number_of_days):\r\n        self.country = country\r\n        self.mode = mode\r\n        self.number_of_days = number_of_days\r\n        \r\n    def detail(self):\r\n        return f\"Traveling to {self.country} by {self.mode} for {self.number_of_days} days\"\r\n\r\ndestination_one = Destination(\"Italy\", \"plane\", 10)\r\ndestination_two = Destination(\"England\", \"plane\", 5)"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 13904,
        "title": "Criando múltiplos métodos",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "Creating multiple methods",
            "id": 123717,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Você organiza um workshop anual para estudantes. Os dados deles são armazenados em uma instância de classe com a propriedade `is_registered` inicialmente definida como `False`. Crie dois métodos na classe `Register` para permitir que os estudantes façam e cancelem inscrições conforme necessário.\n\n1. Crie um método de classe `register_student` que define a propriedade `is_registered` como `True` e retorna `<name> is registered!`\n3. Crie um método de classe `cancel_registration` que define a propriedade `is_registered` como `False` e retorna um texto no seguinte formato:\n ```\n<name>'s registration canceled!\n```",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "class Register:\r\n def __init__(self, name, is_registered):\r\n  self.name = name\r\n  self.is_registered = is_registered\r\n\r\n\r\n\r\n\r\n\r\n\r\ntooba = Register(\"Tooba\", False)\r\nprint(tooba.register_student())\r\nprint(tooba.cancel_registration())",
                  "solvedContent": "class Register:\r\n def __init__(self, name, is_registered):\r\n  self.name = name\r\n  self.is_registered = is_registered\r\n     \r\n def register_student(self):\r\n  self.is_registered = True\r\n  return f\"{self.name} is registered!\"\r\n     \r\n def cancel_registration(self):\r\n  self.is_registered = False\r\n  return f\"{self.name}'s registration canceled!\"\r\ntooba = Register(\"Tooba\", False)\r\nprint(tooba.register_student())\r\nprint(tooba.cancel_registration())"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 13966,
        "title": "Classes e métodos",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "Classes and methods",
            "id": 124062,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Existem muitos tipos de barcos. Cada tipo diferente tem uma maneira diferente de se preparar para navegar, mas todos os barcos têm uma coisa em comum. O capitão é o primeiro a se preparar para navegar.\n\n1. Complete a classe `Sailboat` que armazena a quantidade de velas que o barco possui e crie o método apropriado para que o Sailboat possa se preparar para navegar! Lembre-se de que a preparação de todos os barcos para navegar começa da mesma forma! Você pode usar a classe `Rowboat` como orientação para o desafio.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "class Boat:\r\n    def __init__(self, captain):\r\n        self.captain = captain\r\n\r\n    def prepare_to_sail(self):\r\n        print(f\"Captain {self.captain} is preparing to sail!\")\r\n\r\nclass Rowboat(Boat):\r\n    def __init__(self, captain, row_amount):\r\n        self.captain = captain\r\n        self.row_amount = row_amount\r\n\r\n    def prepare_to_sail(self):\r\n        super().prepare_to_sail()\r\n        print(f\"Preparing {self.row_amount} rows!\")\r\n\r\nclass Sailboat(Boat):\r\n\r\nrowboat = Rowboat(captain=\"Hook\", row_amount=4)\r\nrowboat.prepare_to_sail()\r\n\r\nsailboat = Sailboat(captain=\"Jack Sparrow\", sail_amount=5)\r\nsailboat.prepare_to_sail()",
                  "solvedContent": "class Boat:\r\n    def __init__(self, captain):\r\n        self.captain = captain\r\n\r\n    def prepare_to_sail(self):\r\n        print(f\"Captain {self.captain} is preparing to sail!\")\r\n\r\nclass Rowboat(Boat):\r\n    def __init__(self, captain, row_amount):\r\n        self.captain = captain\r\n        self.row_amount = row_amount\r\n\r\n    def prepare_to_sail(self):\r\n        super().prepare_to_sail()\r\n        print(f\"Preparing {self.row_amount} rows!\")\r\n\r\nclass Sailboat(Boat):\r\n    def __init__(self, captain, sail_amount):\r\n        self.captain = captain\r\n        self.sail_amount = sail_amount\r\n    \r\n    def prepare_to_sail(self):\r\n        super().prepare_to_sail()\r\n        print(f\"Preparing {self.sail_amount} sails!\")\r\n\r\nrowboat = Rowboat(captain=\"Hook\", row_amount=4)\r\nrowboat.prepare_to_sail()\r\n\r\nsailboat = Sailboat(captain=\"Jack Sparrow\", sail_amount=5)\r\nsailboat.prepare_to_sail()"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 13965,
        "title": "Usando self",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "Using self",
            "id": 124131,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Uma banda é uma sinergia cativante de mentes musicais, com indivíduos talentosos manejando diferentes instrumentos, criando harmonias que acendem nossas almas.\n\n1. Complete os métodos `add_musician` que adiciona um músico à banda e `perform` que avisa a todos que a banda está começando a se apresentar. Lembre-se de que, para uma banda começar uma apresentação, cada músico que pertence à banda tem que tocar seu respectivo instrumento!",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "class Musician:\r\n    def __init__(self, name, instrument):\r\n        self.name = name\r\n        self.instrument = instrument\r\n\r\n    def play_instrument(self):\r\n        print(f\"{self.name} is playing the {self.instrument}.\")\r\n\r\nclass Band:\r\n    def __init__(self, name):\r\n        self.name = name\r\n        self.musicians = []\r\n\r\n    def add_musician(self, musician):\r\n\r\n    def perform(self):\r\n        print(f\"{self.name} is starting the performance!\")\r\n\r\nguitarist = Musician(\"John\", \"guitar\")\r\ndrummer = Musician(\"Sarah\", \"drums\")\r\n\r\nband = Band(\"Baangtron\")\r\nband.add_musician(guitarist)\r\nband.add_musician(drummer)\r\n\r\nband.perform()",
                  "solvedContent": "class Musician:\r\n    def __init__(self, name, instrument):\r\n        self.name = name\r\n        self.instrument = instrument\r\n\r\n    def play_instrument(self):\r\n        print(f\"{self.name} is playing the {self.instrument}.\")\r\n\r\nclass Band:\r\n    def __init__(self, name):\r\n        self.name = name\r\n        self.musicians = []\r\n\r\n    def add_musician(self, musician):\r\n        self.musicians.append(musician)\r\n\r\n    def perform(self):\r\n        print(f\"{self.name} is starting the performance!\")\r\n        for musician in self.musicians:\r\n            musician.play_instrument()\r\n\r\nguitarist = Musician(\"John\", \"guitar\")\r\ndrummer = Musician(\"Sarah\", \"drums\")\r\n\r\nband = Band(\"Baangtron\")\r\nband.add_musician(guitarist)\r\nband.add_musician(drummer)\r\n\r\nband.perform()"
                }
              ],
              "hints": []
            }
          }
        ]
      }
    ]
  }
}