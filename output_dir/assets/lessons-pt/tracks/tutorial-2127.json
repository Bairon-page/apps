{
  "tutorial": {
    "id": 2127,
    "version": 9,
    "type": "course",
    "isNew": false,
    "codeLanguage": "node",
    "title": "Middleware",
    "descriptionContent": "Aprenda o que é middleware e como usá-lo no seu app Express",
    "shortDescriptionContent": "",
    "showInTrack": true,
    "iconBanner": null,
    "chapters": [
      {
        "id": 15056,
        "title": "Middleware Interno",
        "type": "practiceLevel1",
        "lessons": [
          {
            "title": "Intro I",
            "id": 122314,
            "contentType": "interactive",
            "images": [
              {
                "id": "8e582a28-69f5-4ce1-8b1a-3bd18cf017c0"
              }
            ],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Middleware refere-se a funções que atuam como uma camada intermediária entre o servidor web e a aplicação.</p><p>Essa camada intermediária permite uma interação mais eficiente entre o servidor e o cliente.</p><img src=\"8e582a28-69f5-4ce1-8b1a-3bd18cf017c0\" visible-if=\"always\" /></body></html>"
          },
          {
            "title": "Intro II",
            "id": 122332,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Você pode usar middleware para tarefas como registrar informações, analisar requisições, autenticação e mais.</p></body></html>"
          },
          {
            "title": ".use() - Copy",
            "id": 132746,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>No Express, adicionamos middleware com o método <code>use</code> no objeto app do Express.</p><code version=\"2\" codelang=\"javascript\" name=\"app.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" express = \" /><text value=\"require\" class=\"built_in\" /><text value=\"(\" /><text value=\"&quot;express&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" app = express(); \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"app.use(); \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"app.listen(\" /><text value=\"3000\" class=\"number\" /><text value=\", () =&gt; { \" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;Server runs on port 3000&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"});\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"63\" endIndex=\"66\" /><option startIndex=\"66\" endIndex=\"67\" /><option startIndex=\"67\" endIndex=\"70\" /></options></interaction></interactions><output><content><text value=\"Server runs on port 3000\" /></content></output></code><p visible-if=\"wrong\">Certifique-se de escolher <code>app</code> seguido de <code>.</code> e finalmente <code>use</code>.</p></body></html>"
          },
          {
            "title": "Built-in Middleware",
            "id": 122317,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Nós passamos o middleware que queremos usar como um argumento para a função <code>use</code>.</p><p><code>express.json</code> analisa solicitações recebidas que contêm cargas JSON, convertendo-as em um objeto JS que o servidor pode processar prontamente.</p><code version=\"2\" codelang=\"javascript\" name=\"app.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" express = \" /><text value=\"require\" class=\"built_in\" /><text value=\"(\" /><text value=\"&quot;express&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" app = express(); \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"app.use(express.json()); \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"app.post(\" /><text value=\"&quot;/songs&quot;\" class=\"string\" /><text value=\", (req, res) =&gt; { \" /><text type=\"break\" /><text value=\" \" /><text value=\"const\" class=\"keyword\" /><text value=\" body = req.body; \" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(body); \" /><text type=\"break\" /><text value=\"}); \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"app.listen(\" /><text value=\"3000\" class=\"number\" /><text value=\", () =&gt; { \" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;Server runs on port 3000&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"});\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"71\" endIndex=\"78\" /><option startIndex=\"78\" endIndex=\"79\" /><option startIndex=\"79\" endIndex=\"85\" /><option correct=\"false\"><content><text value=\"use()\" /></content></option></options></interaction></interactions><output><content><text value=\"Server runs on port 3000\" /><text type=\"break\" /><text value=\"{\" /><text type=\"break\" /><text value=\"  &quot;title&quot;: &quot;Party in the USA&quot;,\" /><text type=\"break\" /><text value=\"  &quot;artist&quot;: &quot;Miley Cyrus&quot;\" /><text type=\"break\" /><text value=\"}\" /></content></output></code><p visible-if=\"wrong\">Certifique-se de escolher <code>express</code> seguido de <code>.</code> e finalmente <code>json()</code>.</p></body></html>"
          },
          {
            "title": "Built-in Middleware - Copy",
            "id": 132755,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Outro middleware comumente usado no Express é <code>express.urlencoded</code>.</p><p>Este middleware é essencial ao lidar com dados de formulário codificados em URL, que são normalmente enviados através de formulários HTML.</p><code version=\"2\" codelang=\"javascript\" name=\"app.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" express = \" /><text value=\"require\" class=\"built_in\" /><text value=\"(\" /><text value=\"&quot;express&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" app = express(); \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"app.use(express.urlencoded()); \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"app.post(\" /><text value=\"&quot;/submit&quot;\" class=\"string\" /><text value=\", (req, res) =&gt; { \" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(req.body); \" /><text type=\"break\" /><text value=\" res.send(\" /><text value=\"&quot;Form data received&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"}); \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"app.listen(\" /><text value=\"3000\" class=\"number\" /><text value=\", () =&gt; { \" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;Server runs on port 3000&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"});\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"71\" endIndex=\"78\" /><option startIndex=\"78\" endIndex=\"79\" /><option startIndex=\"79\" endIndex=\"91\" /><option correct=\"false\"><content><text value=\"json()\" /></content></option></options></interaction></interactions><output><content><text value=\"Server runs on port 3000\" /><text type=\"break\" /><text value=\"{\" /><text type=\"break\" /><text value=\" name: &quot;Paula&quot;, age: 57\" /><text type=\"break\" /><text value=\"}\" /></content></output></code><p visible-if=\"wrong\">Certifique-se de escolher <code>express</code> seguido de <code>.</code> e finalmente <code>urlencoded()</code>.</p></body></html>"
          },
          {
            "title": "Built-in Middleware - Copy",
            "id": 132756,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Podemos também aplicar middleware apenas a rotas selecionadas passando-o como o segundo argumento dos métodos de rota.</p><p>Vamos fazer o endpoint <code>\"/songs\"</code> usar o middleware JSON.</p><code version=\"2\" codelang=\"javascript\" name=\"app.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" express = \" /><text value=\"require\" class=\"built_in\" /><text value=\"(\" /><text value=\"&quot;express&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" app = express(); \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"app.post(\" /><text value=\"&quot;/songs&quot;\" class=\"string\" /><text value=\", express.json(), (req, res) =&gt; { \" /><text type=\"break\" /><text value=\" \" /><text value=\"const\" class=\"keyword\" /><text value=\" body = req.body; \" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(body); \" /><text type=\"break\" /><text value=\"}); \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"app.get(\" /><text value=\"&quot;/&quot;\" class=\"string\" /><text value=\", (req, res) =&gt; { \" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;I don't need it!&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"}); \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"app.listen(\" /><text value=\"3000\" class=\"number\" /><text value=\", () =&gt; { \" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;Server runs on port 3000&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"});\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"82\" endIndex=\"89\" /><option startIndex=\"89\" endIndex=\"90\" /><option startIndex=\"90\" endIndex=\"96\" /><option correct=\"false\"><content><text value=\"use()\" /></content></option></options></interaction></interactions><output><content><text value=\"Server runs on port 3000\" /><text type=\"break\" /><text value=\"{\" /><text type=\"break\" /><text value=\"  &quot;title&quot;: &quot;Party in the USA&quot;,\" /><text type=\"break\" /><text value=\"  &quot;artist&quot;: &quot;Miley Cyrus&quot;\" /><text type=\"break\" /><text value=\"}\" /></content></output></code><p visible-if=\"wrong\">Certifique-se de escolher <code>express</code> seguido de <code>.</code> e finalmente <code>json()</code>.</p></body></html>"
          },
          {
            "title": "Question: Built-in Middleware",
            "id": 122319,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Qual é um exemplo de middleware embutido para Express?</p><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\"><code>express.json</code></item><item value=\"2\" correct=\"false\">Nosso middleware personalizado</item></selection><p visible-if=\"wrong\">Certifique-se de escolher <code>express.json</code>.</p></body></html>"
          },
          {
            "title": ".use() - Copy - Copy",
            "id": 132747,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Use o middleware JSON embutido.</p><code version=\"2\" codelang=\"javascript\" name=\"app.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" express = \" /><text value=\"require\" class=\"built_in\" /><text value=\"(\" /><text value=\"&quot;express&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" app = express(); \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"app.use(express.json()); \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"app.listen(\" /><text value=\"3000\" class=\"number\" /><text value=\", () =&gt; { \" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;Server runs on port 3000&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"});\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"71\" endIndex=\"78\" /><option startIndex=\"78\" endIndex=\"79\" /><option startIndex=\"79\" endIndex=\"83\" /><option startIndex=\"83\" endIndex=\"84\" /><option startIndex=\"84\" endIndex=\"85\" /></options></interaction></interactions><output><content><text value=\"Server runs on port 3000\" /></content></output></code><p visible-if=\"wrong\">Certifique-se de escolher <code>express</code> seguido de <code>.</code> e depois <code>json</code>, <code>(</code>, <code>)</code>.</p></body></html>"
          },
          {
            "title": "Lesson #9",
            "id": 132757,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Podemos usar middleware embutido como <code>express.json</code> como um argumento em um manipulador de rota?</p><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\">Sim, se não quisermos aplicá-lo a todos os endpoints</item><item value=\"2\" correct=\"false\">Não, middleware embutido só pode ser usado globalmente</item></selection><p visible-if=\"wrong\">Sim, se não quisermos aplicá-lo a todos os endpoints.</p></body></html>"
          },
          {
            "title": ".use() - Copy - Copy - Copy",
            "id": 132758,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Complete o código para habilitar o uso de middleware embutido.</p><code version=\"2\" codelang=\"javascript\" name=\"app.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" express = \" /><text value=\"require\" class=\"built_in\" /><text value=\"(\" /><text value=\"&quot;express&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" app = express(); \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"app.use(express.json()); \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"app.listen(\" /><text value=\"3000\" class=\"number\" /><text value=\", () =&gt; { \" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;Server runs on port 3000&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"});\" /></content><interactions><interaction type=\"validatedInput\" isDefault=\"true\" startIndex=\"67\" endIndex=\"70\" /></interactions><output><content><text value=\"Server runs on port 3000\" /></content></output></code><p visible-if=\"wrong\">Certifique-se de escolher <code>use</code>.</p></body></html>"
          },
          {
            "title": "Lesson #12",
            "id": 132761,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Como aplicamos middleware a uma rota específica?</p><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\">Passe como o segundo argumento no método route</item><item value=\"2\" correct=\"false\">Use <code>app.use</code> para cada rota</item></selection><p visible-if=\"wrong\">Passe como o segundo argumento no método route.</p></body></html>"
          }
        ]
      },
      {
        "id": 15057,
        "title": "Middleware Personalizado",
        "type": "practiceLevel1",
        "lessons": [
          {
            "title": ".use()",
            "id": 122330,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Também podemos criar nosso próprio middleware personalizado, que realiza ações específicas que definimos. Fazemos isso criando uma função.</p><p>Para começar, definimos uma função com dois parâmetros.</p><code version=\"2\" codelang=\"javascript\" name=\"app.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" express = \" /><text value=\"require\" class=\"built_in\" /><text value=\"(\" /><text value=\"&quot;express&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" app = express(); \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" customMiddleware = \" /><text value=\"(\" /><text value=\"req, res\" class=\"params\" /><text value=\") =&gt;\" /><text value=\" { \" /><text type=\"break\" /><text value=\"  \" /><text type=\"break\" /><text value=\"}; \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"app.get(\" /><text value=\"&quot;/&quot;\" class=\"string\" /><text value=\", (req, res) =&gt; { \" /><text type=\"break\" /><text value=\" res.send(\" /><text value=\"&quot;Hello from the root route!&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"}); \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"app.listen(\" /><text value=\"3000\" class=\"number\" /><text value=\", () =&gt; { \" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;Server runs on port 3000&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"});\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"88\" endIndex=\"98\" /><option startIndex=\"99\" endIndex=\"101\" /><option startIndex=\"102\" endIndex=\"103\" /><option startIndex=\"108\" endIndex=\"109\" /></options></interaction></interactions></code><p visible-if=\"wrong\">Certifique-se de escolher <code>(req, res)</code> seguido de <code>=&gt;</code> e depois <code>{</code>, <code>}</code>.</p></body></html>"
          },
          {
            "title": ".use() - Copy",
            "id": 132749,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Vamos criar um middleware para registrar cada solicitação recebida e imprimir o método utilizado.</p><code version=\"2\" codelang=\"javascript\" name=\"app.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" express = \" /><text value=\"require\" class=\"built_in\" /><text value=\"(\" /><text value=\"&quot;express&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" app = express(); \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" customMiddleware = \" /><text value=\"(\" /><text value=\"req, res\" class=\"params\" /><text value=\") =&gt;\" /><text value=\" { \" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;Incoming request...&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"`Request type: \" /><text value=\"${req.method}\" class=\"subst\" /><text value=\"`\" /><text value=\"); \" /><text type=\"break\" /><text value=\"}; \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"app.get(\" /><text value=\"&quot;/&quot;\" class=\"string\" /><text value=\", (req, res) =&gt; { \" /><text type=\"break\" /><text value=\" res.send(\" /><text value=\"&quot;Hello from the root route!&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"}); \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"app.listen(\" /><text value=\"3000\" class=\"number\" /><text value=\", () =&gt; { \" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;Server runs on port 3000&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"});\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"106\" endIndex=\"117\" /><option startIndex=\"144\" endIndex=\"155\" /><option startIndex=\"173\" endIndex=\"183\" /></options></interaction></interactions></code><p visible-if=\"wrong\">Certifique-se de escolher <code>console.log</code> seguido de <code>console.log</code> e finalmente <code>req.method</code>.</p></body></html>"
          },
          {
            "title": ".use() - Copy - Copy",
            "id": 132750,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Para completar o middleware, devemos chamar a função next para passar o controle para o próximo middleware ou manipulador de rota.</p><p>Isso permite que os objetos de request e response continuem se movendo através do pipeline.</p><code version=\"2\" codelang=\"javascript\" name=\"app.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" express = \" /><text value=\"require\" class=\"built_in\" /><text value=\"(\" /><text value=\"&quot;express&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" app = express(); \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" customMiddleware = \" /><text value=\"(\" /><text value=\"req, res, next\" class=\"params\" /><text value=\") =&gt;\" /><text value=\" { \" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;Incoming request...&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"`Request type: \" /><text value=\"${req.method}\" class=\"subst\" /><text value=\"`\" /><text value=\"); \" /><text type=\"break\" /><text value=\" next(); \" /><text type=\"break\" /><text value=\"}; \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"app.get(\" /><text value=\"&quot;/&quot;\" class=\"string\" /><text value=\", (req, res) =&gt; { \" /><text type=\"break\" /><text value=\" res.send(\" /><text value=\"&quot;Hello from the root route!&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"}); \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"app.listen(\" /><text value=\"3000\" class=\"number\" /><text value=\", () =&gt; { \" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;Server runs on port 3000&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"});\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"196\" endIndex=\"202\" /><option startIndex=\"99\" endIndex=\"103\" /></options></interaction></interactions></code><p visible-if=\"wrong\">Certifique-se de escolher <code>next</code> seguido de <code>next()</code>.</p></body></html>"
          },
          {
            "title": ".use() - Copy",
            "id": 132748,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Para aplicar nosso middleware na aplicação Express, usamos <code>app.use</code> e usamos <code>customMiddleware</code> como argumento.</p><p>Isso diz ao Express para executar a função <code>customMiddleware</code> para cada solicitação recebida, permitindo que ela realize nosso registro.</p><code version=\"2\" codelang=\"javascript\" name=\"app.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" express = \" /><text value=\"require\" class=\"built_in\" /><text value=\"(\" /><text value=\"&quot;express&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" app = express(); \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" customMiddleware = \" /><text value=\"(\" /><text value=\"req, res, next\" class=\"params\" /><text value=\") =&gt;\" /><text value=\" { \" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;Incoming request...&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"`Request type: \" /><text value=\"${req.method}\" class=\"subst\" /><text value=\"`\" /><text value=\"); \" /><text type=\"break\" /><text value=\" next(); \" /><text type=\"break\" /><text value=\"}; \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"app.use(customMiddleware); \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"app.get(\" /><text value=\"&quot;/&quot;\" class=\"string\" /><text value=\", (req, res) =&gt; { \" /><text type=\"break\" /><text value=\" res.send(\" /><text value=\"&quot;Hello from the root route!&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"}); \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"app.listen(\" /><text value=\"3000\" class=\"number\" /><text value=\", () =&gt; { \" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;Server runs on port 3000&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"});\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"211\" endIndex=\"214\" /><option startIndex=\"214\" endIndex=\"215\" /><option startIndex=\"215\" endIndex=\"218\" /><option startIndex=\"219\" endIndex=\"235\" /></options></interaction></interactions><output><content><text value=\"Server runs on port 3000\" /><text type=\"break\" /><text value=\"Incoming request...\" /><text type=\"break\" /><text value=\"Request type: GET\" /></content></output></code><p visible-if=\"wrong\">Certifique-se de escolher <code>app</code> seguido de <code>.</code> e depois <code>use</code>, <code>customMiddleware</code>.</p></body></html>"
          },
          {
            "title": "Custom Middleware - Copy1",
            "id": 132751,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Podemos também aplicar nosso middleware personalizado apenas a rotas selecionadas, passando-o como o segundo argumento dos métodos de rota.</p><p>Vamos fazer a rota <code>\"/\"</code> usar nosso middleware <code>logRequest</code>.</p><code version=\"2\" codelang=\"javascript\" name=\"app.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" express = \" /><text value=\"require\" class=\"built_in\" /><text value=\"(\" /><text value=\"&quot;express&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" app = express(); \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" logRequest = \" /><text value=\"(\" /><text value=\"req, res, next\" class=\"params\" /><text value=\") =&gt;\" /><text value=\" { \" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"`Incoming request type: \" /><text value=\"${req.method}\" class=\"subst\" /><text value=\"`\" /><text value=\"); \" /><text type=\"break\" /><text value=\" next(); \" /><text type=\"break\" /><text value=\"}; \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"app.get(\" /><text value=\"&quot;/&quot;\" class=\"string\" /><text value=\", logRequest, (req, res) =&gt; { \" /><text type=\"break\" /><text value=\" res.send(\" /><text value=\"&quot;Hello from the root route!&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"}); \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"app.listen(\" /><text value=\"3000\" class=\"number\" /><text value=\", () =&gt; { \" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;Server runs on port 3000&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"});\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"189\" endIndex=\"199\" /></options></interaction></interactions><output><content><text value=\"Server runs on port 3000\" /><text type=\"break\" /><text value=\"Incoming request type: GET\" /></content></output></code><p visible-if=\"wrong\">Certifique-se de escolher <code>logRequest</code>.</p></body></html>"
          },
          {
            "title": "Multiple Middleware",
            "id": 122331,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Por que o endpoint <code>\"/\"</code> não executa seu console log quando acessado?</p><code version=\"2\" codelang=\"javascript\" name=\"app.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" express = \" /><text value=\"require\" class=\"built_in\" /><text value=\"(\" /><text value=\"&quot;express&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" app = express(); \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"app.use(\" /><text value=\"(\" /><text value=\"req, res, next\" class=\"params\" /><text value=\") =&gt;\" /><text value=\" { \" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;Incoming request...&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"`Request type: \" /><text value=\"${req.method}\" class=\"subst\" /><text value=\"`\" /><text value=\"); \" /><text type=\"break\" /><text value=\"}); \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"app.get(\" /><text value=\"'/'\" class=\"string\" /><text value=\", (req, res) =&gt; { \" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;Hello from the endpoint&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"}); \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"app.listen(\" /><text value=\"3000\" class=\"number\" /><text value=\", () =&gt; { \" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;Server runs on port 3000&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"});\" /></content><output><content><text value=\"Server runs on port 3000\" /><text type=\"break\" /><text value=\"Incoming request...\" /><text type=\"break\" /><text value=\"Request type: GET\" /></content></output></code><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\">Middleware bloqueia a rota ao não chamar <code>next</code></item><item value=\"2\" correct=\"false\">A rota <code>\"/\"</code> está faltando</item></selection><p visible-if=\"wrong\">Middleware bloqueia a rota ao não chamar <code>next</code>.</p></body></html>"
          },
          {
            "title": "next()",
            "id": 122321,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Complete o código para garantir que o endpoint seja atingido.</p><code version=\"2\" codelang=\"javascript\" name=\"app.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" express = \" /><text value=\"require\" class=\"built_in\" /><text value=\"(\" /><text value=\"&quot;express&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" app = express(); \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"app.use(\" /><text value=\"(\" /><text value=\"req, res, next\" class=\"params\" /><text value=\") =&gt;\" /><text value=\" { \" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;Incoming request...&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"`Requesting server: \" /><text value=\"${req.hostname}\" class=\"subst\" /><text value=\"`\" /><text value=\"); \" /><text type=\"break\" /><text value=\" next(); \" /><text type=\"break\" /><text value=\"}); \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"app.get(\" /><text value=\"&quot;/user/:id&quot;\" class=\"string\" /><text value=\", \" /><text value=\"function\" class=\"keyword\" /><text value=\"(\" /><text value=\"req, res, next\" class=\"params\" /><text value=\") \" /><text value=\"{ \" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;GET request processing...&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"}); \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"app.listen(\" /><text value=\"3000\" class=\"number\" /><text value=\", () =&gt; { \" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;Server runs on port 3000&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"});\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"82\" endIndex=\"86\" /><option startIndex=\"186\" endIndex=\"192\" /></options></interaction></interactions><output><content><text value=\"Server runs on port 3000\" /><text type=\"break\" /><text value=\"Incoming request...\" /><text type=\"break\" /><text value=\"Requesting server: localhost\" /><text type=\"break\" /><text value=\"Get request processing...\" /></content></output></code><p visible-if=\"wrong\">Certifique-se de escolher <code>next</code> seguido de <code>next()</code>.</p></body></html>"
          },
          {
            "title": "Question: Custom Middleware",
            "id": 122322,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Qual é um benefício de criar um middleware personalizado?</p><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\">Middleware personalizado permite ações personalizadas com requisições HTTP</item><item value=\"2\" correct=\"false\">Não podemos criar middleware personalizado</item></selection><p visible-if=\"wrong\">Middleware personalizado permite ações personalizadas com requisições HTTP.</p></body></html>"
          },
          {
            "title": "Custom Middleware - Copy - Copy",
            "id": 132752,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Por que a rota <code>\"/me\"</code> não está acionando o middleware de logging?</p><code version=\"2\" codelang=\"javascript\" name=\"app.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" express = \" /><text value=\"require\" class=\"built_in\" /><text value=\"(\" /><text value=\"&quot;express&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" app = express(); \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" logRequest = \" /><text value=\"(\" /><text value=\"req, res, next\" class=\"params\" /><text value=\") =&gt;\" /><text value=\" { \" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"`Incoming request type: \" /><text value=\"${req.method}\" class=\"subst\" /><text value=\"`\" /><text value=\"); \" /><text type=\"break\" /><text value=\" next(); \" /><text type=\"break\" /><text value=\"}; \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"app.get(\" /><text value=\"&quot;/&quot;\" class=\"string\" /><text value=\", logRequest, (req, res) =&gt; { \" /><text type=\"break\" /><text value=\" res.send(\" /><text value=\"&quot;Hello from the root route!&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"}); \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"app.get(\" /><text value=\"&quot;/me&quot;\" class=\"string\" /><text value=\", (req, res) =&gt; { \" /><text type=\"break\" /><text value=\" res.send(\" /><text value=\"&quot;Hello from my route!&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"}); \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"app.listen(\" /><text value=\"3000\" class=\"number\" /><text value=\", () =&gt; { \" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;Server runs on port 3000&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"});\" /></content><output><content><text value=\"Server runs on port 3000\" /></content></output></code><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\">O middleware de logging não é aplicado à rota <code>\"/me\"</code></item><item value=\"2\" correct=\"false\">A rota <code>\"/me\"</code> não está funcionando porque não está configurada corretamente</item></selection><p visible-if=\"wrong\">O middleware de logging não é aplicado à rota <code>\"/me\"</code>.</p></body></html>"
          },
          {
            "title": "Question: Third Party Middleware",
            "id": 122323,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>O que há de errado com o código?</p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" express = \" /><text value=\"require\" class=\"built_in\" /><text value=\"(\" /><text value=\"&quot;express&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" app = express(); \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"function\" class=\"keyword\" /><text value=\" \" /><text value=\"logTime\" class=\"title\" /><text value=\"(\" /><text value=\"req, res, next\" class=\"params\" /><text value=\") \" /><text value=\"{ \" /><text type=\"break\" /><text value=\"  \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"`Request received at: \" /><text value=\"${\" /><text value=\"new\" class=\"keyword\" /><text value=\" \" /><text value=\"Date\" class=\"built_in\" /><text value=\"().toLocaleString()}\" /><text value=\"`\" /><text value=\"); \" /><text type=\"break\" /><text value=\"} \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"app.use(logTime); \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"app.get(\" /><text value=\"&quot;/&quot;\" class=\"string\" /><text value=\", (req, res) =&gt; { \" /><text type=\"break\" /><text value=\"  res.send(\" /><text value=\"&quot;Hello, World!&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"}); \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"app.listen(\" /><text value=\"3000\" class=\"number\" /><text value=\", () =&gt; { \" /><text type=\"break\" /><text value=\"  \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;Server runs on port 3000&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"});\" /></content><output><content><text value=\"Server runs on port 3000\" /><text type=\"break\" /><text value=\"GET / 200 150 - 1.650 ms\" /><text type=\"break\" /><text value=\"Request received\" /></content></output></code><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\">Devemos usar <code>next</code> no nosso middleware personalizado para permitir que os objetos de requisição e resposta continuem passando pelo pipeline</item><item value=\"2\" correct=\"false\">Devemos definir nosso middleware como uma função de seta para que funcione com o Express</item></selection><p visible-if=\"wrong\">Devemos usar <code>next</code> no nosso middleware personalizado para permitir que os objetos de requisição e resposta continuem passando pelo pipeline.</p></body></html>"
          }
        ]
      },
      {
        "id": 15058,
        "title": "Ainda Mais Middleware",
        "type": "practiceLevel1",
        "lessons": [
          {
            "title": "Custom Middleware",
            "id": 122320,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Podemos usar vários middleware em nosso app.</p><code version=\"2\" codelang=\"javascript\" name=\"app.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" express = \" /><text value=\"require\" class=\"built_in\" /><text value=\"(\" /><text value=\"&quot;express&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" app = express(); \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"app.use(express.json()); \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"function\" class=\"keyword\" /><text value=\" \" /><text value=\"authenticate\" class=\"title\" /><text value=\"(\" /><text value=\"req, res, next\" class=\"params\" /><text value=\") \" /><text value=\"{ \" /><text type=\"break\" /><text value=\"  \" /><text value=\"if\" class=\"keyword\" /><text value=\" (req.body.role === \" /><text value=\"&quot;Admin&quot;\" class=\"string\" /><text value=\") { \" /><text type=\"break\" /><text value=\"    \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;Authenticated&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"    next(); \" /><text type=\"break\" /><text value=\"  } \" /><text value=\"else\" class=\"keyword\" /><text value=\" { \" /><text type=\"break\" /><text value=\"    \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;Unauthorized&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"    res.status(\" /><text value=\"401\" class=\"number\" /><text value=\").send(\" /><text value=\"&quot;Unauthorized&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"  } \" /><text type=\"break\" /><text value=\"} \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"app.use(authenticate); \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"app.listen(\" /><text value=\"3000\" class=\"number\" /><text value=\", () =&gt; { \" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;Server runs on port 3000&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"});\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"323\" endIndex=\"335\" /><option correct=\"false\"><content><text value=\"express\" /></content></option><option startIndex=\"63\" endIndex=\"66\" /><option startIndex=\"66\" endIndex=\"67\" /><option startIndex=\"67\" endIndex=\"70\" /></options></interaction></interactions><output><content><text value=\"Server runs on port 3000\" /><text type=\"break\" /><text value=\"Unauthorized\" /><text type=\"break\" /><text value=\"\" /></content></output></code><p visible-if=\"wrong\">Certifique-se de escolher <code>app</code> seguido de <code>.</code> e depois <code>use</code>, <code>authenticate</code>.</p></body></html>"
          },
          {
            "title": "Custom Middleware - Copy - Copy - Copy",
            "id": 132764,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Podemos encadear várias funções de middleware na definição da rota.</p><p>Vamos usar o middleware embutido, como <code>express.json</code>, como um argumento junto com seu middleware personalizado <code>logRequest</code>.</p><code version=\"2\" codelang=\"javascript\" name=\"app.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" express = \" /><text value=\"require\" class=\"built_in\" /><text value=\"(\" /><text value=\"&quot;express&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" app = express(); \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" logRequest = \" /><text value=\"(\" /><text value=\"req, res, next\" class=\"params\" /><text value=\") =&gt;\" /><text value=\" { \" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"`Incoming request type: \" /><text value=\"${req.method}\" class=\"subst\" /><text value=\"`\" /><text value=\"); \" /><text type=\"break\" /><text value=\" next(); \" /><text type=\"break\" /><text value=\"}; \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"app.post(\" /><text value=\"&quot;/&quot;\" class=\"string\" /><text value=\", express.json(), logRequest, (req, res) =&gt; { \" /><text type=\"break\" /><text value=\" res.send(\" /><text value=\"&quot;Hello from the root route!&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"}); \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"app.listen(\" /><text value=\"3000\" class=\"number\" /><text value=\", () =&gt; { \" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;Server runs on port 3000&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"});\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"190\" endIndex=\"197\" /><option startIndex=\"198\" endIndex=\"202\" /><option startIndex=\"206\" endIndex=\"216\" /></options></interaction></interactions><output><content><text value=\"Server runs on port 3000\" /><text type=\"break\" /><text value=\"Incoming request type: GET\" /></content></output></code><p visible-if=\"wrong\">Certifique-se de escolher <code>express</code> seguido de <code>json</code> e finalmente <code>logRequest</code>.</p></body></html>"
          },
          {
            "title": "Custom Middleware - Copy - Copy",
            "id": 132753,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Ao passar middleware para uma função de rota, também podemos usar um array.</p><code version=\"2\" codelang=\"javascript\" name=\"app.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" express = \" /><text value=\"require\" class=\"built_in\" /><text value=\"(\" /><text value=\"&quot;express&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" app = express(); \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" logRequest = \" /><text value=\"(\" /><text value=\"req, res, next\" class=\"params\" /><text value=\") =&gt;\" /><text value=\" { \" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"`Incoming request type: \" /><text value=\"${req.method}\" class=\"subst\" /><text value=\"`\" /><text value=\"); \" /><text type=\"break\" /><text value=\" next(); \" /><text type=\"break\" /><text value=\"}; \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"app.post(\" /><text value=\"&quot;/&quot;\" class=\"string\" /><text value=\", [express.json(), logRequest], (req, res) =&gt; { \" /><text type=\"break\" /><text value=\"  res.send(\" /><text value=\"&quot;Hello from the root route!&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"}); \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"app.listen(\" /><text value=\"3000\" class=\"number\" /><text value=\", () =&gt; { \" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;Server runs on port 3000&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"});\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"190\" endIndex=\"191\" /><option startIndex=\"205\" endIndex=\"206\" /><option startIndex=\"217\" endIndex=\"218\" /></options></interaction></interactions><output><content><text value=\"Server runs on port 3000\" /><text type=\"break\" /><text value=\"Incoming request type: GET\" /></content></output></code><p visible-if=\"wrong\">Certifique-se de escolher <code>[</code> seguido de <code>,</code> e finalmente <code>]</code>.</p></body></html>"
          },
          {
            "title": "Custom Middleware  -dCopy -",
            "id": 132765,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>O benefício de usar um array para agrupar funções de middleware no Express é principalmente sobre limpeza, flexibilidade e organização.</p><p>Com essa estrutura, podemos reutilizar o array <code>middlewares</code> em várias rotas, promovendo um código mais limpo.</p><code version=\"2\" codelang=\"javascript\" name=\"app.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" express = \" /><text value=\"require\" class=\"built_in\" /><text value=\"(\" /><text value=\"&quot;express&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" app = express(); \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" logRequest = \" /><text value=\"(\" /><text value=\"req, res, next\" class=\"params\" /><text value=\") =&gt;\" /><text value=\" { \" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"`Incoming request type: \" /><text value=\"${req.method}\" class=\"subst\" /><text value=\"`\" /><text value=\"); \" /><text type=\"break\" /><text value=\" next(); \" /><text type=\"break\" /><text value=\"}; \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" middlewares = [express.json(), logRequest]; \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"app.post(\" /><text value=\"&quot;/&quot;\" class=\"string\" /><text value=\", middlewares, (req, res) =&gt; { \" /><text type=\"break\" /><text value=\"  res.send(\" /><text value=\"&quot;Hello from the root route!&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"}); \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"app.put(\" /><text value=\"&quot;/update&quot;\" class=\"string\" /><text value=\", middlewares, (req, res) =&gt; { \" /><text type=\"break\" /><text value=\" res.send(\" /><text value=\"&quot;Update route&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"}); \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"app.listen(\" /><text value=\"3000\" class=\"number\" /><text value=\", () =&gt; { \" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;Server runs on port 3000&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"});\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"176\" endIndex=\"181\" /><option startIndex=\"182\" endIndex=\"193\" /><option startIndex=\"243\" endIndex=\"254\" /><option startIndex=\"342\" endIndex=\"353\" /></options></interaction></interactions><output><content><text value=\"Server runs on port 3000\" /><text type=\"break\" /><text value=\"Incoming request type: GET\" /></content></output></code><p visible-if=\"wrong\">Certifique-se de escolher <code>const</code> seguido de <code>middlewares</code> e depois <code>middlewares</code>, <code>middlewares</code>.</p></body></html>"
          },
          {
            "title": "Custom Middleware  -dCopy - - Copy",
            "id": 132769,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>O Middleware é executado na ordem em que são definidos, da esquerda para a direita.</p><code version=\"2\" codelang=\"javascript\" name=\"app.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" express = \" /><text value=\"require\" class=\"built_in\" /><text value=\"(\" /><text value=\"&quot;express&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" app = express(); \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" logRequest = \" /><text value=\"(\" /><text value=\"req, res, next\" class=\"params\" /><text value=\") =&gt;\" /><text value=\" { \" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"`Incoming request type: \" /><text value=\"${req.method}\" class=\"subst\" /><text value=\"`\" /><text value=\"); \" /><text type=\"break\" /><text value=\" next(); \" /><text type=\"break\" /><text value=\"}; \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" middlewares = [express.json(), logRequest]; \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"app.post(\" /><text value=\"&quot;/&quot;\" class=\"string\" /><text value=\", middlewares, (req, res) =&gt; { \" /><text type=\"break\" /><text value=\"  es.send(\" /><text value=\"&quot;Hello from the root route!&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"}); \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"app.put(\" /><text value=\"&quot;/update&quot;\" class=\"string\" /><text value=\", middlewares, (req, res) =&gt; { \" /><text type=\"break\" /><text value=\" res.send(\" /><text value=\"&quot;Update route&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"}); \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"app.listen(\" /><text value=\"3000\" class=\"number\" /><text value=\", () =&gt; { \" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;Server runs on port 3000&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"});\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"182\" endIndex=\"193\" /><option startIndex=\"243\" endIndex=\"254\" /><option startIndex=\"341\" endIndex=\"352\" /></options></interaction></interactions><output><content><text value=\"Server runs on port 3000\" /><text type=\"break\" /><text value=\"Incoming request type: GET\" /></content></output></code><p visible-if=\"wrong\">Certifique-se de escolher <code>middlewares</code> seguido de <code>middlewares</code> e finalmente <code>middlewares</code>.</p></body></html>"
          },
          {
            "title": "Exercise: Custom Middleware",
            "id": 122327,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Complete o código para adicionar o middleware de autenticação personalizado.</p><code version=\"2\" codelang=\"javascript\" name=\"app.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" express = \" /><text value=\"require\" class=\"built_in\" /><text value=\"(\" /><text value=\"&quot;express&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" app = express(); \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"app.use(express.json()); \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"function\" class=\"keyword\" /><text value=\" \" /><text value=\"checkReqBody\" class=\"title\" /><text value=\"(\" /><text value=\"req, res, next\" class=\"params\" /><text value=\") \" /><text value=\"{ \" /><text type=\"break\" /><text value=\" \" /><text value=\"if\" class=\"keyword\" /><text value=\" (req.body !== \" /><text value=\"undefined\" class=\"literal\" /><text value=\") { \" /><text type=\"break\" /><text value=\"  \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;Valid request body&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"  next(); \" /><text type=\"break\" /><text value=\" } \" /><text value=\"else\" class=\"keyword\" /><text value=\" { \" /><text type=\"break\" /><text value=\"  \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;Invalid request body&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"  res.status(\" /><text value=\"400\" class=\"number\" /><text value=\").send(\" /><text value=\"&quot;Invalid request body&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\" } \" /><text type=\"break\" /><text value=\"} \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"app.use(checkReqBody); \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"app.listen(\" /><text value=\"3000\" class=\"number\" /><text value=\", () =&gt; { \" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"'Server is running on port 3000.'\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"});\" /></content><interactions><interaction type=\"validatedInput\" isDefault=\"true\" startIndex=\"330\" endIndex=\"342\" /></interactions><output><content><text value=\"Server is running on port 3000\" /><text type=\"break\" /><text value=\"Valid request body\" /></content></output></code><p visible-if=\"wrong\">Certifique-se de escolher <code>checkReqBody</code>.</p></body></html>"
          },
          {
            "title": "Lesson #7",
            "id": 132766,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Você pode aplicar múltiplas funções de middleware a uma única rota?</p><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\">Sim, passando-os como argumentos individuais adicionais para o método de rota ou como um array</item><item value=\"2\" correct=\"false\">Não, podemos usar apenas uma função middleware por rota</item></selection><p visible-if=\"wrong\">Sim, passando-os como argumentos individuais adicionais para o método de rota ou como um array.</p></body></html>"
          },
          {
            "title": "Exercise: Third Party Middleware",
            "id": 122328,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Crie um array de middleware e passe-o como o segundo argumento da rota <code>\"/\"</code>.</p><code version=\"2\" codelang=\"javascript\" name=\"app.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" express = \" /><text value=\"require\" class=\"built_in\" /><text value=\"(\" /><text value=\"&quot;express&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" app = express(); \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"function\" class=\"keyword\" /><text value=\" \" /><text value=\"blockIP\" class=\"title\" /><text value=\"(\" /><text value=\"req, res, next\" class=\"params\" /><text value=\") \" /><text value=\"{ \" /><text type=\"break\" /><text value=\"  \" /><text value=\"const\" class=\"keyword\" /><text value=\" blockedIPs = [\" /><text value=\"'123.45.67.89'\" class=\"string\" /><text value=\"]; \" /><text type=\"break\" /><text value=\"  \" /><text value=\"const\" class=\"keyword\" /><text value=\" clientIP = req.ip; \" /><text type=\"break\" /><text value=\"   \" /><text type=\"break\" /><text value=\"  \" /><text value=\"if\" class=\"keyword\" /><text value=\" (blockedIPs.includes(clientIP)) { \" /><text type=\"break\" /><text value=\"    res.status(\" /><text value=\"403\" class=\"number\" /><text value=\").send(\" /><text value=\"&quot;Access forbidden&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"  } \" /><text value=\"else\" class=\"keyword\" /><text value=\" { \" /><text type=\"break\" /><text value=\"    next(); \" /><text type=\"break\" /><text value=\"  } \" /><text type=\"break\" /><text value=\"} \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" middleware = [express.json(), blockIP]; \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"app.get(\" /><text value=\"&quot;/&quot;\" class=\"string\" /><text value=\", middleware, (req, res) =&gt; { \" /><text type=\"break\" /><text value=\"  res.send(\" /><text value=\"&quot;Welcome to the site!&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"}); \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"app.listen(\" /><text value=\"3000\" class=\"number\" /><text value=\", () =&gt; { \" /><text type=\"break\" /><text value=\"  \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;Server runs on port 3000&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"});\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"299\" endIndex=\"309\" /><option startIndex=\"293\" endIndex=\"298\" /><option startIndex=\"355\" endIndex=\"365\" /><option startIndex=\"312\" endIndex=\"313\" /><option startIndex=\"327\" endIndex=\"328\" /><option startIndex=\"336\" endIndex=\"337\" /></options></interaction></interactions><output><content><text value=\"Server runs on port 3000\" /></content></output></code><p visible-if=\"wrong\">Certifique-se de escolher <code>const</code> seguido de <code>middleware</code> e depois <code>[</code>, <code>,</code>, <code>]</code>, <code>middleware</code>.</p></body></html>"
          },
          {
            "title": "Lesson #8",
            "id": 132767,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Você pode misturar middleware embutido e personalizado em uma única definição de rota?</p><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\">Sim</item><item value=\"2\" correct=\"false\">Não</item></selection><p visible-if=\"wrong\">Certifique-se de escolher Sim.</p></body></html>"
          }
        ]
      }
    ]
  }
}