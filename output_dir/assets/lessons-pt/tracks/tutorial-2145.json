{
  "tutorial": {
    "id": 2145,
    "version": 4,
    "type": "course",
    "isNew": false,
    "codeLanguage": "javascript",
    "title": "Sincronia e Assincronia em JS",
    "descriptionContent": "Introdução ao JavaScript assíncrono. Explore Callbacks assíncronos e síncronos.",
    "shortDescriptionContent": "",
    "showInTrack": true,
    "iconBanner": null,
    "chapters": [
      {
        "id": 13415,
        "title": "JavaScript Síncrono e Assíncrono",
        "type": "practiceLevel1",
        "lessons": [
          {
            "title": "Intro",
            "id": 120557,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p><em>Síncrono</em> é um termo que usamos para falar sobre instruções de código que são executadas uma após a outra.</p><p>Até agora, usamos JavaScript síncrono em nosso código. Vamos aprender mais sobre esse código síncrono!</p></body></html>"
          },
          {
            "title": "Synchronous JavaScript",
            "id": 120566,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Em código <strong>síncrono</strong>, uma linha de código é executada apenas depois que a anterior foi concluída.</p><p>Código síncrono pode desacelerar nossos programas. Aqui, temos que esperar pelo cálculo de 6000 números primos para obter a última saída do console.</p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;We're calculating the first 6000 prime numbers.&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;Waiting...&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" arr = [\" /><text value=\"2\" class=\"number\" /><text value=\"];\" /><text type=\"break\" /><text value=\"let\" class=\"keyword\" /><text value=\" number = \" /><text value=\"3\" class=\"number\" /><text value=\";\" /><text type=\"break\" /><text value=\"while\" class=\"keyword\" /><text value=\" (arr.length &lt; \" /><text value=\"6000\" class=\"number\" /><text value=\") {\" /><text type=\"break\" /><text value=\" \" /><text value=\"for\" class=\"keyword\" /><text value=\" (\" /><text value=\"let\" class=\"keyword\" /><text value=\" i = \" /><text value=\"2\" class=\"number\" /><text value=\"; i &lt; number; i++) {\" /><text type=\"break\" /><text value=\"  \" /><text value=\"if\" class=\"keyword\" /><text value=\" (number % i === \" /><text value=\"0\" class=\"number\" /><text value=\") {\" /><text type=\"break\" /><text value=\"   number++;\" /><text type=\"break\" /><text value=\"   \" /><text value=\"break\" class=\"keyword\" /><text value=\";\" /><text type=\"break\" /><text value=\"  }\" /><text type=\"break\" /><text value=\"  \" /><text value=\"if\" class=\"keyword\" /><text value=\" (i === number - \" /><text value=\"1\" class=\"number\" /><text value=\") {\" /><text type=\"break\" /><text value=\"   arr.push(number);\" /><text type=\"break\" /><text value=\"   number++;\" /><text type=\"break\" /><text value=\"   \" /><text value=\"break\" class=\"keyword\" /><text value=\";\" /><text type=\"break\" /><text value=\"  }\" /><text type=\"break\" /><text value=\" }\" /><text type=\"break\" /><text value=\"}\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"`We finished calculating the first \" /><text value=\"${arr.length}\" class=\"subst\" /><text value=\" prime numbers.`\" /><text value=\");\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;We had to wait for this line to print.&quot;\" class=\"string\" /><text value=\");\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"399\" endIndex=\"453\" /></options></interaction></interactions><output><content><text value=\"We're calculating the first 6000 prime numbers.\" /><text type=\"break\" /><text value=\"Waiting...\" /><text type=\"break\" /><text value=\"We finished calculating the first 6000 prime numbers.\" /><text type=\"break\" /><text value=\"We had to wait for this line to print.\" /></content></output></code><p visible-if=\"wrong\">Certifique-se de escolher <code>console.log(\"We had to wait for this line to print.\");</code>.</p></body></html>"
          },
          {
            "title": "Synchronous JavaScript 2",
            "id": 120567,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Com código síncrono, quanto mais tempo uma operação leva, mais tempo temos que esperar para a próxima linha de código ser executada.</p><p>Aqui, vamos calcular os primeiros <code>12000</code> números primos, o que leva mais tempo e resulta em um atraso maior.</p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;We're calculating the first 12000 prime numbers.&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;Waiting...&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" arr = [\" /><text value=\"2\" class=\"number\" /><text value=\"];\" /><text type=\"break\" /><text value=\"let\" class=\"keyword\" /><text value=\" number = \" /><text value=\"3\" class=\"number\" /><text value=\";\" /><text type=\"break\" /><text value=\"while\" class=\"keyword\" /><text value=\" (arr.length &lt; \" /><text value=\"12000\" class=\"number\" /><text value=\") {\" /><text type=\"break\" /><text value=\" \" /><text value=\"for\" class=\"keyword\" /><text value=\" (\" /><text value=\"let\" class=\"keyword\" /><text value=\" i = \" /><text value=\"2\" class=\"number\" /><text value=\"; i &lt; number; i++) {\" /><text type=\"break\" /><text value=\"  \" /><text value=\"if\" class=\"keyword\" /><text value=\" (number % i === \" /><text value=\"0\" class=\"number\" /><text value=\") {\" /><text type=\"break\" /><text value=\"   number++;\" /><text type=\"break\" /><text value=\"   \" /><text value=\"break\" class=\"keyword\" /><text value=\";\" /><text type=\"break\" /><text value=\"  }\" /><text type=\"break\" /><text value=\"  \" /><text value=\"if\" class=\"keyword\" /><text value=\" (i === number - \" /><text value=\"1\" class=\"number\" /><text value=\") {\" /><text type=\"break\" /><text value=\"   arr.push(number);\" /><text type=\"break\" /><text value=\"   number++;\" /><text type=\"break\" /><text value=\"   \" /><text value=\"break\" class=\"keyword\" /><text value=\";\" /><text type=\"break\" /><text value=\"  }\" /><text type=\"break\" /><text value=\" }\" /><text type=\"break\" /><text value=\"}\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"`We finished calculating the first \" /><text value=\"${arr.length}\" class=\"subst\" /><text value=\" prime numbers.`\" /><text value=\");\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;We had to wait even longer for this line to print.&quot;\" class=\"string\" /><text value=\");\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"145\" endIndex=\"150\" /></options></interaction></interactions><output><content><text value=\"We're calculating the first 12000 prime numbers.\" /><text type=\"break\" /><text value=\"Waiting...\" /><text type=\"break\" /><text value=\"We finished calculating the first 12000 prime numbers.\" /><text type=\"break\" /><text value=\"We had to wait even longer for this line to print.\" /></content></output></code><p visible-if=\"wrong\">Certifique-se de escolher <code>12000</code>.</p></body></html>"
          },
          {
            "title": "Asynchronous JS 1",
            "id": 120570,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>  O código <strong>assíncrono</strong> não espera a instrução anterior terminar.</p><p>Aqui, mesmo se incluirmos a instrução de impressão na última linha do código, vemos a mensagem aparecer <em>antes</em> que o cálculo tenha terminado.</p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"function\" class=\"keyword\" /><text value=\" \" /><text value=\"asyncExample\" class=\"title\" /><text value=\"(\" /><text value=\"\" class=\"params\" /><text value=\") \" /><text value=\"{\" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;We're calculating the first 10,000 prime numbers.&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\" \" /><text value=\"const\" class=\"keyword\" /><text value=\" arr = [\" /><text value=\"2\" class=\"number\" /><text value=\"];\" /><text type=\"break\" /><text value=\" \" /><text value=\"let\" class=\"keyword\" /><text value=\" number = \" /><text value=\"3\" class=\"number\" /><text value=\";\" /><text type=\"break\" /><text value=\" \" /><text value=\"while\" class=\"keyword\" /><text value=\" (arr.length &lt; \" /><text value=\"10000\" class=\"number\" /><text value=\") {\" /><text type=\"break\" /><text value=\"  \" /><text value=\"for\" class=\"keyword\" /><text value=\" (\" /><text value=\"let\" class=\"keyword\" /><text value=\" i = \" /><text value=\"2\" class=\"number\" /><text value=\"; i &lt; number; i++) {\" /><text type=\"break\" /><text value=\"   \" /><text value=\"if\" class=\"keyword\" /><text value=\" (number % i === \" /><text value=\"0\" class=\"number\" /><text value=\") {\" /><text type=\"break\" /><text value=\"    number++;\" /><text type=\"break\" /><text value=\"    \" /><text value=\"break\" class=\"keyword\" /><text value=\";\" /><text type=\"break\" /><text value=\"   }\" /><text type=\"break\" /><text value=\"   \" /><text value=\"if\" class=\"keyword\" /><text value=\" (i === number - \" /><text value=\"1\" class=\"number\" /><text value=\") {\" /><text type=\"break\" /><text value=\"    arr.push(number);\" /><text type=\"break\" /><text value=\"    number++;\" /><text type=\"break\" /><text value=\"    \" /><text value=\"break\" class=\"keyword\" /><text value=\";\" /><text type=\"break\" /><text value=\"   }\" /><text type=\"break\" /><text value=\"  }\" /><text type=\"break\" /><text value=\" }\" /><text type=\"break\" /><text value=\" \" /><text value=\"return\" class=\"keyword\" /><text value=\" \" /><text value=\"Promise\" class=\"built_in\" /><text value=\".resolve(arr);\" /><text type=\"break\" /><text value=\"}\" /><text type=\"break\" /><text value=\"asyncExample().then(\" /><text value=\"function\" class=\"keyword\" /><text value=\"(\" /><text value=\"value\" class=\"params\" /><text value=\") \" /><text value=\"{\" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"`We calculated the first \" /><text value=\"${value.length}\" class=\"subst\" /><text value=\" prime numbers`\" /><text value=\");\" /><text type=\"break\" /><text value=\"});\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;This line is printed during the calculation.&quot;\" class=\"string\" /><text value=\");\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"483\" endIndex=\"543\" /></options></interaction></interactions><output><content><text value=\"We're calculating the first 10,000 prime numbers.\" /><text type=\"break\" /><text value=\"This line is printed during the calculation.\" /><text type=\"break\" /><text value=\"We calculated the first 10000 prime numbers\" /></content></output></code><p visible-if=\"wrong\">Certifique-se de escolher <code>console.log(\"This line is printed during the calculation.\");</code>.</p></body></html>"
          },
          {
            "title": "Asynchronous JavaScript 2",
            "id": 120571,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Código assíncrono é útil para lidar com tarefas de longa duração. Cálculos complexos e a obtenção de dados de um servidor podem levar tempo.</p><p>A assincronia nos permite executar outras tarefas enquanto esperamos. Qual declaração aparecerá por último?</p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" asyncExample = fetch(\" /><text value=\"&quot;https://exampleAPI.data/1&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\"asyncExample.then(\" /><text value=\"res\" class=\"params\" /><text value=\" =&gt;\" /><text value=\" res.json()).then(\" /><text value=\"data\" class=\"params\" /><text value=\" =&gt;\" /><text value=\" {\" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"`This is our data: \" /><text value=\"${data}\" class=\"subst\" /><text value=\"`\" /><text value=\");\" /><text type=\"break\" /><text value=\"});\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;Waiting for the data...&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;Continue to use the page while the request is processing.&quot;\" class=\"string\" /><text value=\");\" /></content><output><content><text value=\"Waiting for the data...\" /><text type=\"break\" /><text value=\"Continue to use the page while the request is processing.\" /><text type=\"break\" /><text value=\"This is our data: Success!\" /></content></output></code><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\"><code>This is our data: Success!</code></item><item value=\"2\" correct=\"false\"><code>Waiting for the data...</code></item><item value=\"3\" correct=\"false\"><code>Continue to use the page while the request is processing</code></item></selection><p visible-if=\"wrong\"><code>This is our data: Success!</code>.</p></body></html>"
          },
          {
            "title": "Question: Synchronous JavaScript",
            "id": 120710,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>O que é código <strong>síncrono</strong>?</p><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\">Código que é executado sequencialmente</item><item value=\"2\" correct=\"false\">Código que executa simultaneamente com outro código</item></selection><p visible-if=\"wrong\">Código que é executado sequencialmente.</p></body></html>"
          },
          {
            "title": "Question: Synchronous JavaScript 2",
            "id": 120711,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Qual é uma razão pela qual o código síncrono pode ser ineficiente?</p><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\">Cada linha de código deve esperar a linha anterior ser concluída</item><item value=\"2\" correct=\"false\">Várias linhas de código podem ser executadas ao mesmo tempo</item></selection><p visible-if=\"wrong\">Cada linha de código deve esperar a linha anterior ser concluída.</p></body></html>"
          },
          {
            "title": "Question: Asynchronous Javascript",
            "id": 120712,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>O que é código <strong>assíncrono</strong>?</p><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\">Código que pode ser executado simultaneamente com outro código</item><item value=\"2\" correct=\"false\">Código que executa sequencialmente</item></selection><p visible-if=\"wrong\">Código que pode ser executado simultaneamente com outro código.</p></body></html>"
          },
          {
            "title": "Question: Asynchronous JavaScript 1",
            "id": 120713,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Qual é a vantagem do código assíncrono?</p><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\">Podemos realizar várias ações enquanto esperamos que uma ação anterior seja concluída</item><item value=\"2\" correct=\"false\">Sempre requer mais linhas de código do que o código síncrono</item></selection><p visible-if=\"wrong\">Podemos realizar várias ações enquanto esperamos que uma ação anterior seja concluída.</p></body></html>"
          },
          {
            "title": "Question: Asynchronous JavaScript 2",
            "id": 120838,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Como podemos reconhecer que este código é assíncrono?</p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"function\" class=\"keyword\" /><text value=\" \" /><text value=\"asyncExample\" class=\"title\" /><text value=\"(\" /><text value=\"\" class=\"params\" /><text value=\") \" /><text value=\"{\" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;We're calculating the first 10,000 prime numbers.&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;Waiting...&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\" \" /><text value=\"const\" class=\"keyword\" /><text value=\" arr = [\" /><text value=\"2\" class=\"number\" /><text value=\"];\" /><text type=\"break\" /><text value=\" \" /><text value=\"let\" class=\"keyword\" /><text value=\" number = \" /><text value=\"3\" class=\"number\" /><text value=\";\" /><text type=\"break\" /><text value=\" \" /><text value=\"while\" class=\"keyword\" /><text value=\" (arr.length &lt; \" /><text value=\"10000\" class=\"number\" /><text value=\") {\" /><text type=\"break\" /><text value=\"  \" /><text value=\"for\" class=\"keyword\" /><text value=\" (\" /><text value=\"let\" class=\"keyword\" /><text value=\" i = \" /><text value=\"2\" class=\"number\" /><text value=\"; i &lt; number; i++) {\" /><text type=\"break\" /><text value=\"   \" /><text value=\"if\" class=\"keyword\" /><text value=\" (number % i === \" /><text value=\"0\" class=\"number\" /><text value=\") {\" /><text type=\"break\" /><text value=\"    number++;\" /><text type=\"break\" /><text value=\"    \" /><text value=\"break\" class=\"keyword\" /><text value=\";\" /><text type=\"break\" /><text value=\"   }\" /><text type=\"break\" /><text value=\"   \" /><text value=\"if\" class=\"keyword\" /><text value=\" (i === number - \" /><text value=\"1\" class=\"number\" /><text value=\") {\" /><text type=\"break\" /><text value=\"    arr.push(number);\" /><text type=\"break\" /><text value=\"    number++;\" /><text type=\"break\" /><text value=\"    \" /><text value=\"break\" class=\"keyword\" /><text value=\";\" /><text type=\"break\" /><text value=\"   }\" /><text type=\"break\" /><text value=\"  }\" /><text type=\"break\" /><text value=\" }\" /><text type=\"break\" /><text value=\" \" /><text value=\"return\" class=\"keyword\" /><text value=\" \" /><text value=\"Promise\" class=\"built_in\" /><text value=\".resolve(arr);\" /><text type=\"break\" /><text value=\"}\" /><text type=\"break\" /><text value=\"asyncExample().then(\" /><text value=\"function\" class=\"keyword\" /><text value=\"(\" /><text value=\"value\" class=\"params\" /><text value=\") \" /><text value=\"{\" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"`We calculated the first \" /><text value=\"${value.length}\" class=\"subst\" /><text value=\" prime numbers`\" /><text value=\");\" /><text type=\"break\" /><text value=\"});\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;This line printed during the calculation.&quot;\" class=\"string\" /><text value=\");\" /></content><output><content><text value=\"We're calculating the first 10,000 prime numbers.\" /><text type=\"break\" /><text value=\"Waiting...\" /><text type=\"break\" /><text value=\"This line printed during the calculation.\" /><text type=\"break\" /><text value=\"We calculated the first 10000 prime numbers\" /></content></output></code><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\">Ele continua a executar e imprimir no console durante o cálculo</item><item value=\"2\" correct=\"false\">Ele usa um loop while</item></selection><p visible-if=\"wrong\">Ele continua a executar e imprimir no console durante o cálculo.</p></body></html>"
          },
          {
            "title": "Question: Asynchronous JavaScript 3",
            "id": 120714,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Qual é uma aplicação do mundo real para código assíncrono?</p><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\">Continuar a executar código enquanto realiza cálculos complexos</item><item value=\"2\" correct=\"false\">Aguardando para executar a próxima linha de código enquanto um cálculo complexo é realizado</item></selection><p visible-if=\"wrong\">Continuar a executar código enquanto realiza cálculos complexos.</p></body></html>"
          },
          {
            "title": "Example: Synchronous JavaScript",
            "id": 120716,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Complete o loop <code>for</code> para que este código síncrono multiplique cada elemento do array por <code>5</code> e, em seguida, imprima uma mensagem \"Finish\".</p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" arr = [\" /><text value=\"1\" class=\"number\" /><text value=\", \" /><text value=\"2\" class=\"number\" /><text value=\", \" /><text value=\"3\" class=\"number\" /><text value=\", \" /><text value=\"4\" class=\"number\" /><text value=\", \" /><text value=\"5\" class=\"number\" /><text value=\"];\" /><text type=\"break\" /><text value=\"for\" class=\"keyword\" /><text value=\" (\" /><text value=\"let\" class=\"keyword\" /><text value=\" i = \" /><text value=\"0\" class=\"number\" /><text value=\"; i &lt; arr.length; i++) {\" /><text type=\"break\" /><text value=\" arr[i] *= \" /><text value=\"5\" class=\"number\" /><text value=\";\" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(arr[i]);\" /><text type=\"break\" /><text value=\"}\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;Finished!&quot;\" class=\"string\" /><text value=\");\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"29\" endIndex=\"32\" /><option startIndex=\"106\" endIndex=\"113\" /><option startIndex=\"113\" endIndex=\"114\" /><option startIndex=\"114\" endIndex=\"117\" /></options></interaction></interactions><output><content><text value=\"5\" /><text type=\"break\" /><text value=\"10\" /><text type=\"break\" /><text value=\"15\" /><text type=\"break\" /><text value=\"20\" /><text type=\"break\" /><text value=\"25\" /><text type=\"break\" /><text value=\"Finished!\" /></content></output></code><p visible-if=\"wrong\">Certifique-se de escolher <code>for</code> seguido de <code>console</code> e depois <code>.</code>, <code>log</code>.</p></body></html>"
          },
          {
            "title": "MCQ w/Code 1",
            "id": 120721,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Como sabemos que este código é síncrono?</p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" arr = [\" /><text value=\"10\" class=\"number\" /><text value=\", \" /><text value=\"8\" class=\"number\" /><text value=\", \" /><text value=\"4\" class=\"number\" /><text value=\", \" /><text value=\"2\" class=\"number\" /><text value=\", \" /><text value=\"0\" class=\"number\" /><text value=\"];\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;Start loop!&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\"for\" class=\"keyword\" /><text value=\" (\" /><text value=\"let\" class=\"keyword\" /><text value=\" i = \" /><text value=\"0\" class=\"number\" /><text value=\"; i &lt; arr.length; i++) {\" /><text type=\"break\" /><text value=\" arr[i] /= \" /><text value=\"2\" class=\"number\" /><text value=\";\" /><text type=\"break\" /><text value=\"}\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;The operation is complete&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(arr);\" /><text type=\"break\" /></content><output><content><text value=\"Start loop!\" /><text type=\"break\" /><text value=\"The operation is complete\" /><text type=\"break\" /><text value=\"[ 5, 4, 2, 1, 0 ]\" /></content></output></code><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\">Cada iteração do loop é concluída antes que o código fora do loop seja executado</item><item value=\"2\" correct=\"false\">O código é executado de uma vez só</item></selection><p visible-if=\"wrong\">Cada iteração do loop é concluída antes que o código fora do loop seja executado.</p></body></html>"
          },
          {
            "title": "MCQ w/Code 2",
            "id": 120722,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Por que sabemos que este código é assíncrono?</p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"async\" class=\"keyword\" /><text value=\" \" /><text value=\"function\" class=\"keyword\" /><text value=\" \" /><text value=\"example\" class=\"title\" /><text value=\"(\" /><text value=\"\" class=\"params\" /><text value=\") \" /><text value=\"{\" /><text type=\"break\" /><text value=\" \" /><text value=\"const\" class=\"keyword\" /><text value=\" promise = \" /><text value=\"new\" class=\"keyword\" /><text value=\" \" /><text value=\"Promise\" class=\"built_in\" /><text value=\"(\" /><text value=\"(\" /><text value=\"resolve\" class=\"params\" /><text value=\") =&gt;\" /><text value=\" {\" /><text type=\"break\" /><text value=\"  setTimeout(\" /><text value=\"()\" class=\"params\" /><text value=\" =&gt;\" /><text value=\" resolve(\" /><text value=\"&quot;The operation is finished&quot;\" class=\"string\" /><text value=\"), \" /><text value=\"1500\" class=\"number\" /><text value=\");\" /><text type=\"break\" /><text value=\" });\" /><text type=\"break\" /><text value=\" \" /><text value=\"const\" class=\"keyword\" /><text value=\" output = \" /><text value=\"await\" class=\"keyword\" /><text value=\" promise;\" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(output);\" /><text type=\"break\" /><text value=\"}\" /><text type=\"break\" /><text value=\"example();\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;Hello&quot;\" class=\"string\" /><text value=\");\" /></content><output><content><text value=\"Hello\" /><text type=\"break\" /><text value=\"The operation is finished\" /></content></output></code><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\">Porque a última mensagem do console será exibida primeiro no console</item><item value=\"2\" correct=\"false\">Porque <code>\"Hello\"</code> não será exibido</item></selection><p visible-if=\"wrong\">Porque a última mensagem do console será exibida primeiro no console.</p></body></html>"
          }
        ]
      },
      {
        "id": 13416,
        "title": "Callbacks e JS Síncrono",
        "type": "practiceLevel1",
        "lessons": [
          {
            "title": "Intro",
            "id": 120558,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Você já encontrou e usou funções <strong>callback</strong> em JavaScript síncrono, talvez sem perceber.</p><p>Mas vamos aprender mais sobre esses callbacks!</p></body></html>"
          },
          {
            "title": "Callback Function Definition",
            "id": 120574,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Uma função de callback é uma função regular que passamos para outra função e então chamamos para realizar uma tarefa.</p><p>Aqui, passamos a função <code>logResult</code> para nossa função <code>add</code> para mostrar o resultado do cálculo.</p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"function\" class=\"keyword\" /><text value=\" \" /><text value=\"add\" class=\"title\" /><text value=\"(\" /><text value=\"number1, number2, callback\" class=\"params\" /><text value=\") \" /><text value=\"{\" /><text type=\"break\" /><text value=\" \" /><text value=\"let\" class=\"keyword\" /><text value=\" result = number1 + number2;\" /><text type=\"break\" /><text value=\" callback(result);\" /><text type=\"break\" /><text value=\"}\" /><text type=\"break\" /><text type=\"break\" /><text value=\"function\" class=\"keyword\" /><text value=\" \" /><text value=\"logResult\" class=\"title\" /><text value=\"(\" /><text value=\"result\" class=\"params\" /><text value=\") \" /><text value=\"{\" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"`The result is: \" /><text value=\"${result}\" class=\"subst\" /><text value=\"`\" /><text value=\");\" /><text type=\"break\" /><text value=\"}\" /><text type=\"break\" /><text value=\"add(\" /><text value=\"2\" class=\"number\" /><text value=\", \" /><text value=\"3\" class=\"number\" /><text value=\", logResult);\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"181\" endIndex=\"190\" /></options></interaction></interactions><output><content><text value=\"The result is: 5\" /></content></output></code><p visible-if=\"wrong\">Certifique-se de escolher <code>logResult</code>.</p></body></html>"
          },
          {
            "title": ".map()",
            "id": 120575,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Você já usou funções de callback em métodos como <code>.map()</code>.</p><p>Aqui, passamos a função <code>callback</code> para o método de array <code>.map()</code>. Nela, retornamos <code>num</code> multiplicado por <code>2</code>. A ação se repete para todos os elementos do array.</p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" arr = [\" /><text value=\"1\" class=\"number\" /><text value=\", \" /><text value=\"2\" class=\"number\" /><text value=\", \" /><text value=\"3\" class=\"number\" /><text value=\", \" /><text value=\"4\" class=\"number\" /><text value=\", \" /><text value=\"5\" class=\"number\" /><text value=\"];\" /><text type=\"break\" /><text type=\"break\" /><text value=\"function\" class=\"keyword\" /><text value=\" \" /><text value=\"callback\" class=\"title\" /><text value=\"(\" /><text value=\"num\" class=\"params\" /><text value=\") \" /><text value=\"{\" /><text type=\"break\" /><text value=\" \" /><text value=\"return\" class=\"keyword\" /><text value=\" num * \" /><text value=\"2\" class=\"number\" /><text value=\";\" /><text type=\"break\" /><text value=\"}\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" newArray = arr.map(callback);\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(newArray);\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;This code is synchronous.&quot;\" class=\"string\" /><text value=\");\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"95\" endIndex=\"98\" /><option startIndex=\"99\" endIndex=\"107\" /></options></interaction></interactions><output><content><text value=\"[ 2, 4, 6, 8, 10 ]\" /><text type=\"break\" /><text value=\"This code is synchronous.\" /></content></output></code><p visible-if=\"wrong\">Certifique-se de escolher <code>map</code> seguido de <code>callback</code>.</p></body></html>"
          },
          {
            "title": ".map() 2",
            "id": 120576,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>O método <code>.map()</code> é síncrono. Ele é executado em sua totalidade antes que a próxima linha de código seja executada.</p><p>Aqui, podemos ver todos os números multiplicados no console antes da última instrução de impressão.</p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" arr = [\" /><text value=\"1\" class=\"number\" /><text value=\", \" /><text value=\"2\" class=\"number\" /><text value=\", \" /><text value=\"3\" class=\"number\" /><text value=\", \" /><text value=\"4\" class=\"number\" /><text value=\", \" /><text value=\"5\" class=\"number\" /><text value=\"];\" /><text type=\"break\" /><text type=\"break\" /><text value=\"function\" class=\"keyword\" /><text value=\" \" /><text value=\"callback\" class=\"title\" /><text value=\"(\" /><text value=\"num\" class=\"params\" /><text value=\") \" /><text value=\"{\" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(num * \" /><text value=\"2\" class=\"number\" /><text value=\");\" /><text type=\"break\" /><text value=\"}\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" newArray = arr.map(callback);\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;This code is synchronous.&quot;\" class=\"string\" /><text value=\");\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"116\" endIndex=\"123\" /><option startIndex=\"123\" endIndex=\"124\" /><option startIndex=\"124\" endIndex=\"127\" /></options></interaction></interactions><output><content><text value=\"2\" /><text type=\"break\" /><text value=\"4\" /><text type=\"break\" /><text value=\"6\" /><text type=\"break\" /><text value=\"8\" /><text type=\"break\" /><text value=\"10\" /><text type=\"break\" /><text value=\"This code is synchronous.\" /></content></output></code><p visible-if=\"wrong\">Certifique-se de escolher <code>console</code> seguido de <code>.</code> e finalmente <code>log</code>.</p></body></html>"
          },
          {
            "title": ".filter()",
            "id": 120577,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Você também pode se lembrar de <code>.filter()</code>. É outro callback que você usou sem saber!</p><p>Aqui, passamos a função <code>callback</code> para o método <code>.filter()</code> para retornar todos os números pares no array original.</p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" arr = [\" /><text value=\"1\" class=\"number\" /><text value=\", \" /><text value=\"2\" class=\"number\" /><text value=\", \" /><text value=\"3\" class=\"number\" /><text value=\", \" /><text value=\"4\" class=\"number\" /><text value=\", \" /><text value=\"5\" class=\"number\" /><text value=\", \" /><text value=\"6\" class=\"number\" /><text value=\", \" /><text value=\"7\" class=\"number\" /><text value=\", \" /><text value=\"8\" class=\"number\" /><text value=\", \" /><text value=\"9\" class=\"number\" /><text value=\", \" /><text value=\"10\" class=\"number\" /><text value=\"];\" /><text type=\"break\" /><text type=\"break\" /><text value=\"function\" class=\"keyword\" /><text value=\" \" /><text value=\"callback\" class=\"title\" /><text value=\"(\" /><text value=\"num\" class=\"params\" /><text value=\") \" /><text value=\"{\" /><text type=\"break\" /><text value=\" \" /><text value=\"return\" class=\"keyword\" /><text value=\" num % \" /><text value=\"2\" class=\"number\" /><text value=\" === \" /><text value=\"0\" class=\"number\" /><text value=\";\" /><text type=\"break\" /><text value=\"}\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" evenNumArray = arr.filter(callback);\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(evenNumArray);\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;This code is also synchronous.&quot;\" class=\"string\" /><text value=\");\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"121\" endIndex=\"127\" /><option startIndex=\"128\" endIndex=\"136\" /></options></interaction></interactions><output><content><text value=\"[ 2, 4, 6, 8, 10 ]\" /><text type=\"break\" /><text value=\"This code is also synchronous.\" /></content></output></code><p visible-if=\"wrong\">Certifique-se de escolher <code>filter</code> seguido de <code>callback</code>.</p></body></html>"
          },
          {
            "title": ".filter() 2",
            "id": 120578,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Novamente, vemos um exemplo de um método JavaScript síncrono que usa uma função de callback. Passe <code>callback</code> para o método <code>filter</code>.</p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" arr = [\" /><text value=\"1\" class=\"number\" /><text value=\", \" /><text value=\"2\" class=\"number\" /><text value=\", \" /><text value=\"3\" class=\"number\" /><text value=\", \" /><text value=\"4\" class=\"number\" /><text value=\", \" /><text value=\"5\" class=\"number\" /><text value=\", \" /><text value=\"6\" class=\"number\" /><text value=\", \" /><text value=\"7\" class=\"number\" /><text value=\", \" /><text value=\"8\" class=\"number\" /><text value=\", \" /><text value=\"9\" class=\"number\" /><text value=\", \" /><text value=\"10\" class=\"number\" /><text value=\"];\" /><text type=\"break\" /><text type=\"break\" /><text value=\"function\" class=\"keyword\" /><text value=\" \" /><text value=\"callback\" class=\"title\" /><text value=\"(\" /><text value=\"num\" class=\"params\" /><text value=\") \" /><text value=\"{\" /><text type=\"break\" /><text value=\" \" /><text value=\"return\" class=\"keyword\" /><text value=\" num % \" /><text value=\"2\" class=\"number\" /><text value=\" === \" /><text value=\"0\" class=\"number\" /><text value=\";\" /><text type=\"break\" /><text value=\"}\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" evenNumArray = arr.filter(callback);\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(evenNumArray);\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;This code is also synchronous.&quot;\" class=\"string\" /><text value=\");\" /></content><interactions><interaction type=\"validatedInput\" isDefault=\"true\" startIndex=\"128\" endIndex=\"136\" /></interactions><output><content><text value=\"[ 2, 4, 6, 8, 10 ]\" /><text type=\"break\" /><text value=\"This code is also synchronous.\" /></content></output></code><p visible-if=\"wrong\">Certifique-se de escolher <code>callback</code>.</p></body></html>"
          },
          {
            "title": ".map()/.filter()",
            "id": 120583,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Você pode ter visto esses métodos escritos de uma forma diferente, como usando funções de seta modernas do ES6.</p><p>A <em>arrow function</em> está apenas usando uma sintaxe compacta para escrever o <em>callback</em>, mas o comportamento é o mesmo.</p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" arr = [\" /><text value=\"1\" class=\"number\" /><text value=\", \" /><text value=\"2\" class=\"number\" /><text value=\", \" /><text value=\"3\" class=\"number\" /><text value=\", \" /><text value=\"4\" class=\"number\" /><text value=\", \" /><text value=\"5\" class=\"number\" /><text value=\"];\" /><text type=\"break\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" newArray = arr.map(\" /><text value=\"(\" /><text value=\"num\" class=\"params\" /><text value=\") =&gt;\" /><text value=\" num * \" /><text value=\"2\" class=\"number\" /><text value=\");\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(newArray);\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;This code uses an ES6 arrow function.&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;This code is synchronous.&quot;\" class=\"string\" /><text value=\");\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"61\" endIndex=\"63\" /><option startIndex=\"55\" endIndex=\"60\" /></options></interaction></interactions><output><content><text value=\"[ 2, 4, 6, 8, 10 ]\" /><text type=\"break\" /><text value=\"This code uses an ES6 arrow function.\" /><text type=\"break\" /><text value=\"This code is synchronous.\" /></content></output></code><p visible-if=\"wrong\">Certifique-se de escolher <code>(num)</code> seguido de <code>=&gt;</code>.</p></body></html>"
          },
          {
            "title": "Question: Callback Function Definition",
            "id": 120726,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Uma função de callback é sempre chamada dentro de outra função.</p><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\">Verdadeiro</item><item value=\"2\" correct=\"false\">False</item></selection><p visible-if=\"wrong\">Certifique-se de escolher Verdadeiro.</p></body></html>"
          },
          {
            "title": "Question: .map()",
            "id": 120727,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p><code>.map()</code> é um método JavaScript que executa de forma assíncrona.</p><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\">False</item><item value=\"2\" correct=\"false\">Verdadeiro</item></selection><p visible-if=\"wrong\">Certifique-se de escolher False.</p></body></html>"
          },
          {
            "title": "Question: .filter()",
            "id": 120729,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Qual afirmação é precisa em relação aos métodos <code>.filter()</code> e <code>.map()</code>?</p><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\">Eles executam de forma síncrona</item><item value=\"2\" correct=\"false\">Eles executam de forma assíncrona</item></selection><p visible-if=\"wrong\">Eles executam de forma síncrona.</p></body></html>"
          },
          {
            "title": "Question: .filter() 2",
            "id": 120730,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Métodos JavaScript às vezes requerem funções de callback durante sua execução.</p><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\">Verdadeiro</item><item value=\"2\" correct=\"false\">False</item></selection><p visible-if=\"wrong\">Certifique-se de escolher Verdadeiro.</p></body></html>"
          },
          {
            "title": "Question: .map()/.filter()",
            "id": 120731,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Qual afirmação é verdadeira em relação às funções de callback em JavaScript?</p><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\">Elas podem ser escritas com funções de seta ES6</item><item value=\"2\" correct=\"false\">Elas nunca podem ser escritas com funções de seta ES6</item></selection><p visible-if=\"wrong\">Elas podem ser escritas com funções de seta ES6.</p></body></html>"
          },
          {
            "title": "Question: .filter()/Callback",
            "id": 120839,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Qual é a função de callback neste código síncrono?</p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" arr = [\" /><text value=\"11\" class=\"number\" /><text value=\", \" /><text value=\"12\" class=\"number\" /><text value=\", \" /><text value=\"13\" class=\"number\" /><text value=\", \" /><text value=\"14\" class=\"number\" /><text value=\", \" /><text value=\"15\" class=\"number\" /><text value=\", \" /><text value=\"16\" class=\"number\" /><text value=\", \" /><text value=\"17\" class=\"number\" /><text value=\", \" /><text value=\"18\" class=\"number\" /><text value=\", \" /><text value=\"19\" class=\"number\" /><text value=\", \" /><text value=\"20\" class=\"number\" /><text value=\"];\" /><text type=\"break\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" evenArray = \" /><text value=\"(\" /><text value=\"num\" class=\"params\" /><text value=\") =&gt;\" /><text value=\" num % \" /><text value=\"2\" class=\"number\" /><text value=\" === \" /><text value=\"0\" class=\"number\" /><text value=\";\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" newArray = arr.filter(evenArray);\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(newArray);\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;This code is synchronous.&quot;\" class=\"string\" /><text value=\");\" /></content><output><content><text value=\"[ 12, 14, 16, 18, 20 ]\" /><text type=\"break\" /><text value=\"This code is synchronous.\" /></content></output></code><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\"><code>evenArray</code></item><item value=\"2\" correct=\"false\"><code>newArray</code></item></selection><p visible-if=\"wrong\">Certifique-se de escolher <code>evenArray</code>.</p></body></html>"
          },
          {
            "title": "Example: .map()",
            "id": 120734,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Chame o método <code>.map</code> com <code>makePositive</code> como o callback.</p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" arr = [\" /><text value=\"-1\" class=\"number\" /><text value=\", \" /><text value=\"-2\" class=\"number\" /><text value=\", \" /><text value=\"-3\" class=\"number\" /><text value=\", \" /><text value=\"-4\" class=\"number\" /><text value=\", \" /><text value=\"-5\" class=\"number\" /><text value=\"];\" /><text type=\"break\" /><text type=\"break\" /><text value=\"function\" class=\"keyword\" /><text value=\" \" /><text value=\"makePositive\" class=\"title\" /><text value=\"(\" /><text value=\"num\" class=\"params\" /><text value=\") \" /><text value=\"{\" /><text type=\"break\" /><text value=\" \" /><text value=\"return\" class=\"keyword\" /><text value=\" num * \" /><text value=\"-1\" class=\"number\" /><text value=\";\" /><text type=\"break\" /><text value=\"}\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" positiveArray = arr.map(makePositive);\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(positiveArray);\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;This code is synchronous.&quot;\" class=\"string\" /><text value=\");\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"106\" endIndex=\"109\" /><option startIndex=\"109\" endIndex=\"110\" /><option startIndex=\"110\" endIndex=\"113\" /><option startIndex=\"113\" endIndex=\"128\" /></options></interaction></interactions><output><content><text value=\"[ 1, 2, 3, 4, 5 ]\" /><text type=\"break\" /><text value=\"This code is synchronous.\" /></content></output></code><p visible-if=\"wrong\">Certifique-se de escolher <code>arr</code> seguido de <code>.</code> e depois <code>map</code>, <code>(makePositive);</code>.</p></body></html>"
          }
        ]
      },
      {
        "id": 13417,
        "title": "Callbacks e JS Assíncrono",
        "type": "practiceLevel1",
        "lessons": [
          {
            "title": "Intro",
            "id": 120559,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Já vimos funções de callback em JavaScript síncrono. Agora vamos dar uma olhada em callbacks personalizados e callbacks em código assíncrono.</p></body></html>"
          },
          {
            "title": "Callback Functions",
            "id": 120654,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Lembre-se de que uma função de callback é uma função que passamos para outra função e depois chamamos para realizar uma tarefa.</p><p>Vimos que métodos JavaScript como <code>.map()</code> e <code>.filter()</code> são projetados para aceitar uma função de callback.</p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" arr = [\" /><text value=\"1\" class=\"number\" /><text value=\", \" /><text value=\"2\" class=\"number\" /><text value=\", \" /><text value=\"3\" class=\"number\" /><text value=\", \" /><text value=\"4\" class=\"number\" /><text value=\", \" /><text value=\"5\" class=\"number\" /><text value=\"];\" /><text type=\"break\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" newArray = arr.map(\" /><text value=\"(\" /><text value=\"num\" class=\"params\" /><text value=\") =&gt;\" /><text value=\" num * \" /><text value=\"2\" class=\"number\" /><text value=\");\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(newArray);\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;This code is synchronous.&quot;\" class=\"string\" /><text value=\");\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"47\" endIndex=\"50\" /><option startIndex=\"50\" endIndex=\"51\" /><option startIndex=\"51\" endIndex=\"54\" /></options></interaction></interactions><output><content><text value=\"[ 2, 4, 6, 8, 10 ]\" /><text type=\"break\" /><text value=\"This code is synchronous.\" /></content></output></code><p visible-if=\"wrong\">Certifique-se de escolher <code>arr</code> seguido de <code>.</code> e finalmente <code>map</code>.</p></body></html>"
          },
          {
            "title": "Callback Functions II",
            "id": 120835,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Podemos também personalizar nossas próprias funções para aceitar e executar um callback.</p><p>Aqui podemos passar a função <code>sayGoodbye</code> que exibe <code>\"Goodbye\"</code> para a função <code>greet()</code>.</p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"function\" class=\"keyword\" /><text value=\" \" /><text value=\"greet\" class=\"title\" /><text value=\"(\" /><text value=\"name, callback\" class=\"params\" /><text value=\") \" /><text value=\"{\" /><text type=\"break\" /><text value=\"  \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"`Hello, \" /><text value=\"${name}\" class=\"subst\" /><text value=\"!`\" /><text value=\");\" /><text type=\"break\" /><text value=\"  callback();\" /><text type=\"break\" /><text value=\"}\" /><text type=\"break\" /><text type=\"break\" /><text value=\"function\" class=\"keyword\" /><text value=\" \" /><text value=\"sayGoodbye\" class=\"title\" /><text value=\"(\" /><text value=\"\" class=\"params\" /><text value=\") \" /><text value=\"{\" /><text type=\"break\" /><text value=\"  \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;Goodbye!&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\"}\" /><text type=\"break\" /><text type=\"break\" /><text value=\"greet(\" /><text value=\"&quot;Teresa&quot;\" class=\"string\" /><text value=\", sayGoodbye);\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"154\" endIndex=\"164\" /><option startIndex=\"138\" endIndex=\"143\" /></options></interaction></interactions><output><content><text value=\"Hello, Teresa!\" /><text type=\"break\" /><text value=\"Goodbye!\" /></content></output></code><p visible-if=\"wrong\">Certifique-se de escolher <code>greet</code> seguido de <code>sayGoodbye</code>.</p></body></html>"
          },
          {
            "title": "Customizing Callbacks",
            "id": 120655,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Podemos personalizar um callback para fazer qualquer coisa que precisarmos.</p><p>Vamos chamar a função <code>doSomeMath</code> com o parâmetro <code>input</code> definido como <code>2</code> e o parâmetro <code>callback</code> definido como <code>multiplyCallback</code>.</p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"function\" class=\"keyword\" /><text value=\" \" /><text value=\"multiplyCallback\" class=\"title\" /><text value=\"(\" /><text value=\"num\" class=\"params\" /><text value=\") \" /><text value=\"{\" /><text type=\"break\" /><text value=\" \" /><text value=\"const\" class=\"keyword\" /><text value=\" result = num * \" /><text value=\"2\" class=\"number\" /><text value=\";\" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"`The input doubled is equal to \" /><text value=\"${result}\" class=\"subst\" /><text value=\"`\" /><text value=\");\" /><text type=\"break\" /><text value=\"}\" /><text type=\"break\" /><text type=\"break\" /><text value=\"function\" class=\"keyword\" /><text value=\" \" /><text value=\"doSomeMath\" class=\"title\" /><text value=\"(\" /><text value=\"input, callback\" class=\"params\" /><text value=\") \" /><text value=\"{\" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;We are doubling the input number.&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\" callback(input);\" /><text type=\"break\" /><text value=\"}\" /><text type=\"break\" /><text value=\"doSomeMath(\" /><text value=\"2\" class=\"number\" /><text value=\", multiplyCallback);\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"228\" endIndex=\"238\" /><option startIndex=\"238\" endIndex=\"239\" /><option startIndex=\"239\" endIndex=\"241\" /><option startIndex=\"242\" endIndex=\"258\" /><option startIndex=\"258\" endIndex=\"259\" /></options></interaction></interactions><output><content><text value=\"We are doubling the input number.\" /><text type=\"break\" /><text value=\"The input doubled is equal to 4\" /></content></output></code><p visible-if=\"wrong\">Certifique-se de escolher <code>doSomeMath</code> seguido de <code>(</code> e depois <code>2,</code>, <code>multiplyCallback</code>, <code>)</code>.</p></body></html>"
          },
          {
            "title": "Asynchronous Callback",
            "id": 120723,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Também podemos usar funções de callback em métodos assíncronos do JavaScript. Passe o callback para o método assíncrono <code>setTimeout()</code>.</p><p>Você aprenderá mais sobre este método mais tarde, por enquanto, concentre-se na saída do console.</p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"function\" class=\"keyword\" /><text value=\" \" /><text value=\"callbackFunc\" class=\"title\" /><text value=\"(\" /><text value=\"\" class=\"params\" /><text value=\") \" /><text value=\"{\" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;Executed last because we're using asynchronous code.&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\"}\" /><text type=\"break\" /><text value=\"setTimeout(callbackFunc, \" /><text value=\"1500\" class=\"number\" /><text value=\");\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"'Executed first'\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"'Executed second'\" class=\"string\" /><text value=\");\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"109\" endIndex=\"121\" /></options></interaction></interactions><output><content><text value=\"Executed first\" /><text type=\"break\" /><text value=\"Executed second\" /><text type=\"break\" /><text value=\"Executed last because we're using asynchronous code.\" /></content></output></code><p visible-if=\"wrong\">Certifique-se de escolher <code>callbackFunc</code>.</p></body></html>"
          },
          {
            "title": "Asynchronous Callback 2",
            "id": 120656,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Podemos aproveitar a sincronia e a assincronia juntas. Aqui, encadeamos operações a uma string que acontecerão uma após a outra.</p><p> Em seguida, execute nossa função personalizada como um callback de forma assíncrona.</p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" word = \" /><text value=\"&quot;enola&quot;\" class=\"string\" /><text value=\";\" /><text type=\"break\" /><text value=\"function\" class=\"keyword\" /><text value=\" \" /><text value=\"reverseCallback\" class=\"title\" /><text value=\"(\" /><text value=\"\" class=\"params\" /><text value=\") \" /><text value=\"{\" /><text type=\"break\" /><text value=\" \" /><text value=\"const\" class=\"keyword\" /><text value=\" result = word.split(\" /><text value=\"&quot;&quot;\" class=\"string\" /><text value=\").reverse().join(\" /><text value=\"&quot;&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"`The string reversed is: &quot;\" /><text value=\"${result}\" class=\"subst\" /><text value=\"&quot;`\" /><text value=\");\" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;Executed last because we're using asynchronous code.&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\"}\" /><text type=\"break\" /><text value=\"setTimeout(reverseCallback, \" /><text value=\"1500\" class=\"number\" /><text value=\");\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"'Executed first'\" class=\"string\" /><text value=\");\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"238\" endIndex=\"253\" /></options></interaction></interactions><output><content><text value=\"Executed first\" /><text type=\"break\" /><text value=\"The string reversed is: &quot;alone&quot;\" /><text type=\"break\" /><text value=\"Executed last because we're using asynchronous code.\" /></content></output></code><p visible-if=\"wrong\">Certifique-se de escolher <code>reverseCallback</code>.</p></body></html>"
          },
          {
            "title": "Asynchronous JS History",
            "id": 120652,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Embora callbacks personalizados possam ser benéficos, ter muitos callbacks resulta em um aninhamento profundo.</p><p>Códigos profundamente aninhados são indesejáveis porque são difíceis de entender e manter. Você em breve aprenderá uma sintaxe que ajuda a simplificar isso.</p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"func1(\" /><text value=\"&quot;one&quot;\" class=\"string\" /><text value=\", () =&gt; {\" /><text type=\"break\" /><text value=\" func2(\" /><text value=\"&quot;two&quot;\" class=\"string\" /><text value=\", () =&gt; {\" /><text type=\"break\" /><text value=\"  func3(\" /><text value=\"&quot;three&quot;\" class=\"string\" /><text value=\", () =&gt; {\" /><text type=\"break\" /><text value=\"   \" /><text value=\"// etc...\" class=\"comment\" /><text type=\"break\" /><text value=\"  });\" /><text type=\"break\" /><text value=\" });\" /><text type=\"break\" /><text value=\"});\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"0\" endIndex=\"5\" /><option startIndex=\"22\" endIndex=\"27\" /><option startIndex=\"45\" endIndex=\"50\" /></options></interaction></interactions></code><p visible-if=\"wrong\">Certifique-se de escolher <code>func1</code> seguido de <code>func2</code> e finalmente <code>func3</code>.</p></body></html>"
          },
          {
            "title": "Question: Asynhchronous JS History",
            "id": 120744,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Qual é um problema comum ao usar apenas callbacks para implementar código JavaScript assíncrono?</p><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\">Podemos acabar com um código profundamente aninhado</item><item value=\"2\" correct=\"false\">Não podemos usar callbacks desde que o ES8 foi introduzido</item></selection><p visible-if=\"wrong\">Podemos acabar com um código profundamente aninhado.</p></body></html>"
          },
          {
            "title": "Question: Callback Functions",
            "id": 120746,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Qual é uma característica das funções de callback?</p><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\">Eles são sempre chamados dentro de outra função</item><item value=\"2\" correct=\"false\">Eles só podem ser chamados uma vez</item></selection><p visible-if=\"wrong\">Eles são sempre chamados dentro de outra função.</p></body></html>"
          },
          {
            "title": "Question: Customizing Callbacks",
            "id": 120747,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>O que é verdade sobre funções de callback?</p><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\">Podemos personalizá-los para fazer o que precisarmos</item><item value=\"2\" correct=\"false\">Eles são limitados a operações matemáticas</item></selection><p visible-if=\"wrong\">Podemos personalizá-los para fazer o que precisarmos.</p></body></html>"
          },
          {
            "title": "Question: Asynchronous Callback",
            "id": 120748,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>O que é preciso em relação às funções de callback?</p><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\">Podemos usá-los com código assíncrono</item><item value=\"2\" correct=\"false\">Não podemos usá-los com código assíncrono</item></selection><p visible-if=\"wrong\">Podemos usá-los com código assíncrono.</p></body></html>"
          },
          {
            "title": "Example: Callback Functions/ES6",
            "id": 120753,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Complete a função de callback que passamos para <code>sayHello</code>.</p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" sayHello = \" /><text value=\"(\" /><text value=\"name, callback\" class=\"params\" /><text value=\") =&gt;\" /><text value=\" {\" /><text type=\"break\" /><text value=\"  \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"`Hello, \" /><text value=\"${name}\" class=\"subst\" /><text value=\"!`\" /><text value=\");\" /><text type=\"break\" /><text value=\"  callback();\" /><text type=\"break\" /><text value=\"};\" /><text type=\"break\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" sayGoodbye = \" /><text value=\"()\" class=\"params\" /><text value=\" =&gt;\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;Goodbye!&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text type=\"break\" /><text value=\"sayHello(\" /><text value=\"&quot;Jon&quot;\" class=\"string\" /><text value=\", sayGoodbye);\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"75\" endIndex=\"86\" /><option startIndex=\"97\" endIndex=\"107\" /><option startIndex=\"158\" endIndex=\"168\" /></options></interaction></interactions><output><content><text value=\"Hello, Jon!\" /><text type=\"break\" /><text value=\"Goodbye!\" /></content></output></code><p visible-if=\"wrong\">Certifique-se de escolher <code>callback();</code> seguido de <code>sayGoodbye</code> e finalmente <code>sayGoodbye</code>.</p></body></html>"
          },
          {
            "title": "Example: Customizing Callbacks",
            "id": 120754,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Complete a invocação de <code>doSomeMath()</code> passando a função de callback personalizada para o segundo parâmetro.</p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"function\" class=\"keyword\" /><text value=\" \" /><text value=\"multiplyCallback\" class=\"title\" /><text value=\"(\" /><text value=\"num\" class=\"params\" /><text value=\") \" /><text value=\"{\" /><text type=\"break\" /><text value=\" \" /><text value=\"const\" class=\"keyword\" /><text value=\" result = num * \" /><text value=\"2\" class=\"number\" /><text value=\";\" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"`The input doubled is equal to \" /><text value=\"${result}\" class=\"subst\" /><text value=\"`\" /><text value=\");\" /><text type=\"break\" /><text value=\"}\" /><text type=\"break\" /><text type=\"break\" /><text value=\"function\" class=\"keyword\" /><text value=\" \" /><text value=\"doSomeMath\" class=\"title\" /><text value=\"(\" /><text value=\"input, callback\" class=\"params\" /><text value=\") \" /><text value=\"{\" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;We are doubling the input number.&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\" callback(input);\" /><text type=\"break\" /><text value=\"}\" /><text type=\"break\" /><text value=\"doSomeMath(\" /><text value=\"2\" class=\"number\" /><text value=\", multiplyCallback);\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"242\" endIndex=\"258\" /></options></interaction></interactions><output><content><text value=\"We are doubling the input number.\" /><text type=\"break\" /><text value=\"The input doubled is equal to 4\" /></content></output></code><p visible-if=\"wrong\">Certifique-se de escolher <code>multiplyCallback</code>.</p></body></html>"
          },
          {
            "title": "Example: Asynchronous Callback",
            "id": 120755,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Passa a função de callback para <code>setTimeout()</code> para completar este código assíncrono.</p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"function\" class=\"keyword\" /><text value=\" \" /><text value=\"callbackFunc\" class=\"title\" /><text value=\"(\" /><text value=\"\" class=\"params\" /><text value=\") \" /><text value=\"{\" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;Executed last because we're using asynchronous code.&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\"}\" /><text type=\"break\" /><text value=\"setTimeout(callbackFunc, \" /><text value=\"1500\" class=\"number\" /><text value=\");\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"'Executed first'\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"'Executed second'\" class=\"string\" /><text value=\");\" /></content><interactions><interaction type=\"validatedInput\" isDefault=\"true\" startIndex=\"109\" endIndex=\"121\" /></interactions></code><p visible-if=\"wrong\">Certifique-se de escolher <code>callbackFunc</code>.</p></body></html>"
          }
        ]
      }
    ]
  }
}