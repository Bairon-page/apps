{
  "tutorial": {
    "id": 2890,
    "version": 3,
    "type": "guidedProject",
    "isNew": false,
    "codeLanguage": "node",
    "title": "Gerenciador de Tarefas - Parte 2",
    "descriptionContent": "Na segunda parte do projeto, vamos permitir que nossos usuários definam tarefas como concluídas e, com isso, tornar o gerenciador de tarefas uma ferramenta útil.",
    "shortDescriptionContent": "",
    "showInTrack": true,
    "iconBanner": "tutorial-2890-icon-banner.svg",
    "chapters": [
      {
        "id": 14981,
        "title": "Capítulo #1",
        "type": "practiceLevel3",
        "lessons": [
          {
            "title": "Lesson #1",
            "id": 132085,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Bem-vindo de volta ao projeto **Gerenciador de Tarefas**. Na segunda parte do projeto, vamos permitir que os usuários adicionem novas tarefas e alterem o status das tarefas.\n\n1. Abaixo do endpoint `GET /tasks/:id` no seu arquivo `app.js`, crie um novo endpoint para uma requisição POST em `/tasks`.\n2. Na função de callback, extraia o `title` e `description` de `req.body` usando a desestruturação de objetos.\n3. Se não houver um título, envie uma resposta 400 com uma mensagem de erro em JSON dizendo `\"Title is required\"`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "app.js",
                  "codeLanguage": "javascript",
                  "content": "const db = require(\"./database\");\nconst express = require(\"express\");\nconst app = express();\nconst port = 3000;\n\napp.use(express.json());\n\napp.listen(port, () => {\n  console.log(`App is running on port ${port}`);\n});\n\napp.get(\"/tasks\", (req, res) => {\n  const tasks = db.prepare(\"SELECT * FROM tasks\").all();\n  res.status(200).json({\n    tasks: tasks,\n  });\n});\n",
                  "solvedContent": "const db = require(\"./database\");\nconst express = require(\"express\");\nconst app = express();\nconst port = 3000;\n\napp.use(express.json());\n\napp.listen(port, () => {\n  console.log(`App is running on port ${port}`);\n});\n\napp.get(\"/tasks\", (req, res) => {\n  const tasks = db.prepare(\"SELECT * FROM tasks\").all();\n  res.status(200).json({\n    tasks: tasks,\n  });\n});\n\napp.post(\"/tasks\", (req, res) => {\n  const { title, description } = req.body;\n  if (!title) {\n    return res.status(400).json({ error: \"Title is required\" });\n  }\n});\n"
                },
                {
                  "name": "database.js",
                  "codeLanguage": "javascript",
                  "content": "const Database = require(\"better-sqlite3\");\nconst db = new Database(\"/tmp/tasks.db\");\n\ndb.exec(`\n    CREATE TABLE IF NOT EXISTS tasks (\n      id INTEGER PRIMARY KEY AUTOINCREMENT,\n      title TEXT NOT NULL,\n      description TEXT,\n      status TEXT NOT NULL DEFAULT 'pending' CHECK(status IN ('pending', 'completed'))\n    )\n`);\n\ndb.exec(`\n    INSERT INTO tasks (title, description, status)\n    VALUES \n    ('Buy groceries', 'Milk, Bread, Eggs', 'pending'),\n    ('Clean the house', 'Vacuum and dust the living room', 'completed'),\n    ('Finish the report', 'Complete the annual financial report', 'pending')\n`);\n\nmodule.exports = db;\n",
                  "solvedContent": null
                }
              ],
              "hints": [],
              "httpOptions": {
                "method": "POST",
                "path": "/tasks",
                "body": "{}"
              }
            }
          },
          {
            "title": "Lesson #2",
            "id": 132086,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Vamos em frente e implementar o código para inserir a nova tarefa no banco de dados.\n\n1. Usando o `title` e `description` passados, adicione uma nova tarefa à tabela de tarefas.\n2. Retorne o id da tarefa recém-criada no JSON como `taskId` e defina o status como 201.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "app.js",
                  "codeLanguage": "javascript",
                  "content": "const db = require(\"./database\");\nconst express = require(\"express\");\nconst app = express();\nconst port = 3000;\n\napp.use(express.json());\n\napp.listen(port, () => {\n  console.log(`App is running on port ${port}`);\n});\n\napp.get(\"/tasks\", (req, res) => {\n  const tasks = db.prepare(\"SELECT * FROM tasks\").all();\n  res.status(200).json({\n    tasks: tasks,\n  });\n});\n\napp.post(\"/tasks\", (req, res) => {\n  const { title, description } = req.body;\n  if (!title) {\n    return res.status(400).json({ error: \"Title is required\" });\n  }\n});\n",
                  "solvedContent": "const db = require(\"./database\");\nconst express = require(\"express\");\nconst app = express();\nconst port = 3000;\n\napp.use(express.json());\n\napp.listen(port, () => {\n  console.log(`App is running on port ${port}`);\n});\n\napp.get(\"/tasks\", (req, res) => {\n  const tasks = db.prepare(\"SELECT * FROM tasks\").all();\n  res.status(200).json({\n    tasks: tasks,\n  });\n});\n\napp.post(\"/tasks\", (req, res) => {\n  const { title, description } = req.body;\n  if (!title) {\n    return res.status(400).json({ error: \"Title is required\" });\n  }\n\n  const insert = db.prepare(\n    \"INSERT INTO tasks (title, description) VALUES (?, ?)\",\n  );\n  const result = insert.run(title, description);\n\n  res.status(201).json({\n    taskId: result.lastInsertRowid,\n    message: \"Task created successfully\",\n  });\n});\n"
                },
                {
                  "name": "database.js",
                  "codeLanguage": "javascript",
                  "content": "const Database = require(\"better-sqlite3\");\nconst db = new Database(\"/tmp/tasks.db\");\n\ndb.exec(`\n    CREATE TABLE IF NOT EXISTS tasks (\n      id INTEGER PRIMARY KEY AUTOINCREMENT,\n      title TEXT NOT NULL,\n      description TEXT,\n      status TEXT NOT NULL DEFAULT 'pending' CHECK(status IN ('pending', 'completed'))\n    )\n`);\n\ndb.exec(`\n    INSERT INTO tasks (title, description, status)\n    VALUES \n    ('Buy groceries', 'Milk, Bread, Eggs', 'pending'),\n    ('Clean the house', 'Vacuum and dust the living room', 'completed'),\n    ('Finish the report', 'Complete the annual financial report', 'pending')\n`);\n\nmodule.exports = db;\n",
                  "solvedContent": null
                }
              ],
              "hints": [],
              "httpOptions": {
                "method": "POST",
                "path": "/tasks",
                "body": "{\n  \"title\": \"Read a book\",\n  \"description\": \"I really want to read 'Catch-22' or a similar book.\"\n}"
              }
            }
          },
          {
            "title": "Lesson #3",
            "id": 132087,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Para atualizar o status de uma tarefa existente, vamos criar um endpoint que lida com uma requisição PUT.\n\n1. Defina um novo endpoint para uma requisição `PUT` no URI `/tasks/:id`.\n2. Na função de callback, extraia o `id` de `req.params` e o `status` de `req.body`.\n3. Se o status não tiver o valor `\"completed\"` ou `\"pending\"`, responda com o código de status 400 e uma mensagem de erro em formato JSON dizendo `\"Invalid status\"`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "app.js",
                  "codeLanguage": "javascript",
                  "content": "const db = require(\"./database\");\nconst express = require(\"express\");\nconst app = express();\nconst port = 3000;\n\napp.use(express.json());\n\napp.listen(port, () => {\n  console.log(`App is running on port ${port}`);\n});\n\napp.get(\"/tasks\", (req, res) => {\n  const tasks = db.prepare(\"SELECT * FROM tasks\").all();\n  res.status(200).json({\n    tasks: tasks,\n  });\n});\n\napp.post(\"/tasks\", (req, res) => {\n  const { title, description } = req.body;\n  if (!title) {\n    return res.status(400).json({ error: \"Title is required\" });\n  }\n\n  const insert = db.prepare(\n    \"INSERT INTO tasks (title, description) VALUES (?, ?)\",\n  );\n  const result = insert.run(title, description);\n\n  res.status(201).json({\n    taskId: result.lastInsertRowid,\n    message: \"Task created successfully\",\n  });\n});\n",
                  "solvedContent": "const db = require(\"./database\");\nconst express = require(\"express\");\nconst app = express();\nconst port = 3000;\n\napp.use(express.json());\n\napp.listen(port, () => {\n  console.log(`App is running on port ${port}`);\n});\n\napp.get(\"/tasks\", (req, res) => {\n  const tasks = db.prepare(\"SELECT * FROM tasks\").all();\n  res.status(200).json({\n    tasks: tasks,\n  });\n});\n\napp.post(\"/tasks\", (req, res) => {\n  const { title, description } = req.body;\n  if (!title) {\n    return res.status(400).json({ error: \"Title is required\" });\n  }\n\n  const insert = db.prepare(\n    \"INSERT INTO tasks (title, description) VALUES (?, ?)\",\n  );\n  const result = insert.run(title, description);\n\n  res.status(201).json({\n    taskId: result.lastInsertRowid,\n    message: \"Task created successfully\",\n  });\n});\n\napp.put(\"/tasks/:id\", (req, res) => {\n  const { id } = req.params;\n  const { status } = req.body;\n  if (status !== \"completed\" && status !== \"pending\") {\n    return res.status(400).json({ error: \"Invalid status\" });\n  }\n});\n"
                },
                {
                  "name": "database.js",
                  "codeLanguage": "javascript",
                  "content": "const Database = require(\"better-sqlite3\");\nconst db = new Database(\"/tmp/tasks.db\");\n\ndb.exec(`\n    CREATE TABLE IF NOT EXISTS tasks (\n      id INTEGER PRIMARY KEY AUTOINCREMENT,\n      title TEXT NOT NULL,\n      description TEXT,\n      status TEXT NOT NULL DEFAULT 'pending' CHECK(status IN ('pending', 'completed'))\n    )\n`);\n\ndb.exec(`\n    INSERT INTO tasks (title, description, status)\n    VALUES \n    ('Buy groceries', 'Milk, Bread, Eggs', 'pending'),\n    ('Clean the house', 'Vacuum and dust the living room', 'completed'),\n    ('Finish the report', 'Complete the annual financial report', 'pending')\n`);\n\nmodule.exports = db;\n",
                  "solvedContent": null
                }
              ],
              "hints": [],
              "httpOptions": {
                "method": "PUT",
                "path": "/tasks/1",
                "body": "{\n  \"status\": \"Invalid status\"\n}"
              }
            }
          },
          {
            "title": "Lesson #4",
            "id": 132088,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Vamos finalizar a rota atualizando o banco de dados com o novo status da tarefa.\n\n1. Atualize o status da tarefa com o id fornecido, definindo-o como `\"completed\"` ou `\"pending\"`.\n2. Se nenhuma tarefa com o ID fornecido for encontrada, retorne o código de status `404` junto com uma mensagem de erro.\n3. Se a tarefa foi atualizada com sucesso, retorne o código de status `200`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "app.js",
                  "codeLanguage": "javascript",
                  "content": "const db = require(\"./database\");\nconst express = require(\"express\");\nconst app = express();\nconst port = 3000;\n\napp.use(express.json());\n\napp.listen(port, () => {\n  console.log(`App is running on port ${port}`);\n});\n\napp.get(\"/tasks\", (req, res) => {\n  const tasks = db.prepare(\"SELECT * FROM tasks\").all();\n  res.status(200).json({\n    tasks: tasks,\n  });\n});\n\napp.post(\"/tasks\", (req, res) => {\n  const { title, description } = req.body;\n  if (!title) {\n    return res.status(400).json({ error: \"Title is required\" });\n  }\n\n  const insert = db.prepare(\n    \"INSERT INTO tasks (title, description) VALUES (?, ?)\",\n  );\n  const result = insert.run(title, description);\n\n  res.status(201).json({\n    taskId: result.lastInsertRowid,\n    message: \"Task created successfully\",\n  });\n});\n\napp.put(\"/tasks/:id\", (req, res) => {\n  const { id } = req.params;\n  const { status } = req.body;\n  if (status !== \"completed\" && status !== \"pending\") {\n    return res.status(400).json({ error: \"Invalid status\" });\n  }\n});\n",
                  "solvedContent": "const db = require(\"./database\");\nconst express = require(\"express\");\nconst app = express();\nconst port = 3000;\n\napp.use(express.json());\n\napp.listen(port, () => {\n  console.log(`App is running on port ${port}`);\n});\n\napp.get(\"/tasks\", (req, res) => {\n  const tasks = db.prepare(\"SELECT * FROM tasks\").all();\n  res.status(200).json({\n    tasks: tasks,\n  });\n});\n\napp.post(\"/tasks\", (req, res) => {\n  const { title, description } = req.body;\n  if (!title) {\n    return res.status(400).json({ error: \"Title is required\" });\n  }\n\n  const insert = db.prepare(\n    \"INSERT INTO tasks (title, description) VALUES (?, ?)\",\n  );\n  const result = insert.run(title, description);\n\n  res.status(201).json({\n    taskId: result.lastInsertRowid,\n    message: \"Task created successfully\",\n  });\n});\n\napp.put(\"/tasks/:id\", (req, res) => {\n  const { id } = req.params;\n  const { status } = req.body;\n  if (status !== \"completed\" && status !== \"pending\") {\n    return res.status(400).json({ error: \"Invalid status\" });\n  }\n\n  const update = db.prepare(\"UPDATE tasks SET status = ? WHERE id = ?\");\n  const result = update.run(status, id);\n\n  if (result.changes === 0) {\n    return res.status(404).json({ error: \"Task not found\" });\n  }\n\n  res.status(200).json({\n    message: `Task with id ${id} updated successfully.`,\n    updatedStatus: status,\n  });\n});\n"
                },
                {
                  "name": "database.js",
                  "codeLanguage": "javascript",
                  "content": "const Database = require(\"better-sqlite3\");\nconst db = new Database(\"/tmp/tasks.db\");\n\ndb.exec(`\n    CREATE TABLE IF NOT EXISTS tasks (\n      id INTEGER PRIMARY KEY AUTOINCREMENT,\n      title TEXT NOT NULL,\n      description TEXT,\n      status TEXT NOT NULL DEFAULT 'pending' CHECK(status IN ('pending', 'completed'))\n    )\n`);\n\ndb.exec(`\n    INSERT INTO tasks (title, description, status)\n    VALUES \n    ('Buy groceries', 'Milk, Bread, Eggs', 'pending'),\n    ('Clean the house', 'Vacuum and dust the living room', 'completed'),\n    ('Finish the report', 'Complete the annual financial report', 'pending')\n`);\n\nmodule.exports = db;\n",
                  "solvedContent": null
                }
              ],
              "hints": [],
              "httpOptions": {
                "method": "PUT",
                "path": "/tasks/1",
                "body": "{\n  \"status\": \"completed\"\n}"
              }
            }
          }
        ]
      }
    ]
  }
}