{
  "tutorial": {
    "id": 3084,
    "version": 3,
    "type": "guidedProject",
    "isNew": false,
    "codeLanguage": "jsx",
    "title": "Clone do Wordle",
    "descriptionContent": "Recrie o famoso jogo de palavras construindo sua lógica e mecânicas principais, passo a passo",
    "shortDescriptionContent": "",
    "showInTrack": true,
    "iconBanner": "tutorial-3084-icon-banner.svg",
    "chapters": [
      {
        "id": 15372,
        "title": "Capítulo #1",
        "type": "practiceLevel3",
        "lessons": [
          {
            "title": "Lesson #1 - Copy",
            "id": 135288,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Bem-vindo ao projeto **Clone do Wordle**. Vamos usar React para construir um clone do famoso jogo Wordle. O jogo é sobre adivinhar uma palavra de 5 letras.\n\nVamos começar adicionando alguns estilos através do arquivo `App.css`.\n\n1. No componente `App`, importe o arquivo `App.css`.\n2. Mude para o arquivo `App.css` para estilizar o elemento `body`:\n   - Defina `margin` como `0`.\n   - Defina `font-family` como `Arial, sans-serif`.\n   - Defina `height` como `100vh`.\n   - Defina `background` como `linear-gradient(135deg, #f3e7e9, #e3eeff)`.",
              "preselectedFileIndex": 2,
              "hasVisualOutput": true,
              "files": [
                {
                  "name": "index.html",
                  "codeLanguage": "html",
                  "content": "<!doctype html>\n<html>\n  <head>\n    <script type=\"module\" src=\"./index.js\"></script>\n    <link rel=\"stylesheet\" href=\"./index.css\" />\n    <title>Wordle</title>\n  </head>\n  <body>\n    <div id=\"root\">loading</div>\n  </body>\n</html>",
                  "solvedContent": null
                },
                {
                  "name": "index.jsx",
                  "codeLanguage": "jsx",
                  "content": "import React from \"react\";\nimport { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\n\nconst container = document.getElementById(\"root\");\nconst root = createRoot(container);\nroot.render(<App />);\n",
                  "solvedContent": null
                },
                {
                  "name": "App.jsx",
                  "codeLanguage": "jsx",
                  "content": "import React from \"react\";\n\nconst App = () => {\n\n  return (\n    <div>\n      <h1>Wordle</h1>\n    </div>\n  );\n};\n\nexport default App;\n",
                  "solvedContent": "import React from \"react\";\nimport \"./App.css\";\n\nconst App = () => {\n\n  return (\n    <div>\n      <h1>Wordle</h1>\n    </div>\n  );\n};\n\nexport default App;\n"
                },
                {
                  "name": "App.css",
                  "codeLanguage": "css",
                  "content": "",
                  "solvedContent": "body {\n  margin: 0;\n  font-family: Arial, sans-serif;\n  height: 100vh;\n  background: linear-gradient(135deg, #f3e7e9, #e3eeff);\n}"
                },
                {
                  "name": "Row.jsx",
                  "codeLanguage": "jsx",
                  "content": "",
                  "solvedContent": null
                },
                {
                  "name": "Row.css",
                  "codeLanguage": "css",
                  "content": "",
                  "solvedContent": null
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Lesson #11",
            "id": 135282,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Como segundo passo, queremos criar uma classe para o contêiner principal dentro do componente `App` que possamos direcionar para estilização adicional.\n\n1. No componente `App`, defina `\"main-container\"` como o valor para o `className` do elemento `div`.\n2. Mude para o arquivo `App.css` para adicionar estilização para a classe `.main-container`:\n   - Defina `display` como `flex`.\n   - Defina `flex-direction` como `column`.\n   - Defina `align-items` como `center`.\n   - Defina `justify-content` como `center`.",
              "preselectedFileIndex": 2,
              "hasVisualOutput": true,
              "files": [
                {
                  "name": "index.html",
                  "codeLanguage": "html",
                  "content": "<!doctype html>\n<html>\n  <head>\n    <script type=\"module\" src=\"./index.js\"></script>\n    <link rel=\"stylesheet\" href=\"./index.css\" />\n    <title>Wordle</title>\n  </head>\n  <body>\n    <div id=\"root\">loading</div>\n  </body>\n</html>",
                  "solvedContent": null
                },
                {
                  "name": "index.jsx",
                  "codeLanguage": "jsx",
                  "content": "import React from \"react\";\nimport { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\n\nconst container = document.getElementById(\"root\");\nconst root = createRoot(container);\nroot.render(<App />);\n",
                  "solvedContent": null
                },
                {
                  "name": "App.jsx",
                  "codeLanguage": "jsx",
                  "content": "import React from \"react\";\nimport \"./App.css\";\n\nconst App = () => {\n\n  return (\n    <div>\n      <h1>Wordle</h1>\n    </div>\n  );\n};\n\nexport default App;\n",
                  "solvedContent": "import React from \"react\";\nimport \"./App.css\";\n\nconst App = () => {\n\n  return (\n    <div className=\"main-container\">\n      <h1>Wordle</h1>\n    </div>\n  );\n};\n\nexport default App;\n"
                },
                {
                  "name": "App.css",
                  "codeLanguage": "css",
                  "content": "body {\n  margin: 0;\n  font-family: Arial, sans-serif;\n  height: 100vh;\n  background: linear-gradient(135deg, #f3e7e9, #e3eeff);\n}",
                  "solvedContent": "body {\n  margin: 0;\n  font-family: Arial, sans-serif;\n  height: 100vh;\n  background: linear-gradient(135deg, #f3e7e9, #e3eeff);\n}\n\n.main-container {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n}"
                },
                {
                  "name": "Row.jsx",
                  "codeLanguage": "jsx",
                  "content": "",
                  "solvedContent": null
                },
                {
                  "name": "Row.css",
                  "codeLanguage": "css",
                  "content": "",
                  "solvedContent": null
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Lesson #4",
            "id": 135275,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Vamos agora começar com a lógica. Para nos ajudar a trabalhar no app, vamos adicionar imediatamente alguns dados de demonstração para exibir.\n\n1. Atualize a declaração de importação para incluir `useState` do React.\n2. Defina uma nova constante `targetWord` e atribua o valor `\"REACT\"`. Esta será a palavra que o jogador precisa adivinhar.\n3. Crie uma nova variável de estado `guesses` inicializada com um array de palavras de adivinhação. Por enquanto, vamos simular três adivinhações. Use `[\"PARTY\", \"DRAFT\", \"REACT\"]` como valor inicial do array `guesses`.\n4. Itere sobre o array `guesses` e renderize cada valor na variável de estado `guesses`.",
              "preselectedFileIndex": 2,
              "hasVisualOutput": true,
              "files": [
                {
                  "name": "index.html",
                  "codeLanguage": "html",
                  "content": "<!doctype html>\n<html>\n  <head>\n    <script type=\"module\" src=\"./index.js\"></script>\n    <link rel=\"stylesheet\" href=\"./index.css\" />\n    <title>Wordle</title>\n  </head>\n  <body>\n    <div id=\"root\">loading</div>\n  </body>\n</html>",
                  "solvedContent": null
                },
                {
                  "name": "index.jsx",
                  "codeLanguage": "jsx",
                  "content": "import React from \"react\";\nimport { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\n\nconst container = document.getElementById(\"root\");\nconst root = createRoot(container);\nroot.render(<App />);",
                  "solvedContent": null
                },
                {
                  "name": "App.jsx",
                  "codeLanguage": "jsx",
                  "content": "import React from \"react\";\nimport \"./App.css\";\n\nconst App = () => {\n  return (\n    <div className=\"main-container\">\n      <h1>Wordle</h1>\n    </div>\n  );\n};\n\nexport default App;\n",
                  "solvedContent": "import React, { useState } from \"react\";\nimport \"./App.css\";\n\nconst App = () => {\n  const targetWord = \"REACT\";\n\n  const [guesses, setGuesses] = useState([\"PARTY\", \"DRAFT\", \"REACT\"]);\n\n  return (\n    <div className=\"main-container\">\n      <h1>Wordle</h1>\n      {guesses.map((guess, index) => (\n        guess\n      ))}\n    </div>\n  );\n};\n\nexport default App;\n"
                },
                {
                  "name": "App.css",
                  "codeLanguage": "css",
                  "content": "body {\n  margin: 0;\n  font-family: Arial, sans-serif;\n  height: 100vh;\n  background: linear-gradient(135deg, #f3e7e9, #e3eeff);\n}\n\n.main-container {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n}",
                  "solvedContent": null
                },
                {
                  "name": "Row.jsx",
                  "codeLanguage": "jsx",
                  "content": "",
                  "solvedContent": "import React from \"react\";\n\nconst Row = ({ guess, targetWord }) => {\n  return <div className=\"word-row\">{guess}</div>;\n};\n\nexport default Row;\n"
                },
                {
                  "name": "Row.css",
                  "codeLanguage": "css",
                  "content": "",
                  "solvedContent": null
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Lesson #4 - Copy",
            "id": 135291,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Em seguida, vamos integrar o componente `Row` para exibir cada tentativa de palavra.\n\n1. No arquivo `Row.jsx`, crie um novo componente React chamado `Row`. Certifique-se de importar o `React` e exportar o componente também.\n2. Certifique-se de que o componente receba `guess` e `targetWord` como props.\n3. Retorne um elemento `div` com o `className` definido como `\"word-row\"` e exiba o `guess` passado dentro dele.\n4. Importe o componente `Row` no topo do arquivo `App.jsx`.\n5. Na função `map`, onde você itera sobre o array `guesses`, renderize um componente `Row` para cada tentativa.\n6. Defina o `index` como `key` e passe `guess` e `targetWord` como props para cada `Row`.",
              "preselectedFileIndex": 2,
              "hasVisualOutput": true,
              "files": [
                {
                  "name": "index.html",
                  "codeLanguage": "html",
                  "content": "<!doctype html>\n<html>\n  <head>\n    <script type=\"module\" src=\"./index.js\"></script>\n    <link rel=\"stylesheet\" href=\"./index.css\" />\n    <title>Wordle</title>\n  </head>\n  <body>\n    <div id=\"root\">loading</div>\n  </body>\n</html>",
                  "solvedContent": null
                },
                {
                  "name": "index.jsx",
                  "codeLanguage": "jsx",
                  "content": "import React from \"react\";\nimport { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\n\nconst container = document.getElementById(\"root\");\nconst root = createRoot(container);\nroot.render(<App />);",
                  "solvedContent": null
                },
                {
                  "name": "App.jsx",
                  "codeLanguage": "jsx",
                  "content": "import React, { useState } from \"react\";\nimport \"./App.css\";\n\nconst App = () => {\n  const targetWord = \"REACT\";\n\n  const [guesses, setGuesses] = useState([\"PARTY\", \"DRAFT\", \"REACT\"]);\n\n  return (\n    <div className=\"main-container\">\n      <h1>Wordle</h1>\n      {guesses.map((guess, index) => (\n        guess\n      ))}\n    </div>\n  );\n};\n\nexport default App;\n",
                  "solvedContent": "import React, { useState } from \"react\";\nimport \"./App.css\";\nimport Row from \"./Row\";\n\nconst App = () => {\n  const targetWord = \"REACT\";\n\n  const [guesses, setGuesses] = useState([\"PARTY\", \"DRAFT\", \"REACT\"]);\n\n  return (\n    <div className=\"main-container\">\n      <h1>Wordle</h1>\n      {guesses.map((guess, index) => (\n        <Row key={index} guess={guess} targetWord={targetWord} />\n      ))}\n    </div>\n  );\n};\n\nexport default App;\n"
                },
                {
                  "name": "App.css",
                  "codeLanguage": "css",
                  "content": "body {\n  margin: 0;\n  font-family: Arial, sans-serif;\n  height: 100vh;\n  background: linear-gradient(135deg, #f3e7e9, #e3eeff);\n}\n\n.main-container {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n}",
                  "solvedContent": null
                },
                {
                  "name": "Row.jsx",
                  "codeLanguage": "jsx",
                  "content": "",
                  "solvedContent": "import React from \"react\";\n\nconst Row = ({ guess, targetWord }) => {\n  return <div className=\"word-row\">{guess}</div>;\n};\n\nexport default Row;\n"
                },
                {
                  "name": "Row.css",
                  "codeLanguage": "css",
                  "content": "",
                  "solvedContent": null
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Lesson #6",
            "id": 135277,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Queremos dar algumas dicas ao jogador, indicando se uma determinada letra foi adivinhada corretamente ou não. Também queremos mostrar se uma letra está presente na palavra, mas não na posição correta.\n\n1. No componente `Row`, defina uma função auxiliar `getLetterStatus` dentro do componente para determinar se cada letra na tentativa é `correct`, `present` ou `absent` em comparação com a palavra alvo.\n   - A função deve aceitar dois parâmetros, `letter` e `index`.\n   - Primeiro, verifique se a letra é igual à letra no índice fornecido na palavra alvo: `letter === targetWord[index]`\n   - Se for o caso, retorne `\"correct\"`.\n   - Se não for o caso, verifique se a palavra alvo inclui a letra: `targetWord.includes(letter)`.\n   - Se for o caso, retorne `\"present\"`.\n   - Se nenhuma das opções acima for verdadeira, retorne `\"absent\"`.\n2. Dentro da declaração `return`, divida a tentativa em letras individuais para receber um array de letras em vez de uma palavra: `guess.split(\"\")`.\n3. Use `map` para iterar sobre o array recém-criado. Para cada letra, retorne um elemento `span`.\n   - Defina a `key` como `index`.\n   - Defina o `className` como `\"letter\"` e como `'correct\"`, `\"present\"` ou `\"absent\"` codificando o seguinte: ``className={`letter ${getLetterStatus(letter, index)}`}``.\n   - Exiba a letra como o conteúdo do elemento `span`.",
              "preselectedFileIndex": 4,
              "hasVisualOutput": true,
              "files": [
                {
                  "name": "index.html",
                  "codeLanguage": "html",
                  "content": "<!doctype html>\n<html>\n  <head>\n    <script type=\"module\" src=\"./index.js\"></script>\n    <link rel=\"stylesheet\" href=\"./index.css\" />\n    <title>Wordle</title>\n  </head>\n  <body>\n    <div id=\"root\">loading</div>\n  </body>\n</html>",
                  "solvedContent": null
                },
                {
                  "name": "index.jsx",
                  "codeLanguage": "jsx",
                  "content": "import React from \"react\";\nimport { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\n\nconst container = document.getElementById(\"root\");\nconst root = createRoot(container);\nroot.render(<App />);",
                  "solvedContent": null
                },
                {
                  "name": "App.jsx",
                  "codeLanguage": "jsx",
                  "content": "import React, { useState } from \"react\";\nimport \"./App.css\";\nimport Row from \"./Row\";\n\nconst App = () => {\n  const targetWord = \"REACT\";\n\n  const [guesses, setGuesses] = useState([\"PARTY\", \"DRAFT\", \"REACT\"]);\n\n  return (\n    <div className=\"main-container\">\n      <h1>Wordle</h1>\n      {guesses.map((guess, index) => (\n        <Row key={index} guess={guess} targetWord={targetWord} />\n      ))}\n    </div>\n  );\n};\n\nexport default App;\n",
                  "solvedContent": null
                },
                {
                  "name": "App.css",
                  "codeLanguage": "css",
                  "content": "body {\n  margin: 0;\n  font-family: Arial, sans-serif;\n  height: 100vh;\n  background: linear-gradient(135deg, #f3e7e9, #e3eeff);\n}\n\n.main-container {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n}",
                  "solvedContent": null
                },
                {
                  "name": "Row.jsx",
                  "codeLanguage": "jsx",
                  "content": "import React from \"react\";\n\nconst Row = ({ guess, targetWord }) => {\n  return <div className=\"word-row\">{guess}</div>;\n};\n\nexport default Row;\n",
                  "solvedContent": "import React from \"react\";\n\nconst Row = ({ guess, targetWord }) => {\n  const getLetterStatus = (letter, index) => {\n    if (letter === targetWord[index]) {\n      return \"correct\";\n    } else if (targetWord.includes(letter)) {\n      return \"present\";\n    } else {\n      return \"absent\";\n    }\n  };\n\n  return (\n    <div className=\"word-row\">\n      {guess.split(\"\").map((letter, index) => (\n        <span\n          key={index}\n          className={`letter ${getLetterStatus(letter, index)}`}\n        >\n          {letter}\n        </span>\n      ))}\n    </div>\n  );\n};\n\nexport default Row;\n"
                },
                {
                  "name": "Row.css",
                  "codeLanguage": "css",
                  "content": "",
                  "solvedContent": null
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Lesson #8",
            "id": 135279,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Próximo: estilizando o componente `Row` usando CSS.\n\n1. Ainda no componente `Row`, importe o arquivo `Row.css`.\n1. No arquivo `Row.css`, crie regras para `.word-row` para definir o layout da linha:\n   - Defina `display` como `flex`.\n   - Defina `justify-content` como `center`.\n   - Defina `margin` como `5px`.\n2. Além disso, crie uma regra `.letter` para estilizar letras individuais:\n   - Defina `width` como `40px`.\n   - Defina `height` como `40px`.\n   - Defina `display` como `inline-flex`.\n   - Defina `justify-content` como `center`.\n   - Defina `align-items` como `center`.\n   - Defina `margin` como `2px`.\n   - Defina `color` como `white`.\n   - Defina `font-weight` como `bold`.\n   - Defina `font-size` como `1.2em`.",
              "preselectedFileIndex": 4,
              "hasVisualOutput": true,
              "files": [
                {
                  "name": "index.html",
                  "codeLanguage": "html",
                  "content": "<!doctype html>\n<html>\n  <head>\n    <script type=\"module\" src=\"./index.js\"></script>\n    <link rel=\"stylesheet\" href=\"./index.css\" />\n    <title>Wordle</title>\n  </head>\n  <body>\n    <div id=\"root\">loading</div>\n  </body>\n</html>",
                  "solvedContent": null
                },
                {
                  "name": "index.jsx",
                  "codeLanguage": "jsx",
                  "content": "import React from \"react\";\nimport { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\n\nconst container = document.getElementById(\"root\");\nconst root = createRoot(container);\nroot.render(<App />);",
                  "solvedContent": null
                },
                {
                  "name": "App.jsx",
                  "codeLanguage": "jsx",
                  "content": "import React, { useState } from \"react\";\nimport \"./App.css\";\nimport Row from \"./Row\";\n\nconst App = () => {\n  const targetWord = \"REACT\";\n\n  const [guesses, setGuesses] = useState([\"PARTY\", \"DRAFT\", \"REACT\"]);\n\n  return (\n    <div className=\"main-container\">\n      <h1>Wordle</h1>\n      {guesses.map((guess, index) => (\n        <Row key={index} guess={guess} targetWord={targetWord} />\n      ))}\n    </div>\n  );\n};\n\nexport default App;\n",
                  "solvedContent": null
                },
                {
                  "name": "App.css",
                  "codeLanguage": "css",
                  "content": "body {\n  margin: 0;\n  font-family: Arial, sans-serif;\n  height: 100vh;\n  background: linear-gradient(135deg, #f3e7e9, #e3eeff);\n}\n\n.main-container {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n}",
                  "solvedContent": null
                },
                {
                  "name": "Row.jsx",
                  "codeLanguage": "jsx",
                  "content": "import React from \"react\";\n\nconst Row = ({ guess, targetWord }) => {\n  const getLetterStatus = (letter, index) => {\n    if (letter === targetWord[index]) {\n      return \"correct\";\n    } else if (targetWord.includes(letter)) {\n      return \"present\";\n    } else {\n      return \"absent\";\n    }\n  };\n\n  return (\n    <div className=\"word-row\">\n      {guess.split(\"\").map((letter, index) => (\n        <span\n          key={index}\n          className={`letter ${getLetterStatus(letter, index)}`}\n        >\n          {letter}\n        </span>\n      ))}\n    </div>\n  );\n};\n\nexport default Row;",
                  "solvedContent": "import React from \"react\";\nimport \"./Row.css\";\n\nconst Row = ({ guess, targetWord }) => {\n  const getLetterStatus = (letter, index) => {\n    if (letter === targetWord[index]) {\n      return \"correct\";\n    } else if (targetWord.includes(letter)) {\n      return \"present\";\n    } else {\n      return \"absent\";\n    }\n  };\n\n  return (\n    <div className=\"word-row\">\n      {guess.split(\"\").map((letter, index) => (\n        <span\n          key={index}\n          className={`letter ${getLetterStatus(letter, index)}`}\n        >\n          {letter}\n        </span>\n      ))}\n    </div>\n  );\n};\n\nexport default Row;"
                },
                {
                  "name": "Row.css",
                  "codeLanguage": "css",
                  "content": "",
                  "solvedContent": ".word-row {\n  display: flex;\n  justify-content: center;\n  margin: 5px;\n}\n\n.letter {\n  width: 40px;\n  height: 40px;\n  display: inline-flex;\n  justify-content: center;\n  align-items: center;\n  margin: 2px;\n  color: white;\n  font-weight: bold;\n  font-size: 1.2em;\n}"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Lesson #9",
            "id": 135280,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Queremos usar estilos específicos para letras corretas, presentes e ausentes.\n\n1. No arquivo `Row.css`, adicione estilos específicos para `.letter.correct`, `.letter.present` e `.letter.absent`. Defina a cor de fundo como `\"green\"`, `\"gold\"` e `\"lightgray\"`, respectivamente.",
              "preselectedFileIndex": 5,
              "hasVisualOutput": true,
              "files": [
                {
                  "name": "index.html",
                  "codeLanguage": "html",
                  "content": "<!doctype html>\n<html>\n  <head>\n    <script type=\"module\" src=\"./index.js\"></script>\n    <link rel=\"stylesheet\" href=\"./index.css\" />\n    <title>Wordle</title>\n  </head>\n  <body>\n    <div id=\"root\">loading</div>\n  </body>\n</html>",
                  "solvedContent": null
                },
                {
                  "name": "index.jsx",
                  "codeLanguage": "jsx",
                  "content": "import React from \"react\";\nimport { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\n\nconst container = document.getElementById(\"root\");\nconst root = createRoot(container);\nroot.render(<App />);\n",
                  "solvedContent": null
                },
                {
                  "name": "App.jsx",
                  "codeLanguage": "jsx",
                  "content": "import React, { useState } from \"react\";\nimport \"./App.css\";\nimport Row from \"./Row\";\n\nconst App = () => {\n  const targetWord = \"REACT\";\n\n  const [guesses, setGuesses] = useState([\"PARTY\", \"DRAFT\", \"REACT\"]);\n\n  return (\n    <div className=\"main-container\">\n      <h1>Wordle</h1>\n      {guesses.map((guess, index) => (\n        <Row key={index} guess={guess} targetWord={targetWord} />\n      ))}\n    </div>\n  );\n};\n\nexport default App;\n",
                  "solvedContent": null
                },
                {
                  "name": "App.css",
                  "codeLanguage": "css",
                  "content": "body {\n  margin: 0;\n  font-family: Arial, sans-serif;\n  height: 100vh;\n  background: linear-gradient(135deg, #f3e7e9, #e3eeff);\n}\n\n.main-container {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n}",
                  "solvedContent": null
                },
                {
                  "name": "Row.jsx",
                  "codeLanguage": "jsx",
                  "content": "import React from \"react\";\nimport \"./Row.css\";\n\nconst Row = ({ guess, targetWord }) => {\n  const getLetterStatus = (letter, index) => {\n    if (letter === targetWord[index]) {\n      return \"correct\";\n    } else if (targetWord.includes(letter)) {\n      return \"present\";\n    } else {\n      return \"absent\";\n    }\n  };\n\n  return (\n    <div className=\"word-row\">\n      {guess.split(\"\").map((letter, index) => (\n        <span\n          key={index}\n          className={`letter ${getLetterStatus(letter, index)}`}\n        >\n          {letter}\n        </span>\n      ))}\n    </div>\n  );\n};\n\nexport default Row;",
                  "solvedContent": null
                },
                {
                  "name": "Row.css",
                  "codeLanguage": "css",
                  "content": ".word-row {\n  display: flex;\n  justify-content: center;\n  margin: 5px;\n}\n\n.letter {\n  width: 40px;\n  height: 40px;\n  display: inline-flex;\n  justify-content: center;\n  align-items: center;\n  margin: 2px;\n  color: white;\n  font-weight: bold;\n  font-size: 1.2em;\n}",
                  "solvedContent": ".word-row {\n  display: flex;\n  justify-content: center;\n  margin: 5px;\n}\n\n.letter {\n  width: 40px;\n  height: 40px;\n  display: inline-flex;\n  justify-content: center;\n  align-items: center;\n  margin: 2px;\n  color: white;\n  font-weight: bold;\n  font-size: 1.2em;\n}\n\n.letter.correct {\n  background-color: green;\n}\n\n.letter.present {\n  background-color: gold;\n}\n\n.letter.absent {\n  background-color: lightgray;\n}"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Lesson #2",
            "id": 135284,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Em seguida, precisamos lidar com a entrada do jogador dentro do nosso app para permitir que palpites sejam inseridos e gerenciados.\n\n1. Dentro do componente `App`, crie outra variável de estado `currentGuess` inicializada como uma string vazia.\n2. Além disso, crie uma função chamada `handleInputChange` que recebe um evento como argumento e atualiza `currentGuess` usando `setCurrentGuess` com o valor de entrada em maiúsculas: `event.target.value.toUpperCase()`.\n3. No JSX que retornamos, abaixo dos componentes `Row`, adicione um elemento `input` com os atributos:\n   - Adicione `onChange={handleInputChange}` para lidar com as mudanças de entrada usando a função recém-criada.\n   - Adicione `maxLength={targetWord.length}` para restringir o comprimento da entrada.\n   - Adicione um placeholder como `\"Enter your guess\"`.",
              "preselectedFileIndex": 2,
              "hasVisualOutput": true,
              "files": [
                {
                  "name": "index.jsx",
                  "codeLanguage": "jsx",
                  "content": "import React from \"react\";\nimport { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\n\nconst container = document.getElementById(\"root\");\nconst root = createRoot(container);\nroot.render(<App />);",
                  "solvedContent": null
                },
                {
                  "name": "index.html",
                  "codeLanguage": "html",
                  "content": "<!doctype html>\n<html>\n<head>\n  <script type=\"module\" src=\"./index.js\"></script>\n  <link rel=\"stylesheet\" href=\"./index.css\" />\n  <title>Wordle</title>\n</head>\n<body>\n  <div id=\"root\">loading</div>\n</body>\n</html>",
                  "solvedContent": null
                },
                {
                  "name": "App.jsx",
                  "codeLanguage": "jsx",
                  "content": "import React, { useState } from \"react\";\nimport \"./App.css\";\nimport Row from \"./Row\";\n\nconst App = () => {\n  const targetWord = \"REACT\";\n\n  const [guesses, setGuesses] = useState([\"PARTY\", \"DRAFT\", \"REACT\"]);\n\n  return (\n    <div className=\"main-container\">\n      <h1>Wordle</h1>\n      {guesses.map((guess, index) => (\n        <Row key={index} guess={guess} targetWord={targetWord} />\n      ))}\n    </div>\n  );\n};\n\nexport default App;\n",
                  "solvedContent": "import React, { useState } from \"react\";\nimport \"./App.css\";\nimport Row from \"./Row\";\n\nconst App = () => {\n  const targetWord = \"REACT\";\n\n  const [guesses, setGuesses] = useState([\"PARTY\", \"DRAFT\", \"REACT\"]);\n  const [currentGuess, setCurrentGuess] = useState(\"\");\n\n  const handleInputChange = (event) => {\n    setCurrentGuess(event.target.value.toUpperCase());\n  };\n\n  return (\n    <div className=\"main-container\">\n      <h1>Wordle</h1>\n      {guesses.map((guess, index) => (\n        <Row key={index} guess={guess} targetWord={targetWord} />\n      ))}\n      <input\n        onChange={handleInputChange}\n        maxLength={targetWord.length}\n        placeholder=\"Enter your guess\"\n      />\n    </div>\n  );\n};\n\nexport default App;"
                },
                {
                  "name": "App.css",
                  "codeLanguage": "css",
                  "content": "body {\n  margin: 0;\n  font-family: Arial, sans-serif;\n  height: 100vh;\n  background: linear-gradient(135deg, #f3e7e9, #e3eeff);\n}\n\n.main-container {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n}",
                  "solvedContent": null
                },
                {
                  "name": "Row.jsx",
                  "codeLanguage": "jsx",
                  "content": "import React from \"react\";\nimport \"./Row.css\"\n\nconst Row = ({ guess, targetWord }) => {\n  const getLetterStatus = (letter, index) => {\n    if (letter === targetWord[index]) {\n      return \"correct\";\n    } else if (targetWord.includes(letter)) {\n      return \"present\";\n    } else {\n      return \"absent\";\n    }\n  };\n\n  return (\n    <div className=\"word-row\">\n      {guess.split(\"\").map((letter, index) => (\n        <span\n          key={index}\n          className={`letter ${getLetterStatus(letter, index)}`}\n        >\n          {letter}\n        </span>\n      ))}\n    </div>\n  );\n};\n\nexport default Row;",
                  "solvedContent": null
                },
                {
                  "name": "Row.css",
                  "codeLanguage": "css",
                  "content": ".word-row {\n  display: flex;\n  justify-content: center;\n  margin: 5px;\n}\n\n.letter {\n  width: 40px;\n  height: 40px;\n  display: inline-flex;\n  justify-content: center;\n  align-items: center;\n  margin: 2px;\n  color: white;\n  font-weight: bold;\n  font-size: 1.2em;\n}\n\n.letter.correct {\n  background-color: green;\n}\n\n.letter.present {\n  background-color: gold;\n}\n\n.letter.absent {\n  background-color: lightgray;\n}",
                  "solvedContent": null
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Lesson #3",
            "id": 135285,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Hora de integrar a funcionalidade para enviar palpites e processar a lógica do jogo.\n\n1. No componente `App`, crie uma função chamada `handleGuess`.\n   - Retorne imediatamente se `currentGuess.length` não for igual a `5`, pois cada palpite precisa ter 5 letras.\n   - Crie um array `updatedGuesses` com os palpites existentes mais `currentGuess`. Use o operador spread para adicionar `currentGuess` ao array `guesses` antes de atualizar a variável de estado com este novo array estendido.\n   - Defina a variável de estado `guesses` para o valor da variável `updatedGuesses` usando `setGuesses`.\n2. Abaixo do elemento `input`, adicione um elemento `button` com `onClick={handleGuess}` e o texto `Guess`. Isso deve acionar a nova função quando clicado.",
              "preselectedFileIndex": 2,
              "hasVisualOutput": true,
              "files": [
                {
                  "name": "index.jsx",
                  "codeLanguage": "jsx",
                  "content": "import React from \"react\";\nimport { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\n\nconst container = document.getElementById(\"root\");\nconst root = createRoot(container);\nroot.render(<App />);",
                  "solvedContent": null
                },
                {
                  "name": "index.html",
                  "codeLanguage": "html",
                  "content": "<!doctype html>\n<html>\n<head>\n  <script type=\"module\" src=\"./index.js\"></script>\n  <link rel=\"stylesheet\" href=\"./index.css\" />\n  <title>Wordle</title>\n</head>\n<body>\n  <div id=\"root\">loading</div>\n</body>\n</html>",
                  "solvedContent": null
                },
                {
                  "name": "App.jsx",
                  "codeLanguage": "jsx",
                  "content": "import React, { useState } from \"react\";\nimport \"./App.css\";\nimport Row from \"./Row\";\n\nconst App = () => {\n  const targetWord = \"REACT\";\n\n  const [guesses, setGuesses] = useState([\"PARTY\", \"DRAFT\", \"REACT\"]);\n  const [currentGuess, setCurrentGuess] = useState(\"\");\n\n  const handleInputChange = (event) => {\n    setCurrentGuess(event.target.value.toUpperCase());\n  };\n\n  return (\n    <div className=\"main-container\">\n      <h1>Wordle</h1>\n      {guesses.map((guess, index) => (\n        <Row key={index} guess={guess} targetWord={targetWord} />\n      ))}\n      <input\n        onChange={handleInputChange}\n        maxLength={targetWord.length}\n        placeholder=\"Enter your guess\"\n      />\n    </div>\n  );\n};\n\nexport default App;",
                  "solvedContent": "import React, { useState } from \"react\";\nimport \"./App.css\";\nimport Row from \"./Row\";\n\nconst App = () => {\n  const targetWord = \"REACT\";\n\n  const [guesses, setGuesses] = useState([\"PARTY\", \"DRAFT\", \"REACT\"]);\n  const [currentGuess, setCurrentGuess] = useState(\"\");\n\n  const handleInputChange = (event) => {\n    setCurrentGuess(event.target.value.toUpperCase());\n  };\n\n  const handleGuess = () => {\n    if (currentGuess.length !== 5) {\n      return;\n    }\n\n    const updatedGuesses = [...guesses, currentGuess];\n    setGuesses(updatedGuesses);\n  };\n\n  return (\n    <div className=\"main-container\">\n      <h1>Wordle</h1>\n      {guesses.map((guess, index) => (\n        <Row key={index} guess={guess} targetWord={targetWord} />\n      ))}\n      <input\n        onChange={handleInputChange}\n        maxLength={targetWord.length}\n        placeholder=\"Enter your guess\"\n      />\n      <button onClick={handleGuess}>Guess</button>\n    </div>\n  );\n};\n\nexport default App;"
                },
                {
                  "name": "App.css",
                  "codeLanguage": "css",
                  "content": "body {\n  margin: 0;\n  font-family: Arial, sans-serif;\n  height: 100vh;\n  background: linear-gradient(135deg, #f3e7e9, #e3eeff);\n}\n\n.main-container {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n}",
                  "solvedContent": null
                },
                {
                  "name": "Row.jsx",
                  "codeLanguage": "jsx",
                  "content": "import React from \"react\";\nimport \"./Row.css\"\n\nconst Row = ({ guess, targetWord }) => {\n  const getLetterStatus = (letter, index) => {\n    if (letter === targetWord[index]) {\n      return \"correct\";\n    } else if (targetWord.includes(letter)) {\n      return \"present\";\n    } else {\n      return \"absent\";\n    }\n  };\n\n  return (\n    <div className=\"word-row\">\n      {guess.split(\"\").map((letter, index) => (\n        <span\n          key={index}\n          className={`letter ${getLetterStatus(letter, index)}`}\n        >\n          {letter}\n        </span>\n      ))}\n    </div>\n  );\n};\n\nexport default Row;",
                  "solvedContent": null
                },
                {
                  "name": "Row.css",
                  "codeLanguage": "css",
                  "content": ".word-row {\n  display: flex;\n  justify-content: center;\n  margin: 5px;\n}\n\n.letter {\n  width: 40px;\n  height: 40px;\n  display: inline-flex;\n  justify-content: center;\n  align-items: center;\n  margin: 2px;\n  color: white;\n  font-weight: bold;\n  font-size: 1.2em;\n}\n\n.letter.correct {\n  background-color: green;\n}\n\n.letter.present {\n  background-color: gold;\n}\n\n.letter.absent {\n  background-color: lightgray;\n}",
                  "solvedContent": null
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Lesson #3 - Copy",
            "id": 135290,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Claro, precisamos informar ao jogador se o jogo acabou.\n\n1. Adicione uma nova constante, `maxAttempts`, e defina seu valor como `6` para permitir que o jogador adivinhe seis vezes.\n2. Crie outra variável de estado `isGameOver` com um valor inicial `false`.\n3. Inicie a variável de estado `guesses` com um array vazio em vez das três palavras que adicionamos antes.\n4. No final de `handleGuess`, determine se o jogo acabou verificando se `currentGuess` corresponde à palavra alvo ou se o número máximo de tentativas foi usado.\n5. Use renderização condicional para ocultar os elementos `input` e `button` se o jogo acabou.",
              "preselectedFileIndex": 2,
              "hasVisualOutput": true,
              "files": [
                {
                  "name": "index.jsx",
                  "codeLanguage": "jsx",
                  "content": "import React from \"react\";\nimport { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\n\nconst container = document.getElementById(\"root\");\nconst root = createRoot(container);\nroot.render(<App />);",
                  "solvedContent": null
                },
                {
                  "name": "index.html",
                  "codeLanguage": "html",
                  "content": "<!doctype html>\n<html>\n<head>\n  <script type=\"module\" src=\"./index.js\"></script>\n  <link rel=\"stylesheet\" href=\"./index.css\" />\n  <title>Wordle</title>\n</head>\n<body>\n  <div id=\"root\">loading</div>\n</body>\n</html>",
                  "solvedContent": null
                },
                {
                  "name": "App.jsx",
                  "codeLanguage": "jsx",
                  "content": "import React, { useState } from \"react\";\nimport \"./App.css\";\nimport Row from \"./Row\";\n\nconst App = () => {\n  const targetWord = \"REACT\";\n\n  const [guesses, setGuesses] = useState([\"PARTY\", \"DRAFT\", \"REACT\"]);\n  const [currentGuess, setCurrentGuess] = useState(\"\");\n\n  const handleInputChange = (event) => {\n    setCurrentGuess(event.target.value.toUpperCase());\n  };\n\n  const handleGuess = () => {\n    if (currentGuess.length !== 5) {\n      return;\n    }\n\n    const updatedGuesses = [...guesses, currentGuess];\n    setGuesses(updatedGuesses);\n  };\n\n  return (\n    <div className=\"main-container\">\n      <h1>Wordle</h1>\n      {guesses.map((guess, index) => (\n        <Row key={index} guess={guess} targetWord={targetWord} />\n      ))}\n      <input\n        onChange={handleInputChange}\n        maxLength={targetWord.length}\n        placeholder=\"Enter your guess\"\n      />\n      <button onClick={handleGuess}>Guess</button>\n    </div>\n  );\n};\n\nexport default App;",
                  "solvedContent": "import React, { useState } from \"react\";\nimport \"./App.css\";\nimport Row from \"./Row\";\n\nconst App = () => {\n  const targetWord = \"REACT\";\n  const maxAttempts = 6;\n\n  const [guesses, setGuesses] = useState([]);\n  const [currentGuess, setCurrentGuess] = useState(\"\");\n  const [isGameOver, setIsGameOver] = useState(false);\n\n  const handleInputChange = (event) => {\n    setCurrentGuess(event.target.value.toUpperCase());\n  };\n\n  const handleGuess = () => {\n    if (currentGuess.length !== 5) {\n      return;\n    }\n\n    const updatedGuesses = [...guesses, currentGuess];\n    setGuesses(updatedGuesses);\n\n    if (currentGuess === targetWord || updatedGuesses.length >= maxAttempts) {\n      setIsGameOver(true);\n    }\n  };\n\n  return (\n    <div className=\"main-container\">\n      <h1>Wordle</h1>\n      {guesses.map((guess, index) => (\n        <Row key={index} guess={guess} targetWord={targetWord} />\n      ))}\n      {!isGameOver && (\n        <>\n          <input\n            onChange={handleInputChange}\n            maxLength={targetWord.length}\n            placeholder=\"Enter your guess\"\n          />\n          <button onClick={handleGuess}>Guess</button>\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default App;\n"
                },
                {
                  "name": "App.css",
                  "codeLanguage": "css",
                  "content": "body {\n  margin: 0;\n  font-family: Arial, sans-serif;\n  height: 100vh;\n  background: linear-gradient(135deg, #f3e7e9, #e3eeff);\n}\n\n.main-container {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n}",
                  "solvedContent": null
                },
                {
                  "name": "Row.jsx",
                  "codeLanguage": "jsx",
                  "content": "import React from \"react\";\nimport \"./Row.css\"\n\nconst Row = ({ guess, targetWord }) => {\n  const getLetterStatus = (letter, index) => {\n    if (letter === targetWord[index]) {\n      return \"correct\";\n    } else if (targetWord.includes(letter)) {\n      return \"present\";\n    } else {\n      return \"absent\";\n    }\n  };\n\n  return (\n    <div className=\"word-row\">\n      {guess.split(\"\").map((letter, index) => (\n        <span\n          key={index}\n          className={`letter ${getLetterStatus(letter, index)}`}\n        >\n          {letter}\n        </span>\n      ))}\n    </div>\n  );\n};\n\nexport default Row;",
                  "solvedContent": null
                },
                {
                  "name": "Row.css",
                  "codeLanguage": "css",
                  "content": ".word-row {\n  display: flex;\n  justify-content: center;\n  margin: 5px;\n}\n\n.letter {\n  width: 40px;\n  height: 40px;\n  display: inline-flex;\n  justify-content: center;\n  align-items: center;\n  margin: 2px;\n  color: white;\n  font-weight: bold;\n  font-size: 1.2em;\n}\n\n.letter.correct {\n  background-color: green;\n}\n\n.letter.present {\n  background-color: gold;\n}\n\n.letter.absent {\n  background-color: lightgray;\n}",
                  "solvedContent": null
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Lesson #4",
            "id": 135286,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Agora que a funcionalidade de adivinhação está em funcionamento, vamos gerenciar o estado de fim de jogo fornecendo feedback quando o jogo terminar e o jogador não adivinhar corretamente.\n\n1. No final da declaração de retorno do componente, após o botão, inclua uma condição que verifica se `isGameOver` é verdadeiro e `currentGuess` não é igual a `targetWord`. Em seguida, renderize um elemento `p` exibindo uma mensagem para informar ao jogador qual era a palavra.",
              "preselectedFileIndex": 2,
              "hasVisualOutput": true,
              "files": [
                {
                  "name": "index.jsx",
                  "codeLanguage": "jsx",
                  "content": "import React from \"react\";\nimport { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\n\nconst container = document.getElementById(\"root\");\nconst root = createRoot(container);\nroot.render(<App />);",
                  "solvedContent": null
                },
                {
                  "name": "index.html",
                  "codeLanguage": "html",
                  "content": "<!doctype html>\n<html>\n<head>\n  <script type=\"module\" src=\"./index.js\"></script>\n  <link rel=\"stylesheet\" href=\"./index.css\" />\n  <title>Wordle</title>\n</head>\n<body>\n  <div id=\"root\">loading</div>\n</body>\n</html>",
                  "solvedContent": null
                },
                {
                  "name": "App.jsx",
                  "codeLanguage": "jsx",
                  "content": "import React, { useState } from \"react\";\nimport \"./App.css\";\nimport Row from \"./Row\";\n\nconst App = () => {\n  const targetWord = \"REACT\";\n  const maxAttempts = 6;\n\n  const [guesses, setGuesses] = useState([]);\n  const [currentGuess, setCurrentGuess] = useState(\"\");\n  const [isGameOver, setIsGameOver] = useState(false);\n\n  const handleInputChange = (event) => {\n    setCurrentGuess(event.target.value.toUpperCase());\n  };\n\n  const handleGuess = () => {\n    if (currentGuess.length !== 5) {\n      return;\n    }\n\n    const updatedGuesses = [...guesses, currentGuess];\n    setGuesses(updatedGuesses);\n\n    if (currentGuess === targetWord || updatedGuesses.length >= maxAttempts) {\n      setIsGameOver(true);\n    }\n  };\n\n  return (\n    <div className=\"main-container\">\n      <h1>Wordle</h1>\n      {guesses.map((guess, index) => (\n        <Row key={index} guess={guess} targetWord={targetWord} />\n      ))}\n      {!isGameOver && (\n        <>\n          <input\n            onChange={handleInputChange}\n            maxLength={targetWord.length}\n            placeholder=\"Enter your guess\"\n          />\n          <button onClick={handleGuess}>Guess</button>\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default App;\n",
                  "solvedContent": "import React, { useState } from \"react\";\nimport \"./App.css\";\nimport Row from \"./Row\";\n\nconst App = () => {\n  const targetWord = \"REACT\";\n  const maxAttempts = 6;\n\n  const [guesses, setGuesses] = useState([]);\n  const [currentGuess, setCurrentGuess] = useState(\"\");\n  const [isGameOver, setIsGameOver] = useState(false);\n\n  const handleInputChange = (event) => {\n    setCurrentGuess(event.target.value.toUpperCase());\n  };\n\n  const handleGuess = () => {\n    if (currentGuess.length !== 5) {\n      return;\n    }\n\n    const updatedGuesses = [...guesses, currentGuess];\n    setGuesses(updatedGuesses);\n\n    if (currentGuess === targetWord || updatedGuesses.length >= maxAttempts) {\n      setIsGameOver(true);\n    }\n  };\n\n  return (\n    <div className=\"main-container\">\n      <h1>Wordle</h1>\n      {guesses.map((guess, index) => (\n        <Row key={index} guess={guess} targetWord={targetWord} />\n      ))}\n      {!isGameOver && (\n        <>\n          <input\n            onChange={handleInputChange}\n            maxLength={targetWord.length}\n            placeholder=\"Enter your guess\"\n          />\n          <button onClick={handleGuess}>Guess</button>\n        </>\n      )}\n      {isGameOver && currentGuess !== targetWord && (\n        <p>{`Game over! The word was: ${targetWord}`}</p>\n      )}\n    </div>\n  );\n};\n\nexport default App;\n"
                },
                {
                  "name": "App.css",
                  "codeLanguage": "css",
                  "content": "body {\n  margin: 0;\n  font-family: Arial, sans-serif;\n  height: 100vh;\n  background: linear-gradient(135deg, #f3e7e9, #e3eeff);\n}\n\n.main-container {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n}",
                  "solvedContent": null
                },
                {
                  "name": "Row.jsx",
                  "codeLanguage": "jsx",
                  "content": "import React from \"react\";\nimport \"./Row.css\"\n\nconst Row = ({ guess, targetWord }) => {\n  const getLetterStatus = (letter, index) => {\n    if (letter === targetWord[index]) {\n      return \"correct\";\n    } else if (targetWord.includes(letter)) {\n      return \"present\";\n    } else {\n      return \"absent\";\n    }\n  };\n\n  return (\n    <div className=\"word-row\">\n      {guess.split(\"\").map((letter, index) => (\n        <span\n          key={index}\n          className={`letter ${getLetterStatus(letter, index)}`}\n        >\n          {letter}\n        </span>\n      ))}\n    </div>\n  );\n};\n\nexport default Row;",
                  "solvedContent": null
                },
                {
                  "name": "Row.css",
                  "codeLanguage": "css",
                  "content": ".word-row {\n  display: flex;\n  justify-content: center;\n  margin: 5px;\n}\n\n.letter {\n  width: 40px;\n  height: 40px;\n  display: inline-flex;\n  justify-content: center;\n  align-items: center;\n  margin: 2px;\n  color: white;\n  font-weight: bold;\n  font-size: 1.2em;\n}\n\n.letter.correct {\n  background-color: green;\n}\n\n.letter.present {\n  background-color: gold;\n}\n\n.letter.absent {\n  background-color: lightgray;\n}",
                  "solvedContent": null
                }
              ],
              "hints": []
            }
          }
        ]
      }
    ]
  }
}