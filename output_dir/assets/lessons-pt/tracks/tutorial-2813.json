{
  "tutorial": {
    "id": 2813,
    "version": 2,
    "type": "course",
    "isNew": false,
    "codeLanguage": "typescript",
    "title": "Introdução a Generics",
    "descriptionContent": "Aprenda sobre generics em TypeScript",
    "shortDescriptionContent": "",
    "showInTrack": true,
    "iconBanner": null,
    "chapters": [
      {
        "id": 14841,
        "title": "Introdução a Generics 1",
        "type": "practiceLevel1",
        "lessons": [
          {
            "title": "Lesson #13",
            "id": 131075,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Generics nos permitem escrever código flexível e reutilizável que pode trabalhar com qualquer tipo de dado, mantendo a segurança de tipo.</p><p>Elas nos permitem criar código que pode trabalhar com vários tipos sem sacrificar os benefícios da tipagem forte.</p></body></html>"
          },
          {
            "title": "Lesson #14",
            "id": 131076,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Para mostrar o benefício dos generics, vamos olhar para uma função simples que encontra o maior número em um array.</p><code version=\"2\" codelang=\"typescript\" name=\"script.ts\" visible-if=\"always\"><content><text value=\"function\" class=\"keyword\" /><text value=\" \" /><text value=\"findMaxNumber\" class=\"title\" /><text value=\"(\" /><text value=\"array: \" /><text value=\"number\" class=\"built_in\" /><text value=\"[]\" /><text value=\"): \" /><text value=\"number\" class=\"title\" /><text value=\" \" /><text value=\"{\" /><text type=\"break\" /><text value=\" \" /><text value=\"return\" class=\"keyword\" /><text value=\" array.reduce(\" /><text value=\"(\" /><text value=\"max, item\" class=\"params\" /><text value=\") =&gt;\" /><text value=\" (item &gt; max ? item : max));\" /><text type=\"break\" /><text value=\"}\" /><text type=\"break\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" maxNumber = findMaxNumber([\" /><text value=\"1\" class=\"number\" /><text value=\", \" /><text value=\"3\" class=\"number\" /><text value=\", \" /><text value=\"2\" class=\"number\" /><text value=\"]);\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(maxNumber);\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"0\" endIndex=\"8\" /><option startIndex=\"9\" endIndex=\"22\" /><option startIndex=\"135\" endIndex=\"148\" /></options></interaction></interactions><output><content><text value=\"3\" /></content></output></code><p visible-if=\"wrong\">Certifique-se de escolher <code>function</code> seguido de <code>findMaxNumber</code> e finalmente <code>findMaxNumber</code>.</p></body></html>"
          },
          {
            "title": "Lesson #14 - Copy",
            "id": 131077,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Se quisermos fazer o mesmo com strings onde procuramos o valor máximo alfabeticamente, poderíamos definir outra função.</p><code version=\"2\" codelang=\"typescript\" name=\"script.ts\" visible-if=\"always\"><content><text value=\"function\" class=\"keyword\" /><text value=\" \" /><text value=\"findMaxNumber\" class=\"title\" /><text value=\"(\" /><text value=\"array: \" /><text value=\"number\" class=\"built_in\" /><text value=\"[]\" /><text value=\"): \" /><text value=\"number\" class=\"title\" /><text value=\" \" /><text value=\"{\" /><text type=\"break\" /><text value=\" \" /><text value=\"return\" class=\"keyword\" /><text value=\" array.reduce(\" /><text value=\"(\" /><text value=\"max, item\" class=\"params\" /><text value=\") =&gt;\" /><text value=\" (item &gt; max ? item : max));\" /><text type=\"break\" /><text value=\"}\" /><text type=\"break\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" maxNumber = findMaxNumber([\" /><text value=\"1\" class=\"number\" /><text value=\", \" /><text value=\"3\" class=\"number\" /><text value=\", \" /><text value=\"2\" class=\"number\" /><text value=\"]);\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(maxNumber);\" /><text type=\"break\" /><text type=\"break\" /><text value=\"function\" class=\"keyword\" /><text value=\" \" /><text value=\"findMaxString\" class=\"title\" /><text value=\"(\" /><text value=\"array: \" /><text value=\"string\" class=\"built_in\" /><text value=\"[]\" /><text value=\"): \" /><text value=\"string\" class=\"title\" /><text value=\" \" /><text value=\"{\" /><text type=\"break\" /><text value=\" \" /><text value=\"return\" class=\"keyword\" /><text value=\" array.reduce(\" /><text value=\"(\" /><text value=\"max, item\" class=\"params\" /><text value=\") =&gt;\" /><text value=\" (item &gt; max ? item : max));\" /><text type=\"break\" /><text value=\"}\" /><text type=\"break\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" maxString = findMaxString([\" /><text value=\"&quot;a&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;b&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;c&quot;\" class=\"string\" /><text value=\"]);\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(maxString);\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"186\" endIndex=\"194\" /><option startIndex=\"195\" endIndex=\"208\" /><option startIndex=\"321\" endIndex=\"334\" /></options></interaction></interactions><output><content><text value=\"c\" /></content></output></code><p visible-if=\"wrong\">Certifique-se de escolher <code>function</code> seguido de <code>findMaxString</code> e finalmente <code>findMaxString</code>.</p></body></html>"
          },
          {
            "title": "Lesson #14 - Copy - Copy - Copy",
            "id": 131293,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Em vez de definir a função duas vezes, podemos usar generics para permitir qualquer tipo mais tarde. Por agora, usamos <code>T</code> como um espaço reservado para qualquer tipo.</p><code version=\"2\" codelang=\"typescript\" name=\"script.ts\" visible-if=\"always\"><content><text value=\"function\" class=\"keyword\" /><text value=\" \" /><text value=\"findMax\" class=\"title\" /><text value=\"&lt;\" /><text value=\"T\" class=\"title\" /><text value=\"&gt;(\" /><text value=\"array: T[]\" class=\"params\" /><text value=\"): \" /><text value=\"T\" class=\"title\" /><text value=\" \" /><text value=\"{\" /><text type=\"break\" /><text value=\"  \" /><text value=\"return\" class=\"keyword\" /><text value=\" array.reduce(\" /><text value=\"(\" /><text value=\"max, item\" class=\"params\" /><text value=\") =&gt;\" /><text value=\" (item &gt; max ? item : max));\" /><text type=\"break\" /><text value=\"}\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"17\" endIndex=\"18\" /><option startIndex=\"27\" endIndex=\"28\" /><option startIndex=\"33\" endIndex=\"34\" /></options></interaction></interactions></code><p visible-if=\"wrong\">Certifique-se de escolher <code>T</code> seguido de <code>T</code> e finalmente <code>T</code>.</p></body></html>"
          },
          {
            "title": "123",
            "id": 131079,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Primeiro, temos que indicar que usaremos um tipo genérico. Fazemos isso com colchetes angulares em torno de uma letra genérica como <code>T</code>.</p><code version=\"2\" codelang=\"typescript\" name=\"script.ts\" visible-if=\"always\"><content><text value=\"function\" class=\"keyword\" /><text value=\" \" /><text value=\"findMax\" class=\"title\" /><text value=\" &lt;\" /><text value=\"T\" class=\"title\" /><text value=\"&gt; (\" /><text value=\"array: T[]\" class=\"params\" /><text value=\"): \" /><text value=\"T\" class=\"title\" /><text value=\" \" /><text value=\"{\" /><text type=\"break\" /><text value=\" \" /><text value=\"return\" class=\"keyword\" /><text value=\" array.reduce(\" /><text value=\"(\" /><text value=\"max, item\" class=\"params\" /><text value=\") =&gt;\" /><text value=\" (item &gt; max ? item : max));\" /><text type=\"break\" /><text value=\"}\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"17\" endIndex=\"18\" /><option startIndex=\"18\" endIndex=\"19\" /><option startIndex=\"19\" endIndex=\"20\" /></options></interaction></interactions></code><p visible-if=\"wrong\">Certifique-se de escolher <code>&lt;</code> seguido de <code>T</code> e finalmente <code>&gt;</code>.</p></body></html>"
          },
          {
            "title": "123 - Copy",
            "id": 131080,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Após declarar o tipo genérico, podemos chamá-lo com qualquer tipo.</p><code version=\"2\" codelang=\"typescript\" name=\"script.ts\" visible-if=\"always\"><content><text value=\"function\" class=\"keyword\" /><text value=\" \" /><text value=\"findMax\" class=\"title\" /><text value=\" &lt;\" /><text value=\"T\" class=\"title\" /><text value=\"&gt; (\" /><text value=\"array: T[]\" class=\"params\" /><text value=\"): \" /><text value=\"T\" class=\"title\" /><text value=\" \" /><text value=\"{\" /><text type=\"break\" /><text value=\" \" /><text value=\"return\" class=\"keyword\" /><text value=\" array.reduce(\" /><text value=\"(\" /><text value=\"max, item\" class=\"params\" /><text value=\") =&gt;\" /><text value=\" (item &gt; max ? item : max));\" /><text type=\"break\" /><text value=\"}\" /><text type=\"break\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" maxNumber = findMax&lt;\" /><text value=\"number\" class=\"built_in\" /><text value=\"&gt;([\" /><text value=\"1\" class=\"number\" /><text value=\", \" /><text value=\"3\" class=\"number\" /><text value=\", \" /><text value=\"2\" class=\"number\" /><text value=\"]);\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(maxNumber);\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"140\" endIndex=\"149\" /><option startIndex=\"131\" endIndex=\"132\" /><option startIndex=\"132\" endIndex=\"138\" /><option startIndex=\"138\" endIndex=\"139\" /></options></interaction></interactions><output><content><text value=\"3\" /></content></output></code><p visible-if=\"wrong\">Certifique-se de escolher <code>&lt;</code> seguido de <code>number</code> e depois <code>&gt;</code>, <code>[1, 3, 2]</code>.</p></body></html>"
          },
          {
            "title": "123 - Copy - Copy",
            "id": 131298,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Se quisermos usar um tipo diferente para o genérico, podemos especificar isso.</p><code version=\"2\" codelang=\"typescript\" name=\"script.ts\" visible-if=\"always\"><content><text value=\"function\" class=\"keyword\" /><text value=\" \" /><text value=\"findMax\" class=\"title\" /><text value=\" &lt;\" /><text value=\"T\" class=\"title\" /><text value=\"&gt; (\" /><text value=\"array: T[]\" class=\"params\" /><text value=\"): \" /><text value=\"T\" class=\"title\" /><text value=\" \" /><text value=\"{\" /><text type=\"break\" /><text value=\" \" /><text value=\"return\" class=\"keyword\" /><text value=\" array.reduce(\" /><text value=\"(\" /><text value=\"max, item\" class=\"params\" /><text value=\") =&gt;\" /><text value=\" (item &gt; max ? item : max));\" /><text type=\"break\" /><text value=\"}\" /><text type=\"break\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" maxNumber = findMax&lt;\" /><text value=\"number\" class=\"built_in\" /><text value=\"&gt;([\" /><text value=\"1\" class=\"number\" /><text value=\", \" /><text value=\"3\" class=\"number\" /><text value=\", \" /><text value=\"2\" class=\"number\" /><text value=\"]);\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(maxNumber);\" /><text type=\"break\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" maxString = findMax&lt;\" /><text value=\"string\" class=\"built_in\" /><text value=\"&gt;([\" /><text value=\"&quot;a&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;b&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;c&quot;\" class=\"string\" /><text value=\"]);\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(maxString);\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"202\" endIndex=\"203\" /><option startIndex=\"203\" endIndex=\"209\" /><option startIndex=\"209\" endIndex=\"210\" /><option startIndex=\"211\" endIndex=\"226\" /></options></interaction></interactions><output><content><text value=\"3\" /><text type=\"break\" /><text value=\"c\" /></content></output></code><p visible-if=\"wrong\">Certifique-se de escolher <code>&lt;</code> seguido de <code>string</code> e depois <code>&gt;</code>, <code>[\"a\", \"b\", \"c\"]</code>.</p></body></html>"
          },
          {
            "title": "123 - Copy - Copy - Copy",
            "id": 131299,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Como o TypeScript é muito bom em inferir tipos, podemos omitir a declaração de tipo genérico dentro dos colchetes angulares.</p><p>Chame a função sem especificar explicitamente o tipo genérico.</p><code version=\"2\" codelang=\"typescript\" name=\"script.ts\" visible-if=\"always\"><content><text value=\"function\" class=\"keyword\" /><text value=\" \" /><text value=\"findMax\" class=\"title\" /><text value=\" &lt;\" /><text value=\"T\" class=\"title\" /><text value=\"&gt; (\" /><text value=\"array: T[]\" class=\"params\" /><text value=\"): \" /><text value=\"T\" class=\"title\" /><text value=\" \" /><text value=\"{\" /><text type=\"break\" /><text value=\" \" /><text value=\"return\" class=\"keyword\" /><text value=\" array.reduce(\" /><text value=\"(\" /><text value=\"max, item\" class=\"params\" /><text value=\") =&gt;\" /><text value=\" (item &gt; max ? item : max));\" /><text type=\"break\" /><text value=\"}\" /><text type=\"break\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" maxNumber = findMax([\" /><text value=\"1\" class=\"number\" /><text value=\", \" /><text value=\"3\" class=\"number\" /><text value=\", \" /><text value=\"2\" class=\"number\" /><text value=\"]);\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(maxNumber);\" /><text type=\"break\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" maxString = findMax([\" /><text value=\"&quot;a&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;b&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;c&quot;\" class=\"string\" /><text value=\"]);\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(maxString);\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"124\" endIndex=\"131\" /><option startIndex=\"187\" endIndex=\"194\" /><option correct=\"false\"><content><text value=\"findMax&lt;number&gt;\" /></content></option><option correct=\"false\"><content><text value=\"findMax&lt;string&gt;\" /></content></option></options></interaction></interactions><output><content><text value=\"3\" /><text type=\"break\" /><text value=\"c\" /></content></output></code><p visible-if=\"wrong\">Certifique-se de escolher <code>findMax</code> seguido de <code>findMax</code>.</p></body></html>"
          },
          {
            "title": "Lesson #9",
            "id": 131088,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Também podemos usar generics ao criar uma classe. Definimos a classe genérica com <code>&lt;T&gt;</code> que podemos usar em toda a classe.</p><code version=\"2\" codelang=\"typescript\" name=\"script.ts\" visible-if=\"always\"><content><text value=\"class\" class=\"keyword\" /><text value=\" Container&lt;T&gt; {\" /><text type=\"break\" /><text type=\"break\" /><text value=\"}\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"15\" endIndex=\"16\" /><option startIndex=\"16\" endIndex=\"17\" /><option startIndex=\"17\" endIndex=\"18\" /><option correct=\"false\"><content><text value=\"(\" /></content></option><option correct=\"false\"><content><text value=\")\" /></content></option></options></interaction></interactions></code><p visible-if=\"wrong\">Certifique-se de escolher <code>&lt;</code> seguido de <code>T</code> e finalmente <code>&gt;</code>.</p></body></html>"
          },
          {
            "title": "Lesson #9 - Copy",
            "id": 131089,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Após definir a classe genérica <code>T</code>, podemos agora usá-la como o tipo da variável <code>value</code>.</p><code version=\"2\" codelang=\"typescript\" name=\"script.ts\" visible-if=\"always\"><content><text value=\"class\" class=\"keyword\" /><text value=\" Container &lt;T&gt; {\" /><text type=\"break\" /><text value=\" \" /><text value=\"constructor\" class=\"keyword\" /><text value=\"(\" /><text value=\"public\" class=\"keyword\" /><text value=\" value: T\" /><text value=\") {}\" /><text type=\"break\" /><text value=\"}\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"17\" endIndex=\"18\" /><option startIndex=\"49\" endIndex=\"50\" /><option correct=\"false\"><content><text value=\"number\" /></content></option><option correct=\"false\"><content><text value=\"string\" /></content></option></options></interaction></interactions></code><p visible-if=\"wrong\">Certifique-se de escolher <code>T</code> seguido de <code>T</code>.</p></body></html>"
          },
          {
            "title": "Lesson #9 - Copy - Copy",
            "id": 131090,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Se nossa classe usa um tipo genérico, podemos usá-la com qualquer tipo que quisermos. Adicionamos o tipo desejado dentro dos colchetes angulares.</p><code version=\"2\" codelang=\"typescript\" name=\"script.ts\" visible-if=\"always\"><content><text value=\"class\" class=\"keyword\" /><text value=\" Container &lt;T&gt; {\" /><text type=\"break\" /><text value=\" \" /><text value=\"constructor\" class=\"keyword\" /><text value=\"(\" /><text value=\"public\" class=\"keyword\" /><text value=\" value: T\" /><text value=\") {}\" /><text type=\"break\" /><text value=\"}\" /><text type=\"break\" /><text type=\"break\" /><text value=\"let\" class=\"keyword\" /><text value=\" numberContainer = \" /><text value=\"new\" class=\"keyword\" /><text value=\" Container&lt;\" /><text value=\"number\" class=\"built_in\" /><text value=\"&gt;(\" /><text value=\"42\" class=\"number\" /><text value=\");\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(numberContainer.value);\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"80\" endIndex=\"83\" /><option startIndex=\"84\" endIndex=\"101\" /><option correct=\"false\"><content><text value=\"class\" /></content></option><option correct=\"false\"><content><text value=\"class\" /></content></option></options></interaction></interactions><output><content><text value=\"42\" /></content></output></code><p visible-if=\"wrong\">Certifique-se de escolher <code>new</code> seguido de <code>Container&lt;number&gt;</code>.</p></body></html>"
          },
          {
            "title": "Lesson #9 - Copy - Copy - Copy",
            "id": 131294,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Podemos usar <code>Container</code> para também criar um container com o tipo <code>string</code>.</p><code version=\"2\" codelang=\"typescript\" name=\"script.ts\" visible-if=\"always\"><content><text value=\"class\" class=\"keyword\" /><text value=\" Container &lt;T&gt; {\" /><text type=\"break\" /><text value=\" \" /><text value=\"constructor\" class=\"keyword\" /><text value=\"(\" /><text value=\"public\" class=\"keyword\" /><text value=\" value: T\" /><text value=\") {}\" /><text type=\"break\" /><text value=\"}\" /><text type=\"break\" /><text type=\"break\" /><text value=\"let\" class=\"keyword\" /><text value=\" numberContainer = \" /><text value=\"new\" class=\"keyword\" /><text value=\" Container&lt;\" /><text value=\"number\" class=\"built_in\" /><text value=\"&gt;(\" /><text value=\"42\" class=\"number\" /><text value=\");\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(numberContainer.value);\" /><text type=\"break\" /><text type=\"break\" /><text value=\"let\" class=\"keyword\" /><text value=\" stringContainer = \" /><text value=\"new\" class=\"keyword\" /><text value=\" Container&lt;\" /><text value=\"string\" class=\"built_in\" /><text value=\"&gt;(\" /><text value=\"&quot;Hello&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(stringContainer.value);\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"166\" endIndex=\"169\" /><option startIndex=\"170\" endIndex=\"179\" /><option startIndex=\"179\" endIndex=\"180\" /><option startIndex=\"180\" endIndex=\"186\" /><option startIndex=\"186\" endIndex=\"187\" /><option correct=\"false\"><content><text value=\"number\" /></content></option></options></interaction></interactions><output><content><text value=\"42\" /><text type=\"break\" /><text value=\"Hello\" /></content></output></code><p visible-if=\"wrong\">Certifique-se de escolher <code>new</code> seguido de <code>Container</code> e depois <code>&lt;</code>, <code>string</code>, <code>&gt;</code>.</p></body></html>"
          },
          {
            "title": "Lesson #9 - Copy - ",
            "id": 131295,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>No entanto, uma vez que definimos uma instância de Container com um tipo específico, como um número, não podemos atribuir um valor de um tipo diferente a ela.</p><p>Tente atribuir um valor de string para ver o erro.</p><code version=\"2\" codelang=\"typescript\" name=\"script.ts\" visible-if=\"always\"><content><text value=\"class\" class=\"keyword\" /><text value=\" Container &lt;T&gt; {\" /><text type=\"break\" /><text value=\" \" /><text value=\"constructor\" class=\"keyword\" /><text value=\"(\" /><text value=\"public\" class=\"keyword\" /><text value=\" value: T\" /><text value=\") {}\" /><text type=\"break\" /><text value=\"}\" /><text type=\"break\" /><text type=\"break\" /><text value=\"let\" class=\"keyword\" /><text value=\" numberContainer = \" /><text value=\"new\" class=\"keyword\" /><text value=\" Container&lt;\" /><text value=\"number\" class=\"built_in\" /><text value=\"&gt;(\" /><text value=\"42\" class=\"number\" /><text value=\");\" /><text type=\"break\" /><text value=\"numberContainer = \" /><text value=\"&quot;Let me in!&quot;\" class=\"string\" /><text value=\"; \" /><text value=\"// Error\" class=\"comment\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"125\" endIndex=\"137\" /><option correct=\"false\"><content><text value=\"42\" /></content></option></options></interaction></interactions><output><content><text value=\"Error: Type &quot;string&quot; is not assignable to type &quot;Container&lt;number&gt;&quot;.\" /></content></output></code><p visible-if=\"wrong\">Certifique-se de escolher <code>\"Let me in!\"</code>.</p></body></html>"
          },
          {
            "title": "Lesson #9 - Copy -  - Copy",
            "id": 131297,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Por último, mas não menos importante, podemos deixar de fora a especificação do tipo para o genérico, pois o TypeScript pode inferi-lo.</p><code version=\"2\" codelang=\"typescript\" name=\"script.ts\" visible-if=\"always\"><content><text value=\"class\" class=\"keyword\" /><text value=\" Container &lt;T&gt; {\" /><text type=\"break\" /><text value=\" \" /><text value=\"constructor\" class=\"keyword\" /><text value=\"(\" /><text value=\"public\" class=\"keyword\" /><text value=\" value: T\" /><text value=\") {}\" /><text type=\"break\" /><text value=\"}\" /><text type=\"break\" /><text type=\"break\" /><text value=\"let\" class=\"keyword\" /><text value=\" numberContainer = \" /><text value=\"new\" class=\"keyword\" /><text value=\" Container(\" /><text value=\"42\" class=\"number\" /><text value=\");\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(numberContainer.value);\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"80\" endIndex=\"93\" /><option correct=\"false\"><content><text value=\"new Container&lt;number&gt;\" /></content></option></options></interaction></interactions><output><content><text value=\"42\" /></content></output></code><p visible-if=\"wrong\">Certifique-se de escolher <code>new Container</code>.</p></body></html>"
          },
          {
            "title": "Lesson #6",
            "id": 131002,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>O que queremos dizer com <code>&lt;T&gt;</code> na declaração de genérico em TypeScript?</p><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\">É um espaço reservado para qualquer tipo</item><item value=\"2\" correct=\"false\">É um tipo específico</item></selection><p visible-if=\"wrong\">É um espaço reservado para qualquer tipo.</p></body></html>"
          },
          {
            "title": "Lesson #12",
            "id": 131091,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Complete o código usando generics.</p><code version=\"2\" codelang=\"typescript\" name=\"script.ts\" visible-if=\"always\"><content><text value=\"class\" class=\"keyword\" /><text value=\" Wrapper &lt;T&gt; {\" /><text type=\"break\" /><text value=\" \" /><text value=\"constructor\" class=\"keyword\" /><text value=\"(\" /><text value=\"private\" class=\"keyword\" /><text value=\" value: T\" /><text value=\") {}\" /><text type=\"break\" /><text type=\"break\" /><text value=\" getValue(): T {\" /><text type=\"break\" /><text value=\"  \" /><text value=\"return\" class=\"keyword\" /><text value=\" \" /><text value=\"this\" class=\"keyword\" /><text value=\".value;\" /><text type=\"break\" /><text value=\" }\" /><text type=\"break\" /><text value=\"}\" /><text type=\"break\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" bubbleWrap = \" /><text value=\"new\" class=\"keyword\" /><text value=\" Wrapper(\" /><text value=\"&quot;Bubbles&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(bubbleWrap.getValue());\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"15\" endIndex=\"16\" /><option startIndex=\"48\" endIndex=\"49\" /><option startIndex=\"68\" endIndex=\"69\" /><option correct=\"false\"><content><text value=\"string\" /></content></option><option correct=\"false\"><content><text value=\"string\" /></content></option><option correct=\"false\"><content><text value=\"string\" /></content></option></options></interaction></interactions><output><content><text value=\"Bubbles\" /></content></output></code><p visible-if=\"wrong\">Certifique-se de escolher <code>T</code> seguido de <code>T</code> e finalmente <code>T</code>.</p></body></html>"
          },
          {
            "title": "Lesson #7",
            "id": 131003,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Qual é o benefício de usar generics em TypeScript?</p><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\">Isso torna o código mais reutilizável</item><item value=\"2\" correct=\"false\">Isso reduz a flexibilidade do código</item></selection><p visible-if=\"wrong\">Isso torna o código mais reutilizável.</p></body></html>"
          },
          {
            "title": "Lesson #13",
            "id": 131092,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Garanta que a função <code>repeat</code> funcione com qualquer tipo usando um tipo genérico.</p><code version=\"2\" codelang=\"typescript\" name=\"script.ts\" visible-if=\"always\"><content><text value=\"function\" class=\"keyword\" /><text value=\" \" /><text value=\"repeat\" class=\"title\" /><text value=\"&lt;\" /><text value=\"T\" class=\"title\" /><text value=\"&gt;(\" /><text value=\"item: T, count: \" /><text value=\"number\" class=\"built_in\" /><text value=\"): \" /><text value=\"T\" class=\"title\" /><text value=\"[] \" /><text value=\"{\" /><text type=\"break\" /><text value=\"  \" /><text value=\"const\" class=\"keyword\" /><text value=\" result: T[] = [];\" /><text type=\"break\" /><text value=\"  \" /><text value=\"for\" class=\"keyword\" /><text value=\" (\" /><text value=\"let\" class=\"keyword\" /><text value=\" i = \" /><text value=\"0\" class=\"number\" /><text value=\"; i &lt; count; i++) {\" /><text type=\"break\" /><text value=\"    result.push(item);\" /><text type=\"break\" /><text value=\"  }\" /><text type=\"break\" /><text value=\"  \" /><text value=\"return\" class=\"keyword\" /><text value=\" result;\" /><text type=\"break\" /><text value=\"}\" /><text type=\"break\" /><text type=\"break\" /><text value=\"function\" class=\"keyword\" /><text value=\" \" /><text value=\"printPyramid\" class=\"title\" /><text value=\"(\" /><text value=\"height: \" /><text value=\"number\" class=\"built_in\" /><text value=\"): \" /><text value=\"void\" class=\"title\" /><text value=\" \" /><text value=\"{\" /><text type=\"break\" /><text value=\"  \" /><text value=\"for\" class=\"keyword\" /><text value=\" (\" /><text value=\"let\" class=\"keyword\" /><text value=\" i = \" /><text value=\"0\" class=\"number\" /><text value=\"; i &lt; height; i++) {\" /><text type=\"break\" /><text value=\"    \" /><text value=\"const\" class=\"keyword\" /><text value=\" spaces = repeat(\" /><text value=\"' '\" class=\"string\" /><text value=\", height - i - \" /><text value=\"1\" class=\"number\" /><text value=\").join(\" /><text value=\"''\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\"    \" /><text value=\"const\" class=\"keyword\" /><text value=\" stars = repeat(\" /><text value=\"'*'\" class=\"string\" /><text value=\", \" /><text value=\"2\" class=\"number\" /><text value=\" * i + \" /><text value=\"1\" class=\"number\" /><text value=\").join(\" /><text value=\"''\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\"    \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(spaces + stars + spaces);\" /><text type=\"break\" /><text value=\"  }\" /><text type=\"break\" /><text value=\"}\" /><text type=\"break\" /><text type=\"break\" /><text value=\"printPyramid(\" /><text value=\"10\" class=\"number\" /><text value=\");\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"15\" endIndex=\"16\" /><option startIndex=\"16\" endIndex=\"17\" /><option startIndex=\"17\" endIndex=\"18\" /><option startIndex=\"25\" endIndex=\"26\" /><option startIndex=\"44\" endIndex=\"45\" /><option startIndex=\"66\" endIndex=\"67\" /></options></interaction></interactions><output><content><text value=\"         *         \" /><text type=\"break\" /><text value=\"        ***        \" /><text type=\"break\" /><text value=\"       *****       \" /><text type=\"break\" /><text value=\"      *******      \" /><text type=\"break\" /><text value=\"     *********     \" /><text type=\"break\" /><text value=\"    ***********    \" /><text type=\"break\" /><text value=\"   *************   \" /><text type=\"break\" /><text value=\"  ***************  \" /><text type=\"break\" /><text value=\" ***************** \" /><text type=\"break\" /><text value=\"*******************\" /></content></output></code><p visible-if=\"wrong\">Certifique-se de escolher <code>&lt;</code> seguido de <code>T</code> e depois <code>&gt;</code>, <code>T</code>, <code>T</code>, <code>T</code>.</p></body></html>"
          }
        ]
      },
      {
        "id": 14839,
        "title": "Introdução a Generics 2",
        "type": "practiceLevel1",
        "lessons": [
          {
            "title": "move - 1",
            "id": 130998,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Vamos revisitar arrays com nosso conhecimento recém-adquirido sobre generics. Como você pode ver, existem duas maneiras de definir um array em TypeScript.</p><code version=\"2\" codelang=\"typescript\" name=\"script.ts\" visible-if=\"always\"><content><text value=\"let\" class=\"keyword\" /><text value=\" numbers1: \" /><text value=\"number\" class=\"built_in\" /><text value=\"[] = [\" /><text value=\"1\" class=\"number\" /><text value=\", \" /><text value=\"2\" class=\"number\" /><text value=\", \" /><text value=\"3\" class=\"number\" /><text value=\"];\" /><text type=\"break\" /><text value=\"let\" class=\"keyword\" /><text value=\" numbers2: \" /><text value=\"Array\" class=\"built_in\" /><text value=\"&lt;\" /><text value=\"number\" class=\"built_in\" /><text value=\"&gt; = [\" /><text value=\"1\" class=\"number\" /><text value=\", \" /><text value=\"2\" class=\"number\" /><text value=\", \" /><text value=\"3\" class=\"number\" /><text value=\"];\" /><text type=\"break\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(numbers1);\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(numbers2);\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"50\" endIndex=\"55\" /><option startIndex=\"55\" endIndex=\"63\" /></options></interaction></interactions><output><content><text value=\"[1, 2, 3]\" /><text type=\"break\" /><text value=\"[1, 2, 3]\" /></content></output></code><p visible-if=\"wrong\">Certifique-se de escolher <code>Array</code> seguido de <code>&lt;number&gt;</code>.</p></body></html>"
          },
          {
            "title": "move - 1 - Copy",
            "id": 131093,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Um array é uma coleção de elementos armazenados em uma única variável. Esta coleção <code>Array&lt;T&gt;</code> usa um tipo genérico.</p><code version=\"2\" codelang=\"typescript\" name=\"script.ts\" visible-if=\"always\"><content><text value=\"let\" class=\"keyword\" /><text value=\" numbers: \" /><text value=\"Array\" class=\"built_in\" /><text value=\"&lt;\" /><text value=\"number\" class=\"built_in\" /><text value=\"&gt; = [\" /><text value=\"1\" class=\"number\" /><text value=\", \" /><text value=\"2\" class=\"number\" /><text value=\", \" /><text value=\"3\" class=\"number\" /><text value=\"];\" /><text type=\"break\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(numbers);\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"13\" endIndex=\"18\" /><option startIndex=\"18\" endIndex=\"19\" /><option startIndex=\"19\" endIndex=\"25\" /><option startIndex=\"25\" endIndex=\"26\" /></options></interaction></interactions><output><content><text value=\"[1, 2, 3]\" /></content></output></code><p visible-if=\"wrong\">Certifique-se de escolher <code>Array</code> seguido de <code>&lt;</code> e depois <code>number</code>, <code>&gt;</code>.</p></body></html>"
          },
          {
            "title": "move - 2",
            "id": 130999,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Como você sabe, também podemos definir um array de strings. Isso também funciona com a forma genérica de definir tipos de array.</p><code version=\"2\" codelang=\"typescript\" name=\"script.ts\" visible-if=\"always\"><content><text value=\"let\" class=\"keyword\" /><text value=\" names: \" /><text value=\"Array\" class=\"built_in\" /><text value=\"&lt;\" /><text value=\"string\" class=\"built_in\" /><text value=\"&gt; = [\" /><text value=\"&quot;Hello&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;TypeScript&quot;\" class=\"string\" /><text value=\"];\" /><text type=\"break\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(names);\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"11\" endIndex=\"16\" /><option startIndex=\"16\" endIndex=\"17\" /><option startIndex=\"17\" endIndex=\"23\" /><option startIndex=\"23\" endIndex=\"24\" /><option correct=\"false\"><content><text value=\"number\" /></content></option><option correct=\"false\"><content><text value=\"T\" /></content></option></options></interaction></interactions><output><content><text value=\"[&quot;Hello&quot;, &quot;TypeScript&quot;]\" /></content></output></code><p visible-if=\"wrong\">Certifique-se de escolher <code>Array</code> seguido de <code>&lt;</code> e depois <code>string</code>, <code>&gt;</code>.</p></body></html>"
          },
          {
            "title": "move -3",
            "id": 131082,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Também podemos criar interfaces com um tipo genérico. A sintaxe inicial é semelhante às classes com genéricos que vimos antes.</p><code version=\"2\" codelang=\"typescript\" name=\"script.ts\" visible-if=\"always\"><content><text value=\"class\" class=\"keyword\" /><text value=\" BoxClass&lt;T&gt; {\" /><text type=\"break\" /><text value=\" contents: T;\" /><text type=\"break\" /><text value=\"}\" /><text type=\"break\" /><text type=\"break\" /><text value=\"interface\" class=\"keyword\" /><text value=\" BoxInterface &lt;T&gt; {\" /><text type=\"break\" /><text value=\" contents: T;\" /><text type=\"break\" /><text value=\"}\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"14\" endIndex=\"15\" /><option startIndex=\"15\" endIndex=\"16\" /><option startIndex=\"16\" endIndex=\"17\" /><option startIndex=\"31\" endIndex=\"32\" /><option startIndex=\"60\" endIndex=\"61\" /><option startIndex=\"61\" endIndex=\"62\" /><option startIndex=\"62\" endIndex=\"63\" /><option startIndex=\"77\" endIndex=\"78\" /></options></interaction></interactions></code><p visible-if=\"wrong\">Certifique-se de escolher <code>&lt;</code> seguido de <code>T</code> e depois <code>&gt;</code>, <code>T</code>, <code>&lt;</code>, <code>T</code>, <code>&gt;</code>, <code>T</code>.</p></body></html>"
          },
          {
            "title": "move -3 - Copy",
            "id": 131094,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Criar uma variável do tipo <code>BoxClass</code> e uma que implementa a interface <code>BoxInterface</code> também parece semelhante.</p><code version=\"2\" codelang=\"typescript\" name=\"script.ts\" visible-if=\"always\"><content><text value=\"class\" class=\"keyword\" /><text value=\" BoxClass &lt;T&gt; {\" /><text type=\"break\" /><text value=\" contents: T;\" /><text type=\"break\" /><text type=\"break\" /><text value=\" \" /><text value=\"constructor\" class=\"keyword\" /><text value=\"(\" /><text value=\"contents: T\" class=\"params\" /><text value=\") {\" /><text type=\"break\" /><text value=\"  \" /><text value=\"this\" class=\"keyword\" /><text value=\".contents = contents;\" /><text type=\"break\" /><text value=\" }\" /><text type=\"break\" /><text value=\"}\" /><text type=\"break\" /><text type=\"break\" /><text value=\"interface\" class=\"keyword\" /><text value=\" BoxInterface &lt;T&gt; {\" /><text type=\"break\" /><text value=\" contents: T;\" /><text type=\"break\" /><text value=\"}\" /><text type=\"break\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" stringBoxClass: BoxClass&lt;\" /><text value=\"string\" class=\"built_in\" /><text value=\"&gt; = \" /><text value=\"new\" class=\"keyword\" /><text value=\" BoxClass(\" /><text value=\"&quot;Hello&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" stringBoxInterface: BoxInterface&lt;\" /><text value=\"string\" class=\"built_in\" /><text value=\"&gt; = {\" /><text type=\"break\" /><text value=\"  contents: \" /><text value=\"&quot;Hello&quot;\" class=\"string\" /><text type=\"break\" /><text value=\"};\" /><text type=\"break\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(stringBoxClass.contents);\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(stringBoxInterface.contents);\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"174\" endIndex=\"175\" /><option startIndex=\"175\" endIndex=\"181\" /><option startIndex=\"181\" endIndex=\"182\" /><option startIndex=\"247\" endIndex=\"248\" /><option startIndex=\"248\" endIndex=\"254\" /><option startIndex=\"254\" endIndex=\"255\" /></options></interaction></interactions><output><content><text value=\"Hello\" /><text type=\"break\" /><text value=\"Hello\" /></content></output></code><p visible-if=\"wrong\">Certifique-se de escolher <code>&lt;</code> seguido de <code>string</code> e depois <code>&gt;</code>, <code>&lt;</code>, <code>string</code>, <code>&gt;</code>.</p></body></html>"
          },
          {
            "title": "move -3 - Copy - Copy",
            "id": 131095,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Também podemos omitir a adição do tipo explicitamente para a classe <code>BoxClass</code>, pois o TypeScript será capaz de inferi-lo.</p><code version=\"2\" codelang=\"typescript\" name=\"script.ts\" visible-if=\"always\"><content><text value=\"class\" class=\"keyword\" /><text value=\" BoxClass &lt;T&gt; {\" /><text type=\"break\" /><text value=\" contents: T;\" /><text type=\"break\" /><text type=\"break\" /><text value=\" \" /><text value=\"constructor\" class=\"keyword\" /><text value=\"(\" /><text value=\"contents: T\" class=\"params\" /><text value=\") {\" /><text type=\"break\" /><text value=\"  \" /><text value=\"this\" class=\"keyword\" /><text value=\".contents = contents;\" /><text type=\"break\" /><text value=\" }\" /><text type=\"break\" /><text value=\"}\" /><text type=\"break\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" stringBoxClass1: BoxClass&lt;\" /><text value=\"string\" class=\"built_in\" /><text value=\"&gt; = \" /><text value=\"new\" class=\"keyword\" /><text value=\" BoxClass(\" /><text value=\"&quot;Hello&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" stringBoxClass2 = \" /><text value=\"new\" class=\"keyword\" /><text value=\" BoxClass(\" /><text value=\"&quot;Hello&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(stringBoxClass1.contents)\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(stringBoxClass2.contents)\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"185\" endIndex=\"186\" /><option startIndex=\"187\" endIndex=\"190\" /><option startIndex=\"191\" endIndex=\"199\" /><option correct=\"false\"><content><text value=\":\" /></content></option><option correct=\"false\"><content><text value=\"BoxClass&lt;string&gt;\" /></content></option></options></interaction></interactions><output><content><text value=\"Hello\" /><text type=\"break\" /><text value=\"Hello\" /></content></output></code><p visible-if=\"wrong\">Certifique-se de escolher <code>=</code> seguido de <code>new</code> e finalmente <code>BoxClass</code>.</p></body></html>"
          },
          {
            "title": "Lesson #2",
            "id": 131011,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Agora, vamos olhar para funções. Aqui está uma função simples chamada <code>getId</code> que retorna o id de um objeto.</p><code version=\"2\" codelang=\"typescript\" name=\"script.ts\" visible-if=\"always\"><content><text value=\"function\" class=\"keyword\" /><text value=\" \" /><text value=\"getId\" class=\"title\" /><text value=\"(\" /><text value=\"object: \" /><text value=\"any\" class=\"built_in\" /><text value=\"): \" /><text value=\"any\" class=\"title\" /><text value=\" \" /><text value=\"{\" /><text type=\"break\" /><text value=\" \" /><text value=\"return\" class=\"keyword\" /><text value=\" object.id;\" /><text type=\"break\" /><text value=\"}\" /><text type=\"break\" /><text type=\"break\" /><text value=\"let\" class=\"keyword\" /><text value=\" employee = {\" /><text type=\"break\" /><text value=\" id: \" /><text value=\"1\" class=\"number\" /><text value=\",\" /><text type=\"break\" /><text value=\" name: \" /><text value=\"'Io'\" class=\"string\" /><text type=\"break\" /><text value=\"};\" /><text type=\"break\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(getId(employee));\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"43\" endIndex=\"52\" /><option correct=\"false\"><content><text value=\"&quot;1&quot;\" /></content></option><option correct=\"false\"><content><text value=\"employee\" /></content></option></options></interaction></interactions><output><content><text value=\"1\" /></content></output></code><p visible-if=\"wrong\">Certifique-se de escolher <code>object.id</code>.</p></body></html>"
          },
          {
            "title": "Lesson #4",
            "id": 131013,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Podemos substituir o tipo <code>any</code> por <code>T</code>, o que permite que nossa função aceite qualquer tipo de dado.</p><code version=\"2\" codelang=\"typescript\" name=\"script.ts\" visible-if=\"always\"><content><text value=\"function\" class=\"keyword\" /><text value=\" \" /><text value=\"getId\" class=\"title\" /><text value=\" &lt;\" /><text value=\"T\" class=\"title\" /><text value=\"&gt; (\" /><text value=\"object: T\" class=\"params\" /><text value=\"): \" /><text value=\"T\" class=\"title\" /><text value=\" \" /><text value=\"{\" /><text type=\"break\" /><text value=\" \" /><text value=\"return\" class=\"keyword\" /><text value=\" object.id;\" /><text type=\"break\" /><text value=\"}\" /><text type=\"break\" /><text type=\"break\" /><text value=\"let\" class=\"keyword\" /><text value=\" employee = {\" /><text type=\"break\" /><text value=\" id: \" /><text value=\"1\" class=\"number\" /><text value=\",\" /><text type=\"break\" /><text value=\" name: \" /><text value=\"'Io'\" class=\"string\" /><text type=\"break\" /><text value=\"};\" /><text type=\"break\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(getId(employee));\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"16\" endIndex=\"17\" /><option startIndex=\"28\" endIndex=\"29\" /><option startIndex=\"32\" endIndex=\"33\" /></options></interaction></interactions><output><content><text value=\"1\" /></content></output></code><p visible-if=\"wrong\">Certifique-se de escolher <code>T</code> seguido de <code>T</code> e finalmente <code>T</code>.</p></body></html>"
          },
          {
            "title": "Lesson #6",
            "id": 131015,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Se quisermos que nosso tipo de retorno seja sempre um tipo específico, podemos definir isso também.</p><code version=\"2\" codelang=\"typescript\" name=\"script.ts\" visible-if=\"always\"><content><text value=\"function\" class=\"keyword\" /><text value=\" \" /><text value=\"getId\" class=\"title\" /><text value=\"&lt;\" /><text value=\"T\" class=\"title\" /><text value=\"&gt;(\" /><text value=\"object: T\" class=\"params\" /><text value=\"): \" /><text value=\"string\" class=\"title\" /><text value=\" \" /><text value=\"{\" /><text type=\"break\" /><text value=\"    \" /><text value=\"return\" class=\"keyword\" /><text value=\" object.id.toString();\" /><text type=\"break\" /><text value=\"}\" /><text type=\"break\" /><text type=\"break\" /><text value=\"let\" class=\"keyword\" /><text value=\" employee = {\" /><text type=\"break\" /><text value=\"    id: \" /><text value=\"1\" class=\"number\" /><text value=\",\" /><text type=\"break\" /><text value=\"    name: \" /><text value=\"'Io'\" class=\"string\" /><text type=\"break\" /><text value=\"};\" /><text type=\"break\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(getId(employee));\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"30\" endIndex=\"36\" /><option startIndex=\"60\" endIndex=\"70\" /><option correct=\"false\"><content><text value=\"toNumber()\" /></content></option></options></interaction></interactions><output><content><text value=\"1\" /></content></output></code><p visible-if=\"wrong\">Certifique-se de escolher <code>string</code> seguido de <code>toString()</code>.</p></body></html>"
          },
          {
            "title": "move - 4",
            "id": 131004,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Como você declarará um array de números em TypeScript generics?</p><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\"><code>let numbers: Array&lt;number&gt; = [1, 2, 3];</code></item><item value=\"2\" correct=\"false\"><code>let numbers: Array = [1, 2, 3];</code></item></selection><p visible-if=\"wrong\"><code>let numbers: Array&lt;number&gt; = [1, 2, 3];</code>.</p></body></html>"
          },
          {
            "title": "move -5",
            "id": 131007,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Vamos criar uma interface com generics.</p><code version=\"2\" codelang=\"typescript\" name=\"script.ts\" visible-if=\"always\"><content><text value=\"interface\" class=\"keyword\" /><text value=\" GenericInterface &lt;T&gt; {\" /><text type=\"break\" /><text type=\"break\" /><text value=\"}\" /></content><interactions><interaction type=\"validatedInput\" isDefault=\"true\" startIndex=\"27\" endIndex=\"30\" /></interactions></code><p visible-if=\"wrong\">Certifique-se de escolher <code>&lt;T&gt;</code>.</p></body></html>"
          },
          {
            "title": "Lesson #5",
            "id": 130990,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Crie uma classe chamada <code>GenericClass</code> usando generics.</p><code version=\"2\" codelang=\"typescript\" name=\"script.ts\" visible-if=\"always\"><content><text value=\"class\" class=\"keyword\" /><text value=\" GenericClass &lt;T&gt; {\" /><text type=\"break\" /><text value=\" value: T;\" /><text type=\"break\" /><text value=\" add: \" /><text value=\"(\" /><text value=\"x: T, y: T\" class=\"params\" /><text value=\") =&gt;\" /><text value=\" T;\" /><text type=\"break\" /><text value=\"}\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"6\" endIndex=\"22\" /><option correct=\"false\"><content><text value=\"Generic&lt;T&gt;\" /></content></option><option correct=\"false\"><content><text value=\"GenericClass\" /></content></option></options></interaction></interactions></code><p visible-if=\"wrong\">Certifique-se de escolher <code>GenericClass &lt;T&gt;</code>.</p></body></html>"
          },
          {
            "title": "Lesson #6",
            "id": 130991,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Como é a definição da interface <code>GenericClass</code>?</p><code version=\"2\" codelang=\"typescript\" name=\"script.ts\" visible-if=\"always\"><content><text value=\"let\" class=\"keyword\" /><text value=\" numClass: GenericClass&lt;\" /><text value=\"number\" class=\"built_in\" /><text value=\"&gt; = {\" /><text type=\"break\" /><text value=\" value: \" /><text value=\"12\" class=\"number\" /><text value=\",\" /><text type=\"break\" /><text value=\" add: \" /><text value=\"function\" class=\"keyword\" /><text value=\"(\" /><text value=\"x, y\" class=\"params\" /><text value=\") \" /><text value=\"{\" /><text type=\"break\" /><text value=\"  \" /><text value=\"return\" class=\"keyword\" /><text value=\" x + y;\" /><text type=\"break\" /><text value=\" }\" /><text type=\"break\" /><text value=\"};\" /><text type=\"break\" /><text type=\"break\" /><text value=\"let\" class=\"keyword\" /><text value=\" strClass: GenericClass&lt;\" /><text value=\"string\" class=\"built_in\" /><text value=\"&gt; = {\" /><text type=\"break\" /><text value=\" value: \" /><text value=\"'Hello'\" class=\"string\" /><text value=\",\" /><text type=\"break\" /><text value=\" add: \" /><text value=\"function\" class=\"keyword\" /><text value=\"(\" /><text value=\"x, y\" class=\"params\" /><text value=\") \" /><text value=\"{\" /><text type=\"break\" /><text value=\"  \" /><text value=\"return\" class=\"keyword\" /><text value=\" x.concat(y);\" /><text type=\"break\" /><text value=\" }\" /><text type=\"break\" /><text value=\"};\" /><text type=\"break\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(numClass.add(\" /><text value=\"10\" class=\"number\" /><text value=\", \" /><text value=\"12\" class=\"number\" /><text value=\"));\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(strClass.add(\" /><text value=\"'Hello'\" class=\"string\" /><text value=\", \" /><text value=\"', world!'\" class=\"string\" /><text value=\"));\" /></content><output><content><text value=\"22\" /><text type=\"break\" /><text value=\"Hello, world!\" /></content></output></code><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\"><code>interface GenericClass&lt;T&gt; { ... }</code></item><item value=\"2\" correct=\"false\"><code>interface GenericClass { ... }</code></item></selection><p visible-if=\"wrong\"><code>interface GenericClass&lt;T&gt; { ... }</code>.</p></body></html>"
          },
          {
            "title": "Lesson #15",
            "id": 131096,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Chame a função <code>identity</code> usando o tipo correto.</p><code version=\"2\" codelang=\"typescript\" name=\"script.ts\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" identity = &lt;T&gt;(arg: T): \" /><text value=\"T\" class=\"params\" /><text value=\" =&gt;\" /><text value=\" {\" /><text type=\"break\" /><text value=\" \" /><text value=\"return\" class=\"keyword\" /><text value=\" arg;\" /><text type=\"break\" /><text value=\"};\" /><text type=\"break\" /><text type=\"break\" /><text value=\"let\" class=\"keyword\" /><text value=\" element = identity&lt;\" /><text value=\"number\" class=\"built_in\" /><text value=\"&gt;(\" /><text value=\"42\" class=\"number\" /><text value=\");\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(element);\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"68\" endIndex=\"76\" /><option startIndex=\"76\" endIndex=\"84\" /><option correct=\"false\"><content><text value=\"&lt;string&gt;\" /></content></option><option correct=\"false\"><content><text value=\"&lt;T&gt;\" /></content></option></options></interaction></interactions><output><content><text value=\"42\" /></content></output></code><p visible-if=\"wrong\">Certifique-se de escolher <code>identity</code> seguido de <code>&lt;number&gt;</code>.</p></body></html>"
          }
        ]
      }
    ]
  }
}