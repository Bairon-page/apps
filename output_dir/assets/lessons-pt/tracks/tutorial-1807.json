{
  "tutorial": {
    "id": 1807,
    "version": 7,
    "type": "guidedProjectOptional",
    "isNew": false,
    "codeLanguage": "javascript",
    "title": "Calculadora de Investimentos",
    "descriptionContent": "Use funções arrow para criar uma calculadora de investimentos",
    "shortDescriptionContent": "",
    "showInTrack": true,
    "iconBanner": "tutorial-1807-icon-banner.svg",
    "chapters": [
      {
        "id": 12025,
        "title": "Calculadora de Investimentos",
        "type": "practiceLevel3",
        "lessons": [
          {
            "title": "Initial variable",
            "id": 109613,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Vamos usar uma arrow function para criar um calculador de investimento, tudo em JavaScript.\n\nVamos começar criando uma variável.\n\n1. Comece inicializando uma variável `initial` para armazenar um valor inicial de investimento de `2000`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "",
                  "solvedContent": "const initial = 2000;"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Interest rate variable",
            "id": 109614,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Em seguida, vamos criar uma variável para armazenar a taxa de juros.\n\n1. Inicialize uma variável `rate` e atribua a ela o valor `10`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "",
                  "solvedContent": "const rate = 10;"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Years variable",
            "id": 109616,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Em seguida, armazene o número de anos de investimento em uma variável.\n\n1. Inicialize outra variável `years` e defina o valor como `3`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "",
                  "solvedContent": "const years = 3;"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Parameters",
            "id": 109619,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Em seguida, crie uma arrow function. A arrow function receberá três parâmetros `init`, `rate` e `time`, representando a entrada para `initial`, `rate` e `years`.\n\n1. Inicialize uma variável `getValue`.\n2. Atribua uma arrow function a `getValue`.\n3. A sintaxe da arrow function deve ter `init`, `rate` e `time` como parâmetros.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const initial = 2000;\nconst rate = 10;\nconst years = 3;",
                  "solvedContent": "const initial = 2000;\nconst rate = 10;\nconst years = 3;\nconst getValue = (init, rate, time) => {};"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Parameter default values",
            "id": 109620,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Os parâmetros da arrow function `init`, `rate` e `time` podem receber valores iniciais dentro dos parênteses da arrow function.\n\n1. Atribua aos parâmetros `init`, `rate` e `time` os valores `0`, `5` e `0` dentro dos parênteses.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const initial = 2000;\nconst rate = 10;\nconst years = 3;\nconst getValue = (init, rate, time) => {};",
                  "solvedContent": "const initial = 2000;\nconst rate = 10;\nconst years = 3;\nconst getValue = (init = 0, rate = 5, time = 0) => {};"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Arrow function variable and expression",
            "id": 109621,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Em seguida, precisaremos de uma variável para armazenar o resultado do cálculo do investimento.\n\n1. Dentro da função arrow, declare uma variável de escopo de bloco `value`.\n2. Atribua a expressão `init + (init * (rate / 100) * time)` a `value`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const initial = 2000;\nconst rate = 10;\nconst years = 3;\nconst getValue = (init = 0, rate = 5, time = 0) => {};",
                  "solvedContent": "const initial = 2000;\nconst rate = 10;\nconst years = 3;\nconst getValue = (init = 0, rate = 5, time = 0) => {\n  const value = init + (init * (rate / 100) * time);\n};"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Return",
            "id": 109622,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Faça com que `getValue` retorne o resultado da expressão.\n\n1. Dentro da arrow function, retorne `value`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const initial = 2000;\nconst rate = 10;\nconst years = 3;\nconst getValue = (init = 0, rate = 5, time = 0) => {\n  const value = init + (init * (rate / 100) * time);\n};",
                  "solvedContent": "const initial = 2000;\nconst rate = 10;\nconst years = 3;\nconst getValue = (init = 0, rate = 5, time = 0) => {\n  const value = init + (init * (rate / 100) * time);\n  return value;\n};"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Calling the function",
            "id": 109624,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Em seguida, use a função chamando-a.\n\n1. Chame `getValue()`.\n2. Certifique-se de passar as variáveis `initial`, `rate` e `years` como argumentos para `getValue()`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const initial = 2000;\nconst rate = 10;\nconst years = 3;\nconst getValue = (init = 0, rate = 5, time = 0) => {\n  const value = init + (init * (rate / 100) * time);\n  return value;\n};",
                  "solvedContent": "const initial = 2000;\nconst rate = 10;\nconst years = 3;\nconst getValue = (init = 0, rate = 5, time = 0) => {\n  const value = init + (init * (rate / 100) * time);\n  return value;\n};\ngetValue(initial, rate, years);"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Console",
            "id": 109625,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Para imprimir o valor do investimento retornado, exiba-o no console.\n\n1. Envolva `getValue(initial, rate, years)` com um `console.log()` para exibir o valor em libras.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const initial = 2000;\nconst rate = 10;\nconst years = 3;\nconst getValue = (init = 0, rate = 5, time = 0) => {\n  const value = init + (init * (rate / 100) * time);\n  return value;\n};\ngetValue(initial, rate, years);",
                  "solvedContent": "const initial = 2000;\nconst rate = 10;\nconst years = 3;\nconst getValue = (init = 0, rate = 5, time = 0) => {\n  const value = init + (init * (rate / 100) * time);\n  return value;\n};\nconsole.log(getValue(initial, rate, years));"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Shortening the code",
            "id": 109623,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Em seguida, vamos encurtar o código refatorando `getvalue`. Ter a arrow function e a expressão na mesma linha nos permite omitir as chaves, a variável `value` e a palavra-chave `return`.\n\n1. Remova as chaves.\n2. Remova a variável `value`.\n3. Remova a palavra-chave `return`, pois ela é implícita em expressões de uma linha.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const initial = 2000;\nconst rate = 10;\nconst years = 3;\nconst getValue = (init = 0, rate = 5, time = 0) => ;\nconsole.log(getValue(initial, rate, years));",
                  "solvedContent": "const initial = 2000;\nconst rate = 10;\nconst years = 3;\nconst getValue = (init = 0, rate = 5, time = 0) => init + (init * (rate / 100) *\n  time);\nconsole.log(getValue(initial, rate, years));"
                }
              ],
              "hints": [
                {
                  "title": "Hint",
                  "content": "After refactoring, `getValue` should only contain the expression `init + (init * (rate / 100) * time)` on the same line."
                }
              ]
            }
          }
        ]
      }
    ]
  }
}