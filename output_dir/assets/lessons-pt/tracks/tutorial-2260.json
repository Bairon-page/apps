{
  "tutorial": {
    "id": 2260,
    "version": 1,
    "type": "practiceOptional",
    "isNew": false,
    "codeLanguage": "javascript",
    "title": "ES6 2",
    "descriptionContent": "ES6 2",
    "shortDescriptionContent": "",
    "showInTrack": true,
    "iconBanner": null,
    "chapters": [
      {
        "id": 12265,
        "title": "Literais de Template",
        "type": "practiceLevel3",
        "lessons": [
          {
            "title": "Code: Literal String",
            "id": 111442,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Crie uma variável chamada `favoriteIceCream` e atribua a ela um literal de string `chocolate`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "console.log(favoriteIceCream);",
                  "solvedContent": "const favoriteIceCream = `chocolate`;\r\nconsole.log(favoriteIceCream);"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Code: Variables",
            "id": 111443,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Combine as literais de string para que `bestDessert` seja igual a `vanilla ice cream`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const favoriteIceCream = `vanilla`;\r\nconst bestDessert = ``;\r\nconsole.log(bestDessert);",
                  "solvedContent": "const favoriteIceCream = `vanilla`;\r\nconst bestDessert = `${favoriteIceCream} ice cream`;\r\nconsole.log(bestDessert);"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Code: Expressions",
            "id": 111444,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Dentro da string `students` e após o `:`, codifique uma expressão que some todos os números de estudantes da escola. Você vai querer uma string que exiba algo como `# of Students: 260`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const elementarySchool = 90;\r\nconst middleSchool = 70;\r\nconst highSchool = 100;\r\nconst students = `# of Students:`;",
                  "solvedContent": "const elementarySchool = 90;\r\nconst middleSchool = 70;\r\nconst highSchool = 100;\r\nconst students =\r\n `# of Students: ${elementarySchool + middleSchool + highSchool}`;"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Code: Functions",
            "id": 111441,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Codifique o `${color}` na linha de retorno e chame a função para que a mensagem diga `Jerry always wears blue shirts.`. Passe o parâmetro sem parênteses.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const bestColor = (color) => {\r\n const name = `Jerry`;\r\n return `${name} always wears  shirts.`;\r\n};\r\nconsole.log();",
                  "solvedContent": "const bestColor = (color) => {\r\n const name = `Jerry`;\r\n return `${name} always wears ${color} shirts.`;\r\n};\r\nconsole.log(bestColor`blue`);"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 13605,
        "title": "Desestruturação",
        "type": "practiceLevel3",
        "lessons": [
          {
            "title": "Code 1: Basic Array Destructuring",
            "id": 122394,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Planejamos uma lista de roupas fabulosas e precisamos imprimi-la! Desestruture o array e armazene seus elementos nas variáveis `top`, `bottom`, `outerwear` e `footwear`. Mantenha a ordem dentro de `[]`. Em seguida, `console.log` cada variável.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const [, , , ] = [\"Baseball top\", \"kilt\", \"Blazer\", \"Boots\"];\nconsole.log();\nconsole.log();\nconsole.log();\nconsole.log();",
                  "solvedContent": "const [top, bottom, outerwear, footwear] = [\"Baseball top\", \"kilt\",\n \"Blazer\", \"Boots\"\n];\nconsole.log(top);\nconsole.log(bottom);\nconsole.log(outerwear);\nconsole.log(footwear);"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Code 2: The rest in Array Destructuring",
            "id": 122395,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Na lista de chás, encontramos diferentes sabores. Queremos imprimir uma frase sobre os benefícios do chá de frutas vermelhas, mas queremos manter os outros chás. Armazene `Berry` na variável `berryTea` e os chás restantes em `otherTeas`. Em seguida, inclua a variável relacionada a `Berry` no primeiro `console.log` e imprima os chás restantes no segundo.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const [] = ['Berry', 'Chai', 'Chamomile', 'Citrus', 'Fruity'];\nconsole.log(`The ${} tea has Sun-proofing and Nourishing effects.`);\nconsole.log();",
                  "solvedContent": "const [berryTea, ...otherTeas] = ['Berry', 'Chai', 'Chamomile',\n 'Citrus', 'Fruity'\n];\nconsole.log(\n `The ${berryTea} tea has Sun-proofing and Nourishing effects.`);\nconsole.log(otherTeas);"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Code 3: Extract Values in Destructuring",
            "id": 122396,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Na padaria do nosso vizinho, temos diferentes tipos de pão. Desta vez, precisamos escolher a `Focaccia` para imprimir uma frase informativa que fará este pão vender como água! Extraia e armazene este valor na variável `italianBread`, e então use-a no `console.log`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const [] = ['Sourdough', 'Baguette', 'Brioche', 'Focaccia',\n 'Multigrain'\n];\nconsole.log(\n `${} is leavened bread than produces a fluffy appearance.`);",
                  "solvedContent": "const [, , , italianBread] = ['Sourdough', 'Baguette', 'Brioche',\n 'Focaccia', 'Multigrain'\n];\nconsole.log(\n `${italianBread} is leavened bread than produces a fluffy appearance.`\n );"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Code 4: Basic Object Destructuring",
            "id": 122397,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Voar é uma aventura fantástica! Vamos revisar algumas características do Boeing neste objeto. Desestruture todas as suas propriedades para usá-las no `console.log`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const aircrafts = {\n brand: 'Boeing',\n nose: 'Pointed nose',\n windshield: 'V-shaped windshield',\n tail: 'Sloped Tail',\n};\nconst {} = aircrafts;\nconsole.log(`The ${brand} Company was founded on July 15, 1916.`);\nconsole.log(`This aircraft has a ${nose}, and a ${windshield}`);\nconsole.log(`And at least but not last a ${tail}`);",
                  "solvedContent": "const aircrafts = {\n brand: 'Boeing',\n nose: 'Pointed nose',\n windshield: 'V-shaped windshield',\n tail: 'Sloped Tail',\n};\nconst {\n brand,\n nose,\n windshield,\n tail\n} = aircrafts;\nconsole.log(`The ${brand} Company was founded on July 15, 1916.`);\nconsole.log(`This aircraft has a ${nose}, and a ${windshield}`);\nconsole.log(`And at least but not last a ${tail}`);"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Code 5: Different variable name",
            "id": 122398,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Precisamos verificar as propriedades da `smartTV` antes de ir ao shopping e comprar uma nova. Ao olhar para os nomes das propriedades, as duas primeiras são muito gerais para serem úteis; então vamos mudar `type` para `screenType` e `shape` para `screenShape` na desestruturação do objeto.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const smartTV = {\n type: \"QLED\",\n shape: \"Flat\",\n ports: \"HDMI\",\n connectivity: 'Wi-Fi'\n};\nconst {} = smartTV;\nconsole.log(screenType);\nconsole.log(screenShape);",
                  "solvedContent": "const smartTV = {\n type: \"QLED\",\n shape: \"Flat\",\n ports: \"HDMI\",\n connectivity: 'Wi-Fi'\n};\nconst {\n type: screenType,\n shape: screenShape,\n} = smartTV;\nconsole.log(screenType);\nconsole.log(screenShape);"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Code 6: The rest in Object destructuring",
            "id": 122399,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Temos um objeto com os melhores programas de TV por década. Queremos armazenar a propriedade `eighties`, mas manter as propriedades restantes em `otherOldShows`. Adicione essas variáveis à desestruturação do objeto e inclua `eighties` no primeiro `console.log`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const oldShows = {\n fifties: \"Maverick\",\n sixties: \"The Saint\",\n seventies: \"The Love Boat\",\n eighties: \"Manimal\",\n nineties: \"Dawson's Creek\"\n};\nconst {} = oldShows;\nconsole.log(`The best tv show in the 80s was ${}`);\nconsole.log(otherOldShows);",
                  "solvedContent": "const oldShows = {\n fifties: \"Maverick\",\n sixties: \"The Saint\",\n seventies: \"The Love Boat\",\n eighties: \"Manimal\",\n nineties: \"Dawson's Creek\"\n};\nconst {\n eighties,\n ...otherOldShows\n} = oldShows;\nconsole.log(`The best tv show in the 80s was ${eighties}`);\nconsole.log(otherOldShows);"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Code 7: Default Values in Destructuring",
            "id": 122400,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "O mundo da cerveja é fascinante com todos os diferentes tipos e a quantidade considerável que podemos encontrar. Temos um objeto com informações sobre uma cerveja específica. É necessário definir um valor padrão para a propriedade `brand` porque está faltando em `beer`. Defina `\"N/A\"` como o valor padrão para `brand` na desestruturação do objeto. Em seguida, imprima `brand`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const beer = {\n name: '\tBlue Moon White',\n alcoholPercentage: 5.4,\n calories: 171,\n carbs: 12.9\n};\nconst {} = beer;\nconsole.log();",
                  "solvedContent": "const beer = {\n name: '\tBlue Moon White',\n alcoholPercentage: 5.4,\n calories: 171,\n carbs: 12.9\n};\nconst {\n brand = \"N/A\"\n} = beer;\nconsole.log(brand);"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Code 8: Parameters in Functions",
            "id": 122401,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Desestruture os dois primeiros itens de `mountains` como parâmetros para `getMountainsNickname`. Use os nomes de variáveis `alps` e `logan`. Em seguida, imprima-os dentro da função na mesma ordem.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const mountains = [\"Swiss Alps\", \"Mount Logan\", \"Mount Fuji\",\n \"Mauna Kea\", \"Jotunheimen Mountains\"\n];\n\nfunction getMountainsNickname() {\n console.log(`The ${} are The Magical Mountains.`);\n console.log(`The ${} is The Snowy Paradise.`);\n}\ngetMountainsNickname(mountains);",
                  "solvedContent": "const mountains = [\"Swiss Alps\", \"Mount Logan\", \"Mount Fuji\",\n \"Mauna Kea\", \"Jotunheimen Mountains\"\n];\n\nfunction getMountainsNickname([alps, logan]) {\n console.log(`The ${alps} are The Magical Mountains.`);\n console.log(`The ${logan} is The Snowy Paradise.`);\n}\ngetMountainsNickname(mountains);"
                }
              ],
              "hints": []
            }
          }
        ]
      }
    ]
  }
}