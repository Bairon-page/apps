{
  "tutorial": {
    "id": 2661,
    "version": 5,
    "type": "guidedProject",
    "isNew": false,
    "codeLanguage": "python",
    "title": "Lista de Tarefas - Parte 1",
    "descriptionContent": "Comece a construir seu aplicativo de lista de tarefas. Este primeiro passo foca em criar a estrutura básica e adicionar tarefas.",
    "shortDescriptionContent": "",
    "showInTrack": true,
    "iconBanner": "tutorial-2661-icon-banner.svg",
    "chapters": [
      {
        "id": 14636,
        "title": "Capítulo #1",
        "type": "practiceLevel3",
        "lessons": [
          {
            "title": "Lesson #1",
            "id": 129453,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Bem-vindo ao projeto **Lista de Tarefas**. Aqui, você vai criar uma lista para todas as suas tarefas.\n\nVamos começar criando uma lista vazia que irá conter as tarefas da Lista de Tarefas.\n\n1. Crie uma variável chamada `todo_list` e defina-a como uma lista vazia `[]`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "",
                  "solvedContent": "todo_list = []"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Lesson #2",
            "id": 129454,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Devemos informar ao usuário se a lista de tarefas deles está vazia. Faça isso verificando o comprimento da `todo_list` dentro de uma declaração `if`.\n\n1. Use uma declaração `if` que verifica se `todo_list` está vazia.\n2. Se estiver, deve imprimir a string `\"Your ToDo list is empty\"`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "todo_list = []",
                  "solvedContent": "todo_list = []\n\nif not todo_list:\n  print(\"Your ToDo list is empty\")"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Lesson #3",
            "id": 129455,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Lista vazia? Vamos corrigir isso adicionando algumas tarefas e exibindo-as.\n\n1. Atualize a primeira linha adicionando dois itens à `todo_list` que possamos exibir;\n2. Adicione uma cláusula `else` à declaração `if` que será executada se a lista não estiver vazia.\n3. Dentro da cláusula `else`, crie uma variável chamada `index` e atribua a ela o valor `1`.\n4. Ainda na cláusula `else`, inicie um loop `for` para iterar sobre cada `task` em `todo_list`.\n5. No loop `for`, imprima o `index`, seguido por um `.` e depois a `task`. Use uma f-string para isso, como `f\"{index}. {task}\"`.\n6. Após imprimir a tarefa, incremente `index` em `1`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "todo_list = []\n\nif not todo_list:\n  print(\"Your ToDo list is empty\")",
                  "solvedContent": "todo_list = [\"Task 1\", \"Task 2\"]\n\nif not todo_list:\n  print(\"Your ToDo list is empty\")\nelse:\n  index = 1\n  for task in todo_list:\n    print(f\"{index}. {task}\")\n    index += 1"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Lesson #4",
            "id": 129456,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Nosso programa deve pedir ao usuário para inserir uma nova tarefa. Vamos usar a função `input` para obter a entrada do usuário.\n\n1. Adicione uma função `input` com o prompt `\"Enter the task: \"` diretamente abaixo da linha onde você define o `todo_list`. Crie uma variável chamada `new_task` para salvar a entrada recebida da função `input`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "todo_list = [\"Task 1\", \"Task 2\"]\n\nif not todo_list:\n  print(\"Your ToDo list is empty\")\nelse:\n  index = 1\n  for task in todo_list:\n    print(f\"{index}. {task}\")\n    index += 1",
                  "solvedContent": "todo_list = [\"Task 1\", \"Task 2\"]\n\nnew_task = input(\"Enter the task: \")\n\nif not todo_list:\n  print(\"Your ToDo list is empty\")\nelse:\n  index = 1\n  for task in todo_list:\n    print(f\"{index}. {task}\")\n    index += 1"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Lesson #5",
            "id": 129457,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Vamos adicionar a nova tarefa do usuário à `todo_list` e confirmar que a tarefa foi adicionada.\n\n1. Antes do bloco `if`, adicione a variável `new_task` à `todo_list`.\n2. Imprima `Task \"{new_task}\" added`, usando uma f-string para incluir a tarefa que o usuário adicionou.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "todo_list = [\"Task 1\", \"Task 2\"]\n\nnew_task = input(\"Enter the task: \")\n\nif not todo_list:\n  print(\"Your ToDo list is empty\")\nelse:\n  index = 1\n  for task in todo_list:\n    print(f\"{index}. {task}\")\n    index += 1",
                  "solvedContent": "todo_list = [\"Task 1\", \"Task 2\"]\n\nnew_task = input(\"Enter the task: \")\ntodo_list.append(new_task)\nprint(f\"Task '{new_task}' added to the ToDo list\")\n\nif not todo_list:\n  print(\"Your ToDo list is empty\")\nelse:\n  index = 1\n  for task in todo_list:\n    print(f\"{index}. {task}\")\n    index += 1"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Lesson #6",
            "id": 129458,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Finalmente, vamos executar um loop até que o usuário decida sair. Por enquanto, vamos fazê-lo rodar para sempre. Vamos mudar isso na segunda parte do projeto.\n\n1. Envolva todo o código dentro de um loop `while` que tenha a condição definida como `True`, mantendo a primeira linha onde você define a variável `todo_list` do lado de fora.\n\nDepois de implementar o loop `while`, adicione algumas tarefas e veja a lista crescer.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "todo_list = [\"Task 1\", \"Task 2\"]\n\nnew_task = input(\"Enter the task: \")\ntodo_list.append(new_task)\nprint(f\"Task '{new_task}' added to the ToDo list\")\n\nif not todo_list:\n  print(\"Your ToDo list is empty\")\nelse:\n  index = 1\n  for task in todo_list:\n    print(f\"{index}. {task}\")\n    index += 1",
                  "solvedContent": "todo_list = [\"Task 1\", \"Task 2\"]\n\nwhile True:\n  new_task = input(\"Enter the task: \")\n  todo_list.append(new_task)\n  print(f\"Task '{new_task}' added to the ToDo list\")\n\n  if not todo_list:\n    print(\"Your ToDo list is empty\")\n  else:\n    index = 1\n    for task in todo_list:\n      print(f\"{index}. {task}\")\n      index += 1"
                }
              ],
              "hints": []
            }
          }
        ]
      }
    ]
  }
}