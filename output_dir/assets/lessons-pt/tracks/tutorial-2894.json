{
  "tutorial": {
    "id": 2894,
    "version": 4,
    "type": "guidedProject",
    "isNew": false,
    "codeLanguage": "javascript",
    "title": "Blackjack - Parte 1",
    "descriptionContent": "No Blackjack, usaremos o que aprendemos até agora para construir nossa própria versão do clássico jogo de cartas",
    "shortDescriptionContent": "",
    "showInTrack": true,
    "iconBanner": "tutorial-2894-icon-banner.svg",
    "chapters": [
      {
        "id": 14985,
        "title": "Capítulo #1",
        "type": "practiceLevel3",
        "lessons": [
          {
            "title": "Lesson #1",
            "id": 132125,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Bem-vindo ao projeto **Blackjack**. Neste projeto, faremos nossa versão do clássico jogo de cartas, Blackjack.\n\nUsaremos um array de objetos, cada um representando uma carta e seu valor no blackjack.\n\n1. Declare uma variável `cards` que contenha um array.\n2. Adicione a primeira carta, um objeto que possui dois atributos com `rank` e `value`. Para a primeira carta, defina o `rank` como `\"2\"` e o `value` como `2`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "app.js",
                  "codeLanguage": "javascript",
                  "content": "",
                  "solvedContent": "const cards = [{\n  rank: '2',\n  value: 2\n}];"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Lesson #1 - Copy",
            "id": 132212,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Precisamos adicionar as cartas restantes ao array `cards`.\n\n1. Adicione objetos para as cartas restantes ao array `cards`.\n   - Um objeto para a carta com o rank `\"3\"` e o valor `3`.\n   - Um objeto para a carta com o rank `\"4\"` e o valor `4`.\n   - Um objeto para a carta com o rank `\"5\"` e o valor `5`.\n   - Um objeto para a carta com o rank `\"6\"` e o valor `6`.\n   - Um objeto para a carta com o rank `\"7\"` e o valor `7`.\n   - Um objeto para a carta com o rank `\"8\"` e o valor `8`.\n   - Um objeto para a carta com o rank `\"9\"` e o valor `9`.\n   - Um objeto para a carta com o rank `\"10\"` e o valor `10`.\n   - Um objeto para a carta com o rank `\"J\"` e o valor `10`.\n   - Um objeto para a carta com o rank `\"Q\"` e o valor `10`.\n   - Um objeto para a carta com o rank `\"K\"` e o valor `10`.\n   - Um objeto para a carta com o rank `\"A\"` e o valor `11`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "app.js",
                  "codeLanguage": "javascript",
                  "content": "const cards = [{\n  rank: '2',\n  value: 2\n}];",
                  "solvedContent": "const cards = [{\n  rank: '2',\n  value: 2\n}, {\n  rank: '3',\n  value: 3\n}, {\n  rank: '4',\n  value: 4\n}, {\n  rank: '5',\n  value: 5\n}, {\n  rank: '6',\n  value: 6\n}, {\n  rank: '7',\n  value: 7\n}, {\n  rank: '8',\n  value: 8\n}, {\n  rank: '9',\n  value: 9\n}, {\n  rank: '10',\n  value: 10\n}, {\n  rank: 'J',\n  value: 10\n}, {\n  rank: 'Q',\n  value: 10\n}, {\n  rank: 'K',\n  value: 10\n}, {\n  rank: 'A',\n  value: 11\n}];"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Lesson #2",
            "id": 132126,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Precisamos de uma função para puxar uma carta do nosso baralho aleatoriamente.\n\n1. Crie uma função `drawCard` que não recebe argumentos.\n2. A função deve retornar uma carta aleatória do nosso array `cards`. Você pode usar a função `Math.random` para gerar um índice aleatório para o array. Se precisar de mais ajuda, tente perguntar ao nosso suporte de IA. Você consegue!",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "app.js",
                  "codeLanguage": "javascript",
                  "content": "const cards = [{\n  rank: '2',\n  value: 2\n}, {\n  rank: '3',\n  value: 3\n}, {\n  rank: '4',\n  value: 4\n}, {\n  rank: '5',\n  value: 5\n}, {\n  rank: '6',\n  value: 6\n}, {\n  rank: '7',\n  value: 7\n}, {\n  rank: '8',\n  value: 8\n}, {\n  rank: '9',\n  value: 9\n}, {\n  rank: '10',\n  value: 10\n}, {\n  rank: 'J',\n  value: 10\n}, {\n  rank: 'Q',\n  value: 10\n}, {\n  rank: 'K',\n  value: 10\n}, {\n  rank: 'A',\n  value: 11\n}];",
                  "solvedContent": "const cards = [{\n  rank: '2',\n  value: 2\n}, {\n  rank: '3',\n  value: 3\n}, {\n  rank: '4',\n  value: 4\n}, {\n  rank: '5',\n  value: 5\n}, {\n  rank: '6',\n  value: 6\n}, {\n  rank: '7',\n  value: 7\n}, {\n  rank: '8',\n  value: 8\n}, {\n  rank: '9',\n  value: 9\n}, {\n  rank: '10',\n  value: 10\n}, {\n  rank: 'J',\n  value: 10\n}, {\n  rank: 'Q',\n  value: 10\n}, {\n  rank: 'K',\n  value: 10\n}, {\n  rank: 'A',\n  value: 11\n}];\n\nfunction drawCard() {\n  return cards[Math.floor(Math.random() * cards.length)];\n}"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Lesson #2 - Copy",
            "id": 132214,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Vamos usar `@mimo-org/input` para capturar a entrada do usuário.\n\n1. No topo do arquivo, declare uma variável `input` e requisite o módulo `input`. Estamos usando `@mimo-org/input` para interagir com o usuário no console.\n   ```const input = require(\"@mimo-org/input\");```",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "app.js",
                  "codeLanguage": "javascript",
                  "content": "const cards = [{\n  rank: '2',\n  value: 2\n}, {\n  rank: '3',\n  value: 3\n}, {\n  rank: '4',\n  value: 4\n}, {\n  rank: '5',\n  value: 5\n}, {\n  rank: '6',\n  value: 6\n}, {\n  rank: '7',\n  value: 7\n}, {\n  rank: '8',\n  value: 8\n}, {\n  rank: '9',\n  value: 9\n}, {\n  rank: '10',\n  value: 10\n}, {\n  rank: 'J',\n  value: 10\n}, {\n  rank: 'Q',\n  value: 10\n}, {\n  rank: 'K',\n  value: 10\n}, {\n  rank: 'A',\n  value: 11\n}];\n\nfunction drawCard() {\n  return cards[Math.floor(Math.random() * cards.length)];\n}",
                  "solvedContent": "const input = require(\"@mimo-org/input\");\n\nconst cards = [{\n  rank: '2',\n  value: 2\n}, {\n  rank: '3',\n  value: 3\n}, {\n  rank: '4',\n  value: 4\n}, {\n  rank: '5',\n  value: 5\n}, {\n  rank: '6',\n  value: 6\n}, {\n  rank: '7',\n  value: 7\n}, {\n  rank: '8',\n  value: 8\n}, {\n  rank: '9',\n  value: 9\n}, {\n  rank: '10',\n  value: 10\n}, {\n  rank: 'J',\n  value: 10\n}, {\n  rank: 'Q',\n  value: 10\n}, {\n  rank: 'K',\n  value: 10\n}, {\n  rank: 'A',\n  value: 11\n}];\n\nfunction drawCard() {\n  return cards[Math.floor(Math.random() * cards.length)];\n}"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Lesson #2 - Copy",
            "id": 132213,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Hora de perguntar ao usuário se ele quer pegar uma nova carta (hit) ou está satisfeito com o que tem (stand).\n\n1. Crie uma nova variável, `playerHand`, e atribua a ela um array vazio. Usaremos esse array para acompanhar todas as cartas.\n2. Pergunte ao jogador se ele quer hit ou stand usando `input`. Indique que digitar `\"h\"` permitirá que ele pegue uma nova carta, e `\"s\"` representa ficar (não pegar mais cartas).\n3. Se o jogador digitar `\"h\"`, use a função `drawCard` para receber uma nova carta e adicione a carta tirada ao array `playerHand`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "app.js",
                  "codeLanguage": "javascript",
                  "content": "const input = require(\"@mimo-org/input\");\n\nconst cards = [{\n  rank: '2',\n  value: 2\n}, {\n  rank: '3',\n  value: 3\n}, {\n  rank: '4',\n  value: 4\n}, {\n  rank: '5',\n  value: 5\n}, {\n  rank: '6',\n  value: 6\n}, {\n  rank: '7',\n  value: 7\n}, {\n  rank: '8',\n  value: 8\n}, {\n  rank: '9',\n  value: 9\n}, {\n  rank: '10',\n  value: 10\n}, {\n  rank: 'J',\n  value: 10\n}, {\n  rank: 'Q',\n  value: 10\n}, {\n  rank: 'K',\n  value: 10\n}, {\n  rank: 'A',\n  value: 11\n}];\n\nfunction drawCard() {\n  return cards[Math.floor(Math.random() * cards.length)];\n}",
                  "solvedContent": "const input = require(\"@mimo-org/input\");\n\nconst cards = [{\n  rank: '2',\n  value: 2\n}, {\n  rank: '3',\n  value: 3\n}, {\n  rank: '4',\n  value: 4\n}, {\n  rank: '5',\n  value: 5\n}, {\n  rank: '6',\n  value: 6\n}, {\n  rank: '7',\n  value: 7\n}, {\n  rank: '8',\n  value: 8\n}, {\n  rank: '9',\n  value: 9\n}, {\n  rank: '10',\n  value: 10\n}, {\n  rank: 'J',\n  value: 10\n}, {\n  rank: 'Q',\n  value: 10\n}, {\n  rank: 'K',\n  value: 10\n}, {\n  rank: 'A',\n  value: 11\n}];\n\nfunction drawCard() {\n  return cards[Math.floor(Math.random() * cards.length)];\n}\n\nlet playerHand = [];\n\nconst action = input('Do you want to (h)it or (s)tand? ');\nif (action === 'h') {\n  playerHand.push(drawCard());\n}"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Lesson #3",
            "id": 132127,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Também precisamos de um método que calcule o valor de uma mão.\n\n1. Crie uma função `calculateHandValue` que receba um parâmetro chamado `hand` (array de cartas).\n2. Dentro da função, comece obtendo a soma dos valores das cartas na mão.\n3. Além disso, conte o número de ases na mão.\n4. Em seguida, lide com o caso de acordo com as regras do blackjack: se o valor total for superior a 21 e houver pelo menos um ás na mão, subtraia 10 do valor total para cada ás, até que o total seja 21 ou menos, ou não haja mais ases.\n5. Retorne o valor total da mão.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "app.js",
                  "codeLanguage": "javascript",
                  "content": "const input = require(\"@mimo-org/input\");\n\nconst cards = [{\n  rank: '2',\n  value: 2\n}, {\n  rank: '3',\n  value: 3\n}, {\n  rank: '4',\n  value: 4\n}, {\n  rank: '5',\n  value: 5\n}, {\n  rank: '6',\n  value: 6\n}, {\n  rank: '7',\n  value: 7\n}, {\n  rank: '8',\n  value: 8\n}, {\n  rank: '9',\n  value: 9\n}, {\n  rank: '10',\n  value: 10\n}, {\n  rank: 'J',\n  value: 10\n}, {\n  rank: 'Q',\n  value: 10\n}, {\n  rank: 'K',\n  value: 10\n}, {\n  rank: 'A',\n  value: 11\n}];\n\nfunction drawCard() {\n  return cards[Math.floor(Math.random() * cards.length)];\n}\n\nlet playerHand = [];\n\nconst action = input('Do you want to (h)it or (s)tand? ');\nif (action === 'h') {\n  playerHand.push(drawCard());\n}",
                  "solvedContent": "const input = require(\"@mimo-org/input\");\n\nconst cards = [{\n  rank: '2',\n  value: 2\n}, {\n  rank: '3',\n  value: 3\n}, {\n  rank: '4',\n  value: 4\n}, {\n  rank: '5',\n  value: 5\n}, {\n  rank: '6',\n  value: 6\n}, {\n  rank: '7',\n  value: 7\n}, {\n  rank: '8',\n  value: 8\n}, {\n  rank: '9',\n  value: 9\n}, {\n  rank: '10',\n  value: 10\n}, {\n  rank: 'J',\n  value: 10\n}, {\n  rank: 'Q',\n  value: 10\n}, {\n  rank: 'K',\n  value: 10\n}, {\n  rank: 'A',\n  value: 11\n}];\n\nfunction drawCard() {\n  return cards[Math.floor(Math.random() * cards.length)];\n}\n\nfunction calculateHandValue(hand) {\n  let value = 0;\n  let aceCount = 0;\n\n  for (let card of hand) {\n    value += card.value;\n    if (card.rank === 'A') {\n      aceCount += 1;\n    }\n  }\n\n  while (value > 21 && aceCount > 0) {\n    value -= 10;\n    aceCount -= 1;\n  }\n\n  return value;\n}\n\nlet playerHand = [];\n\nconst action = input('Do you want to (h)it or (s)tand? ');\nif (action === 'h') {\n  playerHand.push(drawCard());\n}"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Lesson #3 - Copy",
            "id": 132215,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Vamos usar a nova função para calcular o valor da mão depois que nosso jogador comprar a primeira carta.\n\n1. Antes de perguntar ao jogador se ele quer comprar uma nova carta ou parar de comprar, crie uma nova variável `playerValue` e defina-a como `0`.\n2. Após comprar uma carta e adicioná-la à variável `playerHand`, calcule o valor e atribua o valor de retorno da chamada da função `calculateHandValue` a `playerValue`.\n3. Imprima a pontuação.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "app.js",
                  "codeLanguage": "javascript",
                  "content": "const input = require(\"@mimo-org/input\");\n\nconst cards = [{\n  rank: '2',\n  value: 2\n}, {\n  rank: '3',\n  value: 3\n}, {\n  rank: '4',\n  value: 4\n}, {\n  rank: '5',\n  value: 5\n}, {\n  rank: '6',\n  value: 6\n}, {\n  rank: '7',\n  value: 7\n}, {\n  rank: '8',\n  value: 8\n}, {\n  rank: '9',\n  value: 9\n}, {\n  rank: '10',\n  value: 10\n}, {\n  rank: 'J',\n  value: 10\n}, {\n  rank: 'Q',\n  value: 10\n}, {\n  rank: 'K',\n  value: 10\n}, {\n  rank: 'A',\n  value: 11\n}];\n\nfunction drawCard() {\n  return cards[Math.floor(Math.random() * cards.length)];\n}\n\nfunction calculateHandValue(hand) {\n  let value = 0;\n  let aceCount = 0;\n\n  for (let card of hand) {\n    value += card.value;\n    if (card.rank === 'A') {\n      aceCount += 1;\n    }\n  }\n\n  while (value > 21 && aceCount > 0) {\n    value -= 10;\n    aceCount -= 1;\n  }\n\n  return value;\n}\n\nlet playerHand = [];\n\nconst action = input('Do you want to (h)it or (s)tand? ');\nif (action === 'h') {\n  playerHand.push(drawCard());\n}",
                  "solvedContent": "const input = require(\"@mimo-org/input\");\n\nconst cards = [{\n  rank: '2',\n  value: 2\n}, {\n  rank: '3',\n  value: 3\n}, {\n  rank: '4',\n  value: 4\n}, {\n  rank: '5',\n  value: 5\n}, {\n  rank: '6',\n  value: 6\n}, {\n  rank: '7',\n  value: 7\n}, {\n  rank: '8',\n  value: 8\n}, {\n  rank: '9',\n  value: 9\n}, {\n  rank: '10',\n  value: 10\n}, {\n  rank: 'J',\n  value: 10\n}, {\n  rank: 'Q',\n  value: 10\n}, {\n  rank: 'K',\n  value: 10\n}, {\n  rank: 'A',\n  value: 11\n}];\n\nfunction drawCard() {\n  return cards[Math.floor(Math.random() * cards.length)];\n}\n\nfunction calculateHandValue(hand) {\n  let value = 0;\n  let aceCount = 0;\n\n  for (let card of hand) {\n    value += card.value;\n    if (card.rank === 'A') {\n      aceCount += 1;\n    }\n  }\n\n  while (value > 21 && aceCount > 0) {\n    value -= 10;\n    aceCount -= 1;\n  }\n\n  return value;\n}\n\nlet playerHand = [];\nlet playerValue = 0;\n\nconst action = input('Do you want to (h)it or (s)tand? ');\nif (action === 'h') {\n  playerHand.push(drawCard());\n  playerValue = calculateHandValue(playerHand);\n  console.log(`Your score: ${playerValue}`);\n}"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Lesson #4",
            "id": 132128,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Até agora, permitimos que o jogador compre uma carta e exiba seu valor. No entanto, ainda precisamos mostrar ao jogador a carta real que ele comprou.\n\n1. Crie uma função `displayHand` que recebe um parâmetro chamado `hand` (array de cartas).\n2. Dentro da função, percorra cada elemento do array. Adicione o valor de cada carta no array `hand` a uma string que você imprime no final da função para exibir todas as cartas que o jogador tem na mão.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "app.js",
                  "codeLanguage": "javascript",
                  "content": "const input = require(\"@mimo-org/input\");\n\nconst cards = [{\n  rank: '2',\n  value: 2\n}, {\n  rank: '3',\n  value: 3\n}, {\n  rank: '4',\n  value: 4\n}, {\n  rank: '5',\n  value: 5\n}, {\n  rank: '6',\n  value: 6\n}, {\n  rank: '7',\n  value: 7\n}, {\n  rank: '8',\n  value: 8\n}, {\n  rank: '9',\n  value: 9\n}, {\n  rank: '10',\n  value: 10\n}, {\n  rank: 'J',\n  value: 10\n}, {\n  rank: 'Q',\n  value: 10\n}, {\n  rank: 'K',\n  value: 10\n}, {\n  rank: 'A',\n  value: 11\n}];\n\nfunction drawCard() {\n  return cards[Math.floor(Math.random() * cards.length)];\n}\n\nfunction calculateHandValue(hand) {\n  let value = 0;\n  let aceCount = 0;\n\n  for (let card of hand) {\n    value += card.value;\n    if (card.rank === 'A') {\n      aceCount += 1;\n    }\n  }\n\n  while (value > 21 && aceCount > 0) {\n    value -= 10;\n    aceCount -= 1;\n  }\n\n  return value;\n}\n\nlet playerHand = [];\nlet playerValue = 0;\n\nconst action = input('Do you want to (h)it or (s)tand? ');\n\nif (action === 'h') {\n  playerHand.push(drawCard());\n  playerValue = calculateHandValue(playerHand);\n  console.log(`Your score: ${playerValue}`);\n}",
                  "solvedContent": "const input = require(\"@mimo-org/input\");\n\nconst cards = [{\n  rank: '2',\n  value: 2\n}, {\n  rank: '3',\n  value: 3\n}, {\n  rank: '4',\n  value: 4\n}, {\n  rank: '5',\n  value: 5\n}, {\n  rank: '6',\n  value: 6\n}, {\n  rank: '7',\n  value: 7\n}, {\n  rank: '8',\n  value: 8\n}, {\n  rank: '9',\n  value: 9\n}, {\n  rank: '10',\n  value: 10\n}, {\n  rank: 'J',\n  value: 10\n}, {\n  rank: 'Q',\n  value: 10\n}, {\n  rank: 'K',\n  value: 10\n}, {\n  rank: 'A',\n  value: 11\n}];\n\nfunction drawCard() {\n  return cards[Math.floor(Math.random() * cards.length)];\n}\n\nfunction calculateHandValue(hand) {\n  let value = 0;\n  let aceCount = 0;\n\n  for (let card of hand) {\n    value += card.value;\n    if (card.rank === 'A') {\n      aceCount += 1;\n    }\n  }\n\n  while (value > 21 && aceCount > 0) {\n    value -= 10;\n    aceCount -= 1;\n  }\n\n  return value;\n}\n\nfunction displayHand(hand) {\n  let ranks = '';\n\n  for (let i = 0; i < hand.length; i++) {\n    ranks += hand[i].rank;\n    if (i < hand.length - 1) {\n      ranks += ', ';\n    }\n  }\n\n  console.log(`Your hand: ${ranks}`);\n}\n\nlet playerHand = [];\nlet playerValue = 0;\n\nconst action = input('Do you want to (h)it or (s)tand? ');\n\nif (action === 'h') {\n  playerHand.push(drawCard());\n  playerValue = calculateHandValue(playerHand);\n  displayHand(playerHand);\n  console.log(`Your score: ${playerValue}`);\n}"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Lesson #5",
            "id": 132129,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Blackjack é sobre chegar o mais próximo possível de 21. Se você ultrapassar 21, você perde. Precisamos de um loop de jogo que permita comprar quantas cartas o jogador quiser.\n\n1. Adicione um loop `while` que continue enquanto o valor da mão do jogador `playerValue` for menor que 21.\n2. Mova o código que solicita a ação de \"hit\" ou \"stand\", compra uma carta se o jogador escolher \"hit\", atualiza o valor da mão e exibe a mão e a pontuação dentro do loop while.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "app.js",
                  "codeLanguage": "javascript",
                  "content": "const input = require(\"@mimo-org/input\");\n\nconst cards = [{\n  rank: '2',\n  value: 2\n}, {\n  rank: '3',\n  value: 3\n}, {\n  rank: '4',\n  value: 4\n}, {\n  rank: '5',\n  value: 5\n}, {\n  rank: '6',\n  value: 6\n}, {\n  rank: '7',\n  value: 7\n}, {\n  rank: '8',\n  value: 8\n}, {\n  rank: '9',\n  value: 9\n}, {\n  rank: '10',\n  value: 10\n}, {\n  rank: 'J',\n  value: 10\n}, {\n  rank: 'Q',\n  value: 10\n}, {\n  rank: 'K',\n  value: 10\n}, {\n  rank: 'A',\n  value: 11\n}];\n\nfunction drawCard() {\n  return cards[Math.floor(Math.random() * cards.length)];\n}\n\nfunction calculateHandValue(hand) {\n  let value = 0;\n  let aceCount = 0;\n\n  for (let card of hand) {\n    value += card.value;\n    if (card.rank === 'A') {\n      aceCount += 1;\n    }\n  }\n\n  while (value > 21 && aceCount > 0) {\n    value -= 10;\n    aceCount -= 1;\n  }\n\n  return value;\n}\n\nfunction displayHand(hand) {\n  let ranks = '';\n\n  for (let i = 0; i < hand.length; i++) {\n    ranks += hand[i].rank;\n    if (i < hand.length - 1) {\n      ranks += ', ';\n    }\n  }\n\n  console.log(`Your hand: ${ranks}`);\n}\n\nlet playerHand = [];\nlet playerValue = 0;\n\nconst action = input('Do you want to (h)it or (s)tand? ');\n\nif (action === 'h') {\n  playerHand.push(drawCard());\n  playerValue = calculateHandValue(playerHand);\n  displayHand(playerHand);\n  console.log(`Your score: ${playerValue}`);\n}",
                  "solvedContent": "const input = require(\"@mimo-org/input\");\n\nconst cards = [{\n  rank: '2',\n  value: 2\n}, {\n  rank: '3',\n  value: 3\n}, {\n  rank: '4',\n  value: 4\n}, {\n  rank: '5',\n  value: 5\n}, {\n  rank: '6',\n  value: 6\n}, {\n  rank: '7',\n  value: 7\n}, {\n  rank: '8',\n  value: 8\n}, {\n  rank: '9',\n  value: 9\n}, {\n  rank: '10',\n  value: 10\n}, {\n  rank: 'J',\n  value: 10\n}, {\n  rank: 'Q',\n  value: 10\n}, {\n  rank: 'K',\n  value: 10\n}, {\n  rank: 'A',\n  value: 11\n}];\n\nfunction drawCard() {\n  return cards[Math.floor(Math.random() * cards.length)];\n}\n\nfunction calculateHandValue(hand) {\n  let value = 0;\n  let aceCount = 0;\n\n  for (let card of hand) {\n    value += card.value;\n    if (card.rank === 'A') {\n      aceCount += 1;\n    }\n  }\n\n  while (value > 21 && aceCount > 0) {\n    value -= 10;\n    aceCount -= 1;\n  }\n\n  return value;\n}\n\nfunction displayHand(hand) {\n  let ranks = '';\n\n  for (let i = 0; i < hand.length; i++) {\n    ranks += hand[i].rank;\n    if (i < hand.length - 1) {\n      ranks += ', ';\n    }\n  }\n\n  console.log(`Your hand: ${ranks}`);\n}\n\nlet playerHand = [];\nlet playerValue = 0;\n\nwhile (playerValue < 21) {\n  const action = input('Do you want to (h)it or (s)tand? ');\n  if (action === 'h') {\n    playerHand.push(drawCard());\n    playerValue = calculateHandValue(playerHand);\n    displayHand(playerHand);\n    console.log(`Your score: ${playerValue}`);\n  }\n}"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Lesson #7",
            "id": 132131,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Agora, precisamos responder à ação do jogador se ele quiser evitar comprar mais cartas (parar).\n\n1. Se o jogador escolher parar, use `break` para sair do loop.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "app.js",
                  "codeLanguage": "javascript",
                  "content": "const input = require(\"@mimo-org/input\");\n\nconst cards = [{\n  rank: '2',\n  value: 2\n}, {\n  rank: '3',\n  value: 3\n}, {\n  rank: '4',\n  value: 4\n}, {\n  rank: '5',\n  value: 5\n}, {\n  rank: '6',\n  value: 6\n}, {\n  rank: '7',\n  value: 7\n}, {\n  rank: '8',\n  value: 8\n}, {\n  rank: '9',\n  value: 9\n}, {\n  rank: '10',\n  value: 10\n}, {\n  rank: 'J',\n  value: 10\n}, {\n  rank: 'Q',\n  value: 10\n}, {\n  rank: 'K',\n  value: 10\n}, {\n  rank: 'A',\n  value: 11\n}];\n\nfunction drawCard() {\n  return cards[Math.floor(Math.random() * cards.length)];\n}\n\nfunction calculateHandValue(hand) {\n  let value = 0;\n  let aceCount = 0;\n\n  for (let card of hand) {\n    value += card.value;\n    if (card.rank === 'A') {\n      aceCount += 1;\n    }\n  }\n\n  while (value > 21 && aceCount > 0) {\n    value -= 10;\n    aceCount -= 1;\n  }\n\n  return value;\n}\n\nfunction displayHand(hand) {\n  let ranks = '';\n\n  for (let i = 0; i < hand.length; i++) {\n    ranks += hand[i].rank;\n    if (i < hand.length - 1) {\n      ranks += ', ';\n    }\n  }\n\n  console.log(`Your hand: ${ranks}`);\n}\n\nlet playerHand = [];\nlet playerValue = 0;\n\nwhile (playerValue < 21) {\n  const action = input('Do you want to (h)it or (s)tand? ');\n  if (action === 'h') {\n    playerHand.push(drawCard());\n    playerValue = calculateHandValue(playerHand);\n    displayHand(playerHand);\n    console.log(`Your score: ${playerValue}`);\n  }\n}",
                  "solvedContent": "const input = require(\"@mimo-org/input\");\n\nconst cards = [{\n  rank: '2',\n  value: 2\n}, {\n  rank: '3',\n  value: 3\n}, {\n  rank: '4',\n  value: 4\n}, {\n  rank: '5',\n  value: 5\n}, {\n  rank: '6',\n  value: 6\n}, {\n  rank: '7',\n  value: 7\n}, {\n  rank: '8',\n  value: 8\n}, {\n  rank: '9',\n  value: 9\n}, {\n  rank: '10',\n  value: 10\n}, {\n  rank: 'J',\n  value: 10\n}, {\n  rank: 'Q',\n  value: 10\n}, {\n  rank: 'K',\n  value: 10\n}, {\n  rank: 'A',\n  value: 11\n}];\n\nfunction drawCard() {\n  return cards[Math.floor(Math.random() * cards.length)];\n}\n\nfunction calculateHandValue(hand) {\n  let value = 0;\n  let aceCount = 0;\n\n  for (let card of hand) {\n    value += card.value;\n    if (card.rank === 'A') {\n      aceCount += 1;\n    }\n  }\n\n  while (value > 21 && aceCount > 0) {\n    value -= 10;\n    aceCount -= 1;\n  }\n\n  return value;\n}\n\nfunction displayHand(hand) {\n  let ranks = '';\n\n  for (let i = 0; i < hand.length; i++) {\n    ranks += hand[i].rank;\n    if (i < hand.length - 1) {\n      ranks += ', ';\n    }\n  }\n\n  console.log(`Your hand: ${ranks}`);\n}\n\nlet playerHand = [];\nlet playerValue = 0;\n\nwhile (playerValue < 21) {\n  const action = input('Do you want to (h)it or (s)tand? ');\n  if (action === 'h') {\n    playerHand.push(drawCard());\n    playerValue = calculateHandValue(playerHand);\n    displayHand(playerHand);\n    console.log(`Your score: ${playerValue}`);\n  } else if (action === 's') {\n    break;\n  }\n}"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Lesson #8",
            "id": 132132,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Por último, vamos adicionar mais declarações de print para explicar ao jogador o que está acontecendo.\n\n1. Se o jogador inserir qualquer coisa diferente de 'h' ou 's', imprima uma mensagem de erro pedindo para inserir uma entrada válida.\n2. Após o loop `while`, imprima a pontuação final do jogador com `caculateHandValue` mais uma vez, confirmando que este é o valor final.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "app.js",
                  "codeLanguage": "javascript",
                  "content": "const input = require(\"@mimo-org/input\");\n\nconst cards = [{\n  rank: '2',\n  value: 2\n}, {\n  rank: '3',\n  value: 3\n}, {\n  rank: '4',\n  value: 4\n}, {\n  rank: '5',\n  value: 5\n}, {\n  rank: '6',\n  value: 6\n}, {\n  rank: '7',\n  value: 7\n}, {\n  rank: '8',\n  value: 8\n}, {\n  rank: '9',\n  value: 9\n}, {\n  rank: '10',\n  value: 10\n}, {\n  rank: 'J',\n  value: 10\n}, {\n  rank: 'Q',\n  value: 10\n}, {\n  rank: 'K',\n  value: 10\n}, {\n  rank: 'A',\n  value: 11\n}];\n\nfunction drawCard() {\n  return cards[Math.floor(Math.random() * cards.length)];\n}\n\nfunction calculateHandValue(hand) {\n  let value = 0;\n  let aceCount = 0;\n\n  for (let card of hand) {\n    value += card.value;\n    if (card.rank === 'A') {\n      aceCount += 1;\n    }\n  }\n\n  while (value > 21 && aceCount > 0) {\n    value -= 10;\n    aceCount -= 1;\n  }\n\n  return value;\n}\n\nfunction displayHand(hand) {\n  let ranks = '';\n\n  for (let i = 0; i < hand.length; i++) {\n    ranks += hand[i].rank;\n    if (i < hand.length - 1) {\n      ranks += ', ';\n    }\n  }\n\n  console.log(`Your hand: ${ranks}`);\n}\n\nlet playerHand = [];\nlet playerValue = 0;\n\nwhile (playerValue < 21) {\n  const action = input('Do you want to (h)it or (s)tand? ');\n  if (action === 'h') {\n    playerHand.push(drawCard());\n    playerValue = calculateHandValue(playerHand);\n    displayHand(playerHand);\n    console.log(`Your score: ${playerValue}`);\n  } else if (action === 's') {\n    break;\n  }\n}",
                  "solvedContent": "const input = require(\"@mimo-org/input\");\n\nconst cards = [{\n  rank: '2',\n  value: 2\n}, {\n  rank: '3',\n  value: 3\n}, {\n  rank: '4',\n  value: 4\n}, {\n  rank: '5',\n  value: 5\n}, {\n  rank: '6',\n  value: 6\n}, {\n  rank: '7',\n  value: 7\n}, {\n  rank: '8',\n  value: 8\n}, {\n  rank: '9',\n  value: 9\n}, {\n  rank: '10',\n  value: 10\n}, {\n  rank: 'J',\n  value: 10\n}, {\n  rank: 'Q',\n  value: 10\n}, {\n  rank: 'K',\n  value: 10\n}, {\n  rank: 'A',\n  value: 11\n}];\n\nfunction drawCard() {\n  return cards[Math.floor(Math.random() * cards.length)];\n}\n\nfunction calculateHandValue(hand) {\n  let value = 0;\n  let aceCount = 0;\n\n  for (let card of hand) {\n    value += card.value;\n    if (card.rank === 'A') {\n      aceCount += 1;\n    }\n  }\n\n  while (value > 21 && aceCount > 0) {\n    value -= 10;\n    aceCount -= 1;\n  }\n\n  return value;\n}\n\nfunction displayHand(hand) {\n  let ranks = '';\n\n  for (let i = 0; i < hand.length; i++) {\n    ranks += hand[i].rank;\n    if (i < hand.length - 1) {\n      ranks += ', ';\n    }\n  }\n\n  console.log(`Your hand: ${ranks}`);\n}\n\nlet playerHand = [];\nlet playerValue = 0;\n\nwhile (playerValue < 21) {\n  const action = input('Do you want to (h)it or (s)tand? ');\n  if (action === 'h') {\n    playerHand.push(drawCard());\n    playerValue = calculateHandValue(playerHand);\n    displayHand(playerHand);\n    console.log(`Your score: ${playerValue}`);\n  } else if (action === 's') {\n    break;\n  } else {\n    console.log('Invalid input, please choose \"h\" to hit or \"s\" to stand.');\n  }\n}\n\nconsole.log(`Your final score: ${playerValue}`);"
                }
              ],
              "hints": []
            }
          }
        ]
      }
    ]
  }
}