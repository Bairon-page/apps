{
  "tutorial": {
    "id": 2634,
    "version": 4,
    "type": "challenges",
    "isNew": false,
    "codeLanguage": "javascript",
    "title": "Objetos & ES 6",
    "descriptionContent": "Desafios são exercícios mais difíceis que testarão suas habilidades.",
    "shortDescriptionContent": "",
    "showInTrack": true,
    "iconBanner": null,
    "chapters": [
      {
        "id": 14539,
        "title": "Adicionando propriedades",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "Adding Properties",
            "id": 129199,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Vamos adicionar outra propriedade a um objeto analisado a partir de uma string JSON. Vamos atualizar o objeto adicionando uma propriedade a ele depois de termos criado o objeto.\n\n1. Analise a string JSON `tajMahalJSON` e armazene-a em uma variável, `tajMahal`, para que possamos trabalhar com ela como um objeto JS.\n\n3. Exiba o valor de `takeout` do objeto `tajMahal`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const tajMahalJSON = '{ \"cuisine\": \"Indian\", \"takeout\": false}';\r\n\r\n",
                  "solvedContent": "const tajMahalJSON = '{ \"cuisine\": \"Indian\", \"takeout\": false}';\r\nconst tajMahal = JSON.parse(tajMahalJSON);\r\nconsole.log(tajMahal.takeout);"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 14540,
        "title": "Atualizando propriedades",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "Updating an Object Property",
            "id": 129200,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Vamos atualizar os valores das propriedades existentes de um objeto.\n\n1. Em uma linha separada após o objeto, atualize a propriedade `takeout` de `tajMahal` para `true`. Não edite o valor original dentro do objeto.\n\n2. Exiba o objeto `tajMahal` para confirmar que ele foi atualizado.\n\n3. Para preparar o objeto para ser enviado ao servidor, vamos criar uma nova variável chamada `stringTajMahal` e armazenar a versão em string de `tajMahal`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const tajMahal = {\r\n  cuisine: \"Indian\",\r\n  takeout: false,\r\n  starRating: 4.5\r\n};",
                  "solvedContent": "const tajMahal = {\r\n  cuisine: \"Indian\",\r\n  takeout: false,\r\n  starRating: 4.5\r\n};\r\ntajMahal.takeout = true;\r\nconsole.log(tajMahal);\r\nconst stringTajMahal = JSON.stringify(tajMahal);\r\nconsole.log(stringTajMahal);\r\n"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 14541,
        "title": "Acessando propriedades",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "Use Property Value",
            "id": 129201,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Vamos acessar o valor de uma propriedade do objeto analisado a partir de uma string JSON e usá-lo em um novo cálculo.\n\n1. Analise a string JSON em um objeto JS e armazene-a em uma nova variável, a variável `tajMahal`.\n2. Usando `const`, crie uma nova variável chamada `tenRating`, que é igual ao valor da propriedade `starRating` de `tajMahal` multiplicado por `2`.\n2. Exiba o valor de `tenRating` para verificar o resultado.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const tajMahalJSON = '{ \"cuisine\": \"Indian\", \"takeout\": false, \"starRating\": 4.5}';",
                  "solvedContent": "const tajMahalJSON = '{ \"cuisine\": \"Indian\", \"takeout\": false, \"starRating\": 4.5}';\r\nconst tajMahal = JSON.parse(tajMahalJSON);\r\nconst tenRating = tajMahal.starRating * 2;\r\nconsole.log(tenRating);"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 14542,
        "title": "Mensagem de Boas-Vindas do Hotel",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "Hotel Welcome Message",
            "id": 129202,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Uma rede de hotéis precisa exibir uma mensagem de boas-vindas para os hóspedes em seus novos displays externos. Escreva uma função arrow que retorne uma mensagem de boas-vindas semelhante ao exemplo abaixo. Você pode escolher sua própria mensagem de boas-vindas, desde que seja uma string.\n\nExemplo de Saída:\n```\nHello! Welcome to Terrace Inn & Suites!\n```\n\n1. Declare uma função arrow chamada `checkInMessage` que retorne a mensagem de boas-vindas fornecida. Clique na mensagem de boas-vindas para copiá-la e, em seguida, cole-a como uma string que será retornada pela função arrow.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "index.js",
                  "codeLanguage": "javascript",
                  "content": "console.log(checkInMessage());",
                  "solvedContent": "const checkInMessage = () => \"Hello! Welcome to Terrace Inn & Suites!\";\nconsole.log(checkInMessage());"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 14543,
        "title": "Adição de Mensagem Sazonal",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "Seasonal Message Addition",
            "id": 129203,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "O gerente geral do Terrace Inn & Suites gostaria que a função arrow fosse modificada para incluir uma `generalMessage` e uma `seasonalMessage`.\n\nA mensagem geral permanecerá a mesma: `Hello! Welcome to Terrace Inn & Suites`.\n\nDe acordo com as instruções do gerente geral, a mensagem sazonal será: `Need to cool off? Visit one of our three resort pools!`.\n\nA função arrow deve armazenar essas duas mensagens em variáveis e retornar as strings concatenadas. Não se esqueça de adicionar um espaço entre elas!\n\nExemplo de Saída\n```javascript\nHello! Welcome to Terrace Inn & Suites! Need to cool off? Visit one of our three resort pools!\n```\n\n1. Transforme a função arrow existente em uma função arrow multilinha.\n2. Declare e armazene as mensagens fornecidas em variáveis chamadas `generalMessage` e `seasonalMessage`.\n3. Finalmente, a função arrow deve retornar as duas variáveis concatenadas com um espaço entre elas.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "index.js",
                  "codeLanguage": "javascript",
                  "content": "const challengeGreeting = () => \"Hello! Welcome to Terrace Inn & Suites!\";\r\nconsole.log(challengeGreeting());",
                  "solvedContent": "const challengeGreeting = () => {\n  const generalMessage = \"Hello! Welcome to Terrace Inn & Suites!\";\n  const seasonalMessage =\n    \"Need to cool off? Visit one of our three resort pools!\";\n  return generalMessage + \" \" + seasonalMessage;\n};\nconsole.log(challengeGreeting());"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 14544,
        "title": "Mensagem de Boas-Vindas Personalizada",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "Personalized Welcome Message",
            "id": 129204,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "O gerente geral tem mais uma melhoria. Ele gostaria de personalizar a mensagem para os hóspedes. Modifique a arrow function e o corpo da arrow function para incorporar um parâmetro `name`.\n\nExemplo de Saída\n```javascript\nHello, Sarah! Welcome to Terrace Inn & Suites! Need to cool off? Visit one of our three resort pools!\n```\n\n1. Primeiro, modifique a arrow function para aceitar um parâmetro `name`.\n2. Em seguida, modifique a variável `generalMessage` para incorporar o parâmetro `name` conforme o exemplo acima.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "index.js",
                  "codeLanguage": "javascript",
                  "content": "const challengeGreeting = () => {\r\n  const generalMessage = \"Welcome to Terrace Inn & Suites!\";\r\n  const seasonalMessage =\r\n    \"Need to cool off? Visit one of our three resort pools!\";\r\n  return generalMessage + \" \" + seasonalMessage;\r\n};\r\nconsole.log(challengeGreeting(\"Sarah\"));",
                  "solvedContent": "const challengeGreeting = (name) => {\n  const generalMessage = \"Hello, \" + name +\n    \"! Welcome to Terrace Inn & Suites!\";\n  const seasonalMessage =\n    \"Need to cool off? Visit one of our three resort pools!\";\n  return generalMessage + \" \" + seasonalMessage;\n};\nconsole.log(challengeGreeting(\"Sarah\"));"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 11641,
        "title": "Métodos com parâmetros",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "Methods with parameters",
            "id": 107101,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Dê uma olhada na função `eligible()`. Seu propósito é retornar `true` se `volume` for menor ou igual a um `maxVolume`. Vamos transformar essa função em um método de objeto.\n\n1. Adicione um método ao `parcel` chamado `volume`, que retorna o valor de `length * width * depth` para o objeto.\n\n2. Transforme a função `eligible` em um método com o mesmo nome dentro do objeto `parcel`. O método deve ter apenas um parâmetro `maxVolume` e deve chamar `this.volume()` para obter o volume.\n\n3. `console.log()` o resultado de uma chamada ao método `eligible` do `parcel`, usando um valor de `100` para `maxVolume`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const parcel = {\n  length: 100,\n  width: 80,\n  depth: 30,\n};\n\nfunction eligible(length, width, depth, maxVolume) {\n  volume = length * width * depth;\n  if (this.volume() <= maxVolume) {\n    return true;\n  } else {\n    return false;\n  }\n}\nconsole.log(eligible(parcel.length, parcel.width, parcel.depth, 100));",
                  "solvedContent": "const parcel = {\n  length: 100,\n  width: 80,\n  depth: 30,\n  volume: function() {\n    return this.length * this.width * this.depth;\n  },\n  eligible: function(maxVolume) {\n    if (this.volume() <= maxVolume) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n};\nconsole.log(parcel.eligible(100));"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 11639,
        "title": "Adicionando métodos",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "Add a method and use",
            "id": 107001,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Vamos adicionar um método ao nosso objeto, que realizará um cálculo usando o valor de outra propriedade do objeto. Lembre-se de que podemos nos referir ao próprio objeto usando `this.`.\n\n1. Adicione um método dentro do objeto `tajMahal` (dentro das chaves `{ }`) chamado `tenRating`, que retorna o valor de `starRating * 2` para o objeto dado.\n\n2. Em seguida, abaixo do objeto `tajMahal` (fora das chaves `{ }`), atualize o `starRating` de `tajMahal` para `4.1`.\n\n3. Finalmente, use `console.log()` para o *resultado* de chamar o método `tenRating` para verificar se o resultado é o esperado.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const tajMahal = {\r\n  cuisine: \"Indian\",\r\n  takeout: false,\r\n  starRating: 4.5,\r\n};",
                  "solvedContent": "const tajMahal = {\r\n  cuisine: \"Indian\",\r\n  takeout: false,\r\n  starRating: 4.5,\r\n  tenRating: function() {\r\n    return this.starRating * 2;\r\n  }\r\n};\r\ntajMahal.starRating = 4.1;\r\nconsole.log(tajMahal.tenRating());"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 11640,
        "title": "Mais métodos",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "Adding more complex methods",
            "id": 107002,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Dê uma olhada no objeto `employee`. Vamos adicionar um método a este objeto.\n\n1. Adicione um método chamado `fullName`. O método deve retornar uma string composta pelo primeiro nome, seguido por um espaço (`\" \"`) e o segundo nome (`Amanda Jimenez` no nosso exemplo).\n\n2. Exiba o resultado de chamar o método `fullName()` em `employee`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const employee = {\r\n  firstName: \"Amanda\",\r\n  secondName: \"Jimenez\"\r\n};",
                  "solvedContent": "const employee = {\n  firstName: \"Amanda\",\n  secondName: \"Jimenez\",\n  fullName: function() {\n    return this.firstName + \" \" + this.secondName;\n  }\n};\nconsole.log(employee.fullName());"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 11638,
        "title": "Acessar e usar uma propriedade",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "Access and compare property",
            "id": 107000,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Queremos ver se a `cuisine` do `tajMahal` está em `preferredCuisines`.\n\n1. Usando `const`, crie uma variável chamada `inPreferred`, que verifica se `preferredCuisines` inclui o valor de `cuisine` para `tajMahal`.\n\n   Dica: use o método de array `.includes()` em `preferredCuisines`, que retornará `true` se o valor especificado estiver nele.\n\n2. Exiba `inPreferred` para verificar o resultado.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const tajMahal = {\r\n  cuisine: \"Indian\",\r\n  takeout: false,\r\n  starRating: 4.5\r\n};\r\nconst preferredCuisines = [\"Chinese\", \"Italian\", \"Turkish\"];",
                  "solvedContent": "const tajMahal = {\r\n  cuisine: \"Indian\",\r\n  takeout: false,\r\n  starRating: 4.5\r\n};\r\nconst preferredCuisines = [\"Chinese\", \"Italian\", \"Turkish\"];\r\nconst inPreferred = preferredCuisines.includes(tajMahal.cuisine);\r\nconsole.log(inPreferred);"
                }
              ],
              "hints": []
            }
          }
        ]
      }
    ]
  }
}