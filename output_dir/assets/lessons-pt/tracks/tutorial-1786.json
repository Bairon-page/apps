{
  "tutorial": {
    "id": 1786,
    "version": 9,
    "type": "guidedProjectOptional",
    "isNew": false,
    "codeLanguage": "javascript",
    "title": "Jogo de Aventura",
    "descriptionContent": "Use seu conhecimento sobre sobrescrita de métodos para simular uma interação de personagem em um jogo",
    "shortDescriptionContent": "",
    "showInTrack": true,
    "iconBanner": "tutorial-1786-icon-banner.svg",
    "chapters": [
      {
        "id": 11785,
        "title": "Jogo de Aventura",
        "type": "practiceLevel3",
        "lessons": [
          {
            "title": "Create a class",
            "id": 108520,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Joe está envolvido no desenvolvimento de um jogo de aventura. Ele é responsável pelos personagens humanos e piratas. Vamos ajudá-lo a personalizar os comportamentos dos personagens.\n\nVamos começar criando uma classe para nossos personagens.\n\n1. Crie uma classe `Human` para representar todos os personagens.\n2. Dê a ela um construtor vazio.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "",
                  "solvedContent": "class Human {\n  constructor() {}\n}"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Class Properties",
            "id": 108521,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Vamos adicionar uma propriedade à nossa classe definida para que possamos identificar quem são nossos personagens.\n\n1. Adicione um parâmetro `name` ao seu construtor.\n2. Dê à classe `Human` a propriedade `name` e defina-a com o valor do parâmetro `name`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "class Human {\n  constructor() {}\n}",
                  "solvedContent": "class Human {\n  constructor(name) {\n    this.name = name;\n  }\n}"
                }
              ],
              "hints": [
                {
                  "title": "Hint",
                  "content": "The syntax for adding a property to a class is:\n```JS\nclass className {\n   constructor(property){\n     this.property = property;\n    }\n}\n```"
                }
              ]
            }
          },
          {
            "title": "Class Methods",
            "id": 108522,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Como este é um jogo multiplayer, queremos que os personagens interajam entre si. Vamos criar um método para cuidar disso.\n\n1. Crie um método `say` que receba `stuff` como um parâmetro.\n2. Adicione uma instrução que exiba `stuff`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "class Human {\n  constructor(name) {\n    this.name = name;\n  }\n}",
                  "solvedContent": "class Human {\n  constructor(name) {\n    this.name = name;\n  }\n  say(stuff) {\n    console.log(stuff);\n  }\n}"
                }
              ],
              "hints": [
                {
                  "title": "Hint",
                  "content": "The syntax for adding a method to a class is:\n```JS\nclass className {\n   constructor(){}\n   method(parameter){\n   }\n}"
                }
              ]
            }
          },
          {
            "title": "Display contents",
            "id": 108524,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Para rastrear melhor o diálogo entre os personagens, queremos exibir o nome deles para saber quem falou.\n\n1. Atualize `say` para que exiba o nome do usuário, bem como o que o usuário diz. Por exemplo, para um usuário `\"Joe\"` dizendo `\"hi\"`, devemos ler:\n\n```\nJoe: hi\n```",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "class Human {\n  constructor(name) {\n    this.name = name;\n  }\n  say(stuff) {\n    console.log(stuff);\n  }\n}",
                  "solvedContent": "class Human {\n  constructor(name) {\n    this.name = name;\n  }\n  say(stuff) {\n    console.log(this.name + \": \" + stuff);\n  }\n}"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Pirate",
            "id": 108525,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Em seguida, vamos trabalhar no personagem pirata. Vamos começar criando uma classe para os piratas.\n\n1. Crie uma classe `Pirate` como uma extensão direta da classe `Human`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "class Human {\n  constructor(name) {\n    this.name = name;\n  }\n  say(stuff) {\n    console.log(this.name + \": \" + stuff);\n  }\n}",
                  "solvedContent": "class Human {\n  constructor(name) {\n    this.name = name;\n  }\n  say(stuff) {\n    console.log(this.name + \": \" + stuff);\n  }\n}\nclass Pirate extends Human {}"
                }
              ],
              "hints": [
                {
                  "title": "Hint",
                  "content": "The syntax for creating an extended class is:\n```JS\nclass className extends extendedClass {\n}\n```"
                }
              ]
            }
          },
          {
            "title": "Override",
            "id": 108526,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Em seguida, vamos trabalhar na personalização da nossa classe `Pirate`.\n\n1. Sobrescreva o método `say` na classe `Pirate`.\n2. Use `super` para adicionar a funcionalidade do método `say` da superclasse como parte da sobrescrita.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "class Human {\n  constructor(name) {\n    this.name = name;\n  }\n  say(stuff) {\n    console.log(this.name + \": \" + stuff);\n  }\n}\nclass Pirate extends Human {}",
                  "solvedContent": "class Human {\n  constructor(name) {\n    this.name = name;\n  }\n  say(stuff) {\n    console.log(this.name + \": \" + stuff);\n  }\n}\nclass Pirate extends Human {\n  say(stuff) {\n   super.say(stuff);\n  }\n}"
                }
              ],
              "hints": [
                {
                  "title": "Hint",
                  "content": "To override a method, you should redefine it again in one of its extended class.\n```JS\nclass extendedClass {\n   method(parameter){\n    }\n}\n\nclass className extends extendedClass {\n  method(parameter){\n   }\n}\n```"
                }
              ]
            }
          },
          {
            "title": "Yarr!",
            "id": 108528,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Sempre que um pirata diz algo, ele termina com `\"Yarr!\"`. Vamos atualizar nosso método `say` para refletir essa peculiaridade.\n\n1. Adicione uma linha para exibir a propriedade `name` junto com `\"Yarr!\"`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "class Human {\n  constructor(name) {\n    this.name = name;\n  }\n  say(stuff) {\n    console.log(this.name + \": \" + stuff);\n  }\n}\nclass Pirate extends Human {\n  say(stuff) {\n    super.say(stuff);\n  }\n}",
                  "solvedContent": "class Human {\n  constructor(name) {\n    this.name = name;\n  }\n  say(stuff) {\n    console.log(this.name + \": \" + stuff);\n  }\n}\nclass Pirate extends Human {\n  say(stuff) {\n    super.say(stuff);\n    console.log(this.name + \": Yarr!\");\n  }\n}"
                }
              ],
              "hints": [
                {
                  "title": "Hint",
                  "content": "For a pirate 'John' saying 'I am the captain', we should read :\n\n'John: I am the captain '\n'John: Yarr!'"
                }
              ]
            }
          },
          {
            "title": "Frances",
            "id": 108529,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Vamos criar nosso primeiro personagem.\n\n1. Crie uma variável chamada `human`.\n2. Crie uma instância de `Human` chamada `\"Frances\"` e armazene-a na variável.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "class Human {\n  constructor(name) {\n    this.name = name;\n  }\n  say(stuff) {\n    console.log(this.name + \": \" + stuff);\n  }\n}\nclass Pirate extends Human {\n  say(stuff) {\n    super.say(stuff);\n    console.log(this.name + \": Yarr!\");\n  }\n}",
                  "solvedContent": "class Human {\n  constructor(name) {\n    this.name = name;\n  }\n  say(stuff) {\n    console.log(this.name + \": \" + stuff);\n  }\n}\nclass Pirate extends Human {\n  say(stuff) {\n    super.say(stuff);\n    console.log(this.name + \": Yarr!\");\n  }\n}\nconst human = new Human(\"Frances\");"
                }
              ],
              "hints": [
                {
                  "title": "Hint",
                  "content": "The syntax for adding an instance of a class is:\n```JS\nconst instance = new className();\n```"
                }
              ]
            }
          },
          {
            "title": "Long John",
            "id": 108530,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Agora, vamos criar nosso primeiro pirata.\n\n1. Em seguida, crie uma variável chamada `pirate`.\n2. Crie uma instância de `Pirate` chamada `\"Long John\"` e armazene-a na variável.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "class Human {\n  constructor(name) {\n    this.name = name;\n  }\n  say(stuff) {\n    console.log(this.name + \": \" + stuff);\n  }\n}\nclass Pirate extends Human {\n  say(stuff) {\n    super.say(stuff);\n    console.log(this.name + \": Yarr!\");\n  }\n}\nconst human = new Human(\"Frances\");",
                  "solvedContent": "class Human {\n  constructor(name) {\n    this.name = name;\n  }\n  say(stuff) {\n    console.log(this.name + \": \" + stuff);\n  }\n}\nclass Pirate extends Human {\n  say(stuff) {\n    super.say(stuff);\n    console.log(this.name + \": Yarr!\");\n  }\n}\nconst human = new Human(\"Frances\");\nconst pirate = new Pirate(\"Long John\");"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Frances says",
            "id": 108531,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Agora vamos fazer os personagens se comunicarem entre si.\n\n1. Use um método para fazer Frances dizer `\"G'day, Sir!\"`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "class Human {\n  constructor(name) {\n    this.name = name;\n  }\n  say(stuff) {\n    console.log(this.name + \": \" + stuff);\n  }\n}\nclass Pirate extends Human {\n  say(stuff) {\n    super.say(stuff);\n    console.log(this.name + \": Yarr!\");\n  }\n}\nconst human = new Human(\"Frances\");\nconst pirate = new Pirate(\"Long John\");",
                  "solvedContent": "class Human {\n  constructor(name) {\n    this.name = name;\n  }\n  say(stuff) {\n    console.log(this.name + \": \" + stuff);\n  }\n}\nclass Pirate extends Human {\n  say(stuff) {\n    super.say(stuff);\n    console.log(this.name + \": Yarr!\");\n  }\n}\nconst human = new Human(\"Frances\");\nconst pirate = new Pirate(\"Long John\");\nhuman.say(\"Good day, Sir!\");"
                }
              ],
              "hints": [
                {
                  "title": "Hint",
                  "content": "The syntax for using a method is:\n```JS\n    instance.method(value)\n```"
                }
              ]
            }
          },
          {
            "title": "Long John says",
            "id": 108532,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Vamos responder à saudação de Frances.\n\n1. Use um método para que seu pirata responda `\"Ahoy!\"`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "class Human {\n  constructor(name) {\n    this.name = name;\n  }\n  say(stuff) {\n    console.log(this.name + \": \" + stuff);\n  }\n}\nclass Pirate extends Human {\n  say(stuff) {\n    super.say(stuff);\n    console.log(this.name + \": Yarr!\");\n  }\n}\nconst human = new Human(\"Frances\");\nconst pirate = new Pirate(\"Long John\");\nhuman.say(\"Good day, sir!\");",
                  "solvedContent": "class Human {\n  constructor(name) {\n    this.name = name;\n  }\n  say(stuff) {\n    console.log(this.name + \": \" + stuff);\n  }\n}\nclass Pirate extends Human {\n  say(stuff) {\n    super.say(stuff);\n    console.log(this.name + \": Yarr!\");\n  }\n}\nconst human = new Human(\"Frances\");\nconst pirate = new Pirate(\"Long John\");\nhuman.say(\"Good day, sir!\");\npirate.say(\"Ahoy!\");"
                }
              ],
              "hints": []
            }
          }
        ]
      }
    ]
  }
}