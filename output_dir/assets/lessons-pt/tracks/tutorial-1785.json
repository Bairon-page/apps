{
  "tutorial": {
    "id": 1785,
    "version": 9,
    "type": "guidedProjectOptional",
    "isNew": false,
    "codeLanguage": "javascript",
    "title": "Display de Smartphone",
    "descriptionContent": "Use seu conhecimento de classes e subclasses para adicionar uma função de contato para um jogo",
    "shortDescriptionContent": "",
    "showInTrack": true,
    "iconBanner": "tutorial-1785-icon-banner.svg",
    "chapters": [
      {
        "id": 11784,
        "title": "Display de Smartphone",
        "type": "practiceLevel3",
        "lessons": [
          {
            "title": "Create a class",
            "id": 108505,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Alex está desenvolvendo um jogo de simulação de vida e quer introduzir um recurso de comunicação por telefone. Vamos ajudá-la introduzindo um dispositivo de telefone virtual e um smartphone para que os personagens possam se comunicar à distância.\n\nVamos começar criando uma classe de telefone para o recurso de comunicação por telefone do jogo.\n\n1. Monte uma classe chamada `Phone`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "",
                  "solvedContent": "class Phone {}"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Add method to a class",
            "id": 108506,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Agora vamos criar um método para que possamos fazer chamadas usando nosso `Phone`.\n\n1. Crie um método `call()` na classe `Phone` do exercício anterior.\n2. Dê a ele um parâmetro chamado `user`.\n2. Dentro do método `call()`, adicione uma linha que exiba o `user` para quem estamos ligando. A exibição resultante poderia ser assim para o usuário `Mom`:\n\n```\nCalling: Mom\n```",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "class Phone {}",
                  "solvedContent": "class Phone {\n  call(user) {\n    console.log(\"Calling: \" + user);\n  }\n}"
                }
              ],
              "hints": [
                {
                  "title": "Hint",
                  "content": "1. The syntax for creating a method is:\n\n```JS\nmethodName(parameter) {\n}\n```"
                }
              ]
            }
          },
          {
            "title": "Smartphone",
            "id": 108513,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "A palavra-chave `extends` é usada para criar uma classe que é um filho ou subconjunto direto de outra classe.\n\nSmartphones podem fazer tudo o que os telefones fazem, então você pode pensar em Smartphones como um subconjunto de um telefone.\n\nVamos criar uma classe `Smartphone`.\n\n1. Crie uma classe `Smartphone` que estende `Phone`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "class Phone {\n  call(user) {\n    console.log(\"Calling: \" + user);\n  }\n}",
                  "solvedContent": "class Phone {\n  call(user) {\n    console.log(\"Calling: \" + user);\n  }\n}\nclass Smartphone extends Phone {}"
                }
              ],
              "hints": [
                {
                  "title": "Hint",
                  "content": "1. The syntax for creating an extended class is:\n```JS\nclass className extends extendedClass {\n}\n```"
                }
              ]
            }
          },
          {
            "title": "Video call",
            "id": 108514,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "A classe `Smartphone` herda automaticamente os métodos associados com `Phone`.\n\nNo entanto, você ainda pode criar métodos adicionais em um subconjunto de uma classe, por exemplo, para fazer videochamadas.\n\n1. Crie um método `videoCall` para fazer videochamadas.\n2. Dê a ele o parâmetro `user`.\n2. Adicione uma linha que exiba o nome do usuário com quem o personagem está fazendo videochamada. A exibição resultante poderia ser assim para o usuário `Mom`:\n\n```\nFacetiming: Mom\n```",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "class Phone {\n  call(user) {\n    console.log(\"Calling: \" + user);\n  }\n}\nclass Smartphone extends Phone {}",
                  "solvedContent": "class Phone {\n  call(user) {\n    console.log(\"Calling: \" + user);\n  }\n}\nclass Smartphone extends Phone {\n  videoCall(user) {\n    console.log(\"Facetiming: \" + user);\n  }\n}"
                }
              ],
              "hints": [
                {
                  "title": "Hint",
                  "content": "1. The syntax for creating a method is:\n```JS\nmethodName(parameter) {\n}\n```"
                }
              ]
            }
          },
          {
            "title": "New device",
            "id": 108516,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Brandon é um novo personagem em nosso jogo. Vamos equipá-lo com um smartphone.\n\n1. Crie um novo objeto da classe `Smartphone` e armazene-o em uma variável chamada `device`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "class Phone {\n  call(user) {\n    console.log(\"Calling: \" + user);\n  }\n}\nclass Smartphone extends Phone {\n  videoCall(user) {\n    console.log(\"Facetiming: \" + user);\n  }\n}",
                  "solvedContent": "class Phone {\n  call(user) {\n    console.log(\"Calling: \" + user);\n  }\n}\nclass Smartphone extends Phone {\n  videoCall(user) {\n    console.log(\"Facetiming: \" + user);\n  }\n}\nconst device = new Smartphone();"
                }
              ],
              "hints": [
                {
                  "title": "Hint",
                  "content": "1. The syntax for creating an instance of a class is:\n```JS\nconst variableName = new className();\n```"
                }
              ]
            }
          },
          {
            "title": "Inherited method",
            "id": 108517,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Brandon precisa fazer uma ligação para sua mãe.\n\n1. Use o método que `device` herdou da classe `Phone` para contatar `\"Mom\"`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "class Phone {\n  call(user) {\n    console.log(\"Calling: \" + user);\n  }\n}\nclass Smartphone extends Phone {\n  videoCall(user) {\n    console.log(\"Facetiming: \" + user);\n  }\n}\nconst device = new Smartphone();",
                  "solvedContent": "class Phone {\n  call(user) {\n    console.log(\"Calling: \" + user);\n  }\n}\nclass Smartphone extends Phone {\n  videoCall(user) {\n    console.log(\"Facetiming: \" + user);\n  }\n}\nconst device = new Smartphone();\ndevice.call(\"Mom\");"
                }
              ],
              "hints": [
                {
                  "title": "Hint",
                  "content": "The inherited method is `call()`."
                }
              ]
            }
          },
          {
            "title": "Specific method",
            "id": 108518,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Brandon e sua mãe não se veem há um tempo, então decidem mudar para uma videochamada. No entanto, o telefone da mãe dele está ficando sem bateria, então ela disse a Brandon para fazer a videochamada para o pai dele.\n\n1. Use o método `videoCall()` da variável `device` com o argumento `\"Dad\"`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "class Phone {\n  call(user) {\n    console.log(\"Calling: \" + user);\n  }\n}\nclass Smartphone extends Phone {\n  videoCall(user) {\n    console.log(\"Facetiming: \" + user);\n  }\n}\nconst device = new Smartphone();\ndevice.call(\"Mom\");",
                  "solvedContent": "class Phone {\n  call(user) {\n    console.log(\"Calling: \" + user);\n  }\n}\nclass Smartphone extends Phone {\n  videoCall(user) {\n    console.log(\"Facetiming: \" + user);\n  }\n}\nconst device = new Smartphone();\ndevice.call(\"Mom\");\ndevice.videoCall(\"Dad\");"
                }
              ],
              "hints": []
            }
          }
        ]
      }
    ]
  }
}