{
  "tutorial": {
    "id": 2664,
    "version": 5,
    "type": "guidedProject",
    "isNew": false,
    "codeLanguage": "python",
    "title": "Sistema de Pedido de Comida - Parte 2",
    "descriptionContent": "Expanda seu sistema de pedidos de comida para incluir um mundo de sabores! Nesta parte, adicionamos cozinhas diversas, transformando seu sistema em um destino global de comida.",
    "shortDescriptionContent": "",
    "showInTrack": true,
    "iconBanner": "tutorial-2664-icon-banner.svg",
    "chapters": [
      {
        "id": 14639,
        "title": "Capítulo #1",
        "type": "practiceLevel3",
        "lessons": [
          {
            "title": "Lesson #1",
            "id": 129477,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Bem-vindo de volta ao projeto **Sistema de Pedido de Comida**! Agora vamos fazer com que nossos usuários escolham entre diferentes culinárias. Primeiro, vamos adicionar outro cardápio de comida. Neste exemplo, vamos adicionar um cardápio de comida indiana.\n\n1. Abaixo de `italian_food`, defina `indian_food` como uma lista e preencha-a com strings que representam pratos indianos. Adicione pelo menos 4 elementos de string à lista `indian_food`, como `\"Curry\"`, `\"Chutney\"`, `\"Samosa\"` e `\"Naan\"`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "italian_food = [\n  \"Pasta Bolognese\",\n  \"Pepperoni pizza\",\n  \"Margherita pizza\",\n  \"Lasagna\"\n]\n\ndef find_meal(name, menu):\n  return name if name in menu else None\n\ndef select_meal(name):\n  return find_meal(name, italian_food)\n\ndef display_available_meals():\n  print(\"Available Italian Meals:\")\n  for meal in italian_food:\n    print(meal)\n\ndef create_summary(name, amount):\n  order = select_meal(name)\n  if order:\n    return f\"You ordered {amount} {name}\"\n  else:\n    return \"Meal not found\"\n\nprint(\"Welcome to the Food Order System!\")\ndisplay_available_meals()\nname_input = input(\"Enter the name of the meal you want to order: \")\namount_input = int(input(\"Enter the quantity you want to order: \"))\n\nresult = create_summary(name_input, amount_input)\nprint(result)",
                  "solvedContent": "italian_food = [\n  \"Pasta Bolognese\",\n  \"Pepperoni pizza\",\n  \"Margherita pizza\",\n  \"Lasagna\"\n]\n\nindian_food = [\n  \"Curry\",\n  \"Chutney\",\n  \"Samosa\",\n  \"Naan\"\n]\n\ndef find_meal(name, menu):\n  return name if name in menu else None\n\ndef select_meal(name):\n  return find_meal(name, italian_food)\n\ndef display_available_meals():\n  print(\"Available Italian Meals:\")\n  for meal in italian_food:\n    print(meal)\n\ndef create_summary(name, amount):\n  order = select_meal(name)\n  if order:\n    return f\"You ordered {amount} {name}\"\n  else:\n    return \"Meal not found\"\n\nprint(\"Welcome to the Food Order System!\")\ndisplay_available_meals()\nname_input = input(\"Enter the name of the meal you want to order: \")\namount_input = int(input(\"Enter the quantity you want to order: \"))\n\nresult = create_summary(name_input, amount_input)\nprint(result)"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Lesson #1 - Copy",
            "id": 129482,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Vamos deixar nossos usuários escolherem primeiro a culinária da qual eles querem selecionar uma refeição.\n\n1. Após a mensagem de boas-vindas que você imprime, antes das outras declarações `input`, adicione um novo `input`.\n   - Pergunte pelo tipo de comida que o usuário quer escolher.\n   - Salve a entrada do usuário em uma variável chamada `type_input`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "italian_food = [\n  \"Pasta Bolognese\",\n  \"Pepperoni pizza\",\n  \"Margherita pizza\",\n  \"Lasagna\"\n]\n\nindian_food = [\n  \"Curry\",\n  \"Chutney\",\n  \"Samosa\",\n  \"Naan\"\n]\n\ndef find_meal(name, menu):\n  return name if name in menu else None\n\ndef select_meal(name):\n  return find_meal(name, italian_food)\n\ndef display_available_meals():\n  print(\"Available Italian Meals:\")\n  for meal in italian_food:\n    print(meal)\n\ndef create_summary(name, amount):\n  order = select_meal(name)\n  if order:\n    return f\"You ordered {amount} {name}\"\n  else:\n    return \"Meal not found\"\n\nprint(\"Welcome to the Food Order System!\")\ndisplay_available_meals()\nname_input = input(\"Enter the name of the meal you want to order: \")\namount_input = int(input(\"Enter the quantity you want to order: \"))\n\nresult = create_summary(name_input, amount_input)\nprint(result)",
                  "solvedContent": "italian_food = [\n  \"Pasta Bolognese\",\n  \"Pepperoni pizza\",\n  \"Margherita pizza\",\n  \"Lasagna\"\n]\n\nindian_food = [\n  \"Curry\",\n  \"Chutney\",\n  \"Samosa\",\n  \"Naan\"\n]\n\ndef find_meal(name, menu):\n  return name if name in menu else None\n\ndef select_meal(name):\n  return find_meal(name, italian_food)\n\ndef display_available_meals():\n  print(\"Available Italian Meals:\")\n  for meal in italian_food:\n    print(meal)\n\ndef create_summary(name, amount):\n  order = select_meal(name)\n  if order:\n    return f\"You ordered {amount} {name}\"\n  else:\n    return \"Meal not found\"\n\nprint(\"Welcome to the Food Order System!\")\ntype_input = input(\"Enter the type of food you want to order: \") \ndisplay_available_meals()\nname_input = input(\"Enter the name of the meal you want to order: \")\namount_input = int(input(\"Enter the quantity you want to order: \"))\n\nresult = create_summary(name_input, amount_input)\nprint(result)"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Lesson #1 - Copy - Copy",
            "id": 129483,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Agora temos diferentes culinárias, então devemos exibir apenas a selecionada. Para fazer isso, altere a função `display_available_meals`.\n\n1. Passe um parâmetro chamado `food_type` para a função.\n2. Use uma declaração `if` para comparar se o argumento passado é igual a `\"Italian\"`.\n3. Adicione uma declaração `elif` para verificar se o argumento passado é igual a `\"Indian\"`.\n4. Adicione uma declaração `else`.\n5. Mova o código que você tinha antes para dentro do bloco `if` para exibir `\"Available Italian Meals\"` e, em seguida, percorra a lista para imprimir todas as refeições individuais.\n6. Faça o mesmo para o bloco elif, mas para comidas indianas.\n7. No bloco `else`, imprima `\"Invalid food type\"`.\n8. Finalmente, passe a entrada do usuário que salvamos em `type_input` quando chamar a função `display_available_meals`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "italian_food = [\n  \"Pasta Bolognese\",\n  \"Pepperoni pizza\",\n  \"Margherita pizza\",\n  \"Lasagna\"\n]\n\nindian_food = [\n  \"Curry\",\n  \"Chutney\",\n  \"Samosa\",\n  \"Naan\"\n]\n\ndef find_meal(name, menu):\n  return name if name in menu else None\n\ndef select_meal(name):\n  return find_meal(name, italian_food)\n\ndef display_available_meals():\n  print(\"Available Italian Meals:\")\n  for meal in italian_food:\n    print(meal)\n\ndef create_summary(name, amount):\n  order = select_meal(name)\n  if order:\n    return f\"You ordered {amount} {name}\"\n  else:\n    return \"Meal not found\"\n\nprint(\"Welcome to the Food Order System!\")\ntype_input = input(\"Enter the type of food you want to order: \") \ndisplay_available_meals()\nname_input = input(\"Enter the name of the meal you want to order: \")\namount_input = int(input(\"Enter the quantity you want to order: \"))\n\nresult = create_summary(name_input, amount_input)\nprint(result)",
                  "solvedContent": "italian_food = [\n  \"Pasta Bolognese\",\n  \"Pepperoni pizza\",\n  \"Margherita pizza\",\n  \"Lasagna\"\n]\n\nindian_food = [\n  \"Curry\",\n  \"Chutney\",\n  \"Samosa\",\n  \"Naan\"\n]\n\ndef find_meal(name, menu):\n  return name if name in menu else None\n\ndef select_meal(name):\n  return find_meal(name, italian_food)\n\ndef display_available_meals(food_type):\n  if food_type == \"Italian\":\n    print(\"Available Italian Meals:\")\n    for meal in italian_food:\n      print(meal)\n  elif food_type == \"Indian\":\n    print(\"Available Indian Meals:\")\n    for meal in indian_food:\n      print(meal)\n  else:\n    print(\"Invalid food type\")\n\ndef create_summary(name, amount):\n  order = select_meal(name)\n  if order:\n    return f\"You ordered {amount} {name}\"\n  else:\n    return \"Meal not found\"\n\nprint(\"Welcome to the Food Order System!\")\ntype_input = input(\"Enter the type of food you want to order: \") \ndisplay_available_meals(type_input)\nname_input = input(\"Enter the name of the meal you want to order: \")\namount_input = int(input(\"Enter the quantity you want to order: \"))\n\nresult = create_summary(name_input, amount_input)\nprint(result)"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Lesson #2",
            "id": 129478,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Finalmente, precisamos atualizar nossa função `select_meal` para permitir que os usuários escolham um prato de sua preferência.\n\n1. Adicione um segundo parâmetro chamado `food_type` à função.\n2. Similar ao que fizemos antes, adicione um bloco `if`, um bloco `elif` e um bloco `else`.\n3. A condição do bloco `if` deve verificar se a variável passada `food_type` é igual a `\"Italian\"`.\n4. A condição do bloco `elif` deve verificar se a variável passada `food_type` é igual a `\"Indian\"`.\n5. Mova o código já existente no bloco `if` para obter e retornar a comida italiana via `return find_meal(name, italian_food)`.\n6. Faça o mesmo para o bloco `elif`, mas para comida indiana.\n7. Retorne `None` no bloco `else`.\n8. Precisamos adicionar outro parâmetro a `create_summary` que podemos chamar de `food_type`.\n9. Ao chamar `create_summary`, passe a variável `type_input` como `food_type`.\n10. Ao chamar `select_meal` dentro de `create_summary`, passe o parâmetro recebido adiante.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "italian_food = [\n  \"Pasta Bolognese\",\n  \"Pepperoni pizza\",\n  \"Margherita pizza\",\n  \"Lasagna\"\n]\n\nindian_food = [\n  \"Curry\",\n  \"Chutney\",\n  \"Samosa\",\n  \"Naan\"\n]\n\ndef find_meal(name, menu):\n  return name if name in menu else None\n\ndef select_meal(name):\n  return find_meal(name, italian_food)\n\ndef display_available_meals(food_type):\n  if food_type == \"Italian\":\n    print(\"Available Italian Meals:\")\n    for meal in italian_food:\n      print(meal)\n  elif food_type == \"Indian\":\n    print(\"Available Indian Meals:\")\n    for meal in indian_food:\n      print(meal)\n  else:\n    print(\"Invalid food type\")\n\ndef create_summary(name, amount):\n  order = select_meal(name)\n  if order:\n    return f\"You ordered {amount} {name}\"\n  else:\n    return \"Meal not found\"\n\nprint(\"Welcome to the Food Order System!\")\ntype_input = input(\"Enter the type of food you want to order: \") \ndisplay_available_meals(type_input)\nname_input = input(\"Enter the name of the meal you want to order: \")\namount_input = int(input(\"Enter the quantity you want to order: \"))\n\nresult = create_summary(name_input, amount_input)\nprint(result)",
                  "solvedContent": "italian_food = [\n  \"Pasta Bolognese\",\n  \"Pepperoni pizza\",\n  \"Margherita pizza\",\n  \"Lasagna\"\n]\n\nindian_food = [\n  \"Curry\",\n  \"Chutney\",\n  \"Samosa\",\n  \"Naan\"\n]\n\ndef find_meal(name, menu):\n  return name if name in menu else None\n\ndef select_meal(name, food_type):\n  if food_type == \"Italian\":\n    return find_meal(name, italian_food)\n  elif food_type == \"Indian\":\n    return find_meal(name, indian_food)\n  else:\n    return None \n\n\ndef display_available_meals(food_type):\n  if food_type == \"Italian\":\n    print(\"Available Italian Meals:\")\n    for meal in italian_food:\n      print(meal)\n  elif food_type == \"Indian\":\n    print(\"Available Indian Meals:\")\n    for meal in indian_food:\n      print(meal)\n  else:\n    print(\"Invalid food type\")\n\ndef create_summary(name, amount, food_type):\n  order = select_meal(name, food_type)\n  if order:\n    return f\"You ordered {amount} {name}\"\n  else:\n    return \"Meal not found\"\n\nprint(\"Welcome to the Food Order System!\")\ntype_input = input(\"Enter the type of food you want to order: \") \ndisplay_available_meals(type_input)\nname_input = input(\"Enter the name of the meal you want to order: \")\namount_input = int(input(\"Enter the quantity you want to order: \"))\n\nresult = create_summary(name_input, amount_input, type_input)\nprint(result)"
                }
              ],
              "hints": []
            }
          }
        ]
      }
    ]
  }
}