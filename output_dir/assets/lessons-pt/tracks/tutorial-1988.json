{
  "tutorial": {
    "id": 1988,
    "version": 9,
    "type": "guidedProjectOptional",
    "isNew": false,
    "codeLanguage": "javascript",
    "title": "App de Personalização de Mesa",
    "descriptionContent": "Use seu conhecimento sobre classes JavaScript para construir um serviço simples de pedido e personalização de mesas",
    "shortDescriptionContent": "",
    "showInTrack": true,
    "iconBanner": "tutorial-1988-icon-banner.svg",
    "chapters": [
      {
        "id": 12698,
        "title": "Loja de Mesas para Casa",
        "type": "practiceLevel3",
        "lessons": [
          {
            "title": "Creating the Class",
            "id": 116162,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Vamos aprender como podemos usar classes em JS nesta lição. Vamos criar uma pequena aplicação para uma empresa que constrói e entrega mesas personalizadas.\n\nVamos começar criando uma classe JS.\n\n1. Crie uma classe vazia `Desk`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "",
                  "solvedContent": "class Desk {}"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Setting up The Desk Class",
            "id": 116163,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Ótimo. Agora, precisamos configurar nossa classe. Vamos adicionar algumas propriedades e definir seus valores iniciais.\n\n1. Crie uma função `constructor` e adicione as propriedades `width`, `height` e `color` à classe `Desk`.\n2. Defina o valor inicial de cada propriedade para ser ela mesma. Por exemplo, `this.width = width`.\n3. Crie uma propriedade extra `price` e defina seu valor inicial como `0`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "class Desk {}",
                  "solvedContent": "class Desk {\n  constructor(width, height, color) {\n    this.price = 0;\n    this.width = width;\n    this.height = height;\n    this.color = color;\n  }\n}"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Calculating the Price",
            "id": 116164,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Agora, precisamos implementar uma forma de calcular o preço da mesa. Abaixo, fornecemos um possível método de precificação. Desta forma, estamos definindo o preço com base na altura e na largura da mesa.\n\n1. Dentro da classe `Desk`, crie um método `calculatePrice`.\n2. Copie e cole o seguinte código dentro do método.\n```\n    this.price = (this.width / 100 + this.height / 100) * 100;\n    console.log(this.price);\n```",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "class Desk {\n  constructor(width, height, color) {\n    this.price = 0;\n    this.width = width;\n    this.height = height;\n    this.color = color;\n  }\n}",
                  "solvedContent": "class Desk {\n  constructor(width, height, color) {\n    this.price = 0;\n    this.width = width;\n    this.height = height;\n    this.color = color;\n  }\n  calculatePrice() {\n    this.price = (this.width / 100 + this.height / 100) * 100;\n    console.log(this.price);\n  }\n}"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Creating Custom Desks",
            "id": 116165,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Agora temos uma classe básica com a qual podemos criar instâncias. Mas e se o usuário quiser mais opções personalizadas adicionadas à sua mesa, como ajuste de altura elétrico, gavetas, etc? Vamos estender a classe atual para permitir essas opções.\n\n1. Crie uma classe vazia chamada `CustomDesk`. Certifique-se de que ela seja uma subclasse da classe original `Desk`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "class Desk {\n  constructor(width, height, color) {\n    this.price = 0;\n    this.width = width;\n    this.height = height;\n    this.color = color;\n  }\n  calculatePrice() {\n    this.price = (this.width / 100 + this.height / 100) * 100;\n    console.log(this.price);\n  }\n}",
                  "solvedContent": "class Desk {\n  constructor(width, height, color) {\n    this.price = 0;\n    this.width = width;\n    this.height = height;\n    this.color = color;\n  }\n  calculatePrice() {\n    this.price = (this.width / 100 + this.height / 100) * 100;\n    console.log(this.price);\n  }\n}\nclass CustomDesk extends Desk {}"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Adding Custom Desk Properties",
            "id": 116166,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Porque `CustomDesk` é uma subclasse, ela precisará ter as mesmas propriedades da classe `Desk`, além de quaisquer outras adicionais que adicionarmos.\n\n1. Crie um método `constructor()` vazio. Adicione os parâmetros corretos ao construtor conforme você segue as outras instruções.\n2. Garanta que as propriedades originais da classe `Desk` estejam presentes e configuradas corretamente. Verifique as dicas para uma revisão.\n3. Crie propriedades únicas `drawerUnitsAmount`, `hasCableManagement` e `adjustingMechanism`.\n4. Defina o valor inicial de cada nova propriedade única para ser ela mesma.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "class Desk {\n  constructor(width, height, color) {\n    this.price = 0;\n    this.width = width;\n    this.height = height;\n    this.color = color;\n  }\n  calculatePrice() {\n    this.price = (this.width / 100 + this.height / 100) * 100;\n    console.log(this.price);\n  }\n}\nclass CustomDesk extends Desk {}",
                  "solvedContent": "class Desk {\n  constructor(width, height, color) {\n    this.price = 0;\n    this.width = width;\n    this.height = height;\n    this.color = color;\n  }\n  calculatePrice() {\n    this.price = (this.width / 100 + this.height / 100) * 100;\n    console.log(this.price);\n  }\n}\nclass CustomDesk extends Desk {\n  constructor(width, height, color, drawerUnitsAmount, hasCableManagement,\n    adjustingMechanism) {\n    super(width, height, color);\n    this.drawerUnitsAmount = drawerUnitsAmount;\n    this.hasCableManagement = hasCableManagement;\n    this.adjustingMechanism = adjustingMechanism;\n  }\n}"
                }
              ],
              "hints": [
                {
                  "title": "Hint",
                  "content": "Use the `super()` method to refer to the original properties correctly."
                }
              ]
            }
          },
          {
            "title": "Calculating the Custom Desk Price",
            "id": 116168,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Em seguida, queremos calcular o preço da mesa personalizada, com base nas preferências do usuário e nos acréscimos selecionados. Criamos a lógica para calcular o preço da mesa personalizada para você. Você só precisará criar o método de cálculo, adicionar as variáveis corretas e copiar e colar o código abaixo dentro dele.\n\n1. Crie um método personalizado `calculatePrice` na classe `CustomDesk`.\n2. Crie uma variável local `cableManagementPrice` e defina seu valor como `20`.\n3. Crie uma variável local `electricAdjustingPrice` e defina seu valor como `125`.\n4. Crie uma variável local `manualAdjustingPrice` e defina seu valor como `25`.\n5. Crie uma variável local `drawerUnitPrice` e defina seu valor como `30`.\n6. Crie uma variável local `initialCost` e defina seu valor como `(this.width / 100 + this.height / 100) * 100`.\n7. Copie e cole o código abaixo dentro do método `calculatePrice()`, abaixo das variáveis.\n\n```\n    // lógica para calcular o preço com base nas configurações e escolhas do usuário\n    if (this.adjustingMechanism === 'electric') {\n      if (this.hasCableManagement) {\n        this.price = initialCost + cableManagementPrice +\n            electricAdjustingPrice + drawerUnitPrice * this.drawerUnitsAmount\n            ;\n      } else {\n        this.price = initialCost + electricAdjustingPrice + drawerUnitPrice *\n          this.drawerUnitsAmount;\n      }\n    } else if (this.adjustingMechanism === 'manual') {\n      if (this.hasCableManagement) {\n        this.price = initialCost + cableManagementPrice +\n            manualAdjustingPrice + drawerUnitPrice * this.drawerUnitsAmount;\n      } else {\n        this.price = initialCost + manualAdjustingPrice + drawerUnitPrice *\n          this.drawerUnitsAmount;\n      }\n    }\n    console.log(this.price);\n\n```",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "class Desk {\n  constructor(width, height, color) {\n    this.price = 0;\n    this.width = width;\n    this.height = height;\n    this.color = color;\n  }\n  calculatePrice() {\n    this.price = (this.width / 100 + this.height / 100) * 100;\n    console.log(this.price);\n  }\n}\nclass CustomDesk extends Desk {\n  constructor(width, height, color, drawerUnitsAmount, hasCableManagement,\n    adjustingMechanism) {\n    super(width, height, color);\n    this.drawerUnitsAmount = drawerUnitsAmount;\n    this.hasCableManagement = hasCableManagement;\n    this.adjustingMechanism = adjustingMechanism;\n  }\n}",
                  "solvedContent": "class Desk {\n  constructor(width, height, color) {\n    this.price = 0;\n    this.width = width;\n    this.height = height;\n    this.color = color;\n  }\n  calculatePrice() {\n    this.price = (this.width / 100 + this.height / 100) * 100;\n    console.log(this.price);\n  }\n}\nclass CustomDesk extends Desk {\n  constructor(width, height, color, drawerUnitsAmount, hasCableManagement,\n    adjustingMechanism) {\n    super(width, height, color);\n    this.drawerUnitsAmount = drawerUnitsAmount;\n    this.hasCableManagement = hasCableManagement;\n    this.adjustingMechanism = adjustingMechanism;\n  }\n  calculatePrice() {\n    let cableManagementPrice = 20;\n    let electricAdjustingPrice = 125;\n    let manualAdjustingPrice = 25;\n    let drawerUnitPrice = 30;\n    let initialCost = (this.width / 100 + this.height / 100) * 100;\n    if (this.adjustingMechanism === 'electric') {\n      if (this.hasCableManagement) {\n        this.price = initialCost + cableManagementPrice +\n          electricAdjustingPrice + drawerUnitPrice * this.drawerUnitsAmount;\n      } else {\n        this.price = initialCost + electricAdjustingPrice + drawerUnitPrice *\n          this.drawerUnitsAmount;\n      }\n    } else if (this.adjustingMechanism === 'manual') {\n      if (this.hasCableManagement) {\n        this.price = initialCost + cableManagementPrice +\n          manualAdjustingPrice + drawerUnitPrice * this.drawerUnitsAmount;\n      } else {\n        this.price = initialCost + manualAdjustingPrice + drawerUnitPrice *\n          this.drawerUnitsAmount;\n      }\n    }\n    console.log(this.price);\n  }\n}"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Creating Instances",
            "id": 116169,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Incrível! Tudo deve estar configurado corretamente agora. Vamos ver nosso código em ação. Para isso, vamos criar algumas instâncias!\n\n1. Crie uma instância da classe `Desk` e chame-a de `basicDesk`. Dê a ela uma `width` de `200`, uma `height` de `80` e uma cor `white`.\n2. Crie uma instância do `CustomDesk` e chame-a de `awesomeDesk`. Dê a ela uma `width` de `200`, uma `height` de `110` e uma cor `blue`. Certifique-se de que ela tenha `1` unidade de gaveta, uma unidade de gerenciamento de cabos e um mecanismo de ajuste \"electric\".\n3. Calcule o preço da mesa básica e observe o que é impresso no console.\n4. Calcule o preço da mesa incrível e observe o que é impresso no console.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "class Desk {\n  constructor(width, height, color) {\n    this.price = 0;\n    this.width = width;\n    this.height = height;\n    this.color = color;\n  }\n  calculatePrice() {\n    this.price = (this.width / 100 + this.height / 100) * 100;\n    console.log(this.price);\n  }\n}\nclass CustomDesk extends Desk {\n  constructor(width, height, color, drawerUnitsAmount, hasCableManagement,\n    adjustingMechanism) {\n    super(width, height, color);\n    this.drawerUnitsAmount = drawerUnitsAmount;\n    this.hasCableManagement = hasCableManagement;\n    this.adjustingMechanism = adjustingMechanism;\n  }\n  calculatePrice() {\n    let cableManagementPrice = 20;\n    let electricAdjustingPrice = 125;\n    let manualAdjustingPrice = 25;\n    let drawerUnitPrice = 30;\n    let initialCost = (this.width / 100 + this.height / 100) * 100;\n    if (this.adjustingMechanism === 'electric') {\n      if (this.hasCableManagement) {\n        this.price = initialCost + cableManagementPrice +\n          electricAdjustingPrice + drawerUnitPrice * this.drawerUnitsAmount;\n      } else {\n        this.price = initialCost + electricAdjustingPrice + drawerUnitPrice *\n          this.drawerUnitsAmount;\n      }\n    } else if (this.adjustingMechanism === 'manual') {\n      if (this.hasCableManagement) {\n        this.price = initialCost + cableManagementPrice +\n          manualAdjustingPrice + drawerUnitPrice * this.drawerUnitsAmount;\n      } else {\n        this.price = initialCost + manualAdjustingPrice + drawerUnitPrice *\n          this.drawerUnitsAmount;\n      }\n    }\n    console.log(this.price);\n  }\n}",
                  "solvedContent": "class Desk {\n  constructor(width, height, color) {\n    this.price = 0;\n    this.width = width;\n    this.height = height;\n    this.color = color;\n  }\n  calculatePrice() {\n    this.price = (this.width / 100 + this.height / 100) * 100;\n    console.log(this.price);\n  }\n}\nclass CustomDesk extends Desk {\n  constructor(width, height, color, drawerUnitsAmount, hasCableManagement,\n    adjustingMechanism) {\n    super(width, height, color);\n    this.drawerUnitsAmount = drawerUnitsAmount;\n    this.hasCableManagement = hasCableManagement;\n    this.adjustingMechanism = adjustingMechanism;\n  }\n  calculatePrice() {\n    let cableManagementPrice = 20;\n    let electricAdjustingPrice = 125;\n    let manualAdjustingPrice = 25;\n    let drawerUnitPrice = 30;\n    let initialCost = (this.width / 100 + this.height / 100) * 100;\n    if (this.adjustingMechanism === 'electric') {\n      if (this.hasCableManagement) {\n        this.price = initialCost + cableManagementPrice +\n          electricAdjustingPrice + drawerUnitPrice * this.drawerUnitsAmount;\n      } else {\n        this.price = initialCost + electricAdjustingPrice + drawerUnitPrice *\n          this.drawerUnitsAmount;\n      }\n    } else if (this.adjustingMechanism === 'manual') {\n      if (this.hasCableManagement) {\n        this.price = initialCost + cableManagementPrice +\n          manualAdjustingPrice + drawerUnitPrice * this.drawerUnitsAmount;\n      } else {\n        this.price = initialCost + manualAdjustingPrice + drawerUnitPrice *\n          this.drawerUnitsAmount;\n      }\n    }\n    console.log(this.price);\n  }\n}\nconst basicDesk = new Desk(200, 80, 'white');\nconst awesomeDesk = new CustomDesk(200, 110, 'blue', 1, true, 'electric');\nbasicDesk.calculatePrice();\nawesomeDesk.calculatePrice();"
                }
              ],
              "hints": [
                {
                  "title": "Hint",
                  "content": "If you observe the logic we use to calculate the custom desk price, you see that the `hasCableManagement` is a boolean (either `true` or `false`). Take that into account when creating the `awesomeDesk` instance.\n\nFor the `adjustingMechanism`, the user input is either `manual` or `electric`.\n\n\n"
                }
              ]
            }
          }
        ]
      }
    ]
  }
}