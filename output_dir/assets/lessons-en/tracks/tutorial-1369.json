{
  "tutorial": {
    "id": 1369,
    "version": 8,
    "type": "course",
    "isNew": false,
    "codeLanguage": "python",
    "title": "Functions as Expressions",
    "descriptionContent": "funct expres",
    "shortDescriptionContent": "",
    "showInTrack": true,
    "iconBanner": null,
    "chapters": [
      {
        "id": 9988,
        "title": "Function as Expressions",
        "type": "practiceLevel1",
        "lessons": [
          {
            "title": "Function",
            "id": 89381,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>We can use a list comprehension to create a new list by applying a function like <code>halve()</code> to each element of an existing list like <code>prices</code>.</p><code version=\"2\" codelang=\"python\" name=\"script.py\" visible-if=\"always\"><content><text value=\"prices = [\" /><text value=\"10\" class=\"number\" /><text value=\", \" /><text value=\"22\" class=\"number\" /><text value=\", \" /><text value=\"30\" class=\"number\" /><text value=\", \" /><text value=\"40\" class=\"number\" /><text value=\", \" /><text value=\"58\" class=\"number\" /><text value=\", \" /><text value=\"62\" class=\"number\" /><text value=\"]\" /><text type=\"break\" /><text type=\"break\" /><text value=\"def\" class=\"keyword\" /><text value=\" \" /><text value=\"halve\" class=\"title\" /><text value=\"(num)\" class=\"params\" /><text value=\":\" /><text type=\"break\" /><text value=\"  \" /><text value=\"return\" class=\"keyword\" /><text value=\" num/\" /><text value=\"2\" class=\"number\" /></content></code></body></html>"
          },
          {
            "title": "Function 2",
            "id": 89382,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>The function we'll be using, <code>halve()</code>, takes a number <code>num</code> as an argument and returns its half with <code>num/2</code>.</p><code version=\"2\" codelang=\"python\" name=\"script.py\" visible-if=\"always\"><content><text value=\"prices = [\" /><text value=\"10\" class=\"number\" /><text value=\", \" /><text value=\"22\" class=\"number\" /><text value=\", \" /><text value=\"30\" class=\"number\" /><text value=\", \" /><text value=\"40\" class=\"number\" /><text value=\", \" /><text value=\"58\" class=\"number\" /><text value=\", \" /><text value=\"62\" class=\"number\" /><text value=\"]\" /><text type=\"break\" /><text type=\"break\" /><text value=\"def\" class=\"keyword\" /><text value=\" \" /><text value=\"halve\" class=\"title\" /><text value=\"(num)\" class=\"params\" /><text value=\":\" /><text type=\"break\" /><text value=\" \" /><text value=\"return\" class=\"keyword\" /><text value=\" num/\" /><text value=\"2\" class=\"number\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"45\" endIndex=\"48\" /><option startIndex=\"59\" endIndex=\"64\" /></options></interaction></interactions></code><p visible-if=\"wrong\">Make sure to pick <code>num</code>, followed by <code>num/2</code>.</p></body></html>"
          },
          {
            "title": "Loop",
            "id": 89383,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Like before, we start by iterating through each <code>price</code> in the original <code>prices</code> list with a <code>for</code> loop.</p><code version=\"2\" codelang=\"python\" name=\"script.py\" visible-if=\"always\"><content><text value=\"prices = [\" /><text value=\"10\" class=\"number\" /><text value=\", \" /><text value=\"22\" class=\"number\" /><text value=\", \" /><text value=\"30\" class=\"number\" /><text value=\", \" /><text value=\"40\" class=\"number\" /><text value=\", \" /><text value=\"58\" class=\"number\" /><text value=\", \" /><text value=\"62\" class=\"number\" /><text value=\"]\" /><text type=\"break\" /><text type=\"break\" /><text value=\"def\" class=\"keyword\" /><text value=\" \" /><text value=\"halve\" class=\"title\" /><text value=\"(num)\" class=\"params\" /><text value=\":\" /><text type=\"break\" /><text value=\"  \" /><text value=\"return\" class=\"keyword\" /><text value=\" num/\" /><text value=\"2\" class=\"number\" /><text type=\"break\" /><text type=\"break\" /><text value=\"halved = [halve(price) \" /><text value=\"for\" class=\"keyword\" /><text value=\" price \" /><text value=\"in\" class=\"keyword\" /><text value=\" prices]\" /><text type=\"break\" /><text value=\"print(halved)\" /><text type=\"break\" /></content><interactions><interaction type=\"validatedInput\" isDefault=\"true\" startIndex=\"90\" endIndex=\"109\" /></interactions><output><content><text value=\"[5.0, 11.0, 15.0, 20.0, 29.0, 31.0]\" /></content></output></code><p visible-if=\"wrong\">Make sure to type <code>for price in prices</code>.</p></body></html>"
          },
          {
            "title": "Function as an expression",
            "id": 89384,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>We can pick the operations we want to apply to each <code>price</code> value in a function like <code>halve()</code>, and use it as an expression.</p><code version=\"2\" codelang=\"python\" name=\"script.py\" visible-if=\"always\"><content><text value=\"prices = [\" /><text value=\"10\" class=\"number\" /><text value=\", \" /><text value=\"22\" class=\"number\" /><text value=\", \" /><text value=\"30\" class=\"number\" /><text value=\", \" /><text value=\"40\" class=\"number\" /><text value=\", \" /><text value=\"58\" class=\"number\" /><text value=\", \" /><text value=\"62\" class=\"number\" /><text value=\"]\" /><text type=\"break\" /><text type=\"break\" /><text value=\"def\" class=\"keyword\" /><text value=\" \" /><text value=\"halve\" class=\"title\" /><text value=\"(num)\" class=\"params\" /><text value=\":\" /><text type=\"break\" /><text value=\"  \" /><text value=\"return\" class=\"keyword\" /><text value=\" num/\" /><text value=\"2\" class=\"number\" /><text type=\"break\" /><text type=\"break\" /><text value=\"halved = [halve(price) \" /><text value=\"for\" class=\"keyword\" /><text value=\" price \" /><text value=\"in\" class=\"keyword\" /><text value=\" prices]\" /><text type=\"break\" /><text type=\"break\" /><text value=\"print(halved)\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"77\" endIndex=\"82\" /><option startIndex=\"82\" endIndex=\"83\" /><option startIndex=\"83\" endIndex=\"88\" /><option startIndex=\"88\" endIndex=\"89\" /></options></interaction></interactions><output><content><text value=\"[5.0, 11.0, 15.0, 20.0, 29.0, 31.0]\" /></content></output></code><p visible-if=\"wrong\">Make sure to pick <code>halve</code> followed by <code>(</code> and then <code>price</code>, <code>)</code>.</p></body></html>"
          },
          {
            "title": "Multiple expressions",
            "id": 89670,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Functions are useful when we want to apply more expressions, like removing the tax before halving the price.</p><code version=\"2\" codelang=\"python\" name=\"script.py\" visible-if=\"always\"><content><text value=\"prices = [\" /><text value=\"10\" class=\"number\" /><text value=\", \" /><text value=\"22\" class=\"number\" /><text value=\", \" /><text value=\"30\" class=\"number\" /><text value=\", \" /><text value=\"40\" class=\"number\" /><text value=\", \" /><text value=\"58\" class=\"number\" /><text value=\", \" /><text value=\"60\" class=\"number\" /><text value=\"]\" /><text type=\"break\" /><text type=\"break\" /><text value=\"def\" class=\"keyword\" /><text value=\" \" /><text value=\"halve\" class=\"title\" /><text value=\"(num)\" class=\"params\" /><text value=\":\" /><text type=\"break\" /><text value=\"  no_tax = \" /><text value=\"0.85\" class=\"number\" /><text value=\" * num\" /><text type=\"break\" /><text value=\"  \" /><text value=\"return\" class=\"keyword\" /><text value=\" no_tax/\" /><text value=\"2\" class=\"number\" /><text type=\"break\" /><text type=\"break\" /><text value=\"halved = [halve(price) \" /><text value=\"for\" class=\"keyword\" /><text value=\" price \" /><text value=\"in\" class=\"keyword\" /><text value=\" prices]\" /><text type=\"break\" /><text type=\"break\" /><text value=\"print(halved)\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"53\" endIndex=\"72\" /><option startIndex=\"82\" endIndex=\"90\" /></options></interaction></interactions><output><content><text value=\"[4.25, 9.35, 12.75, 17.0, 24.65, 25.5]\" /></content></output></code><p visible-if=\"wrong\">Make sure to pick <code>no_tax = 0.85 * num</code>, followed by <code>no_tax/2</code>.</p></body></html>"
          },
          {
            "title": "Return statement",
            "id": 89671,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>We can only use functions that have a <code>return</code> statement since we're actually appending the returned value to the new list.</p><code version=\"2\" codelang=\"python\" name=\"script.py\" visible-if=\"always\"><content><text value=\"prices = [\" /><text value=\"10\" class=\"number\" /><text value=\", \" /><text value=\"22\" class=\"number\" /><text value=\", \" /><text value=\"30\" class=\"number\" /><text value=\", \" /><text value=\"40\" class=\"number\" /><text value=\", \" /><text value=\"58\" class=\"number\" /><text value=\", \" /><text value=\"62\" class=\"number\" /><text value=\"]\" /><text type=\"break\" /><text type=\"break\" /><text value=\"def\" class=\"keyword\" /><text value=\" \" /><text value=\"halve\" class=\"title\" /><text value=\"(num)\" class=\"params\" /><text value=\":\" /><text type=\"break\" /><text value=\"  \" /><text value=\"return\" class=\"keyword\" /><text value=\" num/\" /><text value=\"2\" class=\"number\" /><text type=\"break\" /><text type=\"break\" /><text value=\"halved = [halve(price) \" /><text value=\"for\" class=\"keyword\" /><text value=\" price \" /><text value=\"in\" class=\"keyword\" /><text value=\" prices]\" /><text type=\"break\" /><text type=\"break\" /><text value=\"print(halved)\" /></content><interactions><interaction type=\"validatedInput\" isDefault=\"true\" startIndex=\"53\" endIndex=\"59\" /></interactions><output><content><text value=\"[5.0, 11.0, 15.0, 20.0, 29.0, 31.0]\" /></content></output></code><p visible-if=\"wrong\">Make sure to type <code>return</code>.</p></body></html>"
          },
          {
            "title": "Question: Function as an expression",
            "id": 89665,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>How do we use a function call as an expression?</p><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\">We call the function with the loop variable as an argument, to apply it on each list element</item><item value=\"2\" correct=\"false\">We call the function without any argument</item></selection><p visible-if=\"wrong\">We call the function with the loop variable as an argument, to apply it on each list element.</p></body></html>"
          },
          {
            "title": "Question: Multiple expressions",
            "id": 89673,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Why would we need to use a function as the expression in a list comprehension?</p><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\">To apply multiple expressions on the values we're iterating over</item><item value=\"2\" correct=\"false\">Because expressions are always functions</item></selection><p visible-if=\"wrong\">To apply multiple expressions on the values we're iterating over.</p></body></html>"
          },
          {
            "title": "Question: Return statement",
            "id": 89674,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Can we use this function inside a list comprehension?</p><code version=\"2\" codelang=\"python\" name=\"script.py\" visible-if=\"always\"><content><text value=\"def\" class=\"keyword\" /><text value=\" \" /><text value=\"get_full_name\" class=\"title\" /><text value=\"()\" class=\"params\" /><text value=\":\" /><text type=\"break\" /><text value=\"  full = \" /><text value=\"&quot;Claire&quot;\" class=\"string\" /><text value=\" + \" /><text value=\"&quot;Johnson&quot;\" class=\"string\" /><text type=\"break\" /><text value=\"  print(full)\" /></content></code><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\">No, because it doesn't return a value</item><item value=\"2\" correct=\"false\">Yes, we can use any function inside a list comprehension</item></selection><p visible-if=\"wrong\">No, because it doesn't return a value.</p></body></html>"
          },
          {
            "title": "Example: Function",
            "id": 89666,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Inside the list comprehension, call the function <code>add_comma()</code> with the loop variable <code>name</code> as an argument.</p><code version=\"2\" codelang=\"python\" name=\"script.py\" visible-if=\"always\"><content><text value=\"authors = [\" /><text value=\"&quot;Virginia Woolf&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;John Steinbeck&quot;\" class=\"string\" /><text value=\"]\" /><text type=\"break\" /><text type=\"break\" /><text value=\"def\" class=\"keyword\" /><text value=\" \" /><text value=\"add_comma\" class=\"title\" /><text value=\"(name)\" class=\"params\" /><text value=\":\" /><text type=\"break\" /><text value=\"  parts = name.split(\" /><text value=\"&quot; &quot;\" class=\"string\" /><text value=\")\" /><text type=\"break\" /><text value=\"  \" /><text value=\"return\" class=\"keyword\" /><text value=\" parts[\" /><text value=\"1\" class=\"number\" /><text value=\"] + \" /><text value=\"&quot;, &quot;\" class=\"string\" /><text value=\" + parts[\" /><text value=\"0\" class=\"number\" /><text value=\"]\" /><text type=\"break\" /><text type=\"break\" /><text value=\"authors_update = [add_comma(name) \" /><text value=\"for\" class=\"keyword\" /><text value=\" name \" /><text value=\"in\" class=\"keyword\" /><text value=\" authors]\" /><text type=\"break\" /><text type=\"break\" /><text value=\"print(authors_update)\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"150\" endIndex=\"159\" /><option startIndex=\"159\" endIndex=\"160\" /><option startIndex=\"160\" endIndex=\"164\" /><option startIndex=\"164\" endIndex=\"165\" /></options></interaction></interactions><output><content><text value=\"['Woolf, Virginia', 'Steinbeck, John']\" /></content></output></code><p visible-if=\"wrong\">Make sure to pick <code>add_comma</code> followed by <code>(</code> and then <code>name</code>, <code>)</code>.</p></body></html>"
          },
          {
            "title": "Example: Function 2",
            "id": 89667,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Inside the <code>add_comma()</code> function, split the name into a list named <code>parts</code> using <code>split()</code>. Then add a comma between index <code>1</code> and index <code>0</code>.</p><code version=\"2\" codelang=\"python\" name=\"script.py\" visible-if=\"always\"><content><text value=\"authors = [\" /><text value=\"&quot;Virginia Woolf&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;John Steinbeck&quot;\" class=\"string\" /><text value=\"]\" /><text type=\"break\" /><text type=\"break\" /><text value=\"def\" class=\"keyword\" /><text value=\" \" /><text value=\"add_comma\" class=\"title\" /><text value=\"(name)\" class=\"params\" /><text value=\":\" /><text type=\"break\" /><text value=\"  parts = name.split(\" /><text value=\"&quot; &quot;\" class=\"string\" /><text value=\")\" /><text type=\"break\" /><text value=\"  \" /><text value=\"return\" class=\"keyword\" /><text value=\" parts[\" /><text value=\"1\" class=\"number\" /><text value=\"] + \" /><text value=\"&quot;, &quot;\" class=\"string\" /><text value=\" + parts[\" /><text value=\"0\" class=\"number\" /><text value=\"]\" /><text type=\"break\" /><text type=\"break\" /><text value=\"authors_update = [add_comma(name) \" /><text value=\"for\" class=\"keyword\" /><text value=\" name \" /><text value=\"in\" class=\"keyword\" /><text value=\" authors]\" /><text type=\"break\" /><text type=\"break\" /><text value=\"print(authors_update)\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"71\" endIndex=\"94\" /><option startIndex=\"104\" endIndex=\"130\" /></options></interaction></interactions><output><content><text value=\"['Woolf, Virginia', 'Steinbeck, John']\" /></content></output></code><p visible-if=\"wrong\">Make sure to pick <code>parts = name.split(\" \")</code>, followed by <code>parts[1] + \", \" + parts[0]</code>.</p></body></html>"
          },
          {
            "title": "Example: Loop",
            "id": 89668,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Inside the list comprehension, code a <code>for</code> loop to iterate through each <code>name</code> in the <code>authors</code> list.</p><code version=\"2\" codelang=\"python\" name=\"script.py\" visible-if=\"always\"><content><text value=\"authors = [\" /><text value=\"&quot;Virginia Woolf&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;John Steinbeck&quot;\" class=\"string\" /><text value=\"]\" /><text type=\"break\" /><text type=\"break\" /><text value=\"def\" class=\"keyword\" /><text value=\" \" /><text value=\"add_comma\" class=\"title\" /><text value=\"(name)\" class=\"params\" /><text value=\":\" /><text type=\"break\" /><text value=\"  parts = name.split(\" /><text value=\"&quot; &quot;\" class=\"string\" /><text value=\")\" /><text type=\"break\" /><text value=\"  \" /><text value=\"return\" class=\"keyword\" /><text value=\" parts[\" /><text value=\"1\" class=\"number\" /><text value=\"] + \" /><text value=\"&quot;, &quot;\" class=\"string\" /><text value=\" + parts[\" /><text value=\"0\" class=\"number\" /><text value=\"]\" /><text type=\"break\" /><text type=\"break\" /><text value=\"authors_update = [add_comma(name) \" /><text value=\"for\" class=\"keyword\" /><text value=\" name \" /><text value=\"in\" class=\"keyword\" /><text value=\" authors]\" /><text type=\"break\" /><text type=\"break\" /><text value=\"print(authors_update)\" /></content><interactions><interaction type=\"validatedInput\" isDefault=\"true\" startIndex=\"166\" endIndex=\"185\" /></interactions><output><content><text value=\"['Woolf, Virginia', 'Steinbeck, John']\" /></content></output></code><p visible-if=\"wrong\">Make sure to type <code>for name in authors</code>.</p></body></html>"
          },
          {
            "title": "Example: Function as an expression",
            "id": 89669,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Call the function on each value of the <code>words</code> list, by giving the loop variable as an argument.</p><code version=\"2\" codelang=\"python\" name=\"script.py\" visible-if=\"always\"><content><text value=\"words = [\" /><text value=\"&quot;apple&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;alligator&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;abracadabra&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;avatar&quot;\" class=\"string\" /><text value=\"]\" /><text type=\"break\" /><text type=\"break\" /><text value=\"def\" class=\"keyword\" /><text value=\" \" /><text value=\"has_double_a\" class=\"title\" /><text value=\"(word)\" class=\"params\" /><text value=\":\" /><text type=\"break\" /><text value=\"  count = word.count(\" /><text value=\"&quot;a&quot;\" class=\"string\" /><text value=\")\" /><text type=\"break\" /><text value=\"  \" /><text value=\"return\" class=\"keyword\" /><text value=\" count == \" /><text value=\"2\" class=\"number\" /><text type=\"break\" /><text type=\"break\" /><text value=\"double_a = [has_double_a(word) \" /><text value=\"for\" class=\"keyword\" /><text value=\" word \" /><text value=\"in\" class=\"keyword\" /><text value=\" words]\" /><text type=\"break\" /><text type=\"break\" /><text value=\"print(double_a)\" /></content><interactions><interaction type=\"validatedInput\" isDefault=\"true\" startIndex=\"153\" endIndex=\"157\" /></interactions><output><content><text value=\"[False, True, False, False]\" /></content></output></code><p visible-if=\"wrong\">Make sure to type <code>word</code>.</p></body></html>"
          },
          {
            "title": "Example: Multiple expressions",
            "id": 89675,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Inside the <code>passed()</code> function, code a line to add a 10 points bonus to the score, then return the result of the bonus score being over <code>90</code>.</p><code version=\"2\" codelang=\"python\" name=\"script.py\" visible-if=\"always\"><content><text value=\"scores = [\" /><text value=\"40\" class=\"number\" /><text value=\", \" /><text value=\"12\" class=\"number\" /><text value=\", \" /><text value=\"83\" class=\"number\" /><text value=\"]\" /><text type=\"break\" /><text type=\"break\" /><text value=\"def\" class=\"keyword\" /><text value=\" \" /><text value=\"passed\" class=\"title\" /><text value=\"(score)\" class=\"params\" /><text value=\":\" /><text type=\"break\" /><text value=\"  with_bonus = score + \" /><text value=\"10\" class=\"number\" /><text type=\"break\" /><text value=\"  \" /><text value=\"return\" class=\"keyword\" /><text value=\" with_bonus &gt; \" /><text value=\"90\" class=\"number\" /><text type=\"break\" /><text type=\"break\" /><text value=\"passing_scores = [passed(score) \" /><text value=\"for\" class=\"keyword\" /><text value=\" score \" /><text value=\"in\" class=\"keyword\" /><text value=\" scores]\" /><text type=\"break\" /><text type=\"break\" /><text value=\"print(passing_scores)\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"44\" endIndex=\"67\" /><option startIndex=\"70\" endIndex=\"76\" /><option startIndex=\"77\" endIndex=\"92\" /></options></interaction></interactions><output><content><text value=\"[False, False, True]\" /></content></output></code><p visible-if=\"wrong\">Make sure to pick <code>with_bonus = score + 10</code>, followed by <code>return</code>, and finally <code>with_bonus &gt; 90</code>.</p></body></html>"
          },
          {
            "title": "Example: Return statement",
            "id": 89676,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Output the result of the function in a way that allows us to use the function's result inside a list comprehension.</p><code version=\"2\" codelang=\"python\" name=\"script.py\" visible-if=\"always\"><content><text value=\"scores = [\" /><text value=\"156\" class=\"number\" /><text value=\", \" /><text value=\"70\" class=\"number\" /><text value=\", \" /><text value=\"100\" class=\"number\" /><text value=\"]\" /><text type=\"break\" /><text type=\"break\" /><text value=\"def\" class=\"keyword\" /><text value=\" \" /><text value=\"passed\" class=\"title\" /><text value=\"(score)\" class=\"params\" /><text value=\":\" /><text type=\"break\" /><text value=\"  with_bonus = score + \" /><text value=\"10\" class=\"number\" /><text type=\"break\" /><text value=\"  passed = with_bonus &gt; \" /><text value=\"90\" class=\"number\" /><text type=\"break\" /><text value=\"  \" /><text value=\"return\" class=\"keyword\" /><text value=\" passed\" /><text type=\"break\" /><text type=\"break\" /><text value=\"passing_scores = [passed(score) \" /><text value=\"for\" class=\"keyword\" /><text value=\" score \" /><text value=\"in\" class=\"keyword\" /><text value=\" scores]\" /><text type=\"break\" /><text type=\"break\" /><text value=\"print(passing_scores)\" /></content><interactions><interaction type=\"validatedInput\" isDefault=\"true\" startIndex=\"99\" endIndex=\"105\" /></interactions><output><content><text value=\"[True, False, True]\" /></content></output></code><p visible-if=\"wrong\">Make sure to type <code>return</code>.</p></body></html>"
          }
        ]
      }
    ]
  }
}