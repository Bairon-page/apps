{
  "tutorial": {
    "id": 2275,
    "version": 2,
    "type": "practiceOptional",
    "isNew": false,
    "codeLanguage": "javascript",
    "title": "JavaScript Classes 1",
    "descriptionContent": "JavaScript Classes 1",
    "shortDescriptionContent": "",
    "showInTrack": true,
    "iconBanner": null,
    "chapters": [
      {
        "id": 11847,
        "title": "Using Classes",
        "type": "practiceLevel3",
        "lessons": [
          {
            "title": "Classes",
            "id": 108263,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Create an empty class for `Vehicle`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "",
                  "solvedContent": "class Vehicle {}"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Constructor",
            "id": 108264,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Give your `Vehicle` class an empty `constructor`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "class Vehicle {}",
                  "solvedContent": "class Vehicle {\n constructor() {}\n}"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Parameters",
            "id": 108265,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Add parameters `year`, `make` and `model` to the `Vehicle` class in that order.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "class Vehicle {\n constructor() {}\n}",
                  "solvedContent": "class Vehicle {\n constructor(year, make, model) {}\n}"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Property 1",
            "id": 108266,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Create a new property called `year` using `this`. Assign it the value of the `year` parameter.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "class Vehicle {\n constructor(year, make, model) {}\n}",
                  "solvedContent": "class Vehicle {\n constructor(year, make, model) {\n  this.year = year;\n }\n}"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Property 2",
            "id": 108267,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Create a new property called `make` using `this`. Assign it the value of the `make` parameter.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "class Vehicle {\n constructor(year, make, model) {\n  this.year = year;\n }\n}",
                  "solvedContent": "class Vehicle {\n constructor(year, make, model) {\n  this.year = year;\n  this.make = make;\n }\n}"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Property 3",
            "id": 108269,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Create a new property called `model` using `this`. Assign it the value of the `model` parameter.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "class Vehicle {\n constructor(year, make, model) {\n  this.year = year;\n  this.make = make;\n }\n}",
                  "solvedContent": "class Vehicle {\n constructor(year, make, model) {\n  this.year = year;\n  this.make = make;\n  this.model = model;\n }\n}"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "new",
            "id": 108268,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Create a `car` constant that stores a new `Vehicle` instance. Set the `year` to `1992`, the maker to `\"Honda\"`, and the model to `\"Civic\"`. ",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "class Vehicle {\n constructor(year, make, model) {\n  this.year = year;\n  this.make = make;\n  this.model = model;\n }\n}",
                  "solvedContent": "class Vehicle {\n constructor(year, make, model) {\n  this.year = year;\n  this.make = make;\n  this.model = model;\n }\n}\nconst car = new Vehicle(1992, \"Honda\", \"Civic\");"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 11854,
        "title": "Classes with Methods",
        "type": "practiceLevel3",
        "lessons": [
          {
            "title": "Code: methods",
            "id": 108289,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": " Put the code `this.songs.push(song)` into a method  named `addSong` having a `song` parameter.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "class Playlist {\n constructor() {\n  this.songs = [];\n }\n this.songs.push(song);\n};",
                  "solvedContent": "class Playlist {\n constructor() {\n  this.songs = [];\n }\n addSong(song) {\n  this.songs.push(song);\n }\n}"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Code: methods 2",
            "id": 108290,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Place the loop code inside a method named `play`, that doesn't have any parameters. \n",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "class Playlist {\n constructor() {\n  this.songs = [];\n }\n addSong(song) {\n  this.songs.push(song);\n }\n for (let i = 0; i < this.songs.length; i++) {\n  console.log(this.songs[i]);\n }\n}",
                  "solvedContent": "class Playlist {\n constructor() {\n  this.songs = [];\n }\n addSong(song) {\n  this.songs.push(song);\n }\n play() {\n  for (let i = 0; i < this.songs.length; i++) {\n   console.log(this.songs[i]);\n  }\n }\n}"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Code: methods 3",
            "id": 108291,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": " Place the code `this.songs.pop();` inside a method named `remove`, that doesn't take any parameters.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "class Playlist {\n constructor() {\n  this.songs = [];\n }\n addSong(song) {\n  this.songs.push(song);\n }\n play() {\n  for (let i = 0; i < this.songs.length; i++) {\n   console.log(this.songs[i]);\n  }\n }\n this.songs.pop();\n}",
                  "solvedContent": "class Playlist {\n constructor() {\n  this.songs = [];\n }\n addSong(song) {\n  this.songs.push(song);\n }\n play() {\n  for (let i = 0; i < this.songs.length; i++) {\n   console.log(this.songs[i]);\n  }\n }\n remove() {\n  this.songs.pop();\n }\n}"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Code: call method",
            "id": 108292,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Create a constant named `myPlaylist`. Create a new `Playlist` instance and save it in a constant.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "class Playlist {\n constructor() {\n  this.songs = [];\n }\n addSong(song) {\n  this.songs.push(song);\n }\n play() {\n  for (let i = 0; i < this.songs.length; i++) {\n   console.log(this.songs[i]);\n  }\n }\n remove() {\n  this.songs.pop();\n }\n}",
                  "solvedContent": "class Playlist {\n constructor() {\n  this.songs = [];\n }\n addSong(song) {\n  this.songs.push(song);\n }\n play() {\n  for (let i = 0; i < this.songs.length; i++) {\n   console.log(this.songs[i]);\n  }\n }\n remove() {\n  this.songs.pop();\n }\n}\nconst myPlaylist = new Playlist();"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Code: call method 2",
            "id": 108293,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Use the `myPlaylist` constant to call the  `addSong` method with  `\"Alright\"`, then call `play()`",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "class Playlist {\n constructor() {\n  this.songs = [];\n }\n addSong(song) {\n  this.songs.push(song);\n }\n play() {\n  for (let i = 0; i < this.songs.length; i++) {\n   console.log(this.songs[i]);\n  }\n }\n remove() {\n  this.songs.pop();\n }\n}\nconst myPlaylist = new Playlist();",
                  "solvedContent": "class Playlist {\n constructor() {\n  this.songs = [];\n }\n addSong(song) {\n  this.songs.push(song);\n }\n play() {\n  for (let i = 0; i < this.songs.length; i++) {\n   console.log(this.songs[i]);\n  }\n }\n remove() {\n  this.songs.pop();\n }\n}\nconst myPlaylist = new Playlist();\nmyPlaylist.addSong(\"Alright\");\nmyPlaylist.play();"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 11890,
        "title": "Creating Instances",
        "type": "practiceLevel3",
        "lessons": [
          {
            "title": "Code: Instance",
            "id": 108606,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Create an instance of the `Customer` class with `name` of `\"Sally\"`. Store it in the constant `cust1`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "class Customer {\n constructor(name) {\n  this.name = name;\n }\n}",
                  "solvedContent": "class Customer {\n constructor(name) {\n  this.name = name;\n }\n}\nconst cust1 = new Customer(\"Sally\");"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Code: Independent",
            "id": 108607,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Create an instance of the `Email` class with `address` of `\"sally@mail.com\"`. Store it in the variable `email2`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "class Email {\n constructor(address) {\n  this.address = address;\n }\n}\nconst email1 = new Email(\"joe@test.com\");\n\nconsole.log(email1);\nconsole.log(email2);",
                  "solvedContent": "class Email {\n constructor(address) {\n  this.address = address;\n }\n}\nconst email1 = new Email(\"joe@test.com\");\nconst email2 = new Email(\"sally@mail.com\");\nconsole.log(email1);\nconsole.log(email2);"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Code: Independent 2",
            "id": 108608,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Set the `doNotCall` property of `phone1` to `true`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "class Phone {\n constructor(number) {\n  this.number = number;\n  this.doNotCall = false;\n }\n}\nconst phone1 = new Phone(\"3455556632\");\nconst phone2 = new Phone(\"4685559441\");\nconsole.log(phone1);\nconsole.log(phone2);",
                  "solvedContent": "class Phone {\n constructor(number) {\n  this.number = number;\n  this.doNotCall = false;\n }\n}\nconst phone1 = new Phone(\"3455556632\");\nconst phone2 = new Phone(\"4685559441\");\nphone1.doNotCall = true;\nconsole.log(phone1);\nconsole.log(phone2);"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Code: Many Instances",
            "id": 108609,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Code another `Plane` instance with any parameters and store it in a constant named `plane3`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "class Plane {\n constructor(model, mph) {\n  this.model = model;\n  this.mph = mph;\n }\n}\nconst plane1 = new Plane(\"747\", 543);\nconst plane2 = new Plane(\"737\", 500);",
                  "solvedContent": "class Plane {\n constructor(model, mph) {\n  this.model = model;\n  this.mph = mph;\n }\n}\nconst plane1 = new Plane(\"747\", 543);\nconst plane2 = new Plane(\"737\", 500);\nconst plane3 = new Plane(\"123\", 123);"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Code: Diverge",
            "id": 108611,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Change the `active` property of `account1` and `account2` to `false`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "class Account {\n constructor(name, number) {\n  this.name = name;\n  this.number = number;\n  this.active = true;\n }\n}\nconst account1 = new Account(\"Bob's Supplies\", 1);\nconst account2 = new Account(\"Tara Consulting\", 2);",
                  "solvedContent": "class Account {\n constructor(name, number) {\n  this.name = name;\n  this.number = number;\n  this.active = true;\n }\n}\nconst account1 = new Account(\"Bob's Supplies\", 1);\nconst account2 = new Account(\"Tara Consulting\", 2);\naccount1.active = false;\naccount2.active = false;"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Code: Changing",
            "id": 108612,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Add an `age` property to the `Dog` class's constructor and set it to `0`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "class Dog {\n constructor(name, breed) {\n  this.name = name;\n  this.breed = breed;\n }\n}\nconst dog1 = new Dog(\"Bruce\", \"Golden\");\nconst dog2 = new Dog(\"Toby\", \"Poodle\");\nconsole.log(dog1);\nconsole.log(dog2);",
                  "solvedContent": "class Dog {\n constructor(name, breed) {\n  this.name = name;\n  this.breed = breed;\n  this.age = 0;\n }\n}\nconst dog1 = new Dog(\"Bruce\", \"Golden\");\nconst dog2 = new Dog(\"Toby\", \"Poodle\");\nconsole.log(dog1);\nconsole.log(dog2);"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Code: Method",
            "id": 108613,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Place the `this.floor = floor` code and the following display statement inside a method `goToFloor` that takes a `floor` parameter. Call the method on `elevator1` and `elevator2` with any floor number you want to go to.\n\n",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "class Elevator {\n constructor() {\n  this.floor = 0;\n }\n this.floor = floor;\n console.log(this.floor);\n}\nconst elevator1 = new Elevator();\nconst elevator2 = new Elevator();",
                  "solvedContent": "class Elevator {\n constructor() {\n  this.floor = 0;\n }\n goToFloor(floor) {\n  this.floor = floor;\n  console.log(this.floor);\n }\n}\nconst elevator1 = new Elevator();\nconst elevator2 = new Elevator();\nelevator1.goToFloor(1);\nelevator2.goToFloor(2);"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Code: constructor",
            "id": 108625,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Add a parameterless constructor to the `Song` class around the code `this.title = \"\";`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "class Song {\n this.title = \"\";\n play() {\n  console.log(\"playing \" + this.title);\n }\n}\nconst song1 = new Song();\nsong1.title = \"Remember\";\nsong1.play();",
                  "solvedContent": "class Song {\n constructor() {\n  this.title = \"\";\n }\n play() {\n  console.log(\"playing \" + this.title);\n }\n}\nconst song1 = new Song();\nsong1.title = \"Remember\";\nsong1.play();"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Code: Default constructor",
            "id": 108614,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Remove the unnecessary constructor from the `Document` class.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "class Document {\n constructor() {}\n sign() {\n  console.log(\"The contract is signed.\");\n }\n}\nconst doc1 = new Document();\ndoc1.sign();",
                  "solvedContent": "class Document {\n sign() {\n  console.log(\"The contract is signed.\");\n }\n}\nconst doc1 = new Document();\ndoc1.sign();"
                }
              ],
              "hints": []
            }
          }
        ]
      }
    ]
  }
}