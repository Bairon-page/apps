{
  "tutorial": {
    "id": 2127,
    "version": 9,
    "type": "course",
    "isNew": false,
    "codeLanguage": "node",
    "title": "Middleware",
    "descriptionContent": "Learn what middleware is and how to use it in your Express app",
    "shortDescriptionContent": "",
    "showInTrack": true,
    "iconBanner": null,
    "chapters": [
      {
        "id": 15056,
        "title": "Built-in Middleware",
        "type": "practiceLevel1",
        "lessons": [
          {
            "title": "Intro I",
            "id": 122314,
            "contentType": "interactive",
            "images": [
              {
                "id": "8e582a28-69f5-4ce1-8b1a-3bd18cf017c0"
              }
            ],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Middleware refers to functions that act as an intermediary layer between the web server and the application.</p><p>This intermediary layer allows for more efficient server and client interaction.</p><img src=\"8e582a28-69f5-4ce1-8b1a-3bd18cf017c0\" visible-if=\"always\" /></body></html>"
          },
          {
            "title": "Intro II",
            "id": 122332,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>You can use middleware for tasks like logging information, parsing requests, authentication, and more.</p></body></html>"
          },
          {
            "title": ".use() - Copy",
            "id": 132746,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>In Express we add middleware with the <code>use</code> method on the Express app object.</p><code version=\"2\" codelang=\"javascript\" name=\"app.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" express = \" /><text value=\"require\" class=\"built_in\" /><text value=\"(\" /><text value=\"&quot;express&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" app = express(); \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"app.use(); \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"app.listen(\" /><text value=\"3000\" class=\"number\" /><text value=\", () =&gt; { \" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;Server runs on port 3000&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"});\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"63\" endIndex=\"66\" /><option startIndex=\"66\" endIndex=\"67\" /><option startIndex=\"67\" endIndex=\"70\" /></options></interaction></interactions><output><content><text value=\"Server runs on port 3000\" /></content></output></code><p visible-if=\"wrong\">Make sure to pick <code>app</code>, followed by <code>.</code>, and finally <code>use</code>.</p></body></html>"
          },
          {
            "title": "Built-in Middleware",
            "id": 122317,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>We pass the middleware we want to use as an argument to the <code>use</code> function.</p><p><code>express.json</code> parses incoming requests that contain JSON payloads, converting them to a JS object that the server can readily process.</p><code version=\"2\" codelang=\"javascript\" name=\"app.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" express = \" /><text value=\"require\" class=\"built_in\" /><text value=\"(\" /><text value=\"&quot;express&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" app = express(); \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"app.use(express.json()); \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"app.post(\" /><text value=\"&quot;/songs&quot;\" class=\"string\" /><text value=\", (req, res) =&gt; { \" /><text type=\"break\" /><text value=\" \" /><text value=\"const\" class=\"keyword\" /><text value=\" body = req.body; \" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(body); \" /><text type=\"break\" /><text value=\"}); \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"app.listen(\" /><text value=\"3000\" class=\"number\" /><text value=\", () =&gt; { \" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;Server runs on port 3000&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"});\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"71\" endIndex=\"78\" /><option startIndex=\"78\" endIndex=\"79\" /><option startIndex=\"79\" endIndex=\"85\" /><option correct=\"false\"><content><text value=\"use()\" /></content></option></options></interaction></interactions><output><content><text value=\"Server runs on port 3000\" /><text type=\"break\" /><text value=\"{\" /><text type=\"break\" /><text value=\"  &quot;title&quot;: &quot;Party in the USA&quot;,\" /><text type=\"break\" /><text value=\"  &quot;artist&quot;: &quot;Miley Cyrus&quot;\" /><text type=\"break\" /><text value=\"}\" /></content></output></code><p visible-if=\"wrong\">Make sure to pick <code>express</code>, followed by <code>.</code>, and finally <code>json()</code>.</p></body></html>"
          },
          {
            "title": "Built-in Middleware - Copy",
            "id": 132755,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Another commonly used middleware in Express is <code>express.urlencoded</code>.</p><p>This middleware is essential when handling URL-encoded form data, which is typically sent through HTML forms.</p><code version=\"2\" codelang=\"javascript\" name=\"app.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" express = \" /><text value=\"require\" class=\"built_in\" /><text value=\"(\" /><text value=\"&quot;express&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" app = express(); \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"app.use(express.urlencoded()); \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"app.post(\" /><text value=\"&quot;/submit&quot;\" class=\"string\" /><text value=\", (req, res) =&gt; { \" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(req.body); \" /><text type=\"break\" /><text value=\" res.send(\" /><text value=\"&quot;Form data received&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"}); \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"app.listen(\" /><text value=\"3000\" class=\"number\" /><text value=\", () =&gt; { \" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;Server runs on port 3000&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"});\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"71\" endIndex=\"78\" /><option startIndex=\"78\" endIndex=\"79\" /><option startIndex=\"79\" endIndex=\"91\" /><option correct=\"false\"><content><text value=\"json()\" /></content></option></options></interaction></interactions><output><content><text value=\"Server runs on port 3000\" /><text type=\"break\" /><text value=\"{\" /><text type=\"break\" /><text value=\" name: &quot;Paula&quot;, age: 57\" /><text type=\"break\" /><text value=\"}\" /></content></output></code><p visible-if=\"wrong\">Make sure to pick <code>express</code>, followed by <code>.</code>, and finally <code>urlencoded()</code>.</p></body></html>"
          },
          {
            "title": "Built-in Middleware - Copy",
            "id": 132756,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>We can also apply middleware only to selected routes by passing it as the second argument of route methods.</p><p>Let's make the <code>\"/songs\"</code> endpoint use the JSON middleware.</p><code version=\"2\" codelang=\"javascript\" name=\"app.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" express = \" /><text value=\"require\" class=\"built_in\" /><text value=\"(\" /><text value=\"&quot;express&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" app = express(); \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"app.post(\" /><text value=\"&quot;/songs&quot;\" class=\"string\" /><text value=\", express.json(), (req, res) =&gt; { \" /><text type=\"break\" /><text value=\" \" /><text value=\"const\" class=\"keyword\" /><text value=\" body = req.body; \" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(body); \" /><text type=\"break\" /><text value=\"}); \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"app.get(\" /><text value=\"&quot;/&quot;\" class=\"string\" /><text value=\", (req, res) =&gt; { \" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;I don't need it!&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"}); \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"app.listen(\" /><text value=\"3000\" class=\"number\" /><text value=\", () =&gt; { \" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;Server runs on port 3000&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"});\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"82\" endIndex=\"89\" /><option startIndex=\"89\" endIndex=\"90\" /><option startIndex=\"90\" endIndex=\"96\" /><option correct=\"false\"><content><text value=\"use()\" /></content></option></options></interaction></interactions><output><content><text value=\"Server runs on port 3000\" /><text type=\"break\" /><text value=\"{\" /><text type=\"break\" /><text value=\"  &quot;title&quot;: &quot;Party in the USA&quot;,\" /><text type=\"break\" /><text value=\"  &quot;artist&quot;: &quot;Miley Cyrus&quot;\" /><text type=\"break\" /><text value=\"}\" /></content></output></code><p visible-if=\"wrong\">Make sure to pick <code>express</code>, followed by <code>.</code>, and finally <code>json()</code>.</p></body></html>"
          },
          {
            "title": "Question: Built-in Middleware",
            "id": 122319,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>What's an example of built-in middleware for Express?</p><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\"><code>express.json</code></item><item value=\"2\" correct=\"false\">Our custom middleware</item></selection><p visible-if=\"wrong\">Make sure to pick <code>express.json</code>.</p></body></html>"
          },
          {
            "title": ".use() - Copy - Copy",
            "id": 132747,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Use the built-in JSON middleware.</p><code version=\"2\" codelang=\"javascript\" name=\"app.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" express = \" /><text value=\"require\" class=\"built_in\" /><text value=\"(\" /><text value=\"&quot;express&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" app = express(); \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"app.use(express.json()); \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"app.listen(\" /><text value=\"3000\" class=\"number\" /><text value=\", () =&gt; { \" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;Server runs on port 3000&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"});\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"71\" endIndex=\"78\" /><option startIndex=\"78\" endIndex=\"79\" /><option startIndex=\"79\" endIndex=\"83\" /><option startIndex=\"83\" endIndex=\"84\" /><option startIndex=\"84\" endIndex=\"85\" /></options></interaction></interactions><output><content><text value=\"Server runs on port 3000\" /></content></output></code><p visible-if=\"wrong\">Make sure to pick <code>express</code> followed by <code>.</code> and then <code>json</code>, <code>(</code>, <code>)</code>.</p></body></html>"
          },
          {
            "title": "Lesson #9",
            "id": 132757,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Can we use built-in middleware like <code>express.json</code> as an argument in a route handler?</p><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\">Yes, if we don't want to apply it to every endpoint</item><item value=\"2\" correct=\"false\">No, built-in middleware can only be used globally</item></selection><p visible-if=\"wrong\">Yes, if we don't want to apply it to every endpoint.</p></body></html>"
          },
          {
            "title": ".use() - Copy - Copy - Copy",
            "id": 132758,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Complete the code to enable built-in middleware usage.</p><code version=\"2\" codelang=\"javascript\" name=\"app.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" express = \" /><text value=\"require\" class=\"built_in\" /><text value=\"(\" /><text value=\"&quot;express&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" app = express(); \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"app.use(express.json()); \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"app.listen(\" /><text value=\"3000\" class=\"number\" /><text value=\", () =&gt; { \" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;Server runs on port 3000&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"});\" /></content><interactions><interaction type=\"validatedInput\" isDefault=\"true\" startIndex=\"67\" endIndex=\"70\" /></interactions><output><content><text value=\"Server runs on port 3000\" /></content></output></code><p visible-if=\"wrong\">Make sure to type <code>use</code>.</p></body></html>"
          },
          {
            "title": "Lesson #12",
            "id": 132761,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>How do we apply middleware to a specific route?</p><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\">Pass it as the second argument in the route method</item><item value=\"2\" correct=\"false\">Use <code>app.use</code> for every route</item></selection><p visible-if=\"wrong\">Pass it as the second argument in the route method.</p></body></html>"
          }
        ]
      },
      {
        "id": 15057,
        "title": "Custom Middleware",
        "type": "practiceLevel1",
        "lessons": [
          {
            "title": ".use()",
            "id": 122330,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>We can also create our own custom middleware, that does specific custom actions we've defined. We do that by creating a function.</p><p>To start, we define a function with two parameters.</p><code version=\"2\" codelang=\"javascript\" name=\"app.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" express = \" /><text value=\"require\" class=\"built_in\" /><text value=\"(\" /><text value=\"&quot;express&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" app = express(); \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" customMiddleware = \" /><text value=\"(\" /><text value=\"req, res\" class=\"params\" /><text value=\") =&gt;\" /><text value=\" { \" /><text type=\"break\" /><text value=\"  \" /><text type=\"break\" /><text value=\"}; \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"app.get(\" /><text value=\"&quot;/&quot;\" class=\"string\" /><text value=\", (req, res) =&gt; { \" /><text type=\"break\" /><text value=\" res.send(\" /><text value=\"&quot;Hello from the root route!&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"}); \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"app.listen(\" /><text value=\"3000\" class=\"number\" /><text value=\", () =&gt; { \" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;Server runs on port 3000&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"});\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"88\" endIndex=\"98\" /><option startIndex=\"99\" endIndex=\"101\" /><option startIndex=\"102\" endIndex=\"103\" /><option startIndex=\"108\" endIndex=\"109\" /></options></interaction></interactions></code><p visible-if=\"wrong\">Make sure to pick <code>(req, res)</code> followed by <code>=&gt;</code> and then <code>{</code>, <code>}</code>.</p></body></html>"
          },
          {
            "title": ".use() - Copy",
            "id": 132749,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Let's create middleware to log every incoming request and print the used method.</p><code version=\"2\" codelang=\"javascript\" name=\"app.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" express = \" /><text value=\"require\" class=\"built_in\" /><text value=\"(\" /><text value=\"&quot;express&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" app = express(); \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" customMiddleware = \" /><text value=\"(\" /><text value=\"req, res\" class=\"params\" /><text value=\") =&gt;\" /><text value=\" { \" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;Incoming request...&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"`Request type: \" /><text value=\"${req.method}\" class=\"subst\" /><text value=\"`\" /><text value=\"); \" /><text type=\"break\" /><text value=\"}; \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"app.get(\" /><text value=\"&quot;/&quot;\" class=\"string\" /><text value=\", (req, res) =&gt; { \" /><text type=\"break\" /><text value=\" res.send(\" /><text value=\"&quot;Hello from the root route!&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"}); \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"app.listen(\" /><text value=\"3000\" class=\"number\" /><text value=\", () =&gt; { \" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;Server runs on port 3000&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"});\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"106\" endIndex=\"117\" /><option startIndex=\"144\" endIndex=\"155\" /><option startIndex=\"173\" endIndex=\"183\" /></options></interaction></interactions></code><p visible-if=\"wrong\">Make sure to pick <code>console.log</code>, followed by <code>console.log</code>, and finally <code>req.method</code>.</p></body></html>"
          },
          {
            "title": ".use() - Copy - Copy",
            "id": 132750,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>To complete the middleware, we must call the next function to pass control to the next middleware or route handler.</p><p>This allows the request and response objects to continue moving through the pipeline.</p><code version=\"2\" codelang=\"javascript\" name=\"app.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" express = \" /><text value=\"require\" class=\"built_in\" /><text value=\"(\" /><text value=\"&quot;express&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" app = express(); \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" customMiddleware = \" /><text value=\"(\" /><text value=\"req, res, next\" class=\"params\" /><text value=\") =&gt;\" /><text value=\" { \" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;Incoming request...&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"`Request type: \" /><text value=\"${req.method}\" class=\"subst\" /><text value=\"`\" /><text value=\"); \" /><text type=\"break\" /><text value=\" next(); \" /><text type=\"break\" /><text value=\"}; \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"app.get(\" /><text value=\"&quot;/&quot;\" class=\"string\" /><text value=\", (req, res) =&gt; { \" /><text type=\"break\" /><text value=\" res.send(\" /><text value=\"&quot;Hello from the root route!&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"}); \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"app.listen(\" /><text value=\"3000\" class=\"number\" /><text value=\", () =&gt; { \" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;Server runs on port 3000&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"});\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"196\" endIndex=\"202\" /><option startIndex=\"99\" endIndex=\"103\" /></options></interaction></interactions></code><p visible-if=\"wrong\">Make sure to pick <code>next</code>, followed by <code>next()</code>.</p></body></html>"
          },
          {
            "title": ".use() - Copy",
            "id": 132748,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>To apply our middleware in the Express application, we use <code>app.use</code> and use <code>customMiddleware</code> as the argument.</p><p>This tells Express to execute the <code>customMiddleware</code> function for every incoming request, allowing it to perform our logging.</p><code version=\"2\" codelang=\"javascript\" name=\"app.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" express = \" /><text value=\"require\" class=\"built_in\" /><text value=\"(\" /><text value=\"&quot;express&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" app = express(); \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" customMiddleware = \" /><text value=\"(\" /><text value=\"req, res, next\" class=\"params\" /><text value=\") =&gt;\" /><text value=\" { \" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;Incoming request...&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"`Request type: \" /><text value=\"${req.method}\" class=\"subst\" /><text value=\"`\" /><text value=\"); \" /><text type=\"break\" /><text value=\" next(); \" /><text type=\"break\" /><text value=\"}; \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"app.use(customMiddleware); \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"app.get(\" /><text value=\"&quot;/&quot;\" class=\"string\" /><text value=\", (req, res) =&gt; { \" /><text type=\"break\" /><text value=\" res.send(\" /><text value=\"&quot;Hello from the root route!&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"}); \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"app.listen(\" /><text value=\"3000\" class=\"number\" /><text value=\", () =&gt; { \" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;Server runs on port 3000&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"});\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"211\" endIndex=\"214\" /><option startIndex=\"214\" endIndex=\"215\" /><option startIndex=\"215\" endIndex=\"218\" /><option startIndex=\"219\" endIndex=\"235\" /></options></interaction></interactions><output><content><text value=\"Server runs on port 3000\" /><text type=\"break\" /><text value=\"Incoming request...\" /><text type=\"break\" /><text value=\"Request type: GET\" /></content></output></code><p visible-if=\"wrong\">Make sure to pick <code>app</code> followed by <code>.</code> and then <code>use</code>, <code>customMiddleware</code>.</p></body></html>"
          },
          {
            "title": "Custom Middleware - Copy1",
            "id": 132751,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>We can also apply our custom middleware only to selected routes by passing it as the second argument of route methods.</p><p>Let's make the <code>\"/\"</code> route use our <code>logRequest</code> middleware.</p><code version=\"2\" codelang=\"javascript\" name=\"app.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" express = \" /><text value=\"require\" class=\"built_in\" /><text value=\"(\" /><text value=\"&quot;express&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" app = express(); \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" logRequest = \" /><text value=\"(\" /><text value=\"req, res, next\" class=\"params\" /><text value=\") =&gt;\" /><text value=\" { \" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"`Incoming request type: \" /><text value=\"${req.method}\" class=\"subst\" /><text value=\"`\" /><text value=\"); \" /><text type=\"break\" /><text value=\" next(); \" /><text type=\"break\" /><text value=\"}; \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"app.get(\" /><text value=\"&quot;/&quot;\" class=\"string\" /><text value=\", logRequest, (req, res) =&gt; { \" /><text type=\"break\" /><text value=\" res.send(\" /><text value=\"&quot;Hello from the root route!&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"}); \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"app.listen(\" /><text value=\"3000\" class=\"number\" /><text value=\", () =&gt; { \" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;Server runs on port 3000&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"});\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"189\" endIndex=\"199\" /></options></interaction></interactions><output><content><text value=\"Server runs on port 3000\" /><text type=\"break\" /><text value=\"Incoming request type: GET\" /></content></output></code><p visible-if=\"wrong\">Make sure to pick <code>logRequest</code>.</p></body></html>"
          },
          {
            "title": "Multiple Middleware",
            "id": 122331,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Why doesn't the <code>\"/\"</code> endpoint execute its console log when accessed?</p><code version=\"2\" codelang=\"javascript\" name=\"app.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" express = \" /><text value=\"require\" class=\"built_in\" /><text value=\"(\" /><text value=\"&quot;express&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" app = express(); \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"app.use(\" /><text value=\"(\" /><text value=\"req, res, next\" class=\"params\" /><text value=\") =&gt;\" /><text value=\" { \" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;Incoming request...&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"`Request type: \" /><text value=\"${req.method}\" class=\"subst\" /><text value=\"`\" /><text value=\"); \" /><text type=\"break\" /><text value=\"}); \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"app.get(\" /><text value=\"'/'\" class=\"string\" /><text value=\", (req, res) =&gt; { \" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;Hello from the endpoint&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"}); \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"app.listen(\" /><text value=\"3000\" class=\"number\" /><text value=\", () =&gt; { \" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;Server runs on port 3000&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"});\" /></content><output><content><text value=\"Server runs on port 3000\" /><text type=\"break\" /><text value=\"Incoming request...\" /><text type=\"break\" /><text value=\"Request type: GET\" /></content></output></code><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\">Middleware blocks the route by not calling <code>next</code></item><item value=\"2\" correct=\"false\">The <code>\"/\"</code> route is missing</item></selection><p visible-if=\"wrong\">Middleware blocks the route by not calling <code>next</code>.</p></body></html>"
          },
          {
            "title": "next()",
            "id": 122321,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Complete the code to ensure the endpoint is hit.</p><code version=\"2\" codelang=\"javascript\" name=\"app.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" express = \" /><text value=\"require\" class=\"built_in\" /><text value=\"(\" /><text value=\"&quot;express&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" app = express(); \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"app.use(\" /><text value=\"(\" /><text value=\"req, res, next\" class=\"params\" /><text value=\") =&gt;\" /><text value=\" { \" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;Incoming request...&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"`Requesting server: \" /><text value=\"${req.hostname}\" class=\"subst\" /><text value=\"`\" /><text value=\"); \" /><text type=\"break\" /><text value=\" next(); \" /><text type=\"break\" /><text value=\"}); \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"app.get(\" /><text value=\"&quot;/user/:id&quot;\" class=\"string\" /><text value=\", \" /><text value=\"function\" class=\"keyword\" /><text value=\"(\" /><text value=\"req, res, next\" class=\"params\" /><text value=\") \" /><text value=\"{ \" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;GET request processing...&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"}); \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"app.listen(\" /><text value=\"3000\" class=\"number\" /><text value=\", () =&gt; { \" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;Server runs on port 3000&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"});\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"82\" endIndex=\"86\" /><option startIndex=\"186\" endIndex=\"192\" /></options></interaction></interactions><output><content><text value=\"Server runs on port 3000\" /><text type=\"break\" /><text value=\"Incoming request...\" /><text type=\"break\" /><text value=\"Requesting server: localhost\" /><text type=\"break\" /><text value=\"Get request processing...\" /></content></output></code><p visible-if=\"wrong\">Make sure to pick <code>next</code>, followed by <code>next()</code>.</p></body></html>"
          },
          {
            "title": "Question: Custom Middleware",
            "id": 122322,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>What's one benefit of creating custom middleware?</p><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\">Custom middleware enables custom actions with HTTP requests</item><item value=\"2\" correct=\"false\">We cannot create custom middleware</item></selection><p visible-if=\"wrong\">Custom middleware enables custom actions with HTTP requests.</p></body></html>"
          },
          {
            "title": "Custom Middleware - Copy - Copy",
            "id": 132752,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Why isn't the <code>\"/me\"</code> route triggering the logging middleware?</p><code version=\"2\" codelang=\"javascript\" name=\"app.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" express = \" /><text value=\"require\" class=\"built_in\" /><text value=\"(\" /><text value=\"&quot;express&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" app = express(); \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" logRequest = \" /><text value=\"(\" /><text value=\"req, res, next\" class=\"params\" /><text value=\") =&gt;\" /><text value=\" { \" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"`Incoming request type: \" /><text value=\"${req.method}\" class=\"subst\" /><text value=\"`\" /><text value=\"); \" /><text type=\"break\" /><text value=\" next(); \" /><text type=\"break\" /><text value=\"}; \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"app.get(\" /><text value=\"&quot;/&quot;\" class=\"string\" /><text value=\", logRequest, (req, res) =&gt; { \" /><text type=\"break\" /><text value=\" res.send(\" /><text value=\"&quot;Hello from the root route!&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"}); \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"app.get(\" /><text value=\"&quot;/me&quot;\" class=\"string\" /><text value=\", (req, res) =&gt; { \" /><text type=\"break\" /><text value=\" res.send(\" /><text value=\"&quot;Hello from my route!&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"}); \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"app.listen(\" /><text value=\"3000\" class=\"number\" /><text value=\", () =&gt; { \" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;Server runs on port 3000&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"});\" /></content><output><content><text value=\"Server runs on port 3000\" /></content></output></code><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\">The logging middleware isn't applied to the <code>\"/me\"</code> route</item><item value=\"2\" correct=\"false\">The <code>\"/me\"</code> route isn't working because it's not set up correctly</item></selection><p visible-if=\"wrong\">The logging middleware isn't applied to the <code>\"/me\"</code> route.</p></body></html>"
          },
          {
            "title": "Question: Third Party Middleware",
            "id": 122323,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>What is wrong with the code?</p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" express = \" /><text value=\"require\" class=\"built_in\" /><text value=\"(\" /><text value=\"&quot;express&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" app = express(); \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"function\" class=\"keyword\" /><text value=\" \" /><text value=\"logTime\" class=\"title\" /><text value=\"(\" /><text value=\"req, res, next\" class=\"params\" /><text value=\") \" /><text value=\"{ \" /><text type=\"break\" /><text value=\"  \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"`Request received at: \" /><text value=\"${\" /><text value=\"new\" class=\"keyword\" /><text value=\" \" /><text value=\"Date\" class=\"built_in\" /><text value=\"().toLocaleString()}\" /><text value=\"`\" /><text value=\"); \" /><text type=\"break\" /><text value=\"} \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"app.use(logTime); \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"app.get(\" /><text value=\"&quot;/&quot;\" class=\"string\" /><text value=\", (req, res) =&gt; { \" /><text type=\"break\" /><text value=\"  res.send(\" /><text value=\"&quot;Hello, World!&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"}); \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"app.listen(\" /><text value=\"3000\" class=\"number\" /><text value=\", () =&gt; { \" /><text type=\"break\" /><text value=\"  \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;Server runs on port 3000&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"});\" /></content><output><content><text value=\"Server runs on port 3000\" /><text type=\"break\" /><text value=\"GET / 200 150 - 1.650 ms\" /><text type=\"break\" /><text value=\"Request received\" /></content></output></code><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\">We must use <code>next</code> in our custom middleware to allow the request and response objects to continue moving through the pipeline</item><item value=\"2\" correct=\"false\">We must define our middleware as an arrow function in order to make it work with Express</item></selection><p visible-if=\"wrong\">We must use <code>next</code> in our custom middleware to allow the request and response objects to continue moving through the pipeline.</p></body></html>"
          }
        ]
      },
      {
        "id": 15058,
        "title": "Even More Middleware",
        "type": "practiceLevel1",
        "lessons": [
          {
            "title": "Custom Middleware",
            "id": 122320,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>We can use multiple middleware in our app.</p><code version=\"2\" codelang=\"javascript\" name=\"app.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" express = \" /><text value=\"require\" class=\"built_in\" /><text value=\"(\" /><text value=\"&quot;express&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" app = express(); \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"app.use(express.json()); \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"function\" class=\"keyword\" /><text value=\" \" /><text value=\"authenticate\" class=\"title\" /><text value=\"(\" /><text value=\"req, res, next\" class=\"params\" /><text value=\") \" /><text value=\"{ \" /><text type=\"break\" /><text value=\"  \" /><text value=\"if\" class=\"keyword\" /><text value=\" (req.body.role === \" /><text value=\"&quot;Admin&quot;\" class=\"string\" /><text value=\") { \" /><text type=\"break\" /><text value=\"    \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;Authenticated&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"    next(); \" /><text type=\"break\" /><text value=\"  } \" /><text value=\"else\" class=\"keyword\" /><text value=\" { \" /><text type=\"break\" /><text value=\"    \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;Unauthorized&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"    res.status(\" /><text value=\"401\" class=\"number\" /><text value=\").send(\" /><text value=\"&quot;Unauthorized&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"  } \" /><text type=\"break\" /><text value=\"} \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"app.use(authenticate); \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"app.listen(\" /><text value=\"3000\" class=\"number\" /><text value=\", () =&gt; { \" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;Server runs on port 3000&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"});\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"323\" endIndex=\"335\" /><option correct=\"false\"><content><text value=\"express\" /></content></option><option startIndex=\"63\" endIndex=\"66\" /><option startIndex=\"66\" endIndex=\"67\" /><option startIndex=\"67\" endIndex=\"70\" /></options></interaction></interactions><output><content><text value=\"Server runs on port 3000\" /><text type=\"break\" /><text value=\"Unauthorized\" /><text type=\"break\" /><text value=\"\" /></content></output></code><p visible-if=\"wrong\">Make sure to pick <code>app</code> followed by <code>.</code> and then <code>use</code>, <code>authenticate</code>.</p></body></html>"
          },
          {
            "title": "Custom Middleware - Copy - Copy - Copy",
            "id": 132764,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>We can chain multiple middleware functions in the route definition.</p><p>Let's use built-in middleware, such as <code>express.json</code>, as an argument along with your custom middleware <code>logRequest</code>.</p><code version=\"2\" codelang=\"javascript\" name=\"app.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" express = \" /><text value=\"require\" class=\"built_in\" /><text value=\"(\" /><text value=\"&quot;express&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" app = express(); \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" logRequest = \" /><text value=\"(\" /><text value=\"req, res, next\" class=\"params\" /><text value=\") =&gt;\" /><text value=\" { \" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"`Incoming request type: \" /><text value=\"${req.method}\" class=\"subst\" /><text value=\"`\" /><text value=\"); \" /><text type=\"break\" /><text value=\" next(); \" /><text type=\"break\" /><text value=\"}; \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"app.post(\" /><text value=\"&quot;/&quot;\" class=\"string\" /><text value=\", express.json(), logRequest, (req, res) =&gt; { \" /><text type=\"break\" /><text value=\" res.send(\" /><text value=\"&quot;Hello from the root route!&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"}); \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"app.listen(\" /><text value=\"3000\" class=\"number\" /><text value=\", () =&gt; { \" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;Server runs on port 3000&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"});\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"190\" endIndex=\"197\" /><option startIndex=\"198\" endIndex=\"202\" /><option startIndex=\"206\" endIndex=\"216\" /></options></interaction></interactions><output><content><text value=\"Server runs on port 3000\" /><text type=\"break\" /><text value=\"Incoming request type: GET\" /></content></output></code><p visible-if=\"wrong\">Make sure to pick <code>express</code>, followed by <code>json</code>, and finally <code>logRequest</code>.</p></body></html>"
          },
          {
            "title": "Custom Middleware - Copy - Copy",
            "id": 132753,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>When passing middleware to a route function we can also use an array.</p><code version=\"2\" codelang=\"javascript\" name=\"app.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" express = \" /><text value=\"require\" class=\"built_in\" /><text value=\"(\" /><text value=\"&quot;express&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" app = express(); \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" logRequest = \" /><text value=\"(\" /><text value=\"req, res, next\" class=\"params\" /><text value=\") =&gt;\" /><text value=\" { \" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"`Incoming request type: \" /><text value=\"${req.method}\" class=\"subst\" /><text value=\"`\" /><text value=\"); \" /><text type=\"break\" /><text value=\" next(); \" /><text type=\"break\" /><text value=\"}; \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"app.post(\" /><text value=\"&quot;/&quot;\" class=\"string\" /><text value=\", [express.json(), logRequest], (req, res) =&gt; { \" /><text type=\"break\" /><text value=\"  res.send(\" /><text value=\"&quot;Hello from the root route!&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"}); \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"app.listen(\" /><text value=\"3000\" class=\"number\" /><text value=\", () =&gt; { \" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;Server runs on port 3000&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"});\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"190\" endIndex=\"191\" /><option startIndex=\"205\" endIndex=\"206\" /><option startIndex=\"217\" endIndex=\"218\" /></options></interaction></interactions><output><content><text value=\"Server runs on port 3000\" /><text type=\"break\" /><text value=\"Incoming request type: GET\" /></content></output></code><p visible-if=\"wrong\">Make sure to pick <code>[</code>, followed by <code>,</code>, and finally <code>]</code>.</p></body></html>"
          },
          {
            "title": "Custom Middleware  -dCopy -",
            "id": 132765,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>The benefit of using an array to group middleware functions in Express is mainly about cleanliness, flexibility, and organization.</p><p>With this structure, we can reuse the <code>middlewares</code> array across multiple routes, promoting cleaner code.</p><code version=\"2\" codelang=\"javascript\" name=\"app.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" express = \" /><text value=\"require\" class=\"built_in\" /><text value=\"(\" /><text value=\"&quot;express&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" app = express(); \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" logRequest = \" /><text value=\"(\" /><text value=\"req, res, next\" class=\"params\" /><text value=\") =&gt;\" /><text value=\" { \" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"`Incoming request type: \" /><text value=\"${req.method}\" class=\"subst\" /><text value=\"`\" /><text value=\"); \" /><text type=\"break\" /><text value=\" next(); \" /><text type=\"break\" /><text value=\"}; \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" middlewares = [express.json(), logRequest]; \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"app.post(\" /><text value=\"&quot;/&quot;\" class=\"string\" /><text value=\", middlewares, (req, res) =&gt; { \" /><text type=\"break\" /><text value=\"  res.send(\" /><text value=\"&quot;Hello from the root route!&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"}); \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"app.put(\" /><text value=\"&quot;/update&quot;\" class=\"string\" /><text value=\", middlewares, (req, res) =&gt; { \" /><text type=\"break\" /><text value=\" res.send(\" /><text value=\"&quot;Update route&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"}); \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"app.listen(\" /><text value=\"3000\" class=\"number\" /><text value=\", () =&gt; { \" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;Server runs on port 3000&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"});\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"176\" endIndex=\"181\" /><option startIndex=\"182\" endIndex=\"193\" /><option startIndex=\"243\" endIndex=\"254\" /><option startIndex=\"342\" endIndex=\"353\" /></options></interaction></interactions><output><content><text value=\"Server runs on port 3000\" /><text type=\"break\" /><text value=\"Incoming request type: GET\" /></content></output></code><p visible-if=\"wrong\">Make sure to pick <code>const</code> followed by <code>middlewares</code> and then <code>middlewares</code>, <code>middlewares</code>.</p></body></html>"
          },
          {
            "title": "Custom Middleware  -dCopy - - Copy",
            "id": 132769,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Middleware is executed in the order they are defined, from left to right.</p><code version=\"2\" codelang=\"javascript\" name=\"app.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" express = \" /><text value=\"require\" class=\"built_in\" /><text value=\"(\" /><text value=\"&quot;express&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" app = express(); \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" logRequest = \" /><text value=\"(\" /><text value=\"req, res, next\" class=\"params\" /><text value=\") =&gt;\" /><text value=\" { \" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"`Incoming request type: \" /><text value=\"${req.method}\" class=\"subst\" /><text value=\"`\" /><text value=\"); \" /><text type=\"break\" /><text value=\" next(); \" /><text type=\"break\" /><text value=\"}; \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" middlewares = [express.json(), logRequest]; \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"app.post(\" /><text value=\"&quot;/&quot;\" class=\"string\" /><text value=\", middlewares, (req, res) =&gt; { \" /><text type=\"break\" /><text value=\"  es.send(\" /><text value=\"&quot;Hello from the root route!&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"}); \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"app.put(\" /><text value=\"&quot;/update&quot;\" class=\"string\" /><text value=\", middlewares, (req, res) =&gt; { \" /><text type=\"break\" /><text value=\" res.send(\" /><text value=\"&quot;Update route&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"}); \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"app.listen(\" /><text value=\"3000\" class=\"number\" /><text value=\", () =&gt; { \" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;Server runs on port 3000&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"});\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"182\" endIndex=\"193\" /><option startIndex=\"243\" endIndex=\"254\" /><option startIndex=\"341\" endIndex=\"352\" /></options></interaction></interactions><output><content><text value=\"Server runs on port 3000\" /><text type=\"break\" /><text value=\"Incoming request type: GET\" /></content></output></code><p visible-if=\"wrong\">Make sure to pick <code>middlewares</code>, followed by <code>middlewares</code>, and finally <code>middlewares</code>.</p></body></html>"
          },
          {
            "title": "Exercise: Custom Middleware",
            "id": 122327,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Finish the code to add the custom authentication middleware.</p><code version=\"2\" codelang=\"javascript\" name=\"app.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" express = \" /><text value=\"require\" class=\"built_in\" /><text value=\"(\" /><text value=\"&quot;express&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" app = express(); \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"app.use(express.json()); \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"function\" class=\"keyword\" /><text value=\" \" /><text value=\"checkReqBody\" class=\"title\" /><text value=\"(\" /><text value=\"req, res, next\" class=\"params\" /><text value=\") \" /><text value=\"{ \" /><text type=\"break\" /><text value=\" \" /><text value=\"if\" class=\"keyword\" /><text value=\" (req.body !== \" /><text value=\"undefined\" class=\"literal\" /><text value=\") { \" /><text type=\"break\" /><text value=\"  \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;Valid request body&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"  next(); \" /><text type=\"break\" /><text value=\" } \" /><text value=\"else\" class=\"keyword\" /><text value=\" { \" /><text type=\"break\" /><text value=\"  \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;Invalid request body&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"  res.status(\" /><text value=\"400\" class=\"number\" /><text value=\").send(\" /><text value=\"&quot;Invalid request body&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\" } \" /><text type=\"break\" /><text value=\"} \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"app.use(checkReqBody); \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"app.listen(\" /><text value=\"3000\" class=\"number\" /><text value=\", () =&gt; { \" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"'Server is running on port 3000.'\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"});\" /></content><interactions><interaction type=\"validatedInput\" isDefault=\"true\" startIndex=\"330\" endIndex=\"342\" /></interactions><output><content><text value=\"Server is running on port 3000\" /><text type=\"break\" /><text value=\"Valid request body\" /></content></output></code><p visible-if=\"wrong\">Make sure to type <code>checkReqBody</code>.</p></body></html>"
          },
          {
            "title": "Lesson #7",
            "id": 132766,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Can you apply multiple middleware functions to a single route?</p><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\">Yes, by passing them as additional individual arguments to the route method or as an array</item><item value=\"2\" correct=\"false\">No, we can only use one middleware function per route</item></selection><p visible-if=\"wrong\">Yes, by passing them as additional individual arguments to the route method or as an array.</p></body></html>"
          },
          {
            "title": "Exercise: Third Party Middleware",
            "id": 122328,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Create an array of middleware and pass it as the second argument of the <code>\"/\"</code> route.</p><code version=\"2\" codelang=\"javascript\" name=\"app.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" express = \" /><text value=\"require\" class=\"built_in\" /><text value=\"(\" /><text value=\"&quot;express&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" app = express(); \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"function\" class=\"keyword\" /><text value=\" \" /><text value=\"blockIP\" class=\"title\" /><text value=\"(\" /><text value=\"req, res, next\" class=\"params\" /><text value=\") \" /><text value=\"{ \" /><text type=\"break\" /><text value=\"  \" /><text value=\"const\" class=\"keyword\" /><text value=\" blockedIPs = [\" /><text value=\"'123.45.67.89'\" class=\"string\" /><text value=\"]; \" /><text type=\"break\" /><text value=\"  \" /><text value=\"const\" class=\"keyword\" /><text value=\" clientIP = req.ip; \" /><text type=\"break\" /><text value=\"   \" /><text type=\"break\" /><text value=\"  \" /><text value=\"if\" class=\"keyword\" /><text value=\" (blockedIPs.includes(clientIP)) { \" /><text type=\"break\" /><text value=\"    res.status(\" /><text value=\"403\" class=\"number\" /><text value=\").send(\" /><text value=\"&quot;Access forbidden&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"  } \" /><text value=\"else\" class=\"keyword\" /><text value=\" { \" /><text type=\"break\" /><text value=\"    next(); \" /><text type=\"break\" /><text value=\"  } \" /><text type=\"break\" /><text value=\"} \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" middleware = [express.json(), blockIP]; \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"app.get(\" /><text value=\"&quot;/&quot;\" class=\"string\" /><text value=\", middleware, (req, res) =&gt; { \" /><text type=\"break\" /><text value=\"  res.send(\" /><text value=\"&quot;Welcome to the site!&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"}); \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"app.listen(\" /><text value=\"3000\" class=\"number\" /><text value=\", () =&gt; { \" /><text type=\"break\" /><text value=\"  \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;Server runs on port 3000&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"});\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"299\" endIndex=\"309\" /><option startIndex=\"293\" endIndex=\"298\" /><option startIndex=\"355\" endIndex=\"365\" /><option startIndex=\"312\" endIndex=\"313\" /><option startIndex=\"327\" endIndex=\"328\" /><option startIndex=\"336\" endIndex=\"337\" /></options></interaction></interactions><output><content><text value=\"Server runs on port 3000\" /></content></output></code><p visible-if=\"wrong\">Make sure to pick <code>const</code> followed by <code>middleware</code> and then <code>[</code>, <code>,</code>, <code>]</code>, <code>middleware</code>.</p></body></html>"
          },
          {
            "title": "Lesson #8",
            "id": 132767,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Can you mix built-in and custom middleware in a single route definition?</p><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\">Yes</item><item value=\"2\" correct=\"false\">No</item></selection><p visible-if=\"wrong\">Make sure to pick Yes.</p></body></html>"
          }
        ]
      }
    ]
  }
}