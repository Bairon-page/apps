{
  "tutorial": {
    "id": 2655,
    "version": 4,
    "type": "challenges",
    "isNew": false,
    "codeLanguage": "python",
    "title": "Object-Oriented Programming",
    "descriptionContent": "Challenges based on Object-Oriented Programming",
    "shortDescriptionContent": "",
    "showInTrack": true,
    "iconBanner": null,
    "chapters": [
      {
        "id": 14688,
        "title": "Fair Ride Age Limit",
        "type": "challengeLevel0",
        "lessons": [
          {
            "title": "Fair Ride Age Limit",
            "id": 129716,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "As a volunteer at a festival, you track the rides being installed. We have a class named `Ride` that stores the name of the ride and the suitable age group. Use instances of that class to track the rides installed today.\n\n1. Create a new instance of the `Ride` class named `roller_coaster` and specify that its name is `Roller coaster` and an `adults` ride.\n2. Create a new instance of the `Ride` class named `ferris_wheel` and specify that its name is `Ferris wheel` and a `kids` ride.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "class Ride:\r\n    def __init__(self, name, age_group):\r\n        self.name = name\r\n        self.age_group = age_group\r\n\r\n\r\nprint(roller_coaster.age_group)\r\nprint(ferris_wheel.name)",
                  "solvedContent": "class Ride:\r\n    def __init__(self, name, age_group):\r\n        self.name = name\r\n        self.age_group = age_group\r\nroller_coaster = Ride(\"Roller coaster\", \"adults\")\r\nferris_wheel = Ride(\"Ferris wheel\", \"kids\")\r\nprint(roller_coaster.age_group)\r\nprint(ferris_wheel.name)"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 14689,
        "title": "Cafe Drink Menu",
        "type": "challengeLevel0",
        "lessons": [
          {
            "title": "Cafe Drink Menu",
            "id": 129717,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "There's a cafe nearby that offers a new variety of beverages every day. We have a `Beverage` class and two instances: `fruity` and `cocoa`. Find out what's in today's drinks.\n\n1. Access the `name` property of the `fruity` beverage and print it to the console.\n2. Access the `is_alcoholic` property of the `cocoa` beverage and print it to the console.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "class Beverage:\r\n    def __init__(self, name, is_alcoholic):\r\n        self.name = name\r\n        self.is_alcoholic = is_alcoholic\r\n\r\nfruity = Beverage(\"Fruit punch\", False)\r\ncocoa = Beverage(\"Hot chocolate\", False)",
                  "solvedContent": "class Beverage:\r\n    def __init__(self, name, is_alcoholic):\r\n        self.name = name\r\n        self.is_alcoholic = is_alcoholic\r\n\r\nfruity = Beverage(\"Fruit punch\", False)\r\ncocoa = Beverage(\"Hot chocolate\", False)\r\nprint(fruity.name)\r\nprint(cocoa.is_alcoholic)"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 14690,
        "title": "Pet Details",
        "type": "challengeLevel0",
        "lessons": [
          {
            "title": "Pet Details",
            "id": 129718,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "You're a pet lover and have different pets at home. Your sibling is visiting you and they can't remember the names of your pets. Finish the `Pet` class to help your sibling associate a pet's name with its properties, like its family or color. \n\n1. Within the `Pet` class, create instance variables `name`, `family`, `animal_type`, and `color` to store the specific information received in the parameters.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "class Pet:\r\n    def __init__(self, name, family, animal_type, color):\r\n        \r\n        \r\nrio = Pet(\"Rio\", \"Macaw\", \"Parrot\", \"Blue\")\r\ncoco = Pet(\"Coco\", \"Poodle\", \"Dog\", \"White\")\r\nbud = Pet(\"Bud\", \"Labrador\", \"Dog\", \"Brown\")\r\ndaisy = Pet(\"Daisy\", \"Burmese\", \"Cat\", \"Grey\")\r\nprint(f\"{rio.name} is a {rio.color} colored {rio.family} {rio.animal_type}\")",
                  "solvedContent": "class Pet:\r\n    def __init__(self, name, family, animal_type, color):\r\n        self.name = name\r\n        self.family = family\r\n        self.animal_type = animal_type\r\n        self.color = color\r\n\r\nrio = Pet(\"Rio\", \"Macaw\", \"Parrot\", \"Blue\")\r\ncoco = Pet(\"Coco\", \"Poodle\", \"Dog\", \"White\")\r\nbud = Pet(\"Bud\", \"Labrador\", \"Dog\", \"Brown\")\r\ndaisy = Pet(\"Daisy\", \"Burmese\", \"Cat\", \"Grey\")\r\nprint(f\"{rio.name} is a {rio.color} colored {rio.family} {rio.animal_type}\")"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 14692,
        "title": "Elevator Instructions",
        "type": "challengeLevel0",
        "lessons": [
          {
            "title": "Elevator Instructions",
            "id": 129720,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "This elevator is telling the people that it's moving, but in reality it always stays in the same floor.\n\n1. Update the `current_floor` property so that the elevator moves whenever it's called to do so.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "class Elevator:\r\n    def __init__(self):\r\n        self.current_floor = 0\r\n\r\n    def go_to_floor(self, floor):\r\n        if self.current_floor == floor:\r\n            print(f\"Elevator is in floor {floor}\")\r\n        else:\r\n            print(f\"Going to floor {floor}\")\r\n\r\nelevator = Elevator()\r\nelevator.go_to_floor(3)\r\nelevator.go_to_floor(3)",
                  "solvedContent": "class Elevator:\r\n    def __init__(self):\r\n        self.current_floor = 0\r\n\r\n    def go_to_floor(self, floor):\r\n        if self.current_floor == floor:\r\n            print(f\"Elevator is in floor {floor}\")\r\n        else:\r\n            print(f\"Going to floor {floor}\")\r\n            self.current_floor = floor\r\n\r\nelevator = Elevator()\r\nelevator.go_to_floor(3)\r\nelevator.go_to_floor(3)"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 14693,
        "title": "Coffee Machine",
        "type": "challengeLevel0",
        "lessons": [
          {
            "title": "Coffee Machine",
            "id": 129721,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Coffee machines can make a limited amount of coffee types.\n\n1. Check if the `coffee_type` is valid for our machine and store the result in the variable `is_valid_coffee_type`. ",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "class CoffeeMachine:\r\n    def __init__(self):\r\n        self.coffee_options = {\"Capuccino\", \"Espresso\"}\r\n        \r\n    def make_coffee(self, coffee_type):\r\n        is_valid_coffee_type = \r\n        if is_valid_coffee_type:\r\n            return f\"{coffee_type} made!\"\r\n        else:\r\n            return f\"{coffee_type} is not a valid option!\"\r\n\r\nmachine = CoffeeMachine()\r\nprint(machine.make_coffee(\"Espresso\"))\r\nprint(machine.make_coffee(\"Moka\"))",
                  "solvedContent": "class CoffeeMachine:\r\n    def __init__(self):\r\n        self.coffee_options = {\"Capuccino\", \"Espresso\"}\r\n        \r\n    def make_coffee(self, coffee_type):\r\n        is_valid_coffee_type = coffee_type in self.coffee_options\r\n        if is_valid_coffee_type:\r\n            return f\"{coffee_type} made!\"\r\n        else:\r\n            return f\"{coffee_type} is not a valid option!\"\r\n\r\nmachine = CoffeeMachine()\r\nprint(machine.make_coffee(\"Espresso\"))\r\nprint(machine.make_coffee(\"Moka\"))"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 14694,
        "title": "Castles",
        "type": "challengeLevel0",
        "lessons": [
          {
            "title": "Castles",
            "id": 129722,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Castles can be made out of different materials, help us describe the class `WoodCastle`.\n\n1. Create the appropriate method to describe `WoodCastle`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "class Castle:\r\n    def description(self):\r\n        return \"This is a generic castle.\"\r\n\r\nclass StoneCastle(Castle):\r\n    def description(self):\r\n        return \"This is a stone castle.\"\r\n\r\nclass WoodCastle(Castle):\r\n\r\nstone_castle = StoneCastle()\r\nstone_castle_description = stone_castle.description()\r\nprint(stone_castle_description)\r\n\r\nwood_castle = WoodCastle()\r\nwood_castle_description = wood_castle.description()\r\nprint(wood_castle_description)\r\n",
                  "solvedContent": "class Castle:\r\n    def description(self):\r\n        return \"This is a generic castle.\"\r\n\r\nclass StoneCastle(Castle):\r\n    def description(self):\r\n        return \"This is a stone castle.\"\r\n\r\nclass WoodCastle(Castle):\r\n    def description(self):\r\n        return \"This is a wood castle\"\r\n\r\nstone_castle = StoneCastle()\r\nstone_castle_description = stone_castle.description()\r\nprint(stone_castle_description)\r\n\r\nwood_castle = WoodCastle()\r\nwood_castle_description = wood_castle.description()\r\nprint(wood_castle_description)\r\n"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 13903,
        "title": "Creating a method",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "Creating a method",
            "id": 123716,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "You love traveling and you explore new destinations every year. To help you stay organized, you've created a `Destination` class that keeps track of travel details for each place you visit.  \n\n1. Create a `detail` method in the `Destination` class which uses all of its properties to return the travel detail in the following format:\n```\nTraveling to <country> by <mode> for 15 <number_of_days>\n```",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "class Destination:\r\n    def __init__(self, country, mode, number_of_days):\r\n        self.country = country\r\n        self.mode = mode\r\n        self.number_of_days = number_of_days\r\n        \r\n    \r\n        \r\ndestination_one = Destination(\"Italy\", \"plane\", 10)\r\ndestination_two = Destination(\"England\", \"plane\", 5)",
                  "solvedContent": "class Destination:\r\n    def __init__(self, country, mode, number_of_days):\r\n        self.country = country\r\n        self.mode = mode\r\n        self.number_of_days = number_of_days\r\n        \r\n    def detail(self):\r\n        return f\"Traveling to {self.country} by {self.mode} for {self.number_of_days} days\"\r\n\r\ndestination_one = Destination(\"Italy\", \"plane\", 10)\r\ndestination_two = Destination(\"England\", \"plane\", 5)"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 13904,
        "title": "Creating multiple methods",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "Creating multiple methods",
            "id": 123717,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "You run a yearly workshop for students. Their data is stored in a class instance with the `is_registered` property initially set to `False`. Create two methods in the `Register` class to allow students to make and cancel registrations as needed.\n\n1. Create a `register_student` class method that sets the `is_registered` property to `True` and returns `<name> is registered!`\n3. Create a `cancel_registration` class method that sets the `is_registered` property to `False` and returns a text in the following format:\n ```\n<name>'s registration canceled!\n```",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "class Register:\r\n def __init__(self, name, is_registered):\r\n  self.name = name\r\n  self.is_registered = is_registered\r\n\r\n\r\n\r\n\r\n\r\n\r\ntooba = Register(\"Tooba\", False)\r\nprint(tooba.register_student())\r\nprint(tooba.cancel_registration())",
                  "solvedContent": "class Register:\r\n def __init__(self, name, is_registered):\r\n  self.name = name\r\n  self.is_registered = is_registered\r\n     \r\n def register_student(self):\r\n  self.is_registered = True\r\n  return f\"{self.name} is registered!\"\r\n     \r\n def cancel_registration(self):\r\n  self.is_registered = False\r\n  return f\"{self.name}'s registration canceled!\"\r\ntooba = Register(\"Tooba\", False)\r\nprint(tooba.register_student())\r\nprint(tooba.cancel_registration())"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 13966,
        "title": "Classes and methods",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "Classes and methods",
            "id": 124062,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "There are many types of boats. Each different type has a different way to prepare for sailing, but every boat has one thing in common. The captain is the first one to prepare for sailing.\n\n1. Fill the class `Sailboat` that stores the amounts of sails the boat has and make the appropriate method so that the Sailboat can prepare to sail! Remember that every boat preparation to sail starts in the same way! You could use the class `Rowboat` as guidance for the challenge.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "class Boat:\r\n    def __init__(self, captain):\r\n        self.captain = captain\r\n\r\n    def prepare_to_sail(self):\r\n        print(f\"Captain {self.captain} is preparing to sail!\")\r\n\r\nclass Rowboat(Boat):\r\n    def __init__(self, captain, row_amount):\r\n        self.captain = captain\r\n        self.row_amount = row_amount\r\n\r\n    def prepare_to_sail(self):\r\n        super().prepare_to_sail()\r\n        print(f\"Preparing {self.row_amount} rows!\")\r\n\r\nclass Sailboat(Boat):\r\n\r\nrowboat = Rowboat(captain=\"Hook\", row_amount=4)\r\nrowboat.prepare_to_sail()\r\n\r\nsailboat = Sailboat(captain=\"Jack Sparrow\", sail_amount=5)\r\nsailboat.prepare_to_sail()",
                  "solvedContent": "class Boat:\r\n    def __init__(self, captain):\r\n        self.captain = captain\r\n\r\n    def prepare_to_sail(self):\r\n        print(f\"Captain {self.captain} is preparing to sail!\")\r\n\r\nclass Rowboat(Boat):\r\n    def __init__(self, captain, row_amount):\r\n        self.captain = captain\r\n        self.row_amount = row_amount\r\n\r\n    def prepare_to_sail(self):\r\n        super().prepare_to_sail()\r\n        print(f\"Preparing {self.row_amount} rows!\")\r\n\r\nclass Sailboat(Boat):\r\n    def __init__(self, captain, sail_amount):\r\n        self.captain = captain\r\n        self.sail_amount = sail_amount\r\n    \r\n    def prepare_to_sail(self):\r\n        super().prepare_to_sail()\r\n        print(f\"Preparing {self.sail_amount} sails!\")\r\n\r\nrowboat = Rowboat(captain=\"Hook\", row_amount=4)\r\nrowboat.prepare_to_sail()\r\n\r\nsailboat = Sailboat(captain=\"Jack Sparrow\", sail_amount=5)\r\nsailboat.prepare_to_sail()"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 13965,
        "title": "Using self",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "Using self",
            "id": 124131,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "A band is a captivating synergy of musical minds, with talented individuals wielding different instruments, crafting harmonies that ignite our souls.\n\n1. Fill the methods `add_musician` that adds a musician to the band and `perform` that let's everyone know the band is starting to perform. Remember for a band to start a performance every musician that belongs to the band has to play its corresponding instrument!\n\n",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "class Musician:\r\n    def __init__(self, name, instrument):\r\n        self.name = name\r\n        self.instrument = instrument\r\n\r\n    def play_instrument(self):\r\n        print(f\"{self.name} is playing the {self.instrument}.\")\r\n\r\nclass Band:\r\n    def __init__(self, name):\r\n        self.name = name\r\n        self.musicians = []\r\n\r\n    def add_musician(self, musician):\r\n\r\n    def perform(self):\r\n        print(f\"{self.name} is starting the performance!\")\r\n\r\nguitarist = Musician(\"John\", \"guitar\")\r\ndrummer = Musician(\"Sarah\", \"drums\")\r\n\r\nband = Band(\"Baangtron\")\r\nband.add_musician(guitarist)\r\nband.add_musician(drummer)\r\n\r\nband.perform()",
                  "solvedContent": "class Musician:\r\n    def __init__(self, name, instrument):\r\n        self.name = name\r\n        self.instrument = instrument\r\n\r\n    def play_instrument(self):\r\n        print(f\"{self.name} is playing the {self.instrument}.\")\r\n\r\nclass Band:\r\n    def __init__(self, name):\r\n        self.name = name\r\n        self.musicians = []\r\n\r\n    def add_musician(self, musician):\r\n        self.musicians.append(musician)\r\n\r\n    def perform(self):\r\n        print(f\"{self.name} is starting the performance!\")\r\n        for musician in self.musicians:\r\n            musician.play_instrument()\r\n\r\nguitarist = Musician(\"John\", \"guitar\")\r\ndrummer = Musician(\"Sarah\", \"drums\")\r\n\r\nband = Band(\"Baangtron\")\r\nband.add_musician(guitarist)\r\nband.add_musician(drummer)\r\n\r\nband.perform()"
                }
              ],
              "hints": []
            }
          }
        ]
      }
    ]
  }
}