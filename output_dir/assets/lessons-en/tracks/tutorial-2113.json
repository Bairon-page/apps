{
  "tutorial": {
    "id": 2113,
    "version": 15,
    "type": "course",
    "isNew": false,
    "codeLanguage": "node",
    "title": "Communicating with an API",
    "descriptionContent": "Learn about APIs. What they are, how they work, and why we use them.",
    "shortDescriptionContent": "",
    "showInTrack": true,
    "iconBanner": null,
    "chapters": [
      {
        "id": 13266,
        "title": "Your First Endpoint",
        "type": "practiceLevel1",
        "lessons": [
          {
            "title": "Intro",
            "id": 119226,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p><em>Application programming interfaces</em>, also known as <code>API</code>, allow communication between two programs.</p><p>They enable one program to send requests and receive responses from another, allowing systems to interact and share data efficiently.</p></body></html>"
          },
          {
            "title": "Intro: Similar real life example I",
            "id": 119237,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Many real-world systems work like an <strong>API</strong>. An API is like a waiter taking your order (<em>request</em>) to the kitchen.</p><p>The kitchen (server) processes it and sends the meal (<em>response</em>) back through the waiter.</p></body></html>"
          },
          {
            "title": "GET",
            "id": 132243,
            "contentType": "interactive",
            "images": [
              {
                "id": "906453c7-49b9-498a-a1e9-217d327dccf9"
              }
            ],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>A common API request is a <code>GET</code> request, like asking the waiter for a menu.</p><p>A <code>GET</code> request asks the server for information. The server then replies with the needed data.</p><img src=\"906453c7-49b9-498a-a1e9-217d327dccf9\" visible-if=\"always\" /></body></html>"
          },
          {
            "title": "Express - Copy",
            "id": 132289,
            "contentType": "interactive",
            "images": [
              {
                "id": "696c8f33-dd3d-4182-b8ae-71f0a5e912e1"
              }
            ],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>We use <strong>Node</strong> to run JavaScript on the server and the <strong>Express</strong> framework to build server functionality, such as requests and responses.</p><p>Express is a popular web framework for Node that simplifies creating servers.</p><img src=\"696c8f33-dd3d-4182-b8ae-71f0a5e912e1\" visible-if=\"always\" /></body></html>"
          },
          {
            "title": "GET requests",
            "id": 119239,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Here's the first endpoint in Express. A lot is happening here, but you already understand this is a <code>GET</code> request.</p><code version=\"2\" codelang=\"javascript\" name=\"app.js\" visible-if=\"always\"><content><text value=\"app.get(\" /><text value=\"&quot;/menu&quot;\" class=\"string\" /><text value=\", (req, res) =&gt; {\" /><text type=\"break\" /><text type=\"break\" /><text value=\"});\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"4\" endIndex=\"7\" /></options></interaction></interactions><output><content><text value=\"Here is your menu!\" /></content></output></code><p visible-if=\"wrong\">Make sure to pick <code>get</code>.</p></body></html>"
          },
          {
            "title": "GET requests - Copy",
            "id": 132301,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>As you know, an API is supposed to return something. Let's do that here as well and send back <code>\"Here is your menu!\"</code>.</p><p>The server sends back a response via <code>res</code>.</p><code version=\"2\" codelang=\"javascript\" name=\"app.js\" visible-if=\"always\"><content><text value=\"app.get(\" /><text value=\"&quot;/menu&quot;\" class=\"string\" /><text value=\", (req, res) =&gt; {\" /><text type=\"break\" /><text value=\" res.send(\" /><text value=\"&quot;Here is your menu!&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\"});\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"43\" endIndex=\"63\" /></options></interaction></interactions><output><content><text value=\"Here is your menu!\" /></content></output></code><p visible-if=\"wrong\">Make sure to pick <code>\"Here is your menu!\"</code>.</p></body></html>"
          },
          {
            "title": "GET requests - Copy",
            "id": 132287,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>The <code>GET</code> in a <code>GET</code> request refers to the HTTP method being used. It's one of several methods used to retrieve data from the server.</p><code version=\"2\" codelang=\"javascript\" name=\"app.js\" visible-if=\"always\"><content><text value=\"app.get(\" /><text value=\"&quot;/menu&quot;\" class=\"string\" /><text value=\", (req, res) =&gt; {\" /><text type=\"break\" /><text value=\" res.send(\" /><text value=\"&quot;Here is your menu!&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\"});\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"4\" endIndex=\"7\" /><option correct=\"false\"><content><text value=\"retrieve\" /></content></option></options></interaction></interactions><output><content><text value=\"Here is your menu!\" /></content></output></code><p visible-if=\"wrong\">Make sure to pick <code>get</code>.</p></body></html>"
          },
          {
            "title": "GET requests 2",
            "id": 132246,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>A <em>route</em> is a path on the server that sends a specific response when requested, like <code>/menu</code> returning a menu.</p><code version=\"2\" codelang=\"javascript\" name=\"app.js\" visible-if=\"always\"><content><text value=\"app.get(\" /><text value=\"&quot;/menu&quot;\" class=\"string\" /><text value=\", (req, res) =&gt; {\" /><text type=\"break\" /><text value=\" res.send(\" /><text value=\"&quot;Here is your menu!&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\"});\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"8\" endIndex=\"15\" /></options></interaction></interactions><output><content><text value=\"Here is your menu!\" /></content></output></code><p visible-if=\"wrong\">Make sure to pick <code>\"/menu\"</code>.</p></body></html>"
          },
          {
            "title": "GET requests 3",
            "id": 132247,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Every endpoint defines a route, like <code>/menu</code>, and has a function that takes <code>req</code> (request) and <code>res</code> (response) to handle the request and reply.</p><code version=\"2\" codelang=\"javascript\" name=\"app.js\" visible-if=\"always\"><content><text value=\"app.get(\" /><text value=\"&quot;/menu&quot;\" class=\"string\" /><text value=\", (req, res) =&gt; {\" /><text type=\"break\" /><text value=\" res.send(\" /><text value=\"&quot;Here is your menu!&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\"});\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"18\" endIndex=\"22\" /><option startIndex=\"23\" endIndex=\"26\" /><option startIndex=\"34\" endIndex=\"37\" /></options></interaction></interactions><output><content><text value=\"Here is your menu!\" /></content></output></code><p visible-if=\"wrong\">Make sure to pick <code>req,</code>, followed by <code>res</code>, and finally <code>res</code>.</p></body></html>"
          },
          {
            "title": "GET requests 4",
            "id": 132248,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>In this example, we don't need to use the <code>req</code> parameter, but we use <code>res</code> to send a response back to the client, like delivering the menu.</p><code version=\"2\" codelang=\"javascript\" name=\"app.js\" visible-if=\"always\"><content><text value=\"app.get(\" /><text value=\"&quot;/menu&quot;\" class=\"string\" /><text value=\", (req, res) =&gt; {\" /><text type=\"break\" /><text value=\" res.send(\" /><text value=\"&quot;Here is your menu!&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\"});\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"23\" endIndex=\"26\" /><option startIndex=\"34\" endIndex=\"37\" /><option startIndex=\"37\" endIndex=\"42\" /></options></interaction></interactions><output><content><text value=\"Here is your menu!\" /></content></output></code><p visible-if=\"wrong\">Make sure to pick <code>res</code>, followed by <code>res</code>, and finally <code>.send</code>.</p></body></html>"
          },
          {
            "title": "Example 1",
            "id": 119248,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Write a <code>GET</code> request.</p><code version=\"2\" codelang=\"javascript\" name=\"app.js\" visible-if=\"always\"><content><text value=\"app.get(\" /><text value=\"&quot;/menu&quot;\" class=\"string\" /><text value=\", (req, res) =&gt; {\" /><text type=\"break\" /><text value=\" res.send(\" /><text value=\"&quot;Here is your menu!&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\"});\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"0\" endIndex=\"3\" /><option startIndex=\"4\" endIndex=\"7\" /></options></interaction></interactions><output><content><text value=\"Here is your menu!\" /></content></output></code><p visible-if=\"wrong\">Make sure to pick <code>app</code>, followed by <code>get</code>.</p></body></html>"
          },
          {
            "title": "Question 1",
            "id": 119227,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>What does <code>API</code> stand for?</p><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\">Application Programming Interface</item><item value=\"2\" correct=\"false\">Assisting Programming Interface</item></selection><p visible-if=\"wrong\">Application Programming Interface.</p></body></html>"
          },
          {
            "title": "Example 2",
            "id": 119249,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Ensure the <code>/menu</code> endpoint sends back a response.</p><code version=\"2\" codelang=\"javascript\" name=\"app.js\" visible-if=\"always\"><content><text value=\"app.get(\" /><text value=\"&quot;/menu&quot;\" class=\"string\" /><text value=\", (req, res) =&gt; { \" /><text type=\"break\" /><text value=\" res.send(\" /><text value=\"&quot;Here is your menu!&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"});\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"35\" endIndex=\"38\" /><option startIndex=\"38\" endIndex=\"39\" /><option startIndex=\"39\" endIndex=\"43\" /></options></interaction></interactions><output><content><text value=\"Here is your menu!\" /></content></output></code><p visible-if=\"wrong\">Make sure to pick <code>res</code>, followed by <code>.</code>, and finally <code>send</code>.</p></body></html>"
          },
          {
            "title": "Question 2",
            "id": 119243,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Here's another real-life example. You fill out an online application form for a bank loan, what is the correct role for each involved party?</p><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\">You are the sender, the online application form is the <code>API</code>, the bank is the receiver</item><item value=\"2\" correct=\"false\">You are the <code>API</code>, the online application form is the sender, the bank is the receiver</item><item value=\"3\" correct=\"false\">You are the sender, the online application form is the receiver, the bank is the <code>API</code></item></selection><p visible-if=\"wrong\">You are the sender, the online application form is the <code>API</code>, the bank is the receiver.</p></body></html>"
          },
          {
            "title": "Example 3",
            "id": 132249,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Define the <code>/menu</code> route.</p><code version=\"2\" codelang=\"javascript\" name=\"app.js\" visible-if=\"always\"><content><text value=\"app.get(\" /><text value=\"&quot;/menu&quot;\" class=\"string\" /><text value=\", (req, res) =&gt; { \" /><text type=\"break\" /><text value=\" res.send(\" /><text value=\"&quot;Here is your menu!&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"});\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"8\" endIndex=\"15\" /><option correct=\"false\"><content><text value=\"&quot;/&quot;\" /></content></option></options></interaction></interactions><output><content><text value=\"Here is your menu!\" /></content></output></code><p visible-if=\"wrong\">Make sure to pick <code>\"/menu\"</code>.</p></body></html>"
          },
          {
            "title": "Question 3",
            "id": 119244,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>How does an <code>API</code> work?</p><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\">It sends the sender's request to the receiver and the receiver's response to the sender</item><item value=\"2\" correct=\"false\">It just connects the sender and receiver and lets them do their thing</item><item value=\"3\" correct=\"false\">It just monitors to make sure sender and receiver are sending messages to each other</item></selection><p visible-if=\"wrong\">It sends the sender's request to the receiver and the receiver's response to the sender.</p></body></html>"
          },
          {
            "title": "Example 4",
            "id": 132250,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Ensure the <code>/menu</code> route can handle a <code>GET</code> request and send a response to the client.</p><code version=\"2\" codelang=\"javascript\" name=\"app.js\" visible-if=\"always\"><content><text value=\"app.get(\" /><text value=\"&quot;/menu&quot;\" class=\"string\" /><text value=\", (req, res) =&gt; { \" /><text type=\"break\" /><text value=\" res.send(\" /><text value=\"&quot;Here is your menu!&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"});\" /></content><interactions><interaction type=\"validatedInput\" isDefault=\"true\" startIndex=\"4\" endIndex=\"7\" /></interactions><output><content><text value=\"Here is your menu!\" /></content></output></code><p visible-if=\"wrong\">Make sure to type <code>get</code>.</p></body></html>"
          }
        ]
      },
      {
        "id": 13269,
        "title": "Starting a server",
        "type": "practiceLevel1",
        "lessons": [
          {
            "title": "APIs",
            "id": 119251,
            "contentType": "interactive",
            "images": [
              {
                "id": "9e38976a-0aca-4e11-8369-1243822de4d5"
              }
            ],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Now that you know what an <code>API</code> is, let's talk about starting your own server.</p><img src=\"9e38976a-0aca-4e11-8369-1243822de4d5\" visible-if=\"always\" /></body></html>"
          },
          {
            "title": "npm init",
            "id": 132302,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Run <code>node app.js</code> in the terminal to start a local server, where app.js is the file containing your server code.</p><p>However, at Mimo, we handle that for you. If you head to the projects section, you can create a new server with a button click.</p><code version=\"2\" codelang=\"bash\" name=\"Console Editor\" visible-if=\"always\"><content><text value=\"node app.js\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"0\" endIndex=\"4\" /><option startIndex=\"5\" endIndex=\"11\" /></options></interaction></interactions><output><content><text value=\"Server is running on port 3000\" /></content></output></code><p visible-if=\"wrong\">Make sure to pick <code>node</code>, followed by <code>app.js</code>.</p></body></html>"
          },
          {
            "title": "Localhost",
            "id": 132258,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p><code>http://localhost:3000</code> refers to the local machine (your computer) running the server on port 3000, allowing you to access the application.</p><p>At Mimo, we handle that for you. We run the server and make it easily accessible for you.</p><code version=\"2\" codelang=\"bash\" name=\"Console Editor\" visible-if=\"always\"><content><text value=\"http://localhost:3000\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"0\" endIndex=\"21\" /></options></interaction></interactions><output><content><text value=\"Server is running on port 3000\" /></content></output></code><p visible-if=\"wrong\">Make sure to pick <code>http://localhost:3000</code>.</p></body></html>"
          },
          {
            "title": "Lesson #18 - Copy - Copy",
            "id": 132253,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Once your server is started, you can use a browser to call an endpoint. To get a response, enter <code>http://localhost:3000/menu</code> in the browser.</p><p>In our case, the server responds with <code>\"Here is your menu!\"</code>.</p><webview version=\"2\" visible-if=\"always\" content=\"&lt;html&gt;&lt;body&gt;&lt;p&gt;Here is your menu!&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;\" /></body></html>"
          },
          {
            "title": "API Tools - Copy",
            "id": 132276,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Browsers can call an API endpoint. However, sometimes, it's more efficient to use an API tester.</p><p>Using an API tester, you define the type of request (such as <code>GET</code>), the endpoint URL, and more. At Mimo, we provide an easy-to-use one.</p><webview version=\"2\" visible-if=\"always\" content=\"&lt;!doctype html&gt;&#xA;&lt;html lang=&quot;en&quot;&gt;&#xA;&lt;head&gt;&#xA;  &lt;meta charset=&quot;UTF-8&quot;&gt;&#xA;  &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;&#xA;  &lt;title&gt;Simple API Tester&lt;/title&gt;&#xA;  &lt;link href=&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.2.2/dist/css/bootstrap.min.css&quot; rel=&quot;stylesheet&quot;&gt;&#xA;  &lt;style&gt;&#xA;    body {&#xA;      padding: 20px;&#xA;    }&#xA;    .response-box {&#xA;      margin-top: 20px;&#xA;      padding: 15px;&#xA;      background-color: #f8f9fa;&#xA;      border-radius: 5px;&#xA;    }&#xA;  &lt;/style&gt;&#xA;&lt;/head&gt;&#xA;&lt;body&gt;&#xA;&#xA;  &lt;div class=&quot;container&quot;&gt;&#xA;    &lt;h1&gt;API Request Tester&lt;/h1&gt;&#xA;&#xA;    &lt;form id=&quot;apiForm&quot;&gt;&#xA;      &lt;div class=&quot;input-group mb-4&quot;&gt;&#xA;        &lt;select class=&quot;form-select flex-grow-0 w-auto&quot; id=&quot;methodSelect&quot;&gt;&#xA;          &lt;option value=&quot;GET&quot; selected&gt;GET&lt;/option&gt;&#xA;          &lt;option value=&quot;POST&quot; disabled&gt;POST&lt;/option&gt;&#xA;          &lt;option value=&quot;PUT&quot; disabled&gt;PUT&lt;/option&gt;&#xA;          &lt;option value=&quot;DELETE&quot; disabled&gt;DELETE&lt;/option&gt;&#xA;        &lt;/select&gt;&#xA;        &lt;input id=&quot;urlInput&quot; required class=&quot;form-control&quot; type=&quot;url&quot; value=&quot;http://localhost:3000/menu&quot; /&gt;&#xA;        &lt;button id=&quot;sendRequest&quot; type=&quot;submit&quot; class=&quot;btn btn-primary&quot;&gt;Send&lt;/button&gt;&#xA;      &lt;/div&gt;&#xA;    &lt;/form&gt;&#xA;&#xA;    &lt;div id=&quot;response&quot; class=&quot;response-box d-none&quot;&gt;&#xA;      &lt;h3&gt;Response&lt;/h3&gt;&#xA;      &lt;br&gt;&#xA;      &lt;p&gt;&lt;strong&gt;Status:&lt;/strong&gt; &lt;span id=&quot;status&quot;&gt;200 OK&lt;/span&gt;&lt;/p&gt;&#xA;      &lt;p&gt;&lt;strong&gt;Response:&lt;/strong&gt; &lt;span id=&quot;responseBody&quot;&gt;200 OK&lt;/span&gt;&lt;/p&gt;&#xA;    &lt;/div&gt;&#xA;  &lt;/div&gt;&#xA;&#xA;  &lt;script&gt;&#xA;    document.getElementById('apiForm').addEventListener('submit', function(e) {&#xA;      e.preventDefault();&#xA;&#xA;      // Get the selected method and URL&#xA;      const method = document.getElementById('methodSelect').value;&#xA;      const url = document.getElementById('urlInput').value;&#xA;&#xA;      if (method === 'GET') {&#xA;        // Simulate a GET request and a simple string response&#xA;        const responseBody = &quot;Here is your menu!&quot;;&#xA;&#xA;        // Display the simulated response&#xA;        document.getElementById('responseBody').innerText = responseBody;&#xA;        document.getElementById('status').innerText = '200 OK';&#xA;        document.getElementById('response').classList.remove('d-none');&#xA;      } else {&#xA;        alert('Only GET requests are supported in this example.');&#xA;      }&#xA;    });&#xA;  &lt;/script&gt;&#xA;&#xA;&lt;/body&gt;&#xA;&lt;/html&gt;&#xA;\" /></body></html>"
          },
          {
            "title": "API Tools",
            "id": 119260,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>If you analyze the response the API tester gives us back, you see a <em>status</em> that is set to <code>200 OK</code>.</p><p>APIs send back a status code to identify if everything went according to plan quickly. <code>200 OK</code> is the standard response for <code>GET</code> requests.</p><webview version=\"2\" visible-if=\"always\" content=\"&lt;!doctype html&gt;&#xA;&lt;html lang=&quot;en&quot;&gt;&#xA;&lt;head&gt;&#xA;  &lt;meta charset=&quot;UTF-8&quot;&gt;&#xA;  &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;&#xA;  &lt;title&gt;Simple API Tester&lt;/title&gt;&#xA;  &lt;link href=&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.2.2/dist/css/bootstrap.min.css&quot; rel=&quot;stylesheet&quot;&gt;&#xA;  &lt;style&gt;&#xA;    body {&#xA;      padding: 20px;&#xA;    }&#xA;    .response-box {&#xA;      margin-top: 20px;&#xA;      padding: 15px;&#xA;      background-color: #f8f9fa;&#xA;      border-radius: 5px;&#xA;    }&#xA;  &lt;/style&gt;&#xA;&lt;/head&gt;&#xA;&lt;body&gt;&#xA;&#xA;  &lt;div class=&quot;container&quot;&gt;&#xA;    &lt;h1&gt;API Request Tester&lt;/h1&gt;&#xA;&#xA;    &lt;form id=&quot;apiForm&quot;&gt;&#xA;      &lt;div class=&quot;input-group mb-4&quot;&gt;&#xA;        &lt;select class=&quot;form-select flex-grow-0 w-auto&quot; id=&quot;methodSelect&quot;&gt;&#xA;          &lt;option value=&quot;GET&quot; selected&gt;GET&lt;/option&gt;&#xA;          &lt;option value=&quot;POST&quot; disabled&gt;POST&lt;/option&gt;&#xA;          &lt;option value=&quot;PUT&quot; disabled&gt;PUT&lt;/option&gt;&#xA;          &lt;option value=&quot;DELETE&quot; disabled&gt;DELETE&lt;/option&gt;&#xA;        &lt;/select&gt;&#xA;        &lt;input id=&quot;urlInput&quot; required class=&quot;form-control&quot; type=&quot;url&quot; value=&quot;http://localhost:3000/menu&quot; /&gt;&#xA;        &lt;button id=&quot;sendRequest&quot; type=&quot;submit&quot; class=&quot;btn btn-primary&quot;&gt;Send&lt;/button&gt;&#xA;      &lt;/div&gt;&#xA;    &lt;/form&gt;&#xA;&#xA;    &lt;div id=&quot;response&quot; class=&quot;response-box d-none&quot;&gt;&#xA;      &lt;h3&gt;Response&lt;/h3&gt;&#xA;      &lt;br&gt;&#xA;      &lt;p&gt;&lt;strong&gt;Status:&lt;/strong&gt; &lt;span id=&quot;status&quot;&gt;200 OK&lt;/span&gt;&lt;/p&gt;&#xA;      &lt;p&gt;&lt;strong&gt;Response:&lt;/strong&gt; &lt;span id=&quot;responseBody&quot;&gt;200 OK&lt;/span&gt;&lt;/p&gt;&#xA;    &lt;/div&gt;&#xA;  &lt;/div&gt;&#xA;&#xA;  &lt;script&gt;&#xA;    document.getElementById('apiForm').addEventListener('submit', function(e) {&#xA;      e.preventDefault();&#xA;&#xA;      // Get the selected method and URL&#xA;      const method = document.getElementById('methodSelect').value;&#xA;      const url = document.getElementById('urlInput').value;&#xA;&#xA;      if (method === 'GET') {&#xA;        // Simulate a GET request and a simple string response&#xA;        const responseBody = &quot;Here is your menu!&quot;;&#xA;&#xA;        // Display the simulated response&#xA;        document.getElementById('responseBody').innerText = responseBody;&#xA;        document.getElementById('status').innerText = '200 OK';&#xA;        document.getElementById('response').classList.remove('d-none');&#xA;      } else {&#xA;        alert('Only GET requests are supported in this example.');&#xA;      }&#xA;    });&#xA;  &lt;/script&gt;&#xA;&#xA;&lt;/body&gt;&#xA;&lt;/html&gt;&#xA;\" /></body></html>"
          },
          {
            "title": "Lesson #11",
            "id": 132274,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>What is the role of the API caller?</p><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\">The program or user making the request to the API</item><item value=\"2\" correct=\"false\">The server receiving the request</item><item value=\"3\" correct=\"false\">The function handling API errors</item></selection><p visible-if=\"wrong\">The program or user making the request to the API.</p></body></html>"
          },
          {
            "title": "Lesson #11",
            "id": 132275,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>How do you start an Express server from the terminal?</p><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\"><code>node app.js</code></item><item value=\"2\" correct=\"false\"><code>npm install</code></item><item value=\"3\" correct=\"false\"><code>express start</code></item></selection><p visible-if=\"wrong\"><code>node app.js</code>.</p></body></html>"
          },
          {
            "title": "Lesson #13",
            "id": 132277,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>What does a status code <code>200 OK</code> mean in an API response?</p><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\">The request was successful, and the server has sent the requested data</item><item value=\"2\" correct=\"false\">The request was invalid</item><item value=\"3\" correct=\"false\">The server cannot find the requested resource</item></selection><p visible-if=\"wrong\">The request was successful, and the server has sent the requested data.</p></body></html>"
          }
        ]
      },
      {
        "id": 13270,
        "title": "Calling an API with fetch",
        "type": "practiceLevel1",
        "lessons": [
          {
            "title": "Intro",
            "id": 119529,
            "contentType": "interactive",
            "images": [
              {
                "id": "51cdb5e9-febe-4d11-a6a4-2f8761c9b60e"
              }
            ],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Now that you know how an API works, it's time to learn how to send a request to it.</p><img src=\"51cdb5e9-febe-4d11-a6a4-2f8761c9b60e\" visible-if=\"always\" /></body></html>"
          },
          {
            "title": "fetch()",
            "id": 119262,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Node has a built-in method for sending requests to APIs: <code>fetch</code>. Try to complete the <code>GET</code> request using <code>fetch</code>.</p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"fetch(\" /><text value=\"&quot;http://localhost:3000/menu&quot;\" class=\"string\" /><text value=\");\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"0\" endIndex=\"5\" /></options></interaction></interactions></code><p visible-if=\"wrong\">Make sure to pick <code>fetch</code>.</p></body></html>"
          },
          {
            "title": "fetch() 2",
            "id": 119343,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p><code>fetch</code> uses <code>GET</code> as default, but we can change the <code>method</code> or explicitly set <code>GET</code>.</p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"fetch(\" /><text value=\"&quot;http://localhost:3000/menu&quot;\" class=\"string\" /><text value=\", { \" /><text type=\"break\" /><text value=\" \" /><text value=\"method\" class=\"attr\" /><text value=\": \" /><text value=\"&quot;GET&quot;\" class=\"string\" /><text value=\" \" /><text type=\"break\" /><text value=\"});\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"0\" endIndex=\"5\" /><option startIndex=\"49\" endIndex=\"52\" /></options></interaction></interactions></code><p visible-if=\"wrong\">Make sure to pick <code>fetch</code>, followed by <code>GET</code>.</p></body></html>"
          },
          {
            "title": "fetch() 2 - Copy",
            "id": 132278,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>When using <code>fetch</code>, we first define the endpoint we want to call.</p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"fetch(\" /><text value=\"&quot;http://localhost:3000/menu&quot;\" class=\"string\" /><text value=\");\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"0\" endIndex=\"5\" /><option startIndex=\"6\" endIndex=\"34\" /></options></interaction></interactions></code><p visible-if=\"wrong\">Make sure to pick <code>fetch</code>, followed by <code>\"http://localhost:3000/menu\"</code>.</p></body></html>"
          },
          {
            "title": "fetch() 2 - Copy - Copy",
            "id": 132279,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Next, we use <code>.then</code> to handle the server's response. Once the request is successful, the callback method is called.</p><p>A callback method is a function you give to another function to be called later.</p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"fetch(\" /><text value=\"&quot;http://localhost:3000/menu&quot;\" class=\"string\" /><text value=\") \" /><text type=\"break\" /><text value=\" .then(\" /><text value=\"(\" /><text value=\"response\" class=\"params\" /><text value=\") =&gt;\" /><text value=\" { });\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"38\" endIndex=\"43\" /><option startIndex=\"44\" endIndex=\"61\" /></options></interaction></interactions><output><content><text value=\"API Request successfully sent!\" /></content></output></code><p visible-if=\"wrong\">Make sure to pick <code>.then</code>, followed by <code>(response) =&gt; { }</code>.</p></body></html>"
          },
          {
            "title": "fetch() 2 - Copy - Copy - Copy",
            "id": 132303,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Once the request is successful, we log the API request successfully sent using the callback method.</p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"fetch(\" /><text value=\"&quot;http://localhost:3000/menu&quot;\" class=\"string\" /><text value=\") \" /><text type=\"break\" /><text value=\" .then(\" /><text value=\"(\" /><text value=\"response\" class=\"params\" /><text value=\") =&gt;\" /><text value=\" { \" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;API Request successfully sent!&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"});\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"62\" endIndex=\"108\" /><option startIndex=\"44\" endIndex=\"59\" /><option startIndex=\"110\" endIndex=\"111\" /></options></interaction></interactions><output><content><text value=\"API Request successfully sent!\" /></content></output></code><p visible-if=\"wrong\">Make sure to pick <code>(response) =&gt; {</code>, followed by <code>console.log(\"API Request successfully sent!\");</code>, and finally <code>}</code>.</p></body></html>"
          },
          {
            "title": "fetch() 2 - Copy - Copy - Copy",
            "id": 132280,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>We receive a <code>response</code> object back. It contains information about the request, such as its status and any data the server returned.</p><p>Log the response object to see what it contains.</p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"fetch(\" /><text value=\"&quot;http://localhost:3000/menu&quot;\" class=\"string\" /><text value=\") \" /><text type=\"break\" /><text value=\" .then(\" /><text value=\"(\" /><text value=\"response\" class=\"params\" /><text value=\") =&gt;\" /><text value=\" { \" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(response); \" /><text type=\"break\" /><text value=\"});\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"62\" endIndex=\"74\" /><option startIndex=\"74\" endIndex=\"82\" /><option startIndex=\"82\" endIndex=\"84\" /></options></interaction></interactions><output><content><text value=\"{type: &quot;cors&quot;, url: &quot;http://localhost:3000/menu&quot;, status: 200, statusText: &quot;OK&quot;, ...}\" /></content></output></code><p visible-if=\"wrong\">Make sure to pick <code>console.log(</code>, followed by <code>response</code>, and finally <code>);</code>.</p></body></html>"
          },
          {
            "title": "Question 3",
            "id": 119346,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>What can we use <code>fetch</code> for?</p><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\">Make API calls to external servers</item><item value=\"2\" correct=\"false\">Accessing local filesystem data<br /></item><item value=\"3\" correct=\"false\">Executing database queries</item><item value=\"4\" correct=\"false\">Manipulating DOM elements</item></selection><p visible-if=\"wrong\">Make API calls to external servers.</p></body></html>"
          },
          {
            "title": "Example 1",
            "id": 119347,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Write the code to send a <code>GET</code> request to <code>/menu</code> endpoint on localhost using <code>fetch</code>.</p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"fetch(\" /><text value=\"&quot;http://localhost:3000/menu&quot;\" class=\"string\" /><text value=\") \" /><text type=\"break\" /><text value=\" .then(\" /><text value=\"(\" /><text value=\"response\" class=\"params\" /><text value=\") =&gt;\" /><text value=\" { \" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;API Request successfully sent!&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"});\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"0\" endIndex=\"5\" /><option startIndex=\"7\" endIndex=\"28\" /><option startIndex=\"28\" endIndex=\"33\" /><option correct=\"false\"><content><text value=\"GET\" /></content></option><option correct=\"false\"><content><text value=\"/users\" /></content></option></options></interaction></interactions><output><content><text value=\"API Request successfully sent!\" /></content></output></code><p visible-if=\"wrong\">Make sure to pick <code>fetch</code>, followed by <code>http://localhost:3000</code>, and finally <code>/menu</code>.</p></body></html>"
          },
          {
            "title": "Lesson #10",
            "id": 132281,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>In the context of <code>fetch</code>, what is the purpose of the <code>.then</code> method?</p><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\">To process the server's response when it's received</item><item value=\"2\" correct=\"false\">To send the request to the server</item><item value=\"3\" correct=\"false\">To check if the server is down</item></selection><p visible-if=\"wrong\">To process the server's response when it's received.</p></body></html>"
          },
          {
            "title": "Example 2",
            "id": 119348,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Write the code to send a <code>GET</code> request to <code>http://localhost:3000/menu</code> using <code>fetch</code>.</p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"fetch(\" /><text value=\"&quot;http://localhost:3000/menu&quot;\" class=\"string\" /><text value=\", { \" /><text type=\"break\" /><text value=\" \" /><text value=\"method\" class=\"attr\" /><text value=\": \" /><text value=\"&quot;GET&quot;\" class=\"string\" /><text value=\" \" /><text type=\"break\" /><text value=\"}).then(\" /><text value=\"(\" /><text value=\"response\" class=\"params\" /><text value=\") =&gt;\" /><text value=\" { \" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;API Request successfully sent!&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"});\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"40\" endIndex=\"46\" /><option startIndex=\"48\" endIndex=\"49\" /><option startIndex=\"49\" endIndex=\"52\" /><option startIndex=\"52\" endIndex=\"53\" /><option correct=\"false\"><content><text value=\"endpoint\" /></content></option></options></interaction></interactions></code><p visible-if=\"wrong\">Make sure to pick <code>method</code> followed by <code>\"</code> and then <code>GET</code>, <code>\"</code>.</p></body></html>"
          },
          {
            "title": "Lesson #11",
            "id": 132282,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Which of the following can be accessed from the <code>response</code> object in a <code>fetch</code> request?</p><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\">The server's status code (e.g., <code>200</code>)</item><item value=\"2\" correct=\"false\">The request method (e.g., <code>GET</code>)</item></selection><p visible-if=\"wrong\">The server's status code (e.g., <code>200</code>).</p></body></html>"
          }
        ]
      }
    ]
  }
}