{
  "tutorial": {
    "id": 1785,
    "version": 9,
    "type": "guidedProjectOptional",
    "isNew": false,
    "codeLanguage": "javascript",
    "title": "Smartphone Display",
    "descriptionContent": "Use your knowledge of classes and subclasses to add a contact function for a game",
    "shortDescriptionContent": "",
    "showInTrack": true,
    "iconBanner": "tutorial-1785-icon-banner.svg",
    "chapters": [
      {
        "id": 11784,
        "title": "Smartphone Display",
        "type": "practiceLevel3",
        "lessons": [
          {
            "title": "Create a class",
            "id": 108505,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Alex is developing a life simulation game and wants to introduce a phone communication feature. We'll help her by introducing a virtual phone device and a smartphone so that the characters can communicate from a distance.\n\nLet's start by creating a phone class for the game's phone communication feature. \n\n1. Assemble a class called `Phone`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "",
                  "solvedContent": "class Phone {}"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Add method to a class",
            "id": 108506,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Now let's create a method so we are able to make calls using our `Phone`.\n\n1. Create a `call()` method in the `Phone` class from the previous exercise.\n2. Give it a parameter named `user`.\n2. Within the `call()` method, add a line that displays the `user` we're calling. The resulting display could look like this for the user `Mom` :\n\n```\nCalling: Mom\n```",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "class Phone {}",
                  "solvedContent": "class Phone {\n  call(user) {\n    console.log(\"Calling: \" + user);\n  }\n}"
                }
              ],
              "hints": [
                {
                  "title": "Hint",
                  "content": "1. The syntax for creating a method is:\n\n```JS\nmethodName(parameter) {\n}\n```"
                }
              ]
            }
          },
          {
            "title": "Smartphone",
            "id": 108513,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "The `extends` keyword is used to create a class that is a child or direct subset of another class. \n\nSmartphones can do everything that phones do, so you can think of Smartphones as subset of a phone.\n\nLet's create a `Smartphone` class.\n\n1. Create a class `Smartphone` that extends `Phone`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "class Phone {\n  call(user) {\n    console.log(\"Calling: \" + user);\n  }\n}",
                  "solvedContent": "class Phone {\n  call(user) {\n    console.log(\"Calling: \" + user);\n  }\n}\nclass Smartphone extends Phone {}"
                }
              ],
              "hints": [
                {
                  "title": "Hint",
                  "content": "1. The syntax for creating an extended class is:\n```JS\nclass className extends extendedClass {\n}\n```"
                }
              ]
            }
          },
          {
            "title": "Video call",
            "id": 108514,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "The `Smartphone` class automatically inherits the methods associated with `Phone`. \n\nHowever, you can still create additional methods in a subset of a class, for example to make video calls.\n\n1. Create a method `videoCall` to make video calls.\n2. Give it the parameter `user`.\n2. Add a line that displays the name of the user the character is video-calling. The resulting display could look like this for the user `Mom` :\n\n```\nFacetiming: Mom\n```",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "class Phone {\n  call(user) {\n    console.log(\"Calling: \" + user);\n  }\n}\nclass Smartphone extends Phone {}",
                  "solvedContent": "class Phone {\n  call(user) {\n    console.log(\"Calling: \" + user);\n  }\n}\nclass Smartphone extends Phone {\n  videoCall(user) {\n    console.log(\"Facetiming: \" + user);\n  }\n}"
                }
              ],
              "hints": [
                {
                  "title": "Hint",
                  "content": "1. The syntax for creating a method is:\n```JS\nmethodName(parameter) {\n}\n```"
                }
              ]
            }
          },
          {
            "title": "New device",
            "id": 108516,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Brandon is a new character in our game. Let's equip him with a smartphone.\n\n1. Create a new object from the `Smartphone` class and store it in a variable called `device`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "class Phone {\n  call(user) {\n    console.log(\"Calling: \" + user);\n  }\n}\nclass Smartphone extends Phone {\n  videoCall(user) {\n    console.log(\"Facetiming: \" + user);\n  }\n}",
                  "solvedContent": "class Phone {\n  call(user) {\n    console.log(\"Calling: \" + user);\n  }\n}\nclass Smartphone extends Phone {\n  videoCall(user) {\n    console.log(\"Facetiming: \" + user);\n  }\n}\nconst device = new Smartphone();"
                }
              ],
              "hints": [
                {
                  "title": "Hint",
                  "content": "1. The syntax for creating an instance of a class is:\n```JS\nconst variableName = new className();\n```"
                }
              ]
            }
          },
          {
            "title": "Inherited method",
            "id": 108517,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Brandon needs to make a call to his mother.\n\n1. Use the method that `device` inherited from the `Phone` class to reach  `\"Mom\"`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "class Phone {\n  call(user) {\n    console.log(\"Calling: \" + user);\n  }\n}\nclass Smartphone extends Phone {\n  videoCall(user) {\n    console.log(\"Facetiming: \" + user);\n  }\n}\nconst device = new Smartphone();",
                  "solvedContent": "class Phone {\n  call(user) {\n    console.log(\"Calling: \" + user);\n  }\n}\nclass Smartphone extends Phone {\n  videoCall(user) {\n    console.log(\"Facetiming: \" + user);\n  }\n}\nconst device = new Smartphone();\ndevice.call(\"Mom\");"
                }
              ],
              "hints": [
                {
                  "title": "Hint",
                  "content": "The inherited method is `call()`."
                }
              ]
            }
          },
          {
            "title": "Specific method",
            "id": 108518,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Brandon and his mother haven't met in a while so they decide to switch to a video call. However, his mother's phone is running out of battery so she told Brandon to make the video call to his Dad instead.\n\n1. Use the `videoCall()` method from the `device` variable with the argument `\"Dad\"`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "class Phone {\n  call(user) {\n    console.log(\"Calling: \" + user);\n  }\n}\nclass Smartphone extends Phone {\n  videoCall(user) {\n    console.log(\"Facetiming: \" + user);\n  }\n}\nconst device = new Smartphone();\ndevice.call(\"Mom\");",
                  "solvedContent": "class Phone {\n  call(user) {\n    console.log(\"Calling: \" + user);\n  }\n}\nclass Smartphone extends Phone {\n  videoCall(user) {\n    console.log(\"Facetiming: \" + user);\n  }\n}\nconst device = new Smartphone();\ndevice.call(\"Mom\");\ndevice.videoCall(\"Dad\");"
                }
              ],
              "hints": []
            }
          }
        ]
      }
    ]
  }
}