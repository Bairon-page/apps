{
  "tutorial": {
    "id": 3146,
    "version": 1,
    "type": "challenges",
    "isNew": true,
    "codeLanguage": "jsx",
    "title": "React Essentials",
    "descriptionContent": "React Essentials",
    "shortDescriptionContent": "",
    "showInTrack": true,
    "iconBanner": null,
    "chapters": [
      {
        "id": 14571,
        "title": "Inline Conditionals",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "Inline Conditionals",
            "id": 129231,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "At the moment `PrintPrice` prints the provided `props.price` of an item. However, if the user is a member, indicated by `props.member`, then 25% of the price is dropped. Let's use a ternary operator to print the different prices.\n\n1. Inside the embedded expression in the `<h1>` element, complete the ternary operator so that:\n    - If the user is a member, then `<h1>` will render `props.price * 0.75`.\n    - Otherwise, the `<h1>` will render `props.price` only.",
              "preselectedFileIndex": 2,
              "hasVisualOutput": true,
              "files": [
                {
                  "name": "index.html",
                  "codeLanguage": "html",
                  "content": "<!doctype html>\n<html lang=\"en\">\n <head>\n  <meta charset=\"utf-8\" />\n  <script type=\"module\" src=\"./index.js\"></script>\n  <link rel=\"stylesheet\" href=\"/index.css\" />\n </head>\n <body>\n  <div id=\"root\"></div>\n </body>\n</html>",
                  "solvedContent": null
                },
                {
                  "name": "index.jsx",
                  "codeLanguage": "jsx",
                  "content": "import React from \"react\";\nimport { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nconst root = createRoot(rootElement);\nroot.render(<App item=\"iPhone\" price=\"799\" member={true} />);",
                  "solvedContent": null
                },
                {
                  "name": "App.jsx",
                  "codeLanguage": "jsx",
                  "content": "import React from \"react\";\nimport \"./App.css\";\n\nconst App = (props) => {\n  return (\n    <div className=\"price_tag\">\n      <div className=\"details\">\n        <h1>${props.member} </h1>\n        <p>{props.item}</p>\n      </div>\n      <div className=\"bar\"></div>\n    </div>\n  );\n};\n\nexport default App;\n",
                  "solvedContent": "import React from \"react\";\nimport \"./App.css\";\n\nconst App = (props) => {\n  return (\n    <div className=\"price_tag\">\n      <div className=\"details\">\n        <h1>${props.member ? props.price * 0.75 : props.price} </h1>\n        <p>{props.item}</p>\n      </div>\n      <div className=\"bar\"></div>\n    </div>\n  );\n};\n\nexport default App;\n"
                },
                {
                  "name": "App.css",
                  "codeLanguage": "css",
                  "content": "   html {\n    font-family: Arial, sans-serif;\n   }\n   h1,h2,h3,h4,h5,h6 {\n    margin-top:0px;\n    margin-bottom:8px;\n   }\n   input, textarea, select, button {\n    border:2px solid rgb(200,200,200);\n    border-radius:16px;\n    background-color:rgb(240,240,240);\n    color:rgb(25,25,25);\n    padding:8px;\n    box-sizing: border-box;\n   }\n   button {\n    cursor:pointer;\n   }\n   button:hover {\n    background-color:rgb(230,230,230);\n   }\n   img {\n    width:100%;\n   }\n   .price_tag {\n    border:2px solid black;\n    padding:8px;\n    box-sizing:border-box;\n   }\n   .details {\n    display:flex;\n    flex-direction:row;\n    justify-content: flex-start;\n    align-items: center;\n    flex-wrap: nowrap;\n    margin-bottom:8px;\n   }\n   .details p, h1 {\n    margin:0px;\n   }\n   .details h1 {\n    margin-right:16px;\n    flex-shrink:0;\n   }\n   .bar {\n    width:75%;\n    height:24px;\n    background-color: black;\n   }",
                  "solvedContent": null
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 14569,
        "title": "Early Return",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "Early Return",
            "id": 129229,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "`Image` can only run if `props.src` is provided. We need an early return to catch cases where `props.src` is not provided.\n\n1. Modify the `if` conditional in the early `return` so that `<p>No Image</p>` is rendered if `props.src` is `null`.",
              "preselectedFileIndex": 2,
              "hasVisualOutput": true,
              "files": [
                {
                  "name": "index.html",
                  "codeLanguage": "html",
                  "content": "<!doctype html>\n<html lang=\"en\">\n <head>\n  <meta charset=\"utf-8\" />\n  <script type=\"module\" src=\"./index.js\"></script>\n  <link rel=\"stylesheet\" href=\"/index.css\" />\n </head>\n <body>\n  <div id=\"root\"></div>\n </body>\n</html>",
                  "solvedContent": null
                },
                {
                  "name": "index.jsx",
                  "codeLanguage": "jsx",
                  "content": "import React from \"react\";\nimport { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nconst root = createRoot(rootElement);\nroot.render(<App />);\n",
                  "solvedContent": null
                },
                {
                  "name": "App.jsx",
                  "codeLanguage": "jsx",
                  "content": "import React from \"react\";\nimport \"./App.css\";\n\nconst App = (props) => {\n  if (props) {\n    return <p>No Image</p>;\n  }\n  return <img src={props.src} />;\n};\n\nexport default App;",
                  "solvedContent": "import React from \"react\";\nimport \"./App.css\";\n\nconst App = (props) => {\n  if (props.src == null) {\n    return <p>No Image</p>;\n  }\n  return <img src={props.src} />;\n};\n\nexport default App;"
                },
                {
                  "name": "App.css",
                  "codeLanguage": "css",
                  "content": "   html {\n     font-family: Arial, sans-serif;\n   }\n   \n   h1,\n   h2,\n   h3,\n   h4,\n   h5,\n   h6 {\n     margin-top: 0px;\n     margin-bottom: 8px;\n   }\n   \n   input,\n   textarea,\n   select,\n   button {\n     border: 2px solid rgb(200, 200, 200);\n     border-radius: 16px;\n     background-color: rgb(240, 240, 240);\n     color: rgb(25, 25, 25);\n     padding: 8px;\n     box-sizing: border-box;\n   }\n   \n   button {\n     cursor: pointer;\n   }\n   \n   button:hover {\n     background-color: rgb(230, 230, 230);\n   }\n   \n   img {\n     width: 100%;\n   }",
                  "solvedContent": null
                }
              ],
              "hints": []
            }
          }
        ]
      }
    ]
  }
}