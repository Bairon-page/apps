{
  "tutorial": {
    "id": 1807,
    "version": 7,
    "type": "guidedProjectOptional",
    "isNew": false,
    "codeLanguage": "javascript",
    "title": "Investment Calculator",
    "descriptionContent": "Use arrow functions to create an investment calculator",
    "shortDescriptionContent": "",
    "showInTrack": true,
    "iconBanner": "tutorial-1807-icon-banner.svg",
    "chapters": [
      {
        "id": 12025,
        "title": "Investment Calculator",
        "type": "practiceLevel3",
        "lessons": [
          {
            "title": "Initial variable",
            "id": 109613,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Let's use an arrow function to create an investment calculator, all in JavaScript.\n\nWe'll begin by creating a variable. \n\n1. Start by initializing a variable `initial` to store a starting investment value of `2000`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "",
                  "solvedContent": "const initial = 2000;"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Interest rate variable",
            "id": 109614,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Next, we'll create a variable to store the interest rate.\n\n1. Initialize a variable `rate` and assign it the value `10`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "",
                  "solvedContent": "const rate = 10;"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Years variable",
            "id": 109616,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Next, store the number of investment years in a variable.\n\n1. Initialize another variable `years` and set the value to `3`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "",
                  "solvedContent": "const years = 3;"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Parameters",
            "id": 109619,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Next, create an arrow function. The arrow function will take in three parameters `init`, `rate` and `time`, representing the input for `initial`, `rate`, and `years`.\n\n1. Initialize a variable `getValue`.\n2. Assign an arrow function to `getValue`.\n3. The arrow function syntax should have `init`, `rate`, and `time` as parameters.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const initial = 2000;\nconst rate = 10;\nconst years = 3;",
                  "solvedContent": "const initial = 2000;\nconst rate = 10;\nconst years = 3;\nconst getValue = (init, rate, time) => {};"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Parameter default values",
            "id": 109620,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "The arrow function's parameters `init`, `rate`, and `time` can be assigned initial values inside the parenthesis of the arrow function.\n\n1. Assign the parameters `init`, `rate`, and `time` values of `0`, `5`, and `0` inside the parenthesis.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const initial = 2000;\nconst rate = 10;\nconst years = 3;\nconst getValue = (init, rate, time) => {};",
                  "solvedContent": "const initial = 2000;\nconst rate = 10;\nconst years = 3;\nconst getValue = (init = 0, rate = 5, time = 0) => {};"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Arrow function variable and expression",
            "id": 109621,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Next, we'll need a variable to store the outcome of the investment calculation.\n\n1. Inside the arrow function, declare a block-scoped variable `value`.\n2. Assign the expression `init + (init * (rate / 100) * time)` to `value`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const initial = 2000;\nconst rate = 10;\nconst years = 3;\nconst getValue = (init = 0, rate = 5, time = 0) => {};",
                  "solvedContent": "const initial = 2000;\nconst rate = 10;\nconst years = 3;\nconst getValue = (init = 0, rate = 5, time = 0) => {\n  const value = init + (init * (rate / 100) * time);\n};"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Return",
            "id": 109622,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Have `getValue` return the outcome of the expression.\n\n1. Within the arrow function, return `value`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const initial = 2000;\nconst rate = 10;\nconst years = 3;\nconst getValue = (init = 0, rate = 5, time = 0) => {\n  const value = init + (init * (rate / 100) * time);\n};",
                  "solvedContent": "const initial = 2000;\nconst rate = 10;\nconst years = 3;\nconst getValue = (init = 0, rate = 5, time = 0) => {\n  const value = init + (init * (rate / 100) * time);\n  return value;\n};"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Calling the function",
            "id": 109624,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Next, use the function by calling it.\n\n1. Call `getValue()`.\n2. Make sure to pass the variables `initial`, `rate`, and `years` as arguments to `getValue()`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const initial = 2000;\nconst rate = 10;\nconst years = 3;\nconst getValue = (init = 0, rate = 5, time = 0) => {\n  const value = init + (init * (rate / 100) * time);\n  return value;\n};",
                  "solvedContent": "const initial = 2000;\nconst rate = 10;\nconst years = 3;\nconst getValue = (init = 0, rate = 5, time = 0) => {\n  const value = init + (init * (rate / 100) * time);\n  return value;\n};\ngetValue(initial, rate, years);"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Console",
            "id": 109625,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "To print out the returned investment value, display it in the console.\n\n1. Wrap `getValue(initial, rate, years)` with a  `console.log()` to display the value of pounds.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const initial = 2000;\nconst rate = 10;\nconst years = 3;\nconst getValue = (init = 0, rate = 5, time = 0) => {\n  const value = init + (init * (rate / 100) * time);\n  return value;\n};\ngetValue(initial, rate, years);",
                  "solvedContent": "const initial = 2000;\nconst rate = 10;\nconst years = 3;\nconst getValue = (init = 0, rate = 5, time = 0) => {\n  const value = init + (init * (rate / 100) * time);\n  return value;\n};\nconsole.log(getValue(initial, rate, years));"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Shortening the code",
            "id": 109623,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Next, let's shorten the code by refactoring `getvalue`. Having the arrow function and expression on the same line allows us to omit curly braces, the `value` variable, and the `return` keyword.\n\n1. Remove the curly braces.\n2. Remove the `value` variable.\n3. Remove the `return` keyword as it is implied in one-liners.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const initial = 2000;\nconst rate = 10;\nconst years = 3;\nconst getValue = (init = 0, rate = 5, time = 0) => ;\nconsole.log(getValue(initial, rate, years));",
                  "solvedContent": "const initial = 2000;\nconst rate = 10;\nconst years = 3;\nconst getValue = (init = 0, rate = 5, time = 0) => init + (init * (rate / 100) *\n  time);\nconsole.log(getValue(initial, rate, years));"
                }
              ],
              "hints": [
                {
                  "title": "Hint",
                  "content": "After refactoring, `getValue` should only contain the expression `init + (init * (rate / 100) * time)` on the same line."
                }
              ]
            }
          }
        ]
      }
    ]
  }
}