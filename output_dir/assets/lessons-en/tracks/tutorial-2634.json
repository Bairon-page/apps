{
  "tutorial": {
    "id": 2634,
    "version": 4,
    "type": "challenges",
    "isNew": false,
    "codeLanguage": "javascript",
    "title": "Objects & ES 6",
    "descriptionContent": "Challenges are more difficult exercises that will test your skills.",
    "shortDescriptionContent": "",
    "showInTrack": true,
    "iconBanner": null,
    "chapters": [
      {
        "id": 14539,
        "title": "Adding properties",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "Adding Properties",
            "id": 129199,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Let's add another property to an object parsed from a JSON string. We'll be updating the object by adding a property to it after we've created the object. \n\n1. Parse the `tajMahalJSON` JSON string and store it into a variable, `tajMahal`, so that we can work with it as a JS object.\n\n3. Display the `takeout` value of the `tajMahal` object.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const tajMahalJSON = '{ \"cuisine\": \"Indian\", \"takeout\": false}';\r\n\r\n",
                  "solvedContent": "const tajMahalJSON = '{ \"cuisine\": \"Indian\", \"takeout\": false}';\r\nconst tajMahal = JSON.parse(tajMahalJSON);\r\nconsole.log(tajMahal.takeout);"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 14540,
        "title": "Updating properties",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "Updating an Object Property",
            "id": 129200,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Let's update the values of existing properties of an object.\n\n1. On a separate line after the object, update the `takeout` property of `tajMahal` to `true`. Do not edit the original value within the object.\n\n2. Display the `tajMahal` object to confirm it has been updated.\n\n3. To prepare the object to be sent to the server, let's create a new variable called `stringTajMahal` and store the stringified version of `tajMahal`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const tajMahal = {\r\n  cuisine: \"Indian\",\r\n  takeout: false,\r\n  starRating: 4.5\r\n};",
                  "solvedContent": "const tajMahal = {\r\n  cuisine: \"Indian\",\r\n  takeout: false,\r\n  starRating: 4.5\r\n};\r\ntajMahal.takeout = true;\r\nconsole.log(tajMahal);\r\nconst stringTajMahal = JSON.stringify(tajMahal);\r\nconsole.log(stringTajMahal);\r\n"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 14541,
        "title": "Accessing properties",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "Use Property Value",
            "id": 129201,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Let's access the value of a property of the object parsed from a JSON string, and use it in a new calculation.\n\n1. Parse the JSON string into a JS object and store it into a new variable, `tajMahal` variable.\n2. Using `const`, create a new variable called `tenRating`, which is equal to the value of the `starRating` property of `tajMahal` multiplied by `2`.\n2. Display the value of `tenRating` to check the result.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const tajMahalJSON = '{ \"cuisine\": \"Indian\", \"takeout\": false, \"starRating\": 4.5}';",
                  "solvedContent": "const tajMahalJSON = '{ \"cuisine\": \"Indian\", \"takeout\": false, \"starRating\": 4.5}';\r\nconst tajMahal = JSON.parse(tajMahalJSON);\r\nconst tenRating = tajMahal.starRating * 2;\r\nconsole.log(tenRating);"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 14542,
        "title": "Hotel Welcome Message",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "Hotel Welcome Message",
            "id": 129202,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "A hotel chain needs to display a welcome message to guests on their new outdoor displays. Write an arrow function that returns a welcome message similar to the below example. You may choose your own welcome message, as long as it is a string. \n\nExample Output:\n```\nHello! Welcome to Terrace Inn & Suites!\n```\n\n1. Declare an arrow function named `checkInMessage` that returns the provided welcome message. Click on the welcome message to copy it and then paste it as a string that's returned by the arrow function.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "index.js",
                  "codeLanguage": "javascript",
                  "content": "console.log(checkInMessage());",
                  "solvedContent": "const checkInMessage = () => \"Hello! Welcome to Terrace Inn & Suites!\";\nconsole.log(checkInMessage());"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 14543,
        "title": "Seasonal Message Addition",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "Seasonal Message Addition",
            "id": 129203,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "The Terrace Inn & Suites general manager would like the arrow function modified to include a `generalMessage` and a `seasonalMessage`.\n\nThe general message will remain the same: `Hello! Welcome to Terrace Inn & Suites`.\n\nPer the general manager's instructions, the seasonal message will be: `Need to cool off? Visit one of our three resort pools!`.\n\nThe arrow function should store these two messages in variables and return the concatenated strings. Don't forget to add a space between them!\n\nExample Output\n```javascript\nHello! Welcome to Terrace Inn & Suites! Need to cool off? Visit one of our three resort pools!\n```\n\n1. Turn the existing arrow function into a multiline arrow function. \n2. Declare and store the provided messages in variables named `generalMessage` and `seasonalMessage`. \n3. Finally, the arrow function should return the two variables concatenated with a space between them. ",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "index.js",
                  "codeLanguage": "javascript",
                  "content": "const challengeGreeting = () => \"Hello! Welcome to Terrace Inn & Suites!\";\r\nconsole.log(challengeGreeting());",
                  "solvedContent": "const challengeGreeting = () => {\n  const generalMessage = \"Hello! Welcome to Terrace Inn & Suites!\";\n  const seasonalMessage =\n    \"Need to cool off? Visit one of our three resort pools!\";\n  return generalMessage + \" \" + seasonalMessage;\n};\nconsole.log(challengeGreeting());"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 14544,
        "title": "Personalized Welcome Message",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "Personalized Welcome Message",
            "id": 129204,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "The general manager has one more improvement. He would like to personalize the message for guests. Modify the arrow function and arrow function body  to incorporate a `name` parameter.\n\nExample Output\n```javascript\nHello, Sarah! Welcome to Terrace Inn & Suites! Need to cool off? Visit one of our three resort pools!\n```\n\n1. First, modify the arrow function to take a `name` parameter. \n2. Next, modify the `generalMessage` variable to incorporate the `name` parameter per the above example.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "index.js",
                  "codeLanguage": "javascript",
                  "content": "const challengeGreeting = () => {\r\n  const generalMessage = \"Welcome to Terrace Inn & Suites!\";\r\n  const seasonalMessage =\r\n    \"Need to cool off? Visit one of our three resort pools!\";\r\n  return generalMessage + \" \" + seasonalMessage;\r\n};\r\nconsole.log(challengeGreeting(\"Sarah\"));",
                  "solvedContent": "const challengeGreeting = (name) => {\n  const generalMessage = \"Hello, \" + name +\n    \"! Welcome to Terrace Inn & Suites!\";\n  const seasonalMessage =\n    \"Need to cool off? Visit one of our three resort pools!\";\n  return generalMessage + \" \" + seasonalMessage;\n};\nconsole.log(challengeGreeting(\"Sarah\"));"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 11641,
        "title": "Methods with parameters",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "Methods with parameters",
            "id": 107101,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Take a look at the `eligible()` function. Its purpose is to return `true` if `volume` is less than or equal to a `maxVolume`. Let's transform that function into an object method.\n\n1. Add a method to `parcel` called `volume`, which returns the value of `length * width * depth` for the object.\n\n2. Transform the `eligible` function into a method with the same name inside of the `parcel` object. The method should only have one parameter `maxVolume` and should call `this.volume()` to get the volume. \n\n3. `console.log()` the result of a call to the `eligible` method of `parcel`, using a value of `100` for `maxVolume`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const parcel = {\n  length: 100,\n  width: 80,\n  depth: 30,\n};\n\nfunction eligible(length, width, depth, maxVolume) {\n  volume = length * width * depth;\n  if (this.volume() <= maxVolume) {\n    return true;\n  } else {\n    return false;\n  }\n}\nconsole.log(eligible(parcel.length, parcel.width, parcel.depth, 100));",
                  "solvedContent": "const parcel = {\n  length: 100,\n  width: 80,\n  depth: 30,\n  volume: function() {\n    return this.length * this.width * this.depth;\n  },\n  eligible: function(maxVolume) {\n    if (this.volume() <= maxVolume) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n};\nconsole.log(parcel.eligible(100));"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 11639,
        "title": "Adding methods",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "Add a method and use",
            "id": 107001,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Let's add a method to our object, which will perform a calculation using the value of another property of the object. Remember that we can refer to the object itself using `this.`.\n\n1. Add a method within the `tajMahal` object (inside the `{` braces `}` )  called `tenRating`, which returns the value of `starRating * 2` for the given object.\n\n2. Next, below the `tajMahal` object (outside the `{` braces `}` ), update the `starRating` of `tajMahal` to `4.1` .\n\n3. Finally, `console.log()` the *result* of calling the `tenRating` method to check the result is as expected.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const tajMahal = {\r\n  cuisine: \"Indian\",\r\n  takeout: false,\r\n  starRating: 4.5,\r\n};",
                  "solvedContent": "const tajMahal = {\r\n  cuisine: \"Indian\",\r\n  takeout: false,\r\n  starRating: 4.5,\r\n  tenRating: function() {\r\n    return this.starRating * 2;\r\n  }\r\n};\r\ntajMahal.starRating = 4.1;\r\nconsole.log(tajMahal.tenRating());"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 11640,
        "title": "More methods",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "Adding more complex methods",
            "id": 107002,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Take a look at the `employee` object. Let's add a method to this object.\n\n1. Add a method called `fullName` . The method should return a string made out of the first name, followed by a space ( `\" \"` ) and the second name (`Amanda Jimenez` in our example).\n\n2. Display the result of calling the `fullName()` method on `employee`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const employee = {\r\n  firstName: \"Amanda\",\r\n  secondName: \"Jimenez\"\r\n};",
                  "solvedContent": "const employee = {\n  firstName: \"Amanda\",\n  secondName: \"Jimenez\",\n  fullName: function() {\n    return this.firstName + \" \" + this.secondName;\n  }\n};\nconsole.log(employee.fullName());"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 11638,
        "title": "Access and use a property",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "Access and compare property",
            "id": 107000,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "We want to see if the `cuisine` of `tajMahal` is in `preferredCuisines` .\n\n1. Using `const`, create a variable called `inPreferred`, which checks if `preferredCuisines` includes the `cuisine` value for `tajMahal` .  \n\n  Hint: use the `.includes()` array method on `preferredCuisines`, which will return `true` if the specified value is in it.\n\n2. Display `inPreferred` to check the result.\n\n",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const tajMahal = {\r\n  cuisine: \"Indian\",\r\n  takeout: false,\r\n  starRating: 4.5\r\n};\r\nconst preferredCuisines = [\"Chinese\", \"Italian\", \"Turkish\"];",
                  "solvedContent": "const tajMahal = {\r\n  cuisine: \"Indian\",\r\n  takeout: false,\r\n  starRating: 4.5\r\n};\r\nconst preferredCuisines = [\"Chinese\", \"Italian\", \"Turkish\"];\r\nconst inPreferred = preferredCuisines.includes(tajMahal.cuisine);\r\nconsole.log(inPreferred);"
                }
              ],
              "hints": []
            }
          }
        ]
      }
    ]
  }
}