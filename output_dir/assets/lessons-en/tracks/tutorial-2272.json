{
  "tutorial": {
    "id": 2272,
    "version": 1,
    "type": "practiceOptional",
    "isNew": false,
    "codeLanguage": "javascript",
    "title": "Synchrony and Asynchrony in JS",
    "descriptionContent": "Synchrony and Asynchrony in JS",
    "shortDescriptionContent": "",
    "showInTrack": true,
    "iconBanner": null,
    "chapters": [
      {
        "id": 13429,
        "title": "Synchrony and Asynchrony in JS",
        "type": "practiceLevel3",
        "lessons": [
          {
            "title": "Code 1/.filter()",
            "id": 120809,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Complete `divisibleByThree` using the `.filter(callback)` method on the `arr` array.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const arr = [3, 5, 6, 8, 9, 11, 12, 14, 15];\nconst callback = (num) => num % 3 === 0;\nlet divisibleByThree = null;\n\nfunction doMath() {\n divisibleByThree =    (callback);\n return divisibleByThree;\n}\ndoMath();\nconsole.log(divisibleByThree);\nconsole.log(\"These numbers are divisible by 3\");",
                  "solvedContent": "const arr = [3, 5, 6, 8, 9, 11, 12, 14, 15];\nconst callback = (num) => num % 3 === 0;\nlet divisibleByThree = null;\n\nfunction doMath() {\n divisibleByThree = arr.filter(callback);\n return divisibleByThree;\n}\ndoMath();\nconsole.log(divisibleByThree);\nconsole.log(\"These numbers are divisible by 3\");"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Code 2/.map()",
            "id": 120810,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Finish the syntax reassigning the value of `newArray`. Use the method `.map()` on the array `arr`. Use `tripleTheNum` for the callback function of `.map()`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const arr = [1, 2, 3, 4, 5];\nconst tripleTheNum = (num) => num * 3;\nlet newArray = null;\nfunction doMath() {\n newArray = ();\n return newArray;\n}\ndoMath();\nconsole.log(newArray);\nconsole.log(\"The values in the array have been tripled\");",
                  "solvedContent": "const arr = [1, 2, 3, 4, 5];\nconst tripleTheNum = (num) => num * 3;\nlet newArray = null;\nfunction doMath() {\n newArray = arr.map(tripleTheNum);\n return newArray;\n}\ndoMath();\nconsole.log(newArray);\nconsole.log(\"The values in the array have been tripled\");"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Code 3/Callback",
            "id": 120814,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Pass the name `\"Rachel\"` as a parameter of `sayHello` and use the callback function `sayGoodbye()` for the `callback` parameter.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "function sayHello(name, callback) {\n console.log(`Hello, ${name}!`);\n callback();\n}\n\nfunction sayGoodbye() {\n console.log(\"Goodbye!\");\n}\nsayHello();",
                  "solvedContent": "function sayHello(name, callback) {\n console.log(`Hello, ${name}!`);\n callback();\n}\n\nfunction sayGoodbye() {\n console.log(\"Goodbye!\");\n}\nsayHello(\"Rachel\", sayGoodbye);"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Code 4/Asynchronous Callback",
            "id": 120812,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "The `setTimeout()` method is asynchronous. Finish the console logs with the strings `first` and `last` so the output appears in the correct order. The output should appear as follow:\n\n```\nExecuted first\nExecuted last\n```",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "function callbackFunc() {\n console.log(\"Executed \");\n}\nsetTimeout(callbackFunc, 1500);\nconsole.log(\"Executed \");",
                  "solvedContent": "function callbackFunc() {\n console.log(\"Executed last\");\n}\nsetTimeout(callbackFunc, 1500);\nconsole.log(\"Executed first\");"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Code 5/Custom Callback",
            "id": 120813,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Invoke `doSomeMath`. Use any positive integer between `1` and `1000` for the first argument. Use `multiplyCallback()` for the second argument.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "function multiplyCallback(num) {\n const result = num * 5;\n console.log(\n  `The custom callback function gives ${result} as the result.`);\n}\n\nfunction doSomeMath(input, callback) {\n console.log(\"We're multiplying the input by 5.\");\n callback(input);\n}\n",
                  "solvedContent": "function multiplyCallback(num) {\n const result = num * 5;\n console.log(\n  `The custom callback function gives ${result} as the result.`);\n}\n\nfunction doSomeMath(input, callback) {\n console.log(\"We're multiplying the input by 5.\");\n callback(input);\n}\ndoSomeMath(2, multiplyCallback);"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Code 6/ES6 Callback",
            "id": 120811,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Rewrite the customized `sayHello` callback function using ES6 arrow function syntax. Don't change the name or order of the parameters or the console logs.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "function sayHello(name, callback) {\n console.log(`Hello, ${name}!`);\n callback();\n}\nconst sayGoodbye = () => console.log(\"Goodbye!\");\nsayHello(\"Sam\", sayGoodbye);",
                  "solvedContent": "const sayHello = (name, callback) => {\n console.log(`Hello, ${name}!`);\n callback();\n};\nconst sayGoodbye = () => console.log(\"Goodbye!\");\nsayHello(\"Sam\", sayGoodbye);"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Code 7/Aynchronous Callback 2",
            "id": 120815,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Use the `reverseCallback` as the first argument for the asynchronous method `setTimeout()`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const word = \"enola\";\n\nfunction reverseCallback() {\n const result = word.split(\"\").reverse().join(\"\");\n console.log(`The string reversed is: \"${result}\"`);\n console.log(\"Executed last because we're using asynchronous code.\");\n}\nsetTimeout( , 1500);\nconsole.log('Executed first');",
                  "solvedContent": "const word = \"enola\";\n\nfunction reverseCallback() {\n const result = word.split(\"\").reverse().join(\"\");\n console.log(`The string reversed is: \"${result}\"`);\n console.log(\"Executed last because we're using asynchronous code.\");\n}\nsetTimeout(reverseCallback, 1500);\nconsole.log('Executed first');"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 13430,
        "title": "Timeout and Intervals in JS",
        "type": "practiceLevel3",
        "lessons": [
          {
            "title": "Code 1",
            "id": 120826,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Add the syntax to order dessert with a `1000` millisecond delay.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "(() => {\n console.log(\"Dessert\");\n}, );\nconsole.log(\"Starters\");",
                  "solvedContent": "setTimeout(() => {\n console.log(\"Dessert\");\n}, 1000);\nconsole.log(\"Starters\");"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Code 2",
            "id": 120827,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Invoke `setTimeout()` with the `callbackFunc` and a `500` millisecond delay.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const callbackFunc = () => {\n console.log(\"I am the callback\");\n };\n\n ",
                  "solvedContent": "const callbackFunc = () => {\n console.log(\"I am the callback\");\n };\nsetTimeout(callbackFunc, 500);"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Code 3",
            "id": 120828,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Invoke `setTimeout()` with the callback function and the default `delay` parameter",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "function callback() {\n console.log(\"The callback was executed as soon as possible\");\n}\nsetTimeout();",
                  "solvedContent": "function callback() {\n console.log(\"The callback was executed as soon as possible\");\n}\nsetTimeout(callback, 0);"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Code 4",
            "id": 120829,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Invoke `setInterval()` with the `callback` function and a `300` millisecond interval. Save the return value in the `intervalID` variable.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const callback = () => console.log(\"Flash\");\nconst intervalID = ;\nsetTimeout(() => {\n clearInterval(intervalID);\n console.log(\"Stopped the paparazzi\");\n}, 1500);",
                  "solvedContent": "const callback = () => console.log(\"Flash\");\nconst intervalID = setInterval(callback, 300);\nsetTimeout(() => {\n clearInterval(intervalID);\n console.log(\"Stopped the paparazzi\");\n}, 1500);"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Code 5",
            "id": 120831,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Your friends are texting you too often, let's stop the notifications from the group chat. In `setTimeout()` use `clearInterval()` to stop `setInterval()` from executing its callback. Give it `intervalID` as an argument.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "function callback() {\n console.log(\"New Message\");\n}\nconst intervalID = setInterval(callback, 500);\nsetTimeout(() => {\n  ();\n   console.log(\"Muted chat\");\n}, 1500);",
                  "solvedContent": "function callback() {\n console.log(\"New Message\");\n}\nconst intervalID = setInterval(callback, 500);\nsetTimeout(() => {\n clearInterval(intervalID);\n console.log(\"Muted chat\");\n}, 1500);"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Code 6",
            "id": 120832,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "After 2 bets, the `clearInterval` will stop the betting options on a betting website. In the body of the `start()` function, reassign `intervalID` to the return value of `setInterval()`. Use the `makeBet` function and `500` milliseconds for arguments.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "let count = 0;\nlet intervalID = null;\n\nfunction makeBet() {\n if (count < 2) {\n  count++;\n  console.log(\"New Bet\");\n } else {\n  clearInterval(intervalID);\n  console.log(\"The interval was cleared after 2 bets\");\n }\n}\n\nfunction start() {\n\n \n}\nstart();",
                  "solvedContent": "let count = 0;\nlet intervalID = null;\n\nfunction makeBet() {\n if (count < 2) {\n  count++;\n  console.log(\"New Bet\");\n } else {\n  clearInterval(intervalID);\n  console.log(\"The interval was cleared after 2 bets\");\n }\n}\n\nfunction start() {\n intervalID = setInterval(makeBet, 500);\n}\nstart();"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Code 7",
            "id": 120830,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "In an Auction Sale, the system checks the offers from users every `400` milliseconds. Save the return value of the `setInterval()` method in a `const` variable named `intervalID` so that we can use it in the `clearInterval` method.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const checkOffer = () => console.log(\"New Offer\");\n setInterval(checkOffer, 400);\nsetTimeout(() => {\n clearInterval(intervalID);\n console.log(\"Stop offers after 1300 ms.\");\n}, 1300);",
                  "solvedContent": "const checkOffer = () => console.log(\"New Offer\");\nconst intervalID = setInterval(checkOffer, 400);\nsetTimeout(() => {\n clearInterval(intervalID);\n console.log(\"Stop offers after 1300 ms.\");\n}, 1300);"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Code 8",
            "id": 120833,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "A wildlife tracking application checks the animals' locations to make sure they are safe in their designated spots twice a day. In the custom `checkLocation()` function, terminate `setInterval()` inside the `else` statement.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "let count = 0;\nlet intervalID = null;\n\nfunction checkLocation() {\n if (count < 2) {\n  count++;\n  console.log(\"Track Lions\");\n } else {\n   ();\n  console.log(\"Turn off tracking\");\n }\n}\n\nfunction start() {\n intervalID = setInterval(checkLocation, 500);\n}\nstart();",
                  "solvedContent": "let count = 0;\nlet intervalID = null;\n\nfunction checkLocation() {\n if (count < 2) {\n  count++;\n  console.log(\"Track Lions\");\n } else {\n  clearInterval(intervalID);\n  console.log(\"Turn off tracking\");\n }\n}\n\nfunction start() {\n intervalID = setInterval(checkLocation, 500);\n}\nstart();"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 13425,
        "title": "Waiting in JS",
        "type": "practiceLevel3",
        "lessons": [
          {
            "title": "Code: Creating a Promise Object",
            "id": 120741,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Create an empty promise using the `Promise` constructor method. Assign it to the `promise` variable. Finally, pass an empty function to the constructor method that has two parameters `resolve` and `reject`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "let promise",
                  "solvedContent": "let promise = new Promise(function(resolve, reject) {});"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Code: Burger Sandwich",
            "id": 120742,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Check if the `burgerSandwich` has onion. If `true`, reverse it to `false`. Then,  resolve the new onion value inside the `if` condition.\n",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const burgerSandwich = {\n pattySource: 'chicken',\n tomato: true,\n lettuce: true,\n onion: true,\n cheese: true\n};\n\nfunction customizeOrder() {\n return new Promise(function(resolve) {\n\n  \n });\n}\ncustomizeOrder();",
                  "solvedContent": "const burgerSandwich = {\n pattySource: 'chicken',\n tomato: true,\n lettuce: true,\n onion: true,\n cheese: true\n};\n\nfunction customizeOrder() {\n return new Promise(function(resolve) {\n  if (burgerSandwich.onion) {\n   burgerSandwich.onion = false;\n   resolve(burgerSandwich.onion);\n  }\n });\n}\ncustomizeOrder();"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Code: The \"A\" Gift",
            "id": 120757,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Write code to check if the grade is `A` and resolve with a message of your choice. If the grade is different from `A`, reject with a message different from the resolve message.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const grade = 'A';\n\nfunction giftBuyDecision() {\n return new Promise(function(resolve, reject) {\n    \n });\n}\ngiftBuyDecision();",
                  "solvedContent": "const grade = 'A';\n\nfunction giftBuyDecision() {\n return new Promise(function(resolve, reject) {\n  if (grade === 'A') {\n   resolve(\"Excellent work...\");\n  } else {\n   reject(\"Maybe next semester...\");\n  }\n });\n}\ngiftBuyDecision();"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Code: Find the Intruder Data Type",
            "id": 120758,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Complete the `.then` to print the resolved message and after that, complete the `.catch` method to print the rejected message. ",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const data = ['Hello', 'foo', 'bar', 7, 'smith'];\nconst intruder = data.find((i) => typeof i !== 'string');\n\nfunction checkIfIntruderFound() {\n return new Promise(function(resolve, reject) {\n  if (intruder) {\n   resolve(`Intruder has been found. It is item ${intruder}`);\n  } else {\n   reject(\"Intruder not found..\");\n  }\n });\n}\n\nfunction callOutTheIntruder() {\n checkIfIntruderFound(\n  .then(function() {\n  console.log(result);\n }).catch(function() {\n  consle.log(error);\n });\n}\ncallOutTheIntruder();",
                  "solvedContent": "const data = ['Hello', 'foo', 'bar', 7, 'smith'];\nconst intruder = data.find((i) => typeof i !== 'string');\n\nfunction checkIfIntruderFound() {\n return new Promise(function(resolve, reject) {\n  if (intruder) {\n   resolve(`Intruder has been found. It is item ${intruder}`);\n  } else {\n   reject(\"Intruder not found..\");\n  }\n });\n}\n\nfunction callOutTheIntruder() {\n checkIfIntruderFound()\n   .then(function(result) {\n  console.log(result);\n }).catch(function(error) {\n  consle.log(error);\n });\n}\ncallOutTheIntruder();"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Code: Wash the Dishes",
            "id": 120759,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Chain the `putDishesAway` function with the display function using the `.then` method. After that, add `.catch` to the chain.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "let cleanDishes = [false, false];\nlet allClean = false;\n\nfunction loadDishwasher() {\n return new Promise(function(resolve) {\n  for (let i = 0; i < cleanDishes.length; i++) {\n   if (!cleanDishes[i]) {\n    cleanDishes[i] = true;\n   }\n  }\n  setTimeout(function() {\n   allClean = true;\n   console.log(\n    `All ${cleanDishes.length} dishes are now clean...`);\n   resolve(allClean);\n  }, 1000);\n });\n}\n\nfunction putDishesAway(areAllDishesClean) {\n return new Promise(function(resolve, reject) {\n  if (areAllDishesClean) {\n   setTimeout(function() {\n    resolve(\"No more dishes to wash.\");\n   }, 1000);\n  } else {\n   setTimeout(function() {\n    reject(\"Some dishes are not clean yet.\");\n   }, 1000);\n  }\n });\n}\n\nfunction startDishWashingProcess() {\n return loadDishwasher()\n .then(function(allDishesClean) {\n  return putDishesAway(allDishesClean)\n  .(function(result) {\n   console.log(result);\n  }).(function(error) {\n   console.log(error);\n  });\n });\n}\nstartDishWashingProcess();",
                  "solvedContent": "let cleanDishes = [false, false];\nlet allClean = false;\n\nfunction loadDishwasher() {\n return new Promise(function(resolve) {\n  for (let i = 0; i < cleanDishes.length; i++) {\n   if (!cleanDishes[i]) {\n    cleanDishes[i] = true;\n   }\n  }\n  setTimeout(function() {\n   allClean = true;\n   console.log(\n    `All ${cleanDishes.length} dishes are now clean...`);\n   resolve(allClean);\n  }, 1000);\n });\n}\n\nfunction putDishesAway(areAllDishesClean) {\n return new Promise(function(resolve, reject) {\n  if (areAllDishesClean) {\n   setTimeout(function() {\n    resolve(\"No more dishes to wash.\");\n   }, 1000);\n  } else {\n   setTimeout(function() {\n    reject(\"Some dishes are not clean yet.\");\n   }, 1000);\n  }\n });\n}\n\nfunction startDishWashingProcess() {\n return loadDishwasher()\n .then(function(allDishesClean) {\n  return putDishesAway(allDishesClean)\n  .then(function(result) {\n   console.log(result);\n  }).catch(function(error) {\n   console.log(error);\n  });\n });\n}\nstartDishWashingProcess();"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Code: An async function",
            "id": 120772,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Make the `prepareDinner` function asynchronous.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "function prepareDinner() {\n setTimeout(function() {\n  console.log(\"Dinner is prepared...\");\n }, 1000);\n}\nprepareDinner();",
                  "solvedContent": "async function prepareDinner() {\n setTimeout(function() {\n  console.log(\"Dinner is prepared...\");\n }, 1000);\n}\nprepareDinner();"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Code: Wait for the bus",
            "id": 120773,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Convert the `boardTheBus` into an async function. Then, use `await` to make the `message` variable wait until `waitForBusArrival` resolves.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const randomWaitTime = Math.floor(Math.random() * 1000);\nlet waitForBusArrival = new Promise((resolve, reject) => {\n setTimeout(() => resolve(\n  \"The bus has finally arrived! Now boarding..\"), randomWaitTime);\n});\n\nfunction boardTheBus() {\n let message;\n console.log(message);\n}\nboardTheBus();",
                  "solvedContent": "const randomWaitTime = Math.floor(Math.random() * 1000);\nlet waitForBusArrival = new Promise((resolve, reject) => {\n setTimeout(() => resolve(\n  \"The bus has finally arrived! Now boarding..\"), randomWaitTime);\n});\nasync function boardTheBus() {\n let message = await waitForBusArrival;\n console.log(message);\n}\nboardTheBus();"
                }
              ],
              "hints": []
            }
          }
        ]
      }
    ]
  }
}