{
  "tutorial": {
    "id": 2894,
    "version": 4,
    "type": "guidedProject",
    "isNew": false,
    "codeLanguage": "javascript",
    "title": "Blackjack - Part 1",
    "descriptionContent": "In Blackjack, we'll use what we've learned so far to build our own version of the classic card game",
    "shortDescriptionContent": "",
    "showInTrack": true,
    "iconBanner": "tutorial-2894-icon-banner.svg",
    "chapters": [
      {
        "id": 14985,
        "title": "Chapter #1",
        "type": "practiceLevel3",
        "lessons": [
          {
            "title": "Lesson #1",
            "id": 132125,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Welcome to the **Blackjack** project. In this project, we will our version of the classic card game, Blackjack.\n\nWe'll use an array of objects, each representing a card and its value in blackjack.\n\n1. Declare a `cards` variable that holds an array.\n2. Add the first card, an object that has two attributes with `rank` and `value`. For the first card set the `rank` to `\"2\"` and the `value` to `2`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "app.js",
                  "codeLanguage": "javascript",
                  "content": "",
                  "solvedContent": "const cards = [{\n  rank: '2',\n  value: 2\n}];"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Lesson #1 - Copy",
            "id": 132212,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "We need to add the remaining cards to the cards array.\n\n1. Add objects for the remaining cards to the array `cards`.\n   - An object for the card with the rank `\"3\"` and the value `3`.\n   - An object for the card with the rank `\"4\"` and the value `4`.\n   - An object for the card with the rank `\"5\"` and the value `5`.\n   - An object for the card with the rank `\"6\"` and the value `6`.\n   - An object for the card with the rank `\"7\"` and the value `7`.\n   - An object for the card with the rank `\"8\"` and the value `8`.\n   - An object for the card with the rank `\"9\"` and the value `9`.\n   - An object for the card with the rank `\"10\"` and the value `10`.\n   - An object for the card with the rank `\"J\"` and the value `10`.\n   - An object for the card with the rank `\"Q\"` and the value `10`.\n   - An object for the card with the rank `\"K\"` and the value `10`.\n   - An object for the card with the rank `\"A\"` and the value `11`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "app.js",
                  "codeLanguage": "javascript",
                  "content": "const cards = [{\n  rank: '2',\n  value: 2\n}];",
                  "solvedContent": "const cards = [{\n  rank: '2',\n  value: 2\n}, {\n  rank: '3',\n  value: 3\n}, {\n  rank: '4',\n  value: 4\n}, {\n  rank: '5',\n  value: 5\n}, {\n  rank: '6',\n  value: 6\n}, {\n  rank: '7',\n  value: 7\n}, {\n  rank: '8',\n  value: 8\n}, {\n  rank: '9',\n  value: 9\n}, {\n  rank: '10',\n  value: 10\n}, {\n  rank: 'J',\n  value: 10\n}, {\n  rank: 'Q',\n  value: 10\n}, {\n  rank: 'K',\n  value: 10\n}, {\n  rank: 'A',\n  value: 11\n}];"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Lesson #2",
            "id": 132126,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "We need a function to draw a card from our deck randomly.\n\n1. Create a `drawCard` function that takes no argument.\n2. The function should return a random card from our `cards` array. You can use the `Math.random` function to generate a random index for the array. If you need further help, try asking our AI support. You got this!",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "app.js",
                  "codeLanguage": "javascript",
                  "content": "const cards = [{\n  rank: '2',\n  value: 2\n}, {\n  rank: '3',\n  value: 3\n}, {\n  rank: '4',\n  value: 4\n}, {\n  rank: '5',\n  value: 5\n}, {\n  rank: '6',\n  value: 6\n}, {\n  rank: '7',\n  value: 7\n}, {\n  rank: '8',\n  value: 8\n}, {\n  rank: '9',\n  value: 9\n}, {\n  rank: '10',\n  value: 10\n}, {\n  rank: 'J',\n  value: 10\n}, {\n  rank: 'Q',\n  value: 10\n}, {\n  rank: 'K',\n  value: 10\n}, {\n  rank: 'A',\n  value: 11\n}];",
                  "solvedContent": "const cards = [{\n  rank: '2',\n  value: 2\n}, {\n  rank: '3',\n  value: 3\n}, {\n  rank: '4',\n  value: 4\n}, {\n  rank: '5',\n  value: 5\n}, {\n  rank: '6',\n  value: 6\n}, {\n  rank: '7',\n  value: 7\n}, {\n  rank: '8',\n  value: 8\n}, {\n  rank: '9',\n  value: 9\n}, {\n  rank: '10',\n  value: 10\n}, {\n  rank: 'J',\n  value: 10\n}, {\n  rank: 'Q',\n  value: 10\n}, {\n  rank: 'K',\n  value: 10\n}, {\n  rank: 'A',\n  value: 11\n}];\n\nfunction drawCard() {\n  return cards[Math.floor(Math.random() * cards.length)];\n}"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Lesson #2 - Copy",
            "id": 132214,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "We'll use `@mimo-org/input` to capture the user's input.\n\n1. At the top of the file, declare a variable `input` and require the `input` module. We're using `@mimo-org/input` to interact with the user in the console.\n   ```const input = require(\"@mimo-org/input\");```",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "app.js",
                  "codeLanguage": "javascript",
                  "content": "const cards = [{\n  rank: '2',\n  value: 2\n}, {\n  rank: '3',\n  value: 3\n}, {\n  rank: '4',\n  value: 4\n}, {\n  rank: '5',\n  value: 5\n}, {\n  rank: '6',\n  value: 6\n}, {\n  rank: '7',\n  value: 7\n}, {\n  rank: '8',\n  value: 8\n}, {\n  rank: '9',\n  value: 9\n}, {\n  rank: '10',\n  value: 10\n}, {\n  rank: 'J',\n  value: 10\n}, {\n  rank: 'Q',\n  value: 10\n}, {\n  rank: 'K',\n  value: 10\n}, {\n  rank: 'A',\n  value: 11\n}];\n\nfunction drawCard() {\n  return cards[Math.floor(Math.random() * cards.length)];\n}",
                  "solvedContent": "const input = require(\"@mimo-org/input\");\n\nconst cards = [{\n  rank: '2',\n  value: 2\n}, {\n  rank: '3',\n  value: 3\n}, {\n  rank: '4',\n  value: 4\n}, {\n  rank: '5',\n  value: 5\n}, {\n  rank: '6',\n  value: 6\n}, {\n  rank: '7',\n  value: 7\n}, {\n  rank: '8',\n  value: 8\n}, {\n  rank: '9',\n  value: 9\n}, {\n  rank: '10',\n  value: 10\n}, {\n  rank: 'J',\n  value: 10\n}, {\n  rank: 'Q',\n  value: 10\n}, {\n  rank: 'K',\n  value: 10\n}, {\n  rank: 'A',\n  value: 11\n}];\n\nfunction drawCard() {\n  return cards[Math.floor(Math.random() * cards.length)];\n}"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Lesson #2 - Copy",
            "id": 132213,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Time to ask the user if they want to draw a new card (hit) or are content with what they have (stand.) \n\n1. Create a new variable, `playerHand,` and assign it an empty array. We'll use this array to keep track of all the cards.\n2. Ask the player if they want to hit or stand using `input`. Indicate that entering `\"h\"` will allow them to hit (draw a new card), and `\"s\"` represents standing (not taking more cards.)\n3. If the player enters `\"h\"`, use the `drawCard` function to receive a new card and add the drawn card to the `playerHand` array.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "app.js",
                  "codeLanguage": "javascript",
                  "content": "const input = require(\"@mimo-org/input\");\n\nconst cards = [{\n  rank: '2',\n  value: 2\n}, {\n  rank: '3',\n  value: 3\n}, {\n  rank: '4',\n  value: 4\n}, {\n  rank: '5',\n  value: 5\n}, {\n  rank: '6',\n  value: 6\n}, {\n  rank: '7',\n  value: 7\n}, {\n  rank: '8',\n  value: 8\n}, {\n  rank: '9',\n  value: 9\n}, {\n  rank: '10',\n  value: 10\n}, {\n  rank: 'J',\n  value: 10\n}, {\n  rank: 'Q',\n  value: 10\n}, {\n  rank: 'K',\n  value: 10\n}, {\n  rank: 'A',\n  value: 11\n}];\n\nfunction drawCard() {\n  return cards[Math.floor(Math.random() * cards.length)];\n}",
                  "solvedContent": "const input = require(\"@mimo-org/input\");\n\nconst cards = [{\n  rank: '2',\n  value: 2\n}, {\n  rank: '3',\n  value: 3\n}, {\n  rank: '4',\n  value: 4\n}, {\n  rank: '5',\n  value: 5\n}, {\n  rank: '6',\n  value: 6\n}, {\n  rank: '7',\n  value: 7\n}, {\n  rank: '8',\n  value: 8\n}, {\n  rank: '9',\n  value: 9\n}, {\n  rank: '10',\n  value: 10\n}, {\n  rank: 'J',\n  value: 10\n}, {\n  rank: 'Q',\n  value: 10\n}, {\n  rank: 'K',\n  value: 10\n}, {\n  rank: 'A',\n  value: 11\n}];\n\nfunction drawCard() {\n  return cards[Math.floor(Math.random() * cards.length)];\n}\n\nlet playerHand = [];\n\nconst action = input('Do you want to (h)it or (s)tand? ');\nif (action === 'h') {\n  playerHand.push(drawCard());\n}"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Lesson #3",
            "id": 132127,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "We also need a method that calculates the value of a hand.\n\n1. Create a `calculateHandValue` function that takes a parameter called `hand` (array of cards.)\n2. Inside the function, start by getting the sum of the values of the cards in the hand.\n3. Also, count the number of aces in the hand.\n4. Then, handle the case according to blackjack rules: if the total value is over 21 and there is at least one ace in the hand, subtract 10 from the total value for each ace, until the total is 21 or less, or there are no more aces.\n5. Return the total value of the hand.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "app.js",
                  "codeLanguage": "javascript",
                  "content": "const input = require(\"@mimo-org/input\");\n\nconst cards = [{\n  rank: '2',\n  value: 2\n}, {\n  rank: '3',\n  value: 3\n}, {\n  rank: '4',\n  value: 4\n}, {\n  rank: '5',\n  value: 5\n}, {\n  rank: '6',\n  value: 6\n}, {\n  rank: '7',\n  value: 7\n}, {\n  rank: '8',\n  value: 8\n}, {\n  rank: '9',\n  value: 9\n}, {\n  rank: '10',\n  value: 10\n}, {\n  rank: 'J',\n  value: 10\n}, {\n  rank: 'Q',\n  value: 10\n}, {\n  rank: 'K',\n  value: 10\n}, {\n  rank: 'A',\n  value: 11\n}];\n\nfunction drawCard() {\n  return cards[Math.floor(Math.random() * cards.length)];\n}\n\nlet playerHand = [];\n\nconst action = input('Do you want to (h)it or (s)tand? ');\nif (action === 'h') {\n  playerHand.push(drawCard());\n}",
                  "solvedContent": "const input = require(\"@mimo-org/input\");\n\nconst cards = [{\n  rank: '2',\n  value: 2\n}, {\n  rank: '3',\n  value: 3\n}, {\n  rank: '4',\n  value: 4\n}, {\n  rank: '5',\n  value: 5\n}, {\n  rank: '6',\n  value: 6\n}, {\n  rank: '7',\n  value: 7\n}, {\n  rank: '8',\n  value: 8\n}, {\n  rank: '9',\n  value: 9\n}, {\n  rank: '10',\n  value: 10\n}, {\n  rank: 'J',\n  value: 10\n}, {\n  rank: 'Q',\n  value: 10\n}, {\n  rank: 'K',\n  value: 10\n}, {\n  rank: 'A',\n  value: 11\n}];\n\nfunction drawCard() {\n  return cards[Math.floor(Math.random() * cards.length)];\n}\n\nfunction calculateHandValue(hand) {\n  let value = 0;\n  let aceCount = 0;\n\n  for (let card of hand) {\n    value += card.value;\n    if (card.rank === 'A') {\n      aceCount += 1;\n    }\n  }\n\n  while (value > 21 && aceCount > 0) {\n    value -= 10;\n    aceCount -= 1;\n  }\n\n  return value;\n}\n\nlet playerHand = [];\n\nconst action = input('Do you want to (h)it or (s)tand? ');\nif (action === 'h') {\n  playerHand.push(drawCard());\n}"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Lesson #3 - Copy",
            "id": 132215,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Let's use the new function to calculate the value of the hand after our player draw the first card.\n\n1. Before asking the player if they want to draw a new card or stop drawing, create a new `playerValue` variable and set it to `0`.\n2. After drawing a card and adding it to the `playerHand` variable, calculate the value and assign the return value from calling the `calculateHandValue` function to `playerValue`.\n3. Print the score.\n",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "app.js",
                  "codeLanguage": "javascript",
                  "content": "const input = require(\"@mimo-org/input\");\n\nconst cards = [{\n  rank: '2',\n  value: 2\n}, {\n  rank: '3',\n  value: 3\n}, {\n  rank: '4',\n  value: 4\n}, {\n  rank: '5',\n  value: 5\n}, {\n  rank: '6',\n  value: 6\n}, {\n  rank: '7',\n  value: 7\n}, {\n  rank: '8',\n  value: 8\n}, {\n  rank: '9',\n  value: 9\n}, {\n  rank: '10',\n  value: 10\n}, {\n  rank: 'J',\n  value: 10\n}, {\n  rank: 'Q',\n  value: 10\n}, {\n  rank: 'K',\n  value: 10\n}, {\n  rank: 'A',\n  value: 11\n}];\n\nfunction drawCard() {\n  return cards[Math.floor(Math.random() * cards.length)];\n}\n\nfunction calculateHandValue(hand) {\n  let value = 0;\n  let aceCount = 0;\n\n  for (let card of hand) {\n    value += card.value;\n    if (card.rank === 'A') {\n      aceCount += 1;\n    }\n  }\n\n  while (value > 21 && aceCount > 0) {\n    value -= 10;\n    aceCount -= 1;\n  }\n\n  return value;\n}\n\nlet playerHand = [];\n\nconst action = input('Do you want to (h)it or (s)tand? ');\nif (action === 'h') {\n  playerHand.push(drawCard());\n}",
                  "solvedContent": "const input = require(\"@mimo-org/input\");\n\nconst cards = [{\n  rank: '2',\n  value: 2\n}, {\n  rank: '3',\n  value: 3\n}, {\n  rank: '4',\n  value: 4\n}, {\n  rank: '5',\n  value: 5\n}, {\n  rank: '6',\n  value: 6\n}, {\n  rank: '7',\n  value: 7\n}, {\n  rank: '8',\n  value: 8\n}, {\n  rank: '9',\n  value: 9\n}, {\n  rank: '10',\n  value: 10\n}, {\n  rank: 'J',\n  value: 10\n}, {\n  rank: 'Q',\n  value: 10\n}, {\n  rank: 'K',\n  value: 10\n}, {\n  rank: 'A',\n  value: 11\n}];\n\nfunction drawCard() {\n  return cards[Math.floor(Math.random() * cards.length)];\n}\n\nfunction calculateHandValue(hand) {\n  let value = 0;\n  let aceCount = 0;\n\n  for (let card of hand) {\n    value += card.value;\n    if (card.rank === 'A') {\n      aceCount += 1;\n    }\n  }\n\n  while (value > 21 && aceCount > 0) {\n    value -= 10;\n    aceCount -= 1;\n  }\n\n  return value;\n}\n\nlet playerHand = [];\nlet playerValue = 0;\n\nconst action = input('Do you want to (h)it or (s)tand? ');\nif (action === 'h') {\n  playerHand.push(drawCard());\n  playerValue = calculateHandValue(playerHand);\n  console.log(`Your score: ${playerValue}`);\n}"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Lesson #4",
            "id": 132128,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "By now, we allow the player to draw a card and display its value. However, we still need to show the player the actual card they drew.\n\n1. Create a `displayHand` function that takes a parameter called `hand` (array of cards.)\n2. Inside the function, go over every element in the array. Add the rank of every card in the `hand` array to a string you print at the end of the function to display all cards the player has in their hand.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "app.js",
                  "codeLanguage": "javascript",
                  "content": "const input = require(\"@mimo-org/input\");\n\nconst cards = [{\n  rank: '2',\n  value: 2\n}, {\n  rank: '3',\n  value: 3\n}, {\n  rank: '4',\n  value: 4\n}, {\n  rank: '5',\n  value: 5\n}, {\n  rank: '6',\n  value: 6\n}, {\n  rank: '7',\n  value: 7\n}, {\n  rank: '8',\n  value: 8\n}, {\n  rank: '9',\n  value: 9\n}, {\n  rank: '10',\n  value: 10\n}, {\n  rank: 'J',\n  value: 10\n}, {\n  rank: 'Q',\n  value: 10\n}, {\n  rank: 'K',\n  value: 10\n}, {\n  rank: 'A',\n  value: 11\n}];\n\nfunction drawCard() {\n  return cards[Math.floor(Math.random() * cards.length)];\n}\n\nfunction calculateHandValue(hand) {\n  let value = 0;\n  let aceCount = 0;\n\n  for (let card of hand) {\n    value += card.value;\n    if (card.rank === 'A') {\n      aceCount += 1;\n    }\n  }\n\n  while (value > 21 && aceCount > 0) {\n    value -= 10;\n    aceCount -= 1;\n  }\n\n  return value;\n}\n\nlet playerHand = [];\nlet playerValue = 0;\n\nconst action = input('Do you want to (h)it or (s)tand? ');\n\nif (action === 'h') {\n  playerHand.push(drawCard());\n  playerValue = calculateHandValue(playerHand);\n  console.log(`Your score: ${playerValue}`);\n}",
                  "solvedContent": "const input = require(\"@mimo-org/input\");\n\nconst cards = [{\n  rank: '2',\n  value: 2\n}, {\n  rank: '3',\n  value: 3\n}, {\n  rank: '4',\n  value: 4\n}, {\n  rank: '5',\n  value: 5\n}, {\n  rank: '6',\n  value: 6\n}, {\n  rank: '7',\n  value: 7\n}, {\n  rank: '8',\n  value: 8\n}, {\n  rank: '9',\n  value: 9\n}, {\n  rank: '10',\n  value: 10\n}, {\n  rank: 'J',\n  value: 10\n}, {\n  rank: 'Q',\n  value: 10\n}, {\n  rank: 'K',\n  value: 10\n}, {\n  rank: 'A',\n  value: 11\n}];\n\nfunction drawCard() {\n  return cards[Math.floor(Math.random() * cards.length)];\n}\n\nfunction calculateHandValue(hand) {\n  let value = 0;\n  let aceCount = 0;\n\n  for (let card of hand) {\n    value += card.value;\n    if (card.rank === 'A') {\n      aceCount += 1;\n    }\n  }\n\n  while (value > 21 && aceCount > 0) {\n    value -= 10;\n    aceCount -= 1;\n  }\n\n  return value;\n}\n\nfunction displayHand(hand) {\n  let ranks = '';\n\n  for (let i = 0; i < hand.length; i++) {\n    ranks += hand[i].rank;\n    if (i < hand.length - 1) {\n      ranks += ', ';\n    }\n  }\n\n  console.log(`Your hand: ${ranks}`);\n}\n\nlet playerHand = [];\nlet playerValue = 0;\n\nconst action = input('Do you want to (h)it or (s)tand? ');\n\nif (action === 'h') {\n  playerHand.push(drawCard());\n  playerValue = calculateHandValue(playerHand);\n  displayHand(playerHand);\n  console.log(`Your score: ${playerValue}`);\n}"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Lesson #5",
            "id": 132129,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Blackjack is all about getting as close as possible to 21. If you are above 21, you lose. We need a game loop that allows drawing as many cards as the player wants.\n\n1. Add a `while` loop that continues as long as the player's hand value `playerValue` is less than 21.\n2. Move the code that prompts for hit or stand, draws a card if the player hits, updates the hand value, and displays the hand and score inside the while loop.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "app.js",
                  "codeLanguage": "javascript",
                  "content": "const input = require(\"@mimo-org/input\");\n\nconst cards = [{\n  rank: '2',\n  value: 2\n}, {\n  rank: '3',\n  value: 3\n}, {\n  rank: '4',\n  value: 4\n}, {\n  rank: '5',\n  value: 5\n}, {\n  rank: '6',\n  value: 6\n}, {\n  rank: '7',\n  value: 7\n}, {\n  rank: '8',\n  value: 8\n}, {\n  rank: '9',\n  value: 9\n}, {\n  rank: '10',\n  value: 10\n}, {\n  rank: 'J',\n  value: 10\n}, {\n  rank: 'Q',\n  value: 10\n}, {\n  rank: 'K',\n  value: 10\n}, {\n  rank: 'A',\n  value: 11\n}];\n\nfunction drawCard() {\n  return cards[Math.floor(Math.random() * cards.length)];\n}\n\nfunction calculateHandValue(hand) {\n  let value = 0;\n  let aceCount = 0;\n\n  for (let card of hand) {\n    value += card.value;\n    if (card.rank === 'A') {\n      aceCount += 1;\n    }\n  }\n\n  while (value > 21 && aceCount > 0) {\n    value -= 10;\n    aceCount -= 1;\n  }\n\n  return value;\n}\n\nfunction displayHand(hand) {\n  let ranks = '';\n\n  for (let i = 0; i < hand.length; i++) {\n    ranks += hand[i].rank;\n    if (i < hand.length - 1) {\n      ranks += ', ';\n    }\n  }\n\n  console.log(`Your hand: ${ranks}`);\n}\n\nlet playerHand = [];\nlet playerValue = 0;\n\nconst action = input('Do you want to (h)it or (s)tand? ');\n\nif (action === 'h') {\n  playerHand.push(drawCard());\n  playerValue = calculateHandValue(playerHand);\n  displayHand(playerHand);\n  console.log(`Your score: ${playerValue}`);\n}",
                  "solvedContent": "const input = require(\"@mimo-org/input\");\n\nconst cards = [{\n  rank: '2',\n  value: 2\n}, {\n  rank: '3',\n  value: 3\n}, {\n  rank: '4',\n  value: 4\n}, {\n  rank: '5',\n  value: 5\n}, {\n  rank: '6',\n  value: 6\n}, {\n  rank: '7',\n  value: 7\n}, {\n  rank: '8',\n  value: 8\n}, {\n  rank: '9',\n  value: 9\n}, {\n  rank: '10',\n  value: 10\n}, {\n  rank: 'J',\n  value: 10\n}, {\n  rank: 'Q',\n  value: 10\n}, {\n  rank: 'K',\n  value: 10\n}, {\n  rank: 'A',\n  value: 11\n}];\n\nfunction drawCard() {\n  return cards[Math.floor(Math.random() * cards.length)];\n}\n\nfunction calculateHandValue(hand) {\n  let value = 0;\n  let aceCount = 0;\n\n  for (let card of hand) {\n    value += card.value;\n    if (card.rank === 'A') {\n      aceCount += 1;\n    }\n  }\n\n  while (value > 21 && aceCount > 0) {\n    value -= 10;\n    aceCount -= 1;\n  }\n\n  return value;\n}\n\nfunction displayHand(hand) {\n  let ranks = '';\n\n  for (let i = 0; i < hand.length; i++) {\n    ranks += hand[i].rank;\n    if (i < hand.length - 1) {\n      ranks += ', ';\n    }\n  }\n\n  console.log(`Your hand: ${ranks}`);\n}\n\nlet playerHand = [];\nlet playerValue = 0;\n\nwhile (playerValue < 21) {\n  const action = input('Do you want to (h)it or (s)tand? ');\n  if (action === 'h') {\n    playerHand.push(drawCard());\n    playerValue = calculateHandValue(playerHand);\n    displayHand(playerHand);\n    console.log(`Your score: ${playerValue}`);\n  }\n}"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Lesson #7",
            "id": 132131,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Now, we need to respond to the player's action if they want to avoid drawing more cards (stand).\n\n1. . If the player chooses to stand, use `break` to exit the loop.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "app.js",
                  "codeLanguage": "javascript",
                  "content": "const input = require(\"@mimo-org/input\");\n\nconst cards = [{\n  rank: '2',\n  value: 2\n}, {\n  rank: '3',\n  value: 3\n}, {\n  rank: '4',\n  value: 4\n}, {\n  rank: '5',\n  value: 5\n}, {\n  rank: '6',\n  value: 6\n}, {\n  rank: '7',\n  value: 7\n}, {\n  rank: '8',\n  value: 8\n}, {\n  rank: '9',\n  value: 9\n}, {\n  rank: '10',\n  value: 10\n}, {\n  rank: 'J',\n  value: 10\n}, {\n  rank: 'Q',\n  value: 10\n}, {\n  rank: 'K',\n  value: 10\n}, {\n  rank: 'A',\n  value: 11\n}];\n\nfunction drawCard() {\n  return cards[Math.floor(Math.random() * cards.length)];\n}\n\nfunction calculateHandValue(hand) {\n  let value = 0;\n  let aceCount = 0;\n\n  for (let card of hand) {\n    value += card.value;\n    if (card.rank === 'A') {\n      aceCount += 1;\n    }\n  }\n\n  while (value > 21 && aceCount > 0) {\n    value -= 10;\n    aceCount -= 1;\n  }\n\n  return value;\n}\n\nfunction displayHand(hand) {\n  let ranks = '';\n\n  for (let i = 0; i < hand.length; i++) {\n    ranks += hand[i].rank;\n    if (i < hand.length - 1) {\n      ranks += ', ';\n    }\n  }\n\n  console.log(`Your hand: ${ranks}`);\n}\n\nlet playerHand = [];\nlet playerValue = 0;\n\nwhile (playerValue < 21) {\n  const action = input('Do you want to (h)it or (s)tand? ');\n  if (action === 'h') {\n    playerHand.push(drawCard());\n    playerValue = calculateHandValue(playerHand);\n    displayHand(playerHand);\n    console.log(`Your score: ${playerValue}`);\n  }\n}",
                  "solvedContent": "const input = require(\"@mimo-org/input\");\n\nconst cards = [{\n  rank: '2',\n  value: 2\n}, {\n  rank: '3',\n  value: 3\n}, {\n  rank: '4',\n  value: 4\n}, {\n  rank: '5',\n  value: 5\n}, {\n  rank: '6',\n  value: 6\n}, {\n  rank: '7',\n  value: 7\n}, {\n  rank: '8',\n  value: 8\n}, {\n  rank: '9',\n  value: 9\n}, {\n  rank: '10',\n  value: 10\n}, {\n  rank: 'J',\n  value: 10\n}, {\n  rank: 'Q',\n  value: 10\n}, {\n  rank: 'K',\n  value: 10\n}, {\n  rank: 'A',\n  value: 11\n}];\n\nfunction drawCard() {\n  return cards[Math.floor(Math.random() * cards.length)];\n}\n\nfunction calculateHandValue(hand) {\n  let value = 0;\n  let aceCount = 0;\n\n  for (let card of hand) {\n    value += card.value;\n    if (card.rank === 'A') {\n      aceCount += 1;\n    }\n  }\n\n  while (value > 21 && aceCount > 0) {\n    value -= 10;\n    aceCount -= 1;\n  }\n\n  return value;\n}\n\nfunction displayHand(hand) {\n  let ranks = '';\n\n  for (let i = 0; i < hand.length; i++) {\n    ranks += hand[i].rank;\n    if (i < hand.length - 1) {\n      ranks += ', ';\n    }\n  }\n\n  console.log(`Your hand: ${ranks}`);\n}\n\nlet playerHand = [];\nlet playerValue = 0;\n\nwhile (playerValue < 21) {\n  const action = input('Do you want to (h)it or (s)tand? ');\n  if (action === 'h') {\n    playerHand.push(drawCard());\n    playerValue = calculateHandValue(playerHand);\n    displayHand(playerHand);\n    console.log(`Your score: ${playerValue}`);\n  } else if (action === 's') {\n    break;\n  }\n}"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Lesson #8",
            "id": 132132,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Lastly, let's add more print statements to explain to the player what's going on.\n\n1. If the player enters anything other than 'h' or 's', print an error message asking them to enter a valid input.\n2. After the `while` loop, print the player's final score with `caculateHandValue` once more, confirming that this is the final value.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "app.js",
                  "codeLanguage": "javascript",
                  "content": "const input = require(\"@mimo-org/input\");\n\nconst cards = [{\n  rank: '2',\n  value: 2\n}, {\n  rank: '3',\n  value: 3\n}, {\n  rank: '4',\n  value: 4\n}, {\n  rank: '5',\n  value: 5\n}, {\n  rank: '6',\n  value: 6\n}, {\n  rank: '7',\n  value: 7\n}, {\n  rank: '8',\n  value: 8\n}, {\n  rank: '9',\n  value: 9\n}, {\n  rank: '10',\n  value: 10\n}, {\n  rank: 'J',\n  value: 10\n}, {\n  rank: 'Q',\n  value: 10\n}, {\n  rank: 'K',\n  value: 10\n}, {\n  rank: 'A',\n  value: 11\n}];\n\nfunction drawCard() {\n  return cards[Math.floor(Math.random() * cards.length)];\n}\n\nfunction calculateHandValue(hand) {\n  let value = 0;\n  let aceCount = 0;\n\n  for (let card of hand) {\n    value += card.value;\n    if (card.rank === 'A') {\n      aceCount += 1;\n    }\n  }\n\n  while (value > 21 && aceCount > 0) {\n    value -= 10;\n    aceCount -= 1;\n  }\n\n  return value;\n}\n\nfunction displayHand(hand) {\n  let ranks = '';\n\n  for (let i = 0; i < hand.length; i++) {\n    ranks += hand[i].rank;\n    if (i < hand.length - 1) {\n      ranks += ', ';\n    }\n  }\n\n  console.log(`Your hand: ${ranks}`);\n}\n\nlet playerHand = [];\nlet playerValue = 0;\n\nwhile (playerValue < 21) {\n  const action = input('Do you want to (h)it or (s)tand? ');\n  if (action === 'h') {\n    playerHand.push(drawCard());\n    playerValue = calculateHandValue(playerHand);\n    displayHand(playerHand);\n    console.log(`Your score: ${playerValue}`);\n  } else if (action === 's') {\n    break;\n  }\n}",
                  "solvedContent": "const input = require(\"@mimo-org/input\");\n\nconst cards = [{\n  rank: '2',\n  value: 2\n}, {\n  rank: '3',\n  value: 3\n}, {\n  rank: '4',\n  value: 4\n}, {\n  rank: '5',\n  value: 5\n}, {\n  rank: '6',\n  value: 6\n}, {\n  rank: '7',\n  value: 7\n}, {\n  rank: '8',\n  value: 8\n}, {\n  rank: '9',\n  value: 9\n}, {\n  rank: '10',\n  value: 10\n}, {\n  rank: 'J',\n  value: 10\n}, {\n  rank: 'Q',\n  value: 10\n}, {\n  rank: 'K',\n  value: 10\n}, {\n  rank: 'A',\n  value: 11\n}];\n\nfunction drawCard() {\n  return cards[Math.floor(Math.random() * cards.length)];\n}\n\nfunction calculateHandValue(hand) {\n  let value = 0;\n  let aceCount = 0;\n\n  for (let card of hand) {\n    value += card.value;\n    if (card.rank === 'A') {\n      aceCount += 1;\n    }\n  }\n\n  while (value > 21 && aceCount > 0) {\n    value -= 10;\n    aceCount -= 1;\n  }\n\n  return value;\n}\n\nfunction displayHand(hand) {\n  let ranks = '';\n\n  for (let i = 0; i < hand.length; i++) {\n    ranks += hand[i].rank;\n    if (i < hand.length - 1) {\n      ranks += ', ';\n    }\n  }\n\n  console.log(`Your hand: ${ranks}`);\n}\n\nlet playerHand = [];\nlet playerValue = 0;\n\nwhile (playerValue < 21) {\n  const action = input('Do you want to (h)it or (s)tand? ');\n  if (action === 'h') {\n    playerHand.push(drawCard());\n    playerValue = calculateHandValue(playerHand);\n    displayHand(playerHand);\n    console.log(`Your score: ${playerValue}`);\n  } else if (action === 's') {\n    break;\n  } else {\n    console.log('Invalid input, please choose \"h\" to hit or \"s\" to stand.');\n  }\n}\n\nconsole.log(`Your final score: ${playerValue}`);"
                }
              ],
              "hints": []
            }
          }
        ]
      }
    ]
  }
}