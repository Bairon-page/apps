{
  "tutorial": {
    "id": 1431,
    "version": 5,
    "type": "course",
    "isNew": false,
    "codeLanguage": "python",
    "title": "Encapsulating Objects",
    "descriptionContent": "Learn how to identify OOP code and how to think like a developer by creating encapsulated objects",
    "shortDescriptionContent": "",
    "showInTrack": true,
    "iconBanner": null,
    "chapters": [
      {
        "id": 10318,
        "title": "Intro to OOP",
        "type": "practiceLevel1",
        "lessons": [
          {
            "title": "Intro",
            "id": 92845,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Let's learn about different styles of coding used by developers. We'll explore <strong>functional programming</strong> and <strong>object-orientated programming</strong>.</p></body></html>"
          },
          {
            "title": "FP vs OOP",
            "id": 92841,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Different styles of coding are also known as <strong>paradigms</strong>. A common style is called <strong>functional programming</strong>, or FP for short.</p><p>In functional programming, we use a lot of functions and variables.</p><code version=\"2\" codelang=\"python\" name=\"fp.py\" visible-if=\"always\"><content><text value=\"def\" class=\"keyword\" /><text value=\" \" /><text value=\"getTotal\" class=\"title\" /><text value=\"(a, b)\" class=\"params\" /><text value=\":\" /><text type=\"break\" /><text value=\"  \" /><text value=\"return\" class=\"keyword\" /><text value=\" a + b\" /><text type=\"break\" /><text type=\"break\" /><text value=\"num1 = \" /><text value=\"2\" class=\"number\" /><text type=\"break\" /><text value=\"num2 = \" /><text value=\"3\" class=\"number\" /><text type=\"break\" /><text value=\"total = getTotal(num1, num2)\" /><text type=\"break\" /><text value=\"print(total)\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"0\" endIndex=\"3\" /><option startIndex=\"4\" endIndex=\"12\" /></options></interaction></interactions><output><content><text value=\"5\" /></content></output></code><p visible-if=\"wrong\">Make sure to pick <code>def</code>, followed by <code>getTotal</code>.</p></body></html>"
          },
          {
            "title": "FP 1",
            "id": 92840,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>In the FP style, we keep data and functionality separate. We pass data into functions whenever we want something.</p><code version=\"2\" codelang=\"python\" name=\"script.py\" visible-if=\"always\"><content><text value=\"def\" class=\"keyword\" /><text value=\" \" /><text value=\"getDistance\" class=\"title\" /><text value=\"(mph, h)\" class=\"params\" /><text value=\":\" /><text type=\"break\" /><text value=\"  \" /><text value=\"return\" class=\"keyword\" /><text value=\" mph * h\" /><text type=\"break\" /><text type=\"break\" /><text value=\"mph = \" /><text value=\"60\" class=\"number\" /><text type=\"break\" /><text value=\"h = \" /><text value=\"2\" class=\"number\" /><text type=\"break\" /><text type=\"break\" /><text value=\"distance = getDistance(mph, h)\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"82\" endIndex=\"85\" /><option startIndex=\"88\" endIndex=\"89\" /><option startIndex=\"81\" endIndex=\"82\" /><option correct=\"false\"><content><text value=\"[\" /></content></option><option correct=\"false\"><content><text value=\"]\" /></content></option></options></interaction></interactions></code><p visible-if=\"wrong\">Make sure to pick <code>(</code>, followed by <code>mph</code>, and finally <code>)</code>.</p></body></html>"
          },
          {
            "title": "FP 2",
            "id": 92839,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>In functional programming, functions <strong>return</strong> new values and then use those values somewhere else in the code.</p><code version=\"2\" codelang=\"python\" name=\"script.py\" visible-if=\"always\"><content><text value=\"def\" class=\"keyword\" /><text value=\" \" /><text value=\"getDistance\" class=\"title\" /><text value=\"(mph, h)\" class=\"params\" /><text value=\":\" /><text type=\"break\" /><text value=\"  \" /><text value=\"return\" class=\"keyword\" /><text value=\" mph * h\" /><text type=\"break\" /><text type=\"break\" /><text value=\"mph = \" /><text value=\"60\" class=\"number\" /><text type=\"break\" /><text value=\"h = \" /><text value=\"2\" class=\"number\" /><text type=\"break\" /><text type=\"break\" /><text value=\"distance = getDistance(mph, h)\" /><text type=\"break\" /><text value=\"print(distance)\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"27\" endIndex=\"33\" /><option startIndex=\"96\" endIndex=\"104\" /></options></interaction></interactions><output><content><text value=\"120\" /></content></output></code><p visible-if=\"wrong\">Make sure to pick <code>return</code>, followed by <code>distance</code>.</p></body></html>"
          },
          {
            "title": "OOP 1",
            "id": 92838,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>In <strong>object-oriented programming (OOP)</strong>, we group data and functionality as properties and methods inside objects, like <code>Virtual_Pet</code> here.</p><code version=\"2\" codelang=\"python\" name=\"script.py\" visible-if=\"always\"><content><text value=\"class\" class=\"keyword\" /><text value=\" \" /><text value=\"Virtual_Pet\" class=\"title\" /><text value=\":\" /><text type=\"break\" /><text value=\"  \" /><text value=\"def\" class=\"keyword\" /><text value=\" \" /><text value=\"__init__\" class=\"title\" /><text value=\"(self, color, name)\" class=\"params\" /><text value=\":\" /><text type=\"break\" /><text value=\"    self.color = color\" /><text type=\"break\" /><text value=\"    self.name = name\" /><text type=\"break\" /><text type=\"break\" /><text value=\"rocky = Virtual_Pet(\" /><text value=\"&quot;brown&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;rocky&quot;\" class=\"string\" /><text value=\")\" /><text type=\"break\" /><text type=\"break\" /><text value=\"print(rocky.color)\" /><text type=\"break\" /><text value=\"print(rocky.name)\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"144\" endIndex=\"149\" /><option startIndex=\"169\" endIndex=\"173\" /></options></interaction></interactions><output><content><text value=\"brown\" /><text type=\"break\" /><text value=\"rocky\" /></content></output></code><p visible-if=\"wrong\">Make sure to pick <code>rocky</code>, followed by <code>name</code>.</p></body></html>"
          },
          {
            "title": "OOP 2",
            "id": 92833,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>OOP is useful for modeling objects, real-life or not. Objects have properties and methods that we treat as one thing, like <code>car</code> here.</p><code version=\"2\" codelang=\"python\" name=\"script.py\" visible-if=\"always\"><content><text value=\"class\" class=\"keyword\" /><text value=\" \" /><text value=\"Car\" class=\"title\" /><text value=\":\" /><text type=\"break\" /><text value=\"  mileage = \" /><text value=\"12000\" class=\"number\" /><text type=\"break\" /><text value=\"  \" /><text type=\"break\" /><text value=\"  \" /><text value=\"def\" class=\"keyword\" /><text value=\" \" /><text value=\"drive\" class=\"title\" /><text value=\"(self, miles)\" class=\"params\" /><text value=\":\" /><text type=\"break\" /><text value=\"    self.mileage += miles\" /><text type=\"break\" /><text type=\"break\" /><text value=\"tesla = Car()\" /><text type=\"break\" /><text value=\"tesla.drive(\" /><text value=\"100\" class=\"number\" /><text value=\")\" /><text type=\"break\" /><text value=\"print(tesla.mileage)\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"0\" endIndex=\"5\" /><option startIndex=\"6\" endIndex=\"9\" /></options></interaction></interactions><output><content><text value=\"12100\" /></content></output></code><p visible-if=\"wrong\">Make sure to pick <code>class</code>, followed by <code>Car</code>.</p></body></html>"
          },
          {
            "title": "OOP 3",
            "id": 92836,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>In OOP, we use methods to <strong>update</strong> existing values of an object, like here where we use <code>eat()</code> to update the value of <code>hungry</code>.</p><code version=\"2\" codelang=\"python\" name=\"script.py\" visible-if=\"always\"><content><text value=\"class\" class=\"keyword\" /><text value=\" \" /><text value=\"Dog\" class=\"title\" /><text value=\":\" /><text type=\"break\" /><text value=\"  hungry = \" /><text value=\"True\" class=\"literal\" /><text type=\"break\" /><text value=\"  \" /><text type=\"break\" /><text value=\"  \" /><text value=\"def\" class=\"keyword\" /><text value=\" \" /><text value=\"eat\" class=\"title\" /><text value=\"(self)\" class=\"params\" /><text value=\":\" /><text type=\"break\" /><text value=\"    self.hungry = \" /><text value=\"False\" class=\"literal\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"51\" endIndex=\"55\" /><option startIndex=\"55\" endIndex=\"56\" /><option startIndex=\"56\" endIndex=\"62\" /><option startIndex=\"63\" endIndex=\"64\" /><option startIndex=\"65\" endIndex=\"70\" /></options></interaction></interactions></code><p visible-if=\"wrong\">Make sure to pick <code>self</code> followed by <code>.</code> and then <code>hungry</code>, <code>=</code>, <code>False</code>.</p></body></html>"
          },
          {
            "title": "Question 1",
            "id": 92832,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>What is object-oriented programming?</p><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\">A programming style where we bundle together related data and functionality</item><item value=\"2\" correct=\"false\">A programming style where we keep data and functionality separate</item></selection><p visible-if=\"wrong\">A programming style where we bundle together related data and functionality.</p></body></html>"
          },
          {
            "title": "Question 2",
            "id": 92831,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>When do we use OOP?</p><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\">When grouping data and functionality inside an object</item><item value=\"2\" correct=\"false\">When we want functions to return new values instead of updating properties</item></selection><p visible-if=\"wrong\">When grouping data and functionality inside an object.</p></body></html>"
          },
          {
            "title": "Question 3",
            "id": 92863,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>What will be the value of the <code>hungry</code> property be after we call the <code>eat()</code> method?</p><code version=\"2\" codelang=\"python\" name=\"script.py\" visible-if=\"always\"><content><text value=\"class\" class=\"keyword\" /><text value=\" \" /><text value=\"Dog\" class=\"title\" /><text value=\":\" /><text type=\"break\" /><text value=\"  hungry = \" /><text value=\"True\" class=\"literal\" /><text type=\"break\" /><text value=\"  \" /><text value=\"def\" class=\"keyword\" /><text value=\" \" /><text value=\"eat\" class=\"title\" /><text value=\"(self)\" class=\"params\" /><text value=\":\" /><text type=\"break\" /><text value=\"    self.hungry = \" /><text value=\"False\" class=\"literal\" /><text type=\"break\" /><text type=\"break\" /><text value=\"dog = Dog()\" /><text type=\"break\" /><text value=\"dog.eat()\" /><text type=\"break\" /><text value=\"print(dog.hungry);\" /></content><output><content><text value=\"False\" /></content></output></code><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"false\">True</item><item value=\"2\" correct=\"true\">False</item></selection><p visible-if=\"wrong\">Make sure to pick False.</p></body></html>"
          },
          {
            "title": "Example 1",
            "id": 92829,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Let's create a virtual piggy bank with OOP. First, we create a new class called <code>Piggy</code> with a <code>value</code> property set to 0.</p><code version=\"2\" codelang=\"python\" name=\"script.py\" visible-if=\"always\"><content><text value=\"class\" class=\"keyword\" /><text value=\" \" /><text value=\"Piggy\" class=\"title\" /><text value=\":\" /><text type=\"break\" /><text value=\"  value = \" /><text value=\"0\" class=\"number\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"15\" endIndex=\"20\" /><option startIndex=\"21\" endIndex=\"22\" /><option startIndex=\"23\" endIndex=\"24\" /></options></interaction></interactions></code><p visible-if=\"wrong\">Make sure to pick <code>value</code>, followed by <code>=</code>, and finally <code>0</code>.</p></body></html>"
          },
          {
            "title": "Example 2",
            "id": 92828,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Next, add a method called <code>addMoney()</code> that accepts a parameter called <code>amount</code>.</p><code version=\"2\" codelang=\"python\" name=\"script.py\" visible-if=\"always\"><content><text value=\"class\" class=\"keyword\" /><text value=\" \" /><text value=\"Piggy\" class=\"title\" /><text value=\":\" /><text type=\"break\" /><text value=\"  value = \" /><text value=\"0\" class=\"number\" /><text type=\"break\" /><text value=\"  \" /><text value=\"def\" class=\"keyword\" /><text value=\" \" /><text value=\"addMoney\" class=\"title\" /><text value=\"(self, amount)\" class=\"params\" /><text value=\":\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"27\" endIndex=\"30\" /><option startIndex=\"31\" endIndex=\"39\" /><option startIndex=\"39\" endIndex=\"40\" /><option startIndex=\"40\" endIndex=\"45\" /><option startIndex=\"46\" endIndex=\"52\" /><option startIndex=\"52\" endIndex=\"53\" /><option startIndex=\"53\" endIndex=\"54\" /></options></interaction></interactions></code><p visible-if=\"wrong\">Make sure to pick <code>def</code> followed by <code>addMoney</code> and then <code>(</code>, <code>self,</code>, <code>amount</code>, <code>)</code>, <code>:</code>.</p></body></html>"
          },
          {
            "title": "Example 3",
            "id": 92834,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Now, let's make <code>addMoney()</code> update the value with the sum of <code>Piggy</code>'s current value and <code>amount</code>.</p><code version=\"2\" codelang=\"python\" name=\"script.py\" visible-if=\"always\"><content><text value=\"class\" class=\"keyword\" /><text value=\" \" /><text value=\"Piggy\" class=\"title\" /><text value=\":\" /><text type=\"break\" /><text value=\"  value = \" /><text value=\"0\" class=\"number\" /><text type=\"break\" /><text value=\"  \" /><text value=\"def\" class=\"keyword\" /><text value=\" \" /><text value=\"addMoney\" class=\"title\" /><text value=\"(self, amount)\" class=\"params\" /><text value=\":\" /><text type=\"break\" /><text value=\"    self.value = self.value + amount\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"85\" endIndex=\"91\" /><option startIndex=\"59\" endIndex=\"63\" /><option startIndex=\"63\" endIndex=\"64\" /><option startIndex=\"64\" endIndex=\"69\" /></options></interaction></interactions></code><p visible-if=\"wrong\">Make sure to pick <code>self</code> followed by <code>.</code> and then <code>value</code>, <code>amount</code>.</p></body></html>"
          },
          {
            "title": "Example 4",
            "id": 92844,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Let's put $100 into our piggy bank by calling <code>Piggy</code>'s <code>addMoney()</code> method with <code>100</code> as the argument.</p><code version=\"2\" codelang=\"python\" name=\"script.py\" visible-if=\"always\"><content><text value=\"class\" class=\"keyword\" /><text value=\" \" /><text value=\"Piggy\" class=\"title\" /><text value=\":\" /><text type=\"break\" /><text value=\"  value = \" /><text value=\"0\" class=\"number\" /><text type=\"break\" /><text value=\"  \" /><text value=\"def\" class=\"keyword\" /><text value=\" \" /><text value=\"addMoney\" class=\"title\" /><text value=\"(self, amount)\" class=\"params\" /><text value=\":\" /><text type=\"break\" /><text value=\"    self.value = self.value + amount\" /><text type=\"break\" /><text value=\"    \" /><text type=\"break\" /><text value=\"myPiggy = Piggy()\" /><text type=\"break\" /><text value=\"myPiggy.addMoney(\" /><text value=\"100\" class=\"number\" /><text value=\")\" /></content><interactions><interaction type=\"validatedInput\" isDefault=\"true\" startIndex=\"115\" endIndex=\"136\" /></interactions></code><p visible-if=\"wrong\">Make sure to type <code>myPiggy.addMoney(100)</code>.</p></body></html>"
          },
          {
            "title": "Example 5",
            "id": 92852,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Finally, let's display the <code>value</code> property of <code>myPiggy</code> to see if it actually got updated.</p><code version=\"2\" codelang=\"python\" name=\"script.py\" visible-if=\"always\"><content><text value=\"class\" class=\"keyword\" /><text value=\" \" /><text value=\"Piggy\" class=\"title\" /><text value=\":\" /><text type=\"break\" /><text value=\"  value = \" /><text value=\"0\" class=\"number\" /><text type=\"break\" /><text value=\"  \" /><text value=\"def\" class=\"keyword\" /><text value=\" \" /><text value=\"addMoney\" class=\"title\" /><text value=\"(self, amount)\" class=\"params\" /><text value=\":\" /><text type=\"break\" /><text value=\"    self.value = self.value + amount\" /><text type=\"break\" /><text value=\"    \" /><text type=\"break\" /><text value=\"myPiggy = Piggy()\" /><text type=\"break\" /><text value=\"myPiggy.addMoney(\" /><text value=\"100\" class=\"number\" /><text value=\")\" /><text type=\"break\" /><text type=\"break\" /><text value=\"print(myPiggy.value)\" /></content><interactions><interaction type=\"validatedInput\" isDefault=\"true\" startIndex=\"144\" endIndex=\"157\" /></interactions><output><content><text value=\"100\" /></content></output></code><p visible-if=\"wrong\">Make sure to type <code>myPiggy.value</code>.</p></body></html>"
          }
        ]
      },
      {
        "id": 10320,
        "title": "Encapsulation",
        "type": "practiceLevel1",
        "lessons": [
          {
            "title": "Encapsulation",
            "id": 92859,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>In OOP, we group together related data and functions in the same object. We call this <strong>encapsulation</strong>.</p><code version=\"2\" codelang=\"python\" name=\"script.py\" visible-if=\"always\"><content><text value=\"class\" class=\"keyword\" /><text value=\" \" /><text value=\"Dog\" class=\"title\" /><text value=\":\" /><text type=\"break\" /><text value=\"  name = \" /><text value=\"'Fido'\" class=\"string\" /><text type=\"break\" /><text value=\"  hungry = \" /><text value=\"False\" class=\"literal\" /><text type=\"break\" /><text value=\"  \" /><text type=\"break\" /><text value=\"  \" /><text value=\"def\" class=\"keyword\" /><text value=\" \" /><text value=\"eat\" class=\"title\" /><text value=\"(self)\" class=\"params\" /><text value=\":\" /><text type=\"break\" /><text value=\"    self.hungry = \" /><text value=\"True\" class=\"literal\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"0\" endIndex=\"5\" /><option startIndex=\"6\" endIndex=\"9\" /><option startIndex=\"9\" endIndex=\"10\" /></options></interaction></interactions></code><p visible-if=\"wrong\">Make sure to pick <code>class</code>, followed by <code>Dog</code>, and finally <code>:</code>.</p></body></html>"
          },
          {
            "title": "Non-encapsulated example 1",
            "id": 92856,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>In FP, code is not encapsulated. Can you explain why this code does not show encapsulation?</p><code version=\"2\" codelang=\"python\" name=\"script.py\" visible-if=\"always\"><content><text value=\"def\" class=\"keyword\" /><text value=\" \" /><text value=\"getDistance\" class=\"title\" /><text value=\"(mph, h)\" class=\"params\" /><text value=\":\" /><text type=\"break\" /><text value=\"  \" /><text value=\"return\" class=\"keyword\" /><text value=\" mph * h\" /><text type=\"break\" /><text type=\"break\" /><text value=\"mph = \" /><text value=\"60\" class=\"number\" /><text type=\"break\" /><text value=\"h = \" /><text value=\"2\" class=\"number\" /></content></code><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\">The data and the function are not grouped together in an object</item><item value=\"2\" correct=\"false\">The data and the function are not related</item></selection><p visible-if=\"wrong\">The data and the function are not grouped together in an object.</p></body></html>"
          },
          {
            "title": "Non-encapsulated example 2",
            "id": 92857,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>We can spot code that isn't well encapsulated if related methods and properties are in different objects. How can we encapsulate this code?</p><code version=\"2\" codelang=\"python\" name=\"script.py\" visible-if=\"always\"><content><text value=\"class\" class=\"keyword\" /><text value=\" \" /><text value=\"Dog\" class=\"title\" /><text value=\":\" /><text type=\"break\" /><text value=\"  hungry = \" /><text value=\"True\" class=\"literal\" /><text type=\"break\" /><text type=\"break\" /><text value=\"def\" class=\"keyword\" /><text value=\" \" /><text value=\"eat\" class=\"title\" /><text value=\"()\" class=\"params\" /><text value=\":\" /><text type=\"break\" /><text value=\"  hungry = \" /><text value=\"False\" class=\"literal\" /></content></code><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\">Move <code>eat()</code> inside the <code>Dog</code> class</item><item value=\"2\" correct=\"false\">Make <code>Dog</code> and <code>eat</code> both functions</item></selection><p visible-if=\"wrong\">Move <code>eat()</code> inside the <code>Dog</code> class.</p></body></html>"
          },
          {
            "title": "Encapsulated example 1",
            "id": 92860,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>In OOP, we identify which methods and properties belong together and should be added to our objects.</p><code version=\"2\" codelang=\"python\" name=\"script.py\" visible-if=\"always\"><content><text value=\"class\" class=\"keyword\" /><text value=\" \" /><text value=\"Cat\" class=\"title\" /><text value=\":\" /><text type=\"break\" /><text value=\"  color = \" /><text value=\"'orange'\" class=\"string\" /><text type=\"break\" /><text type=\"break\" /><text value=\"  \" /><text value=\"def\" class=\"keyword\" /><text value=\" \" /><text value=\"meow\" class=\"title\" /><text value=\"(self)\" class=\"params\" /><text value=\":\" /><text type=\"break\" /><text value=\"    print(\" /><text value=\"'Meow'\" class=\"string\" /><text value=\")\" /><text type=\"break\" /><text type=\"break\" /><text type=\"break\" /><text value=\"class\" class=\"keyword\" /><text value=\" \" /><text value=\"Car\" class=\"title\" /><text value=\":\" /><text type=\"break\" /><text value=\"  color = \" /><text value=\"&quot;gray&quot;\" class=\"string\" /><text type=\"break\" /><text value=\"  \" /><text type=\"break\" /><text value=\"  \" /><text value=\"def\" class=\"keyword\" /><text value=\" \" /><text value=\"drive\" class=\"title\" /><text value=\"(self)\" class=\"params\" /><text value=\":\" /><text type=\"break\" /><text value=\"    print(\" /><text value=\"&quot;accelerating...&quot;\" class=\"string\" /><text value=\")\" /></content></code></body></html>"
          },
          {
            "title": "Encapsulated example 2",
            "id": 92858,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>With encapsulation, we also have methods that use the other properties that belong to the object, like in this example <code>eat</code> accesses <code>hungry</code>.</p><code version=\"2\" codelang=\"python\" name=\"script.py\" visible-if=\"always\"><content><text value=\"class\" class=\"keyword\" /><text value=\" \" /><text value=\"Dog\" class=\"title\" /><text value=\":\" /><text type=\"break\" /><text value=\"  name = \" /><text value=\"'Fido'\" class=\"string\" /><text type=\"break\" /><text value=\"  hungry = \" /><text value=\"True\" class=\"literal\" /><text type=\"break\" /><text value=\"  \" /><text type=\"break\" /><text value=\"   \" /><text value=\"def\" class=\"keyword\" /><text value=\" \" /><text value=\"eat\" class=\"title\" /><text value=\"(self)\" class=\"params\" /><text value=\":\" /><text type=\"break\" /><text value=\"    self.hungry = \" /><text value=\"False\" class=\"literal\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"68\" endIndex=\"72\" /><option startIndex=\"72\" endIndex=\"73\" /><option startIndex=\"73\" endIndex=\"79\" /></options></interaction></interactions></code><p visible-if=\"wrong\">Make sure to pick <code>self</code>, followed by <code>.</code>, and finally <code>hungry</code>.</p></body></html>"
          },
          {
            "title": "Question 1",
            "id": 92855,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>What is encapsulation?</p><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\">Grouping related data and functions in the same object</item><item value=\"2\" correct=\"false\">Grouping related data in one object and their functions in another</item></selection><p visible-if=\"wrong\">Grouping related data and functions in the same object.</p></body></html>"
          },
          {
            "title": "Question 2",
            "id": 92854,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Is this code encapsulated?</p><code version=\"2\" codelang=\"python\" name=\"script.py\" visible-if=\"always\"><content><text value=\"class\" class=\"keyword\" /><text value=\" \" /><text value=\"Car\" class=\"title\" /><text value=\":\" /><text type=\"break\" /><text value=\"  color = \" /><text value=\"'red'\" class=\"string\" /><text type=\"break\" /><text value=\"  on = \" /><text value=\"False\" class=\"literal\" /><text type=\"break\" /><text value=\"  \" /><text value=\"def\" class=\"keyword\" /><text value=\" \" /><text value=\"start\" class=\"title\" /><text value=\"(self)\" class=\"params\" /><text value=\":\" /><text type=\"break\" /><text value=\"   self.on = \" /><text value=\"True\" class=\"literal\" /></content></code><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\">Yes</item><item value=\"2\" correct=\"false\">No, because it contains a function</item></selection><p visible-if=\"wrong\">Make sure to pick Yes.</p></body></html>"
          },
          {
            "title": "Question 3",
            "id": 92853,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Is this code encapsulated?</p><code version=\"2\" codelang=\"python\" name=\"script.py\" visible-if=\"always\"><content><text value=\"class\" class=\"keyword\" /><text value=\" \" /><text value=\"Person\" class=\"title\" /><text value=\":\" /><text type=\"break\" /><text value=\"  name = \" /><text value=\"'Mike'\" class=\"string\" /><text type=\"break\" /><text value=\"  \" /><text value=\"def\" class=\"keyword\" /><text value=\" \" /><text value=\"greet\" class=\"title\" /><text value=\"(self)\" class=\"params\" /><text value=\":\" /><text type=\"break\" /><text value=\"    print(\" /><text value=\"'Hi there!'\" class=\"string\" /><text value=\")\" /></content></code><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\">Yes</item><item value=\"2\" correct=\"false\">No</item></selection><p visible-if=\"wrong\">Make sure to pick Yes.</p></body></html>"
          },
          {
            "title": "Question 4",
            "id": 92851,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Why is this code not encapsulated within the <code>Laptop</code> class?</p><code version=\"2\" codelang=\"python\" name=\"script.py\" visible-if=\"always\"><content><text value=\"class\" class=\"keyword\" /><text value=\" \" /><text value=\"Laptop\" class=\"title\" /><text value=\":\" /><text type=\"break\" /><text value=\"  on = \" /><text value=\"False\" class=\"literal\" /><text type=\"break\" /><text type=\"break\" /><text value=\"def\" class=\"keyword\" /><text value=\" \" /><text value=\"turnOn\" class=\"title\" /><text value=\"()\" class=\"params\" /><text value=\":\" /><text type=\"break\" /><text value=\"  on = \" /><text value=\"True\" class=\"literal\" /></content></code><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\"><code>turnOn()</code> is not in the class <code>Laptop</code> so the function is not part of the <code>Laptop</code> object</item><item value=\"2\" correct=\"false\"><code>turnOn</code> is a function and not a property</item></selection><p visible-if=\"wrong\"><code>turnOn()</code> is not in the class <code>Laptop</code> so the function is not part of the <code>Laptop</code> object.</p></body></html>"
          },
          {
            "title": "Question 5",
            "id": 92850,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>How can we encapsulate this code?</p><code version=\"2\" codelang=\"python\" name=\"script.py\" visible-if=\"always\"><content><text value=\"def\" class=\"keyword\" /><text value=\" \" /><text value=\"getArea\" class=\"title\" /><text value=\"(b, h)\" class=\"params\" /><text value=\":\" /><text type=\"break\" /><text value=\"  \" /><text value=\"return\" class=\"keyword\" /><text value=\" b * h\" /><text type=\"break\" /><text type=\"break\" /><text value=\"base = \" /><text value=\"3\" class=\"number\" /><text type=\"break\" /><text value=\"height = \" /><text value=\"4\" class=\"number\" /></content></code><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\">Put <code>base</code>, <code>height</code>, and <code>getArea()</code> in the same class</item><item value=\"2\" correct=\"false\">Put only <code>base</code> and <code>height</code> in the same class</item></selection><p visible-if=\"wrong\">Put <code>base</code>, <code>height</code>, and <code>getArea()</code> in the same class.</p></body></html>"
          },
          {
            "title": "Example 1",
            "id": 92849,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Convert this non-encapsulated code into OOP code. First, create a class called <code>Rectangle</code>.</p><code version=\"2\" codelang=\"python\" name=\"script.py\" visible-if=\"always\"><content><text value=\"def\" class=\"keyword\" /><text value=\" \" /><text value=\"getArea\" class=\"title\" /><text value=\"(b, h)\" class=\"params\" /><text value=\":\" /><text type=\"break\" /><text value=\"  \" /><text value=\"return\" class=\"keyword\" /><text value=\" b * h\" /><text type=\"break\" /><text type=\"break\" /><text value=\"base = \" /><text value=\"3\" class=\"number\" /><text type=\"break\" /><text value=\"height = \" /><text value=\"4\" class=\"number\" /><text type=\"break\" /><text type=\"break\" /><text value=\"class\" class=\"keyword\" /><text value=\" \" /><text value=\"Rectangle\" class=\"title\" /><text value=\":\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"56\" endIndex=\"61\" /><option startIndex=\"62\" endIndex=\"72\" /></options></interaction></interactions></code><p visible-if=\"wrong\">Make sure to pick <code>class</code>, followed by <code>Rectangle:</code>.</p></body></html>"
          },
          {
            "title": "Example 2",
            "id": 92848,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>We encapsulate the data and function by giving <code>Rectangle</code> the <code>base</code> and <code>height</code> properties and a <code>getArea()</code> method.</p><code version=\"2\" codelang=\"python\" name=\"script.py\" visible-if=\"always\"><content><text value=\"def\" class=\"keyword\" /><text value=\" \" /><text value=\"getArea\" class=\"title\" /><text value=\"(b, h)\" class=\"params\" /><text value=\":\" /><text type=\"break\" /><text value=\"  \" /><text value=\"return\" class=\"keyword\" /><text value=\" b * h\" /><text type=\"break\" /><text type=\"break\" /><text value=\"base = \" /><text value=\"3\" class=\"number\" /><text type=\"break\" /><text value=\"height = \" /><text value=\"4\" class=\"number\" /><text type=\"break\" /><text type=\"break\" /><text value=\"class\" class=\"keyword\" /><text value=\" \" /><text value=\"Rectangle\" class=\"title\" /><text value=\":\" /><text type=\"break\" /><text value=\"  base = \" /><text value=\"3\" class=\"number\" /><text type=\"break\" /><text value=\"  height = \" /><text value=\"4\" class=\"number\" /><text type=\"break\" /><text value=\"  \" /><text value=\"def\" class=\"keyword\" /><text value=\" \" /><text value=\"getArea\" class=\"title\" /><text value=\"()\" class=\"params\" /><text value=\":\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"99\" endIndex=\"102\" /><option startIndex=\"103\" endIndex=\"110\" /><option startIndex=\"110\" endIndex=\"111\" /><option startIndex=\"111\" endIndex=\"112\" /><option startIndex=\"86\" endIndex=\"92\" /></options></interaction></interactions></code><p visible-if=\"wrong\">Make sure to pick <code>height</code> followed by <code>def</code> and then <code>getArea</code>, <code>(</code>, <code>)</code>.</p></body></html>"
          },
          {
            "title": "Example 3",
            "id": 92847,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Next, we'll finish the <code>getArea()</code> method. Add <code>self.base</code>, <code>*</code>, and then <code>self.height</code>.</p><code version=\"2\" codelang=\"python\" name=\"script.py\" visible-if=\"always\"><content><text value=\"def\" class=\"keyword\" /><text value=\" \" /><text value=\"getArea\" class=\"title\" /><text value=\"(b, h)\" class=\"params\" /><text value=\":\" /><text type=\"break\" /><text value=\"  \" /><text value=\"return\" class=\"keyword\" /><text value=\" b * h\" /><text type=\"break\" /><text type=\"break\" /><text value=\"base = \" /><text value=\"3\" class=\"number\" /><text type=\"break\" /><text value=\"height = \" /><text value=\"4\" class=\"number\" /><text type=\"break\" /><text type=\"break\" /><text value=\"class\" class=\"keyword\" /><text value=\" \" /><text value=\"Rectangle\" class=\"title\" /><text value=\":\" /><text type=\"break\" /><text value=\"  base = \" /><text value=\"3\" class=\"number\" /><text type=\"break\" /><text value=\"  height = \" /><text value=\"4\" class=\"number\" /><text type=\"break\" /><text value=\"  \" /><text value=\"def\" class=\"keyword\" /><text value=\" \" /><text value=\"getArea\" class=\"title\" /><text value=\"(self)\" class=\"params\" /><text value=\":\" /><text type=\"break\" /><text value=\"   \" /><text value=\"return\" class=\"keyword\" /><text value=\" self.base * self.height\" /></content><interactions><interaction type=\"validatedInput\" isDefault=\"true\" startIndex=\"128\" endIndex=\"151\" /></interactions></code><p visible-if=\"wrong\">Make sure to type <code>self.base * self.height</code>.</p></body></html>"
          },
          {
            "title": "Example 4",
            "id": 92846,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>At this point, we can remove the old FP code. Let's call the rectangle's <code>getArea()</code> method so we can store the result in a variable.</p><code version=\"2\" codelang=\"python\" name=\"script.py\" visible-if=\"always\"><content><text value=\"class\" class=\"keyword\" /><text value=\" \" /><text value=\"Rectangle\" class=\"title\" /><text value=\":\" /><text type=\"break\" /><text value=\"  base = \" /><text value=\"3\" class=\"number\" /><text type=\"break\" /><text value=\"  height = \" /><text value=\"4\" class=\"number\" /><text type=\"break\" /><text value=\"  \" /><text type=\"break\" /><text value=\"  \" /><text value=\"def\" class=\"keyword\" /><text value=\" \" /><text value=\"getArea\" class=\"title\" /><text value=\"(self)\" class=\"params\" /><text value=\":\" /><text type=\"break\" /><text value=\"   \" /><text value=\"return\" class=\"keyword\" /><text value=\" self.base * self.height\" /><text type=\"break\" /><text type=\"break\" /><text value=\"rect = Rectangle()\" /><text type=\"break\" /><text value=\"area = rect.getArea()\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"126\" endIndex=\"130\" /><option startIndex=\"130\" endIndex=\"131\" /><option startIndex=\"131\" endIndex=\"138\" /><option startIndex=\"138\" endIndex=\"139\" /><option startIndex=\"139\" endIndex=\"140\" /></options></interaction></interactions></code><p visible-if=\"wrong\">Make sure to pick <code>rect</code> followed by <code>.</code> and then <code>getArea</code>, <code>(</code>, <code>)</code>.</p></body></html>"
          },
          {
            "title": "Example 5",
            "id": 92826,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Let's display the result in the console to see if it's what we expect.</p><code version=\"2\" codelang=\"python\" name=\"script.py\" visible-if=\"always\"><content><text value=\"class\" class=\"keyword\" /><text value=\" \" /><text value=\"Rectangle\" class=\"title\" /><text value=\":\" /><text type=\"break\" /><text value=\"  base = \" /><text value=\"3\" class=\"number\" /><text type=\"break\" /><text value=\"  height = \" /><text value=\"4\" class=\"number\" /><text type=\"break\" /><text value=\"  \" /><text type=\"break\" /><text value=\"  \" /><text value=\"def\" class=\"keyword\" /><text value=\" \" /><text value=\"getArea\" class=\"title\" /><text value=\"(self)\" class=\"params\" /><text value=\":\" /><text type=\"break\" /><text value=\"   \" /><text value=\"return\" class=\"keyword\" /><text value=\" self.base * self.height\" /><text type=\"break\" /><text type=\"break\" /><text value=\"rect = Rectangle()\" /><text type=\"break\" /><text value=\"area = rect.getArea()\" /><text type=\"break\" /><text value=\"print(area)\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"141\" endIndex=\"146\" /><option startIndex=\"146\" endIndex=\"147\" /><option startIndex=\"147\" endIndex=\"151\" /><option startIndex=\"151\" endIndex=\"152\" /></options></interaction></interactions><output><content><text value=\"12\" /></content></output></code><p visible-if=\"wrong\">Make sure to pick <code>print</code> followed by <code>(</code> and then <code>area</code>, <code>)</code>.</p></body></html>"
          }
        ]
      }
    ]
  }
}