{
  "tutorial": {
    "id": 2635,
    "version": 6,
    "type": "challenges",
    "isNew": false,
    "codeLanguage": "javascript",
    "title": "DOM & Events",
    "descriptionContent": "Challenges are more difficult exercises that will test your skills.",
    "shortDescriptionContent": "",
    "showInTrack": true,
    "iconBanner": null,
    "chapters": [
      {
        "id": 14546,
        "title": "HTML from Tree Image",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "Chat App",
            "id": 129206,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Let's create a chat app. \n![html tree](https://mimo.app/i/dom_tree_1.png)\n\n1. Create the HTML tree shown in this image by adding the appropriate elements.\n",
              "preselectedFileIndex": 0,
              "hasVisualOutput": true,
              "files": [
                {
                  "name": "index.html",
                  "codeLanguage": "html",
                  "content": "<!doctype html>\n<html>\n  <body>\n  </body>\n</html>",
                  "solvedContent": "<!doctype html>\n<html>\n  <body>\n    <textarea></textarea>\n    <br />\n    <input>\n    <button>Send</button>\n  </body>\n</html>"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 14547,
        "title": "HTML from Description",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "Date Range",
            "id": 129207,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Create a website that allows the user to choose a date range. Code the following in the `.html` file.\n\n1. Add an input of type `date` as a child of the `body`.\n2. Add an input of type `date` as a sibling of the other input.\n\n",
              "preselectedFileIndex": 0,
              "hasVisualOutput": true,
              "files": [
                {
                  "name": "index.html",
                  "codeLanguage": "html",
                  "content": "<!doctype html>\n<html>\n  <head>\n    <link rel=\"stylesheet\" href=\"style.css\">\n  </head>\n  <body>\n  </body>\n</html>",
                  "solvedContent": "<!doctype html>\n<html>\n  <head>\n    <link rel=\"stylesheet\" href=\"style.css\">\n  </head>\n  <body>\n    <input name=\"checkin\" type=\"date\">\n    <input name=\"checkout\" type=\"date\">\n  </body>\n</html>"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 14548,
        "title": "DOM firstElementChild",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "Employee Profile",
            "id": 129208,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Let's create an employee profile page. Code the following in the script tag.\n\n1. Use the DOM to set the text of the `body` element first child element to `\"Employee Profile\"`.",
              "preselectedFileIndex": 1,
              "hasVisualOutput": true,
              "files": [
                {
                  "name": "index.html",
                  "codeLanguage": "html",
                  "content": "<!doctype html>\n<html>\n  <body>\n    <h1></h1>\n    <script src=\"index.js\">\n    </script>\n  </body>\n</html>",
                  "solvedContent": null
                },
                {
                  "name": "index.js",
                  "codeLanguage": "javascript",
                  "content": "",
                  "solvedContent": "document.body.firstElementChild.textContent = \"Employee Profile\";\n"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 14549,
        "title": "Product Detail Page",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "Product Detail Page",
            "id": 129209,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Let's create a product ordering page. We have a function `qtyChanged`, which calculates the total cost based on price and quantity and then sets the text of the `p` element.\n\n1. Finish the code that updates the total whenever the input is changed. Use the `.onchange` event handler.\n\n\n",
              "preselectedFileIndex": 1,
              "hasVisualOutput": true,
              "files": [
                {
                  "name": "index.html",
                  "codeLanguage": "html",
                  "content": "<!doctype html>\n<html>\n  <head>\n  </head>\n  <body>\n    <h1>Breakfast Sandwich</h1>\n    <img src=\"https://mimo.app/i/croissant.png\" id=\"shape\"\n      style=\"width:100px;height:100px;border: 1px solid black\">\n    <br> Price: $1.99 <br> Qty<input type=\"number\">\n    <p> Total Price: $0 </p>\n    <script src=\"script.js\"></script>\n  </body>\n</html>",
                  "solvedContent": null
                },
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const input\n\nfunction qtyChanged() {\n  document.querySelector(\"p\").innerHTML = \"Total Price: $\" + (Number(input.value) * 1.99);\n}\n",
                  "solvedContent": "const input = document.querySelector(\"input\");\n\nfunction qtyChanged() {\n  document.querySelector(\"p\").innerHTML = \"Total Price: $\" + (Number(input.value) * 1.99);\n}\ninput.onchange = qtyChanged;"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 14550,
        "title": "Terms of Service",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "Terms of Service",
            "id": 129210,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Let's create a \"terms of service\" box that checks if you actually read it. We have the function `checkReading` which determines if the user has scrolled to the bottom.\n\n1. Finish the code that calls the function `checkReading` every time the user scrolls the `textarea`. You'll need to create a variable with the name of your choice, to accomplish this.",
              "preselectedFileIndex": 1,
              "hasVisualOutput": true,
              "files": [
                {
                  "name": "index.html",
                  "codeLanguage": "html",
                  "content": "<!doctype html>\n<html>\n <body>\n  <textarea style=\"height: 200px; width: 100%;\">\n   Please read these terms of service (\"terms\", \"terms of service\") carefully before using [website] website (the \"service\") operated by [name] (\"us\", 'we\", \"our\").\n\n   Conditions of Use\n\n   We will provide their services to you, which are subject to the conditions stated below in this document. Every time you visit this website, use its services or make a purchase, you accept the following conditions. This is why we urge you to read them carefully.\n\n   Privacy Policy\n\n   Before you continue using our website we advise you to read our privacy policy [link to privacy policy] regarding our user data collection. It will help you better understand our practices.\n  </textarea>\n  <p></p>\n  <script src=\"script.js\"></script>\n </body>\n</html>",
                  "solvedContent": null
                },
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "\n\nfunction checkReading () {\n  const read = terms.scrollHeight - Math.round(terms.scrollTop) === terms.clientHeight;\n  if(read){\n   document.getElementsByTagName(\"p\")[0].innerHTML = \"Thank You\";\n  }\n}\n",
                  "solvedContent": "const terms = document.getElementsByTagName(\"textarea\")[0];\n\nfunction checkReading () {\n  const read = terms.scrollHeight - Math.round(terms.scrollTop) === terms.clientHeight;\n  if(read){\n   document.getElementsByTagName(\"p\")[0].innerHTML = \"Thank You\";\n  }\n}\nterms.onscroll =  checkReading;"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 14551,
        "title": "Like Button",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "Like Button",
            "id": 129211,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Let's create a \"like\" button that requires double-clicking it.\n\n1. Add the necessary code to call the `like` function when the heart button is double-clicked.",
              "preselectedFileIndex": 1,
              "hasVisualOutput": true,
              "files": [
                {
                  "name": "index.html",
                  "codeLanguage": "html",
                  "content": "<!doctype html>\n<html>\n  <head>\n    <link rel=\"stylesheet\" href=\"index.css\">\n  </head>\n  <body>\n    <h1>My Vacation</h1>\n    <img id=\"like\" src=\"https://mimo.app/i/beach.png\"\n      style=\"width:100px;height:100px;border:1px solid black\">\n    <p></p>\n    <button class=\"heart\">huh</button>\n    <script src=\"./script.js\"></script>\n  </body>\n</html>",
                  "solvedContent": null
                },
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "\n\nfunction like() {\n  document.querySelector(\"p\").innerHTML = \"Liked\";\n}\n",
                  "solvedContent": "const img = document.querySelector(\"button\");\n\nfunction like() {\n  document.querySelector(\"p\").innerHTML = \"Liked\";\n}\nimg.ondblclick = like;"
                },
                {
                  "name": "index.css",
                  "codeLanguage": "css",
                  "content": ".heart {\n  width: 36px;\n  height: 36px;\n  position: relative;\n  margin: 1em auto;\n  transform-origin: 50% 50%;\n  transform: rotate(45deg) scale(1);\n  cursor: pointer;\n  background: transparent;\n  border: none !important;\n  font-size: 0;\n}\n\n.heart:before {\n  content: \"\";\n  position: absolute;\n  display: block;\n  border-top-left-radius: 12px;\n  border-bottom-left-radius: 12px;\n  background-color: tomato;\n  width: inherit;\n  height: 24px;\n  top: 12px;\n  left: 0;\n}\n\n.heart:after {\n  content: \"\";\n  position: absolute;\n  display: block;\n  background-color: tomato;\n  width: 24px;\n  top: 0;\n  left: 12px;\n  height: inherit;\n  border-top-left-radius: 12px;\n  border-top-right-radius: 12px;\n}",
                  "solvedContent": null
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 12312,
        "title": "DOM Children",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "Job Listing",
            "id": 111612,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Let's create a job posting page. Code the following in the script tag.\n\n1. Use the DOM to access the `ul` as the second child of the body and save in a variable named `jobs`.\n2. Use the DOM to access the two children of the `ul` element and set their text to some job title.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": true,
              "files": [
                {
                  "name": "index.html",
                  "codeLanguage": "html",
                  "content": "<!doctype html>\n<html>\n  <body>\n    <h1>Current Positions Open</h1>\n    <ul>\n      <li></li>\n      <li></li>\n    </ul>\n    <script>\n    </script>\n  </body>\n</html>",
                  "solvedContent": "<!doctype html>\n<html>\n  <body>\n    <h1>Current Positions Open</h1>\n    <ul>\n      <li></li>\n      <li></li>\n    </ul>\n    <script>\n      let jobs = document.body.children[1];\n      jobs.children[0].innerHTML = \"Software QA\";\n      jobs.children[1].innerHTML = \"Project Manager\";\n    </script>\n  </body>\n</html>"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 12277,
        "title": "Remove Element",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "Remove Element",
            "id": 111486,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "In this HTML file, the task is to remove an existing `p` element using JavaScript.\n\n1. In the `script.js` file, make a new const variable and name it `paraEl`.\n2. Use the `getElementById()` method on the `document` object to get the paragraph with the `id` of `para`. Assign this value to `paraEl`.\n3. Get the `body` element using the `querySelector()` method. Assign this value to a const variable named `bodyEl`.\n4. On the `bodyEl` object, run the `removeChild()` method, passing it the `paraEl` variable as its parameter. This should result in the `p` element being removed from the document.",
              "preselectedFileIndex": 1,
              "hasVisualOutput": true,
              "files": [
                {
                  "name": "index.html",
                  "codeLanguage": "html",
                  "content": "<!doctype html>\n<html>\n <body>\n  <h1 id=\"the-heading\">Removing elements here!</h1>\n  <p id=\"para\">I'm about to be removed from the document!</p>\n  <script src=\"script.js\"></script>\n </body>\n</html>",
                  "solvedContent": null
                },
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "\n\nbodyEl.removeChild();",
                  "solvedContent": "const paraEl = document.getElementById('para');\nconst bodyEl = document.querySelector('body');\nbodyEl.removeChild(paraEl);"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 12223,
        "title": "Filter",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "Filter",
            "id": 111061,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Let's give our users the ability to search for a product. The `searchProducts` function that will do the searching is already created for you. \n\n1. The first input on the page should search the products when the user types input into it.\n2. The checkbox input on the page should search the products when the user clicks it.",
              "preselectedFileIndex": 1,
              "hasVisualOutput": true,
              "files": [
                {
                  "name": "index.html",
                  "codeLanguage": "html",
                  "content": "<!doctype html>\n<html>\n  <body>\n    <h1>Shopper</h1> Search <input><br> Free Shipping <input type=\"checkbox\">\n    <ul>\n    </ul>\n    <br>\n    <br>\n    <script src=\"./script.js\"></script>\n  </body>\n</html>",
                  "solvedContent": null
                },
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const products = [{\n  name: \"bike\",\n  freeShipping: true\n}, {\n  name: \"gloves\",\n  freeShipping: false\n}, {\n  name: \"phone\",\n  freeShipping: true\n}];\n\n\nfunction searchProducts() {\n  const ul = document.querySelector(\"ul\");\n  ul.innerHTML = \"\";\n  for (let i = 0; i < products.length; i++) {\n    if (show(products[i])) {\n      const li = document.createElement(\"li\");\n      li.innerHTML = products[i].name;\n      ul.appendChild(li);\n    }\n  }\n}\n\nfunction show(product){\n  const input = document.querySelector(\"input\");\n  const shipping = document.querySelectorAll(\"input\")[1];\n  return (input.value === \"\" || product.name.indexOf(input.value) > -1) && (!\n        shipping.checked || product.freeShipping);\n}\nsearchProducts();",
                  "solvedContent": "const products = [{\n  name: \"bike\",\n  freeShipping: true\n}, {\n  name: \"gloves\",\n  freeShipping: false\n}, {\n  name: \"phone\",\n  freeShipping: true\n}];\nconst input = document.querySelector(\"input\");\ninput.oninput = searchProducts;\nconst checkbox = document.querySelectorAll(\"input\")[1];\ncheckbox.onchange = searchProducts;\n\n\nfunction searchProducts() {\n  const ul = document.querySelector(\"ul\");\n  ul.innerHTML = \"\";\n  for (let i = 0; i < products.length; i++) {\n    if (show(products[i])) {\n      const li = document.createElement(\"li\");\n      li.innerHTML = products[i].name;\n      ul.appendChild(li);\n    }\n  }\n}\n\nfunction show(product){\n  const input = document.querySelector(\"input\");\n  const shipping = document.querySelectorAll(\"input\")[1];\n  return (input.value === \"\" || product.name.indexOf(input.value) > -1) && (!\n        shipping.checked || product.freeShipping);\n}\nsearchProducts();"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 12217,
        "title": "Employee Profile",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "Employee Profile",
            "id": 111055,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Let's add the ability to view different sections of our employee profile. In the `script.js` file we have the `showInfo()` function to display employee info, the `showPayHistory()` to show pay stubs, and the `showTimeOff()` to show time off.\n\n1. Make the first `button` display the employee info when it is clicked.\n2. Make the second `button` show the pay history when it is clicked.\n3. Make the third `button` show the time off when it is clicked.",
              "preselectedFileIndex": 1,
              "hasVisualOutput": true,
              "files": [
                {
                  "name": "index.html",
                  "codeLanguage": "html",
                  "content": "<!doctype html>\n<html>\n  <head>\n    <link rel=\"stylesheet\" href=\"index.css\">\n  </head>\n  <body>\n    <h1>Employee Profile</h1>\n    <button>Info</button> | <button>Pay History</button> | <button>Time\n      off</button>\n    <br>\n    <br>\n    <div> Janie Culliver, Sales Rep </div>\n    <script src=\"./script.js\"></script>\n  </body>\n</html>",
                  "solvedContent": null
                },
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "function showInfo() {\n  document.querySelector(\"div\").innerHTML = \"Janie Culliver, Sales Rep\";\n}\n\nfunction showPayHistory() {\n  document.querySelector(\"div\").innerHTML = \"$2334.20<br>$2333.22\";\n}\n\nfunction showTimeOff() {\n  document.querySelector(\"div\").innerHTML = \"Taken this year: 8 days\";\n}\n\n\n",
                  "solvedContent": "function showInfo() {\n  document.querySelector(\"div\").innerHTML = \"Janie Culliver, Sales Rep\";\n}\n\nfunction showPayHistory() {\n  document.querySelector(\"div\").innerHTML = \"$2334.20<br>$2333.22\";\n}\n\nfunction showTimeOff() {\n  document.querySelector(\"div\").innerHTML = \"Taken this year: 8 days\";\n}\ndocument.querySelectorAll(\"button\")[0].onclick = showInfo;\ndocument.querySelectorAll(\"button\")[1].onclick = showPayHistory;\ndocument.querySelectorAll(\"button\")[2].onclick = showTimeOff;"
                },
                {
                  "name": "index.css",
                  "codeLanguage": "css",
                  "content": "button {\n  background: none;\n  border: none;\n  padding: 0;\n  /*optional*/\n  font-family: arial, sans-serif;\n  /*input has OS specific font-family*/\n  color: #069;\n  text-decoration: underline;\n  cursor: pointer;\n}",
                  "solvedContent": null
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 12219,
        "title": "Trip Planner",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "Trip Planner",
            "id": 111057,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Our booking app needs to inform the user if they choose invalid dates. We already have the `valid()` function, which validates by making sure the dates are in order. We also have the `book()` function, which completes the booking.\n\n1. Make the `Check In` input field run the validate command when it is changed.\n2. Make the `Check Out` input field run the validate command when it is changed.\n3. Make the button complete the booking when it is clicked.\n\n",
              "preselectedFileIndex": 1,
              "hasVisualOutput": true,
              "files": [
                {
                  "name": "index.html",
                  "codeLanguage": "html",
                  "content": "<!doctype html>\n<html>\n  <head>\n    <link rel=\"stylesheet\" href=\"style.css\">\n  </head>\n  <body>\n    <h1>Book Your Room</h1> Check In <input name=\"checkin\" type=\"date\">\n    <br> Check Out <input name=\"checkout\" type=\"date\">\n    <p></p>\n    <button disabled onclick=\"book()\">Book</button>\n    <br>\n    <div></div>\n    <script src=\"script.js\"></script>\n  </body>\n</html>",
                  "solvedContent": null
                },
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "\n\n\n\nfunction valid() {\n  if (new Date(checkin.value).getTime() >= new Date(checkout.value).getTime()) {\n    document.querySelector(\"p\").innerHTML =\n      \"Check in date must be before check out\";\n    document.querySelector(\"button\").disabled = true;\n  } else {\n    document.querySelector(\"p\").innerHTML = \"\";\n    document.querySelector(\"button\").disabled = false;\n  }\n}\nfunction bookTrip() {\n  document.querySelector(\"div\").innerHTML = \"Trip is booked\";\n}\n\n\n",
                  "solvedContent": "const checkin = document.querySelectorAll(\"input\")[0];\nconst checkout = document.querySelectorAll(\"input\")[1];\nconst button = document.querySelector(\"button\");\n\nfunction valid() {\n  if (new Date(checkin.value).getTime() >= new Date(checkout.value).getTime()) {\n    document.querySelector(\"p\").innerHTML =\n      \"Check in date must be before check out\";\n    document.querySelector(\"button\").disabled = true;\n  } else {\n    document.querySelector(\"p\").innerHTML = \"\";\n    document.querySelector(\"button\").disabled = false;\n  }\n}\nfunction bookTrip() {\n  document.querySelector(\"div\").innerHTML = \"Trip is booked\";\n}\ncheckin.onchange = valid;\ncheckout.onchange = valid;\nbutton.onclick = bookTrip;"
                },
                {
                  "name": "style.css",
                  "codeLanguage": "css",
                  "content": ".done {\n  text-decoration: line-through;\n}",
                  "solvedContent": null
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 12220,
        "title": "Chat App",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "Chat App",
            "id": 111058,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Let's create a chat app. We've been given the `typing` function, which shows a message indicating the user is typing. There is also the `send` function, which puts the text into the chat window.\n\n1. Add code so that the `Typing...` message shows when the user types input into the text input.\n2. Add code so that it sends the message when the button is clicked.\n",
              "preselectedFileIndex": 1,
              "hasVisualOutput": true,
              "files": [
                {
                  "name": "index.html",
                  "codeLanguage": "html",
                  "content": "<!doctype html>\n<html>\n  <body>\n    <textarea style=\"height: 200px; width: 100%;\">\n  </textarea>\n    <p></p>\n    <br>\n    <input><button>Send</button>\n    <script src=\"script.js\"></script>\n  </body>\n</html>",
                  "solvedContent": null
                },
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const input = document.querySelector(\"input\");\nconst button = document.querySelector(\"button\");\n\nfunction typing() {\n  document.querySelector(\"p\").innerHTML = \"Typing...\";\n}\n\nfunction send() {\n  document.querySelector(\"textarea\").innerHTML = document.querySelector(\n      \"textarea\").innerHTML + document.querySelector(\"input\").value +\n    \"&#13;&#10;\";\n  document.querySelector(\"p\").innerHTML = \"\";\n  document.querySelector(\"input\").value = \"\";\n}",
                  "solvedContent": "const input = document.querySelector(\"input\");\nconst button = document.querySelector(\"button\");\n\nfunction typing() {\n  document.querySelector(\"p\").innerHTML = \"Typing...\";\n}\n\nfunction send() {\n  document.querySelector(\"textarea\").innerHTML = document.querySelector(\n      \"textarea\").innerHTML + document.querySelector(\"input\").value +\n    \"&#13;&#10;\";\n  document.querySelector(\"p\").innerHTML = \"\";\n  document.querySelector(\"input\").value = \"\";\n}\ninput.oninput = typing;\nbutton.onclick = send;"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 12218,
        "title": "Game",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "Game",
            "id": 111056,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Let's create a duck game. There is a `move` function that updates the duck location when the slider is moved. There is the `win` function that tests if the duck has reached home. Code the following in the `script.js` file.\n\n1. The `move` function should be called whenever the range input value is inputted by moving the slider.\n2. The `win` function should be called whenever the range input is changed. The function will then check if the user has indeed won the game.",
              "preselectedFileIndex": 1,
              "hasVisualOutput": true,
              "files": [
                {
                  "name": "index.html",
                  "codeLanguage": "html",
                  "content": "<!doctype html>\n<html>\n  <head>\n  </head>\n  <body>\n    <h1>Make the duck go home</h1>\n    <img src=\"https://mimo.app/i/batduck.png\" width=\"50px\"\n      style=\"position:absolute; border-radius: 50%;\">\n    <img src=\"https://mimo.app/i/house-2.png\" width=\"70px\"\n      style=\"left:100px;position:absolute\">\n    <br>\n    <br>\n    <br>\n    <input type=\"range\" value=\"0\">\n    <p></p>\n    <script src=\"script.js\"></script>\n  </body>\n</html>",
                  "solvedContent": null
                },
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const input = document.querySelector(\"input\");\nconst duck = document.querySelector(\"img\");\nconst progress = 10;\n\nfunction move() {\n  const input = document.querySelector(\"input\");\n  duck.style.left = (input.value) + 'px';\n}\n\nfunction win() {\n  const p = document.querySelector(\"p\");\n  const input = document.querySelector(\"input\");\n  if (Number(input.value) >= 100) {\n    p.innerHTML = \"You Win!\";\n  } else {\n    p.innerHTML = \"\";\n  }\n}",
                  "solvedContent": "const input = document.querySelector(\"input\");\nconst duck = document.querySelector(\"img\");\nconst progress = 10;\n\nfunction move() {\n  const input = document.querySelector(\"input\");\n  duck.style.left = (input.value) + 'px';\n}\n\nfunction win() {\n  const p = document.querySelector(\"p\");\n  const input = document.querySelector(\"input\");\n  if (Number(input.value) >= 100) {\n    p.innerHTML = \"You Win!\";\n  } else {\n    p.innerHTML = \"\";\n  }\n}\ninput.oninput = move;\ninput.onchange = win;"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 12216,
        "title": "Channel Changer",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "Channel Changer",
            "id": 111054,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Let's create the remote for Cat TV. In the `script.js` file we already have two functions:\n- `up` changes the channel up\n- `down` changes the channel down\n\n1. Add code so that the channel goes up whenever the first button is clicked.\n2. Add code so that the channel goes down whenever the second button is clicked.",
              "preselectedFileIndex": 1,
              "hasVisualOutput": true,
              "files": [
                {
                  "name": "index.html",
                  "codeLanguage": "html",
                  "content": "<!doctype html>\n<html>\n  <head>\n  </head>\n  <body>\n    <h1>Cat TV</h1>\n   \n    <img src=\"https://mimo.app/i/shushi.png\" width=\"100px\" height=\"100px\">\n    <br>\n    <button>Up</button>\n    <button>Down</button>\n    <script src=\"script.js\"></script>\n  </body>\n</html>",
                  "solvedContent": null
                },
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "let index = 0;\nlet currentSrc = \"\";\nconst images = [\"https://mimo.app/i/shushi.png\",\n  \"https://mimo.app/i/sparkles.png\", \"https://mimo.app/i/whiskers.png\"\n];\n\nfunction up() {\n  index = index === 2 ? index : index + 1;\n  currentSrc = images[index];\n  changeChannel();\n}\n\nfunction down() {\n  index = index === 0 ? index : index - 1;\n  currentSrc = images[index];\n  changeChannel();\n}\n\nfunction changeChannel() {\n  const image = document.getElementsByTagName(\"img\")[0];\n  image.src = currentSrc;\n}",
                  "solvedContent": "let index = 0;\nlet currentSrc = \"\";\nconst images = [\"https://mimo.app/i/shushi.png\",\n  \"https://mimo.app/i/sparkles.png\", \"https://mimo.app/i/whiskers.png\"\n];\n\nfunction up() {\n  index = index === 2 ? index : index + 1;\n  currentSrc = images[index];\n  changeChannel();\n}\n\nfunction down() {\n  index = index === 0 ? index : index - 1;\n  currentSrc = images[index];\n  changeChannel();\n}\n\nfunction changeChannel() {\n  const image = document.getElementsByTagName(\"img\")[0];\n  image.src = currentSrc;\n}\ndocument.getElementsByTagName(\"button\")[0].onclick = up;\ndocument.getElementsByTagName(\"button\")[1].onclick = down;"
                }
              ],
              "hints": []
            }
          }
        ]
      }
    ]
  }
}