{
  "tutorial": {
    "id": 2276,
    "version": 1,
    "type": "practiceOptional",
    "isNew": false,
    "codeLanguage": "javascript",
    "title": "JavaScript Classes 2",
    "descriptionContent": "JavaScript Classes 2",
    "shortDescriptionContent": "",
    "showInTrack": true,
    "iconBanner": null,
    "chapters": [
      {
        "id": 11920,
        "title": "Extending Classes",
        "type": "practiceLevel3",
        "lessons": [
          {
            "title": "Code: Extends",
            "id": 108780,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Create an empty `Rose` class that inherits from the  `Flower` class.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "class Flower {\n constructor(color) {\n  this.color = color;\n }\n}",
                  "solvedContent": "class Flower {\n constructor(color) {\n  this.color = color;\n }\n}\nclass Rose extends Flower {}"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Code: Property inheritance",
            "id": 108781,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Create a constant named `MUSHU` that is an instance from the `Dragon` class. Include `true` as the `isGood` property value.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "class Creature {\n constructor(isGood) {\n  this.isGood = isGood;\n }\n}\nclass Dragon extends Creature {}",
                  "solvedContent": "class Creature {\n constructor(isGood) {\n  this.isGood = isGood;\n }\n}\nclass Dragon extends Creature {}\nconst MUSHU = new Dragon(true);"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Code: Subclass and superclass",
            "id": 108782,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Create a `Blender` class that extends `Appliance`.  Create a new instance of `Blender` and save it in a constant named `blender`",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "class Appliance {\n constructor() {\n  this.volts = 120;\n }\n}\nclass Toaster extends Appliance {}\n\nconst toaster = new Toaster();\n\nconsole.log(toaster);",
                  "solvedContent": "class Appliance {\n constructor() {\n  this.volts = 120;\n }\n}\nclass Toaster extends Appliance {}\nclass Blender extends Appliance {}\nconst toaster = new Toaster();\nconst blender = new Blender();\nconsole.log(toaster);"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Code: Constructor inheritance",
            "id": 108787,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Create a `Dollar` class that extends `Currency`. Create a new instance of `Dollar`  where the symbol is `$`. Save it in a constant named `dollar`",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "class Currency {\n constructor(symbol) {\n  this.symbol = symbol;\n }\n}\nclass Yen extends Currency {}\nconst yen = new Yen(\"Y\");\nconsole.log(yen);\nconsole.log(dollar);",
                  "solvedContent": "class Currency {\n constructor(symbol) {\n  this.symbol = symbol;\n }\n}\nclass Yen extends Currency {}\nclass Dollar extends Currency {}\nconst yen = new Yen(\"Y\");\nconst dollar = new Dollar(\"$\");\nconsole.log(yen);\nconsole.log(dollar);"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Code: Method inheritance",
            "id": 108784,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Create a `Drill` class that extends `Tool`. Create a new instance of `Drill`  with the action `drill`. Save it in a constant named `tool1`. Call the `use` method.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "class Tool {\n constructor(action) {\n  this.action = action;\n }\n use() {\n  console.log(\"Starting to \" + this.action);\n }\n}",
                  "solvedContent": "class Tool {\n constructor(action) {\n  this.action = action;\n }\n use() {\n  console.log(\"Starting to \" + this.action);\n }\n}\nclass Drill extends Tool {}\nconst tool1 = new Drill(\"drill\");\ntool1.use();"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Code: Multiple subclasses",
            "id": 108785,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Create a `Python` class that extends `ProgrammingLanguage`. Create a `lang2` constant that stores a new instance of `Python`  where the `usesCurlies` is `false`. Call the `compile` method.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "class ProgrammingLanguage {\n constructor(usesCurlies) {\n  this.usesCurlies = usesCurlies;\n }\n compile() {\n  console.log(\"Compiling, curlies: \" + this.usesCurlies);\n }\n}\nclass Java extends ProgrammingLanguage {}\nconst lang1 = new Java(true);\nlang1.compile();",
                  "solvedContent": "class ProgrammingLanguage {\n constructor(usesCurlies) {\n  this.usesCurlies = usesCurlies;\n }\n compile() {\n  console.log(\"Compiling, curlies: \" + this.usesCurlies);\n }\n}\nclass Java extends ProgrammingLanguage {}\nclass Python extends ProgrammingLanguage {}\nconst lang1 = new Java(true);\nlang1.compile();\nconst lang2 = new Python(false);\nlang2.compile();"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Code: Additional functionality",
            "id": 108786,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Add a `train()` method to the `GymTeacher` class, around the display statement. Create a `teacher` constant that saves a new `GymTeacher` instance with `8` students. Call the `train` method.\n",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "class Teacher {\n constructor(students) {\n  this.students = students;\n }\n grade() {\n  console.log(\"Everyone gets an A\");\n }\n}\nclass ScienceTeacher extends Teacher {\n doLab() {\n  console.log(\"Don't burn the school down.\");\n }\n}\nclass GymTeacher extends Teacher {\n console.log(\"Time to run laps.\");\n}",
                  "solvedContent": "class Teacher {\n constructor(students) {\n  this.students = students;\n }\n grade() {\n  console.log(\"Everyone gets an A\");\n }\n}\nclass ScienceTeacher extends Teacher {\n doLab() {\n  console.log(\"Don't burn the school down.\");\n }\n}\nclass GymTeacher extends Teacher {\n train() {\n  console.log(\"Time to run laps.\");\n }\n}\nconst teacher = new GymTeacher();\nteacher.train();"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 11956,
        "title": "Overriding Methods",
        "type": "practiceLevel3",
        "lessons": [
          {
            "title": "Code: Overriding methods",
            "id": 109205,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Override the `Animal` class's `pet()` method by placing the `Cat` class's  `console.log(\"Prrrr\")` inside a `pet()` method.\n",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "class Animal {\n pet() {\n  console.log(\"growl\");\n }\n}\nclass Cat extends Animal {\n console.log(\"Prrrr\");\n}\nconst mindy = new Cat();\nmindy.pet();",
                  "solvedContent": "class Animal {\n pet() {\n  console.log(\"growl\");\n }\n}\nclass Cat extends Animal {\n pet() {\n  console.log(\"Prrrr\");\n }\n}\nconst mindy = new Cat();\nmindy.pet();"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Code: Overriding methods 2",
            "id": 109202,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Place the `console.log(\"Interview witnesses\")` code in a `duty()` method. Call the `duty()` method of the `sherlock` constant.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "class Officer {\n duty() {\n  console.log(\"Protect and serve.\");\n }\n}\nclass Detective extends Officer {\n console.log(\"Interview witnesses\");\n}\nconst sherlock = new Detective();",
                  "solvedContent": "class Officer {\n duty() {\n  console.log(\"Protect and serve.\");\n }\n}\nclass Detective extends Officer {\n duty() {\n  console.log(\"Interview witnesses\");\n }\n}\nconst sherlock = new Detective();\nsherlock.duty();"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Code: Overriding methods 3",
            "id": 109203,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Create an instance of `Bench` and save in a constant named `exercise1`. Create an instance of `Squat` and save it in a constant named `exercise2`. Call the `sets()` method on `bench` and `squat`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "class Workout {\n sets() {\n  console.log(\"10 reps done\");\n }\n}\nclass Bench extends Workout {\n sets() {\n  console.log(\"7 reps done\");\n }\n}\nclass Squat extends Workout {\n sets() {\n  console.log(\"5 reps done\");\n }\n}",
                  "solvedContent": "class Workout {\n sets() {\n  console.log(\"10 reps done\");\n }\n}\nclass Bench extends Workout {\n sets() {\n  console.log(\"7 reps done\");\n }\n}\nclass Squat extends Workout {\n sets() {\n  console.log(\"5 reps done\");\n }\n}\nconst exercise1 = new Bench();\nconst exercise2 = new Squat();\nexercise1.sets();\nexercise2.sets();"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Code: super",
            "id": 109204,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Create a method in the `Pdf` class to override the `Document` class's `save` method. Inside the overriding method, call `super.save()`.\n",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "class Document {\n save() {\n  console.log(\"Writing to disk\");\n }\n}\nclass Pdf extends Document {\n const pdf1 = new Pdf();\n pdf1.save();",
                  "solvedContent": "class Document {\n save() {\n  console.log(\"Writing to disk\");\n }\n}\nclass Pdf extends Document {\n save() {\n  super.save();\n }\n}\nconst pdf1 = new Pdf();\npdf1.save();"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Code: extra",
            "id": 109201,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Code the `Server` class to have a  `work` method that calls `super.work()` before displaying `Time to take orders`. Call `work()` on the `alex` constant.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "class Employee {\n work() {\n  console.log(\"Clocking in\");\n }\n}\nclass Server extends Employee {\n console.log(\"Time to take orders\");\n}\nconst alex = new Server();",
                  "solvedContent": "class Employee {\n work() {\n  console.log(\"Clocking in\");\n }\n}\nclass Server extends Employee {\n work() {\n  super.work();\n  console.log(\"Time to take orders\");\n }\n}\nconst alex = new Server();\nalex.work();"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 11967,
        "title": "Coding Subclass Properties",
        "type": "practiceLevel3",
        "lessons": [
          {
            "title": "Code: super constructor",
            "id": 109233,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "A square is a rectangle with equal height and width. Inside the `Square` constructor, add a call to `super`. Pass in the  `side` parameter twice,  for both the height and the width.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "class Rectangle {\n constructor(width, height) {\n  this.width = width;\n  this.height = height;\n }\n}\nclass Square extends Rectangle {\n constructor(side) {}\n}",
                  "solvedContent": "class Rectangle {\n constructor(width, height) {\n  this.width = width;\n  this.height = height;\n }\n}\nclass Square extends Rectangle {\n constructor(side) {\n  super(side, side);\n }\n}"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Code: subclass properties",
            "id": 109234,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Add a `blade` parameter to the `Saw` constructor and store it as a property.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "class Tool {\n constructor(brand, cost) {\n  this.brand = brand;\n  this.cost = cost;\n }\n}\nclass Saw extends Tool {\n constructor(brand, cost) {\n  super(brand, cost);\n }\n}\nconst jigsaw = new Saw(\"ABC\", 99, \"small\");\nconsole.log(jigsaw);",
                  "solvedContent": "class Tool {\n constructor(brand, cost) {\n  this.brand = brand;\n  this.cost = cost;\n }\n}\nclass Saw extends Tool {\n constructor(brand, cost, blade) {\n  super(brand, cost);\n  this.blade = blade;\n }\n}\nconst jigsaw = new Saw(\"ABC\", 99, \"small\");\nconsole.log(jigsaw);"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Code: use subclass properties",
            "id": 109235,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Add a `start` method to the `Boat` class. Inside it, use `super` to call the superclass's `start()` method. Then, display some text containing the value of the `Boat` class's `type` parameter.\n",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "class Vehicle {\n constructor(make, model) {\n  this.make = make;\n  this.model = model;\n }\n start() {\n  console.log(\"Starting \" + this.make + \" \" + this.model);\n }\n}\nclass Boat extends Vehicle {\n constructor(make, model, type) {\n  super(make, model);\n  this.type = type;\n }\n}\nconst powerboat = new Boat(\"SEA RAY\", \"L650\", \"Power\");\npowerboat.start();",
                  "solvedContent": "class Vehicle {\n constructor(make, model) {\n  this.make = make;\n  this.model = model;\n }\n start() {\n  console.log(\"Starting \" + this.make + \" \" + this.model);\n }\n}\nclass Boat extends Vehicle {\n constructor(make, model, type) {\n  super(make, model);\n  this.type = type;\n }\n start() {\n  super.start();\n  console.log(this.type + \" Boat on the water\");\n }\n}\nconst powerboat = new Boat(\"SEA RAY\", \"L650\", \"Power\");\npowerboat.start();"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Code: Instantiate subclass",
            "id": 109251,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Create two instances of the `ElectricScooter` class with values of your choice and save them the constants `lime` and `bird`. Call the `ride()` method on both instances.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "class Scooter {\n constructor(rider) {\n  this.rider = rider;\n }\n}\nclass ElectricScooter extends Scooter {\n constructor(rider, battery) {\n  super(rider);\n  this.battery = battery;\n }\n ride() {\n  console.log(\"Hi \" + this.rider + \". Battery life left: \" + this\n   .battery);\n }\n}",
                  "solvedContent": "class Scooter {\n constructor(rider) {\n  this.rider = rider;\n }\n}\nclass ElectricScooter extends Scooter {\n constructor(rider, battery) {\n  super(rider);\n  this.battery = battery;\n }\n ride() {\n  console.log(\"Hi \" + this.rider + \". Battery life left: \" + this\n   .battery);\n }\n}\nconst lime = new ElectricScooter(\"Lydia\", 100);\nconst bird = new ElectricScooter(\"Sanders\", 88);\nlime.ride();\nbird.ride();"
                }
              ],
              "hints": []
            }
          }
        ]
      }
    ]
  }
}