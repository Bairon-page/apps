{
  "tutorial": {
    "id": 2661,
    "version": 5,
    "type": "guidedProject",
    "isNew": false,
    "codeLanguage": "python",
    "title": "ToDo List - Part 1",
    "descriptionContent": "Start building your todo list app. This first step focuses on crafting the basic structure and adding tasks.",
    "shortDescriptionContent": "",
    "showInTrack": true,
    "iconBanner": "tutorial-2661-icon-banner.svg",
    "chapters": [
      {
        "id": 14636,
        "title": "Chapter #1",
        "type": "practiceLevel3",
        "lessons": [
          {
            "title": "Lesson #1",
            "id": 129453,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Welcome to the **ToDo List** project. Here, you'll build a list for all your todos.\n\nLet's begin with creating an empty list that would hold the tasks for the ToDo list.\n\n1. Create a variable called `todo_list` and set it equal to empty list `[]`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "",
                  "solvedContent": "todo_list = []"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Lesson #2",
            "id": 129454,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "We should tell the user if their ToDo list is empty. Do this by checking the length of the `todo_list` inside an `if` statement.\n\n1. Use an `if` statement that checks if `todo_list` is empty.\n2. If it is, it should print the string `\"Your ToDo list is empty\"`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "todo_list = []",
                  "solvedContent": "todo_list = []\n\nif not todo_list:\n  print(\"Your ToDo list is empty\")"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Lesson #3",
            "id": 129455,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Empty list? Let's fix that by adding some tasks and displaying them.\n\n1. Update the first line by adding two items to the `todo_list` that we can display;\n2. Add an `else` clause to the `if` statement that will be executed if the list is not empty.\n3. Inside the `else` clause, create a variable called `index` and assign it a value of `1`.\n4. While still in the `else` clause, start a `for` loop to iterate over each `task` in `todo_list`.\n5. In the `for` loop, print the `index`, followed by a `.` and then the `task`. Use an f-string for this like `f\"{index}. {task}\"`.\n6. After printing the task, increment `index` by `1`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "todo_list = []\n\nif not todo_list:\n  print(\"Your ToDo list is empty\")",
                  "solvedContent": "todo_list = [\"Task 1\", \"Task 2\"]\n\nif not todo_list:\n  print(\"Your ToDo list is empty\")\nelse:\n  index = 1\n  for task in todo_list:\n    print(f\"{index}. {task}\")\n    index += 1"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Lesson #4",
            "id": 129456,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Our program should ask the user to enter a new task. Let's use the `input` function to get user input.\n\n1. Add an `input` function with the prompt `\"Enter the task: \"` directly below the line where you define the `todo_list`. Create a variable called `new_task` to save the input received from the `input` function.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "todo_list = [\"Task 1\", \"Task 2\"]\n\nif not todo_list:\n  print(\"Your ToDo list is empty\")\nelse:\n  index = 1\n  for task in todo_list:\n    print(f\"{index}. {task}\")\n    index += 1",
                  "solvedContent": "todo_list = [\"Task 1\", \"Task 2\"]\n\nnew_task = input(\"Enter the task: \")\n\nif not todo_list:\n  print(\"Your ToDo list is empty\")\nelse:\n  index = 1\n  for task in todo_list:\n    print(f\"{index}. {task}\")\n    index += 1"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Lesson #5",
            "id": 129457,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Let's append the user's new task to the `todo_list` and confirm that the task has been added.\n\n1. Before the `if` block, append the variable `new_task` to `todo_list`.\n2. Print `Task \"{new_task}\" added`, using an f-string to include the task the user added.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "todo_list = [\"Task 1\", \"Task 2\"]\n\nnew_task = input(\"Enter the task: \")\n\nif not todo_list:\n  print(\"Your ToDo list is empty\")\nelse:\n  index = 1\n  for task in todo_list:\n    print(f\"{index}. {task}\")\n    index += 1",
                  "solvedContent": "todo_list = [\"Task 1\", \"Task 2\"]\n\nnew_task = input(\"Enter the task: \")\ntodo_list.append(new_task)\nprint(f\"Task '{new_task}' added to the ToDo list\")\n\nif not todo_list:\n  print(\"Your ToDo list is empty\")\nelse:\n  index = 1\n  for task in todo_list:\n    print(f\"{index}. {task}\")\n    index += 1"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Lesson #6",
            "id": 129458,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Finally, let's run a loop until the user decides to quit. For now, we'll make it run forever. We'll change that in the second part of the project.\n\n1. Wrap the entire code inside a `while` loop that has the condition set to `True` while keeping the very first line where you define the variable `todo_list` outside.\n\nAfter implementing the `while` loop, add a few tasks and see the list grow.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "todo_list = [\"Task 1\", \"Task 2\"]\n\nnew_task = input(\"Enter the task: \")\ntodo_list.append(new_task)\nprint(f\"Task '{new_task}' added to the ToDo list\")\n\nif not todo_list:\n  print(\"Your ToDo list is empty\")\nelse:\n  index = 1\n  for task in todo_list:\n    print(f\"{index}. {task}\")\n    index += 1",
                  "solvedContent": "todo_list = [\"Task 1\", \"Task 2\"]\n\nwhile True:\n  new_task = input(\"Enter the task: \")\n  todo_list.append(new_task)\n  print(f\"Task '{new_task}' added to the ToDo list\")\n\n  if not todo_list:\n    print(\"Your ToDo list is empty\")\n  else:\n    index = 1\n    for task in todo_list:\n      print(f\"{index}. {task}\")\n      index += 1"
                }
              ],
              "hints": []
            }
          }
        ]
      }
    ]
  }
}