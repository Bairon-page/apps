{
  "tutorial": {
    "id": 1798,
    "version": 11,
    "type": "challenges",
    "isNew": false,
    "codeLanguage": "javascript",
    "title": "JavaScript Classes",
    "descriptionContent": "Challenges are more difficult exercises that will test your skills.",
    "shortDescriptionContent": "",
    "showInTrack": true,
    "iconBanner": "tutorial-1798-icon-banner.svg",
    "chapters": [
      {
        "id": 11990,
        "title": "Car Instance",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "Car Instance",
            "id": 109261,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Using the `Car` class from the previous challenge,  let's build a new instance of that class. \n\n1. Create a new object called `myCar`, and specify that it's a car built in `2021`, with a `V8` engine.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "index.js",
                  "codeLanguage": "javascript",
                  "content": "class Car {\r\n constructor(year, engine) {\r\n  this.year = year;\r\n  this.engine = engine;\r\n }\r\n}",
                  "solvedContent": "class Car {\r\n constructor(year, engine) {\r\n  this.year = year;\r\n  this.engine = engine;\r\n }\r\n}\r\nconst myCar = new Car(2021, 'V8');"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 11986,
        "title": "Old Timer Car Details",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "Old Timer Car Details",
            "id": 109259,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Let's continue from the previous challenge using the `Car` class.\n\n1. Create an instance of the `Car` class. Name the instance `oldTimer`. This car is built in `1980`, and it has a `diesel` engine.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "index.js",
                  "codeLanguage": "javascript",
                  "content": "class Car {\r\n constructor(year, engine) {\r\n  this.year = year;\r\n  this.engine = engine;\r\n }\r\n}\r\nconst myCar = new Car(2021, 'V8');",
                  "solvedContent": "class Car {\r\n constructor(year, engine) {\r\n  this.year = year;\r\n  this.engine = engine;\r\n }\r\n}\r\nconst myCar = new Car(2021, 'V8');\r\nconst oldTimer = new Car(1980, 'diesel');"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 11987,
        "title": "Vehicle Class",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "Vehicle Class",
            "id": 109258,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Let's create a brand new class.\n\n1. Create a class called `Vehicle`. \n2. Code the `Vehicle` class so that it accepts three parameters in the constructor: `year`, `mileage`, `speed`.\n3. Assign the parameters to the correct properties inside the constructor, using the `this` keyword.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "index.js",
                  "codeLanguage": "javascript",
                  "content": "class Vehicle",
                  "solvedContent": "class Vehicle {\n constructor(year, mileage, speed) {\n  this.year = year;\n  this.mileage = mileage;\n  this.speed = speed;\n }\n}"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 11984,
        "title": "Inheriting properties",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "Inheriting properties",
            "id": 109255,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Let's create another class that inherits properties from a super-class.\n\n1. Create a brand new class and name it: `Boat`.\n2. Code the `Boat` class so that it inherits all the properties from the `Vehicle` class.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "index.js",
                  "codeLanguage": "javascript",
                  "content": "class Vehicle {\r\n constructor(year, mileage, speed) {\r\n  this.year = year;\r\n  this.mileage = mileage;\r\n  this.speed = speed;\r\n }\r\n}\r\nclass {\r\n\r\n\r\n\r\n}",
                  "solvedContent": "class Vehicle {\r\n constructor(year, mileage, speed) {\r\n  this.year = year;\r\n  this.mileage = mileage;\r\n  this.speed = speed;\r\n }\r\n}\r\nclass Boat extends Vehicle {\r\n constructor(year, mileage, speed) {\r\n  super(year, mileage, speed);\r\n }\r\n}"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 11982,
        "title": "Add method to a class",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "Add method to a class",
            "id": 109256,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Let's add a method to a class.\n\n1. Update the `Vehicle` super-class with a method named `turnOn`. Inside the `turnOn` method, run `console.log(\"It's on!\")`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "index.js",
                  "codeLanguage": "javascript",
                  "content": "class Vehicle {\n constructor(year, mileage, speed) {\n  this.year = year;\n  this.mileage = mileage;\n  this.speed = speed;\n }\n}\nclass Boat extends Vehicle {\n constructor(year, mileage, speed) {\n  super(year, mileage, speed);\n }\n}\n",
                  "solvedContent": "class Vehicle {\n constructor(year, mileage, speed) {\n  this.year = year;\n  this.mileage = mileage;\n  this.speed = speed;\n }\n turnOn() {\n  console.log(\"It's on!\");\n }\n}\nclass Boat extends Vehicle {\n constructor(year, mileage, speed) {\n  super(year, mileage, speed);\n }\n}\n"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 11983,
        "title": "Overriding method in method in sub-class",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "Overriding method in method in sub-class",
            "id": 109262,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "There's a single method in the super-class. Now let's override that method in the sub-class.\n\n1. Update the `Boat` sub-class with a method named `turnOn`.\n2. Inside the `turnOn` method, use `console.log()` to display the `this.message` property.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "index.js",
                  "codeLanguage": "javascript",
                  "content": "class Vehicle {\n constructor(year, mileage, speed) {\n  this.year = year;\n  this.mileage = mileage;\n  this.speed = speed;\n }\n turnOn() {\n  console.log(\"It's on!\");\n }\n}\nclass Boat extends Vehicle {\n constructor(year, mileage, speed) {\n  super(year, mileage, speed);\n  this.message = \"Sailing!\";\n }\n}",
                  "solvedContent": "class Vehicle {\n constructor(year, mileage, speed) {\n  this.year = year;\n  this.mileage = mileage;\n  this.speed = speed;\n }\n turnOn() {\n  console.log(\"It's on!\");\n }\n}\nclass Boat extends Vehicle {\n constructor(year, mileage, speed) {\n  super(year, mileage, speed);\n  this.message = \"Sailing!\";\n }\n turnOn() {\n  console.log(this.message);\n }\n}"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 11991,
        "title": "Space strategy game 1",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "Space strategy game",
            "id": 109254,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "We're building a space strategy game. We need to code the `Character` class, then extend it with `Earthling`, then extend that sub-class with another one, named `Builder`.\n\n1. Add to the `Character` class a single parameter, `health`.\n2. Make the `Earthling` sub-class inherit the `health` parameter from `Character`. \n3. Add a new parameter to `Earthling` and name it: `iq`.\n4. Create a sub-class called `Builder` and inherit all properties from the `Earthling` class.\n5. Add one parameter to the `Builder` class. Name the parameter: `tool`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "index.js",
                  "codeLanguage": "javascript",
                  "content": "class Character {\n}\nclass Earthling extends Character {\n constructor(health) {}\n}",
                  "solvedContent": "class Character {\n constructor(health) {\n  this.health = health;\n }\n}\nclass Earthling extends Character {\n constructor(health, iq) {\n  super(health);\n  this.iq = iq;\n }\n}\nclass Builder extends Earthling {\n constructor(health, iq, tool) {\n  super(health, iq);\n  this.tool = tool;\n }\n}"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 11985,
        "title": "Space strategy game 2",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "Challenge #8: Hard",
            "id": 109253,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "We're still building our space strategy game. We need to code the `Vehicle` class, then make two sub-classes: `Spaceship` and `MoonBuggy`.\n\n1. Include a single parameter, `fuel` to the `Vehicle` class. \n2. Make the `Spaceship` sub-class inherit the `fuel` parameter from `Vehicle`. \n3. Add a new parameter to `Spaceship`, and name it `speed`.\n4. Create a sub-class called `MoonBuggy` that inherits the `fuel` parameter from `Vehicle`.\n5. Add the parameter of `doors` to the `MoonBuggy` class. We need doors on a moon buggy, after all.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "index.js",
                  "codeLanguage": "javascript",
                  "content": "class Vehicle {\n\n}\nclass Spaceship extends Vehicle {\n\n}",
                  "solvedContent": "class Vehicle {\n constructor(fuel) {\n  this.fuel = fuel;\n }\n}\nclass Spaceship extends Vehicle {\n constructor(fuel, speed) {\n  super(fuel);\n  this.speed = speed;\n }\n}\nclass MoonBuggy extends Vehicle {\n constructor(fuel, doors) {\n  super(fuel);\n  this.doors = doors;\n }\n}"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 11989,
        "title": "Space strategy game 3",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "Challenge #9: Hard",
            "id": 109263,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "We're expanding the classes in our space strategy game with some behaviors, as methods.\n\n1. In `Vehicle`, add some new functionality. Call it `turnOn`, and make it `console.log` this string: `Engine on`.\n2. In the `Spaceship` sub-class, inherit the `turnOn` method's functionality, and then extend it by console logging `Hyperspace engine on`.\n3. Build a new `Vehicle` called `firstPrototype`, and set its `fuel` value to `100`.\n4. Build a new `Spaceship` object named `endeavor`, and set its `fuel` value to `100` and speed to `fast`.\n5. Call the `turnOn` method on the `firstPrototype`.\n6. Call the `turnOn` method on the `endeavor`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "index.js",
                  "codeLanguage": "javascript",
                  "content": "class Vehicle {\n constructor(fuel) {\n  this.fuel = fuel;\n }\n\n}\nclass Spaceship extends Vehicle {\n constructor(fuel, speed) {\n  super(fuel);\n  this.speed = speed;\n }\n\n}\n\n\n\n",
                  "solvedContent": "class Vehicle {\n constructor(fuel) {\n  this.fuel = fuel;\n }\n turnOn() {\n  console.log('Engine on');\n }\n}\nclass Spaceship extends Vehicle {\n constructor(fuel, speed) {\n  super(fuel);\n  this.speed = speed;\n }\n turnOn() {\n  super.turnOn();\n  console.log('Hyperspace engine on');\n }\n}\nconst firstPrototype = new Vehicle(100);\nconst endeavor = new Spaceship(100, 'fast');\nfirstPrototype.turnOn();\nendeavor.turnOn();"
                }
              ],
              "hints": []
            }
          }
        ]
      }
    ]
  }
}