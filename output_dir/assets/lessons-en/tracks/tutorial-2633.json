{
  "tutorial": {
    "id": 2633,
    "version": 5,
    "type": "challenges",
    "isNew": false,
    "codeLanguage": "javascript",
    "title": "Arrays & Functions",
    "descriptionContent": "Challenges are more difficult exercises that will test your skills.",
    "shortDescriptionContent": "",
    "showInTrack": true,
    "iconBanner": null,
    "chapters": [
      {
        "id": 14525,
        "title": "Places To Visit",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "Places To Visit",
            "id": 129185,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Code an array that contains the names of places to visit in this order: `\"New York\"`, `\"Tokyo\"`, `\"Hawaii\"`. Assign this array to the `places` variable. Then, **without causing any change to the original array**, access the last entry in the array and assign this syntax to the `retirement` variable.\n\nOutput:\n`You should visit Hawaii.`",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const places;\nconst retirement;\nconsole.log(\"You should visit \" + retirement + \".\");",
                  "solvedContent": "const places = [\"New York\", \"Tokyo\", \"Hawaii\"];\nconst retirement = places[2];\nconsole.log(\"You should visit \" + retirement + \".\");"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 14526,
        "title": "Siblings",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "Siblings",
            "id": 129186,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Let's create an array that holds a collection of siblings.\n\n1. Code an array that contains the names of siblings in this order: `\"Jon\",` `\"Jess\"`, `\"Jen\"`, `\"Jarod\"` and assign it to the `siblings` variable. \n2. Use the push() method to add a new child `\"Jacob\"` and assign this syntax to the `add` variable. \n3. Access the middle child and save this syntax in the `middleChild` variable.\n\nOutput:\n`The middle child is Jen.`",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const siblings;\nconst add;\nconst middleChild;\nconsole.log(`The middle child is ${middleChild}.`);",
                  "solvedContent": "const siblings = [\"Jon\", \"Jess\", \"Jen\", \"Jarod\"];\nconst add = siblings.push(\"Jacob\");\nconst middleChild = siblings[2];\nconsole.log(`The middle child is ${middleChild}.`);"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 14527,
        "title": "Todo",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "Todo",
            "id": 129187,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Let's create an array that holds a bunch of to-do items.\n\n1. Code an array that contains a list of these to-do's: `\"study\"`, `\"chores\"`, and `\"meditate\"`. Store the array in the `todos` variable. \n2. Use `pop` to remove the final to-do from the array and store this in the `remove` variable.\n3. Create a `const` variable `leftToDo` that stores the number of items left in the `todos` array. Use an array property to code this step.\n\nOutput:\n`You have 2 items left to do.`",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const todos;\nconst remove;\nconst;\nconsole.log(`You have ${leftToDo} items left to do.`);",
                  "solvedContent": "const todos = [\"study\", \"chores\", \"meditate\"];\nremove = todos.pop();\nconst leftToDo = todos.length;\nconsole.log(`You have ${leftToDo} items left to do.`);"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 14528,
        "title": "First Element in an Array",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "First Value Element in an Array",
            "id": 129188,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Code a function that returns the first value from its `array` parameter.\n\nExamples:\n\n`firstValue([9, 7, 11])` returns `9`.\n\n`firstValue([2, 22, 7])` returns `2`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "index.js",
                  "codeLanguage": "javascript",
                  "content": "function firstValue(array) {}",
                  "solvedContent": "function firstValue(array) {\n  return array[0];\n}"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 14529,
        "title": "Hours and Minutes to Seconds",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "Hours and Minutes to Seconds",
            "id": 129189,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Code a function that returns the result of converting the parameters `hours` and `minutes` to seconds.\n\nExamples:\n`toSeconds(2, 5)` returns `7500`.\n`toSeconds(1, 0)` returns `3600`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "index.js",
                  "codeLanguage": "javascript",
                  "content": "function toSeconds(hours, minutes) {}",
                  "solvedContent": "function toSeconds(hours, minutes) {\n  return (hours * 60 + minutes) * 60;\n}"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 14530,
        "title": "Less Than or Equal to Zero",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "Less Than or Equal to Zero",
            "id": 129190,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Code a function that returns `true` if the `number` parameter is less than or equal to 0. Otherwise, return `false`.\n\nExamples:\n`lessThanOrEqualToZero(7)` returns `false`.\n`lessThanOrEqualToZero(-5)` returns `true`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "index.js",
                  "codeLanguage": "javascript",
                  "content": "function lessThanOrEqualToZero(number) {}",
                  "solvedContent": "function lessThanOrEqualToZero(number) {\n  return number <= 0;\n}"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 14531,
        "title": "Function with two arguments",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "Function to Calculate and Display Value",
            "id": 129191,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Let's create a function that takes two arguments and displays the result of a calculation.\n\n1. Create a `fuelCost` function, which takes two arguments, `litres` and `costPerLitre`.\n\n2. Within the function, create a `totalCost` variable, equal to `litres` * `costPerLitre`.\n\n3. Still within the function, display the value of `totalCost`.\n\n4. Outside the function, call the function with values of `60` and `1.44` for `litres` and `costPerLitre` respectively.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "",
                  "solvedContent": "function fuelCost (liters, costPerLiter) {\r\n const totalCost = liters * costPerLiter;\r\n console.log(totalCost);\r\n}\r\n\r\nfuelCost(60, 1.44);"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 14532,
        "title": "Return and use a value",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "Function to Return a Value",
            "id": 129192,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Let's create a function that returns a value, and then write some code to display that value.\n\n1. Create a `milesToKm()` function, which takes a single parameter `miles`.\n\n2. Within the function, create a `km` variable, equal to `(miles / 5) * 8`. \n\n3. Write a `return` statement at the end of the function to return the value of `km`.\n\n4. Display the result of calling the function with a value of `70`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "",
                  "solvedContent": "function milesToKm(miles) {\r\n  const km = (miles / 5) * 8;\r\n  return km;\r\n}\r\n\r\nconsole.log(milesToKm(70));"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 14533,
        "title": "Conditional in function",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "If-else If-else in Function",
            "id": 129193,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Let's create a function that returns a string once a condition is met. Here, we want to return a message which tells us, based on the information provided, whether there is not enough stock for all users, for some users, or for any users.\n\n1. Complete the function definition by adding code on each side of the two `>` operators to return the correct statement.\n  - In the `if` statement, check whether `minPerUser` is greater than `totalAvailable` (there isn't enough stock for even one user).\n  - In the `else if` statement, check whether `groupSize * minPerUser` is greater than `totalAvailable` (there isn't enough stock for all users).\n2. Display the result of calling the function using the parameters `group`, `total`, and `minimum`.\n",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const group = 4;\r\nconst total = 500;\r\nconst minimum = 150;\r\n\r\nfunction stockCheck (groupSize, totalAvailable, minPerUser) {\r\n if ( > ) {\r\n  return \"Insufficient for one user\";\r\n } else if ( > ) {\r\n   return \"Insufficient for all users\";\r\n } else {\r\n  return \"Sufficient for all users\";\r\n }\r\n}",
                  "solvedContent": "const group = 4;\r\nconst total = 500;\r\nconst minimum = 150;\r\n\r\nfunction stockCheck (groupSize, totalAvailable, minPerUser) {\r\n if (minPerUser > totalAvailable) {\r\n  return \"Insufficient for one user\";\r\n } else if (groupSize * minPerUser > totalAvailable) {\r\n   return \"Insufficient for all users\";\r\n } else {\r\n  return \"Sufficient for all users\";\r\n }\r\n}\r\n\r\nconsole.log(stockCheck(group, total, minimum));"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 14535,
        "title": "Visitor Names",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "Visitor Names",
            "id": 129195,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Call the appropriate built-in JavaScript function on the `visitors` array to create a new array of only the names that start with the letter \"C\". The inline function is provided for you.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "index.js",
                  "codeLanguage": "javascript",
                  "content": "let visitors = [\"Christina\", \"Andrew\", \"Chris\", \"Delia\"];\nlet C = (function(element) {\n return element[0] == \"C\";\n});\nconsole.log(C);",
                  "solvedContent": "let visitors = [\"Christina\", \"Andrew\", \"Chris\", \"Delia\"];\nlet C = visitors.filter(function(element) {\n return element[0] == \"C\";\n});\nconsole.log(C);"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 14536,
        "title": "Calculate Total Price",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "Calculate Total Price",
            "id": 129196,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Call the the appropriate JavaScript function on the `prices` array to calculate the total. The inline function is provided for you.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "index.js",
                  "codeLanguage": "javascript",
                  "content": "let prices = [2500.25, 3482.50, 1746.50];\nlet total = (function(prev, curr) {\n return prev + curr;\n});\nconsole.log(total);",
                  "solvedContent": "let prices = [2500.25, 3482.50, 1746.50];\nlet total = prices.reduce(function(prev, curr) {\n return prev + curr;\n});\nconsole.log(total);"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 14537,
        "title": "Kilos to Pounds",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "Kilos to Pounds",
            "id": 129197,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Call the the appropriate JavaScript function on the `kilograms` array to convert the values to pounds and store the resulting array in a variable named `pounds`. The inline function is provided for you.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "index.js",
                  "codeLanguage": "javascript",
                  "content": "let kilograms = [25, 45, 55];\nlet pounds = (function(element) {\n return element * 2.2;\n});\nconsole.log(pounds);",
                  "solvedContent": "let kilograms = [25, 45, 55];\nlet pounds = kilograms.map(function(element) {\n return element * 2.2;\n});\nconsole.log(pounds);"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 11549,
        "title": "Top Three",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "Top Three",
            "id": 106219,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Add the first three movies of `topTen` to the `topThree` array.\n\n",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const topTen = ['Jack Reacher', 'Beautiful Creatures', 'Safe Haven',\n'Side Effects', 'The Last Stand',\n'Silver Linings Playbook',\n'Broken City', 'Cloud Atlas','Parker', 'Eternals'];\nconst topThree = [];\n\n\n",
                  "solvedContent": "const topTen = ['Jack Reacher', 'Beautiful Creatures', 'Safe Haven',\n'Side Effects', 'The Last Stand',\n'Silver Linings Playbook',\n'Broken City', 'Cloud Atlas','Parker', 'Eternals'];\nconst topThree = [];\ntopThree[0] = topTen[0];\ntopThree[1] = topTen[1];\ntopThree[2] = topTen[2];"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 7851,
        "title": "Reverse an Array",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "Reverse an Array",
            "id": 68803,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Code a function that reverses the contents of the `array` parameter and returns it as a new array.\n\nExamples:\n`reverse([1,2,5,8])` returns `[8,5,2,1]`.\n`reverse([\"Deb\",\"Lee\"])` returns `[\"Lee\",\"Deb\"]`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "function reverse(array) {}",
                  "solvedContent": "function reverse(array) {\r\n  const reversed = [];\r\n  for (let i = array.length - 1; i > -1; i--) {\r\n    reversed.push(array[i]);\r\n  }\r\n  return reversed;\r\n}"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 7852,
        "title": "Smallest Number in an Array",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "Smallest Number in an Array",
            "id": 68868,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Code a function that returns the smallest number from the `array` parameter as a result.\n\nExamples:\n`smallest([10,44,2,11])` returns `2`.\n`smallest([5,7,8,9])` returns `5`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "function smallest(array) {}",
                  "solvedContent": "function smallest(array) {\r\n  let smallest = array[0];\r\n  for (let i = 0; i < array.length; i++) {\r\n    if (array[i] < smallest) {\r\n      smallest = array[i];\r\n    }\r\n  }\r\n  return smallest;\r\n}"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 7809,
        "title": "Difference Between Numbers in an Array",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "Difference between numbers in Array",
            "id": 68339,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Code a function that takes an array of numbers and returns the difference between the biggest and the smallest number as a result.\n\nExamples:\n`differenceMinMax([0, 7, 11, 100])` returns `100`.\n`differenceMinMax([55, 9, 22, 11])` returns `46`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "index.js",
                  "codeLanguage": "javascript",
                  "content": "function differenceMinMax(array) {}",
                  "solvedContent": "function differenceMinMax(array) {\n  let biggest = array[0];\n  let smallest = array[0];\n  for (let i = 0; i < array.length; i++) {\n    if (array[i] > biggest) {\n      biggest = array[i];\n    }\n    if (array[i] < smallest) {\n      smallest = array[i];\n    }\n  }\n  return biggest - smallest;\n}"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 7808,
        "title": "Does an Array Contain a Number",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "Does an Array contain a number",
            "id": 68342,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Write a function that returns `true` if the `number ` passed as the second parameter exists in the `array` that is passed in the first parameter. Otherwise, it should return `false`.\n\nExamples:\n\n<br>\n\n`contains([1, 2, 3, 4], 3)` returns `true` because the number 3 exists in the array\n\n<br>\n\n`contains([2, 2, 4], 3)` returns `false` because the number 3 doesn't in the array",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "index.js",
                  "codeLanguage": "javascript",
                  "content": "function contains(array, number) {}",
                  "solvedContent": "function contains(array, number) {\n  for (let i = 0; i < array.length; i++) {\n    if (array[i] === number) {\n      return true;\n    }\n  }\n  return false;\n}"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 7873,
        "title": "Average of an Array",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "Average",
            "id": 68928,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Code a function that takes an array of numbers as a parameter and returns the average of them as the result.  \n\nExamples:\n`average([2,2,5,8])` returns `4.25`.\n`average([59,60,40])` returns `53`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "function average(array) {}",
                  "solvedContent": "function average(array) {\n  let total = 0;\n  if (array.length === 0) {\n    return total;\n  }\n  for (let i = 0; i < array.length; i++) {\n    total += array[i];\n  }\n  return total / array.length;\n}"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 11697,
        "title": "Function with iteration",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "iteration with simple logic",
            "id": 107125,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Let's put a `for` loop within a function. We're going to create a countdown display, from 5 to 1.\n\n1. Create a function called `countdown`, which takes no arguments.\n\n2. Add a `for` loop which iterates a variable `i` from `5` to `1`, reducing in increments of `1`, and each time displays the value using `console.log()`\n\n3. Call the `countdown()` function.\n",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "",
                  "solvedContent": "function countdown() {\r\n  for (let i = 5; i > 0; i--) {\r\n    console.log(i);\r\n  }\r\n}\r\ncountdown();"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 11722,
        "title": "Conditional function calls in function",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "Function to make a decision",
            "id": 107407,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Let's create a function that uses two other functions to calculate and arrive at a decision. We want to use some existing functions to decide whether it's safe to go on a mountain biking trip.\n\n1. Define an `isSafe` function with two parameters: `wind` and `rain`.\n\n2. Within the function, create a variable `risk`. Call `windRisk()` with `wind` and sum up the result to that of calling `rainRisk` with `rain`. Save the sum in the `risk` variable.\n\n3. Within the function, write an `if` statement, which returns `true` if `risk` is less than `10`, and `false` otherwise.\n\n4. Display the result of calling `isSafe` with arguments of `windSpeed` and `rainFall`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const windSpeed = 20;\r\nconst rainFall = 2;\r\n\r\nfunction windRisk(wind) {\r\n  return wind / 2.5;\r\n}\r\n\r\nfunction rainRisk(rain) {\r\n  return rain / 0.5;\r\n}",
                  "solvedContent": "const windSpeed = 20;\r\nconst rainFall = 2;\r\n\r\nfunction windRisk(wind) {\r\n  return wind / 2.5;\r\n}\r\n\r\nfunction rainRisk(rain) {\r\n  return rain / 0.5;\r\n}\r\n\r\nfunction isSafe(wind, rain) {\r\n  const risk = windRisk(wind) + rainRisk(rain);\r\n  if (risk < 10) {\r\n    return true;\r\n  } else {\r\n    return false;\r\n  }\r\n}\r\nconsole.log(isSafe(windSpeed, rainFall));"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 11686,
        "title": "Function using mixed arguments",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "Use of an array and another argument",
            "id": 107092,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Let's code a function that takes an array as an argument. Our function will tell us how many places are still available given the list of attendees we supply.\n\n1. Create a `sparePlaces` function, which takes two arguments, `entries` and `capacity`.\n\n2. Create a `taken` variable within the function, and assign the length of `entries` to it using the `.length` property.\n\n3. Make the function return the value of `capacity - taken`.\n\n4. Display the result of a call to `sparePlaces`, using `attendees` and the number `8` as the arguments. ",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const attendees = ['John', 'Jane', 'Jemima'];\r\n",
                  "solvedContent": "const attendees = ['John', 'Jane', 'Jemima'];\r\n\r\nfunction sparePlaces(entries, capacity) {\r\n  const taken = entries.length;\r\n  return capacity - taken;\r\n}\r\n\r\nconsole.log(sparePlaces(attendees, 8));\r\n\r\n"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 11703,
        "title": "Function which calls another function",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "Call a function within another",
            "id": 107131,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Let's call an existing function from within another. We're going to use an existing function that converts one currency to another, to work out how much we'll get once we include the fee.\n\n1. Define a `convert` function, with two parameters, `value` and `fee`.\n\n2. Within the function, create a `gbpValue` variable. Call `usdToGbp` with `value` as the argument. Subtract `fee` from the value returned by `usdToGbp()`. Save the result in `gbpValue`.\n\n3. Within the function, display the `gbpValue`.\n\n4. Call `convert()` with `100` and `2.5` as the arguments.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const usdGbp = 1.5;\r\n\r\nfunction usdToGbp(dollars) {\r\n  return dollars / usdGbp;\r\n}",
                  "solvedContent": "const usdGbp = 1.5;\r\n\r\nfunction usdToGbp(dollars) {\r\n  return dollars / usdGbp;\r\n}\r\n\r\nfunction convert(value, fee) {\r\n  const gbpValue = usdToGbp(value) - fee;\r\n  console.log(gbpValue);\r\n}\r\nconvert(100, 2.5);"
                }
              ],
              "hints": []
            }
          }
        ]
      }
    ]
  }
}