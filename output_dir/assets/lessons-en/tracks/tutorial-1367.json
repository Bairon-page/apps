{
  "tutorial": {
    "id": 1367,
    "version": 8,
    "type": "course",
    "isNew": false,
    "codeLanguage": "python",
    "title": "Set Operations",
    "descriptionContent": "set operations",
    "shortDescriptionContent": "",
    "showInTrack": true,
    "iconBanner": null,
    "chapters": [
      {
        "id": 9978,
        "title": "Subset",
        "type": "practiceLevel1",
        "lessons": [
          {
            "title": "Length",
            "id": 89324,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Just like with lists, we can get the size of a set like <code>friends</code> with the <code>len()</code> instruction.</p><code version=\"2\" codelang=\"python\" name=\"script.py\" visible-if=\"always\"><content><text value=\"friends = {\" /><text value=\"&quot;Emma&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;Jen&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;Rob&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;Ed&quot;\" class=\"string\" /><text value=\"}\" /><text type=\"break\" /><text value=\"print(len(friends))\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"45\" endIndex=\"48\" /><option startIndex=\"48\" endIndex=\"49\" /><option startIndex=\"49\" endIndex=\"56\" /><option startIndex=\"56\" endIndex=\"57\" /></options></interaction></interactions><output><content><text value=\"4\" /></content></output></code><p visible-if=\"wrong\">Make sure to pick <code>len</code> followed by <code>(</code> and then <code>friends</code>, <code>)</code>.</p></body></html>"
          },
          {
            "title": "Subset",
            "id": 89325,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>When <em>all</em> elements of a set like <code>chat</code> are present in another set like <code>friends</code>, we say that <code>chat</code> is a <strong>subset</strong> of <code>friends</code>.</p><code version=\"2\" codelang=\"python\" name=\"script.py\" visible-if=\"always\"><content><text value=\"friends = {\" /><text value=\"&quot;Emma&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;Jen&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;Rob&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;Ed&quot;\" class=\"string\" /><text value=\"}\" /><text type=\"break\" /><text value=\"chat = {\" /><text value=\"&quot;Jen&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;Ed&quot;\" class=\"string\" /><text value=\"}\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"39\" endIndex=\"43\" /><option startIndex=\"44\" endIndex=\"45\" /><option startIndex=\"46\" endIndex=\"59\" /></options></interaction></interactions></code><p visible-if=\"wrong\">Make sure to pick <code>chat</code>, followed by <code>=</code>, and finally <code>{\"Jen\", \"Ed\"}</code>.</p></body></html>"
          },
          {
            "title": "Is subset",
            "id": 89326,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>To check whether a set like <code>chat</code> is a subset of another, like <code>friends</code>, we code <code>chat</code>, then <code>.issubset()</code>, with <code>friends</code> between parentheses.</p><code version=\"2\" codelang=\"python\" name=\"script.py\" visible-if=\"always\"><content><text value=\"friends = {\" /><text value=\"&quot;Emma&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;Jen&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;Rob&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;Ed&quot;\" class=\"string\" /><text value=\"}\" /><text type=\"break\" /><text value=\"chat = {\" /><text value=\"&quot;Jen&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;Ed&quot;\" class=\"string\" /><text value=\"}\" /><text type=\"break\" /><text type=\"break\" /><text value=\"print(chat.issubset(friends))\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"67\" endIndex=\"71\" /><option startIndex=\"71\" endIndex=\"80\" /><option startIndex=\"80\" endIndex=\"89\" /></options></interaction></interactions><output><content><text value=\"True\" /></content></output></code><p visible-if=\"wrong\">Make sure to pick <code>chat</code>, followed by <code>.issubset</code>, and finally <code>(friends)</code>.</p></body></html>"
          },
          {
            "title": "True or False",
            "id": 89327,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p><code>issubset()</code> returns <code>True</code> if the left set is a subset of the right, and <code>False</code> otherwise, like here with <code>study_group</code>.</p><code version=\"2\" codelang=\"python\" name=\"script.py\" visible-if=\"always\"><content><text value=\"friends = {\" /><text value=\"&quot;Emma&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;Jen&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;Rob&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;Ed&quot;\" class=\"string\" /><text value=\"}\" /><text type=\"break\" /><text value=\"study_group = {\" /><text value=\"&quot;Emma&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;Lisa&quot;\" class=\"string\" /><text value=\"}\" /><text type=\"break\" /><text type=\"break\" /><text value=\"print(study_group.issubset(friends))\" /></content><interactions><interaction type=\"validatedInput\" isDefault=\"true\" startIndex=\"77\" endIndex=\"88\" /></interactions><output><content><text value=\"False\" /></content></output></code><p visible-if=\"wrong\">Make sure to type <code>study_group</code>.</p></body></html>"
          },
          {
            "title": "Save in variable",
            "id": 89339,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>We can save the boolean given by <code>issubset()</code> in a variable, like <code>are_friends</code>.</p><code version=\"2\" codelang=\"python\" name=\"script.py\" visible-if=\"always\"><content><text value=\"friends = {\" /><text value=\"&quot;Emma&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;Jen&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;Rob&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;Ed&quot;\" class=\"string\" /><text value=\"}\" /><text type=\"break\" /><text value=\"study_group = {\" /><text value=\"&quot;Emma&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;Lisa&quot;\" class=\"string\" /><text value=\"}\" /><text type=\"break\" /><text type=\"break\" /><text value=\"are_friends = study_group.issubset(friends)\" /><text type=\"break\" /><text value=\"print(are_friends)\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"71\" endIndex=\"82\" /><option startIndex=\"83\" endIndex=\"84\" /></options></interaction></interactions><output><content><text value=\"False\" /></content></output></code><p visible-if=\"wrong\">Make sure to pick <code>are_friends</code>, followed by <code>=</code>.</p></body></html>"
          },
          {
            "title": "Question: Length",
            "id": 89423,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>How can we find out how many elements a set contains?</p><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\">With the <code>len()</code> instruction to find the length of the set</item><item value=\"2\" correct=\"false\">We can't know how many elements a set contains</item></selection><p visible-if=\"wrong\">With the <code>len()</code> instruction to find the length of the set.</p></body></html>"
          },
          {
            "title": "Question: Subset",
            "id": 89424,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>When do we say that a set is a subset of another?</p><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\">When all the elements of the set are present in the other</item><item value=\"2\" correct=\"false\">When some of the elements of the set are present in the other</item></selection><p visible-if=\"wrong\">When all the elements of the set are present in the other.</p></body></html>"
          },
          {
            "title": "Question: Is subset",
            "id": 89425,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>How can we check if a set is a subset of another?</p><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\">With the <code>issubset()</code> instruction</item><item value=\"2\" correct=\"false\">By comparing the lengths of both sets</item></selection><p visible-if=\"wrong\">With the <code>issubset()</code> instruction.</p></body></html>"
          },
          {
            "title": "Question: True or False",
            "id": 89426,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>What does <code>issubset()</code> give us when the set is a subset of another?</p><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\">The boolean value <code>True</code></item><item value=\"2\" correct=\"false\">The elements of the subset</item></selection><p visible-if=\"wrong\">The boolean value <code>True</code>.</p></body></html>"
          },
          {
            "title": "Question: Save in variable",
            "id": 89427,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>How can we reuse the value we get from using <code>issubset()</code>?</p><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\">We store it in a variable</item><item value=\"2\" correct=\"false\">We can't reuse it, we can only display it</item></selection><p visible-if=\"wrong\">We store it in a variable.</p></body></html>"
          },
          {
            "title": "Example: Length",
            "id": 89428,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Use <code>len()</code> to get the length of the <code>invitations</code> set.</p><code version=\"2\" codelang=\"python\" name=\"script.py\" visible-if=\"always\"><content><text value=\"invitations = {\" /><text value=\"&quot;Meg&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;Alex&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;Lee&quot;\" class=\"string\" /><text value=\"}\" /><text type=\"break\" /><text type=\"break\" /><text value=\"print(\" /><text value=\"f&quot;\" /><text value=\"{len(invitations)}\" class=\"subst\" /><text value=\" invitations sent&quot;\" /><text value=\")\" /></content><interactions><interaction type=\"validatedInput\" isDefault=\"true\" startIndex=\"47\" endIndex=\"63\" /></interactions><output><content><text value=\"3 invitations sent\" /></content></output></code><p visible-if=\"wrong\">Make sure to type <code>len(invitations)</code>.</p></body></html>"
          },
          {
            "title": "Example: Subset",
            "id": 89429,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Save a set in <code>pets</code>, so that <code>pets</code> is a subset of <code>animals</code>.</p><code version=\"2\" codelang=\"python\" name=\"script.py\" visible-if=\"always\"><content><text value=\"animals = {\" /><text value=\"&quot;whale&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;dog&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;cat&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;giraffe&quot;\" class=\"string\" /><text value=\"}\" /><text type=\"break\" /><text type=\"break\" /><text value=\"pets = {\" /><text value=\"&quot;dog&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;cat&quot;\" class=\"string\" /><text value=\"}\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"53\" endIndex=\"67\" /><option correct=\"false\"><content><text value=\"{&quot;dog&quot;, &quot;turtle&quot;}\" /></content></option><option correct=\"false\"><content><text value=\"{&quot;dog&quot;, &quot;cat&quot;, &quot;bird&quot;}\" /></content></option></options></interaction></interactions></code><p visible-if=\"wrong\">Make sure to pick <code>{\"dog\", \"cat\"}</code>.</p></body></html>"
          },
          {
            "title": "Example: Is subset",
            "id": 89430,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Use <code>issubset()</code> to check if <code>pets</code> is a subset of <code>animals</code>.</p><code version=\"2\" codelang=\"python\" name=\"script.py\" visible-if=\"always\"><content><text value=\"animals = {\" /><text value=\"&quot;whale&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;dog&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;cat&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;giraffe&quot;\" class=\"string\" /><text value=\"}\" /><text type=\"break\" /><text type=\"break\" /><text value=\"pets = {\" /><text value=\"&quot;dog&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;cat&quot;\" class=\"string\" /><text value=\"}\" /><text type=\"break\" /><text value=\"print(pets.issubset(animals))\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"74\" endIndex=\"78\" /><option startIndex=\"78\" endIndex=\"79\" /><option startIndex=\"79\" endIndex=\"87\" /><option startIndex=\"87\" endIndex=\"88\" /><option startIndex=\"88\" endIndex=\"95\" /><option startIndex=\"95\" endIndex=\"96\" /></options></interaction></interactions><output><content><text value=\"True\" /></content></output></code><p visible-if=\"wrong\">Make sure to pick <code>pets</code> followed by <code>.</code> and then <code>issubset</code>, <code>(</code>, <code>animals</code>, <code>)</code>.</p></body></html>"
          },
          {
            "title": "Example: True or False",
            "id": 89431,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Save a set in <code>capitals</code>, so that the <code>False</code> displays in the console.</p><code version=\"2\" codelang=\"python\" name=\"script.py\" visible-if=\"always\"><content><text value=\"cities = {\" /><text value=\"&quot;Kyoto&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;Nice&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;Madrid&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;Oslo&quot;\" class=\"string\" /><text value=\"}\" /><text type=\"break\" /><text value=\"capitals = {\" /><text value=\"&quot;Madrid&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;Paris&quot;\" class=\"string\" /><text value=\"}\" /><text type=\"break\" /><text type=\"break\" /><text value=\"print(capitals.issubset(cities))\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"56\" endIndex=\"75\" /><option correct=\"false\"><content><text value=\"{&quot;Madrid&quot;, &quot;Oslo&quot;, &quot;Nice&quot;}\" /></content></option></options></interaction></interactions><output><content><text value=\"False\" /></content></output></code><p visible-if=\"wrong\">Make sure to pick <code>{\"Madrid\", \"Paris\"}</code>.</p></body></html>"
          },
          {
            "title": "Example: Save in variable",
            "id": 89432,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Save the boolean returned by using <code>issubset()</code> in the variable <code>is_subset</code>.</p><code version=\"2\" codelang=\"python\" name=\"script.py\" visible-if=\"always\"><content><text value=\"cities = {\" /><text value=\"&quot;Kyoto&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;Nice&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;Madrid&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;Oslo&quot;\" class=\"string\" /><text value=\"}\" /><text type=\"break\" /><text value=\"capitals = {\" /><text value=\"&quot;Madrid&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;Paris&quot;\" class=\"string\" /><text value=\"}\" /><text type=\"break\" /><text type=\"break\" /><text value=\"is_subset = capitals.issubset(cities)\" /><text type=\"break\" /><text value=\"print(is_subset)\" /></content><interactions><interaction type=\"validatedInput\" isDefault=\"true\" startIndex=\"77\" endIndex=\"88\" /></interactions><output><content><text value=\"False\" /></content></output></code><p visible-if=\"wrong\">Make sure to type <code>is_subset =</code>.</p></body></html>"
          }
        ]
      },
      {
        "id": 9979,
        "title": "Union and Intersection",
        "type": "practiceLevel1",
        "lessons": [
          {
            "title": "Union",
            "id": 89329,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>We can join two sets like <code>classmates</code> and <code>friends</code> using <code>.union()</code>, like here with <code>classmates.union(friends)</code>.</p><code version=\"2\" codelang=\"python\" name=\"script.py\" visible-if=\"always\"><content><text value=\"classmates = {\" /><text value=\"&quot;Sue&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;Paul&quot;\" class=\"string\" /><text value=\"}\" /><text type=\"break\" /><text value=\"friends = {\" /><text value=\"&quot;Don&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;Sue&quot;\" class=\"string\" /><text value=\"}\" /><text type=\"break\" /><text type=\"break\" /><text value=\"print(classmates.union(friends))\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"61\" endIndex=\"71\" /><option startIndex=\"71\" endIndex=\"77\" /><option startIndex=\"77\" endIndex=\"86\" /></options></interaction></interactions><output><content><text value=\"{'Don', 'Paul', 'Sue'}\" /></content></output></code><p visible-if=\"wrong\">Make sure to pick <code>classmates</code>, followed by <code>.union</code>, and finally <code>(friends)</code>.</p></body></html>"
          },
          {
            "title": "No duplicates",
            "id": 89330,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p><code>union()</code>  gives us a new set without duplicates, even if some elements are present in both original sets, like <code>\"Sue\"</code> here.</p><code version=\"2\" codelang=\"python\" name=\"script.py\" visible-if=\"always\"><content><text value=\"classmates = {\" /><text value=\"&quot;Sue&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;Paul&quot;\" class=\"string\" /><text value=\"}\" /><text type=\"break\" /><text value=\"friends = {\" /><text value=\"&quot;Don&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;Sue&quot;\" class=\"string\" /><text value=\"}\" /><text type=\"break\" /><text type=\"break\" /><text value=\"print(classmates.union(friends))\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"47\" endIndex=\"52\" /><option startIndex=\"14\" endIndex=\"19\" /></options></interaction></interactions><output><content><text value=\"{'Paul', 'Sue', 'Don'}\" /></content></output></code><p visible-if=\"wrong\">Make sure to pick <code>\"Sue\"</code>, followed by <code>\"Sue\"</code>.</p></body></html>"
          },
          {
            "title": "Intersection",
            "id": 89331,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Similarly, we can use <code>intersection()</code> to create a set of elements that are present in <em>both</em> sets, like <code>\"Sue\"</code> and <code>\"Luke\"</code>.</p><code version=\"2\" codelang=\"python\" name=\"script.py\" visible-if=\"always\"><content><text value=\"classmates = {\" /><text value=\"&quot;Sue&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;Luke&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;Paul&quot;\" class=\"string\" /><text value=\"}\" /><text type=\"break\" /><text value=\"friends = {\" /><text value=\"&quot;Don&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;Sue&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;Luke&quot;\" class=\"string\" /><text value=\"}\" /><text type=\"break\" /><text type=\"break\" /><text value=\"print(classmates.intersection(friends))\" /></content><output><content><text value=\"{'Sue', 'Luke'}\" /></content></output></code></body></html>"
          },
          {
            "title": "Union vs Intersection",
            "id": 89332,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>While <code>union()</code> gives us all elements of the two sets, <code>intersection()</code> gives us only the common ones.</p><code version=\"2\" codelang=\"python\" name=\"script.py\" visible-if=\"always\"><content><text value=\"classmates = {\" /><text value=\"&quot;Sue&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;Luke&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;Paul&quot;\" class=\"string\" /><text value=\"}\" /><text type=\"break\" /><text value=\"friends = {\" /><text value=\"&quot;Don&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;Sue&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;Luke&quot;\" class=\"string\" /><text value=\"}\" /><text type=\"break\" /><text type=\"break\" /><text value=\"print(\" /><text value=\"&quot;Union:&quot;\" class=\"string\" /><text value=\")\" /><text type=\"break\" /><text value=\"print(classmates.union(friends))\" /><text type=\"break\" /><text type=\"break\" /><text value=\"print(\" /><text value=\"&quot;Intersection:&quot;\" class=\"string\" /><text value=\")\" /><text type=\"break\" /><text value=\"print(classmates.intersection(friends))\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"104\" endIndex=\"109\" /><option startIndex=\"161\" endIndex=\"173\" /></options></interaction></interactions><output><content><text value=\"Union:\" /><text type=\"break\" /><text value=\"{'Paul', 'Sue', 'Luke', 'Don'}\" /><text type=\"break\" /><text value=\"Intersection\" /><text type=\"break\" /><text value=\"{'Sue', 'Luke'}\" /></content></output></code><p visible-if=\"wrong\">Make sure to pick <code>union</code>, followed by <code>intersection</code>.</p></body></html>"
          },
          {
            "title": "Save in variable",
            "id": 89338,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>We can save the sets given by <code>union()</code> and <code>intersection()</code> in variables like <code>everybody</code> for <code>union()</code> and <code>common</code> for <code>intersection()</code>.</p><code version=\"2\" codelang=\"python\" name=\"script.py\" visible-if=\"always\"><content><text value=\"classmates = {\" /><text value=\"&quot;Sue&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;Luke&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;Paul&quot;\" class=\"string\" /><text value=\"}\" /><text type=\"break\" /><text value=\"friends = {\" /><text value=\"&quot;Don&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;Sue&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;Luke&quot;\" class=\"string\" /><text value=\"}\" /><text type=\"break\" /><text type=\"break\" /><text type=\"break\" /><text value=\"everybody = classmates.union(friends)\" /><text type=\"break\" /><text value=\"print(everybody)\" /><text type=\"break\" /><text type=\"break\" /><text value=\"common = classmates.intersection(friends)\" /><text type=\"break\" /><text value=\"print(common)\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"72\" endIndex=\"81\" /><option startIndex=\"128\" endIndex=\"134\" /></options></interaction></interactions></code><p visible-if=\"wrong\">Make sure to pick <code>everybody</code>, followed by <code>common</code>.</p></body></html>"
          },
          {
            "title": "Question: Union",
            "id": 89441,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>What instruction do we use to join the elements of two sets into a new set?</p><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\"><code>union()</code></item><item value=\"2\" correct=\"false\"><code>issubset()</code></item></selection><p visible-if=\"wrong\">Make sure to pick <code>union()</code>.</p></body></html>"
          },
          {
            "title": "Question: No duplicates",
            "id": 89442,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>How many elements does <code>all_flights</code> have?</p><code version=\"2\" codelang=\"python\" name=\"script.py\" visible-if=\"always\"><content><text value=\"arrivals = {\" /><text value=\"&quot;JL5273&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;NH5753&quot;\" class=\"string\" /><text value=\"}\" /><text type=\"break\" /><text value=\"departures = {\" /><text value=\"&quot;AA5827&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;BA4616&quot;\" class=\"string\" /><text value=\"}\" /><text type=\"break\" /><text type=\"break\" /><text value=\"all_flights = arrivals.union(departures)\" /><text type=\"break\" /><text value=\"print(all_flights)\" /></content><output><content><text value=\"{'JL5273', 'BA4616', 'NH5753', 'AA5827'}\" /></content></output></code><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\">Four</item><item value=\"2\" correct=\"false\">Two</item></selection><p visible-if=\"wrong\">Make sure to pick Four.</p></body></html>"
          },
          {
            "title": "Question: Intersection",
            "id": 89443,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>What instruction do we use to create a set of the common elements between two sets?</p><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\"><code>intersection()</code></item><item value=\"2\" correct=\"false\"><code>union()</code></item></selection><p visible-if=\"wrong\">Make sure to pick <code>intersection()</code>.</p></body></html>"
          },
          {
            "title": "Question: Union vs Intersection",
            "id": 89444,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>How could the set <code>destinations</code> have been made?</p><code version=\"2\" codelang=\"python\" name=\"script.py\" visible-if=\"always\"><content><text value=\"visited = {\" /><text value=\"&quot;Paris&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;New York&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;Tokyo&quot;\" class=\"string\" /><text value=\"}\" /><text type=\"break\" /><text value=\"holiday_plans = {\" /><text value=\"&quot;Rome&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;Paris&quot;\" class=\"string\" /><text value=\"}\" /><text type=\"break\" /><text type=\"break\" /><text value=\"destinations = {\" /><text value=\"&quot;Paris&quot;\" class=\"string\" /><text value=\"}\" /></content></code><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\">By using <code>intersection()</code> with <code>visited</code> and <code>holiday_plans</code></item><item value=\"2\" correct=\"false\">By using <code>union()</code> with <code>visited</code> and <code>holiday_plans</code></item></selection><p visible-if=\"wrong\">By using <code>intersection()</code> with <code>visited</code> and <code>holiday_plans</code>.</p></body></html>"
          },
          {
            "title": "Question: Save in variable",
            "id": 89445,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>How can we reuse the set returned by <code>union()</code> or <code>intersection()</code>?</p><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\">By assigning the instruction to a variable, which actually saves the result</item><item value=\"2\" correct=\"false\">By displaying it and then coding it ourselves</item></selection><p visible-if=\"wrong\">By assigning the instruction to a variable, which actually saves the result.</p></body></html>"
          },
          {
            "title": "Example: Union",
            "id": 89446,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Use <code>union()</code> to join the <code>volunteers</code> set with the <code>coordinators</code> to get a set of all the people organizing an event.</p><code version=\"2\" codelang=\"python\" name=\"script.py\" visible-if=\"always\"><content><text value=\"volunteers = {\" /><text value=\"&quot;Jess&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;Ty&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;Kevin&quot;\" class=\"string\" /><text value=\"}\" /><text type=\"break\" /><text value=\"coordinators = {\" /><text value=\"&quot;Mae&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;Sue&quot;\" class=\"string\" /><text value=\"}\" /><text type=\"break\" /><text type=\"break\" /><text value=\"print(volunteers.union(coordinators))\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"84\" endIndex=\"85\" /><option startIndex=\"85\" endIndex=\"90\" /><option startIndex=\"90\" endIndex=\"91\" /><option startIndex=\"91\" endIndex=\"103\" /><option startIndex=\"103\" endIndex=\"104\" /></options></interaction></interactions><output><content><text value=\"{'Mae', 'Kevin', 'Jess', 'Sue', 'Ty'}\" /></content></output></code><p visible-if=\"wrong\">Make sure to pick <code>.</code> followed by <code>union</code> and then <code>(</code>, <code>coordinators</code>, <code>)</code>.</p></body></html>"
          },
          {
            "title": "Example: Intersection",
            "id": 89448,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Find the common classes of Andy and May using the <code>.intersection()</code> instruction with <code>may_classes</code> between the parentheses.</p><code version=\"2\" codelang=\"python\" name=\"script.py\" visible-if=\"always\"><content><text value=\"andy_classes = {\" /><text value=\"&quot;french&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;ballet&quot;\" class=\"string\" /><text value=\"}\" /><text type=\"break\" /><text value=\"may_classes = {\" /><text value=\"&quot;french&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;drums&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;pottery&quot;\" class=\"string\" /><text value=\"}\" /><text type=\"break\" /><text type=\"break\" /><text value=\"print(andy_classes.intersection(may_classes))\" /></content><interactions><interaction type=\"validatedInput\" isDefault=\"true\" startIndex=\"100\" endIndex=\"126\" /></interactions><output><content><text value=\"{'french'}\" /></content></output></code><p visible-if=\"wrong\">Make sure to type <code>.intersection(may_classes)</code>.</p></body></html>"
          },
          {
            "title": "Example: Union vs Intersection",
            "id": 89449,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Use an instruction to create a set containing all the elements of the <code>even</code> and <code>odd</code> sets.</p><code version=\"2\" codelang=\"python\" name=\"script.py\" visible-if=\"always\"><content><text value=\"even = {\" /><text value=\"0\" class=\"number\" /><text value=\", \" /><text value=\"2\" class=\"number\" /><text value=\", \" /><text value=\"4\" class=\"number\" /><text value=\", \" /><text value=\"6\" class=\"number\" /><text value=\"}\" /><text type=\"break\" /><text value=\"odd = {\" /><text value=\"1\" class=\"number\" /><text value=\", \" /><text value=\"3\" class=\"number\" /><text value=\", \" /><text value=\"5\" class=\"number\" /><text value=\", \" /><text value=\"7\" class=\"number\" /><text value=\"}\" /><text type=\"break\" /><text type=\"break\" /><text value=\"print(even.union(odd))\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"50\" endIndex=\"51\" /><option startIndex=\"51\" endIndex=\"56\" /><option startIndex=\"56\" endIndex=\"57\" /><option startIndex=\"57\" endIndex=\"60\" /><option startIndex=\"60\" endIndex=\"61\" /><option correct=\"false\"><content><text value=\"intersection\" /></content></option></options></interaction></interactions><output><content><text value=\"{0, 1, 2, 3, 4, 5, 6, 7}\" /></content></output></code><p visible-if=\"wrong\">Make sure to pick <code>.</code> followed by <code>union</code> and then <code>(</code>, <code>odd</code>, <code>)</code>.</p></body></html>"
          },
          {
            "title": "Example: Save in variable",
            "id": 89450,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Code the variable <code>common_div</code> to save the common divisors of fifteen and six resulted from the intersection of the two sets.</p><code version=\"2\" codelang=\"python\" name=\"script.py\" visible-if=\"always\"><content><text value=\"div_15 = {\" /><text value=\"1\" class=\"number\" /><text value=\", \" /><text value=\"3\" class=\"number\" /><text value=\", \" /><text value=\"5\" class=\"number\" /><text value=\", \" /><text value=\"15\" class=\"number\" /><text value=\"}\" /><text type=\"break\" /><text value=\"div_6 = {\" /><text value=\"1\" class=\"number\" /><text value=\", \" /><text value=\"2\" class=\"number\" /><text value=\", \" /><text value=\"3\" class=\"number\" /><text value=\", \" /><text value=\"6\" class=\"number\" /><text value=\"}\" /><text type=\"break\" /><text type=\"break\" /><text value=\"common_div = div_15.intersection(div_6)\" /><text type=\"break\" /><text type=\"break\" /><text value=\"print(common_div)\" /></content><interactions><interaction type=\"validatedInput\" isDefault=\"true\" startIndex=\"45\" endIndex=\"57\" /></interactions><output><content><text value=\"{1, 3}\" /></content></output></code><p visible-if=\"wrong\">Make sure to type <code>common_div =</code>.</p></body></html>"
          }
        ]
      },
      {
        "id": 9980,
        "title": "Difference",
        "type": "practiceLevel1",
        "lessons": [
          {
            "title": "Difference",
            "id": 89334,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>To get a set of elements that are present in <code>classmates</code>, but not in <code>friends</code>, we use the <code>difference()</code> instruction.</p><code version=\"2\" codelang=\"python\" name=\"script.py\" visible-if=\"always\"><content><text value=\"classmates = {\" /><text value=\"&quot;Sue&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;Paul&quot;\" class=\"string\" /><text value=\"}\" /><text type=\"break\" /><text value=\"friends = {\" /><text value=\"&quot;Don&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;Sue&quot;\" class=\"string\" /><text value=\"}\" /><text type=\"break\" /><text type=\"break\" /><text value=\"print(classmates.difference(friends))\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"72\" endIndex=\"82\" /><option startIndex=\"82\" endIndex=\"83\" /><option startIndex=\"90\" endIndex=\"91\" /></options></interaction></interactions><output><content><text value=\"{'Paul'}\" /></content></output></code><p visible-if=\"wrong\">Make sure to pick <code>difference</code>, followed by <code>(</code>, and finally <code>)</code>.</p></body></html>"
          },
          {
            "title": "Left minus right",
            "id": 89335,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Using <code>difference()</code> gives us the elements that the left set, here <code>classmates</code> has, but the right set, here <code>friends</code>, doesn't.</p><code version=\"2\" codelang=\"python\" name=\"script.py\" visible-if=\"always\"><content><text value=\"classmates = {\" /><text value=\"&quot;Sue&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;Paul&quot;\" class=\"string\" /><text value=\"}\" /><text type=\"break\" /><text value=\"friends = {\" /><text value=\"&quot;Don&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;Sue&quot;\" class=\"string\" /><text value=\"}\" /><text type=\"break\" /><text type=\"break\" /><text value=\"print(classmates.difference(friends))\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"61\" endIndex=\"71\" /><option startIndex=\"83\" endIndex=\"90\" /></options></interaction></interactions><output><content><text value=\"{'Paul'}\" /></content></output></code><p visible-if=\"wrong\">Make sure to pick <code>classmates</code>, followed by <code>friends</code>.</p></body></html>"
          },
          {
            "title": "The other way around",
            "id": 89336,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>For the elements that are in <code>friends</code>, but not in <code>classmates</code>, we need to code <code>friends</code> left, and <code>classmates</code> right.</p><code version=\"2\" codelang=\"python\" name=\"script.py\" visible-if=\"always\"><content><text value=\"classmates = {\" /><text value=\"&quot;Sue&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;Paul&quot;\" class=\"string\" /><text value=\"}\" /><text type=\"break\" /><text value=\"friends = {\" /><text value=\"&quot;Don&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;Sue&quot;\" class=\"string\" /><text value=\"}\" /><text type=\"break\" /><text type=\"break\" /><text value=\"print(friends.difference(classmates))\" /></content><output><content><text value=\"{'Don'}\" /></content></output></code></body></html>"
          },
          {
            "title": "Save in variable",
            "id": 89337,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Like before, we can save the set obtained with <code>difference()</code> in a variable like <code>friends_not_classmates</code>.</p><code version=\"2\" codelang=\"python\" name=\"script.py\" visible-if=\"always\"><content><text value=\"classmates = {\" /><text value=\"&quot;Sue&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;Paul&quot;\" class=\"string\" /><text value=\"}\" /><text type=\"break\" /><text value=\"friends = {\" /><text value=\"&quot;Don&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;Sue&quot;\" class=\"string\" /><text value=\"}\" /><text type=\"break\" /><text type=\"break\" /><text value=\"friends_not_classmates = friends.difference(classmates)\" /><text type=\"break\" /><text value=\"print(friends_not_classmates)\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"55\" endIndex=\"77\" /><option startIndex=\"78\" endIndex=\"79\" /></options></interaction></interactions><output><content><text value=\"{'Don'}\" /></content></output></code><p visible-if=\"wrong\">Make sure to pick <code>friends_not_classmates</code>, followed by <code>=</code>.</p></body></html>"
          },
          {
            "title": "Question: Difference",
            "id": 89433,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>What does the <code>difference()</code> instruction do when used with two sets?</p><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\">It gives us a set of elements present in the left set but missing from the right one</item><item value=\"2\" correct=\"false\">It gives us a set of common elements of the two sets</item></selection><p visible-if=\"wrong\">It gives us a set of elements present in the left set but missing from the right one.</p></body></html>"
          },
          {
            "title": "Question: Left minus right",
            "id": 89434,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>What does the <code>difference</code> set contain?</p><code version=\"2\" codelang=\"python\" name=\"script.py\" visible-if=\"always\"><content><text value=\"animals = {\" /><text value=\"&quot;whale&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;dog&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;cat&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;giraffe&quot;\" class=\"string\" /><text value=\"}\" /><text type=\"break\" /><text type=\"break\" /><text value=\"pets = {\" /><text value=\"&quot;dog&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;cat&quot;\" class=\"string\" /><text value=\"}\" /><text type=\"break\" /><text type=\"break\" /><text value=\"difference = animals.difference(pets)\" /><text type=\"break\" /><text value=\"print(difference)\" /></content><output><content><text value=\"{'giraffe', 'whale'}\" /></content></output></code><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\"><code>{'giraffe', 'whale'}</code></item><item value=\"2\" correct=\"false\">An empty set </item></selection><p visible-if=\"wrong\"><code>{'giraffe', 'whale'}</code>.</p></body></html>"
          },
          {
            "title": "Question: The other way around",
            "id": 89435,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>What does this display in the console?</p><code version=\"2\" codelang=\"python\" name=\"script.py\" visible-if=\"always\"><content><text value=\"andy_classes = {\" /><text value=\"&quot;french&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;ballet&quot;\" class=\"string\" /><text value=\"}\" /><text type=\"break\" /><text value=\"may_classes = {\" /><text value=\"&quot;drums&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;pottery&quot;\" class=\"string\" /><text value=\"}\" /><text type=\"break\" /><text type=\"break\" /><text type=\"break\" /><text value=\"print(andy_classes.difference(may_classes))\" /><text type=\"break\" /><text value=\"print(may_classes.difference(andy_classes))\" /></content><output><content><text value=\"{'french', 'ballet'}\" /><text type=\"break\" /><text value=\"{'pottery', 'drums'}\" /></content></output></code><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\">First <code>{'french', 'ballet'}</code>, and then <code>{'pottery', 'drums'}</code></item><item value=\"2\" correct=\"false\">Nothing</item></selection><p visible-if=\"wrong\">First <code>{'french', 'ballet'}</code>, and then <code>{'pottery', 'drums'}</code>.</p></body></html>"
          },
          {
            "title": "Question: Save in variable",
            "id": 89436,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>How can we reuse the set we get by using <code>difference()</code>?</p><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\">We can assign the instruction to a variable, thus saving the set it gives us</item><item value=\"2\" correct=\"false\">We can't reuse the set because we can't save it in a variable</item></selection><p visible-if=\"wrong\">We can assign the instruction to a variable, thus saving the set it gives us.</p></body></html>"
          },
          {
            "title": "Example: Difference",
            "id": 89437,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Get a set of <code>networks</code> that are not in <code>public</code> by coding <code>networks.difference(public)</code>.</p><code version=\"2\" codelang=\"python\" name=\"script.py\" visible-if=\"always\"><content><text value=\"networks = {\" /><text value=\"&quot;May's&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;PizzaParty5&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;Wi-Free&quot;\" class=\"string\" /><text value=\"} \" /><text type=\"break\" /><text value=\"public = {\" /><text value=\"&quot;Wi-Free&quot;\" class=\"string\" /><text value=\"}\" /><text type=\"break\" /><text type=\"break\" /><text value=\"print(networks.difference(public))\" /></content><interactions><interaction type=\"validatedInput\" isDefault=\"true\" startIndex=\"76\" endIndex=\"103\" /></interactions><output><content><text value=\"{&quot;May's&quot;, 'PizzaParty5'}\" /></content></output></code><p visible-if=\"wrong\">Make sure to type <code>networks.difference(public)</code>.</p></body></html>"
          },
          {
            "title": "Example: Left minus right",
            "id": 89438,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Use <code>difference()</code> with <code>wishlist</code> on the left, to get the items that are on the <code>wishlist</code> but not in the <code>cart</code>.</p><code version=\"2\" codelang=\"python\" name=\"script.py\" visible-if=\"always\"><content><text value=\"wishlist = {\" /><text value=\"&quot;earpods&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;notebook&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;handgloves&quot;\" class=\"string\" /><text value=\"}\" /><text type=\"break\" /><text value=\"cart = {\" /><text value=\"&quot;cat food&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;book&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;earpods&quot;\" class=\"string\" /><text value=\"}\" /><text type=\"break\" /><text type=\"break\" /><text value=\"print(wishlist.difference(cart))\" /><text type=\"break\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"95\" endIndex=\"103\" /><option startIndex=\"103\" endIndex=\"104\" /><option startIndex=\"104\" endIndex=\"114\" /><option startIndex=\"114\" endIndex=\"115\" /><option startIndex=\"115\" endIndex=\"119\" /><option startIndex=\"119\" endIndex=\"120\" /></options></interaction></interactions><output><content><text value=\"{'notebook', 'handgloves'}\" /></content></output></code><p visible-if=\"wrong\">Make sure to pick <code>wishlist</code> followed by <code>.</code> and then <code>difference</code>, <code>(</code>, <code>cart</code>, <code>)</code>.</p></body></html>"
          },
          {
            "title": "Example: The other way around",
            "id": 89439,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Use <code>difference()</code> with <code>cart</code> on the left, to get the items that are in the <code>cart</code> without being on the <code>wishlist</code>.</p><code version=\"2\" codelang=\"python\" name=\"script.py\" visible-if=\"always\"><content><text value=\"wishlist = {\" /><text value=\"&quot;earpods&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;notebook&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;handgloves&quot;\" class=\"string\" /><text value=\"}\" /><text type=\"break\" /><text value=\"cart = {\" /><text value=\"&quot;cat food&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;book&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;earpods&quot;\" class=\"string\" /><text value=\"}\" /><text type=\"break\" /><text type=\"break\" /><text value=\"print(cart.difference(wishlist))\" /><text type=\"break\" /></content><output><content><text value=\"{'cat food', 'book'}\" /></content></output></code></body></html>"
          },
          {
            "title": "Example: Save in variable",
            "id": 89440,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Code the variable <code>not_pets</code> that saves the elements that the <code>animals</code> set has, but  <code>pets</code> doesn't.</p><code version=\"2\" codelang=\"python\" name=\"script.py\" visible-if=\"always\"><content><text value=\"animals = {\" /><text value=\"&quot;whale&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;dog&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;cat&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;giraffe&quot;\" class=\"string\" /><text value=\"}\" /><text type=\"break\" /><text type=\"break\" /><text value=\"pets = {\" /><text value=\"&quot;dog&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;cat&quot;\" class=\"string\" /><text value=\"}\" /><text type=\"break\" /><text type=\"break\" /><text value=\"not_pets = animals.difference(pets)\" /><text type=\"break\" /><text value=\"print(not_pets)\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"69\" endIndex=\"77\" /><option startIndex=\"78\" endIndex=\"79\" /><option startIndex=\"80\" endIndex=\"87\" /><option startIndex=\"87\" endIndex=\"88\" /><option startIndex=\"88\" endIndex=\"98\" /><option startIndex=\"98\" endIndex=\"99\" /><option startIndex=\"99\" endIndex=\"103\" /><option startIndex=\"103\" endIndex=\"104\" /></options></interaction></interactions><output><content><text value=\"{'giraffe', 'whale'}\" /></content></output></code><p visible-if=\"wrong\">Make sure to pick <code>not_pets</code> followed by <code>=</code> and then <code>animals</code>, <code>.</code>, <code>difference</code>, <code>(</code>, <code>pets</code>, <code>)</code>.</p></body></html>"
          }
        ]
      }
    ]
  }
}