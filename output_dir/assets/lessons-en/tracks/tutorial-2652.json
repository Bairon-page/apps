{
  "tutorial": {
    "id": 2652,
    "version": 5,
    "type": "challenges",
    "isNew": false,
    "codeLanguage": "python",
    "title": "Lists",
    "descriptionContent": "Challenge Exercises\nbased on Lists",
    "shortDescriptionContent": "",
    "showInTrack": true,
    "iconBanner": null,
    "chapters": [
      {
        "id": 14670,
        "title": "Meal Planning",
        "type": "challengeLevel0",
        "lessons": [
          {
            "title": "Meal Planning",
            "id": 129698,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "You decide to plan your daily meals using Python lists.\n\n1. Within the variable `meals`, create a list containing your meals for breakfast, lunch, and dinner in this order: `\"omelet\"`, `\"salad\"`, and `\"chicken\"`.\n2. Alter the first print statement to include the lunch menu.\n3. A friend stops by with pizza! Change the `meals` list dinner value (the last value) to `\"pizza\"`.\n4. Alter the second print statement to include the current dinner menu item!",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "meals = \n\nprint(f\"Lunch menu: {}\")\n\nprint(f\"Dinner menu: {}\")",
                  "solvedContent": "meals = [\"omelet\", \"salad\", \"chicken\"]\n\nprint(f\"Lunch menu: {meals[1]}\")\nmeals[2] = \"pizza\"\nprint(f\"Dinner menu: {meals[2]}\")"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 14671,
        "title": "Volleyball Subs",
        "type": "challengeLevel0",
        "lessons": [
          {
            "title": "Volleyball Subs",
            "id": 129699,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "It's tournament time for your volleyball league, but many of your teammates are out of town for the long weekend. Sounds like we'll have to make some substitutions!\n\n1. Use a list operation to replace `\"Iliana\"` with `\"Jack\"` ( `sub_1` ).\n2. Replace `\"Anders\"` with `\"Celeste\"` ( `sub_2` ).\n3. Replace `\"Gabrielle\"` with `\"Mary\"` ( `sub_3` ).\n\nIt's match time. Go team!",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "players = [\"Iliana\", \"Samuel\", \"Anders\", \"Teresa\", \"Gabrielle\", \"Alejandro\"]\nsub1 = \"Jack\"\nsub2 = \"Celeste\"\nsub3 = \"Mary\"\n\n",
                  "solvedContent": "players = [\"Iliana\", \"Samuel\", \"Anders\", \"Teresa\", \"Gabrielle\", \"Alejandro\"]\nsub1 = \"Jack\"\nsub2 = \"Celeste\"\nsub3 = \"Mary\"\n\nplayers[0] = sub1\nplayers[2] = sub2\nplayers[4] = sub3"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 14672,
        "title": "Shopping List Reminders",
        "type": "challengeLevel0",
        "lessons": [
          {
            "title": "Shopping List Reminders",
            "id": 129700,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Let's use `for` loops to keep us on track with our `shopping_list` list! \n\n1. For each item, print out a reminder sentence following this format: `\"Don't forget to buy <...>!\"`.\n2. Replace `<...>` with the value of the current shopping list item in your loop.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "shopping_list = [\"dish soap\", \"kleenex\", \"batteries\", \"aluminum foil\", \"pet food\", \"toothpaste\", \"lightbulbs\"]\n\n",
                  "solvedContent": "shopping_list = [\"dish soap\", \"kleenex\", \"batteries\", \"aluminum foil\", \"pet food\", \"toothpaste\", \"lightbulbs\"]\n\nfor item in shopping_list:\n print(f\"Don't forget to buy {item}!\")"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 14673,
        "title": "Forest Humidity Index",
        "type": "challengeLevel0",
        "lessons": [
          {
            "title": "Forest Humidity Index",
            "id": 129701,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Gab is a geographer studying the humidity levels of forests. Gab gathered some data on the humidity levels from 50 sections of the forest and wants to know what the highest and lowest humidity levels of the forest are. Using `min()` and `max()`, find and print these levels from the `humidity` list for Gab.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "humidity = [77.78, 65.51, 74.42, 80.48, 71.71, 68.39, 65.10, 71.26, 75.95, 81.29, 71.54, 80.85, 84.45, 84.23, 83.18, 68.59, 80.83, 84.72, 78.23, 74.44, 83.20, 74.90, 80.59, 75.09, 82.46, 67.96, 77.65, 69.51, 74.57, 72.98, 66.01, 67.89, 82.52, 65.15, 70.07, 66.84, 74.74, 82.16, 73.73, 82.23, 66.47, 68.70, 71.28, 67.42, 82.87, 66.41, 80.43, 83.42, 74.70, 83.97]",
                  "solvedContent": "humidity = [77.78, 65.51, 74.42, 80.48, 71.71, 68.39, 65.10, 71.26, 75.95, 81.29, 71.54, 80.85, 84.45, 84.23, 83.18, 68.59, 80.83, 84.72, 78.23, 74.44, 83.20, 74.90, 80.59, 75.09, 82.46, 67.96, 77.65, 69.51, 74.57, 72.98, 66.01, 67.89, 82.52, 65.15, 70.07, 66.84, 74.74, 82.16, 73.73, 82.23, 66.47, 68.70, 71.28, 67.42, 82.87, 66.41, 80.43, 83.42, 74.70, 83.97]\r\nprint(min(humidity))\r\nprint(max(humidity))"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 14674,
        "title": "Disqualified Participant",
        "type": "challengeLevel0",
        "lessons": [
          {
            "title": "Disqualified Participant",
            "id": 129702,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "We have a monthly tournament and we recorded the champion's name in the `champions` list. Recently, we found out that a regular participant `\"Tooti3\"` was cheating. We have to check if `\"Tooti3\"` has won any tournaments and remove him from the list. Find out how many times `\"Tooti3\"` appears in the `champions` list using `count()` then print the result in the console.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "champions = [\"Miracle+\", \"Tooti3\", \"Orustat\", \"Emkay\", \"mizuhana\", \"CaptainSpark\", \"NichMercs\", \"mizuhana\", \"dabian\", \"Cyle\",  \"Tooti3\", \"Flaker\"]",
                  "solvedContent": "champions = [\"Miracle+\", \"Tooti3\", \"Orustat\", \"Emkay\", \"mizuhana\", \"CaptainSpark\", \"NichMercs\", \"mizuhana\", \"dabian\", \"Cyle\",  \"Tooti3\", \"Flaker\"]\r\nprint(champions.count(\"Tooti3\"))"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 14675,
        "title": "Savings Account",
        "type": "challengeLevel0",
        "lessons": [
          {
            "title": "Savings Account",
            "id": 129703,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Joe records how much money he saved every month in a list called `savings`. Help Joe calculate his total savings for the year using `sum()` and print the result in the console.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "savings = [122, 50, 102, 103, 79, 46, 107, 9, 13, 91, 193, 4]",
                  "solvedContent": "savings = [122, 50, 102, 103, 79, 46, 107, 9, 13, 91, 193, 4]\r\nprint(sum(savings))"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 13970,
        "title": "Filtering Large Withdrawals",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "Filtering Large Withdrawals",
            "id": 124070,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "To better understand your spending habits, you want a way to view all withdrawals greater than or equal to a set withdrawal threshold.\n\n1. Loop through `withdrawals`.\n2. If the withdrawal amount is greater than or equal to `withdrawal_threshold`, add it to the `large_withdrawals` list. \n4. Finally, print the number of elements in the final `large_withdrawals` list.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "withdrawals = [25, 195, 6, 34, 18, 99, 110, 7, 87, 38, 101, 77, 250]\nwithdrawal_threshold = 100\nlarge_withdrawals = []\n\n",
                  "solvedContent": "withdrawals = [25, 195, 6, 34, 18, 99, 110, 7, 87, 38, 101, 77, 250]\nwithdrawal_threshold = 100\nlarge_withdrawals = []\n\nfor withdrawal in withdrawals:\n if withdrawal >= withdrawal_threshold:\n  large_withdrawals.append(withdrawal)\n\nprint(len(large_withdrawals))"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 13951,
        "title": "Sorting",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "Sorting",
            "id": 123980,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "The `students_1E` and `students_1F` lists contain the names of the students in classes `1E` and `1F` respectively. Due to some restructuring of the school, students from both classes are going to be grouped together. Join `students_1F` with `students_1E` and sort their names alphabetically. Print the merged list in the console.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "students_1E = [\"Leslie\", \"Shyanne\", \"Cayden\", \"Karla\", \"Monika\", \"Abigale\", \"Tristen\", \"Salena\", \"Rosalie\", \"Francisca\", \"Harris\"]\r\nstudents_1F = [\"Mackenzie\", \"Trey\", \"Dashawn\", \"Jamia\", \"Emilio\", \"Desean\", \"Lucero\", \"Lilly\", \"Justice\", \"Cale\"]",
                  "solvedContent": "students_1E = [\"Leslie\", \"Shyanne\", \"Cayden\", \"Karla\", \"Monika\", \"Abigale\", \"Tristen\", \"Salena\", \"Rosalie\", \"Francisca\", \"Harris\"]\r\nstudents_1F = [\"Mackenzie\", \"Trey\", \"Dashawn\", \"Jamia\", \"Emilio\", \"Desean\", \"Lucero\", \"Lilly\", \"Justice\", \"Cale\"]\r\nstudents_1E += students_1F\r\nstudents_1E.sort()\r\nprint(students_1E)"
                }
              ],
              "hints": []
            }
          }
        ]
      }
    ]
  }
}