{
  "tutorial": {
    "id": 2654,
    "version": 5,
    "type": "challenges",
    "isNew": false,
    "codeLanguage": "python",
    "title": "Strings & List Operations",
    "descriptionContent": "Challenges based on Strings & List Operations",
    "shortDescriptionContent": "",
    "showInTrack": true,
    "iconBanner": null,
    "chapters": [
      {
        "id": 14682,
        "title": "Students Lists",
        "type": "challengeLevel0",
        "lessons": [
          {
            "title": "Students Lists",
            "id": 129710,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "A school teacher wants to create a list with all the students' names in his class. He received a long string containing all the names, each name separated by a comma `,`.\n\nHelp him create a `names_list` list that stores the individual names separated by a comma. Then print the list.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "student_names = \"Samantha,Mcgrath,Peyton,Kerim,Nadia,Sandra,Sarah,Alex\"",
                  "solvedContent": "student_names = \"Samantha,Mcgrath,Peyton,Kerim,Nadia,Sandra,Sarah,Alex\"\nnames_list = student_names.split(\",\");\nprint(names_list)"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 14683,
        "title": "Tech Stack Change",
        "type": "challengeLevel0",
        "lessons": [
          {
            "title": "Tech Stack Change",
            "id": 129711,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "You work as a software developer and you decided to use a specific set of programming technologies for your next application. In a last-minute request from the client, you agreed to use React instead of Angular.\n\n1. Re-assign `tech_stack` and use a string operation to replace \"Angular\" with \"React\".\n2. Create a `tech_stack_list` variable that stores the names from `tech_stack` as a list.\n3. Print `tech_stack_list`",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "tech_stack = \"Angular Node Mongo Express\"",
                  "solvedContent": "tech_stack = \"Angular Node Mongo Express\"\ntech_stack = tech_stack.replace(\"Angular\", \"React\")\ntech_stack_list = tech_stack.split()\nprint(tech_stack_list)"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 14684,
        "title": "Top Selling DVDs",
        "type": "challengeLevel0",
        "lessons": [
          {
            "title": "Top Selling DVDs",
            "id": 129712,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "A DVD rental shop wants to update its website with a header that lists their top-selling movies.\n\n1. Create a new variable `new_top_movies` that replaces the value `\"Trapped\"` from `old_top_movies` with `\"Moonfall\"`. Bear in mind that these titles are case-sensitive.\n2. Print the new list.\n ",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "old_top_movies = \"The Power of the Dog - Trapped - Tenet\"\n",
                  "solvedContent": "old_top_movies = \"The Power of the Dog - Trapped - Tenet\"\nnew_top_movies = old_top_movies.replace(\"Trapped\", \"Moonfall\")\nprint(new_top_movies)\n"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 14685,
        "title": "Recommended list of movies",
        "type": "challengeLevel0",
        "lessons": [
          {
            "title": "Recommended List of Movies",
            "id": 129713,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Movie sites recommend films based on ratings, popularity, personalized options, etc. Let's use list comprehensions to recommend movies with a rating greater than 4.\n\n1. Code a list comprehension and assign it to the `recommended` variable.\n2. The list comprehension should iterate through every item in the `ratings` list.\n3. Code the expression inside the list comprehension to check if the rating is greater than 4. The result should be a list of boolean values. \n",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "ratings = [4.3, 3.1, 5, 1.1]\r\n\r\nrecommended =\r\n\r\nprint(recommended)",
                  "solvedContent": "ratings = [4.3, 3.1, 5, 1.1]\r\n\r\nrecommended = [rating > 4 for rating in ratings]\r\nprint(recommended)"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 14686,
        "title": "Adding Https:// before sites",
        "type": "challengeLevel0",
        "lessons": [
          {
            "title": "Adding https:// Before Sites",
            "id": 129714,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Ever notice how browsers automatically add `\"https://\"` to a site URL? Let's use list comprehension to add `\"https://\"` to the list of sites in `websites`.\n\n1. Create a function `add_https` that takes `site` as a parameter. The function should return `\"https://\"` added to the `site` parameter.\n2. After the function, create a variable `auto_add` that will store a list comprehension.\n3. The list comprehension should iterate through every item in the `websites` list.\n3. Code the expression inside the list comprehension that calls the `add_https` function on the list items.\n4. Print `auto_add`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "websites = [\"mimo.com\", \"coding.com\", \"food.org\"]",
                  "solvedContent": "websites = [\"mimo.com\", \"coding.com\", \"food.org\"]\r\n\r\ndef add_https(site):\r\n    return \"https://\" + site\r\n\r\nauto_add = [add_https(site) for site in websites]\r\n    \r\nprint(auto_add)"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 14687,
        "title": "Deleting unnecessary information",
        "type": "challengeLevel0",
        "lessons": [
          {
            "title": "Deleting Unnecessary Information",
            "id": 129715,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Sometimes, we store information in databases that we don't need. For example, in the given `product` dictionary, we don't need the `color` key and value.\n\n1. Delete the `color` key with its value from the `product` dictionary using the right keyword.\n2. Print `product`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "product = {\r\n 'name': 'pencil',\r\n 'type': 'stationery',\r\n 'price': 1.99,\r\n 'color': 'blue',\r\n 'availability': False\r\n}",
                  "solvedContent": "product = {\r\n 'name': 'pencil',\r\n 'type': 'stationery',\r\n 'price': 1.99,\r\n 'color': 'blue',\r\n 'availability': False\r\n}\r\n\r\ndel product['color']\r\n\r\nprint(product)"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 13973,
        "title": "Juliette's Flower Shop",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "Juliette's Flower Shop",
            "id": 124075,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Juliette owns a flower shop. The shop already offers a 5% discount for all customers to celebrate the 3rd anniversary of the store. \n\nRecently, Juliette had a new baby born on the 15th of July. On that occasion, she decides to give an even bigger 10% discount for all customers born on the same date.  She has a string containing these birthdays in DD-MM Format which are separated by `|`. \n\n1. Create a `birthdays_list` variable and store in it the birth dates as items of a list from `birthdays_string`.\n2. Loop over `birthdays_list` and check if the date is `\"15-07\"`. If it is, re-assign the `special_discount` to **replace** `5%` with `10%`.\n3. Print `special_discount` outside the for loop at the end.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "birthdays_string = \"23-09|25-04|05-09|15-07|01-06\"\nspecial_discount = \"You are eligible for a 5% discount\"\n",
                  "solvedContent": "birthdays_string = \"23-09|25-04|05-09|15-07|01-06\"\nspecial_discount = \"You are eligible for a 5% discount\"\nbirthdays_list = birthdays_string.split(\"|\")\n\nfor birthday in birthdays_list:\n if (birthday == \"15-07\"):\n  special_discount = special_discount.replace(\"5%\", \"10%\")\n\nprint(special_discount)"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 13976,
        "title": "Grade Check",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "Grade Check",
            "id": 124079,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "A course instructor has received the grades of a student in a string format. The grades are separated by a `-`. She wants to calculate the sum of all these grades and check if the student passed.\n\n1. Create a `grades_list` variable and store in it the grades you extract from `grades_string` as a list of items.\n2. Loop over `grades_list`, convert each item to an integer, and then add it to the `total_grade`.\n\nMake sure you perform these operations **before** the print statement.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "grades_string = \"88-77-59-63\"\ntotal_grade = 0\n\nprint(total_grade)",
                  "solvedContent": "grades_string = \"88-77-59-63\"\ntotal_grade = 0\ngrades_list = grades_string.split(\"-\")\n\nfor grade in grades_list:\n grade = int(grade)\n total_grade += grade\n\nprint(total_grade)"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 13837,
        "title": "Filtering search results",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "Filtering search results",
            "id": 123319,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Search engines, streaming sites, etc. filter search results by keywords. Let's use list comprehension to filter a list such that the result only displays the list items with the keyword.\n\n1. Store a list comprehension in the variable `results`.\n2. Iterate through each list item in the list comprehension. The expression won't have any operations.\n3. Add an `if` statement to the list comprehension that checks if a list item has `\"cats\"`.\n4. Print `results`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "archive = [\"Amazing cats\", \"Top 10 Dances\", \"Breaking news\", \"How to: Tips\", \"cats dance\"]\r\n\r\nresults =",
                  "solvedContent": "archive = [\"Amazing cats\", \"Top 10 Dances\", \"Breaking news\", \"How to: Tips\", \"cats dance\"]\r\n\r\nresults = [result for result in archive if result.count(\"cats\") > 0]\r\n\r\nprint(results)"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 13839,
        "title": "Tasks list clearing",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "Clear a task list",
            "id": 123321,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Let's use slice notation to clear a simple task list.\n\n1. Delete `grocery` and `laundry` from the `daily_tasks` list using the `del` keyword and slice notation.\n2. Print `daily_tasks`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "daily_tasks = ['grocery', 'laundry', 'dusting']",
                  "solvedContent": "daily_tasks = ['grocery', 'laundry', 'dusting']\r\ndel daily_tasks[1::-1]\r\nprint(daily_tasks)"
                }
              ],
              "hints": []
            }
          }
        ]
      }
    ]
  }
}