{
  "tutorial": {
    "id": 1896,
    "version": 12,
    "type": "course",
    "isNew": false,
    "codeLanguage": "javascript",
    "title": "ES6 Variables and Scope",
    "descriptionContent": "Use different ways to create variables and understand scope.",
    "shortDescriptionContent": "",
    "showInTrack": true,
    "iconBanner": null,
    "chapters": [
      {
        "id": 12383,
        "title": "Var Variables",
        "type": "practiceLevel1",
        "lessons": [
          {
            "title": "Intro",
            "id": 112202,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>So far we've learned a lot about JavaScript, a technology that is constantly evolving.</p><p>In 2015 there was a major JS revision called ECMAScript 2015 (ES6). It brought new features, like the two variables that you already know.</p></body></html>"
          },
          {
            "title": "Var",
            "id": 112208,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>But before the use of <code>let</code> and <code>const</code>, we declared variables using the keyword <code>var</code>, which stands for <code>\"variable\"</code>.<br /></p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"var\" class=\"keyword\" /><text value=\" color = \" /><text value=\"&quot;red&quot;\" class=\"string\" /><text value=\";\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"0\" endIndex=\"3\" /></options></interaction></interactions></code><p visible-if=\"wrong\">Make sure to pick <code>var</code>.</p></body></html>"
          },
          {
            "title": "Let and Const",
            "id": 112211,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>ES6 introduced <code>let</code> and <code>const</code> variables to overcome limitations with <code>var</code>. So you should always try to use <code>let</code> and <code>const</code>.</p><p>Display the three different types of variables in the console in the order we declared them to see that they work the same.</p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"var\" class=\"keyword\" /><text value=\" fullName = \" /><text value=\"&quot;Emma Watson&quot;\" class=\"string\" /><text value=\";\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" occupation = \" /><text value=\"&quot;Activist&quot;\" class=\"string\" /><text value=\";\" /><text type=\"break\" /><text value=\"let\" class=\"keyword\" /><text value=\" age = \" /><text value=\"30\" class=\"number\" /><text value=\";\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(fullName);\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(occupation);\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(age);\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"87\" endIndex=\"95\" /><option startIndex=\"110\" endIndex=\"120\" /><option startIndex=\"135\" endIndex=\"138\" /></options></interaction></interactions><output><content><text value=\"Emma Watson\" /><text type=\"break\" /><text value=\"Activist\" /><text type=\"break\" /><text value=\"30\" /></content></output></code><p visible-if=\"wrong\">Make sure to pick <code>fullName</code>, followed by <code>occupation</code>, and finally <code>age</code>.</p></body></html>"
          },
          {
            "title": "Let, const and var similarities",
            "id": 112212,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>We use <code>var</code>, <code>let</code>, and <code>const</code> variables to store data, and they follow the same naming rules we have already learned about.</p><p>Choose the appropriate names for the variables.</p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"var\" class=\"keyword\" /><text value=\" number = \" /><text value=\"20\" class=\"number\" /><text value=\";\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" player1 = \" /><text value=\"'Sonic'\" class=\"string\" /><text value=\";\" /><text type=\"break\" /><text value=\"let\" class=\"keyword\" /><text value=\" badWeather = \" /><text value=\"&quot;rainy&quot;\" class=\"string\" /><text value=\";\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(number);\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(player1);\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(badWeather);\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"4\" endIndex=\"10\" /><option startIndex=\"23\" endIndex=\"30\" /><option startIndex=\"46\" endIndex=\"56\" /></options></interaction></interactions><output><content><text value=\"20\" /><text type=\"break\" /><text value=\"Sonic\" /><text type=\"break\" /><text value=\"rainy\" /></content></output></code><p visible-if=\"wrong\">Make sure to pick <code>number</code>, followed by <code>player1</code>, and finally <code>badWeather</code>.</p></body></html>"
          },
          {
            "title": "Redeclaring var",
            "id": 112209,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Beyond naming, these variables behave quite differently. For example, <code>var</code> can be declared multiple times, while <code>let</code> and <code>const</code> can't.</p><p>If we display <code>surname</code> in the console we'll only see the last value we assigned to the variable.</p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"var\" class=\"keyword\" /><text value=\" surname = \" /><text value=\"&quot;Smit&quot;\" class=\"string\" /><text value=\";\" /><text type=\"break\" /><text value=\"var\" class=\"keyword\" /><text value=\" surname = \" /><text value=\"&quot;Smith&quot;\" class=\"string\" /><text value=\";\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(surname);\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"57\" endIndex=\"64\" /><option correct=\"false\"><content><text value=\"firstName\" /></content></option></options></interaction></interactions><output><content><text value=\"Smith\" /></content></output></code><p visible-if=\"wrong\">Make sure to pick <code>surname</code>.</p></body></html>"
          },
          {
            "title": "Redeclaring const",
            "id": 112213,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>We can only declare <code>let</code> and <code>const</code> once. If we try to redeclare these variables we'll get a syntax error in the console.</p><p>Display <code>color</code> in the console to see the error.</p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" color = \" /><text value=\"&quot;Brow&quot;\" class=\"string\" /><text value=\";\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" color = \" /><text value=\"&quot;Brown&quot;\" class=\"string\" /><text value=\";\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(color);\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"57\" endIndex=\"62\" /></options></interaction></interactions><output><content><text value=\"SyntaxError: Identifier 'color' has already been declared\" /><text type=\"break\" /><text value=\" \" /></content></output></code><p visible-if=\"wrong\">Make sure to pick <code>color</code>.</p></body></html>"
          },
          {
            "title": "Redeclaring let",
            "id": 112214,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>The same happens with a <code>let</code> variable like <code>movie</code>. We cannot declare a <code>let</code> variable multiple times.</p><p>What will the console display?</p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"let\" class=\"keyword\" /><text value=\" movie = \" /><text value=\"&quot;The Huner Games&quot;\" class=\"string\" /><text value=\";\" /><text type=\"break\" /><text value=\"let\" class=\"keyword\" /><text value=\" movie = \" /><text value=\"&quot;The Hunger Games&quot;\" class=\"string\" /><text value=\";\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(movie);\" /></content><output><content><text value=\"Uncaught SyntaxError: Identifier 'movie' has already been declared\" /></content></output></code><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\"><code>Uncaught SyntaxError: Identifier 'movie' has already been declared</code></item><item value=\"2\" correct=\"false\"><code>The Huner Games</code></item><item value=\"3\" correct=\"false\"><code>The Hunger Games</code></item></selection><p visible-if=\"wrong\"><code>Uncaught SyntaxError: Identifier 'movie' has already been declared</code>.</p></body></html>"
          },
          {
            "title": "Final explanation",
            "id": 112265,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Declaring variables with <code>let</code> and <code>const</code> is essential for avoiding many other code errors, so we should use them as our first option.</p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" canDance = \" /><text value=\"true\" class=\"literal\" /><text value=\";\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" canDance = \" /><text value=\"false\" class=\"literal\" /><text value=\";\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(canDance);\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"59\" endIndex=\"67\" /></options></interaction></interactions><output><content><text value=\"SyntaxError: Identifier 'canDance' has already been declared\" /></content></output></code><p visible-if=\"wrong\">Make sure to pick <code>canDance</code>.</p></body></html>"
          },
          {
            "title": "Question 1",
            "id": 112210,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>True or false? <code>var</code> is the only reserved word for creating variables.</p><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\">False</item><item value=\"2\" correct=\"false\">True</item></selection><p visible-if=\"wrong\">Make sure to pick False.</p></body></html>"
          },
          {
            "title": "Question 2",
            "id": 112216,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>What can we store in the three types of variables?</p><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\">We can store all types of data in the three variables types</item><item value=\"2\" correct=\"false\">We can only store objects in <code>let</code> and <code>const</code> and numbers in <code>var</code></item></selection><p visible-if=\"wrong\">We can store all types of data in the three variables types.</p></body></html>"
          },
          {
            "title": "Question 3",
            "id": 112217,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Which variable type can we redeclare?</p><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\"><code>var</code></item><item value=\"2\" correct=\"false\"><code>const</code></item><item value=\"3\" correct=\"false\"><code>let</code></item></selection><p visible-if=\"wrong\">Make sure to pick <code>var</code>.</p></body></html>"
          },
          {
            "title": "Question 4",
            "id": 112224,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>What does ES6 stand for?</p><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\">ECMAScript 2015</item><item value=\"2\" correct=\"false\">JavaScript 2015</item><item value=\"3\" correct=\"false\">TypeScript 2015</item></selection><p visible-if=\"wrong\">ECMAScript 2015.</p></body></html>"
          },
          {
            "title": "Example 2",
            "id": 112219,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Create a new <code>tree</code> variable using <code>let</code>.</p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"let\" class=\"keyword\" /><text value=\" tree = \" /><text value=\"&quot;Crespon&quot;\" class=\"string\" /><text value=\";\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(tree);\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"0\" endIndex=\"3\" /><option startIndex=\"4\" endIndex=\"8\" /><option startIndex=\"9\" endIndex=\"10\" /><option startIndex=\"11\" endIndex=\"20\" /></options></interaction></interactions><output><content><text value=\"Crespon\" /></content></output></code><p visible-if=\"wrong\">Make sure to pick <code>let</code> followed by <code>tree</code> and then <code>=</code>, <code>\"Crespon\"</code>.</p></body></html>"
          },
          {
            "title": "Example 3",
            "id": 112220,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Order the lines to first declare the <code>year</code> variable, then update it, and finally display it in the console.</p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"let\" class=\"keyword\" /><text value=\" year = \" /><text value=\"2021\" class=\"number\" /><text value=\";\" /><text type=\"break\" /><text value=\"year = \" /><text value=\"2022\" class=\"number\" /><text value=\";\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(year);\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"0\" endIndex=\"16\" /><option startIndex=\"17\" endIndex=\"29\" /></options></interaction></interactions><output><content><text value=\"2022\" /></content></output></code><p visible-if=\"wrong\">Make sure to pick <code>let year = 2021;</code>, followed by <code>year = 2022;</code>.</p></body></html>"
          },
          {
            "title": "Example 4",
            "id": 112267,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Declare the variable <code>forest</code> using the <code>const</code> variable type.</p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"let\" class=\"keyword\" /><text value=\" river = \" /><text value=\"&quot;Thames&quot;\" class=\"string\" /><text value=\";\" /><text type=\"break\" /><text value=\"var\" class=\"keyword\" /><text value=\" mountain = \" /><text value=\"&quot;Everest&quot;\" class=\"string\" /><text value=\";\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" forest = \" /><text value=\"&quot;Sequoia National Forest&quot;\" class=\"string\" /><text value=\";\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(forest);\" /></content><interactions><interaction type=\"validatedInput\" isDefault=\"true\" startIndex=\"48\" endIndex=\"53\" /></interactions><output><content><text value=\"Sequoia National Forest\" /></content></output></code><p visible-if=\"wrong\">Make sure to type <code>const</code>.</p></body></html>"
          }
        ]
      },
      {
        "id": 12389,
        "title": "Update variables and Errors",
        "type": "practiceLevel1",
        "lessons": [
          {
            "title": "Intro",
            "id": 112215,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>We already know the three types of variables <code>let</code>, <code>const</code>, and <code>var</code>.</p><p>Let's learn more about the differences between them to understand why they're used in different situations.</p></body></html>"
          },
          {
            "title": "Updating variables",
            "id": 112229,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>We can update <code>let</code> or <code>var</code> variables with the assign <code>=</code> operator. But we can't change <code>const</code> variables. <code>const</code> is short for \"constant\".</p><p>\"Pi\" is a mathematical number that doesn't change. If we store it in a <code>const</code> and try to change it, what error will we get?</p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" piNumber = \" /><text value=\"3.1416\" class=\"number\" /><text value=\";\" /><text type=\"break\" /><text value=\"piNumber = \" /><text value=\"90\" class=\"number\" /><text value=\";\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(piNumber);\" /></content><output><content><text value=\"TypeError: Assignment to constant variable.\" /></content></output></code><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\"><code>TypeError: Assignment to constant variable</code></item><item value=\"2\" correct=\"false\"><code>ReferenceError: piNumber is not defined</code></item></selection><p visible-if=\"wrong\"><code>TypeError: Assignment to constant variable</code>.</p></body></html>"
          },
          {
            "title": "Updating const - Arrays",
            "id": 112232,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>We can't change a whole array stored in a <code>const</code> variable. However, we can use array methods to <em>update</em> its contents.</p><p>Use the correct array method to include the <code>newPresent</code> in the <code>wardrobe</code>.</p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" newPresent = \" /><text value=\"&quot;Trousers&quot;\" class=\"string\" /><text value=\";\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" wardrobe = [\" /><text value=\"&quot;Shirt&quot;\" class=\"string\" /><text value=\"];\" /><text type=\"break\" /><text value=\"wardrobe.push(newPresent);\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(wardrobe);\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"59\" endIndex=\"67\" /><option startIndex=\"67\" endIndex=\"68\" /><option startIndex=\"68\" endIndex=\"72\" /></options></interaction></interactions><output><content><text value=\"[ 'Shirt', 'Trousers' ]\" /></content></output></code><p visible-if=\"wrong\">Make sure to pick <code>wardrobe</code>, followed by <code>.</code>, and finally <code>push</code>.</p></body></html>"
          },
          {
            "title": "Updating const - Object properties",
            "id": 112296,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Likewise, we can't change a whole object stored in a constant, but we can <em>update</em> its properties.</p><p>What will be the output of <code>myClothes.shirts</code>?</p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" myClothes = {\" /><text type=\"break\" /><text value=\" \" /><text value=\"shirts\" class=\"attr\" /><text value=\": \" /><text value=\"1\" class=\"number\" /><text value=\",\" /><text type=\"break\" /><text value=\"};\" /><text type=\"break\" /><text value=\"myClothes.shirts++;\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(myClothes.shirts);\" /></content><output><content><text value=\"2\" /></content></output></code><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\">2</item><item value=\"2\" correct=\"false\">1</item></selection><p visible-if=\"wrong\">Make sure to pick 2.</p></body></html>"
          },
          {
            "title": "Var Hoisting",
            "id": 112275,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Another difference between the three types of variables is that we can store data in a <code>var</code> variable before we even declare it.</p><p>This process is called \"hoisting\". Keep in mind that <strong>this is not a good practice</strong>.</p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"zodiacSign = \" /><text value=\"&quot;Aries&quot;\" class=\"string\" /><text value=\";\" /><text type=\"break\" /><text value=\"var\" class=\"keyword\" /><text value=\" zodiacSign;\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(zodiacSign);\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"22\" endIndex=\"25\" /></options></interaction></interactions><output><content><text value=\"Aries\" /></content></output></code><p visible-if=\"wrong\">Make sure to pick <code>var</code>.</p></body></html>"
          },
          {
            "title": "let and const not hoisting",
            "id": 112274,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p><code>let</code> and <code>const</code> prevent hoisting because we always need to declare these variables before storing data inside them.</p><p>We'll see an initialization error in the console if we assign a value to a <code>const</code> or <code>let</code> variable before we have declared them.</p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"car = \" /><text value=\"&quot;Renault&quot;\" class=\"string\" /><text value=\";\" /><text type=\"break\" /><text value=\"let\" class=\"keyword\" /><text value=\" car;\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(car);\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"17\" endIndex=\"20\" /><option startIndex=\"21\" endIndex=\"24\" /></options></interaction></interactions><output><content><text value=\"ReferenceError: Cannot access 'car' before initialization\" /></content></output></code><p visible-if=\"wrong\">Make sure to pick <code>let</code>, followed by <code>car</code>.</p></body></html>"
          },
          {
            "title": "Question 1",
            "id": 112331,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>What type of variable would you find appropriate to store Euler's number which is always 2.71828?</p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" eulerNumber = \" /><text value=\"2.71828\" class=\"number\" /><text value=\";\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(eulerNumber);\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"0\" endIndex=\"5\" /><option correct=\"false\"><content><text value=\"var\" /></content></option><option correct=\"false\"><content><text value=\"let\" /></content></option></options></interaction></interactions><output><content><text value=\"2.71828\" /></content></output></code><p visible-if=\"wrong\">Make sure to pick <code>const</code>.</p></body></html>"
          },
          {
            "title": "Question 2",
            "id": 112332,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>What will the console display?</p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" placeOfBirth = \" /><text value=\"&quot;Tokyo&quot;\" class=\"string\" /><text value=\";\" /><text type=\"break\" /><text value=\"placeOfBirth = \" /><text value=\"&quot;Asunción&quot;\" class=\"string\" /><text value=\";\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(placeOfBirth);\" /></content><output><content><text value=\"TypeError: Assignment to constant variable.\" /></content></output></code><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\"><code>TypeError: Assignment to constant variable</code></item><item value=\"2\" correct=\"false\"><code>TypeError: Assignment to let variable</code></item><item value=\"3\" correct=\"false\">Asunción</item></selection><p visible-if=\"wrong\"><code>TypeError: Assignment to constant variable</code>.</p></body></html>"
          },
          {
            "title": "Question 3",
            "id": 112333,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Can we update an object <em>property</em> stored in a <code>const</code> variable?</p><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\">Yes, you can change the properties of an object stored in a <code>const</code> variable</item><item value=\"2\" correct=\"false\">No</item></selection><p visible-if=\"wrong\">Yes, you can change the properties of an object stored in a <code>const</code> variable.</p></body></html>"
          },
          {
            "title": "Question 4",
            "id": 112334,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>What will the console display?</p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"artist = \" /><text value=\"&quot;Frida Kahlo&quot;\" class=\"string\" /><text value=\";\" /><text type=\"break\" /><text value=\"let\" class=\"keyword\" /><text value=\" artist;\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(artist);\" /></content><output><content><text value=\"ReferenceError: Cannot access 'artist' before initialization\" /></content></output></code><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"false\"><code>TypeError: Assignment to constant variable</code></item><item value=\"2\" correct=\"true\"><code>ReferenceError: Cannot access 'artist' before initialization</code></item></selection><p visible-if=\"wrong\"><code>ReferenceError: Cannot access 'artist' before initialization</code>.</p></body></html>"
          },
          {
            "title": "Example 1",
            "id": 112335,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Order the code lines to avoid hoisting.</p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"var\" class=\"keyword\" /><text value=\" lotteryNumbers;\" /><text type=\"break\" /><text value=\"lotteryNumbers = [\" /><text value=\"20\" class=\"number\" /><text value=\", \" /><text value=\"34\" class=\"number\" /><text value=\", \" /><text value=\"645\" class=\"number\" /><text value=\", \" /><text value=\"01\" class=\"number\" /><text value=\"];\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(lotteryNumbers);\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"0\" endIndex=\"19\" /><option startIndex=\"20\" endIndex=\"55\" /></options></interaction></interactions><output><content><text value=\"[ 20, 34, 645, 1 ]\" /></content></output></code><p visible-if=\"wrong\">Make sure to pick <code>var lotteryNumbers;</code>, followed by <code>lotteryNumbers = [20, 34, 645, 01];</code>.</p></body></html>"
          },
          {
            "title": "Example 2",
            "id": 112336,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Finish the code so that the value of the variable cannot be updated.</p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" capitalOfZambia = \" /><text value=\"&quot;Lusaka&quot;\" class=\"string\" /><text value=\";\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(capitalOfZambia);\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"0\" endIndex=\"5\" /><option correct=\"false\"><content><text value=\"var\" /></content></option></options></interaction></interactions><output><content><text value=\"Lusaka\" /></content></output></code><p visible-if=\"wrong\">Make sure to pick <code>const</code>.</p></body></html>"
          },
          {
            "title": "Example 3",
            "id": 112337,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Code a variable type that will <em>not</em> cause an error.</p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"asleep = \" /><text value=\"true\" class=\"literal\" /><text value=\";\" /><text type=\"break\" /><text value=\"var\" class=\"keyword\" /><text value=\" asleep;\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(asleep);\" /></content><interactions><interaction type=\"validatedInput\" isDefault=\"true\" startIndex=\"15\" endIndex=\"18\" /></interactions><output><content><text value=\"true\" /></content></output></code><p visible-if=\"wrong\">Make sure to type <code>var</code>.</p></body></html>"
          }
        ]
      },
      {
        "id": 12384,
        "title": "Scope",
        "type": "practiceLevel1",
        "lessons": [
          {
            "title": "Intro",
            "id": 112203,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Now that we're comfortable with the three types of variables, let's learn about the concept of \"scope\".</p><p>\"Scope\" is a term used to indicate where variables are available. There are parts of our code where we don't have access to them.</p></body></html>"
          },
          {
            "title": "Local Scope",
            "id": 112339,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p><strong>Local</strong> or <strong>function</strong> scope refers to the part of code inside a function.</p><p>Here, <code>country</code> is a local variable that we can access only inside of the <code>visitCountry</code> function.</p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"function\" class=\"keyword\" /><text value=\" \" /><text value=\"visitCountry\" class=\"title\" /><text value=\"(\" /><text value=\"\" class=\"params\" /><text value=\") \" /><text value=\"{\" /><text type=\"break\" /><text value=\" \" /><text value=\"const\" class=\"keyword\" /><text value=\" country = \" /><text value=\"&quot;Argentina&quot;\" class=\"string\" /><text value=\";\" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(country);\" /><text type=\"break\" /><text value=\"}\" /><text type=\"break\" /><text value=\"visitCountry();\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"27\" endIndex=\"32\" /><option startIndex=\"44\" endIndex=\"55\" /><option startIndex=\"33\" endIndex=\"40\" /></options></interaction></interactions><output><content><text value=\"Argentina\" /></content></output></code><p visible-if=\"wrong\">Make sure to pick <code>const</code>, followed by <code>country</code>, and finally <code>Argentina\";</code>.</p></body></html>"
          },
          {
            "title": "Local Scope 2",
            "id": 112299,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Trying to access a local variable from outside the function will produce an error.</p><p>Here, <code>myDiary</code> is private, so we can't access it from outside the function. Let's try to see what gets displayed.</p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"function\" class=\"keyword\" /><text value=\" \" /><text value=\"readDiary\" class=\"title\" /><text value=\"(\" /><text value=\"\" class=\"params\" /><text value=\") \" /><text value=\"{\" /><text type=\"break\" /><text value=\" \" /><text value=\"const\" class=\"keyword\" /><text value=\" myDiary = \" /><text value=\"&quot;Dear diary, today...&quot;\" class=\"string\" /><text value=\";\" /><text type=\"break\" /><text value=\"}\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(myDiary);\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"78\" endIndex=\"85\" /><option correct=\"false\"><content><text value=\"myDiary()\" /></content></option></options></interaction></interactions><output><content><text value=\"ReferenceError: myDiary is not defined\" /></content></output></code><p visible-if=\"wrong\">Make sure to pick <code>myDiary</code>.</p></body></html>"
          },
          {
            "title": "Global Scope",
            "id": 112298,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>The space outside a function is called <strong>global scope</strong>. You can think of it as the code between functions.</p><p>If we declare <code>cityToVisit</code> in the global scope, we can access it from anywhere in the code, including inside the <code>travel</code> function.</p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"let\" class=\"keyword\" /><text value=\" cityToVisit = \" /><text value=\"&quot;Salzburg&quot;\" class=\"string\" /><text value=\";\" /><text type=\"break\" /><text type=\"break\" /><text value=\"function\" class=\"keyword\" /><text value=\" \" /><text value=\"travel\" class=\"title\" /><text value=\"(\" /><text value=\"\" class=\"params\" /><text value=\") \" /><text value=\"{\" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;Let's go to &quot;\" class=\"string\" /><text value=\" + cityToVisit);\" /><text type=\"break\" /><text value=\"}\" /><text type=\"break\" /><text value=\"travel();\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(cityToVisit);\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"81\" endIndex=\"92\" /><option startIndex=\"119\" endIndex=\"130\" /></options></interaction></interactions><output><content><text value=\"Let's go to Salzburg\" /><text type=\"break\" /><text value=\"Salzburg\" /></content></output></code><p visible-if=\"wrong\">Make sure to pick <code>cityToVisit</code>, followed by <code>cityToVisit</code>.</p></body></html>"
          },
          {
            "title": "Block scope",
            "id": 112301,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>The last scope type is called <strong>block scope</strong>. It's the part of our code in between the braces ( <code>{}</code> ) that belong to loops or conditionals.</p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"if\" class=\"keyword\" /><text value=\" (\" /><text value=\"10\" class=\"number\" /><text value=\" === \" /><text value=\"10\" class=\"number\" /><text value=\") {\" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;This space here is block scope&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\"}\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"15\" endIndex=\"16\" /><option startIndex=\"65\" endIndex=\"66\" /></options></interaction></interactions><output><content><text value=\"This space here is block scope\" /></content></output></code><p visible-if=\"wrong\">Make sure to pick <code>{</code>, followed by <code>}</code>.</p></body></html>"
          },
          {
            "title": "Block scope - var",
            "id": 112302,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>We can access a <code>var</code> declared inside a block, from outside of it, which can cause confusion if we declare it more than once.<br /></p><p>Here, we're declaring the <code>access</code> variable twice. What will be the output?</p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"var\" class=\"keyword\" /><text value=\" age = \" /><text value=\"18\" class=\"number\" /><text value=\";\" /><text type=\"break\" /><text value=\"var\" class=\"keyword\" /><text value=\" access = \" /><text value=\"true\" class=\"literal\" /><text value=\";\" /><text type=\"break\" /><text value=\"if\" class=\"keyword\" /><text value=\" (age === \" /><text value=\"18\" class=\"number\" /><text value=\") {\" /><text type=\"break\" /><text value=\" \" /><text value=\"var\" class=\"keyword\" /><text value=\" access = \" /><text value=\"false\" class=\"literal\" /><text value=\";\" /><text type=\"break\" /><text value=\"}\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(access);\" /></content><output><content><text value=\"false\" /></content></output></code><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\">false</item><item value=\"2\" correct=\"false\">true</item></selection><p visible-if=\"wrong\">Make sure to pick false.</p></body></html>"
          },
          {
            "title": "Block scope - let, const",
            "id": 112303,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>If we declare <code>let</code> and <code>const</code> in a block scope, we can only access them in that block of code.</p><p>Here there are two <code>canDrive</code> variables, one in a global scope and the other in a block scope. What displays in the console?</p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" drivingAge = \" /><text value=\"18\" class=\"number\" /><text value=\";\" /><text type=\"break\" /><text value=\"let\" class=\"keyword\" /><text value=\" canDrive = \" /><text value=\"false\" class=\"literal\" /><text value=\";\" /><text type=\"break\" /><text value=\"if\" class=\"keyword\" /><text value=\" (drivingAge === \" /><text value=\"18\" class=\"number\" /><text value=\") {\" /><text type=\"break\" /><text value=\" \" /><text value=\"let\" class=\"keyword\" /><text value=\" canDrive = \" /><text value=\"true\" class=\"literal\" /><text value=\";\" /><text type=\"break\" /><text value=\"}\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(canDrive);\" /></content><output><content><text value=\"false\" /></content></output></code><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\">The global variable</item><item value=\"2\" correct=\"false\">The block variable</item></selection><p visible-if=\"wrong\">The global variable.</p></body></html>"
          },
          {
            "title": "Block scope - for",
            "id": 112304,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Block scope is also useful in limiting where we use certain variables. It's really helpful in preventing unwanted side effects or errors.</p><p>Here, we can only use the <code>index</code> variable in the loop. After the loop finishes <code>index</code> is no longer available.</p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"for\" class=\"keyword\" /><text value=\" (\" /><text value=\"let\" class=\"keyword\" /><text value=\" index = \" /><text value=\"1\" class=\"number\" /><text value=\"; index &lt;= \" /><text value=\"3\" class=\"number\" /><text value=\"; index++) {\" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;Let's count to three&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\"}\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(index);\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"95\" endIndex=\"100\" /></options></interaction></interactions><output><content><text value=\"Let's count to three\" /><text type=\"break\" /><text value=\"Let's count to three\" /><text type=\"break\" /><text value=\"Let's count to three\" /><text type=\"break\" /><text value=\"Uncaught ReferenceError: index is not defined\" /></content></output></code><p visible-if=\"wrong\">Make sure to pick <code>index</code>.</p></body></html>"
          },
          {
            "title": "Question 1",
            "id": 112341,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>What's the scope within a function called?</p><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\">Local or Function Scope</item><item value=\"2\" correct=\"false\">Global Scope</item></selection><p visible-if=\"wrong\">Local or Function Scope.</p></body></html>"
          },
          {
            "title": "Question 2",
            "id": 112342,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>What's the scope of the <code>dog</code> variable?</p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"function\" class=\"keyword\" /><text value=\" \" /><text value=\"annoyDog\" class=\"title\" /><text value=\"(\" /><text value=\"\" class=\"params\" /><text value=\") \" /><text value=\"{\" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;This cat doesn't like &quot;\" class=\"string\" /><text value=\" + dog.name + \" /><text value=\"&quot; the dog.&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\"}\" /><text type=\"break\" /><text value=\"var\" class=\"keyword\" /><text value=\" dog = {\" /><text type=\"break\" /><text value=\" \" /><text value=\"name\" class=\"attr\" /><text value=\": \" /><text value=\"&quot;Ryan&quot;\" class=\"string\" /><text value=\",\" /><text type=\"break\" /><text value=\" \" /><text value=\"eat\" class=\"attr\" /><text value=\": \" /><text value=\"&quot;dog food&quot;\" class=\"string\" /><text value=\",\" /><text type=\"break\" /><text value=\" \" /><text value=\"likes\" class=\"attr\" /><text value=\": [\" /><text value=\"&quot;ball&quot;\" class=\"string\" /><text value=\"]\" /><text type=\"break\" /><text value=\"};\" /><text type=\"break\" /><text value=\"annoyDog();\" /></content><output><content><text value=\"This cat doesn't like Ryan the dog.\" /></content></output></code><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\">Global Scope</item><item value=\"2\" correct=\"false\">Local Scope</item><item value=\"3\" correct=\"false\">Block Scope</item></selection><p visible-if=\"wrong\">Global Scope.</p></body></html>"
          },
          {
            "title": "Question 3",
            "id": 112343,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Block scope is the parts of the code in between what symbols?</p><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\"><code>{ }</code></item><item value=\"2\" correct=\"false\"><code>[ ]</code></item></selection><p visible-if=\"wrong\"><code>{ }</code>.</p></body></html>"
          },
          {
            "title": "Question 4",
            "id": 112344,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Can we access a <code>var</code> variable declared inside a block scope from outside?</p><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\">Yes</item><item value=\"2\" correct=\"false\">No</item></selection><p visible-if=\"wrong\">Make sure to pick Yes.</p></body></html>"
          },
          {
            "title": "Example 1",
            "id": 112300,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Here, <code>neighborhood</code> is a global variable, but <code>BATH</code> is a local one, so what will the console display?</p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"let\" class=\"keyword\" /><text value=\" neighborhood = {\" /><text type=\"break\" /><text value=\" \" /><text value=\"apartments\" class=\"attr\" /><text value=\": \" /><text value=\"13\" class=\"number\" /><text value=\",\" /><text type=\"break\" /><text value=\" \" /><text value=\"garden\" class=\"attr\" /><text value=\": \" /><text value=\"1\" class=\"number\" /><text type=\"break\" /><text value=\"};\" /><text type=\"break\" /><text type=\"break\" /><text value=\"function\" class=\"keyword\" /><text value=\" \" /><text value=\"fixMyHouse\" class=\"title\" /><text value=\"(\" /><text value=\"\" class=\"params\" /><text value=\") \" /><text value=\"{\" /><text type=\"break\" /><text value=\" \" /><text value=\"const\" class=\"keyword\" /><text value=\" BATH = \" /><text value=\"&quot;Fix Mirror&quot;\" class=\"string\" /><text value=\";\" /><text type=\"break\" /><text value=\"}\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(BATH);\" /></content><output><content><text value=\"ReferenceError: BATH is not defined\" /></content></output></code><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\">a ReferenceError</item><item value=\"2\" correct=\"false\">\"Fix Mirror\"</item></selection><p visible-if=\"wrong\">a ReferenceError.</p></body></html>"
          },
          {
            "title": "Example 2",
            "id": 112345,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Create a global scope <code>const</code> variable and a block scope <code>let</code> variable.</p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" STUDY = \" /><text value=\"true\" class=\"literal\" /><text value=\";\" /><text type=\"break\" /><text value=\"if\" class=\"keyword\" /><text value=\" (STUDY) {\" /><text type=\"break\" /><text value=\" \" /><text value=\"let\" class=\"keyword\" /><text value=\" pass = \" /><text value=\"'You have passed the exam!'\" class=\"string\" /><text value=\";\" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(pass);\" /><text type=\"break\" /><text value=\"} \" /><text value=\"else\" class=\"keyword\" /><text value=\" {\" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;You have failed&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\"}\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"0\" endIndex=\"5\" /><option startIndex=\"34\" endIndex=\"37\" /></options></interaction></interactions><output><content><text value=\"You have passed the exam!\" /></content></output></code><p visible-if=\"wrong\">Make sure to pick <code>const</code>, followed by <code>let</code>.</p></body></html>"
          },
          {
            "title": "Example 3",
            "id": 112340,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>What type of error will the console display?</p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"for\" class=\"keyword\" /><text value=\" (\" /><text value=\"let\" class=\"keyword\" /><text value=\" index = \" /><text value=\"1\" class=\"number\" /><text value=\"; index &lt;= \" /><text value=\"3\" class=\"number\" /><text value=\"; index++) {\" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(index);\" /><text type=\"break\" /><text value=\"}\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(index);\" /></content><output><content><text value=\"ReferenceError: index is not defined\" /></content></output></code><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\">ReferenceError</item><item value=\"2\" correct=\"false\">SyntaxError</item></selection><p visible-if=\"wrong\">Make sure to pick ReferenceError.</p></body></html>"
          },
          {
            "title": "Example 4",
            "id": 112346,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>What's the scope of the <code>availableBand</code> variable?</p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"function\" class=\"keyword\" /><text value=\" \" /><text value=\"playMusic\" class=\"title\" /><text value=\"(\" /><text value=\"\" class=\"params\" /><text value=\") \" /><text value=\"{\" /><text type=\"break\" /><text value=\" \" /><text value=\"const\" class=\"keyword\" /><text value=\" band = [\" /><text value=\"&quot;Tina&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;Michael&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;Rue&quot;\" class=\"string\" /><text value=\"];\" /><text type=\"break\" /><text value=\" \" /><text value=\"if\" class=\"keyword\" /><text value=\" (band &amp;&amp; band.length) {\" /><text type=\"break\" /><text value=\"  \" /><text value=\"const\" class=\"keyword\" /><text value=\" availableBand = \" /><text value=\"&quot;Band is Available!&quot;\" class=\"string\" /><text value=\";\" /><text type=\"break\" /><text value=\"  \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(availableBand);\" /><text type=\"break\" /><text value=\" }\" /><text type=\"break\" /><text value=\"}\" /><text type=\"break\" /><text value=\"playMusic();\" /></content><output><content><text value=\"Band is Available!\" /></content></output></code><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\">Block Scope</item><item value=\"3\" correct=\"false\">Global Scope</item></selection><p visible-if=\"wrong\">Block Scope.</p></body></html>"
          }
        ]
      }
    ]
  }
}