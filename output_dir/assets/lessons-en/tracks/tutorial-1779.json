{
  "tutorial": {
    "id": 1779,
    "version": 10,
    "type": "guidedProjectOptional",
    "isNew": false,
    "codeLanguage": "javascript",
    "title": "Stream It Again",
    "descriptionContent": "Use objects and object methods to mimic a streaming platform",
    "shortDescriptionContent": "",
    "showInTrack": true,
    "iconBanner": "tutorial-1779-icon-banner.svg",
    "chapters": [
      {
        "id": 11743,
        "title": "Stream It Again",
        "type": "practiceLevel3",
        "lessons": [
          {
            "title": "Starter code",
            "id": 107846,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Our streaming service is producing its own show. Let's add some methods to start streaming and get those `\"views\"` up.\n\nWe have already added some code to help you get started.\n\nWe have defined an object named `show` with two properties : `name` and `views`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const show = {\r\n  name: \"Pick and Shorty\",\r\n  views: 10\r\n};",
                  "solvedContent": null
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Play it",
            "id": 107579,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Firstly, we will start by creating a method. \n\n1. Give the `show` object a method called `play`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const show = {\r\n  name: \"Pick and Shorty\",\r\n  views: 10\r\n};",
                  "solvedContent": "const show = {\r\n  name: \"Pick and Shorty\",\r\n  views: 10,\r\n  play: function() {}\r\n};"
                }
              ],
              "hints": [
                {
                  "title": "Hint",
                  "content": "Use `play: function ( ) { }` to create a method in `show` object. \nRemember to add a comma after `views`, before the method."
                }
              ]
            }
          },
          {
            "title": "Getting properties with \"this\"",
            "id": 107575,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Let's also get the show's name inside the function.\n\n1. Create a `const showName` within the `play` method and set it equal to the object's `name` property.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const show = {\n name: \"Pick and Shorty\",\n views: 10,\n play : function () {\n\n }\n};",
                  "solvedContent": "const show = {\n name: \"Pick and Shorty\",\n views: 10,\n play : function () {\n  const showName = this.name;\n }\n};"
                }
              ],
              "hints": [
                {
                  "title": "Hint",
                  "content": "Use `this` keyword to refer to the show's name inside an object."
                }
              ]
            }
          },
          {
            "title": "Displaying properties",
            "id": 107580,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Now that we have the show's name in the function, let's display it in the console.\n\n1. Inside the `play` method, print the sentence `\"Now Playing \"` followed by the value of the `showName` variable.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const show = {\n  name: \"Pick and Shorty\",\n  views: 10,\n  play: function() {\n    const showName = this.name;\n  }\n};",
                  "solvedContent": "const show = {\n  name: \"Pick and Shorty\",\n  views: 10,\n  play: function() {\n    const showName = this.name;\n    console.log(\"Now Playing \" + showName);\n  }\n};"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Calling a method",
            "id": 107569,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Now that our method is set, let's call the method and play the show. \n\n1. Call the `show` object's `play` method below the object.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const show = {\n  name: \"Pick and Shorty\",\n  views: 10,\n  play: function() {\n    const showName = this.name;\n    console.log(\"Now Playing \" + showName);\n  }\n};",
                  "solvedContent": "const show = {\n  name: \"Pick and Shorty\",\n  views: 10,\n  play: function() {\n    const showName = this.name;\n    console.log(\"Now Playing \" + showName);\n  }\n};\nshow.play();"
                }
              ],
              "hints": [
                {
                  "title": "Hint",
                  "content": "To call a method, the syntax is : `objectName.methodName()`."
                }
              ]
            }
          },
          {
            "title": "Add views",
            "id": 107581,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "But only playing won't do. We need to add views too!\n\n1. Give the `show` object a second method called `addViews`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const show = {\n  name: \"Pick and Shorty\",\n  views: 10,\n  play: function() {\n    const showName = this.name;\n    console.log(\"Now Playing \" + showName);\n  }\n};\nshow.play();",
                  "solvedContent": "const show = {\n  name: \"Pick and Shorty\",\n  views: 10,\n  play: function() {\n    const showName = this.name;\n    console.log(\"Now Playing \" + showName);\n  },\n  addViews: function() {}\n};\nshow.play();"
                }
              ],
              "hints": [
                {
                  "title": "Hint",
                  "content": "To create a method, the syntax is : `methodName : function ( ) { }`. \nRemember to add a comma `,` before the new method."
                }
              ]
            }
          },
          {
            "title": "Adding a parameter",
            "id": 107577,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Next, we'll add a parameter to the `addViews` method. This parameter will pass in the number of views.\n\n1. Modify the `addViews` method so that it takes a parameter, `numberViews`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const show = {\n  name: \"Pick and Shorty\",\n  views: 10,\n  play: function() {\n    const showName = this.name;\n    console.log(\"Now Playing \" + showName);\n  },\n  addViews: function() {}\n};\nshow.play();",
                  "solvedContent": "const show = {\n  name: \"Pick and Shorty\",\n  views: 10,\n  play: function() {\n    const showName = this.name;\n    console.log(\"Now Playing \" + showName);\n  },\n  addViews: function(numberViews) {}\n};\nshow.play();"
                }
              ],
              "hints": [
                {
                  "title": "Hint",
                  "content": "Specify parameters inside the parentheses after the `function` keyword. "
                }
              ]
            }
          },
          {
            "title": "Updating properties with \"this\"",
            "id": 107567,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "The value passed as `numberViews` should add up to the `views` property. \n\n1. Inside the `addViews` method, use self-assignment to increase the value of the `views` property by the `numberViews`",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const show = {\n  name: \"Pick and Shorty\",\n  views: 10,\n  play: function() {\n    const showName = this.name;\n    console.log(\"Now Playing \" + showName);\n  },\n  addViews: function(numberViews) {}\n};\nshow.play();",
                  "solvedContent": "const show = {\n  name: \"Pick and Shorty\",\n  views: 10,\n  play: function() {\n    const showName = this.name;\n    console.log(\"Now Playing \" + showName);\n  },\n  addViews: function(numberViews) {\n    this.views = this.views + numberViews;\n  }\n};\nshow.play();"
                }
              ],
              "hints": [
                {
                  "title": "Hint",
                  "content": "Access an object's property using `this`, like `this.views`."
                }
              ]
            }
          },
          {
            "title": "Calling a method",
            "id": 107570,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "After we play the show, the number of `views` should increase by `1`. \n\n1. Add a line after `show.play();` to call `addViews` passing in `1` as an argument.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const show = {\n  name: \"Pick and Shorty\",\n  views: 10,\n  play: function() {\n    const showName = this.name;\n    console.log(\"Now Playing \" + showName);\n  },\n  addViews: function(numberViews) {\n    this.views = this.views + numberViews;\n  }\n};\nshow.play();",
                  "solvedContent": "const show = {\n  name: \"Pick and Shorty\",\n  views: 10,\n  play: function() {\n    const showName = this.name;\n    console.log(\"Now Playing \" + showName);\n  },\n  addViews: function(numberViews) {\n    this.views = this.views + numberViews;\n  }\n};\nshow.play();\nshow.addViews(1);"
                }
              ],
              "hints": [
                {
                  "title": "Hint",
                  "content": "To pass a value while calling a method, the syntax is : `objectName.methodName(value1, value2...)`."
                }
              ]
            }
          },
          {
            "title": "Returning a value",
            "id": 107578,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "We'll also return the total number of views. \n\n1. Add a line to return `this.views` at the end of `addViews`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const show = {\n  name: \"Pick and Shorty\",\n  views: 10,\n  play: function() {\n    const showName = this.name;\n    console.log(\"Now Playing \" + showName);\n  },\n  addViews: function(numberViews) {\n    this.views = this.views + numberViews;\n  }\n};\nshow.play();\nshow.addViews(1);",
                  "solvedContent": "const show = {\n  name: \"Pick and Shorty\",\n  views: 10,\n  play: function() {\n    const showName = this.name;\n    console.log(\"Now Playing \" + showName);\n  },\n  addViews: function(numberViews) {\n    this.views = this.views + numberViews;\n    return this.views;\n  }\n};\nshow.play();\nshow.addViews(1);"
                }
              ],
              "hints": [
                {
                  "title": "Hint",
                  "content": "Use the `return` keyword to return values. "
                }
              ]
            }
          },
          {
            "title": "Displaying return value",
            "id": 107572,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Let's check to see if `addViews` works how we expect. \n\n1. Edit the code and put the `show.addViews(1)` inside a `console.log()` statement to display the value returned.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const show = {\n  name: \"Pick and Shorty\",\n  views: 10,\n  play: function() {\n    const showName = this.name;\n    console.log(\"Now Playing \" + showName);\n  },\n  addViews: function(numberViews) {\n    this.views = this.views + numberViews;\n    return this.views;\n  }\n};\nshow.play();\nshow.addViews(1);",
                  "solvedContent": "const show = {\n  name: \"Pick and Shorty\",\n  views: 10,\n  play: function() {\n    const showName = this.name;\n    console.log(\"Now Playing \" + showName);\n  },\n  addViews: function(numberViews) {\n    this.views = this.views + numberViews;\n    return this.views;\n  }\n};\nshow.play();\nconsole.log(show.addViews(1));"
                }
              ],
              "hints": []
            }
          }
        ]
      }
    ]
  }
}