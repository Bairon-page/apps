{
  "tutorial": {
    "id": 1396,
    "version": 7,
    "type": "course",
    "isNew": false,
    "codeLanguage": "python",
    "title": "Raising Exceptions",
    "descriptionContent": "Errors and Exceptions 2",
    "shortDescriptionContent": "",
    "showInTrack": true,
    "iconBanner": null,
    "chapters": [
      {
        "id": 10151,
        "title": "Raising Exceptions",
        "type": "practiceLevel1",
        "lessons": [
          {
            "title": "Raise an exception",
            "id": 91897,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Sometimes we want to <strong>raise</strong> an exception when a condition we have defined is not met.</p><code version=\"2\" codelang=\"python\" name=\"script.py\" visible-if=\"always\"><content><text value=\"slices = \" /><text value=\"18\" class=\"number\" /><text type=\"break\" /><text value=\"diners = \" /><text value=\"0\" class=\"number\" /><text type=\"break\" /><text value=\"if\" class=\"keyword\" /><text value=\" diners &lt; \" /><text value=\"1\" class=\"number\" /><text value=\":\" /><text type=\"break\" /><text value=\"  \" /><text value=\"raise\" class=\"keyword\" /><text value=\" Exception(\" /><text value=\"&quot;There must be at least one diner&quot;\" class=\"string\" /><text value=\")\" /><text type=\"break\" /><text value=\"else\" class=\"keyword\" /><text value=\":\" /><text type=\"break\" /><text value=\"  slices_each = slices / diners\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"40\" endIndex=\"45\" /></options></interaction></interactions><output><content><text value=\"Traceback (most recent call last):\" /><text type=\"break\" /><text value=\"File &quot;script.py&quot;, line 5, in &lt;module&gt;\" /><text type=\"break\" /><text value=\"    raise Exception(&quot;There must be at least one diner&quot;)\" /><text type=\"break\" /><text value=\"Exception: There must be at least one diner\" /></content></output></code><p visible-if=\"wrong\">Make sure to pick <code>raise</code>.</p></body></html>"
          },
          {
            "title": "Error messages",
            "id": 91898,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>The <code>raise</code> keyword is used to raise an exception. We can define both the kind of error, and the error message, like here with <code>ValueError</code>.</p><code version=\"2\" codelang=\"python\" name=\"script.py\" visible-if=\"always\"><content><text value=\"age = \" /><text value=\"-3\" class=\"number\" /><text type=\"break\" /><text value=\"if\" class=\"keyword\" /><text value=\" \" /><text value=\"not\" class=\"keyword\" /><text value=\" age &gt;= \" /><text value=\"0\" class=\"number\" /><text value=\":\" /><text type=\"break\" /><text value=\"  \" /><text value=\"raise\" class=\"keyword\" /><text value=\" ValueError(\" /><text value=\"&quot;age cannot be negative&quot;\" class=\"string\" /><text value=\")\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"28\" endIndex=\"33\" /><option startIndex=\"34\" endIndex=\"44\" /></options></interaction></interactions><output><content><text value=\"Traceback (most recent call last):\" /><text type=\"break\" /><text value=\"File &quot;script.py&quot;, line 3, in &lt;module&gt;\" /><text type=\"break\" /><text value=\"    raise ValueError(&quot;age cannot be negative&quot;)\" /><text type=\"break\" /><text value=\"ValueError: age cannot be negative\" /></content></output></code><p visible-if=\"wrong\">Make sure to pick <code>raise</code>, followed by <code>ValueError</code>.</p></body></html>"
          },
          {
            "title": "Identifying code issues",
            "id": 91899,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>We can use exceptions to highlight when something cannot be working as it should be.</p><code version=\"2\" codelang=\"python\" name=\"script.py\" visible-if=\"always\"><content><text value=\"predicted_sales = \" /><text value=\"-5\" class=\"number\" /><text type=\"break\" /><text value=\"if\" class=\"keyword\" /><text value=\" predicted_sales &lt; \" /><text value=\"0\" class=\"number\" /><text value=\":\" /><text type=\"break\" /><text value=\"  \" /><text value=\"raise\" class=\"keyword\" /><text value=\" ValueError(\" /><text value=\"&quot;predicted_sales cannot be negative&quot;\" class=\"string\" /><text value=\")\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"21\" endIndex=\"23\" /><option startIndex=\"47\" endIndex=\"52\" /></options></interaction></interactions><output><content><text value=\"Traceback (most recent call last):\" /><text type=\"break\" /><text value=\"File &quot;script.py&quot;, line 3, in &lt;module&gt;\" /><text type=\"break\" /><text value=\"    raise ValueError(&quot;predicted_sales cannot be negative&quot;)\" /><text type=\"break\" /><text value=\"ValueError: predicted_sales cannot be negative\" /></content></output></code><p visible-if=\"wrong\">Make sure to pick <code>if</code>, followed by <code>raise</code>.</p></body></html>"
          },
          {
            "title": "Data validation",
            "id": 91900,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>We can use conditions to <strong>validate</strong> inputs, and raise an exception when the conditions are not met.</p><code version=\"2\" codelang=\"python\" name=\"script.py\" visible-if=\"always\"><content><text value=\"scores = [\" /><text value=\"125\" class=\"number\" /><text value=\", \" /><text value=\"60\" class=\"number\" /><text value=\", \" /><text value=\"189\" class=\"number\" /><text value=\", \" /><text value=\"88\" class=\"number\" /><text value=\", \" /><text value=\"16\" class=\"number\" /><text value=\"]\" /><text type=\"break\" /><text value=\"if\" class=\"keyword\" /><text value=\" min(scores) &lt; \" /><text value=\"0\" class=\"number\" /><text value=\" \" /><text value=\"or\" class=\"keyword\" /><text value=\" max(scores) &gt; \" /><text value=\"180\" class=\"number\" /><text value=\":\" /><text type=\"break\" /><text value=\"  \" /><text value=\"raise\" class=\"keyword\" /><text value=\" ValueError(\" /><text value=\"&quot;Error in scores&quot;\" class=\"string\" /><text value=\")\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"75\" endIndex=\"80\" /><option startIndex=\"81\" endIndex=\"91\" /></options></interaction></interactions><output><content><text value=\"Traceback (most recent call last):\" /><text type=\"break\" /><text value=\"File &quot;script.py&quot;, line 3, in &lt;module&gt;\" /><text type=\"break\" /><text value=\"    raise ValueError(&quot;Error in scores&quot;)\" /><text type=\"break\" /><text value=\"ValueError: Error in scores\" /></content></output></code><p visible-if=\"wrong\">Make sure to pick <code>raise</code>, followed by <code>ValueError</code>.</p></body></html>"
          },
          {
            "title": "Question: Raise an exception",
            "id": 91901,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Which keyword do we use to produce an exception in the output?</p><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\"><code>raise</code></item><item value=\"2\" correct=\"false\"><code>show</code></item></selection><p visible-if=\"wrong\">Make sure to pick <code>raise</code>.</p></body></html>"
          },
          {
            "title": "Question: Error messages",
            "id": 91902,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>How do we provide an error message to be shown when a user-defined exception is raised?</p><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\">A string in parenthesis after the type of error</item><item value=\"2\" correct=\"false\">We cannot define our own error message</item></selection><p visible-if=\"wrong\">A string in parenthesis after the type of error.</p></body></html>"
          },
          {
            "title": "Question: Identifying code issues",
            "id": 91903,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Which type of error will be raised by the following code?</p><code version=\"2\" codelang=\"python\" name=\"script.py\" visible-if=\"always\"><content><text value=\"age = \" /><text value=\"1000\" class=\"number\" /><text value=\" \" /><text type=\"break\" /><text value=\"try\" class=\"keyword\" /><text value=\": \" /><text type=\"break\" /><text value=\" adult_years = age - \" /><text value=\"18\" class=\"number\" /><text value=\" \" /><text type=\"break\" /><text value=\"except\" class=\"keyword\" /><text value=\": \" /><text type=\"break\" /><text value=\" \" /><text value=\"raise\" class=\"keyword\" /><text value=\" TypeError(\" /><text value=\"&quot;Input is not a number&quot;\" class=\"string\" /><text value=\") \" /><text type=\"break\" /><text value=\"else\" class=\"keyword\" /><text value=\": \" /><text type=\"break\" /><text value=\" \" /><text value=\"if\" class=\"keyword\" /><text value=\" adult_years &gt; \" /><text value=\"150\" class=\"number\" /><text value=\": \" /><text type=\"break\" /><text value=\"  \" /><text value=\"raise\" class=\"keyword\" /><text value=\" ValueError(\" /><text value=\"&quot;Age is too large&quot;\" class=\"string\" /><text value=\")\" /></content><output><content><text value=\"Traceback (most recent call last):\" /><text type=\"break\" /><text value=\"File &quot;script.py&quot;, line 8, in &lt;module&gt;\" /><text type=\"break\" /><text value=\"    raise ValueError(&quot;Age is too large&quot;)\" /><text type=\"break\" /><text value=\"ValueError: Age is too large\" /></content></output></code><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\">ValueError</item><item value=\"2\" correct=\"false\">TypeError</item></selection><p visible-if=\"wrong\">Make sure to pick ValueError.</p></body></html>"
          },
          {
            "title": "Question: Data validation",
            "id": 91904,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Which type of error will the following code produce?</p><code version=\"2\" codelang=\"python\" name=\"script.py\" visible-if=\"always\"><content><text value=\"temperatures = [\" /><text value=\"33\" class=\"number\" /><text value=\", \" /><text value=\"16\" class=\"number\" /><text value=\", \" /><text value=\"23\" class=\"number\" /><text value=\", \" /><text value=\"18\" class=\"number\" /><text value=\"] \" /><text type=\"break\" /><text value=\"if\" class=\"keyword\" /><text value=\" temperatures[\" /><text value=\"6\" class=\"number\" /><text value=\"] &gt; \" /><text value=\"45\" class=\"number\" /><text value=\": \" /><text type=\"break\" /><text value=\"  \" /><text value=\"raise\" class=\"keyword\" /><text value=\" ValueError\" /></content><output><content><text value=\"Traceback (most recent call last):\" /><text type=\"break\" /><text value=\"File &quot;script.py&quot;, line 2, in &lt;module&gt;\" /><text type=\"break\" /><text value=\"    if temperatures[6] &gt; 45:\" /><text type=\"break\" /><text value=\"IndexError: list index out of range\" /></content></output></code><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\">IndexError</item><item value=\"2\" correct=\"false\">ValueError</item></selection><p visible-if=\"wrong\">Make sure to pick IndexError.</p></body></html>"
          },
          {
            "title": "Example: Raise an exception",
            "id": 91905,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Write code which will raise a suitable exception if <code>days</code> is zero.</p><code version=\"2\" codelang=\"python\" name=\"script.py\" visible-if=\"always\"><content><text value=\"days = \" /><text value=\"0\" class=\"number\" /><text type=\"break\" /><text value=\"jobs = \" /><text value=\"6\" class=\"number\" /><text type=\"break\" /><text value=\"if\" class=\"keyword\" /><text value=\" days == \" /><text value=\"0\" class=\"number\" /><text value=\":\" /><text type=\"break\" /><text value=\" \" /><text value=\"raise\" class=\"keyword\" /><text value=\" ValueError(\" /><text value=\"&quot;Cannot calculate average&quot;\" class=\"string\" /><text value=\")\" /><text type=\"break\" /><text value=\"else\" class=\"keyword\" /><text value=\":\" /><text type=\"break\" /><text value=\" average = jobs / days\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"21\" endIndex=\"25\" /><option startIndex=\"33\" endIndex=\"38\" /><option startIndex=\"39\" endIndex=\"49\" /><option correct=\"false\"><content><text value=\"stop\" /></content></option></options></interaction></interactions><output><content><text value=\"Traceback (most recent call last):\" /><text type=\"break\" /><text value=\"File &quot;script.py&quot;, line 4, in &lt;module&gt;\" /><text type=\"break\" /><text value=\"    raise ValueError(&quot;Cannot calculate average&quot;)\" /><text type=\"break\" /><text value=\"ValueError: Cannot calculate average\" /></content></output></code><p visible-if=\"wrong\">Make sure to pick <code>days</code>, followed by <code>raise</code>, and finally <code>ValueError</code>.</p></body></html>"
          },
          {
            "title": "Example: Error messages",
            "id": 91906,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Complete the code so that the error message is shown.</p><code version=\"2\" codelang=\"python\" name=\"script.py\" visible-if=\"always\"><content><text value=\"desks = \" /><text value=\"6\" class=\"number\" /><text type=\"break\" /><text value=\"users = \" /><text value=\"7\" class=\"number\" /><text type=\"break\" /><text value=\"if\" class=\"keyword\" /><text value=\" users &gt; desks:\" /><text type=\"break\" /><text value=\" \" /><text value=\"raise\" class=\"keyword\" /><text value=\" ValueError(\" /><text value=\"&quot;Input data is not valid&quot;\" class=\"string\" /><text value=\")\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"23\" endIndex=\"28\" /><option startIndex=\"31\" endIndex=\"36\" /><option startIndex=\"39\" endIndex=\"44\" /><option correct=\"false\"><content><text value=\"except\" /></content></option></options></interaction></interactions><output><content><text value=\"Traceback (most recent call last):\" /><text type=\"break\" /><text value=\"File &quot;script.py&quot;, line 5, in &lt;module&gt;\" /><text type=\"break\" /><text value=\"    raise ValueError(&quot;Input data is not valid&quot;)\" /><text type=\"break\" /><text value=\"ValueError: Input data is not valid\" /></content></output></code><p visible-if=\"wrong\">Make sure to pick <code>users</code>, followed by <code>desks</code>, and finally <code>raise</code>.</p></body></html>"
          },
          {
            "title": "Example: Identifying code issues",
            "id": 91907,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Write code that will raise a <code>KeyError</code>.</p><code version=\"2\" codelang=\"python\" name=\"script.py\" visible-if=\"always\"><content><text value=\"details = {\" /><text value=\"&quot;name&quot;\" class=\"string\" /><text value=\": \" /><text value=\"&quot;Paul&quot;\" class=\"string\" /><text value=\",\" /><text value=\"&quot;score&quot;\" class=\"string\" /><text value=\": \" /><text value=\"55\" class=\"number\" /><text value=\"}\" /><text type=\"break\" /><text value=\"try\" class=\"keyword\" /><text value=\":\" /><text type=\"break\" /><text value=\" details[\" /><text value=\"&quot;email&quot;\" class=\"string\" /><text value=\"]\" /><text type=\"break\" /><text value=\"except\" class=\"keyword\" /><text value=\":\" /><text type=\"break\" /><text value=\" \" /><text value=\"raise\" class=\"keyword\" /><text value=\" KeyError(\" /><text value=\"&quot;Email not found in details&quot;\" class=\"string\" /><text value=\")\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"45\" endIndex=\"52\" /><option startIndex=\"53\" endIndex=\"60\" /><option correct=\"false\"><content><text value=\"raise\" /></content></option></options></interaction></interactions><output><content><text value=\"Traceback (most recent call last):\" /><text type=\"break\" /><text value=\"File &quot;script.py&quot;, line 5, in &lt;module&gt;\" /><text type=\"break\" /><text value=\"    raise KeyError(&quot;Email not found in details&quot;)\" /><text type=\"break\" /><text value=\"KeyError: &quot;Email not found in details&quot;\" /></content></output></code><p visible-if=\"wrong\">Make sure to pick <code>details</code>, followed by <code>\"email\"</code>.</p></body></html>"
          },
          {
            "title": "Example: Data validation",
            "id": 91908,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Write code which will raise a <code>LookupError</code> if <code>member</code> is not found in the <code>access</code> list.</p><code version=\"2\" codelang=\"python\" name=\"script.py\" visible-if=\"always\"><content><text value=\"access = [\" /><text value=\"&quot;John&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;Chloe&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;Sandra&quot;\" class=\"string\" /><text value=\"]\" /><text type=\"break\" /><text value=\"member = \" /><text value=\"&quot;Jennifer&quot;\" class=\"string\" /><text type=\"break\" /><text value=\"if\" class=\"keyword\" /><text value=\" member \" /><text value=\"not\" class=\"keyword\" /><text value=\" \" /><text value=\"in\" class=\"keyword\" /><text value=\" access:\" /><text type=\"break\" /><text value=\" \" /><text value=\"raise\" class=\"keyword\" /><text value=\" LookupError(\" /><text value=\"&quot;Member not recognized&quot;\" class=\"string\" /><text value=\")\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"60\" endIndex=\"66\" /><option startIndex=\"67\" endIndex=\"70\" /><option startIndex=\"74\" endIndex=\"80\" /><option startIndex=\"89\" endIndex=\"100\" /><option correct=\"false\"><content><text value=\"except\" /></content></option></options></interaction></interactions><output><content><text value=\"Traceback (most recent call last):\" /><text type=\"break\" /><text value=\"File &quot;script.py&quot;, line 4, in &lt;module&gt;\" /><text type=\"break\" /><text value=\"    raise LookupError(&quot;Member not recognised&quot;)\" /><text type=\"break\" /><text value=\"LookupError: Member not recognized\" /></content></output></code><p visible-if=\"wrong\">Make sure to pick <code>member</code> followed by <code>not</code> and then <code>access</code>, <code>LookupError</code>.</p></body></html>"
          }
        ]
      },
      {
        "id": 10177,
        "title": "Handling Exceptions",
        "type": "practiceLevel1",
        "lessons": [
          {
            "title": "Exception handling",
            "id": 92472,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>We often don't want a program to terminate when an exception is encountered. A <code>try</code> and <code>except</code> block can be used for <strong>exception handling</strong>.</p><code version=\"2\" codelang=\"python\" name=\"script.py\" visible-if=\"always\"><content><text value=\"try\" class=\"keyword\" /><text value=\":\" /><text type=\"break\" /><text value=\"  login(user)\" /><text type=\"break\" /><text type=\"break\" /><text value=\"except\" class=\"keyword\" /><text value=\":\" /><text type=\"break\" /><text value=\"  print(\" /><text value=\"&quot;User not known, please try again&quot;\" class=\"string\" /><text value=\")\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"0\" endIndex=\"3\" /><option startIndex=\"20\" endIndex=\"26\" /></options></interaction></interactions><output><content><text value=\"User not known, please try again\" /></content></output></code><p visible-if=\"wrong\">Make sure to pick <code>try</code>, followed by <code>except</code>.</p></body></html>"
          },
          {
            "title": "Uncertain operations",
            "id": 92475,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p><code>try</code> and <code>except</code> blocks tend to be used where we know there is a chance of the operation not being possible.</p><code version=\"2\" codelang=\"python\" name=\"script.py\" visible-if=\"always\"><content><text value=\"hours = []\" /><text type=\"break\" /><text type=\"break\" /><text value=\"try\" class=\"keyword\" /><text value=\":\" /><text type=\"break\" /><text value=\"  average = sum(hours) / len(hours)\" /><text type=\"break\" /><text value=\"except\" class=\"keyword\" /><text value=\":\" /><text type=\"break\" /><text value=\"  average = \" /><text value=\"0\" class=\"number\" /><text type=\"break\" /><text type=\"break\" /><text value=\"print(average)\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"12\" endIndex=\"15\" /><option startIndex=\"53\" endIndex=\"59\" /></options></interaction></interactions><output><content><text value=\"0\" /></content></output></code><p visible-if=\"wrong\">Make sure to pick <code>try</code>, followed by <code>except</code>.</p></body></html>"
          },
          {
            "title": "The `pass` keyword",
            "id": 92476,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p><code>try:</code> and <code>except:</code> are followed by an indented block of code. We can use <code>pass</code> if we want nothing to be executed after <code>except:</code>.<br /></p><code version=\"2\" codelang=\"python\" name=\"script.py\" visible-if=\"always\"><content><text value=\"try\" class=\"keyword\" /><text value=\": \" /><text type=\"break\" /><text value=\"  print(\" /><text value=\"&quot;Hello, &quot;\" class=\"string\" /><text value=\" + user)\" /><text type=\"break\" /><text value=\"except\" class=\"keyword\" /><text value=\":\" /><text type=\"break\" /><text value=\"  \" /><text value=\"pass\" class=\"keyword\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"3\" endIndex=\"4\" /><option startIndex=\"38\" endIndex=\"39\" /><option startIndex=\"42\" endIndex=\"46\" /></options></interaction></interactions></code><p visible-if=\"wrong\">Make sure to pick <code>:</code>, followed by <code>:</code>, and finally <code>pass</code>.</p></body></html>"
          },
          {
            "title": "The `raise` keyword",
            "id": 92477,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>The <code>raise</code> keyword is used along with a valid type of error and an optional message. It is usually used within an <code>except</code> code block.</p><code version=\"2\" codelang=\"python\" name=\"script.py\" visible-if=\"always\"><content><text value=\"try\" class=\"keyword\" /><text value=\":\" /><text type=\"break\" /><text value=\"  \" /><text value=\"10\" class=\"number\" /><text value=\" + score\" /><text type=\"break\" /><text value=\"except\" class=\"keyword\" /><text value=\":\" /><text type=\"break\" /><text value=\"  \" /><text value=\"raise\" class=\"keyword\" /><text value=\" ValueError(\" /><text value=\"&quot;Invalid score&quot;\" class=\"string\" /><text value=\")\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"45\" endIndex=\"46\" /><option startIndex=\"46\" endIndex=\"59\" /><option startIndex=\"59\" endIndex=\"60\" /></options></interaction></interactions><output><content><text value=\"Traceback (most recent call last):\" /><text type=\"break\" /><text value=\"File &quot;script.py&quot;, line 4, in &lt;module&gt;\" /><text type=\"break\" /><text value=\"    raise ValueError(&quot;Invalid score&quot;)\" /><text type=\"break\" /><text value=\"ValueError: Invalid score\" /></content></output></code><p visible-if=\"wrong\">Make sure to pick <code>\"</code>, followed by <code>Invalid score</code>, and finally <code>\"</code>.</p></body></html>"
          },
          {
            "title": "`else` statements",
            "id": 92478,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p><br />We can use an <code>else</code> statement at the end if we want to execute some code only when no error has been raised.</p><code version=\"2\" codelang=\"python\" name=\"script.py\" visible-if=\"always\"><content><text value=\"details = {\" /><text value=\"&quot;name&quot;\" class=\"string\" /><text value=\": \" /><text value=\"&quot;Helena&quot;\" class=\"string\" /><text value=\",\" /><text type=\"break\" /><text value=\"           \" /><text value=\"&quot;occupation&quot;\" class=\"string\" /><text value=\": \" /><text value=\"&quot;carpenter&quot;\" class=\"string\" /><text value=\",\" /><text type=\"break\" /><text value=\"           \" /><text value=\"&quot;age&quot;\" class=\"string\" /><text value=\": \" /><text value=\"35\" class=\"number\" /><text value=\"}\" /><text type=\"break\" /><text type=\"break\" /><text value=\"try\" class=\"keyword\" /><text value=\": \" /><text type=\"break\" /><text value=\"  age = details[\" /><text value=\"&quot;age&quot;\" class=\"string\" /><text value=\"]\" /><text type=\"break\" /><text value=\"except\" class=\"keyword\" /><text value=\":\" /><text type=\"break\" /><text value=\" \" /><text value=\"raise\" class=\"keyword\" /><text value=\" NameError(\" /><text value=\"&quot;No age value in record&quot;\" class=\"string\" /><text value=\")\" /><text type=\"break\" /><text value=\"else\" class=\"keyword\" /><text value=\":\" /><text type=\"break\" /><text value=\" print(\" /><text value=\"f&quot;Maximum heart rate is \" /><text value=\"{\" /><text value=\"220\" class=\"number\" /><text value=\" - age}\" /><text value=\"&quot;\" /><text value=\")\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"170\" endIndex=\"174\" /><option correct=\"false\"><content><text value=\"print\" /></content></option><option correct=\"false\"><content><text value=\"if\" /></content></option></options></interaction></interactions><output><content><text value=\"Maximum heart rate is 185\" /></content></output></code><p visible-if=\"wrong\">Make sure to pick <code>else</code>.</p></body></html>"
          },
          {
            "title": "`finally` statements",
            "id": 92479,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>We can use a <code>finally</code> statement at the end if we want to execute some related code regardless of whether an error was raised.</p><code version=\"2\" codelang=\"python\" name=\"script.py\" visible-if=\"always\"><content><text value=\"entry = \" /><text value=\"50\" class=\"number\" /><text type=\"break\" /><text type=\"break\" /><text value=\"try\" class=\"keyword\" /><text value=\":\" /><text type=\"break\" /><text value=\" result = entry * \" /><text value=\"1.5\" class=\"number\" /><text type=\"break\" /><text value=\"except\" class=\"keyword\" /><text value=\":\" /><text type=\"break\" /><text value=\" \" /><text value=\"raise\" class=\"keyword\" /><text value=\" ValueError(\" /><text value=\"&quot;result cannot be calculated&quot;\" class=\"string\" /><text value=\")\" /><text type=\"break\" /><text value=\"else\" class=\"keyword\" /><text value=\":\" /><text type=\"break\" /><text value=\"  print(result)\" /><text type=\"break\" /><text value=\"finally\" class=\"keyword\" /><text value=\":\" /><text type=\"break\" /><text value=\"  print(\" /><text value=\"&quot;Try another value?&quot;\" class=\"string\" /><text value=\")\" /></content><output><content><text value=\"75.0\" /><text type=\"break\" /><text value=\"Try another value?\" /></content></output></code></body></html>"
          },
          {
            "title": "Question: Exception handling",
            "id": 92480,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Why might we want to use a <code>try</code> and <code>except</code> block?</p><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\">To allow our program to handle errors effectively and continue running</item><item value=\"2\" correct=\"false\">To write conditional statements</item></selection><p visible-if=\"wrong\">To allow our program to handle errors effectively and continue running.</p></body></html>"
          },
          {
            "title": "Question: Uncertain operations",
            "id": 92481,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Which of the following situations might we use a <code>try</code> and <code>except</code> block for?</p><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\">When we are not sure whether the user input will be valid</item><item value=\"2\" correct=\"false\">When we are not sure of whether Python allows a particular operation</item></selection><p visible-if=\"wrong\">When we are not sure whether the user input will be valid.</p></body></html>"
          },
          {
            "title": "Question: The `pass` keyword",
            "id": 92482,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>What happens when the <code>pass</code> keyword is executed?</p><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\">Nothing - Python moves on to the next code block</item><item value=\"2\" correct=\"false\">Python prints the last stored variable</item></selection><p visible-if=\"wrong\">Nothing - Python moves on to the next code block.</p></body></html>"
          },
          {
            "title": "Question: The `raise` keyword",
            "id": 92483,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>When is the <code>raise</code> keyword used?</p><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\">When we want to highlight that an error has occurred</item><item value=\"2\" correct=\"false\">When we want to increase the value of a variable</item></selection><p visible-if=\"wrong\">When we want to highlight that an error has occurred.</p></body></html>"
          },
          {
            "title": "Question: `else` statements",
            "id": 92484,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>What will the output of the following code be?</p><code version=\"2\" codelang=\"python\" name=\"script.py\" visible-if=\"always\"><content><text value=\"try\" class=\"keyword\" /><text value=\":\" /><text type=\"break\" /><text value=\" value = \" /><text value=\"5\" class=\"number\" /><text value=\" + \" /><text value=\"5\" class=\"number\" /><text type=\"break\" /><text value=\"except\" class=\"keyword\" /><text value=\":\" /><text type=\"break\" /><text value=\" \" /><text value=\"raise\" class=\"keyword\" /><text value=\" ValueError\" /><text type=\"break\" /><text value=\"else\" class=\"keyword\" /><text value=\":\" /><text type=\"break\" /><text value=\" print(value)\" /></content><output><content><text value=\"10\" /></content></output></code><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\"><code>10</code></item><item value=\"2\" correct=\"false\"><code>ValueError</code></item></selection><p visible-if=\"wrong\">Make sure to pick <code>10</code>.</p></body></html>"
          },
          {
            "title": "Question: `finally` statements",
            "id": 92486,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>When should the <code>finally</code> statement be used?</p><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\">At the end of a <code>try</code> and <code>except</code> block, to execute code whether or not an exception occurred</item><item value=\"2\" correct=\"false\">To highlight the last line of a program to be executed</item></selection><p visible-if=\"wrong\">At the end of a <code>try</code> and <code>except</code> block, to execute code whether or not an exception occurred.</p></body></html>"
          },
          {
            "title": "Example: Exception handling",
            "id": 92487,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Write code which will raise a <code>ValueError</code>.</p><code version=\"2\" codelang=\"python\" name=\"script.py\" visible-if=\"always\"><content><text value=\"count = \" /><text value=\"'7'\" class=\"string\" /><text type=\"break\" /><text value=\"try\" class=\"keyword\" /><text value=\":\" /><text type=\"break\" /><text value=\" \" /><text value=\"10\" class=\"number\" /><text value=\" / count\" /><text type=\"break\" /><text type=\"break\" /><text value=\"except\" class=\"keyword\" /><text value=\":\" /><text type=\"break\" /><text value=\" \" /><text value=\"raise\" class=\"keyword\" /><text value=\" ValueError(\" /><text value=\"&quot;Count is not valid&quot;\" class=\"string\" /><text value=\")\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"23\" endIndex=\"28\" /><option startIndex=\"39\" endIndex=\"44\" /><option startIndex=\"45\" endIndex=\"55\" /><option correct=\"false\"><content><text value=\"print\" /></content></option></options></interaction></interactions><output><content><text value=\"Traceback (most recent call last):\" /><text type=\"break\" /><text value=\"File &quot;script.py&quot;, line 6, in &lt;module&gt;\" /><text type=\"break\" /><text value=\"    raise ValueError(&quot;Count is not valid&quot;)\" /><text type=\"break\" /><text value=\"ValueError: Count is not valid\" /></content></output></code><p visible-if=\"wrong\">Make sure to pick <code>count</code>, followed by <code>raise</code>, and finally <code>ValueError</code>.</p></body></html>"
          },
          {
            "title": "Example: Uncertain operations",
            "id": 92488,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Write code which will produce a <code>ValueError</code> if <code>users</code> is empty.</p><code version=\"2\" codelang=\"python\" name=\"script.py\" visible-if=\"always\"><content><text value=\"users = []\" /><text type=\"break\" /><text type=\"break\" /><text value=\"try\" class=\"keyword\" /><text value=\":\" /><text type=\"break\" /><text value=\" allocation = \" /><text value=\"100\" class=\"number\" /><text value=\" / len(users)\" /><text type=\"break\" /><text type=\"break\" /><text value=\"except\" class=\"keyword\" /><text value=\":\" /><text type=\"break\" /><text value=\" \" /><text value=\"raise\" class=\"keyword\" /><text value=\" ValueError(\" /><text value=\"&quot;No users found&quot;\" class=\"string\" /><text value=\")\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"41\" endIndex=\"46\" /><option startIndex=\"49\" endIndex=\"55\" /><option startIndex=\"58\" endIndex=\"63\" /><option correct=\"false\"><content><text value=\"count\" /></content></option></options></interaction></interactions><output><content><text value=\"Traceback (most recent call last):\" /><text type=\"break\" /><text value=\"File &quot;script.py&quot;, line 7, in &lt;module&gt;\" /><text type=\"break\" /><text value=\"    raise ValueError(&quot;No users found&quot;)\" /><text type=\"break\" /><text value=\"ValueError: No users found\" /></content></output></code><p visible-if=\"wrong\">Make sure to pick <code>users</code>, followed by <code>except</code>, and finally <code>raise</code>.</p></body></html>"
          },
          {
            "title": "Example: The `pass` keyword",
            "id": 92489,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Write code which will do nothing if an exception is encountered, and execute the rest of the code.</p><code version=\"2\" codelang=\"python\" name=\"script.py\" visible-if=\"always\"><content><text value=\"try\" class=\"keyword\" /><text value=\":\" /><text type=\"break\" /><text value=\" print(message)\" /><text type=\"break\" /><text value=\"except\" class=\"keyword\" /><text value=\":\" /><text type=\"break\" /><text value=\" \" /><text value=\"pass\" class=\"keyword\" /><text type=\"break\" /><text type=\"break\" /><text value=\"print(\" /><text value=\"&quot;Thank you&quot;\" class=\"string\" /><text value=\")\" /><text type=\"break\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"30\" endIndex=\"34\" /><option startIndex=\"36\" endIndex=\"41\" /><option correct=\"false\"><content><text value=\"else\" /></content></option></options></interaction></interactions><output><content><text value=\"Thank you\" /></content></output></code><p visible-if=\"wrong\">Make sure to pick <code>pass</code>, followed by <code>print</code>.</p></body></html>"
          },
          {
            "title": "Example: The `raise` keyword",
            "id": 92491,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Complete the following code so that the error message will be shown.</p><code version=\"2\" codelang=\"python\" name=\"script.py\" visible-if=\"always\"><content><text value=\"weight = \" /><text value=\"-5\" class=\"number\" /><text type=\"break\" /><text type=\"break\" /><text value=\"if\" class=\"keyword\" /><text value=\" weight &lt; \" /><text value=\"0\" class=\"number\" /><text value=\":\" /><text type=\"break\" /><text value=\" \" /><text value=\"raise\" class=\"keyword\" /><text value=\" ValueError(\" /><text value=\"&quot;Weight cannot be negative&quot;\" class=\"string\" /><text value=\")\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"16\" endIndex=\"22\" /><option startIndex=\"29\" endIndex=\"34\" /><option startIndex=\"35\" endIndex=\"45\" /><option correct=\"false\"><content><text value=\"len\" /></content></option></options></interaction></interactions><output><content><text value=\"Traceback (most recent call last):\" /><text type=\"break\" /><text value=\"File &quot;script.py&quot;, line 4, in &lt;module&gt;\" /><text type=\"break\" /><text value=\"    raise ValueError(&quot;Weight cannot be negative&quot;)\" /><text type=\"break\" /><text value=\"ValueError: Weight cannot be negative\" /></content></output></code><p visible-if=\"wrong\">Make sure to pick <code>weight</code>, followed by <code>raise</code>, and finally <code>ValueError</code>.</p></body></html>"
          },
          {
            "title": "Example: `else` statements",
            "id": 92492,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Complete the code so that the <code>else</code> statement is executed.</p><code version=\"2\" codelang=\"python\" name=\"script.py\" visible-if=\"always\"><content><text value=\"cost = \" /><text value=\"50\" class=\"number\" /><text type=\"break\" /><text value=\"try\" class=\"keyword\" /><text value=\":\" /><text type=\"break\" /><text value=\" dollars = cost * \" /><text value=\"1.5\" class=\"number\" /><text type=\"break\" /><text value=\"except\" class=\"keyword\" /><text value=\":\" /><text type=\"break\" /><text value=\" \" /><text value=\"raise\" class=\"keyword\" /><text value=\" Exception(\" /><text value=\"&quot;Calculation not possible&quot;\" class=\"string\" /><text value=\")\" /><text type=\"break\" /><text value=\"else\" class=\"keyword\" /><text value=\":\" /><text type=\"break\" /><text value=\" euros = cost * \" /><text value=\"1.1\" class=\"number\" /><text type=\"break\" /><text value=\" print(euros)\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"7\" endIndex=\"9\" /><option correct=\"false\"><content><text value=\"'high'\" /></content></option></options></interaction></interactions><output><content><text value=\"55.00000000000001\" /></content></output></code><p visible-if=\"wrong\">Make sure to pick <code>50</code>.</p></body></html>"
          },
          {
            "title": "Example: `finally` statements",
            "id": 92493,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Complete the code so that <code>result</code> is printed at the end, regardless of the values for <code>score_a</code> and <code>score_b</code>.</p><code version=\"2\" codelang=\"python\" name=\"script.py\" visible-if=\"always\"><content><text value=\"score_a = \" /><text value=\"5\" class=\"number\" /><text type=\"break\" /><text value=\"score_b = \" /><text value=\"3\" class=\"number\" /><text type=\"break\" /><text type=\"break\" /><text value=\"try\" class=\"keyword\" /><text value=\":\" /><text type=\"break\" /><text value=\" multiplier = score_a / score_b\" /><text type=\"break\" /><text type=\"break\" /><text value=\"except\" class=\"keyword\" /><text value=\": \" /><text type=\"break\" /><text value=\" multiplier = \" /><text value=\"&quot;Cannot be calculated&quot;\" class=\"string\" /><text type=\"break\" /><text type=\"break\" /><text value=\"finally\" class=\"keyword\" /><text value=\":\" /><text type=\"break\" /><text value=\" print(multiplier)\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"110\" endIndex=\"118\" /><option startIndex=\"120\" endIndex=\"125\" /><option startIndex=\"126\" endIndex=\"136\" /><option correct=\"false\"><content><text value=\"ratio\" /></content></option></options></interaction></interactions><output><content><text value=\"1.6666666666666667\" /></content></output></code><p visible-if=\"wrong\">Make sure to pick <code>finally:</code>, followed by <code>print</code>, and finally <code>multiplier</code>.</p></body></html>"
          }
        ]
      }
    ]
  }
}