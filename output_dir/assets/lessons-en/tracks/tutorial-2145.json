{
  "tutorial": {
    "id": 2145,
    "version": 4,
    "type": "course",
    "isNew": false,
    "codeLanguage": "javascript",
    "title": "Synchrony and Asynchrony in JS",
    "descriptionContent": "Introduction to asynchronous JavaScript. Explore async and sync Callbacks.",
    "shortDescriptionContent": "",
    "showInTrack": true,
    "iconBanner": null,
    "chapters": [
      {
        "id": 13415,
        "title": "Synchronous and Asynchronous JavaScript",
        "type": "practiceLevel1",
        "lessons": [
          {
            "title": "Intro",
            "id": 120557,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p><em>Synchrony</em> is a term we use to talk about code instructions that execute one after another.</p><p>Up until now, we've used synchronous JavaScript in our code. Let's learn more about this synchronous code!</p></body></html>"
          },
          {
            "title": "Synchronous JavaScript",
            "id": 120566,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>In <strong>synchronous</strong> code, one line of code is executed only after the previous one has finished.</p><p>Synchronous code can slow down our programs. Here, we have to wait for the calculation of 6000 prime numbers to get the last console output.</p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;We're calculating the first 6000 prime numbers.&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;Waiting...&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" arr = [\" /><text value=\"2\" class=\"number\" /><text value=\"];\" /><text type=\"break\" /><text value=\"let\" class=\"keyword\" /><text value=\" number = \" /><text value=\"3\" class=\"number\" /><text value=\";\" /><text type=\"break\" /><text value=\"while\" class=\"keyword\" /><text value=\" (arr.length &lt; \" /><text value=\"6000\" class=\"number\" /><text value=\") {\" /><text type=\"break\" /><text value=\" \" /><text value=\"for\" class=\"keyword\" /><text value=\" (\" /><text value=\"let\" class=\"keyword\" /><text value=\" i = \" /><text value=\"2\" class=\"number\" /><text value=\"; i &lt; number; i++) {\" /><text type=\"break\" /><text value=\"  \" /><text value=\"if\" class=\"keyword\" /><text value=\" (number % i === \" /><text value=\"0\" class=\"number\" /><text value=\") {\" /><text type=\"break\" /><text value=\"   number++;\" /><text type=\"break\" /><text value=\"   \" /><text value=\"break\" class=\"keyword\" /><text value=\";\" /><text type=\"break\" /><text value=\"  }\" /><text type=\"break\" /><text value=\"  \" /><text value=\"if\" class=\"keyword\" /><text value=\" (i === number - \" /><text value=\"1\" class=\"number\" /><text value=\") {\" /><text type=\"break\" /><text value=\"   arr.push(number);\" /><text type=\"break\" /><text value=\"   number++;\" /><text type=\"break\" /><text value=\"   \" /><text value=\"break\" class=\"keyword\" /><text value=\";\" /><text type=\"break\" /><text value=\"  }\" /><text type=\"break\" /><text value=\" }\" /><text type=\"break\" /><text value=\"}\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"`We finished calculating the first \" /><text value=\"${arr.length}\" class=\"subst\" /><text value=\" prime numbers.`\" /><text value=\");\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;We had to wait for this line to print.&quot;\" class=\"string\" /><text value=\");\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"399\" endIndex=\"453\" /></options></interaction></interactions><output><content><text value=\"We're calculating the first 6000 prime numbers.\" /><text type=\"break\" /><text value=\"Waiting...\" /><text type=\"break\" /><text value=\"We finished calculating the first 6000 prime numbers.\" /><text type=\"break\" /><text value=\"We had to wait for this line to print.\" /></content></output></code><p visible-if=\"wrong\">Make sure to pick <code>console.log(\"We had to wait for this line to print.\");</code>.</p></body></html>"
          },
          {
            "title": "Synchronous JavaScript 2",
            "id": 120567,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>With synchronous code, the longer an operation takes, the longer we have to wait for the next line of code to execute.</p><p>Here we'll calculate the first <code>12000</code> prime numbers, which takes a longer amount of time and results in a longer delay.</p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;We're calculating the first 12000 prime numbers.&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;Waiting...&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" arr = [\" /><text value=\"2\" class=\"number\" /><text value=\"];\" /><text type=\"break\" /><text value=\"let\" class=\"keyword\" /><text value=\" number = \" /><text value=\"3\" class=\"number\" /><text value=\";\" /><text type=\"break\" /><text value=\"while\" class=\"keyword\" /><text value=\" (arr.length &lt; \" /><text value=\"12000\" class=\"number\" /><text value=\") {\" /><text type=\"break\" /><text value=\" \" /><text value=\"for\" class=\"keyword\" /><text value=\" (\" /><text value=\"let\" class=\"keyword\" /><text value=\" i = \" /><text value=\"2\" class=\"number\" /><text value=\"; i &lt; number; i++) {\" /><text type=\"break\" /><text value=\"  \" /><text value=\"if\" class=\"keyword\" /><text value=\" (number % i === \" /><text value=\"0\" class=\"number\" /><text value=\") {\" /><text type=\"break\" /><text value=\"   number++;\" /><text type=\"break\" /><text value=\"   \" /><text value=\"break\" class=\"keyword\" /><text value=\";\" /><text type=\"break\" /><text value=\"  }\" /><text type=\"break\" /><text value=\"  \" /><text value=\"if\" class=\"keyword\" /><text value=\" (i === number - \" /><text value=\"1\" class=\"number\" /><text value=\") {\" /><text type=\"break\" /><text value=\"   arr.push(number);\" /><text type=\"break\" /><text value=\"   number++;\" /><text type=\"break\" /><text value=\"   \" /><text value=\"break\" class=\"keyword\" /><text value=\";\" /><text type=\"break\" /><text value=\"  }\" /><text type=\"break\" /><text value=\" }\" /><text type=\"break\" /><text value=\"}\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"`We finished calculating the first \" /><text value=\"${arr.length}\" class=\"subst\" /><text value=\" prime numbers.`\" /><text value=\");\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;We had to wait even longer for this line to print.&quot;\" class=\"string\" /><text value=\");\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"145\" endIndex=\"150\" /></options></interaction></interactions><output><content><text value=\"We're calculating the first 12000 prime numbers.\" /><text type=\"break\" /><text value=\"Waiting...\" /><text type=\"break\" /><text value=\"We finished calculating the first 12000 prime numbers.\" /><text type=\"break\" /><text value=\"We had to wait even longer for this line to print.\" /></content></output></code><p visible-if=\"wrong\">Make sure to pick <code>12000</code>.</p></body></html>"
          },
          {
            "title": "Asynchronous JS 1",
            "id": 120570,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p><strong>Asynchronous</strong> code doesn't wait for the previous instruction to finish.</p><p>Here, even if we include the print statement in the last line of the code, we see the message show up <em>before</em> the calculation has finished.</p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"function\" class=\"keyword\" /><text value=\" \" /><text value=\"asyncExample\" class=\"title\" /><text value=\"(\" /><text value=\"\" class=\"params\" /><text value=\") \" /><text value=\"{\" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;We're calculating the first 10,000 prime numbers.&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\" \" /><text value=\"const\" class=\"keyword\" /><text value=\" arr = [\" /><text value=\"2\" class=\"number\" /><text value=\"];\" /><text type=\"break\" /><text value=\" \" /><text value=\"let\" class=\"keyword\" /><text value=\" number = \" /><text value=\"3\" class=\"number\" /><text value=\";\" /><text type=\"break\" /><text value=\" \" /><text value=\"while\" class=\"keyword\" /><text value=\" (arr.length &lt; \" /><text value=\"10000\" class=\"number\" /><text value=\") {\" /><text type=\"break\" /><text value=\"  \" /><text value=\"for\" class=\"keyword\" /><text value=\" (\" /><text value=\"let\" class=\"keyword\" /><text value=\" i = \" /><text value=\"2\" class=\"number\" /><text value=\"; i &lt; number; i++) {\" /><text type=\"break\" /><text value=\"   \" /><text value=\"if\" class=\"keyword\" /><text value=\" (number % i === \" /><text value=\"0\" class=\"number\" /><text value=\") {\" /><text type=\"break\" /><text value=\"    number++;\" /><text type=\"break\" /><text value=\"    \" /><text value=\"break\" class=\"keyword\" /><text value=\";\" /><text type=\"break\" /><text value=\"   }\" /><text type=\"break\" /><text value=\"   \" /><text value=\"if\" class=\"keyword\" /><text value=\" (i === number - \" /><text value=\"1\" class=\"number\" /><text value=\") {\" /><text type=\"break\" /><text value=\"    arr.push(number);\" /><text type=\"break\" /><text value=\"    number++;\" /><text type=\"break\" /><text value=\"    \" /><text value=\"break\" class=\"keyword\" /><text value=\";\" /><text type=\"break\" /><text value=\"   }\" /><text type=\"break\" /><text value=\"  }\" /><text type=\"break\" /><text value=\" }\" /><text type=\"break\" /><text value=\" \" /><text value=\"return\" class=\"keyword\" /><text value=\" \" /><text value=\"Promise\" class=\"built_in\" /><text value=\".resolve(arr);\" /><text type=\"break\" /><text value=\"}\" /><text type=\"break\" /><text value=\"asyncExample().then(\" /><text value=\"function\" class=\"keyword\" /><text value=\"(\" /><text value=\"value\" class=\"params\" /><text value=\") \" /><text value=\"{\" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"`We calculated the first \" /><text value=\"${value.length}\" class=\"subst\" /><text value=\" prime numbers`\" /><text value=\");\" /><text type=\"break\" /><text value=\"});\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;This line is printed during the calculation.&quot;\" class=\"string\" /><text value=\");\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"483\" endIndex=\"543\" /></options></interaction></interactions><output><content><text value=\"We're calculating the first 10,000 prime numbers.\" /><text type=\"break\" /><text value=\"This line is printed during the calculation.\" /><text type=\"break\" /><text value=\"We calculated the first 10000 prime numbers\" /></content></output></code><p visible-if=\"wrong\">Make sure to pick <code>console.log(\"This line is printed during the calculation.\");</code>.</p></body></html>"
          },
          {
            "title": "Asynchronous JavaScript 2",
            "id": 120571,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Asynchronous code is useful for handling long-running tasks. Complex calculations and fetching data from a server can take time.</p><p>Asynchrony allows us to execute other tasks while we wait. Which statement will show up last?</p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" asyncExample = fetch(\" /><text value=\"&quot;https://exampleAPI.data/1&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\"asyncExample.then(\" /><text value=\"res\" class=\"params\" /><text value=\" =&gt;\" /><text value=\" res.json()).then(\" /><text value=\"data\" class=\"params\" /><text value=\" =&gt;\" /><text value=\" {\" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"`This is our data: \" /><text value=\"${data}\" class=\"subst\" /><text value=\"`\" /><text value=\");\" /><text type=\"break\" /><text value=\"});\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;Waiting for the data...&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;Continue to use the page while the request is processing.&quot;\" class=\"string\" /><text value=\");\" /></content><output><content><text value=\"Waiting for the data...\" /><text type=\"break\" /><text value=\"Continue to use the page while the request is processing.\" /><text type=\"break\" /><text value=\"This is our data: Success!\" /></content></output></code><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\"><code>This is our data: Success!</code></item><item value=\"2\" correct=\"false\"><code>Waiting for the data...</code></item><item value=\"3\" correct=\"false\"><code>Continue to use the page while the request is processing</code></item></selection><p visible-if=\"wrong\"><code>This is our data: Success!</code>.</p></body></html>"
          },
          {
            "title": "Question: Synchronous JavaScript",
            "id": 120710,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>What is <strong>synchronous</strong> code?</p><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\">Code that is executed sequentially</item><item value=\"2\" correct=\"false\">Code that executes concurrently with other code</item></selection><p visible-if=\"wrong\">Code that is executed sequentially.</p></body></html>"
          },
          {
            "title": "Question: Synchronous JavaScript 2",
            "id": 120711,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>What is one reason that synchronous code can be inefficient?</p><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\">Every line of code must wait for the previous line to complete</item><item value=\"2\" correct=\"false\">Multiple lines of code can execute at the same time</item></selection><p visible-if=\"wrong\">Every line of code must wait for the previous line to complete.</p></body></html>"
          },
          {
            "title": "Question: Asynchronous Javascript",
            "id": 120712,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>What is <strong>asynchronous</strong> code?</p><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\">Code that can execute concurrently with other code</item><item value=\"2\" correct=\"false\">Code that executes sequentially</item></selection><p visible-if=\"wrong\">Code that can execute concurrently with other code.</p></body></html>"
          },
          {
            "title": "Question: Asynchronous JavaScript 1",
            "id": 120713,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>What is the advantage of asynchronous code?</p><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\">We can perform several actions while waiting for a previous action to complete</item><item value=\"2\" correct=\"false\">It always requires more lines of code than synchronous code</item></selection><p visible-if=\"wrong\">We can perform several actions while waiting for a previous action to complete.</p></body></html>"
          },
          {
            "title": "Question: Asynchronous JavaScript 2",
            "id": 120838,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>How can we recognize that this code is asynchronous?</p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"function\" class=\"keyword\" /><text value=\" \" /><text value=\"asyncExample\" class=\"title\" /><text value=\"(\" /><text value=\"\" class=\"params\" /><text value=\") \" /><text value=\"{\" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;We're calculating the first 10,000 prime numbers.&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;Waiting...&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\" \" /><text value=\"const\" class=\"keyword\" /><text value=\" arr = [\" /><text value=\"2\" class=\"number\" /><text value=\"];\" /><text type=\"break\" /><text value=\" \" /><text value=\"let\" class=\"keyword\" /><text value=\" number = \" /><text value=\"3\" class=\"number\" /><text value=\";\" /><text type=\"break\" /><text value=\" \" /><text value=\"while\" class=\"keyword\" /><text value=\" (arr.length &lt; \" /><text value=\"10000\" class=\"number\" /><text value=\") {\" /><text type=\"break\" /><text value=\"  \" /><text value=\"for\" class=\"keyword\" /><text value=\" (\" /><text value=\"let\" class=\"keyword\" /><text value=\" i = \" /><text value=\"2\" class=\"number\" /><text value=\"; i &lt; number; i++) {\" /><text type=\"break\" /><text value=\"   \" /><text value=\"if\" class=\"keyword\" /><text value=\" (number % i === \" /><text value=\"0\" class=\"number\" /><text value=\") {\" /><text type=\"break\" /><text value=\"    number++;\" /><text type=\"break\" /><text value=\"    \" /><text value=\"break\" class=\"keyword\" /><text value=\";\" /><text type=\"break\" /><text value=\"   }\" /><text type=\"break\" /><text value=\"   \" /><text value=\"if\" class=\"keyword\" /><text value=\" (i === number - \" /><text value=\"1\" class=\"number\" /><text value=\") {\" /><text type=\"break\" /><text value=\"    arr.push(number);\" /><text type=\"break\" /><text value=\"    number++;\" /><text type=\"break\" /><text value=\"    \" /><text value=\"break\" class=\"keyword\" /><text value=\";\" /><text type=\"break\" /><text value=\"   }\" /><text type=\"break\" /><text value=\"  }\" /><text type=\"break\" /><text value=\" }\" /><text type=\"break\" /><text value=\" \" /><text value=\"return\" class=\"keyword\" /><text value=\" \" /><text value=\"Promise\" class=\"built_in\" /><text value=\".resolve(arr);\" /><text type=\"break\" /><text value=\"}\" /><text type=\"break\" /><text value=\"asyncExample().then(\" /><text value=\"function\" class=\"keyword\" /><text value=\"(\" /><text value=\"value\" class=\"params\" /><text value=\") \" /><text value=\"{\" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"`We calculated the first \" /><text value=\"${value.length}\" class=\"subst\" /><text value=\" prime numbers`\" /><text value=\");\" /><text type=\"break\" /><text value=\"});\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;This line printed during the calculation.&quot;\" class=\"string\" /><text value=\");\" /></content><output><content><text value=\"We're calculating the first 10,000 prime numbers.\" /><text type=\"break\" /><text value=\"Waiting...\" /><text type=\"break\" /><text value=\"This line printed during the calculation.\" /><text type=\"break\" /><text value=\"We calculated the first 10000 prime numbers\" /></content></output></code><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\">It continues to execute and print in the console during the calculation</item><item value=\"2\" correct=\"false\">It uses a while loop</item></selection><p visible-if=\"wrong\">It continues to execute and print in the console during the calculation.</p></body></html>"
          },
          {
            "title": "Question: Asynchronous JavaScript 3",
            "id": 120714,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>What is one real-world application of asynchronous code?</p><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\">Continuing to execute code while performing complex calculations</item><item value=\"2\" correct=\"false\">Waiting to execute the next line of code while a complex calculation is performed</item></selection><p visible-if=\"wrong\">Continuing to execute code while performing complex calculations.</p></body></html>"
          },
          {
            "title": "Example: Synchronous JavaScript",
            "id": 120716,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Complete the <code>for</code> loop so that this synchronous code multiplies each element of the array by <code>5</code> and then prints a \"Finish\" message.</p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" arr = [\" /><text value=\"1\" class=\"number\" /><text value=\", \" /><text value=\"2\" class=\"number\" /><text value=\", \" /><text value=\"3\" class=\"number\" /><text value=\", \" /><text value=\"4\" class=\"number\" /><text value=\", \" /><text value=\"5\" class=\"number\" /><text value=\"];\" /><text type=\"break\" /><text value=\"for\" class=\"keyword\" /><text value=\" (\" /><text value=\"let\" class=\"keyword\" /><text value=\" i = \" /><text value=\"0\" class=\"number\" /><text value=\"; i &lt; arr.length; i++) {\" /><text type=\"break\" /><text value=\" arr[i] *= \" /><text value=\"5\" class=\"number\" /><text value=\";\" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(arr[i]);\" /><text type=\"break\" /><text value=\"}\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;Finished!&quot;\" class=\"string\" /><text value=\");\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"29\" endIndex=\"32\" /><option startIndex=\"106\" endIndex=\"113\" /><option startIndex=\"113\" endIndex=\"114\" /><option startIndex=\"114\" endIndex=\"117\" /></options></interaction></interactions><output><content><text value=\"5\" /><text type=\"break\" /><text value=\"10\" /><text type=\"break\" /><text value=\"15\" /><text type=\"break\" /><text value=\"20\" /><text type=\"break\" /><text value=\"25\" /><text type=\"break\" /><text value=\"Finished!\" /></content></output></code><p visible-if=\"wrong\">Make sure to pick <code>for</code> followed by <code>console</code> and then <code>.</code>, <code>log</code>.</p></body></html>"
          },
          {
            "title": "MCQ w/Code 1",
            "id": 120721,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>How do we know that this code is synchronous?</p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" arr = [\" /><text value=\"10\" class=\"number\" /><text value=\", \" /><text value=\"8\" class=\"number\" /><text value=\", \" /><text value=\"4\" class=\"number\" /><text value=\", \" /><text value=\"2\" class=\"number\" /><text value=\", \" /><text value=\"0\" class=\"number\" /><text value=\"];\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;Start loop!&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\"for\" class=\"keyword\" /><text value=\" (\" /><text value=\"let\" class=\"keyword\" /><text value=\" i = \" /><text value=\"0\" class=\"number\" /><text value=\"; i &lt; arr.length; i++) {\" /><text type=\"break\" /><text value=\" arr[i] /= \" /><text value=\"2\" class=\"number\" /><text value=\";\" /><text type=\"break\" /><text value=\"}\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;The operation is complete&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(arr);\" /><text type=\"break\" /></content><output><content><text value=\"Start loop!\" /><text type=\"break\" /><text value=\"The operation is complete\" /><text type=\"break\" /><text value=\"[ 5, 4, 2, 1, 0 ]\" /></content></output></code><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\">Each iteration of the loop is completed before the code outside the loop runs</item><item value=\"2\" correct=\"false\">The code executes all at once</item></selection><p visible-if=\"wrong\">Each iteration of the loop is completed before the code outside the loop runs.</p></body></html>"
          },
          {
            "title": "MCQ w/Code 2",
            "id": 120722,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Why do we know that this code is asynchronous?</p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"async\" class=\"keyword\" /><text value=\" \" /><text value=\"function\" class=\"keyword\" /><text value=\" \" /><text value=\"example\" class=\"title\" /><text value=\"(\" /><text value=\"\" class=\"params\" /><text value=\") \" /><text value=\"{\" /><text type=\"break\" /><text value=\" \" /><text value=\"const\" class=\"keyword\" /><text value=\" promise = \" /><text value=\"new\" class=\"keyword\" /><text value=\" \" /><text value=\"Promise\" class=\"built_in\" /><text value=\"(\" /><text value=\"(\" /><text value=\"resolve\" class=\"params\" /><text value=\") =&gt;\" /><text value=\" {\" /><text type=\"break\" /><text value=\"  setTimeout(\" /><text value=\"()\" class=\"params\" /><text value=\" =&gt;\" /><text value=\" resolve(\" /><text value=\"&quot;The operation is finished&quot;\" class=\"string\" /><text value=\"), \" /><text value=\"1500\" class=\"number\" /><text value=\");\" /><text type=\"break\" /><text value=\" });\" /><text type=\"break\" /><text value=\" \" /><text value=\"const\" class=\"keyword\" /><text value=\" output = \" /><text value=\"await\" class=\"keyword\" /><text value=\" promise;\" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(output);\" /><text type=\"break\" /><text value=\"}\" /><text type=\"break\" /><text value=\"example();\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;Hello&quot;\" class=\"string\" /><text value=\");\" /></content><output><content><text value=\"Hello\" /><text type=\"break\" /><text value=\"The operation is finished\" /></content></output></code><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\">Because the last console message will show first in the console</item><item value=\"2\" correct=\"false\">Because <code>\"Hello\"</code> will not show</item></selection><p visible-if=\"wrong\">Because the last console message will show first in the console.</p></body></html>"
          }
        ]
      },
      {
        "id": 13416,
        "title": "Callbacks and Synchronous JS",
        "type": "practiceLevel1",
        "lessons": [
          {
            "title": "Intro",
            "id": 120558,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>You have already encountered and used <strong>callback</strong> functions in synchronous JavaScript, perhaps without realizing it.</p><p>But let's learn more about these callbacks!</p></body></html>"
          },
          {
            "title": "Callback Function Definition",
            "id": 120574,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>A callback function is a regular function that we pass into another function and then call to perform a task.</p><p>Here, we pass the <code>logResult</code> function to our <code>add</code> function to show the result of the calculation.</p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"function\" class=\"keyword\" /><text value=\" \" /><text value=\"add\" class=\"title\" /><text value=\"(\" /><text value=\"number1, number2, callback\" class=\"params\" /><text value=\") \" /><text value=\"{\" /><text type=\"break\" /><text value=\" \" /><text value=\"let\" class=\"keyword\" /><text value=\" result = number1 + number2;\" /><text type=\"break\" /><text value=\" callback(result);\" /><text type=\"break\" /><text value=\"}\" /><text type=\"break\" /><text type=\"break\" /><text value=\"function\" class=\"keyword\" /><text value=\" \" /><text value=\"logResult\" class=\"title\" /><text value=\"(\" /><text value=\"result\" class=\"params\" /><text value=\") \" /><text value=\"{\" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"`The result is: \" /><text value=\"${result}\" class=\"subst\" /><text value=\"`\" /><text value=\");\" /><text type=\"break\" /><text value=\"}\" /><text type=\"break\" /><text value=\"add(\" /><text value=\"2\" class=\"number\" /><text value=\", \" /><text value=\"3\" class=\"number\" /><text value=\", logResult);\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"181\" endIndex=\"190\" /></options></interaction></interactions><output><content><text value=\"The result is: 5\" /></content></output></code><p visible-if=\"wrong\">Make sure to pick <code>logResult</code>.</p></body></html>"
          },
          {
            "title": ".map()",
            "id": 120575,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>You've already used callback functions in methods like <code>.map()</code>.</p><p>Here, we pass the <code>callback</code> function to the <code>.map()</code> array method. In it, we return <code>num</code> multiplied by <code>2</code>. The action repeats for all elements of the array.</p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" arr = [\" /><text value=\"1\" class=\"number\" /><text value=\", \" /><text value=\"2\" class=\"number\" /><text value=\", \" /><text value=\"3\" class=\"number\" /><text value=\", \" /><text value=\"4\" class=\"number\" /><text value=\", \" /><text value=\"5\" class=\"number\" /><text value=\"];\" /><text type=\"break\" /><text type=\"break\" /><text value=\"function\" class=\"keyword\" /><text value=\" \" /><text value=\"callback\" class=\"title\" /><text value=\"(\" /><text value=\"num\" class=\"params\" /><text value=\") \" /><text value=\"{\" /><text type=\"break\" /><text value=\" \" /><text value=\"return\" class=\"keyword\" /><text value=\" num * \" /><text value=\"2\" class=\"number\" /><text value=\";\" /><text type=\"break\" /><text value=\"}\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" newArray = arr.map(callback);\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(newArray);\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;This code is synchronous.&quot;\" class=\"string\" /><text value=\");\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"95\" endIndex=\"98\" /><option startIndex=\"99\" endIndex=\"107\" /></options></interaction></interactions><output><content><text value=\"[ 2, 4, 6, 8, 10 ]\" /><text type=\"break\" /><text value=\"This code is synchronous.\" /></content></output></code><p visible-if=\"wrong\">Make sure to pick <code>map</code>, followed by <code>callback</code>.</p></body></html>"
          },
          {
            "title": ".map() 2",
            "id": 120576,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>The <code>.map()</code> method is synchronous. It executes in its entirety before the next line of code runs.</p><p>Here, we can see all the multiplied numbers in the console before the last print statement.</p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" arr = [\" /><text value=\"1\" class=\"number\" /><text value=\", \" /><text value=\"2\" class=\"number\" /><text value=\", \" /><text value=\"3\" class=\"number\" /><text value=\", \" /><text value=\"4\" class=\"number\" /><text value=\", \" /><text value=\"5\" class=\"number\" /><text value=\"];\" /><text type=\"break\" /><text type=\"break\" /><text value=\"function\" class=\"keyword\" /><text value=\" \" /><text value=\"callback\" class=\"title\" /><text value=\"(\" /><text value=\"num\" class=\"params\" /><text value=\") \" /><text value=\"{\" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(num * \" /><text value=\"2\" class=\"number\" /><text value=\");\" /><text type=\"break\" /><text value=\"}\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" newArray = arr.map(callback);\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;This code is synchronous.&quot;\" class=\"string\" /><text value=\");\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"116\" endIndex=\"123\" /><option startIndex=\"123\" endIndex=\"124\" /><option startIndex=\"124\" endIndex=\"127\" /></options></interaction></interactions><output><content><text value=\"2\" /><text type=\"break\" /><text value=\"4\" /><text type=\"break\" /><text value=\"6\" /><text type=\"break\" /><text value=\"8\" /><text type=\"break\" /><text value=\"10\" /><text type=\"break\" /><text value=\"This code is synchronous.\" /></content></output></code><p visible-if=\"wrong\">Make sure to pick <code>console</code>, followed by <code>.</code>, and finally <code>log</code>.</p></body></html>"
          },
          {
            "title": ".filter()",
            "id": 120577,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>You might also remember <code>.filter()</code>. It's another callback you've used without knowing!</p><p>Here, we pass the <code>callback</code> function to the <code>.filter()</code> method to return all even numbers in the original array.</p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" arr = [\" /><text value=\"1\" class=\"number\" /><text value=\", \" /><text value=\"2\" class=\"number\" /><text value=\", \" /><text value=\"3\" class=\"number\" /><text value=\", \" /><text value=\"4\" class=\"number\" /><text value=\", \" /><text value=\"5\" class=\"number\" /><text value=\", \" /><text value=\"6\" class=\"number\" /><text value=\", \" /><text value=\"7\" class=\"number\" /><text value=\", \" /><text value=\"8\" class=\"number\" /><text value=\", \" /><text value=\"9\" class=\"number\" /><text value=\", \" /><text value=\"10\" class=\"number\" /><text value=\"];\" /><text type=\"break\" /><text type=\"break\" /><text value=\"function\" class=\"keyword\" /><text value=\" \" /><text value=\"callback\" class=\"title\" /><text value=\"(\" /><text value=\"num\" class=\"params\" /><text value=\") \" /><text value=\"{\" /><text type=\"break\" /><text value=\" \" /><text value=\"return\" class=\"keyword\" /><text value=\" num % \" /><text value=\"2\" class=\"number\" /><text value=\" === \" /><text value=\"0\" class=\"number\" /><text value=\";\" /><text type=\"break\" /><text value=\"}\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" evenNumArray = arr.filter(callback);\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(evenNumArray);\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;This code is also synchronous.&quot;\" class=\"string\" /><text value=\");\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"121\" endIndex=\"127\" /><option startIndex=\"128\" endIndex=\"136\" /></options></interaction></interactions><output><content><text value=\"[ 2, 4, 6, 8, 10 ]\" /><text type=\"break\" /><text value=\"This code is also synchronous.\" /></content></output></code><p visible-if=\"wrong\">Make sure to pick <code>filter</code>, followed by <code>callback</code>.</p></body></html>"
          },
          {
            "title": ".filter() 2",
            "id": 120578,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Again, we see an example of a synchronous JavaScript method that uses a callback function. Pass <code>callback</code> to the <code>filter</code> method.</p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" arr = [\" /><text value=\"1\" class=\"number\" /><text value=\", \" /><text value=\"2\" class=\"number\" /><text value=\", \" /><text value=\"3\" class=\"number\" /><text value=\", \" /><text value=\"4\" class=\"number\" /><text value=\", \" /><text value=\"5\" class=\"number\" /><text value=\", \" /><text value=\"6\" class=\"number\" /><text value=\", \" /><text value=\"7\" class=\"number\" /><text value=\", \" /><text value=\"8\" class=\"number\" /><text value=\", \" /><text value=\"9\" class=\"number\" /><text value=\", \" /><text value=\"10\" class=\"number\" /><text value=\"];\" /><text type=\"break\" /><text type=\"break\" /><text value=\"function\" class=\"keyword\" /><text value=\" \" /><text value=\"callback\" class=\"title\" /><text value=\"(\" /><text value=\"num\" class=\"params\" /><text value=\") \" /><text value=\"{\" /><text type=\"break\" /><text value=\" \" /><text value=\"return\" class=\"keyword\" /><text value=\" num % \" /><text value=\"2\" class=\"number\" /><text value=\" === \" /><text value=\"0\" class=\"number\" /><text value=\";\" /><text type=\"break\" /><text value=\"}\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" evenNumArray = arr.filter(callback);\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(evenNumArray);\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;This code is also synchronous.&quot;\" class=\"string\" /><text value=\");\" /></content><interactions><interaction type=\"validatedInput\" isDefault=\"true\" startIndex=\"128\" endIndex=\"136\" /></interactions><output><content><text value=\"[ 2, 4, 6, 8, 10 ]\" /><text type=\"break\" /><text value=\"This code is also synchronous.\" /></content></output></code><p visible-if=\"wrong\">Make sure to type <code>callback</code>.</p></body></html>"
          },
          {
            "title": ".map()/.filter()",
            "id": 120583,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>You may have seen these methods written in a different form, such as using modern ES6 arrow functions.</p><p>The arrow function is just using compact syntax to write the callback, but it's the same behavior.</p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" arr = [\" /><text value=\"1\" class=\"number\" /><text value=\", \" /><text value=\"2\" class=\"number\" /><text value=\", \" /><text value=\"3\" class=\"number\" /><text value=\", \" /><text value=\"4\" class=\"number\" /><text value=\", \" /><text value=\"5\" class=\"number\" /><text value=\"];\" /><text type=\"break\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" newArray = arr.map(\" /><text value=\"(\" /><text value=\"num\" class=\"params\" /><text value=\") =&gt;\" /><text value=\" num * \" /><text value=\"2\" class=\"number\" /><text value=\");\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(newArray);\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;This code uses an ES6 arrow function.&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;This code is synchronous.&quot;\" class=\"string\" /><text value=\");\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"61\" endIndex=\"63\" /><option startIndex=\"55\" endIndex=\"60\" /></options></interaction></interactions><output><content><text value=\"[ 2, 4, 6, 8, 10 ]\" /><text type=\"break\" /><text value=\"This code uses an ES6 arrow function.\" /><text type=\"break\" /><text value=\"This code is synchronous.\" /></content></output></code><p visible-if=\"wrong\">Make sure to pick <code>(num)</code>, followed by <code>=&gt;</code>.</p></body></html>"
          },
          {
            "title": "Question: Callback Function Definition",
            "id": 120726,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>A callback function is always called within another function.</p><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\">True</item><item value=\"2\" correct=\"false\">False</item></selection><p visible-if=\"wrong\">Make sure to pick True.</p></body></html>"
          },
          {
            "title": "Question: .map()",
            "id": 120727,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p><code>.map()</code> is a JavaScript method that executes asynchronously.</p><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\">False</item><item value=\"2\" correct=\"false\">True</item></selection><p visible-if=\"wrong\">Make sure to pick False.</p></body></html>"
          },
          {
            "title": "Question: .filter()",
            "id": 120729,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>What statement is accurate regarding the <code>.filter()</code> and <code>.map()</code> methods?</p><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\">They execute synchronously</item><item value=\"2\" correct=\"false\">They execute asynchronously</item></selection><p visible-if=\"wrong\">They execute synchronously.</p></body></html>"
          },
          {
            "title": "Question: .filter() 2",
            "id": 120730,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>JavaScript methods sometimes require callback functions during their execution.</p><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\">True</item><item value=\"2\" correct=\"false\">False</item></selection><p visible-if=\"wrong\">Make sure to pick True.</p></body></html>"
          },
          {
            "title": "Question: .map()/.filter()",
            "id": 120731,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>What statement is true regarding callback functions in JavaScript?</p><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\">They can be written with ES6 arrow functions</item><item value=\"2\" correct=\"false\">They can never be written with ES6 arrow functions</item></selection><p visible-if=\"wrong\">They can be written with ES6 arrow functions.</p></body></html>"
          },
          {
            "title": "Question: .filter()/Callback",
            "id": 120839,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>What is the callback function in this synchronous code?</p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" arr = [\" /><text value=\"11\" class=\"number\" /><text value=\", \" /><text value=\"12\" class=\"number\" /><text value=\", \" /><text value=\"13\" class=\"number\" /><text value=\", \" /><text value=\"14\" class=\"number\" /><text value=\", \" /><text value=\"15\" class=\"number\" /><text value=\", \" /><text value=\"16\" class=\"number\" /><text value=\", \" /><text value=\"17\" class=\"number\" /><text value=\", \" /><text value=\"18\" class=\"number\" /><text value=\", \" /><text value=\"19\" class=\"number\" /><text value=\", \" /><text value=\"20\" class=\"number\" /><text value=\"];\" /><text type=\"break\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" evenArray = \" /><text value=\"(\" /><text value=\"num\" class=\"params\" /><text value=\") =&gt;\" /><text value=\" num % \" /><text value=\"2\" class=\"number\" /><text value=\" === \" /><text value=\"0\" class=\"number\" /><text value=\";\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" newArray = arr.filter(evenArray);\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(newArray);\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;This code is synchronous.&quot;\" class=\"string\" /><text value=\");\" /></content><output><content><text value=\"[ 12, 14, 16, 18, 20 ]\" /><text type=\"break\" /><text value=\"This code is synchronous.\" /></content></output></code><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\"><code>evenArray</code></item><item value=\"2\" correct=\"false\"><code>newArray</code></item></selection><p visible-if=\"wrong\">Make sure to pick <code>evenArray</code>.</p></body></html>"
          },
          {
            "title": "Example: .map()",
            "id": 120734,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Call the <code>.map</code> method with <code>makePositive</code> as the callback.</p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" arr = [\" /><text value=\"-1\" class=\"number\" /><text value=\", \" /><text value=\"-2\" class=\"number\" /><text value=\", \" /><text value=\"-3\" class=\"number\" /><text value=\", \" /><text value=\"-4\" class=\"number\" /><text value=\", \" /><text value=\"-5\" class=\"number\" /><text value=\"];\" /><text type=\"break\" /><text type=\"break\" /><text value=\"function\" class=\"keyword\" /><text value=\" \" /><text value=\"makePositive\" class=\"title\" /><text value=\"(\" /><text value=\"num\" class=\"params\" /><text value=\") \" /><text value=\"{\" /><text type=\"break\" /><text value=\" \" /><text value=\"return\" class=\"keyword\" /><text value=\" num * \" /><text value=\"-1\" class=\"number\" /><text value=\";\" /><text type=\"break\" /><text value=\"}\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" positiveArray = arr.map(makePositive);\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(positiveArray);\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;This code is synchronous.&quot;\" class=\"string\" /><text value=\");\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"106\" endIndex=\"109\" /><option startIndex=\"109\" endIndex=\"110\" /><option startIndex=\"110\" endIndex=\"113\" /><option startIndex=\"113\" endIndex=\"128\" /></options></interaction></interactions><output><content><text value=\"[ 1, 2, 3, 4, 5 ]\" /><text type=\"break\" /><text value=\"This code is synchronous.\" /></content></output></code><p visible-if=\"wrong\">Make sure to pick <code>arr</code> followed by <code>.</code> and then <code>map</code>, <code>(makePositive);</code>.</p></body></html>"
          }
        ]
      },
      {
        "id": 13417,
        "title": "Callbacks and Asynchronous JS",
        "type": "practiceLevel1",
        "lessons": [
          {
            "title": "Intro",
            "id": 120559,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>We've seen callback functions in synchronous JavaScript. Now let's take a look at customized callbacks, and callbacks in asynchronous code.</p></body></html>"
          },
          {
            "title": "Callback Functions",
            "id": 120654,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Remember that a callback function is a function that we pass into another function and then call to perform a task.</p><p>We saw that JavaScript methods such as <code>.map()</code> and <code>.filter()</code> are designed to accept a callback function.</p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" arr = [\" /><text value=\"1\" class=\"number\" /><text value=\", \" /><text value=\"2\" class=\"number\" /><text value=\", \" /><text value=\"3\" class=\"number\" /><text value=\", \" /><text value=\"4\" class=\"number\" /><text value=\", \" /><text value=\"5\" class=\"number\" /><text value=\"];\" /><text type=\"break\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" newArray = arr.map(\" /><text value=\"(\" /><text value=\"num\" class=\"params\" /><text value=\") =&gt;\" /><text value=\" num * \" /><text value=\"2\" class=\"number\" /><text value=\");\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(newArray);\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;This code is synchronous.&quot;\" class=\"string\" /><text value=\");\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"47\" endIndex=\"50\" /><option startIndex=\"50\" endIndex=\"51\" /><option startIndex=\"51\" endIndex=\"54\" /></options></interaction></interactions><output><content><text value=\"[ 2, 4, 6, 8, 10 ]\" /><text type=\"break\" /><text value=\"This code is synchronous.\" /></content></output></code><p visible-if=\"wrong\">Make sure to pick <code>arr</code>, followed by <code>.</code>, and finally <code>map</code>.</p></body></html>"
          },
          {
            "title": "Callback Functions II",
            "id": 120835,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>We can also customize our own functions to accept and execute a callback.</p><p>Here we can pass the <code>sayGoodbye</code> function that displays <code>\"Goodbye\"</code> into the <code>greet()</code> function.</p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"function\" class=\"keyword\" /><text value=\" \" /><text value=\"greet\" class=\"title\" /><text value=\"(\" /><text value=\"name, callback\" class=\"params\" /><text value=\") \" /><text value=\"{\" /><text type=\"break\" /><text value=\"  \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"`Hello, \" /><text value=\"${name}\" class=\"subst\" /><text value=\"!`\" /><text value=\");\" /><text type=\"break\" /><text value=\"  callback();\" /><text type=\"break\" /><text value=\"}\" /><text type=\"break\" /><text type=\"break\" /><text value=\"function\" class=\"keyword\" /><text value=\" \" /><text value=\"sayGoodbye\" class=\"title\" /><text value=\"(\" /><text value=\"\" class=\"params\" /><text value=\") \" /><text value=\"{\" /><text type=\"break\" /><text value=\"  \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;Goodbye!&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\"}\" /><text type=\"break\" /><text type=\"break\" /><text value=\"greet(\" /><text value=\"&quot;Teresa&quot;\" class=\"string\" /><text value=\", sayGoodbye);\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"154\" endIndex=\"164\" /><option startIndex=\"138\" endIndex=\"143\" /></options></interaction></interactions><output><content><text value=\"Hello, Teresa!\" /><text type=\"break\" /><text value=\"Goodbye!\" /></content></output></code><p visible-if=\"wrong\">Make sure to pick <code>greet</code>, followed by <code>sayGoodbye</code>.</p></body></html>"
          },
          {
            "title": "Customizing Callbacks",
            "id": 120655,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>We can customize a callback to do anything we need.</p><p>Let's call the function <code>doSomeMath</code> with the <code>input</code> parameter set to <code>2</code> and the <code>callback</code> parameter set to <code>multiplyCallback</code>.</p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"function\" class=\"keyword\" /><text value=\" \" /><text value=\"multiplyCallback\" class=\"title\" /><text value=\"(\" /><text value=\"num\" class=\"params\" /><text value=\") \" /><text value=\"{\" /><text type=\"break\" /><text value=\" \" /><text value=\"const\" class=\"keyword\" /><text value=\" result = num * \" /><text value=\"2\" class=\"number\" /><text value=\";\" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"`The input doubled is equal to \" /><text value=\"${result}\" class=\"subst\" /><text value=\"`\" /><text value=\");\" /><text type=\"break\" /><text value=\"}\" /><text type=\"break\" /><text type=\"break\" /><text value=\"function\" class=\"keyword\" /><text value=\" \" /><text value=\"doSomeMath\" class=\"title\" /><text value=\"(\" /><text value=\"input, callback\" class=\"params\" /><text value=\") \" /><text value=\"{\" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;We are doubling the input number.&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\" callback(input);\" /><text type=\"break\" /><text value=\"}\" /><text type=\"break\" /><text value=\"doSomeMath(\" /><text value=\"2\" class=\"number\" /><text value=\", multiplyCallback);\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"228\" endIndex=\"238\" /><option startIndex=\"238\" endIndex=\"239\" /><option startIndex=\"239\" endIndex=\"241\" /><option startIndex=\"242\" endIndex=\"258\" /><option startIndex=\"258\" endIndex=\"259\" /></options></interaction></interactions><output><content><text value=\"We are doubling the input number.\" /><text type=\"break\" /><text value=\"The input doubled is equal to 4\" /></content></output></code><p visible-if=\"wrong\">Make sure to pick <code>doSomeMath</code> followed by <code>(</code> and then <code>2,</code>, <code>multiplyCallback</code>, <code>)</code>.</p></body></html>"
          },
          {
            "title": "Asynchronous Callback",
            "id": 120723,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>We can also use callback functions in asynchronous JavaScript methods. Pass the callback into the asynchronous method <code>setTimeout()</code>.</p><p>You'll learn more about this method later, for now, focus on the console output.</p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"function\" class=\"keyword\" /><text value=\" \" /><text value=\"callbackFunc\" class=\"title\" /><text value=\"(\" /><text value=\"\" class=\"params\" /><text value=\") \" /><text value=\"{\" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;Executed last because we're using asynchronous code.&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\"}\" /><text type=\"break\" /><text value=\"setTimeout(callbackFunc, \" /><text value=\"1500\" class=\"number\" /><text value=\");\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"'Executed first'\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"'Executed second'\" class=\"string\" /><text value=\");\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"109\" endIndex=\"121\" /></options></interaction></interactions><output><content><text value=\"Executed first\" /><text type=\"break\" /><text value=\"Executed second\" /><text type=\"break\" /><text value=\"Executed last because we're using asynchronous code.\" /></content></output></code><p visible-if=\"wrong\">Make sure to pick <code>callbackFunc</code>.</p></body></html>"
          },
          {
            "title": "Asynchronous Callback 2",
            "id": 120656,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>We can take advantage of synchrony and asynchrony together. Here we chain operations to a string that will happen one after another.</p><p> Then execute our customized function as a callback asynchronously.</p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" word = \" /><text value=\"&quot;enola&quot;\" class=\"string\" /><text value=\";\" /><text type=\"break\" /><text value=\"function\" class=\"keyword\" /><text value=\" \" /><text value=\"reverseCallback\" class=\"title\" /><text value=\"(\" /><text value=\"\" class=\"params\" /><text value=\") \" /><text value=\"{\" /><text type=\"break\" /><text value=\" \" /><text value=\"const\" class=\"keyword\" /><text value=\" result = word.split(\" /><text value=\"&quot;&quot;\" class=\"string\" /><text value=\").reverse().join(\" /><text value=\"&quot;&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"`The string reversed is: &quot;\" /><text value=\"${result}\" class=\"subst\" /><text value=\"&quot;`\" /><text value=\");\" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;Executed last because we're using asynchronous code.&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\"}\" /><text type=\"break\" /><text value=\"setTimeout(reverseCallback, \" /><text value=\"1500\" class=\"number\" /><text value=\");\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"'Executed first'\" class=\"string\" /><text value=\");\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"238\" endIndex=\"253\" /></options></interaction></interactions><output><content><text value=\"Executed first\" /><text type=\"break\" /><text value=\"The string reversed is: &quot;alone&quot;\" /><text type=\"break\" /><text value=\"Executed last because we're using asynchronous code.\" /></content></output></code><p visible-if=\"wrong\">Make sure to pick <code>reverseCallback</code>.</p></body></html>"
          },
          {
            "title": "Asynchronous JS History",
            "id": 120652,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Even though custom callbacks might be beneficial, having too many callbacks results in deep nesting.</p><p>Deeply nested code is undesirable because it is difficult to understand and maintain. You'll soon learn syntax that helps simplify this.</p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"func1(\" /><text value=\"&quot;one&quot;\" class=\"string\" /><text value=\", () =&gt; {\" /><text type=\"break\" /><text value=\" func2(\" /><text value=\"&quot;two&quot;\" class=\"string\" /><text value=\", () =&gt; {\" /><text type=\"break\" /><text value=\"  func3(\" /><text value=\"&quot;three&quot;\" class=\"string\" /><text value=\", () =&gt; {\" /><text type=\"break\" /><text value=\"   \" /><text value=\"// etc...\" class=\"comment\" /><text type=\"break\" /><text value=\"  });\" /><text type=\"break\" /><text value=\" });\" /><text type=\"break\" /><text value=\"});\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"0\" endIndex=\"5\" /><option startIndex=\"22\" endIndex=\"27\" /><option startIndex=\"45\" endIndex=\"50\" /></options></interaction></interactions></code><p visible-if=\"wrong\">Make sure to pick <code>func1</code>, followed by <code>func2</code>, and finally <code>func3</code>.</p></body></html>"
          },
          {
            "title": "Question: Asynhchronous JS History",
            "id": 120744,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>What is a common problem with using only callbacks to implement asynchronous JavaScript code?</p><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\">We can end up with a deeply-nested code</item><item value=\"2\" correct=\"false\">We can't use callbacks since ES8 was introduced</item></selection><p visible-if=\"wrong\">We can end up with a deeply-nested code.</p></body></html>"
          },
          {
            "title": "Question: Callback Functions",
            "id": 120746,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>What's a feature of callback functions?</p><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\">They are always called within another function</item><item value=\"2\" correct=\"false\">They can only be called once</item></selection><p visible-if=\"wrong\">They are always called within another function.</p></body></html>"
          },
          {
            "title": "Question: Customizing Callbacks",
            "id": 120747,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>What's true about callback functions?</p><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\">We can customize them to do whatever we need to do</item><item value=\"2\" correct=\"false\">They are limited to mathematic operations</item></selection><p visible-if=\"wrong\">We can customize them to do whatever we need to do.</p></body></html>"
          },
          {
            "title": "Question: Asynchronous Callback",
            "id": 120748,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>What is accurate regarding callback functions?</p><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\">We can use them with asynchronous code</item><item value=\"2\" correct=\"false\">We can't use them with asynchronous code</item></selection><p visible-if=\"wrong\">We can use them with asynchronous code.</p></body></html>"
          },
          {
            "title": "Example: Callback Functions/ES6",
            "id": 120753,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Complete the callback function that we pass into <code>sayHello</code>.</p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" sayHello = \" /><text value=\"(\" /><text value=\"name, callback\" class=\"params\" /><text value=\") =&gt;\" /><text value=\" {\" /><text type=\"break\" /><text value=\"  \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"`Hello, \" /><text value=\"${name}\" class=\"subst\" /><text value=\"!`\" /><text value=\");\" /><text type=\"break\" /><text value=\"  callback();\" /><text type=\"break\" /><text value=\"};\" /><text type=\"break\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" sayGoodbye = \" /><text value=\"()\" class=\"params\" /><text value=\" =&gt;\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;Goodbye!&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text type=\"break\" /><text value=\"sayHello(\" /><text value=\"&quot;Jon&quot;\" class=\"string\" /><text value=\", sayGoodbye);\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"75\" endIndex=\"86\" /><option startIndex=\"97\" endIndex=\"107\" /><option startIndex=\"158\" endIndex=\"168\" /></options></interaction></interactions><output><content><text value=\"Hello, Jon!\" /><text type=\"break\" /><text value=\"Goodbye!\" /></content></output></code><p visible-if=\"wrong\">Make sure to pick <code>callback();</code>, followed by <code>sayGoodbye</code>, and finally <code>sayGoodbye</code>.</p></body></html>"
          },
          {
            "title": "Example: Customizing Callbacks",
            "id": 120754,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Complete the invocation of <code>doSomeMath()</code> by passing the customized callback function to the second parameter.</p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"function\" class=\"keyword\" /><text value=\" \" /><text value=\"multiplyCallback\" class=\"title\" /><text value=\"(\" /><text value=\"num\" class=\"params\" /><text value=\") \" /><text value=\"{\" /><text type=\"break\" /><text value=\" \" /><text value=\"const\" class=\"keyword\" /><text value=\" result = num * \" /><text value=\"2\" class=\"number\" /><text value=\";\" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"`The input doubled is equal to \" /><text value=\"${result}\" class=\"subst\" /><text value=\"`\" /><text value=\");\" /><text type=\"break\" /><text value=\"}\" /><text type=\"break\" /><text type=\"break\" /><text value=\"function\" class=\"keyword\" /><text value=\" \" /><text value=\"doSomeMath\" class=\"title\" /><text value=\"(\" /><text value=\"input, callback\" class=\"params\" /><text value=\") \" /><text value=\"{\" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;We are doubling the input number.&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\" callback(input);\" /><text type=\"break\" /><text value=\"}\" /><text type=\"break\" /><text value=\"doSomeMath(\" /><text value=\"2\" class=\"number\" /><text value=\", multiplyCallback);\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"242\" endIndex=\"258\" /></options></interaction></interactions><output><content><text value=\"We are doubling the input number.\" /><text type=\"break\" /><text value=\"The input doubled is equal to 4\" /></content></output></code><p visible-if=\"wrong\">Make sure to pick <code>multiplyCallback</code>.</p></body></html>"
          },
          {
            "title": "Example: Asynchronous Callback",
            "id": 120755,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Pass the callback function to <code>setTimeout()</code> to complete this asynchronous code.</p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"function\" class=\"keyword\" /><text value=\" \" /><text value=\"callbackFunc\" class=\"title\" /><text value=\"(\" /><text value=\"\" class=\"params\" /><text value=\") \" /><text value=\"{\" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;Executed last because we're using asynchronous code.&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\"}\" /><text type=\"break\" /><text value=\"setTimeout(callbackFunc, \" /><text value=\"1500\" class=\"number\" /><text value=\");\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"'Executed first'\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"'Executed second'\" class=\"string\" /><text value=\");\" /></content><interactions><interaction type=\"validatedInput\" isDefault=\"true\" startIndex=\"109\" endIndex=\"121\" /></interactions></code><p visible-if=\"wrong\">Make sure to type <code>callbackFunc</code>.</p></body></html>"
          }
        ]
      }
    ]
  }
}