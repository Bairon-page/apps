{
  "tutorial": {
    "id": 1378,
    "version": 8,
    "type": "course",
    "isNew": false,
    "codeLanguage": "python",
    "title": "Constructors",
    "descriptionContent": "Constructors",
    "shortDescriptionContent": "",
    "showInTrack": true,
    "iconBanner": null,
    "chapters": [
      {
        "id": 9985,
        "title": "Constructors",
        "type": "practiceLevel1",
        "lessons": [
          {
            "title": "Constructor",
            "id": 88767,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>There's a method we can use that is more flexible when creating different instances from a class. It's called the <strong>constructor</strong> method.</p><code version=\"2\" codelang=\"python\" name=\"script.py\" visible-if=\"always\"><content><text value=\"class\" class=\"keyword\" /><text value=\" \" /><text value=\"Virtual_Pet\" class=\"title\" /><text value=\":\" /><text type=\"break\" /><text value=\"  \" /><text value=\"def\" class=\"keyword\" /><text value=\" \" /><text value=\"__init__\" class=\"title\" /><text value=\"(self, color)\" class=\"params\" /><text value=\":\" /><text type=\"break\" /><text value=\"    self.color = color\" /><text type=\"break\" /><text type=\"break\" /><text value=\"rocky = Virtual_Pet(\" /><text value=\"&quot;brown&quot;\" class=\"string\" /><text value=\")\" /><text type=\"break\" /><text value=\"benny = Virtual_Pet(\" /><text value=\"&quot;black&quot;\" class=\"string\" /><text value=\")\" /><text type=\"break\" /><text type=\"break\" /><text value=\"print(rocky.color)\" /><text type=\"break\" /><text value=\"print(benny.color)\" /></content><output><content><text value=\"brown\" /><text type=\"break\" /><text value=\"black\" /></content></output></code></body></html>"
          },
          {
            "title": "Constructor",
            "id": 89355,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>The constructor method looks like <code>__init__()</code> and allows us to set unique values for the class variables when we create an instance.</p><p>Make sure to use double underscores on each side of <code>init</code>.</p><code version=\"2\" codelang=\"python\" name=\"script.py\" visible-if=\"always\"><content><text value=\"class\" class=\"keyword\" /><text value=\" \" /><text value=\"Virtual_Pet\" class=\"title\" /><text value=\":\" /><text type=\"break\" /><text value=\"  \" /><text value=\"def\" class=\"keyword\" /><text value=\" \" /><text value=\"__init__\" class=\"title\" /><text value=\"(self, color)\" class=\"params\" /><text value=\":\" /><text type=\"break\" /><text value=\"    self.color = color\" /><text type=\"break\" /><text type=\"break\" /><text value=\"rocky = Virtual_Pet(\" /><text value=\"&quot;red&quot;\" class=\"string\" /><text value=\")\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"25\" endIndex=\"33\" /></options></interaction></interactions></code><p visible-if=\"wrong\">Make sure to pick <code>__init__</code>.</p></body></html>"
          },
          {
            "title": "Constructor",
            "id": 89359,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Instead of a class definition that will always have the same color, a constructor method allows us to specify what we want when creating it.</p><code version=\"2\" codelang=\"python\" name=\"script.py\" visible-if=\"always\"><content><text value=\"class\" class=\"keyword\" /><text value=\" \" /><text value=\"Virtual_Pet\" class=\"title\" /><text value=\":\" /><text type=\"break\" /><text value=\"  \" /><text value=\"def\" class=\"keyword\" /><text value=\" \" /><text value=\"__init__\" class=\"title\" /><text value=\"(self, color)\" class=\"params\" /><text value=\":\" /><text type=\"break\" /><text value=\"    self.color = color\" /><text type=\"break\" /><text type=\"break\" /><text value=\"rocky = Virtual_Pet(\" /><text value=\"&quot;red&quot;\" class=\"string\" /><text value=\")\" /></content></code></body></html>"
          },
          {
            "title": "Constructor",
            "id": 89360,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>When we create an instance from the class definition, we're able to pass unique values inside the parentheses, like with <code>yellow</code> here.</p><code version=\"2\" codelang=\"python\" name=\"script.py\" visible-if=\"always\"><content><text value=\"class\" class=\"keyword\" /><text value=\" \" /><text value=\"Virtual_Pet\" class=\"title\" /><text value=\":\" /><text type=\"break\" /><text value=\"  \" /><text value=\"def\" class=\"keyword\" /><text value=\" \" /><text value=\"__init__\" class=\"title\" /><text value=\"(self, color)\" class=\"params\" /><text value=\":\" /><text type=\"break\" /><text value=\"    self.color = color\" /><text type=\"break\" /><text type=\"break\" /><text value=\"rocky = Virtual_Pet(\" /><text value=\"&quot;yellow&quot;\" class=\"string\" /><text value=\")\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"92\" endIndex=\"93\" /><option startIndex=\"93\" endIndex=\"99\" /><option startIndex=\"99\" endIndex=\"100\" /></options></interaction></interactions></code><p visible-if=\"wrong\">Make sure to pick <code>\"</code>, followed by <code>yellow</code>, and finally <code>\"</code>.</p></body></html>"
          },
          {
            "title": "Constructor",
            "id": 89354,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>To add this flexibility to our classes, we start by adding the construction function, which looks like <code>__init__()</code>.</p><code version=\"2\" codelang=\"python\" name=\"script.py\" visible-if=\"always\"><content><text value=\"class\" class=\"keyword\" /><text value=\" \" /><text value=\"Virtual_Pet\" class=\"title\" /><text value=\":\" /><text type=\"break\" /><text value=\"  \" /><text value=\"def\" class=\"keyword\" /><text value=\" \" /><text value=\"__init__\" class=\"title\" /><text value=\"()\" class=\"params\" /><text value=\":\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"25\" endIndex=\"33\" /><option startIndex=\"33\" endIndex=\"34\" /><option startIndex=\"34\" endIndex=\"35\" /></options></interaction></interactions></code><p visible-if=\"wrong\">Make sure to pick <code>__init__</code>, followed by <code>(</code>, and finally <code>)</code>.</p></body></html>"
          },
          {
            "title": "Constructor",
            "id": 89357,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Just like with regular class methods, we need to add <code>self</code> as the first parameter to the constructor method.</p><code version=\"2\" codelang=\"python\" name=\"script.py\" visible-if=\"always\"><content><text value=\"class\" class=\"keyword\" /><text value=\" \" /><text value=\"Virtual_Pet\" class=\"title\" /><text value=\":\" /><text type=\"break\" /><text value=\"  \" /><text value=\"def\" class=\"keyword\" /><text value=\" \" /><text value=\"__init__\" class=\"title\" /><text value=\"(self)\" class=\"params\" /><text value=\":\" /></content><interactions><interaction type=\"validatedInput\" isDefault=\"true\" startIndex=\"34\" endIndex=\"38\" /></interactions></code><p visible-if=\"wrong\">Make sure to type <code>self</code>.</p></body></html>"
          },
          {
            "title": "Constructor",
            "id": 89362,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Next, we add the parameters for the custom values we want to set when we create the instance, like with <code>color</code> here.</p><code version=\"2\" codelang=\"python\" name=\"script.py\" visible-if=\"always\"><content><text value=\"class\" class=\"keyword\" /><text value=\" \" /><text value=\"Virtual_Pet\" class=\"title\" /><text value=\":\" /><text type=\"break\" /><text value=\"  \" /><text value=\"def\" class=\"keyword\" /><text value=\" \" /><text value=\"__init__\" class=\"title\" /><text value=\"(self, color)\" class=\"params\" /><text value=\":\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"40\" endIndex=\"45\" /><option correct=\"false\"><content><text value=\"self\" /></content></option><option startIndex=\"34\" endIndex=\"39\" /></options></interaction></interactions></code><p visible-if=\"wrong\">Make sure to pick <code>self,</code>, followed by <code>color</code>.</p></body></html>"
          },
          {
            "title": "Constructor",
            "id": 89363,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Then we set the value by coding <code>self</code>, a <code>.</code>, the parameter name, and then equating it to the parameter name again. This sets the value.</p><code version=\"2\" codelang=\"python\" name=\"script.py\" visible-if=\"always\"><content><text value=\"class\" class=\"keyword\" /><text value=\" \" /><text value=\"Virtual_Pet\" class=\"title\" /><text value=\":\" /><text type=\"break\" /><text value=\"  \" /><text value=\"def\" class=\"keyword\" /><text value=\" \" /><text value=\"__init__\" class=\"title\" /><text value=\"(self, color)\" class=\"params\" /><text value=\":\" /><text type=\"break\" /><text value=\"    self.color = color\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"52\" endIndex=\"56\" /><option startIndex=\"56\" endIndex=\"57\" /><option startIndex=\"57\" endIndex=\"62\" /></options></interaction></interactions></code><p visible-if=\"wrong\">Make sure to pick <code>self</code>, followed by <code>.</code>, and finally <code>color</code>.</p></body></html>"
          },
          {
            "title": "Constructor",
            "id": 89041,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>When we create an instance from the class definition, we add the values we want to set inside parentheses, like here with <code>\"red\"</code>.</p><code version=\"2\" codelang=\"python\" name=\"script.py\" visible-if=\"always\"><content><text value=\"class\" class=\"keyword\" /><text value=\" \" /><text value=\"Virtual_Pet\" class=\"title\" /><text value=\":\" /><text type=\"break\" /><text value=\"  \" /><text value=\"def\" class=\"keyword\" /><text value=\" \" /><text value=\"__init__\" class=\"title\" /><text value=\"(self, color)\" class=\"params\" /><text value=\":\" /><text type=\"break\" /><text value=\"    self.color = color\" /><text type=\"break\" /><text type=\"break\" /><text value=\"rocky = Virtual_Pet(\" /><text value=\"&quot;red&quot;\" class=\"string\" /><text value=\")\" /><text type=\"break\" /><text value=\"print(rocky.color)\" /></content><interactions><interaction type=\"validatedInput\" isDefault=\"true\" startIndex=\"92\" endIndex=\"97\" /></interactions><output><content><text value=\"red\" /></content></output></code><p visible-if=\"wrong\">Make sure to type <code>\"red\"</code>.</p></body></html>"
          },
          {
            "title": "Constructor",
            "id": 89358,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>The constructor method helps us construct the instances of our class the way we want. We're able to add as many parameters as we want.</p><code version=\"2\" codelang=\"python\" name=\"script.py\" visible-if=\"always\"><content><text value=\"class\" class=\"keyword\" /><text value=\" \" /><text value=\"Virtual_Pet\" class=\"title\" /><text value=\":\" /><text type=\"break\" /><text value=\"  \" /><text value=\"def\" class=\"keyword\" /><text value=\" \" /><text value=\"__init__\" class=\"title\" /><text value=\"(self, color, legs)\" class=\"params\" /><text value=\":\" /><text type=\"break\" /><text value=\"    self.color = color\" /><text type=\"break\" /><text value=\"    self.legs = legs\" /><text type=\"break\" /><text value=\"    \" /><text type=\"break\" /><text value=\"rocky = Virtual_Pet(\" /><text value=\"&quot;red&quot;\" class=\"string\" /><text value=\", \" /><text value=\"4\" class=\"number\" /><text value=\")\" /><text type=\"break\" /><text value=\"print(rocky.color)\" /><text type=\"break\" /><text value=\"print(rocky.legs)\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"40\" endIndex=\"46\" /><option startIndex=\"47\" endIndex=\"51\" /></options></interaction></interactions><output><content><text value=\"red\" /><text type=\"break\" /><text value=\"4\" /></content></output></code><p visible-if=\"wrong\">Make sure to pick <code>color,</code>, followed by <code>legs</code>.</p></body></html>"
          },
          {
            "title": "Outside of constructors",
            "id": 88770,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>We can access the parameters from other places in the class definition by using <code>self</code>, like <code>self.color</code> here.</p><code version=\"2\" codelang=\"python\" name=\"script.py\" visible-if=\"always\"><content><text value=\"class\" class=\"keyword\" /><text value=\" \" /><text value=\"Flower\" class=\"title\" /><text value=\":\" /><text type=\"break\" /><text value=\"  \" /><text value=\"def\" class=\"keyword\" /><text value=\" \" /><text value=\"__init__\" class=\"title\" /><text value=\"(self, kind, color)\" class=\"params\" /><text value=\":\" /><text type=\"break\" /><text value=\"   self.kind = kind\" /><text type=\"break\" /><text value=\"   self.color = color\" /><text type=\"break\" /><text type=\"break\" /><text value=\"  \" /><text value=\"def\" class=\"keyword\" /><text value=\" \" /><text value=\"display_color\" class=\"title\" /><text value=\"(self)\" class=\"params\" /><text value=\":\" /><text type=\"break\" /><text value=\"    print(self.color)\" /><text type=\"break\" /><text type=\"break\" /><text value=\"rose_flower = Flower(\" /><text value=\"&quot;rose&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;red&quot;\" class=\"string\" /><text value=\")\" /><text type=\"break\" /><text value=\"print(rose_flower.kind)\" /><text type=\"break\" /><text value=\"rose_flower.display_color()\" /></content><interactions><interaction type=\"validatedInput\" isDefault=\"true\" startIndex=\"129\" endIndex=\"139\" /></interactions><output><content><text value=\"rose\" /><text type=\"break\" /><text value=\"red\" /></content></output></code><p visible-if=\"wrong\">Make sure to type <code>self.color</code>.</p></body></html>"
          },
          {
            "title": "Question 1",
            "id": 88786,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>What is the purpose of a constructor?</p><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\">To construct an instance of a class object with unique class variables</item><item value=\"2\" correct=\"false\">To create a method for a class object</item></selection><p visible-if=\"wrong\">To construct an instance of a class object with unique class variables.</p></body></html>"
          },
          {
            "title": "Question 2",
            "id": 88789,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>How do we define the constructor method?</p><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\"><code>def __init__(self):</code></item><item value=\"4\" correct=\"false\"><code>def init(self):</code></item></selection><p visible-if=\"wrong\"><code>def __init__(self):</code>.</p></body></html>"
          },
          {
            "title": "Question 3",
            "id": 88791,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>When do we use the keyword <code>self</code>?</p><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\">When we need to access class variables or methods inside the class definition</item><item value=\"2\" correct=\"false\">We don't use the keyword <code>self</code></item></selection><p visible-if=\"wrong\">When we need to access class variables or methods inside the class definition.</p></body></html>"
          },
          {
            "title": "Question 4",
            "id": 89483,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Can we use parameters when defining the constructor method?</p><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\">Yes, we set values for the parameters when creating an instance</item><item value=\"2\" correct=\"false\">We cannot use parameters in the init function</item></selection><p visible-if=\"wrong\">Yes, we set values for the parameters when creating an instance.</p></body></html>"
          },
          {
            "title": "Example 1",
            "id": 89484,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Add the constructor method to the following class definition.</p><code version=\"2\" codelang=\"python\" name=\"script.py\" visible-if=\"always\"><content><text value=\"class\" class=\"keyword\" /><text value=\" \" /><text value=\"Pokemon\" class=\"title\" /><text value=\":\" /><text type=\"break\" /><text value=\"  \" /><text value=\"def\" class=\"keyword\" /><text value=\" \" /><text value=\"__init__\" class=\"title\" /><text value=\"(self)\" class=\"params\" /><text value=\":\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"17\" endIndex=\"20\" /><option startIndex=\"21\" endIndex=\"29\" /><option startIndex=\"29\" endIndex=\"30\" /><option startIndex=\"30\" endIndex=\"34\" /><option startIndex=\"34\" endIndex=\"35\" /></options></interaction></interactions></code><p visible-if=\"wrong\">Make sure to pick <code>def</code> followed by <code>__init__</code> and then <code>(</code>, <code>self</code>, <code>)</code>.</p></body></html>"
          },
          {
            "title": "Example 2",
            "id": 89485,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Add two parameters to the constructor method, <code>color</code> and <code>name</code>.</p><code version=\"2\" codelang=\"python\" name=\"script.py\" visible-if=\"always\"><content><text value=\"class\" class=\"keyword\" /><text value=\" \" /><text value=\"Pokemon\" class=\"title\" /><text value=\":\" /><text type=\"break\" /><text value=\"  \" /><text value=\"def\" class=\"keyword\" /><text value=\" \" /><text value=\"__init__\" class=\"title\" /><text value=\"(self, color, name)\" class=\"params\" /><text value=\":\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"43\" endIndex=\"47\" /><option startIndex=\"36\" endIndex=\"42\" /></options></interaction></interactions></code><p visible-if=\"wrong\">Make sure to pick <code>color,</code>, followed by <code>name</code>.</p></body></html>"
          },
          {
            "title": "Example 3",
            "id": 89486,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Set the class variables to be the parameters of the constructor method using the keyword <code>self</code>.</p><code version=\"2\" codelang=\"python\" name=\"script.py\" visible-if=\"always\"><content><text value=\"class\" class=\"keyword\" /><text value=\" \" /><text value=\"Pokemon\" class=\"title\" /><text value=\":\" /><text type=\"break\" /><text value=\"  \" /><text value=\"def\" class=\"keyword\" /><text value=\" \" /><text value=\"__init__\" class=\"title\" /><text value=\"(self, color, name)\" class=\"params\" /><text value=\":\" /><text type=\"break\" /><text value=\"    self.color = color\" /><text type=\"break\" /><text value=\"    self.name = name\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"54\" endIndex=\"58\" /><option startIndex=\"58\" endIndex=\"59\" /><option startIndex=\"67\" endIndex=\"72\" /><option startIndex=\"87\" endIndex=\"88\" /><option startIndex=\"89\" endIndex=\"93\" /></options></interaction></interactions></code><p visible-if=\"wrong\">Make sure to pick <code>self</code> followed by <code>.</code> and then <code>color</code>, <code>=</code>, <code>name</code>.</p></body></html>"
          },
          {
            "title": "Example 4",
            "id": 89487,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Using the constructor, create a Pokemon instance that has the color <code>\"orange\"</code> and the name <code>\"charizard\"</code>.</p><code version=\"2\" codelang=\"python\" name=\"script.py\" visible-if=\"always\"><content><text value=\"class\" class=\"keyword\" /><text value=\" \" /><text value=\"Pokemon\" class=\"title\" /><text value=\":\" /><text type=\"break\" /><text value=\"  \" /><text value=\"def\" class=\"keyword\" /><text value=\" \" /><text value=\"__init__\" class=\"title\" /><text value=\"(self, color, name)\" class=\"params\" /><text value=\":\" /><text type=\"break\" /><text value=\"    self.color = color\" /><text type=\"break\" /><text value=\"    self.name = name\" /><text type=\"break\" /><text type=\"break\" /><text value=\"charizard = Pokemon(\" /><text value=\"&quot;orange&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;charizard&quot;\" class=\"string\" /><text value=\")\" /><text type=\"break\" /><text value=\"print(charizard.color)\" /><text type=\"break\" /><text value=\"print(charizard.name)\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"107\" endIndex=\"114\" /><option startIndex=\"114\" endIndex=\"115\" /><option startIndex=\"115\" endIndex=\"123\" /><option startIndex=\"123\" endIndex=\"124\" /><option startIndex=\"125\" endIndex=\"136\" /><option startIndex=\"136\" endIndex=\"137\" /><option correct=\"false\"><content><text value=\"[\" /></content></option><option correct=\"false\"><content><text value=\"]\" /></content></option></options></interaction></interactions><output><content><text value=\"orange\" /><text type=\"break\" /><text value=\"charizard\" /></content></output></code><p visible-if=\"wrong\">Make sure to pick <code>Pokemon</code> followed by <code>(</code> and then <code>\"orange\"</code>, <code>,</code>, <code>\"charizard\"</code>, <code>)</code>.</p></body></html>"
          }
        ]
      }
    ]
  }
}