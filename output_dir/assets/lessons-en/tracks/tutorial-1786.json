{
  "tutorial": {
    "id": 1786,
    "version": 9,
    "type": "guidedProjectOptional",
    "isNew": false,
    "codeLanguage": "javascript",
    "title": "Adventure Game",
    "descriptionContent": "Use your knowledge about overriding methods to simulate a character interaction in a game",
    "shortDescriptionContent": "",
    "showInTrack": true,
    "iconBanner": "tutorial-1786-icon-banner.svg",
    "chapters": [
      {
        "id": 11785,
        "title": "Adventure Game",
        "type": "practiceLevel3",
        "lessons": [
          {
            "title": "Create a class",
            "id": 108520,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Joe is involved in developing an adventure game. He's in charge of the human and pirate characters. We'll give him a hand in customizing the characters' behaviors.\n\nLet's start by creating a class for our characters. \n\n1. Create a class `Human` to represent all characters.\n2. Give it an empty constructor.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "",
                  "solvedContent": "class Human {\n  constructor() {}\n}"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Class Properties",
            "id": 108521,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Let's add a property to our defined class so that we can tell who our characters are.\n\n1. Add a `name` parameter to your constructor.\n2. Give the `Human` class ` name` property, and set it to the value of the `name` parameter. ",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "class Human {\n  constructor() {}\n}",
                  "solvedContent": "class Human {\n  constructor(name) {\n    this.name = name;\n  }\n}"
                }
              ],
              "hints": [
                {
                  "title": "Hint",
                  "content": "The syntax for adding a property to a class is:\n```JS\nclass className {\n   constructor(property){\n     this.property = property;\n    }\n}\n```"
                }
              ]
            }
          },
          {
            "title": "Class Methods",
            "id": 108522,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Since this is a multi-player game, we want the characters to interact with each other. Let's create a method to take care of this.\n\n1. Create a `say` method that takes in `stuff` as a parameter.\n2. Add a statement which displays `stuff`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "class Human {\n  constructor(name) {\n    this.name = name;\n  }\n}",
                  "solvedContent": "class Human {\n  constructor(name) {\n    this.name = name;\n  }\n  say(stuff) {\n    console.log(stuff);\n  }\n}"
                }
              ],
              "hints": [
                {
                  "title": "Hint",
                  "content": "The syntax for adding a method to a class is:\n```JS\nclass className {\n   constructor(){}\n   method(parameter){\n   }\n}"
                }
              ]
            }
          },
          {
            "title": "Display contents",
            "id": 108524,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "In order to better track the dialogue between characters, we want to display their name to know who spoke.\n\n1. Update `say` so it displays the user name as well as what the user says. For example, for a user `\"Joe\"` saying `\"hi\"`, we should read:\n\n```\nJoe: hi\n```",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "class Human {\n  constructor(name) {\n    this.name = name;\n  }\n  say(stuff) {\n    console.log(stuff);\n  }\n}",
                  "solvedContent": "class Human {\n  constructor(name) {\n    this.name = name;\n  }\n  say(stuff) {\n    console.log(this.name + \": \" + stuff);\n  }\n}"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Pirate",
            "id": 108525,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Next, we'll be working on the pirate character. Let's start by creating a class for pirates.\n\n1. Create a `Pirate` class as a direct extension of the `Human` class.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "class Human {\n  constructor(name) {\n    this.name = name;\n  }\n  say(stuff) {\n    console.log(this.name + \": \" + stuff);\n  }\n}",
                  "solvedContent": "class Human {\n  constructor(name) {\n    this.name = name;\n  }\n  say(stuff) {\n    console.log(this.name + \": \" + stuff);\n  }\n}\nclass Pirate extends Human {}"
                }
              ],
              "hints": [
                {
                  "title": "Hint",
                  "content": "The syntax for creating an extended class is:\n```JS\nclass className extends extendedClass {\n}\n```"
                }
              ]
            }
          },
          {
            "title": "Override",
            "id": 108526,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Next, we'll work on customising our `Pirate` class. \n\n1. Override the `say` method in the `Pirate` class.\n2. Use `super` to add the superclass's `say` method functionality as part of the override.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "class Human {\n  constructor(name) {\n    this.name = name;\n  }\n  say(stuff) {\n    console.log(this.name + \": \" + stuff);\n  }\n}\nclass Pirate extends Human {}",
                  "solvedContent": "class Human {\n  constructor(name) {\n    this.name = name;\n  }\n  say(stuff) {\n    console.log(this.name + \": \" + stuff);\n  }\n}\nclass Pirate extends Human {\n  say(stuff) {\n   super.say(stuff);\n  }\n}"
                }
              ],
              "hints": [
                {
                  "title": "Hint",
                  "content": "To override a method, you should redefine it again in one of its extended class.\n```JS\nclass extendedClass {\n   method(parameter){\n    }\n}\n\nclass className extends extendedClass {\n  method(parameter){\n   }\n}\n```"
                }
              ]
            }
          },
          {
            "title": "Yarr!",
            "id": 108528,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Whenever a pirate says something, they finish with `\"Yarr!\"`. Let's update our `say` method to reflect that peculiarity.\n\n1. Add a line to display the `name` property along with `\"Yarr!\"`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "class Human {\n  constructor(name) {\n    this.name = name;\n  }\n  say(stuff) {\n    console.log(this.name + \": \" + stuff);\n  }\n}\nclass Pirate extends Human {\n  say(stuff) {\n    super.say(stuff);\n  }\n}",
                  "solvedContent": "class Human {\n  constructor(name) {\n    this.name = name;\n  }\n  say(stuff) {\n    console.log(this.name + \": \" + stuff);\n  }\n}\nclass Pirate extends Human {\n  say(stuff) {\n    super.say(stuff);\n    console.log(this.name + \": Yarr!\");\n  }\n}"
                }
              ],
              "hints": [
                {
                  "title": "Hint",
                  "content": "For a pirate 'John' saying 'I am the captain', we should read :\n\n'John: I am the captain '\n'John: Yarr!'"
                }
              ]
            }
          },
          {
            "title": "Frances",
            "id": 108529,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Let's create our first character.\n\n1. Create a variable called `human`.\n2. Create an instance of `Human` named `\"Frances\"` and store it in the variable.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "class Human {\n  constructor(name) {\n    this.name = name;\n  }\n  say(stuff) {\n    console.log(this.name + \": \" + stuff);\n  }\n}\nclass Pirate extends Human {\n  say(stuff) {\n    super.say(stuff);\n    console.log(this.name + \": Yarr!\");\n  }\n}",
                  "solvedContent": "class Human {\n  constructor(name) {\n    this.name = name;\n  }\n  say(stuff) {\n    console.log(this.name + \": \" + stuff);\n  }\n}\nclass Pirate extends Human {\n  say(stuff) {\n    super.say(stuff);\n    console.log(this.name + \": Yarr!\");\n  }\n}\nconst human = new Human(\"Frances\");"
                }
              ],
              "hints": [
                {
                  "title": "Hint",
                  "content": "The syntax for adding an instance of a class is:\n```JS\nconst instance = new className();\n```"
                }
              ]
            }
          },
          {
            "title": "Long John",
            "id": 108530,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Now, let's create our first pirate.\n\n1. Next, create a variable called `pirate`.\n2. Create an instance of `Pirate` named `\"Long John\"` and store it in the variable.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "class Human {\n  constructor(name) {\n    this.name = name;\n  }\n  say(stuff) {\n    console.log(this.name + \": \" + stuff);\n  }\n}\nclass Pirate extends Human {\n  say(stuff) {\n    super.say(stuff);\n    console.log(this.name + \": Yarr!\");\n  }\n}\nconst human = new Human(\"Frances\");",
                  "solvedContent": "class Human {\n  constructor(name) {\n    this.name = name;\n  }\n  say(stuff) {\n    console.log(this.name + \": \" + stuff);\n  }\n}\nclass Pirate extends Human {\n  say(stuff) {\n    super.say(stuff);\n    console.log(this.name + \": Yarr!\");\n  }\n}\nconst human = new Human(\"Frances\");\nconst pirate = new Pirate(\"Long John\");"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Frances says",
            "id": 108531,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Now let's have the characters communicate with each other.\n\n1. Use a method to have Frances say `\"G'day, Sir!\"`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "class Human {\n  constructor(name) {\n    this.name = name;\n  }\n  say(stuff) {\n    console.log(this.name + \": \" + stuff);\n  }\n}\nclass Pirate extends Human {\n  say(stuff) {\n    super.say(stuff);\n    console.log(this.name + \": Yarr!\");\n  }\n}\nconst human = new Human(\"Frances\");\nconst pirate = new Pirate(\"Long John\");",
                  "solvedContent": "class Human {\n  constructor(name) {\n    this.name = name;\n  }\n  say(stuff) {\n    console.log(this.name + \": \" + stuff);\n  }\n}\nclass Pirate extends Human {\n  say(stuff) {\n    super.say(stuff);\n    console.log(this.name + \": Yarr!\");\n  }\n}\nconst human = new Human(\"Frances\");\nconst pirate = new Pirate(\"Long John\");\nhuman.say(\"Good day, Sir!\");"
                }
              ],
              "hints": [
                {
                  "title": "Hint",
                  "content": "The syntax for using a method is:\n```JS\n    instance.method(value)\n```"
                }
              ]
            }
          },
          {
            "title": "Long John says",
            "id": 108532,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Let's respond to Frances's greeting.\n\n1. Use a method to have your pirate respond `\"Ahoy!\"`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "class Human {\n  constructor(name) {\n    this.name = name;\n  }\n  say(stuff) {\n    console.log(this.name + \": \" + stuff);\n  }\n}\nclass Pirate extends Human {\n  say(stuff) {\n    super.say(stuff);\n    console.log(this.name + \": Yarr!\");\n  }\n}\nconst human = new Human(\"Frances\");\nconst pirate = new Pirate(\"Long John\");\nhuman.say(\"Good day, sir!\");",
                  "solvedContent": "class Human {\n  constructor(name) {\n    this.name = name;\n  }\n  say(stuff) {\n    console.log(this.name + \": \" + stuff);\n  }\n}\nclass Pirate extends Human {\n  say(stuff) {\n    super.say(stuff);\n    console.log(this.name + \": Yarr!\");\n  }\n}\nconst human = new Human(\"Frances\");\nconst pirate = new Pirate(\"Long John\");\nhuman.say(\"Good day, sir!\");\npirate.say(\"Ahoy!\");"
                }
              ],
              "hints": []
            }
          }
        ]
      }
    ]
  }
}