{
  "tutorial": {
    "id": 1914,
    "version": 11,
    "type": "guidedProjectOptional",
    "isNew": false,
    "codeLanguage": "jsx",
    "title": "Single Page Application",
    "descriptionContent": "Use React to create a basic single page application website",
    "shortDescriptionContent": "",
    "showInTrack": true,
    "iconBanner": "tutorial-1914-icon-banner.svg",
    "chapters": [
      {
        "id": 12483,
        "title": "Single Page Application",
        "type": "practiceLevel3",
        "lessons": [
          {
            "title": "Step 1 - Preparation",
            "id": 114677,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "In this project, we'll work on the **Camera Tips** website, which four webpages: `Home`, `ShutterSpeed`, `Aperture`, and `ISO`. These pages are represented as functional components inside the file `pages.jsx`.\n\nThe `App` component inside `index.jsx` is the parent component. All four webpages will be rendered inside of `index.jsx`. For now, we need to import the four webpages into `index.jsx`.\n\n1. `import` the four components from `pages.jsx` into `index.jsx`.\n2. For now, add only the `<Home />` component underneath the `<h1>` heading element inside of  `App`.",
              "preselectedFileIndex": 1,
              "hasVisualOutput": true,
              "files": [
                {
                  "name": "index.html",
                  "codeLanguage": "html",
                  "content": "<!doctype html>\n<html>\n  <head>\n    <style>\n      html,\n      body {\n        margin: 0;\n        padding: 0;\n        background-color: #fefef1;\n      }\n      \n      a {\n        text-decoration: underline;\n        color: blue;\n      }\n      \n      a:hover {\n        cursor: pointer;\n      }\n    </style>\n    <script type=\"module\" src=\"./index.js\"></script>\n  </head>\n  <body>\n    <div id=\"root\"></div>\n  </body>\n</html>",
                  "solvedContent": null
                },
                {
                  "name": "index.jsx",
                  "codeLanguage": "jsx",
                  "content": "import React from \"react\";\nimport { createRoot } from \"react-dom/client\";\n\nimport { wrapperStyle } from \"./styles.jsx\";\n\nconst App = () => {\n  return (\n    <div style={wrapperStyle.wrapper}>\n      <h1>Camera Tips</h1>\n    </div>\n  );\n};\n\nconst rootElement = document.getElementById(\"root\");\nconst root = createRoot(rootElement);\nroot.render(<App />);\n\nexport default App;",
                  "solvedContent": "import React from \"react\";\nimport { createRoot } from \"react-dom/client\";\n\nimport { wrapperStyle } from \"./styles.jsx\";\nimport { Home, Aperture, ShutterSpeed, ISO } from \"./pages.jsx\";\n\nconst App = () => {\n  return (\n    <div style={wrapperStyle.wrapper}>\n      <h1>Camera Tips</h1>\n      <Home />\n    </div>\n  );\n};\n\nconst rootElement = document.getElementById(\"root\");\nconst root = createRoot(rootElement);\nroot.render(<App />);\n\nexport default App;"
                },
                {
                  "name": "pages.jsx",
                  "codeLanguage": "jsx",
                  "content": "import React from \"react\";\nimport { pageStyle } from \"./styles\";\n\nconst Home = () => {\n  return (\n    <div>\n      <p>\n        Want a quick guide on how to take good photos? Confused about photo\n        terms? You've come to the right place!\n      </p>\n    </div>\n  );\n};\n\nconst ShutterSpeed = () => {\n  return (\n    <div>\n      <h3>Shutter Speed</h3>\n      <p>\n        <strong>Shutter Speed</strong> is how quickly your camera takes the\n        picture.\n      </p>\n      <div style={pageStyle.table}>\n        <div style={pageStyle.row}>\n          <div style={pageStyle.column}>\n            <strong>Fast Shutter Speed:</strong>\n          </div>\n          <div style={pageStyle.column}>\n            <strong>Slow Shutter Speed:</strong>\n          </div>\n        </div>\n        <div style={pageStyle.row}>\n          <div style={pageStyle.column}>\n            Clearer subjects when they are moving. Darker picture because less\n            light can enter your camera.\n          </div>\n          <div style={pageStyle.column}>\n            Blurrier subjects when they are moving. Brighter pictures because\n            more light can enter your camera.\n          </div>\n        </div>\n      </div>\n      <p>\n        A shutter speed of 1/60 is the lowest speed you can get for a bright\n        photo that isn't noticeably blurry.\n      </p>\n    </div>\n  );\n};\n\nconst Aperture = () => {\n  return (\n    <div>\n      <h3>Aperture</h3>\n      <p>\n        The <strong>Aperture</strong> is the camera lens' opening that allows\n        light in. The measurement of that opening is called the{\" \"}\n        <strong>F-Stop</strong>. The Aperture and F-Stop are inversely\n        proportional.\n      </p>\n      <div style={pageStyle.table}>\n        <div style={pageStyle.row}>\n          <div style={pageStyle.column}>\n            <strong>Low F-Stop / High Aperture:</strong>\n          </div>\n          <div style={pageStyle.column}>\n            <strong>High F-Stop / Low Aperture:</strong>\n          </div>\n        </div>\n        <div style={pageStyle.row}>\n          <div style={pageStyle.column}>\n            Your Depth of Field is very narrow; your pictures will be brighter\n            and will have foreground and background blur.\n          </div>\n          <div style={pageStyle.column}>\n            Your Depth of Field is very wide; your pictures will be darker but\n            will have less blurred backgrounds and foregrounds.\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nconst ISO = () => {\n  return (\n    <div>\n      <h3>ISO</h3>\n      <p>\n        Your camera's <strong>ISO</strong> is a measure of how sensitive your\n        camera's sensors are to light.\n      </p>\n      <p>\n        Increasing your camera's ISO makes your pictures brighter, but it also\n        increases their <strong>noise</strong>, or their grainy-ness. This is\n        why night photos, which usually are taken with high ISO, have black dots\n        when you look closely.\n      </p>\n      <div style={pageStyle.table}>\n        <div style={pageStyle.row}>\n          <div style={pageStyle.column}>\n            <strong>Low ISO:</strong>\n          </div>\n          <div style={pageStyle.column}>\n            <strong>High ISO:</strong>\n          </div>\n        </div>\n        <div style={pageStyle.row}>\n          <div style={pageStyle.column}>\n            Your camera's sensors are not very sensitive, reducing overall\n            brightness. This makes your pictures less noisy though.\n          </div>\n          <div style={pageStyle.column}>\n            Your camera's sensors are very sensitive to light, meaning brighter\n            images. However, this make your pictures more noisy.\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport { Home, Aperture, ShutterSpeed, ISO };",
                  "solvedContent": null
                },
                {
                  "name": "navigation.jsx",
                  "codeLanguage": "jsx",
                  "content": "import React from \"react\";\nimport { navStyle } from \"./styles.jsx\";\n\nconst Navigation = (props) => {\n  return (\n    <nav style={navStyle.nav}>\n      <button style={navStyle.navLink}>Home</button>\n      <button style={navStyle.navLink}>Aperture</button>\n      <button style={navStyle.navLink}>Shutter Speed</button>\n      <button style={navStyle.navLink}>ISO</button>\n    </nav>\n  );\n};\n\nexport default Navigation;",
                  "solvedContent": null
                },
                {
                  "name": "styles.jsx",
                  "codeLanguage": "jsx",
                  "content": "const wrapperStyle = {\n  wrapper: {\n    width: \"100%\",\n    fontFamily: \"Times New Roman, Verdana, Arial, sans-serif\",\n    fontSize: 16,\n    padding: 16,\n    boxSizing: \"border-box\",\n    textAlign: \"center\",\n  },\n};\n\nconst navStyle = {\n  nav: {\n    textAlign: \"center\",\n    display: \"flex\",\n    flexDirection: \"row\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    flexWrap: \"nowrap\",\n  },\n  navLink: {\n    flexBasis: \"100\",\n    flexShrink: \"1\",\n    margin: 2,\n    paddingLeft: 8,\n    paddingRight: 8,\n    paddingTop: 4,\n    paddingBottom: 4,\n    fontSize: 12,\n  },\n};\n\nconst pageStyle = {\n  table: {\n    width: \"100%\",\n    display: \"flex\",\n    flexDirection: \"column\",\n    flexWrap: \"nowrap\",\n    justifyContent: \"flex-start\",\n    alignItems: \"stretch\",\n  },\n  row: {\n    width: \"100%\",\n    marginBottom: 4,\n    display: \"flex\",\n    flexDirection: \"row\",\n    flexWrap: \"nowrap\",\n    justifyContent: \"space-between\",\n    alignItems: \"flex-start\",\n  },\n  column: {\n    flexBasis: \"50%\",\n    flexShrink: 1,\n    flexGrow: 0,\n    marginLeft: 4,\n    marginRight: 4,\n  },\n};\n\nexport { wrapperStyle, navStyle, pageStyle };",
                  "solvedContent": null
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Step 2 - import `react-router-dom`",
            "id": 114678,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Building an SPA with React is easy to do with `react-router-dom`, an NPM package.  `react-router-dom` renders the JSX based on whatever URL is provided, mimicking normal websites and webpages. However, `react-router-dom` does not require the page to refresh, saving memory and reducing internet traffic.\n\nWe need to import `react-router-dom` into our project, similar to `React` and `ReactDOM`. Specifically, three components from `react-router-dom` are necessary: `BrowserRouter`, `Routes`, and `Route`.\n\n1. From `react-router-dom`,  import the following components: `BrowserRouter`, `Routes`, and `Route`.\n",
              "preselectedFileIndex": 1,
              "hasVisualOutput": true,
              "files": [
                {
                  "name": "index.html",
                  "codeLanguage": "html",
                  "content": "<!doctype html>\n<html>\n  <head>\n    <style>\n      html,\n      body {\n        margin: 0;\n        padding: 0;\n        background-color: #fefef1;\n      }\n      \n      a {\n        text-decoration: underline;\n        color: blue;\n      }\n      \n      a:hover {\n        cursor: pointer;\n      }\n    </style>\n    <script type=\"module\" src=\"./index.js\"></script>\n  </head>\n  <body>\n    <div id=\"root\"></div>\n  </body>\n</html>",
                  "solvedContent": null
                },
                {
                  "name": "index.jsx",
                  "codeLanguage": "jsx",
                  "content": "import React from \"react\";\nimport { createRoot } from \"react-dom/client\";\n\nimport { wrapperStyle } from \"./styles.jsx\";\nimport { Home, Aperture, ShutterSpeed, ISO } from \"./pages.jsx\";\n\nconst App = () => {\n  return (\n    <div style={wrapperStyle.wrapper}>\n      <h1>Camera Tips</h1>\n      <Home />\n    </div>\n  );\n};\n\nconst rootElement = document.getElementById(\"root\");\nconst root = createRoot(rootElement);\nroot.render(<App />);\n\nexport default App;",
                  "solvedContent": "import React from \"react\";\nimport { createRoot } from \"react-dom/client\";\n\nimport { wrapperStyle } from \"./styles.jsx\";\nimport { Home, Aperture, ShutterSpeed, ISO } from \"./pages.jsx\";\nimport { BrowserRouter, Routes, Route } from \"react-router-dom\";\n\nconst App = () => {\n  return (\n    <div style={wrapperStyle.wrapper}>\n      <h1>Camera Tips</h1>\n      <Home />\n    </div>\n  );\n};\n\nconst rootElement = document.getElementById(\"root\");\nconst root = createRoot(rootElement);\nroot.render(<App />);\n\nexport default App;"
                },
                {
                  "name": "pages.jsx",
                  "codeLanguage": "jsx",
                  "content": "import React from \"react\";\nimport { pageStyle } from \"./styles\";\n\nconst Home = () => {\n  return (\n    <div>\n      <p>\n        Want a quick guide on how to take good photos? Confused about photo\n        terms? You've come to the right place!\n      </p>\n    </div>\n  );\n};\n\nconst ShutterSpeed = () => {\n  return (\n    <div>\n      <h3>Shutter Speed</h3>\n      <p>\n        <strong>Shutter Speed</strong> is how quickly your camera takes the\n        picture.\n      </p>\n      <div style={pageStyle.table}>\n        <div style={pageStyle.row}>\n          <div style={pageStyle.column}>\n            <strong>Fast Shutter Speed:</strong>\n          </div>\n          <div style={pageStyle.column}>\n            <strong>Slow Shutter Speed:</strong>\n          </div>\n        </div>\n        <div style={pageStyle.row}>\n          <div style={pageStyle.column}>\n            Clearer subjects when they are moving. Darker picture because less\n            light can enter your camera.\n          </div>\n          <div style={pageStyle.column}>\n            Blurrier subjects when they are moving. Brighter pictures because\n            more light can enter your camera.\n          </div>\n        </div>\n      </div>\n      <p>\n        A shutter speed of 1/60 is the lowest speed you can get for a bright\n        photo that isn't noticeably blurry.\n      </p>\n    </div>\n  );\n};\n\nconst Aperture = () => {\n  return (\n    <div>\n      <h3>Aperture</h3>\n      <p>\n        The <strong>Aperture</strong> is the camera lens' opening that allows\n        light in. The measurement of that opening is called the{\" \"}\n        <strong>F-Stop</strong>. The Aperture and F-Stop are inversely\n        proportional.\n      </p>\n      <div style={pageStyle.table}>\n        <div style={pageStyle.row}>\n          <div style={pageStyle.column}>\n            <strong>Low F-Stop / High Aperture:</strong>\n          </div>\n          <div style={pageStyle.column}>\n            <strong>High F-Stop / Low Aperture:</strong>\n          </div>\n        </div>\n        <div style={pageStyle.row}>\n          <div style={pageStyle.column}>\n            Your Depth of Field is very narrow; your pictures will be brighter\n            and will have foreground and background blur.\n          </div>\n          <div style={pageStyle.column}>\n            Your Depth of Field is very wide; your pictures will be darker but\n            will have less blurred backgrounds and foregrounds.\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nconst ISO = () => {\n  return (\n    <div>\n      <h3>ISO</h3>\n      <p>\n        Your camera's <strong>ISO</strong> is a measure of how sensitive your\n        camera's sensors are to light.\n      </p>\n      <p>\n        Increasing your camera's ISO makes your pictures brighter, but it also\n        increases their <strong>noise</strong>, or their grainy-ness. This is\n        why night photos, which usually are taken with high ISO, have black dots\n        when you look closely.\n      </p>\n      <div style={pageStyle.table}>\n        <div style={pageStyle.row}>\n          <div style={pageStyle.column}>\n            <strong>Low ISO:</strong>\n          </div>\n          <div style={pageStyle.column}>\n            <strong>High ISO:</strong>\n          </div>\n        </div>\n        <div style={pageStyle.row}>\n          <div style={pageStyle.column}>\n            Your camera's sensors are not very sensitive, reducing overall\n            brightness. This makes your pictures less noisy though.\n          </div>\n          <div style={pageStyle.column}>\n            Your camera's sensors are very sensitive to light, meaning brighter\n            images. However, this make your pictures more noisy.\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport { Home, Aperture, ShutterSpeed, ISO };",
                  "solvedContent": null
                },
                {
                  "name": "navigation.jsx",
                  "codeLanguage": "jsx",
                  "content": "import React from \"react\";\nimport { navStyle } from \"./styles.jsx\";\n\nconst Navigation = (props) => {\n  return (\n    <nav style={navStyle.nav}>\n      <button style={navStyle.navLink}>Home</button>\n      <button style={navStyle.navLink}>Aperture</button>\n      <button style={navStyle.navLink}>Shutter Speed</button>\n      <button style={navStyle.navLink}>ISO</button>\n    </nav>\n  );\n};\n\nexport default Navigation;",
                  "solvedContent": null
                },
                {
                  "name": "styles.jsx",
                  "codeLanguage": "jsx",
                  "content": "const wrapperStyle = {\n  wrapper: {\n    width: \"100%\",\n    fontFamily: \"Times New Roman, Verdana, Arial, sans-serif\",\n    fontSize: 16,\n    padding: 16,\n    boxSizing: \"border-box\",\n    textAlign: \"center\",\n  },\n};\n\nconst navStyle = {\n  nav: {\n    textAlign: \"center\",\n    display: \"flex\",\n    flexDirection: \"row\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    flexWrap: \"nowrap\",\n  },\n  navLink: {\n    flexBasis: \"100\",\n    flexShrink: \"1\",\n    margin: 2,\n    paddingLeft: 8,\n    paddingRight: 8,\n    paddingTop: 4,\n    paddingBottom: 4,\n    fontSize: 12,\n  },\n};\n\nconst pageStyle = {\n  table: {\n    width: \"100%\",\n    display: \"flex\",\n    flexDirection: \"column\",\n    flexWrap: \"nowrap\",\n    justifyContent: \"flex-start\",\n    alignItems: \"stretch\",\n  },\n  row: {\n    width: \"100%\",\n    marginBottom: 4,\n    display: \"flex\",\n    flexDirection: \"row\",\n    flexWrap: \"nowrap\",\n    justifyContent: \"space-between\",\n    alignItems: \"flex-start\",\n  },\n  column: {\n    flexBasis: \"50%\",\n    flexShrink: 1,\n    flexGrow: 0,\n    marginLeft: 4,\n    marginRight: 4,\n  },\n};\n\nexport { wrapperStyle, navStyle, pageStyle };",
                  "solvedContent": null
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Step 3 - BrowserRouter, Routes, Route",
            "id": 114681,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "With `react-dom-router` imported, the next thing we need to do is add the necessary components from `react-router-dom` into `App`.\n\n1. In `App`, wrap all the existing JSX into a new `<BrowserRouter>` wrapper component.\n2. Underneath the `<h1>` header, wrap the `<Home />` component with a new `<Routes>` wrapper component.\n3. Replace `<Home />` with the following code: \n```jsx\n<Route exact path=\"/\" element={ <Home /> } />\n```\n\n_The changes might not be obvious when we complete these steps. However, if we still see the content from `<Home />` after these steps, then we're on the right track._",
              "preselectedFileIndex": 1,
              "hasVisualOutput": true,
              "files": [
                {
                  "name": "index.html",
                  "codeLanguage": "html",
                  "content": "<!doctype html>\n<html>\n  <head>\n    <style>\n      html,\n      body {\n        margin: 0;\n        padding: 0;\n        background-color: #fefef1;\n      }\n      \n      a {\n        text-decoration: underline;\n        color: blue;\n      }\n      \n      a:hover {\n        cursor: pointer;\n      }\n    </style>\n    <script type=\"module\" src=\"./index.js\"></script>\n  </head>\n  <body>\n    <div id=\"root\"></div>\n  </body>\n</html>",
                  "solvedContent": null
                },
                {
                  "name": "index.jsx",
                  "codeLanguage": "jsx",
                  "content": "import React from \"react\";\nimport { createRoot } from \"react-dom/client\";\n\nimport { wrapperStyle } from \"./styles.jsx\";\nimport { Home, Aperture, ShutterSpeed, ISO } from \"./pages.jsx\";\nimport { BrowserRouter, Routes, Route } from \"react-router-dom\";\n\nconst App = () => {\n  return (\n    <div style={wrapperStyle.wrapper}>\n      <h1>Camera Tips</h1>\n      <Home />\n    </div>\n  );\n};\n\nconst rootElement = document.getElementById(\"root\");\nconst root = createRoot(rootElement);\nroot.render(<App />);\n\nexport default App;",
                  "solvedContent": "import React from \"react\";\nimport { createRoot } from \"react-dom/client\";\n\nimport { wrapperStyle } from \"./styles.jsx\";\nimport { Home, Aperture, ShutterSpeed, ISO } from \"./pages.jsx\";\nimport { BrowserRouter, Routes, Route } from \"react-router-dom\";\n\nconst App = () => {\n  return (\n    <BrowserRouter>\n      <div style={wrapperStyle.wrapper}>\n        <h1>Camera Tips</h1>\n        <Routes>\n          <Route exact path=\"/\" element={<Home />} />\n        </Routes>\n      </div>\n    </BrowserRouter>\n  );\n};\n\nconst rootElement = document.getElementById(\"root\");\nconst root = createRoot(rootElement);\nroot.render(<App />);\n\nexport default App;"
                },
                {
                  "name": "pages.jsx",
                  "codeLanguage": "jsx",
                  "content": "import React from \"react\";\nimport { pageStyle } from \"./styles\";\n\nconst Home = () => {\n  return (\n    <div>\n      <p>\n        Want a quick guide on how to take good photos? Confused about photo\n        terms? You've come to the right place!\n      </p>\n    </div>\n  );\n};\n\nconst ShutterSpeed = () => {\n  return (\n    <div>\n      <h3>Shutter Speed</h3>\n      <p>\n        <strong>Shutter Speed</strong> is how quickly your camera takes the\n        picture.\n      </p>\n      <div style={pageStyle.table}>\n        <div style={pageStyle.row}>\n          <div style={pageStyle.column}>\n            <strong>Fast Shutter Speed:</strong>\n          </div>\n          <div style={pageStyle.column}>\n            <strong>Slow Shutter Speed:</strong>\n          </div>\n        </div>\n        <div style={pageStyle.row}>\n          <div style={pageStyle.column}>\n            Clearer subjects when they are moving. Darker picture because less\n            light can enter your camera.\n          </div>\n          <div style={pageStyle.column}>\n            Blurrier subjects when they are moving. Brighter pictures because\n            more light can enter your camera.\n          </div>\n        </div>\n      </div>\n      <p>\n        A shutter speed of 1/60 is the lowest speed you can get for a bright\n        photo that isn't noticeably blurry.\n      </p>\n    </div>\n  );\n};\n\nconst Aperture = () => {\n  return (\n    <div>\n      <h3>Aperture</h3>\n      <p>\n        The <strong>Aperture</strong> is the camera lens' opening that allows\n        light in. The measurement of that opening is called the{\" \"}\n        <strong>F-Stop</strong>. The Aperture and F-Stop are inversely\n        proportional.\n      </p>\n      <div style={pageStyle.table}>\n        <div style={pageStyle.row}>\n          <div style={pageStyle.column}>\n            <strong>Low F-Stop / High Aperture:</strong>\n          </div>\n          <div style={pageStyle.column}>\n            <strong>High F-Stop / Low Aperture:</strong>\n          </div>\n        </div>\n        <div style={pageStyle.row}>\n          <div style={pageStyle.column}>\n            Your Depth of Field is very narrow; your pictures will be brighter\n            and will have foreground and background blur.\n          </div>\n          <div style={pageStyle.column}>\n            Your Depth of Field is very wide; your pictures will be darker but\n            will have less blurred backgrounds and foregrounds.\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nconst ISO = () => {\n  return (\n    <div>\n      <h3>ISO</h3>\n      <p>\n        Your camera's <strong>ISO</strong> is a measure of how sensitive your\n        camera's sensors are to light.\n      </p>\n      <p>\n        Increasing your camera's ISO makes your pictures brighter, but it also\n        increases their <strong>noise</strong>, or their grainy-ness. This is\n        why night photos, which usually are taken with high ISO, have black dots\n        when you look closely.\n      </p>\n      <div style={pageStyle.table}>\n        <div style={pageStyle.row}>\n          <div style={pageStyle.column}>\n            <strong>Low ISO:</strong>\n          </div>\n          <div style={pageStyle.column}>\n            <strong>High ISO:</strong>\n          </div>\n        </div>\n        <div style={pageStyle.row}>\n          <div style={pageStyle.column}>\n            Your camera's sensors are not very sensitive, reducing overall\n            brightness. This makes your pictures less noisy though.\n          </div>\n          <div style={pageStyle.column}>\n            Your camera's sensors are very sensitive to light, meaning brighter\n            images. However, this make your pictures more noisy.\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport { Home, Aperture, ShutterSpeed, ISO };",
                  "solvedContent": null
                },
                {
                  "name": "navigation.jsx",
                  "codeLanguage": "jsx",
                  "content": "import React from \"react\";\nimport { navStyle } from \"./styles.jsx\";\n\nconst Navigation = (props) => {\n  return (\n    <nav style={navStyle.nav}>\n      <button style={navStyle.navLink}>Home</button>\n      <button style={navStyle.navLink}>Aperture</button>\n      <button style={navStyle.navLink}>Shutter Speed</button>\n      <button style={navStyle.navLink}>ISO</button>\n    </nav>\n  );\n};\n\nexport default Navigation;",
                  "solvedContent": null
                },
                {
                  "name": "styles.jsx",
                  "codeLanguage": "jsx",
                  "content": "const wrapperStyle = {\n  wrapper: {\n    width: \"100%\",\n    fontFamily: \"Times New Roman, Verdana, Arial, sans-serif\",\n    fontSize: 16,\n    padding: 16,\n    boxSizing: \"border-box\",\n    textAlign: \"center\",\n  },\n};\n\nconst navStyle = {\n  nav: {\n    textAlign: \"center\",\n    display: \"flex\",\n    flexDirection: \"row\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    flexWrap: \"nowrap\",\n  },\n  navLink: {\n    flexBasis: \"100\",\n    flexShrink: \"1\",\n    margin: 2,\n    paddingLeft: 8,\n    paddingRight: 8,\n    paddingTop: 4,\n    paddingBottom: 4,\n    fontSize: 12,\n  },\n};\n\nconst pageStyle = {\n  table: {\n    width: \"100%\",\n    display: \"flex\",\n    flexDirection: \"column\",\n    flexWrap: \"nowrap\",\n    justifyContent: \"flex-start\",\n    alignItems: \"stretch\",\n  },\n  row: {\n    width: \"100%\",\n    marginBottom: 4,\n    display: \"flex\",\n    flexDirection: \"row\",\n    flexWrap: \"nowrap\",\n    justifyContent: \"space-between\",\n    alignItems: \"flex-start\",\n  },\n  column: {\n    flexBasis: \"50%\",\n    flexShrink: 1,\n    flexGrow: 0,\n    marginLeft: 4,\n    marginRight: 4,\n  },\n};\n\nexport { wrapperStyle, navStyle, pageStyle };",
                  "solvedContent": null
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Step 4 - <Route />",
            "id": 114682,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "In `react-router-dom`, we want to control what JSX appears based on the URL link for the webpage. Each possible URL path is written as a `<Route>`, complete with `path` and `element` attributes. \n\nThe `path` and `element` attributes work together in telling the app what to render. If the current URL of the selected webpages matches the `path`, then the JSX provided in `element` will render.\n\nLet's add another path that `react-dom-router` will have to keep track of: `/aperture`. \n\n1. In the `<Routes>` component, add a new `<Route>` component above the existing `Home` route with the following attributes and values: \n    - `exact`\n    - `path=\"/aperture\"`\n    - `element={ <Aperture /> }`\n\n2. To check if we've made the appropriate changes, copy and paste the URL from the preview window into a new tab in your browser. Then, do the following:\n    - Make sure the URL doesn't have anything past `el.mimo.run`. Confirm that the `<Home />` page appears.\n    - Add `/aperture` the end of the URL and load the page. Confirm that the page now shows the `<Aperture/>` page. Check the hint for further assistance on how to check this.\n\n",
              "preselectedFileIndex": 1,
              "hasVisualOutput": true,
              "files": [
                {
                  "name": "index.html",
                  "codeLanguage": "html",
                  "content": "<!doctype html>\n<html>\n  <head>\n    <style>\n      html,\n      body {\n        margin: 0;\n        padding: 0;\n        background-color: #fefef1;\n      }\n      \n      a {\n        text-decoration: underline;\n        color: blue;\n      }\n      \n      a:hover {\n        cursor: pointer;\n      }\n    </style>\n    <script type=\"module\" src=\"./index.js\"></script>\n  </head>\n  <body>\n    <div id=\"root\"></div>\n  </body>\n</html>",
                  "solvedContent": null
                },
                {
                  "name": "index.jsx",
                  "codeLanguage": "jsx",
                  "content": "import React from \"react\";\nimport { createRoot } from \"react-dom/client\";\n\nimport { wrapperStyle } from \"./styles.jsx\";\nimport { Home, Aperture, ShutterSpeed, ISO } from \"./pages.jsx\";\nimport { BrowserRouter, Routes, Route } from \"react-router-dom\";\n\nconst App = () => {\n  return (\n    <BrowserRouter>\n      <div style={wrapperStyle.wrapper}>\n        <h1>Camera Tips</h1>\n        <Routes>\n          <Route exact path=\"/\" element={<Home />} />\n        </Routes>\n      </div>\n    </BrowserRouter>\n  );\n};\n\nconst rootElement = document.getElementById(\"root\");\nconst root = createRoot(rootElement);\nroot.render(<App />);\n\nexport default App;",
                  "solvedContent": "import React from \"react\";\nimport { createRoot } from \"react-dom/client\";\n\nimport { wrapperStyle } from \"./styles.jsx\";\nimport { Home, Aperture, ShutterSpeed, ISO } from \"./pages.jsx\";\nimport { BrowserRouter, Routes, Route } from \"react-router-dom\";\n\nconst App = () => {\n  return (\n    <BrowserRouter>\n      <div style={wrapperStyle.wrapper}>\n        <h1>Camera Tips</h1>\n        <Routes>\n          <Route exact path=\"/aperture\" element={<Aperture />} />\n          <Route exact path=\"/\" element={<Home />} />\n        </Routes>\n      </div>\n    </BrowserRouter>\n  );\n};\n\nconst rootElement = document.getElementById(\"root\");\nconst root = createRoot(rootElement);\nroot.render(<App />);\n\nexport default App;"
                },
                {
                  "name": "pages.jsx",
                  "codeLanguage": "jsx",
                  "content": "import React from \"react\";\nimport { pageStyle } from \"./styles\";\n\nconst Home = () => {\n  return (\n    <div>\n      <p>\n        Want a quick guide on how to take good photos? Confused about photo\n        terms? You've come to the right place!\n      </p>\n    </div>\n  );\n};\n\nconst ShutterSpeed = () => {\n  return (\n    <div>\n      <h3>Shutter Speed</h3>\n      <p>\n        <strong>Shutter Speed</strong> is how quickly your camera takes the\n        picture.\n      </p>\n      <div style={pageStyle.table}>\n        <div style={pageStyle.row}>\n          <div style={pageStyle.column}>\n            <strong>Fast Shutter Speed:</strong>\n          </div>\n          <div style={pageStyle.column}>\n            <strong>Slow Shutter Speed:</strong>\n          </div>\n        </div>\n        <div style={pageStyle.row}>\n          <div style={pageStyle.column}>\n            Clearer subjects when they are moving. Darker picture because less\n            light can enter your camera.\n          </div>\n          <div style={pageStyle.column}>\n            Blurrier subjects when they are moving. Brighter pictures because\n            more light can enter your camera.\n          </div>\n        </div>\n      </div>\n      <p>\n        A shutter speed of 1/60 is the lowest speed you can get for a bright\n        photo that isn't noticeably blurry.\n      </p>\n    </div>\n  );\n};\n\nconst Aperture = () => {\n  return (\n    <div>\n      <h3>Aperture</h3>\n      <p>\n        The <strong>Aperture</strong> is the camera lens' opening that allows\n        light in. The measurement of that opening is called the{\" \"}\n        <strong>F-Stop</strong>. The Aperture and F-Stop are inversely\n        proportional.\n      </p>\n      <div style={pageStyle.table}>\n        <div style={pageStyle.row}>\n          <div style={pageStyle.column}>\n            <strong>Low F-Stop / High Aperture:</strong>\n          </div>\n          <div style={pageStyle.column}>\n            <strong>High F-Stop / Low Aperture:</strong>\n          </div>\n        </div>\n        <div style={pageStyle.row}>\n          <div style={pageStyle.column}>\n            Your Depth of Field is very narrow; your pictures will be brighter\n            and will have foreground and background blur.\n          </div>\n          <div style={pageStyle.column}>\n            Your Depth of Field is very wide; your pictures will be darker but\n            will have less blurred backgrounds and foregrounds.\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nconst ISO = () => {\n  return (\n    <div>\n      <h3>ISO</h3>\n      <p>\n        Your camera's <strong>ISO</strong> is a measure of how sensitive your\n        camera's sensors are to light.\n      </p>\n      <p>\n        Increasing your camera's ISO makes your pictures brighter, but it also\n        increases their <strong>noise</strong>, or their grainy-ness. This is\n        why night photos, which usually are taken with high ISO, have black dots\n        when you look closely.\n      </p>\n      <div style={pageStyle.table}>\n        <div style={pageStyle.row}>\n          <div style={pageStyle.column}>\n            <strong>Low ISO:</strong>\n          </div>\n          <div style={pageStyle.column}>\n            <strong>High ISO:</strong>\n          </div>\n        </div>\n        <div style={pageStyle.row}>\n          <div style={pageStyle.column}>\n            Your camera's sensors are not very sensitive, reducing overall\n            brightness. This makes your pictures less noisy though.\n          </div>\n          <div style={pageStyle.column}>\n            Your camera's sensors are very sensitive to light, meaning brighter\n            images. However, this make your pictures more noisy.\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport { Home, Aperture, ShutterSpeed, ISO };",
                  "solvedContent": null
                },
                {
                  "name": "navigation.jsx",
                  "codeLanguage": "jsx",
                  "content": "import React from \"react\";\nimport { navStyle } from \"./styles.jsx\";\n\nconst Navigation = (props) => {\n  return (\n    <nav style={navStyle.nav}>\n      <button style={navStyle.navLink}>Home</button>\n      <button style={navStyle.navLink}>Aperture</button>\n      <button style={navStyle.navLink}>Shutter Speed</button>\n      <button style={navStyle.navLink}>ISO</button>\n    </nav>\n  );\n};\n\nexport default Navigation;",
                  "solvedContent": null
                },
                {
                  "name": "styles.jsx",
                  "codeLanguage": "jsx",
                  "content": "const wrapperStyle = {\n  wrapper: {\n    width: \"100%\",\n    fontFamily: \"Times New Roman, Verdana, Arial, sans-serif\",\n    fontSize: 16,\n    padding: 16,\n    boxSizing: \"border-box\",\n    textAlign: \"center\",\n  },\n};\n\nconst navStyle = {\n  nav: {\n    textAlign: \"center\",\n    display: \"flex\",\n    flexDirection: \"row\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    flexWrap: \"nowrap\",\n  },\n  navLink: {\n    flexBasis: \"100\",\n    flexShrink: \"1\",\n    margin: 2,\n    paddingLeft: 8,\n    paddingRight: 8,\n    paddingTop: 4,\n    paddingBottom: 4,\n    fontSize: 12,\n  },\n};\n\nconst pageStyle = {\n  table: {\n    width: \"100%\",\n    display: \"flex\",\n    flexDirection: \"column\",\n    flexWrap: \"nowrap\",\n    justifyContent: \"flex-start\",\n    alignItems: \"stretch\",\n  },\n  row: {\n    width: \"100%\",\n    marginBottom: 4,\n    display: \"flex\",\n    flexDirection: \"row\",\n    flexWrap: \"nowrap\",\n    justifyContent: \"space-between\",\n    alignItems: \"flex-start\",\n  },\n  column: {\n    flexBasis: \"50%\",\n    flexShrink: 1,\n    flexGrow: 0,\n    marginLeft: 4,\n    marginRight: 4,\n  },\n};\n\nexport { wrapperStyle, navStyle, pageStyle };",
                  "solvedContent": null
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Step 5 - What's <Routes />?",
            "id": 114683,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "`<Routes>` renders only one out of all the `<Route>` components inside it. The order of the `<Route>` components inside `<Routes>` matters: the first `<Route>` that matches the current URL is rendered, and all other `<Route>` components are ignored.\n\n1. In the `<Routes>` component, add a new `<Route>` component between the \"Home\" and  \"Aperture\" routes with the following attributes: `exact` , path `path=\"/shutterspeed` and element `element={ <ShutterSpeed /> }` .\n2. To check your changes, copy and paste the URL from the preview window into a **new tab in your browser**. Then, do the following:\n  - Make sure the URL doesn't have anything past `el.mimo.run`. Confirm that the `<Home />` page appears.\n  - Add `/shutterspeed` the end of the URL and load the page. Confirm that the page now shows the `<Shutterspeed/>` page.\n  - Try out any other URL ending. Confirm the page is empty. \nCheck the hints block for further assistance on this check.\n   ",
              "preselectedFileIndex": 1,
              "hasVisualOutput": true,
              "files": [
                {
                  "name": "index.html",
                  "codeLanguage": "html",
                  "content": "<!doctype html>\n<html>\n  <head>\n    <style>\n      html,\n      body {\n        margin: 0;\n        padding: 0;\n        background-color: #fefef1;\n      }\n      \n      a {\n        text-decoration: underline;\n        color: blue;\n      }\n      \n      a:hover {\n        cursor: pointer;\n      }\n    </style>\n    <script type=\"module\" src=\"./index.js\"></script>\n  </head>\n  <body>\n    <div id=\"root\"></div>\n  </body>\n</html>",
                  "solvedContent": null
                },
                {
                  "name": "index.jsx",
                  "codeLanguage": "jsx",
                  "content": "import React from \"react\";\nimport { createRoot } from \"react-dom/client\";\n\nimport { wrapperStyle } from \"./styles.jsx\";\nimport { Home, Aperture, ShutterSpeed, ISO } from \"./pages.jsx\";\nimport { BrowserRouter, Routes, Route } from \"react-router-dom\";\n\nconst App = () => {\n  return (\n    <BrowserRouter>\n      <div style={wrapperStyle.wrapper}>\n        <h1>Camera Tips</h1>\n        <Routes>\n          <Route exact path=\"/aperture\" element={<Aperture />} />\n          <Route exact path=\"/\" element={<Home />} />\n        </Routes>\n      </div>\n    </BrowserRouter>\n  );\n};\n\nconst rootElement = document.getElementById(\"root\");\nconst root = createRoot(rootElement);\nroot.render(<App />);\n\nexport default App;",
                  "solvedContent": "import React from \"react\";\nimport { createRoot } from \"react-dom/client\";\n\nimport { wrapperStyle } from \"./styles.jsx\";\nimport { Home, Aperture, ShutterSpeed, ISO } from \"./pages.jsx\";\nimport { BrowserRouter, Routes, Route } from \"react-router-dom\";\n\nconst App = () => {\n  return (\n    <BrowserRouter>\n      <div style={wrapperStyle.wrapper}>\n        <h1>Camera Tips</h1>\n        <Routes>\n          <Route exact path=\"/aperture\" element={<Aperture />} />\n          <Route exact path=\"/shutterspeed\" element={<ShutterSpeed />} />\n          <Route exact path=\"/\" element={<Home />} />\n        </Routes>\n      </div>\n    </BrowserRouter>\n  );\n};\n\nconst rootElement = document.getElementById(\"root\");\nconst root = createRoot(rootElement);\nroot.render(<App />);\n\nexport default App;"
                },
                {
                  "name": "pages.jsx",
                  "codeLanguage": "jsx",
                  "content": "import React from \"react\";\nimport { pageStyle } from \"./styles\";\n\nconst Home = () => {\n  return (\n    <div>\n      <p>\n        Want a quick guide on how to take good photos? Confused about photo\n        terms? You've come to the right place!\n      </p>\n    </div>\n  );\n};\n\nconst ShutterSpeed = () => {\n  return (\n    <div>\n      <h3>Shutter Speed</h3>\n      <p>\n        <strong>Shutter Speed</strong> is how quickly your camera takes the\n        picture.\n      </p>\n      <div style={pageStyle.table}>\n        <div style={pageStyle.row}>\n          <div style={pageStyle.column}>\n            <strong>Fast Shutter Speed:</strong>\n          </div>\n          <div style={pageStyle.column}>\n            <strong>Slow Shutter Speed:</strong>\n          </div>\n        </div>\n        <div style={pageStyle.row}>\n          <div style={pageStyle.column}>\n            Clearer subjects when they are moving. Darker picture because less\n            light can enter your camera.\n          </div>\n          <div style={pageStyle.column}>\n            Blurrier subjects when they are moving. Brighter pictures because\n            more light can enter your camera.\n          </div>\n        </div>\n      </div>\n      <p>\n        A shutter speed of 1/60 is the lowest speed you can get for a bright\n        photo that isn't noticeably blurry.\n      </p>\n    </div>\n  );\n};\n\nconst Aperture = () => {\n  return (\n    <div>\n      <h3>Aperture</h3>\n      <p>\n        The <strong>Aperture</strong> is the camera lens' opening that allows\n        light in. The measurement of that opening is called the{\" \"}\n        <strong>F-Stop</strong>. The Aperture and F-Stop are inversely\n        proportional.\n      </p>\n      <div style={pageStyle.table}>\n        <div style={pageStyle.row}>\n          <div style={pageStyle.column}>\n            <strong>Low F-Stop / High Aperture:</strong>\n          </div>\n          <div style={pageStyle.column}>\n            <strong>High F-Stop / Low Aperture:</strong>\n          </div>\n        </div>\n        <div style={pageStyle.row}>\n          <div style={pageStyle.column}>\n            Your Depth of Field is very narrow; your pictures will be brighter\n            and will have foreground and background blur.\n          </div>\n          <div style={pageStyle.column}>\n            Your Depth of Field is very wide; your pictures will be darker but\n            will have less blurred backgrounds and foregrounds.\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nconst ISO = () => {\n  return (\n    <div>\n      <h3>ISO</h3>\n      <p>\n        Your camera's <strong>ISO</strong> is a measure of how sensitive your\n        camera's sensors are to light.\n      </p>\n      <p>\n        Increasing your camera's ISO makes your pictures brighter, but it also\n        increases their <strong>noise</strong>, or their grainy-ness. This is\n        why night photos, which usually are taken with high ISO, have black dots\n        when you look closely.\n      </p>\n      <div style={pageStyle.table}>\n        <div style={pageStyle.row}>\n          <div style={pageStyle.column}>\n            <strong>Low ISO:</strong>\n          </div>\n          <div style={pageStyle.column}>\n            <strong>High ISO:</strong>\n          </div>\n        </div>\n        <div style={pageStyle.row}>\n          <div style={pageStyle.column}>\n            Your camera's sensors are not very sensitive, reducing overall\n            brightness. This makes your pictures less noisy though.\n          </div>\n          <div style={pageStyle.column}>\n            Your camera's sensors are very sensitive to light, meaning brighter\n            images. However, this make your pictures more noisy.\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport { Home, Aperture, ShutterSpeed, ISO };",
                  "solvedContent": null
                },
                {
                  "name": "navigation.jsx",
                  "codeLanguage": "jsx",
                  "content": "import React from \"react\";\nimport { navStyle } from \"./styles.jsx\";\n\nconst Navigation = (props) => {\n  return (\n    <nav style={navStyle.nav}>\n      <button style={navStyle.navLink}>Home</button>\n      <button style={navStyle.navLink}>Aperture</button>\n      <button style={navStyle.navLink}>Shutter Speed</button>\n      <button style={navStyle.navLink}>ISO</button>\n    </nav>\n  );\n};\n\nexport default Navigation;",
                  "solvedContent": null
                },
                {
                  "name": "styles.jsx",
                  "codeLanguage": "jsx",
                  "content": "const wrapperStyle = {\n  wrapper: {\n    width: \"100%\",\n    fontFamily: \"Times New Roman, Verdana, Arial, sans-serif\",\n    fontSize: 16,\n    padding: 16,\n    boxSizing: \"border-box\",\n    textAlign: \"center\",\n  },\n};\n\nconst navStyle = {\n  nav: {\n    textAlign: \"center\",\n    display: \"flex\",\n    flexDirection: \"row\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    flexWrap: \"nowrap\",\n  },\n  navLink: {\n    flexBasis: \"100\",\n    flexShrink: \"1\",\n    margin: 2,\n    paddingLeft: 8,\n    paddingRight: 8,\n    paddingTop: 4,\n    paddingBottom: 4,\n    fontSize: 12,\n  },\n};\n\nconst pageStyle = {\n  table: {\n    width: \"100%\",\n    display: \"flex\",\n    flexDirection: \"column\",\n    flexWrap: \"nowrap\",\n    justifyContent: \"flex-start\",\n    alignItems: \"stretch\",\n  },\n  row: {\n    width: \"100%\",\n    marginBottom: 4,\n    display: \"flex\",\n    flexDirection: \"row\",\n    flexWrap: \"nowrap\",\n    justifyContent: \"space-between\",\n    alignItems: \"flex-start\",\n  },\n  column: {\n    flexBasis: \"50%\",\n    flexShrink: 1,\n    flexGrow: 0,\n    marginLeft: 4,\n    marginRight: 4,\n  },\n};\n\nexport { wrapperStyle, navStyle, pageStyle };",
                  "solvedContent": null
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Step 6 - Final <Route />",
            "id": 114684,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Up until now, we have three `<Route>` components. We need to add the final page: `/iso`.\n\n1. In the `<Routes>` component, add a new `<Route>` component between the `Shutter Speed` and `Home` routes with the following attributes:\n    * `exact`\n    * `path=\"/iso\"`\n    * `element={ <ISO /> }`",
              "preselectedFileIndex": 1,
              "hasVisualOutput": true,
              "files": [
                {
                  "name": "index.html",
                  "codeLanguage": "html",
                  "content": "<!doctype html>\n<html>\n  <head>\n    <style>\n      html,\n      body {\n        margin: 0;\n        padding: 0;\n        background-color: #fefef1;\n      }\n      \n      a {\n        text-decoration: underline;\n        color: blue;\n      }\n      \n      a:hover {\n        cursor: pointer;\n      }\n    </style>\n    <script type=\"module\" src=\"./index.js\"></script>\n  </head>\n  <body>\n    <div id=\"root\"></div>\n  </body>\n</html>",
                  "solvedContent": null
                },
                {
                  "name": "index.jsx",
                  "codeLanguage": "jsx",
                  "content": "import React from \"react\";\nimport { createRoot } from \"react-dom/client\";\n\nimport { wrapperStyle } from \"./styles.jsx\";\nimport { Home, Aperture, ShutterSpeed, ISO } from \"./pages.jsx\";\nimport { BrowserRouter, Routes, Route } from \"react-router-dom\";\n\nconst App = () => {\n  return (\n    <BrowserRouter>\n      <div style={wrapperStyle.wrapper}>\n        <h1>Camera Tips</h1>\n        <Routes>\n          <Route exact path=\"/aperture\" element={<Aperture />} />\n          <Route exact path=\"/shutterspeed\" element={<ShutterSpeed />} />\n          <Route exact path=\"/\" element={<Home />} />\n        </Routes>\n      </div>\n    </BrowserRouter>\n  );\n};\n\nconst rootElement = document.getElementById(\"root\");\nconst root = createRoot(rootElement);\nroot.render(<App />);\n\nexport default App;",
                  "solvedContent": "import React from \"react\";\nimport { createRoot } from \"react-dom/client\";\n\nimport { wrapperStyle } from \"./styles.jsx\";\nimport { Home, Aperture, ShutterSpeed, ISO } from \"./pages.jsx\";\nimport { BrowserRouter, Routes, Route } from \"react-router-dom\";\n\nconst App = () => {\n  return (\n    <BrowserRouter>\n      <div style={wrapperStyle.wrapper}>\n        <h1>Camera Tips</h1>\n        <Routes>\n          <Route exact path=\"/aperture\" element={<Aperture />} />\n          <Route exact path=\"/shutterspeed\" element={<ShutterSpeed />} />\n          <Route exact path=\"/iso\" element={<ISO />} />\n          <Route exact path=\"/\" element={<Home />} />\n        </Routes>\n      </div>\n    </BrowserRouter>\n  );\n};\n\nconst rootElement = document.getElementById(\"root\");\nconst root = createRoot(rootElement);\nroot.render(<App />);\n\nexport default App;"
                },
                {
                  "name": "pages.jsx",
                  "codeLanguage": "jsx",
                  "content": "import React from \"react\";\nimport { pageStyle } from \"./styles\";\n\nconst Home = () => {\n  return (\n    <div>\n      <p>\n        Want a quick guide on how to take good photos? Confused about photo\n        terms? You've come to the right place!\n      </p>\n    </div>\n  );\n};\n\nconst ShutterSpeed = () => {\n  return (\n    <div>\n      <h3>Shutter Speed</h3>\n      <p>\n        <strong>Shutter Speed</strong> is how quickly your camera takes the\n        picture.\n      </p>\n      <div style={pageStyle.table}>\n        <div style={pageStyle.row}>\n          <div style={pageStyle.column}>\n            <strong>Fast Shutter Speed:</strong>\n          </div>\n          <div style={pageStyle.column}>\n            <strong>Slow Shutter Speed:</strong>\n          </div>\n        </div>\n        <div style={pageStyle.row}>\n          <div style={pageStyle.column}>\n            Clearer subjects when they are moving. Darker picture because less\n            light can enter your camera.\n          </div>\n          <div style={pageStyle.column}>\n            Blurrier subjects when they are moving. Brighter pictures because\n            more light can enter your camera.\n          </div>\n        </div>\n      </div>\n      <p>\n        A shutter speed of 1/60 is the lowest speed you can get for a bright\n        photo that isn't noticeably blurry.\n      </p>\n    </div>\n  );\n};\n\nconst Aperture = () => {\n  return (\n    <div>\n      <h3>Aperture</h3>\n      <p>\n        The <strong>Aperture</strong> is the camera lens' opening that allows\n        light in. The measurement of that opening is called the{\" \"}\n        <strong>F-Stop</strong>. The Aperture and F-Stop are inversely\n        proportional.\n      </p>\n      <div style={pageStyle.table}>\n        <div style={pageStyle.row}>\n          <div style={pageStyle.column}>\n            <strong>Low F-Stop / High Aperture:</strong>\n          </div>\n          <div style={pageStyle.column}>\n            <strong>High F-Stop / Low Aperture:</strong>\n          </div>\n        </div>\n        <div style={pageStyle.row}>\n          <div style={pageStyle.column}>\n            Your Depth of Field is very narrow; your pictures will be brighter\n            and will have foreground and background blur.\n          </div>\n          <div style={pageStyle.column}>\n            Your Depth of Field is very wide; your pictures will be darker but\n            will have less blurred backgrounds and foregrounds.\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nconst ISO = () => {\n  return (\n    <div>\n      <h3>ISO</h3>\n      <p>\n        Your camera's <strong>ISO</strong> is a measure of how sensitive your\n        camera's sensors are to light.\n      </p>\n      <p>\n        Increasing your camera's ISO makes your pictures brighter, but it also\n        increases their <strong>noise</strong>, or their grainy-ness. This is\n        why night photos, which usually are taken with high ISO, have black dots\n        when you look closely.\n      </p>\n      <div style={pageStyle.table}>\n        <div style={pageStyle.row}>\n          <div style={pageStyle.column}>\n            <strong>Low ISO:</strong>\n          </div>\n          <div style={pageStyle.column}>\n            <strong>High ISO:</strong>\n          </div>\n        </div>\n        <div style={pageStyle.row}>\n          <div style={pageStyle.column}>\n            Your camera's sensors are not very sensitive, reducing overall\n            brightness. This makes your pictures less noisy though.\n          </div>\n          <div style={pageStyle.column}>\n            Your camera's sensors are very sensitive to light, meaning brighter\n            images. However, this make your pictures more noisy.\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport { Home, Aperture, ShutterSpeed, ISO };",
                  "solvedContent": null
                },
                {
                  "name": "navigation.jsx",
                  "codeLanguage": "jsx",
                  "content": "import React from \"react\";\nimport { navStyle } from \"./styles.jsx\";\n\nconst Navigation = (props) => {\n  return (\n    <nav style={navStyle.nav}>\n      <button style={navStyle.navLink}>Home</button>\n      <button style={navStyle.navLink}>Aperture</button>\n      <button style={navStyle.navLink}>Shutter Speed</button>\n      <button style={navStyle.navLink}>ISO</button>\n    </nav>\n  );\n};\n\nexport default Navigation;",
                  "solvedContent": null
                },
                {
                  "name": "styles.jsx",
                  "codeLanguage": "jsx",
                  "content": "const wrapperStyle = {\n  wrapper: {\n    width: \"100%\",\n    fontFamily: \"Times New Roman, Verdana, Arial, sans-serif\",\n    fontSize: 16,\n    padding: 16,\n    boxSizing: \"border-box\",\n    textAlign: \"center\",\n  },\n};\n\nconst navStyle = {\n  nav: {\n    textAlign: \"center\",\n    display: \"flex\",\n    flexDirection: \"row\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    flexWrap: \"nowrap\",\n  },\n  navLink: {\n    flexBasis: \"100\",\n    flexShrink: \"1\",\n    margin: 2,\n    paddingLeft: 8,\n    paddingRight: 8,\n    paddingTop: 4,\n    paddingBottom: 4,\n    fontSize: 12,\n  },\n};\n\nconst pageStyle = {\n  table: {\n    width: \"100%\",\n    display: \"flex\",\n    flexDirection: \"column\",\n    flexWrap: \"nowrap\",\n    justifyContent: \"flex-start\",\n    alignItems: \"stretch\",\n  },\n  row: {\n    width: \"100%\",\n    marginBottom: 4,\n    display: \"flex\",\n    flexDirection: \"row\",\n    flexWrap: \"nowrap\",\n    justifyContent: \"space-between\",\n    alignItems: \"flex-start\",\n  },\n  column: {\n    flexBasis: \"50%\",\n    flexShrink: 1,\n    flexGrow: 0,\n    marginLeft: 4,\n    marginRight: 4,\n  },\n};\n\nexport { wrapperStyle, navStyle, pageStyle };",
                  "solvedContent": null
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Step 7 - Import Navigation",
            "id": 114685,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "It's tiring to directly manipulate the URL to change the page. We need a navigation bar to select which page we want to go to. We already have a `Navigation` component with navigation buttons, so let's import and add it to `App`. We'll make the buttons actually work in the next lesson.\n\n1. Import the `Navigation` component from `./navigation.jsx`.\n2. Add `<Navigation />` above the `<h1>` header.",
              "preselectedFileIndex": 1,
              "hasVisualOutput": true,
              "files": [
                {
                  "name": "index.html",
                  "codeLanguage": "html",
                  "content": "<!doctype html>\n<html>\n  <head>\n    <style>\n      html,\n      body {\n        margin: 0;\n        padding: 0;\n        background-color: #fefef1;\n      }\n      \n      a {\n        text-decoration: underline;\n        color: blue;\n      }\n      \n      a:hover {\n        cursor: pointer;\n      }\n    </style>\n    <script type=\"module\" src=\"./index.js\"></script>\n  </head>\n  <body>\n    <div id=\"root\"></div>\n  </body>\n</html>",
                  "solvedContent": null
                },
                {
                  "name": "index.jsx",
                  "codeLanguage": "jsx",
                  "content": "import React from \"react\";\nimport { createRoot } from \"react-dom/client\";\n\nimport { wrapperStyle } from \"./styles.jsx\";\nimport { Home, Aperture, ShutterSpeed, ISO } from \"./pages.jsx\";\nimport { BrowserRouter, Routes, Route } from \"react-router-dom\";\n\nconst App = () => {\n  return (\n    <BrowserRouter>\n      <div style={wrapperStyle.wrapper}>\n        <h1>Camera Tips</h1>\n        <Routes>\n          <Route exact path=\"/aperture\" element={<Aperture />} />\n          <Route exact path=\"/shutterspeed\" element={<ShutterSpeed />} />\n          <Route exact path=\"/iso\" element={<ISO />} />\n          <Route exact path=\"/\" element={<Home />} />\n        </Routes>\n      </div>\n    </BrowserRouter>\n  );\n};\n\nconst rootElement = document.getElementById(\"root\");\nconst root = createRoot(rootElement);\nroot.render(<App />);\n\nexport default App;",
                  "solvedContent": "import React from \"react\";\nimport { createRoot } from \"react-dom/client\";\n\nimport { wrapperStyle } from \"./styles.jsx\";\nimport { Home, Aperture, ShutterSpeed, ISO } from \"./pages.jsx\";\nimport Navigation from \"./navigation.jsx\";\nimport { BrowserRouter, Routes, Route } from \"react-router-dom\";\n\nconst App = () => {\n  return (\n    <BrowserRouter>\n      <div style={wrapperStyle.wrapper}>\n        <Navigation />\n        <h1>Camera Tips</h1>\n        <Routes>\n          <Route exact path=\"/aperture\" element={<Aperture />} />\n          <Route exact path=\"/shutterspeed\" element={<ShutterSpeed />} />\n          <Route exact path=\"/iso\" element={<ISO />} />\n          <Route exact path=\"/\" element={<Home />} />\n        </Routes>\n      </div>\n    </BrowserRouter>\n  );\n};\n\nconst rootElement = document.getElementById(\"root\");\nconst root = createRoot(rootElement);\nroot.render(<App />);\n\nexport default App;"
                },
                {
                  "name": "pages.jsx",
                  "codeLanguage": "jsx",
                  "content": "import React from \"react\";\nimport { pageStyle } from \"./styles\";\n\nconst Home = () => {\n  return (\n    <div>\n      <p>\n        Want a quick guide on how to take good photos? Confused about photo\n        terms? You've come to the right place!\n      </p>\n    </div>\n  );\n};\n\nconst ShutterSpeed = () => {\n  return (\n    <div>\n      <h3>Shutter Speed</h3>\n      <p>\n        <strong>Shutter Speed</strong> is how quickly your camera takes the\n        picture.\n      </p>\n      <div style={pageStyle.table}>\n        <div style={pageStyle.row}>\n          <div style={pageStyle.column}>\n            <strong>Fast Shutter Speed:</strong>\n          </div>\n          <div style={pageStyle.column}>\n            <strong>Slow Shutter Speed:</strong>\n          </div>\n        </div>\n        <div style={pageStyle.row}>\n          <div style={pageStyle.column}>\n            Clearer subjects when they are moving. Darker picture because less\n            light can enter your camera.\n          </div>\n          <div style={pageStyle.column}>\n            Blurrier subjects when they are moving. Brighter pictures because\n            more light can enter your camera.\n          </div>\n        </div>\n      </div>\n      <p>\n        A shutter speed of 1/60 is the lowest speed you can get for a bright\n        photo that isn't noticeably blurry.\n      </p>\n    </div>\n  );\n};\n\nconst Aperture = () => {\n  return (\n    <div>\n      <h3>Aperture</h3>\n      <p>\n        The <strong>Aperture</strong> is the camera lens' opening that allows\n        light in. The measurement of that opening is called the{\" \"}\n        <strong>F-Stop</strong>. The Aperture and F-Stop are inversely\n        proportional.\n      </p>\n      <div style={pageStyle.table}>\n        <div style={pageStyle.row}>\n          <div style={pageStyle.column}>\n            <strong>Low F-Stop / High Aperture:</strong>\n          </div>\n          <div style={pageStyle.column}>\n            <strong>High F-Stop / Low Aperture:</strong>\n          </div>\n        </div>\n        <div style={pageStyle.row}>\n          <div style={pageStyle.column}>\n            Your Depth of Field is very narrow; your pictures will be brighter\n            and will have foreground and background blur.\n          </div>\n          <div style={pageStyle.column}>\n            Your Depth of Field is very wide; your pictures will be darker but\n            will have less blurred backgrounds and foregrounds.\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nconst ISO = () => {\n  return (\n    <div>\n      <h3>ISO</h3>\n      <p>\n        Your camera's <strong>ISO</strong> is a measure of how sensitive your\n        camera's sensors are to light.\n      </p>\n      <p>\n        Increasing your camera's ISO makes your pictures brighter, but it also\n        increases their <strong>noise</strong>, or their grainy-ness. This is\n        why night photos, which usually are taken with high ISO, have black dots\n        when you look closely.\n      </p>\n      <div style={pageStyle.table}>\n        <div style={pageStyle.row}>\n          <div style={pageStyle.column}>\n            <strong>Low ISO:</strong>\n          </div>\n          <div style={pageStyle.column}>\n            <strong>High ISO:</strong>\n          </div>\n        </div>\n        <div style={pageStyle.row}>\n          <div style={pageStyle.column}>\n            Your camera's sensors are not very sensitive, reducing overall\n            brightness. This makes your pictures less noisy though.\n          </div>\n          <div style={pageStyle.column}>\n            Your camera's sensors are very sensitive to light, meaning brighter\n            images. However, this make your pictures more noisy.\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport { Home, Aperture, ShutterSpeed, ISO };",
                  "solvedContent": null
                },
                {
                  "name": "navigation.jsx",
                  "codeLanguage": "jsx",
                  "content": "import React from \"react\";\nimport { navStyle } from \"./styles.jsx\";\n\nconst Navigation = (props) => {\n  return (\n    <nav style={navStyle.nav}>\n      <button style={navStyle.navLink}>Home</button>\n      <button style={navStyle.navLink}>Aperture</button>\n      <button style={navStyle.navLink}>Shutter Speed</button>\n      <button style={navStyle.navLink}>ISO</button>\n    </nav>\n  );\n};\n\nexport default Navigation;",
                  "solvedContent": null
                },
                {
                  "name": "styles.jsx",
                  "codeLanguage": "jsx",
                  "content": "const wrapperStyle = {\n  wrapper: {\n    width: \"100%\",\n    fontFamily: \"Times New Roman, Verdana, Arial, sans-serif\",\n    fontSize: 16,\n    padding: 16,\n    boxSizing: \"border-box\",\n    textAlign: \"center\",\n  },\n};\n\nconst navStyle = {\n  nav: {\n    textAlign: \"center\",\n    display: \"flex\",\n    flexDirection: \"row\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    flexWrap: \"nowrap\",\n  },\n  navLink: {\n    flexBasis: \"100\",\n    flexShrink: \"1\",\n    margin: 2,\n    paddingLeft: 8,\n    paddingRight: 8,\n    paddingTop: 4,\n    paddingBottom: 4,\n    fontSize: 12,\n  },\n};\n\nconst pageStyle = {\n  table: {\n    width: \"100%\",\n    display: \"flex\",\n    flexDirection: \"column\",\n    flexWrap: \"nowrap\",\n    justifyContent: \"flex-start\",\n    alignItems: \"stretch\",\n  },\n  row: {\n    width: \"100%\",\n    marginBottom: 4,\n    display: \"flex\",\n    flexDirection: \"row\",\n    flexWrap: \"nowrap\",\n    justifyContent: \"space-between\",\n    alignItems: \"flex-start\",\n  },\n  column: {\n    flexBasis: \"50%\",\n    flexShrink: 1,\n    flexGrow: 0,\n    marginLeft: 4,\n    marginRight: 4,\n  },\n};\n\nexport { wrapperStyle, navStyle, pageStyle };",
                  "solvedContent": null
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Step 8: Adding Nav Capabilities",
            "id": 114687,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Right now, clicking the `<Navigation>` buttons doesn't have any effect. That's because we need to modify the buttons to work with `react-router-dom` .\n\nIn a normal webpage, we'd use the `<a href=\"\">` tag to create hyperlinks and navigation elements. \n\nWhen using `react-router-dom`, we use the `Link` component instead of the `<a>` tags, since `<a>` tags will reload the page and `Link` components don't. \n\nThe first step is to import another component from `react-router-dom`.\n\n1. Inside `navigation.jsx`, import `Link` from `react-router-dom`.",
              "preselectedFileIndex": 3,
              "hasVisualOutput": true,
              "files": [
                {
                  "name": "index.html",
                  "codeLanguage": "html",
                  "content": "<!doctype html>\n<html>\n  <head>\n    <style>\n      html,\n      body {\n        margin: 0;\n        padding: 0;\n        background-color: #fefef1;\n      }\n      \n      a {\n        text-decoration: underline;\n        color: blue;\n      }\n      \n      a:hover {\n        cursor: pointer;\n      }\n    </style>\n    <script type=\"module\" src=\"./index.js\"></script>\n  </head>\n  <body>\n    <div id=\"root\"></div>\n  </body>\n</html>",
                  "solvedContent": null
                },
                {
                  "name": "index.jsx",
                  "codeLanguage": "jsx",
                  "content": "import React from \"react\";\nimport { createRoot } from \"react-dom/client\";\n\n\nimport { wrapperStyle } from \"./styles.jsx\";\nimport { Home, Aperture, ShutterSpeed, ISO } from \"./pages.jsx\";\nimport Navigation from \"./navigation.jsx\";\nimport { BrowserRouter, Routes, Route } from \"react-router-dom\";\n\nconst App = () => {\n  return (\n    <BrowserRouter>\n      <div style={wrapperStyle.wrapper}>\n        <Navigation />\n        <h1>Camera Tips</h1>\n        <Routes>\n          <Route exact path=\"/aperture\" element={<Aperture />} />\n          <Route exact path=\"/shutterspeed\" element={<ShutterSpeed />} />\n          <Route exact path=\"/iso\" element={<ISO />} />\n          <Route exact path=\"/\" element={<Home />} />\n        </Routes>\n      </div>\n    </BrowserRouter>\n  );\n};\n\nconst rootElement = document.getElementById(\"root\");\nconst root = createRoot(rootElement);\nroot.render(<App />);\n\nexport default App;",
                  "solvedContent": null
                },
                {
                  "name": "pages.jsx",
                  "codeLanguage": "jsx",
                  "content": "import React from \"react\";\nimport { pageStyle } from \"./styles\";\n\nconst Home = () => {\n  return (\n    <div>\n      <p>\n        Want a quick guide on how to take good photos? Confused about photo\n        terms? You've come to the right place!\n      </p>\n    </div>\n  );\n};\n\nconst ShutterSpeed = () => {\n  return (\n    <div>\n      <h3>Shutter Speed</h3>\n      <p>\n        <strong>Shutter Speed</strong> is how quickly your camera takes the\n        picture.\n      </p>\n      <div style={pageStyle.table}>\n        <div style={pageStyle.row}>\n          <div style={pageStyle.column}>\n            <strong>Fast Shutter Speed:</strong>\n          </div>\n          <div style={pageStyle.column}>\n            <strong>Slow Shutter Speed:</strong>\n          </div>\n        </div>\n        <div style={pageStyle.row}>\n          <div style={pageStyle.column}>\n            Clearer subjects when they are moving. Darker picture because less\n            light can enter your camera.\n          </div>\n          <div style={pageStyle.column}>\n            Blurrier subjects when they are moving. Brighter pictures because\n            more light can enter your camera.\n          </div>\n        </div>\n      </div>\n      <p>\n        A shutter speed of 1/60 is the lowest speed you can get for a bright\n        photo that isn't noticeably blurry.\n      </p>\n    </div>\n  );\n};\n\nconst Aperture = () => {\n  return (\n    <div>\n      <h3>Aperture</h3>\n      <p>\n        The <strong>Aperture</strong> is the camera lens' opening that allows\n        light in. The measurement of that opening is called the{\" \"}\n        <strong>F-Stop</strong>. The Aperture and F-Stop are inversely\n        proportional.\n      </p>\n      <div style={pageStyle.table}>\n        <div style={pageStyle.row}>\n          <div style={pageStyle.column}>\n            <strong>Low F-Stop / High Aperture:</strong>\n          </div>\n          <div style={pageStyle.column}>\n            <strong>High F-Stop / Low Aperture:</strong>\n          </div>\n        </div>\n        <div style={pageStyle.row}>\n          <div style={pageStyle.column}>\n            Your Depth of Field is very narrow; your pictures will be brighter\n            and will have foreground and background blur.\n          </div>\n          <div style={pageStyle.column}>\n            Your Depth of Field is very wide; your pictures will be darker but\n            will have less blurred backgrounds and foregrounds.\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nconst ISO = () => {\n  return (\n    <div>\n      <h3>ISO</h3>\n      <p>\n        Your camera's <strong>ISO</strong> is a measure of how sensitive your\n        camera's sensors are to light.\n      </p>\n      <p>\n        Increasing your camera's ISO makes your pictures brighter, but it also\n        increases their <strong>noise</strong>, or their grainy-ness. This is\n        why night photos, which usually are taken with high ISO, have black dots\n        when you look closely.\n      </p>\n      <div style={pageStyle.table}>\n        <div style={pageStyle.row}>\n          <div style={pageStyle.column}>\n            <strong>Low ISO:</strong>\n          </div>\n          <div style={pageStyle.column}>\n            <strong>High ISO:</strong>\n          </div>\n        </div>\n        <div style={pageStyle.row}>\n          <div style={pageStyle.column}>\n            Your camera's sensors are not very sensitive, reducing overall\n            brightness. This makes your pictures less noisy though.\n          </div>\n          <div style={pageStyle.column}>\n            Your camera's sensors are very sensitive to light, meaning brighter\n            images. However, this make your pictures more noisy.\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport { Home, Aperture, ShutterSpeed, ISO };",
                  "solvedContent": null
                },
                {
                  "name": "navigation.jsx",
                  "codeLanguage": "jsx",
                  "content": "import React from \"react\";\n\nconst Navigation = (props) => {\n  return (\n    <nav style={navStyle.nav}>\n      <button style={navStyle.navLink}>Home</button>\n      <button style={navStyle.navLink}>Aperture</button>\n      <button style={navStyle.navLink}>Shutter Speed</button>\n      <button style={navStyle.navLink}>ISO</button>\n    </nav>\n  );\n};\n\nexport default Navigation;",
                  "solvedContent": "import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nconst Navigation = (props) => {\n  return (\n    <nav style={navStyle.nav}>\n      <button style={navStyle.navLink}>Home</button>\n      <button style={navStyle.navLink}>Aperture</button>\n      <button style={navStyle.navLink}>Shutter Speed</button>\n      <button style={navStyle.navLink}>ISO</button>\n    </nav>\n  );\n};\n\nexport default Navigation;"
                },
                {
                  "name": "styles.jsx",
                  "codeLanguage": "jsx",
                  "content": "const wrapperStyle = {\n  wrapper: {\n    width: \"100%\",\n    fontFamily: \"Times New Roman, Verdana, Arial, sans-serif\",\n    fontSize: 16,\n    padding: 16,\n    boxSizing: \"border-box\",\n    textAlign: \"center\",\n  },\n};\n\nconst navStyle = {\n  nav: {\n    textAlign: \"center\",\n    display: \"flex\",\n    flexDirection: \"row\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    flexWrap: \"nowrap\",\n  },\n  navLink: {\n    flexBasis: \"100\",\n    flexShrink: \"1\",\n    margin: 2,\n    paddingLeft: 8,\n    paddingRight: 8,\n    paddingTop: 4,\n    paddingBottom: 4,\n    fontSize: 12,\n  },\n};\n\nconst pageStyle = {\n  table: {\n    width: \"100%\",\n    display: \"flex\",\n    flexDirection: \"column\",\n    flexWrap: \"nowrap\",\n    justifyContent: \"flex-start\",\n    alignItems: \"stretch\",\n  },\n  row: {\n    width: \"100%\",\n    marginBottom: 4,\n    display: \"flex\",\n    flexDirection: \"row\",\n    flexWrap: \"nowrap\",\n    justifyContent: \"space-between\",\n    alignItems: \"flex-start\",\n  },\n  column: {\n    flexBasis: \"50%\",\n    flexShrink: 1,\n    flexGrow: 0,\n    marginLeft: 4,\n    marginRight: 4,\n  },\n};\n\nexport { wrapperStyle, navStyle, pageStyle };",
                  "solvedContent": null
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Step 9: One Link",
            "id": 114688,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "With the `Link` component imported, we can now add some functionality to our SPA's navigation bar. For now, let's add just one `Link` and see if it works.\n\n1. Wrap the `Aperture` button with the new `<Link>` component.\n2. Add a `to` attribute to `<Link>` and set the `to` value to `\"/aperture\"` to link to `\"/aperture\"` on button click.\n3. Load the page and click on the \"Aperture\" button in the preview, you should see the page content change to the `<Aperture/>` component.",
              "preselectedFileIndex": 3,
              "hasVisualOutput": true,
              "files": [
                {
                  "name": "index.html",
                  "codeLanguage": "html",
                  "content": "<!doctype html>\n<html>\n  <head>\n    <style>\n      html,\n      body {\n        margin: 0;\n        padding: 0;\n        background-color: #fefef1;\n      }\n      \n      a {\n        text-decoration: underline;\n        color: blue;\n      }\n      \n      a:hover {\n        cursor: pointer;\n      }\n    </style>\n    <script type=\"module\" src=\"./index.js\"></script>\n  </head>\n  <body>\n    <div id=\"root\"></div>\n  </body>\n</html>",
                  "solvedContent": null
                },
                {
                  "name": "index.jsx",
                  "codeLanguage": "jsx",
                  "content": "import React from \"react\";\nimport { createRoot } from \"react-dom/client\";\nimport { wrapperStyle } from \"./styles.jsx\";\nimport { Home, Aperture, ShutterSpeed, ISO } from \"./pages.jsx\";\nimport Navigation from \"./navigation.jsx\";\nimport { BrowserRouter, Routes, Route } from \"react-router-dom\";\n\nconst App = () => {\n  return (\n    <BrowserRouter>\n      <div style={wrapperStyle.wrapper}>\n        <Navigation />\n        <h1>Camera Tips</h1>\n        <Routes>\n          <Route exact path=\"/aperture\" element={<Aperture />} />\n          <Route exact path=\"/shutterspeed\" element={<ShutterSpeed />} />\n          <Route exact path=\"/iso\" element={<ISO />} />\n          <Route exact path=\"/\" element={<Home />} />\n        </Routes>\n      </div>\n    </BrowserRouter>\n  );\n};\n\nconst rootElement = document.getElementById(\"root\");\nconst root = createRoot(rootElement);\nroot.render(<App />);\n\nexport default App;",
                  "solvedContent": null
                },
                {
                  "name": "pages.jsx",
                  "codeLanguage": "jsx",
                  "content": "import React from \"react\";\nimport { pageStyle } from \"./styles\";\n\nconst Home = () => {\n  return (\n    <div>\n      <p>\n        Want a quick guide on how to take good photos? Confused about photo\n        terms? You've come to the right place!\n      </p>\n    </div>\n  );\n};\n\nconst ShutterSpeed = () => {\n  return (\n    <div>\n      <h3>Shutter Speed</h3>\n      <p>\n        <strong>Shutter Speed</strong> is how quickly your camera takes the\n        picture.\n      </p>\n      <div style={pageStyle.table}>\n        <div style={pageStyle.row}>\n          <div style={pageStyle.column}>\n            <strong>Fast Shutter Speed:</strong>\n          </div>\n          <div style={pageStyle.column}>\n            <strong>Slow Shutter Speed:</strong>\n          </div>\n        </div>\n        <div style={pageStyle.row}>\n          <div style={pageStyle.column}>\n            Clearer subjects when they are moving. Darker picture because less\n            light can enter your camera.\n          </div>\n          <div style={pageStyle.column}>\n            Blurrier subjects when they are moving. Brighter pictures because\n            more light can enter your camera.\n          </div>\n        </div>\n      </div>\n      <p>\n        A shutter speed of 1/60 is the lowest speed you can get for a bright\n        photo that isn't noticeably blurry.\n      </p>\n    </div>\n  );\n};\n\nconst Aperture = () => {\n  return (\n    <div>\n      <h3>Aperture</h3>\n      <p>\n        The <strong>Aperture</strong> is the camera lens' opening that allows\n        light in. The measurement of that opening is called the{\" \"}\n        <strong>F-Stop</strong>. The Aperture and F-Stop are inversely\n        proportional.\n      </p>\n      <div style={pageStyle.table}>\n        <div style={pageStyle.row}>\n          <div style={pageStyle.column}>\n            <strong>Low F-Stop / High Aperture:</strong>\n          </div>\n          <div style={pageStyle.column}>\n            <strong>High F-Stop / Low Aperture:</strong>\n          </div>\n        </div>\n        <div style={pageStyle.row}>\n          <div style={pageStyle.column}>\n            Your Depth of Field is very narrow; your pictures will be brighter\n            and will have foreground and background blur.\n          </div>\n          <div style={pageStyle.column}>\n            Your Depth of Field is very wide; your pictures will be darker but\n            will have less blurred backgrounds and foregrounds.\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nconst ISO = () => {\n  return (\n    <div>\n      <h3>ISO</h3>\n      <p>\n        Your camera's <strong>ISO</strong> is a measure of how sensitive your\n        camera's sensors are to light.\n      </p>\n      <p>\n        Increasing your camera's ISO makes your pictures brighter, but it also\n        increases their <strong>noise</strong>, or their grainy-ness. This is\n        why night photos, which usually are taken with high ISO, have black dots\n        when you look closely.\n      </p>\n      <div style={pageStyle.table}>\n        <div style={pageStyle.row}>\n          <div style={pageStyle.column}>\n            <strong>Low ISO:</strong>\n          </div>\n          <div style={pageStyle.column}>\n            <strong>High ISO:</strong>\n          </div>\n        </div>\n        <div style={pageStyle.row}>\n          <div style={pageStyle.column}>\n            Your camera's sensors are not very sensitive, reducing overall\n            brightness. This makes your pictures less noisy though.\n          </div>\n          <div style={pageStyle.column}>\n            Your camera's sensors are very sensitive to light, meaning brighter\n            images. However, this make your pictures more noisy.\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport { Home, Aperture, ShutterSpeed, ISO };",
                  "solvedContent": null
                },
                {
                  "name": "navigation.jsx",
                  "codeLanguage": "jsx",
                  "content": "import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { navStyle } from \"./styles\";\n\nconst Navigation = (props) => {\n  return (\n    <nav style={navStyle.nav}>\n      <button style={navStyle.navLink}>Home</button>\n      <button style={navStyle.navLink}>Aperture</button>\n      <button style={navStyle.navLink}>Shutter Speed</button>\n      <button style={navStyle.navLink}>ISO</button>\n    </nav>\n  );\n};\n\nexport default Navigation;",
                  "solvedContent": "import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { navStyle } from \"./styles\";\n\nconst Navigation = (props) => {\n  return (\n    <nav style={navStyle.nav}>\n      <button style={navStyle.navLink}>Home</button>\n      <Link to=\"/aperture\">\n        <button style={navStyle.navLink}>Aperture</button>\n      </Link>\n      <button style={navStyle.navLink}>Shutter Speed</button>\n      <button style={navStyle.navLink}>ISO</button>\n    </nav>\n  );\n};\n\nexport default Navigation;"
                },
                {
                  "name": "styles.jsx",
                  "codeLanguage": "jsx",
                  "content": "const wrapperStyle = {\n  wrapper: {\n    width: \"100%\",\n    fontFamily: \"Times New Roman, Verdana, Arial, sans-serif\",\n    fontSize: 16,\n    padding: 16,\n    boxSizing: \"border-box\",\n    textAlign: \"center\",\n  },\n};\n\nconst navStyle = {\n  nav: {\n    textAlign: \"center\",\n    display: \"flex\",\n    flexDirection: \"row\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    flexWrap: \"nowrap\",\n  },\n  navLink: {\n    flexBasis: \"100\",\n    flexShrink: \"1\",\n    margin: 2,\n    paddingLeft: 8,\n    paddingRight: 8,\n    paddingTop: 4,\n    paddingBottom: 4,\n    fontSize: 12,\n  },\n};\n\nconst pageStyle = {\n  table: {\n    width: \"100%\",\n    display: \"flex\",\n    flexDirection: \"column\",\n    flexWrap: \"nowrap\",\n    justifyContent: \"flex-start\",\n    alignItems: \"stretch\",\n  },\n  row: {\n    width: \"100%\",\n    marginBottom: 4,\n    display: \"flex\",\n    flexDirection: \"row\",\n    flexWrap: \"nowrap\",\n    justifyContent: \"space-between\",\n    alignItems: \"flex-start\",\n  },\n  column: {\n    flexBasis: \"50%\",\n    flexShrink: 1,\n    flexGrow: 0,\n    marginLeft: 4,\n    marginRight: 4,\n  },\n};\n\nexport { wrapperStyle, navStyle, pageStyle };",
                  "solvedContent": null
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Step 10: Add all Links",
            "id": 114689,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "With the one `<Link>` working, we can now add the `<Link>` component to the rest of the three buttons inside of `Navigation`.\n\n1. For each of the remaining buttons, wrap them with the new `<Link>` component and set their `to` attribute to the proper URL:\n\n    - `Home` must link to `/`.\n    - `Shutter Speed` must link to `/shutterspeed`.\n    - `ISO` must link to `/iso`.\n\n2. Run the code and then click on each of the buttons in the navigation bar. You should see the pages changing as if you were navigating between different webpages.",
              "preselectedFileIndex": 3,
              "hasVisualOutput": true,
              "files": [
                {
                  "name": "index.html",
                  "codeLanguage": "html",
                  "content": "<!doctype html>\n<html>\n  <head>\n    <style>\n      html,\n      body {\n        margin: 0;\n        padding: 0;\n        background-color: #fefef1;\n      }\n      \n      a {\n        text-decoration: underline;\n        color: blue;\n      }\n      \n      a:hover {\n        cursor: pointer;\n      }\n    </style>\n    <script type=\"module\" src=\"./index.js\"></script>\n  </head>\n  <body>\n    <div id=\"root\"></div>\n  </body>\n</html>",
                  "solvedContent": null
                },
                {
                  "name": "index.jsx",
                  "codeLanguage": "jsx",
                  "content": "import React from \"react\";\nimport { createRoot } from \"react-dom/client\";\n\nimport { wrapperStyle } from \"./styles.jsx\";\nimport { Home, Aperture, ShutterSpeed, ISO } from \"./pages.jsx\";\nimport Navigation from \"./navigation.jsx\";\nimport { BrowserRouter, Routes, Route } from \"react-router-dom\";\n\nconst App = () => {\n  return (\n    <BrowserRouter>\n      <div style={wrapperStyle.wrapper}>\n        <Navigation />\n        <h1>Camera Tips</h1>\n        <Routes>\n          <Route exact path=\"/aperture\" element={<Aperture />} />\n          <Route exact path=\"/shutterspeed\" element={<ShutterSpeed />} />\n          <Route exact path=\"/iso\" element={<ISO />} />\n          <Route exact path=\"/\" element={<Home />} />\n        </Routes>\n      </div>\n    </BrowserRouter>\n  );\n};\n\nconst rootElement = document.getElementById(\"root\");\nconst root = createRoot(rootElement);\nroot.render(<App />);\n\nexport default App;",
                  "solvedContent": null
                },
                {
                  "name": "pages.jsx",
                  "codeLanguage": "jsx",
                  "content": "import React from \"react\";\nimport { pageStyle } from \"./styles\";\n\nconst Home = () => {\n  return (\n    <div>\n      <p>\n        Want a quick guide on how to take good photos? Confused about photo\n        terms? You've come to the right place!\n      </p>\n    </div>\n  );\n};\n\nconst ShutterSpeed = () => {\n  return (\n    <div>\n      <h3>Shutter Speed</h3>\n      <p>\n        <strong>Shutter Speed</strong> is how quickly your camera takes the\n        picture.\n      </p>\n      <div style={pageStyle.table}>\n        <div style={pageStyle.row}>\n          <div style={pageStyle.column}>\n            <strong>Fast Shutter Speed:</strong>\n          </div>\n          <div style={pageStyle.column}>\n            <strong>Slow Shutter Speed:</strong>\n          </div>\n        </div>\n        <div style={pageStyle.row}>\n          <div style={pageStyle.column}>\n            Clearer subjects when they are moving. Darker picture because less\n            light can enter your camera.\n          </div>\n          <div style={pageStyle.column}>\n            Blurrier subjects when they are moving. Brighter pictures because\n            more light can enter your camera.\n          </div>\n        </div>\n      </div>\n      <p>\n        A shutter speed of 1/60 is the lowest speed you can get for a bright\n        photo that isn't noticeably blurry.\n      </p>\n    </div>\n  );\n};\n\nconst Aperture = () => {\n  return (\n    <div>\n      <h3>Aperture</h3>\n      <p>\n        The <strong>Aperture</strong> is the camera lens' opening that allows\n        light in. The measurement of that opening is called the{\" \"}\n        <strong>F-Stop</strong>. The Aperture and F-Stop are inversely\n        proportional.\n      </p>\n      <div style={pageStyle.table}>\n        <div style={pageStyle.row}>\n          <div style={pageStyle.column}>\n            <strong>Low F-Stop / High Aperture:</strong>\n          </div>\n          <div style={pageStyle.column}>\n            <strong>High F-Stop / Low Aperture:</strong>\n          </div>\n        </div>\n        <div style={pageStyle.row}>\n          <div style={pageStyle.column}>\n            Your Depth of Field is very narrow; your pictures will be brighter\n            and will have foreground and background blur.\n          </div>\n          <div style={pageStyle.column}>\n            Your Depth of Field is very wide; your pictures will be darker but\n            will have less blurred backgrounds and foregrounds.\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nconst ISO = () => {\n  return (\n    <div>\n      <h3>ISO</h3>\n      <p>\n        Your camera's <strong>ISO</strong> is a measure of how sensitive your\n        camera's sensors are to light.\n      </p>\n      <p>\n        Increasing your camera's ISO makes your pictures brighter, but it also\n        increases their <strong>noise</strong>, or their grainy-ness. This is\n        why night photos, which usually are taken with high ISO, have black dots\n        when you look closely.\n      </p>\n      <div style={pageStyle.table}>\n        <div style={pageStyle.row}>\n          <div style={pageStyle.column}>\n            <strong>Low ISO:</strong>\n          </div>\n          <div style={pageStyle.column}>\n            <strong>High ISO:</strong>\n          </div>\n        </div>\n        <div style={pageStyle.row}>\n          <div style={pageStyle.column}>\n            Your camera's sensors are not very sensitive, reducing overall\n            brightness. This makes your pictures less noisy though.\n          </div>\n          <div style={pageStyle.column}>\n            Your camera's sensors are very sensitive to light, meaning brighter\n            images. However, this make your pictures more noisy.\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport { Home, Aperture, ShutterSpeed, ISO };",
                  "solvedContent": null
                },
                {
                  "name": "navigation.jsx",
                  "codeLanguage": "jsx",
                  "content": "import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { navStyle } from \"./styles.jsx\";\n\nconst Navigation = (props) => {\n  return (\n    <nav style={navStyle.nav}>\n      <button style={navStyle.navLink}>Home</button>\n      <Link to=\"/aperture\">\n        <button style={navStyle.navLink}>Aperture</button>\n      </Link>\n      <button style={navStyle.navLink}>Shutter Speed</button>\n      <button style={navStyle.navLink}>ISO</button>\n    </nav>\n  );\n};\n\nexport default Navigation;",
                  "solvedContent": "import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { navStyle } from \"./styles.jsx\";\n\nconst Navigation = (props) => {\n  return (\n    <nav style={navStyle.nav}>\n      <Link to=\"/\">\n        <button style={navStyle.navLink}>Home</button>\n      </Link>\n      <Link to=\"/aperture\">\n        <button style={navStyle.navLink}>Aperture</button>\n      </Link>\n      <Link to=\"/shutterspeed\">\n        <button style={navStyle.navLink}>Shutter Speed</button>\n      </Link>\n      <Link to=\"/iso\">\n        <button style={navStyle.navLink}>ISO</button>\n      </Link>\n    </nav>\n  );\n};\n\nexport default Navigation;"
                },
                {
                  "name": "styles.jsx",
                  "codeLanguage": "jsx",
                  "content": "const wrapperStyle = {\n  wrapper: {\n    width: \"100%\",\n    fontFamily: \"Times New Roman, Verdana, Arial, sans-serif\",\n    fontSize: 16,\n    padding: 16,\n    boxSizing: \"border-box\",\n    textAlign: \"center\",\n  },\n};\n\nconst navStyle = {\n  nav: {\n    textAlign: \"center\",\n    display: \"flex\",\n    flexDirection: \"row\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    flexWrap: \"nowrap\",\n  },\n  navLink: {\n    flexBasis: \"100\",\n    flexShrink: \"1\",\n    margin: 2,\n    paddingLeft: 8,\n    paddingRight: 8,\n    paddingTop: 4,\n    paddingBottom: 4,\n    fontSize: 12,\n  },\n};\n\nconst pageStyle = {\n  table: {\n    width: \"100%\",\n    display: \"flex\",\n    flexDirection: \"column\",\n    flexWrap: \"nowrap\",\n    justifyContent: \"flex-start\",\n    alignItems: \"stretch\",\n  },\n  row: {\n    width: \"100%\",\n    marginBottom: 4,\n    display: \"flex\",\n    flexDirection: \"row\",\n    flexWrap: \"nowrap\",\n    justifyContent: \"space-between\",\n    alignItems: \"flex-start\",\n  },\n  column: {\n    flexBasis: \"50%\",\n    flexShrink: 1,\n    flexGrow: 0,\n    marginLeft: 4,\n    marginRight: 4,\n  },\n};\n\nexport { wrapperStyle, navStyle, pageStyle };",
                  "solvedContent": null
                }
              ],
              "hints": []
            }
          }
        ]
      }
    ]
  }
}