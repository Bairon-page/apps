{
  "tutorial": {
    "id": 2154,
    "version": 8,
    "type": "challenges",
    "isNew": false,
    "codeLanguage": "javascript",
    "title": "Synchrony & Asynchrony in JS",
    "descriptionContent": "Challenges are more difficult exercises that will test your skills.",
    "shortDescriptionContent": "",
    "showInTrack": true,
    "iconBanner": "tutorial-2154-icon-banner.svg",
    "chapters": [
      {
        "id": 13467,
        "title": "Fruit Grocery List",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "Fruit Grocery List",
            "id": 121144,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "It's breakfast time! We don't have any fruit at home, so we must go to the market with a list. Write a program that prints the fruits we need.\n1. Use the `.map()` method on the `fruitsArray` and save it into `newArrayOfStrings` .\n2. Use `fruitsList` for the callback function of `.map()`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const fruitsArray = ['apples', 'coconuts', 'bananas', 'strawberries',\r\n'oranges'];\r\n\r\nfunction fruitsList(fruit) {\r\n  return 'Buy 2 ' + fruit;\r\n}\r\nconst newArrayOfStrings = ;\r\nconsole.log(newArrayOfStrings);",
                  "solvedContent": "const fruitsArray = ['apples', 'coconuts', 'bananas', 'strawberries',\n'oranges'];\n\nfunction fruitsList(fruit) {\n  return 'Buy 2 ' + fruit;\n}\nconst newArrayOfStrings = fruitsArray.map(fruitsList);\nconsole.log(newArrayOfStrings);"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 13469,
        "title": "Best in Class",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "Best in Class",
            "id": 121146,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "The Math teacher wants to reward the best two students in class. The teacher knows that the best two students got more than 4/5 points in the exam. Help the teacher identify the best two grades from the class by calling the callback function.\n1. Include in `bestGrades` the `mathGrades` array with the `.filter()` method.\n2. Pass the `callbackConditional` function to the `.filter()` method to return the best two grades from the `mathGrades` array.\n",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const mathGrades = [5.0, 4.8, 3.5, 3.0];\nconst callbackConditional = (num) => num > 4;\n\nfunction bestMathGrades() {\n  const bestGrades = ;\n  console.log(bestGrades);\n  return bestGrades;\n}\nbestMathGrades();\nconsole.log(\"The best two grades in Maths\");",
                  "solvedContent": "const mathGrades = [5.0, 4.8, 3.5, 3.0];\nconst callbackConditional = (num) => num > 4;\n\nfunction bestMathGrades() {\n  const bestGrades = mathGrades.filter(callbackConditional);\n  console.log(bestGrades);\n  return bestGrades;\n}\nbestMathGrades();\nconsole.log(\"The best two grades in Maths\");"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 13475,
        "title": "Calculator App",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "Calculator App",
            "id": 121152,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "We need to test a program that sums two numbers. The program takes two numbers and a callback function.\n\n1. Include `5` and `7` and the callback function as parameters to the `calculator` function to see if it works.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const calculator = (number1, number2, callback) => {\r\n  console.log(\r\n    `The calculator gets the addition of the numbers ${number1} and ${number2}.`\r\n    );\r\n  const result = number1 + number2;\r\n  callback(result);\r\n};\r\nconst resultCalculator = result => console.log(`The result is ${result}`);",
                  "solvedContent": "const calculator = (number1, number2, callback) => {\n  console.log(\n    `The calculator gets the addition of the numbers ${number1} and ${number2}.`\n    );\n  const result = number1 + number2;\n  callback(result);\n};\nconst resultCalculator = result => console.log(`The result is ${result}`);\ncalculator(5, 7, resultCalculator);"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 13472,
        "title": "setTimeout",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "setTimeout",
            "id": 121149,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "We want to create a program that shows two messages. The second message should appear 1.5 seconds after the first one.\n1. Add a `setTimeout`  that calls the `callbackTime` function after 1.5 seconds.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "function callbackTime() {\r\n  console.log('Hi again! A second and a half later!!');\r\n}\r\nconsole.log('Hi');",
                  "solvedContent": "function callbackTime() {\n  console.log('Hi again! A second and a half later!!');\n}\nsetTimeout(callbackTime, 1500);\nconsole.log('Hi');"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 13470,
        "title": "Promises",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "Promises",
            "id": 121147,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "This program checks if the number of chairs is the same or greater than the total of students plus teachers.\n1. Add code that resolves with the message `\"Chairs are enough for students and teachers.\"`.\n2. When there are few chairs, create the reject scenario that prints `We need more chairs`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const school = {\n  students: 10,\n  teachers: 7,\n  chairs: 18\n};\n\nfunction enoughChairs() {\n  return new Promise(function(resolve, reject) {\n    if (school.chairs >= (school.students + school.teachers)) {\n     (\"Chairs are enough for students and teachers.\");\n    } else {\n     (\"We need more chairs\");\n    }\n  });\n}\nconst schoolData = enoughChairs();\nconsole.log(schoolData);",
                  "solvedContent": "const school = {\n  students: 10,\n  teachers: 7,\n  chairs: 18\n};\n\nfunction enoughChairs() {\n  return new Promise(function(resolve, reject) {\n    if (school.chairs >= (school.students + school.teachers)) {\n     resolve(\"Chairs are enough for students and teachers.\");\n    } else {\n     reject(\"We need more chairs\");\n    }\n  });\n}\nconst schoolData = enoughChairs();\nconsole.log(schoolData);"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 13474,
        "title": "async",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "async",
            "id": 121151,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "It's time for a delicious coffee,  and we want to add two spoons of sugar in it.\n1. Add `async` and `await` to enable the asynchronous response of the functions inside `putSugarOnMyCoffee`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const spoonsForCoffee = () => new Promise(function(resolve) {\n  let enoughSugar = false;\n  for (let spoons = 0; spoons <= 2; spoons++) {\n    if (spoons === 2) {\n      enoughSugar = true;\n    }\n  }\n  resolve(enoughSugar);\n  console.log('This coffee has two spoons of sugar');\n});\nconst isEnoughSugarForMyCoffee = sugar => new Promise(function(resolve) {\n  if (sugar) {\n    resolve(\"yummy! It tastes good!\");\n  } else {\n    reject('Another spoon of sugar, please.');\n  }\n});\nconst putSugarOnMyCoffee = () => {\n  const isEnoughSugar = spoonsForCoffee();\n  const response = isEnoughSugarForMyCoffee(isEnoughSugar);\n  console.log(response);\n};\nputSugarOnMyCoffee();",
                  "solvedContent": "const spoonsForCoffee = () => new Promise(function(resolve) {\n  let enoughSugar = false;\n  for (let spoons = 0; spoons <= 2; spoons++) {\n    if (spoons === 2) {\n      enoughSugar = true;\n    }\n  }\n  resolve(enoughSugar);\n  console.log('This coffee has two spoons of sugar');\n});\nconst isEnoughSugarForMyCoffee = sugar => new Promise(function(resolve) {\n  if (sugar) {\n    resolve(\"yummy! It tastes good!\");\n  } else {\n    reject('Another spoon of sugar, please.');\n  }\n});\nconst putSugarOnMyCoffee = async () => {\n  const isEnoughSugar = await spoonsForCoffee();\n  const response = await isEnoughSugarForMyCoffee(isEnoughSugar);\n  console.log(response);\n};\nputSugarOnMyCoffee();"
                }
              ],
              "hints": []
            }
          }
        ]
      }
    ]
  }
}