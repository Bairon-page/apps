{
  "tutorial": {
    "id": 1477,
    "version": 5,
    "type": "course",
    "isNew": false,
    "codeLanguage": "python",
    "title": "Slice Notation",
    "descriptionContent": "Slice Notation",
    "shortDescriptionContent": "",
    "showInTrack": true,
    "iconBanner": null,
    "chapters": [
      {
        "id": 10532,
        "title": "Start:Stop",
        "type": "practiceLevel1",
        "lessons": [
          {
            "title": "`start:stop` notation",
            "id": 96308,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Sometimes we want to retrieve multiple values from a list. We can do this using <strong>slicing</strong>. Let's look at the <code>[start:stop]</code> slicing syntax.</p><code version=\"2\" codelang=\"python\" name=\"script.py\" visible-if=\"always\"><content><text value=\"ingredients = [\" /><text value=\"&quot;eggs&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;flour&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;sugar&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;salt&quot;\" class=\"string\" /><text value=\"]\" /><text type=\"break\" /><text value=\"print(ingredients[\" /><text value=\"0\" class=\"number\" /><text value=\":\" /><text value=\"2\" class=\"number\" /><text value=\"])\" /></content><output><content><text value=\"['eggs', 'flour']\" /></content></output></code></body></html>"
          },
          {
            "title": "Start value",
            "id": 96309,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>The value to the left of the colon <code>:</code> is the <strong>start</strong> position for the slice. As we've covered previously, Python indexing starts at zero.</p><code version=\"2\" codelang=\"python\" name=\"script.py\" visible-if=\"always\"><content><text value=\"letters = [\" /><text value=\"&quot;A&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;B&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;C&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;D&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;E&quot;\" class=\"string\" /><text value=\"]\" /><text type=\"break\" /><text value=\"print(letters[\" /><text value=\"4\" class=\"number\" /><text value=\":])\" /><text type=\"break\" /><text value=\"print(letters[\" /><text value=\"1\" class=\"number\" /><text value=\":])\" /></content><output><content><text value=\"['E']\" /><text type=\"break\" /><text value=\"['B', 'C', 'D', 'E']\" /></content></output></code></body></html>"
          },
          {
            "title": "Example",
            "id": 97119,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>By coding <code>[3:]</code>, we're retrieving all values beginning at list position <code>3</code> to the end of the list.</p><code version=\"2\" codelang=\"python\" name=\"script.py\" visible-if=\"always\"><content><text value=\"letters = [\" /><text value=\"&quot;A&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;B&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;C&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;D&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;E&quot;\" class=\"string\" /><text value=\"]\" /><text type=\"break\" /><text value=\"print(letters[\" /><text value=\"3\" class=\"number\" /><text value=\":])\" /><text type=\"break\" /><text value=\"print(letters[\" /><text value=\"1\" class=\"number\" /><text value=\":])\" /></content><interactions><interaction type=\"validatedInput\" isDefault=\"true\" startIndex=\"49\" endIndex=\"53\" /></interactions><output><content><text value=\"['D', 'E']\" /><text type=\"break\" /><text value=\"['B', 'C', 'D', 'E']\" /></content></output></code><p visible-if=\"wrong\">Make sure to type <code>[3:]</code>.</p></body></html>"
          },
          {
            "title": "Start value options",
            "id": 96743,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>The start value can be positive, negative, or omitted completely. Negative values mean 'start this many elements back from the end'.</p><code version=\"2\" codelang=\"python\" name=\"script.py\" visible-if=\"always\"><content><text value=\"users = [\" /><text value=\"&quot;Alan&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;Beth&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;Carla&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;Dennis&quot;\" class=\"string\" /><text value=\"]\" /><text type=\"break\" /><text type=\"break\" /><text value=\"print(users[\" /><text value=\"0\" class=\"number\" /><text value=\":])\" /><text type=\"break\" /><text value=\"print(users[:])\" /><text type=\"break\" /><text value=\"print(users[\" /><text value=\"-2\" class=\"number\" /><text value=\":])\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"90\" endIndex=\"91\" /><option startIndex=\"91\" endIndex=\"92\" /></options></interaction></interactions><output><content><text value=\"['Alan', 'Beth', 'Carla', 'Dennis']\" /><text type=\"break\" /><text value=\"['Alan', 'Beth', 'Carla', 'Dennis']\" /><text type=\"break\" /><text value=\"['Carla', 'Dennis']\" /></content></output></code><p visible-if=\"wrong\">Make sure to pick <code>-</code>, followed by <code>2</code>.</p></body></html>"
          },
          {
            "title": "Start value outside range",
            "id": 96310,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Specifying a range outside the length of a list as the starting index will return an empty list, rather than resulting in an error.</p><code version=\"2\" codelang=\"python\" name=\"script.py\" visible-if=\"always\"><content><text value=\"letters = [\" /><text value=\"&quot;A&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;B&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;C&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;D&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;E&quot;\" class=\"string\" /><text value=\"]\" /><text type=\"break\" /><text value=\"print(letters[\" /><text value=\"6\" class=\"number\" /><text value=\":])\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"50\" endIndex=\"51\" /><option startIndex=\"51\" endIndex=\"52\" /><option startIndex=\"42\" endIndex=\"49\" /><option correct=\"false\"><content><text value=\"()\" /></content></option></options></interaction></interactions><output><content><text value=\"[]\" /></content></output></code><p visible-if=\"wrong\">Make sure to pick <code>letters</code>, followed by <code>6</code>, and finally <code>:</code>.</p></body></html>"
          },
          {
            "title": "Stop value",
            "id": 96311,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>A value after the colon <code>:</code> represents where the slice should <strong>stop</strong>. Note that the element in the stop position is <strong>not included</strong>.</p><code version=\"2\" codelang=\"python\" name=\"script.py\" visible-if=\"always\"><content><text value=\"scores = [\" /><text value=\"50\" class=\"number\" /><text value=\", \" /><text value=\"40\" class=\"number\" /><text value=\", \" /><text value=\"30\" class=\"number\" /><text value=\", \" /><text value=\"20\" class=\"number\" /><text value=\", \" /><text value=\"10\" class=\"number\" /><text value=\"]\" /><text type=\"break\" /><text value=\"print(scores[:\" /><text value=\"2\" class=\"number\" /><text value=\"])\" /><text type=\"break\" /><text value=\"print(scores[\" /><text value=\"2\" class=\"number\" /><text value=\":\" /><text value=\"4\" class=\"number\" /><text value=\"])\" /></content><output><content><text value=\"[50, 40]\" /><text type=\"break\" /><text value=\"[30, 20]\" /></content></output></code></body></html>"
          },
          {
            "title": "Stop value zero-indexing",
            "id": 96312,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>If we use a start value of <code>0</code> (or do not include one), a positive stop value will be equal to the number of elements returned.</p><p>Complete the code to return 3 elements.</p><code version=\"2\" codelang=\"python\" name=\"script.py\" visible-if=\"always\"><content><text value=\"grades = [\" /><text value=\"'A'\" class=\"string\" /><text value=\", \" /><text value=\"'B'\" class=\"string\" /><text value=\", \" /><text value=\"'C'\" class=\"string\" /><text value=\", \" /><text value=\"'D'\" class=\"string\" /><text value=\", \" /><text value=\"'E'\" class=\"string\" /><text value=\"]\" /><text type=\"break\" /><text value=\"print(grades[:\" /><text value=\"3\" class=\"number\" /><text value=\"])\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"49\" endIndex=\"50\" /><option startIndex=\"48\" endIndex=\"49\" /></options></interaction></interactions><output><content><text value=\"['A', 'B', 'C']\" /></content></output></code><p visible-if=\"wrong\">Make sure to pick <code>:</code>, followed by <code>3</code>.</p></body></html>"
          },
          {
            "title": "Stop value after start value",
            "id": 96313,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>A <code>start</code> index that is greater than the <code>stop</code> index in the <code>[start:stop]</code> format won't result in an error, but will return an empty list.</p><code version=\"2\" codelang=\"python\" name=\"script.py\" visible-if=\"always\"><content><text value=\"animals = [\" /><text value=\"'antelope'\" class=\"string\" /><text value=\", \" /><text value=\"'bear'\" class=\"string\" /><text value=\", \" /><text value=\"'cat'\" class=\"string\" /><text value=\", \" /><text value=\"'dog'\" class=\"string\" /><text value=\"]\" /><text type=\"break\" /><text type=\"break\" /><text value=\"print(animals[\" /><text value=\"3\" class=\"number\" /><text value=\":\" /><text value=\"0\" class=\"number\" /><text value=\"])\" /><text type=\"break\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"60\" endIndex=\"61\" /><option startIndex=\"61\" endIndex=\"62\" /></options></interaction></interactions><output><content><text value=\"[]\" /></content></output></code><p visible-if=\"wrong\">Make sure to pick <code>3</code>, followed by <code>:</code>.</p></body></html>"
          },
          {
            "title": "`start:stop:step` notation",
            "id": 96315,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>We can also use a format with two colons, <code>[start:stop:step]</code> , where <code>step</code> determines how Python steps between <code>start</code> and <code>end</code>.</p><code version=\"2\" codelang=\"python\" name=\"script.py\" visible-if=\"always\"><content><text value=\"alphabet = [\" /><text value=\"&quot;A&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;B&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;C&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;D&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;E&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;F&quot;\" class=\"string\" /><text value=\"]\" /><text type=\"break\" /><text type=\"break\" /><text value=\"print(alphabet[\" /><text value=\"1\" class=\"number\" /><text value=\":\" /><text value=\"6\" class=\"number\" /><text value=\":\" /><text value=\"2\" class=\"number\" /><text value=\"])\" /><text type=\"break\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"59\" endIndex=\"60\" /><option startIndex=\"61\" endIndex=\"62\" /></options></interaction></interactions><output><content><text value=\"['B', 'D', 'F']\" /></content></output></code><p visible-if=\"wrong\">Make sure to pick <code>:</code>, followed by <code>:</code>.</p></body></html>"
          },
          {
            "title": "`start:stop:step` notation - Copy",
            "id": 97122,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>A step value of <code>:2</code> means that instead of returning every value in the slice, we return every second value. <code>:3</code> would mean every third value.</p><code version=\"2\" codelang=\"python\" name=\"script.py\" visible-if=\"always\"><content><text value=\"alphabet = [\" /><text value=\"&quot;A&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;B&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;C&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;D&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;E&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;F&quot;\" class=\"string\" /><text value=\"]\" /><text type=\"break\" /><text type=\"break\" /><text value=\"print(alphabet[\" /><text value=\"1\" class=\"number\" /><text value=\":\" /><text value=\"6\" class=\"number\" /><text value=\":\" /><text value=\"2\" class=\"number\" /><text value=\"])\" /><text type=\"break\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"61\" endIndex=\"62\" /><option startIndex=\"62\" endIndex=\"63\" /><option correct=\"false\"><content><text value=\"True\" /></content></option></options></interaction></interactions><output><content><text value=\"['B', 'D', 'F']\" /></content></output></code><p visible-if=\"wrong\">Make sure to pick <code>:</code>, followed by <code>2</code>.</p></body></html>"
          },
          {
            "title": "`start:stop:step` example",
            "id": 96759,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>We can use the <code>step</code> value with no <code>start</code> or <code>end</code> value. By default this will work from the start to the end of the full original list.</p><code version=\"2\" codelang=\"python\" name=\"script.py\" visible-if=\"always\"><content><text value=\"friends = [\" /><text value=\"&quot;Anna&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;Bella&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;Carrie&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;Diana&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;Eleanor&quot;\" class=\"string\" /><text value=\"]\" /><text type=\"break\" /><text type=\"break\" /><text value=\"print(friends[::\" /><text value=\"2\" class=\"number\" /><text value=\"])\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"59\" endIndex=\"64\" /><option startIndex=\"65\" endIndex=\"72\" /></options></interaction></interactions><output><content><text value=\"['Anna', 'Carrie', 'Eleanor']\" /></content></output></code><p visible-if=\"wrong\">Make sure to pick <code>print</code>, followed by <code>friends</code>.</p></body></html>"
          },
          {
            "title": "start:stop:step negatives",
            "id": 96757,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Each value can be positive, negative, or omitted completely. To use the <code>step</code> value, we must always have two preceeding colons.</p><code version=\"2\" codelang=\"python\" name=\"script.py\" visible-if=\"always\"><content><text value=\"flowers = [\" /><text value=\"&quot;azalea&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;buttercup&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;carnation&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;daffodil&quot;\" class=\"string\" /><text value=\"]\" /><text type=\"break\" /><text type=\"break\" /><text value=\"print(flowers[\" /><text value=\"2\" class=\"number\" /><text value=\"::\" /><text value=\"-1\" class=\"number\" /><text value=\"])\" /><text type=\"break\" /><text value=\"print(flowers[:\" /><text value=\"3\" class=\"number\" /><text value=\":\" /><text value=\"2\" class=\"number\" /><text value=\"])\" /></content><output><content><text value=\"['carnation', 'buttercup', 'azalea']\" /><text type=\"break\" /><text value=\"['azalea', 'carnation']\" /></content></output></code></body></html>"
          },
          {
            "title": "Negative steps",
            "id": 96316,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p><code>step</code> can be negative, which allows us to use a <code>start</code> value larger than the <code>end</code> value. The order of the elements is reversed.</p><code version=\"2\" codelang=\"python\" name=\"script.py\" visible-if=\"always\"><content><text value=\"friends = [\" /><text value=\"&quot;Anna&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;Bella&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;Carrie&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;Diana&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;Eleanor&quot;\" class=\"string\" /><text value=\"]\" /><text type=\"break\" /><text type=\"break\" /><text value=\"print(friends[\" /><text value=\"3\" class=\"number\" /><text value=\":\" /><text value=\"0\" class=\"number\" /><text value=\":\" /><text value=\"-1\" class=\"number\" /><text value=\"])\" /></content><output><content><text value=\"['Diana', 'Carrie', 'Bella']\" /></content></output></code></body></html>"
          },
          {
            "title": "Negative steps example",
            "id": 96781,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>If no <code>start</code> or <code>end</code> value are given, Python will automatically work from the end of a list if a negative <code>step</code> is provided.</p><code version=\"2\" codelang=\"python\" name=\"script.py\" visible-if=\"always\"><content><text value=\"countries = [\" /><text value=\"&quot;Andorra&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;Brazil&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;China&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;Denmark&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;Egypt&quot;\" class=\"string\" /><text value=\"]\" /><text type=\"break\" /><text type=\"break\" /><text value=\"print(countries[::\" /><text value=\"-3\" class=\"number\" /><text value=\"])\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"82\" endIndex=\"83\" /><option startIndex=\"83\" endIndex=\"84\" /></options></interaction></interactions><output><content><text value=\"['Egypt', 'Brazil']\" /></content></output></code><p visible-if=\"wrong\">Make sure to pick <code>-</code>, followed by <code>3</code>.</p></body></html>"
          },
          {
            "title": "start:stop:step out of range",
            "id": 96758,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>An empty list, rather than an error, will be returned if there are no matching indexes. The <code>step</code> always works from the <code>start</code> value.</p><code version=\"2\" codelang=\"python\" name=\"script.py\" visible-if=\"always\"><content><text value=\"scores = [\" /><text value=\"100\" class=\"number\" /><text value=\", \" /><text value=\"200\" class=\"number\" /><text value=\", \" /><text value=\"300\" class=\"number\" /><text value=\", \" /><text value=\"400\" class=\"number\" /><text value=\", \" /><text value=\"500\" class=\"number\" /><text value=\"]\" /><text type=\"break\" /><text value=\"print(scores[\" /><text value=\"0\" class=\"number\" /><text value=\":\" /><text value=\"2\" class=\"number\" /><text value=\":\" /><text value=\"-1\" class=\"number\" /><text value=\"])\" /><text type=\"break\" /><text value=\"print(scores[\" /><text value=\"4\" class=\"number\" /><text value=\":\" /><text value=\"1\" class=\"number\" /><text value=\":\" /><text value=\"-1\" class=\"number\" /><text value=\"])\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"71\" endIndex=\"72\" /><option startIndex=\"73\" endIndex=\"74\" /></options></interaction></interactions><output><content><text value=\"[]\" /><text type=\"break\" /><text value=\"[500, 400, 300]\" /></content></output></code><p visible-if=\"wrong\">Make sure to pick <code>:</code>, followed by <code>:</code>.</p></body></html>"
          },
          {
            "title": "Question: start:stop",
            "id": 96317,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>When there is one colon in our indexing notation, which of the following is true?</p><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\">The value on the left is the <code>start</code> index and the value on the right is the <code>stop</code> index</item><item value=\"2\" correct=\"false\">It is necessary to have values on both sides of the colon</item></selection><p visible-if=\"wrong\">The value on the left is the <code>start</code> index and the value on the right is the <code>stop</code> index.</p></body></html>"
          },
          {
            "title": "Example: start:stop",
            "id": 96318,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Choose appropriate values for <code>start</code> and <code>stop</code> so that a list containing only <code>Anna</code> is printed.</p><code version=\"2\" codelang=\"python\" name=\"script.py\" visible-if=\"always\"><content><text value=\"members = [\" /><text value=\"&quot;Anna&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;Billie&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;Henry&quot;\" class=\"string\" /><text value=\"]\" /><text type=\"break\" /><text value=\"print(members[\" /><text value=\"0\" class=\"number\" /><text value=\":\" /><text value=\"1\" class=\"number\" /><text value=\"])\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"52\" endIndex=\"53\" /><option startIndex=\"54\" endIndex=\"55\" /><option correct=\"false\"><content><text value=\"2\" /></content></option></options></interaction></interactions><output><content><text value=\"['Anna']\" /></content></output></code><p visible-if=\"wrong\">Make sure to pick <code>0</code>, followed by <code>1</code>.</p></body></html>"
          },
          {
            "title": "Question: start values",
            "id": 96319,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Which of the following is true about <code>start</code> values?</p><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\">They can be higher than the length of the list, but this may not return any values</item><item value=\"2\" correct=\"false\">Only values within the length of the list can be used; an error will be thrown otherwise</item></selection><p visible-if=\"wrong\">They can be higher than the length of the list, but this may not return any values.</p></body></html>"
          },
          {
            "title": "Example: start values",
            "id": 96320,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Complete the code using negative index so that the final two scores are printed, <strong>regardless of how long the list is</strong>.</p><code version=\"2\" codelang=\"python\" name=\"script.py\" visible-if=\"always\"><content><text value=\"scores = [\" /><text value=\"50\" class=\"number\" /><text value=\", \" /><text value=\"60\" class=\"number\" /><text value=\", \" /><text value=\"30\" class=\"number\" /><text value=\", \" /><text value=\"100\" class=\"number\" /><text value=\", \" /><text value=\"200\" class=\"number\" /><text value=\"]\" /><text type=\"break\" /><text value=\"print(scores[\" /><text value=\"-2\" class=\"number\" /><text value=\":])\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"45\" endIndex=\"47\" /><option correct=\"false\"><content><text value=\"-3\" /></content></option></options></interaction></interactions><output><content><text value=\"[100, 200]\" /></content></output></code><p visible-if=\"wrong\">Make sure to pick <code>-2</code>.</p></body></html>"
          },
          {
            "title": "Example: stop values",
            "id": 96322,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Complete the code so that the first three elements in <code>readings</code> are printed.</p><code version=\"2\" codelang=\"python\" name=\"script.py\" visible-if=\"always\"><content><text value=\"readings = [\" /><text value=\"78\" class=\"number\" /><text value=\", \" /><text value=\"83\" class=\"number\" /><text value=\", \" /><text value=\"80\" class=\"number\" /><text value=\", \" /><text value=\"82\" class=\"number\" /><text value=\", \" /><text value=\"85\" class=\"number\" /><text value=\"]\" /><text type=\"break\" /><text value=\"first_3 = readings[:\" /><text value=\"3\" class=\"number\" /><text value=\"]\" /><text type=\"break\" /><text value=\"print(first_3)\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"51\" endIndex=\"53\" /><option correct=\"false\"><content><text value=\":2\" /></content></option></options></interaction></interactions><output><content><text value=\"[78, 83, 80]\" /></content></output></code><p visible-if=\"wrong\">Make sure to pick <code>:3</code>.</p></body></html>"
          },
          {
            "title": "Question: `start:stop:step`",
            "id": 96323,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Which of the following statements about using a <code>step</code> value is true?</p><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\">The <code>step</code> value must come after two colons in the slice notation</item><item value=\"2\" correct=\"false\">We can specify <code>step</code> anywhere in the notation</item></selection><p visible-if=\"wrong\">The <code>step</code> value must come after two colons in the slice notation.</p></body></html>"
          },
          {
            "title": "Example: step",
            "id": 96325,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Complete the code so that <code>[3, 2, 1]</code> is printed at the end.</p><code version=\"2\" codelang=\"python\" name=\"script.py\" visible-if=\"always\"><content><text value=\"countdown = [\" /><text value=\"&quot;3&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;pause&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;2&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;pause&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;1&quot;\" class=\"string\" /><text value=\"]\" /><text type=\"break\" /><text value=\"numbers_only = countdown[::\" /><text value=\"2\" class=\"number\" /><text value=\"] \" /><text type=\"break\" /><text value=\"print(numbers_only)\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"71\" endIndex=\"72\" /><option startIndex=\"72\" endIndex=\"73\" /><option startIndex=\"73\" endIndex=\"74\" /><option correct=\"false\"><content><text value=\"-2\" /></content></option></options></interaction></interactions><output><content><text value=\"['3', '2', '1']\" /></content></output></code><p visible-if=\"wrong\">Make sure to pick <code>:</code>, followed by <code>:</code>, and finally <code>2</code>.</p></body></html>"
          },
          {
            "title": "Question: negative step",
            "id": 96326,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Which of the following is true if we are using a negative <code>step</code> value?</p><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\"><code>start</code> needs to be either omitted or greater than <code>stop</code> to return elements</item><item value=\"2\" correct=\"false\">An error will be thrown if our <code>step</code> value is larger than the length of the list</item></selection><p visible-if=\"wrong\"><code>start</code> needs to be either omitted or greater than <code>stop</code> to return elements.</p></body></html>"
          },
          {
            "title": "Example: negative step",
            "id": 96327,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Complete the <code>start:stop:step</code> notation so that <code>[5, 5, 5]</code> is printed.</p><code version=\"2\" codelang=\"python\" name=\"script.py\" visible-if=\"always\"><content><text value=\"ratings = [\" /><text value=\"3\" class=\"number\" /><text value=\", \" /><text value=\"4\" class=\"number\" /><text value=\", \" /><text value=\"2\" class=\"number\" /><text value=\", \" /><text value=\"5\" class=\"number\" /><text value=\", \" /><text value=\"1\" class=\"number\" /><text value=\", \" /><text value=\"5\" class=\"number\" /><text value=\", \" /><text value=\"4\" class=\"number\" /><text value=\", \" /><text value=\"5\" class=\"number\" /><text value=\"]\" /><text type=\"break\" /><text value=\"print(ratings[\" /><text value=\"-1\" class=\"number\" /><text value=\":\" /><text value=\"2\" class=\"number\" /><text value=\":\" /><text value=\"-2\" class=\"number\" /><text value=\"])\" /><text type=\"break\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"49\" endIndex=\"51\" /><option startIndex=\"52\" endIndex=\"53\" /><option startIndex=\"54\" endIndex=\"56\" /><option correct=\"false\"><content><text value=\"-4\" /></content></option></options></interaction></interactions><output><content><text value=\"[5, 5, 5]\" /></content></output></code><p visible-if=\"wrong\">Make sure to pick <code>-1</code>, followed by <code>2</code>, and finally <code>-2</code>.</p></body></html>"
          }
        ]
      }
    ]
  }
}