{
  "tutorial": {
    "id": 3139,
    "version": 2,
    "type": "guidedProject",
    "isNew": false,
    "codeLanguage": "node",
    "title": "Pixel Grid - Part 3",
    "descriptionContent": "In the third part, you'll implement a new endpoint to let your users update pixels on the grid",
    "shortDescriptionContent": "",
    "showInTrack": true,
    "iconBanner": "tutorial-3139-icon-banner.svg",
    "chapters": [
      {
        "id": 15458,
        "title": "Chapter #1",
        "type": "practiceLevel3",
        "lessons": [
          {
            "title": "Lesson #2",
            "id": 135915,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Welcome back to the **Pixel Grid** back-end. In this part, we'll implement a `POST` endpoint to let our users update pixels on the grid.\n\nAs a prerequisite, we'll allow the server to parse JSON payloads using the built-in JSON middleware from Express.\n\n1. Make the app use Express's JSON middleware to enable our server to handle JSON data in incoming requests.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "app.js",
                  "codeLanguage": "javascript",
                  "content": "const express = require(\"express\");\nconst cors = require(\"cors\");\nconst db = require(\"./database\");\nconst app = express();\nconst PORT = 3000;\n\napp.use(cors());\n\napp.get(\"/grid\", (req, res) => {\n  try {\n    const rows = db.prepare(\"SELECT * FROM grid\").all();\n    res.status(200).json({ grid: rows });\n  } catch (error) {\n    res.status(500).json({ message: \"Error fetching grid data\", error });\n  }\n});\n\napp.listen(PORT, () => {\n  console.log(`Server is running on port ${PORT}`);\n});\n",
                  "solvedContent": "const express = require(\"express\");\nconst cors = require(\"cors\");\nconst db = require(\"./database\");\nconst app = express();\nconst PORT = 3000;\n\napp.use(cors());\napp.use(express.json());\n\napp.get(\"/grid\", (req, res) => {\n  try {\n    const rows = db.prepare(\"SELECT * FROM grid\").all();\n    res.status(200).json({ grid: rows });\n  } catch (error) {\n    res.status(500).json({ message: \"Error fetching grid data\", error });\n  }\n});\n\napp.listen(PORT, () => {\n  console.log(`Server is running on port ${PORT}`);\n});\n"
                },
                {
                  "name": "database.js",
                  "codeLanguage": "javascript",
                  "content": "const Database = require(\"better-sqlite3\");\nconst db = new Database(\"/tmp/grid.db\");\n\ndb.exec(`\n  CREATE TABLE IF NOT EXISTS grid (\n    x INT,\n    y INT,\n    color TEXT\n  )\n`);\n\nconst rowCount = db.prepare(\"SELECT COUNT(*) AS count FROM grid\").get().count;\n\nif (rowCount === 0) {\n  const grid = [];\n  for (let x = 0; x < 20; x++) {\n    for (let y = 0; y < 20; y++) {\n      grid.push({ x, y, color: \"white\" });\n    }\n  }\n\n  const insertStatement = db.prepare(\n    `INSERT INTO grid (x, y, color) VALUES (?, ?, ?)`,\n  );\n  const insertTransaction = db.transaction((rows) => {\n    for (const row of rows) {\n      insertStatement.run(row.x, row.y, row.color);\n    }\n  });\n\n  insertTransaction(grid);\n}\n\nmodule.exports = db;\n",
                  "solvedContent": null
                }
              ],
              "hints": [],
              "httpOptions": {
                "method": "GET",
                "path": "/grid",
                "body": null
              }
            }
          },
          {
            "title": "Lesson #3",
            "id": 135916,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Now, we'll start adding a new endpoint to update the color of a pixel in the pixel grid. As a first step, define the route and extract the data in the request to check for its integrity. A request without a color should be invalid.\n\n1. Create a new `POST` route handler for `\"/setGridColor\"`.\n2. Destructure `x`, `y`, and `color` from the body of the request object.\n3. If the `color` is missing, set the status to `400` and respond with a JSON with a property *message* and an appropriate error message.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "app.js",
                  "codeLanguage": "javascript",
                  "content": "const express = require(\"express\");\nconst cors = require(\"cors\");\nconst db = require(\"./database\");\nconst app = express();\nconst PORT = 3000;\n\napp.use(cors());\napp.use(express.json());\n\napp.get(\"/grid\", (req, res) => {\n  try {\n    const rows = db.prepare(\"SELECT * FROM grid\").all();\n    res.status(200).json({ grid: rows });\n  } catch (error) {\n    res.status(500).json({ message: \"Error fetching grid data\", error });\n  }\n});\n\napp.listen(PORT, () => {\n  console.log(`Server is running on port ${PORT}`);\n});\n",
                  "solvedContent": "const express = require(\"express\");\nconst cors = require(\"cors\");\nconst db = require(\"./database\");\nconst app = express();\nconst PORT = 3000;\n\napp.use(cors());\napp.use(express.json());\n\napp.get(\"/grid\", (req, res) => {\n  try {\n    const rows = db.prepare(\"SELECT * FROM grid\").all();\n    res.status(200).json({ grid: rows });\n  } catch (error) {\n    res.status(500).json({ message: \"Error fetching grid data\", error });\n  }\n});\n\napp.post(\"/setGridColor\", (req, res) => {\n  const { x, y, color } = req.body;\n\n  if (!color) {\n    return res.status(400).json({ message: \"Invalid color value\" });\n  }\n});\n\napp.listen(PORT, () => {\n  console.log(`Server is running on port ${PORT}`);\n});\n"
                },
                {
                  "name": "database.js",
                  "codeLanguage": "javascript",
                  "content": "const Database = require(\"better-sqlite3\");\nconst db = new Database(\"/tmp/grid.db\");\n\ndb.exec(`\n  CREATE TABLE IF NOT EXISTS grid (\n    x INT,\n    y INT,\n    color TEXT\n  )\n`);\n\nconst rowCount = db.prepare(\"SELECT COUNT(*) AS count FROM grid\").get().count;\n\nif (rowCount === 0) {\n  const grid = [];\n  for (let x = 0; x < 20; x++) {\n    for (let y = 0; y < 20; y++) {\n      grid.push({ x, y, color: \"white\" });\n    }\n  }\n\n  const insertStatement = db.prepare(\n    `INSERT INTO grid (x, y, color) VALUES (?, ?, ?)`,\n  );\n  const insertTransaction = db.transaction((rows) => {\n    for (const row of rows) {\n      insertStatement.run(row.x, row.y, row.color);\n    }\n  });\n\n  insertTransaction(grid);\n}\n\nmodule.exports = db;\n",
                  "solvedContent": null
                }
              ],
              "hints": [],
              "httpOptions": {
                "method": "POST",
                "path": "/setGridColor",
                "body": "{ \"x\": 1, \"y\": 1, \"color\": \"black\" }"
              }
            }
          },
          {
            "title": "Lesson #4",
            "id": 135917,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Next, validate the coordinates received in the request as the client should sent the coordinates along with the color so the back-end knows which pixel to paint in what color.\n\n1. Select the row from the database with the given `x` and `y` coordinates using `db.prepare(\"SELECT * FROM grid WHERE x = ? AND y = ?\").get(x, y);`.\n2. If no row is found, set the status to `400` and respond with a JSON with a property *message* and an appropriate error message.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "app.js",
                  "codeLanguage": "javascript",
                  "content": "const express = require(\"express\");\nconst cors = require(\"cors\");\nconst db = require(\"./database\");\nconst app = express();\nconst PORT = 3000;\n\napp.use(cors());\napp.use(express.json());\n\napp.get(\"/grid\", (req, res) => {\n  try {\n    const rows = db.prepare(\"SELECT * FROM grid\").all();\n    res.status(200).json({ grid: rows });\n  } catch (error) {\n    res.status(500).json({ message: \"Error fetching grid data\", error });\n  }\n});\n\napp.post(\"/setGridColor\", (req, res) => {\n  const { x, y, color } = req.body;\n\n  if (!color) {\n    return res.status(400).json({ message: \"Invalid color value\" });\n  }\n});\n\napp.listen(PORT, () => {\n  console.log(`Server is running on port ${PORT}`);\n});\n",
                  "solvedContent": "const express = require(\"express\");\nconst cors = require(\"cors\");\nconst db = require(\"./database\");\nconst app = express();\nconst PORT = 3000;\n\napp.use(cors());\napp.use(express.json());\n\napp.get(\"/grid\", (req, res) => {\n  try {\n    const rows = db.prepare(\"SELECT * FROM grid\").all();\n    res.status(200).json({ grid: rows });\n  } catch (error) {\n    res.status(500).json({ message: \"Error fetching grid data\", error });\n  }\n});\n\napp.post(\"/setGridColor\", (req, res) => {\n  const { x, y, color } = req.body;\n\n  if (!color) {\n    return res.status(400).json({ message: \"Invalid color value\" });\n  }\n\n  const row = db.prepare(\"SELECT * FROM grid WHERE x = ? AND y = ?\").get(x, y);\n\n  if (!row) {\n    return res.status(400).json({ message: \"Invalid coordinates\" });\n  }\n});\n\napp.listen(PORT, () => {\n  console.log(`Server is running on port ${PORT}`);\n});\n"
                },
                {
                  "name": "database.js",
                  "codeLanguage": "javascript",
                  "content": "const Database = require(\"better-sqlite3\");\nconst db = new Database(\"/tmp/grid.db\");\n\ndb.exec(`\n  CREATE TABLE IF NOT EXISTS grid (\n    x INT,\n    y INT,\n    color TEXT\n  )\n`);\n\nconst rowCount = db.prepare(\"SELECT COUNT(*) AS count FROM grid\").get().count;\n\nif (rowCount === 0) {\n  const grid = [];\n  for (let x = 0; x < 20; x++) {\n    for (let y = 0; y < 20; y++) {\n      grid.push({ x, y, color: \"white\" });\n    }\n  }\n\n  const insertStatement = db.prepare(\n    `INSERT INTO grid (x, y, color) VALUES (?, ?, ?)`,\n  );\n  const insertTransaction = db.transaction((rows) => {\n    for (const row of rows) {\n      insertStatement.run(row.x, row.y, row.color);\n    }\n  });\n\n  insertTransaction(grid);\n}\n\nmodule.exports = db;\n",
                  "solvedContent": null
                }
              ],
              "hints": [],
              "httpOptions": {
                "method": "POST",
                "path": "/setGridColor",
                "body": "{ \"x\": 1, \"y\": 1, \"color\": \"black\" }"
              }
            }
          },
          {
            "title": "Lesson #5",
            "id": 135918,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Finally, we'll update the pixel's color in the database and return the updated grid in the response. We want to return the full grid to ensure the user is up-to-date in case another user updates parts of the grid in the meantime.\n\n1. Update the color of the intended grid cell:\n   - Prepare a statement with `db.prepare(\"UPDATE ...\")`.\n   - Run the prepared statement with the passed values.\n2. After updating the pixel's color, retrieve the full grid from the database.\n3. Respond with the updated grid and a success message. Set the status code to `200` and ensure the response object returns a JSON with a *message* and a *grid* property.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "app.js",
                  "codeLanguage": "javascript",
                  "content": "const express = require(\"express\");\nconst cors = require(\"cors\");\nconst db = require(\"./database\");\nconst app = express();\nconst PORT = 3000;\n\napp.use(cors());\napp.use(express.json());\n\napp.get(\"/grid\", (req, res) => {\n  try {\n    const rows = db.prepare(\"SELECT * FROM grid\").all();\n    res.status(200).json({ grid: rows });\n  } catch (error) {\n    res.status(500).json({ message: \"Error fetching grid data\", error });\n  }\n});\n\napp.post(\"/setGridColor\", (req, res) => {\n  const { x, y, color } = req.body;\n\n  if (!color) {\n    return res.status(400).json({ message: \"Invalid color value\" });\n  }\n\n  const row = db.prepare(\"SELECT * FROM grid WHERE x = ? AND y = ?\").get(x, y);\n\n  if (!row) {\n    return res.status(400).json({ message: \"Invalid coordinates\" });\n  }\n});\n\napp.listen(PORT, () => {\n  console.log(`Server is running on port ${PORT}`);\n});",
                  "solvedContent": "const express = require(\"express\");\nconst cors = require(\"cors\");\nconst db = require(\"./database\");\nconst app = express();\nconst PORT = 3000;\n\napp.use(cors());\napp.use(express.json());\n\napp.get(\"/grid\", (req, res) => {\n  try {\n    const rows = db.prepare(\"SELECT * FROM grid\").all();\n    res.status(200).json({ grid: rows });\n  } catch (error) {\n    res.status(500).json({ message: \"Error fetching grid data\", error });\n  }\n});\n\napp.post(\"/setGridColor\", (req, res) => {\n  const { x, y, color } = req.body;\n\n  if (!color) {\n    return res.status(400).json({ message: \"Invalid color value\" });\n  }\n\n  const row = db.prepare(\"SELECT * FROM grid WHERE x = ? AND y = ?\").get(x, y);\n\n  if (!row) {\n    return res.status(400).json({ message: \"Invalid coordinates\" });\n  }\n\n  db.prepare(\"UPDATE grid SET color = ? WHERE x = ? AND y = ?\").run(\n    color,\n    x,\n    y,\n  );\n\n  const updatedGrid = db.prepare(\"SELECT * FROM grid\").all();\n  res.status(200).json({ message: \"Grid color updated\", grid: updatedGrid });\n});\n\napp.listen(PORT, () => {\n  console.log(`Server is running on port ${PORT}`);\n});"
                },
                {
                  "name": "database.js",
                  "codeLanguage": "javascript",
                  "content": "const Database = require(\"better-sqlite3\");\nconst db = new Database(\"/tmp/grid.db\");\n\ndb.exec(`\n  CREATE TABLE IF NOT EXISTS grid (\n    x INT,\n    y INT,\n    color TEXT\n  )\n`);\n\nconst rowCount = db.prepare(\"SELECT COUNT(*) AS count FROM grid\").get().count;\n\nif (rowCount === 0) {\n  const grid = [];\n  for (let x = 0; x < 20; x++) {\n    for (let y = 0; y < 20; y++) {\n      grid.push({ x, y, color: \"white\" });\n    }\n  }\n\n  const insertStatement = db.prepare(\n    `INSERT INTO grid (x, y, color) VALUES (?, ?, ?)`,\n  );\n  const insertTransaction = db.transaction((rows) => {\n    for (const row of rows) {\n      insertStatement.run(row.x, row.y, row.color);\n    }\n  });\n\n  insertTransaction(grid);\n}\n\nmodule.exports = db;\n",
                  "solvedContent": null
                }
              ],
              "hints": [],
              "httpOptions": {
                "method": "POST",
                "path": "/setGridColor",
                "body": "{ \"x\": 1, \"y\": 1, \"color\": \"black\" }"
              }
            }
          }
        ]
      }
    ]
  }
}