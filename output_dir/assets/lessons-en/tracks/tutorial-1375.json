{
  "tutorial": {
    "id": 1375,
    "version": 8,
    "type": "course",
    "isNew": false,
    "codeLanguage": "python",
    "title": "Using Classes",
    "descriptionContent": "Using classes",
    "shortDescriptionContent": "",
    "showInTrack": true,
    "iconBanner": null,
    "chapters": [
      {
        "id": 9982,
        "title": "Classes",
        "type": "practiceLevel1",
        "lessons": [
          {
            "title": "Intro 1",
            "id": 89343,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>As we build programs, we'll often need to create many similar but distinct objects. Like various different configurations of a computer.</p><code version=\"2\" codelang=\"python\" name=\"script.py\" visible-if=\"always\"><content><text value=\"computer1_size= \" /><text value=\"&quot;15&quot;\" class=\"string\" /><text type=\"break\" /><text value=\"computer1_storage = \" /><text value=\"&quot;1TB&quot;\" class=\"string\" /><text type=\"break\" /><text type=\"break\" /><text value=\"computer2_size = \" /><text value=\"&quot;13&quot;\" class=\"string\" /><text type=\"break\" /><text value=\"computer2_storage = \" /><text value=\"&quot;256GB&quot;\" class=\"string\" /><text type=\"break\" /><text type=\"break\" /><text value=\"print(\" /><text value=\"&quot;computer1 display size: &quot;\" class=\"string\" /><text value=\" + computer1_size)\" /><text type=\"break\" /><text value=\"print(\" /><text value=\"&quot;computer1 storage space: &quot;\" class=\"string\" /><text value=\" + computer1_storage)\" /><text type=\"break\" /><text type=\"break\" /><text value=\"print(\" /><text value=\"&quot;computer2 display size: &quot;\" class=\"string\" /><text value=\" + computer2_size)\" /><text type=\"break\" /><text value=\"print(\" /><text value=\"&quot;computer2 storage space: &quot;\" class=\"string\" /><text value=\" + computer2_storage)\" /></content><output><content><text value=\"computer1 display size: 15\" /><text type=\"break\" /><text value=\"computer1 storage space: 1TB\" /><text type=\"break\" /><text value=\"computer2 display size: 13\" /><text type=\"break\" /><text value=\"computer2 storage space: 256GB\" /></content></output></code></body></html>"
          },
          {
            "title": "Intro 2",
            "id": 88760,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Creating new variables for each of the different configurations of a computer would take a lot of time and could lead to mistakes.</p><code version=\"2\" codelang=\"python\" name=\"script.py\" visible-if=\"always\"><content><text value=\"computer1_size= \" /><text value=\"&quot;15&quot;\" class=\"string\" /><text type=\"break\" /><text value=\"computer1_storage = \" /><text value=\"&quot;1TB&quot;\" class=\"string\" /><text type=\"break\" /><text type=\"break\" /><text value=\"computer2_size = \" /><text value=\"&quot;13&quot;\" class=\"string\" /><text type=\"break\" /><text value=\"computer2_storage = \" /><text value=\"&quot;256GB&quot;\" class=\"string\" /><text type=\"break\" /><text type=\"break\" /><text value=\"computer3_size = \" /><text value=\"&quot;27&quot;\" class=\"string\" /><text type=\"break\" /><text value=\"computer3_storage = \" /><text value=\"&quot;2TB&quot;\" class=\"string\" /><text type=\"break\" /><text type=\"break\" /><text value=\"computer4_size = \" /><text value=\"&quot;21&quot;\" class=\"string\" /><text type=\"break\" /><text value=\"computer4_storage = \" /><text value=\"&quot;512GB&quot;\" class=\"string\" /><text type=\"break\" /><text type=\"break\" /><text value=\"computer5_size = \" /><text value=\"&quot;11&quot;\" class=\"string\" /><text type=\"break\" /><text value=\"computer5_storage = \" /><text value=\"&quot;128&quot;\" class=\"string\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"221\" endIndex=\"238\" /><option startIndex=\"239\" endIndex=\"240\" /><option startIndex=\"241\" endIndex=\"246\" /></options></interaction></interactions></code><p visible-if=\"wrong\">Make sure to pick <code>computer5_storage</code>, followed by <code>=</code>, and finally <code>\"128\"</code>.</p></body></html>"
          },
          {
            "title": "Intro 3",
            "id": 88759,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>To help us group data and functionality, we create a <strong>class</strong>. A class is a template that we use to create many similar but distinct things.</p><code version=\"2\" codelang=\"python\" name=\"script.py\" visible-if=\"always\"><content><text value=\"class\" class=\"keyword\" /><text value=\" \" /><text value=\"Computer\" class=\"title\" /><text value=\":\" /><text type=\"break\" /><text value=\"  \" /><text value=\"def\" class=\"keyword\" /><text value=\" \" /><text value=\"__init__\" class=\"title\" /><text value=\"(self, size, storage)\" class=\"params\" /><text value=\":\" /><text type=\"break\" /><text value=\"    self.size = size\" /><text type=\"break\" /><text value=\"    self.storage = storage\" /><text type=\"break\" /><text type=\"break\" /><text value=\"  \" /><text value=\"def\" class=\"keyword\" /><text value=\" \" /><text value=\"print_specs\" class=\"title\" /><text value=\"(self)\" class=\"params\" /><text value=\":\" /><text type=\"break\" /><text value=\"    print(\" /><text value=\"&quot;Display size: &quot;\" class=\"string\" /><text value=\" + self.size)\" /><text type=\"break\" /><text value=\"    print(\" /><text value=\"&quot;Storage size: &quot;\" class=\"string\" /><text value=\" + self.storage)\" /><text type=\"break\" /><text type=\"break\" /><text value=\"low_spec = Computer(\" /><text value=\"&quot;13&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;256GB&quot;\" class=\"string\" /><text value=\")\" /><text type=\"break\" /><text value=\"high_spec = Computer(\" /><text value=\"&quot;27&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;1TB&quot;\" class=\"string\" /><text value=\")\" /><text type=\"break\" /><text type=\"break\" /><text value=\"print(\" /><text value=\"&quot;Low Spec Computer:&quot;\" class=\"string\" /><text value=\")\" /><text type=\"break\" /><text value=\"low_spec.print_specs()\" /><text type=\"break\" /><text type=\"break\" /><text value=\"print(\" /><text value=\"&quot;High Spec Computer:&quot;\" class=\"string\" /><text value=\")\" /><text type=\"break\" /><text value=\"high_spec.print_specs()\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"0\" endIndex=\"5\" /><option correct=\"false\"><content><text value=\"print\" /></content></option></options></interaction></interactions><output><content><text value=\"Low Spec Computer:\" /><text type=\"break\" /><text value=\"Display size: 13\" /><text type=\"break\" /><text value=\"Storage size: 256GB\" /><text type=\"break\" /><text value=\"High Spec Computer:\" /><text type=\"break\" /><text value=\"Display size: 27\" /><text type=\"break\" /><text value=\"Storage size: 1TB\" /></content></output></code><p visible-if=\"wrong\">Make sure to pick <code>class</code>.</p></body></html>"
          },
          {
            "title": "Intro 4",
            "id": 89346,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>By using a template, we can create different configurations without having to create individual variables like <code>size</code> and <code>storage</code> each time.</p><code version=\"2\" codelang=\"python\" name=\"script.py\" visible-if=\"always\"><content><text value=\"class\" class=\"keyword\" /><text value=\" \" /><text value=\"Computer\" class=\"title\" /><text value=\":\" /><text type=\"break\" /><text value=\"  \" /><text value=\"def\" class=\"keyword\" /><text value=\" \" /><text value=\"__init__\" class=\"title\" /><text value=\"(self, size, storage)\" class=\"params\" /><text value=\":\" /><text type=\"break\" /><text value=\"   self.size = size\" /><text type=\"break\" /><text value=\"   self.storage = storage\" /><text type=\"break\" /><text type=\"break\" /><text value=\"  \" /><text value=\"def\" class=\"keyword\" /><text value=\" \" /><text value=\"print_specs\" class=\"title\" /><text value=\"(self)\" class=\"params\" /><text value=\":\" /><text type=\"break\" /><text value=\"    print(\" /><text value=\"&quot;Display size: &quot;\" class=\"string\" /><text value=\" + self.size)\" /><text type=\"break\" /><text value=\"    print(\" /><text value=\"&quot;Storage size: &quot;\" class=\"string\" /><text value=\" + self.storage)\" /><text type=\"break\" /><text type=\"break\" /><text value=\"low_spec = Computer(\" /><text value=\"&quot;13&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;256GB&quot;\" class=\"string\" /><text value=\")\" /><text type=\"break\" /><text value=\"mid_spec = Computer(\" /><text value=\"&quot;15&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;512GB&quot;\" class=\"string\" /><text value=\")\" /><text type=\"break\" /><text value=\"high_spec = Computer(\" /><text value=\"&quot;17&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;1TB&quot;\" class=\"string\" /><text value=\")\" /><text type=\"break\" /><text value=\"premium_spec = Computer(\" /><text value=\"&quot;17&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;2TB&quot;\" class=\"string\" /><text value=\")\" /><text type=\"break\" /><text type=\"break\" /></content></code></body></html>"
          },
          {
            "title": "Class",
            "id": 88761,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>To start creating the template we add the keyword <code>class</code> followed by a name and a colon. Here, we'll create the <code>class</code>, called <code>Person:</code>.</p><code version=\"2\" codelang=\"python\" name=\"script.py\" visible-if=\"always\"><content><text value=\"class\" class=\"keyword\" /><text value=\" \" /><text value=\"Person\" class=\"title\" /><text value=\":\" /><text type=\"break\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"0\" endIndex=\"5\" /><option startIndex=\"6\" endIndex=\"12\" /><option startIndex=\"12\" endIndex=\"13\" /></options></interaction></interactions></code><p visible-if=\"wrong\">Make sure to pick <code>class</code>, followed by <code>Person</code>, and finally <code>:</code>.</p></body></html>"
          },
          {
            "title": "Class",
            "id": 89034,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>To add code to the class, we indent from the keyword <code>class</code>. like with the <code>print()</code> statement here.</p><code version=\"2\" codelang=\"python\" name=\"script.py\" visible-if=\"always\"><content><text value=\"class\" class=\"keyword\" /><text value=\" \" /><text value=\"Person\" class=\"title\" /><text value=\":\" /><text type=\"break\" /><text value=\"  print(\" /><text value=\"&quot;inside the class&quot;\" class=\"string\" /><text value=\")\" /><text type=\"break\" /><text value=\"  \" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"16\" endIndex=\"21\" /><option startIndex=\"22\" endIndex=\"40\" /></options></interaction></interactions><output><content><text value=\"inside the class\" /></content></output></code><p visible-if=\"wrong\">Make sure to pick <code>print</code>, followed by <code>\"inside the class\"</code>.</p></body></html>"
          },
          {
            "title": "Class",
            "id": 89036,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Creating a variable inside a class works just like creating normal variables. It needs to be properly indented and assigned a value.</p><code version=\"2\" codelang=\"python\" name=\"script.py\" visible-if=\"always\"><content><text value=\"class\" class=\"keyword\" /><text value=\" \" /><text value=\"Person\" class=\"title\" /><text value=\":\" /><text type=\"break\" /><text value=\"  nationality = \" /><text value=\"&quot;French&quot;\" class=\"string\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"28\" endIndex=\"29\" /><option startIndex=\"30\" endIndex=\"38\" /></options></interaction></interactions></code><p visible-if=\"wrong\">Make sure to pick <code>=</code>, followed by <code>\"French\"</code>.</p></body></html>"
          },
          {
            "title": "Class",
            "id": 89347,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>We can add as many variables as we'd like inside a class, like with variable <code>hobby</code> with the value <code>\"Cooking\"</code> here.</p><code version=\"2\" codelang=\"python\" name=\"script.py\" visible-if=\"always\"><content><text value=\"class\" class=\"keyword\" /><text value=\" \" /><text value=\"Person\" class=\"title\" /><text value=\":\" /><text type=\"break\" /><text value=\"  nationality = \" /><text value=\"&quot;French&quot;\" class=\"string\" /><text type=\"break\" /><text value=\"  hobby = \" /><text value=\"&quot;Cooking&quot;\" class=\"string\" /></content><interactions><interaction type=\"validatedInput\" isDefault=\"true\" startIndex=\"49\" endIndex=\"58\" /></interactions></code><p visible-if=\"wrong\">Make sure to type <code>\"Cooking\"</code>.</p></body></html>"
          },
          {
            "title": "Question 1",
            "id": 88776,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Should the following code be group into a class?</p><code version=\"2\" codelang=\"python\" name=\"script.py\" visible-if=\"always\"><content><text value=\"person1_name = \" /><text value=\"&quot;Jess&quot;\" class=\"string\" /><text type=\"break\" /><text value=\"person1_age = \" /><text value=\"24\" class=\"number\" /><text type=\"break\" /><text type=\"break\" /><text value=\"person2_name = \" /><text value=\"&quot;Tom&quot;\" class=\"string\" /><text type=\"break\" /><text value=\"person2_age = \" /><text value=\"77\" class=\"number\" /><text type=\"break\" /><text type=\"break\" /><text value=\"person3_name = \" /><text value=\"&quot;Emily&quot;\" class=\"string\" /><text type=\"break\" /><text value=\"person3_age = \" /><text value=\"5\" class=\"number\" /></content></code><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\">Yes, a class could group a person with the variable's 'name' and 'age'</item><item value=\"2\" correct=\"false\">No, because there's no related data or functionality to store</item></selection><p visible-if=\"wrong\">Yes, a class could group a person with the variable's 'name' and 'age'.</p></body></html>"
          },
          {
            "title": "Question 2",
            "id": 89464,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Which of the following is the correct way to define a class using the keyword <code>class</code>?</p><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"false\"><code>Class grocery:</code></item><item value=\"2\" correct=\"true\"><code>class Grocery:</code></item></selection><p visible-if=\"wrong\"><code>class Grocery:</code>.</p></body></html>"
          },
          {
            "title": "Question 3",
            "id": 89465,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Which scenario does it make sense to use a class instead of multiple variables?</p><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\">Coding an online store where there are items <br />with a picture and name</item><item value=\"2\" correct=\"false\">Coding a once-off user-inputted function</item></selection><p visible-if=\"wrong\">Coding an online store where there are items <br />with a picture and name.</p></body></html>"
          },
          {
            "title": "Question 4",
            "id": 89466,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>How many variables can we add to a class?</p><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\">As many as we want</item><item value=\"2\" correct=\"false\">Two variables</item></selection><p visible-if=\"wrong\">As many as we want.</p></body></html>"
          },
          {
            "title": "Example 1",
            "id": 88778,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Assemble a class using the keyword <code>class</code>, the class name <code>Flower</code>, and <code>:</code>.</p><code version=\"2\" codelang=\"python\" name=\"script.py\" visible-if=\"always\"><content><text value=\"class\" class=\"keyword\" /><text value=\" \" /><text value=\"Flower\" class=\"title\" /><text value=\":\" /><text type=\"break\" /><text value=\"  color = \" /><text value=\"'red'\" class=\"string\" /></content><interactions><interaction type=\"validatedInput\" isDefault=\"true\" startIndex=\"0\" endIndex=\"13\" /></interactions></code><p visible-if=\"wrong\">Make sure to type <code>class Flower:</code>.</p></body></html>"
          },
          {
            "title": "Example 2",
            "id": 89470,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Add a print statement in the class that prints the variable 'color'.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "class Flower:\n  color = 'red'\n  ",
                  "solvedContent": "class Flower:\n  color = 'red'\n  print(color)"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Example 3",
            "id": 89467,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Add another variable to the class called <code>species</code> and set the value to be <code>rose</code>.</p><code version=\"2\" codelang=\"python\" name=\"script.py\" visible-if=\"always\"><content><text value=\"class\" class=\"keyword\" /><text value=\" \" /><text value=\"Flower\" class=\"title\" /><text value=\":\" /><text type=\"break\" /><text value=\"  color = \" /><text value=\"&quot;red&quot;\" class=\"string\" /><text type=\"break\" /><text value=\"  print(color)\" /><text type=\"break\" /><text value=\"  species = \" /><text value=\"&quot;rose&quot;\" class=\"string\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"47\" endIndex=\"54\" /><option startIndex=\"55\" endIndex=\"56\" /><option startIndex=\"57\" endIndex=\"63\" /></options></interaction></interactions><output><content><text value=\"red\" /></content></output></code><p visible-if=\"wrong\">Make sure to pick <code>species</code>, followed by <code>=</code>, and finally <code>\"rose\"</code>.</p></body></html>"
          },
          {
            "title": "Example 4",
            "id": 89472,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Assemble a <code>Bird</code> class and define a variable called 'can_fly' that has the value <code>True</code>.</p><code version=\"2\" codelang=\"python\" name=\"script.py\" visible-if=\"always\"><content><text value=\"class\" class=\"keyword\" /><text value=\" \" /><text value=\"Bird\" class=\"title\" /><text value=\":\" /><text type=\"break\" /><text value=\"  can_fly = \" /><text value=\"True\" class=\"literal\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"0\" endIndex=\"5\" /><option startIndex=\"14\" endIndex=\"21\" /><option startIndex=\"24\" endIndex=\"28\" /></options></interaction></interactions></code><p visible-if=\"wrong\">Make sure to pick <code>class</code>, followed by <code>can_fly</code>, and finally <code>True</code>.</p></body></html>"
          }
        ]
      }
    ]
  }
}