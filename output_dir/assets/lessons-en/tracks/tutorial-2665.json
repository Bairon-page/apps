{
  "tutorial": {
    "id": 2665,
    "version": 6,
    "type": "guidedProject",
    "isNew": false,
    "codeLanguage": "python",
    "title": "Draw a Card - Part 1",
    "descriptionContent": "In the Draw a Card project you'll create a virtual deck of cards. Shuffle them and then display them one by one using ASCII art.",
    "shortDescriptionContent": "",
    "showInTrack": true,
    "iconBanner": "tutorial-2665-icon-banner.svg",
    "chapters": [
      {
        "id": 14640,
        "title": "Chapter #1",
        "type": "practiceLevel3",
        "lessons": [
          {
            "title": "Lesson #1",
            "id": 129484,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Welcome to the **Draw a Card** project, where we'll work with digital cards.\n\nLet's start with the first step, creating a deck of cards. In a standard deck, there are 4 suits and 13 ranks. Let's create these lists.\n\n1. Create a `suits` list and add the 4 different suits as strings: `[\"♥\", \"♦\", \"♣\", \"♠\"]`.\n2. Create a `ranks` list and add the 13 different ranks as strings: `[\"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"J\", \"Q\", \"K\", \"A\"]`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "",
                  "solvedContent": "suits = [\"♥\", \"♦\", \"♣\", \"♠\"]\nranks = [\"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"J\", \"Q\", \"K\", \"A\"]"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Lesson #2",
            "id": 129485,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Next, we combine the suits and ranks to create a deck of 52 unique cards. We'll use tuples to represent each card.\n\n1. Create an empty list named `deck` that will hold all cards.\n2. Use a for loop to iterate over each suit and inside it, another for loop to iterate over each rank.\n3. Append each combination of suit and rank as a tuple to the deck list.\n4. Print the deck to display all the card combinations.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "suits = [\"♥\", \"♦\", \"♣\", \"♠\"]\nranks = [\"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"J\", \"Q\", \"K\", \"A\"]",
                  "solvedContent": "suits = [\"♥\", \"♦\", \"♣\", \"♠\"]\nranks = [\"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"J\", \"Q\", \"K\", \"A\"]\ndeck = []\n\nfor suit in suits:\n  for rank in ranks:\n    deck.append((suit, rank))\n\nprint(deck)"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Lesson #3",
            "id": 129486,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Cards should be drawn at random. For this, we need to shuffle the deck. \n\n1. Import the `random` module at the top of your Python script.\n2. Use `random.shuffle(deck)` to shuffle the deck.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "suits = [\"♥\", \"♦\", \"♣\", \"♠\"]\nranks = [\"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"J\", \"Q\", \"K\", \"A\"]\ndeck = []\n\nfor suit in suits:\n  for rank in ranks:\n    deck.append((suit, rank))\n\nprint(deck)",
                  "solvedContent": "import random\n\nsuits = [\"♥\", \"♦\", \"♣\", \"♠\"]\nranks = [\"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"J\", \"Q\", \"K\", \"A\"]\ndeck = []\n\nfor suit in suits:\n  for rank in ranks:\n    deck.append((suit, rank))\n\nprint(deck)\nrandom.shuffle(deck)"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Lesson #4",
            "id": 129487,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "We now have a code that generates a deck and shuffles it. Let's put the deck creation code in a function to make it reusable.\n\n1. Create a function called `create_deck` that takes no parameters.\n   - Move all your code, except the import statement, inside the newly created function.\n   - Have the function return the `deck`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "import random\n\nsuits = [\"♥\", \"♦\", \"♣\", \"♠\"]\nranks = [\"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"J\", \"Q\", \"K\", \"A\"]\ndeck = []\n\nfor suit in suits:\n  for rank in ranks:\n    deck.append((suit, rank))\n\nprint(deck)\nrandom.shuffle(deck)",
                  "solvedContent": "import random\n\ndef create_deck():\n  suits = [\"♥\", \"♦\", \"♣\", \"♠\"]\n  ranks = [\"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"J\", \"Q\", \"K\", \"A\"]\n  deck = []\n\n  for suit in suits:\n    for rank in ranks:\n      deck.append((suit, rank))\n\n  return deck"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Lesson #5",
            "id": 129488,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Let's create a function to draw a card from the deck. \n\n1. Define a new function named `draw_card` that takes `deck` as a parameter.\n2. Inside `draw_card`, create a `hand` variable and set it equal to the last element in `deck` list.\n3. Then remove the last element from `deck`. Since we just drew it, we should remove it from the deck.\n4. Return a tuple where the first value should be `hand` and the second one the updated `deck`.\n5. Both variables that you return as part of the tuple should be lists. One should hold one element, the other 51.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "import random\n\ndef create_deck():\n  suits = [\"♥\", \"♦\", \"♣\", \"♠\"]\n  ranks = [\"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"J\", \"Q\", \"K\", \"A\"]\n  deck = []\n\n  for suit in suits:\n    for rank in ranks:\n      deck.append((suit, rank))\n\n  return deck",
                  "solvedContent": "import random\n\ndef draw_card(deck):\n  hand = deck.pop()\n  return [hand], deck\n\ndef create_deck():\n  suits = [\"♥\", \"♦\", \"♣\", \"♠\"]\n  ranks = [\"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"J\", \"Q\", \"K\", \"A\"]\n  deck = []\n\n  for suit in suits:\n    for rank in ranks:\n      deck.append((suit, rank))\n\n  return deck"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Lesson #6",
            "id": 129489,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "It's time to put these functions to use.\n\n1. Outside of your function definitions, create a `deck` variable and set it equal to the return value of the `create_deck` function.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "import random\n\ndef draw_card(deck):\n  hand = deck.pop()\n  return [hand], deck\n\ndef create_deck():\n  suits = [\"♥\", \"♦\", \"♣\", \"♠\"]\n  ranks = [\"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"J\", \"Q\", \"K\", \"A\"]\n  deck = []\n\n  for suit in suits:\n    for rank in ranks:\n      deck.append((suit, rank))\n\n  return deck",
                  "solvedContent": "import random\n\ndef draw_card(deck):\n  hand = deck.pop()\n  return [hand], deck\n\ndef create_deck():\n  suits = [\"♥\", \"♦\", \"♣\", \"♠\"]\n  ranks = [\"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"J\", \"Q\", \"K\", \"A\"]\n  deck = []\n\n  for suit in suits:\n    for rank in ranks:\n      deck.append((suit, rank))\n\n  return deck\n\ndeck = create_deck()"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Lesson #6 - Copy",
            "id": 129491,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Draw cards until the deck is empty.\n\n1. Create a `while` loop that continues as long as there are cards left in the deck.\n2. Inside the loop, call `draw_card(deck)` to draw a card and update the deck.\n3. Create two variables, `hand` and `deck` that you assign the return value of `draw_card`.\n4. In every loop iteration, print the drawn card.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "import random\n\ndef draw_card(deck):\n  hand = deck.pop()\n  return [hand], deck\n\ndef create_deck():\n  suits = [\"♥\", \"♦\", \"♣\", \"♠\"]\n  ranks = [\"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"J\", \"Q\", \"K\", \"A\"]\n  deck = []\n\n  for suit in suits:\n    for rank in ranks:\n      deck.append((suit, rank))\n\n  return deck\n\ndeck = create_deck()",
                  "solvedContent": "import random\n\ndef draw_card(deck):\n  hand = deck.pop()\n  return [hand], deck\n\ndef create_deck():\n  suits = [\"♥\", \"♦\", \"♣\", \"♠\"]\n  ranks = [\"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"J\", \"Q\", \"K\", \"A\"]\n  deck = []\n\n  for suit in suits:\n    for rank in ranks:\n      deck.append((suit, rank))\n\n  return deck\n\ndeck = create_deck()\nwhile len(deck) > 0:\n  hand, deck = draw_card(deck)\n  print(hand[0])"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Lesson #6 - Copy - Copy",
            "id": 129493,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Let's make our script more interactive and let the user decide when to draw the next card.\n\n1. At the top of the block of your `while` loop, add an `input` function to wait for the user to press Enter before drawing a card.\n   - Add something like `\"Press Enter to draw the next card\"` as the prompt input.\n   - You don't need to save the input somewhere, as we don't need it. The `input` function will wait until enter is hit, and then the `while` loop will continue executing and drawing the next card.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "import random\n\ndef draw_card(deck):\n  hand = deck.pop()\n  return [hand], deck\n\ndef create_deck():\n  suits = [\"♥\", \"♦\", \"♣\", \"♠\"]\n  ranks = [\"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"J\", \"Q\", \"K\", \"A\"]\n  deck = []\n\n  for suit in suits:\n    for rank in ranks:\n      deck.append((suit, rank))\n\n  return deck\n\ndeck = create_deck()\nwhile len(deck) > 0:\n  hand, deck = draw_card(deck)\n  print(hand[0])",
                  "solvedContent": "import random\n\ndef draw_card(deck):\n  hand = deck.pop()\n  return [hand], deck\n\ndef create_deck():\n  suits = [\"♥\", \"♦\", \"♣\", \"♠\"]\n  ranks = [\"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"J\", \"Q\", \"K\", \"A\"]\n  deck = []\n\n  for suit in suits:\n    for rank in ranks:\n      deck.append((suit, rank))\n\n  return deck\n\ndeck = create_deck()\nwhile len(deck) > 0:\n  input(\"Press Enter to draw the next card\")\n  hand, deck = draw_card(deck)\n  print(hand[0])"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Lesson #6 - Copy - Copy",
            "id": 129492,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "After we run out of cards, we want to communicate that there are no more cards.\n\n1. Print a message after the loop has completed saying, 'We are out of cards'.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "import random\n\ndef draw_card(deck):\n  hand = deck.pop()\n  return [hand], deck\n\ndef create_deck():\n  suits = [\"♥\", \"♦\", \"♣\", \"♠\"]\n  ranks = [\"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"J\", \"Q\", \"K\", \"A\"]\n  deck = []\n\n  for suit in suits:\n    for rank in ranks:\n      deck.append((suit, rank))\n\n  return deck\n\ndeck = create_deck()\nwhile len(deck) > 0:\n  input(\"Press Enter to draw the next card\")\n  hand, deck = draw_card(deck)\n  print(hand[0])",
                  "solvedContent": "import random\n\ndef draw_card(deck):\n  hand = deck.pop()\n  return [hand], deck\n\ndef create_deck():\n  suits = [\"♥\", \"♦\", \"♣\", \"♠\"]\n  ranks = [\"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"J\", \"Q\", \"K\", \"A\"]\n  deck = []\n\n  for suit in suits:\n    for rank in ranks:\n      deck.append((suit, rank))\n\n  return deck\n\ndeck = create_deck()\nwhile len(deck) > 0:\n  input(\"Press Enter to draw the next card\")\n  hand, deck = draw_card(deck)\n  print(hand[0])\n\nprint(\"We are out of cards\")"
                }
              ],
              "hints": []
            }
          }
        ]
      }
    ]
  }
}