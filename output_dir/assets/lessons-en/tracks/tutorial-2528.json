{
  "tutorial": {
    "id": 2528,
    "version": 4,
    "type": "course",
    "isNew": false,
    "codeLanguage": "swift",
    "title": "Logical Operators",
    "descriptionContent": "Logical Operators",
    "shortDescriptionContent": "",
    "showInTrack": true,
    "iconBanner": null,
    "chapters": [
      {
        "id": 14270,
        "title": "The AND Operator",
        "type": "practiceLevel1",
        "lessons": [
          {
            "title": "Intro",
            "id": 126663,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>With logical operators, we can connect two or more conditions to decide a result.</p><p>Turn on the light bulb by connecting both the switch and battery.</p><webview version=\"2\" visible-if=\"always\" content=\"&lt;!doctype html&gt; &#xA;&lt;html lang=&quot;en&quot;&gt; &#xA;  &lt;head&gt; &#xA;    &lt;meta charset=&quot;UTF-8&quot; /&gt; &#xA;    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot; /&gt; &#xA;    &lt;title&gt;Logical AND Operator&lt;/title&gt; &#xA;    &lt;link &#xA;      rel=&quot;stylesheet&quot; &#xA;      href=&quot;https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css&quot; &#xA;    /&gt; &#xA;    &lt;style&gt; &#xA;      body { &#xA;        font-family: &quot;Poppins&quot;, sans-serif; &#xA;        margin: 20px auto; &#xA;        background-color: #121212; &#xA;        color: #ffffff; &#xA;        max-width: 600px; &#xA;      } &#xA;      .container { &#xA;        text-align: center; &#xA;        background-color: #1e1e1e; &#xA;        color: #ffffff; &#xA;        border-radius: 15px; &#xA;        box-shadow: 0 10px 20px rgba(0, 0, 0, 0.5); &#xA;        padding-bottom: 20px; &#xA;        margin: 20px; &#xA;      } &#xA;      #bulb { &#xA;        font-size: 80px; &#xA;        margin: 20px 0; &#xA;      } &#xA;      .controls { &#xA;        display: flex; &#xA;        justify-content: space-around; &#xA;        margin: 20px 0; &#xA;        flex-wrap: wrap; &#xA;        gap: 20px; &#xA;        padding: 0 20px; &#xA;      } &#xA;      .control { &#xA;        display: flex; &#xA;        flex-direction: column; &#xA;        align-items: center; &#xA;      } &#xA;      .control i { &#xA;        font-size: 50px; &#xA;        margin-bottom: 10px; &#xA;        transition: color 0.3s; &#xA;      } &#xA;      .control button { &#xA;        padding: 12px 25px; &#xA;        border: 1px solid #ff9800; &#xA;        border-radius: 5px; &#xA;        cursor: pointer; &#xA;        background-color: #ff9800; &#xA;        color: white; &#xA;        font-size: 16px; &#xA;        transition: &#xA;          background-color 0.3s, &#xA;          color 0.3s; &#xA;      } &#xA;      .control button:hover { &#xA;        background-color: white; &#xA;        color: #ff9800; &#xA;      } &#xA;      .status { &#xA;        margin-top: 20px; &#xA;        font-size: 20px; &#xA;      } &#xA;      .status span { &#xA;        display: block; &#xA;      } &#xA;      .status .yes { &#xA;        color: green; &#xA;      } &#xA;      .status .no { &#xA;        color: red; &#xA;      } &#xA;    &lt;/style&gt; &#xA;  &lt;/head&gt; &#xA;  &lt;body&gt; &#xA;    &lt;div class=&quot;container&quot;&gt; &#xA;      &lt;i id=&quot;bulb&quot; class=&quot;far fa-lightbulb&quot; style=&quot;color: gray&quot;&gt;&lt;/i&gt; &#xA;      &lt;div class=&quot;status&quot; id=&quot;bulb-status&quot;&gt;Bulb is off&lt;/div&gt; &#xA;      &lt;div class=&quot;controls&quot;&gt; &#xA;        &lt;div class=&quot;control&quot;&gt; &#xA;          &lt;i id=&quot;battery&quot; class=&quot;fas fa-battery-half&quot; style=&quot;color: gray&quot;&gt;&lt;/i&gt; &#xA;          &lt;button onclick=&quot;toggleBattery()&quot;&gt;Connect&lt;/button&gt; &#xA;          &lt;div id=&quot;battery-status&quot;&gt; &#xA;            Is battery connected? &lt;span class=&quot;no&quot;&gt;No.&lt;/span&gt; &#xA;          &lt;/div&gt; &#xA;        &lt;/div&gt; &#xA;        &lt;div class=&quot;control&quot;&gt; &#xA;          &lt;i id=&quot;switch&quot; class=&quot;fas fa-power-off&quot; style=&quot;color: gray&quot;&gt;&lt;/i&gt; &#xA;          &lt;button onclick=&quot;toggleSwitch()&quot;&gt;On&lt;/button&gt; &#xA;          &lt;div id=&quot;switch-status&quot;&gt; &#xA;            Is switch on? &lt;span class=&quot;no&quot;&gt;No.&lt;/span&gt; &#xA;          &lt;/div&gt; &#xA;        &lt;/div&gt; &#xA;      &lt;/div&gt; &#xA;    &lt;/div&gt; &#xA; &#xA;    &lt;script&gt; &#xA;      let batteryConnected = false; &#xA;      let switchOn = false; &#xA; &#xA;      function toggleBattery() { &#xA;        batteryConnected = !batteryConnected; &#xA;        document.getElementById(&quot;battery&quot;).style.color = batteryConnected &#xA;          ? &quot;#66bb6a&quot; &#xA;          : &quot;gray&quot;; &#xA;        document.getElementById(&quot;battery-status&quot;).innerHTML = &#xA;          `Is battery connected? &lt;span class=&quot;${batteryConnected ? &quot;yes&quot; : &quot;no&quot;}&quot;&gt;${batteryConnected ? &quot;Yes.&quot; : &quot;No.&quot;}&lt;/span&gt;`; &#xA;        document.querySelector( &#xA;          '.control button[onclick=&quot;toggleBattery()&quot;]', &#xA;        ).innerText = batteryConnected ? &quot;Disconnect&quot; : &quot;Connect&quot;; &#xA;        updateBulbStatus(); &#xA;      } &#xA; &#xA;      function toggleSwitch() { &#xA;        switchOn = !switchOn; &#xA;        document.getElementById(&quot;switch&quot;).style.color = switchOn &#xA;          ? &quot;#66bb6a&quot; &#xA;          : &quot;gray&quot;; &#xA;        document.getElementById(&quot;switch-status&quot;).innerHTML = &#xA;          `Is switch on? &lt;span class=&quot;${switchOn ? &quot;yes&quot; : &quot;no&quot;}&quot;&gt;${switchOn ? &quot;Yes.&quot; : &quot;No.&quot;}&lt;/span&gt;`; &#xA;        document.querySelector( &#xA;          '.control button[onclick=&quot;toggleSwitch()&quot;]', &#xA;        ).innerText = switchOn ? &quot;Off&quot; : &quot;On&quot;; &#xA;        updateBulbStatus(); &#xA;      } &#xA; &#xA;      function updateBulbStatus() { &#xA;        const bulb = document.getElementById(&quot;bulb&quot;); &#xA;        const bulbStatus = document.getElementById(&quot;bulb-status&quot;); &#xA;        if (batteryConnected &amp;&amp; switchOn) { &#xA;          bulb.classList.replace(&quot;far&quot;, &quot;fas&quot;); &#xA;          bulb.style.color = &quot;#ff9800&quot;; &#xA;          bulbStatus.innerHTML = &quot;Bulb is on&quot;; &#xA;        } else { &#xA;          bulb.classList.replace(&quot;fas&quot;, &quot;far&quot;); &#xA;          bulb.style.color = &quot;gray&quot;; &#xA;          bulbStatus.innerHTML = &quot;Bulb is off&quot;; &#xA;        } &#xA;      } &#xA;    &lt;/script&gt; &#xA;  &lt;/body&gt; &#xA;&lt;/html&gt; &#xA;\" /></body></html>"
          },
          {
            "title": "Intro 2",
            "id": 126664,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>A logical operator connects the two conditions for the battery and switch to decide if the bulb must be turned on or off.</p><webview version=\"2\" visible-if=\"always\" content=\"&lt;!doctype html&gt; &#xA;&lt;html lang=&quot;en&quot;&gt; &#xA;  &lt;head&gt; &#xA;    &lt;meta charset=&quot;UTF-8&quot; /&gt; &#xA;    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot; /&gt; &#xA;    &lt;title&gt;Logical AND Operator&lt;/title&gt; &#xA;    &lt;link &#xA;      rel=&quot;stylesheet&quot; &#xA;      href=&quot;https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css&quot; &#xA;    /&gt; &#xA;    &lt;style&gt; &#xA;      body { &#xA;        font-family: &quot;Poppins&quot;, sans-serif; &#xA;        margin: 20px auto; &#xA;        background-color: #121212; &#xA;        color: #ffffff; &#xA;        max-width: 600px; &#xA;      } &#xA;      .container { &#xA;        text-align: center; &#xA;        background-color: #1e1e1e; &#xA;        color: #ffffff; &#xA;        border-radius: 15px; &#xA;        box-shadow: 0 10px 20px rgba(0, 0, 0, 0.5); &#xA;        padding-bottom: 20px; &#xA;        margin: 20px; &#xA;      } &#xA;      #bulb { &#xA;        font-size: 80px; &#xA;        margin: 20px 0; &#xA;      } &#xA;      .controls { &#xA;        display: flex; &#xA;        justify-content: space-around; &#xA;        margin: 20px 0; &#xA;        flex-wrap: wrap; &#xA;        gap: 20px; &#xA;        padding: 0 20px; &#xA;      } &#xA;      .control { &#xA;        display: flex; &#xA;        flex-direction: column; &#xA;        align-items: center; &#xA;      } &#xA;      .control i { &#xA;        font-size: 50px; &#xA;        margin-bottom: 10px; &#xA;        transition: color 0.3s; &#xA;      } &#xA;      .control button { &#xA;        padding: 12px 25px; &#xA;        border: 1px solid #ff9800; &#xA;        border-radius: 5px; &#xA;        cursor: pointer; &#xA;        background-color: #ff9800; &#xA;        color: white; &#xA;        font-size: 16px; &#xA;        transition: &#xA;          background-color 0.3s, &#xA;          color 0.3s; &#xA;      } &#xA;      .control button:hover { &#xA;        background-color: white; &#xA;        color: #ff9800; &#xA;      } &#xA;      .status { &#xA;        margin-top: 20px; &#xA;        font-size: 20px; &#xA;      } &#xA;      .status span { &#xA;        display: block; &#xA;      } &#xA;      .status .yes { &#xA;        color: green; &#xA;      } &#xA;      .status .no { &#xA;        color: red; &#xA;      } &#xA;    &lt;/style&gt; &#xA;  &lt;/head&gt; &#xA;  &lt;body&gt; &#xA;    &lt;div class=&quot;container&quot;&gt; &#xA;      &lt;i id=&quot;bulb&quot; class=&quot;far fa-lightbulb&quot; style=&quot;color: gray&quot;&gt;&lt;/i&gt; &#xA;      &lt;div class=&quot;status&quot; id=&quot;bulb-status&quot;&gt;Bulb is off&lt;/div&gt; &#xA;      &lt;div class=&quot;controls&quot;&gt; &#xA;        &lt;div class=&quot;control&quot;&gt; &#xA;          &lt;i id=&quot;battery&quot; class=&quot;fas fa-battery-half&quot; style=&quot;color: gray&quot;&gt;&lt;/i&gt; &#xA;          &lt;button onclick=&quot;toggleBattery()&quot;&gt;Connect&lt;/button&gt; &#xA;          &lt;div id=&quot;battery-status&quot;&gt; &#xA;            Is battery connected? &lt;span class=&quot;no&quot;&gt;No.&lt;/span&gt; &#xA;          &lt;/div&gt; &#xA;        &lt;/div&gt; &#xA;        &lt;div class=&quot;control&quot;&gt; &#xA;          &lt;i id=&quot;switch&quot; class=&quot;fas fa-power-off&quot; style=&quot;color: gray&quot;&gt;&lt;/i&gt; &#xA;          &lt;button onclick=&quot;toggleSwitch()&quot;&gt;On&lt;/button&gt; &#xA;          &lt;div id=&quot;switch-status&quot;&gt; &#xA;            Is switch on? &lt;span class=&quot;no&quot;&gt;No.&lt;/span&gt; &#xA;          &lt;/div&gt; &#xA;        &lt;/div&gt; &#xA;      &lt;/div&gt; &#xA;    &lt;/div&gt; &#xA; &#xA;    &lt;script&gt; &#xA;      let batteryConnected = false; &#xA;      let switchOn = false; &#xA; &#xA;      function toggleBattery() { &#xA;        batteryConnected = !batteryConnected; &#xA;        document.getElementById(&quot;battery&quot;).style.color = batteryConnected &#xA;          ? &quot;#66bb6a&quot; &#xA;          : &quot;gray&quot;; &#xA;        document.getElementById(&quot;battery-status&quot;).innerHTML = &#xA;          `Is battery connected? &lt;span class=&quot;${batteryConnected ? &quot;yes&quot; : &quot;no&quot;}&quot;&gt;${batteryConnected ? &quot;Yes.&quot; : &quot;No.&quot;}&lt;/span&gt;`; &#xA;        document.querySelector( &#xA;          '.control button[onclick=&quot;toggleBattery()&quot;]', &#xA;        ).innerText = batteryConnected ? &quot;Disconnect&quot; : &quot;Connect&quot;; &#xA;        updateBulbStatus(); &#xA;      } &#xA; &#xA;      function toggleSwitch() { &#xA;        switchOn = !switchOn; &#xA;        document.getElementById(&quot;switch&quot;).style.color = switchOn &#xA;          ? &quot;#66bb6a&quot; &#xA;          : &quot;gray&quot;; &#xA;        document.getElementById(&quot;switch-status&quot;).innerHTML = &#xA;          `Is switch on? &lt;span class=&quot;${switchOn ? &quot;yes&quot; : &quot;no&quot;}&quot;&gt;${switchOn ? &quot;Yes.&quot; : &quot;No.&quot;}&lt;/span&gt;`; &#xA;        document.querySelector( &#xA;          '.control button[onclick=&quot;toggleSwitch()&quot;]', &#xA;        ).innerText = switchOn ? &quot;Off&quot; : &quot;On&quot;; &#xA;        updateBulbStatus(); &#xA;      } &#xA; &#xA;      function updateBulbStatus() { &#xA;        const bulb = document.getElementById(&quot;bulb&quot;); &#xA;        const bulbStatus = document.getElementById(&quot;bulb-status&quot;); &#xA;        if (batteryConnected &amp;&amp; switchOn) { &#xA;          bulb.classList.replace(&quot;far&quot;, &quot;fas&quot;); &#xA;          bulb.style.color = &quot;#ff9800&quot;; &#xA;          bulbStatus.innerHTML = &quot;Bulb is on&quot;; &#xA;        } else { &#xA;          bulb.classList.replace(&quot;fas&quot;, &quot;far&quot;); &#xA;          bulb.style.color = &quot;gray&quot;; &#xA;          bulbStatus.innerHTML = &quot;Bulb is off&quot;; &#xA;        } &#xA;      } &#xA;    &lt;/script&gt; &#xA;  &lt;/body&gt; &#xA;&lt;/html&gt; &#xA;\" /></body></html>"
          },
          {
            "title": "AND operator",
            "id": 126665,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>The <strong>AND</strong> operator <code>&amp;&amp;</code> returns <code>true</code> only if all the conditions are <code>true</code>.</p><code version=\"2\" codelang=\"swift\" name=\"main.swift\" visible-if=\"always\"><content><text value=\"let\" class=\"keyword\" /><text value=\" isBatteryOn = \" /><text value=\"true\" class=\"literal\" /><text value=\" \" /><text type=\"break\" /><text value=\"let\" class=\"keyword\" /><text value=\" isSwitchOn = \" /><text value=\"true\" class=\"literal\" /><text value=\" \" /><text type=\"break\" /><text value=\"print\" class=\"built_in\" /><text value=\"(isBatteryOn &amp;&amp; isSwitchOn)\" /></content><interactions><interaction type=\"validatedInput\" isDefault=\"true\" startIndex=\"65\" endIndex=\"67\" /></interactions><output><content><text value=\"true\" /></content></output></code><p visible-if=\"wrong\">Make sure to type <code>&amp;&amp;</code>.</p></body></html>"
          },
          {
            "title": "AND operator 2",
            "id": 126666,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>The <code>&amp;&amp;</code> operator will return <code>false</code> if one or more conditions are <code>false</code>. In the code, assign <code>false</code> to the <code>isSwitchOn</code> variable.</p><code version=\"2\" codelang=\"swift\" name=\"main.swift\" visible-if=\"always\"><content><text value=\"let\" class=\"keyword\" /><text value=\" isBatteryOn = \" /><text value=\"true\" class=\"literal\" /><text type=\"break\" /><text value=\"let\" class=\"keyword\" /><text value=\" isSwitchOn = \" /><text value=\"false\" class=\"literal\" /><text type=\"break\" /><text value=\"print\" class=\"built_in\" /><text value=\"(isBatteryOn &amp;&amp; isSwitchOn)\" /></content><interactions><interaction type=\"validatedInput\" isDefault=\"true\" startIndex=\"40\" endIndex=\"45\" /></interactions><output><content><text value=\"false\" /></content></output></code><p visible-if=\"wrong\">Make sure to type <code>false</code>.</p></body></html>"
          },
          {
            "title": "Logical expression",
            "id": 126667,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>When operands and operators compute a boolean value together, it forms a logical expression, like <code>isBatteryOn &amp;&amp; isSwitchOn</code>.</p><code version=\"2\" codelang=\"swift\" name=\"main.swift\" visible-if=\"always\"><content><text value=\"let\" class=\"keyword\" /><text value=\" isBatteryOn = \" /><text value=\"false\" class=\"literal\" /><text value=\" \" /><text type=\"break\" /><text value=\"let\" class=\"keyword\" /><text value=\" isSwitchOn = \" /><text value=\"false\" class=\"literal\" /><text value=\" \" /><text type=\"break\" /><text value=\"print\" class=\"built_in\" /><text value=\"(isBatteryOn &amp;&amp; isSwitchOn)\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"55\" endIndex=\"66\" /><option startIndex=\"67\" endIndex=\"69\" /><option startIndex=\"70\" endIndex=\"80\" /><option correct=\"false\"><content><text value=\"isWorking\" /></content></option></options></interaction></interactions><output><content><text value=\"false\" /></content></output></code><p visible-if=\"wrong\">Make sure to pick <code>isBatteryOn</code>, followed by <code>&amp;&amp;</code>, and finally <code>isSwitchOn</code>.</p></body></html>"
          },
          {
            "title": "Logical expression 2",
            "id": 126668,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>You can also store the result of a logical expression in a variable.</p><code version=\"2\" codelang=\"swift\" name=\"main.swift\" visible-if=\"always\"><content><text value=\"let\" class=\"keyword\" /><text value=\" isBatteryOn = \" /><text value=\"false\" class=\"literal\" /><text value=\" \" /><text type=\"break\" /><text value=\"let\" class=\"keyword\" /><text value=\" isSwitchOn = \" /><text value=\"false\" class=\"literal\" /><text value=\" \" /><text type=\"break\" /><text value=\"let\" class=\"keyword\" /><text value=\" result = isBatteryOn &amp;&amp; isSwitchOn \" /><text type=\"break\" /><text value=\"print\" class=\"built_in\" /><text value=\"(result)\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"49\" endIndex=\"52\" /><option startIndex=\"53\" endIndex=\"59\" /><option startIndex=\"60\" endIndex=\"61\" /><option correct=\"false\"><content><text value=\"==\" /></content></option></options></interaction></interactions><output><content><text value=\"false\" /></content></output></code><p visible-if=\"wrong\">Make sure to pick <code>let</code>, followed by <code>result</code>, and finally <code>=</code>.</p></body></html>"
          },
          {
            "title": "Question 1",
            "id": 126669,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Which logical operator gives us <code>true</code> if all the conditions are <code>true</code>?</p><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\"><code>&amp;&amp;</code></item><item value=\"3\" correct=\"false\"><code>!</code></item></selection><p visible-if=\"wrong\">Make sure to pick <code>&amp;&amp;</code>.</p></body></html>"
          },
          {
            "title": "Question 2",
            "id": 126670,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>What does this code print in the console?</p><code version=\"2\" codelang=\"swift\" name=\"main.swift\" visible-if=\"always\"><content><text value=\"let\" class=\"keyword\" /><text value=\" condition1 = \" /><text value=\"false\" class=\"literal\" /><text value=\" \" /><text type=\"break\" /><text value=\"let\" class=\"keyword\" /><text value=\" condition2 = \" /><text value=\"true\" class=\"literal\" /><text value=\" \" /><text type=\"break\" /><text value=\"let\" class=\"keyword\" /><text value=\" result = condition1 &amp;&amp; condition2 \" /><text type=\"break\" /><text value=\"print\" class=\"built_in\" /><text value=\"(result)\" /></content><output><content><text value=\"false\" /></content></output></code><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"false\"><code>true</code></item><item value=\"3\" correct=\"true\"><code>false</code></item></selection><p visible-if=\"wrong\">Make sure to pick <code>false</code>.</p></body></html>"
          },
          {
            "title": "Question 3",
            "id": 126671,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Which of the following is a logical expression?</p><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\"><code>condition1 &amp;&amp; condition2</code></item><item value=\"3\" correct=\"false\"><code>a + b</code></item></selection><p visible-if=\"wrong\"><code>condition1 &amp;&amp; condition2</code>.</p></body></html>"
          },
          {
            "title": "Question 4",
            "id": 126672,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>What does this code display in the console for the <code>result</code> variable? <code>true</code> or <code>false</code>? Go through the code step by step to figure it out.</p><code version=\"2\" codelang=\"swift\" name=\"main.swift\" visible-if=\"always\"><content><text value=\"let\" class=\"keyword\" /><text value=\" cost = \" /><text value=\"50\" class=\"number\" /><text value=\" \" /><text type=\"break\" /><text value=\"let\" class=\"keyword\" /><text value=\" sellPrice = \" /><text value=\"60\" class=\"number\" /><text value=\" \" /><text type=\"break\" /><text value=\"let\" class=\"keyword\" /><text value=\" profit = sellPrice - cost \" /><text type=\"break\" /><text value=\"print\" class=\"built_in\" /><text value=\"(profit) \" /><text type=\"break\" /><text value=\"let\" class=\"keyword\" /><text value=\" result = cost &lt; sellPrice &amp;&amp; profit &gt; \" /><text value=\"0\" class=\"number\" /><text value=\" \" /><text type=\"break\" /><text value=\"print\" class=\"built_in\" /><text value=\"(\" /><text value=\"&quot;result: \\(result)&quot;\" class=\"string\" /><text value=\")\" /></content><output><content><text value=\"10\" /><text type=\"break\" /><text value=\"result: true\" /></content></output></code><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\"><code>true</code></item><item value=\"3\" correct=\"false\"><code>false</code></item></selection><p visible-if=\"wrong\">Make sure to pick <code>true</code>.</p></body></html>"
          },
          {
            "title": "Example 1",
            "id": 126673,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Check if a driver's license can be issued to a person. Their age should be 18 or more and they should pass the driving test.</p><code version=\"2\" codelang=\"swift\" name=\"main.swift\" visible-if=\"always\"><content><text value=\"let\" class=\"keyword\" /><text value=\" age = \" /><text value=\"18\" class=\"number\" /><text value=\" \" /><text type=\"break\" /><text value=\"let\" class=\"keyword\" /><text value=\" isPass = \" /><text value=\"true\" class=\"literal\" /><text value=\" \" /><text type=\"break\" /><text value=\"let\" class=\"keyword\" /><text value=\" isEligible = age &gt;= \" /><text value=\"18\" class=\"number\" /><text value=\" &amp;&amp; isPass \" /><text type=\"break\" /><text value=\"print\" class=\"built_in\" /><text value=\"(isEligible)\" /></content><interactions><interaction type=\"validatedInput\" isDefault=\"true\" startIndex=\"60\" endIndex=\"62\" /></interactions><output><content><text value=\"true\" /></content></output></code><p visible-if=\"wrong\">Make sure to type <code>&amp;&amp;</code>.</p></body></html>"
          },
          {
            "title": "Example 2",
            "id": 126674,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Check if the user can send an e-mail. For that, the recipient should be valid and the subject should be filled.</p><code version=\"2\" codelang=\"swift\" name=\"main.swift\" visible-if=\"always\"><content><text value=\"let\" class=\"keyword\" /><text value=\" isRecipientValid = \" /><text value=\"true\" class=\"literal\" /><text type=\"break\" /><text value=\"let\" class=\"keyword\" /><text value=\" isSubjectFilled = \" /><text value=\"false\" class=\"literal\" /><text type=\"break\" /><text value=\"let\" class=\"keyword\" /><text value=\" isMailSent = isRecipientValid &amp;&amp; isSubjectFilled\" /><text type=\"break\" /><text value=\"print\" class=\"built_in\" /><text value=\"(\" /><text value=\"&quot;Mail Sending Successful?: \\(isMailSent)&quot;\" class=\"string\" /><text value=\")\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"90\" endIndex=\"92\" /><option startIndex=\"93\" endIndex=\"108\" /><option correct=\"false\"><content><text value=\"!\" /></content></option></options></interaction></interactions><output><content><text value=\"Mail Sending Successful?: false\" /></content></output></code><p visible-if=\"wrong\">Make sure to pick <code>&amp;&amp;</code>, followed by <code>isSubjectFilled</code>.</p></body></html>"
          },
          {
            "title": "Example 3",
            "id": 126675,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Store the logical expression in a <code>let</code> constant.</p><code version=\"2\" codelang=\"swift\" name=\"main.swift\" visible-if=\"always\"><content><text value=\"let\" class=\"keyword\" /><text value=\" isRecipientValid = \" /><text value=\"true\" class=\"literal\" /><text value=\" \" /><text type=\"break\" /><text value=\"let\" class=\"keyword\" /><text value=\" isSubjectFilled = \" /><text value=\"false\" class=\"literal\" /><text value=\" \" /><text type=\"break\" /><text value=\"let\" class=\"keyword\" /><text value=\" result = isRecipientValid &amp;&amp; isSubjectFilled \" /><text type=\"break\" /><text value=\"print\" class=\"built_in\" /><text value=\"(result)\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"58\" endIndex=\"61\" /><option startIndex=\"62\" endIndex=\"68\" /><option startIndex=\"69\" endIndex=\"70\" /><option correct=\"false\"><content><text value=\"&gt;\" /></content></option></options></interaction></interactions><output><content><text value=\"false\" /></content></output></code><p visible-if=\"wrong\">Make sure to pick <code>let</code>, followed by <code>result</code>, and finally <code>=</code>.</p></body></html>"
          },
          {
            "title": "Example 4",
            "id": 126676,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Store a logical expression in the <code>willSiteLoad</code> constant that checks if the WiFi is connected and the URL is valid to load a website.</p><code version=\"2\" codelang=\"swift\" name=\"main.swift\" visible-if=\"always\"><content><text value=\"let\" class=\"keyword\" /><text value=\" isWifiConnected = \" /><text value=\"true\" class=\"literal\" /><text value=\" \" /><text type=\"break\" /><text value=\"let\" class=\"keyword\" /><text value=\" isURLValid = \" /><text value=\"true\" class=\"literal\" /><text value=\" \" /><text type=\"break\" /><text value=\"let\" class=\"keyword\" /><text value=\" willSiteLoad = isWifiConnected &amp;&amp; isURLValid \" /><text type=\"break\" /><text value=\"print\" class=\"built_in\" /><text value=\"(willSiteLoad)\" /></content><interactions><interaction type=\"validatedInput\" isDefault=\"true\" startIndex=\"86\" endIndex=\"88\" /></interactions><output><content><text value=\"true\" /></content></output></code><p visible-if=\"wrong\">Make sure to type <code>&amp;&amp;</code>.</p></body></html>"
          }
        ]
      },
      {
        "id": 14271,
        "title": "OR and NOT Operators",
        "type": "practiceLevel1",
        "lessons": [
          {
            "title": "Intro - OR",
            "id": 126677,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>We've seen that the AND operator requires all conditions to be true. But what if it's enough for only one condition to be true?</p><webview version=\"2\" visible-if=\"always\" content=\"&lt;!doctype html&gt; &#xA;&lt;html lang=&quot;en&quot;&gt; &#xA;  &lt;head&gt; &#xA;    &lt;meta charset=&quot;UTF-8&quot; /&gt; &#xA;    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot; /&gt; &#xA;    &lt;title&gt;Control Fan&lt;/title&gt; &#xA;    &lt;link &#xA;      rel=&quot;stylesheet&quot; &#xA;      href=&quot;https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css&quot; &#xA;    /&gt; &#xA;    &lt;style&gt; &#xA;      body { &#xA;        font-family: &quot;Poppins&quot;, sans-serif; &#xA;        margin: 20px auto; &#xA;        background-color: #121212; &#xA;        color: #ffffff; &#xA;        max-width: 600px; &#xA;      } &#xA;      .container { &#xA;        text-align: center; &#xA;        background-color: #1e1e1e; &#xA;        color: #ffffff; &#xA;        border-radius: 15px; &#xA;        box-shadow: 0 10px 20px rgba(0, 0, 0, 0.5); &#xA;        padding-bottom: 20px; &#xA;        margin: 20px; &#xA;      } &#xA;      #fan { &#xA;        font-size: 80px; &#xA;        margin: 20px 0; &#xA;      } &#xA;      .controls { &#xA;        display: flex; &#xA;        justify-content: space-around; &#xA;        margin: 20px 0; &#xA;        flex-wrap: wrap; &#xA;        gap: 20px; &#xA;        padding: 0 20px; &#xA;      } &#xA;      .control { &#xA;        display: flex; &#xA;        flex-direction: column; &#xA;        align-items: center; &#xA;      } &#xA;      #battery, #power { &#xA;        font-size: 40px; &#xA;        margin-bottom: 10px; &#xA;        transition: color 0.3s; &#xA;      } &#xA;      .control button { &#xA;        padding: 12px 25px; &#xA;        border: 1px solid #ff9800; &#xA;        border-radius: 5px; &#xA;        cursor: pointer; &#xA;        background-color: #ff9800; &#xA;        color: white; &#xA;        font-size: 16px; &#xA;        transition: &#xA;          background-color 0.3s, &#xA;          color 0.3s; &#xA;      } &#xA;      .control button:hover { &#xA;        background-color: white; &#xA;        color: #ff9800; &#xA;      } &#xA;      .status { &#xA;        margin-top: 20px; &#xA;        font-size: 20px; &#xA;      } &#xA;      .status span { &#xA;        display: block; &#xA;      } &#xA;      .status .yes { &#xA;        color: green; &#xA;      } &#xA;      .status .no { &#xA;        color: red; &#xA;      } &#xA;    &lt;/style&gt; &#xA;  &lt;/head&gt; &#xA;  &lt;body&gt; &#xA;    &lt;div class=&quot;container&quot;&gt; &#xA;      &lt;i id=&quot;fan&quot; class=&quot;fas fa-fan&quot; style=&quot;color: gray&quot;&gt;&lt;/i&gt; &#xA;      &lt;div class=&quot;status&quot; id=&quot;fan-status&quot;&gt;Fan is off&lt;/div&gt; &#xA;      &lt;div class=&quot;controls&quot;&gt; &#xA;        &lt;div class=&quot;control&quot;&gt; &#xA;          &lt;i id=&quot;battery&quot; class=&quot;fas fa-battery-half&quot; style=&quot;color: gray&quot;&gt;&lt;/i&gt; &#xA;          &lt;button onclick=&quot;toggleBattery()&quot;&gt;Connect Battery&lt;/button&gt; &#xA;          &lt;div id=&quot;battery-status&quot;&gt; &#xA;            Is battery connected? &lt;span class=&quot;no&quot;&gt;No.&lt;/span&gt; &#xA;          &lt;/div&gt; &#xA;        &lt;/div&gt; &#xA;        &lt;div class=&quot;control&quot;&gt; &#xA;          &lt;i id=&quot;power&quot; class=&quot;fas fa-plug&quot; style=&quot;color: gray&quot;&gt;&lt;/i&gt; &#xA;          &lt;button onclick=&quot;togglePower()&quot;&gt;Connect Power&lt;/button&gt; &#xA;          &lt;div id=&quot;power-status&quot;&gt; &#xA;            Is power connected? &lt;span class=&quot;no&quot;&gt;No.&lt;/span&gt; &#xA;          &lt;/div&gt; &#xA;        &lt;/div&gt; &#xA;      &lt;/div&gt; &#xA;    &lt;/div&gt; &#xA; &#xA;    &lt;script&gt; &#xA;      let batteryConnected = false; &#xA;      let powerConnected = false; &#xA; &#xA;      function toggleBattery() { &#xA;        batteryConnected = !batteryConnected; &#xA;        document.getElementById(&quot;battery&quot;).style.color = batteryConnected &#xA;          ? &quot;#66bb6a&quot; &#xA;          : &quot;gray&quot;; &#xA;        document.getElementById(&quot;battery-status&quot;).innerHTML = &#xA;          `Is battery connected? &lt;span class=&quot;${batteryConnected ? &quot;yes&quot; : &quot;no&quot;}&quot;&gt;${batteryConnected ? &quot;Yes.&quot; : &quot;No.&quot;}&lt;/span&gt;`; &#xA;        document.querySelector( &#xA;          '.control button[onclick=&quot;toggleBattery()&quot;]', &#xA;        ).innerText = batteryConnected ? &quot;Disconnect Battery&quot; : &quot;Connect Battery&quot;; &#xA;        updateFanStatus(); &#xA;      } &#xA; &#xA;      function togglePower() { &#xA;        powerConnected = !powerConnected; &#xA;        document.getElementById(&quot;power&quot;).style.color = powerConnected &#xA;          ? &quot;#66bb6a&quot; &#xA;          : &quot;gray&quot;; &#xA;        document.getElementById(&quot;power-status&quot;).innerHTML = &#xA;          `Is power connected? &lt;span class=&quot;${powerConnected ? &quot;yes&quot; : &quot;no&quot;}&quot;&gt;${powerConnected ? &quot;Yes.&quot; : &quot;No.&quot;}&lt;/span&gt;`; &#xA;        document.querySelector( &#xA;          '.control button[onclick=&quot;togglePower()&quot;]', &#xA;        ).innerText = powerConnected ? &quot;Disconnect Power&quot; : &quot;Connect Power&quot;; &#xA;        updateFanStatus(); &#xA;      } &#xA; &#xA;      function updateFanStatus() { &#xA;        const fan = document.getElementById(&quot;fan&quot;); &#xA;        const fanStatus = document.getElementById(&quot;fan-status&quot;); &#xA; &#xA;        if (batteryConnected || powerConnected) { &#xA;          fan.style.color = &quot;#ff9800&quot;; &#xA;          fanStatus.innerHTML = &quot;Fan is on&quot;; &#xA;        } else { &#xA;          fan.style.color = &quot;gray&quot;; &#xA;          fanStatus.innerHTML = &quot;Fan is off&quot;; &#xA;        } &#xA;      } &#xA;    &lt;/script&gt; &#xA;  &lt;/body&gt; &#xA;&lt;/html&gt;\" /></body></html>"
          },
          {
            "title": "Intro - OR 2",
            "id": 126678,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>For example, the light bulb here switches on if the battery is connected <em>or</em> the power is connected.</p><webview version=\"2\" visible-if=\"always\" content=\"&lt;!doctype html&gt; &#xA;&lt;html lang=&quot;en&quot;&gt; &#xA;  &lt;head&gt; &#xA;    &lt;meta charset=&quot;UTF-8&quot; /&gt; &#xA;    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot; /&gt; &#xA;    &lt;title&gt;Control Fan&lt;/title&gt; &#xA;    &lt;link &#xA;      rel=&quot;stylesheet&quot; &#xA;      href=&quot;https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css&quot; &#xA;    /&gt; &#xA;    &lt;style&gt; &#xA;      body { &#xA;        font-family: &quot;Poppins&quot;, sans-serif; &#xA;        margin: 20px auto; &#xA;        background-color: #121212; &#xA;        color: #ffffff; &#xA;        max-width: 600px; &#xA;      } &#xA;      .container { &#xA;        text-align: center; &#xA;        background-color: #1e1e1e; &#xA;        color: #ffffff; &#xA;        border-radius: 15px; &#xA;        box-shadow: 0 10px 20px rgba(0, 0, 0, 0.5); &#xA;        padding-bottom: 20px; &#xA;        margin: 20px; &#xA;      } &#xA;      #fan { &#xA;        font-size: 80px; &#xA;        margin: 20px 0; &#xA;      } &#xA;      .controls { &#xA;        display: flex; &#xA;        justify-content: space-around; &#xA;        margin: 20px 0; &#xA;        flex-wrap: wrap; &#xA;        gap: 20px; &#xA;        padding: 0 20px; &#xA;      } &#xA;      .control { &#xA;        display: flex; &#xA;        flex-direction: column; &#xA;        align-items: center; &#xA;      } &#xA;      #battery, #power { &#xA;        font-size: 40px; &#xA;        margin-bottom: 10px; &#xA;        transition: color 0.3s; &#xA;      } &#xA;      .control button { &#xA;        padding: 12px 25px; &#xA;        border: 1px solid #ff9800; &#xA;        border-radius: 5px; &#xA;        cursor: pointer; &#xA;        background-color: #ff9800; &#xA;        color: white; &#xA;        font-size: 16px; &#xA;        transition: &#xA;          background-color 0.3s, &#xA;          color 0.3s; &#xA;      } &#xA;      .control button:hover { &#xA;        background-color: white; &#xA;        color: #ff9800; &#xA;      } &#xA;      .status { &#xA;        margin-top: 20px; &#xA;        font-size: 20px; &#xA;      } &#xA;      .status span { &#xA;        display: block; &#xA;      } &#xA;      .status .yes { &#xA;        color: green; &#xA;      } &#xA;      .status .no { &#xA;        color: red; &#xA;      } &#xA;    &lt;/style&gt; &#xA;  &lt;/head&gt; &#xA;  &lt;body&gt; &#xA;    &lt;div class=&quot;container&quot;&gt; &#xA;      &lt;i id=&quot;fan&quot; class=&quot;fas fa-fan&quot; style=&quot;color: gray&quot;&gt;&lt;/i&gt; &#xA;      &lt;div class=&quot;status&quot; id=&quot;fan-status&quot;&gt;Fan is off&lt;/div&gt; &#xA;      &lt;div class=&quot;controls&quot;&gt; &#xA;        &lt;div class=&quot;control&quot;&gt; &#xA;          &lt;i id=&quot;battery&quot; class=&quot;fas fa-battery-half&quot; style=&quot;color: gray&quot;&gt;&lt;/i&gt; &#xA;          &lt;button onclick=&quot;toggleBattery()&quot;&gt;Connect Battery&lt;/button&gt; &#xA;          &lt;div id=&quot;battery-status&quot;&gt; &#xA;            Is battery connected? &lt;span class=&quot;no&quot;&gt;No.&lt;/span&gt; &#xA;          &lt;/div&gt; &#xA;        &lt;/div&gt; &#xA;        &lt;div class=&quot;control&quot;&gt; &#xA;          &lt;i id=&quot;power&quot; class=&quot;fas fa-plug&quot; style=&quot;color: gray&quot;&gt;&lt;/i&gt; &#xA;          &lt;button onclick=&quot;togglePower()&quot;&gt;Connect Power&lt;/button&gt; &#xA;          &lt;div id=&quot;power-status&quot;&gt; &#xA;            Is power connected? &lt;span class=&quot;no&quot;&gt;No.&lt;/span&gt; &#xA;          &lt;/div&gt; &#xA;        &lt;/div&gt; &#xA;      &lt;/div&gt; &#xA;    &lt;/div&gt; &#xA; &#xA;    &lt;script&gt; &#xA;      let batteryConnected = false; &#xA;      let powerConnected = false; &#xA; &#xA;      function toggleBattery() { &#xA;        batteryConnected = !batteryConnected; &#xA;        document.getElementById(&quot;battery&quot;).style.color = batteryConnected &#xA;          ? &quot;#66bb6a&quot; &#xA;          : &quot;gray&quot;; &#xA;        document.getElementById(&quot;battery-status&quot;).innerHTML = &#xA;          `Is battery connected? &lt;span class=&quot;${batteryConnected ? &quot;yes&quot; : &quot;no&quot;}&quot;&gt;${batteryConnected ? &quot;Yes.&quot; : &quot;No.&quot;}&lt;/span&gt;`; &#xA;        document.querySelector( &#xA;          '.control button[onclick=&quot;toggleBattery()&quot;]', &#xA;        ).innerText = batteryConnected ? &quot;Disconnect Battery&quot; : &quot;Connect Battery&quot;; &#xA;        updateFanStatus(); &#xA;      } &#xA; &#xA;      function togglePower() { &#xA;        powerConnected = !powerConnected; &#xA;        document.getElementById(&quot;power&quot;).style.color = powerConnected &#xA;          ? &quot;#66bb6a&quot; &#xA;          : &quot;gray&quot;; &#xA;        document.getElementById(&quot;power-status&quot;).innerHTML = &#xA;          `Is power connected? &lt;span class=&quot;${powerConnected ? &quot;yes&quot; : &quot;no&quot;}&quot;&gt;${powerConnected ? &quot;Yes.&quot; : &quot;No.&quot;}&lt;/span&gt;`; &#xA;        document.querySelector( &#xA;          '.control button[onclick=&quot;togglePower()&quot;]', &#xA;        ).innerText = powerConnected ? &quot;Disconnect Power&quot; : &quot;Connect Power&quot;; &#xA;        updateFanStatus(); &#xA;      } &#xA; &#xA;      function updateFanStatus() { &#xA;        const fan = document.getElementById(&quot;fan&quot;); &#xA;        const fanStatus = document.getElementById(&quot;fan-status&quot;); &#xA; &#xA;        if (batteryConnected || powerConnected) { &#xA;          fan.style.color = &quot;#ff9800&quot;; &#xA;          fanStatus.innerHTML = &quot;Fan is on&quot;; &#xA;        } else { &#xA;          fan.style.color = &quot;gray&quot;; &#xA;          fanStatus.innerHTML = &quot;Fan is off&quot;; &#xA;        } &#xA;      } &#xA;    &lt;/script&gt; &#xA;  &lt;/body&gt; &#xA;&lt;/html&gt;\" /></body></html>"
          },
          {
            "title": "OR operator",
            "id": 126679,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>For such conditions, we use the <strong>OR</strong> operator <code>||</code>, which returns <code>true</code> as long as at least one of the conditions is <code>true</code>.</p><code version=\"2\" codelang=\"swift\" name=\"main.swift\" visible-if=\"always\"><content><text value=\"let\" class=\"keyword\" /><text value=\" isBatteryOn = \" /><text value=\"true\" class=\"literal\" /><text value=\" \" /><text type=\"break\" /><text value=\"let\" class=\"keyword\" /><text value=\" isPowerOn = \" /><text value=\"false\" class=\"literal\" /><text value=\" \" /><text type=\"break\" /><text value=\"print\" class=\"built_in\" /><text value=\"(isBatteryOn || isPowerOn)\" /></content><interactions><interaction type=\"validatedInput\" isDefault=\"true\" startIndex=\"65\" endIndex=\"67\" /></interactions><output><content><text value=\"true\" /></content></output></code><p visible-if=\"wrong\">Make sure to type <code>||</code>.</p></body></html>"
          },
          {
            "title": "OR operator 2",
            "id": 126680,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>If all the conditions are <code>false</code>, then the <code>||</code> operator returns <code>false</code>. Set the <code>isPowerOn</code> variable to <code>false</code>.</p><code version=\"2\" codelang=\"swift\" name=\"main.swift\" visible-if=\"always\"><content><text value=\"let\" class=\"keyword\" /><text value=\" isBatteryOn = \" /><text value=\"false\" class=\"literal\" /><text value=\" \" /><text type=\"break\" /><text value=\"let\" class=\"keyword\" /><text value=\" isPowerOn = \" /><text value=\"false\" class=\"literal\" /><text value=\" \" /><text type=\"break\" /><text value=\"print\" class=\"built_in\" /><text value=\"(isBatteryOn || isPowerOn)\" /></content><interactions><interaction type=\"validatedInput\" isDefault=\"true\" startIndex=\"41\" endIndex=\"46\" /></interactions><output><content><text value=\"false\" /></content></output></code><p visible-if=\"wrong\">Make sure to type <code>false</code>.</p></body></html>"
          },
          {
            "title": "NOT operator",
            "id": 126681,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>We know that the <strong>NOT</strong> operator <code>!</code> negates a boolean value. That means that it returns <code>true</code> if a condition is <code>false</code> and vice versa.</p><code version=\"2\" codelang=\"swift\" name=\"main.swift\" visible-if=\"always\"><content><text value=\"let\" class=\"keyword\" /><text value=\" isBulbOn = \" /><text value=\"true\" class=\"literal\" /><text value=\" \" /><text type=\"break\" /><text value=\"print\" class=\"built_in\" /><text value=\"(!isBulbOn)\" /></content><interactions><interaction type=\"validatedInput\" isDefault=\"true\" startIndex=\"27\" endIndex=\"28\" /></interactions><output><content><text value=\"false\" /></content></output></code><p visible-if=\"wrong\">Make sure to type <code>!</code>.</p></body></html>"
          },
          {
            "title": "NOT operator 2",
            "id": 126682,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>We can use <code>!</code> to negate logical expressions as well. To do that, we place the logical expression between parentheses.</p><code version=\"2\" codelang=\"swift\" name=\"main.swift\" visible-if=\"always\"><content><text value=\"let\" class=\"keyword\" /><text value=\" isBatteryOn = \" /><text value=\"true\" class=\"literal\" /><text value=\" \" /><text type=\"break\" /><text value=\"let\" class=\"keyword\" /><text value=\" isPowerOn = \" /><text value=\"false\" class=\"literal\" /><text value=\" \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"print\" class=\"built_in\" /><text value=\"(!(isBatteryOn &amp;&amp; isPowerOn))\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"55\" endIndex=\"56\" /><option startIndex=\"56\" endIndex=\"57\" /><option startIndex=\"81\" endIndex=\"82\" /><option correct=\"false\"><content><text value=\"|\" /></content></option></options></interaction></interactions><output><content><text value=\"true\" /></content></output></code><p visible-if=\"wrong\">Make sure to pick <code>!</code>, followed by <code>(</code>, and finally <code>)</code>.</p></body></html>"
          },
          {
            "title": "NOT operator 3",
            "id": 126683,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>The logical expression returns <code>false</code> but by negating it, we get <code>true</code>.</p><code name=\"main.swift\" version=\"2\" codelang=\"swift\"><content><text value=\"let\" class=\"keyword\" /><text value=\" isBatteryOn = \" /><text value=\"true\" class=\"literal\" /><text value=\" \" /><text type=\"break\" /><text value=\"let\" class=\"keyword\" /><text value=\" isPowerOn = \" /><text value=\"false\" class=\"literal\" /><text value=\" \" /><text type=\"break\" /><text value=\"print\" class=\"built_in\" /><text value=\"(isBatteryOn &amp;&amp; isPowerOn) \" /><text type=\"break\" /><text value=\"print\" class=\"built_in\" /><text value=\"(!(isBatteryOn &amp;&amp; isPowerOn))\" /></content><interactions><interaction type=\"validatedInput\" isDefault=\"true\" startIndex=\"86\" endIndex=\"87\" /></interactions><output><content><text value=\"false\" /><text type=\"break\" /><text value=\"true\" /></content></output></code><p visible-if=\"wrong\">Make sure to type <code>!</code>.</p></body></html>"
          },
          {
            "title": "Question 1",
            "id": 126684,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Which logical operator returns <code>true</code> if at least one of the conditions is <code>true</code>?</p><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"false\"><code>&amp;&amp;</code></item><item value=\"2\" correct=\"true\"><code>||</code></item></selection><p visible-if=\"wrong\">Make sure to pick <code>||</code>.</p></body></html>"
          },
          {
            "title": "Question 2",
            "id": 126685,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>What does this code display in the console?</p><code name=\"main.swift\" version=\"2\" codelang=\"swift\"><content><text value=\"let\" class=\"keyword\" /><text value=\" condition1 = \" /><text value=\"5\" class=\"number\" /><text value=\" &gt;= \" /><text value=\"6\" class=\"number\" /><text value=\" \" /><text type=\"break\" /><text value=\"let\" class=\"keyword\" /><text value=\" condition2 = \" /><text value=\"9\" class=\"number\" /><text value=\" == \" /><text value=\"10\" class=\"number\" /><text value=\" \" /><text type=\"break\" /><text value=\"print\" class=\"built_in\" /><text value=\"(condition1 || condition2)\" /></content><output><content><text value=\"false\" /></content></output></code><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"false\">true</item><item value=\"2\" correct=\"true\">false</item></selection><p visible-if=\"wrong\">Make sure to pick false.</p></body></html>"
          },
          {
            "title": "Question 3",
            "id": 126686,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Which operator do we use to reverse the outcome of a logical expression?</p><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"false\"><code>&amp;&amp;</code></item><item value=\"2\" correct=\"true\"><code>!</code></item></selection><p visible-if=\"wrong\">Make sure to pick <code>!</code>.</p></body></html>"
          },
          {
            "title": "Question 4",
            "id": 126687,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Which of the following code snippets negates the logical expression?</p><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\"><code>!(condition1 &amp;&amp; condition2)</code></item><item value=\"2\" correct=\"false\"><code>!condition1 &amp;&amp; condition2</code></item></selection><p visible-if=\"wrong\"><code>!(condition1 &amp;&amp; condition2)</code>.</p></body></html>"
          },
          {
            "title": "Question 5",
            "id": 126688,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>What does this code display in the console?</p><code version=\"2\" codelang=\"swift\" name=\"main.swift\" visible-if=\"always\"><content><text value=\"let\" class=\"keyword\" /><text value=\" condition1 = \" /><text value=\"true\" class=\"literal\" /><text value=\" \" /><text type=\"break\" /><text value=\"let\" class=\"keyword\" /><text value=\" condition2 = \" /><text value=\"false\" class=\"literal\" /><text value=\" \" /><text type=\"break\" /><text value=\"let\" class=\"keyword\" /><text value=\" logicalExpression = condition1 || condition2 \" /><text type=\"break\" /><text value=\"print\" class=\"built_in\" /><text value=\"(!logicalExpression || logicalExpression)\" /></content><output><content><text value=\"true&#xA;\" /></content></output></code><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\"><code>true</code></item><item value=\"2\" correct=\"false\"><code>false</code></item></selection><p visible-if=\"wrong\">Make sure to pick <code>true</code>.</p></body></html>"
          },
          {
            "title": "Example 1",
            "id": 126689,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Check if a person can buy a car depending on whether their loan is approved <em>or</em> their cash amount is greater than the car cost.</p><code version=\"2\" codelang=\"swift\" name=\"main.swift\" visible-if=\"always\"><content><text value=\"let\" class=\"keyword\" /><text value=\" isLoanApproved = \" /><text value=\"true\" class=\"literal\" /><text type=\"break\" /><text value=\"let\" class=\"keyword\" /><text value=\" cash = \" /><text value=\"30000\" class=\"number\" /><text type=\"break\" /><text value=\"let\" class=\"keyword\" /><text value=\" cost = \" /><text value=\"40000\" class=\"number\" /><text type=\"break\" /><text value=\"let\" class=\"keyword\" /><text value=\" isCarBought = isLoanApproved || (cash &gt; cost)\" /><text type=\"break\" /><text value=\"print\" class=\"built_in\" /><text value=\"(isCarBought)\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"93\" endIndex=\"95\" /><option startIndex=\"102\" endIndex=\"103\" /><option correct=\"false\"><content><text value=\"&amp;&amp;\" /></content></option></options></interaction></interactions><output><content><text value=\"true\" /></content></output></code><p visible-if=\"wrong\">Make sure to pick <code>||</code>, followed by <code>&gt;</code>.</p></body></html>"
          },
          {
            "title": "Example 2",
            "id": 126690,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Save the opposite of <code>isLoanRejected</code> into the variable.</p><code version=\"2\" codelang=\"swift\" name=\"main.swift\" visible-if=\"always\"><content><text value=\"let\" class=\"keyword\" /><text value=\" isLoanRejected = \" /><text value=\"false\" class=\"literal\" /><text value=\" \" /><text type=\"break\" /><text value=\"let\" class=\"keyword\" /><text value=\" isLoanGranted = !isLoanRejected \" /><text type=\"break\" /><text value=\"print\" class=\"built_in\" /><text value=\"(isLoanGranted)\" /></content><interactions><interaction type=\"validatedInput\" isDefault=\"true\" startIndex=\"48\" endIndex=\"49\" /></interactions><output><content><text value=\"true\" /></content></output></code><p visible-if=\"wrong\">Make sure to type <code>!</code>.</p></body></html>"
          },
          {
            "title": "Example 3",
            "id": 126691,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Check if a person can buy a car or not.</p><code version=\"2\" codelang=\"swift\" name=\"main.swift\" visible-if=\"always\"><content><text value=\"let\" class=\"keyword\" /><text value=\" loanRejected = \" /><text value=\"false\" class=\"literal\" /><text type=\"break\" /><text value=\"let\" class=\"keyword\" /><text value=\" cash = \" /><text value=\"30000\" class=\"number\" /><text type=\"break\" /><text value=\"let\" class=\"keyword\" /><text value=\" cost = \" /><text value=\"40000\" class=\"number\" /><text type=\"break\" /><text value=\"let\" class=\"keyword\" /><text value=\" insufficientFunds = cash &lt; cost\" /><text type=\"break\" /><text value=\"let\" class=\"keyword\" /><text value=\" canBuyCar = !(loanRejected &amp;&amp; insufficientFunds)\" /><text type=\"break\" /><text value=\"print\" class=\"built_in\" /><text value=\"(canBuyCar)\" /></content><interactions><interaction type=\"validatedInput\" isDefault=\"true\" startIndex=\"109\" endIndex=\"110\" /></interactions><output><content><text value=\"true\" /></content></output></code><p visible-if=\"wrong\">Make sure to type <code>=</code>.</p></body></html>"
          },
          {
            "title": "Example 4",
            "id": 126692,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Use the <code>||</code> and <code>!</code> operators to determine if a user can post, by checking if any attachment is added <em>or</em> if the text field is <em>not</em> empty.</p><code version=\"2\" codelang=\"swift\" name=\"main.swift\" visible-if=\"always\"><content><text value=\"let\" class=\"keyword\" /><text value=\" isTextEmpty = \" /><text value=\"true\" class=\"literal\" /><text value=\" \" /><text type=\"break\" /><text value=\"let\" class=\"keyword\" /><text value=\" isAttachment = \" /><text value=\"false\" class=\"literal\" /><text value=\" \" /><text type=\"break\" /><text value=\"let\" class=\"keyword\" /><text value=\" isPosted = isAttachment || !isTextEmpty \" /><text type=\"break\" /><text value=\"print\" class=\"built_in\" /><text value=\"(isPosted)\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"78\" endIndex=\"80\" /><option startIndex=\"81\" endIndex=\"82\" /><option correct=\"false\"><content><text value=\"&amp;&amp;\" /></content></option></options></interaction></interactions><output><content><text value=\"false\" /></content></output></code><p visible-if=\"wrong\">Make sure to pick <code>||</code>, followed by <code>!</code>.</p></body></html>"
          },
          {
            "title": "Example 5",
            "id": 126693,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Save a file if the cloud storage is greater than the file size <em>or</em> the system storage is greater than the file size.</p><code version=\"2\" codelang=\"swift\" name=\"main.swift\" visible-if=\"always\"><content><text value=\"let\" class=\"keyword\" /><text value=\" cloudStorage = \" /><text value=\"4\" class=\"number\" /><text value=\" \" /><text type=\"break\" /><text value=\"let\" class=\"keyword\" /><text value=\" systemStorage = \" /><text value=\"8\" class=\"number\" /><text value=\" \" /><text type=\"break\" /><text value=\"let\" class=\"keyword\" /><text value=\" fileSize = \" /><text value=\"5\" class=\"number\" /><text value=\" \" /><text type=\"break\" /><text value=\"let\" class=\"keyword\" /><text value=\" result = (cloudStorage &gt; fileSize) || (systemStorage &gt; fileSize) \" /><text type=\"break\" /><text value=\"print\" class=\"built_in\" /><text value=\"(\" /><text value=\"&quot;Saved? : \\(result)&quot;\" class=\"string\" /><text value=\")\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"90\" endIndex=\"91\" /><option startIndex=\"102\" endIndex=\"104\" /><option correct=\"false\"><content><text value=\"&amp;&amp;\" /></content></option></options></interaction></interactions><output><content><text value=\"Saved? : true\" /></content></output></code><p visible-if=\"wrong\">Make sure to pick <code>&gt;</code>, followed by <code>||</code>.</p></body></html>"
          }
        ]
      }
    ]
  }
}