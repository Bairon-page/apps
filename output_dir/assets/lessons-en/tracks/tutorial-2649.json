{
  "tutorial": {
    "id": 2649,
    "version": 3,
    "type": "course",
    "isNew": false,
    "codeLanguage": "python",
    "title": "Introduction to Requests",
    "descriptionContent": "Introduction to Requests",
    "shortDescriptionContent": "",
    "showInTrack": true,
    "iconBanner": null,
    "chapters": [
      {
        "id": 14620,
        "title": "Request basics",
        "type": "practiceLevel1",
        "lessons": [
          {
            "title": "Intro",
            "id": 129349,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>In software development, interacting with web services is a common task, often involving sending requests to servers.</p><p>The Python library <code>requests</code> simplifies the process of making requests.</p><code version=\"2\" codelang=\"python\" name=\"script.py\" visible-if=\"always\"><content><text value=\"import\" class=\"keyword\" /><text value=\" requests\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"0\" endIndex=\"6\" /><option startIndex=\"7\" endIndex=\"15\" /></options></interaction></interactions></code><p visible-if=\"wrong\">Make sure to pick <code>import</code>, followed by <code>requests</code>.</p></body></html>"
          },
          {
            "title": "Intro - Copy",
            "id": 129555,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>The requests library in Python is used for making HTTP requests to a specified URL.</p><p>The requests library will make it simple whether you're trying to access a website's data or interact with a web service.</p><code version=\"2\" codelang=\"python\" name=\"script.py\" visible-if=\"always\"><content><text value=\"import\" class=\"keyword\" /><text value=\" requests\" /><text type=\"break\" /><text type=\"break\" /><text value=\"url = \" /><text value=\"&quot;https://rickandmorty.mimo.dev/api/character/1&quot;\" class=\"string\" /><text type=\"break\" /><text value=\"response = requests.get(url)\" /><text type=\"break\" /><text value=\"character_data = response.json()\" /><text type=\"break\" /><text type=\"break\" /><text value=\"print(\" /><text value=\"f&quot;Name: \" /><text value=\"{character_data[\" /><text value=\"'name'\" class=\"string\" /><text value=\"]}\" /><text value=\"&quot;\" /><text value=\")\" /><text type=\"break\" /><text value=\"print(\" /><text value=\"f&quot;Status: \" /><text value=\"{character_data[\" /><text value=\"'status'\" class=\"string\" /><text value=\"]}\" /><text value=\"&quot;\" /><text value=\")\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"82\" endIndex=\"90\" /><option startIndex=\"91\" endIndex=\"94\" /><option startIndex=\"95\" endIndex=\"98\" /><option correct=\"false\"><content><text value=\"load\" /></content></option></options></interaction></interactions><output><content><text value=\"Name: Rick Sanchez\" /><text type=\"break\" /><text value=\"Status: Alive\" /></content></output></code><p visible-if=\"wrong\">Make sure to pick <code>requests</code>, followed by <code>get</code>, and finally <code>url</code>.</p></body></html>"
          },
          {
            "title": "Import",
            "id": 129351,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>To use requests we have to import it using the <code>import</code> keyword, followed by the package name <code>requests</code>.</p><code version=\"2\" codelang=\"python\" name=\"script.py\" visible-if=\"always\"><content><text value=\"import\" class=\"keyword\" /><text value=\" requests\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option correct=\"false\"><content><text value=\"http\" /></content></option><option correct=\"false\"><content><text value=\"python\" /></content></option><option startIndex=\"7\" endIndex=\"15\" /><option startIndex=\"0\" endIndex=\"6\" /></options></interaction></interactions></code><p visible-if=\"wrong\">Make sure to pick <code>import</code>, followed by <code>requests</code>.</p></body></html>"
          },
          {
            "title": "NumPy usage",
            "id": 129350,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>We then can call <code>requests.get()</code> and pass it a URL to make an HTTP GET request.</p><p>HTTP GET requests are the most common type of request used on the web, primarily designed to retrieve data from a given resource.</p><code version=\"2\" codelang=\"python\" name=\"script.py\" visible-if=\"always\"><content><text value=\"import\" class=\"keyword\" /><text value=\" requests \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"url = \" /><text value=\"&quot;https://rickandmorty.mimo.dev/api/character/1&quot;\" class=\"string\" /><text value=\" \" /><text type=\"break\" /><text value=\"response = requests.get(url)\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"19\" endIndex=\"22\" /><option startIndex=\"98\" endIndex=\"101\" /></options></interaction></interactions></code><p visible-if=\"wrong\">Make sure to pick <code>url</code>, followed by <code>url</code>.</p></body></html>"
          },
          {
            "title": "NumPy usage - Copy",
            "id": 129556,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>The <code>get()</code> function returns a response we can save in a variable.</p><p>The response object has a status code and data or an error attached.</p><code version=\"2\" codelang=\"python\" name=\"script.py\" visible-if=\"always\"><content><text value=\"import\" class=\"keyword\" /><text value=\" requests \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"url = \" /><text value=\"&quot;https://rickandmorty.mimo.dev/api/character/1&quot;\" class=\"string\" /><text value=\" \" /><text type=\"break\" /><text value=\"response = requests.get(url) \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"print(response)\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"74\" endIndex=\"82\" /><option startIndex=\"112\" endIndex=\"120\" /></options></interaction></interactions><output><content><text value=\"&lt;Response [200]&gt;\" /></content></output></code><p visible-if=\"wrong\">Make sure to pick <code>response</code>, followed by <code>response</code>.</p></body></html>"
          },
          {
            "title": "Arrays",
            "id": 129353,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>To get to the data, we need to parse the response object. We do that with <code>.json()</code>.</p><p>The parsed data is a dictionary of keys and values.</p><code version=\"2\" codelang=\"python\" name=\"script.py\" visible-if=\"always\"><content><text value=\"import\" class=\"keyword\" /><text value=\" requests \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"url = \" /><text value=\"&quot;https://rickandmorty.mimo.dev/api/character/1&quot;\" class=\"string\" /><text value=\" \" /><text type=\"break\" /><text value=\"response = requests.get(url) \" /><text type=\"break\" /><text value=\"data = response.json() \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"print(data)\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"74\" endIndex=\"82\" /><option startIndex=\"111\" endIndex=\"119\" /><option startIndex=\"119\" endIndex=\"126\" /></options></interaction></interactions><output><content><text value=\"{'id': 1, 'name': 'Rick Sanchez', 'status': 'Alive', 'species': 'Human', 'type': '', 'gender': 'Male', ...}\" /></content></output></code><p visible-if=\"wrong\">Make sure to pick <code>response</code>, followed by <code>response</code>, and finally <code>.json()</code>.</p></body></html>"
          },
          {
            "title": "Arrays - Copy",
            "id": 129557,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>We can access the values as with any other dictionary we work with.</p><code version=\"2\" codelang=\"python\" name=\"script.py\" visible-if=\"always\"><content><text value=\"import\" class=\"keyword\" /><text value=\" requests \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"url = \" /><text value=\"&quot;https://rickandmorty.mimo.dev/api/character/1&quot;\" class=\"string\" /><text value=\" \" /><text type=\"break\" /><text value=\"response = requests.get(url) \" /><text type=\"break\" /><text value=\"data = response.json() \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"print(data[\" /><text value=\"&quot;name&quot;\" class=\"string\" /><text value=\"]) \" /><text type=\"break\" /><text value=\"print(data[\" /><text value=\"&quot;status&quot;\" class=\"string\" /><text value=\"])\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"104\" endIndex=\"108\" /><option startIndex=\"136\" endIndex=\"140\" /><option startIndex=\"140\" endIndex=\"148\" /><option startIndex=\"157\" endIndex=\"161\" /></options></interaction></interactions><output><content><text value=\"Rick Sanchez\" /><text type=\"break\" /><text value=\"Alive\" /></content></output></code><p visible-if=\"wrong\">Make sure to pick <code>data</code> followed by <code>data</code> and then <code>[\"name\"]</code>, <code>data</code>.</p></body></html>"
          },
          {
            "title": "Question: NumPy usage",
            "id": 129354,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>When should you use the Python requests library?</p><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\">When you need to send HTTP requests easily and efficiently</item><item value=\"2\" correct=\"false\">When you're performing offline, computation-heavy tasks</item></selection><p visible-if=\"wrong\">When you need to send HTTP requests easily and efficiently.</p></body></html>"
          },
          {
            "title": "Question: Import",
            "id": 129355,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>What is the name of the library we use to perform HTTP requests in Python?</p><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\"><code>requests</code></item><item value=\"2\" correct=\"false\"><code>http_requests</code></item></selection><p visible-if=\"wrong\">Make sure to pick <code>requests</code>.</p></body></html>"
          },
          {
            "title": "Question: Import as np",
            "id": 129356,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>How do we parse the response object to get to the data?</p><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\"><code>response.json()</code></item><item value=\"2\" correct=\"false\"><code>response.parse()</code></item></selection><p visible-if=\"wrong\">Make sure to pick <code>response.json()</code>.</p></body></html>"
          },
          {
            "title": "Example: Import",
            "id": 129358,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Write the necessary code to import the requests library in Python.</p><code version=\"2\" codelang=\"python\" name=\"script.py\" visible-if=\"always\"><content><text value=\"import\" class=\"keyword\" /><text value=\" requests\" /></content><interactions><interaction type=\"validatedInput\" isDefault=\"true\" startIndex=\"0\" endIndex=\"15\" /></interactions></code><p visible-if=\"wrong\">Make sure to type <code>import requests</code>.</p></body></html>"
          },
          {
            "title": "Example: Import as np",
            "id": 129359,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Make a GET request using the requests library.</p><code version=\"2\" codelang=\"python\" name=\"script.py\" visible-if=\"always\"><content><text value=\"import\" class=\"keyword\" /><text value=\" requests\" /><text type=\"break\" /><text type=\"break\" /><text value=\"url = \" /><text value=\"&quot;https://rickandmorty.mimo.dev/api/character/1&quot;\" class=\"string\" /><text type=\"break\" /><text value=\"response = requests.get(url)\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"82\" endIndex=\"90\" /><option startIndex=\"90\" endIndex=\"91\" /><option startIndex=\"91\" endIndex=\"94\" /><option startIndex=\"94\" endIndex=\"95\" /><option startIndex=\"95\" endIndex=\"98\" /><option startIndex=\"98\" endIndex=\"99\" /><option correct=\"false\"><content><text value=\"post\" /></content></option><option correct=\"false\"><content><text value=\"run\" /></content></option></options></interaction></interactions></code><p visible-if=\"wrong\">Make sure to pick <code>requests</code> followed by <code>.</code> and then <code>get</code>, <code>(</code>, <code>url</code>, <code>)</code>.</p></body></html>"
          },
          {
            "title": "Arrays - Copy - Copy",
            "id": 129558,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Print the value for the key <code>\"status\"</code> in the parsed response object.</p><code version=\"2\" codelang=\"python\" name=\"script.py\" visible-if=\"always\"><content><text value=\"import\" class=\"keyword\" /><text value=\" requests \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"url = \" /><text value=\"&quot;https://rickandmorty.mimo.dev/api/character/1&quot;\" class=\"string\" /><text value=\" \" /><text type=\"break\" /><text value=\"response = requests.get(url) \" /><text type=\"break\" /><text value=\"data = response.json() \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"print(data[\" /><text value=\"&quot;name&quot;\" class=\"string\" /><text value=\"]) \" /><text type=\"break\" /><text value=\"print(data[\" /><text value=\"&quot;status&quot;\" class=\"string\" /><text value=\"])\" /></content><interactions><interaction type=\"validatedInput\" isDefault=\"true\" startIndex=\"157\" endIndex=\"171\" /></interactions><output><content><text value=\"Rick Sanchez\" /><text type=\"break\" /><text value=\"Alive\" /></content></output></code><p visible-if=\"wrong\">Make sure to type <code>data[\"status\"]</code>.</p></body></html>"
          }
        ]
      },
      {
        "id": 14622,
        "title": "Using requests",
        "type": "practiceLevel1",
        "lessons": [
          {
            "title": "Array method",
            "id": 129371,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Working with web APIs involves sending and receiving data over the internet.</p><p>When working with the response, we need to ensure the integrity of the data. That's what the status code is used for.</p><code version=\"2\" codelang=\"python\" name=\"script.py\" visible-if=\"always\"><content><text value=\"import\" class=\"keyword\" /><text value=\" requests \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"url = \" /><text value=\"&quot;https://pokedex.mimo.dev/api/pokemon/pikachu&quot;\" class=\"string\" /><text value=\" \" /><text type=\"break\" /><text value=\"response = requests.get(url) \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"if\" class=\"keyword\" /><text value=\" response.status_code == \" /><text value=\"200\" class=\"number\" /><text value=\": \" /><text type=\"break\" /><text value=\"  print(\" /><text value=\"&quot;Data successfully retrieved&quot;\" class=\"string\" /><text value=\") \" /><text type=\"break\" /><text value=\"else\" class=\"keyword\" /><text value=\": \" /><text type=\"break\" /><text value=\"  print(\" /><text value=\"&quot;Failed to retrieve data&quot;\" class=\"string\" /><text value=\")\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"117\" endIndex=\"128\" /><option correct=\"false\"><content><text value=\"success_code\" /></content></option></options></interaction></interactions><output><content><text value=\"Data successfully retrieved\" /></content></output></code><p visible-if=\"wrong\">Make sure to pick <code>status_code</code>.</p></body></html>"
          },
          {
            "title": "Array method - Copy",
            "id": 129559,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>The response object has a <code>status_code</code> attached to it.</p><p>We should check if it is equal to <code>200</code> to ensure the data was retrieved successfully.</p><code version=\"2\" codelang=\"python\" name=\"script.py\" visible-if=\"always\"><content><text value=\"import\" class=\"keyword\" /><text value=\" requests \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"url = \" /><text value=\"&quot;https://pokedex.mimo.dev/api/pokemon/pikachu&quot;\" class=\"string\" /><text value=\" \" /><text type=\"break\" /><text value=\"response = requests.get(url) \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"if\" class=\"keyword\" /><text value=\" response.status_code == \" /><text value=\"200\" class=\"number\" /><text value=\": \" /><text type=\"break\" /><text value=\"  print(\" /><text value=\"&quot;Data successfully retrieved&quot;\" class=\"string\" /><text value=\") \" /><text type=\"break\" /><text value=\"else\" class=\"keyword\" /><text value=\": \" /><text type=\"break\" /><text value=\"  print(\" /><text value=\"&quot;Failed to retrieve data&quot;\" class=\"string\" /><text value=\")\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"117\" endIndex=\"128\" /><option startIndex=\"129\" endIndex=\"131\" /><option startIndex=\"132\" endIndex=\"135\" /><option correct=\"false\"><content><text value=\"=\" /></content></option><option correct=\"false\"><content><text value=\"400\" /></content></option></options></interaction></interactions><output><content><text value=\"Data successfully retrieved\" /></content></output></code><p visible-if=\"wrong\">Make sure to pick <code>status_code</code>, followed by <code>==</code>, and finally <code>200</code>.</p></body></html>"
          },
          {
            "title": "Array method 2",
            "id": 129372,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>After ensuring the data was retrieved successfully, we can unpack it.</p><code version=\"2\" codelang=\"python\" name=\"script.py\" visible-if=\"always\"><content><text value=\"import\" class=\"keyword\" /><text value=\" requests\" /><text type=\"break\" /><text type=\"break\" /><text value=\"url = \" /><text value=\"&quot;https://pokedex.mimo.dev/api/pokemon/pikachu&quot;\" class=\"string\" /><text type=\"break\" /><text value=\"response = requests.get(url)\" /><text type=\"break\" /><text type=\"break\" /><text value=\"if\" class=\"keyword\" /><text value=\" response.status_code == \" /><text value=\"200\" class=\"number\" /><text value=\":\" /><text type=\"break\" /><text value=\"  print(\" /><text value=\"&quot;Data successfully retrieved&quot;\" class=\"string\" /><text value=\")\" /><text type=\"break\" /><text type=\"break\" /><text value=\"  pokemon_data = response.json()\" /><text type=\"break\" /><text value=\"  print(\" /><text value=\"f&quot;Name: \" /><text value=\"{pokemon_data[\" /><text value=\"'name'\" class=\"string\" /><text value=\"]}\" /><text value=\"&quot;\" /><text value=\")\" /><text type=\"break\" /><text value=\"  print(\" /><text value=\"f&quot;ID: \" /><text value=\"{pokemon_data[\" /><text value=\"'id'\" class=\"string\" /><text value=\"]}\" /><text value=\"&quot;\" /><text value=\")\" /><text type=\"break\" /><text value=\"else\" class=\"keyword\" /><text value=\":\" /><text type=\"break\" /><text value=\"    print(\" /><text value=\"&quot;Failed to retrieve data&quot;\" class=\"string\" /><text value=\")\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"70\" endIndex=\"78\" /><option startIndex=\"103\" endIndex=\"111\" /><option startIndex=\"189\" endIndex=\"197\" /><option correct=\"false\"><content><text value=\"status_code\" /></content></option></options></interaction></interactions><output><content><text value=\"Data successfully retrieved\" /><text type=\"break\" /><text value=\"Name: pikachu\" /><text type=\"break\" /><text value=\"ID: 25\" /></content></output></code><p visible-if=\"wrong\">Make sure to pick <code>response</code>, followed by <code>response</code>, and finally <code>response</code>.</p></body></html>"
          },
          {
            "title": "Array cast",
            "id": 129373,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>In some cases, we'll not get what we expect. For example, there is no Pokemon with the name <em>Mimo</em>.</p><p>We should always check for the <code>status_code</code>, and in case we encounter an error, we don't touch the data.</p><code version=\"2\" codelang=\"python\" name=\"script.py\" visible-if=\"always\"><content><text value=\"import\" class=\"keyword\" /><text value=\" requests\" /><text type=\"break\" /><text type=\"break\" /><text value=\"url = \" /><text value=\"&quot;https://pokedex.mimo.dev/api/pokemon/pikachu&quot;\" class=\"string\" /><text type=\"break\" /><text value=\"response = requests.get(url)\" /><text type=\"break\" /><text type=\"break\" /><text value=\"if\" class=\"keyword\" /><text value=\" response.status_code == \" /><text value=\"200\" class=\"number\" /><text value=\":\" /><text type=\"break\" /><text value=\"  print(\" /><text value=\"&quot;Data successfully retrieved&quot;\" class=\"string\" /><text value=\")\" /><text type=\"break\" /><text type=\"break\" /><text value=\"  pokemon_data = response.json()\" /><text type=\"break\" /><text value=\"  print(\" /><text value=\"f&quot;Name: \" /><text value=\"{pokemon_data[\" /><text value=\"'name'\" class=\"string\" /><text value=\"]}\" /><text value=\"&quot;\" /><text value=\")\" /><text type=\"break\" /><text value=\"  print(\" /><text value=\"f&quot;ID: \" /><text value=\"{pokemon_data[\" /><text value=\"'id'\" class=\"string\" /><text value=\"]}\" /><text value=\"&quot;\" /><text value=\")\" /><text type=\"break\" /><text value=\"else\" class=\"keyword\" /><text value=\":\" /><text type=\"break\" /><text value=\"    print(\" /><text value=\"&quot;Failed to retrieve data&quot;\" class=\"string\" /><text value=\")\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"283\" endIndex=\"287\" /><option startIndex=\"287\" endIndex=\"288\" /><option startIndex=\"293\" endIndex=\"325\" /><option correct=\"false\"><content><text value=\"if\" /></content></option><option correct=\"false\"><content><text value=\"&quot;failure&quot;\" /></content></option></options></interaction></interactions><output><content><text value=\"Data successfully retrieved\" /><text type=\"break\" /><text value=\"Name: pikachu\" /><text type=\"break\" /><text value=\"ID: 25\" /></content></output></code><p visible-if=\"wrong\">Make sure to pick <code>else</code>, followed by <code>:</code>, and finally <code>print(\"Failed to retrieve data\")</code>.</p></body></html>"
          },
          {
            "title": "Indexing",
            "id": 129374,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Instead of comparing the status code directly, we can also put the request call into a <code>try</code> block.</p><code version=\"2\" codelang=\"python\" name=\"script.py\" visible-if=\"always\"><content><text value=\"import\" class=\"keyword\" /><text value=\" requests \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"url = \" /><text value=\"&quot;https://pokedex.mimo.dev/api/pokemon/pikachu&quot;\" class=\"string\" /><text value=\" \" /><text type=\"break\" /><text value=\"try\" class=\"keyword\" /><text value=\": \" /><text type=\"break\" /><text value=\"  response = requests.get(url) \" /><text type=\"break\" /><text value=\"  response.raise_for_status() \" /><text type=\"break\" /><text value=\"  print(\" /><text value=\"&quot;Data successfully retrieved&quot;\" class=\"string\" /><text value=\") \" /><text type=\"break\" /><text value=\"  pokemon_data = response.json() \" /><text type=\"break\" /><text value=\"  print(\" /><text value=\"f&quot;Name: \" /><text value=\"{pokemon_data[\" /><text value=\"'name'\" class=\"string\" /><text value=\"]}\" /><text value=\"&quot;\" /><text value=\") \" /><text type=\"break\" /><text value=\"  print(\" /><text value=\"f&quot;ID: \" /><text value=\"{pokemon_data[\" /><text value=\"'id'\" class=\"string\" /><text value=\"]}\" /><text value=\"&quot;\" /><text value=\")\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"73\" endIndex=\"76\" /><option startIndex=\"76\" endIndex=\"77\" /><option correct=\"false\"><content><text value=\"if\" /></content></option><option correct=\"false\"><content><text value=\"response.status_code == 200\" /></content></option></options></interaction></interactions><output><content><text value=\"Data successfully retrieved\" /><text type=\"break\" /><text value=\"Name: pikachu\" /><text type=\"break\" /><text value=\"ID: 25\" /></content></output></code><p visible-if=\"wrong\">Make sure to pick <code>try</code>, followed by <code>:</code>.</p></body></html>"
          },
          {
            "title": "Indexing - Copy",
            "id": 129560,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>We then add an <code>except</code> block to catch potential errors. Here, we take the error from the error object and use it as <code>error</code>.</p><code version=\"2\" codelang=\"python\" name=\"script.py\" visible-if=\"always\"><content><text value=\"import\" class=\"keyword\" /><text value=\" requests \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"url = \" /><text value=\"&quot;https://pokedex.mimo.dev/api/pokemon/pikachu&quot;\" class=\"string\" /><text value=\" \" /><text type=\"break\" /><text value=\"try\" class=\"keyword\" /><text value=\": \" /><text type=\"break\" /><text value=\"  response = requests.get(url) \" /><text type=\"break\" /><text value=\"  response.raise_for_status() \" /><text type=\"break\" /><text value=\"  print(\" /><text value=\"&quot;Data successfully retrieved&quot;\" class=\"string\" /><text value=\") \" /><text type=\"break\" /><text value=\"  pokemon_data = response.json() \" /><text type=\"break\" /><text value=\"  print(\" /><text value=\"f&quot;Name: \" /><text value=\"{pokemon_data[\" /><text value=\"'name'\" class=\"string\" /><text value=\"]}\" /><text value=\"&quot;\" /><text value=\") \" /><text type=\"break\" /><text value=\"  print(\" /><text value=\"f&quot;ID: \" /><text value=\"{pokemon_data[\" /><text value=\"'id'\" class=\"string\" /><text value=\"]}\" /><text value=\"&quot;\" /><text value=\") \" /><text type=\"break\" /><text value=\"except\" class=\"keyword\" /><text value=\" requests.HTTPError \" /><text value=\"as\" class=\"keyword\" /><text value=\" error: \" /><text type=\"break\" /><text value=\"  print(error)\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"296\" endIndex=\"302\" /><option startIndex=\"303\" endIndex=\"330\" /><option correct=\"false\"><content><text value=\"else\" /></content></option></options></interaction></interactions><output><content><text value=\"Data successfully retrieved\" /><text type=\"break\" /><text value=\"Name: pikachu\" /><text type=\"break\" /><text value=\"ID: 25\" /></content></output></code><p visible-if=\"wrong\">Make sure to pick <code>except</code>, followed by <code>requests.HTTPError as error</code>.</p></body></html>"
          },
          {
            "title": "Indexing - Copy - Copy",
            "id": 129561,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>We should call <code>raise_for_status</code> on the response object to identify errors that we can then catch via the <code>except</code> block.</p><code version=\"2\" codelang=\"python\" name=\"script.py\" visible-if=\"always\"><content><text value=\"import\" class=\"keyword\" /><text value=\" requests \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"url = \" /><text value=\"&quot;https://pokedex.mimo.dev/api/pokemon/pikachu&quot;\" class=\"string\" /><text value=\" \" /><text type=\"break\" /><text value=\"try\" class=\"keyword\" /><text value=\": \" /><text type=\"break\" /><text value=\"  response = requests.get(url) \" /><text type=\"break\" /><text value=\"  response.raise_for_status() \" /><text type=\"break\" /><text value=\"  print(\" /><text value=\"&quot;Data successfully retrieved&quot;\" class=\"string\" /><text value=\") \" /><text type=\"break\" /><text value=\"  pokemon_data = response.json() \" /><text type=\"break\" /><text value=\"  print(\" /><text value=\"f&quot;Name: \" /><text value=\"{pokemon_data[\" /><text value=\"'name'\" class=\"string\" /><text value=\"]}\" /><text value=\"&quot;\" /><text value=\") \" /><text type=\"break\" /><text value=\"  print(\" /><text value=\"f&quot;ID: \" /><text value=\"{pokemon_data[\" /><text value=\"'id'\" class=\"string\" /><text value=\"]}\" /><text value=\"&quot;\" /><text value=\") \" /><text type=\"break\" /><text value=\"except\" class=\"keyword\" /><text value=\" requests.HTTPError \" /><text value=\"as\" class=\"keyword\" /><text value=\" error: \" /><text type=\"break\" /><text value=\"  print(error)\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"113\" endIndex=\"121\" /><option startIndex=\"122\" endIndex=\"138\" /><option correct=\"false\"><content><text value=\"check_error\" /></content></option></options></interaction></interactions><output><content><text value=\"Data successfully retrieved\" /><text type=\"break\" /><text value=\"Name: pikachu\" /><text type=\"break\" /><text value=\"ID: 25\" /></content></output></code><p visible-if=\"wrong\">Make sure to pick <code>response</code>, followed by <code>raise_for_status</code>.</p></body></html>"
          },
          {
            "title": "Question: Array method",
            "id": 129377,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>What status code will be used for a successful call?</p><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\">200</item><item value=\"2\" correct=\"false\">400</item></selection><p visible-if=\"wrong\">Make sure to pick 200.</p></body></html>"
          },
          {
            "title": "Question: Array method 2",
            "id": 129378,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>What method can we call to check for a mistake in the API request?</p><selection iscode=\"false\" multiple=\"multiple\"><item value=\"3\" correct=\"false\"><code>response.check_error()</code></item><item value=\"3\" correct=\"true\"><code>response.raise_for_status()</code></item></selection><p visible-if=\"wrong\">Make sure to pick <code>response.raise_for_status()</code>.</p></body></html>"
          },
          {
            "title": "Question: Array cast",
            "id": 129379,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>What happens when we send a request using the Python library requests that is an invalid URL?</p><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\">The requests library throws an error</item><item value=\"2\" correct=\"false\">Nothing happens</item></selection><p visible-if=\"wrong\">The requests library throws an error.</p></body></html>"
          },
          {
            "title": "Question 2: Array cast",
            "id": 129380,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>What type of response will you get, after you send a GET request to an API endpoint?</p><code version=\"2\" codelang=\"python\" name=\"script.py\" visible-if=\"always\"><content><text value=\"import\" class=\"keyword\" /><text value=\" requests \" /><text type=\"break\" /><text value=\"response = requests.get(\" /><text value=\"&quot;https://pokedex.mimo.dev/api/pokemon/pikachu&quot;\" class=\"string\" /><text value=\") \" /><text type=\"break\" /><text value=\"print(response)\" /></content><output><content><text value=\"&lt;Response [200]&gt;\" /></content></output></code><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\">Response object</item><item value=\"4\" correct=\"false\">List of dictionaries</item></selection><p visible-if=\"wrong\">Response object.</p></body></html>"
          },
          {
            "title": "Question: Indexing",
            "id": 129381,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>What is the expected output of this code?</p><code version=\"2\" codelang=\"python\" name=\"script.py\" visible-if=\"always\"><content><text value=\"import\" class=\"keyword\" /><text value=\" requests\" /><text type=\"break\" /><text value=\"response = requests.get(\" /><text value=\"&quot;https://pokedex.mimo.dev/api/pokemon/pikachu&quot;\" class=\"string\" /><text value=\")\" /><text type=\"break\" /><text value=\"print(response.status_code)\" /></content><output><content><text value=\"200\" /></content></output></code><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\"><code>200</code></item><item value=\"2\" correct=\"false\"><code>Error</code></item></selection><p visible-if=\"wrong\">Make sure to pick <code>200</code>.</p></body></html>"
          },
          {
            "title": "Question: Size",
            "id": 129382,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>What will be the response status code after executing this code, given that there is no Pokémon called \"Mimo\"?</p><code version=\"2\" codelang=\"python\" name=\"script.py\" visible-if=\"always\"><content><text value=\"import\" class=\"keyword\" /><text value=\" requests\" /><text type=\"break\" /><text value=\"response = requests.get(\" /><text value=\"&quot;https://pokedex.mimo.dev/api/pokemon/mimo&quot;\" class=\"string\" /><text value=\")\" /><text type=\"break\" /><text value=\"print(response.status_code)\" /></content><output><content><text value=\"404\" /></content></output></code><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"false\">200</item><item value=\"2\" correct=\"true\">404</item></selection><p visible-if=\"wrong\">Make sure to pick 404.</p></body></html>"
          },
          {
            "title": "Example: Array method",
            "id": 129383,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Store in the variable <code>response_json</code> the JSON object returned by the <code>requests.get()</code> function after calling a particular URL.</p><code version=\"2\" codelang=\"python\" name=\"script.py\" visible-if=\"always\"><content><text value=\"import\" class=\"keyword\" /><text value=\" requests\" /><text type=\"break\" /><text value=\"url = \" /><text value=\"&quot;https://pokedex.mimo.dev/api/pokemon/pikachu&quot;\" class=\"string\" /><text type=\"break\" /><text value=\"response = requests.get(url)\" /><text type=\"break\" /><text value=\"response_json = response.json()\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"98\" endIndex=\"111\" /><option startIndex=\"114\" endIndex=\"122\" /><option startIndex=\"123\" endIndex=\"127\" /></options></interaction></interactions></code><p visible-if=\"wrong\">Make sure to pick <code>response_json</code>, followed by <code>response</code>, and finally <code>json</code>.</p></body></html>"
          },
          {
            "title": "Example: Indexing",
            "id": 129385,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Use <code>try</code> and then <code>except</code> to make a request and catch an eventual error.</p><code version=\"2\" codelang=\"python\" name=\"script.py\" visible-if=\"always\"><content><text value=\"import\" class=\"keyword\" /><text value=\" requests\" /><text type=\"break\" /><text type=\"break\" /><text value=\"url = \" /><text value=\"&quot;https://pokedex.mimo.dev/api/pokemon/mimo&quot;\" class=\"string\" /><text type=\"break\" /><text value=\"try\" class=\"keyword\" /><text value=\":\" /><text type=\"break\" /><text value=\"  response = requests.get(url)\" /><text type=\"break\" /><text value=\"  response.raise_for_status()\" /><text type=\"break\" /><text value=\"  print(\" /><text value=\"&quot;Data successfully retrieved&quot;\" class=\"string\" /><text value=\")\" /><text type=\"break\" /><text value=\"  pokemon_data = response.json()\" /><text type=\"break\" /><text value=\"  print(\" /><text value=\"f&quot;Name: \" /><text value=\"{pokemon_data[\" /><text value=\"'name'\" class=\"string\" /><text value=\"]}\" /><text value=\"&quot;\" /><text value=\")\" /><text type=\"break\" /><text value=\"  print(\" /><text value=\"f&quot;ID: \" /><text value=\"{pokemon_data[\" /><text value=\"'id'\" class=\"string\" /><text value=\"]}\" /><text value=\"&quot;\" /><text value=\")\" /><text type=\"break\" /><text value=\"except\" class=\"keyword\" /><text value=\" requests.HTTPError \" /><text value=\"as\" class=\"keyword\" /><text value=\" error:\" /><text type=\"break\" /><text value=\"  print(error)\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"67\" endIndex=\"70\" /><option startIndex=\"283\" endIndex=\"289\" /><option startIndex=\"290\" endIndex=\"308\" /><option startIndex=\"309\" endIndex=\"311\" /><option startIndex=\"312\" endIndex=\"317\" /><option correct=\"false\"><content><text value=\"if\" /></content></option><option correct=\"false\"><content><text value=\"else\" /></content></option></options></interaction></interactions><output><content><text value=\"404 Client Error: Not Found for url: https://pokedex.mimo.dev/api/pokemon/mimo\" /></content></output></code><p visible-if=\"wrong\">Make sure to pick <code>try</code> followed by <code>except</code> and then <code>requests.HTTPError</code>, <code>as</code>, <code>error</code>.</p></body></html>"
          }
        ]
      }
    ]
  }
}