{
  "tutorial": {
    "id": 1365,
    "version": 5,
    "type": "course",
    "isNew": false,
    "codeLanguage": "python",
    "title": "Using Sets",
    "descriptionContent": "sets",
    "shortDescriptionContent": "",
    "showInTrack": true,
    "iconBanner": null,
    "chapters": [
      {
        "id": 9976,
        "title": "Sets Basics",
        "type": "practiceLevel1",
        "lessons": [
          {
            "title": "Add a new element",
            "id": 89146,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>To add a new value to a set like <code>answers</code>, code <code>add()</code>, with the new value, like <code>\"maybe\"</code> between the parentheses.</p><p>Note that elements in sets are unordered. Hence, we can't be sure in which order the items will appear when printed.</p><code version=\"2\" codelang=\"python\" name=\"script.py\" visible-if=\"always\"><content><text value=\"answers = {\" /><text value=\"&quot;yes&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;no&quot;\" class=\"string\" /><text value=\"}\" /><text type=\"break\" /><text value=\"answers.add(\" /><text value=\"&quot;maybe&quot;\" class=\"string\" /><text value=\")\" /><text type=\"break\" /><text type=\"break\" /><text value=\"print(answers)\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"24\" endIndex=\"31\" /><option startIndex=\"31\" endIndex=\"35\" /><option startIndex=\"35\" endIndex=\"44\" /></options></interaction></interactions><output><content><text value=\"{'no', 'maybe', 'yes'}\" /></content></output></code><p visible-if=\"wrong\">Make sure to pick <code>answers</code>, followed by <code>.add</code>, and finally <code>(\"maybe\")</code>.</p></body></html>"
          },
          {
            "title": "No duplicates",
            "id": 89309,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Since sets exclude duplicate values, nothing happens when we use <code>add()</code> with an already existing value like <code>\"yes\"</code>.</p><p>Again, the order of the elements in a set might change.</p><code version=\"2\" codelang=\"python\" name=\"script.py\" visible-if=\"always\"><content><text value=\"answers = {\" /><text value=\"&quot;yes&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;no&quot;\" class=\"string\" /><text value=\"}\" /><text type=\"break\" /><text value=\"answers.add(\" /><text value=\"&quot;yes&quot;\" class=\"string\" /><text value=\")\" /><text type=\"break\" /><text type=\"break\" /><text value=\"print(answers)\" /></content><interactions><interaction type=\"validatedInput\" isDefault=\"true\" startIndex=\"36\" endIndex=\"41\" /></interactions><output><content><text value=\"{'yes', 'no'}\" /></content></output></code><p visible-if=\"wrong\">Make sure to type <code>\"yes\"</code>.</p></body></html>"
          },
          {
            "title": "Question: Add a new element",
            "id": 89392,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>What instruction do we use to add a new value to a set?</p><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\">The <code>add()</code> instruction</item><item value=\"2\" correct=\"false\">The <code>+</code> instruction</item></selection><p visible-if=\"wrong\">The <code>add()</code> instruction.</p></body></html>"
          },
          {
            "title": "Question: No duplicates",
            "id": 89393,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>What happens when we use <code>add()</code> to add a value that the set already contains?</p><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\">The value won't be added, since duplicates aren't allowed</item><item value=\"2\" correct=\"false\">The set will contain two of the same value</item></selection><p visible-if=\"wrong\">The value won't be added, since duplicates aren't allowed.</p></body></html>"
          },
          {
            "title": "Example: Add a new element",
            "id": 89394,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Add a new email to the subscriber mailing list using <code>add()</code> and the value <code>\"luke@mail.com\"</code>.</p><code version=\"2\" codelang=\"python\" name=\"script.py\" visible-if=\"always\"><content><text value=\"subscribers = {\" /><text value=\"&quot;jess@mail.com&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;meg@mail.com&quot;\" class=\"string\" /><text value=\"}\" /><text type=\"break\" /><text type=\"break\" /><text value=\"subscribers.add(\" /><text value=\"&quot;luke@mail.com&quot;\" class=\"string\" /><text value=\")\" /><text type=\"break\" /><text value=\"print(subscribers)\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"49\" endIndex=\"60\" /><option startIndex=\"60\" endIndex=\"64\" /><option startIndex=\"64\" endIndex=\"65\" /><option startIndex=\"65\" endIndex=\"80\" /><option startIndex=\"80\" endIndex=\"81\" /></options></interaction></interactions><output><content><text value=\"{'meg@mail.com', 'luke@mail.com', 'jess@mail.com'}\" /></content></output></code><p visible-if=\"wrong\">Make sure to pick <code>subscribers</code> followed by <code>.add</code> and then <code>(</code>, <code>\"luke@mail.com\"</code>, <code>)</code>.</p></body></html>"
          },
          {
            "title": "Example: No duplicates",
            "id": 89395,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Add a value to the <code>wishlist</code> set, so that the set remains unchanged.</p><code version=\"2\" codelang=\"python\" name=\"script.py\" visible-if=\"always\"><content><text value=\"wishlist = {\" /><text value=\"&quot;earpods&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;notebook&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;handgloves&quot;\" class=\"string\" /><text value=\"}\" /><text type=\"break\" /><text type=\"break\" /><text value=\"wishlist.add(\" /><text value=\"&quot;notebook&quot;\" class=\"string\" /><text value=\")\" /><text type=\"break\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"63\" endIndex=\"73\" /><option correct=\"false\"><content><text value=\"&quot;watch&quot;\" /></content></option></options></interaction></interactions></code><p visible-if=\"wrong\">Make sure to pick <code>\"notebook\"</code>.</p></body></html>"
          }
        ]
      },
      {
        "id": 9966,
        "title": "Sets Advanced",
        "type": "practiceLevel1",
        "lessons": [
          {
            "title": "Lists and indices",
            "id": 89310,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>We know we can access and update elements in lists like <code>user_answers</code> by their index, like here with <code>0</code>.</p><code version=\"2\" codelang=\"python\" name=\"script.py\" visible-if=\"always\"><content><text value=\"user_answers = [\" /><text value=\"&quot;yes&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;yes&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;no&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;yes&quot;\" class=\"string\" /><text value=\"]\" /><text type=\"break\" /><text value=\"print(user_answers[\" /><text value=\"0\" class=\"number\" /><text value=\"])\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"49\" endIndex=\"64\" /><option correct=\"false\"><content><text value=\"user_answers[1]\" /></content></option></options></interaction></interactions><output><content><text value=\"yes\" /></content></output></code><p visible-if=\"wrong\">Make sure to pick <code>user_answers[0]</code>.</p></body></html>"
          },
          {
            "title": "No indices",
            "id": 89311,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Unlike lists, sets like <code>answer_options</code> are unordered, meaning that set elements don't have indices.</p><code version=\"2\" codelang=\"python\" name=\"script.py\" visible-if=\"always\"><content><text value=\"user_answers = [\" /><text value=\"&quot;yes&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;yes&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;no&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;yes&quot;\" class=\"string\" /><text value=\"]\" /><text type=\"break\" /><text value=\"print(user_answers[\" /><text value=\"0\" class=\"number\" /><text value=\"])\" /><text type=\"break\" /><text type=\"break\" /><text value=\"answer_options = {\" /><text value=\"&quot;yes&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;no&quot;\" class=\"string\" /><text value=\"}\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"67\" endIndex=\"81\" /><option startIndex=\"82\" endIndex=\"83\" /><option startIndex=\"84\" endIndex=\"97\" /></options></interaction></interactions></code><p visible-if=\"wrong\">Make sure to pick <code>answer_options</code>, followed by <code>=</code>, and finally <code>{\"yes\", \"no\"}</code>.</p></body></html>"
          },
          {
            "title": "in keyword",
            "id": 89312,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Since sets don't have indices, we can only check if a set contains an element like <code>\"no\"</code> with the <code>in</code> keyword.</p><code version=\"2\" codelang=\"python\" name=\"script.py\" visible-if=\"always\"><content><text value=\"answer_options = {\" /><text value=\"&quot;yes&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;no&quot;\" class=\"string\" /><text value=\"}\" /><text type=\"break\" /><text value=\"print(\" /><text value=\"&quot;no&quot;\" class=\"string\" /><text value=\" \" /><text value=\"in\" class=\"keyword\" /><text value=\" answer_options)\" /></content><interactions><interaction type=\"validatedInput\" isDefault=\"true\" startIndex=\"42\" endIndex=\"44\" /></interactions><output><content><text value=\"True\" /></content></output></code><p visible-if=\"wrong\">Make sure to type <code>in</code>.</p></body></html>"
          },
          {
            "title": "For loop",
            "id": 89313,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>We can also use a for loop to iterate through set elements and access them one by one, like here with the <code>answer</code> variable.</p><code version=\"2\" codelang=\"python\" name=\"script.py\" visible-if=\"always\"><content><text value=\"answer_options = {\" /><text value=\"&quot;yes&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;no&quot;\" class=\"string\" /><text value=\"}\" /><text type=\"break\" /><text type=\"break\" /><text value=\"for\" class=\"keyword\" /><text value=\" answer \" /><text value=\"in\" class=\"keyword\" /><text value=\" answer_options:\" /><text type=\"break\" /><text value=\" print(\" /><text value=\"f&quot;Option: \" /><text value=\"{answer}\" class=\"subst\" /><text value=\"&quot;\" /><text value=\")\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"36\" endIndex=\"42\" /><option startIndex=\"80\" endIndex=\"86\" /></options></interaction></interactions><output><content><text value=\"Option: no\" /><text type=\"break\" /><text value=\"Option: yes\" /></content></output></code><p visible-if=\"wrong\">Make sure to pick <code>answer</code>, followed by <code>answer</code>.</p></body></html>"
          },
          {
            "title": "Question: No indices",
            "id": 89397,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>What does it mean that sets are unordered?</p><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\">They don't have indices, so we can't access or update elements by their index</item><item value=\"2\" correct=\"false\">All elements have the same index</item></selection><p visible-if=\"wrong\">They don't have indices, so we can't access or update elements by their index.</p></body></html>"
          },
          {
            "title": "Question: in keyword",
            "id": 89398,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>How can we check if a set contains an element?</p><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\">Using the <code>in</code> keyword</item><item value=\"2\" correct=\"false\">By accessing it by its index</item></selection><p visible-if=\"wrong\">Using the <code>in</code> keyword.</p></body></html>"
          },
          {
            "title": "Question: For loop",
            "id": 89399,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>How can we access elements of a set since sets don't have indices?</p><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\">By using a for loop to access the elements one by one</item><item value=\"2\" correct=\"false\">We can't access set elements at all</item></selection><p visible-if=\"wrong\">By using a for loop to access the elements one by one.</p></body></html>"
          },
          {
            "title": "Example: in keyword",
            "id": 89402,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Use the <code>in</code> keyword to check if the set <code>networks</code> contains an element <code>\"Wi-Free\"</code>.</p><code version=\"2\" codelang=\"python\" name=\"script.py\" visible-if=\"always\"><content><text value=\"networks = {\" /><text value=\"&quot;May's&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;PizzaParty5&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;Wi-Free&quot;\" class=\"string\" /><text value=\"} \" /><text type=\"break\" /><text type=\"break\" /><text value=\"print(\" /><text value=\"&quot;Wi-Free&quot;\" class=\"string\" /><text value=\" \" /><text value=\"in\" class=\"keyword\" /><text value=\" networks)\" /></content><interactions><interaction type=\"validatedInput\" isDefault=\"true\" startIndex=\"65\" endIndex=\"76\" /></interactions><output><content><text value=\"True\" /></content></output></code><p visible-if=\"wrong\">Make sure to type <code>in networks</code>.</p></body></html>"
          },
          {
            "title": "Example: For loop",
            "id": 89403,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Use a <code>for</code> loop to iterate through each <code>network</code> in the <code>networks</code> set.</p><code version=\"2\" codelang=\"python\" name=\"script.py\" visible-if=\"always\"><content><text value=\"networks = {\" /><text value=\"&quot;May's&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;PizzaParty5&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;Wi-Free&quot;\" class=\"string\" /><text value=\"} \" /><text type=\"break\" /><text type=\"break\" /><text value=\"for\" class=\"keyword\" /><text value=\" network \" /><text value=\"in\" class=\"keyword\" /><text value=\" networks:\" /><text type=\"break\" /><text value=\"  print(\" /><text value=\"f&quot;Connect to: \" /><text value=\"{network}\" class=\"subst\" /><text value=\"&quot;\" /><text value=\")\" /></content><interactions><interaction type=\"validatedInput\" isDefault=\"true\" startIndex=\"49\" endIndex=\"72\" /></interactions><output><content><text value=\"Connect to: PizzaParty5\" /><text type=\"break\" /><text value=\"Connect to: Wi-Free\" /><text type=\"break\" /><text value=\"Connect to: May's\" /></content></output></code><p visible-if=\"wrong\">Make sure to type <code>for network in networks</code>.</p></body></html>"
          }
        ]
      },
      {
        "id": 9975,
        "title": "Remove",
        "type": "practiceLevel1",
        "lessons": [
          {
            "title": "Remove",
            "id": 89316,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>To remove a set element like <code>\"Music\"</code>, we code the set name <code>classes</code>  followed by <code>.remove()</code> with the element between parentheses.</p><code version=\"2\" codelang=\"python\" name=\"script.py\" visible-if=\"always\"><content><text value=\"classes = {\" /><text value=\"&quot;Geometry&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;Music&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;French&quot;\" class=\"string\" /><text value=\"}\" /><text type=\"break\" /><text value=\"classes.remove(\" /><text value=\"&quot;Music&quot;\" class=\"string\" /><text value=\")\" /><text type=\"break\" /><text type=\"break\" /><text value=\"print(classes)\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"42\" endIndex=\"49\" /><option startIndex=\"49\" endIndex=\"56\" /><option startIndex=\"56\" endIndex=\"65\" /></options></interaction></interactions><output><content><text value=\"{'Geometry', 'French'}\" /></content></output></code><p visible-if=\"wrong\">Make sure to pick <code>classes</code>, followed by <code>.remove</code>, and finally <code>(\"Music\")</code>.</p></body></html>"
          },
          {
            "title": "Avoid errors",
            "id": 89317,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>To avoid getting an error, first check if an element is <code>in</code> a set before removing it, like with <code>\"History\"</code> here.</p><code version=\"2\" codelang=\"python\" name=\"script.py\" visible-if=\"always\"><content><text value=\"classes = {\" /><text value=\"&quot;Geometry&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;Music&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;French&quot;\" class=\"string\" /><text value=\"}\" /><text type=\"break\" /><text type=\"break\" /><text value=\"if\" class=\"keyword\" /><text value=\" \" /><text value=\"&quot;History&quot;\" class=\"string\" /><text value=\" \" /><text value=\"in\" class=\"keyword\" /><text value=\" classes:\" /><text type=\"break\" /><text value=\"  classes.remove(\" /><text value=\"&quot;History&quot;\" class=\"string\" /><text value=\")\" /><text type=\"break\" /><text type=\"break\" /><text value=\"print(classes)\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"43\" endIndex=\"45\" /><option startIndex=\"46\" endIndex=\"55\" /><option startIndex=\"56\" endIndex=\"58\" /><option startIndex=\"59\" endIndex=\"67\" /></options></interaction></interactions><output><content><text value=\"{'Geometry', 'French', 'Music'}\" /></content></output></code><p visible-if=\"wrong\">Make sure to pick <code>if</code> followed by <code>\"History\"</code> and then <code>in</code>, <code>classes:</code>.</p></body></html>"
          },
          {
            "title": "Question: Remove",
            "id": 89404,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>How do we remove an element from a set?</p><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\">With the <code>remove()</code> instruction</item><item value=\"2\" correct=\"false\">We can't remove elements from sets</item></selection><p visible-if=\"wrong\">With the <code>remove()</code> instruction.</p></body></html>"
          },
          {
            "title": "Example: Avoid errors",
            "id": 89405,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Why is it good practice to check if a set element is present before attempting to remove it?</p><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\">To avoid getting an error in case the set doesn't contain the element</item><item value=\"2\" correct=\"false\">To know if we need to add a new element</item></selection><p visible-if=\"wrong\">To avoid getting an error in case the set doesn't contain the element.</p></body></html>"
          },
          {
            "title": "Example: Remove",
            "id": 89406,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Use <code>remove()</code> to remove the flight number <code>\"BA1476\"</code> from the <code>arrivals</code> set.</p><code version=\"2\" codelang=\"python\" name=\"script.py\" visible-if=\"always\"><content><text value=\"arrivals = {\" /><text value=\"&quot;BA1476&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;DF2753&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;KF3280&quot;\" class=\"string\" /><text value=\"}\" /><text type=\"break\" /><text value=\"arrivals.remove(\" /><text value=\"&quot;BA1476&quot;\" class=\"string\" /><text value=\")\" /><text type=\"break\" /><text type=\"break\" /><text value=\"print(arrivals)\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"42\" endIndex=\"50\" /><option startIndex=\"50\" endIndex=\"51\" /><option startIndex=\"51\" endIndex=\"57\" /><option startIndex=\"57\" endIndex=\"58\" /><option startIndex=\"58\" endIndex=\"66\" /><option startIndex=\"66\" endIndex=\"67\" /></options></interaction></interactions><output><content><text value=\"{'KF3280', 'DF2753'}\" /></content></output></code><p visible-if=\"wrong\">Make sure to pick <code>arrivals</code> followed by <code>.</code> and then <code>remove</code>, <code>(</code>, <code>\"BA1476\"</code>, <code>)</code>.</p></body></html>"
          },
          {
            "title": "Example: Avoid errors",
            "id": 89407,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Check if the flight number <code>\"DF2255\"</code> is present in the <code>arrivals</code> set, before removing it.</p><code version=\"2\" codelang=\"python\" name=\"script.py\" visible-if=\"always\"><content><text value=\"arrivals = {\" /><text value=\"&quot;BA1476&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;DF2255&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;KF3280&quot;\" class=\"string\" /><text value=\"}\" /><text type=\"break\" /><text type=\"break\" /><text value=\"if\" class=\"keyword\" /><text value=\" \" /><text value=\"&quot;DF2255&quot;\" class=\"string\" /><text value=\" \" /><text value=\"in\" class=\"keyword\" /><text value=\" arrivals:\" /><text type=\"break\" /><text value=\"  arrivals.remove(\" /><text value=\"&quot;DF2255&quot;\" class=\"string\" /><text value=\")\" /><text type=\"break\" /><text type=\"break\" /><text value=\"print(arrivals)\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"43\" endIndex=\"45\" /><option startIndex=\"46\" endIndex=\"54\" /><option startIndex=\"55\" endIndex=\"57\" /><option startIndex=\"58\" endIndex=\"67\" /></options></interaction></interactions><output><content><text value=\"{'KF3280', 'BA1476'}\" /></content></output></code><p visible-if=\"wrong\">Make sure to pick <code>if</code> followed by <code>\"DF2255\"</code> and then <code>in</code>, <code>arrivals:</code>.</p></body></html>"
          }
        ]
      }
    ]
  }
}