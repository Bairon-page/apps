{
  "tutorial": {
    "id": 1779,
    "version": 10,
    "type": "guidedProjectOptional",
    "isNew": false,
    "codeLanguage": "javascript",
    "title": "Transmítelo de nuevo",
    "descriptionContent": "Usa objetos y métodos de objetos para imitar una plataforma de streaming",
    "shortDescriptionContent": "",
    "showInTrack": true,
    "iconBanner": "tutorial-1779-icon-banner.svg",
    "chapters": [
      {
        "id": 11743,
        "title": "Transmítelo de nuevo",
        "type": "practiceLevel3",
        "lessons": [
          {
            "title": "Starter code",
            "id": 107846,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Nuestro servicio de streaming está produciendo su propio programa. Vamos a añadir algunos métodos para comenzar a transmitir y aumentar esas `\"views\"`.\n\nYa hemos añadido algo de código para ayudarte a comenzar.\n\nHemos definido un objeto llamado `show` con dos propiedades: `name` y `views`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const show = {\r\n  name: \"Pick and Shorty\",\r\n  views: 10\r\n};",
                  "solvedContent": null
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Play it",
            "id": 107579,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Primero, comenzaremos creando un método.\n\n1. Dale al objeto `show` un método llamado `play`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const show = {\r\n  name: \"Pick and Shorty\",\r\n  views: 10\r\n};",
                  "solvedContent": "const show = {\r\n  name: \"Pick and Shorty\",\r\n  views: 10,\r\n  play: function() {}\r\n};"
                }
              ],
              "hints": [
                {
                  "title": "Hint",
                  "content": "Use `play: function ( ) { }` to create a method in `show` object. \nRemember to add a comma after `views`, before the method."
                }
              ]
            }
          },
          {
            "title": "Getting properties with \"this\"",
            "id": 107575,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Vamos también a obtener el nombre del programa dentro de la función.\n\n1. Crea un `const showName` dentro del método `play` y asígnalo igual a la propiedad `name` del objeto.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const show = {\n name: \"Pick and Shorty\",\n views: 10,\n play : function () {\n\n }\n};",
                  "solvedContent": "const show = {\n name: \"Pick and Shorty\",\n views: 10,\n play : function () {\n  const showName = this.name;\n }\n};"
                }
              ],
              "hints": [
                {
                  "title": "Hint",
                  "content": "Use `this` keyword to refer to the show's name inside an object."
                }
              ]
            }
          },
          {
            "title": "Displaying properties",
            "id": 107580,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Ahora que tenemos el nombre del programa en la función, vamos a mostrarlo en la consola.\n\n1. Dentro del método `play`, imprime la frase `\"Now Playing \"` seguida del valor de la variable `showName`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const show = {\n  name: \"Pick and Shorty\",\n  views: 10,\n  play: function() {\n    const showName = this.name;\n  }\n};",
                  "solvedContent": "const show = {\n  name: \"Pick and Shorty\",\n  views: 10,\n  play: function() {\n    const showName = this.name;\n    console.log(\"Now Playing \" + showName);\n  }\n};"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Calling a method",
            "id": 107569,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Ahora que nuestro método está configurado, llamemos al método y reproduzcamos el show.\n\n1. Llama al método `play` del objeto `show` debajo del objeto.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const show = {\n  name: \"Pick and Shorty\",\n  views: 10,\n  play: function() {\n    const showName = this.name;\n    console.log(\"Now Playing \" + showName);\n  }\n};",
                  "solvedContent": "const show = {\n  name: \"Pick and Shorty\",\n  views: 10,\n  play: function() {\n    const showName = this.name;\n    console.log(\"Now Playing \" + showName);\n  }\n};\nshow.play();"
                }
              ],
              "hints": [
                {
                  "title": "Hint",
                  "content": "To call a method, the syntax is : `objectName.methodName()`."
                }
              ]
            }
          },
          {
            "title": "Add views",
            "id": 107581,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Pero solo jugar no es suficiente. ¡También necesitamos agregar vistas!\n\n1. Dale al objeto `show` un segundo método llamado `addViews`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const show = {\n  name: \"Pick and Shorty\",\n  views: 10,\n  play: function() {\n    const showName = this.name;\n    console.log(\"Now Playing \" + showName);\n  }\n};\nshow.play();",
                  "solvedContent": "const show = {\n  name: \"Pick and Shorty\",\n  views: 10,\n  play: function() {\n    const showName = this.name;\n    console.log(\"Now Playing \" + showName);\n  },\n  addViews: function() {}\n};\nshow.play();"
                }
              ],
              "hints": [
                {
                  "title": "Hint",
                  "content": "To create a method, the syntax is : `methodName : function ( ) { }`. \nRemember to add a comma `,` before the new method."
                }
              ]
            }
          },
          {
            "title": "Adding a parameter",
            "id": 107577,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "A continuación, agregaremos un parámetro al método `addViews`. Este parámetro pasará el número de vistas.\n\n1. Modifica el método `addViews` para que tome un parámetro, `numberViews`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const show = {\n  name: \"Pick and Shorty\",\n  views: 10,\n  play: function() {\n    const showName = this.name;\n    console.log(\"Now Playing \" + showName);\n  },\n  addViews: function() {}\n};\nshow.play();",
                  "solvedContent": "const show = {\n  name: \"Pick and Shorty\",\n  views: 10,\n  play: function() {\n    const showName = this.name;\n    console.log(\"Now Playing \" + showName);\n  },\n  addViews: function(numberViews) {}\n};\nshow.play();"
                }
              ],
              "hints": [
                {
                  "title": "Hint",
                  "content": "Specify parameters inside the parentheses after the `function` keyword. "
                }
              ]
            }
          },
          {
            "title": "Updating properties with \"this\"",
            "id": 107567,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "El valor pasado como `numberViews` debería sumarse a la propiedad `views`.\n\n1. Dentro del método `addViews`, usa autoasignación para aumentar el valor de la propiedad `views` por el `numberViews`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const show = {\n  name: \"Pick and Shorty\",\n  views: 10,\n  play: function() {\n    const showName = this.name;\n    console.log(\"Now Playing \" + showName);\n  },\n  addViews: function(numberViews) {}\n};\nshow.play();",
                  "solvedContent": "const show = {\n  name: \"Pick and Shorty\",\n  views: 10,\n  play: function() {\n    const showName = this.name;\n    console.log(\"Now Playing \" + showName);\n  },\n  addViews: function(numberViews) {\n    this.views = this.views + numberViews;\n  }\n};\nshow.play();"
                }
              ],
              "hints": [
                {
                  "title": "Hint",
                  "content": "Access an object's property using `this`, like `this.views`."
                }
              ]
            }
          },
          {
            "title": "Calling a method",
            "id": 107570,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Después de reproducir el show, el número de `views` debería aumentar en `1`.\n\n1. Agrega una línea después de `show.play();` para llamar a `addViews` pasando `1` como argumento.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const show = {\n  name: \"Pick and Shorty\",\n  views: 10,\n  play: function() {\n    const showName = this.name;\n    console.log(\"Now Playing \" + showName);\n  },\n  addViews: function(numberViews) {\n    this.views = this.views + numberViews;\n  }\n};\nshow.play();",
                  "solvedContent": "const show = {\n  name: \"Pick and Shorty\",\n  views: 10,\n  play: function() {\n    const showName = this.name;\n    console.log(\"Now Playing \" + showName);\n  },\n  addViews: function(numberViews) {\n    this.views = this.views + numberViews;\n  }\n};\nshow.play();\nshow.addViews(1);"
                }
              ],
              "hints": [
                {
                  "title": "Hint",
                  "content": "To pass a value while calling a method, the syntax is : `objectName.methodName(value1, value2...)`."
                }
              ]
            }
          },
          {
            "title": "Returning a value",
            "id": 107578,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "También devolveremos el número total de vistas.\n\n1. Añade una línea para devolver `this.views` al final de `addViews`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const show = {\n  name: \"Pick and Shorty\",\n  views: 10,\n  play: function() {\n    const showName = this.name;\n    console.log(\"Now Playing \" + showName);\n  },\n  addViews: function(numberViews) {\n    this.views = this.views + numberViews;\n  }\n};\nshow.play();\nshow.addViews(1);",
                  "solvedContent": "const show = {\n  name: \"Pick and Shorty\",\n  views: 10,\n  play: function() {\n    const showName = this.name;\n    console.log(\"Now Playing \" + showName);\n  },\n  addViews: function(numberViews) {\n    this.views = this.views + numberViews;\n    return this.views;\n  }\n};\nshow.play();\nshow.addViews(1);"
                }
              ],
              "hints": [
                {
                  "title": "Hint",
                  "content": "Use the `return` keyword to return values. "
                }
              ]
            }
          },
          {
            "title": "Displaying return value",
            "id": 107572,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Vamos a comprobar si `addViews` funciona como esperamos.\n\n1. Edita el código y coloca `show.addViews(1)` dentro de una declaración `console.log()` para mostrar el valor devuelto.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const show = {\n  name: \"Pick and Shorty\",\n  views: 10,\n  play: function() {\n    const showName = this.name;\n    console.log(\"Now Playing \" + showName);\n  },\n  addViews: function(numberViews) {\n    this.views = this.views + numberViews;\n    return this.views;\n  }\n};\nshow.play();\nshow.addViews(1);",
                  "solvedContent": "const show = {\n  name: \"Pick and Shorty\",\n  views: 10,\n  play: function() {\n    const showName = this.name;\n    console.log(\"Now Playing \" + showName);\n  },\n  addViews: function(numberViews) {\n    this.views = this.views + numberViews;\n    return this.views;\n  }\n};\nshow.play();\nconsole.log(show.addViews(1));"
                }
              ],
              "hints": []
            }
          }
        ]
      }
    ]
  }
}