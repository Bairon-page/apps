{
  "tutorial": {
    "id": 2668,
    "version": 7,
    "type": "guidedProject",
    "isNew": false,
    "codeLanguage": "python",
    "title": "Star Wars API - Parte 2",
    "descriptionContent": "Dale poder a los usuarios en esta secuela, permitiéndoles elegir cuántos personajes descargar y explorar",
    "shortDescriptionContent": "",
    "showInTrack": true,
    "iconBanner": "tutorial-2668-icon-banner.svg",
    "chapters": [
      {
        "id": 14643,
        "title": "Capítulo #1",
        "type": "practiceLevel3",
        "lessons": [
          {
            "title": "Lesson #1",
            "id": 129511,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Bienvenido de nuevo al proyecto de la **Star Wars API**. En la segunda parte, vamos a dejar que el usuario decida qué datos obtenemos de la API.\n\n1. Crea una nueva función llamada `fetch_data` que encapsule todo el código existente excepto la declaración de importación.\n   - La función debe aceptar un parámetro llamado `option`.\n   - Antes del bloque try-except, define la variable `data`, que usaremos más tarde, y asígnale una lista vacía.\n   - Dentro de esta función, mantén el otro código existente tal como está.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "import requests\n\noption = \"people\"\nurl = f\"https://swapi.mimo.dev/api/{option}/\"\ntry:\n  response = requests.get(url)\n  response.raise_for_status()\n\n  data = response.json()\n  print(f\"Successfully fetched {len(data)} entities\")\nexcept requests.HTTPError as e:\n  print(f\"Error fetching data: {e}\")\n\nif data:\n  for entity in data:\n    print(entity[\"name\"])\nelse:\n  print(\"Unable to download data\")",
                  "solvedContent": "import requests\n\ndef fetch_data(option):\n  option = \"people\"\n  url = f\"https://swapi.mimo.dev/api/{option}/\"\n  data = []\n  try:\n    response = requests.get(url)\n    response.raise_for_status()\n\n    data = response.json()\n    print(f\"Successfully fetched {len(data)} entities\")\n  except requests.HTTPError as e:\n    print(f\"Error fetching data: {e}\")\n\n  if data:\n    for entity in data:\n      print(entity[\"name\"])\n  else:\n    print(\"Unable to download data\")"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Lesson #2",
            "id": 129512,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "La primera línea de la función crea la variable `option` y le asigna el valor `\"people\"`. Como ahora pasamos esta opción como un parámetro a la función, ya no necesitamos esta línea.\n\n1. Elimina la línea `option = \"people\"` de la función para que `url` use el parámetro `option` pasado.\n2. Finalmente, llama a la función con los parámetros `\"people\"`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "import requests\n\ndef fetch_data(option):\n  option = \"people\"\n  url = f\"https://swapi.mimo.dev/api/{option}/\"\n  data = []\n  try:\n    response = requests.get(url)\n    response.raise_for_status()\n\n    data = response.json()\n    print(f\"Successfully fetched {len(data)} entities\")\n  except requests.HTTPError as e:\n    print(f\"Error fetching data: {e}\")\n\n  if data:\n    for entity in data:\n      print(entity[\"name\"])\n  else:\n    print(\"Unable to download data\")",
                  "solvedContent": "import requests\n\ndef fetch_data(option):\n  url = f\"https://swapi.mimo.dev/api/{option}/\"\n  data = []\n  try:\n    response = requests.get(url)\n    response.raise_for_status()\n\n    data = response.json()\n    print(f\"Successfully fetched {len(data)} entities\")\n  except requests.HTTPError as e:\n    print(f\"Error fetching data: {e}\")\n\n  if data:\n    for entity in data:\n      print(entity[\"name\"])\n  else:\n    print(\"Unable to download data\")\n\nfetch_data(\"people\")"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Lesson #8",
            "id": 129518,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "En este momento, la función imprime directamente el resultado. Vamos a cambiarla para que devuelva el resultado en su lugar.\n\n1. Mueve el bloque `if` que imprime cada elemento del resultado fuera de la función, colocándolo debajo de la llamada a la función.\n2. Cambia la función para que devuelva el `data` al final.\n3. Añade `return None` en el bloque `except`.\n4. Asigna el valor de retorno de la función a una nueva variable llamada `data` fuera de la función.\n5. Usa esta variable `data` para iterar y imprimir los elementos de la lista devuelta.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "import requests\n\ndef fetch_data(option):\n  url = f\"https://swapi.mimo.dev/api/{option}/\"\n  data = []\n  try:\n    response = requests.get(url)\n    response.raise_for_status()\n\n    data = response.json()\n    print(f\"Successfully fetched {len(data)} entities\")\n  except requests.HTTPError as e:\n    print(f\"Error fetching data: {e}\")\n\n  if data:\n    for entity in data:\n      print(entity[\"name\"])\n  else:\n    print(\"Unable to download data\")\n\nfetch_data(\"people\")",
                  "solvedContent": "import requests\n\ndef fetch_data(option):\n  url = f\"https://swapi.mimo.dev/api/{option}/\"\n  data = []\n  try:\n    response = requests.get(url)\n    response.raise_for_status()\n\n    data = response.json()\n    print(f\"Successfully fetched {len(data)} entities\")\n  except requests.HTTPError as e:\n    print(f\"Error fetching data: {e}\")\n    return None\n\n  return data\n\ndata = fetch_data(\"people\")\n\nif data:\n  for entity in data:\n    print(entity[\"name\"])\nelse:\n    print(\"Unable to download data\")\n"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Lesson #8 - Copy",
            "id": 131645,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Hay más endpoints que podemos llamar. Démosle a nuestros usuarios la opción.\n\n1. Pregunta al usuario qué datos de StarWars le gustaría explorar.\n2. Recoge la respuesta mediante la función `input` de Python y guárdala.\n   - Elimina los espacios innecesarios al principio y al final.\n   - Transforma la entrada a minúsculas.\n   - Guarda la entrada en una variable llamada `option`.\n3. En lugar de pasar `\"people\"` como argumento al llamar a `fetch_data`, pasa `option`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "import requests\n\ndef fetch_data(option):\n  url = f\"https://swapi.mimo.dev/api/{option}/\"\n  data = []\n  try:\n    response = requests.get(url)\n    response.raise_for_status()\n\n    data = response.json()\n    print(f\"Successfully fetched {len(data)} entities\")\n  except requests.HTTPError as e:\n    print(f\"Error fetching data: {e}\")\n    return None\n\n  return data\n\ndata = fetch_data(\"people\")\n\nif data:\n  for entity in data:\n    print(entity[\"name\"])\nelse:\n    print(\"Unable to download data\")",
                  "solvedContent": "import requests\n\ndef fetch_data(option):\n  url = f\"https://swapi.mimo.dev/api/{option}/\"\n  data = []\n  try:\n    response = requests.get(url)\n    response.raise_for_status()\n\n    data = response.json()\n    print(f\"Successfully fetched {len(data)} entities\")\n  except requests.HTTPError as e:\n    print(f\"Error fetching data: {e}\")\n    return None\n\n  return data\n\noption = input(\"Enter an option (e.g., 'people' or 'planets'): \").strip().lower()\ndata = fetch_data(option)\n\nif data:\n  for entity in data:\n    print(entity[\"name\"])\nelse:\n    print(\"Unable to download data\")"
                }
              ],
              "hints": []
            }
          }
        ]
      }
    ]
  }
}