{
  "tutorial": {
    "id": 2890,
    "version": 3,
    "type": "guidedProject",
    "isNew": false,
    "codeLanguage": "node",
    "title": "Administrador de Tareas - Parte 2",
    "descriptionContent": "En la segunda parte del proyecto, permitiremos a nuestros usuarios marcar tareas como completadas, y con eso, hacer del gestor de tareas una herramienta útil.",
    "shortDescriptionContent": "",
    "showInTrack": true,
    "iconBanner": "tutorial-2890-icon-banner.svg",
    "chapters": [
      {
        "id": 14981,
        "title": "Capítulo #1",
        "type": "practiceLevel3",
        "lessons": [
          {
            "title": "Lesson #1",
            "id": 132085,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Bienvenido de nuevo al proyecto **Task Manager**. En la segunda parte del proyecto, permitiremos a los usuarios agregar nuevas tareas y cambiar el estado de las tareas.\n\n1. Debajo del endpoint `GET /tasks/:id` en tu archivo `app.js`, crea un nuevo endpoint para una solicitud POST en `/tasks`.\n2. En la función de callback, extrae el `title` y `description` de `req.body` usando desestructuración de objetos.\n3. Si no hay un título, envía una respuesta 400 con un mensaje de error en JSON que diga `\"Title is required\"`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "app.js",
                  "codeLanguage": "javascript",
                  "content": "const db = require(\"./database\");\nconst express = require(\"express\");\nconst app = express();\nconst port = 3000;\n\napp.use(express.json());\n\napp.listen(port, () => {\n  console.log(`App is running on port ${port}`);\n});\n\napp.get(\"/tasks\", (req, res) => {\n  const tasks = db.prepare(\"SELECT * FROM tasks\").all();\n  res.status(200).json({\n    tasks: tasks,\n  });\n});\n",
                  "solvedContent": "const db = require(\"./database\");\nconst express = require(\"express\");\nconst app = express();\nconst port = 3000;\n\napp.use(express.json());\n\napp.listen(port, () => {\n  console.log(`App is running on port ${port}`);\n});\n\napp.get(\"/tasks\", (req, res) => {\n  const tasks = db.prepare(\"SELECT * FROM tasks\").all();\n  res.status(200).json({\n    tasks: tasks,\n  });\n});\n\napp.post(\"/tasks\", (req, res) => {\n  const { title, description } = req.body;\n  if (!title) {\n    return res.status(400).json({ error: \"Title is required\" });\n  }\n});\n"
                },
                {
                  "name": "database.js",
                  "codeLanguage": "javascript",
                  "content": "const Database = require(\"better-sqlite3\");\nconst db = new Database(\"/tmp/tasks.db\");\n\ndb.exec(`\n    CREATE TABLE IF NOT EXISTS tasks (\n      id INTEGER PRIMARY KEY AUTOINCREMENT,\n      title TEXT NOT NULL,\n      description TEXT,\n      status TEXT NOT NULL DEFAULT 'pending' CHECK(status IN ('pending', 'completed'))\n    )\n`);\n\ndb.exec(`\n    INSERT INTO tasks (title, description, status)\n    VALUES \n    ('Buy groceries', 'Milk, Bread, Eggs', 'pending'),\n    ('Clean the house', 'Vacuum and dust the living room', 'completed'),\n    ('Finish the report', 'Complete the annual financial report', 'pending')\n`);\n\nmodule.exports = db;\n",
                  "solvedContent": null
                }
              ],
              "hints": [],
              "httpOptions": {
                "method": "POST",
                "path": "/tasks",
                "body": "{}"
              }
            }
          },
          {
            "title": "Lesson #2",
            "id": 132086,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Vamos a implementar el código para insertar la nueva tarea en la base de datos.\n\n1. Usando el `title` y `description` pasados, añade una nueva tarea a la tabla de tareas.\n2. Devuelve el id de la tarea recién creada en el JSON como `taskId` y establece el estado a 201.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "app.js",
                  "codeLanguage": "javascript",
                  "content": "const db = require(\"./database\");\nconst express = require(\"express\");\nconst app = express();\nconst port = 3000;\n\napp.use(express.json());\n\napp.listen(port, () => {\n  console.log(`App is running on port ${port}`);\n});\n\napp.get(\"/tasks\", (req, res) => {\n  const tasks = db.prepare(\"SELECT * FROM tasks\").all();\n  res.status(200).json({\n    tasks: tasks,\n  });\n});\n\napp.post(\"/tasks\", (req, res) => {\n  const { title, description } = req.body;\n  if (!title) {\n    return res.status(400).json({ error: \"Title is required\" });\n  }\n});\n",
                  "solvedContent": "const db = require(\"./database\");\nconst express = require(\"express\");\nconst app = express();\nconst port = 3000;\n\napp.use(express.json());\n\napp.listen(port, () => {\n  console.log(`App is running on port ${port}`);\n});\n\napp.get(\"/tasks\", (req, res) => {\n  const tasks = db.prepare(\"SELECT * FROM tasks\").all();\n  res.status(200).json({\n    tasks: tasks,\n  });\n});\n\napp.post(\"/tasks\", (req, res) => {\n  const { title, description } = req.body;\n  if (!title) {\n    return res.status(400).json({ error: \"Title is required\" });\n  }\n\n  const insert = db.prepare(\n    \"INSERT INTO tasks (title, description) VALUES (?, ?)\",\n  );\n  const result = insert.run(title, description);\n\n  res.status(201).json({\n    taskId: result.lastInsertRowid,\n    message: \"Task created successfully\",\n  });\n});\n"
                },
                {
                  "name": "database.js",
                  "codeLanguage": "javascript",
                  "content": "const Database = require(\"better-sqlite3\");\nconst db = new Database(\"/tmp/tasks.db\");\n\ndb.exec(`\n    CREATE TABLE IF NOT EXISTS tasks (\n      id INTEGER PRIMARY KEY AUTOINCREMENT,\n      title TEXT NOT NULL,\n      description TEXT,\n      status TEXT NOT NULL DEFAULT 'pending' CHECK(status IN ('pending', 'completed'))\n    )\n`);\n\ndb.exec(`\n    INSERT INTO tasks (title, description, status)\n    VALUES \n    ('Buy groceries', 'Milk, Bread, Eggs', 'pending'),\n    ('Clean the house', 'Vacuum and dust the living room', 'completed'),\n    ('Finish the report', 'Complete the annual financial report', 'pending')\n`);\n\nmodule.exports = db;\n",
                  "solvedContent": null
                }
              ],
              "hints": [],
              "httpOptions": {
                "method": "POST",
                "path": "/tasks",
                "body": "{\n  \"title\": \"Read a book\",\n  \"description\": \"I really want to read 'Catch-22' or a similar book.\"\n}"
              }
            }
          },
          {
            "title": "Lesson #3",
            "id": 132087,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Para actualizar el estado de una tarea existente, vamos a crear un endpoint que maneje una solicitud PUT.\n\n1. Define un nuevo endpoint para una solicitud `PUT` en el URI `/tasks/:id`.\n2. En la función de callback, extrae el `id` de `req.params` y el `status` de `req.body`.\n3. Si el estado no tiene el valor `\"completed\"` o `\"pending\"`, responde con el código de estado 400 y un mensaje de error en formato JSON diciendo `\"Invalid status\"`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "app.js",
                  "codeLanguage": "javascript",
                  "content": "const db = require(\"./database\");\nconst express = require(\"express\");\nconst app = express();\nconst port = 3000;\n\napp.use(express.json());\n\napp.listen(port, () => {\n  console.log(`App is running on port ${port}`);\n});\n\napp.get(\"/tasks\", (req, res) => {\n  const tasks = db.prepare(\"SELECT * FROM tasks\").all();\n  res.status(200).json({\n    tasks: tasks,\n  });\n});\n\napp.post(\"/tasks\", (req, res) => {\n  const { title, description } = req.body;\n  if (!title) {\n    return res.status(400).json({ error: \"Title is required\" });\n  }\n\n  const insert = db.prepare(\n    \"INSERT INTO tasks (title, description) VALUES (?, ?)\",\n  );\n  const result = insert.run(title, description);\n\n  res.status(201).json({\n    taskId: result.lastInsertRowid,\n    message: \"Task created successfully\",\n  });\n});\n",
                  "solvedContent": "const db = require(\"./database\");\nconst express = require(\"express\");\nconst app = express();\nconst port = 3000;\n\napp.use(express.json());\n\napp.listen(port, () => {\n  console.log(`App is running on port ${port}`);\n});\n\napp.get(\"/tasks\", (req, res) => {\n  const tasks = db.prepare(\"SELECT * FROM tasks\").all();\n  res.status(200).json({\n    tasks: tasks,\n  });\n});\n\napp.post(\"/tasks\", (req, res) => {\n  const { title, description } = req.body;\n  if (!title) {\n    return res.status(400).json({ error: \"Title is required\" });\n  }\n\n  const insert = db.prepare(\n    \"INSERT INTO tasks (title, description) VALUES (?, ?)\",\n  );\n  const result = insert.run(title, description);\n\n  res.status(201).json({\n    taskId: result.lastInsertRowid,\n    message: \"Task created successfully\",\n  });\n});\n\napp.put(\"/tasks/:id\", (req, res) => {\n  const { id } = req.params;\n  const { status } = req.body;\n  if (status !== \"completed\" && status !== \"pending\") {\n    return res.status(400).json({ error: \"Invalid status\" });\n  }\n});\n"
                },
                {
                  "name": "database.js",
                  "codeLanguage": "javascript",
                  "content": "const Database = require(\"better-sqlite3\");\nconst db = new Database(\"/tmp/tasks.db\");\n\ndb.exec(`\n    CREATE TABLE IF NOT EXISTS tasks (\n      id INTEGER PRIMARY KEY AUTOINCREMENT,\n      title TEXT NOT NULL,\n      description TEXT,\n      status TEXT NOT NULL DEFAULT 'pending' CHECK(status IN ('pending', 'completed'))\n    )\n`);\n\ndb.exec(`\n    INSERT INTO tasks (title, description, status)\n    VALUES \n    ('Buy groceries', 'Milk, Bread, Eggs', 'pending'),\n    ('Clean the house', 'Vacuum and dust the living room', 'completed'),\n    ('Finish the report', 'Complete the annual financial report', 'pending')\n`);\n\nmodule.exports = db;\n",
                  "solvedContent": null
                }
              ],
              "hints": [],
              "httpOptions": {
                "method": "PUT",
                "path": "/tasks/1",
                "body": "{\n  \"status\": \"Invalid status\"\n}"
              }
            }
          },
          {
            "title": "Lesson #4",
            "id": 132088,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Terminemos la ruta actualizando la base de datos con el nuevo estado de la tarea.\n\n1. Actualiza el estado de la tarea con el id dado estableciéndolo en `\"completed\"` o `\"pending\"`.\n2. Si no se encontró ninguna tarea con el ID dado, devuelve el código de estado `404` junto con un mensaje de error.\n3. Si la tarea se actualizó correctamente, devuelve el código de estado `200`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "app.js",
                  "codeLanguage": "javascript",
                  "content": "const db = require(\"./database\");\nconst express = require(\"express\");\nconst app = express();\nconst port = 3000;\n\napp.use(express.json());\n\napp.listen(port, () => {\n  console.log(`App is running on port ${port}`);\n});\n\napp.get(\"/tasks\", (req, res) => {\n  const tasks = db.prepare(\"SELECT * FROM tasks\").all();\n  res.status(200).json({\n    tasks: tasks,\n  });\n});\n\napp.post(\"/tasks\", (req, res) => {\n  const { title, description } = req.body;\n  if (!title) {\n    return res.status(400).json({ error: \"Title is required\" });\n  }\n\n  const insert = db.prepare(\n    \"INSERT INTO tasks (title, description) VALUES (?, ?)\",\n  );\n  const result = insert.run(title, description);\n\n  res.status(201).json({\n    taskId: result.lastInsertRowid,\n    message: \"Task created successfully\",\n  });\n});\n\napp.put(\"/tasks/:id\", (req, res) => {\n  const { id } = req.params;\n  const { status } = req.body;\n  if (status !== \"completed\" && status !== \"pending\") {\n    return res.status(400).json({ error: \"Invalid status\" });\n  }\n});\n",
                  "solvedContent": "const db = require(\"./database\");\nconst express = require(\"express\");\nconst app = express();\nconst port = 3000;\n\napp.use(express.json());\n\napp.listen(port, () => {\n  console.log(`App is running on port ${port}`);\n});\n\napp.get(\"/tasks\", (req, res) => {\n  const tasks = db.prepare(\"SELECT * FROM tasks\").all();\n  res.status(200).json({\n    tasks: tasks,\n  });\n});\n\napp.post(\"/tasks\", (req, res) => {\n  const { title, description } = req.body;\n  if (!title) {\n    return res.status(400).json({ error: \"Title is required\" });\n  }\n\n  const insert = db.prepare(\n    \"INSERT INTO tasks (title, description) VALUES (?, ?)\",\n  );\n  const result = insert.run(title, description);\n\n  res.status(201).json({\n    taskId: result.lastInsertRowid,\n    message: \"Task created successfully\",\n  });\n});\n\napp.put(\"/tasks/:id\", (req, res) => {\n  const { id } = req.params;\n  const { status } = req.body;\n  if (status !== \"completed\" && status !== \"pending\") {\n    return res.status(400).json({ error: \"Invalid status\" });\n  }\n\n  const update = db.prepare(\"UPDATE tasks SET status = ? WHERE id = ?\");\n  const result = update.run(status, id);\n\n  if (result.changes === 0) {\n    return res.status(404).json({ error: \"Task not found\" });\n  }\n\n  res.status(200).json({\n    message: `Task with id ${id} updated successfully.`,\n    updatedStatus: status,\n  });\n});\n"
                },
                {
                  "name": "database.js",
                  "codeLanguage": "javascript",
                  "content": "const Database = require(\"better-sqlite3\");\nconst db = new Database(\"/tmp/tasks.db\");\n\ndb.exec(`\n    CREATE TABLE IF NOT EXISTS tasks (\n      id INTEGER PRIMARY KEY AUTOINCREMENT,\n      title TEXT NOT NULL,\n      description TEXT,\n      status TEXT NOT NULL DEFAULT 'pending' CHECK(status IN ('pending', 'completed'))\n    )\n`);\n\ndb.exec(`\n    INSERT INTO tasks (title, description, status)\n    VALUES \n    ('Buy groceries', 'Milk, Bread, Eggs', 'pending'),\n    ('Clean the house', 'Vacuum and dust the living room', 'completed'),\n    ('Finish the report', 'Complete the annual financial report', 'pending')\n`);\n\nmodule.exports = db;\n",
                  "solvedContent": null
                }
              ],
              "hints": [],
              "httpOptions": {
                "method": "PUT",
                "path": "/tasks/1",
                "body": "{\n  \"status\": \"completed\"\n}"
              }
            }
          }
        ]
      }
    ]
  }
}