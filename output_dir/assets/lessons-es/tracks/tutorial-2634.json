{
  "tutorial": {
    "id": 2634,
    "version": 4,
    "type": "challenges",
    "isNew": false,
    "codeLanguage": "javascript",
    "title": "Objetos y ES 6",
    "descriptionContent": "Los desafíos son ejercicios más difíciles que pondrán a prueba tus habilidades.",
    "shortDescriptionContent": "",
    "showInTrack": true,
    "iconBanner": null,
    "chapters": [
      {
        "id": 14539,
        "title": "Agregando propiedades",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "Adding Properties",
            "id": 129199,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Agreguemos otra propiedad a un objeto analizado desde una cadena JSON. Vamos a actualizar el objeto añadiendo una propiedad después de haber creado el objeto.\n\n1. Analiza la cadena JSON `tajMahalJSON` y guárdala en una variable, `tajMahal`, para que podamos trabajar con ella como un objeto JS.\n\n3. Muestra el valor de `takeout` del objeto `tajMahal`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const tajMahalJSON = '{ \"cuisine\": \"Indian\", \"takeout\": false}';\r\n\r\n",
                  "solvedContent": "const tajMahalJSON = '{ \"cuisine\": \"Indian\", \"takeout\": false}';\r\nconst tajMahal = JSON.parse(tajMahalJSON);\r\nconsole.log(tajMahal.takeout);"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 14540,
        "title": "Actualizando propiedades",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "Updating an Object Property",
            "id": 129200,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Actualicemos los valores de las propiedades existentes de un objeto.\n\n1. En una línea separada después del objeto, actualiza la propiedad `takeout` de `tajMahal` a `true`. No edites el valor original dentro del objeto.\n\n2. Muestra el objeto `tajMahal` para confirmar que ha sido actualizado.\n\n3. Para preparar el objeto para ser enviado al servidor, vamos a crear una nueva variable llamada `stringTajMahal` y almacenar la versión en cadena de `tajMahal`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const tajMahal = {\r\n  cuisine: \"Indian\",\r\n  takeout: false,\r\n  starRating: 4.5\r\n};",
                  "solvedContent": "const tajMahal = {\r\n  cuisine: \"Indian\",\r\n  takeout: false,\r\n  starRating: 4.5\r\n};\r\ntajMahal.takeout = true;\r\nconsole.log(tajMahal);\r\nconst stringTajMahal = JSON.stringify(tajMahal);\r\nconsole.log(stringTajMahal);\r\n"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 14541,
        "title": "Accediendo a propiedades",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "Use Property Value",
            "id": 129201,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Accedamos al valor de una propiedad del objeto analizado desde una cadena JSON y utilicémoslo en un nuevo cálculo.\n\n1. Analiza la cadena JSON en un objeto JS y guárdala en una nueva variable, la variable `tajMahal`.\n2. Usando `const`, crea una nueva variable llamada `tenRating`, que sea igual al valor de la propiedad `starRating` de `tajMahal` multiplicado por `2`.\n2. Muestra el valor de `tenRating` para verificar el resultado.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const tajMahalJSON = '{ \"cuisine\": \"Indian\", \"takeout\": false, \"starRating\": 4.5}';",
                  "solvedContent": "const tajMahalJSON = '{ \"cuisine\": \"Indian\", \"takeout\": false, \"starRating\": 4.5}';\r\nconst tajMahal = JSON.parse(tajMahalJSON);\r\nconst tenRating = tajMahal.starRating * 2;\r\nconsole.log(tenRating);"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 14542,
        "title": "Mensaje de bienvenida del hotel",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "Hotel Welcome Message",
            "id": 129202,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Una cadena de hoteles necesita mostrar un mensaje de bienvenida a los huéspedes en sus nuevos displays exteriores. Escribe una función flecha que devuelva un mensaje de bienvenida similar al ejemplo a continuación. Puedes elegir tu propio mensaje de bienvenida, siempre que sea una cadena.\n\nEjemplo de salida:\n```\nHello! Welcome to Terrace Inn & Suites!\n```\n\n1. Declara una función flecha llamada `checkInMessage` que devuelva el mensaje de bienvenida proporcionado. Haz clic en el mensaje de bienvenida para copiarlo y luego pégalo como una cadena que será devuelta por la función flecha.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "index.js",
                  "codeLanguage": "javascript",
                  "content": "console.log(checkInMessage());",
                  "solvedContent": "const checkInMessage = () => \"Hello! Welcome to Terrace Inn & Suites!\";\nconsole.log(checkInMessage());"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 14543,
        "title": "Adición de Mensaje Estacional",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "Seasonal Message Addition",
            "id": 129203,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "El gerente general de Terrace Inn & Suites quisiera que la función flecha se modifique para incluir un `generalMessage` y un `seasonalMessage`.\n\nEl mensaje general seguirá siendo el mismo: `Hello! Welcome to Terrace Inn & Suites`.\n\nSegún las instrucciones del gerente general, el mensaje de temporada será: `Need to cool off? Visit one of our three resort pools!`.\n\nLa función flecha debe almacenar estos dos mensajes en variables y devolver las cadenas concatenadas. ¡No olvides agregar un espacio entre ellas!\n\nEjemplo de salida\n```javascript\nHello! Welcome to Terrace Inn & Suites! Need to cool off? Visit one of our three resort pools!\n```\n\n1. Convierte la función flecha existente en una función flecha de varias líneas.\n2. Declara y almacena los mensajes proporcionados en variables llamadas `generalMessage` y `seasonalMessage`.\n3. Finalmente, la función flecha debe devolver las dos variables concatenadas con un espacio entre ellas.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "index.js",
                  "codeLanguage": "javascript",
                  "content": "const challengeGreeting = () => \"Hello! Welcome to Terrace Inn & Suites!\";\r\nconsole.log(challengeGreeting());",
                  "solvedContent": "const challengeGreeting = () => {\n  const generalMessage = \"Hello! Welcome to Terrace Inn & Suites!\";\n  const seasonalMessage =\n    \"Need to cool off? Visit one of our three resort pools!\";\n  return generalMessage + \" \" + seasonalMessage;\n};\nconsole.log(challengeGreeting());"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 14544,
        "title": "Mensaje de bienvenida personalizado",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "Personalized Welcome Message",
            "id": 129204,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "El gerente general tiene una mejora más. Le gustaría personalizar el mensaje para los huéspedes. Modifica la función flecha y el cuerpo de la función flecha para incorporar un parámetro `name`.\n\nEjemplo de salida\n```javascript\nHello, Sarah! Welcome to Terrace Inn & Suites! Need to cool off? Visit one of our three resort pools!\n```\n\n1. Primero, modifica la función flecha para que tome un parámetro `name`.\n2. Luego, modifica la variable `generalMessage` para incorporar el parámetro `name` según el ejemplo anterior.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "index.js",
                  "codeLanguage": "javascript",
                  "content": "const challengeGreeting = () => {\r\n  const generalMessage = \"Welcome to Terrace Inn & Suites!\";\r\n  const seasonalMessage =\r\n    \"Need to cool off? Visit one of our three resort pools!\";\r\n  return generalMessage + \" \" + seasonalMessage;\r\n};\r\nconsole.log(challengeGreeting(\"Sarah\"));",
                  "solvedContent": "const challengeGreeting = (name) => {\n  const generalMessage = \"Hello, \" + name +\n    \"! Welcome to Terrace Inn & Suites!\";\n  const seasonalMessage =\n    \"Need to cool off? Visit one of our three resort pools!\";\n  return generalMessage + \" \" + seasonalMessage;\n};\nconsole.log(challengeGreeting(\"Sarah\"));"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 11641,
        "title": "Métodos con parámetros",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "Methods with parameters",
            "id": 107101,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Echa un vistazo a la función `eligible()`. Su propósito es devolver `true` si `volume` es menor o igual a un `maxVolume`. Vamos a transformar esa función en un método de objeto.\n\n1. Añade un método a `parcel` llamado `volume`, que devuelva el valor de `length * width * depth` para el objeto.\n\n2. Transforma la función `eligible` en un método con el mismo nombre dentro del objeto `parcel`. El método solo debe tener un parámetro `maxVolume` y debe llamar a `this.volume()` para obtener el volumen.\n\n3. `console.log()` el resultado de una llamada al método `eligible` de `parcel`, usando un valor de `100` para `maxVolume`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const parcel = {\n  length: 100,\n  width: 80,\n  depth: 30,\n};\n\nfunction eligible(length, width, depth, maxVolume) {\n  volume = length * width * depth;\n  if (this.volume() <= maxVolume) {\n    return true;\n  } else {\n    return false;\n  }\n}\nconsole.log(eligible(parcel.length, parcel.width, parcel.depth, 100));",
                  "solvedContent": "const parcel = {\n  length: 100,\n  width: 80,\n  depth: 30,\n  volume: function() {\n    return this.length * this.width * this.depth;\n  },\n  eligible: function(maxVolume) {\n    if (this.volume() <= maxVolume) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n};\nconsole.log(parcel.eligible(100));"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 11639,
        "title": "Agregando métodos",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "Add a method and use",
            "id": 107001,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Añadamos un método a nuestro objeto, que realizará un cálculo usando el valor de otra propiedad del objeto. Recuerda que podemos referirnos al objeto mismo usando `this.`.\n\n1. Añade un método dentro del objeto `tajMahal` (dentro de las llaves `{ }`) llamado `tenRating`, que devuelva el valor de `starRating * 2` para el objeto dado.\n\n2. Luego, debajo del objeto `tajMahal` (fuera de las llaves `{ }`), actualiza el `starRating` de `tajMahal` a `4.1`.\n\n3. Finalmente, `console.log()` el *resultado* de llamar al método `tenRating` para verificar que el resultado sea el esperado.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const tajMahal = {\r\n  cuisine: \"Indian\",\r\n  takeout: false,\r\n  starRating: 4.5,\r\n};",
                  "solvedContent": "const tajMahal = {\r\n  cuisine: \"Indian\",\r\n  takeout: false,\r\n  starRating: 4.5,\r\n  tenRating: function() {\r\n    return this.starRating * 2;\r\n  }\r\n};\r\ntajMahal.starRating = 4.1;\r\nconsole.log(tajMahal.tenRating());"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 11640,
        "title": "Más métodos",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "Adding more complex methods",
            "id": 107002,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Echa un vistazo al objeto `employee`. Vamos a añadir un método a este objeto.\n\n1. Añade un método llamado `fullName`. El método debe devolver una cadena compuesta por el primer nombre, seguido de un espacio (`\" \"`) y el segundo nombre (`Amanda Jimenez` en nuestro ejemplo).\n\n2. Muestra el resultado de llamar al método `fullName()` en `employee`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const employee = {\r\n  firstName: \"Amanda\",\r\n  secondName: \"Jimenez\"\r\n};",
                  "solvedContent": "const employee = {\n  firstName: \"Amanda\",\n  secondName: \"Jimenez\",\n  fullName: function() {\n    return this.firstName + \" \" + this.secondName;\n  }\n};\nconsole.log(employee.fullName());"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 11638,
        "title": "Acceder y usar una propiedad",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "Access and compare property",
            "id": 107000,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Queremos ver si la `cuisine` de `tajMahal` está en `preferredCuisines`.\n\n1. Usando `const`, crea una variable llamada `inPreferred`, que verifique si `preferredCuisines` incluye el valor de `cuisine` para `tajMahal`.\n\n   Pista: usa el método de array `.includes()` en `preferredCuisines`, que devolverá `true` si el valor especificado está en él.\n\n2. Muestra `inPreferred` para verificar el resultado.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const tajMahal = {\r\n  cuisine: \"Indian\",\r\n  takeout: false,\r\n  starRating: 4.5\r\n};\r\nconst preferredCuisines = [\"Chinese\", \"Italian\", \"Turkish\"];",
                  "solvedContent": "const tajMahal = {\r\n  cuisine: \"Indian\",\r\n  takeout: false,\r\n  starRating: 4.5\r\n};\r\nconst preferredCuisines = [\"Chinese\", \"Italian\", \"Turkish\"];\r\nconst inPreferred = preferredCuisines.includes(tajMahal.cuisine);\r\nconsole.log(inPreferred);"
                }
              ],
              "hints": []
            }
          }
        ]
      }
    ]
  }
}