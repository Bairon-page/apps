{
  "tutorial": {
    "id": 2654,
    "version": 5,
    "type": "challenges",
    "isNew": false,
    "codeLanguage": "python",
    "title": "Operaciones con Strings y Listas",
    "descriptionContent": "Desafíos basados en operaciones con Strings y Listas",
    "shortDescriptionContent": "",
    "showInTrack": true,
    "iconBanner": null,
    "chapters": [
      {
        "id": 14682,
        "title": "Listas de estudiantes",
        "type": "challengeLevel0",
        "lessons": [
          {
            "title": "Students Lists",
            "id": 129710,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Un maestro de escuela quiere crear una lista con los nombres de todos los estudiantes de su clase. Recibió una cadena larga que contiene todos los nombres, cada nombre separado por una coma `,`.\n\nAyúdalo a crear una lista `names_list` que almacene los nombres individuales separados por una coma. Luego imprime la lista.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "student_names = \"Samantha,Mcgrath,Peyton,Kerim,Nadia,Sandra,Sarah,Alex\"",
                  "solvedContent": "student_names = \"Samantha,Mcgrath,Peyton,Kerim,Nadia,Sandra,Sarah,Alex\"\nnames_list = student_names.split(\",\");\nprint(names_list)"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 14683,
        "title": "Cambio de Tech Stack",
        "type": "challengeLevel0",
        "lessons": [
          {
            "title": "Tech Stack Change",
            "id": 129711,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Trabajas como desarrollador de software y decidiste usar un conjunto específico de tecnologías de programación para tu próxima aplicación. En una solicitud de último minuto del cliente, acordaste usar React en lugar de Angular.\n\n1. Reasigna `tech_stack` y usa una operación de cadena para reemplazar \"Angular\" con \"React\".\n2. Crea una variable `tech_stack_list` que almacene los nombres de `tech_stack` como una lista.\n3. Imprime `tech_stack_list`",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "tech_stack = \"Angular Node Mongo Express\"",
                  "solvedContent": "tech_stack = \"Angular Node Mongo Express\"\ntech_stack = tech_stack.replace(\"Angular\", \"React\")\ntech_stack_list = tech_stack.split()\nprint(tech_stack_list)"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 14684,
        "title": "DVDs más vendidos",
        "type": "challengeLevel0",
        "lessons": [
          {
            "title": "Top Selling DVDs",
            "id": 129712,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Una tienda de alquiler de DVDs quiere actualizar su sitio web con un encabezado que enumere sus películas más vendidas.\n\n1. Crea una nueva variable `new_top_movies` que reemplace el valor `\"Trapped\"` de `old_top_movies` con `\"Moonfall\"`. Ten en cuenta que estos títulos distinguen entre mayúsculas y minúsculas.\n2. Imprime la nueva lista.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "old_top_movies = \"The Power of the Dog - Trapped - Tenet\"\n",
                  "solvedContent": "old_top_movies = \"The Power of the Dog - Trapped - Tenet\"\nnew_top_movies = old_top_movies.replace(\"Trapped\", \"Moonfall\")\nprint(new_top_movies)\n"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 14685,
        "title": "Lista recomendada de películas",
        "type": "challengeLevel0",
        "lessons": [
          {
            "title": "Recommended List of Movies",
            "id": 129713,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Los sitios de películas recomiendan filmes basados en calificaciones, popularidad, opciones personalizadas, etc. Usemos comprensiones de listas para recomendar películas con una calificación mayor a 4.\n\n1. Codifica una comprensión de lista y asígnala a la variable `recommended`.\n2. La comprensión de lista debe iterar a través de cada elemento en la lista `ratings`.\n3. Codifica la expresión dentro de la comprensión de lista para verificar si la calificación es mayor a 4. El resultado debe ser una lista de valores booleanos.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "ratings = [4.3, 3.1, 5, 1.1]\r\n\r\nrecommended =\r\n\r\nprint(recommended)",
                  "solvedContent": "ratings = [4.3, 3.1, 5, 1.1]\r\n\r\nrecommended = [rating > 4 for rating in ratings]\r\nprint(recommended)"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 14686,
        "title": "Agregar Https:// antes de los sitios",
        "type": "challengeLevel0",
        "lessons": [
          {
            "title": "Adding https:// Before Sites",
            "id": 129714,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "¿Alguna vez has notado cómo los navegadores agregan automáticamente `\"https://\"` a la URL de un sitio? Usemos comprensión de listas para agregar `\"https://\"` a la lista de sitios en `websites`.\n\n1. Crea una función `add_https` que tome `site` como parámetro. La función debe devolver `\"https://\"` agregado al parámetro `site`.\n2. Después de la función, crea una variable `auto_add` que almacenará una comprensión de lista.\n3. La comprensión de lista debe iterar a través de cada elemento en la lista `websites`.\n3. Codifica la expresión dentro de la comprensión de lista que llama a la función `add_https` en los elementos de la lista.\n4. Imprime `auto_add`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "websites = [\"mimo.com\", \"coding.com\", \"food.org\"]",
                  "solvedContent": "websites = [\"mimo.com\", \"coding.com\", \"food.org\"]\r\n\r\ndef add_https(site):\r\n    return \"https://\" + site\r\n\r\nauto_add = [add_https(site) for site in websites]\r\n    \r\nprint(auto_add)"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 14687,
        "title": "Eliminando información innecesaria",
        "type": "challengeLevel0",
        "lessons": [
          {
            "title": "Deleting Unnecessary Information",
            "id": 129715,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "A veces, almacenamos información en bases de datos que no necesitamos. Por ejemplo, en el diccionario `product` dado, no necesitamos la clave y el valor `color`.\n\n1. Elimina la clave `color` con su valor del diccionario `product` usando la palabra clave correcta.\n2. Imprime `product`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "product = {\r\n 'name': 'pencil',\r\n 'type': 'stationery',\r\n 'price': 1.99,\r\n 'color': 'blue',\r\n 'availability': False\r\n}",
                  "solvedContent": "product = {\r\n 'name': 'pencil',\r\n 'type': 'stationery',\r\n 'price': 1.99,\r\n 'color': 'blue',\r\n 'availability': False\r\n}\r\n\r\ndel product['color']\r\n\r\nprint(product)"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 13973,
        "title": "La Floristería de Juliette",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "Juliette's Flower Shop",
            "id": 124075,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Juliette tiene una tienda de flores. La tienda ya ofrece un descuento del 5% para todos los clientes para celebrar el tercer aniversario de la tienda.\n\nRecientemente, Juliette tuvo un nuevo bebé nacido el 15 de julio. En esa ocasión, decide dar un descuento aún mayor del 10% para todos los clientes nacidos en la misma fecha. Ella tiene una cadena que contiene estos cumpleaños en formato DD-MM que están separados por `|`.\n\n1. Crea una variable `birthdays_list` y almacena en ella las fechas de nacimiento como elementos de una lista a partir de `birthdays_string`.\n2. Recorre `birthdays_list` y verifica si la fecha es `\"15-07\"`. Si lo es, reasigna el `special_discount` para **reemplazar** `5%` con `10%`.\n3. Imprime `special_discount` fuera del bucle al final.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "birthdays_string = \"23-09|25-04|05-09|15-07|01-06\"\nspecial_discount = \"You are eligible for a 5% discount\"\n",
                  "solvedContent": "birthdays_string = \"23-09|25-04|05-09|15-07|01-06\"\nspecial_discount = \"You are eligible for a 5% discount\"\nbirthdays_list = birthdays_string.split(\"|\")\n\nfor birthday in birthdays_list:\n if (birthday == \"15-07\"):\n  special_discount = special_discount.replace(\"5%\", \"10%\")\n\nprint(special_discount)"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 13976,
        "title": "Verificación de calificaciones",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "Grade Check",
            "id": 124079,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Un instructor del curso ha recibido las calificaciones de un estudiante en formato de cadena. Las calificaciones están separadas por un `-`. Ella quiere calcular la suma de todas estas calificaciones y verificar si el estudiante aprobó.\n\n1. Crea una variable `grades_list` y almacena en ella las calificaciones que extraes de `grades_string` como una lista de elementos.\n2. Recorre `grades_list`, convierte cada elemento a un entero y luego súmalo a `total_grade`.\n\nAsegúrate de realizar estas operaciones **antes** de la declaración print.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "grades_string = \"88-77-59-63\"\ntotal_grade = 0\n\nprint(total_grade)",
                  "solvedContent": "grades_string = \"88-77-59-63\"\ntotal_grade = 0\ngrades_list = grades_string.split(\"-\")\n\nfor grade in grades_list:\n grade = int(grade)\n total_grade += grade\n\nprint(total_grade)"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 13837,
        "title": "Filtrando resultados de búsqueda",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "Filtering search results",
            "id": 123319,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Los motores de búsqueda, sitios de streaming, etc. filtran los resultados de búsqueda por palabras clave. Usemos la comprensión de listas para filtrar una lista de manera que el resultado solo muestre los elementos de la lista con la palabra clave.\n\n1. Almacena una comprensión de lista en la variable `results`.\n2. Itera a través de cada elemento de la lista en la comprensión de lista. La expresión no tendrá ninguna operación.\n3. Agrega una declaración `if` a la comprensión de lista que verifique si un elemento de la lista tiene `\"cats\"`.\n4. Imprime `results`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "archive = [\"Amazing cats\", \"Top 10 Dances\", \"Breaking news\", \"How to: Tips\", \"cats dance\"]\r\n\r\nresults =",
                  "solvedContent": "archive = [\"Amazing cats\", \"Top 10 Dances\", \"Breaking news\", \"How to: Tips\", \"cats dance\"]\r\n\r\nresults = [result for result in archive if result.count(\"cats\") > 0]\r\n\r\nprint(results)"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 13839,
        "title": "Limpieza de la lista de tareas",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "Clear a task list",
            "id": 123321,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Vamos a usar la notación de corte para limpiar una lista de tareas simples.\n\n1. Elimina `grocery` y `laundry` de la lista `daily_tasks` usando la palabra clave `del` y la notación de corte.\n2. Imprime `daily_tasks`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "daily_tasks = ['grocery', 'laundry', 'dusting']",
                  "solvedContent": "daily_tasks = ['grocery', 'laundry', 'dusting']\r\ndel daily_tasks[1::-1]\r\nprint(daily_tasks)"
                }
              ],
              "hints": []
            }
          }
        ]
      }
    ]
  }
}