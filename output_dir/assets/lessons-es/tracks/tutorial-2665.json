{
  "tutorial": {
    "id": 2665,
    "version": 6,
    "type": "guidedProject",
    "isNew": false,
    "codeLanguage": "python",
    "title": "Sacar una carta - Parte 1",
    "descriptionContent": "En el proyecto Dibujar una Carta, crearás un mazo de cartas virtual. Barájalas y luego muéstralas una por una usando arte ASCII.",
    "shortDescriptionContent": "",
    "showInTrack": true,
    "iconBanner": "tutorial-2665-icon-banner.svg",
    "chapters": [
      {
        "id": 14640,
        "title": "Capítulo #1",
        "type": "practiceLevel3",
        "lessons": [
          {
            "title": "Lesson #1",
            "id": 129484,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Bienvenido al proyecto **Draw a Card**, donde trabajaremos con cartas digitales.\n\nComencemos con el primer paso, creando un mazo de cartas. En un mazo estándar, hay 4 palos y 13 rangos. Vamos a crear estas listas.\n\n1. Crea una lista `suits` y añade los 4 diferentes palos como cadenas: `[\"♥\", \"♦\", \"♣\", \"♠\"]`.\n2. Crea una lista `ranks` y añade los 13 diferentes rangos como cadenas: `[\"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"J\", \"Q\", \"K\", \"A\"]`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "",
                  "solvedContent": "suits = [\"♥\", \"♦\", \"♣\", \"♠\"]\nranks = [\"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"J\", \"Q\", \"K\", \"A\"]"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Lesson #2",
            "id": 129485,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "A continuación, combinamos los palos y los rangos para crear un mazo de 52 cartas únicas. Usaremos tuplas para representar cada carta.\n\n1. Crea una lista vacía llamada `deck` que contendrá todas las cartas.\n2. Usa un bucle for para iterar sobre cada palo y dentro de él, otro bucle for para iterar sobre cada rango.\n3. Añade cada combinación de palo y rango como una tupla a la lista deck.\n4. Imprime el deck para mostrar todas las combinaciones de cartas.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "suits = [\"♥\", \"♦\", \"♣\", \"♠\"]\nranks = [\"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"J\", \"Q\", \"K\", \"A\"]",
                  "solvedContent": "suits = [\"♥\", \"♦\", \"♣\", \"♠\"]\nranks = [\"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"J\", \"Q\", \"K\", \"A\"]\ndeck = []\n\nfor suit in suits:\n  for rank in ranks:\n    deck.append((suit, rank))\n\nprint(deck)"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Lesson #3",
            "id": 129486,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Las cartas deben ser sacadas al azar. Para esto, necesitamos barajar el mazo.\n\n1. Importa el módulo `random` al principio de tu script de Python.\n2. Usa `random.shuffle(deck)` para barajar el mazo.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "suits = [\"♥\", \"♦\", \"♣\", \"♠\"]\nranks = [\"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"J\", \"Q\", \"K\", \"A\"]\ndeck = []\n\nfor suit in suits:\n  for rank in ranks:\n    deck.append((suit, rank))\n\nprint(deck)",
                  "solvedContent": "import random\n\nsuits = [\"♥\", \"♦\", \"♣\", \"♠\"]\nranks = [\"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"J\", \"Q\", \"K\", \"A\"]\ndeck = []\n\nfor suit in suits:\n  for rank in ranks:\n    deck.append((suit, rank))\n\nprint(deck)\nrandom.shuffle(deck)"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Lesson #4",
            "id": 129487,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Ahora tenemos un código que genera un mazo y lo baraja. Vamos a poner el código de creación del mazo en una función para hacerlo reutilizable.\n\n1. Crea una función llamada `create_deck` que no tome parámetros.\n   - Mueve todo tu código, excepto la declaración de importación, dentro de la nueva función creada.\n   - Haz que la función devuelva el `deck`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "import random\n\nsuits = [\"♥\", \"♦\", \"♣\", \"♠\"]\nranks = [\"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"J\", \"Q\", \"K\", \"A\"]\ndeck = []\n\nfor suit in suits:\n  for rank in ranks:\n    deck.append((suit, rank))\n\nprint(deck)\nrandom.shuffle(deck)",
                  "solvedContent": "import random\n\ndef create_deck():\n  suits = [\"♥\", \"♦\", \"♣\", \"♠\"]\n  ranks = [\"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"J\", \"Q\", \"K\", \"A\"]\n  deck = []\n\n  for suit in suits:\n    for rank in ranks:\n      deck.append((suit, rank))\n\n  return deck"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Lesson #5",
            "id": 129488,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Vamos a crear una función para sacar una carta del mazo.\n\n1. Define una nueva función llamada `draw_card` que tome `deck` como parámetro.\n2. Dentro de `draw_card`, crea una variable `hand` y asígnale el último elemento de la lista `deck`.\n3. Luego, elimina el último elemento de `deck`. Como acabamos de sacarlo, deberíamos eliminarlo del mazo.\n4. Devuelve una tupla donde el primer valor debe ser `hand` y el segundo el `deck` actualizado.\n5. Ambas variables que devuelves como parte de la tupla deben ser listas. Una debe contener un elemento, la otra 51.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "import random\n\ndef create_deck():\n  suits = [\"♥\", \"♦\", \"♣\", \"♠\"]\n  ranks = [\"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"J\", \"Q\", \"K\", \"A\"]\n  deck = []\n\n  for suit in suits:\n    for rank in ranks:\n      deck.append((suit, rank))\n\n  return deck",
                  "solvedContent": "import random\n\ndef draw_card(deck):\n  hand = deck.pop()\n  return [hand], deck\n\ndef create_deck():\n  suits = [\"♥\", \"♦\", \"♣\", \"♠\"]\n  ranks = [\"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"J\", \"Q\", \"K\", \"A\"]\n  deck = []\n\n  for suit in suits:\n    for rank in ranks:\n      deck.append((suit, rank))\n\n  return deck"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Lesson #6",
            "id": 129489,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Es hora de poner estas funciones en uso.\n\n1. Fuera de tus definiciones de funciones, crea una variable `deck` y asígnale el valor de retorno de la función `create_deck`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "import random\n\ndef draw_card(deck):\n  hand = deck.pop()\n  return [hand], deck\n\ndef create_deck():\n  suits = [\"♥\", \"♦\", \"♣\", \"♠\"]\n  ranks = [\"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"J\", \"Q\", \"K\", \"A\"]\n  deck = []\n\n  for suit in suits:\n    for rank in ranks:\n      deck.append((suit, rank))\n\n  return deck",
                  "solvedContent": "import random\n\ndef draw_card(deck):\n  hand = deck.pop()\n  return [hand], deck\n\ndef create_deck():\n  suits = [\"♥\", \"♦\", \"♣\", \"♠\"]\n  ranks = [\"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"J\", \"Q\", \"K\", \"A\"]\n  deck = []\n\n  for suit in suits:\n    for rank in ranks:\n      deck.append((suit, rank))\n\n  return deck\n\ndeck = create_deck()"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Lesson #6 - Copy",
            "id": 129491,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Sacar cartas hasta que el mazo esté vacío.\n\n1. Crea un bucle `while` que continúe mientras queden cartas en el mazo.\n2. Dentro del bucle, llama a `draw_card(deck)` para sacar una carta y actualizar el mazo.\n3. Crea dos variables, `hand` y `deck`, a las que asignas el valor de retorno de `draw_card`.\n4. En cada iteración del bucle, imprime la carta sacada.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "import random\n\ndef draw_card(deck):\n  hand = deck.pop()\n  return [hand], deck\n\ndef create_deck():\n  suits = [\"♥\", \"♦\", \"♣\", \"♠\"]\n  ranks = [\"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"J\", \"Q\", \"K\", \"A\"]\n  deck = []\n\n  for suit in suits:\n    for rank in ranks:\n      deck.append((suit, rank))\n\n  return deck\n\ndeck = create_deck()",
                  "solvedContent": "import random\n\ndef draw_card(deck):\n  hand = deck.pop()\n  return [hand], deck\n\ndef create_deck():\n  suits = [\"♥\", \"♦\", \"♣\", \"♠\"]\n  ranks = [\"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"J\", \"Q\", \"K\", \"A\"]\n  deck = []\n\n  for suit in suits:\n    for rank in ranks:\n      deck.append((suit, rank))\n\n  return deck\n\ndeck = create_deck()\nwhile len(deck) > 0:\n  hand, deck = draw_card(deck)\n  print(hand[0])"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Lesson #6 - Copy - Copy",
            "id": 129493,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Hagamos que nuestro script sea más interactivo y permitamos que el usuario decida cuándo sacar la siguiente carta.\n\n1. En la parte superior del bloque de tu bucle `while`, añade una función `input` para esperar a que el usuario presione Enter antes de sacar una carta.\n   - Añade algo como `\"Presiona Enter para sacar la siguiente carta\"` como el mensaje de entrada.\n   - No necesitas guardar la entrada en algún lugar, ya que no la necesitamos. La función `input` esperará hasta que se presione enter, y luego el bucle `while` continuará ejecutándose y sacando la siguiente carta.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "import random\n\ndef draw_card(deck):\n  hand = deck.pop()\n  return [hand], deck\n\ndef create_deck():\n  suits = [\"♥\", \"♦\", \"♣\", \"♠\"]\n  ranks = [\"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"J\", \"Q\", \"K\", \"A\"]\n  deck = []\n\n  for suit in suits:\n    for rank in ranks:\n      deck.append((suit, rank))\n\n  return deck\n\ndeck = create_deck()\nwhile len(deck) > 0:\n  hand, deck = draw_card(deck)\n  print(hand[0])",
                  "solvedContent": "import random\n\ndef draw_card(deck):\n  hand = deck.pop()\n  return [hand], deck\n\ndef create_deck():\n  suits = [\"♥\", \"♦\", \"♣\", \"♠\"]\n  ranks = [\"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"J\", \"Q\", \"K\", \"A\"]\n  deck = []\n\n  for suit in suits:\n    for rank in ranks:\n      deck.append((suit, rank))\n\n  return deck\n\ndeck = create_deck()\nwhile len(deck) > 0:\n  input(\"Press Enter to draw the next card\")\n  hand, deck = draw_card(deck)\n  print(hand[0])"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Lesson #6 - Copy - Copy",
            "id": 129492,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Después de que nos quedemos sin cartas, queremos comunicar que no hay más cartas.\n\n1. Imprime un mensaje después de que el bucle haya terminado diciendo, 'Nos hemos quedado sin cartas'.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "import random\n\ndef draw_card(deck):\n  hand = deck.pop()\n  return [hand], deck\n\ndef create_deck():\n  suits = [\"♥\", \"♦\", \"♣\", \"♠\"]\n  ranks = [\"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"J\", \"Q\", \"K\", \"A\"]\n  deck = []\n\n  for suit in suits:\n    for rank in ranks:\n      deck.append((suit, rank))\n\n  return deck\n\ndeck = create_deck()\nwhile len(deck) > 0:\n  input(\"Press Enter to draw the next card\")\n  hand, deck = draw_card(deck)\n  print(hand[0])",
                  "solvedContent": "import random\n\ndef draw_card(deck):\n  hand = deck.pop()\n  return [hand], deck\n\ndef create_deck():\n  suits = [\"♥\", \"♦\", \"♣\", \"♠\"]\n  ranks = [\"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"J\", \"Q\", \"K\", \"A\"]\n  deck = []\n\n  for suit in suits:\n    for rank in ranks:\n      deck.append((suit, rank))\n\n  return deck\n\ndeck = create_deck()\nwhile len(deck) > 0:\n  input(\"Press Enter to draw the next card\")\n  hand, deck = draw_card(deck)\n  print(hand[0])\n\nprint(\"We are out of cards\")"
                }
              ],
              "hints": []
            }
          }
        ]
      }
    ]
  }
}