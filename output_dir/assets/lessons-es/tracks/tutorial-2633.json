{
  "tutorial": {
    "id": 2633,
    "version": 5,
    "type": "challenges",
    "isNew": false,
    "codeLanguage": "javascript",
    "title": "Arrays y funciones",
    "descriptionContent": "Los desafíos son ejercicios más difíciles que pondrán a prueba tus habilidades.",
    "shortDescriptionContent": "",
    "showInTrack": true,
    "iconBanner": null,
    "chapters": [
      {
        "id": 14525,
        "title": "Lugares para visitar",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "Places To Visit",
            "id": 129185,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Codifica un array que contenga los nombres de lugares para visitar en este orden: `\"New York\"`, `\"Tokyo\"`, `\"Hawaii\"`. Asigna este array a la variable `places`. Luego, **sin causar ningún cambio en el array original**, accede a la última entrada en el array y asigna esta sintaxis a la variable `retirement`.\n\nSalida:\n`You should visit Hawaii.`",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const places;\nconst retirement;\nconsole.log(\"You should visit \" + retirement + \".\");",
                  "solvedContent": "const places = [\"New York\", \"Tokyo\", \"Hawaii\"];\nconst retirement = places[2];\nconsole.log(\"You should visit \" + retirement + \".\");"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 14526,
        "title": "Hermanos",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "Siblings",
            "id": 129186,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Vamos a crear un array que contenga una colección de hermanos.\n\n1. Codifica un array que contenga los nombres de los hermanos en este orden: `\"Jon\",` `\"Jess\"`, `\"Jen\"`, `\"Jarod\"` y asígnalo a la variable `siblings`.\n2. Usa el método `push()` para añadir un nuevo hijo `\"Jacob\"` y asigna esta sintaxis a la variable `add`.\n3. Accede al hijo del medio y guarda esta sintaxis en la variable `middleChild`.\n\nSalida:\n`The middle child is Jen.`",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const siblings;\nconst add;\nconst middleChild;\nconsole.log(`The middle child is ${middleChild}.`);",
                  "solvedContent": "const siblings = [\"Jon\", \"Jess\", \"Jen\", \"Jarod\"];\nconst add = siblings.push(\"Jacob\");\nconst middleChild = siblings[2];\nconsole.log(`The middle child is ${middleChild}.`);"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 14527,
        "title": "Todo",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "Todo",
            "id": 129187,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Vamos a crear un array que contenga una lista de tareas por hacer.\n\n1. Codifica un array que contenga una lista de estas tareas: `\"study\"`, `\"chores\"` y `\"meditate\"`. Almacena el array en la variable `todos`.\n2. Usa `pop` para eliminar la última tarea del array y almacena esto en la variable `remove`.\n3. Crea una variable `const` llamada `leftToDo` que almacene el número de elementos que quedan en el array `todos`. Usa una propiedad del array para codificar este paso.\n\nSalida:\n`You have 2 items left to do.`",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const todos;\nconst remove;\nconst;\nconsole.log(`You have ${leftToDo} items left to do.`);",
                  "solvedContent": "const todos = [\"study\", \"chores\", \"meditate\"];\nremove = todos.pop();\nconst leftToDo = todos.length;\nconsole.log(`You have ${leftToDo} items left to do.`);"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 14528,
        "title": "Primer elemento en un array",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "First Value Element in an Array",
            "id": 129188,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Codifica una función que devuelva el primer valor de su parámetro `array`.\n\nEjemplos:\n\n`firstValue([9, 7, 11])` devuelve `9`.\n\n`firstValue([2, 22, 7])` devuelve `2`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "index.js",
                  "codeLanguage": "javascript",
                  "content": "function firstValue(array) {}",
                  "solvedContent": "function firstValue(array) {\n  return array[0];\n}"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 14529,
        "title": "Horas y minutos a segundos",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "Hours and Minutes to Seconds",
            "id": 129189,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Codifica una función que devuelva el resultado de convertir los parámetros `hours` y `minutes` a segundos.\n\nEjemplos:\n`toSeconds(2, 5)` devuelve `7500`.\n`toSeconds(1, 0)` devuelve `3600`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "index.js",
                  "codeLanguage": "javascript",
                  "content": "function toSeconds(hours, minutes) {}",
                  "solvedContent": "function toSeconds(hours, minutes) {\n  return (hours * 60 + minutes) * 60;\n}"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 14530,
        "title": "Menor o igual a cero",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "Less Than or Equal to Zero",
            "id": 129190,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Codifica una función que devuelva `true` si el parámetro `number` es menor o igual a 0. De lo contrario, devuelve `false`.\n\nEjemplos:\n`lessThanOrEqualToZero(7)` devuelve `false`.\n`lessThanOrEqualToZero(-5)` devuelve `true`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "index.js",
                  "codeLanguage": "javascript",
                  "content": "function lessThanOrEqualToZero(number) {}",
                  "solvedContent": "function lessThanOrEqualToZero(number) {\n  return number <= 0;\n}"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 14531,
        "title": "Función con dos argumentos",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "Function to Calculate and Display Value",
            "id": 129191,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Vamos a crear una función que tome dos argumentos y muestre el resultado de un cálculo.\n\n1. Crea una función `fuelCost`, que tome dos argumentos, `litres` y `costPerLitre`.\n\n2. Dentro de la función, crea una variable `totalCost`, igual a `litres` * `costPerLitre`.\n\n3. Aún dentro de la función, muestra el valor de `totalCost`.\n\n4. Fuera de la función, llama a la función con los valores de `60` y `1.44` para `litres` y `costPerLitre` respectivamente.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "",
                  "solvedContent": "function fuelCost (liters, costPerLiter) {\r\n const totalCost = liters * costPerLiter;\r\n console.log(totalCost);\r\n}\r\n\r\nfuelCost(60, 1.44);"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 14532,
        "title": "Devolver y usar un valor",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "Function to Return a Value",
            "id": 129192,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Vamos a crear una función que devuelva un valor y luego escribir un poco de código para mostrar ese valor.\n\n1. Crea una función `milesToKm()`, que tome un único parámetro `miles`.\n\n2. Dentro de la función, crea una variable `km`, igual a `(miles / 5) * 8`.\n\n3. Escribe una declaración `return` al final de la función para devolver el valor de `km`.\n\n4. Muestra el resultado de llamar a la función con un valor de `70`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "",
                  "solvedContent": "function milesToKm(miles) {\r\n  const km = (miles / 5) * 8;\r\n  return km;\r\n}\r\n\r\nconsole.log(milesToKm(70));"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 14533,
        "title": "Condicional en función",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "If-else If-else in Function",
            "id": 129193,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Vamos a crear una función que devuelva una cadena una vez que se cumpla una condición. Aquí, queremos devolver un mensaje que nos diga, basado en la información proporcionada, si no hay suficiente stock para todos los usuarios, para algunos usuarios, o para ningún usuario.\n\n1. Completa la definición de la función añadiendo código a cada lado de los dos operadores `>` para devolver la declaración correcta.\n  - En la declaración `if`, verifica si `minPerUser` es mayor que `totalAvailable` (no hay suficiente stock ni siquiera para un usuario).\n  - En la declaración `else if`, verifica si `groupSize * minPerUser` es mayor que `totalAvailable` (no hay suficiente stock para todos los usuarios).\n2. Muestra el resultado de llamar a la función usando los parámetros `group`, `total` y `minimum`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const group = 4;\r\nconst total = 500;\r\nconst minimum = 150;\r\n\r\nfunction stockCheck (groupSize, totalAvailable, minPerUser) {\r\n if ( > ) {\r\n  return \"Insufficient for one user\";\r\n } else if ( > ) {\r\n   return \"Insufficient for all users\";\r\n } else {\r\n  return \"Sufficient for all users\";\r\n }\r\n}",
                  "solvedContent": "const group = 4;\r\nconst total = 500;\r\nconst minimum = 150;\r\n\r\nfunction stockCheck (groupSize, totalAvailable, minPerUser) {\r\n if (minPerUser > totalAvailable) {\r\n  return \"Insufficient for one user\";\r\n } else if (groupSize * minPerUser > totalAvailable) {\r\n   return \"Insufficient for all users\";\r\n } else {\r\n  return \"Sufficient for all users\";\r\n }\r\n}\r\n\r\nconsole.log(stockCheck(group, total, minimum));"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 14535,
        "title": "Nombres de visitantes",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "Visitor Names",
            "id": 129195,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Llama a la función incorporada de JavaScript adecuada en el array `visitors` para crear un nuevo array con solo los nombres que comienzan con la letra \"C\". La función inline se proporciona para ti.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "index.js",
                  "codeLanguage": "javascript",
                  "content": "let visitors = [\"Christina\", \"Andrew\", \"Chris\", \"Delia\"];\nlet C = (function(element) {\n return element[0] == \"C\";\n});\nconsole.log(C);",
                  "solvedContent": "let visitors = [\"Christina\", \"Andrew\", \"Chris\", \"Delia\"];\nlet C = visitors.filter(function(element) {\n return element[0] == \"C\";\n});\nconsole.log(C);"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 14536,
        "title": "Calcular el precio total",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "Calculate Total Price",
            "id": 129196,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Llama a la función de JavaScript apropiada en el array `prices` para calcular el total. La función inline se proporciona para ti.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "index.js",
                  "codeLanguage": "javascript",
                  "content": "let prices = [2500.25, 3482.50, 1746.50];\nlet total = (function(prev, curr) {\n return prev + curr;\n});\nconsole.log(total);",
                  "solvedContent": "let prices = [2500.25, 3482.50, 1746.50];\nlet total = prices.reduce(function(prev, curr) {\n return prev + curr;\n});\nconsole.log(total);"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 14537,
        "title": "Kilos a Libras",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "Kilos to Pounds",
            "id": 129197,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Llama a la función de JavaScript apropiada en el array `kilograms` para convertir los valores a libras y almacena el array resultante en una variable llamada `pounds`. La función inline se proporciona para ti.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "index.js",
                  "codeLanguage": "javascript",
                  "content": "let kilograms = [25, 45, 55];\nlet pounds = (function(element) {\n return element * 2.2;\n});\nconsole.log(pounds);",
                  "solvedContent": "let kilograms = [25, 45, 55];\nlet pounds = kilograms.map(function(element) {\n return element * 2.2;\n});\nconsole.log(pounds);"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 11549,
        "title": "Los tres mejores",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "Top Three",
            "id": 106219,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Agrega las primeras tres películas de `topTen` al array `topThree`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const topTen = ['Jack Reacher', 'Beautiful Creatures', 'Safe Haven',\n'Side Effects', 'The Last Stand',\n'Silver Linings Playbook',\n'Broken City', 'Cloud Atlas','Parker', 'Eternals'];\nconst topThree = [];\n\n\n",
                  "solvedContent": "const topTen = ['Jack Reacher', 'Beautiful Creatures', 'Safe Haven',\n'Side Effects', 'The Last Stand',\n'Silver Linings Playbook',\n'Broken City', 'Cloud Atlas','Parker', 'Eternals'];\nconst topThree = [];\ntopThree[0] = topTen[0];\ntopThree[1] = topTen[1];\ntopThree[2] = topTen[2];"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 7851,
        "title": "Invertir un array",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "Reverse an Array",
            "id": 68803,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Codifica una función que invierte el contenido del parámetro `array` y lo devuelve como un nuevo array.\n\nEjemplos:\n`reverse([1,2,5,8])` devuelve `[8,5,2,1]`.\n`reverse([\"Deb\",\"Lee\"])` devuelve `[\"Lee\",\"Deb\"]`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "function reverse(array) {}",
                  "solvedContent": "function reverse(array) {\r\n  const reversed = [];\r\n  for (let i = array.length - 1; i > -1; i--) {\r\n    reversed.push(array[i]);\r\n  }\r\n  return reversed;\r\n}"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 7852,
        "title": "El número más pequeño en un array",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "Smallest Number in an Array",
            "id": 68868,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Codifica una función que devuelva el número más pequeño del parámetro `array` como resultado.\n\nEjemplos:\n`smallest([10,44,2,11])` devuelve `2`.\n`smallest([5,7,8,9])` devuelve `5`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "function smallest(array) {}",
                  "solvedContent": "function smallest(array) {\r\n  let smallest = array[0];\r\n  for (let i = 0; i < array.length; i++) {\r\n    if (array[i] < smallest) {\r\n      smallest = array[i];\r\n    }\r\n  }\r\n  return smallest;\r\n}"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 7809,
        "title": "Diferencia entre números en un array",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "Difference between numbers in Array",
            "id": 68339,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Codifica una función que tome un array de números y devuelva la diferencia entre el número más grande y el más pequeño como resultado.\n\nEjemplos:\n`differenceMinMax([0, 7, 11, 100])` devuelve `100`.\n`differenceMinMax([55, 9, 22, 11])` devuelve `46`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "index.js",
                  "codeLanguage": "javascript",
                  "content": "function differenceMinMax(array) {}",
                  "solvedContent": "function differenceMinMax(array) {\n  let biggest = array[0];\n  let smallest = array[0];\n  for (let i = 0; i < array.length; i++) {\n    if (array[i] > biggest) {\n      biggest = array[i];\n    }\n    if (array[i] < smallest) {\n      smallest = array[i];\n    }\n  }\n  return biggest - smallest;\n}"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 7808,
        "title": "¿Contiene un Array un Número?",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "Does an Array contain a number",
            "id": 68342,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Escribe una función que devuelva `true` si el `number` pasado como segundo parámetro existe en el `array` que se pasa en el primer parámetro. De lo contrario, debería devolver `false`.\n\nEjemplos:\n\n<br>\n\n`contains([1, 2, 3, 4], 3)` devuelve `true` porque el número 3 existe en el array\n\n<br>\n\n`contains([2, 2, 4], 3)` devuelve `false` porque el número 3 no está en el array",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "index.js",
                  "codeLanguage": "javascript",
                  "content": "function contains(array, number) {}",
                  "solvedContent": "function contains(array, number) {\n  for (let i = 0; i < array.length; i++) {\n    if (array[i] === number) {\n      return true;\n    }\n  }\n  return false;\n}"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 7873,
        "title": "Promedio de un Array",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "Average",
            "id": 68928,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Codifica una función que tome un array de números como parámetro y devuelva el promedio de ellos como resultado.\n\nEjemplos:\n`average([2,2,5,8])` devuelve `4.25`.\n`average([59,60,40])` devuelve `53`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "function average(array) {}",
                  "solvedContent": "function average(array) {\n  let total = 0;\n  if (array.length === 0) {\n    return total;\n  }\n  for (let i = 0; i < array.length; i++) {\n    total += array[i];\n  }\n  return total / array.length;\n}"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 11697,
        "title": "Función con iteración",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "iteration with simple logic",
            "id": 107125,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Vamos a poner un bucle `for` dentro de una función. Vamos a crear una cuenta regresiva, de 5 a 1.\n\n1. Crea una función llamada `countdown`, que no tome argumentos.\n\n2. Añade un bucle `for` que itere una variable `i` desde `5` hasta `1`, reduciendo en incrementos de `1`, y cada vez muestre el valor usando `console.log()`\n\n3. Llama a la función `countdown()`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "",
                  "solvedContent": "function countdown() {\r\n  for (let i = 5; i > 0; i--) {\r\n    console.log(i);\r\n  }\r\n}\r\ncountdown();"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 11722,
        "title": "Llamadas condicionales en función",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "Function to make a decision",
            "id": 107407,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Vamos a crear una función que utilice otras dos funciones para calcular y llegar a una decisión. Queremos usar algunas funciones existentes para decidir si es seguro ir a un viaje de ciclismo de montaña.\n\n1. Define una función `isSafe` con dos parámetros: `wind` y `rain`.\n\n2. Dentro de la función, crea una variable `risk`. Llama a `windRisk()` con `wind` y suma el resultado al de llamar a `rainRisk` con `rain`. Guarda la suma en la variable `risk`.\n\n3. Dentro de la función, escribe una declaración `if`, que devuelva `true` si `risk` es menor que `10`, y `false` en caso contrario.\n\n4. Muestra el resultado de llamar a `isSafe` con argumentos de `windSpeed` y `rainFall`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const windSpeed = 20;\r\nconst rainFall = 2;\r\n\r\nfunction windRisk(wind) {\r\n  return wind / 2.5;\r\n}\r\n\r\nfunction rainRisk(rain) {\r\n  return rain / 0.5;\r\n}",
                  "solvedContent": "const windSpeed = 20;\r\nconst rainFall = 2;\r\n\r\nfunction windRisk(wind) {\r\n  return wind / 2.5;\r\n}\r\n\r\nfunction rainRisk(rain) {\r\n  return rain / 0.5;\r\n}\r\n\r\nfunction isSafe(wind, rain) {\r\n  const risk = windRisk(wind) + rainRisk(rain);\r\n  if (risk < 10) {\r\n    return true;\r\n  } else {\r\n    return false;\r\n  }\r\n}\r\nconsole.log(isSafe(windSpeed, rainFall));"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 11686,
        "title": "Función usando argumentos mixtos",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "Use of an array and another argument",
            "id": 107092,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Vamos a programar una función que tome un array como argumento. Nuestra función nos dirá cuántos lugares aún están disponibles dada la lista de asistentes que proporcionamos.\n\n1. Crea una función `sparePlaces`, que tome dos argumentos, `entries` y `capacity`.\n\n2. Crea una variable `taken` dentro de la función y asígnale la longitud de `entries` usando la propiedad `.length`.\n\n3. Haz que la función devuelva el valor de `capacity - taken`.\n\n4. Muestra el resultado de una llamada a `sparePlaces`, usando `attendees` y el número `8` como argumentos.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const attendees = ['John', 'Jane', 'Jemima'];\r\n",
                  "solvedContent": "const attendees = ['John', 'Jane', 'Jemima'];\r\n\r\nfunction sparePlaces(entries, capacity) {\r\n  const taken = entries.length;\r\n  return capacity - taken;\r\n}\r\n\r\nconsole.log(sparePlaces(attendees, 8));\r\n\r\n"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 11703,
        "title": "Función que llama a otra función",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "Call a function within another",
            "id": 107131,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Llamemos a una función existente desde dentro de otra. Vamos a usar una función existente que convierte una moneda a otra, para calcular cuánto obtendremos una vez que incluyamos la comisión.\n\n1. Define una función `convert`, con dos parámetros, `value` y `fee`.\n\n2. Dentro de la función, crea una variable `gbpValue`. Llama a `usdToGbp` con `value` como argumento. Resta `fee` del valor devuelto por `usdToGbp()`. Guarda el resultado en `gbpValue`.\n\n3. Dentro de la función, muestra `gbpValue`.\n\n4. Llama a `convert()` con `100` y `2.5` como argumentos.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const usdGbp = 1.5;\r\n\r\nfunction usdToGbp(dollars) {\r\n  return dollars / usdGbp;\r\n}",
                  "solvedContent": "const usdGbp = 1.5;\r\n\r\nfunction usdToGbp(dollars) {\r\n  return dollars / usdGbp;\r\n}\r\n\r\nfunction convert(value, fee) {\r\n  const gbpValue = usdToGbp(value) - fee;\r\n  console.log(gbpValue);\r\n}\r\nconvert(100, 2.5);"
                }
              ],
              "hints": []
            }
          }
        ]
      }
    ]
  }
}