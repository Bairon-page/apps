{
  "tutorial": {
    "id": 2664,
    "version": 5,
    "type": "guidedProject",
    "isNew": false,
    "codeLanguage": "python",
    "title": "Sistema de Pedido de Comida - Parte 2",
    "descriptionContent": "¡Expande tu sistema de pedidos de comida para incluir un mundo de sabores! En esta parte, añadimos diversas cocinas, convirtiendo tu sistema en un destino gastronómico global.",
    "shortDescriptionContent": "",
    "showInTrack": true,
    "iconBanner": "tutorial-2664-icon-banner.svg",
    "chapters": [
      {
        "id": 14639,
        "title": "Capítulo #1",
        "type": "practiceLevel3",
        "lessons": [
          {
            "title": "Lesson #1",
            "id": 129477,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "¡Bienvenido de nuevo al proyecto del **Sistema de Pedidos de Comida**! Ahora haremos que nuestros usuarios elijan entre diferentes cocinas. Primero, vamos a añadir otro menú de comida. En este ejemplo, añadiremos un menú de comida india.\n\n1. Debajo de `italian_food`, define `indian_food` como una lista y llénala con cadenas que representen platos indios. Añade al menos 4 elementos de cadena a la lista `indian_food` como `\"Curry\"`, `\"Chutney\"`, `\"Samosa\"` y `\"Naan\"`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "italian_food = [\n  \"Pasta Bolognese\",\n  \"Pepperoni pizza\",\n  \"Margherita pizza\",\n  \"Lasagna\"\n]\n\ndef find_meal(name, menu):\n  return name if name in menu else None\n\ndef select_meal(name):\n  return find_meal(name, italian_food)\n\ndef display_available_meals():\n  print(\"Available Italian Meals:\")\n  for meal in italian_food:\n    print(meal)\n\ndef create_summary(name, amount):\n  order = select_meal(name)\n  if order:\n    return f\"You ordered {amount} {name}\"\n  else:\n    return \"Meal not found\"\n\nprint(\"Welcome to the Food Order System!\")\ndisplay_available_meals()\nname_input = input(\"Enter the name of the meal you want to order: \")\namount_input = int(input(\"Enter the quantity you want to order: \"))\n\nresult = create_summary(name_input, amount_input)\nprint(result)",
                  "solvedContent": "italian_food = [\n  \"Pasta Bolognese\",\n  \"Pepperoni pizza\",\n  \"Margherita pizza\",\n  \"Lasagna\"\n]\n\nindian_food = [\n  \"Curry\",\n  \"Chutney\",\n  \"Samosa\",\n  \"Naan\"\n]\n\ndef find_meal(name, menu):\n  return name if name in menu else None\n\ndef select_meal(name):\n  return find_meal(name, italian_food)\n\ndef display_available_meals():\n  print(\"Available Italian Meals:\")\n  for meal in italian_food:\n    print(meal)\n\ndef create_summary(name, amount):\n  order = select_meal(name)\n  if order:\n    return f\"You ordered {amount} {name}\"\n  else:\n    return \"Meal not found\"\n\nprint(\"Welcome to the Food Order System!\")\ndisplay_available_meals()\nname_input = input(\"Enter the name of the meal you want to order: \")\namount_input = int(input(\"Enter the quantity you want to order: \"))\n\nresult = create_summary(name_input, amount_input)\nprint(result)"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Lesson #1 - Copy",
            "id": 129482,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Dejemos que nuestros usuarios primero elijan la cocina de la que quieren seleccionar una comida.\n\n1. Después del mensaje de bienvenida que imprimas, antes de las otras declaraciones de `input`, añade un nuevo `input`.\n   - Pregunta por el tipo de comida del que el usuario quiere elegir.\n   - Guarda la entrada del usuario en una variable llamada `type_input`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "italian_food = [\n  \"Pasta Bolognese\",\n  \"Pepperoni pizza\",\n  \"Margherita pizza\",\n  \"Lasagna\"\n]\n\nindian_food = [\n  \"Curry\",\n  \"Chutney\",\n  \"Samosa\",\n  \"Naan\"\n]\n\ndef find_meal(name, menu):\n  return name if name in menu else None\n\ndef select_meal(name):\n  return find_meal(name, italian_food)\n\ndef display_available_meals():\n  print(\"Available Italian Meals:\")\n  for meal in italian_food:\n    print(meal)\n\ndef create_summary(name, amount):\n  order = select_meal(name)\n  if order:\n    return f\"You ordered {amount} {name}\"\n  else:\n    return \"Meal not found\"\n\nprint(\"Welcome to the Food Order System!\")\ndisplay_available_meals()\nname_input = input(\"Enter the name of the meal you want to order: \")\namount_input = int(input(\"Enter the quantity you want to order: \"))\n\nresult = create_summary(name_input, amount_input)\nprint(result)",
                  "solvedContent": "italian_food = [\n  \"Pasta Bolognese\",\n  \"Pepperoni pizza\",\n  \"Margherita pizza\",\n  \"Lasagna\"\n]\n\nindian_food = [\n  \"Curry\",\n  \"Chutney\",\n  \"Samosa\",\n  \"Naan\"\n]\n\ndef find_meal(name, menu):\n  return name if name in menu else None\n\ndef select_meal(name):\n  return find_meal(name, italian_food)\n\ndef display_available_meals():\n  print(\"Available Italian Meals:\")\n  for meal in italian_food:\n    print(meal)\n\ndef create_summary(name, amount):\n  order = select_meal(name)\n  if order:\n    return f\"You ordered {amount} {name}\"\n  else:\n    return \"Meal not found\"\n\nprint(\"Welcome to the Food Order System!\")\ntype_input = input(\"Enter the type of food you want to order: \") \ndisplay_available_meals()\nname_input = input(\"Enter the name of the meal you want to order: \")\namount_input = int(input(\"Enter the quantity you want to order: \"))\n\nresult = create_summary(name_input, amount_input)\nprint(result)"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Lesson #1 - Copy - Copy",
            "id": 129483,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Ahora tenemos diferentes cocinas, así que solo deberíamos mostrar la seleccionada. Para hacer esto, cambia la función `display_available_meals`.\n\n1. Pasa un parámetro llamado `food_type` a la función.\n2. Usa una declaración `if` para comparar si el argumento pasado es igual a `\"Italian\"`.\n3. Añade una declaración `elif` para verificar si el argumento pasado es igual a `\"Indian\"`.\n4. Añade una declaración `else`.\n5. Mueve el código que tenías antes al bloque `if` para mostrar `\"Available Italian Meals\"` y luego recorre la lista para imprimir todas las comidas individuales.\n6. Haz lo mismo para el bloque elif pero para las comidas indias.\n7. En el bloque `else` imprime `\"Invalid food type\"`.\n8. Finalmente, pasa la entrada del usuario que guardamos en `type_input` cuando llames a la función `display_available_meals`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "italian_food = [\n  \"Pasta Bolognese\",\n  \"Pepperoni pizza\",\n  \"Margherita pizza\",\n  \"Lasagna\"\n]\n\nindian_food = [\n  \"Curry\",\n  \"Chutney\",\n  \"Samosa\",\n  \"Naan\"\n]\n\ndef find_meal(name, menu):\n  return name if name in menu else None\n\ndef select_meal(name):\n  return find_meal(name, italian_food)\n\ndef display_available_meals():\n  print(\"Available Italian Meals:\")\n  for meal in italian_food:\n    print(meal)\n\ndef create_summary(name, amount):\n  order = select_meal(name)\n  if order:\n    return f\"You ordered {amount} {name}\"\n  else:\n    return \"Meal not found\"\n\nprint(\"Welcome to the Food Order System!\")\ntype_input = input(\"Enter the type of food you want to order: \") \ndisplay_available_meals()\nname_input = input(\"Enter the name of the meal you want to order: \")\namount_input = int(input(\"Enter the quantity you want to order: \"))\n\nresult = create_summary(name_input, amount_input)\nprint(result)",
                  "solvedContent": "italian_food = [\n  \"Pasta Bolognese\",\n  \"Pepperoni pizza\",\n  \"Margherita pizza\",\n  \"Lasagna\"\n]\n\nindian_food = [\n  \"Curry\",\n  \"Chutney\",\n  \"Samosa\",\n  \"Naan\"\n]\n\ndef find_meal(name, menu):\n  return name if name in menu else None\n\ndef select_meal(name):\n  return find_meal(name, italian_food)\n\ndef display_available_meals(food_type):\n  if food_type == \"Italian\":\n    print(\"Available Italian Meals:\")\n    for meal in italian_food:\n      print(meal)\n  elif food_type == \"Indian\":\n    print(\"Available Indian Meals:\")\n    for meal in indian_food:\n      print(meal)\n  else:\n    print(\"Invalid food type\")\n\ndef create_summary(name, amount):\n  order = select_meal(name)\n  if order:\n    return f\"You ordered {amount} {name}\"\n  else:\n    return \"Meal not found\"\n\nprint(\"Welcome to the Food Order System!\")\ntype_input = input(\"Enter the type of food you want to order: \") \ndisplay_available_meals(type_input)\nname_input = input(\"Enter the name of the meal you want to order: \")\namount_input = int(input(\"Enter the quantity you want to order: \"))\n\nresult = create_summary(name_input, amount_input)\nprint(result)"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Lesson #2",
            "id": 129478,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Finalmente, necesitamos actualizar nuestra función `select_meal` para permitir a los usuarios seleccionar un plato que les guste.\n\n1. Añade un segundo parámetro llamado `food_type` a la función.\n2. Similar a lo que hemos hecho antes, añade un bloque `if`, un `elif` y un bloque `else`.\n3. La condición del bloque `if` debe verificar si la variable pasada `food_type` es igual a `\"Italian\"`.\n4. La condición del bloque `elif` debe verificar si la variable pasada `food_type` es igual a `\"Indian\"`.\n5. Mueve el código ya existente en el bloque `if` para obtener y devolver la comida italiana a través de `return find_meal(name, italian_food)`.\n6. Haz lo mismo para el bloque `elif` pero para la comida india.\n7. Devuelve `None` en el bloque `else`.\n8. Necesitamos añadir otro parámetro a `create_summary` que podemos llamar `food_type`.\n9. Al llamar a `create_summary` pasa la variable `type_input` como `food_type`.\n10. Al llamar a `select_meal` dentro de `create_summary`, pasa el parámetro recibido.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "italian_food = [\n  \"Pasta Bolognese\",\n  \"Pepperoni pizza\",\n  \"Margherita pizza\",\n  \"Lasagna\"\n]\n\nindian_food = [\n  \"Curry\",\n  \"Chutney\",\n  \"Samosa\",\n  \"Naan\"\n]\n\ndef find_meal(name, menu):\n  return name if name in menu else None\n\ndef select_meal(name):\n  return find_meal(name, italian_food)\n\ndef display_available_meals(food_type):\n  if food_type == \"Italian\":\n    print(\"Available Italian Meals:\")\n    for meal in italian_food:\n      print(meal)\n  elif food_type == \"Indian\":\n    print(\"Available Indian Meals:\")\n    for meal in indian_food:\n      print(meal)\n  else:\n    print(\"Invalid food type\")\n\ndef create_summary(name, amount):\n  order = select_meal(name)\n  if order:\n    return f\"You ordered {amount} {name}\"\n  else:\n    return \"Meal not found\"\n\nprint(\"Welcome to the Food Order System!\")\ntype_input = input(\"Enter the type of food you want to order: \") \ndisplay_available_meals(type_input)\nname_input = input(\"Enter the name of the meal you want to order: \")\namount_input = int(input(\"Enter the quantity you want to order: \"))\n\nresult = create_summary(name_input, amount_input)\nprint(result)",
                  "solvedContent": "italian_food = [\n  \"Pasta Bolognese\",\n  \"Pepperoni pizza\",\n  \"Margherita pizza\",\n  \"Lasagna\"\n]\n\nindian_food = [\n  \"Curry\",\n  \"Chutney\",\n  \"Samosa\",\n  \"Naan\"\n]\n\ndef find_meal(name, menu):\n  return name if name in menu else None\n\ndef select_meal(name, food_type):\n  if food_type == \"Italian\":\n    return find_meal(name, italian_food)\n  elif food_type == \"Indian\":\n    return find_meal(name, indian_food)\n  else:\n    return None \n\n\ndef display_available_meals(food_type):\n  if food_type == \"Italian\":\n    print(\"Available Italian Meals:\")\n    for meal in italian_food:\n      print(meal)\n  elif food_type == \"Indian\":\n    print(\"Available Indian Meals:\")\n    for meal in indian_food:\n      print(meal)\n  else:\n    print(\"Invalid food type\")\n\ndef create_summary(name, amount, food_type):\n  order = select_meal(name, food_type)\n  if order:\n    return f\"You ordered {amount} {name}\"\n  else:\n    return \"Meal not found\"\n\nprint(\"Welcome to the Food Order System!\")\ntype_input = input(\"Enter the type of food you want to order: \") \ndisplay_available_meals(type_input)\nname_input = input(\"Enter the name of the meal you want to order: \")\namount_input = int(input(\"Enter the quantity you want to order: \"))\n\nresult = create_summary(name_input, amount_input, type_input)\nprint(result)"
                }
              ],
              "hints": []
            }
          }
        ]
      }
    ]
  }
}