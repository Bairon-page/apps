{
  "tutorial": {
    "id": 1977,
    "version": 10,
    "type": "guidedProjectOptional",
    "isNew": false,
    "codeLanguage": "javascript",
    "title": "Programador de Entregas",
    "descriptionContent": "Construye un programa de programación de entregas",
    "shortDescriptionContent": "",
    "showInTrack": true,
    "iconBanner": "tutorial-1977-icon-banner.svg",
    "chapters": [
      {
        "id": 12678,
        "title": "Programador de Entregas",
        "type": "practiceLevel3",
        "lessons": [
          {
            "title": "Store day preferences",
            "id": 114891,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Sheila necesita recibir un paquete, y quiere asegurarse de que llegue cuando ella esté en casa. Vamos a programar un sistema de programación de entregas para adaptarse a sus preferencias y asegurarnos de que esté allí cuando llegue el paquete.\n\nEl programa de entrega tomará en cuenta las preferencias de día y hora de Sheila antes de programar una entrega. Comencemos con sus preferencias de día y permitamos dos días preferidos.\n\n1. Crea una `const` llamada `firstDay` para almacenar el primer día preferido de Sheila, `\"Monday\"`.\n2. Crea una `const` llamada `secondDay` para almacenar el segundo día preferido de Sheila, `\"Friday\"`.\n3. Imprime en la consola un mensaje en este estilo: `\"Available days: Monday and Friday\"`. Usa una concatenación de cadenas con las constantes `firstDay` y `secondDay`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "",
                  "solvedContent": "const firstDay = \"Monday\";\r\nconst secondDay = \"Friday\";\r\nconsole.log(\"Available days: \" + firstDay + \" and \" + secondDay);"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Declare program's day selection",
            "id": 114999,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "La empresa de entregas solo trabaja un día a la semana. El día de entrega de esta semana es el viernes. Vamos a almacenar este valor.\n1. Crea una `const` llamada `deliveryDay` y establece su valor en `\"Friday\"`.\n2. Imprime `\"Delivery Day: Friday\"` en la consola, usando la constante `deliveryDay` y concatenación de cadenas.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const firstDay = \"Monday\";\r\nconst secondDay = \"Friday\";\r\nconsole.log(\"Available days: \" + firstDay + \" and \" + secondDay);",
                  "solvedContent": "const firstDay = \"Monday\";\r\nconst secondDay = \"Friday\";\r\nconsole.log(\"Available days: \" + firstDay + \" and \" + secondDay);\r\nconst deliveryDay = \"Friday\";\r\nconsole.log(\"Delivery Day: \" + deliveryDay);"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Check Day I",
            "id": 114895,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "¡Es hora de verificar si el día de entrega se ajusta a la preferencia de día de entrega de Sheila! Sheila tiene 2 días preferidos, pero comencemos verificando si el día de entrega coincide con el primer día.\n\n1. Verifica si `deliveryDay` es igual a `firstDay`, y establece esta comparación como el valor de una nueva variable `const` llamada `firstDayCheck`.\n2. Imprime `\"¿Entrega exitosa en el primer día? \" + firstDayCheck` en la consola.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const firstDay = \"Monday\";\r\nconst secondDay = \"Friday\";\r\nconsole.log(\"Available days: \" + firstDay + \" and \" + secondDay);\r\nconst deliveryDay = \"Friday\";\r\nconsole.log(\"Delivery Day: \" + deliveryDay);",
                  "solvedContent": "const firstDay = \"Monday\";\r\nconst secondDay = \"Friday\";\r\nconsole.log(\"Available days: \" + firstDay + \" and \" + secondDay);\r\nconst deliveryDay = \"Friday\";\r\nconsole.log(\"Delivery Day: \" + deliveryDay);\r\nconst firstDayCheck = deliveryDay === firstDay;\r\nconsole.log(\"Successful delivery on the first day? \" + firstDayCheck);"
                }
              ],
              "hints": [
                {
                  "title": "Hint",
                  "content": "You can check if strings are equal using `===`."
                }
              ]
            }
          },
          {
            "title": "Check Day II",
            "id": 114903,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "¡La entrega no está disponible el primer día! Vamos a comprobar si el día de entrega coincide con el segundo día.\n\n1. Comprueba si `deliveryDay` es igual a `secondDay` y establece esta comparación como el valor de una nueva variable `const` llamada `secondDayCheck`.\n2. Imprime `\"¿Entrega exitosa en el segundo día? \" + secondDayCheck` en la consola.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const firstDay = \"Monday\";\r\nconst secondDay = \"Friday\";\r\nconsole.log(\"Available days: \" + firstDay + \" and \" + secondDay);\r\nconst deliveryDay = \"Friday\";\r\nconsole.log(\"Delivery Day: \" + deliveryDay);\r\nconst firstDayCheck = deliveryDay === firstDay;\r\nconsole.log(\"Successful delivery on the first day? \" + firstDayCheck);",
                  "solvedContent": "const firstDay = \"Monday\";\r\nconst secondDay = \"Friday\";\r\nconsole.log(\"Available days: \" + firstDay + \" and \" + secondDay);\r\nconst deliveryDay = \"Friday\";\r\nconsole.log(\"Delivery Day: \" + deliveryDay);\r\nconst firstDayCheck = deliveryDay === firstDay;\r\nconsole.log(\"Successful delivery on the first day? \" + firstDayCheck);\r\nconst secondDayCheck = deliveryDay === secondDay;\r\nconsole.log(\"Successful delivery on the second day? \" + secondDayCheck);"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Check Day III",
            "id": 114904,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Simplifiquemos la comprobación de si las preferencias de día de Sheila se cumplieron en un solo paso, usando el operador lógico *OR*.\n\n1. Crea una variable `const` llamada `dayResult`.\n2. Comprueba si `firstDayCheck` o `secondDayCheck` son `true`, y almacena esta expresión lógica en la variable `dayResult`.\n3. Imprime `\"¿Se cumplió la preferencia de día de Sheila? \" + dayResult` en la consola.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const firstDay = \"Monday\";\r\nconst secondDay = \"Friday\";\r\nconsole.log(\"Available days: \" + firstDay + \" and \" + secondDay);\r\nconst deliveryDay = \"Friday\";\r\nconsole.log(\"Delivery Day: \" + deliveryDay);\r\nconst firstDayCheck = deliveryDay === firstDay;\r\nconsole.log(\"Successful delivery on the first day? \" + firstDayCheck);\r\nconst secondDayCheck = deliveryDay === secondDay;\r\nconsole.log(\"Successful delivery on the second day? \" + secondDayCheck);",
                  "solvedContent": "const firstDay = \"Monday\";\r\nconst secondDay = \"Friday\";\r\nconsole.log(\"Available days: \" + firstDay + \" and \" + secondDay);\r\nconst deliveryDay = \"Friday\";\r\nconsole.log(\"Delivery Day: \" + deliveryDay);\r\nconst firstDayCheck = deliveryDay === firstDay;\r\nconsole.log(\"Successful delivery on the first day? \" + firstDayCheck);\r\nconst secondDayCheck = deliveryDay === secondDay;\r\nconsole.log(\"Successful delivery on the second day? \" + secondDayCheck);\r\nconst dayResult = firstDayCheck || secondDayCheck;\r\nconsole.log(\"Fulfilled Sheila's day preference? \" + dayResult);"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Declare Sheila's preferred time",
            "id": 114892,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "¡El día de entrega coincide! Ahora exploremos la hora de la entrega. Sheila solo está en casa entre las 8 AM y las 10 AM. Crea variables para declarar la hora preferida de Sheila.\n\n1. La entrega tiene que ser después de las 8 AM, así que establece `8` como el valor de una nueva variable `const` llamada `requestAfterTime`.\n2. La entrega tiene que ser antes de las 10 AM, así que establece `10` como el valor de una nueva variable `const` llamada `requestBeforeTime`.\n3. Imprime `\"Request delivery after \" + requestAfterTime + \" but before \" + requestBeforeTime` en la consola.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const firstDay = \"Monday\";\r\nconst secondDay = \"Friday\";\r\nconsole.log(\"Available days: \" + firstDay + \" and \" + secondDay);\r\nconst deliveryDay = \"Friday\";\r\nconsole.log(\"Delivery Day: \" + deliveryDay);\r\nconst firstDayCheck = deliveryDay === firstDay;\r\nconsole.log(\"Successful delivery on the first day? \" + firstDayCheck);\r\nconst secondDayCheck = deliveryDay === secondDay;\r\nconsole.log(\"Successful delivery on the second day? \" + secondDayCheck);\r\nconst dayResult = firstDayCheck || secondDayCheck;\r\nconsole.log(\"Fulfilled Sheila's day preference? \" + dayResult);",
                  "solvedContent": "const firstDay = \"Monday\";\r\nconst secondDay = \"Friday\";\r\nconsole.log(\"Available days: \" + firstDay + \" and \" + secondDay);\r\nconst deliveryDay = \"Friday\";\r\nconsole.log(\"Delivery Day: \" + deliveryDay);\r\nconst firstDayCheck = deliveryDay === firstDay;\r\nconsole.log(\"Successful delivery on the first day? \" + firstDayCheck);\r\nconst secondDayCheck = deliveryDay === secondDay;\r\nconsole.log(\"Successful delivery on the second day? \" + secondDayCheck);\r\nconst dayResult = firstDayCheck || secondDayCheck;\r\nconsole.log(\"Fulfilled Sheila's day preference? \" + dayResult);\r\nconst requestBeforeTime = 10;\r\nconst requestAfterTime = 8;\r\nconsole.log(\"Request delivery after \" + requestAfterTime + \" but before \" +\r\n  requestBeforeTime);"
                }
              ],
              "hints": [
                {
                  "title": "Hint",
                  "content": "Note that the variables should be numbers and not strings. Eg. `const <variableName> = <number>;`"
                }
              ]
            }
          },
          {
            "title": "Declare program's selection",
            "id": 114893,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "La empresa de entregas tiene un horario de entrega a las 9 AM el próximo viernes. Vamos a añadir esa información a nuestra app.\n\n1. Crea una variable `const` llamada `deliveryTime` y almacena el número `9` como su valor.\n2. Imprime `\"Delivery Time: \" + deliveryTime` en la consola.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const firstDay = \"Monday\";\r\nconst secondDay = \"Friday\";\r\nconsole.log(\"Available days: \" + firstDay + \" \" + secondDay);\r\nconst deliveryDay = \"Friday\";\r\nconsole.log(\"Delivery Day: \" + deliveryDay);\r\nconst firstDayCheck = deliveryDay === firstDay;\r\nconsole.log(\"Successful delivery on the first day? \" + firstDayCheck);\r\nconst secondDayCheck = deliveryDay === secondDay;\r\nconsole.log(\"Successful delivery on the second day? \" + secondDayCheck);\r\nconst dayResult = firstDayCheck || secondDayCheck;\r\nconsole.log(\"Fulfilled Sheila's day preference? \" + dayResult);\r\nconst requestBeforeTime = 10;\r\nconst requestAfterTime = 8;\r\nconsole.log(\"Request delivery after \" + requestAfterTime + \" but before \" +\r\n  requestBeforeTime);",
                  "solvedContent": "const firstDay = \"Monday\";\r\nconst secondDay = \"Friday\";\r\nconsole.log(\"Available days: \" + firstDay + \" \" + secondDay);\r\nconst deliveryDay = \"Friday\";\r\nconsole.log(\"Delivery Day: \" + deliveryDay);\r\nconst firstDayCheck = deliveryDay === firstDay;\r\nconsole.log(\"Successful delivery on the first day? \" + firstDayCheck);\r\nconst secondDayCheck = deliveryDay === secondDay;\r\nconsole.log(\"Successful delivery on the second day? \" + secondDayCheck);\r\nconst dayResult = firstDayCheck || secondDayCheck;\r\nconsole.log(\"Fulfilled Sheila's day preference? \" + dayResult);\r\nconst requestBeforeTime = 10;\r\nconst requestAfterTime = 8;\r\nconsole.log(\"Request delivery after \" + requestAfterTime + \" but before \" +\r\n  requestBeforeTime);\r\nconst deliveryTime = 9;\r\nconsole.log(\"Delivery Time: \" + deliveryTime);"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Check Time I",
            "id": 114897,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Verifiquemos si las preferencias de Sheila se ajustan al tiempo disponible. Comprueba si la entrega es después de las 8 AM.\n\n1. Verifica que `deliveryTime` sea igual o posterior a `requestAfterTime` y establece la comparación como el valor de una nueva variable `const` llamada `afterTimeCheck`.\n2. Imprime `\"Delivery is after \" + requestAfterTime + \"? \" + afterTimeCheck` en la consola.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const firstDay = \"Monday\";\r\nconst secondDay = \"Friday\";\r\nconsole.log(\"Available days: \" + firstDay + \" and \" + secondDay);\r\nconst deliveryDay = \"Friday\";\r\nconsole.log(\"Delivery Day: \" + deliveryDay);\r\nconst firstDayCheck = deliveryDay === firstDay;\r\nconsole.log(\"Successful delivery on the first day? \" + firstDayCheck);\r\nconst secondDayCheck = deliveryDay === secondDay;\r\nconsole.log(\"Successful delivery on the second day? \" + secondDayCheck);\r\nconst dayResult = firstDayCheck || secondDayCheck;\r\nconsole.log(\"Fulfilled Sheila's day preference? \" + dayResult);\r\nconst requestBeforeTime = 10;\r\nconst requestAfterTime = 8;\r\nconsole.log(\"Request delivery after \" + requestAfterTime + \" but before \" +\r\n  requestBeforeTime);\r\nconst deliveryTime = 9;\r\nconsole.log(\"Delivery Time: \" + deliveryTime);",
                  "solvedContent": "const firstDay = \"Monday\";\r\nconst secondDay = \"Friday\";\r\nconsole.log(\"Available days: \" + firstDay + \" and \" + secondDay);\r\nconst deliveryDay = \"Friday\";\r\nconsole.log(\"Delivery Day: \" + deliveryDay);\r\nconst firstDayCheck = deliveryDay === firstDay;\r\nconsole.log(\"Successful delivery on the first day? \" + firstDayCheck);\r\nconst secondDayCheck = deliveryDay === secondDay;\r\nconsole.log(\"Successful delivery on the second day? \" + secondDayCheck);\r\nconst dayResult = firstDayCheck || secondDayCheck;\r\nconsole.log(\"Fulfilled Sheila's day preference? \" + dayResult);\r\nconst requestBeforeTime = 10;\r\nconst requestAfterTime = 8;\r\nconsole.log(\"Request delivery after \" + requestAfterTime + \" but before \" +\r\n  requestBeforeTime);\r\nconst deliveryTime = 9;\r\nconsole.log(\"Delivery Time: \" + deliveryTime);\r\nconst afterTimeCheck = deliveryTime >= requestAfterTime;\r\nconsole.log(\"Delivery is after \" + requestAfterTime + \"? \" + afterTimeCheck);"
                }
              ],
              "hints": [
                {
                  "title": "Hint",
                  "content": "You can use >= to see if the `deliveryTime` is after or equal to the `requestAfterTime`."
                }
              ]
            }
          },
          {
            "title": "Check Time II",
            "id": 114894,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "¡Ahora vamos a verificar si la entrega es antes de las 10 AM!\n\n1. Verifica que `deliveryTime` sea antes de `requestBeforeTime`, y establece la comparación como el valor de una nueva variable `const` llamada `beforeTimeCheck`.\n2. Imprime `\"Delivery is before \" + requestBeforeTime + \"? \" + beforeTimeCheck` en la consola.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const firstDay = \"Monday\";\r\nconst secondDay = \"Friday\";\r\nconsole.log(\"Available days: \" + firstDay + \" and \" + secondDay);\r\nconst deliveryDay = \"Friday\";\r\nconsole.log(\"Delivery Day: \" + deliveryDay);\r\nconst firstDayCheck = deliveryDay === firstDay;\r\nconsole.log(\"Successful delivery on the first day? \" + firstDayCheck);\r\nconst secondDayCheck = deliveryDay === secondDay;\r\nconsole.log(\"Successful delivery on the second day? \" + secondDayCheck);\r\nconst dayResult = firstDayCheck || secondDayCheck;\r\nconsole.log(\"Fulfilled Sheila's day preference? \" + dayResult);\r\nconst requestBeforeTime = 10;\r\nconst requestAfterTime = 8;\r\nconsole.log(\"Request delivery after \" + requestAfterTime + \" but before \" +\r\n  requestBeforeTime);\r\nconst deliveryTime = 9;\r\nconsole.log(\"Delivery Time: \" + deliveryTime);\r\nconst afterTimeCheck = deliveryTime >= requestAfterTime;\r\nconsole.log(\"Delivery is after \" + requestAfterTime + \"? \" + afterTimeCheck);",
                  "solvedContent": "const firstDay = \"Monday\";\r\nconst secondDay = \"Friday\";\r\nconsole.log(\"Available days: \" + firstDay + \" and \" + secondDay);\r\nconst deliveryDay = \"Friday\";\r\nconsole.log(\"Delivery Day: \" + deliveryDay);\r\nconst firstDayCheck = deliveryDay === firstDay;\r\nconsole.log(\"Successful delivery on the first day? \" + firstDayCheck);\r\nconst secondDayCheck = deliveryDay === secondDay;\r\nconsole.log(\"Successful delivery on the second day? \" + secondDayCheck);\r\nconst dayResult = firstDayCheck || secondDayCheck;\r\nconsole.log(\"Fulfilled Sheila's day preference? \" + dayResult);\r\nconst requestBeforeTime = 10;\r\nconst requestAfterTime = 8;\r\nconsole.log(\"Request delivery after \" + requestAfterTime + \" but before \" +\r\n  requestBeforeTime);\r\nconst deliveryTime = 9;\r\nconsole.log(\"Delivery Time: \" + deliveryTime);\r\nconst afterTimeCheck = deliveryTime >= requestAfterTime;\r\nconsole.log(\"Delivery is after \" + requestAfterTime + \"? \" + afterTimeCheck);\r\nconst beforeTimeCheck = deliveryTime <= requestBeforeTime;\r\nconsole.log(\"Delivery is before \" + requestBeforeTime + \"? \" + beforeTimeCheck);"
                }
              ],
              "hints": [
                {
                  "title": "Hint",
                  "content": "You can use <= to see if the `deliveryTime` is before or equal to the `requestBeforeTime`."
                }
              ]
            }
          },
          {
            "title": "Check Time III",
            "id": 114898,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "¡Genial! ¡Sheila estará en casa a esa hora! Pero ahora simplifiquemos la verificación de tiempo con el operador lógico AND.\n\n1. Verifica que `beforeTimeCheck` y `afterTimeCheck` sean `true`, y establece esta expresión lógica como el valor de una nueva variable `const` llamada `timeResult`.\n2. Imprime `\"¿Cumplió con la preferencia de tiempo de Sheila? \" + timeResult` en la consola.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const firstDay = \"Monday\";\r\nconst secondDay = \"Friday\";\r\nconsole.log(\"Available days: \" + firstDay + \" and \" + secondDay);\r\nconst deliveryDay = \"Friday\";\r\nconsole.log(\"Delivery Day: \" + deliveryDay);\r\nconst firstDayCheck = deliveryDay === firstDay;\r\nconsole.log(\"Successful delivery on the first day? \" + firstDayCheck);\r\nconst secondDayCheck = deliveryDay === secondDay;\r\nconsole.log(\"Successful delivery on the second day? \" + secondDayCheck);\r\nconst dayResult = firstDayCheck || secondDayCheck;\r\nconsole.log(\"Fulfilled Sheila's day preference? \" + dayResult);\r\nconst requestBeforeTime = 10;\r\nconst requestAfterTime = 8;\r\nconsole.log(\"Request delivery after \" + requestAfterTime + \" but before \" +\r\n  requestBeforeTime);\r\nconst deliveryTime = 9;\r\nconsole.log(\"Delivery Time: \" + deliveryTime);\r\nconst afterTimeCheck = deliveryTime >= requestAfterTime;\r\nconsole.log(\"Delivery is after \" + requestAfterTime + \"? \" + afterTimeCheck);\r\nconst beforeTimeCheck = deliveryTime <= requestBeforeTime;\r\nconsole.log(\"Delivery is before \" + requestBeforeTime + \"? \" + beforeTimeCheck);",
                  "solvedContent": "const firstDay = \"Monday\";\r\nconst secondDay = \"Friday\";\r\nconsole.log(\"Available days: \" + firstDay + \" and \" + secondDay);\r\nconst deliveryDay = \"Friday\";\r\nconsole.log(\"Delivery Day: \" + deliveryDay);\r\nconst firstDayCheck = deliveryDay === firstDay;\r\nconsole.log(\"Successful delivery on the first day? \" + firstDayCheck);\r\nconst secondDayCheck = deliveryDay === secondDay;\r\nconsole.log(\"Successful delivery on the second day? \" + secondDayCheck);\r\nconst dayResult = firstDayCheck || secondDayCheck;\r\nconsole.log(\"Fulfilled Sheila's day preference? \" + dayResult);\r\nconst requestBeforeTime = 10;\r\nconst requestAfterTime = 8;\r\nconsole.log(\"Request delivery after \" + requestAfterTime + \" but before \" +\r\n  requestBeforeTime);\r\nconst deliveryTime = 9;\r\nconsole.log(\"Delivery Time: \" + deliveryTime);\r\nconst afterTimeCheck = deliveryTime >= requestAfterTime;\r\nconsole.log(\"Delivery is after \" + requestAfterTime + \"? \" + afterTimeCheck);\r\nconst beforeTimeCheck = deliveryTime <= requestBeforeTime;\r\nconsole.log(\"Delivery is before \" + requestBeforeTime + \"? \" + beforeTimeCheck);\r\nconst timeResult = beforeTimeCheck && afterTimeCheck;\r\nconsole.log(\"Fulfilled Sheila's time preference? \" + timeResult);"
                }
              ],
              "hints": [
                {
                  "title": "Hint",
                  "content": "You can use the AND operator  `&&`  for the check. It returns `false` if *any* of the conditions are `false`. It returns `true` if *both* of the conditions are `true`."
                }
              ]
            }
          },
          {
            "title": "Check day and time",
            "id": 114896,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Finalmente, necesitamos verificar si la entrega cumplió con las preferencias de día y hora de Sheila y mostrar el resultado de la verificación.\n\n1. Verifica si tanto `timeResult` como `dayResult` son `true`, y establece esta expresión lógica como el valor de la nueva variable `const` `overallCheck`.\n2. Imprime `\"¿Programa bien programado? \" + overallCheck` en la consola.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const firstDay = \"Monday\";\r\nconst secondDay = \"Friday\";\r\nconsole.log(\"Available days: \" + firstDay + \" and \" + secondDay);\r\nconst deliveryDay = \"Friday\";\r\nconsole.log(\"Delivery Day: \" + deliveryDay);\r\nconst firstDayCheck = deliveryDay === firstDay;\r\nconsole.log(\"Successful delivery on the first day? \" + firstDayCheck);\r\nconst secondDayCheck = deliveryDay === secondDay;\r\nconsole.log(\"Successful delivery on the second day? \" + secondDayCheck);\r\nconst dayResult = firstDayCheck || secondDayCheck;\r\nconsole.log(\"Fulfilled Sheila's day preference? \" + dayResult);\r\nconst requestBeforeTime = 10;\r\nconst requestAfterTime = 8;\r\nconsole.log(\"Request delivery after \" + requestAfterTime + \" but before \" +\r\n  requestBeforeTime);\r\nconst deliveryTime = 9;\r\nconsole.log(\"Delivery Time: \" + deliveryTime);\r\nconst afterTimeCheck = deliveryTime >= requestAfterTime;\r\nconsole.log(\"Delivery is after \" + requestAfterTime + \"? \" + afterTimeCheck);\r\nconst beforeTimeCheck = deliveryTime <= requestBeforeTime;\r\nconsole.log(\"Delivery is before \" + requestBeforeTime + \"? \" + beforeTimeCheck);\r\nconst timeResult = beforeTimeCheck && afterTimeCheck;\r\nconsole.log(\"Fulfilled Sheila's time preference? \" + timeResult);",
                  "solvedContent": "const firstDay = \"Monday\";\r\nconst secondDay = \"Friday\";\r\nconsole.log(\"Available days: \" + firstDay + \" and \" + secondDay);\r\nconst deliveryDay = \"Friday\";\r\nconsole.log(\"Delivery Day: \" + deliveryDay);\r\nconst firstDayCheck = deliveryDay === firstDay;\r\nconsole.log(\"Successful delivery on the first day? \" + firstDayCheck);\r\nconst secondDayCheck = deliveryDay === secondDay;\r\nconsole.log(\"Successful delivery on the second day? \" + secondDayCheck);\r\nconst dayResult = firstDayCheck || secondDayCheck;\r\nconsole.log(\"Fulfilled Sheila's day preference? \" + dayResult);\r\nconst requestBeforeTime = 10;\r\nconst requestAfterTime = 8;\r\nconsole.log(\"Request delivery after \" + requestAfterTime + \" but before \" +\r\n  requestBeforeTime);\r\nconst deliveryTime = 9;\r\nconsole.log(\"Delivery Time: \" + deliveryTime);\r\nconst afterTimeCheck = deliveryTime >= requestAfterTime;\r\nconsole.log(\"Delivery is after \" + requestAfterTime + \"? \" + afterTimeCheck);\r\nconst beforeTimeCheck = deliveryTime <= requestBeforeTime;\r\nconsole.log(\"Delivery is before \" + requestBeforeTime + \"? \" + beforeTimeCheck);\r\nconst timeResult = beforeTimeCheck && afterTimeCheck;\r\nconsole.log(\"Fulfilled Sheila's time preference? \" + timeResult);\r\nconst overallCheck = timeResult && dayResult;\r\nconsole.log(\"Program scheduled well? \" + (overallCheck));"
                }
              ],
              "hints": []
            }
          }
        ]
      }
    ]
  }
}