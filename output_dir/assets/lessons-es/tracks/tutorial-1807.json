{
  "tutorial": {
    "id": 1807,
    "version": 7,
    "type": "guidedProjectOptional",
    "isNew": false,
    "codeLanguage": "javascript",
    "title": "Calculadora de Inversiones",
    "descriptionContent": "Usa funciones flecha para crear una calculadora de inversiones",
    "shortDescriptionContent": "",
    "showInTrack": true,
    "iconBanner": "tutorial-1807-icon-banner.svg",
    "chapters": [
      {
        "id": 12025,
        "title": "Calculadora de Inversiones",
        "type": "practiceLevel3",
        "lessons": [
          {
            "title": "Initial variable",
            "id": 109613,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Vamos a usar una función flecha para crear un calculador de inversiones, todo en JavaScript.\n\nComenzaremos creando una variable.\n\n1. Empieza inicializando una variable `initial` para almacenar un valor de inversión inicial de `2000`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "",
                  "solvedContent": "const initial = 2000;"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Interest rate variable",
            "id": 109614,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "A continuación, crearemos una variable para almacenar la tasa de interés.\n\n1. Inicializa una variable `rate` y asígnale el valor `10`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "",
                  "solvedContent": "const rate = 10;"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Years variable",
            "id": 109616,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "A continuación, guarda el número de años de inversión en una variable.\n\n1. Inicializa otra variable `years` y asigna el valor `3`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "",
                  "solvedContent": "const years = 3;"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Parameters",
            "id": 109619,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "A continuación, crea una función flecha. La función flecha tomará tres parámetros `init`, `rate` y `time`, que representan la entrada para `initial`, `rate` y `years`.\n\n1. Inicializa una variable `getValue`.\n2. Asigna una función flecha a `getValue`.\n3. La sintaxis de la función flecha debe tener `init`, `rate` y `time` como parámetros.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const initial = 2000;\nconst rate = 10;\nconst years = 3;",
                  "solvedContent": "const initial = 2000;\nconst rate = 10;\nconst years = 3;\nconst getValue = (init, rate, time) => {};"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Parameter default values",
            "id": 109620,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Los parámetros de la función flecha `init`, `rate` y `time` pueden recibir valores iniciales dentro del paréntesis de la función flecha.\n\n1. Asigna a los parámetros `init`, `rate` y `time` los valores de `0`, `5` y `0` dentro del paréntesis.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const initial = 2000;\nconst rate = 10;\nconst years = 3;\nconst getValue = (init, rate, time) => {};",
                  "solvedContent": "const initial = 2000;\nconst rate = 10;\nconst years = 3;\nconst getValue = (init = 0, rate = 5, time = 0) => {};"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Arrow function variable and expression",
            "id": 109621,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "A continuación, necesitaremos una variable para almacenar el resultado del cálculo de la inversión.\n\n1. Dentro de la función flecha, declara una variable de ámbito de bloque `value`.\n2. Asigna la expresión `init + (init * (rate / 100) * time)` a `value`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const initial = 2000;\nconst rate = 10;\nconst years = 3;\nconst getValue = (init = 0, rate = 5, time = 0) => {};",
                  "solvedContent": "const initial = 2000;\nconst rate = 10;\nconst years = 3;\nconst getValue = (init = 0, rate = 5, time = 0) => {\n  const value = init + (init * (rate / 100) * time);\n};"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Return",
            "id": 109622,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Haz que `getValue` devuelva el resultado de la expresión.\n\n1. Dentro de la función flecha, devuelve `value`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const initial = 2000;\nconst rate = 10;\nconst years = 3;\nconst getValue = (init = 0, rate = 5, time = 0) => {\n  const value = init + (init * (rate / 100) * time);\n};",
                  "solvedContent": "const initial = 2000;\nconst rate = 10;\nconst years = 3;\nconst getValue = (init = 0, rate = 5, time = 0) => {\n  const value = init + (init * (rate / 100) * time);\n  return value;\n};"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Calling the function",
            "id": 109624,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Next, usa la función llamándola.\n\n1. Llama a `getValue()`.\n2. Asegúrate de pasar las variables `initial`, `rate` y `years` como argumentos a `getValue()`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const initial = 2000;\nconst rate = 10;\nconst years = 3;\nconst getValue = (init = 0, rate = 5, time = 0) => {\n  const value = init + (init * (rate / 100) * time);\n  return value;\n};",
                  "solvedContent": "const initial = 2000;\nconst rate = 10;\nconst years = 3;\nconst getValue = (init = 0, rate = 5, time = 0) => {\n  const value = init + (init * (rate / 100) * time);\n  return value;\n};\ngetValue(initial, rate, years);"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Console",
            "id": 109625,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Para imprimir el valor de la inversión devuelta, muéstralo en la consola.\n\n1. Envuelve `getValue(initial, rate, years)` con un `console.log()` para mostrar el valor en libras.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const initial = 2000;\nconst rate = 10;\nconst years = 3;\nconst getValue = (init = 0, rate = 5, time = 0) => {\n  const value = init + (init * (rate / 100) * time);\n  return value;\n};\ngetValue(initial, rate, years);",
                  "solvedContent": "const initial = 2000;\nconst rate = 10;\nconst years = 3;\nconst getValue = (init = 0, rate = 5, time = 0) => {\n  const value = init + (init * (rate / 100) * time);\n  return value;\n};\nconsole.log(getValue(initial, rate, years));"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Shortening the code",
            "id": 109623,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "A continuación, acortemos el código refactorizando `getvalue`. Tener la arrow function y la expresión en la misma línea nos permite omitir las llaves, la variable `value` y la palabra clave `return`.\n\n1. Elimina las llaves.\n2. Elimina la variable `value`.\n3. Elimina la palabra clave `return` ya que está implícita en las expresiones de una sola línea.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const initial = 2000;\nconst rate = 10;\nconst years = 3;\nconst getValue = (init = 0, rate = 5, time = 0) => ;\nconsole.log(getValue(initial, rate, years));",
                  "solvedContent": "const initial = 2000;\nconst rate = 10;\nconst years = 3;\nconst getValue = (init = 0, rate = 5, time = 0) => init + (init * (rate / 100) *\n  time);\nconsole.log(getValue(initial, rate, years));"
                }
              ],
              "hints": [
                {
                  "title": "Hint",
                  "content": "After refactoring, `getValue` should only contain the expression `init + (init * (rate / 100) * time)` on the same line."
                }
              ]
            }
          }
        ]
      }
    ]
  }
}