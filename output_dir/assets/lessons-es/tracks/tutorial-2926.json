{
  "tutorial": {
    "id": 2926,
    "version": 1,
    "type": "course",
    "isNew": false,
    "codeLanguage": "node",
    "title": "Estructurando Endpoints",
    "descriptionContent": "Aprende a construir rutas que interactúan con una base de datos",
    "shortDescriptionContent": "",
    "showInTrack": true,
    "iconBanner": null,
    "chapters": [
      {
        "id": 15032,
        "title": "Endpoints GET 1",
        "type": "practiceLevel1",
        "lessons": [
          {
            "title": "Lesson #1",
            "id": 132558,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>  Los endpoints <code>GET</code> en Express nos permiten enviar datos solicitados desde nuestro servidor, haciéndolos disponibles para el front end.</p><p>Vamos a explorar cómo configurar y estructurar los endpoints <code>GET</code> con interacciones de base de datos.</p></body></html>"
          },
          {
            "title": "Lesson #3 - Copy",
            "id": 132579,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Tenemos un archivo <code>databse.js</code> que nos proporciona una base de datos. Lo usaremos para obtener los datos solicitados. Échale un vistazo rápido antes de continuar.</p><p>Comencemos creando un endpoint <code>GET</code> para <code>/fruits</code> para obtener todas las frutas que están en la base de datos.</p><code version=\"2\" codelang=\"javascript\" name=\"app.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" express = \" /><text value=\"require\" class=\"built_in\" /><text value=\"(\" /><text value=\"&quot;express&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" db = \" /><text value=\"require\" class=\"built_in\" /><text value=\"(\" /><text value=\"&quot;./database.js&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" app = express();\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" port = \" /><text value=\"3000\" class=\"number\" /><text value=\";\" /><text type=\"break\" /><text type=\"break\" /><text value=\"app.get(\" /><text value=\"&quot;/fruits&quot;\" class=\"string\" /><text value=\", (req, res) =&gt; {\" /><text type=\"break\" /><text type=\"break\" /><text value=\"});\" /><text type=\"break\" /><text type=\"break\" /><text value=\"app.listen(port, () =&gt; {\" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"`App is running on PORT \" /><text value=\"${port}\" class=\"subst\" /><text value=\"`\" /><text value=\");\" /><text type=\"break\" /><text value=\"});\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"116\" endIndex=\"119\" /><option startIndex=\"119\" endIndex=\"120\" /><option startIndex=\"120\" endIndex=\"123\" /><option startIndex=\"124\" endIndex=\"133\" /></options></interaction></interactions></code><code version=\"2\" codelang=\"javascript\" name=\"database.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" Database = \" /><text value=\"require\" class=\"built_in\" /><text value=\"(\" /><text value=\"&quot;better-sqlite3&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" db = \" /><text value=\"new\" class=\"keyword\" /><text value=\" Database(\" /><text value=\"&quot;database.db&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text type=\"break\" /><text value=\"db.exec(\" /><text value=\"`\" /><text type=\"break\" /><text value=\"    CREATE TABLE IF NOT EXISTS fruits (\" /><text type=\"break\" /><text value=\"      id INTEGER PRIMARY KEY AUTOINCREMENT,\" /><text type=\"break\" /><text value=\"      name TEXT NOT NULL\" /><text type=\"break\" /><text value=\"    )\" /><text type=\"break\" /><text value=\"`\" /><text value=\");\" /><text type=\"break\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" rowCount = db.prepare(\" /><text value=\"&quot;SELECT COUNT(*) AS count FROM fruits&quot;\" class=\"string\" /><text value=\")\" /><text type=\"break\" /><text value=\" .get().count;\" /><text type=\"break\" /><text type=\"break\" /><text value=\"if\" class=\"keyword\" /><text value=\" (rowCount === \" /><text value=\"0\" class=\"number\" /><text value=\") {\" /><text type=\"break\" /><text value=\" \" /><text value=\"const\" class=\"keyword\" /><text value=\" insert = db.prepare(\" /><text value=\"&quot;INSERT INTO fruits (name) VALUES (?)&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\" \" /><text value=\"const\" class=\"keyword\" /><text value=\" fruits = [\" /><text value=\"'Apple'\" class=\"string\" /><text value=\", \" /><text value=\"'Banana'\" class=\"string\" /><text value=\", \" /><text value=\"'Cherry'\" class=\"string\" /><text value=\"];\" /><text type=\"break\" /><text value=\" fruits.forEach(\" /><text value=\"fruit\" class=\"params\" /><text value=\" =&gt;\" /><text value=\" insert.run(fruit));\" /><text type=\"break\" /><text value=\"}\" /><text type=\"break\" /><text type=\"break\" /><text value=\"module\" class=\"built_in\" /><text value=\".exports = db;\" /></content><output><content><text value=\"\" /><text type=\"break\" /><text value=\"/usr/lib/node_modules/better-sqlite3/lib/database.js:69\" /><text type=\"break\" /><text value=\"  [util.cppdb]: { value: new addon.Database(filename, filenameGiven, anonymous, readonly, fileMustExist, timeout, verbose || null, buffer || null) },\" /><text type=\"break\" /><text value=\"                         ^\" /><text type=\"break\" /><text value=\"SqliteError: unable to open database file\" /><text type=\"break\" /><text value=\"    at new Database (/usr/lib/node_modules/better-sqlite3/lib/database.js:69:26)\" /><text type=\"break\" /><text value=\"    at Object.&lt;anonymous&gt; (/home/default/code/file.js:2:12)\" /><text type=\"break\" /><text value=\"    at Module._compile (node:internal/modules/cjs/loader:1469:14)\" /><text type=\"break\" /><text value=\"    at Module._extensions..js (node:internal/modules/cjs/loader:1548:10)\" /><text type=\"break\" /><text value=\"    at Module.load (node:internal/modules/cjs/loader:1288:32)\" /><text type=\"break\" /><text value=\"    at Module._load (node:internal/modules/cjs/loader:1104:12)\" /><text type=\"break\" /><text value=\"    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:174:12)\" /><text type=\"break\" /><text value=\"    at node:internal/main/run_main_module:28:49 {\" /><text type=\"break\" /><text value=\"  code: 'SQLITE_CANTOPEN'\" /><text type=\"break\" /><text value=\"}\" /><text type=\"break\" /><text value=\"\" /><text type=\"break\" /><text value=\"Node.js v20.17.0\" /><text type=\"break\" /><text value=\"\" /></content></output></code><p visible-if=\"wrong\">Asegúrese de elegir <code>app</code> seguido de <code>.</code> y luego <code>get</code>, <code>\"/fruits\"</code>.</p></body></html>"
          },
          {
            "title": "Lesson #3 - Copy",
            "id": 132580,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Para acceder a los datos en la base de datos, necesitamos consultarla.</p><p>Crea una consulta y guárdala en la variable <code>sql</code>.</p><code version=\"2\" codelang=\"javascript\" name=\"app.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" express = \" /><text value=\"require\" class=\"built_in\" /><text value=\"(\" /><text value=\"&quot;express&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" db = \" /><text value=\"require\" class=\"built_in\" /><text value=\"(\" /><text value=\"&quot;./database.js&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" app = express();\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" port = \" /><text value=\"3000\" class=\"number\" /><text value=\";\" /><text type=\"break\" /><text type=\"break\" /><text value=\"app.get(\" /><text value=\"&quot;/fruits&quot;\" class=\"string\" /><text value=\", (req, res) =&gt; {\" /><text type=\"break\" /><text value=\" \" /><text value=\"const\" class=\"keyword\" /><text value=\" sql = \" /><text value=\"&quot;SELECT * FROM fruits&quot;\" class=\"string\" /><text value=\";\" /><text type=\"break\" /><text value=\"});\" /><text type=\"break\" /><text type=\"break\" /><text value=\"app.listen(port, () =&gt; {\" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"`App is running on PORT \" /><text value=\"${port}\" class=\"subst\" /><text value=\"`\" /><text value=\");\" /><text type=\"break\" /><text value=\"});\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"152\" endIndex=\"157\" /><option startIndex=\"158\" endIndex=\"161\" /><option startIndex=\"164\" endIndex=\"165\" /><option startIndex=\"165\" endIndex=\"185\" /><option startIndex=\"185\" endIndex=\"186\" /></options></interaction></interactions></code><code version=\"2\" codelang=\"javascript\" name=\"database.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" Database = \" /><text value=\"require\" class=\"built_in\" /><text value=\"(\" /><text value=\"&quot;better-sqlite3&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" db = \" /><text value=\"new\" class=\"keyword\" /><text value=\" Database(\" /><text value=\"&quot;database.db&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text type=\"break\" /><text value=\"db.exec(\" /><text value=\"`\" /><text type=\"break\" /><text value=\"    CREATE TABLE IF NOT EXISTS fruits (\" /><text type=\"break\" /><text value=\"      id INTEGER PRIMARY KEY AUTOINCREMENT,\" /><text type=\"break\" /><text value=\"      name TEXT NOT NULL\" /><text type=\"break\" /><text value=\"    )\" /><text type=\"break\" /><text value=\"`\" /><text value=\");\" /><text type=\"break\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" rowCount = db.prepare(\" /><text value=\"&quot;SELECT COUNT(*) AS count FROM fruits&quot;\" class=\"string\" /><text value=\")\" /><text type=\"break\" /><text value=\" .get().count;\" /><text type=\"break\" /><text type=\"break\" /><text value=\"if\" class=\"keyword\" /><text value=\" (rowCount === \" /><text value=\"0\" class=\"number\" /><text value=\") {\" /><text type=\"break\" /><text value=\" \" /><text value=\"const\" class=\"keyword\" /><text value=\" insert = db.prepare(\" /><text value=\"&quot;INSERT INTO fruits (name) VALUES (?)&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\" \" /><text value=\"const\" class=\"keyword\" /><text value=\" fruits = [\" /><text value=\"'Apple'\" class=\"string\" /><text value=\", \" /><text value=\"'Banana'\" class=\"string\" /><text value=\", \" /><text value=\"'Cherry'\" class=\"string\" /><text value=\"];\" /><text type=\"break\" /><text value=\" fruits.forEach(\" /><text value=\"fruit\" class=\"params\" /><text value=\" =&gt;\" /><text value=\" insert.run(fruit));\" /><text type=\"break\" /><text value=\"}\" /><text type=\"break\" /><text type=\"break\" /><text value=\"module\" class=\"built_in\" /><text value=\".exports = db;\" /></content><output><content><text value=\"\" /><text type=\"break\" /><text value=\"/usr/lib/node_modules/better-sqlite3/lib/database.js:69\" /><text type=\"break\" /><text value=\"  [util.cppdb]: { value: new addon.Database(filename, filenameGiven, anonymous, readonly, fileMustExist, timeout, verbose || null, buffer || null) },\" /><text type=\"break\" /><text value=\"                         ^\" /><text type=\"break\" /><text value=\"SqliteError: unable to open database file\" /><text type=\"break\" /><text value=\"    at new Database (/usr/lib/node_modules/better-sqlite3/lib/database.js:69:26)\" /><text type=\"break\" /><text value=\"    at Object.&lt;anonymous&gt; (/home/default/code/file.js:2:12)\" /><text type=\"break\" /><text value=\"    at Module._compile (node:internal/modules/cjs/loader:1469:14)\" /><text type=\"break\" /><text value=\"    at Module._extensions..js (node:internal/modules/cjs/loader:1548:10)\" /><text type=\"break\" /><text value=\"    at Module.load (node:internal/modules/cjs/loader:1288:32)\" /><text type=\"break\" /><text value=\"    at Module._load (node:internal/modules/cjs/loader:1104:12)\" /><text type=\"break\" /><text value=\"    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:174:12)\" /><text type=\"break\" /><text value=\"    at node:internal/main/run_main_module:28:49 {\" /><text type=\"break\" /><text value=\"  code: 'SQLITE_CANTOPEN'\" /><text type=\"break\" /><text value=\"}\" /><text type=\"break\" /><text value=\"\" /><text type=\"break\" /><text value=\"Node.js v20.17.0\" /><text type=\"break\" /><text value=\"\" /></content></output></code><p visible-if=\"wrong\">Asegúrese de elegir <code>const</code> seguido de <code>sql</code> y luego <code>\"</code>, <code>SELECT * FROM fruits</code>, <code>\"</code>.</p></body></html>"
          },
          {
            "title": "Lesson #3 - Copy",
            "id": 132581,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Necesitamos permitir que la base de datos prepare la declaración para su uso posterior.</p><code version=\"2\" codelang=\"javascript\" name=\"app.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" express = \" /><text value=\"require\" class=\"built_in\" /><text value=\"(\" /><text value=\"&quot;express&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" db = \" /><text value=\"require\" class=\"built_in\" /><text value=\"(\" /><text value=\"&quot;./database.js&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" app = express();\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" port = \" /><text value=\"3000\" class=\"number\" /><text value=\";\" /><text type=\"break\" /><text type=\"break\" /><text value=\"app.get(\" /><text value=\"&quot;/fruits&quot;\" class=\"string\" /><text value=\", (req, res) =&gt; {\" /><text type=\"break\" /><text value=\" \" /><text value=\"const\" class=\"keyword\" /><text value=\" sql = \" /><text value=\"&quot;SELECT * FROM fruits&quot;\" class=\"string\" /><text value=\";\" /><text type=\"break\" /><text value=\" db.prepare(sql);\" /><text type=\"break\" /><text value=\"});\" /><text type=\"break\" /><text type=\"break\" /><text value=\"app.listen(port, () =&gt; {\" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"`App is running on PORT \" /><text value=\"${port}\" class=\"subst\" /><text value=\"`\" /><text value=\");\" /><text type=\"break\" /><text value=\"});\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"189\" endIndex=\"191\" /><option startIndex=\"191\" endIndex=\"192\" /><option startIndex=\"192\" endIndex=\"199\" /><option startIndex=\"200\" endIndex=\"203\" /></options></interaction></interactions></code><code version=\"2\" codelang=\"javascript\" name=\"database.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" Database = \" /><text value=\"require\" class=\"built_in\" /><text value=\"(\" /><text value=\"&quot;better-sqlite3&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" db = \" /><text value=\"new\" class=\"keyword\" /><text value=\" Database(\" /><text value=\"&quot;database.db&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text type=\"break\" /><text value=\"db.exec(\" /><text value=\"`\" /><text type=\"break\" /><text value=\"    CREATE TABLE IF NOT EXISTS fruits (\" /><text type=\"break\" /><text value=\"      id INTEGER PRIMARY KEY AUTOINCREMENT,\" /><text type=\"break\" /><text value=\"      name TEXT NOT NULL\" /><text type=\"break\" /><text value=\"    )\" /><text type=\"break\" /><text value=\"`\" /><text value=\");\" /><text type=\"break\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" rowCount = db.prepare(\" /><text value=\"&quot;SELECT COUNT(*) AS count FROM fruits&quot;\" class=\"string\" /><text value=\")\" /><text type=\"break\" /><text value=\" .get().count;\" /><text type=\"break\" /><text type=\"break\" /><text value=\"if\" class=\"keyword\" /><text value=\" (rowCount === \" /><text value=\"0\" class=\"number\" /><text value=\") {\" /><text type=\"break\" /><text value=\" \" /><text value=\"const\" class=\"keyword\" /><text value=\" insert = db.prepare(\" /><text value=\"&quot;INSERT INTO fruits (name) VALUES (?)&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\" \" /><text value=\"const\" class=\"keyword\" /><text value=\" fruits = [\" /><text value=\"'Apple'\" class=\"string\" /><text value=\", \" /><text value=\"'Banana'\" class=\"string\" /><text value=\", \" /><text value=\"'Cherry'\" class=\"string\" /><text value=\"];\" /><text type=\"break\" /><text value=\" fruits.forEach(\" /><text value=\"fruit\" class=\"params\" /><text value=\" =&gt;\" /><text value=\" insert.run(fruit));\" /><text type=\"break\" /><text value=\"}\" /><text type=\"break\" /><text type=\"break\" /><text value=\"module\" class=\"built_in\" /><text value=\".exports = db;\" /></content><output><content><text value=\"\" /><text type=\"break\" /><text value=\"/usr/lib/node_modules/better-sqlite3/lib/database.js:69\" /><text type=\"break\" /><text value=\"  [util.cppdb]: { value: new addon.Database(filename, filenameGiven, anonymous, readonly, fileMustExist, timeout, verbose || null, buffer || null) },\" /><text type=\"break\" /><text value=\"                         ^\" /><text type=\"break\" /><text value=\"SqliteError: unable to open database file\" /><text type=\"break\" /><text value=\"    at new Database (/usr/lib/node_modules/better-sqlite3/lib/database.js:69:26)\" /><text type=\"break\" /><text value=\"    at Object.&lt;anonymous&gt; (/home/default/code/file.js:2:12)\" /><text type=\"break\" /><text value=\"    at Module._compile (node:internal/modules/cjs/loader:1469:14)\" /><text type=\"break\" /><text value=\"    at Module._extensions..js (node:internal/modules/cjs/loader:1548:10)\" /><text type=\"break\" /><text value=\"    at Module.load (node:internal/modules/cjs/loader:1288:32)\" /><text type=\"break\" /><text value=\"    at Module._load (node:internal/modules/cjs/loader:1104:12)\" /><text type=\"break\" /><text value=\"    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:174:12)\" /><text type=\"break\" /><text value=\"    at node:internal/main/run_main_module:28:49 {\" /><text type=\"break\" /><text value=\"  code: 'SQLITE_CANTOPEN'\" /><text type=\"break\" /><text value=\"}\" /><text type=\"break\" /><text value=\"\" /><text type=\"break\" /><text value=\"Node.js v20.17.0\" /><text type=\"break\" /><text value=\"\" /></content></output></code><p visible-if=\"wrong\">Asegúrese de elegir <code>db</code> seguido de <code>.</code> y luego <code>prepare</code>, <code>sql</code>.</p></body></html>"
          },
          {
            "title": "Lesson #3 - Copy - Copy",
            "id": 132582,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Luego podemos ejecutar la declaración y recuperar todas las entradas.</p><code version=\"2\" codelang=\"javascript\" name=\"app.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" express = \" /><text value=\"require\" class=\"built_in\" /><text value=\"(\" /><text value=\"&quot;express&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" db = \" /><text value=\"require\" class=\"built_in\" /><text value=\"(\" /><text value=\"&quot;./database.js&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" app = express();\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" port = \" /><text value=\"3000\" class=\"number\" /><text value=\";\" /><text type=\"break\" /><text type=\"break\" /><text value=\"app.get(\" /><text value=\"&quot;/fruits&quot;\" class=\"string\" /><text value=\", (req, res) =&gt; {\" /><text type=\"break\" /><text value=\" \" /><text value=\"const\" class=\"keyword\" /><text value=\" sql = \" /><text value=\"&quot;SELECT * FROM fruits&quot;\" class=\"string\" /><text value=\";\" /><text type=\"break\" /><text value=\" db.prepare(sql).all();\" /><text type=\"break\" /><text value=\"});\" /><text type=\"break\" /><text type=\"break\" /><text value=\"app.listen(port, () =&gt; {\" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"`App is running on PORT \" /><text value=\"${port}\" class=\"subst\" /><text value=\"`\" /><text value=\");\" /><text type=\"break\" /><text value=\"});\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"204\" endIndex=\"205\" /><option startIndex=\"205\" endIndex=\"208\" /><option startIndex=\"208\" endIndex=\"209\" /><option startIndex=\"209\" endIndex=\"210\" /></options></interaction></interactions></code><code version=\"2\" codelang=\"javascript\" name=\"database.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" Database = \" /><text value=\"require\" class=\"built_in\" /><text value=\"(\" /><text value=\"&quot;better-sqlite3&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" db = \" /><text value=\"new\" class=\"keyword\" /><text value=\" Database(\" /><text value=\"&quot;database.db&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text type=\"break\" /><text value=\"db.exec(\" /><text value=\"`\" /><text type=\"break\" /><text value=\"    CREATE TABLE IF NOT EXISTS fruits (\" /><text type=\"break\" /><text value=\"      id INTEGER PRIMARY KEY AUTOINCREMENT,\" /><text type=\"break\" /><text value=\"      name TEXT NOT NULL\" /><text type=\"break\" /><text value=\"    )\" /><text type=\"break\" /><text value=\"`\" /><text value=\");\" /><text type=\"break\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" rowCount = db.prepare(\" /><text value=\"&quot;SELECT COUNT(*) AS count FROM fruits&quot;\" class=\"string\" /><text value=\")\" /><text type=\"break\" /><text value=\" .get().count;\" /><text type=\"break\" /><text type=\"break\" /><text value=\"if\" class=\"keyword\" /><text value=\" (rowCount === \" /><text value=\"0\" class=\"number\" /><text value=\") {\" /><text type=\"break\" /><text value=\" \" /><text value=\"const\" class=\"keyword\" /><text value=\" insert = db.prepare(\" /><text value=\"&quot;INSERT INTO fruits (name) VALUES (?)&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\" \" /><text value=\"const\" class=\"keyword\" /><text value=\" fruits = [\" /><text value=\"'Apple'\" class=\"string\" /><text value=\", \" /><text value=\"'Banana'\" class=\"string\" /><text value=\", \" /><text value=\"'Cherry'\" class=\"string\" /><text value=\"];\" /><text type=\"break\" /><text value=\" fruits.forEach(\" /><text value=\"fruit\" class=\"params\" /><text value=\" =&gt;\" /><text value=\" insert.run(fruit));\" /><text type=\"break\" /><text value=\"}\" /><text type=\"break\" /><text type=\"break\" /><text value=\"module\" class=\"built_in\" /><text value=\".exports = db;\" /></content><output><content><text value=\"\" /><text type=\"break\" /><text value=\"/usr/lib/node_modules/better-sqlite3/lib/database.js:69\" /><text type=\"break\" /><text value=\"  [util.cppdb]: { value: new addon.Database(filename, filenameGiven, anonymous, readonly, fileMustExist, timeout, verbose || null, buffer || null) },\" /><text type=\"break\" /><text value=\"                         ^\" /><text type=\"break\" /><text value=\"SqliteError: unable to open database file\" /><text type=\"break\" /><text value=\"    at new Database (/usr/lib/node_modules/better-sqlite3/lib/database.js:69:26)\" /><text type=\"break\" /><text value=\"    at Object.&lt;anonymous&gt; (/home/default/code/file.js:2:12)\" /><text type=\"break\" /><text value=\"    at Module._compile (node:internal/modules/cjs/loader:1469:14)\" /><text type=\"break\" /><text value=\"    at Module._extensions..js (node:internal/modules/cjs/loader:1548:10)\" /><text type=\"break\" /><text value=\"    at Module.load (node:internal/modules/cjs/loader:1288:32)\" /><text type=\"break\" /><text value=\"    at Module._load (node:internal/modules/cjs/loader:1104:12)\" /><text type=\"break\" /><text value=\"    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:174:12)\" /><text type=\"break\" /><text value=\"    at node:internal/main/run_main_module:28:49 {\" /><text type=\"break\" /><text value=\"  code: 'SQLITE_CANTOPEN'\" /><text type=\"break\" /><text value=\"}\" /><text type=\"break\" /><text value=\"\" /><text type=\"break\" /><text value=\"Node.js v20.17.0\" /><text type=\"break\" /><text value=\"\" /></content></output></code><p visible-if=\"wrong\">Asegúrese de elegir <code>.</code> seguido de <code>all</code> y luego <code>(</code>, <code>)</code>.</p></body></html>"
          },
          {
            "title": "Lesson #3 - Copy - Copy - Copy",
            "id": 132583,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Queremos acceder a los datos que obtenemos de la base de datos. Para hacer eso, guardamos el objeto devuelto en una variable.</p><code version=\"2\" codelang=\"javascript\" name=\"app.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" express = \" /><text value=\"require\" class=\"built_in\" /><text value=\"(\" /><text value=\"&quot;express&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" db = \" /><text value=\"require\" class=\"built_in\" /><text value=\"(\" /><text value=\"&quot;./database.js&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" app = express();\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" port = \" /><text value=\"3000\" class=\"number\" /><text value=\";\" /><text type=\"break\" /><text type=\"break\" /><text value=\"app.get(\" /><text value=\"&quot;/fruits&quot;\" class=\"string\" /><text value=\", (req, res) =&gt; {\" /><text type=\"break\" /><text value=\" \" /><text value=\"const\" class=\"keyword\" /><text value=\" sql = \" /><text value=\"&quot;SELECT * FROM fruits&quot;\" class=\"string\" /><text value=\";\" /><text type=\"break\" /><text value=\" \" /><text value=\"const\" class=\"keyword\" /><text value=\" fruits = db.prepare(sql).all();\" /><text type=\"break\" /><text value=\"});\" /><text type=\"break\" /><text type=\"break\" /><text value=\"app.listen(port, () =&gt; {\" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"`App is running on PORT \" /><text value=\"${port}\" class=\"subst\" /><text value=\"`\" /><text value=\");\" /><text type=\"break\" /><text value=\"});\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"189\" endIndex=\"194\" /><option startIndex=\"195\" endIndex=\"201\" /><option startIndex=\"202\" endIndex=\"203\" /></options></interaction></interactions></code><code version=\"2\" codelang=\"javascript\" name=\"database.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" Database = \" /><text value=\"require\" class=\"built_in\" /><text value=\"(\" /><text value=\"&quot;better-sqlite3&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" db = \" /><text value=\"new\" class=\"keyword\" /><text value=\" Database(\" /><text value=\"&quot;database.db&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text type=\"break\" /><text value=\"db.exec(\" /><text value=\"`\" /><text type=\"break\" /><text value=\"    CREATE TABLE IF NOT EXISTS fruits (\" /><text type=\"break\" /><text value=\"      id INTEGER PRIMARY KEY AUTOINCREMENT,\" /><text type=\"break\" /><text value=\"      name TEXT NOT NULL\" /><text type=\"break\" /><text value=\"    )\" /><text type=\"break\" /><text value=\"`\" /><text value=\");\" /><text type=\"break\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" rowCount = db.prepare(\" /><text value=\"&quot;SELECT COUNT(*) AS count FROM fruits&quot;\" class=\"string\" /><text value=\")\" /><text type=\"break\" /><text value=\" .get().count;\" /><text type=\"break\" /><text type=\"break\" /><text value=\"if\" class=\"keyword\" /><text value=\" (rowCount === \" /><text value=\"0\" class=\"number\" /><text value=\") {\" /><text type=\"break\" /><text value=\" \" /><text value=\"const\" class=\"keyword\" /><text value=\" insert = db.prepare(\" /><text value=\"&quot;INSERT INTO fruits (name) VALUES (?)&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\" \" /><text value=\"const\" class=\"keyword\" /><text value=\" fruits = [\" /><text value=\"'Apple'\" class=\"string\" /><text value=\", \" /><text value=\"'Banana'\" class=\"string\" /><text value=\", \" /><text value=\"'Cherry'\" class=\"string\" /><text value=\"];\" /><text type=\"break\" /><text value=\" fruits.forEach(\" /><text value=\"fruit\" class=\"params\" /><text value=\" =&gt;\" /><text value=\" insert.run(fruit));\" /><text type=\"break\" /><text value=\"}\" /><text type=\"break\" /><text type=\"break\" /><text value=\"module\" class=\"built_in\" /><text value=\".exports = db;\" /></content><output><content><text value=\"\" /><text type=\"break\" /><text value=\"/usr/lib/node_modules/better-sqlite3/lib/database.js:69\" /><text type=\"break\" /><text value=\"  [util.cppdb]: { value: new addon.Database(filename, filenameGiven, anonymous, readonly, fileMustExist, timeout, verbose || null, buffer || null) },\" /><text type=\"break\" /><text value=\"                         ^\" /><text type=\"break\" /><text value=\"SqliteError: unable to open database file\" /><text type=\"break\" /><text value=\"    at new Database (/usr/lib/node_modules/better-sqlite3/lib/database.js:69:26)\" /><text type=\"break\" /><text value=\"    at Object.&lt;anonymous&gt; (/home/default/code/file.js:2:12)\" /><text type=\"break\" /><text value=\"    at Module._compile (node:internal/modules/cjs/loader:1469:14)\" /><text type=\"break\" /><text value=\"    at Module._extensions..js (node:internal/modules/cjs/loader:1548:10)\" /><text type=\"break\" /><text value=\"    at Module.load (node:internal/modules/cjs/loader:1288:32)\" /><text type=\"break\" /><text value=\"    at Module._load (node:internal/modules/cjs/loader:1104:12)\" /><text type=\"break\" /><text value=\"    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:174:12)\" /><text type=\"break\" /><text value=\"    at node:internal/main/run_main_module:28:49 {\" /><text type=\"break\" /><text value=\"  code: 'SQLITE_CANTOPEN'\" /><text type=\"break\" /><text value=\"}\" /><text type=\"break\" /><text value=\"\" /><text type=\"break\" /><text value=\"Node.js v20.17.0\" /><text type=\"break\" /><text value=\"\" /></content></output></code><p visible-if=\"wrong\">Asegúrese de elegir <code>const</code> seguido de <code>fruits</code> y finalmente <code>=</code>.</p></body></html>"
          },
          {
            "title": "Lesson #3",
            "id": 132560,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Finalmente, devolvemos los datos recibidos como un objeto con la clave <code>\"fruits\"</code>.</p><code version=\"2\" codelang=\"javascript\" name=\"app.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" express = \" /><text value=\"require\" class=\"built_in\" /><text value=\"(\" /><text value=\"&quot;express&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" db = \" /><text value=\"require\" class=\"built_in\" /><text value=\"(\" /><text value=\"&quot;./database.js&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" app = express();\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" port = \" /><text value=\"3000\" class=\"number\" /><text value=\";\" /><text type=\"break\" /><text type=\"break\" /><text value=\"app.get(\" /><text value=\"&quot;/fruits&quot;\" class=\"string\" /><text value=\", (req, res) =&gt; {\" /><text type=\"break\" /><text value=\" \" /><text value=\"const\" class=\"keyword\" /><text value=\" sql = \" /><text value=\"&quot;SELECT * FROM fruits&quot;\" class=\"string\" /><text value=\";\" /><text type=\"break\" /><text value=\" \" /><text value=\"const\" class=\"keyword\" /><text value=\" fruits = db.prepare(sql).all();\" /><text type=\"break\" /><text value=\" res.status(\" /><text value=\"200\" class=\"number\" /><text value=\").json({\" /><text type=\"break\" /><text value=\"  \" /><text value=\"fruits\" class=\"attr\" /><text value=\": fruits\" /><text type=\"break\" /><text value=\" });\" /><text type=\"break\" /><text value=\"});\" /><text type=\"break\" /><text type=\"break\" /><text value=\"app.listen(port, () =&gt; {\" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"`App is running on PORT \" /><text value=\"${port}\" class=\"subst\" /><text value=\"`\" /><text value=\");\" /><text type=\"break\" /><text value=\"});\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"228\" endIndex=\"231\" /><option startIndex=\"231\" endIndex=\"243\" /><option startIndex=\"243\" endIndex=\"248\" /><option startIndex=\"253\" endIndex=\"267\" /></options></interaction></interactions><output><content><text value=\"{\" /><text type=\"break\" /><text value=\"  &quot;fruits&quot;: [\" /><text type=\"break\" /><text value=\"    { &quot;id&quot;: 1, &quot;name&quot;: &quot;Apple&quot; },\" /><text type=\"break\" /><text value=\"    { &quot;id&quot;: 2, &quot;name&quot;: &quot;Banana&quot; },\" /><text type=\"break\" /><text value=\"    { &quot;id&quot;: 3, &quot;name&quot;: &quot;Cherry&quot; }\" /><text type=\"break\" /><text value=\"  ]\" /><text type=\"break\" /><text value=\"}\" /></content></output></code><code version=\"2\" codelang=\"javascript\" name=\"database.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" Database = \" /><text value=\"require\" class=\"built_in\" /><text value=\"(\" /><text value=\"&quot;better-sqlite3&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" db = \" /><text value=\"new\" class=\"keyword\" /><text value=\" Database(\" /><text value=\"&quot;database.db&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text type=\"break\" /><text value=\"db.exec(\" /><text value=\"`\" /><text type=\"break\" /><text value=\"    CREATE TABLE IF NOT EXISTS fruits (\" /><text type=\"break\" /><text value=\"      id INTEGER PRIMARY KEY AUTOINCREMENT,\" /><text type=\"break\" /><text value=\"      name TEXT NOT NULL\" /><text type=\"break\" /><text value=\"    )\" /><text type=\"break\" /><text value=\"`\" /><text value=\");\" /><text type=\"break\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" rowCount = db.prepare(\" /><text value=\"&quot;SELECT COUNT(*) AS count FROM fruits&quot;\" class=\"string\" /><text value=\")\" /><text type=\"break\" /><text value=\" .get().count;\" /><text type=\"break\" /><text type=\"break\" /><text value=\"if\" class=\"keyword\" /><text value=\" (rowCount === \" /><text value=\"0\" class=\"number\" /><text value=\") {\" /><text type=\"break\" /><text value=\" \" /><text value=\"const\" class=\"keyword\" /><text value=\" insert = db.prepare(\" /><text value=\"&quot;INSERT INTO fruits (name) VALUES (?)&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\" \" /><text value=\"const\" class=\"keyword\" /><text value=\" fruits = [\" /><text value=\"'Apple'\" class=\"string\" /><text value=\", \" /><text value=\"'Banana'\" class=\"string\" /><text value=\", \" /><text value=\"'Cherry'\" class=\"string\" /><text value=\"];\" /><text type=\"break\" /><text value=\" fruits.forEach(\" /><text value=\"fruit\" class=\"params\" /><text value=\" =&gt;\" /><text value=\" insert.run(fruit));\" /><text type=\"break\" /><text value=\"}\" /><text type=\"break\" /><text type=\"break\" /><text value=\"module\" class=\"built_in\" /><text value=\".exports = db;\" /></content><output><content><text value=\"\" /><text type=\"break\" /><text value=\"/usr/lib/node_modules/better-sqlite3/lib/database.js:69\" /><text type=\"break\" /><text value=\"  [util.cppdb]: { value: new addon.Database(filename, filenameGiven, anonymous, readonly, fileMustExist, timeout, verbose || null, buffer || null) },\" /><text type=\"break\" /><text value=\"                         ^\" /><text type=\"break\" /><text value=\"SqliteError: unable to open database file\" /><text type=\"break\" /><text value=\"    at new Database (/usr/lib/node_modules/better-sqlite3/lib/database.js:69:26)\" /><text type=\"break\" /><text value=\"    at Object.&lt;anonymous&gt; (/home/default/code/file.js:2:12)\" /><text type=\"break\" /><text value=\"    at Module._compile (node:internal/modules/cjs/loader:1469:14)\" /><text type=\"break\" /><text value=\"    at Module._extensions..js (node:internal/modules/cjs/loader:1548:10)\" /><text type=\"break\" /><text value=\"    at Module.load (node:internal/modules/cjs/loader:1288:32)\" /><text type=\"break\" /><text value=\"    at Module._load (node:internal/modules/cjs/loader:1104:12)\" /><text type=\"break\" /><text value=\"    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:174:12)\" /><text type=\"break\" /><text value=\"    at node:internal/main/run_main_module:28:49 {\" /><text type=\"break\" /><text value=\"  code: 'SQLITE_CANTOPEN'\" /><text type=\"break\" /><text value=\"}\" /><text type=\"break\" /><text value=\"\" /><text type=\"break\" /><text value=\"Node.js v20.17.0\" /><text type=\"break\" /><text value=\"\" /></content></output></code><p visible-if=\"wrong\">Asegúrese de elegir <code>res</code> seguido de <code>.status(200)</code> y luego <code>.json</code>, <code>fruits: fruits</code>.</p></body></html>"
          },
          {
            "title": "Lesson #3 - Copy",
            "id": 132615,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Establece el estado correcto.</p><code version=\"2\" codelang=\"javascript\" name=\"app.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" express = \" /><text value=\"require\" class=\"built_in\" /><text value=\"(\" /><text value=\"&quot;express&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" db = \" /><text value=\"require\" class=\"built_in\" /><text value=\"(\" /><text value=\"&quot;./database.js&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" app = express();\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" port = \" /><text value=\"3000\" class=\"number\" /><text value=\";\" /><text type=\"break\" /><text type=\"break\" /><text value=\"app.get(\" /><text value=\"&quot;/fruits&quot;\" class=\"string\" /><text value=\", (req, res) =&gt; {\" /><text type=\"break\" /><text value=\" \" /><text value=\"const\" class=\"keyword\" /><text value=\" sql = \" /><text value=\"&quot;SELECT * FROM fruits&quot;\" class=\"string\" /><text value=\";\" /><text type=\"break\" /><text value=\" \" /><text value=\"const\" class=\"keyword\" /><text value=\" fruits = db.prepare(sql).all();\" /><text type=\"break\" /><text value=\" res.status(\" /><text value=\"200\" class=\"number\" /><text value=\").json({\" /><text type=\"break\" /><text value=\"  \" /><text value=\"fruits\" class=\"attr\" /><text value=\": fruits\" /><text type=\"break\" /><text value=\" });\" /><text type=\"break\" /><text value=\"});\" /><text type=\"break\" /><text type=\"break\" /><text value=\"app.listen(port, () =&gt; {\" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"`App is running on PORT \" /><text value=\"${port}\" class=\"subst\" /><text value=\"`\" /><text value=\");\" /><text type=\"break\" /><text value=\"});\" /></content><interactions><interaction type=\"validatedInput\" isDefault=\"true\" startIndex=\"239\" endIndex=\"242\" /></interactions><output><content><text value=\"{\" /><text type=\"break\" /><text value=\"  &quot;fruits&quot;: [\" /><text type=\"break\" /><text value=\"    { &quot;id&quot;: 1, &quot;name&quot;: &quot;Apple&quot; },\" /><text type=\"break\" /><text value=\"    { &quot;id&quot;: 2, &quot;name&quot;: &quot;Banana&quot; },\" /><text type=\"break\" /><text value=\"    { &quot;id&quot;: 3, &quot;name&quot;: &quot;Cherry&quot; }\" /><text type=\"break\" /><text value=\"  ]\" /><text type=\"break\" /><text value=\"}\" /></content></output></code><code version=\"2\" codelang=\"javascript\" name=\"database.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" Database = \" /><text value=\"require\" class=\"built_in\" /><text value=\"(\" /><text value=\"&quot;better-sqlite3&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" db = \" /><text value=\"new\" class=\"keyword\" /><text value=\" Database(\" /><text value=\"&quot;database.db&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text type=\"break\" /><text value=\"db.exec(\" /><text value=\"`\" /><text type=\"break\" /><text value=\"    CREATE TABLE IF NOT EXISTS fruits (\" /><text type=\"break\" /><text value=\"      id INTEGER PRIMARY KEY AUTOINCREMENT,\" /><text type=\"break\" /><text value=\"      name TEXT NOT NULL\" /><text type=\"break\" /><text value=\"    )\" /><text type=\"break\" /><text value=\"`\" /><text value=\");\" /><text type=\"break\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" rowCount = db.prepare(\" /><text value=\"&quot;SELECT COUNT(*) AS count FROM fruits&quot;\" class=\"string\" /><text value=\")\" /><text type=\"break\" /><text value=\" .get().count;\" /><text type=\"break\" /><text type=\"break\" /><text value=\"if\" class=\"keyword\" /><text value=\" (rowCount === \" /><text value=\"0\" class=\"number\" /><text value=\") {\" /><text type=\"break\" /><text value=\" \" /><text value=\"const\" class=\"keyword\" /><text value=\" insert = db.prepare(\" /><text value=\"&quot;INSERT INTO fruits (name) VALUES (?)&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\" \" /><text value=\"const\" class=\"keyword\" /><text value=\" fruits = [\" /><text value=\"'Apple'\" class=\"string\" /><text value=\", \" /><text value=\"'Banana'\" class=\"string\" /><text value=\", \" /><text value=\"'Cherry'\" class=\"string\" /><text value=\"];\" /><text type=\"break\" /><text value=\" fruits.forEach(\" /><text value=\"fruit\" class=\"params\" /><text value=\" =&gt;\" /><text value=\" insert.run(fruit));\" /><text type=\"break\" /><text value=\"}\" /><text type=\"break\" /><text type=\"break\" /><text value=\"module\" class=\"built_in\" /><text value=\".exports = db;\" /></content><output><content><text value=\"\" /><text type=\"break\" /><text value=\"/usr/lib/node_modules/better-sqlite3/lib/database.js:69\" /><text type=\"break\" /><text value=\"  [util.cppdb]: { value: new addon.Database(filename, filenameGiven, anonymous, readonly, fileMustExist, timeout, verbose || null, buffer || null) },\" /><text type=\"break\" /><text value=\"                         ^\" /><text type=\"break\" /><text value=\"SqliteError: unable to open database file\" /><text type=\"break\" /><text value=\"    at new Database (/usr/lib/node_modules/better-sqlite3/lib/database.js:69:26)\" /><text type=\"break\" /><text value=\"    at Object.&lt;anonymous&gt; (/home/default/code/file.js:2:12)\" /><text type=\"break\" /><text value=\"    at Module._compile (node:internal/modules/cjs/loader:1469:14)\" /><text type=\"break\" /><text value=\"    at Module._extensions..js (node:internal/modules/cjs/loader:1548:10)\" /><text type=\"break\" /><text value=\"    at Module.load (node:internal/modules/cjs/loader:1288:32)\" /><text type=\"break\" /><text value=\"    at Module._load (node:internal/modules/cjs/loader:1104:12)\" /><text type=\"break\" /><text value=\"    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:174:12)\" /><text type=\"break\" /><text value=\"    at node:internal/main/run_main_module:28:49 {\" /><text type=\"break\" /><text value=\"  code: 'SQLITE_CANTOPEN'\" /><text type=\"break\" /><text value=\"}\" /><text type=\"break\" /><text value=\"\" /><text type=\"break\" /><text value=\"Node.js v20.17.0\" /><text type=\"break\" /><text value=\"\" /></content></output></code><p visible-if=\"wrong\">Asegúrese de elegir <code>200</code>.</p></body></html>"
          },
          {
            "title": "Lesson #11",
            "id": 132618,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>¿Qué código de estado HTTP deberíamos devolver si nuestro endpoint <code>GET</code> puede responder con los datos solicitados?</p><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\"><code>200 OK</code></item><item value=\"2\" correct=\"false\"><code>201 OK</code></item></selection><p visible-if=\"wrong\"><code>200 OK</code>.</p></body></html>"
          },
          {
            "title": "Lesson #3 - Copy - Copy",
            "id": 132616,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Escribe un comando SQL para seleccionar todo de la tabla de frutas.</p><code version=\"2\" codelang=\"javascript\" name=\"app.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" express = \" /><text value=\"require\" class=\"built_in\" /><text value=\"(\" /><text value=\"&quot;express&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" db = \" /><text value=\"require\" class=\"built_in\" /><text value=\"(\" /><text value=\"&quot;./database.js&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" app = express();\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" port = \" /><text value=\"3000\" class=\"number\" /><text value=\";\" /><text type=\"break\" /><text type=\"break\" /><text value=\"app.get(\" /><text value=\"&quot;/fruits&quot;\" class=\"string\" /><text value=\", (req, res) =&gt; {\" /><text type=\"break\" /><text value=\" \" /><text value=\"const\" class=\"keyword\" /><text value=\" sql = \" /><text value=\"&quot;SELECT * FROM fruits&quot;\" class=\"string\" /><text value=\";\" /><text type=\"break\" /><text value=\" \" /><text value=\"const\" class=\"keyword\" /><text value=\" fruits = db.prepare(sql).all();\" /><text type=\"break\" /><text value=\" res.status(\" /><text value=\"200\" class=\"number\" /><text value=\").json({\" /><text type=\"break\" /><text value=\"  \" /><text value=\"fruits\" class=\"attr\" /><text value=\": fruits\" /><text type=\"break\" /><text value=\" });\" /><text type=\"break\" /><text value=\"});\" /><text type=\"break\" /><text type=\"break\" /><text value=\"app.listen(port, () =&gt; {\" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"`App is running on PORT \" /><text value=\"${port}\" class=\"subst\" /><text value=\"`\" /><text value=\");\" /><text type=\"break\" /><text value=\"});\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"165\" endIndex=\"171\" /><option startIndex=\"172\" endIndex=\"173\" /><option startIndex=\"174\" endIndex=\"178\" /><option startIndex=\"179\" endIndex=\"185\" /><option correct=\"false\"><content><text value=\"name\" /></content></option></options></interaction></interactions><output><content><text value=\"{\" /><text type=\"break\" /><text value=\"  &quot;fruits&quot;: [\" /><text type=\"break\" /><text value=\"    { &quot;id&quot;: 1, &quot;name&quot;: &quot;Apple&quot; },\" /><text type=\"break\" /><text value=\"    { &quot;id&quot;: 2, &quot;name&quot;: &quot;Banana&quot; },\" /><text type=\"break\" /><text value=\"    { &quot;id&quot;: 3, &quot;name&quot;: &quot;Cherry&quot; }\" /><text type=\"break\" /><text value=\"  ]\" /><text type=\"break\" /><text value=\"}\" /></content></output></code><code version=\"2\" codelang=\"javascript\" name=\"database.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" Database = \" /><text value=\"require\" class=\"built_in\" /><text value=\"(\" /><text value=\"&quot;better-sqlite3&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" db = \" /><text value=\"new\" class=\"keyword\" /><text value=\" Database(\" /><text value=\"&quot;database.db&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text type=\"break\" /><text value=\"db.exec(\" /><text value=\"`\" /><text type=\"break\" /><text value=\"    CREATE TABLE IF NOT EXISTS fruits (\" /><text type=\"break\" /><text value=\"      id INTEGER PRIMARY KEY AUTOINCREMENT,\" /><text type=\"break\" /><text value=\"      name TEXT NOT NULL\" /><text type=\"break\" /><text value=\"    )\" /><text type=\"break\" /><text value=\"`\" /><text value=\");\" /><text type=\"break\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" rowCount = db.prepare(\" /><text value=\"&quot;SELECT COUNT(*) AS count FROM fruits&quot;\" class=\"string\" /><text value=\")\" /><text type=\"break\" /><text value=\" .get().count;\" /><text type=\"break\" /><text type=\"break\" /><text value=\"if\" class=\"keyword\" /><text value=\" (rowCount === \" /><text value=\"0\" class=\"number\" /><text value=\") {\" /><text type=\"break\" /><text value=\" \" /><text value=\"const\" class=\"keyword\" /><text value=\" insert = db.prepare(\" /><text value=\"&quot;INSERT INTO fruits (name) VALUES (?)&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\" \" /><text value=\"const\" class=\"keyword\" /><text value=\" fruits = [\" /><text value=\"'Apple'\" class=\"string\" /><text value=\", \" /><text value=\"'Banana'\" class=\"string\" /><text value=\", \" /><text value=\"'Cherry'\" class=\"string\" /><text value=\"];\" /><text type=\"break\" /><text value=\" fruits.forEach(\" /><text value=\"fruit\" class=\"params\" /><text value=\" =&gt;\" /><text value=\" insert.run(fruit));\" /><text type=\"break\" /><text value=\"}\" /><text type=\"break\" /><text type=\"break\" /><text value=\"module\" class=\"built_in\" /><text value=\".exports = db;\" /></content><output><content><text value=\"\" /><text type=\"break\" /><text value=\"/usr/lib/node_modules/better-sqlite3/lib/database.js:69\" /><text type=\"break\" /><text value=\"  [util.cppdb]: { value: new addon.Database(filename, filenameGiven, anonymous, readonly, fileMustExist, timeout, verbose || null, buffer || null) },\" /><text type=\"break\" /><text value=\"                         ^\" /><text type=\"break\" /><text value=\"SqliteError: unable to open database file\" /><text type=\"break\" /><text value=\"    at new Database (/usr/lib/node_modules/better-sqlite3/lib/database.js:69:26)\" /><text type=\"break\" /><text value=\"    at Object.&lt;anonymous&gt; (/home/default/code/file.js:2:12)\" /><text type=\"break\" /><text value=\"    at Module._compile (node:internal/modules/cjs/loader:1469:14)\" /><text type=\"break\" /><text value=\"    at Module._extensions..js (node:internal/modules/cjs/loader:1548:10)\" /><text type=\"break\" /><text value=\"    at Module.load (node:internal/modules/cjs/loader:1288:32)\" /><text type=\"break\" /><text value=\"    at Module._load (node:internal/modules/cjs/loader:1104:12)\" /><text type=\"break\" /><text value=\"    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:174:12)\" /><text type=\"break\" /><text value=\"    at node:internal/main/run_main_module:28:49 {\" /><text type=\"break\" /><text value=\"  code: 'SQLITE_CANTOPEN'\" /><text type=\"break\" /><text value=\"}\" /><text type=\"break\" /><text value=\"\" /><text type=\"break\" /><text value=\"Node.js v20.17.0\" /><text type=\"break\" /><text value=\"\" /></content></output></code><p visible-if=\"wrong\">Asegúrese de elegir <code>SELECT</code> seguido de <code>*</code> y luego <code>FROM</code>, <code>fruits</code>.</p></body></html>"
          },
          {
            "title": "Lesson #3 - Copy - Copy - Copy",
            "id": 132617,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Importa la conexión a la base de datos desde el archivo <code>database.js</code>.</p><code version=\"2\" codelang=\"javascript\" name=\"app.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" express = \" /><text value=\"require\" class=\"built_in\" /><text value=\"(\" /><text value=\"&quot;express&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" db = \" /><text value=\"require\" class=\"built_in\" /><text value=\"(\" /><text value=\"&quot;./database.js&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" app = express();\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" port = \" /><text value=\"3000\" class=\"number\" /><text value=\";\" /><text type=\"break\" /><text type=\"break\" /><text value=\"app.get(\" /><text value=\"&quot;/fruits&quot;\" class=\"string\" /><text value=\", (req, res) =&gt; {\" /><text type=\"break\" /><text value=\" \" /><text value=\"const\" class=\"keyword\" /><text value=\" sql = \" /><text value=\"&quot;SELECT * FROM fruits&quot;\" class=\"string\" /><text value=\";\" /><text type=\"break\" /><text value=\" \" /><text value=\"const\" class=\"keyword\" /><text value=\" fruits = db.prepare(sql).all();\" /><text type=\"break\" /><text value=\" res.status(\" /><text value=\"200\" class=\"number\" /><text value=\").json({\" /><text type=\"break\" /><text value=\"  \" /><text value=\"fruits\" class=\"attr\" /><text value=\": fruits\" /><text type=\"break\" /><text value=\" });\" /><text type=\"break\" /><text value=\"});\" /><text type=\"break\" /><text type=\"break\" /><text value=\"app.listen(port, () =&gt; {\" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"`App is running on PORT \" /><text value=\"${port}\" class=\"subst\" /><text value=\"`\" /><text value=\");\" /><text type=\"break\" /><text value=\"});\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"36\" endIndex=\"41\" /><option startIndex=\"42\" endIndex=\"44\" /><option startIndex=\"47\" endIndex=\"54\" /><option startIndex=\"55\" endIndex=\"70\" /><option startIndex=\"70\" endIndex=\"71\" /><option startIndex=\"54\" endIndex=\"55\" /><option startIndex=\"45\" endIndex=\"46\" /><option startIndex=\"71\" endIndex=\"72\" /></options></interaction></interactions><output><content><text value=\"{\" /><text type=\"break\" /><text value=\"  &quot;fruits&quot;: [\" /><text type=\"break\" /><text value=\"    { &quot;id&quot;: 1, &quot;name&quot;: &quot;Apple&quot; },\" /><text type=\"break\" /><text value=\"    { &quot;id&quot;: 2, &quot;name&quot;: &quot;Banana&quot; },\" /><text type=\"break\" /><text value=\"    { &quot;id&quot;: 3, &quot;name&quot;: &quot;Cherry&quot; }\" /><text type=\"break\" /><text value=\"  ]\" /><text type=\"break\" /><text value=\"}\" /></content></output></code><code version=\"2\" codelang=\"javascript\" name=\"database.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" Database = \" /><text value=\"require\" class=\"built_in\" /><text value=\"(\" /><text value=\"&quot;better-sqlite3&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" db = \" /><text value=\"new\" class=\"keyword\" /><text value=\" Database(\" /><text value=\"&quot;database.db&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text type=\"break\" /><text value=\"db.exec(\" /><text value=\"`\" /><text type=\"break\" /><text value=\"    CREATE TABLE IF NOT EXISTS fruits (\" /><text type=\"break\" /><text value=\"      id INTEGER PRIMARY KEY AUTOINCREMENT,\" /><text type=\"break\" /><text value=\"      name TEXT NOT NULL\" /><text type=\"break\" /><text value=\"    )\" /><text type=\"break\" /><text value=\"`\" /><text value=\");\" /><text type=\"break\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" rowCount = db.prepare(\" /><text value=\"&quot;SELECT COUNT(*) AS count FROM fruits&quot;\" class=\"string\" /><text value=\")\" /><text type=\"break\" /><text value=\" .get().count;\" /><text type=\"break\" /><text type=\"break\" /><text value=\"if\" class=\"keyword\" /><text value=\" (rowCount === \" /><text value=\"0\" class=\"number\" /><text value=\") {\" /><text type=\"break\" /><text value=\" \" /><text value=\"const\" class=\"keyword\" /><text value=\" insert = db.prepare(\" /><text value=\"&quot;INSERT INTO fruits (name) VALUES (?)&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\" \" /><text value=\"const\" class=\"keyword\" /><text value=\" fruits = [\" /><text value=\"'Apple'\" class=\"string\" /><text value=\", \" /><text value=\"'Banana'\" class=\"string\" /><text value=\", \" /><text value=\"'Cherry'\" class=\"string\" /><text value=\"];\" /><text type=\"break\" /><text value=\" fruits.forEach(\" /><text value=\"fruit\" class=\"params\" /><text value=\" =&gt;\" /><text value=\" insert.run(fruit));\" /><text type=\"break\" /><text value=\"}\" /><text type=\"break\" /><text type=\"break\" /><text value=\"module\" class=\"built_in\" /><text value=\".exports = db;\" /></content><output><content><text value=\"\" /><text type=\"break\" /><text value=\"/usr/lib/node_modules/better-sqlite3/lib/database.js:69\" /><text type=\"break\" /><text value=\"  [util.cppdb]: { value: new addon.Database(filename, filenameGiven, anonymous, readonly, fileMustExist, timeout, verbose || null, buffer || null) },\" /><text type=\"break\" /><text value=\"                         ^\" /><text type=\"break\" /><text value=\"SqliteError: unable to open database file\" /><text type=\"break\" /><text value=\"    at new Database (/usr/lib/node_modules/better-sqlite3/lib/database.js:69:26)\" /><text type=\"break\" /><text value=\"    at Object.&lt;anonymous&gt; (/home/default/code/file.js:2:12)\" /><text type=\"break\" /><text value=\"    at Module._compile (node:internal/modules/cjs/loader:1469:14)\" /><text type=\"break\" /><text value=\"    at Module._extensions..js (node:internal/modules/cjs/loader:1548:10)\" /><text type=\"break\" /><text value=\"    at Module.load (node:internal/modules/cjs/loader:1288:32)\" /><text type=\"break\" /><text value=\"    at Module._load (node:internal/modules/cjs/loader:1104:12)\" /><text type=\"break\" /><text value=\"    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:174:12)\" /><text type=\"break\" /><text value=\"    at node:internal/main/run_main_module:28:49 {\" /><text type=\"break\" /><text value=\"  code: 'SQLITE_CANTOPEN'\" /><text type=\"break\" /><text value=\"}\" /><text type=\"break\" /><text value=\"\" /><text type=\"break\" /><text value=\"Node.js v20.17.0\" /><text type=\"break\" /><text value=\"\" /></content></output></code><p visible-if=\"wrong\">Asegúrese de elegir <code>const</code> seguido de <code>db</code> y luego <code>=</code>, <code>require</code>, <code>(</code>, <code>\"./database.js\"</code>, <code>)</code>, <code>;</code>.</p></body></html>"
          },
          {
            "title": "Lesson #12",
            "id": 132619,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>¿Qué hace <code>SELECT * FROM fruits</code>?</p><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\">Selecciona y recupera todas las filas y columnas de la tabla de frutas</item><item value=\"2\" correct=\"false\">Selecciona y recupera la primera fila de la tabla de frutas</item></selection><p visible-if=\"wrong\">Selecciona y recupera todas las filas y columnas de la tabla de frutas.</p></body></html>"
          }
        ]
      },
      {
        "id": 15035,
        "title": "Endpoints GET 2",
        "type": "practiceLevel1",
        "lessons": [
          {
            "title": "Lesson #1",
            "id": 132584,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Ya hemos hablado sobre cómo recuperar todos los datos de una tabla a través de un endpoint <code>GET</code>.</p><p>Ahora, crearemos un endpoint que recupere una entrada específica de una base de datos.</p><code version=\"2\" codelang=\"javascript\" name=\"database.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" Database = \" /><text value=\"require\" class=\"built_in\" /><text value=\"(\" /><text value=\"&quot;better-sqlite3&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" db = \" /><text value=\"new\" class=\"keyword\" /><text value=\" Database(\" /><text value=\"&quot;database.db&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text type=\"break\" /><text value=\"db.exec(\" /><text value=\"`\" /><text type=\"break\" /><text value=\"    CREATE TABLE IF NOT EXISTS fruits (\" /><text type=\"break\" /><text value=\"      id INTEGER PRIMARY KEY AUTOINCREMENT,\" /><text type=\"break\" /><text value=\"      name TEXT NOT NULL\" /><text type=\"break\" /><text value=\"    )\" /><text type=\"break\" /><text value=\"`\" /><text value=\");\" /><text type=\"break\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" rowCount = db.prepare(\" /><text value=\"&quot;SELECT COUNT(*) AS count FROM fruits&quot;\" class=\"string\" /><text value=\")\" /><text type=\"break\" /><text value=\" .get().count;\" /><text type=\"break\" /><text type=\"break\" /><text value=\"if\" class=\"keyword\" /><text value=\" (rowCount === \" /><text value=\"0\" class=\"number\" /><text value=\") {\" /><text type=\"break\" /><text value=\" \" /><text value=\"const\" class=\"keyword\" /><text value=\" insert = db.prepare(\" /><text value=\"&quot;INSERT INTO fruits (name) VALUES (?)&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\" \" /><text value=\"const\" class=\"keyword\" /><text value=\" fruits = [\" /><text value=\"'Apple'\" class=\"string\" /><text value=\", \" /><text value=\"'Banana'\" class=\"string\" /><text value=\", \" /><text value=\"'Cherry'\" class=\"string\" /><text value=\"];\" /><text type=\"break\" /><text value=\" fruits.forEach(\" /><text value=\"fruit\" class=\"params\" /><text value=\" =&gt;\" /><text value=\" insert.run(fruit));\" /><text type=\"break\" /><text value=\"}\" /><text type=\"break\" /><text type=\"break\" /><text value=\"module\" class=\"built_in\" /><text value=\".exports = db;\" /></content></code></body></html>"
          },
          {
            "title": "Lesson #3 - Copy - Copy",
            "id": 132585,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Continuamos trabajando con nuestro archivo <code>databse.js</code>, que nos proporciona una base de datos con la que trabajar.</p><p>Comencemos configurando un endpoint <code>GET</code> con un parámetro de ruta. Usaremos ese parámetro para identificar el ID de la fruta solicitada.</p><code version=\"2\" codelang=\"javascript\" name=\"app.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" express = \" /><text value=\"require\" class=\"built_in\" /><text value=\"(\" /><text value=\"&quot;express&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" db = \" /><text value=\"require\" class=\"built_in\" /><text value=\"(\" /><text value=\"&quot;./database.js&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" app = express();\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" port = \" /><text value=\"3000\" class=\"number\" /><text value=\";\" /><text type=\"break\" /><text type=\"break\" /><text value=\"app.get(\" /><text value=\"&quot;/fruits/:id&quot;\" class=\"string\" /><text value=\", (req, res) =&gt; {\" /><text type=\"break\" /><text type=\"break\" /><text value=\"});\" /><text type=\"break\" /><text type=\"break\" /><text value=\"app.listen(port, () =&gt; {\" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"`App is running on PORT \" /><text value=\"${port}\" class=\"subst\" /><text value=\"`\" /><text value=\");\" /><text type=\"break\" /><text value=\"});\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"116\" endIndex=\"119\" /><option startIndex=\"119\" endIndex=\"120\" /><option startIndex=\"120\" endIndex=\"123\" /><option startIndex=\"124\" endIndex=\"137\" /></options></interaction></interactions></code><code version=\"2\" codelang=\"javascript\" name=\"database.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" Database = \" /><text value=\"require\" class=\"built_in\" /><text value=\"(\" /><text value=\"&quot;better-sqlite3&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" db = \" /><text value=\"new\" class=\"keyword\" /><text value=\" Database(\" /><text value=\"&quot;database.db&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text type=\"break\" /><text value=\"db.exec(\" /><text value=\"`\" /><text type=\"break\" /><text value=\"    CREATE TABLE IF NOT EXISTS fruits (\" /><text type=\"break\" /><text value=\"      id INTEGER PRIMARY KEY AUTOINCREMENT,\" /><text type=\"break\" /><text value=\"      name TEXT NOT NULL\" /><text type=\"break\" /><text value=\"    )\" /><text type=\"break\" /><text value=\"`\" /><text value=\");\" /><text type=\"break\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" rowCount = db.prepare(\" /><text value=\"&quot;SELECT COUNT(*) AS count FROM fruits&quot;\" class=\"string\" /><text value=\")\" /><text type=\"break\" /><text value=\" .get().count;\" /><text type=\"break\" /><text type=\"break\" /><text value=\"if\" class=\"keyword\" /><text value=\" (rowCount === \" /><text value=\"0\" class=\"number\" /><text value=\") {\" /><text type=\"break\" /><text value=\" \" /><text value=\"const\" class=\"keyword\" /><text value=\" insert = db.prepare(\" /><text value=\"&quot;INSERT INTO fruits (name) VALUES (?)&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\" \" /><text value=\"const\" class=\"keyword\" /><text value=\" fruits = [\" /><text value=\"'Apple'\" class=\"string\" /><text value=\", \" /><text value=\"'Banana'\" class=\"string\" /><text value=\", \" /><text value=\"'Cherry'\" class=\"string\" /><text value=\"];\" /><text type=\"break\" /><text value=\" fruits.forEach(\" /><text value=\"fruit\" class=\"params\" /><text value=\" =&gt;\" /><text value=\" insert.run(fruit));\" /><text type=\"break\" /><text value=\"}\" /><text type=\"break\" /><text type=\"break\" /><text value=\"module\" class=\"built_in\" /><text value=\".exports = db;\" /></content><output><content><text value=\"\" /><text type=\"break\" /><text value=\"/usr/lib/node_modules/better-sqlite3/lib/database.js:69\" /><text type=\"break\" /><text value=\"  [util.cppdb]: { value: new addon.Database(filename, filenameGiven, anonymous, readonly, fileMustExist, timeout, verbose || null, buffer || null) },\" /><text type=\"break\" /><text value=\"                         ^\" /><text type=\"break\" /><text value=\"SqliteError: unable to open database file\" /><text type=\"break\" /><text value=\"    at new Database (/usr/lib/node_modules/better-sqlite3/lib/database.js:69:26)\" /><text type=\"break\" /><text value=\"    at Object.&lt;anonymous&gt; (/home/default/code/file.js:2:12)\" /><text type=\"break\" /><text value=\"    at Module._compile (node:internal/modules/cjs/loader:1469:14)\" /><text type=\"break\" /><text value=\"    at Module._extensions..js (node:internal/modules/cjs/loader:1548:10)\" /><text type=\"break\" /><text value=\"    at Module.load (node:internal/modules/cjs/loader:1288:32)\" /><text type=\"break\" /><text value=\"    at Module._load (node:internal/modules/cjs/loader:1104:12)\" /><text type=\"break\" /><text value=\"    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:174:12)\" /><text type=\"break\" /><text value=\"    at node:internal/main/run_main_module:28:49 {\" /><text type=\"break\" /><text value=\"  code: 'SQLITE_CANTOPEN'\" /><text type=\"break\" /><text value=\"}\" /><text type=\"break\" /><text value=\"\" /><text type=\"break\" /><text value=\"Node.js v20.17.0\" /><text type=\"break\" /><text value=\"\" /></content></output></code><p visible-if=\"wrong\">Asegúrese de elegir <code>app</code> seguido de <code>.</code> y luego <code>get</code>, <code>\"/fruits/:id\"</code>.</p></body></html>"
          },
          {
            "title": "Lesson #3 - Copy - Copy - Copy",
            "id": 132586,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Usamos una consulta parametrizada con un marcador de posición para el <code>id</code>.</p><code version=\"2\" codelang=\"javascript\" name=\"app.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" express = \" /><text value=\"require\" class=\"built_in\" /><text value=\"(\" /><text value=\"&quot;express&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" db = \" /><text value=\"require\" class=\"built_in\" /><text value=\"(\" /><text value=\"&quot;./database.js&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" app = express();\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" port = \" /><text value=\"3000\" class=\"number\" /><text value=\";\" /><text type=\"break\" /><text type=\"break\" /><text value=\"app.get(\" /><text value=\"&quot;/fruits/:id&quot;\" class=\"string\" /><text value=\", (req, res) =&gt; {\" /><text type=\"break\" /><text value=\" \" /><text value=\"const\" class=\"keyword\" /><text value=\" sql = \" /><text value=\"&quot;SELECT * FROM fruits WHERE id = ?&quot;\" class=\"string\" /><text value=\";\" /><text type=\"break\" /><text value=\"});\" /><text type=\"break\" /><text type=\"break\" /><text value=\"app.listen(port, () =&gt; {\" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"`App is running on PORT \" /><text value=\"${port}\" class=\"subst\" /><text value=\"`\" /><text value=\");\" /><text type=\"break\" /><text value=\"});\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"190\" endIndex=\"195\" /><option startIndex=\"196\" endIndex=\"198\" /><option startIndex=\"199\" endIndex=\"200\" /><option startIndex=\"201\" endIndex=\"202\" /></options></interaction></interactions></code><code version=\"2\" codelang=\"javascript\" name=\"database.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" Database = \" /><text value=\"require\" class=\"built_in\" /><text value=\"(\" /><text value=\"&quot;better-sqlite3&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" db = \" /><text value=\"new\" class=\"keyword\" /><text value=\" Database(\" /><text value=\"&quot;database.db&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text type=\"break\" /><text value=\"db.exec(\" /><text value=\"`\" /><text type=\"break\" /><text value=\"    CREATE TABLE IF NOT EXISTS fruits (\" /><text type=\"break\" /><text value=\"      id INTEGER PRIMARY KEY AUTOINCREMENT,\" /><text type=\"break\" /><text value=\"      name TEXT NOT NULL\" /><text type=\"break\" /><text value=\"    )\" /><text type=\"break\" /><text value=\"`\" /><text value=\");\" /><text type=\"break\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" rowCount = db.prepare(\" /><text value=\"&quot;SELECT COUNT(*) AS count FROM fruits&quot;\" class=\"string\" /><text value=\")\" /><text type=\"break\" /><text value=\" .get().count;\" /><text type=\"break\" /><text type=\"break\" /><text value=\"if\" class=\"keyword\" /><text value=\" (rowCount === \" /><text value=\"0\" class=\"number\" /><text value=\") {\" /><text type=\"break\" /><text value=\" \" /><text value=\"const\" class=\"keyword\" /><text value=\" insert = db.prepare(\" /><text value=\"&quot;INSERT INTO fruits (name) VALUES (?)&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\" \" /><text value=\"const\" class=\"keyword\" /><text value=\" fruits = [\" /><text value=\"'Apple'\" class=\"string\" /><text value=\", \" /><text value=\"'Banana'\" class=\"string\" /><text value=\", \" /><text value=\"'Cherry'\" class=\"string\" /><text value=\"];\" /><text type=\"break\" /><text value=\" fruits.forEach(\" /><text value=\"fruit\" class=\"params\" /><text value=\" =&gt;\" /><text value=\" insert.run(fruit));\" /><text type=\"break\" /><text value=\"}\" /><text type=\"break\" /><text type=\"break\" /><text value=\"module\" class=\"built_in\" /><text value=\".exports = db;\" /></content><output><content><text value=\"\" /><text type=\"break\" /><text value=\"/usr/lib/node_modules/better-sqlite3/lib/database.js:69\" /><text type=\"break\" /><text value=\"  [util.cppdb]: { value: new addon.Database(filename, filenameGiven, anonymous, readonly, fileMustExist, timeout, verbose || null, buffer || null) },\" /><text type=\"break\" /><text value=\"                         ^\" /><text type=\"break\" /><text value=\"SqliteError: unable to open database file\" /><text type=\"break\" /><text value=\"    at new Database (/usr/lib/node_modules/better-sqlite3/lib/database.js:69:26)\" /><text type=\"break\" /><text value=\"    at Object.&lt;anonymous&gt; (/home/default/code/file.js:2:12)\" /><text type=\"break\" /><text value=\"    at Module._compile (node:internal/modules/cjs/loader:1469:14)\" /><text type=\"break\" /><text value=\"    at Module._extensions..js (node:internal/modules/cjs/loader:1548:10)\" /><text type=\"break\" /><text value=\"    at Module.load (node:internal/modules/cjs/loader:1288:32)\" /><text type=\"break\" /><text value=\"    at Module._load (node:internal/modules/cjs/loader:1104:12)\" /><text type=\"break\" /><text value=\"    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:174:12)\" /><text type=\"break\" /><text value=\"    at node:internal/main/run_main_module:28:49 {\" /><text type=\"break\" /><text value=\"  code: 'SQLITE_CANTOPEN'\" /><text type=\"break\" /><text value=\"}\" /><text type=\"break\" /><text value=\"\" /><text type=\"break\" /><text value=\"Node.js v20.17.0\" /><text type=\"break\" /><text value=\"\" /></content></output></code><p visible-if=\"wrong\">Asegúrese de elegir <code>WHERE</code> seguido de <code>id</code> y luego <code>=</code>, <code>?</code>.</p></body></html>"
          },
          {
            "title": "da",
            "id": 132587,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>A continuación, dejamos que la base de datos prepare la declaración para su uso posterior.</p><code version=\"2\" codelang=\"javascript\" name=\"app.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" express = \" /><text value=\"require\" class=\"built_in\" /><text value=\"(\" /><text value=\"&quot;express&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" db = \" /><text value=\"require\" class=\"built_in\" /><text value=\"(\" /><text value=\"&quot;./database.js&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" app = express();\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" port = \" /><text value=\"3000\" class=\"number\" /><text value=\";\" /><text type=\"break\" /><text type=\"break\" /><text value=\"app.get(\" /><text value=\"&quot;/fruits/:id&quot;\" class=\"string\" /><text value=\", (req, res) =&gt; {\" /><text type=\"break\" /><text value=\" \" /><text value=\"const\" class=\"keyword\" /><text value=\" sql = \" /><text value=\"&quot;SELECT * FROM fruits WHERE id = ?&quot;\" class=\"string\" /><text value=\";\" /><text type=\"break\" /><text value=\" db.prepare(sql);\" /><text type=\"break\" /><text value=\"});\" /><text type=\"break\" /><text type=\"break\" /><text value=\"app.listen(port, () =&gt; {\" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"`App is running on PORT \" /><text value=\"${port}\" class=\"subst\" /><text value=\"`\" /><text value=\");\" /><text type=\"break\" /><text value=\"});\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"206\" endIndex=\"208\" /><option startIndex=\"208\" endIndex=\"209\" /><option startIndex=\"209\" endIndex=\"216\" /><option startIndex=\"217\" endIndex=\"220\" /></options></interaction></interactions></code><code version=\"2\" codelang=\"javascript\" name=\"database.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" Database = \" /><text value=\"require\" class=\"built_in\" /><text value=\"(\" /><text value=\"&quot;better-sqlite3&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" db = \" /><text value=\"new\" class=\"keyword\" /><text value=\" Database(\" /><text value=\"&quot;database.db&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text type=\"break\" /><text value=\"db.exec(\" /><text value=\"`\" /><text type=\"break\" /><text value=\"    CREATE TABLE IF NOT EXISTS fruits (\" /><text type=\"break\" /><text value=\"      id INTEGER PRIMARY KEY AUTOINCREMENT,\" /><text type=\"break\" /><text value=\"      name TEXT NOT NULL\" /><text type=\"break\" /><text value=\"    )\" /><text type=\"break\" /><text value=\"`\" /><text value=\");\" /><text type=\"break\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" rowCount = db.prepare(\" /><text value=\"&quot;SELECT COUNT(*) AS count FROM fruits&quot;\" class=\"string\" /><text value=\")\" /><text type=\"break\" /><text value=\" .get().count;\" /><text type=\"break\" /><text type=\"break\" /><text value=\"if\" class=\"keyword\" /><text value=\" (rowCount === \" /><text value=\"0\" class=\"number\" /><text value=\") {\" /><text type=\"break\" /><text value=\" \" /><text value=\"const\" class=\"keyword\" /><text value=\" insert = db.prepare(\" /><text value=\"&quot;INSERT INTO fruits (name) VALUES (?)&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\" \" /><text value=\"const\" class=\"keyword\" /><text value=\" fruits = [\" /><text value=\"'Apple'\" class=\"string\" /><text value=\", \" /><text value=\"'Banana'\" class=\"string\" /><text value=\", \" /><text value=\"'Cherry'\" class=\"string\" /><text value=\"];\" /><text type=\"break\" /><text value=\" fruits.forEach(\" /><text value=\"fruit\" class=\"params\" /><text value=\" =&gt;\" /><text value=\" insert.run(fruit));\" /><text type=\"break\" /><text value=\"}\" /><text type=\"break\" /><text type=\"break\" /><text value=\"module\" class=\"built_in\" /><text value=\".exports = db;\" /></content><output><content><text value=\"\" /><text type=\"break\" /><text value=\"/usr/lib/node_modules/better-sqlite3/lib/database.js:69\" /><text type=\"break\" /><text value=\"  [util.cppdb]: { value: new addon.Database(filename, filenameGiven, anonymous, readonly, fileMustExist, timeout, verbose || null, buffer || null) },\" /><text type=\"break\" /><text value=\"                         ^\" /><text type=\"break\" /><text value=\"SqliteError: unable to open database file\" /><text type=\"break\" /><text value=\"    at new Database (/usr/lib/node_modules/better-sqlite3/lib/database.js:69:26)\" /><text type=\"break\" /><text value=\"    at Object.&lt;anonymous&gt; (/home/default/code/file.js:2:12)\" /><text type=\"break\" /><text value=\"    at Module._compile (node:internal/modules/cjs/loader:1469:14)\" /><text type=\"break\" /><text value=\"    at Module._extensions..js (node:internal/modules/cjs/loader:1548:10)\" /><text type=\"break\" /><text value=\"    at Module.load (node:internal/modules/cjs/loader:1288:32)\" /><text type=\"break\" /><text value=\"    at Module._load (node:internal/modules/cjs/loader:1104:12)\" /><text type=\"break\" /><text value=\"    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:174:12)\" /><text type=\"break\" /><text value=\"    at node:internal/main/run_main_module:28:49 {\" /><text type=\"break\" /><text value=\"  code: 'SQLITE_CANTOPEN'\" /><text type=\"break\" /><text value=\"}\" /><text type=\"break\" /><text value=\"\" /><text type=\"break\" /><text value=\"Node.js v20.17.0\" /><text type=\"break\" /><text value=\"\" /></content></output></code><p visible-if=\"wrong\">Asegúrese de elegir <code>db</code> seguido de <code>.</code> y luego <code>prepare</code>, <code>sql</code>.</p></body></html>"
          },
          {
            "title": "da - Copy",
            "id": 132590,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Luego podemos ejecutar la declaración y pasar el parámetro de ruta para el id.</p><code version=\"2\" codelang=\"javascript\" name=\"app.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" express = \" /><text value=\"require\" class=\"built_in\" /><text value=\"(\" /><text value=\"&quot;express&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" db = \" /><text value=\"require\" class=\"built_in\" /><text value=\"(\" /><text value=\"&quot;./database.js&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" app = express();\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" port = \" /><text value=\"3000\" class=\"number\" /><text value=\";\" /><text type=\"break\" /><text type=\"break\" /><text value=\"app.get(\" /><text value=\"&quot;/fruits/:id&quot;\" class=\"string\" /><text value=\", (req, res) =&gt; {\" /><text type=\"break\" /><text value=\" \" /><text value=\"const\" class=\"keyword\" /><text value=\" sql = \" /><text value=\"&quot;SELECT * FROM fruits WHERE id = ?&quot;\" class=\"string\" /><text value=\";\" /><text type=\"break\" /><text value=\" db.prepare(sql).get(req.params.id);\" /><text type=\"break\" /><text value=\"});\" /><text type=\"break\" /><text type=\"break\" /><text value=\"app.listen(port, () =&gt; {\" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"`App is running on PORT \" /><text value=\"${port}\" class=\"subst\" /><text value=\"`\" /><text value=\");\" /><text type=\"break\" /><text value=\"});\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"221\" endIndex=\"222\" /><option startIndex=\"222\" endIndex=\"225\" /><option startIndex=\"226\" endIndex=\"239\" /></options></interaction></interactions></code><code version=\"2\" codelang=\"javascript\" name=\"database.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" Database = \" /><text value=\"require\" class=\"built_in\" /><text value=\"(\" /><text value=\"&quot;better-sqlite3&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" db = \" /><text value=\"new\" class=\"keyword\" /><text value=\" Database(\" /><text value=\"&quot;database.db&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text type=\"break\" /><text value=\"db.exec(\" /><text value=\"`\" /><text type=\"break\" /><text value=\"    CREATE TABLE IF NOT EXISTS fruits (\" /><text type=\"break\" /><text value=\"      id INTEGER PRIMARY KEY AUTOINCREMENT,\" /><text type=\"break\" /><text value=\"      name TEXT NOT NULL\" /><text type=\"break\" /><text value=\"    )\" /><text type=\"break\" /><text value=\"`\" /><text value=\");\" /><text type=\"break\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" rowCount = db.prepare(\" /><text value=\"&quot;SELECT COUNT(*) AS count FROM fruits&quot;\" class=\"string\" /><text value=\")\" /><text type=\"break\" /><text value=\" .get().count;\" /><text type=\"break\" /><text type=\"break\" /><text value=\"if\" class=\"keyword\" /><text value=\" (rowCount === \" /><text value=\"0\" class=\"number\" /><text value=\") {\" /><text type=\"break\" /><text value=\" \" /><text value=\"const\" class=\"keyword\" /><text value=\" insert = db.prepare(\" /><text value=\"&quot;INSERT INTO fruits (name) VALUES (?)&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\" \" /><text value=\"const\" class=\"keyword\" /><text value=\" fruits = [\" /><text value=\"'Apple'\" class=\"string\" /><text value=\", \" /><text value=\"'Banana'\" class=\"string\" /><text value=\", \" /><text value=\"'Cherry'\" class=\"string\" /><text value=\"];\" /><text type=\"break\" /><text value=\" fruits.forEach(\" /><text value=\"fruit\" class=\"params\" /><text value=\" =&gt;\" /><text value=\" insert.run(fruit));\" /><text type=\"break\" /><text value=\"}\" /><text type=\"break\" /><text type=\"break\" /><text value=\"module\" class=\"built_in\" /><text value=\".exports = db;\" /></content><output><content><text value=\"\" /><text type=\"break\" /><text value=\"/usr/lib/node_modules/better-sqlite3/lib/database.js:69\" /><text type=\"break\" /><text value=\"  [util.cppdb]: { value: new addon.Database(filename, filenameGiven, anonymous, readonly, fileMustExist, timeout, verbose || null, buffer || null) },\" /><text type=\"break\" /><text value=\"                         ^\" /><text type=\"break\" /><text value=\"SqliteError: unable to open database file\" /><text type=\"break\" /><text value=\"    at new Database (/usr/lib/node_modules/better-sqlite3/lib/database.js:69:26)\" /><text type=\"break\" /><text value=\"    at Object.&lt;anonymous&gt; (/home/default/code/file.js:2:12)\" /><text type=\"break\" /><text value=\"    at Module._compile (node:internal/modules/cjs/loader:1469:14)\" /><text type=\"break\" /><text value=\"    at Module._extensions..js (node:internal/modules/cjs/loader:1548:10)\" /><text type=\"break\" /><text value=\"    at Module.load (node:internal/modules/cjs/loader:1288:32)\" /><text type=\"break\" /><text value=\"    at Module._load (node:internal/modules/cjs/loader:1104:12)\" /><text type=\"break\" /><text value=\"    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:174:12)\" /><text type=\"break\" /><text value=\"    at node:internal/main/run_main_module:28:49 {\" /><text type=\"break\" /><text value=\"  code: 'SQLITE_CANTOPEN'\" /><text type=\"break\" /><text value=\"}\" /><text type=\"break\" /><text value=\"\" /><text type=\"break\" /><text value=\"Node.js v20.17.0\" /><text type=\"break\" /><text value=\"\" /></content></output></code><p visible-if=\"wrong\">Asegúrese de elegir <code>.</code> seguido de <code>get</code> y finalmente <code>req.params.id</code>.</p></body></html>"
          },
          {
            "title": "da - Copy - Copy",
            "id": 132591,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Para acceder a los datos que obtenemos de la base de datos, guardamos el objeto devuelto en una variable.</p><code version=\"2\" codelang=\"javascript\" name=\"app.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" express = \" /><text value=\"require\" class=\"built_in\" /><text value=\"(\" /><text value=\"&quot;express&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" db = \" /><text value=\"require\" class=\"built_in\" /><text value=\"(\" /><text value=\"&quot;./database.js&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" app = express();\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" port = \" /><text value=\"3000\" class=\"number\" /><text value=\";\" /><text type=\"break\" /><text type=\"break\" /><text value=\"app.get(\" /><text value=\"&quot;/fruits/:id&quot;\" class=\"string\" /><text value=\", (req, res) =&gt; {\" /><text type=\"break\" /><text value=\" \" /><text value=\"const\" class=\"keyword\" /><text value=\" sql = \" /><text value=\"&quot;SELECT * FROM fruits WHERE id = ?&quot;\" class=\"string\" /><text value=\";\" /><text type=\"break\" /><text value=\"  \" /><text value=\"const\" class=\"keyword\" /><text value=\" fruit = db.prepare(sql).get(req.params.id);\" /><text type=\"break\" /><text value=\"});\" /><text type=\"break\" /><text type=\"break\" /><text value=\"app.listen(port, () =&gt; {\" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"`App is running on PORT \" /><text value=\"${port}\" class=\"subst\" /><text value=\"`\" /><text value=\");\" /><text type=\"break\" /><text value=\"});\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"207\" endIndex=\"212\" /><option startIndex=\"213\" endIndex=\"218\" /><option startIndex=\"219\" endIndex=\"220\" /></options></interaction></interactions></code><code version=\"2\" codelang=\"javascript\" name=\"database.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" Database = \" /><text value=\"require\" class=\"built_in\" /><text value=\"(\" /><text value=\"&quot;better-sqlite3&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" db = \" /><text value=\"new\" class=\"keyword\" /><text value=\" Database(\" /><text value=\"&quot;database.db&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text type=\"break\" /><text value=\"db.exec(\" /><text value=\"`\" /><text type=\"break\" /><text value=\"    CREATE TABLE IF NOT EXISTS fruits (\" /><text type=\"break\" /><text value=\"      id INTEGER PRIMARY KEY AUTOINCREMENT,\" /><text type=\"break\" /><text value=\"      name TEXT NOT NULL\" /><text type=\"break\" /><text value=\"    )\" /><text type=\"break\" /><text value=\"`\" /><text value=\");\" /><text type=\"break\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" rowCount = db.prepare(\" /><text value=\"&quot;SELECT COUNT(*) AS count FROM fruits&quot;\" class=\"string\" /><text value=\")\" /><text type=\"break\" /><text value=\" .get().count;\" /><text type=\"break\" /><text type=\"break\" /><text value=\"if\" class=\"keyword\" /><text value=\" (rowCount === \" /><text value=\"0\" class=\"number\" /><text value=\") {\" /><text type=\"break\" /><text value=\" \" /><text value=\"const\" class=\"keyword\" /><text value=\" insert = db.prepare(\" /><text value=\"&quot;INSERT INTO fruits (name) VALUES (?)&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\" \" /><text value=\"const\" class=\"keyword\" /><text value=\" fruits = [\" /><text value=\"'Apple'\" class=\"string\" /><text value=\", \" /><text value=\"'Banana'\" class=\"string\" /><text value=\", \" /><text value=\"'Cherry'\" class=\"string\" /><text value=\"];\" /><text type=\"break\" /><text value=\" fruits.forEach(\" /><text value=\"fruit\" class=\"params\" /><text value=\" =&gt;\" /><text value=\" insert.run(fruit));\" /><text type=\"break\" /><text value=\"}\" /><text type=\"break\" /><text type=\"break\" /><text value=\"module\" class=\"built_in\" /><text value=\".exports = db;\" /></content><output><content><text value=\"\" /><text type=\"break\" /><text value=\"/usr/lib/node_modules/better-sqlite3/lib/database.js:69\" /><text type=\"break\" /><text value=\"  [util.cppdb]: { value: new addon.Database(filename, filenameGiven, anonymous, readonly, fileMustExist, timeout, verbose || null, buffer || null) },\" /><text type=\"break\" /><text value=\"                         ^\" /><text type=\"break\" /><text value=\"SqliteError: unable to open database file\" /><text type=\"break\" /><text value=\"    at new Database (/usr/lib/node_modules/better-sqlite3/lib/database.js:69:26)\" /><text type=\"break\" /><text value=\"    at Object.&lt;anonymous&gt; (/home/default/code/file.js:2:12)\" /><text type=\"break\" /><text value=\"    at Module._compile (node:internal/modules/cjs/loader:1469:14)\" /><text type=\"break\" /><text value=\"    at Module._extensions..js (node:internal/modules/cjs/loader:1548:10)\" /><text type=\"break\" /><text value=\"    at Module.load (node:internal/modules/cjs/loader:1288:32)\" /><text type=\"break\" /><text value=\"    at Module._load (node:internal/modules/cjs/loader:1104:12)\" /><text type=\"break\" /><text value=\"    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:174:12)\" /><text type=\"break\" /><text value=\"    at node:internal/main/run_main_module:28:49 {\" /><text type=\"break\" /><text value=\"  code: 'SQLITE_CANTOPEN'\" /><text type=\"break\" /><text value=\"}\" /><text type=\"break\" /><text value=\"\" /><text type=\"break\" /><text value=\"Node.js v20.17.0\" /><text type=\"break\" /><text value=\"\" /></content></output></code><p visible-if=\"wrong\">Asegúrese de elegir <code>const</code> seguido de <code>fruit</code> y finalmente <code>=</code>.</p></body></html>"
          },
          {
            "title": "Lesson #3 - Copy",
            "id": 132578,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Si tenemos un resultado, podemos enviar una respuesta, establecer el código de estado y devolver el objeto como JSON.</p><code version=\"2\" codelang=\"javascript\" name=\"app.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" express = \" /><text value=\"require\" class=\"built_in\" /><text value=\"(\" /><text value=\"&quot;express&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" db = \" /><text value=\"require\" class=\"built_in\" /><text value=\"(\" /><text value=\"&quot;./database.js&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" app = express();\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" port = \" /><text value=\"3000\" class=\"number\" /><text value=\";\" /><text type=\"break\" /><text type=\"break\" /><text value=\"app.get(\" /><text value=\"&quot;/fruits/:id&quot;\" class=\"string\" /><text value=\", (req, res) =&gt; {\" /><text type=\"break\" /><text value=\" \" /><text value=\"const\" class=\"keyword\" /><text value=\" sql = \" /><text value=\"&quot;SELECT * FROM fruits WHERE id = ?&quot;\" class=\"string\" /><text value=\";\" /><text type=\"break\" /><text value=\" \" /><text value=\"const\" class=\"keyword\" /><text value=\" fruit = db.prepare(sql).get(req.params.id);\" /><text type=\"break\" /><text value=\" \" /><text value=\"if\" class=\"keyword\" /><text value=\" (fruit) {\" /><text type=\"break\" /><text value=\"  res.status(\" /><text value=\"200\" class=\"number\" /><text value=\").json({\" /><text type=\"break\" /><text value=\"   \" /><text value=\"fruit\" class=\"attr\" /><text value=\": fruit\" /><text type=\"break\" /><text value=\"  });\" /><text type=\"break\" /><text value=\" }\" /><text type=\"break\" /><text value=\"});\" /><text type=\"break\" /><text type=\"break\" /><text value=\"app.listen(port, () =&gt; {\" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"`App is running on PORT \" /><text value=\"${port}\" class=\"subst\" /><text value=\"`\" /><text value=\");\" /><text type=\"break\" /><text value=\"});\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"257\" endIndex=\"259\" /><option startIndex=\"261\" endIndex=\"266\" /><option startIndex=\"272\" endIndex=\"275\" /><option startIndex=\"275\" endIndex=\"287\" /><option startIndex=\"287\" endIndex=\"292\" /><option startIndex=\"298\" endIndex=\"310\" /></options></interaction></interactions><output><content><text value=\"{\" /><text type=\"break\" /><text value=\"  &quot;fruit&quot;: { &quot;id&quot;: 1, &quot;name&quot;: &quot;Apple&quot; }\" /><text type=\"break\" /><text value=\"}\" /></content></output></code><code version=\"2\" codelang=\"javascript\" name=\"database.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" Database = \" /><text value=\"require\" class=\"built_in\" /><text value=\"(\" /><text value=\"&quot;better-sqlite3&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" db = \" /><text value=\"new\" class=\"keyword\" /><text value=\" Database(\" /><text value=\"&quot;database.db&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text type=\"break\" /><text value=\"db.exec(\" /><text value=\"`\" /><text type=\"break\" /><text value=\"    CREATE TABLE IF NOT EXISTS fruits (\" /><text type=\"break\" /><text value=\"      id INTEGER PRIMARY KEY AUTOINCREMENT,\" /><text type=\"break\" /><text value=\"      name TEXT NOT NULL\" /><text type=\"break\" /><text value=\"    )\" /><text type=\"break\" /><text value=\"`\" /><text value=\");\" /><text type=\"break\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" rowCount = db.prepare(\" /><text value=\"&quot;SELECT COUNT(*) AS count FROM fruits&quot;\" class=\"string\" /><text value=\")\" /><text type=\"break\" /><text value=\" .get().count;\" /><text type=\"break\" /><text type=\"break\" /><text value=\"if\" class=\"keyword\" /><text value=\" (rowCount === \" /><text value=\"0\" class=\"number\" /><text value=\") {\" /><text type=\"break\" /><text value=\" \" /><text value=\"const\" class=\"keyword\" /><text value=\" insert = db.prepare(\" /><text value=\"&quot;INSERT INTO fruits (name) VALUES (?)&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\" \" /><text value=\"const\" class=\"keyword\" /><text value=\" fruits = [\" /><text value=\"'Apple'\" class=\"string\" /><text value=\", \" /><text value=\"'Banana'\" class=\"string\" /><text value=\", \" /><text value=\"'Cherry'\" class=\"string\" /><text value=\"];\" /><text type=\"break\" /><text value=\" fruits.forEach(\" /><text value=\"fruit\" class=\"params\" /><text value=\" =&gt;\" /><text value=\" insert.run(fruit));\" /><text type=\"break\" /><text value=\"}\" /><text type=\"break\" /><text type=\"break\" /><text value=\"module\" class=\"built_in\" /><text value=\".exports = db;\" /></content><output><content><text value=\"\" /><text type=\"break\" /><text value=\"/usr/lib/node_modules/better-sqlite3/lib/database.js:69\" /><text type=\"break\" /><text value=\"  [util.cppdb]: { value: new addon.Database(filename, filenameGiven, anonymous, readonly, fileMustExist, timeout, verbose || null, buffer || null) },\" /><text type=\"break\" /><text value=\"                         ^\" /><text type=\"break\" /><text value=\"SqliteError: unable to open database file\" /><text type=\"break\" /><text value=\"    at new Database (/usr/lib/node_modules/better-sqlite3/lib/database.js:69:26)\" /><text type=\"break\" /><text value=\"    at Object.&lt;anonymous&gt; (/home/default/code/file.js:2:12)\" /><text type=\"break\" /><text value=\"    at Module._compile (node:internal/modules/cjs/loader:1469:14)\" /><text type=\"break\" /><text value=\"    at Module._extensions..js (node:internal/modules/cjs/loader:1548:10)\" /><text type=\"break\" /><text value=\"    at Module.load (node:internal/modules/cjs/loader:1288:32)\" /><text type=\"break\" /><text value=\"    at Module._load (node:internal/modules/cjs/loader:1104:12)\" /><text type=\"break\" /><text value=\"    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:174:12)\" /><text type=\"break\" /><text value=\"    at node:internal/main/run_main_module:28:49 {\" /><text type=\"break\" /><text value=\"  code: 'SQLITE_CANTOPEN'\" /><text type=\"break\" /><text value=\"}\" /><text type=\"break\" /><text value=\"\" /><text type=\"break\" /><text value=\"Node.js v20.17.0\" /><text type=\"break\" /><text value=\"\" /></content></output></code><p visible-if=\"wrong\">Asegúrese de elegir <code>if</code> seguido de <code>fruit</code> y luego <code>res</code>, <code>.status(200)</code>, <code>.json</code>, <code>fruit: fruit</code>.</p></body></html>"
          },
          {
            "title": "Lesson #3 - Copy - Copy",
            "id": 132592,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Si no obtenemos un resultado, deberíamos devolver con <code>404 Not Found</code> y un mensaje.</p><code version=\"2\" codelang=\"javascript\" name=\"app.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" express = \" /><text value=\"require\" class=\"built_in\" /><text value=\"(\" /><text value=\"&quot;express&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" db = \" /><text value=\"require\" class=\"built_in\" /><text value=\"(\" /><text value=\"&quot;./database.js&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" app = express();\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" port = \" /><text value=\"3000\" class=\"number\" /><text value=\";\" /><text type=\"break\" /><text type=\"break\" /><text value=\"app.get(\" /><text value=\"&quot;/fruits/:id&quot;\" class=\"string\" /><text value=\", (req, res) =&gt; {\" /><text type=\"break\" /><text value=\" \" /><text value=\"const\" class=\"keyword\" /><text value=\" sql = \" /><text value=\"&quot;SELECT * FROM fruits WHERE id = ?&quot;\" class=\"string\" /><text value=\";\" /><text type=\"break\" /><text value=\" \" /><text value=\"const\" class=\"keyword\" /><text value=\" fruit = db.prepare(sql).get(req.params.id);\" /><text type=\"break\" /><text value=\" \" /><text value=\"if\" class=\"keyword\" /><text value=\" (fruit) {\" /><text type=\"break\" /><text value=\"  res.status(\" /><text value=\"200\" class=\"number\" /><text value=\").json({\" /><text type=\"break\" /><text value=\"   \" /><text value=\"fruit\" class=\"attr\" /><text value=\": fruit\" /><text type=\"break\" /><text value=\"  });\" /><text type=\"break\" /><text value=\" } \" /><text value=\"else\" class=\"keyword\" /><text value=\" {\" /><text type=\"break\" /><text value=\"  res.status(\" /><text value=\"404\" class=\"number\" /><text value=\").json({\" /><text type=\"break\" /><text value=\"   \" /><text value=\"message\" class=\"attr\" /><text value=\": \" /><text value=\"&quot;Fruit not found&quot;\" class=\"string\" /><text type=\"break\" /><text value=\"  });\" /><text type=\"break\" /><text value=\" }\" /><text type=\"break\" /><text value=\"});\" /><text type=\"break\" /><text type=\"break\" /><text value=\"app.listen(port, () =&gt; {\" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"`App is running on PORT \" /><text value=\"${port}\" class=\"subst\" /><text value=\"`\" /><text value=\");\" /><text type=\"break\" /><text value=\"});\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"320\" endIndex=\"324\" /><option startIndex=\"329\" endIndex=\"332\" /><option startIndex=\"332\" endIndex=\"344\" /><option startIndex=\"344\" endIndex=\"349\" /><option startIndex=\"355\" endIndex=\"381\" /></options></interaction></interactions><output><content><text value=\"{ message: &quot;Fruit not found&quot; }\" /></content></output></code><code version=\"2\" codelang=\"javascript\" name=\"database.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" Database = \" /><text value=\"require\" class=\"built_in\" /><text value=\"(\" /><text value=\"&quot;better-sqlite3&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" db = \" /><text value=\"new\" class=\"keyword\" /><text value=\" Database(\" /><text value=\"&quot;database.db&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text type=\"break\" /><text value=\"db.exec(\" /><text value=\"`\" /><text type=\"break\" /><text value=\"    CREATE TABLE IF NOT EXISTS fruits (\" /><text type=\"break\" /><text value=\"      id INTEGER PRIMARY KEY AUTOINCREMENT,\" /><text type=\"break\" /><text value=\"      name TEXT NOT NULL\" /><text type=\"break\" /><text value=\"    )\" /><text type=\"break\" /><text value=\"`\" /><text value=\");\" /><text type=\"break\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" rowCount = db.prepare(\" /><text value=\"&quot;SELECT COUNT(*) AS count FROM fruits&quot;\" class=\"string\" /><text value=\")\" /><text type=\"break\" /><text value=\" .get().count;\" /><text type=\"break\" /><text type=\"break\" /><text value=\"if\" class=\"keyword\" /><text value=\" (rowCount === \" /><text value=\"0\" class=\"number\" /><text value=\") {\" /><text type=\"break\" /><text value=\" \" /><text value=\"const\" class=\"keyword\" /><text value=\" insert = db.prepare(\" /><text value=\"&quot;INSERT INTO fruits (name) VALUES (?)&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\" \" /><text value=\"const\" class=\"keyword\" /><text value=\" fruits = [\" /><text value=\"'Apple'\" class=\"string\" /><text value=\", \" /><text value=\"'Banana'\" class=\"string\" /><text value=\", \" /><text value=\"'Cherry'\" class=\"string\" /><text value=\"];\" /><text type=\"break\" /><text value=\" fruits.forEach(\" /><text value=\"fruit\" class=\"params\" /><text value=\" =&gt;\" /><text value=\" insert.run(fruit));\" /><text type=\"break\" /><text value=\"}\" /><text type=\"break\" /><text type=\"break\" /><text value=\"module\" class=\"built_in\" /><text value=\".exports = db;\" /></content><output><content><text value=\"\" /><text type=\"break\" /><text value=\"/usr/lib/node_modules/better-sqlite3/lib/database.js:69\" /><text type=\"break\" /><text value=\"  [util.cppdb]: { value: new addon.Database(filename, filenameGiven, anonymous, readonly, fileMustExist, timeout, verbose || null, buffer || null) },\" /><text type=\"break\" /><text value=\"                         ^\" /><text type=\"break\" /><text value=\"SqliteError: unable to open database file\" /><text type=\"break\" /><text value=\"    at new Database (/usr/lib/node_modules/better-sqlite3/lib/database.js:69:26)\" /><text type=\"break\" /><text value=\"    at Object.&lt;anonymous&gt; (/home/default/code/file.js:2:12)\" /><text type=\"break\" /><text value=\"    at Module._compile (node:internal/modules/cjs/loader:1469:14)\" /><text type=\"break\" /><text value=\"    at Module._extensions..js (node:internal/modules/cjs/loader:1548:10)\" /><text type=\"break\" /><text value=\"    at Module.load (node:internal/modules/cjs/loader:1288:32)\" /><text type=\"break\" /><text value=\"    at Module._load (node:internal/modules/cjs/loader:1104:12)\" /><text type=\"break\" /><text value=\"    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:174:12)\" /><text type=\"break\" /><text value=\"    at node:internal/main/run_main_module:28:49 {\" /><text type=\"break\" /><text value=\"  code: 'SQLITE_CANTOPEN'\" /><text type=\"break\" /><text value=\"}\" /><text type=\"break\" /><text value=\"\" /><text type=\"break\" /><text value=\"Node.js v20.17.0\" /><text type=\"break\" /><text value=\"\" /></content></output></code><p visible-if=\"wrong\">Asegúrese de elegir <code>else</code> seguido de <code>res</code> y luego <code>.status(404)</code>, <code>.json</code>, <code>message: \"Fruit not found\"</code>.</p></body></html>"
          },
          {
            "title": "Lesson #3 - Copy - Copy - Copy",
            "id": 132620,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Establece el código de estado correcto.</p><code version=\"2\" codelang=\"javascript\" name=\"app.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" express = \" /><text value=\"require\" class=\"built_in\" /><text value=\"(\" /><text value=\"&quot;express&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" db = \" /><text value=\"require\" class=\"built_in\" /><text value=\"(\" /><text value=\"&quot;./database.js&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" app = express();\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" port = \" /><text value=\"3000\" class=\"number\" /><text value=\";\" /><text type=\"break\" /><text type=\"break\" /><text value=\"app.get(\" /><text value=\"&quot;/fruits/:id&quot;\" class=\"string\" /><text value=\", (req, res) =&gt; {\" /><text type=\"break\" /><text value=\" \" /><text value=\"const\" class=\"keyword\" /><text value=\" sql = \" /><text value=\"&quot;SELECT * FROM fruits WHERE id = ?&quot;\" class=\"string\" /><text value=\";\" /><text type=\"break\" /><text value=\" \" /><text value=\"const\" class=\"keyword\" /><text value=\" fruit = db.prepare(sql).get(req.params.id);\" /><text type=\"break\" /><text value=\" \" /><text value=\"if\" class=\"keyword\" /><text value=\" (fruit) {\" /><text type=\"break\" /><text value=\"  res.status(\" /><text value=\"200\" class=\"number\" /><text value=\").json({\" /><text type=\"break\" /><text value=\"   \" /><text value=\"fruit\" class=\"attr\" /><text value=\": fruit\" /><text type=\"break\" /><text value=\"  });\" /><text type=\"break\" /><text value=\" } \" /><text value=\"else\" class=\"keyword\" /><text value=\" {\" /><text type=\"break\" /><text value=\"  res.status(\" /><text value=\"404\" class=\"number\" /><text value=\").json({\" /><text type=\"break\" /><text value=\"   \" /><text value=\"message\" class=\"attr\" /><text value=\": \" /><text value=\"&quot;Fruit not found&quot;\" class=\"string\" /><text type=\"break\" /><text value=\"  });\" /><text type=\"break\" /><text value=\" }\" /><text type=\"break\" /><text value=\"});\" /><text type=\"break\" /><text type=\"break\" /><text value=\"app.listen(port, () =&gt; {\" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"`App is running on PORT \" /><text value=\"${port}\" class=\"subst\" /><text value=\"`\" /><text value=\");\" /><text type=\"break\" /><text value=\"});\" /></content><interactions><interaction type=\"validatedInput\" isDefault=\"true\" startIndex=\"340\" endIndex=\"343\" /></interactions><output><content><text value=\"{ message: &quot;Fruit not found&quot; }\" /></content></output></code><code version=\"2\" codelang=\"javascript\" name=\"database.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" Database = \" /><text value=\"require\" class=\"built_in\" /><text value=\"(\" /><text value=\"&quot;better-sqlite3&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" db = \" /><text value=\"new\" class=\"keyword\" /><text value=\" Database(\" /><text value=\"&quot;database.db&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text type=\"break\" /><text value=\"db.exec(\" /><text value=\"`\" /><text type=\"break\" /><text value=\"    CREATE TABLE IF NOT EXISTS fruits (\" /><text type=\"break\" /><text value=\"      id INTEGER PRIMARY KEY AUTOINCREMENT,\" /><text type=\"break\" /><text value=\"      name TEXT NOT NULL\" /><text type=\"break\" /><text value=\"    )\" /><text type=\"break\" /><text value=\"`\" /><text value=\");\" /><text type=\"break\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" rowCount = db.prepare(\" /><text value=\"&quot;SELECT COUNT(*) AS count FROM fruits&quot;\" class=\"string\" /><text value=\")\" /><text type=\"break\" /><text value=\" .get().count;\" /><text type=\"break\" /><text type=\"break\" /><text value=\"if\" class=\"keyword\" /><text value=\" (rowCount === \" /><text value=\"0\" class=\"number\" /><text value=\") {\" /><text type=\"break\" /><text value=\" \" /><text value=\"const\" class=\"keyword\" /><text value=\" insert = db.prepare(\" /><text value=\"&quot;INSERT INTO fruits (name) VALUES (?)&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\" \" /><text value=\"const\" class=\"keyword\" /><text value=\" fruits = [\" /><text value=\"'Apple'\" class=\"string\" /><text value=\", \" /><text value=\"'Banana'\" class=\"string\" /><text value=\", \" /><text value=\"'Cherry'\" class=\"string\" /><text value=\"];\" /><text type=\"break\" /><text value=\" fruits.forEach(\" /><text value=\"fruit\" class=\"params\" /><text value=\" =&gt;\" /><text value=\" insert.run(fruit));\" /><text type=\"break\" /><text value=\"}\" /><text type=\"break\" /><text type=\"break\" /><text value=\"module\" class=\"built_in\" /><text value=\".exports = db;\" /></content><output><content><text value=\"\" /><text type=\"break\" /><text value=\"/usr/lib/node_modules/better-sqlite3/lib/database.js:69\" /><text type=\"break\" /><text value=\"  [util.cppdb]: { value: new addon.Database(filename, filenameGiven, anonymous, readonly, fileMustExist, timeout, verbose || null, buffer || null) },\" /><text type=\"break\" /><text value=\"                         ^\" /><text type=\"break\" /><text value=\"SqliteError: unable to open database file\" /><text type=\"break\" /><text value=\"    at new Database (/usr/lib/node_modules/better-sqlite3/lib/database.js:69:26)\" /><text type=\"break\" /><text value=\"    at Object.&lt;anonymous&gt; (/home/default/code/file.js:2:12)\" /><text type=\"break\" /><text value=\"    at Module._compile (node:internal/modules/cjs/loader:1469:14)\" /><text type=\"break\" /><text value=\"    at Module._extensions..js (node:internal/modules/cjs/loader:1548:10)\" /><text type=\"break\" /><text value=\"    at Module.load (node:internal/modules/cjs/loader:1288:32)\" /><text type=\"break\" /><text value=\"    at Module._load (node:internal/modules/cjs/loader:1104:12)\" /><text type=\"break\" /><text value=\"    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:174:12)\" /><text type=\"break\" /><text value=\"    at node:internal/main/run_main_module:28:49 {\" /><text type=\"break\" /><text value=\"  code: 'SQLITE_CANTOPEN'\" /><text type=\"break\" /><text value=\"}\" /><text type=\"break\" /><text value=\"\" /><text type=\"break\" /><text value=\"Node.js v20.17.0\" /><text type=\"break\" /><text value=\"\" /></content></output></code><p visible-if=\"wrong\">Asegúrese de elegir <code>404</code>.</p></body></html>"
          },
          {
            "title": "Lesson #13",
            "id": 132625,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>¿Qué sucede si no se encuentra el elemento para un id dado?</p><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\">Se debe devolver un estado <code>404</code></item><item value=\"2\" correct=\"false\">Se debe devolver un estado <code>200</code></item></selection><p visible-if=\"wrong\">Se debe devolver un estado <code>404</code>.</p></body></html>"
          },
          {
            "title": "Lesson #3 - Copy - Copy - Copy - Copy",
            "id": 132621,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Crea una declaración SQL parametrizada que seleccione el elemento con un id dado de la tabla fruits.</p><code version=\"2\" codelang=\"javascript\" name=\"app.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" express = \" /><text value=\"require\" class=\"built_in\" /><text value=\"(\" /><text value=\"&quot;express&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" db = \" /><text value=\"require\" class=\"built_in\" /><text value=\"(\" /><text value=\"&quot;./database.js&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" app = express();\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" port = \" /><text value=\"3000\" class=\"number\" /><text value=\";\" /><text type=\"break\" /><text type=\"break\" /><text value=\"app.get(\" /><text value=\"&quot;/fruits/:id&quot;\" class=\"string\" /><text value=\", (req, res) =&gt; {\" /><text type=\"break\" /><text value=\" \" /><text value=\"const\" class=\"keyword\" /><text value=\" sql = \" /><text value=\"&quot;SELECT * FROM fruits WHERE id = ?&quot;\" class=\"string\" /><text value=\";\" /><text type=\"break\" /><text value=\" \" /><text value=\"const\" class=\"keyword\" /><text value=\" fruit = db.prepare(sql).get(req.params.id);\" /><text type=\"break\" /><text value=\" \" /><text value=\"if\" class=\"keyword\" /><text value=\" (fruit) {\" /><text type=\"break\" /><text value=\"  res.status(\" /><text value=\"200\" class=\"number\" /><text value=\").json({\" /><text type=\"break\" /><text value=\"   \" /><text value=\"fruit\" class=\"attr\" /><text value=\": fruit\" /><text type=\"break\" /><text value=\"  });\" /><text type=\"break\" /><text value=\" } \" /><text value=\"else\" class=\"keyword\" /><text value=\" {\" /><text type=\"break\" /><text value=\"  res.status(\" /><text value=\"404\" class=\"number\" /><text value=\").json({\" /><text type=\"break\" /><text value=\"   \" /><text value=\"message\" class=\"attr\" /><text value=\": \" /><text value=\"&quot;Fruit not found&quot;\" class=\"string\" /><text type=\"break\" /><text value=\"  });\" /><text type=\"break\" /><text value=\" }\" /><text type=\"break\" /><text value=\"});\" /><text type=\"break\" /><text type=\"break\" /><text value=\"app.listen(port, () =&gt; {\" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"`App is running on PORT \" /><text value=\"${port}\" class=\"subst\" /><text value=\"`\" /><text value=\");\" /><text type=\"break\" /><text value=\"});\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"169\" endIndex=\"175\" /><option startIndex=\"176\" endIndex=\"177\" /><option startIndex=\"178\" endIndex=\"182\" /><option startIndex=\"183\" endIndex=\"189\" /><option startIndex=\"190\" endIndex=\"195\" /><option startIndex=\"196\" endIndex=\"198\" /><option startIndex=\"199\" endIndex=\"200\" /><option startIndex=\"201\" endIndex=\"202\" /></options></interaction></interactions><output><content><text value=\"{\" /><text type=\"break\" /><text value=\"  &quot;fruit&quot;: { &quot;id&quot;: 1, &quot;name&quot;: &quot;Apple&quot; }\" /><text type=\"break\" /><text value=\"}\" /></content></output></code><code version=\"2\" codelang=\"javascript\" name=\"database.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" Database = \" /><text value=\"require\" class=\"built_in\" /><text value=\"(\" /><text value=\"&quot;better-sqlite3&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" db = \" /><text value=\"new\" class=\"keyword\" /><text value=\" Database(\" /><text value=\"&quot;database.db&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text type=\"break\" /><text value=\"db.exec(\" /><text value=\"`\" /><text type=\"break\" /><text value=\"    CREATE TABLE IF NOT EXISTS fruits (\" /><text type=\"break\" /><text value=\"      id INTEGER PRIMARY KEY AUTOINCREMENT,\" /><text type=\"break\" /><text value=\"      name TEXT NOT NULL\" /><text type=\"break\" /><text value=\"    )\" /><text type=\"break\" /><text value=\"`\" /><text value=\");\" /><text type=\"break\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" rowCount = db.prepare(\" /><text value=\"&quot;SELECT COUNT(*) AS count FROM fruits&quot;\" class=\"string\" /><text value=\")\" /><text type=\"break\" /><text value=\" .get().count;\" /><text type=\"break\" /><text type=\"break\" /><text value=\"if\" class=\"keyword\" /><text value=\" (rowCount === \" /><text value=\"0\" class=\"number\" /><text value=\") {\" /><text type=\"break\" /><text value=\" \" /><text value=\"const\" class=\"keyword\" /><text value=\" insert = db.prepare(\" /><text value=\"&quot;INSERT INTO fruits (name) VALUES (?)&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\" \" /><text value=\"const\" class=\"keyword\" /><text value=\" fruits = [\" /><text value=\"'Apple'\" class=\"string\" /><text value=\", \" /><text value=\"'Banana'\" class=\"string\" /><text value=\", \" /><text value=\"'Cherry'\" class=\"string\" /><text value=\"];\" /><text type=\"break\" /><text value=\" fruits.forEach(\" /><text value=\"fruit\" class=\"params\" /><text value=\" =&gt;\" /><text value=\" insert.run(fruit));\" /><text type=\"break\" /><text value=\"}\" /><text type=\"break\" /><text type=\"break\" /><text value=\"module\" class=\"built_in\" /><text value=\".exports = db;\" /></content><output><content><text value=\"\" /><text type=\"break\" /><text value=\"/usr/lib/node_modules/better-sqlite3/lib/database.js:69\" /><text type=\"break\" /><text value=\"  [util.cppdb]: { value: new addon.Database(filename, filenameGiven, anonymous, readonly, fileMustExist, timeout, verbose || null, buffer || null) },\" /><text type=\"break\" /><text value=\"                         ^\" /><text type=\"break\" /><text value=\"SqliteError: unable to open database file\" /><text type=\"break\" /><text value=\"    at new Database (/usr/lib/node_modules/better-sqlite3/lib/database.js:69:26)\" /><text type=\"break\" /><text value=\"    at Object.&lt;anonymous&gt; (/home/default/code/file.js:2:12)\" /><text type=\"break\" /><text value=\"    at Module._compile (node:internal/modules/cjs/loader:1469:14)\" /><text type=\"break\" /><text value=\"    at Module._extensions..js (node:internal/modules/cjs/loader:1548:10)\" /><text type=\"break\" /><text value=\"    at Module.load (node:internal/modules/cjs/loader:1288:32)\" /><text type=\"break\" /><text value=\"    at Module._load (node:internal/modules/cjs/loader:1104:12)\" /><text type=\"break\" /><text value=\"    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:174:12)\" /><text type=\"break\" /><text value=\"    at node:internal/main/run_main_module:28:49 {\" /><text type=\"break\" /><text value=\"  code: 'SQLITE_CANTOPEN'\" /><text type=\"break\" /><text value=\"}\" /><text type=\"break\" /><text value=\"\" /><text type=\"break\" /><text value=\"Node.js v20.17.0\" /><text type=\"break\" /><text value=\"\" /></content></output></code><p visible-if=\"wrong\">Asegúrese de elegir <code>SELECT</code> seguido de <code>*</code> y luego <code>FROM</code>, <code>fruits</code>, <code>WHERE</code>, <code>id</code>, <code>=</code>, <code>?</code>.</p></body></html>"
          },
          {
            "title": "Lesson #12",
            "id": 132624,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>¿Qué hace <code>res.status(200).json({ fruit: fruit })</code>?</p><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\">Envía una respuesta JSON con un estado <code>200</code> y el objeto de fruta solicitado</item><item value=\"2\" correct=\"false\"> Inserta la fruta en la base de datos</item></selection><p visible-if=\"wrong\">Envía una respuesta JSON con un estado <code>200</code> y el objeto de fruta solicitado.</p></body></html>"
          },
          {
            "title": "Lesson #3 - Copy - Copy - Copy - Copy",
            "id": 132623,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Ejecuta la declaración SQL y pasa el parámetro de ruta para el id.</p><code version=\"2\" codelang=\"javascript\" name=\"app.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" express = \" /><text value=\"require\" class=\"built_in\" /><text value=\"(\" /><text value=\"&quot;express&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" db = \" /><text value=\"require\" class=\"built_in\" /><text value=\"(\" /><text value=\"&quot;./database.js&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" app = express();\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" port = \" /><text value=\"3000\" class=\"number\" /><text value=\";\" /><text type=\"break\" /><text type=\"break\" /><text value=\"app.get(\" /><text value=\"&quot;/fruits/:id&quot;\" class=\"string\" /><text value=\", (req, res) =&gt; {\" /><text type=\"break\" /><text value=\" \" /><text value=\"const\" class=\"keyword\" /><text value=\" sql = \" /><text value=\"&quot;SELECT * FROM fruits WHERE id = ?&quot;\" class=\"string\" /><text value=\";\" /><text type=\"break\" /><text value=\" \" /><text value=\"const\" class=\"keyword\" /><text value=\" fruit = db.prepare(sql).get(req.params.id);\" /><text type=\"break\" /><text value=\" \" /><text value=\"if\" class=\"keyword\" /><text value=\" (fruit) {\" /><text type=\"break\" /><text value=\"  res.status(\" /><text value=\"200\" class=\"number\" /><text value=\").json({\" /><text type=\"break\" /><text value=\"   \" /><text value=\"fruit\" class=\"attr\" /><text value=\": fruit\" /><text type=\"break\" /><text value=\"  });\" /><text type=\"break\" /><text value=\" } \" /><text value=\"else\" class=\"keyword\" /><text value=\" {\" /><text type=\"break\" /><text value=\"  res.status(\" /><text value=\"404\" class=\"number\" /><text value=\").json({\" /><text type=\"break\" /><text value=\"   \" /><text value=\"message\" class=\"attr\" /><text value=\": \" /><text value=\"&quot;Fruit not found&quot;\" class=\"string\" /><text type=\"break\" /><text value=\"  });\" /><text type=\"break\" /><text value=\" }\" /><text type=\"break\" /><text value=\"});\" /><text type=\"break\" /><text type=\"break\" /><text value=\"app.listen(port, () =&gt; {\" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"`App is running on PORT \" /><text value=\"${port}\" class=\"subst\" /><text value=\"`\" /><text value=\");\" /><text type=\"break\" /><text value=\"});\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"240\" endIndex=\"243\" /><option startIndex=\"243\" endIndex=\"244\" /><option startIndex=\"244\" endIndex=\"250\" /><option startIndex=\"250\" endIndex=\"251\" /><option startIndex=\"251\" endIndex=\"253\" /></options></interaction></interactions><output><content><text value=\"{\" /><text type=\"break\" /><text value=\"  &quot;fruit&quot;: { &quot;id&quot;: 1, &quot;name&quot;: &quot;Apple&quot; }\" /><text type=\"break\" /><text value=\"}\" /></content></output></code><code version=\"2\" codelang=\"javascript\" name=\"database.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" Database = \" /><text value=\"require\" class=\"built_in\" /><text value=\"(\" /><text value=\"&quot;better-sqlite3&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" db = \" /><text value=\"new\" class=\"keyword\" /><text value=\" Database(\" /><text value=\"&quot;database.db&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text type=\"break\" /><text value=\"db.exec(\" /><text value=\"`\" /><text type=\"break\" /><text value=\"    CREATE TABLE IF NOT EXISTS fruits (\" /><text type=\"break\" /><text value=\"      id INTEGER PRIMARY KEY AUTOINCREMENT,\" /><text type=\"break\" /><text value=\"      name TEXT NOT NULL\" /><text type=\"break\" /><text value=\"    )\" /><text type=\"break\" /><text value=\"`\" /><text value=\");\" /><text type=\"break\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" rowCount = db.prepare(\" /><text value=\"&quot;SELECT COUNT(*) AS count FROM fruits&quot;\" class=\"string\" /><text value=\")\" /><text type=\"break\" /><text value=\" .get().count;\" /><text type=\"break\" /><text type=\"break\" /><text value=\"if\" class=\"keyword\" /><text value=\" (rowCount === \" /><text value=\"0\" class=\"number\" /><text value=\") {\" /><text type=\"break\" /><text value=\" \" /><text value=\"const\" class=\"keyword\" /><text value=\" insert = db.prepare(\" /><text value=\"&quot;INSERT INTO fruits (name) VALUES (?)&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\" \" /><text value=\"const\" class=\"keyword\" /><text value=\" fruits = [\" /><text value=\"'Apple'\" class=\"string\" /><text value=\", \" /><text value=\"'Banana'\" class=\"string\" /><text value=\", \" /><text value=\"'Cherry'\" class=\"string\" /><text value=\"];\" /><text type=\"break\" /><text value=\" fruits.forEach(\" /><text value=\"fruit\" class=\"params\" /><text value=\" =&gt;\" /><text value=\" insert.run(fruit));\" /><text type=\"break\" /><text value=\"}\" /><text type=\"break\" /><text type=\"break\" /><text value=\"module\" class=\"built_in\" /><text value=\".exports = db;\" /></content><output><content><text value=\"\" /><text type=\"break\" /><text value=\"/usr/lib/node_modules/better-sqlite3/lib/database.js:69\" /><text type=\"break\" /><text value=\"  [util.cppdb]: { value: new addon.Database(filename, filenameGiven, anonymous, readonly, fileMustExist, timeout, verbose || null, buffer || null) },\" /><text type=\"break\" /><text value=\"                         ^\" /><text type=\"break\" /><text value=\"SqliteError: unable to open database file\" /><text type=\"break\" /><text value=\"    at new Database (/usr/lib/node_modules/better-sqlite3/lib/database.js:69:26)\" /><text type=\"break\" /><text value=\"    at Object.&lt;anonymous&gt; (/home/default/code/file.js:2:12)\" /><text type=\"break\" /><text value=\"    at Module._compile (node:internal/modules/cjs/loader:1469:14)\" /><text type=\"break\" /><text value=\"    at Module._extensions..js (node:internal/modules/cjs/loader:1548:10)\" /><text type=\"break\" /><text value=\"    at Module.load (node:internal/modules/cjs/loader:1288:32)\" /><text type=\"break\" /><text value=\"    at Module._load (node:internal/modules/cjs/loader:1104:12)\" /><text type=\"break\" /><text value=\"    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:174:12)\" /><text type=\"break\" /><text value=\"    at node:internal/main/run_main_module:28:49 {\" /><text type=\"break\" /><text value=\"  code: 'SQLITE_CANTOPEN'\" /><text type=\"break\" /><text value=\"}\" /><text type=\"break\" /><text value=\"\" /><text type=\"break\" /><text value=\"Node.js v20.17.0\" /><text type=\"break\" /><text value=\"\" /></content></output></code><p visible-if=\"wrong\">Asegúrese de elegir <code>req</code> seguido de <code>.</code> y luego <code>params</code>, <code>.</code>, <code>id</code>.</p></body></html>"
          },
          {
            "title": "Lesson #14",
            "id": 132626,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p> ¿Para qué se utiliza <code>req.params.id</code>?</p><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\"> Recupera el parámetro <code>id</code> de la URL (por ejemplo, <code>/fruits/1</code> recupera <code>1</code>)</item><item value=\"2\" correct=\"false\"> Recupera el <code>id</code> del <code>request body</code></item></selection><p visible-if=\"wrong\"> Recupera el parámetro <code>id</code> de la URL (por ejemplo, <code>/fruits/1</code> recupera <code>1</code>).</p></body></html>"
          }
        ]
      },
      {
        "id": 15036,
        "title": "Endpoints POST",
        "type": "practiceLevel1",
        "lessons": [
          {
            "title": "Lesson #1",
            "id": 132594,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Hemos cubierto anteriormente la recuperación de datos de los endpoints <code>GET</code>.</p><p>Ahora, veamos cómo agregar nuevos datos con un endpoint <code>POST</code>.</p><code version=\"2\" codelang=\"javascript\" name=\"database.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" Database = \" /><text value=\"require\" class=\"built_in\" /><text value=\"(\" /><text value=\"&quot;better-sqlite3&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" db = \" /><text value=\"new\" class=\"keyword\" /><text value=\" Database(\" /><text value=\"&quot;database.db&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text type=\"break\" /><text value=\"db.exec(\" /><text value=\"`\" /><text type=\"break\" /><text value=\"    CREATE TABLE IF NOT EXISTS fruits (\" /><text type=\"break\" /><text value=\"      id INTEGER PRIMARY KEY AUTOINCREMENT,\" /><text type=\"break\" /><text value=\"      name TEXT NOT NULL\" /><text type=\"break\" /><text value=\"    )\" /><text type=\"break\" /><text value=\"`\" /><text value=\");\" /><text type=\"break\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" rowCount = db.prepare(\" /><text value=\"&quot;SELECT COUNT(*) AS count FROM fruits&quot;\" class=\"string\" /><text value=\")\" /><text type=\"break\" /><text value=\" .get().count;\" /><text type=\"break\" /><text type=\"break\" /><text value=\"if\" class=\"keyword\" /><text value=\" (rowCount === \" /><text value=\"0\" class=\"number\" /><text value=\") {\" /><text type=\"break\" /><text value=\" \" /><text value=\"const\" class=\"keyword\" /><text value=\" insert = db.prepare(\" /><text value=\"&quot;INSERT INTO fruits (name) VALUES (?)&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\" \" /><text value=\"const\" class=\"keyword\" /><text value=\" fruits = [\" /><text value=\"'Apple'\" class=\"string\" /><text value=\", \" /><text value=\"'Banana'\" class=\"string\" /><text value=\", \" /><text value=\"'Cherry'\" class=\"string\" /><text value=\"];\" /><text type=\"break\" /><text value=\" fruits.forEach(\" /><text value=\"fruit\" class=\"params\" /><text value=\" =&gt;\" /><text value=\" insert.run(fruit));\" /><text type=\"break\" /><text value=\"}\" /><text type=\"break\" /><text type=\"break\" /><text value=\"module\" class=\"built_in\" /><text value=\".exports = db;\" /></content></code></body></html>"
          },
          {
            "title": "Lesson #3 - Copy - Copy",
            "id": 132595,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Continuamos trabajando con nuestro archivo <code>databse.js</code>, que nos proporciona una base de datos con la que trabajar.</p><p>Comencemos configurando un endpoint <code>POST</code>.</p><code version=\"2\" codelang=\"javascript\" name=\"app.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" express = \" /><text value=\"require\" class=\"built_in\" /><text value=\"(\" /><text value=\"&quot;express&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" db = \" /><text value=\"require\" class=\"built_in\" /><text value=\"(\" /><text value=\"&quot;./database.js&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" app = express();\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" port = \" /><text value=\"3000\" class=\"number\" /><text value=\";\" /><text type=\"break\" /><text type=\"break\" /><text value=\"app.post(\" /><text value=\"&quot;/fruits&quot;\" class=\"string\" /><text value=\", (req, res) =&gt; {\" /><text type=\"break\" /><text type=\"break\" /><text value=\"});\" /><text type=\"break\" /><text type=\"break\" /><text value=\"app.listen(port, () =&gt; {\" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"`App is running on PORT \" /><text value=\"${port}\" class=\"subst\" /><text value=\"`\" /><text value=\");\" /><text type=\"break\" /><text value=\"});\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"116\" endIndex=\"119\" /><option startIndex=\"119\" endIndex=\"120\" /><option startIndex=\"120\" endIndex=\"124\" /><option startIndex=\"125\" endIndex=\"134\" /></options></interaction></interactions></code><code version=\"2\" codelang=\"javascript\" name=\"database.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" Database = \" /><text value=\"require\" class=\"built_in\" /><text value=\"(\" /><text value=\"&quot;better-sqlite3&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" db = \" /><text value=\"new\" class=\"keyword\" /><text value=\" Database(\" /><text value=\"&quot;database.db&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text type=\"break\" /><text value=\"db.exec(\" /><text value=\"`\" /><text type=\"break\" /><text value=\"    CREATE TABLE IF NOT EXISTS fruits (\" /><text type=\"break\" /><text value=\"      id INTEGER PRIMARY KEY AUTOINCREMENT,\" /><text type=\"break\" /><text value=\"      name TEXT NOT NULL\" /><text type=\"break\" /><text value=\"    )\" /><text type=\"break\" /><text value=\"`\" /><text value=\");\" /><text type=\"break\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" rowCount = db.prepare(\" /><text value=\"&quot;SELECT COUNT(*) AS count FROM fruits&quot;\" class=\"string\" /><text value=\")\" /><text type=\"break\" /><text value=\" .get().count;\" /><text type=\"break\" /><text type=\"break\" /><text value=\"if\" class=\"keyword\" /><text value=\" (rowCount === \" /><text value=\"0\" class=\"number\" /><text value=\") {\" /><text type=\"break\" /><text value=\" \" /><text value=\"const\" class=\"keyword\" /><text value=\" insert = db.prepare(\" /><text value=\"&quot;INSERT INTO fruits (name) VALUES (?)&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\" \" /><text value=\"const\" class=\"keyword\" /><text value=\" fruits = [\" /><text value=\"'Apple'\" class=\"string\" /><text value=\", \" /><text value=\"'Banana'\" class=\"string\" /><text value=\", \" /><text value=\"'Cherry'\" class=\"string\" /><text value=\"];\" /><text type=\"break\" /><text value=\" fruits.forEach(\" /><text value=\"fruit\" class=\"params\" /><text value=\" =&gt;\" /><text value=\" insert.run(fruit));\" /><text type=\"break\" /><text value=\"}\" /><text type=\"break\" /><text type=\"break\" /><text value=\"module\" class=\"built_in\" /><text value=\".exports = db;\" /></content><output><content><text value=\"\" /><text type=\"break\" /><text value=\"/usr/lib/node_modules/better-sqlite3/lib/database.js:69\" /><text type=\"break\" /><text value=\"  [util.cppdb]: { value: new addon.Database(filename, filenameGiven, anonymous, readonly, fileMustExist, timeout, verbose || null, buffer || null) },\" /><text type=\"break\" /><text value=\"                         ^\" /><text type=\"break\" /><text value=\"SqliteError: unable to open database file\" /><text type=\"break\" /><text value=\"    at new Database (/usr/lib/node_modules/better-sqlite3/lib/database.js:69:26)\" /><text type=\"break\" /><text value=\"    at Object.&lt;anonymous&gt; (/home/default/code/file.js:2:12)\" /><text type=\"break\" /><text value=\"    at Module._compile (node:internal/modules/cjs/loader:1469:14)\" /><text type=\"break\" /><text value=\"    at Module._extensions..js (node:internal/modules/cjs/loader:1548:10)\" /><text type=\"break\" /><text value=\"    at Module.load (node:internal/modules/cjs/loader:1288:32)\" /><text type=\"break\" /><text value=\"    at Module._load (node:internal/modules/cjs/loader:1104:12)\" /><text type=\"break\" /><text value=\"    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:174:12)\" /><text type=\"break\" /><text value=\"    at node:internal/main/run_main_module:28:49 {\" /><text type=\"break\" /><text value=\"  code: 'SQLITE_CANTOPEN'\" /><text type=\"break\" /><text value=\"}\" /><text type=\"break\" /><text value=\"\" /><text type=\"break\" /><text value=\"Node.js v20.17.0\" /><text type=\"break\" /><text value=\"\" /></content></output></code><p visible-if=\"wrong\">Asegúrese de elegir <code>app</code> seguido de <code>.</code> y luego <code>post</code>, <code>\"/fruits\"</code>.</p></body></html>"
          },
          {
            "title": "Lesson #3 - Copy - Copy - Copy",
            "id": 132601,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Para acceder a los datos enviados en el cuerpo, usaremos el middleware integrado de Express <code>express.json</code>.</p><code version=\"2\" codelang=\"javascript\" name=\"app.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" express = \" /><text value=\"require\" class=\"built_in\" /><text value=\"(\" /><text value=\"&quot;express&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" db = \" /><text value=\"require\" class=\"built_in\" /><text value=\"(\" /><text value=\"&quot;./database.js&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" app = express();\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" port = \" /><text value=\"3000\" class=\"number\" /><text value=\";\" /><text type=\"break\" /><text type=\"break\" /><text value=\"app.use(express.json());\" /><text type=\"break\" /><text type=\"break\" /><text value=\"app.post(\" /><text value=\"&quot;/fruits&quot;\" class=\"string\" /><text value=\", (req, res) =&gt; {\" /><text type=\"break\" /><text type=\"break\" /><text value=\"});\" /><text type=\"break\" /><text type=\"break\" /><text value=\"app.listen(port, () =&gt; {\" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"`App is running on PORT \" /><text value=\"${port}\" class=\"subst\" /><text value=\"`\" /><text value=\");\" /><text type=\"break\" /><text value=\"});\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"116\" endIndex=\"119\" /><option startIndex=\"119\" endIndex=\"123\" /><option startIndex=\"124\" endIndex=\"138\" /></options></interaction></interactions></code><code version=\"2\" codelang=\"javascript\" name=\"database.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" Database = \" /><text value=\"require\" class=\"built_in\" /><text value=\"(\" /><text value=\"&quot;better-sqlite3&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" db = \" /><text value=\"new\" class=\"keyword\" /><text value=\" Database(\" /><text value=\"&quot;database.db&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text type=\"break\" /><text value=\"db.exec(\" /><text value=\"`\" /><text type=\"break\" /><text value=\"    CREATE TABLE IF NOT EXISTS fruits (\" /><text type=\"break\" /><text value=\"      id INTEGER PRIMARY KEY AUTOINCREMENT,\" /><text type=\"break\" /><text value=\"      name TEXT NOT NULL\" /><text type=\"break\" /><text value=\"    )\" /><text type=\"break\" /><text value=\"`\" /><text value=\");\" /><text type=\"break\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" rowCount = db.prepare(\" /><text value=\"&quot;SELECT COUNT(*) AS count FROM fruits&quot;\" class=\"string\" /><text value=\")\" /><text type=\"break\" /><text value=\" .get().count;\" /><text type=\"break\" /><text type=\"break\" /><text value=\"if\" class=\"keyword\" /><text value=\" (rowCount === \" /><text value=\"0\" class=\"number\" /><text value=\") {\" /><text type=\"break\" /><text value=\" \" /><text value=\"const\" class=\"keyword\" /><text value=\" insert = db.prepare(\" /><text value=\"&quot;INSERT INTO fruits (name) VALUES (?)&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\" \" /><text value=\"const\" class=\"keyword\" /><text value=\" fruits = [\" /><text value=\"'Apple'\" class=\"string\" /><text value=\", \" /><text value=\"'Banana'\" class=\"string\" /><text value=\", \" /><text value=\"'Cherry'\" class=\"string\" /><text value=\"];\" /><text type=\"break\" /><text value=\" fruits.forEach(\" /><text value=\"fruit\" class=\"params\" /><text value=\" =&gt;\" /><text value=\" insert.run(fruit));\" /><text type=\"break\" /><text value=\"}\" /><text type=\"break\" /><text type=\"break\" /><text value=\"module\" class=\"built_in\" /><text value=\".exports = db;\" /></content><output><content><text value=\"\" /><text type=\"break\" /><text value=\"/usr/lib/node_modules/better-sqlite3/lib/database.js:69\" /><text type=\"break\" /><text value=\"  [util.cppdb]: { value: new addon.Database(filename, filenameGiven, anonymous, readonly, fileMustExist, timeout, verbose || null, buffer || null) },\" /><text type=\"break\" /><text value=\"                         ^\" /><text type=\"break\" /><text value=\"SqliteError: unable to open database file\" /><text type=\"break\" /><text value=\"    at new Database (/usr/lib/node_modules/better-sqlite3/lib/database.js:69:26)\" /><text type=\"break\" /><text value=\"    at Object.&lt;anonymous&gt; (/home/default/code/file.js:2:12)\" /><text type=\"break\" /><text value=\"    at Module._compile (node:internal/modules/cjs/loader:1469:14)\" /><text type=\"break\" /><text value=\"    at Module._extensions..js (node:internal/modules/cjs/loader:1548:10)\" /><text type=\"break\" /><text value=\"    at Module.load (node:internal/modules/cjs/loader:1288:32)\" /><text type=\"break\" /><text value=\"    at Module._load (node:internal/modules/cjs/loader:1104:12)\" /><text type=\"break\" /><text value=\"    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:174:12)\" /><text type=\"break\" /><text value=\"    at node:internal/main/run_main_module:28:49 {\" /><text type=\"break\" /><text value=\"  code: 'SQLITE_CANTOPEN'\" /><text type=\"break\" /><text value=\"}\" /><text type=\"break\" /><text value=\"\" /><text type=\"break\" /><text value=\"Node.js v20.17.0\" /><text type=\"break\" /><text value=\"\" /></content></output></code><p visible-if=\"wrong\">Asegúrese de elegir <code>app</code> seguido de <code>.use</code> y finalmente <code>express.json()</code>.</p></body></html>"
          },
          {
            "title": "Lesson #3 - Copy - Copy - Copy - Copy",
            "id": 132602,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Podemos usar la destrucción de objetos para desempaquetar la propiedad <code>name</code> que esperamos para una nueva fruta.</p><code version=\"2\" codelang=\"javascript\" name=\"app.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" express = \" /><text value=\"require\" class=\"built_in\" /><text value=\"(\" /><text value=\"&quot;express&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" db = \" /><text value=\"require\" class=\"built_in\" /><text value=\"(\" /><text value=\"&quot;./database.js&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" app = express();\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" port = \" /><text value=\"3000\" class=\"number\" /><text value=\";\" /><text type=\"break\" /><text type=\"break\" /><text value=\"app.use(express.json());\" /><text type=\"break\" /><text type=\"break\" /><text value=\"app.get(\" /><text value=\"&quot;/fruits&quot;\" class=\"string\" /><text value=\", (req, res) =&gt; {\" /><text type=\"break\" /><text value=\" \" /><text value=\"const\" class=\"keyword\" /><text value=\" { name } = req.body;\" /><text type=\"break\" /><text value=\"});\" /><text type=\"break\" /><text type=\"break\" /><text value=\"app.listen(port, () =&gt; {\" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"`App is running on PORT \" /><text value=\"${port}\" class=\"subst\" /><text value=\"`\" /><text value=\");\" /><text type=\"break\" /><text value=\"});\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"184\" endIndex=\"185\" /><option startIndex=\"186\" endIndex=\"190\" /><option startIndex=\"191\" endIndex=\"192\" /><option startIndex=\"195\" endIndex=\"198\" /><option startIndex=\"198\" endIndex=\"203\" /></options></interaction></interactions></code><code version=\"2\" codelang=\"javascript\" name=\"database.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" Database = \" /><text value=\"require\" class=\"built_in\" /><text value=\"(\" /><text value=\"&quot;better-sqlite3&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" db = \" /><text value=\"new\" class=\"keyword\" /><text value=\" Database(\" /><text value=\"&quot;database.db&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text type=\"break\" /><text value=\"db.exec(\" /><text value=\"`\" /><text type=\"break\" /><text value=\"    CREATE TABLE IF NOT EXISTS fruits (\" /><text type=\"break\" /><text value=\"      id INTEGER PRIMARY KEY AUTOINCREMENT,\" /><text type=\"break\" /><text value=\"      name TEXT NOT NULL\" /><text type=\"break\" /><text value=\"    )\" /><text type=\"break\" /><text value=\"`\" /><text value=\");\" /><text type=\"break\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" rowCount = db.prepare(\" /><text value=\"&quot;SELECT COUNT(*) AS count FROM fruits&quot;\" class=\"string\" /><text value=\")\" /><text type=\"break\" /><text value=\" .get().count;\" /><text type=\"break\" /><text type=\"break\" /><text value=\"if\" class=\"keyword\" /><text value=\" (rowCount === \" /><text value=\"0\" class=\"number\" /><text value=\") {\" /><text type=\"break\" /><text value=\" \" /><text value=\"const\" class=\"keyword\" /><text value=\" insert = db.prepare(\" /><text value=\"&quot;INSERT INTO fruits (name) VALUES (?)&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\" \" /><text value=\"const\" class=\"keyword\" /><text value=\" fruits = [\" /><text value=\"'Apple'\" class=\"string\" /><text value=\", \" /><text value=\"'Banana'\" class=\"string\" /><text value=\", \" /><text value=\"'Cherry'\" class=\"string\" /><text value=\"];\" /><text type=\"break\" /><text value=\" fruits.forEach(\" /><text value=\"fruit\" class=\"params\" /><text value=\" =&gt;\" /><text value=\" insert.run(fruit));\" /><text type=\"break\" /><text value=\"}\" /><text type=\"break\" /><text type=\"break\" /><text value=\"module\" class=\"built_in\" /><text value=\".exports = db;\" /></content><output><content><text value=\"\" /><text type=\"break\" /><text value=\"/usr/lib/node_modules/better-sqlite3/lib/database.js:69\" /><text type=\"break\" /><text value=\"  [util.cppdb]: { value: new addon.Database(filename, filenameGiven, anonymous, readonly, fileMustExist, timeout, verbose || null, buffer || null) },\" /><text type=\"break\" /><text value=\"                         ^\" /><text type=\"break\" /><text value=\"SqliteError: unable to open database file\" /><text type=\"break\" /><text value=\"    at new Database (/usr/lib/node_modules/better-sqlite3/lib/database.js:69:26)\" /><text type=\"break\" /><text value=\"    at Object.&lt;anonymous&gt; (/home/default/code/file.js:2:12)\" /><text type=\"break\" /><text value=\"    at Module._compile (node:internal/modules/cjs/loader:1469:14)\" /><text type=\"break\" /><text value=\"    at Module._extensions..js (node:internal/modules/cjs/loader:1548:10)\" /><text type=\"break\" /><text value=\"    at Module.load (node:internal/modules/cjs/loader:1288:32)\" /><text type=\"break\" /><text value=\"    at Module._load (node:internal/modules/cjs/loader:1104:12)\" /><text type=\"break\" /><text value=\"    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:174:12)\" /><text type=\"break\" /><text value=\"    at node:internal/main/run_main_module:28:49 {\" /><text type=\"break\" /><text value=\"  code: 'SQLITE_CANTOPEN'\" /><text type=\"break\" /><text value=\"}\" /><text type=\"break\" /><text value=\"\" /><text type=\"break\" /><text value=\"Node.js v20.17.0\" /><text type=\"break\" /><text value=\"\" /></content></output></code><p visible-if=\"wrong\">Asegúrese de elegir <code>{</code> seguido de <code>name</code> y luego <code>}</code>, <code>req</code>, <code>.body</code>.</p></body></html>"
          },
          {
            "title": "Lesson #3 - Copy - Copy - Copy",
            "id": 132596,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Cuando queremos agregar datos a la base de datos, es importante verificar si tenemos lo que necesitamos.</p><p>Verifica si <code>name</code> es <code>undefined</code>. Si es así, establece el código de estado correcto y devuelve un mensaje explicando qué está mal.</p><code version=\"2\" codelang=\"javascript\" name=\"app.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" express = \" /><text value=\"require\" class=\"built_in\" /><text value=\"(\" /><text value=\"&quot;express&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" db = \" /><text value=\"require\" class=\"built_in\" /><text value=\"(\" /><text value=\"&quot;./database.js&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" app = express();\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" port = \" /><text value=\"3000\" class=\"number\" /><text value=\";\" /><text type=\"break\" /><text type=\"break\" /><text value=\"app.use(express.json());\" /><text type=\"break\" /><text type=\"break\" /><text value=\"app.get(\" /><text value=\"&quot;/fruits&quot;\" class=\"string\" /><text value=\", (req, res) =&gt; {\" /><text type=\"break\" /><text value=\" \" /><text value=\"const\" class=\"keyword\" /><text value=\" { name } = req.body;\" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\" \" /><text value=\"if\" class=\"keyword\" /><text value=\" (name === \" /><text value=\"undefined\" class=\"literal\" /><text value=\") {\" /><text type=\"break\" /><text value=\"  \" /><text value=\"return\" class=\"keyword\" /><text value=\" res.status(\" /><text value=\"400\" class=\"number\" /><text value=\").json({\" /><text type=\"break\" /><text value=\"   \" /><text value=\"message\" class=\"attr\" /><text value=\": \" /><text value=\"&quot;Please provide a name&quot;\" class=\"string\" /><text type=\"break\" /><text value=\"  });\" /><text type=\"break\" /><text value=\" }\" /><text type=\"break\" /><text value=\"});\" /><text type=\"break\" /><text type=\"break\" /><text value=\"app.listen(port, () =&gt; {\" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"`App is running on PORT \" /><text value=\"${port}\" class=\"subst\" /><text value=\"`\" /><text value=\");\" /><text type=\"break\" /><text value=\"});\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"212\" endIndex=\"216\" /><option startIndex=\"217\" endIndex=\"230\" /><option startIndex=\"254\" endIndex=\"257\" /><option startIndex=\"278\" endIndex=\"301\" /></options></interaction></interactions></code><code version=\"2\" codelang=\"javascript\" name=\"database.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" Database = \" /><text value=\"require\" class=\"built_in\" /><text value=\"(\" /><text value=\"&quot;better-sqlite3&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" db = \" /><text value=\"new\" class=\"keyword\" /><text value=\" Database(\" /><text value=\"&quot;database.db&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text type=\"break\" /><text value=\"db.exec(\" /><text value=\"`\" /><text type=\"break\" /><text value=\"    CREATE TABLE IF NOT EXISTS fruits (\" /><text type=\"break\" /><text value=\"      id INTEGER PRIMARY KEY AUTOINCREMENT,\" /><text type=\"break\" /><text value=\"      name TEXT NOT NULL\" /><text type=\"break\" /><text value=\"    )\" /><text type=\"break\" /><text value=\"`\" /><text value=\");\" /><text type=\"break\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" rowCount = db.prepare(\" /><text value=\"&quot;SELECT COUNT(*) AS count FROM fruits&quot;\" class=\"string\" /><text value=\")\" /><text type=\"break\" /><text value=\" .get().count;\" /><text type=\"break\" /><text type=\"break\" /><text value=\"if\" class=\"keyword\" /><text value=\" (rowCount === \" /><text value=\"0\" class=\"number\" /><text value=\") {\" /><text type=\"break\" /><text value=\" \" /><text value=\"const\" class=\"keyword\" /><text value=\" insert = db.prepare(\" /><text value=\"&quot;INSERT INTO fruits (name) VALUES (?)&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\" \" /><text value=\"const\" class=\"keyword\" /><text value=\" fruits = [\" /><text value=\"'Apple'\" class=\"string\" /><text value=\", \" /><text value=\"'Banana'\" class=\"string\" /><text value=\", \" /><text value=\"'Cherry'\" class=\"string\" /><text value=\"];\" /><text type=\"break\" /><text value=\" fruits.forEach(\" /><text value=\"fruit\" class=\"params\" /><text value=\" =&gt;\" /><text value=\" insert.run(fruit));\" /><text type=\"break\" /><text value=\"}\" /><text type=\"break\" /><text type=\"break\" /><text value=\"module\" class=\"built_in\" /><text value=\".exports = db;\" /></content><output><content><text value=\"\" /><text type=\"break\" /><text value=\"/usr/lib/node_modules/better-sqlite3/lib/database.js:69\" /><text type=\"break\" /><text value=\"  [util.cppdb]: { value: new addon.Database(filename, filenameGiven, anonymous, readonly, fileMustExist, timeout, verbose || null, buffer || null) },\" /><text type=\"break\" /><text value=\"                         ^\" /><text type=\"break\" /><text value=\"SqliteError: unable to open database file\" /><text type=\"break\" /><text value=\"    at new Database (/usr/lib/node_modules/better-sqlite3/lib/database.js:69:26)\" /><text type=\"break\" /><text value=\"    at Object.&lt;anonymous&gt; (/home/default/code/file.js:2:12)\" /><text type=\"break\" /><text value=\"    at Module._compile (node:internal/modules/cjs/loader:1469:14)\" /><text type=\"break\" /><text value=\"    at Module._extensions..js (node:internal/modules/cjs/loader:1548:10)\" /><text type=\"break\" /><text value=\"    at Module.load (node:internal/modules/cjs/loader:1288:32)\" /><text type=\"break\" /><text value=\"    at Module._load (node:internal/modules/cjs/loader:1104:12)\" /><text type=\"break\" /><text value=\"    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:174:12)\" /><text type=\"break\" /><text value=\"    at node:internal/main/run_main_module:28:49 {\" /><text type=\"break\" /><text value=\"  code: 'SQLITE_CANTOPEN'\" /><text type=\"break\" /><text value=\"}\" /><text type=\"break\" /><text value=\"\" /><text type=\"break\" /><text value=\"Node.js v20.17.0\" /><text type=\"break\" /><text value=\"\" /></content></output></code><p visible-if=\"wrong\">Asegúrese de elegir <code>name</code> seguido de <code>=== undefined</code> y luego <code>400</code>, <code>\"Please provide a name\"</code>.</p></body></html>"
          },
          {
            "title": "da - Copy",
            "id": 132603,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Usamos una consulta parametrizada con un marcador de posición para el <code>name</code>.</p><code version=\"2\" codelang=\"javascript\" name=\"app.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" express = \" /><text value=\"require\" class=\"built_in\" /><text value=\"(\" /><text value=\"&quot;express&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" db = \" /><text value=\"require\" class=\"built_in\" /><text value=\"(\" /><text value=\"&quot;./database.js&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" app = express();\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" port = \" /><text value=\"3000\" class=\"number\" /><text value=\";\" /><text type=\"break\" /><text type=\"break\" /><text value=\"app.use(express.json());\" /><text type=\"break\" /><text type=\"break\" /><text value=\"app.get(\" /><text value=\"&quot;/fruits&quot;\" class=\"string\" /><text value=\", (req, res) =&gt; {\" /><text type=\"break\" /><text value=\" \" /><text value=\"const\" class=\"keyword\" /><text value=\" { name } = req.body;\" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\" \" /><text value=\"if\" class=\"keyword\" /><text value=\" (name === \" /><text value=\"undefined\" class=\"literal\" /><text value=\") {\" /><text type=\"break\" /><text value=\"  \" /><text value=\"return\" class=\"keyword\" /><text value=\" res.status(\" /><text value=\"400\" class=\"number\" /><text value=\").json({\" /><text type=\"break\" /><text value=\"   \" /><text value=\"message\" class=\"attr\" /><text value=\": \" /><text value=\"&quot;Please provide a name&quot;\" class=\"string\" /><text type=\"break\" /><text value=\"  });\" /><text type=\"break\" /><text value=\" }\" /><text type=\"break\" /><text type=\"break\" /><text value=\" \" /><text value=\"const\" class=\"keyword\" /><text value=\" sql = \" /><text value=\"&quot;INSERT INTO fruits (name) VALUES (?)&quot;\" class=\"string\" /><text value=\";\" /><text type=\"break\" /><text value=\"});\" /><text type=\"break\" /><text type=\"break\" /><text value=\"app.listen(port, () =&gt; {\" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"`App is running on PORT \" /><text value=\"${port}\" class=\"subst\" /><text value=\"`\" /><text value=\");\" /><text type=\"break\" /><text value=\"});\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"346\" endIndex=\"350\" /><option startIndex=\"360\" endIndex=\"361\" /></options></interaction></interactions></code><code version=\"2\" codelang=\"javascript\" name=\"database.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" Database = \" /><text value=\"require\" class=\"built_in\" /><text value=\"(\" /><text value=\"&quot;better-sqlite3&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" db = \" /><text value=\"new\" class=\"keyword\" /><text value=\" Database(\" /><text value=\"&quot;database.db&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text type=\"break\" /><text value=\"db.exec(\" /><text value=\"`\" /><text type=\"break\" /><text value=\"    CREATE TABLE IF NOT EXISTS fruits (\" /><text type=\"break\" /><text value=\"      id INTEGER PRIMARY KEY AUTOINCREMENT,\" /><text type=\"break\" /><text value=\"      name TEXT NOT NULL\" /><text type=\"break\" /><text value=\"    )\" /><text type=\"break\" /><text value=\"`\" /><text value=\");\" /><text type=\"break\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" rowCount = db.prepare(\" /><text value=\"&quot;SELECT COUNT(*) AS count FROM fruits&quot;\" class=\"string\" /><text value=\")\" /><text type=\"break\" /><text value=\" .get().count;\" /><text type=\"break\" /><text type=\"break\" /><text value=\"if\" class=\"keyword\" /><text value=\" (rowCount === \" /><text value=\"0\" class=\"number\" /><text value=\") {\" /><text type=\"break\" /><text value=\" \" /><text value=\"const\" class=\"keyword\" /><text value=\" insert = db.prepare(\" /><text value=\"&quot;INSERT INTO fruits (name) VALUES (?)&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\" \" /><text value=\"const\" class=\"keyword\" /><text value=\" fruits = [\" /><text value=\"'Apple'\" class=\"string\" /><text value=\", \" /><text value=\"'Banana'\" class=\"string\" /><text value=\", \" /><text value=\"'Cherry'\" class=\"string\" /><text value=\"];\" /><text type=\"break\" /><text value=\" fruits.forEach(\" /><text value=\"fruit\" class=\"params\" /><text value=\" =&gt;\" /><text value=\" insert.run(fruit));\" /><text type=\"break\" /><text value=\"}\" /><text type=\"break\" /><text type=\"break\" /><text value=\"module\" class=\"built_in\" /><text value=\".exports = db;\" /></content><output><content><text value=\"\" /><text type=\"break\" /><text value=\"/usr/lib/node_modules/better-sqlite3/lib/database.js:69\" /><text type=\"break\" /><text value=\"  [util.cppdb]: { value: new addon.Database(filename, filenameGiven, anonymous, readonly, fileMustExist, timeout, verbose || null, buffer || null) },\" /><text type=\"break\" /><text value=\"                         ^\" /><text type=\"break\" /><text value=\"SqliteError: unable to open database file\" /><text type=\"break\" /><text value=\"    at new Database (/usr/lib/node_modules/better-sqlite3/lib/database.js:69:26)\" /><text type=\"break\" /><text value=\"    at Object.&lt;anonymous&gt; (/home/default/code/file.js:2:12)\" /><text type=\"break\" /><text value=\"    at Module._compile (node:internal/modules/cjs/loader:1469:14)\" /><text type=\"break\" /><text value=\"    at Module._extensions..js (node:internal/modules/cjs/loader:1548:10)\" /><text type=\"break\" /><text value=\"    at Module.load (node:internal/modules/cjs/loader:1288:32)\" /><text type=\"break\" /><text value=\"    at Module._load (node:internal/modules/cjs/loader:1104:12)\" /><text type=\"break\" /><text value=\"    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:174:12)\" /><text type=\"break\" /><text value=\"    at node:internal/main/run_main_module:28:49 {\" /><text type=\"break\" /><text value=\"  code: 'SQLITE_CANTOPEN'\" /><text type=\"break\" /><text value=\"}\" /><text type=\"break\" /><text value=\"\" /><text type=\"break\" /><text value=\"Node.js v20.17.0\" /><text type=\"break\" /><text value=\"\" /></content></output></code><p visible-if=\"wrong\">Asegúrese de elegir <code>name</code> seguido de <code>?</code>.</p></body></html>"
          },
          {
            "title": "da",
            "id": 132597,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>A continuación, dejamos que la base de datos prepare la declaración para su uso posterior.</p><code version=\"2\" codelang=\"javascript\" name=\"app.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" express = \" /><text value=\"require\" class=\"built_in\" /><text value=\"(\" /><text value=\"&quot;express&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" db = \" /><text value=\"require\" class=\"built_in\" /><text value=\"(\" /><text value=\"&quot;./database.js&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" app = express();\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" port = \" /><text value=\"3000\" class=\"number\" /><text value=\";\" /><text type=\"break\" /><text type=\"break\" /><text value=\"app.use(express.json());\" /><text type=\"break\" /><text type=\"break\" /><text value=\"app.get(\" /><text value=\"&quot;/fruits&quot;\" class=\"string\" /><text value=\", (req, res) =&gt; {\" /><text type=\"break\" /><text value=\" \" /><text value=\"const\" class=\"keyword\" /><text value=\" { name } = req.body;\" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\" \" /><text value=\"if\" class=\"keyword\" /><text value=\" (name === \" /><text value=\"undefined\" class=\"literal\" /><text value=\") {\" /><text type=\"break\" /><text value=\"  \" /><text value=\"return\" class=\"keyword\" /><text value=\" res.status(\" /><text value=\"400\" class=\"number\" /><text value=\").json({\" /><text type=\"break\" /><text value=\"   \" /><text value=\"message\" class=\"attr\" /><text value=\": \" /><text value=\"&quot;Please provide a name&quot;\" class=\"string\" /><text type=\"break\" /><text value=\"  });\" /><text type=\"break\" /><text value=\" }\" /><text type=\"break\" /><text type=\"break\" /><text value=\" \" /><text value=\"const\" class=\"keyword\" /><text value=\" sql = \" /><text value=\"&quot;INSERT INTO fruits (name) VALUES (?)&quot;\" class=\"string\" /><text value=\";\" /><text type=\"break\" /><text value=\" db.prepare(sql);\" /><text type=\"break\" /><text value=\"});\" /><text type=\"break\" /><text type=\"break\" /><text value=\"app.listen(port, () =&gt; {\" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"`App is running on PORT \" /><text value=\"${port}\" class=\"subst\" /><text value=\"`\" /><text value=\");\" /><text type=\"break\" /><text value=\"});\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"366\" endIndex=\"368\" /><option startIndex=\"368\" endIndex=\"369\" /><option startIndex=\"369\" endIndex=\"376\" /><option startIndex=\"377\" endIndex=\"380\" /></options></interaction></interactions></code><code version=\"2\" codelang=\"javascript\" name=\"database.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" Database = \" /><text value=\"require\" class=\"built_in\" /><text value=\"(\" /><text value=\"&quot;better-sqlite3&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" db = \" /><text value=\"new\" class=\"keyword\" /><text value=\" Database(\" /><text value=\"&quot;database.db&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text type=\"break\" /><text value=\"db.exec(\" /><text value=\"`\" /><text type=\"break\" /><text value=\"    CREATE TABLE IF NOT EXISTS fruits (\" /><text type=\"break\" /><text value=\"      id INTEGER PRIMARY KEY AUTOINCREMENT,\" /><text type=\"break\" /><text value=\"      name TEXT NOT NULL\" /><text type=\"break\" /><text value=\"    )\" /><text type=\"break\" /><text value=\"`\" /><text value=\");\" /><text type=\"break\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" rowCount = db.prepare(\" /><text value=\"&quot;SELECT COUNT(*) AS count FROM fruits&quot;\" class=\"string\" /><text value=\")\" /><text type=\"break\" /><text value=\" .get().count;\" /><text type=\"break\" /><text type=\"break\" /><text value=\"if\" class=\"keyword\" /><text value=\" (rowCount === \" /><text value=\"0\" class=\"number\" /><text value=\") {\" /><text type=\"break\" /><text value=\" \" /><text value=\"const\" class=\"keyword\" /><text value=\" insert = db.prepare(\" /><text value=\"&quot;INSERT INTO fruits (name) VALUES (?)&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\" \" /><text value=\"const\" class=\"keyword\" /><text value=\" fruits = [\" /><text value=\"'Apple'\" class=\"string\" /><text value=\", \" /><text value=\"'Banana'\" class=\"string\" /><text value=\", \" /><text value=\"'Cherry'\" class=\"string\" /><text value=\"];\" /><text type=\"break\" /><text value=\" fruits.forEach(\" /><text value=\"fruit\" class=\"params\" /><text value=\" =&gt;\" /><text value=\" insert.run(fruit));\" /><text type=\"break\" /><text value=\"}\" /><text type=\"break\" /><text type=\"break\" /><text value=\"module\" class=\"built_in\" /><text value=\".exports = db;\" /></content><output><content><text value=\"\" /><text type=\"break\" /><text value=\"/usr/lib/node_modules/better-sqlite3/lib/database.js:69\" /><text type=\"break\" /><text value=\"  [util.cppdb]: { value: new addon.Database(filename, filenameGiven, anonymous, readonly, fileMustExist, timeout, verbose || null, buffer || null) },\" /><text type=\"break\" /><text value=\"                         ^\" /><text type=\"break\" /><text value=\"SqliteError: unable to open database file\" /><text type=\"break\" /><text value=\"    at new Database (/usr/lib/node_modules/better-sqlite3/lib/database.js:69:26)\" /><text type=\"break\" /><text value=\"    at Object.&lt;anonymous&gt; (/home/default/code/file.js:2:12)\" /><text type=\"break\" /><text value=\"    at Module._compile (node:internal/modules/cjs/loader:1469:14)\" /><text type=\"break\" /><text value=\"    at Module._extensions..js (node:internal/modules/cjs/loader:1548:10)\" /><text type=\"break\" /><text value=\"    at Module.load (node:internal/modules/cjs/loader:1288:32)\" /><text type=\"break\" /><text value=\"    at Module._load (node:internal/modules/cjs/loader:1104:12)\" /><text type=\"break\" /><text value=\"    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:174:12)\" /><text type=\"break\" /><text value=\"    at node:internal/main/run_main_module:28:49 {\" /><text type=\"break\" /><text value=\"  code: 'SQLITE_CANTOPEN'\" /><text type=\"break\" /><text value=\"}\" /><text type=\"break\" /><text value=\"\" /><text type=\"break\" /><text value=\"Node.js v20.17.0\" /><text type=\"break\" /><text value=\"\" /></content></output></code><p visible-if=\"wrong\">Asegúrese de elegir <code>db</code> seguido de <code>.</code> y luego <code>prepare</code>, <code>sql</code>.</p></body></html>"
          },
          {
            "title": "da - Copy",
            "id": 132598,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Luego podemos ejecutar la declaración y pasar la variable <code>name</code> desempaquetada para el nombre.</p><code version=\"2\" codelang=\"javascript\" name=\"app.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" express = \" /><text value=\"require\" class=\"built_in\" /><text value=\"(\" /><text value=\"&quot;express&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" db = \" /><text value=\"require\" class=\"built_in\" /><text value=\"(\" /><text value=\"&quot;./database.js&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" app = express();\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" port = \" /><text value=\"3000\" class=\"number\" /><text value=\";\" /><text type=\"break\" /><text type=\"break\" /><text value=\"app.use(express.json());\" /><text type=\"break\" /><text type=\"break\" /><text value=\"app.get(\" /><text value=\"&quot;/fruits&quot;\" class=\"string\" /><text value=\", (req, res) =&gt; {\" /><text type=\"break\" /><text value=\" \" /><text value=\"const\" class=\"keyword\" /><text value=\" { name } = req.body;\" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\" \" /><text value=\"if\" class=\"keyword\" /><text value=\" (name === \" /><text value=\"undefined\" class=\"literal\" /><text value=\") {\" /><text type=\"break\" /><text value=\"  \" /><text value=\"return\" class=\"keyword\" /><text value=\" res.status(\" /><text value=\"400\" class=\"number\" /><text value=\").json({\" /><text type=\"break\" /><text value=\"   \" /><text value=\"message\" class=\"attr\" /><text value=\": \" /><text value=\"&quot;Please provide a name&quot;\" class=\"string\" /><text type=\"break\" /><text value=\"  });\" /><text type=\"break\" /><text value=\" }\" /><text type=\"break\" /><text type=\"break\" /><text value=\" \" /><text value=\"const\" class=\"keyword\" /><text value=\" sql = \" /><text value=\"&quot;INSERT INTO fruits (name) VALUES (?)&quot;\" class=\"string\" /><text value=\";\" /><text type=\"break\" /><text value=\" db.prepare(sql).run(name);\" /><text type=\"break\" /><text value=\"});\" /><text type=\"break\" /><text type=\"break\" /><text value=\"app.listen(port, () =&gt; {\" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"`App is running on PORT \" /><text value=\"${port}\" class=\"subst\" /><text value=\"`\" /><text value=\");\" /><text type=\"break\" /><text value=\"});\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"381\" endIndex=\"382\" /><option startIndex=\"382\" endIndex=\"385\" /><option startIndex=\"386\" endIndex=\"390\" /></options></interaction></interactions></code><code version=\"2\" codelang=\"javascript\" name=\"database.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" Database = \" /><text value=\"require\" class=\"built_in\" /><text value=\"(\" /><text value=\"&quot;better-sqlite3&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" db = \" /><text value=\"new\" class=\"keyword\" /><text value=\" Database(\" /><text value=\"&quot;database.db&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text type=\"break\" /><text value=\"db.exec(\" /><text value=\"`\" /><text type=\"break\" /><text value=\"    CREATE TABLE IF NOT EXISTS fruits (\" /><text type=\"break\" /><text value=\"      id INTEGER PRIMARY KEY AUTOINCREMENT,\" /><text type=\"break\" /><text value=\"      name TEXT NOT NULL\" /><text type=\"break\" /><text value=\"    )\" /><text type=\"break\" /><text value=\"`\" /><text value=\");\" /><text type=\"break\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" rowCount = db.prepare(\" /><text value=\"&quot;SELECT COUNT(*) AS count FROM fruits&quot;\" class=\"string\" /><text value=\")\" /><text type=\"break\" /><text value=\" .get().count;\" /><text type=\"break\" /><text type=\"break\" /><text value=\"if\" class=\"keyword\" /><text value=\" (rowCount === \" /><text value=\"0\" class=\"number\" /><text value=\") {\" /><text type=\"break\" /><text value=\" \" /><text value=\"const\" class=\"keyword\" /><text value=\" insert = db.prepare(\" /><text value=\"&quot;INSERT INTO fruits (name) VALUES (?)&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\" \" /><text value=\"const\" class=\"keyword\" /><text value=\" fruits = [\" /><text value=\"'Apple'\" class=\"string\" /><text value=\", \" /><text value=\"'Banana'\" class=\"string\" /><text value=\", \" /><text value=\"'Cherry'\" class=\"string\" /><text value=\"];\" /><text type=\"break\" /><text value=\" fruits.forEach(\" /><text value=\"fruit\" class=\"params\" /><text value=\" =&gt;\" /><text value=\" insert.run(fruit));\" /><text type=\"break\" /><text value=\"}\" /><text type=\"break\" /><text type=\"break\" /><text value=\"module\" class=\"built_in\" /><text value=\".exports = db;\" /></content><output><content><text value=\"\" /><text type=\"break\" /><text value=\"/usr/lib/node_modules/better-sqlite3/lib/database.js:69\" /><text type=\"break\" /><text value=\"  [util.cppdb]: { value: new addon.Database(filename, filenameGiven, anonymous, readonly, fileMustExist, timeout, verbose || null, buffer || null) },\" /><text type=\"break\" /><text value=\"                         ^\" /><text type=\"break\" /><text value=\"SqliteError: unable to open database file\" /><text type=\"break\" /><text value=\"    at new Database (/usr/lib/node_modules/better-sqlite3/lib/database.js:69:26)\" /><text type=\"break\" /><text value=\"    at Object.&lt;anonymous&gt; (/home/default/code/file.js:2:12)\" /><text type=\"break\" /><text value=\"    at Module._compile (node:internal/modules/cjs/loader:1469:14)\" /><text type=\"break\" /><text value=\"    at Module._extensions..js (node:internal/modules/cjs/loader:1548:10)\" /><text type=\"break\" /><text value=\"    at Module.load (node:internal/modules/cjs/loader:1288:32)\" /><text type=\"break\" /><text value=\"    at Module._load (node:internal/modules/cjs/loader:1104:12)\" /><text type=\"break\" /><text value=\"    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:174:12)\" /><text type=\"break\" /><text value=\"    at node:internal/main/run_main_module:28:49 {\" /><text type=\"break\" /><text value=\"  code: 'SQLITE_CANTOPEN'\" /><text type=\"break\" /><text value=\"}\" /><text type=\"break\" /><text value=\"\" /><text type=\"break\" /><text value=\"Node.js v20.17.0\" /><text type=\"break\" /><text value=\"\" /></content></output></code><p visible-if=\"wrong\">Asegúrese de elegir <code>.</code> seguido de <code>run</code> y finalmente <code>name</code>.</p></body></html>"
          },
          {
            "title": "da - Copy - Copy",
            "id": 132599,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Para asegurar que la operación ha sido exitosa, guardamos el objeto devuelto en una variable.</p><code version=\"2\" codelang=\"javascript\" name=\"app.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" express = \" /><text value=\"require\" class=\"built_in\" /><text value=\"(\" /><text value=\"&quot;express&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" db = \" /><text value=\"require\" class=\"built_in\" /><text value=\"(\" /><text value=\"&quot;./database.js&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" app = express();\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" port = \" /><text value=\"3000\" class=\"number\" /><text value=\";\" /><text type=\"break\" /><text type=\"break\" /><text value=\"app.use(express.json());\" /><text type=\"break\" /><text type=\"break\" /><text value=\"app.get(\" /><text value=\"&quot;/fruits&quot;\" class=\"string\" /><text value=\", (req, res) =&gt; {\" /><text type=\"break\" /><text value=\" \" /><text value=\"const\" class=\"keyword\" /><text value=\" { name } = req.body;\" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\" \" /><text value=\"if\" class=\"keyword\" /><text value=\" (name === \" /><text value=\"undefined\" class=\"literal\" /><text value=\") {\" /><text type=\"break\" /><text value=\"  \" /><text value=\"return\" class=\"keyword\" /><text value=\" res.status(\" /><text value=\"400\" class=\"number\" /><text value=\").json({\" /><text type=\"break\" /><text value=\"   \" /><text value=\"message\" class=\"attr\" /><text value=\": \" /><text value=\"&quot;Please provide a name&quot;\" class=\"string\" /><text type=\"break\" /><text value=\"  });\" /><text type=\"break\" /><text value=\" }\" /><text type=\"break\" /><text type=\"break\" /><text value=\" \" /><text value=\"const\" class=\"keyword\" /><text value=\" sql = \" /><text value=\"&quot;INSERT INTO fruits (name) VALUES (?)&quot;\" class=\"string\" /><text value=\";\" /><text type=\"break\" /><text value=\" \" /><text value=\"const\" class=\"keyword\" /><text value=\" result = db.prepare(sql).run(name);\" /><text type=\"break\" /><text value=\"});\" /><text type=\"break\" /><text type=\"break\" /><text value=\"app.listen(port, () =&gt; {\" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"`App is running on PORT \" /><text value=\"${port}\" class=\"subst\" /><text value=\"`\" /><text value=\");\" /><text type=\"break\" /><text value=\"});\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"366\" endIndex=\"371\" /><option startIndex=\"372\" endIndex=\"378\" /><option startIndex=\"379\" endIndex=\"380\" /></options></interaction></interactions></code><code version=\"2\" codelang=\"javascript\" name=\"database.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" Database = \" /><text value=\"require\" class=\"built_in\" /><text value=\"(\" /><text value=\"&quot;better-sqlite3&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" db = \" /><text value=\"new\" class=\"keyword\" /><text value=\" Database(\" /><text value=\"&quot;database.db&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text type=\"break\" /><text value=\"db.exec(\" /><text value=\"`\" /><text type=\"break\" /><text value=\"    CREATE TABLE IF NOT EXISTS fruits (\" /><text type=\"break\" /><text value=\"      id INTEGER PRIMARY KEY AUTOINCREMENT,\" /><text type=\"break\" /><text value=\"      name TEXT NOT NULL\" /><text type=\"break\" /><text value=\"    )\" /><text type=\"break\" /><text value=\"`\" /><text value=\");\" /><text type=\"break\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" rowCount = db.prepare(\" /><text value=\"&quot;SELECT COUNT(*) AS count FROM fruits&quot;\" class=\"string\" /><text value=\")\" /><text type=\"break\" /><text value=\" .get().count;\" /><text type=\"break\" /><text type=\"break\" /><text value=\"if\" class=\"keyword\" /><text value=\" (rowCount === \" /><text value=\"0\" class=\"number\" /><text value=\") {\" /><text type=\"break\" /><text value=\" \" /><text value=\"const\" class=\"keyword\" /><text value=\" insert = db.prepare(\" /><text value=\"&quot;INSERT INTO fruits (name) VALUES (?)&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\" \" /><text value=\"const\" class=\"keyword\" /><text value=\" fruits = [\" /><text value=\"'Apple'\" class=\"string\" /><text value=\", \" /><text value=\"'Banana'\" class=\"string\" /><text value=\", \" /><text value=\"'Cherry'\" class=\"string\" /><text value=\"];\" /><text type=\"break\" /><text value=\" fruits.forEach(\" /><text value=\"fruit\" class=\"params\" /><text value=\" =&gt;\" /><text value=\" insert.run(fruit));\" /><text type=\"break\" /><text value=\"}\" /><text type=\"break\" /><text type=\"break\" /><text value=\"module\" class=\"built_in\" /><text value=\".exports = db;\" /></content><output><content><text value=\"\" /><text type=\"break\" /><text value=\"/usr/lib/node_modules/better-sqlite3/lib/database.js:69\" /><text type=\"break\" /><text value=\"  [util.cppdb]: { value: new addon.Database(filename, filenameGiven, anonymous, readonly, fileMustExist, timeout, verbose || null, buffer || null) },\" /><text type=\"break\" /><text value=\"                         ^\" /><text type=\"break\" /><text value=\"SqliteError: unable to open database file\" /><text type=\"break\" /><text value=\"    at new Database (/usr/lib/node_modules/better-sqlite3/lib/database.js:69:26)\" /><text type=\"break\" /><text value=\"    at Object.&lt;anonymous&gt; (/home/default/code/file.js:2:12)\" /><text type=\"break\" /><text value=\"    at Module._compile (node:internal/modules/cjs/loader:1469:14)\" /><text type=\"break\" /><text value=\"    at Module._extensions..js (node:internal/modules/cjs/loader:1548:10)\" /><text type=\"break\" /><text value=\"    at Module.load (node:internal/modules/cjs/loader:1288:32)\" /><text type=\"break\" /><text value=\"    at Module._load (node:internal/modules/cjs/loader:1104:12)\" /><text type=\"break\" /><text value=\"    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:174:12)\" /><text type=\"break\" /><text value=\"    at node:internal/main/run_main_module:28:49 {\" /><text type=\"break\" /><text value=\"  code: 'SQLITE_CANTOPEN'\" /><text type=\"break\" /><text value=\"}\" /><text type=\"break\" /><text value=\"\" /><text type=\"break\" /><text value=\"Node.js v20.17.0\" /><text type=\"break\" /><text value=\"\" /></content></output></code><p visible-if=\"wrong\">Asegúrese de elegir <code>const</code> seguido de <code>result</code> y finalmente <code>=</code>.</p></body></html>"
          },
          {
            "title": "Lesson #3 - Copy",
            "id": 132593,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Ahora podemos verificar si la inserción fue exitosa evaluando el número de cambios realizados cuando verificamos <code>result.changes</code>.</p><p>Si todo se ve bien, podemos responder, establecer el código de estado y devolver un mensaje.</p><code version=\"2\" codelang=\"javascript\" name=\"app.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" express = \" /><text value=\"require\" class=\"built_in\" /><text value=\"(\" /><text value=\"&quot;express&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" db = \" /><text value=\"require\" class=\"built_in\" /><text value=\"(\" /><text value=\"&quot;./database.js&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" app = express();\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" port = \" /><text value=\"3000\" class=\"number\" /><text value=\";\" /><text type=\"break\" /><text type=\"break\" /><text value=\"app.use(express.json());\" /><text type=\"break\" /><text type=\"break\" /><text value=\"app.get(\" /><text value=\"&quot;/fruits&quot;\" class=\"string\" /><text value=\", (req, res) =&gt; {\" /><text type=\"break\" /><text value=\" \" /><text value=\"const\" class=\"keyword\" /><text value=\" { name } = req.body;\" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\" \" /><text value=\"if\" class=\"keyword\" /><text value=\" (name === \" /><text value=\"undefined\" class=\"literal\" /><text value=\") {\" /><text type=\"break\" /><text value=\"  \" /><text value=\"return\" class=\"keyword\" /><text value=\" res.status(\" /><text value=\"400\" class=\"number\" /><text value=\").json({\" /><text type=\"break\" /><text value=\"   \" /><text value=\"message\" class=\"attr\" /><text value=\": \" /><text value=\"&quot;Please provide a name&quot;\" class=\"string\" /><text type=\"break\" /><text value=\"  });\" /><text type=\"break\" /><text value=\" }\" /><text type=\"break\" /><text type=\"break\" /><text value=\" \" /><text value=\"const\" class=\"keyword\" /><text value=\" sql = \" /><text value=\"&quot;INSERT INTO fruits (name) VALUES (?)&quot;\" class=\"string\" /><text value=\";\" /><text type=\"break\" /><text value=\" \" /><text value=\"const\" class=\"keyword\" /><text value=\" result = db.prepare(sql).run(name);\" /><text type=\"break\" /><text type=\"break\" /><text value=\" \" /><text value=\"if\" class=\"keyword\" /><text value=\" (result.changes &gt; \" /><text value=\"0\" class=\"number\" /><text value=\") {\" /><text type=\"break\" /><text value=\"  res.status(\" /><text value=\"201\" class=\"number\" /><text value=\").json({\" /><text type=\"break\" /><text value=\"   \" /><text value=\"message\" class=\"attr\" /><text value=\": \" /><text value=\"&quot;Fruit added successfully&quot;\" class=\"string\" /><text type=\"break\" /><text value=\"  });\" /><text type=\"break\" /><text value=\" }\" /><text type=\"break\" /><text value=\"});\" /><text type=\"break\" /><text type=\"break\" /><text value=\"app.listen(port, () =&gt; {\" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"`App is running on PORT \" /><text value=\"${port}\" class=\"subst\" /><text value=\"`\" /><text value=\");\" /><text type=\"break\" /><text value=\"});\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"414\" endIndex=\"428\" /><option startIndex=\"429\" endIndex=\"432\" /><option startIndex=\"449\" endIndex=\"452\" /></options></interaction></interactions><output><content><text value=\"{ message: &quot;Fruit added successfully&quot; }\" /></content></output></code><code version=\"2\" codelang=\"javascript\" name=\"database.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" Database = \" /><text value=\"require\" class=\"built_in\" /><text value=\"(\" /><text value=\"&quot;better-sqlite3&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" db = \" /><text value=\"new\" class=\"keyword\" /><text value=\" Database(\" /><text value=\"&quot;database.db&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text type=\"break\" /><text value=\"db.exec(\" /><text value=\"`\" /><text type=\"break\" /><text value=\"    CREATE TABLE IF NOT EXISTS fruits (\" /><text type=\"break\" /><text value=\"      id INTEGER PRIMARY KEY AUTOINCREMENT,\" /><text type=\"break\" /><text value=\"      name TEXT NOT NULL\" /><text type=\"break\" /><text value=\"    )\" /><text type=\"break\" /><text value=\"`\" /><text value=\");\" /><text type=\"break\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" rowCount = db.prepare(\" /><text value=\"&quot;SELECT COUNT(*) AS count FROM fruits&quot;\" class=\"string\" /><text value=\")\" /><text type=\"break\" /><text value=\" .get().count;\" /><text type=\"break\" /><text type=\"break\" /><text value=\"if\" class=\"keyword\" /><text value=\" (rowCount === \" /><text value=\"0\" class=\"number\" /><text value=\") {\" /><text type=\"break\" /><text value=\" \" /><text value=\"const\" class=\"keyword\" /><text value=\" insert = db.prepare(\" /><text value=\"&quot;INSERT INTO fruits (name) VALUES (?)&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\" \" /><text value=\"const\" class=\"keyword\" /><text value=\" fruits = [\" /><text value=\"'Apple'\" class=\"string\" /><text value=\", \" /><text value=\"'Banana'\" class=\"string\" /><text value=\", \" /><text value=\"'Cherry'\" class=\"string\" /><text value=\"];\" /><text type=\"break\" /><text value=\" fruits.forEach(\" /><text value=\"fruit\" class=\"params\" /><text value=\" =&gt;\" /><text value=\" insert.run(fruit));\" /><text type=\"break\" /><text value=\"}\" /><text type=\"break\" /><text type=\"break\" /><text value=\"module\" class=\"built_in\" /><text value=\".exports = db;\" /></content><output><content><text value=\"\" /><text type=\"break\" /><text value=\"/usr/lib/node_modules/better-sqlite3/lib/database.js:69\" /><text type=\"break\" /><text value=\"  [util.cppdb]: { value: new addon.Database(filename, filenameGiven, anonymous, readonly, fileMustExist, timeout, verbose || null, buffer || null) },\" /><text type=\"break\" /><text value=\"                         ^\" /><text type=\"break\" /><text value=\"SqliteError: unable to open database file\" /><text type=\"break\" /><text value=\"    at new Database (/usr/lib/node_modules/better-sqlite3/lib/database.js:69:26)\" /><text type=\"break\" /><text value=\"    at Object.&lt;anonymous&gt; (/home/default/code/file.js:2:12)\" /><text type=\"break\" /><text value=\"    at Module._compile (node:internal/modules/cjs/loader:1469:14)\" /><text type=\"break\" /><text value=\"    at Module._extensions..js (node:internal/modules/cjs/loader:1548:10)\" /><text type=\"break\" /><text value=\"    at Module.load (node:internal/modules/cjs/loader:1288:32)\" /><text type=\"break\" /><text value=\"    at Module._load (node:internal/modules/cjs/loader:1104:12)\" /><text type=\"break\" /><text value=\"    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:174:12)\" /><text type=\"break\" /><text value=\"    at node:internal/main/run_main_module:28:49 {\" /><text type=\"break\" /><text value=\"  code: 'SQLITE_CANTOPEN'\" /><text type=\"break\" /><text value=\"}\" /><text type=\"break\" /><text value=\"\" /><text type=\"break\" /><text value=\"Node.js v20.17.0\" /><text type=\"break\" /><text value=\"\" /></content></output></code><p visible-if=\"wrong\">Asegúrese de elegir <code>result.changes</code> seguido de <code>&gt; 0</code> y finalmente <code>201</code>.</p></body></html>"
          },
          {
            "title": "Lesson #3 - Copy - Copy",
            "id": 132600,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Si no obtenemos un resultado, deberíamos devolver <code>500 Internal Server Error</code> y un mensaje.</p><p>Esto debería ser una excepción si hemos probado todos los requisitos antes.</p><code version=\"2\" codelang=\"javascript\" name=\"app.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" express = \" /><text value=\"require\" class=\"built_in\" /><text value=\"(\" /><text value=\"&quot;express&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" db = \" /><text value=\"require\" class=\"built_in\" /><text value=\"(\" /><text value=\"&quot;./database.js&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" app = express();\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" port = \" /><text value=\"3000\" class=\"number\" /><text value=\";\" /><text type=\"break\" /><text type=\"break\" /><text value=\"app.use(express.json());\" /><text type=\"break\" /><text type=\"break\" /><text value=\"app.get(\" /><text value=\"&quot;/fruits&quot;\" class=\"string\" /><text value=\", (req, res) =&gt; {\" /><text type=\"break\" /><text value=\" \" /><text value=\"const\" class=\"keyword\" /><text value=\" { name } = req.body;\" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\" \" /><text value=\"if\" class=\"keyword\" /><text value=\" (name === \" /><text value=\"undefined\" class=\"literal\" /><text value=\") {\" /><text type=\"break\" /><text value=\"  \" /><text value=\"return\" class=\"keyword\" /><text value=\" res.status(\" /><text value=\"400\" class=\"number\" /><text value=\").json({\" /><text type=\"break\" /><text value=\"   \" /><text value=\"message\" class=\"attr\" /><text value=\": \" /><text value=\"&quot;Please provide a name&quot;\" class=\"string\" /><text type=\"break\" /><text value=\"  });\" /><text type=\"break\" /><text value=\" }\" /><text type=\"break\" /><text type=\"break\" /><text value=\" \" /><text value=\"const\" class=\"keyword\" /><text value=\" sql = \" /><text value=\"&quot;INSERT INTO fruits (name) VALUES (?)&quot;\" class=\"string\" /><text value=\";\" /><text type=\"break\" /><text value=\" \" /><text value=\"const\" class=\"keyword\" /><text value=\" result = db.prepare(sql).run(name);\" /><text type=\"break\" /><text type=\"break\" /><text value=\" \" /><text value=\"if\" class=\"keyword\" /><text value=\" (result.changes &gt; \" /><text value=\"0\" class=\"number\" /><text value=\") {\" /><text type=\"break\" /><text value=\"  res.status(\" /><text value=\"201\" class=\"number\" /><text value=\").json({\" /><text type=\"break\" /><text value=\"   \" /><text value=\"message\" class=\"attr\" /><text value=\": \" /><text value=\"&quot;Fruit added successfully&quot;\" class=\"string\" /><text type=\"break\" /><text value=\"  });\" /><text type=\"break\" /><text value=\" } \" /><text value=\"else\" class=\"keyword\" /><text value=\" {\" /><text type=\"break\" /><text value=\"  res.status(\" /><text value=\"500\" class=\"number\" /><text value=\").json({\" /><text type=\"break\" /><text value=\"   \" /><text value=\"message\" class=\"attr\" /><text value=\": \" /><text value=\"&quot;Failed to add fruit&quot;\" class=\"string\" /><text type=\"break\" /><text value=\"  });\" /><text type=\"break\" /><text value=\" }\" /><text type=\"break\" /><text value=\"});\" /><text type=\"break\" /><text type=\"break\" /><text value=\"app.listen(port, () =&gt; {\" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"`App is running on PORT \" /><text value=\"${port}\" class=\"subst\" /><text value=\"`\" /><text value=\");\" /><text type=\"break\" /><text value=\"});\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"509\" endIndex=\"513\" /><option startIndex=\"529\" endIndex=\"532\" /><option startIndex=\"544\" endIndex=\"574\" /></options></interaction></interactions><output><content><text value=\"{ message: &quot;Failed to add fruit&quot; }\" /></content></output></code><code version=\"2\" codelang=\"javascript\" name=\"database.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" Database = \" /><text value=\"require\" class=\"built_in\" /><text value=\"(\" /><text value=\"&quot;better-sqlite3&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" db = \" /><text value=\"new\" class=\"keyword\" /><text value=\" Database(\" /><text value=\"&quot;database.db&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text type=\"break\" /><text value=\"db.exec(\" /><text value=\"`\" /><text type=\"break\" /><text value=\"    CREATE TABLE IF NOT EXISTS fruits (\" /><text type=\"break\" /><text value=\"      id INTEGER PRIMARY KEY AUTOINCREMENT,\" /><text type=\"break\" /><text value=\"      name TEXT NOT NULL\" /><text type=\"break\" /><text value=\"    )\" /><text type=\"break\" /><text value=\"`\" /><text value=\");\" /><text type=\"break\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" rowCount = db.prepare(\" /><text value=\"&quot;SELECT COUNT(*) AS count FROM fruits&quot;\" class=\"string\" /><text value=\")\" /><text type=\"break\" /><text value=\" .get().count;\" /><text type=\"break\" /><text type=\"break\" /><text value=\"if\" class=\"keyword\" /><text value=\" (rowCount === \" /><text value=\"0\" class=\"number\" /><text value=\") {\" /><text type=\"break\" /><text value=\" \" /><text value=\"const\" class=\"keyword\" /><text value=\" insert = db.prepare(\" /><text value=\"&quot;INSERT INTO fruits (name) VALUES (?)&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\" \" /><text value=\"const\" class=\"keyword\" /><text value=\" fruits = [\" /><text value=\"'Apple'\" class=\"string\" /><text value=\", \" /><text value=\"'Banana'\" class=\"string\" /><text value=\", \" /><text value=\"'Cherry'\" class=\"string\" /><text value=\"];\" /><text type=\"break\" /><text value=\" fruits.forEach(\" /><text value=\"fruit\" class=\"params\" /><text value=\" =&gt;\" /><text value=\" insert.run(fruit));\" /><text type=\"break\" /><text value=\"}\" /><text type=\"break\" /><text type=\"break\" /><text value=\"module\" class=\"built_in\" /><text value=\".exports = db;\" /></content><output><content><text value=\"\" /><text type=\"break\" /><text value=\"/usr/lib/node_modules/better-sqlite3/lib/database.js:69\" /><text type=\"break\" /><text value=\"  [util.cppdb]: { value: new addon.Database(filename, filenameGiven, anonymous, readonly, fileMustExist, timeout, verbose || null, buffer || null) },\" /><text type=\"break\" /><text value=\"                         ^\" /><text type=\"break\" /><text value=\"SqliteError: unable to open database file\" /><text type=\"break\" /><text value=\"    at new Database (/usr/lib/node_modules/better-sqlite3/lib/database.js:69:26)\" /><text type=\"break\" /><text value=\"    at Object.&lt;anonymous&gt; (/home/default/code/file.js:2:12)\" /><text type=\"break\" /><text value=\"    at Module._compile (node:internal/modules/cjs/loader:1469:14)\" /><text type=\"break\" /><text value=\"    at Module._extensions..js (node:internal/modules/cjs/loader:1548:10)\" /><text type=\"break\" /><text value=\"    at Module.load (node:internal/modules/cjs/loader:1288:32)\" /><text type=\"break\" /><text value=\"    at Module._load (node:internal/modules/cjs/loader:1104:12)\" /><text type=\"break\" /><text value=\"    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:174:12)\" /><text type=\"break\" /><text value=\"    at node:internal/main/run_main_module:28:49 {\" /><text type=\"break\" /><text value=\"  code: 'SQLITE_CANTOPEN'\" /><text type=\"break\" /><text value=\"}\" /><text type=\"break\" /><text value=\"\" /><text type=\"break\" /><text value=\"Node.js v20.17.0\" /><text type=\"break\" /><text value=\"\" /></content></output></code><p visible-if=\"wrong\">Asegúrese de elegir <code>else</code> seguido de <code>500</code> y finalmente <code>message: \"Failed to add fruit\"</code>.</p></body></html>"
          },
          {
            "title": "Lesson #3 - Copy - Copy - Copy",
            "id": 132627,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Establece el código de estado correcto para un error inesperado del servidor.</p><code version=\"2\" codelang=\"javascript\" name=\"app.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" express = \" /><text value=\"require\" class=\"built_in\" /><text value=\"(\" /><text value=\"&quot;express&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" db = \" /><text value=\"require\" class=\"built_in\" /><text value=\"(\" /><text value=\"&quot;./database.js&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" app = express();\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" port = \" /><text value=\"3000\" class=\"number\" /><text value=\";\" /><text type=\"break\" /><text type=\"break\" /><text value=\"app.use(express.json());\" /><text type=\"break\" /><text type=\"break\" /><text value=\"app.get(\" /><text value=\"&quot;/fruits&quot;\" class=\"string\" /><text value=\", (req, res) =&gt; {\" /><text type=\"break\" /><text value=\" \" /><text value=\"const\" class=\"keyword\" /><text value=\" { name } = req.body;\" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\" \" /><text value=\"if\" class=\"keyword\" /><text value=\" (name === \" /><text value=\"undefined\" class=\"literal\" /><text value=\") {\" /><text type=\"break\" /><text value=\"  \" /><text value=\"return\" class=\"keyword\" /><text value=\" res.status(\" /><text value=\"400\" class=\"number\" /><text value=\").json({\" /><text type=\"break\" /><text value=\"   \" /><text value=\"message\" class=\"attr\" /><text value=\": \" /><text value=\"&quot;Please provide a name&quot;\" class=\"string\" /><text type=\"break\" /><text value=\"  });\" /><text type=\"break\" /><text value=\" }\" /><text type=\"break\" /><text type=\"break\" /><text value=\" \" /><text value=\"const\" class=\"keyword\" /><text value=\" sql = \" /><text value=\"&quot;INSERT INTO fruits (name) VALUES (?)&quot;\" class=\"string\" /><text value=\";\" /><text type=\"break\" /><text value=\" \" /><text value=\"const\" class=\"keyword\" /><text value=\" result = db.prepare(sql).run(name);\" /><text type=\"break\" /><text type=\"break\" /><text value=\" \" /><text value=\"if\" class=\"keyword\" /><text value=\" (result.changes &gt; \" /><text value=\"0\" class=\"number\" /><text value=\") {\" /><text type=\"break\" /><text value=\"  res.status(\" /><text value=\"201\" class=\"number\" /><text value=\").json({\" /><text type=\"break\" /><text value=\"   \" /><text value=\"message\" class=\"attr\" /><text value=\": \" /><text value=\"&quot;Fruit added successfully&quot;\" class=\"string\" /><text type=\"break\" /><text value=\"  });\" /><text type=\"break\" /><text value=\" } \" /><text value=\"else\" class=\"keyword\" /><text value=\" {\" /><text type=\"break\" /><text value=\"  res.status(\" /><text value=\"500\" class=\"number\" /><text value=\").json({\" /><text type=\"break\" /><text value=\"   \" /><text value=\"message\" class=\"attr\" /><text value=\": \" /><text value=\"&quot;Failed to add fruit&quot;\" class=\"string\" /><text type=\"break\" /><text value=\"  });\" /><text type=\"break\" /><text value=\" }\" /><text type=\"break\" /><text value=\"});\" /><text type=\"break\" /><text type=\"break\" /><text value=\"app.listen(port, () =&gt; {\" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"`App is running on PORT \" /><text value=\"${port}\" class=\"subst\" /><text value=\"`\" /><text value=\");\" /><text type=\"break\" /><text value=\"});\" /></content><interactions><interaction type=\"validatedInput\" isDefault=\"true\" startIndex=\"529\" endIndex=\"532\" /></interactions><output><content><text value=\"{ message: &quot;Failed to add fruit&quot; }\" /></content></output></code><code version=\"2\" codelang=\"javascript\" name=\"database.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" Database = \" /><text value=\"require\" class=\"built_in\" /><text value=\"(\" /><text value=\"&quot;better-sqlite3&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" db = \" /><text value=\"new\" class=\"keyword\" /><text value=\" Database(\" /><text value=\"&quot;database.db&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text type=\"break\" /><text value=\"db.exec(\" /><text value=\"`\" /><text type=\"break\" /><text value=\"    CREATE TABLE IF NOT EXISTS fruits (\" /><text type=\"break\" /><text value=\"      id INTEGER PRIMARY KEY AUTOINCREMENT,\" /><text type=\"break\" /><text value=\"      name TEXT NOT NULL\" /><text type=\"break\" /><text value=\"    )\" /><text type=\"break\" /><text value=\"`\" /><text value=\");\" /><text type=\"break\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" rowCount = db.prepare(\" /><text value=\"&quot;SELECT COUNT(*) AS count FROM fruits&quot;\" class=\"string\" /><text value=\")\" /><text type=\"break\" /><text value=\" .get().count;\" /><text type=\"break\" /><text type=\"break\" /><text value=\"if\" class=\"keyword\" /><text value=\" (rowCount === \" /><text value=\"0\" class=\"number\" /><text value=\") {\" /><text type=\"break\" /><text value=\" \" /><text value=\"const\" class=\"keyword\" /><text value=\" insert = db.prepare(\" /><text value=\"&quot;INSERT INTO fruits (name) VALUES (?)&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\" \" /><text value=\"const\" class=\"keyword\" /><text value=\" fruits = [\" /><text value=\"'Apple'\" class=\"string\" /><text value=\", \" /><text value=\"'Banana'\" class=\"string\" /><text value=\", \" /><text value=\"'Cherry'\" class=\"string\" /><text value=\"];\" /><text type=\"break\" /><text value=\" fruits.forEach(\" /><text value=\"fruit\" class=\"params\" /><text value=\" =&gt;\" /><text value=\" insert.run(fruit));\" /><text type=\"break\" /><text value=\"}\" /><text type=\"break\" /><text type=\"break\" /><text value=\"module\" class=\"built_in\" /><text value=\".exports = db;\" /></content><output><content><text value=\"\" /><text type=\"break\" /><text value=\"/usr/lib/node_modules/better-sqlite3/lib/database.js:69\" /><text type=\"break\" /><text value=\"  [util.cppdb]: { value: new addon.Database(filename, filenameGiven, anonymous, readonly, fileMustExist, timeout, verbose || null, buffer || null) },\" /><text type=\"break\" /><text value=\"                         ^\" /><text type=\"break\" /><text value=\"SqliteError: unable to open database file\" /><text type=\"break\" /><text value=\"    at new Database (/usr/lib/node_modules/better-sqlite3/lib/database.js:69:26)\" /><text type=\"break\" /><text value=\"    at Object.&lt;anonymous&gt; (/home/default/code/file.js:2:12)\" /><text type=\"break\" /><text value=\"    at Module._compile (node:internal/modules/cjs/loader:1469:14)\" /><text type=\"break\" /><text value=\"    at Module._extensions..js (node:internal/modules/cjs/loader:1548:10)\" /><text type=\"break\" /><text value=\"    at Module.load (node:internal/modules/cjs/loader:1288:32)\" /><text type=\"break\" /><text value=\"    at Module._load (node:internal/modules/cjs/loader:1104:12)\" /><text type=\"break\" /><text value=\"    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:174:12)\" /><text type=\"break\" /><text value=\"    at node:internal/main/run_main_module:28:49 {\" /><text type=\"break\" /><text value=\"  code: 'SQLITE_CANTOPEN'\" /><text type=\"break\" /><text value=\"}\" /><text type=\"break\" /><text value=\"\" /><text type=\"break\" /><text value=\"Node.js v20.17.0\" /><text type=\"break\" /><text value=\"\" /></content></output></code><p visible-if=\"wrong\">Asegúrese de elegir <code>500</code>.</p></body></html>"
          },
          {
            "title": "Lesson #15",
            "id": 132632,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>¿Qué respuesta deberíamos enviar si algo se ha añadido con éxito a la base de datos?</p><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\"><code>201 OK</code></item><item value=\"2\" correct=\"false\"><code>200 OK</code></item></selection><p visible-if=\"wrong\"><code>201 OK</code>.</p></body></html>"
          },
          {
            "title": "Lesson #3 - Copy - Copy - Copy",
            "id": 132628,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Establece el código de estado correcto para una inserción exitosa del nuevo elemento.</p><code version=\"2\" codelang=\"javascript\" name=\"app.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" express = \" /><text value=\"require\" class=\"built_in\" /><text value=\"(\" /><text value=\"&quot;express&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" db = \" /><text value=\"require\" class=\"built_in\" /><text value=\"(\" /><text value=\"&quot;./database.js&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" app = express();\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" port = \" /><text value=\"3000\" class=\"number\" /><text value=\";\" /><text type=\"break\" /><text type=\"break\" /><text value=\"app.use(express.json());\" /><text type=\"break\" /><text type=\"break\" /><text value=\"app.get(\" /><text value=\"&quot;/fruits&quot;\" class=\"string\" /><text value=\", (req, res) =&gt; {\" /><text type=\"break\" /><text value=\" \" /><text value=\"const\" class=\"keyword\" /><text value=\" { name } = req.body;\" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\" \" /><text value=\"if\" class=\"keyword\" /><text value=\" (name === \" /><text value=\"undefined\" class=\"literal\" /><text value=\") {\" /><text type=\"break\" /><text value=\"  \" /><text value=\"return\" class=\"keyword\" /><text value=\" res.status(\" /><text value=\"400\" class=\"number\" /><text value=\").json({\" /><text type=\"break\" /><text value=\"   \" /><text value=\"message\" class=\"attr\" /><text value=\": \" /><text value=\"&quot;Please provide a name&quot;\" class=\"string\" /><text type=\"break\" /><text value=\"  });\" /><text type=\"break\" /><text value=\" }\" /><text type=\"break\" /><text type=\"break\" /><text value=\" \" /><text value=\"const\" class=\"keyword\" /><text value=\" sql = \" /><text value=\"&quot;INSERT INTO fruits (name) VALUES (?)&quot;\" class=\"string\" /><text value=\";\" /><text type=\"break\" /><text value=\" \" /><text value=\"const\" class=\"keyword\" /><text value=\" result = db.prepare(sql).run(name);\" /><text type=\"break\" /><text type=\"break\" /><text value=\" \" /><text value=\"if\" class=\"keyword\" /><text value=\" (result.changes &gt; \" /><text value=\"0\" class=\"number\" /><text value=\") {\" /><text type=\"break\" /><text value=\"  res.status(\" /><text value=\"201\" class=\"number\" /><text value=\").json({\" /><text type=\"break\" /><text value=\"   \" /><text value=\"message\" class=\"attr\" /><text value=\": \" /><text value=\"&quot;Fruit added successfully&quot;\" class=\"string\" /><text type=\"break\" /><text value=\"  });\" /><text type=\"break\" /><text value=\" } \" /><text value=\"else\" class=\"keyword\" /><text value=\" {\" /><text type=\"break\" /><text value=\"  res.status(\" /><text value=\"500\" class=\"number\" /><text value=\").json({\" /><text type=\"break\" /><text value=\"   \" /><text value=\"message\" class=\"attr\" /><text value=\": \" /><text value=\"&quot;Failed to add fruit&quot;\" class=\"string\" /><text type=\"break\" /><text value=\"  });\" /><text type=\"break\" /><text value=\" }\" /><text type=\"break\" /><text value=\"});\" /><text type=\"break\" /><text type=\"break\" /><text value=\"app.listen(port, () =&gt; {\" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"`App is running on PORT \" /><text value=\"${port}\" class=\"subst\" /><text value=\"`\" /><text value=\");\" /><text type=\"break\" /><text value=\"});\" /></content><interactions><interaction type=\"validatedInput\" isDefault=\"true\" startIndex=\"449\" endIndex=\"452\" /></interactions><output><content><text value=\"{ message: Fruit added successfully&quot; }\" /></content></output></code><code version=\"2\" codelang=\"javascript\" name=\"database.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" Database = \" /><text value=\"require\" class=\"built_in\" /><text value=\"(\" /><text value=\"&quot;better-sqlite3&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" db = \" /><text value=\"new\" class=\"keyword\" /><text value=\" Database(\" /><text value=\"&quot;database.db&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text type=\"break\" /><text value=\"db.exec(\" /><text value=\"`\" /><text type=\"break\" /><text value=\"    CREATE TABLE IF NOT EXISTS fruits (\" /><text type=\"break\" /><text value=\"      id INTEGER PRIMARY KEY AUTOINCREMENT,\" /><text type=\"break\" /><text value=\"      name TEXT NOT NULL\" /><text type=\"break\" /><text value=\"    )\" /><text type=\"break\" /><text value=\"`\" /><text value=\");\" /><text type=\"break\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" rowCount = db.prepare(\" /><text value=\"&quot;SELECT COUNT(*) AS count FROM fruits&quot;\" class=\"string\" /><text value=\")\" /><text type=\"break\" /><text value=\" .get().count;\" /><text type=\"break\" /><text type=\"break\" /><text value=\"if\" class=\"keyword\" /><text value=\" (rowCount === \" /><text value=\"0\" class=\"number\" /><text value=\") {\" /><text type=\"break\" /><text value=\" \" /><text value=\"const\" class=\"keyword\" /><text value=\" insert = db.prepare(\" /><text value=\"&quot;INSERT INTO fruits (name) VALUES (?)&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\" \" /><text value=\"const\" class=\"keyword\" /><text value=\" fruits = [\" /><text value=\"'Apple'\" class=\"string\" /><text value=\", \" /><text value=\"'Banana'\" class=\"string\" /><text value=\", \" /><text value=\"'Cherry'\" class=\"string\" /><text value=\"];\" /><text type=\"break\" /><text value=\" fruits.forEach(\" /><text value=\"fruit\" class=\"params\" /><text value=\" =&gt;\" /><text value=\" insert.run(fruit));\" /><text type=\"break\" /><text value=\"}\" /><text type=\"break\" /><text type=\"break\" /><text value=\"module\" class=\"built_in\" /><text value=\".exports = db;\" /></content><output><content><text value=\"\" /><text type=\"break\" /><text value=\"/usr/lib/node_modules/better-sqlite3/lib/database.js:69\" /><text type=\"break\" /><text value=\"  [util.cppdb]: { value: new addon.Database(filename, filenameGiven, anonymous, readonly, fileMustExist, timeout, verbose || null, buffer || null) },\" /><text type=\"break\" /><text value=\"                         ^\" /><text type=\"break\" /><text value=\"SqliteError: unable to open database file\" /><text type=\"break\" /><text value=\"    at new Database (/usr/lib/node_modules/better-sqlite3/lib/database.js:69:26)\" /><text type=\"break\" /><text value=\"    at Object.&lt;anonymous&gt; (/home/default/code/file.js:2:12)\" /><text type=\"break\" /><text value=\"    at Module._compile (node:internal/modules/cjs/loader:1469:14)\" /><text type=\"break\" /><text value=\"    at Module._extensions..js (node:internal/modules/cjs/loader:1548:10)\" /><text type=\"break\" /><text value=\"    at Module.load (node:internal/modules/cjs/loader:1288:32)\" /><text type=\"break\" /><text value=\"    at Module._load (node:internal/modules/cjs/loader:1104:12)\" /><text type=\"break\" /><text value=\"    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:174:12)\" /><text type=\"break\" /><text value=\"    at node:internal/main/run_main_module:28:49 {\" /><text type=\"break\" /><text value=\"  code: 'SQLITE_CANTOPEN'\" /><text type=\"break\" /><text value=\"}\" /><text type=\"break\" /><text value=\"\" /><text type=\"break\" /><text value=\"Node.js v20.17.0\" /><text type=\"break\" /><text value=\"\" /></content></output></code><p visible-if=\"wrong\">Asegúrese de elegir <code>201</code>.</p></body></html>"
          },
          {
            "title": "Lesson #16",
            "id": 132633,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>¿Qué verifica <code>result.changes &gt; 0</code>?</p><code version=\"2\" codelang=\"javascript\" name=\"app.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" express = \" /><text value=\"require\" class=\"built_in\" /><text value=\"(\" /><text value=\"&quot;express&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" db = \" /><text value=\"require\" class=\"built_in\" /><text value=\"(\" /><text value=\"&quot;./database.js&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" app = express();\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" port = \" /><text value=\"3000\" class=\"number\" /><text value=\";\" /><text type=\"break\" /><text type=\"break\" /><text value=\"app.use(express.json());\" /><text type=\"break\" /><text type=\"break\" /><text value=\"app.get(\" /><text value=\"&quot;/fruits&quot;\" class=\"string\" /><text value=\", (req, res) =&gt; {\" /><text type=\"break\" /><text value=\" \" /><text value=\"const\" class=\"keyword\" /><text value=\" { name } = req.body;\" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\" \" /><text value=\"if\" class=\"keyword\" /><text value=\" (name === \" /><text value=\"undefined\" class=\"literal\" /><text value=\") {\" /><text type=\"break\" /><text value=\"  \" /><text value=\"return\" class=\"keyword\" /><text value=\" res.status(\" /><text value=\"400\" class=\"number\" /><text value=\").json({\" /><text type=\"break\" /><text value=\"   \" /><text value=\"message\" class=\"attr\" /><text value=\": \" /><text value=\"&quot;Please provide a name&quot;\" class=\"string\" /><text type=\"break\" /><text value=\"  });\" /><text type=\"break\" /><text value=\" }\" /><text type=\"break\" /><text type=\"break\" /><text value=\" \" /><text value=\"const\" class=\"keyword\" /><text value=\" sql = \" /><text value=\"&quot;INSERT INTO fruits (name) VALUES (?)&quot;\" class=\"string\" /><text value=\";\" /><text type=\"break\" /><text value=\" \" /><text value=\"const\" class=\"keyword\" /><text value=\" result = db.prepare(sql).run(name);\" /><text type=\"break\" /><text type=\"break\" /><text value=\" \" /><text value=\"if\" class=\"keyword\" /><text value=\" (result.changes &gt; \" /><text value=\"0\" class=\"number\" /><text value=\") {\" /><text type=\"break\" /><text value=\"  res.status(\" /><text value=\"201\" class=\"number\" /><text value=\").json({\" /><text type=\"break\" /><text value=\"   \" /><text value=\"message\" class=\"attr\" /><text value=\": \" /><text value=\"&quot;Fruit added successfully&quot;\" class=\"string\" /><text type=\"break\" /><text value=\"  });\" /><text type=\"break\" /><text value=\" } \" /><text value=\"else\" class=\"keyword\" /><text value=\" {\" /><text type=\"break\" /><text value=\"  res.status(\" /><text value=\"500\" class=\"number\" /><text value=\").json({\" /><text type=\"break\" /><text value=\"   \" /><text value=\"message\" class=\"attr\" /><text value=\": \" /><text value=\"&quot;Failed to add fruit&quot;\" class=\"string\" /><text type=\"break\" /><text value=\"  });\" /><text type=\"break\" /><text value=\" }\" /><text type=\"break\" /><text value=\"});\" /><text type=\"break\" /><text type=\"break\" /><text value=\"app.listen(port, () =&gt; {\" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"`App is running on PORT \" /><text value=\"${port}\" class=\"subst\" /><text value=\"`\" /><text value=\");\" /><text type=\"break\" /><text value=\"});\" /></content><output><content><text value=\"{ message: Fruit added successfully&quot; }\" /></content></output></code><code version=\"2\" codelang=\"javascript\" name=\"database.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" Database = \" /><text value=\"require\" class=\"built_in\" /><text value=\"(\" /><text value=\"&quot;better-sqlite3&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" db = \" /><text value=\"new\" class=\"keyword\" /><text value=\" Database(\" /><text value=\"&quot;database.db&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text type=\"break\" /><text value=\"db.exec(\" /><text value=\"`\" /><text type=\"break\" /><text value=\"    CREATE TABLE IF NOT EXISTS fruits (\" /><text type=\"break\" /><text value=\"      id INTEGER PRIMARY KEY AUTOINCREMENT,\" /><text type=\"break\" /><text value=\"      name TEXT NOT NULL\" /><text type=\"break\" /><text value=\"    )\" /><text type=\"break\" /><text value=\"`\" /><text value=\");\" /><text type=\"break\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" rowCount = db.prepare(\" /><text value=\"&quot;SELECT COUNT(*) AS count FROM fruits&quot;\" class=\"string\" /><text value=\")\" /><text type=\"break\" /><text value=\" .get().count;\" /><text type=\"break\" /><text type=\"break\" /><text value=\"if\" class=\"keyword\" /><text value=\" (rowCount === \" /><text value=\"0\" class=\"number\" /><text value=\") {\" /><text type=\"break\" /><text value=\" \" /><text value=\"const\" class=\"keyword\" /><text value=\" insert = db.prepare(\" /><text value=\"&quot;INSERT INTO fruits (name) VALUES (?)&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\" \" /><text value=\"const\" class=\"keyword\" /><text value=\" fruits = [\" /><text value=\"'Apple'\" class=\"string\" /><text value=\", \" /><text value=\"'Banana'\" class=\"string\" /><text value=\", \" /><text value=\"'Cherry'\" class=\"string\" /><text value=\"];\" /><text type=\"break\" /><text value=\" fruits.forEach(\" /><text value=\"fruit\" class=\"params\" /><text value=\" =&gt;\" /><text value=\" insert.run(fruit));\" /><text type=\"break\" /><text value=\"}\" /><text type=\"break\" /><text type=\"break\" /><text value=\"module\" class=\"built_in\" /><text value=\".exports = db;\" /></content><output><content><text value=\"\" /><text type=\"break\" /><text value=\"/usr/lib/node_modules/better-sqlite3/lib/database.js:69\" /><text type=\"break\" /><text value=\"  [util.cppdb]: { value: new addon.Database(filename, filenameGiven, anonymous, readonly, fileMustExist, timeout, verbose || null, buffer || null) },\" /><text type=\"break\" /><text value=\"                         ^\" /><text type=\"break\" /><text value=\"SqliteError: unable to open database file\" /><text type=\"break\" /><text value=\"    at new Database (/usr/lib/node_modules/better-sqlite3/lib/database.js:69:26)\" /><text type=\"break\" /><text value=\"    at Object.&lt;anonymous&gt; (/home/default/code/file.js:2:12)\" /><text type=\"break\" /><text value=\"    at Module._compile (node:internal/modules/cjs/loader:1469:14)\" /><text type=\"break\" /><text value=\"    at Module._extensions..js (node:internal/modules/cjs/loader:1548:10)\" /><text type=\"break\" /><text value=\"    at Module.load (node:internal/modules/cjs/loader:1288:32)\" /><text type=\"break\" /><text value=\"    at Module._load (node:internal/modules/cjs/loader:1104:12)\" /><text type=\"break\" /><text value=\"    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:174:12)\" /><text type=\"break\" /><text value=\"    at node:internal/main/run_main_module:28:49 {\" /><text type=\"break\" /><text value=\"  code: 'SQLITE_CANTOPEN'\" /><text type=\"break\" /><text value=\"}\" /><text type=\"break\" /><text value=\"\" /><text type=\"break\" /><text value=\"Node.js v20.17.0\" /><text type=\"break\" /><text value=\"\" /></content></output></code><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\"> Verifica si una fila fue insertada exitosamente en la base de datos</item><item value=\"2\" correct=\"false\">Verifica si el nombre se actualizó correctamente</item></selection><p visible-if=\"wrong\"> Verifica si una fila fue insertada exitosamente en la base de datos.</p></body></html>"
          },
          {
            "title": "Lesson #3 - Copy - Copy - Copy",
            "id": 132629,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Crea una declaración SQL parametrizada que inserte el elemento con un nombre dado en la tabla de frutas.</p><code version=\"2\" codelang=\"javascript\" name=\"app.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" express = \" /><text value=\"require\" class=\"built_in\" /><text value=\"(\" /><text value=\"&quot;express&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" db = \" /><text value=\"require\" class=\"built_in\" /><text value=\"(\" /><text value=\"&quot;./database.js&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" app = express();\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" port = \" /><text value=\"3000\" class=\"number\" /><text value=\";\" /><text type=\"break\" /><text type=\"break\" /><text value=\"app.use(express.json());\" /><text type=\"break\" /><text type=\"break\" /><text value=\"app.get(\" /><text value=\"&quot;/fruits&quot;\" class=\"string\" /><text value=\", (req, res) =&gt; {\" /><text type=\"break\" /><text value=\" \" /><text value=\"const\" class=\"keyword\" /><text value=\" { name } = req.body;\" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\" \" /><text value=\"if\" class=\"keyword\" /><text value=\" (name === \" /><text value=\"undefined\" class=\"literal\" /><text value=\") {\" /><text type=\"break\" /><text value=\"  \" /><text value=\"return\" class=\"keyword\" /><text value=\" res.status(\" /><text value=\"400\" class=\"number\" /><text value=\").json({\" /><text type=\"break\" /><text value=\"   \" /><text value=\"message\" class=\"attr\" /><text value=\": \" /><text value=\"&quot;Please provide a name&quot;\" class=\"string\" /><text type=\"break\" /><text value=\"  });\" /><text type=\"break\" /><text value=\" }\" /><text type=\"break\" /><text type=\"break\" /><text value=\" \" /><text value=\"const\" class=\"keyword\" /><text value=\" sql = \" /><text value=\"&quot;INSERT INTO fruits (name) VALUES (?)&quot;\" class=\"string\" /><text value=\";\" /><text type=\"break\" /><text value=\" \" /><text value=\"const\" class=\"keyword\" /><text value=\" result = db.prepare(sql).run(name);\" /><text type=\"break\" /><text type=\"break\" /><text value=\" \" /><text value=\"if\" class=\"keyword\" /><text value=\" (result.changes &gt; \" /><text value=\"0\" class=\"number\" /><text value=\") {\" /><text type=\"break\" /><text value=\"  res.status(\" /><text value=\"201\" class=\"number\" /><text value=\").json({\" /><text type=\"break\" /><text value=\"   \" /><text value=\"message\" class=\"attr\" /><text value=\": \" /><text value=\"&quot;Fruit added successfully&quot;\" class=\"string\" /><text type=\"break\" /><text value=\"  });\" /><text type=\"break\" /><text value=\" } \" /><text value=\"else\" class=\"keyword\" /><text value=\" {\" /><text type=\"break\" /><text value=\"  res.status(\" /><text value=\"500\" class=\"number\" /><text value=\").json({\" /><text type=\"break\" /><text value=\"   \" /><text value=\"message\" class=\"attr\" /><text value=\": \" /><text value=\"&quot;Failed to add fruit&quot;\" class=\"string\" /><text type=\"break\" /><text value=\"  });\" /><text type=\"break\" /><text value=\" }\" /><text type=\"break\" /><text value=\"});\" /><text type=\"break\" /><text type=\"break\" /><text value=\"app.listen(port, () =&gt; {\" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"`App is running on PORT \" /><text value=\"${port}\" class=\"subst\" /><text value=\"`\" /><text value=\");\" /><text type=\"break\" /><text value=\"});\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"326\" endIndex=\"332\" /><option startIndex=\"333\" endIndex=\"337\" /><option startIndex=\"338\" endIndex=\"344\" /><option startIndex=\"352\" endIndex=\"358\" /><option startIndex=\"345\" endIndex=\"351\" /><option startIndex=\"359\" endIndex=\"362\" /></options></interaction></interactions><output><content><text value=\"{ message: Fruit added successfully&quot; }\" /></content></output></code><code version=\"2\" codelang=\"javascript\" name=\"database.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" Database = \" /><text value=\"require\" class=\"built_in\" /><text value=\"(\" /><text value=\"&quot;better-sqlite3&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" db = \" /><text value=\"new\" class=\"keyword\" /><text value=\" Database(\" /><text value=\"&quot;database.db&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text type=\"break\" /><text value=\"db.exec(\" /><text value=\"`\" /><text type=\"break\" /><text value=\"    CREATE TABLE IF NOT EXISTS fruits (\" /><text type=\"break\" /><text value=\"      id INTEGER PRIMARY KEY AUTOINCREMENT,\" /><text type=\"break\" /><text value=\"      name TEXT NOT NULL\" /><text type=\"break\" /><text value=\"    )\" /><text type=\"break\" /><text value=\"`\" /><text value=\");\" /><text type=\"break\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" rowCount = db.prepare(\" /><text value=\"&quot;SELECT COUNT(*) AS count FROM fruits&quot;\" class=\"string\" /><text value=\")\" /><text type=\"break\" /><text value=\" .get().count;\" /><text type=\"break\" /><text type=\"break\" /><text value=\"if\" class=\"keyword\" /><text value=\" (rowCount === \" /><text value=\"0\" class=\"number\" /><text value=\") {\" /><text type=\"break\" /><text value=\" \" /><text value=\"const\" class=\"keyword\" /><text value=\" insert = db.prepare(\" /><text value=\"&quot;INSERT INTO fruits (name) VALUES (?)&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\" \" /><text value=\"const\" class=\"keyword\" /><text value=\" fruits = [\" /><text value=\"'Apple'\" class=\"string\" /><text value=\", \" /><text value=\"'Banana'\" class=\"string\" /><text value=\", \" /><text value=\"'Cherry'\" class=\"string\" /><text value=\"];\" /><text type=\"break\" /><text value=\" fruits.forEach(\" /><text value=\"fruit\" class=\"params\" /><text value=\" =&gt;\" /><text value=\" insert.run(fruit));\" /><text type=\"break\" /><text value=\"}\" /><text type=\"break\" /><text type=\"break\" /><text value=\"module\" class=\"built_in\" /><text value=\".exports = db;\" /></content><output><content><text value=\"\" /><text type=\"break\" /><text value=\"/usr/lib/node_modules/better-sqlite3/lib/database.js:69\" /><text type=\"break\" /><text value=\"  [util.cppdb]: { value: new addon.Database(filename, filenameGiven, anonymous, readonly, fileMustExist, timeout, verbose || null, buffer || null) },\" /><text type=\"break\" /><text value=\"                         ^\" /><text type=\"break\" /><text value=\"SqliteError: unable to open database file\" /><text type=\"break\" /><text value=\"    at new Database (/usr/lib/node_modules/better-sqlite3/lib/database.js:69:26)\" /><text type=\"break\" /><text value=\"    at Object.&lt;anonymous&gt; (/home/default/code/file.js:2:12)\" /><text type=\"break\" /><text value=\"    at Module._compile (node:internal/modules/cjs/loader:1469:14)\" /><text type=\"break\" /><text value=\"    at Module._extensions..js (node:internal/modules/cjs/loader:1548:10)\" /><text type=\"break\" /><text value=\"    at Module.load (node:internal/modules/cjs/loader:1288:32)\" /><text type=\"break\" /><text value=\"    at Module._load (node:internal/modules/cjs/loader:1104:12)\" /><text type=\"break\" /><text value=\"    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:174:12)\" /><text type=\"break\" /><text value=\"    at node:internal/main/run_main_module:28:49 {\" /><text type=\"break\" /><text value=\"  code: 'SQLITE_CANTOPEN'\" /><text type=\"break\" /><text value=\"}\" /><text type=\"break\" /><text value=\"\" /><text type=\"break\" /><text value=\"Node.js v20.17.0\" /><text type=\"break\" /><text value=\"\" /></content></output></code><p visible-if=\"wrong\">Asegúrese de elegir <code>INSERT</code> seguido de <code>INTO</code> y luego <code>fruits</code>, <code>(name)</code>, <code>VALUES</code>, <code>(?)</code>.</p></body></html>"
          }
        ]
      },
      {
        "id": 15037,
        "title": "Endpoints DELETE y PATCH",
        "type": "practiceLevel1",
        "lessons": [
          {
            "title": "Lesson #1",
            "id": 132605,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Ahora echaremos un vistazo a los endpoints <code>DELETE</code> y <code>PATCH</code>.</p><p>Continuamos trabajando con nuestro archivo <code>databse.js</code>, que nos proporciona una base de datos con la que trabajar.</p><code version=\"2\" codelang=\"javascript\" name=\"database.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" Database = \" /><text value=\"require\" class=\"built_in\" /><text value=\"(\" /><text value=\"&quot;better-sqlite3&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" db = \" /><text value=\"new\" class=\"keyword\" /><text value=\" Database(\" /><text value=\"&quot;database.db&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text type=\"break\" /><text value=\"db.exec(\" /><text value=\"`\" /><text type=\"break\" /><text value=\"    CREATE TABLE IF NOT EXISTS fruits (\" /><text type=\"break\" /><text value=\"      id INTEGER PRIMARY KEY AUTOINCREMENT,\" /><text type=\"break\" /><text value=\"      name TEXT NOT NULL\" /><text type=\"break\" /><text value=\"    )\" /><text type=\"break\" /><text value=\"`\" /><text value=\");\" /><text type=\"break\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" rowCount = db.prepare(\" /><text value=\"&quot;SELECT COUNT(*) AS count FROM fruits&quot;\" class=\"string\" /><text value=\")\" /><text type=\"break\" /><text value=\" .get().count;\" /><text type=\"break\" /><text type=\"break\" /><text value=\"if\" class=\"keyword\" /><text value=\" (rowCount === \" /><text value=\"0\" class=\"number\" /><text value=\") {\" /><text type=\"break\" /><text value=\" \" /><text value=\"const\" class=\"keyword\" /><text value=\" insert = db.prepare(\" /><text value=\"&quot;INSERT INTO fruits (name) VALUES (?)&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\" \" /><text value=\"const\" class=\"keyword\" /><text value=\" fruits = [\" /><text value=\"'Apple'\" class=\"string\" /><text value=\", \" /><text value=\"'Banana'\" class=\"string\" /><text value=\", \" /><text value=\"'Cherry'\" class=\"string\" /><text value=\"];\" /><text type=\"break\" /><text value=\" fruits.forEach(\" /><text value=\"fruit\" class=\"params\" /><text value=\" =&gt;\" /><text value=\" insert.run(fruit));\" /><text type=\"break\" /><text value=\"}\" /><text type=\"break\" /><text type=\"break\" /><text value=\"module\" class=\"built_in\" /><text value=\".exports = db;\" /></content></code></body></html>"
          },
          {
            "title": "Lesson #3 - Copy - Copy",
            "id": 132606,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Cuando creamos un endpoint de <code>DELETE</code>, necesitamos verificar el parámetro de la ruta para entender qué entrada debe ser eliminada.</p><code version=\"2\" codelang=\"javascript\" name=\"app.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" express = \" /><text value=\"require\" class=\"built_in\" /><text value=\"(\" /><text value=\"&quot;express&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" db = \" /><text value=\"require\" class=\"built_in\" /><text value=\"(\" /><text value=\"&quot;./database.js&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" app = express();\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" port = \" /><text value=\"3000\" class=\"number\" /><text value=\";\" /><text type=\"break\" /><text type=\"break\" /><text value=\"app.delete(\" /><text value=\"&quot;/fruits/:id&quot;\" class=\"string\" /><text value=\", (req, res) =&gt; {\" /><text type=\"break\" /><text value=\" \" /><text value=\"const\" class=\"keyword\" /><text value=\" { id } = req.params;\" /><text type=\"break\" /><text value=\"});\" /><text type=\"break\" /><text type=\"break\" /><text value=\"app.listen(port, () =&gt; {\" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"`App is running on PORT \" /><text value=\"${port}\" class=\"subst\" /><text value=\"`\" /><text value=\");\" /><text type=\"break\" /><text value=\"});\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"136\" endIndex=\"139\" /><option startIndex=\"167\" endIndex=\"169\" /><option startIndex=\"174\" endIndex=\"184\" /></options></interaction></interactions></code><code version=\"2\" codelang=\"javascript\" name=\"database.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" Database = \" /><text value=\"require\" class=\"built_in\" /><text value=\"(\" /><text value=\"&quot;better-sqlite3&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" db = \" /><text value=\"new\" class=\"keyword\" /><text value=\" Database(\" /><text value=\"&quot;database.db&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text type=\"break\" /><text value=\"db.exec(\" /><text value=\"`\" /><text type=\"break\" /><text value=\"    CREATE TABLE IF NOT EXISTS fruits (\" /><text type=\"break\" /><text value=\"      id INTEGER PRIMARY KEY AUTOINCREMENT,\" /><text type=\"break\" /><text value=\"      name TEXT NOT NULL\" /><text type=\"break\" /><text value=\"    )\" /><text type=\"break\" /><text value=\"`\" /><text value=\");\" /><text type=\"break\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" rowCount = db.prepare(\" /><text value=\"&quot;SELECT COUNT(*) AS count FROM fruits&quot;\" class=\"string\" /><text value=\")\" /><text type=\"break\" /><text value=\" .get().count;\" /><text type=\"break\" /><text type=\"break\" /><text value=\"if\" class=\"keyword\" /><text value=\" (rowCount === \" /><text value=\"0\" class=\"number\" /><text value=\") {\" /><text type=\"break\" /><text value=\" \" /><text value=\"const\" class=\"keyword\" /><text value=\" insert = db.prepare(\" /><text value=\"&quot;INSERT INTO fruits (name) VALUES (?)&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\" \" /><text value=\"const\" class=\"keyword\" /><text value=\" fruits = [\" /><text value=\"'Apple'\" class=\"string\" /><text value=\", \" /><text value=\"'Banana'\" class=\"string\" /><text value=\", \" /><text value=\"'Cherry'\" class=\"string\" /><text value=\"];\" /><text type=\"break\" /><text value=\" fruits.forEach(\" /><text value=\"fruit\" class=\"params\" /><text value=\" =&gt;\" /><text value=\" insert.run(fruit));\" /><text type=\"break\" /><text value=\"}\" /><text type=\"break\" /><text type=\"break\" /><text value=\"module\" class=\"built_in\" /><text value=\".exports = db;\" /></content><output><content><text value=\"\" /><text type=\"break\" /><text value=\"/usr/lib/node_modules/better-sqlite3/lib/database.js:69\" /><text type=\"break\" /><text value=\"  [util.cppdb]: { value: new addon.Database(filename, filenameGiven, anonymous, readonly, fileMustExist, timeout, verbose || null, buffer || null) },\" /><text type=\"break\" /><text value=\"                         ^\" /><text type=\"break\" /><text value=\"SqliteError: unable to open database file\" /><text type=\"break\" /><text value=\"    at new Database (/usr/lib/node_modules/better-sqlite3/lib/database.js:69:26)\" /><text type=\"break\" /><text value=\"    at Object.&lt;anonymous&gt; (/home/default/code/file.js:2:12)\" /><text type=\"break\" /><text value=\"    at Module._compile (node:internal/modules/cjs/loader:1469:14)\" /><text type=\"break\" /><text value=\"    at Module._extensions..js (node:internal/modules/cjs/loader:1548:10)\" /><text type=\"break\" /><text value=\"    at Module.load (node:internal/modules/cjs/loader:1288:32)\" /><text type=\"break\" /><text value=\"    at Module._load (node:internal/modules/cjs/loader:1104:12)\" /><text type=\"break\" /><text value=\"    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:174:12)\" /><text type=\"break\" /><text value=\"    at node:internal/main/run_main_module:28:49 {\" /><text type=\"break\" /><text value=\"  code: 'SQLITE_CANTOPEN'\" /><text type=\"break\" /><text value=\"}\" /><text type=\"break\" /><text value=\"\" /><text type=\"break\" /><text value=\"Node.js v20.17.0\" /><text type=\"break\" /><text value=\"\" /></content></output></code><p visible-if=\"wrong\">Asegúrese de elegir <code>:id</code> seguido de <code>id</code> y finalmente <code>req.params</code>.</p></body></html>"
          },
          {
            "title": "Lesson #3 - Copy - Copy - Copy",
            "id": 132607,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Usamos una consulta parametrizada con un marcador de posición para el <code>id</code>. Después de preparar la declaración, podemos ejecutarla y pasar el parámetro de ruta.</p><code version=\"2\" codelang=\"javascript\" name=\"app.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" express = \" /><text value=\"require\" class=\"built_in\" /><text value=\"(\" /><text value=\"&quot;express&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" db = \" /><text value=\"require\" class=\"built_in\" /><text value=\"(\" /><text value=\"&quot;./database.js&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" app = express();\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" port = \" /><text value=\"3000\" class=\"number\" /><text value=\";\" /><text type=\"break\" /><text type=\"break\" /><text value=\"app.delete(\" /><text value=\"&quot;/fruits/:id&quot;\" class=\"string\" /><text value=\", (req, res) =&gt; {\" /><text type=\"break\" /><text value=\" \" /><text value=\"const\" class=\"keyword\" /><text value=\" { id } = req.params;\" /><text type=\"break\" /><text value=\" \" /><text value=\"const\" class=\"keyword\" /><text value=\" sql = \" /><text value=\"&quot;DELETE FROM fruits WHERE id = ?&quot;\" class=\"string\" /><text value=\";\" /><text type=\"break\" /><text value=\" \" /><text value=\"const\" class=\"keyword\" /><text value=\" result = db.prepare(sql).run(id);\" /><text type=\"break\" /><text value=\"});\" /><text type=\"break\" /><text type=\"break\" /><text value=\"app.listen(port, () =&gt; {\" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"`App is running on PORT \" /><text value=\"${port}\" class=\"subst\" /><text value=\"`\" /><text value=\");\" /><text type=\"break\" /><text value=\"});\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"200\" endIndex=\"206\" /><option startIndex=\"225\" endIndex=\"227\" /><option startIndex=\"230\" endIndex=\"231\" /><option startIndex=\"270\" endIndex=\"272\" /></options></interaction></interactions></code><code version=\"2\" codelang=\"javascript\" name=\"database.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" Database = \" /><text value=\"require\" class=\"built_in\" /><text value=\"(\" /><text value=\"&quot;better-sqlite3&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" db = \" /><text value=\"new\" class=\"keyword\" /><text value=\" Database(\" /><text value=\"&quot;database.db&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text type=\"break\" /><text value=\"db.exec(\" /><text value=\"`\" /><text type=\"break\" /><text value=\"    CREATE TABLE IF NOT EXISTS fruits (\" /><text type=\"break\" /><text value=\"      id INTEGER PRIMARY KEY AUTOINCREMENT,\" /><text type=\"break\" /><text value=\"      name TEXT NOT NULL\" /><text type=\"break\" /><text value=\"    )\" /><text type=\"break\" /><text value=\"`\" /><text value=\");\" /><text type=\"break\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" rowCount = db.prepare(\" /><text value=\"&quot;SELECT COUNT(*) AS count FROM fruits&quot;\" class=\"string\" /><text value=\")\" /><text type=\"break\" /><text value=\" .get().count;\" /><text type=\"break\" /><text type=\"break\" /><text value=\"if\" class=\"keyword\" /><text value=\" (rowCount === \" /><text value=\"0\" class=\"number\" /><text value=\") {\" /><text type=\"break\" /><text value=\" \" /><text value=\"const\" class=\"keyword\" /><text value=\" insert = db.prepare(\" /><text value=\"&quot;INSERT INTO fruits (name) VALUES (?)&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\" \" /><text value=\"const\" class=\"keyword\" /><text value=\" fruits = [\" /><text value=\"'Apple'\" class=\"string\" /><text value=\", \" /><text value=\"'Banana'\" class=\"string\" /><text value=\", \" /><text value=\"'Cherry'\" class=\"string\" /><text value=\"];\" /><text type=\"break\" /><text value=\" fruits.forEach(\" /><text value=\"fruit\" class=\"params\" /><text value=\" =&gt;\" /><text value=\" insert.run(fruit));\" /><text type=\"break\" /><text value=\"}\" /><text type=\"break\" /><text type=\"break\" /><text value=\"module\" class=\"built_in\" /><text value=\".exports = db;\" /></content><output><content><text value=\"\" /><text type=\"break\" /><text value=\"/usr/lib/node_modules/better-sqlite3/lib/database.js:69\" /><text type=\"break\" /><text value=\"  [util.cppdb]: { value: new addon.Database(filename, filenameGiven, anonymous, readonly, fileMustExist, timeout, verbose || null, buffer || null) },\" /><text type=\"break\" /><text value=\"                         ^\" /><text type=\"break\" /><text value=\"SqliteError: unable to open database file\" /><text type=\"break\" /><text value=\"    at new Database (/usr/lib/node_modules/better-sqlite3/lib/database.js:69:26)\" /><text type=\"break\" /><text value=\"    at Object.&lt;anonymous&gt; (/home/default/code/file.js:2:12)\" /><text type=\"break\" /><text value=\"    at Module._compile (node:internal/modules/cjs/loader:1469:14)\" /><text type=\"break\" /><text value=\"    at Module._extensions..js (node:internal/modules/cjs/loader:1548:10)\" /><text type=\"break\" /><text value=\"    at Module.load (node:internal/modules/cjs/loader:1288:32)\" /><text type=\"break\" /><text value=\"    at Module._load (node:internal/modules/cjs/loader:1104:12)\" /><text type=\"break\" /><text value=\"    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:174:12)\" /><text type=\"break\" /><text value=\"    at node:internal/main/run_main_module:28:49 {\" /><text type=\"break\" /><text value=\"  code: 'SQLITE_CANTOPEN'\" /><text type=\"break\" /><text value=\"}\" /><text type=\"break\" /><text value=\"\" /><text type=\"break\" /><text value=\"Node.js v20.17.0\" /><text type=\"break\" /><text value=\"\" /></content></output></code><p visible-if=\"wrong\">Asegúrese de elegir <code>DELETE</code> seguido de <code>id</code> y luego <code>?</code>, <code>id</code>.</p></body></html>"
          },
          {
            "title": "da",
            "id": 132608,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>No hemos comprobado si <code>id</code> era realmente un valor válido. Ahora verificaremos el resultado y veremos si todo funcionó.</p><p>Comprobamos el número de cambios mirando <code>result.changes</code>, y enviamos una respuesta adecuada.</p><code version=\"2\" codelang=\"javascript\" name=\"app.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" express = \" /><text value=\"require\" class=\"built_in\" /><text value=\"(\" /><text value=\"&quot;express&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" db = \" /><text value=\"require\" class=\"built_in\" /><text value=\"(\" /><text value=\"&quot;./database.js&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" app = express();\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" port = \" /><text value=\"3000\" class=\"number\" /><text value=\";\" /><text type=\"break\" /><text type=\"break\" /><text value=\"app.delete(\" /><text value=\"&quot;/fruits/:id&quot;\" class=\"string\" /><text value=\", (req, res) =&gt; {\" /><text type=\"break\" /><text value=\" \" /><text value=\"const\" class=\"keyword\" /><text value=\" { id } = req.params;\" /><text type=\"break\" /><text value=\" \" /><text value=\"const\" class=\"keyword\" /><text value=\" sql = \" /><text value=\"&quot;DELETE FROM fruits WHERE id = ?&quot;\" class=\"string\" /><text value=\";\" /><text type=\"break\" /><text value=\" \" /><text value=\"const\" class=\"keyword\" /><text value=\" result = db.prepare(sql).run(id);\" /><text type=\"break\" /><text type=\"break\" /><text value=\" \" /><text value=\"if\" class=\"keyword\" /><text value=\" (result.changes &gt; \" /><text value=\"0\" class=\"number\" /><text value=\") {\" /><text type=\"break\" /><text value=\"  res.status(\" /><text value=\"200\" class=\"number\" /><text value=\").json({\" /><text type=\"break\" /><text value=\"   \" /><text value=\"message\" class=\"attr\" /><text value=\": \" /><text value=\"&quot;Fruit deleted successfully&quot;\" class=\"string\" /><text type=\"break\" /><text value=\"  });\" /><text type=\"break\" /><text value=\" } \" /><text value=\"else\" class=\"keyword\" /><text value=\" {\" /><text type=\"break\" /><text value=\"  res.status(\" /><text value=\"404\" class=\"number\" /><text value=\").json({\" /><text type=\"break\" /><text value=\"   \" /><text value=\"message\" class=\"attr\" /><text value=\": \" /><text value=\"&quot;Fruit not found&quot;\" class=\"string\" /><text type=\"break\" /><text value=\"  });\" /><text type=\"break\" /><text value=\" }\" /><text type=\"break\" /><text value=\"});\" /><text type=\"break\" /><text type=\"break\" /><text value=\"app.listen(port, () =&gt; {\" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"`App is running on PORT \" /><text value=\"${port}\" class=\"subst\" /><text value=\"`\" /><text value=\");\" /><text type=\"break\" /><text value=\"});\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"281\" endIndex=\"299\" /><option startIndex=\"316\" endIndex=\"319\" /><option startIndex=\"398\" endIndex=\"401\" /></options></interaction></interactions><output><content><text value=\"{ message: &quot;Fruit deleted successfully&quot; }\" /></content></output></code><code version=\"2\" codelang=\"javascript\" name=\"database.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" Database = \" /><text value=\"require\" class=\"built_in\" /><text value=\"(\" /><text value=\"&quot;better-sqlite3&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" db = \" /><text value=\"new\" class=\"keyword\" /><text value=\" Database(\" /><text value=\"&quot;database.db&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text type=\"break\" /><text value=\"db.exec(\" /><text value=\"`\" /><text type=\"break\" /><text value=\"    CREATE TABLE IF NOT EXISTS fruits (\" /><text type=\"break\" /><text value=\"      id INTEGER PRIMARY KEY AUTOINCREMENT,\" /><text type=\"break\" /><text value=\"      name TEXT NOT NULL\" /><text type=\"break\" /><text value=\"    )\" /><text type=\"break\" /><text value=\"`\" /><text value=\");\" /><text type=\"break\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" rowCount = db.prepare(\" /><text value=\"&quot;SELECT COUNT(*) AS count FROM fruits&quot;\" class=\"string\" /><text value=\")\" /><text type=\"break\" /><text value=\" .get().count;\" /><text type=\"break\" /><text type=\"break\" /><text value=\"if\" class=\"keyword\" /><text value=\" (rowCount === \" /><text value=\"0\" class=\"number\" /><text value=\") {\" /><text type=\"break\" /><text value=\" \" /><text value=\"const\" class=\"keyword\" /><text value=\" insert = db.prepare(\" /><text value=\"&quot;INSERT INTO fruits (name) VALUES (?)&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\" \" /><text value=\"const\" class=\"keyword\" /><text value=\" fruits = [\" /><text value=\"'Apple'\" class=\"string\" /><text value=\", \" /><text value=\"'Banana'\" class=\"string\" /><text value=\", \" /><text value=\"'Cherry'\" class=\"string\" /><text value=\"];\" /><text type=\"break\" /><text value=\" fruits.forEach(\" /><text value=\"fruit\" class=\"params\" /><text value=\" =&gt;\" /><text value=\" insert.run(fruit));\" /><text type=\"break\" /><text value=\"}\" /><text type=\"break\" /><text type=\"break\" /><text value=\"module\" class=\"built_in\" /><text value=\".exports = db;\" /></content><output><content><text value=\"\" /><text type=\"break\" /><text value=\"/usr/lib/node_modules/better-sqlite3/lib/database.js:69\" /><text type=\"break\" /><text value=\"  [util.cppdb]: { value: new addon.Database(filename, filenameGiven, anonymous, readonly, fileMustExist, timeout, verbose || null, buffer || null) },\" /><text type=\"break\" /><text value=\"                         ^\" /><text type=\"break\" /><text value=\"SqliteError: unable to open database file\" /><text type=\"break\" /><text value=\"    at new Database (/usr/lib/node_modules/better-sqlite3/lib/database.js:69:26)\" /><text type=\"break\" /><text value=\"    at Object.&lt;anonymous&gt; (/home/default/code/file.js:2:12)\" /><text type=\"break\" /><text value=\"    at Module._compile (node:internal/modules/cjs/loader:1469:14)\" /><text type=\"break\" /><text value=\"    at Module._extensions..js (node:internal/modules/cjs/loader:1548:10)\" /><text type=\"break\" /><text value=\"    at Module.load (node:internal/modules/cjs/loader:1288:32)\" /><text type=\"break\" /><text value=\"    at Module._load (node:internal/modules/cjs/loader:1104:12)\" /><text type=\"break\" /><text value=\"    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:174:12)\" /><text type=\"break\" /><text value=\"    at node:internal/main/run_main_module:28:49 {\" /><text type=\"break\" /><text value=\"  code: 'SQLITE_CANTOPEN'\" /><text type=\"break\" /><text value=\"}\" /><text type=\"break\" /><text value=\"\" /><text type=\"break\" /><text value=\"Node.js v20.17.0\" /><text type=\"break\" /><text value=\"\" /></content></output></code><p visible-if=\"wrong\">Asegúrese de elegir <code>result.changes &gt; 0</code> seguido de <code>200</code> y finalmente <code>404</code>.</p></body></html>"
          },
          {
            "title": "da - Copy",
            "id": 132609,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Similar al endpoint <code>DELETE</code>, al crear un endpoint <code>PATCH</code>, necesitamos descomprimir el parámetro de ruta.</p><code version=\"2\" codelang=\"javascript\" name=\"app.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" express = \" /><text value=\"require\" class=\"built_in\" /><text value=\"(\" /><text value=\"&quot;express&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" db = \" /><text value=\"require\" class=\"built_in\" /><text value=\"(\" /><text value=\"&quot;./database.js&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" app = express();\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" port = \" /><text value=\"3000\" class=\"number\" /><text value=\";\" /><text type=\"break\" /><text type=\"break\" /><text value=\"app.patch(\" /><text value=\"&quot;/fruits/:id&quot;\" class=\"string\" /><text value=\", (req, res) =&gt; {\" /><text type=\"break\" /><text value=\" \" /><text value=\"const\" class=\"keyword\" /><text value=\" { id } = req.params;\" /><text type=\"break\" /><text value=\"});\" /><text type=\"break\" /><text type=\"break\" /><text value=\"app.listen(port, () =&gt; {\" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"`App is running on PORT \" /><text value=\"${port}\" class=\"subst\" /><text value=\"`\" /><text value=\");\" /><text type=\"break\" /><text value=\"});\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"135\" endIndex=\"136\" /><option startIndex=\"136\" endIndex=\"138\" /><option startIndex=\"166\" endIndex=\"168\" /></options></interaction></interactions></code><code version=\"2\" codelang=\"javascript\" name=\"database.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" Database = \" /><text value=\"require\" class=\"built_in\" /><text value=\"(\" /><text value=\"&quot;better-sqlite3&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" db = \" /><text value=\"new\" class=\"keyword\" /><text value=\" Database(\" /><text value=\"&quot;database.db&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text type=\"break\" /><text value=\"db.exec(\" /><text value=\"`\" /><text type=\"break\" /><text value=\"    CREATE TABLE IF NOT EXISTS fruits (\" /><text type=\"break\" /><text value=\"      id INTEGER PRIMARY KEY AUTOINCREMENT,\" /><text type=\"break\" /><text value=\"      name TEXT NOT NULL\" /><text type=\"break\" /><text value=\"    )\" /><text type=\"break\" /><text value=\"`\" /><text value=\");\" /><text type=\"break\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" rowCount = db.prepare(\" /><text value=\"&quot;SELECT COUNT(*) AS count FROM fruits&quot;\" class=\"string\" /><text value=\")\" /><text type=\"break\" /><text value=\" .get().count;\" /><text type=\"break\" /><text type=\"break\" /><text value=\"if\" class=\"keyword\" /><text value=\" (rowCount === \" /><text value=\"0\" class=\"number\" /><text value=\") {\" /><text type=\"break\" /><text value=\" \" /><text value=\"const\" class=\"keyword\" /><text value=\" insert = db.prepare(\" /><text value=\"&quot;INSERT INTO fruits (name) VALUES (?)&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\" \" /><text value=\"const\" class=\"keyword\" /><text value=\" fruits = [\" /><text value=\"'Apple'\" class=\"string\" /><text value=\", \" /><text value=\"'Banana'\" class=\"string\" /><text value=\", \" /><text value=\"'Cherry'\" class=\"string\" /><text value=\"];\" /><text type=\"break\" /><text value=\" fruits.forEach(\" /><text value=\"fruit\" class=\"params\" /><text value=\" =&gt;\" /><text value=\" insert.run(fruit));\" /><text type=\"break\" /><text value=\"}\" /><text type=\"break\" /><text type=\"break\" /><text value=\"module\" class=\"built_in\" /><text value=\".exports = db;\" /></content><output><content><text value=\"\" /><text type=\"break\" /><text value=\"/usr/lib/node_modules/better-sqlite3/lib/database.js:69\" /><text type=\"break\" /><text value=\"  [util.cppdb]: { value: new addon.Database(filename, filenameGiven, anonymous, readonly, fileMustExist, timeout, verbose || null, buffer || null) },\" /><text type=\"break\" /><text value=\"                         ^\" /><text type=\"break\" /><text value=\"SqliteError: unable to open database file\" /><text type=\"break\" /><text value=\"    at new Database (/usr/lib/node_modules/better-sqlite3/lib/database.js:69:26)\" /><text type=\"break\" /><text value=\"    at Object.&lt;anonymous&gt; (/home/default/code/file.js:2:12)\" /><text type=\"break\" /><text value=\"    at Module._compile (node:internal/modules/cjs/loader:1469:14)\" /><text type=\"break\" /><text value=\"    at Module._extensions..js (node:internal/modules/cjs/loader:1548:10)\" /><text type=\"break\" /><text value=\"    at Module.load (node:internal/modules/cjs/loader:1288:32)\" /><text type=\"break\" /><text value=\"    at Module._load (node:internal/modules/cjs/loader:1104:12)\" /><text type=\"break\" /><text value=\"    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:174:12)\" /><text type=\"break\" /><text value=\"    at node:internal/main/run_main_module:28:49 {\" /><text type=\"break\" /><text value=\"  code: 'SQLITE_CANTOPEN'\" /><text type=\"break\" /><text value=\"}\" /><text type=\"break\" /><text value=\"\" /><text type=\"break\" /><text value=\"Node.js v20.17.0\" /><text type=\"break\" /><text value=\"\" /></content></output></code><p visible-if=\"wrong\">Asegúrese de elegir <code>:</code> seguido de <code>id</code> y finalmente <code>id</code>.</p></body></html>"
          },
          {
            "title": "da - Copy - Copy",
            "id": 132610,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Para acceder a los datos enviados en el cuerpo, usaremos el middleware integrado de Express <code>express.json</code>.</p><p>Una vez que hemos añadido el middleware, podemos acceder al cuerpo.</p><code version=\"2\" codelang=\"javascript\" name=\"app.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" express = \" /><text value=\"require\" class=\"built_in\" /><text value=\"(\" /><text value=\"&quot;express&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" db = \" /><text value=\"require\" class=\"built_in\" /><text value=\"(\" /><text value=\"&quot;./database.js&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" app = express();\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" port = \" /><text value=\"3000\" class=\"number\" /><text value=\";\" /><text type=\"break\" /><text type=\"break\" /><text value=\"app.use(express.json());\" /><text type=\"break\" /><text type=\"break\" /><text value=\"app.patch(\" /><text value=\"&quot;/fruits/:id&quot;\" class=\"string\" /><text value=\", (req, res) =&gt; {\" /><text type=\"break\" /><text value=\" \" /><text value=\"const\" class=\"keyword\" /><text value=\" { id } = req.params;\" /><text type=\"break\" /><text value=\" \" /><text value=\"const\" class=\"keyword\" /><text value=\" { name } = req.body;\" /><text type=\"break\" /><text value=\"});\" /><text type=\"break\" /><text type=\"break\" /><text value=\"app.listen(port, () =&gt; {\" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"`App is running on PORT \" /><text value=\"${port}\" class=\"subst\" /><text value=\"`\" /><text value=\");\" /><text type=\"break\" /><text value=\"});\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"116\" endIndex=\"123\" /><option startIndex=\"124\" endIndex=\"138\" /><option startIndex=\"229\" endIndex=\"237\" /></options></interaction></interactions></code><code version=\"2\" codelang=\"javascript\" name=\"database.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" Database = \" /><text value=\"require\" class=\"built_in\" /><text value=\"(\" /><text value=\"&quot;better-sqlite3&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" db = \" /><text value=\"new\" class=\"keyword\" /><text value=\" Database(\" /><text value=\"&quot;database.db&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text type=\"break\" /><text value=\"db.exec(\" /><text value=\"`\" /><text type=\"break\" /><text value=\"    CREATE TABLE IF NOT EXISTS fruits (\" /><text type=\"break\" /><text value=\"      id INTEGER PRIMARY KEY AUTOINCREMENT,\" /><text type=\"break\" /><text value=\"      name TEXT NOT NULL\" /><text type=\"break\" /><text value=\"    )\" /><text type=\"break\" /><text value=\"`\" /><text value=\");\" /><text type=\"break\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" rowCount = db.prepare(\" /><text value=\"&quot;SELECT COUNT(*) AS count FROM fruits&quot;\" class=\"string\" /><text value=\")\" /><text type=\"break\" /><text value=\" .get().count;\" /><text type=\"break\" /><text type=\"break\" /><text value=\"if\" class=\"keyword\" /><text value=\" (rowCount === \" /><text value=\"0\" class=\"number\" /><text value=\") {\" /><text type=\"break\" /><text value=\" \" /><text value=\"const\" class=\"keyword\" /><text value=\" insert = db.prepare(\" /><text value=\"&quot;INSERT INTO fruits (name) VALUES (?)&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\" \" /><text value=\"const\" class=\"keyword\" /><text value=\" fruits = [\" /><text value=\"'Apple'\" class=\"string\" /><text value=\", \" /><text value=\"'Banana'\" class=\"string\" /><text value=\", \" /><text value=\"'Cherry'\" class=\"string\" /><text value=\"];\" /><text type=\"break\" /><text value=\" fruits.forEach(\" /><text value=\"fruit\" class=\"params\" /><text value=\" =&gt;\" /><text value=\" insert.run(fruit));\" /><text type=\"break\" /><text value=\"}\" /><text type=\"break\" /><text type=\"break\" /><text value=\"module\" class=\"built_in\" /><text value=\".exports = db;\" /></content><output><content><text value=\"\" /><text type=\"break\" /><text value=\"/usr/lib/node_modules/better-sqlite3/lib/database.js:69\" /><text type=\"break\" /><text value=\"  [util.cppdb]: { value: new addon.Database(filename, filenameGiven, anonymous, readonly, fileMustExist, timeout, verbose || null, buffer || null) },\" /><text type=\"break\" /><text value=\"                         ^\" /><text type=\"break\" /><text value=\"SqliteError: unable to open database file\" /><text type=\"break\" /><text value=\"    at new Database (/usr/lib/node_modules/better-sqlite3/lib/database.js:69:26)\" /><text type=\"break\" /><text value=\"    at Object.&lt;anonymous&gt; (/home/default/code/file.js:2:12)\" /><text type=\"break\" /><text value=\"    at Module._compile (node:internal/modules/cjs/loader:1469:14)\" /><text type=\"break\" /><text value=\"    at Module._extensions..js (node:internal/modules/cjs/loader:1548:10)\" /><text type=\"break\" /><text value=\"    at Module.load (node:internal/modules/cjs/loader:1288:32)\" /><text type=\"break\" /><text value=\"    at Module._load (node:internal/modules/cjs/loader:1104:12)\" /><text type=\"break\" /><text value=\"    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:174:12)\" /><text type=\"break\" /><text value=\"    at node:internal/main/run_main_module:28:49 {\" /><text type=\"break\" /><text value=\"  code: 'SQLITE_CANTOPEN'\" /><text type=\"break\" /><text value=\"}\" /><text type=\"break\" /><text value=\"\" /><text type=\"break\" /><text value=\"Node.js v20.17.0\" /><text type=\"break\" /><text value=\"\" /></content></output></code><p visible-if=\"wrong\">Asegúrese de elegir <code>app.use</code> seguido de <code>express.json()</code> y finalmente <code>req.body</code>.</p></body></html>"
          },
          {
            "title": "Lesson #3 - Copy",
            "id": 132604,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Necesitamos verificar si hemos recibido todos los datos antes de continuar. Si falta algo que necesitamos, enviamos de vuelta <code>400 Bad Request</code>.</p><code version=\"2\" codelang=\"javascript\" name=\"app.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" express = \" /><text value=\"require\" class=\"built_in\" /><text value=\"(\" /><text value=\"&quot;express&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" db = \" /><text value=\"require\" class=\"built_in\" /><text value=\"(\" /><text value=\"&quot;./database.js&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" app = express();\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" port = \" /><text value=\"3000\" class=\"number\" /><text value=\";\" /><text type=\"break\" /><text type=\"break\" /><text value=\"app.use(express.json());\" /><text type=\"break\" /><text type=\"break\" /><text value=\"app.patch(\" /><text value=\"&quot;/fruits/:id&quot;\" class=\"string\" /><text value=\", (req, res) =&gt; {\" /><text type=\"break\" /><text value=\" \" /><text value=\"const\" class=\"keyword\" /><text value=\" { id } = req.params;\" /><text type=\"break\" /><text value=\" \" /><text value=\"const\" class=\"keyword\" /><text value=\" { name } = req.body;\" /><text type=\"break\" /><text type=\"break\" /><text value=\" \" /><text value=\"if\" class=\"keyword\" /><text value=\" (!name) {\" /><text type=\"break\" /><text value=\"  \" /><text value=\"return\" class=\"keyword\" /><text value=\" res.status(\" /><text value=\"400\" class=\"number\" /><text value=\").json({\" /><text type=\"break\" /><text value=\"   \" /><text value=\"message\" class=\"attr\" /><text value=\": \" /><text value=\"&quot;Please provide a name&quot;\" class=\"string\" /><text type=\"break\" /><text value=\"  });\" /><text type=\"break\" /><text value=\" }\" /><text type=\"break\" /><text value=\"});\" /><text type=\"break\" /><text type=\"break\" /><text value=\"app.listen(port, () =&gt; {\" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"`App is running on PORT \" /><text value=\"${port}\" class=\"subst\" /><text value=\"`\" /><text value=\");\" /><text type=\"break\" /><text value=\"});\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"245\" endIndex=\"250\" /><option startIndex=\"274\" endIndex=\"277\" /></options></interaction></interactions><output><content><text value=\"{ message: &quot;Please provide a name&quot; }\" /></content></output></code><code version=\"2\" codelang=\"javascript\" name=\"database.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" Database = \" /><text value=\"require\" class=\"built_in\" /><text value=\"(\" /><text value=\"&quot;better-sqlite3&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" db = \" /><text value=\"new\" class=\"keyword\" /><text value=\" Database(\" /><text value=\"&quot;database.db&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text type=\"break\" /><text value=\"db.exec(\" /><text value=\"`\" /><text type=\"break\" /><text value=\"    CREATE TABLE IF NOT EXISTS fruits (\" /><text type=\"break\" /><text value=\"      id INTEGER PRIMARY KEY AUTOINCREMENT,\" /><text type=\"break\" /><text value=\"      name TEXT NOT NULL\" /><text type=\"break\" /><text value=\"    )\" /><text type=\"break\" /><text value=\"`\" /><text value=\");\" /><text type=\"break\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" rowCount = db.prepare(\" /><text value=\"&quot;SELECT COUNT(*) AS count FROM fruits&quot;\" class=\"string\" /><text value=\")\" /><text type=\"break\" /><text value=\" .get().count;\" /><text type=\"break\" /><text type=\"break\" /><text value=\"if\" class=\"keyword\" /><text value=\" (rowCount === \" /><text value=\"0\" class=\"number\" /><text value=\") {\" /><text type=\"break\" /><text value=\" \" /><text value=\"const\" class=\"keyword\" /><text value=\" insert = db.prepare(\" /><text value=\"&quot;INSERT INTO fruits (name) VALUES (?)&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\" \" /><text value=\"const\" class=\"keyword\" /><text value=\" fruits = [\" /><text value=\"'Apple'\" class=\"string\" /><text value=\", \" /><text value=\"'Banana'\" class=\"string\" /><text value=\", \" /><text value=\"'Cherry'\" class=\"string\" /><text value=\"];\" /><text type=\"break\" /><text value=\" fruits.forEach(\" /><text value=\"fruit\" class=\"params\" /><text value=\" =&gt;\" /><text value=\" insert.run(fruit));\" /><text type=\"break\" /><text value=\"}\" /><text type=\"break\" /><text type=\"break\" /><text value=\"module\" class=\"built_in\" /><text value=\".exports = db;\" /></content><output><content><text value=\"\" /><text type=\"break\" /><text value=\"/usr/lib/node_modules/better-sqlite3/lib/database.js:69\" /><text type=\"break\" /><text value=\"  [util.cppdb]: { value: new addon.Database(filename, filenameGiven, anonymous, readonly, fileMustExist, timeout, verbose || null, buffer || null) },\" /><text type=\"break\" /><text value=\"                         ^\" /><text type=\"break\" /><text value=\"SqliteError: unable to open database file\" /><text type=\"break\" /><text value=\"    at new Database (/usr/lib/node_modules/better-sqlite3/lib/database.js:69:26)\" /><text type=\"break\" /><text value=\"    at Object.&lt;anonymous&gt; (/home/default/code/file.js:2:12)\" /><text type=\"break\" /><text value=\"    at Module._compile (node:internal/modules/cjs/loader:1469:14)\" /><text type=\"break\" /><text value=\"    at Module._extensions..js (node:internal/modules/cjs/loader:1548:10)\" /><text type=\"break\" /><text value=\"    at Module.load (node:internal/modules/cjs/loader:1288:32)\" /><text type=\"break\" /><text value=\"    at Module._load (node:internal/modules/cjs/loader:1104:12)\" /><text type=\"break\" /><text value=\"    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:174:12)\" /><text type=\"break\" /><text value=\"    at node:internal/main/run_main_module:28:49 {\" /><text type=\"break\" /><text value=\"  code: 'SQLITE_CANTOPEN'\" /><text type=\"break\" /><text value=\"}\" /><text type=\"break\" /><text value=\"\" /><text type=\"break\" /><text value=\"Node.js v20.17.0\" /><text type=\"break\" /><text value=\"\" /></content></output></code><p visible-if=\"wrong\">Asegúrese de elegir <code>!name</code> seguido de <code>400</code>.</p></body></html>"
          },
          {
            "title": "Lesson #3 - Copy - Copy",
            "id": 132613,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>De nuevo, usamos una consulta parametrizada con marcadores de posición. Después de preparar la declaración, podemos ejecutarla y pasar los parámetros necesarios.</p><p>Necesitamos asegurarnos de que los parámetros estén en el orden correcto.</p><code version=\"2\" codelang=\"javascript\" name=\"app.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" express = \" /><text value=\"require\" class=\"built_in\" /><text value=\"(\" /><text value=\"&quot;express&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" db = \" /><text value=\"require\" class=\"built_in\" /><text value=\"(\" /><text value=\"&quot;./database.js&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" app = express();\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" port = \" /><text value=\"3000\" class=\"number\" /><text value=\";\" /><text type=\"break\" /><text type=\"break\" /><text value=\"app.use(express.json());\" /><text type=\"break\" /><text type=\"break\" /><text value=\"app.patch(\" /><text value=\"&quot;/fruits/:id&quot;\" class=\"string\" /><text value=\", (req, res) =&gt; {\" /><text type=\"break\" /><text value=\" \" /><text value=\"const\" class=\"keyword\" /><text value=\" { id } = req.params;\" /><text type=\"break\" /><text value=\" \" /><text value=\"const\" class=\"keyword\" /><text value=\" { name } = req.body;\" /><text type=\"break\" /><text type=\"break\" /><text value=\" \" /><text value=\"if\" class=\"keyword\" /><text value=\" (!name) {\" /><text type=\"break\" /><text value=\"  \" /><text value=\"return\" class=\"keyword\" /><text value=\" res.status(\" /><text value=\"400\" class=\"number\" /><text value=\").json({\" /><text type=\"break\" /><text value=\"   \" /><text value=\"message\" class=\"attr\" /><text value=\": \" /><text value=\"&quot;Please provide a name&quot;\" class=\"string\" /><text type=\"break\" /><text value=\"  });\" /><text type=\"break\" /><text value=\" }\" /><text type=\"break\" /><text type=\"break\" /><text value=\" \" /><text value=\"const\" class=\"keyword\" /><text value=\" sql = \" /><text value=\"&quot;UPDATE fruits SET name = ? WHERE id = ?&quot;\" class=\"string\" /><text value=\";\" /><text type=\"break\" /><text value=\" \" /><text value=\"const\" class=\"keyword\" /><text value=\" result = db.prepare(sql).run(name, id);\" /><text type=\"break\" /><text value=\"});\" /><text type=\"break\" /><text type=\"break\" /><text value=\"app.listen(port, () =&gt; {\" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"`App is running on PORT \" /><text value=\"${port}\" class=\"subst\" /><text value=\"`\" /><text value=\");\" /><text type=\"break\" /><text value=\"});\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"245\" endIndex=\"250\" /><option startIndex=\"274\" endIndex=\"277\" /><option startIndex=\"346\" endIndex=\"359\" /><option startIndex=\"360\" endIndex=\"372\" /><option startIndex=\"373\" endIndex=\"385\" /><option startIndex=\"424\" endIndex=\"428\" /><option startIndex=\"430\" endIndex=\"432\" /></options></interaction></interactions></code><code version=\"2\" codelang=\"javascript\" name=\"database.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" Database = \" /><text value=\"require\" class=\"built_in\" /><text value=\"(\" /><text value=\"&quot;better-sqlite3&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" db = \" /><text value=\"new\" class=\"keyword\" /><text value=\" Database(\" /><text value=\"&quot;database.db&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text type=\"break\" /><text value=\"db.exec(\" /><text value=\"`\" /><text type=\"break\" /><text value=\"    CREATE TABLE IF NOT EXISTS fruits (\" /><text type=\"break\" /><text value=\"      id INTEGER PRIMARY KEY AUTOINCREMENT,\" /><text type=\"break\" /><text value=\"      name TEXT NOT NULL\" /><text type=\"break\" /><text value=\"    )\" /><text type=\"break\" /><text value=\"`\" /><text value=\");\" /><text type=\"break\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" rowCount = db.prepare(\" /><text value=\"&quot;SELECT COUNT(*) AS count FROM fruits&quot;\" class=\"string\" /><text value=\")\" /><text type=\"break\" /><text value=\" .get().count;\" /><text type=\"break\" /><text type=\"break\" /><text value=\"if\" class=\"keyword\" /><text value=\" (rowCount === \" /><text value=\"0\" class=\"number\" /><text value=\") {\" /><text type=\"break\" /><text value=\" \" /><text value=\"const\" class=\"keyword\" /><text value=\" insert = db.prepare(\" /><text value=\"&quot;INSERT INTO fruits (name) VALUES (?)&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\" \" /><text value=\"const\" class=\"keyword\" /><text value=\" fruits = [\" /><text value=\"'Apple'\" class=\"string\" /><text value=\", \" /><text value=\"'Banana'\" class=\"string\" /><text value=\", \" /><text value=\"'Cherry'\" class=\"string\" /><text value=\"];\" /><text type=\"break\" /><text value=\" fruits.forEach(\" /><text value=\"fruit\" class=\"params\" /><text value=\" =&gt;\" /><text value=\" insert.run(fruit));\" /><text type=\"break\" /><text value=\"}\" /><text type=\"break\" /><text type=\"break\" /><text value=\"module\" class=\"built_in\" /><text value=\".exports = db;\" /></content><output><content><text value=\"\" /><text type=\"break\" /><text value=\"/usr/lib/node_modules/better-sqlite3/lib/database.js:69\" /><text type=\"break\" /><text value=\"  [util.cppdb]: { value: new addon.Database(filename, filenameGiven, anonymous, readonly, fileMustExist, timeout, verbose || null, buffer || null) },\" /><text type=\"break\" /><text value=\"                         ^\" /><text type=\"break\" /><text value=\"SqliteError: unable to open database file\" /><text type=\"break\" /><text value=\"    at new Database (/usr/lib/node_modules/better-sqlite3/lib/database.js:69:26)\" /><text type=\"break\" /><text value=\"    at Object.&lt;anonymous&gt; (/home/default/code/file.js:2:12)\" /><text type=\"break\" /><text value=\"    at Module._compile (node:internal/modules/cjs/loader:1469:14)\" /><text type=\"break\" /><text value=\"    at Module._extensions..js (node:internal/modules/cjs/loader:1548:10)\" /><text type=\"break\" /><text value=\"    at Module.load (node:internal/modules/cjs/loader:1288:32)\" /><text type=\"break\" /><text value=\"    at Module._load (node:internal/modules/cjs/loader:1104:12)\" /><text type=\"break\" /><text value=\"    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:174:12)\" /><text type=\"break\" /><text value=\"    at node:internal/main/run_main_module:28:49 {\" /><text type=\"break\" /><text value=\"  code: 'SQLITE_CANTOPEN'\" /><text type=\"break\" /><text value=\"}\" /><text type=\"break\" /><text value=\"\" /><text type=\"break\" /><text value=\"Node.js v20.17.0\" /><text type=\"break\" /><text value=\"\" /></content></output></code><p visible-if=\"wrong\">Asegúrese de elegir <code>!name</code> seguido de <code>400</code> y luego <code>UPDATE fruits</code>, <code>SET name = ?</code>, <code>WHERE id = ?</code>, <code>name</code>, <code>id</code>.</p></body></html>"
          },
          {
            "title": "Lesson #3 - Copy - Copy - Copy",
            "id": 132614,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Y similar a lo que hemos visto antes, verificamos <code>result.changes</code> para identificar qué código de estado y mensaje debemos devolver.</p><code version=\"2\" codelang=\"javascript\" name=\"app.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" express = \" /><text value=\"require\" class=\"built_in\" /><text value=\"(\" /><text value=\"&quot;express&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" db = \" /><text value=\"require\" class=\"built_in\" /><text value=\"(\" /><text value=\"&quot;./database.js&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" app = express();\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" port = \" /><text value=\"3000\" class=\"number\" /><text value=\";\" /><text type=\"break\" /><text type=\"break\" /><text value=\"app.use(express.json());\" /><text type=\"break\" /><text type=\"break\" /><text value=\"app.patch(\" /><text value=\"&quot;/fruits/:id&quot;\" class=\"string\" /><text value=\", (req, res) =&gt; {\" /><text type=\"break\" /><text value=\" \" /><text value=\"const\" class=\"keyword\" /><text value=\" { id } = req.params;\" /><text type=\"break\" /><text value=\" \" /><text value=\"const\" class=\"keyword\" /><text value=\" { name } = req.body;\" /><text type=\"break\" /><text type=\"break\" /><text value=\" \" /><text value=\"if\" class=\"keyword\" /><text value=\" (!name) {\" /><text type=\"break\" /><text value=\"  \" /><text value=\"return\" class=\"keyword\" /><text value=\" res.status(\" /><text value=\"400\" class=\"number\" /><text value=\").json({\" /><text type=\"break\" /><text value=\"   \" /><text value=\"message\" class=\"attr\" /><text value=\": \" /><text value=\"&quot;Please provide a name&quot;\" class=\"string\" /><text type=\"break\" /><text value=\"  });\" /><text type=\"break\" /><text value=\" }\" /><text type=\"break\" /><text type=\"break\" /><text value=\" \" /><text value=\"const\" class=\"keyword\" /><text value=\" sql = \" /><text value=\"&quot;UPDATE fruits SET name = ? WHERE id = ?&quot;\" class=\"string\" /><text value=\";\" /><text type=\"break\" /><text value=\" \" /><text value=\"const\" class=\"keyword\" /><text value=\" result = db.prepare(sql).run(name, id);\" /><text type=\"break\" /><text type=\"break\" /><text value=\" \" /><text value=\"if\" class=\"keyword\" /><text value=\" (result.changes &gt; \" /><text value=\"0\" class=\"number\" /><text value=\") {\" /><text type=\"break\" /><text value=\"  res.status(\" /><text value=\"200\" class=\"number\" /><text value=\").json({\" /><text type=\"break\" /><text value=\"   \" /><text value=\"message\" class=\"attr\" /><text value=\": \" /><text value=\"&quot;Fruit updated successfully&quot;\" class=\"string\" /><text type=\"break\" /><text value=\"  });\" /><text type=\"break\" /><text value=\" } \" /><text value=\"else\" class=\"keyword\" /><text value=\" {\" /><text type=\"break\" /><text value=\"  res.status(\" /><text value=\"404\" class=\"number\" /><text value=\").json({\" /><text type=\"break\" /><text value=\"   \" /><text value=\"message\" class=\"attr\" /><text value=\": \" /><text value=\"&quot;Fruit not found&quot;\" class=\"string\" /><text type=\"break\" /><text value=\"  });\" /><text type=\"break\" /><text value=\" }\" /><text type=\"break\" /><text value=\"});\" /><text type=\"break\" /><text type=\"break\" /><text value=\"app.listen(port, () =&gt; {\" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"`App is running on PORT \" /><text value=\"${port}\" class=\"subst\" /><text value=\"`\" /><text value=\");\" /><text type=\"break\" /><text value=\"});\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"441\" endIndex=\"459\" /><option startIndex=\"476\" endIndex=\"479\" /><option startIndex=\"558\" endIndex=\"561\" /></options></interaction></interactions><output><content><text value=\"{ message: &quot;Fruit updated successfully&quot; }\" /></content></output></code><code version=\"2\" codelang=\"javascript\" name=\"database.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" Database = \" /><text value=\"require\" class=\"built_in\" /><text value=\"(\" /><text value=\"&quot;better-sqlite3&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" db = \" /><text value=\"new\" class=\"keyword\" /><text value=\" Database(\" /><text value=\"&quot;database.db&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text type=\"break\" /><text value=\"db.exec(\" /><text value=\"`\" /><text type=\"break\" /><text value=\"    CREATE TABLE IF NOT EXISTS fruits (\" /><text type=\"break\" /><text value=\"      id INTEGER PRIMARY KEY AUTOINCREMENT,\" /><text type=\"break\" /><text value=\"      name TEXT NOT NULL\" /><text type=\"break\" /><text value=\"    )\" /><text type=\"break\" /><text value=\"`\" /><text value=\");\" /><text type=\"break\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" rowCount = db.prepare(\" /><text value=\"&quot;SELECT COUNT(*) AS count FROM fruits&quot;\" class=\"string\" /><text value=\")\" /><text type=\"break\" /><text value=\" .get().count;\" /><text type=\"break\" /><text type=\"break\" /><text value=\"if\" class=\"keyword\" /><text value=\" (rowCount === \" /><text value=\"0\" class=\"number\" /><text value=\") {\" /><text type=\"break\" /><text value=\" \" /><text value=\"const\" class=\"keyword\" /><text value=\" insert = db.prepare(\" /><text value=\"&quot;INSERT INTO fruits (name) VALUES (?)&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\" \" /><text value=\"const\" class=\"keyword\" /><text value=\" fruits = [\" /><text value=\"'Apple'\" class=\"string\" /><text value=\", \" /><text value=\"'Banana'\" class=\"string\" /><text value=\", \" /><text value=\"'Cherry'\" class=\"string\" /><text value=\"];\" /><text type=\"break\" /><text value=\" fruits.forEach(\" /><text value=\"fruit\" class=\"params\" /><text value=\" =&gt;\" /><text value=\" insert.run(fruit));\" /><text type=\"break\" /><text value=\"}\" /><text type=\"break\" /><text type=\"break\" /><text value=\"module\" class=\"built_in\" /><text value=\".exports = db;\" /></content><output><content><text value=\"\" /><text type=\"break\" /><text value=\"/usr/lib/node_modules/better-sqlite3/lib/database.js:69\" /><text type=\"break\" /><text value=\"  [util.cppdb]: { value: new addon.Database(filename, filenameGiven, anonymous, readonly, fileMustExist, timeout, verbose || null, buffer || null) },\" /><text type=\"break\" /><text value=\"                         ^\" /><text type=\"break\" /><text value=\"SqliteError: unable to open database file\" /><text type=\"break\" /><text value=\"    at new Database (/usr/lib/node_modules/better-sqlite3/lib/database.js:69:26)\" /><text type=\"break\" /><text value=\"    at Object.&lt;anonymous&gt; (/home/default/code/file.js:2:12)\" /><text type=\"break\" /><text value=\"    at Module._compile (node:internal/modules/cjs/loader:1469:14)\" /><text type=\"break\" /><text value=\"    at Module._extensions..js (node:internal/modules/cjs/loader:1548:10)\" /><text type=\"break\" /><text value=\"    at Module.load (node:internal/modules/cjs/loader:1288:32)\" /><text type=\"break\" /><text value=\"    at Module._load (node:internal/modules/cjs/loader:1104:12)\" /><text type=\"break\" /><text value=\"    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:174:12)\" /><text type=\"break\" /><text value=\"    at node:internal/main/run_main_module:28:49 {\" /><text type=\"break\" /><text value=\"  code: 'SQLITE_CANTOPEN'\" /><text type=\"break\" /><text value=\"}\" /><text type=\"break\" /><text value=\"\" /><text type=\"break\" /><text value=\"Node.js v20.17.0\" /><text type=\"break\" /><text value=\"\" /></content></output></code><p visible-if=\"wrong\">Asegúrese de elegir <code>result.changes &gt; 0</code> seguido de <code>200</code> y finalmente <code>404</code>.</p></body></html>"
          },
          {
            "title": "da - Copy",
            "id": 132634,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Establece el código de estado apropiado.</p><code version=\"2\" codelang=\"javascript\" name=\"app.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" express = \" /><text value=\"require\" class=\"built_in\" /><text value=\"(\" /><text value=\"&quot;express&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" db = \" /><text value=\"require\" class=\"built_in\" /><text value=\"(\" /><text value=\"&quot;./database.js&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" app = express();\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" port = \" /><text value=\"3000\" class=\"number\" /><text value=\";\" /><text type=\"break\" /><text type=\"break\" /><text value=\"app.delete(\" /><text value=\"&quot;/fruits/:id&quot;\" class=\"string\" /><text value=\", (req, res) =&gt; {\" /><text type=\"break\" /><text value=\" \" /><text value=\"const\" class=\"keyword\" /><text value=\" { id } = req.params;\" /><text type=\"break\" /><text value=\" \" /><text value=\"const\" class=\"keyword\" /><text value=\" sql = \" /><text value=\"&quot;DELETE FROM fruits WHERE id = ?&quot;\" class=\"string\" /><text value=\";\" /><text type=\"break\" /><text value=\" \" /><text value=\"const\" class=\"keyword\" /><text value=\" result = db.prepare(sql).run(id);\" /><text type=\"break\" /><text type=\"break\" /><text value=\" \" /><text value=\"if\" class=\"keyword\" /><text value=\" (result.changes &gt; \" /><text value=\"0\" class=\"number\" /><text value=\") {\" /><text type=\"break\" /><text value=\"  res.status(\" /><text value=\"200\" class=\"number\" /><text value=\").json({\" /><text type=\"break\" /><text value=\"   \" /><text value=\"message\" class=\"attr\" /><text value=\": \" /><text value=\"&quot;Fruit deleted successfully&quot;\" class=\"string\" /><text type=\"break\" /><text value=\"  });\" /><text type=\"break\" /><text value=\" } \" /><text value=\"else\" class=\"keyword\" /><text value=\" {\" /><text type=\"break\" /><text value=\"  res.status(\" /><text value=\"404\" class=\"number\" /><text value=\").json({\" /><text type=\"break\" /><text value=\"   \" /><text value=\"message\" class=\"attr\" /><text value=\": \" /><text value=\"&quot;Fruit not found&quot;\" class=\"string\" /><text type=\"break\" /><text value=\"  });\" /><text type=\"break\" /><text value=\" }\" /><text type=\"break\" /><text value=\"});\" /><text type=\"break\" /><text type=\"break\" /><text value=\"app.listen(port, () =&gt; {\" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"`App is running on PORT \" /><text value=\"${port}\" class=\"subst\" /><text value=\"`\" /><text value=\");\" /><text type=\"break\" /><text value=\"});\" /></content><interactions><interaction type=\"validatedInput\" isDefault=\"true\" startIndex=\"398\" endIndex=\"401\" /></interactions><output><content><text value=\"{ message: &quot;Fruit not found&quot; }\" /></content></output></code><code version=\"2\" codelang=\"javascript\" name=\"database.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" Database = \" /><text value=\"require\" class=\"built_in\" /><text value=\"(\" /><text value=\"&quot;better-sqlite3&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" db = \" /><text value=\"new\" class=\"keyword\" /><text value=\" Database(\" /><text value=\"&quot;database.db&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text type=\"break\" /><text value=\"db.exec(\" /><text value=\"`\" /><text type=\"break\" /><text value=\"    CREATE TABLE IF NOT EXISTS fruits (\" /><text type=\"break\" /><text value=\"      id INTEGER PRIMARY KEY AUTOINCREMENT,\" /><text type=\"break\" /><text value=\"      name TEXT NOT NULL\" /><text type=\"break\" /><text value=\"    )\" /><text type=\"break\" /><text value=\"`\" /><text value=\");\" /><text type=\"break\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" rowCount = db.prepare(\" /><text value=\"&quot;SELECT COUNT(*) AS count FROM fruits&quot;\" class=\"string\" /><text value=\")\" /><text type=\"break\" /><text value=\" .get().count;\" /><text type=\"break\" /><text type=\"break\" /><text value=\"if\" class=\"keyword\" /><text value=\" (rowCount === \" /><text value=\"0\" class=\"number\" /><text value=\") {\" /><text type=\"break\" /><text value=\" \" /><text value=\"const\" class=\"keyword\" /><text value=\" insert = db.prepare(\" /><text value=\"&quot;INSERT INTO fruits (name) VALUES (?)&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\" \" /><text value=\"const\" class=\"keyword\" /><text value=\" fruits = [\" /><text value=\"'Apple'\" class=\"string\" /><text value=\", \" /><text value=\"'Banana'\" class=\"string\" /><text value=\", \" /><text value=\"'Cherry'\" class=\"string\" /><text value=\"];\" /><text type=\"break\" /><text value=\" fruits.forEach(\" /><text value=\"fruit\" class=\"params\" /><text value=\" =&gt;\" /><text value=\" insert.run(fruit));\" /><text type=\"break\" /><text value=\"}\" /><text type=\"break\" /><text type=\"break\" /><text value=\"module\" class=\"built_in\" /><text value=\".exports = db;\" /></content><output><content><text value=\"\" /><text type=\"break\" /><text value=\"/usr/lib/node_modules/better-sqlite3/lib/database.js:69\" /><text type=\"break\" /><text value=\"  [util.cppdb]: { value: new addon.Database(filename, filenameGiven, anonymous, readonly, fileMustExist, timeout, verbose || null, buffer || null) },\" /><text type=\"break\" /><text value=\"                         ^\" /><text type=\"break\" /><text value=\"SqliteError: unable to open database file\" /><text type=\"break\" /><text value=\"    at new Database (/usr/lib/node_modules/better-sqlite3/lib/database.js:69:26)\" /><text type=\"break\" /><text value=\"    at Object.&lt;anonymous&gt; (/home/default/code/file.js:2:12)\" /><text type=\"break\" /><text value=\"    at Module._compile (node:internal/modules/cjs/loader:1469:14)\" /><text type=\"break\" /><text value=\"    at Module._extensions..js (node:internal/modules/cjs/loader:1548:10)\" /><text type=\"break\" /><text value=\"    at Module.load (node:internal/modules/cjs/loader:1288:32)\" /><text type=\"break\" /><text value=\"    at Module._load (node:internal/modules/cjs/loader:1104:12)\" /><text type=\"break\" /><text value=\"    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:174:12)\" /><text type=\"break\" /><text value=\"    at node:internal/main/run_main_module:28:49 {\" /><text type=\"break\" /><text value=\"  code: 'SQLITE_CANTOPEN'\" /><text type=\"break\" /><text value=\"}\" /><text type=\"break\" /><text value=\"\" /><text type=\"break\" /><text value=\"Node.js v20.17.0\" /><text type=\"break\" /><text value=\"\" /></content></output></code><p visible-if=\"wrong\">Asegúrese de elegir <code>404</code>.</p></body></html>"
          },
          {
            "title": "Lesson #3 - Copy - Copy - Copy - Copy",
            "id": 132636,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Establece el código de estado adecuado.</p><code version=\"2\" codelang=\"javascript\" name=\"app.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" express = \" /><text value=\"require\" class=\"built_in\" /><text value=\"(\" /><text value=\"&quot;express&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" db = \" /><text value=\"require\" class=\"built_in\" /><text value=\"(\" /><text value=\"&quot;./database.js&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" app = express();\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" port = \" /><text value=\"3000\" class=\"number\" /><text value=\";\" /><text type=\"break\" /><text type=\"break\" /><text value=\"app.use(express.json());\" /><text type=\"break\" /><text type=\"break\" /><text value=\"app.patch(\" /><text value=\"&quot;/fruits/:id&quot;\" class=\"string\" /><text value=\", (req, res) =&gt; {\" /><text type=\"break\" /><text value=\" \" /><text value=\"const\" class=\"keyword\" /><text value=\" { id } = req.params;\" /><text type=\"break\" /><text value=\" \" /><text value=\"const\" class=\"keyword\" /><text value=\" { name } = req.body;\" /><text type=\"break\" /><text type=\"break\" /><text value=\" \" /><text value=\"if\" class=\"keyword\" /><text value=\" (!name) {\" /><text type=\"break\" /><text value=\"  \" /><text value=\"return\" class=\"keyword\" /><text value=\" res.status(\" /><text value=\"400\" class=\"number\" /><text value=\").json({\" /><text type=\"break\" /><text value=\"   \" /><text value=\"message\" class=\"attr\" /><text value=\": \" /><text value=\"&quot;Please provide a name&quot;\" class=\"string\" /><text type=\"break\" /><text value=\"  });\" /><text type=\"break\" /><text value=\" }\" /><text type=\"break\" /><text type=\"break\" /><text value=\" \" /><text value=\"const\" class=\"keyword\" /><text value=\" sql = \" /><text value=\"&quot;UPDATE fruits SET name = ? WHERE id = ?&quot;\" class=\"string\" /><text value=\";\" /><text type=\"break\" /><text value=\" \" /><text value=\"const\" class=\"keyword\" /><text value=\" result = db.prepare(sql).run(name, id);\" /><text type=\"break\" /><text type=\"break\" /><text value=\" \" /><text value=\"if\" class=\"keyword\" /><text value=\" (result.changes &gt; \" /><text value=\"0\" class=\"number\" /><text value=\") {\" /><text type=\"break\" /><text value=\"  res.status(\" /><text value=\"200\" class=\"number\" /><text value=\").json({\" /><text type=\"break\" /><text value=\"   \" /><text value=\"message\" class=\"attr\" /><text value=\": \" /><text value=\"&quot;Fruit updated successfully&quot;\" class=\"string\" /><text type=\"break\" /><text value=\"  });\" /><text type=\"break\" /><text value=\" } \" /><text value=\"else\" class=\"keyword\" /><text value=\" {\" /><text type=\"break\" /><text value=\"  res.status(\" /><text value=\"404\" class=\"number\" /><text value=\").json({\" /><text type=\"break\" /><text value=\"   \" /><text value=\"message\" class=\"attr\" /><text value=\": \" /><text value=\"&quot;Fruit not found&quot;\" class=\"string\" /><text type=\"break\" /><text value=\"  });\" /><text type=\"break\" /><text value=\" }\" /><text type=\"break\" /><text value=\"});\" /><text type=\"break\" /><text type=\"break\" /><text value=\"app.listen(port, () =&gt; {\" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"`App is running on PORT \" /><text value=\"${port}\" class=\"subst\" /><text value=\"`\" /><text value=\");\" /><text type=\"break\" /><text value=\"});\" /></content><interactions><interaction type=\"validatedInput\" isDefault=\"true\" startIndex=\"476\" endIndex=\"479\" /></interactions><output><content><text value=\"{ message: &quot;Fruit updated successfully&quot; }\" /></content></output></code><code version=\"2\" codelang=\"javascript\" name=\"database.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" Database = \" /><text value=\"require\" class=\"built_in\" /><text value=\"(\" /><text value=\"&quot;better-sqlite3&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" db = \" /><text value=\"new\" class=\"keyword\" /><text value=\" Database(\" /><text value=\"&quot;database.db&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text type=\"break\" /><text value=\"db.exec(\" /><text value=\"`\" /><text type=\"break\" /><text value=\"    CREATE TABLE IF NOT EXISTS fruits (\" /><text type=\"break\" /><text value=\"      id INTEGER PRIMARY KEY AUTOINCREMENT,\" /><text type=\"break\" /><text value=\"      name TEXT NOT NULL\" /><text type=\"break\" /><text value=\"    )\" /><text type=\"break\" /><text value=\"`\" /><text value=\");\" /><text type=\"break\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" rowCount = db.prepare(\" /><text value=\"&quot;SELECT COUNT(*) AS count FROM fruits&quot;\" class=\"string\" /><text value=\")\" /><text type=\"break\" /><text value=\" .get().count;\" /><text type=\"break\" /><text type=\"break\" /><text value=\"if\" class=\"keyword\" /><text value=\" (rowCount === \" /><text value=\"0\" class=\"number\" /><text value=\") {\" /><text type=\"break\" /><text value=\" \" /><text value=\"const\" class=\"keyword\" /><text value=\" insert = db.prepare(\" /><text value=\"&quot;INSERT INTO fruits (name) VALUES (?)&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\" \" /><text value=\"const\" class=\"keyword\" /><text value=\" fruits = [\" /><text value=\"'Apple'\" class=\"string\" /><text value=\", \" /><text value=\"'Banana'\" class=\"string\" /><text value=\", \" /><text value=\"'Cherry'\" class=\"string\" /><text value=\"];\" /><text type=\"break\" /><text value=\" fruits.forEach(\" /><text value=\"fruit\" class=\"params\" /><text value=\" =&gt;\" /><text value=\" insert.run(fruit));\" /><text type=\"break\" /><text value=\"}\" /><text type=\"break\" /><text type=\"break\" /><text value=\"module\" class=\"built_in\" /><text value=\".exports = db;\" /></content><output><content><text value=\"\" /><text type=\"break\" /><text value=\"/usr/lib/node_modules/better-sqlite3/lib/database.js:69\" /><text type=\"break\" /><text value=\"  [util.cppdb]: { value: new addon.Database(filename, filenameGiven, anonymous, readonly, fileMustExist, timeout, verbose || null, buffer || null) },\" /><text type=\"break\" /><text value=\"                         ^\" /><text type=\"break\" /><text value=\"SqliteError: unable to open database file\" /><text type=\"break\" /><text value=\"    at new Database (/usr/lib/node_modules/better-sqlite3/lib/database.js:69:26)\" /><text type=\"break\" /><text value=\"    at Object.&lt;anonymous&gt; (/home/default/code/file.js:2:12)\" /><text type=\"break\" /><text value=\"    at Module._compile (node:internal/modules/cjs/loader:1469:14)\" /><text type=\"break\" /><text value=\"    at Module._extensions..js (node:internal/modules/cjs/loader:1548:10)\" /><text type=\"break\" /><text value=\"    at Module.load (node:internal/modules/cjs/loader:1288:32)\" /><text type=\"break\" /><text value=\"    at Module._load (node:internal/modules/cjs/loader:1104:12)\" /><text type=\"break\" /><text value=\"    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:174:12)\" /><text type=\"break\" /><text value=\"    at node:internal/main/run_main_module:28:49 {\" /><text type=\"break\" /><text value=\"  code: 'SQLITE_CANTOPEN'\" /><text type=\"break\" /><text value=\"}\" /><text type=\"break\" /><text value=\"\" /><text type=\"break\" /><text value=\"Node.js v20.17.0\" /><text type=\"break\" /><text value=\"\" /></content></output></code><p visible-if=\"wrong\">Asegúrese de elegir <code>200</code>.</p></body></html>"
          },
          {
            "title": "Lesson #14",
            "id": 132638,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>¿Qué debería suceder si no se encuentra ningún elemento con el id dado al intentar eliminarlo?</p><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\">Se debe devolver un estado <code>404</code></item><item value=\"2\" correct=\"false\">Se debe devolver un estado <code>500</code></item></selection><p visible-if=\"wrong\">Se debe devolver un estado <code>404</code>.</p></body></html>"
          },
          {
            "title": "da - Copy",
            "id": 132635,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Verifica si la operación de la base de datos fue un éxito.</p><code version=\"2\" codelang=\"javascript\" name=\"app.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" express = \" /><text value=\"require\" class=\"built_in\" /><text value=\"(\" /><text value=\"&quot;express&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" db = \" /><text value=\"require\" class=\"built_in\" /><text value=\"(\" /><text value=\"&quot;./database.js&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" app = express();\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" port = \" /><text value=\"3000\" class=\"number\" /><text value=\";\" /><text type=\"break\" /><text type=\"break\" /><text value=\"app.delete(\" /><text value=\"&quot;/fruits/:id&quot;\" class=\"string\" /><text value=\", (req, res) =&gt; {\" /><text type=\"break\" /><text value=\" \" /><text value=\"const\" class=\"keyword\" /><text value=\" { id } = req.params;\" /><text type=\"break\" /><text value=\" \" /><text value=\"const\" class=\"keyword\" /><text value=\" sql = \" /><text value=\"&quot;DELETE FROM fruits WHERE id = ?&quot;\" class=\"string\" /><text value=\";\" /><text type=\"break\" /><text value=\" \" /><text value=\"const\" class=\"keyword\" /><text value=\" result = db.prepare(sql).run(id);\" /><text type=\"break\" /><text type=\"break\" /><text value=\" \" /><text value=\"if\" class=\"keyword\" /><text value=\" (result.changes &gt; \" /><text value=\"0\" class=\"number\" /><text value=\") {\" /><text type=\"break\" /><text value=\"  res.status(\" /><text value=\"200\" class=\"number\" /><text value=\").json({\" /><text type=\"break\" /><text value=\"   \" /><text value=\"message\" class=\"attr\" /><text value=\": \" /><text value=\"&quot;Fruit deleted successfully&quot;\" class=\"string\" /><text type=\"break\" /><text value=\"  });\" /><text type=\"break\" /><text value=\" } \" /><text value=\"else\" class=\"keyword\" /><text value=\" {\" /><text type=\"break\" /><text value=\"  res.status(\" /><text value=\"404\" class=\"number\" /><text value=\").json({\" /><text type=\"break\" /><text value=\"   \" /><text value=\"message\" class=\"attr\" /><text value=\": \" /><text value=\"&quot;Fruit not found&quot;\" class=\"string\" /><text type=\"break\" /><text value=\"  });\" /><text type=\"break\" /><text value=\" }\" /><text type=\"break\" /><text value=\"});\" /><text type=\"break\" /><text type=\"break\" /><text value=\"app.listen(port, () =&gt; {\" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"`App is running on PORT \" /><text value=\"${port}\" class=\"subst\" /><text value=\"`\" /><text value=\");\" /><text type=\"break\" /><text value=\"});\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"281\" endIndex=\"287\" /><option startIndex=\"287\" endIndex=\"288\" /><option startIndex=\"288\" endIndex=\"295\" /><option startIndex=\"296\" endIndex=\"297\" /><option startIndex=\"298\" endIndex=\"299\" /><option correct=\"false\"><content><text value=\".\" /></content></option><option correct=\"false\"><content><text value=\"length\" /></content></option></options></interaction></interactions><output><content><text value=\"{ message: &quot;Fruit deleted successfully&quot; }\" /></content></output></code><code version=\"2\" codelang=\"javascript\" name=\"database.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" Database = \" /><text value=\"require\" class=\"built_in\" /><text value=\"(\" /><text value=\"&quot;better-sqlite3&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" db = \" /><text value=\"new\" class=\"keyword\" /><text value=\" Database(\" /><text value=\"&quot;database.db&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text type=\"break\" /><text value=\"db.exec(\" /><text value=\"`\" /><text type=\"break\" /><text value=\"    CREATE TABLE IF NOT EXISTS fruits (\" /><text type=\"break\" /><text value=\"      id INTEGER PRIMARY KEY AUTOINCREMENT,\" /><text type=\"break\" /><text value=\"      name TEXT NOT NULL\" /><text type=\"break\" /><text value=\"    )\" /><text type=\"break\" /><text value=\"`\" /><text value=\");\" /><text type=\"break\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" rowCount = db.prepare(\" /><text value=\"&quot;SELECT COUNT(*) AS count FROM fruits&quot;\" class=\"string\" /><text value=\")\" /><text type=\"break\" /><text value=\" .get().count;\" /><text type=\"break\" /><text type=\"break\" /><text value=\"if\" class=\"keyword\" /><text value=\" (rowCount === \" /><text value=\"0\" class=\"number\" /><text value=\") {\" /><text type=\"break\" /><text value=\" \" /><text value=\"const\" class=\"keyword\" /><text value=\" insert = db.prepare(\" /><text value=\"&quot;INSERT INTO fruits (name) VALUES (?)&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\" \" /><text value=\"const\" class=\"keyword\" /><text value=\" fruits = [\" /><text value=\"'Apple'\" class=\"string\" /><text value=\", \" /><text value=\"'Banana'\" class=\"string\" /><text value=\", \" /><text value=\"'Cherry'\" class=\"string\" /><text value=\"];\" /><text type=\"break\" /><text value=\" fruits.forEach(\" /><text value=\"fruit\" class=\"params\" /><text value=\" =&gt;\" /><text value=\" insert.run(fruit));\" /><text type=\"break\" /><text value=\"}\" /><text type=\"break\" /><text type=\"break\" /><text value=\"module\" class=\"built_in\" /><text value=\".exports = db;\" /></content><output><content><text value=\"\" /><text type=\"break\" /><text value=\"/usr/lib/node_modules/better-sqlite3/lib/database.js:69\" /><text type=\"break\" /><text value=\"  [util.cppdb]: { value: new addon.Database(filename, filenameGiven, anonymous, readonly, fileMustExist, timeout, verbose || null, buffer || null) },\" /><text type=\"break\" /><text value=\"                         ^\" /><text type=\"break\" /><text value=\"SqliteError: unable to open database file\" /><text type=\"break\" /><text value=\"    at new Database (/usr/lib/node_modules/better-sqlite3/lib/database.js:69:26)\" /><text type=\"break\" /><text value=\"    at Object.&lt;anonymous&gt; (/home/default/code/file.js:2:12)\" /><text type=\"break\" /><text value=\"    at Module._compile (node:internal/modules/cjs/loader:1469:14)\" /><text type=\"break\" /><text value=\"    at Module._extensions..js (node:internal/modules/cjs/loader:1548:10)\" /><text type=\"break\" /><text value=\"    at Module.load (node:internal/modules/cjs/loader:1288:32)\" /><text type=\"break\" /><text value=\"    at Module._load (node:internal/modules/cjs/loader:1104:12)\" /><text type=\"break\" /><text value=\"    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:174:12)\" /><text type=\"break\" /><text value=\"    at node:internal/main/run_main_module:28:49 {\" /><text type=\"break\" /><text value=\"  code: 'SQLITE_CANTOPEN'\" /><text type=\"break\" /><text value=\"}\" /><text type=\"break\" /><text value=\"\" /><text type=\"break\" /><text value=\"Node.js v20.17.0\" /><text type=\"break\" /><text value=\"\" /></content></output></code><p visible-if=\"wrong\">Asegúrese de elegir <code>result</code> seguido de <code>.</code> y luego <code>changes</code>, <code>&gt;</code>, <code>0</code>.</p></body></html>"
          },
          {
            "title": "Lesson #3 - Copy  - Copy",
            "id": 132637,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Crea una declaración SQL parametrizada que actualice el nombre de un artículo basado en un id dado.</p><code version=\"2\" codelang=\"javascript\" name=\"app.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" express = \" /><text value=\"require\" class=\"built_in\" /><text value=\"(\" /><text value=\"&quot;express&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" db = \" /><text value=\"require\" class=\"built_in\" /><text value=\"(\" /><text value=\"&quot;./database.js&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" app = express();\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" port = \" /><text value=\"3000\" class=\"number\" /><text value=\";\" /><text type=\"break\" /><text type=\"break\" /><text value=\"app.use(express.json());\" /><text type=\"break\" /><text type=\"break\" /><text value=\"app.patch(\" /><text value=\"&quot;/fruits/:id&quot;\" class=\"string\" /><text value=\", (req, res) =&gt; {\" /><text type=\"break\" /><text value=\" \" /><text value=\"const\" class=\"keyword\" /><text value=\" { id } = req.params;\" /><text type=\"break\" /><text value=\" \" /><text value=\"const\" class=\"keyword\" /><text value=\" { name } = req.body;\" /><text type=\"break\" /><text type=\"break\" /><text value=\" \" /><text value=\"if\" class=\"keyword\" /><text value=\" (!name) {\" /><text type=\"break\" /><text value=\"  \" /><text value=\"return\" class=\"keyword\" /><text value=\" res.status(\" /><text value=\"400\" class=\"number\" /><text value=\").json({\" /><text type=\"break\" /><text value=\"   \" /><text value=\"message\" class=\"attr\" /><text value=\": \" /><text value=\"&quot;Please provide a name&quot;\" class=\"string\" /><text type=\"break\" /><text value=\"  });\" /><text type=\"break\" /><text value=\" }\" /><text type=\"break\" /><text type=\"break\" /><text value=\" \" /><text value=\"const\" class=\"keyword\" /><text value=\" sql = \" /><text value=\"&quot;UPDATE fruits SET name = ? WHERE id = ?&quot;\" class=\"string\" /><text value=\";\" /><text type=\"break\" /><text value=\" \" /><text value=\"const\" class=\"keyword\" /><text value=\" result = db.prepare(sql).run(name, id);\" /><text type=\"break\" /><text type=\"break\" /><text value=\" \" /><text value=\"if\" class=\"keyword\" /><text value=\" (result.changes &gt; \" /><text value=\"0\" class=\"number\" /><text value=\") {\" /><text type=\"break\" /><text value=\"  res.status(\" /><text value=\"200\" class=\"number\" /><text value=\").json({\" /><text type=\"break\" /><text value=\"   \" /><text value=\"message\" class=\"attr\" /><text value=\": \" /><text value=\"&quot;Fruit updated successfully&quot;\" class=\"string\" /><text type=\"break\" /><text value=\"  });\" /><text type=\"break\" /><text value=\" } \" /><text value=\"else\" class=\"keyword\" /><text value=\" {\" /><text type=\"break\" /><text value=\"  res.status(\" /><text value=\"404\" class=\"number\" /><text value=\").json({\" /><text type=\"break\" /><text value=\"   \" /><text value=\"message\" class=\"attr\" /><text value=\": \" /><text value=\"&quot;Fruit not found&quot;\" class=\"string\" /><text type=\"break\" /><text value=\"  });\" /><text type=\"break\" /><text value=\" }\" /><text type=\"break\" /><text value=\"});\" /><text type=\"break\" /><text type=\"break\" /><text value=\"app.listen(port, () =&gt; {\" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"`App is running on PORT \" /><text value=\"${port}\" class=\"subst\" /><text value=\"`\" /><text value=\");\" /><text type=\"break\" /><text value=\"});\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"345\" endIndex=\"352\" /><option startIndex=\"353\" endIndex=\"359\" /><option startIndex=\"360\" endIndex=\"363\" /><option startIndex=\"364\" endIndex=\"368\" /><option startIndex=\"369\" endIndex=\"370\" /><option startIndex=\"371\" endIndex=\"372\" /><option startIndex=\"373\" endIndex=\"378\" /><option startIndex=\"379\" endIndex=\"381\" /><option startIndex=\"382\" endIndex=\"383\" /><option startIndex=\"384\" endIndex=\"385\" /></options></interaction></interactions><output><content><text value=\"{ message: &quot;Fruit updated successfully&quot; }\" /></content></output></code><code version=\"2\" codelang=\"javascript\" name=\"database.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" Database = \" /><text value=\"require\" class=\"built_in\" /><text value=\"(\" /><text value=\"&quot;better-sqlite3&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" db = \" /><text value=\"new\" class=\"keyword\" /><text value=\" Database(\" /><text value=\"&quot;database.db&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text type=\"break\" /><text value=\"db.exec(\" /><text value=\"`\" /><text type=\"break\" /><text value=\"    CREATE TABLE IF NOT EXISTS fruits (\" /><text type=\"break\" /><text value=\"      id INTEGER PRIMARY KEY AUTOINCREMENT,\" /><text type=\"break\" /><text value=\"      name TEXT NOT NULL\" /><text type=\"break\" /><text value=\"    )\" /><text type=\"break\" /><text value=\"`\" /><text value=\");\" /><text type=\"break\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" rowCount = db.prepare(\" /><text value=\"&quot;SELECT COUNT(*) AS count FROM fruits&quot;\" class=\"string\" /><text value=\")\" /><text type=\"break\" /><text value=\" .get().count;\" /><text type=\"break\" /><text type=\"break\" /><text value=\"if\" class=\"keyword\" /><text value=\" (rowCount === \" /><text value=\"0\" class=\"number\" /><text value=\") {\" /><text type=\"break\" /><text value=\" \" /><text value=\"const\" class=\"keyword\" /><text value=\" insert = db.prepare(\" /><text value=\"&quot;INSERT INTO fruits (name) VALUES (?)&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\" \" /><text value=\"const\" class=\"keyword\" /><text value=\" fruits = [\" /><text value=\"'Apple'\" class=\"string\" /><text value=\", \" /><text value=\"'Banana'\" class=\"string\" /><text value=\", \" /><text value=\"'Cherry'\" class=\"string\" /><text value=\"];\" /><text type=\"break\" /><text value=\" fruits.forEach(\" /><text value=\"fruit\" class=\"params\" /><text value=\" =&gt;\" /><text value=\" insert.run(fruit));\" /><text type=\"break\" /><text value=\"}\" /><text type=\"break\" /><text type=\"break\" /><text value=\"module\" class=\"built_in\" /><text value=\".exports = db;\" /></content><output><content><text value=\"\" /><text type=\"break\" /><text value=\"/usr/lib/node_modules/better-sqlite3/lib/database.js:69\" /><text type=\"break\" /><text value=\"  [util.cppdb]: { value: new addon.Database(filename, filenameGiven, anonymous, readonly, fileMustExist, timeout, verbose || null, buffer || null) },\" /><text type=\"break\" /><text value=\"                         ^\" /><text type=\"break\" /><text value=\"SqliteError: unable to open database file\" /><text type=\"break\" /><text value=\"    at new Database (/usr/lib/node_modules/better-sqlite3/lib/database.js:69:26)\" /><text type=\"break\" /><text value=\"    at Object.&lt;anonymous&gt; (/home/default/code/file.js:2:12)\" /><text type=\"break\" /><text value=\"    at Module._compile (node:internal/modules/cjs/loader:1469:14)\" /><text type=\"break\" /><text value=\"    at Module._extensions..js (node:internal/modules/cjs/loader:1548:10)\" /><text type=\"break\" /><text value=\"    at Module.load (node:internal/modules/cjs/loader:1288:32)\" /><text type=\"break\" /><text value=\"    at Module._load (node:internal/modules/cjs/loader:1104:12)\" /><text type=\"break\" /><text value=\"    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:174:12)\" /><text type=\"break\" /><text value=\"    at node:internal/main/run_main_module:28:49 {\" /><text type=\"break\" /><text value=\"  code: 'SQLITE_CANTOPEN'\" /><text type=\"break\" /><text value=\"}\" /><text type=\"break\" /><text value=\"\" /><text type=\"break\" /><text value=\"Node.js v20.17.0\" /><text type=\"break\" /><text value=\"\" /></content></output></code><p visible-if=\"wrong\">Asegúrese de elegir <code>\"UPDATE</code> seguido de <code>fruits</code> y luego <code>SET</code>, <code>name</code>, <code>=</code>, <code>?</code>, <code>WHERE</code>, <code>id</code>, <code>=</code>, <code>?</code>.</p></body></html>"
          },
          {
            "title": "Lesson #3 - Copy  - Copy - Copy",
            "id": 132641,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>¿Qué sucede si el nombre no se proporciona en el cuerpo de la solicitud al actualizar una fruta?</p><code version=\"2\" codelang=\"javascript\" name=\"app.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" express = \" /><text value=\"require\" class=\"built_in\" /><text value=\"(\" /><text value=\"&quot;express&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" db = \" /><text value=\"require\" class=\"built_in\" /><text value=\"(\" /><text value=\"&quot;./database.js&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" app = express();\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" port = \" /><text value=\"3000\" class=\"number\" /><text value=\";\" /><text type=\"break\" /><text type=\"break\" /><text value=\"app.use(express.json());\" /><text type=\"break\" /><text type=\"break\" /><text value=\"app.patch(\" /><text value=\"&quot;/fruits/:id&quot;\" class=\"string\" /><text value=\", (req, res) =&gt; {\" /><text type=\"break\" /><text value=\" \" /><text value=\"const\" class=\"keyword\" /><text value=\" { id } = req.params;\" /><text type=\"break\" /><text value=\" \" /><text value=\"const\" class=\"keyword\" /><text value=\" { name } = req.body;\" /><text type=\"break\" /><text type=\"break\" /><text value=\" \" /><text value=\"if\" class=\"keyword\" /><text value=\" (!name) {\" /><text type=\"break\" /><text value=\"  \" /><text value=\"return\" class=\"keyword\" /><text value=\" res.status(\" /><text value=\"400\" class=\"number\" /><text value=\").json({\" /><text type=\"break\" /><text value=\"   \" /><text value=\"message\" class=\"attr\" /><text value=\": \" /><text value=\"&quot;Please provide a name&quot;\" class=\"string\" /><text type=\"break\" /><text value=\"  });\" /><text type=\"break\" /><text value=\" }\" /><text type=\"break\" /><text type=\"break\" /><text value=\" \" /><text value=\"const\" class=\"keyword\" /><text value=\" sql = \" /><text value=\"&quot;UPDATE fruits SET name = ? WHERE id = ?&quot;\" class=\"string\" /><text value=\";\" /><text type=\"break\" /><text value=\" \" /><text value=\"const\" class=\"keyword\" /><text value=\" result = db.prepare(sql).run(name, id);\" /><text type=\"break\" /><text type=\"break\" /><text value=\" \" /><text value=\"if\" class=\"keyword\" /><text value=\" (result.changes &gt; \" /><text value=\"0\" class=\"number\" /><text value=\") {\" /><text type=\"break\" /><text value=\"  res.status(\" /><text value=\"200\" class=\"number\" /><text value=\").json({\" /><text type=\"break\" /><text value=\"   \" /><text value=\"message\" class=\"attr\" /><text value=\": \" /><text value=\"&quot;Fruit updated successfully&quot;\" class=\"string\" /><text type=\"break\" /><text value=\"  });\" /><text type=\"break\" /><text value=\" } \" /><text value=\"else\" class=\"keyword\" /><text value=\" {\" /><text type=\"break\" /><text value=\"  res.status(\" /><text value=\"404\" class=\"number\" /><text value=\").json({\" /><text type=\"break\" /><text value=\"   \" /><text value=\"message\" class=\"attr\" /><text value=\": \" /><text value=\"&quot;Fruit not found&quot;\" class=\"string\" /><text type=\"break\" /><text value=\"  });\" /><text type=\"break\" /><text value=\" }\" /><text type=\"break\" /><text value=\"});\" /><text type=\"break\" /><text type=\"break\" /><text value=\"app.listen(port, () =&gt; {\" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"`App is running on PORT \" /><text value=\"${port}\" class=\"subst\" /><text value=\"`\" /><text value=\");\" /><text type=\"break\" /><text value=\"});\" /></content></code><code version=\"2\" codelang=\"javascript\" name=\"database.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" Database = \" /><text value=\"require\" class=\"built_in\" /><text value=\"(\" /><text value=\"&quot;better-sqlite3&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" db = \" /><text value=\"new\" class=\"keyword\" /><text value=\" Database(\" /><text value=\"&quot;database.db&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text type=\"break\" /><text value=\"db.exec(\" /><text value=\"`\" /><text type=\"break\" /><text value=\"    CREATE TABLE IF NOT EXISTS fruits (\" /><text type=\"break\" /><text value=\"      id INTEGER PRIMARY KEY AUTOINCREMENT,\" /><text type=\"break\" /><text value=\"      name TEXT NOT NULL\" /><text type=\"break\" /><text value=\"    )\" /><text type=\"break\" /><text value=\"`\" /><text value=\");\" /><text type=\"break\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" rowCount = db.prepare(\" /><text value=\"&quot;SELECT COUNT(*) AS count FROM fruits&quot;\" class=\"string\" /><text value=\")\" /><text type=\"break\" /><text value=\" .get().count;\" /><text type=\"break\" /><text type=\"break\" /><text value=\"if\" class=\"keyword\" /><text value=\" (rowCount === \" /><text value=\"0\" class=\"number\" /><text value=\") {\" /><text type=\"break\" /><text value=\" \" /><text value=\"const\" class=\"keyword\" /><text value=\" insert = db.prepare(\" /><text value=\"&quot;INSERT INTO fruits (name) VALUES (?)&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\" \" /><text value=\"const\" class=\"keyword\" /><text value=\" fruits = [\" /><text value=\"'Apple'\" class=\"string\" /><text value=\", \" /><text value=\"'Banana'\" class=\"string\" /><text value=\", \" /><text value=\"'Cherry'\" class=\"string\" /><text value=\"];\" /><text type=\"break\" /><text value=\" fruits.forEach(\" /><text value=\"fruit\" class=\"params\" /><text value=\" =&gt;\" /><text value=\" insert.run(fruit));\" /><text type=\"break\" /><text value=\"}\" /><text type=\"break\" /><text type=\"break\" /><text value=\"module\" class=\"built_in\" /><text value=\".exports = db;\" /></content><output><content><text value=\"\" /><text type=\"break\" /><text value=\"/usr/lib/node_modules/better-sqlite3/lib/database.js:69\" /><text type=\"break\" /><text value=\"  [util.cppdb]: { value: new addon.Database(filename, filenameGiven, anonymous, readonly, fileMustExist, timeout, verbose || null, buffer || null) },\" /><text type=\"break\" /><text value=\"                         ^\" /><text type=\"break\" /><text value=\"SqliteError: unable to open database file\" /><text type=\"break\" /><text value=\"    at new Database (/usr/lib/node_modules/better-sqlite3/lib/database.js:69:26)\" /><text type=\"break\" /><text value=\"    at Object.&lt;anonymous&gt; (/home/default/code/file.js:2:12)\" /><text type=\"break\" /><text value=\"    at Module._compile (node:internal/modules/cjs/loader:1469:14)\" /><text type=\"break\" /><text value=\"    at Module._extensions..js (node:internal/modules/cjs/loader:1548:10)\" /><text type=\"break\" /><text value=\"    at Module.load (node:internal/modules/cjs/loader:1288:32)\" /><text type=\"break\" /><text value=\"    at Module._load (node:internal/modules/cjs/loader:1104:12)\" /><text type=\"break\" /><text value=\"    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:174:12)\" /><text type=\"break\" /><text value=\"    at node:internal/main/run_main_module:28:49 {\" /><text type=\"break\" /><text value=\"  code: 'SQLITE_CANTOPEN'\" /><text type=\"break\" /><text value=\"}\" /><text type=\"break\" /><text value=\"\" /><text type=\"break\" /><text value=\"Node.js v20.17.0\" /><text type=\"break\" /><text value=\"\" /></content></output></code><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\"> Se devuelve un estado <code>400</code> con el mensaje <code>\"Please provide a name\"</code></item><item value=\"2\" correct=\"false\">Se devuelve un estado <code>404</code> con el mensaje <code>\"Fruit not found\"</code></item></selection><p visible-if=\"wrong\"> Se devuelve un estado <code>400</code> con el mensaje <code>\"Please provide a name\"</code>.</p></body></html>"
          }
        ]
      }
    ]
  }
}