{
  "tutorial": {
    "id": 2652,
    "version": 5,
    "type": "challenges",
    "isNew": false,
    "codeLanguage": "python",
    "title": "Listas",
    "descriptionContent": "Ejercicios de Desafío basados en Listas",
    "shortDescriptionContent": "",
    "showInTrack": true,
    "iconBanner": null,
    "chapters": [
      {
        "id": 14670,
        "title": "Planificación de comidas",
        "type": "challengeLevel0",
        "lessons": [
          {
            "title": "Meal Planning",
            "id": 129698,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Decides planificar tus comidas diarias usando listas en Python.\n\n1. Dentro de la variable `meals`, crea una lista que contenga tus comidas para el desayuno, almuerzo y cena en este orden: `\"omelet\"`, `\"salad\"`, y `\"chicken\"`.\n2. Modifica la primera declaración de impresión para incluir el menú del almuerzo.\n3. ¡Un amigo pasa por tu casa con pizza! Cambia el valor de la cena (el último valor) en la lista `meals` a `\"pizza\"`.\n4. ¡Modifica la segunda declaración de impresión para incluir el elemento actual del menú de la cena!",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "meals = \n\nprint(f\"Lunch menu: {}\")\n\nprint(f\"Dinner menu: {}\")",
                  "solvedContent": "meals = [\"omelet\", \"salad\", \"chicken\"]\n\nprint(f\"Lunch menu: {meals[1]}\")\nmeals[2] = \"pizza\"\nprint(f\"Dinner menu: {meals[2]}\")"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 14671,
        "title": "Sustituciones de Voleibol",
        "type": "challengeLevel0",
        "lessons": [
          {
            "title": "Volleyball Subs",
            "id": 129699,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "¡Es tiempo de torneo para tu liga de voleibol, pero muchos de tus compañeros de equipo están fuera de la ciudad por el fin de semana largo! Parece que tendremos que hacer algunas sustituciones.\n\n1. Usa una operación de lista para reemplazar `\"Iliana\"` con `\"Jack\"` ( `sub_1` ).\n2. Reemplaza `\"Anders\"` con `\"Celeste\"` ( `sub_2` ).\n3. Reemplaza `\"Gabrielle\"` con `\"Mary\"` ( `sub_3` ).\n\n¡Es hora del partido. ¡Vamos equipo!",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "players = [\"Iliana\", \"Samuel\", \"Anders\", \"Teresa\", \"Gabrielle\", \"Alejandro\"]\nsub1 = \"Jack\"\nsub2 = \"Celeste\"\nsub3 = \"Mary\"\n\n",
                  "solvedContent": "players = [\"Iliana\", \"Samuel\", \"Anders\", \"Teresa\", \"Gabrielle\", \"Alejandro\"]\nsub1 = \"Jack\"\nsub2 = \"Celeste\"\nsub3 = \"Mary\"\n\nplayers[0] = sub1\nplayers[2] = sub2\nplayers[4] = sub3"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 14672,
        "title": "Recordatorios de lista de compras",
        "type": "challengeLevel0",
        "lessons": [
          {
            "title": "Shopping List Reminders",
            "id": 129700,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "¡Usemos bucles `for` para mantenernos al día con nuestra lista `shopping_list`!\n\n1. Para cada artículo, imprime una frase de recordatorio siguiendo este formato: `\"¡No olvides comprar <...>!\"`.\n2. Reemplaza `<...>` con el valor del artículo actual de la lista de compras en tu bucle.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "shopping_list = [\"dish soap\", \"kleenex\", \"batteries\", \"aluminum foil\", \"pet food\", \"toothpaste\", \"lightbulbs\"]\n\n",
                  "solvedContent": "shopping_list = [\"dish soap\", \"kleenex\", \"batteries\", \"aluminum foil\", \"pet food\", \"toothpaste\", \"lightbulbs\"]\n\nfor item in shopping_list:\n print(f\"Don't forget to buy {item}!\")"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 14673,
        "title": "Índice de Humedad del Bosque",
        "type": "challengeLevel0",
        "lessons": [
          {
            "title": "Forest Humidity Index",
            "id": 129701,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Gab es un geógrafo que estudia los niveles de humedad de los bosques. Gab recopiló algunos datos sobre los niveles de humedad de 50 secciones del bosque y quiere saber cuáles son los niveles de humedad más altos y más bajos del bosque. Usando `min()` y `max()`, encuentra e imprime estos niveles de la lista `humidity` para Gab.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "humidity = [77.78, 65.51, 74.42, 80.48, 71.71, 68.39, 65.10, 71.26, 75.95, 81.29, 71.54, 80.85, 84.45, 84.23, 83.18, 68.59, 80.83, 84.72, 78.23, 74.44, 83.20, 74.90, 80.59, 75.09, 82.46, 67.96, 77.65, 69.51, 74.57, 72.98, 66.01, 67.89, 82.52, 65.15, 70.07, 66.84, 74.74, 82.16, 73.73, 82.23, 66.47, 68.70, 71.28, 67.42, 82.87, 66.41, 80.43, 83.42, 74.70, 83.97]",
                  "solvedContent": "humidity = [77.78, 65.51, 74.42, 80.48, 71.71, 68.39, 65.10, 71.26, 75.95, 81.29, 71.54, 80.85, 84.45, 84.23, 83.18, 68.59, 80.83, 84.72, 78.23, 74.44, 83.20, 74.90, 80.59, 75.09, 82.46, 67.96, 77.65, 69.51, 74.57, 72.98, 66.01, 67.89, 82.52, 65.15, 70.07, 66.84, 74.74, 82.16, 73.73, 82.23, 66.47, 68.70, 71.28, 67.42, 82.87, 66.41, 80.43, 83.42, 74.70, 83.97]\r\nprint(min(humidity))\r\nprint(max(humidity))"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 14674,
        "title": "Participante descalificado",
        "type": "challengeLevel0",
        "lessons": [
          {
            "title": "Disqualified Participant",
            "id": 129702,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Tenemos un torneo mensual y registramos el nombre del campeón en la lista `champions`. Recientemente, descubrimos que un participante regular, `\"Tooti3\"`, estaba haciendo trampa. Tenemos que verificar si `\"Tooti3\"` ha ganado algún torneo y eliminarlo de la lista. Averigua cuántas veces aparece `\"Tooti3\"` en la lista `champions` usando `count()` y luego imprime el resultado en la consola.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "champions = [\"Miracle+\", \"Tooti3\", \"Orustat\", \"Emkay\", \"mizuhana\", \"CaptainSpark\", \"NichMercs\", \"mizuhana\", \"dabian\", \"Cyle\",  \"Tooti3\", \"Flaker\"]",
                  "solvedContent": "champions = [\"Miracle+\", \"Tooti3\", \"Orustat\", \"Emkay\", \"mizuhana\", \"CaptainSpark\", \"NichMercs\", \"mizuhana\", \"dabian\", \"Cyle\",  \"Tooti3\", \"Flaker\"]\r\nprint(champions.count(\"Tooti3\"))"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 14675,
        "title": "Cuenta de ahorros",
        "type": "challengeLevel0",
        "lessons": [
          {
            "title": "Savings Account",
            "id": 129703,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Joe registra cuánto dinero ahorró cada mes en una lista llamada `savings`. Ayuda a Joe a calcular sus ahorros totales del año usando `sum()` y muestra el resultado en la consola.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "savings = [122, 50, 102, 103, 79, 46, 107, 9, 13, 91, 193, 4]",
                  "solvedContent": "savings = [122, 50, 102, 103, 79, 46, 107, 9, 13, 91, 193, 4]\r\nprint(sum(savings))"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 13970,
        "title": "Filtrando Retiros Grandes",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "Filtering Large Withdrawals",
            "id": 124070,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Para comprender mejor tus hábitos de gasto, quieres una forma de ver todos los retiros mayores o iguales a un umbral de retiro establecido.\n\n1. Recorre `withdrawals`.\n2. Si el monto del retiro es mayor o igual a `withdrawal_threshold`, agrégalo a la lista `large_withdrawals`.\n4. Finalmente, imprime el número de elementos en la lista final `large_withdrawals`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "withdrawals = [25, 195, 6, 34, 18, 99, 110, 7, 87, 38, 101, 77, 250]\nwithdrawal_threshold = 100\nlarge_withdrawals = []\n\n",
                  "solvedContent": "withdrawals = [25, 195, 6, 34, 18, 99, 110, 7, 87, 38, 101, 77, 250]\nwithdrawal_threshold = 100\nlarge_withdrawals = []\n\nfor withdrawal in withdrawals:\n if withdrawal >= withdrawal_threshold:\n  large_withdrawals.append(withdrawal)\n\nprint(len(large_withdrawals))"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 13951,
        "title": "Ordenamiento",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "Sorting",
            "id": 123980,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Las listas `students_1E` y `students_1F` contienen los nombres de los estudiantes en las clases `1E` y `1F` respectivamente. Debido a una reestructuración de la escuela, los estudiantes de ambas clases se van a agrupar juntos. Une `students_1F` con `students_1E` y ordena sus nombres alfabéticamente. Imprime la lista combinada en la consola.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "students_1E = [\"Leslie\", \"Shyanne\", \"Cayden\", \"Karla\", \"Monika\", \"Abigale\", \"Tristen\", \"Salena\", \"Rosalie\", \"Francisca\", \"Harris\"]\r\nstudents_1F = [\"Mackenzie\", \"Trey\", \"Dashawn\", \"Jamia\", \"Emilio\", \"Desean\", \"Lucero\", \"Lilly\", \"Justice\", \"Cale\"]",
                  "solvedContent": "students_1E = [\"Leslie\", \"Shyanne\", \"Cayden\", \"Karla\", \"Monika\", \"Abigale\", \"Tristen\", \"Salena\", \"Rosalie\", \"Francisca\", \"Harris\"]\r\nstudents_1F = [\"Mackenzie\", \"Trey\", \"Dashawn\", \"Jamia\", \"Emilio\", \"Desean\", \"Lucero\", \"Lilly\", \"Justice\", \"Cale\"]\r\nstudents_1E += students_1F\r\nstudents_1E.sort()\r\nprint(students_1E)"
                }
              ],
              "hints": []
            }
          }
        ]
      }
    ]
  }
}