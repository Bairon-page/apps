{
  "tutorial": {
    "id": 2260,
    "version": 1,
    "type": "practiceOptional",
    "isNew": false,
    "codeLanguage": "javascript",
    "title": "ES6 2",
    "descriptionContent": "ES6 2",
    "shortDescriptionContent": "",
    "showInTrack": true,
    "iconBanner": null,
    "chapters": [
      {
        "id": 12265,
        "title": "Literales de plantilla",
        "type": "practiceLevel3",
        "lessons": [
          {
            "title": "Code: Literal String",
            "id": 111442,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Crea una variable llamada `favoriteIceCream` y asígnale un literal de cadena de texto `chocolate`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "console.log(favoriteIceCream);",
                  "solvedContent": "const favoriteIceCream = `chocolate`;\r\nconsole.log(favoriteIceCream);"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Code: Variables",
            "id": 111443,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Combina los literales de cadena para que `bestDessert` sea igual a `vanilla ice cream`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const favoriteIceCream = `vanilla`;\r\nconst bestDessert = ``;\r\nconsole.log(bestDessert);",
                  "solvedContent": "const favoriteIceCream = `vanilla`;\r\nconst bestDessert = `${favoriteIceCream} ice cream`;\r\nconsole.log(bestDessert);"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Code: Expressions",
            "id": 111444,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Dentro de la cadena `students` y después de los `:`, codifica una expresión que sume todos los números de estudiantes de la escuela. Querrás una cadena que se muestre como `# of Students: 260`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const elementarySchool = 90;\r\nconst middleSchool = 70;\r\nconst highSchool = 100;\r\nconst students = `# of Students:`;",
                  "solvedContent": "const elementarySchool = 90;\r\nconst middleSchool = 70;\r\nconst highSchool = 100;\r\nconst students =\r\n `# of Students: ${elementarySchool + middleSchool + highSchool}`;"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Code: Functions",
            "id": 111441,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Codifica el `${color}` en la línea de retorno y llama a la función para que el mensaje diga `Jerry always wears blue shirts.`. Pasa el parámetro sin paréntesis.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const bestColor = (color) => {\r\n const name = `Jerry`;\r\n return `${name} always wears  shirts.`;\r\n};\r\nconsole.log();",
                  "solvedContent": "const bestColor = (color) => {\r\n const name = `Jerry`;\r\n return `${name} always wears ${color} shirts.`;\r\n};\r\nconsole.log(bestColor`blue`);"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 13605,
        "title": "Desestructuración",
        "type": "practiceLevel3",
        "lessons": [
          {
            "title": "Code 1: Basic Array Destructuring",
            "id": 122394,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Planeamos una lista de ropa fabulosa y ¡necesitamos imprimirla! Desestructura el array y almacena sus elementos en las variables `top`, `bottom`, `outerwear` y `footwear`. Mantén el orden dentro de `[]`. Luego, `console.log` cada variable.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const [, , , ] = [\"Baseball top\", \"kilt\", \"Blazer\", \"Boots\"];\nconsole.log();\nconsole.log();\nconsole.log();\nconsole.log();",
                  "solvedContent": "const [top, bottom, outerwear, footwear] = [\"Baseball top\", \"kilt\",\n \"Blazer\", \"Boots\"\n];\nconsole.log(top);\nconsole.log(bottom);\nconsole.log(outerwear);\nconsole.log(footwear);"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Code 2: The rest in Array Destructuring",
            "id": 122395,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "En esta lista de tés, encontramos diferentes sabores. Queremos imprimir una oración sobre los beneficios del té de bayas, pero queremos conservar los tés restantes. Almacena `Berry` en la variable `berryTea` y los tés restantes en `otherTeas`. Luego incluye la variable relacionada con `Berry` en el primer `console.log` e imprime los tés restantes en el segundo.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const [] = ['Berry', 'Chai', 'Chamomile', 'Citrus', 'Fruity'];\nconsole.log(`The ${} tea has Sun-proofing and Nourishing effects.`);\nconsole.log();",
                  "solvedContent": "const [berryTea, ...otherTeas] = ['Berry', 'Chai', 'Chamomile',\n 'Citrus', 'Fruity'\n];\nconsole.log(\n `The ${berryTea} tea has Sun-proofing and Nourishing effects.`);\nconsole.log(otherTeas);"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Code 3: Extract Values in Destructuring",
            "id": 122396,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "En la panadería de nuestro vecino, tenemos diferentes tipos de pan. Esta vez necesitamos elegir la `Focaccia` para imprimir una frase informativa que hará que este pan se venda como pan caliente. Extrae y almacena este valor en la variable `italianBread`, luego úsala en el `console.log`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const [] = ['Sourdough', 'Baguette', 'Brioche', 'Focaccia',\n 'Multigrain'\n];\nconsole.log(\n `${} is leavened bread than produces a fluffy appearance.`);",
                  "solvedContent": "const [, , , italianBread] = ['Sourdough', 'Baguette', 'Brioche',\n 'Focaccia', 'Multigrain'\n];\nconsole.log(\n `${italianBread} is leavened bread than produces a fluffy appearance.`\n );"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Code 4: Basic Object Destructuring",
            "id": 122397,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "¡Volar es una aventura fantástica! Revisemos algunas características de Boeing en este objeto. Desestructura todas sus propiedades para usarlas en el `console.log`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const aircrafts = {\n brand: 'Boeing',\n nose: 'Pointed nose',\n windshield: 'V-shaped windshield',\n tail: 'Sloped Tail',\n};\nconst {} = aircrafts;\nconsole.log(`The ${brand} Company was founded on July 15, 1916.`);\nconsole.log(`This aircraft has a ${nose}, and a ${windshield}`);\nconsole.log(`And at least but not last a ${tail}`);",
                  "solvedContent": "const aircrafts = {\n brand: 'Boeing',\n nose: 'Pointed nose',\n windshield: 'V-shaped windshield',\n tail: 'Sloped Tail',\n};\nconst {\n brand,\n nose,\n windshield,\n tail\n} = aircrafts;\nconsole.log(`The ${brand} Company was founded on July 15, 1916.`);\nconsole.log(`This aircraft has a ${nose}, and a ${windshield}`);\nconsole.log(`And at least but not last a ${tail}`);"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Code 5: Different variable name",
            "id": 122398,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Necesitamos revisar las propiedades de `smartTV` antes de ir al centro comercial y comprar una nueva. Al observar los nombres de las propiedades, las dos primeras son demasiado generales para ser útiles; así que cambiemos `type` por `screenType` y `shape` por `screenShape` en la desestructuración del objeto.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const smartTV = {\n type: \"QLED\",\n shape: \"Flat\",\n ports: \"HDMI\",\n connectivity: 'Wi-Fi'\n};\nconst {} = smartTV;\nconsole.log(screenType);\nconsole.log(screenShape);",
                  "solvedContent": "const smartTV = {\n type: \"QLED\",\n shape: \"Flat\",\n ports: \"HDMI\",\n connectivity: 'Wi-Fi'\n};\nconst {\n type: screenType,\n shape: screenShape,\n} = smartTV;\nconsole.log(screenType);\nconsole.log(screenShape);"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Code 6: The rest in Object destructuring",
            "id": 122399,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Tenemos un objeto con los mejores programas de televisión por década. Queremos almacenar la propiedad `eighties` pero mantener las propiedades restantes en `otherOldShows`. Agrega estas variables a la desestructuración de objetos e incluye `eighties` en el primer `console.log`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const oldShows = {\n fifties: \"Maverick\",\n sixties: \"The Saint\",\n seventies: \"The Love Boat\",\n eighties: \"Manimal\",\n nineties: \"Dawson's Creek\"\n};\nconst {} = oldShows;\nconsole.log(`The best tv show in the 80s was ${}`);\nconsole.log(otherOldShows);",
                  "solvedContent": "const oldShows = {\n fifties: \"Maverick\",\n sixties: \"The Saint\",\n seventies: \"The Love Boat\",\n eighties: \"Manimal\",\n nineties: \"Dawson's Creek\"\n};\nconst {\n eighties,\n ...otherOldShows\n} = oldShows;\nconsole.log(`The best tv show in the 80s was ${eighties}`);\nconsole.log(otherOldShows);"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Code 7: Default Values in Destructuring",
            "id": 122400,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "El mundo de la cerveza es fascinante con todos los diferentes tipos y la cantidad considerable que podemos encontrar. Tenemos un objeto con información sobre una cerveza específica. Es necesario establecer un valor por defecto para la propiedad `brand` porque falta en `beer`. Establece `\"N/A\"` como el valor por defecto para `brand` en la desestructuración del objeto. Luego imprime `brand`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const beer = {\n name: '\tBlue Moon White',\n alcoholPercentage: 5.4,\n calories: 171,\n carbs: 12.9\n};\nconst {} = beer;\nconsole.log();",
                  "solvedContent": "const beer = {\n name: '\tBlue Moon White',\n alcoholPercentage: 5.4,\n calories: 171,\n carbs: 12.9\n};\nconst {\n brand = \"N/A\"\n} = beer;\nconsole.log(brand);"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Code 8: Parameters in Functions",
            "id": 122401,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Desestructura los dos primeros elementos de `mountains` como parámetros para `getMountainsNickname`. Usa los nombres de variables `alps` y `logan`. Luego, imprímelos dentro de la función en el mismo orden.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const mountains = [\"Swiss Alps\", \"Mount Logan\", \"Mount Fuji\",\n \"Mauna Kea\", \"Jotunheimen Mountains\"\n];\n\nfunction getMountainsNickname() {\n console.log(`The ${} are The Magical Mountains.`);\n console.log(`The ${} is The Snowy Paradise.`);\n}\ngetMountainsNickname(mountains);",
                  "solvedContent": "const mountains = [\"Swiss Alps\", \"Mount Logan\", \"Mount Fuji\",\n \"Mauna Kea\", \"Jotunheimen Mountains\"\n];\n\nfunction getMountainsNickname([alps, logan]) {\n console.log(`The ${alps} are The Magical Mountains.`);\n console.log(`The ${logan} is The Snowy Paradise.`);\n}\ngetMountainsNickname(mountains);"
                }
              ],
              "hints": []
            }
          }
        ]
      }
    ]
  }
}