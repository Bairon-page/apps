{
  "tutorial": {
    "id": 1896,
    "version": 12,
    "type": "course",
    "isNew": false,
    "codeLanguage": "javascript",
    "title": "Variables y Alcance en ES6",
    "descriptionContent": "Usa diferentes formas de crear variables y comprende el alcance.",
    "shortDescriptionContent": "",
    "showInTrack": true,
    "iconBanner": null,
    "chapters": [
      {
        "id": 12383,
        "title": "Variables Var",
        "type": "practiceLevel1",
        "lessons": [
          {
            "title": "Intro",
            "id": 112202,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Hasta ahora hemos aprendido mucho sobre JavaScript, una tecnología que está en constante evolución.</p><p>En 2015 hubo una revisión importante de JS llamada ECMAScript 2015 (ES6). Trajo nuevas características, como las dos variables que ya conoces.</p></body></html>"
          },
          {
            "title": "Var",
            "id": 112208,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Pero antes del uso de <code>let</code> y <code>const</code>, declaramos variables usando la palabra clave <code>var</code>, que significa <code>\"variable\"</code>.<br /></p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"var\" class=\"keyword\" /><text value=\" color = \" /><text value=\"&quot;red&quot;\" class=\"string\" /><text value=\";\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"0\" endIndex=\"3\" /></options></interaction></interactions></code><p visible-if=\"wrong\">Asegúrese de elegir <code>var</code>.</p></body></html>"
          },
          {
            "title": "Let and Const",
            "id": 112211,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>ES6 introdujo las variables <code>let</code> y <code>const</code> para superar las limitaciones con <code>var</code>. Por lo tanto, siempre deberías intentar usar <code>let</code> y <code>const</code>.</p><p>Muestra los tres diferentes tipos de variables en la consola en el orden en que las declaramos para ver que funcionan de la misma manera.</p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"var\" class=\"keyword\" /><text value=\" fullName = \" /><text value=\"&quot;Emma Watson&quot;\" class=\"string\" /><text value=\";\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" occupation = \" /><text value=\"&quot;Activist&quot;\" class=\"string\" /><text value=\";\" /><text type=\"break\" /><text value=\"let\" class=\"keyword\" /><text value=\" age = \" /><text value=\"30\" class=\"number\" /><text value=\";\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(fullName);\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(occupation);\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(age);\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"87\" endIndex=\"95\" /><option startIndex=\"110\" endIndex=\"120\" /><option startIndex=\"135\" endIndex=\"138\" /></options></interaction></interactions><output><content><text value=\"Emma Watson\" /><text type=\"break\" /><text value=\"Activist\" /><text type=\"break\" /><text value=\"30\" /></content></output></code><p visible-if=\"wrong\">Asegúrese de elegir <code>fullName</code> seguido de <code>occupation</code> y finalmente <code>age</code>.</p></body></html>"
          },
          {
            "title": "Let, const and var similarities",
            "id": 112212,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Usamos variables <code>var</code>, <code>let</code> y <code>const</code> para almacenar datos, y siguen las mismas reglas de nomenclatura que ya hemos aprendido.</p><p>Elige los nombres apropiados para las variables.</p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"var\" class=\"keyword\" /><text value=\" number = \" /><text value=\"20\" class=\"number\" /><text value=\";\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" player1 = \" /><text value=\"'Sonic'\" class=\"string\" /><text value=\";\" /><text type=\"break\" /><text value=\"let\" class=\"keyword\" /><text value=\" badWeather = \" /><text value=\"&quot;rainy&quot;\" class=\"string\" /><text value=\";\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(number);\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(player1);\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(badWeather);\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"4\" endIndex=\"10\" /><option startIndex=\"23\" endIndex=\"30\" /><option startIndex=\"46\" endIndex=\"56\" /></options></interaction></interactions><output><content><text value=\"20\" /><text type=\"break\" /><text value=\"Sonic\" /><text type=\"break\" /><text value=\"rainy\" /></content></output></code><p visible-if=\"wrong\">Asegúrese de elegir <code>number</code> seguido de <code>player1</code> y finalmente <code>badWeather</code>.</p></body></html>"
          },
          {
            "title": "Redeclaring var",
            "id": 112209,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Más allá de los nombres, estas variables se comportan de manera bastante diferente. Por ejemplo, <code>var</code> se puede declarar múltiples veces, mientras que <code>let</code> y <code>const</code> no pueden.</p><p>Si mostramos <code>surname</code> en la consola, solo veremos el último valor que asignamos a la variable.</p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"var\" class=\"keyword\" /><text value=\" surname = \" /><text value=\"&quot;Smit&quot;\" class=\"string\" /><text value=\";\" /><text type=\"break\" /><text value=\"var\" class=\"keyword\" /><text value=\" surname = \" /><text value=\"&quot;Smith&quot;\" class=\"string\" /><text value=\";\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(surname);\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"57\" endIndex=\"64\" /><option correct=\"false\"><content><text value=\"firstName\" /></content></option></options></interaction></interactions><output><content><text value=\"Smith\" /></content></output></code><p visible-if=\"wrong\">Asegúrese de elegir <code>surname</code>.</p></body></html>"
          },
          {
            "title": "Redeclaring const",
            "id": 112213,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Solo podemos declarar <code>let</code> y <code>const</code> una vez. Si intentamos redeclarar estas variables, obtendremos un error de sintaxis en la consola.</p><p>Muestra <code>color</code> en la consola para ver el error.</p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" color = \" /><text value=\"&quot;Brow&quot;\" class=\"string\" /><text value=\";\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" color = \" /><text value=\"&quot;Brown&quot;\" class=\"string\" /><text value=\";\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(color);\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"57\" endIndex=\"62\" /></options></interaction></interactions><output><content><text value=\"SyntaxError: Identifier 'color' has already been declared\" /><text type=\"break\" /><text value=\" \" /></content></output></code><p visible-if=\"wrong\">Asegúrese de elegir <code>color</code>.</p></body></html>"
          },
          {
            "title": "Redeclaring let",
            "id": 112214,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Lo mismo ocurre con una variable <code>let</code> como <code>movie</code>. No podemos declarar una variable <code>let</code> múltiples veces.</p><p>¿Qué mostrará la consola?</p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"let\" class=\"keyword\" /><text value=\" movie = \" /><text value=\"&quot;The Huner Games&quot;\" class=\"string\" /><text value=\";\" /><text type=\"break\" /><text value=\"let\" class=\"keyword\" /><text value=\" movie = \" /><text value=\"&quot;The Hunger Games&quot;\" class=\"string\" /><text value=\";\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(movie);\" /></content><output><content><text value=\"Uncaught SyntaxError: Identifier 'movie' has already been declared\" /></content></output></code><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\"><code>Uncaught SyntaxError: Identifier 'movie' has already been declared</code></item><item value=\"2\" correct=\"false\"><code>The Huner Games</code></item><item value=\"3\" correct=\"false\"><code>The Hunger Games</code></item></selection><p visible-if=\"wrong\"><code>Uncaught SyntaxError: Identifier 'movie' has already been declared</code>.</p></body></html>"
          },
          {
            "title": "Final explanation",
            "id": 112265,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Declarar variables con <code>let</code> y <code>const</code> es esencial para evitar muchos otros errores de código, por lo que deberíamos usarlos como nuestra primera opción.</p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" canDance = \" /><text value=\"true\" class=\"literal\" /><text value=\";\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" canDance = \" /><text value=\"false\" class=\"literal\" /><text value=\";\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(canDance);\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"59\" endIndex=\"67\" /></options></interaction></interactions><output><content><text value=\"SyntaxError: Identifier 'canDance' has already been declared\" /></content></output></code><p visible-if=\"wrong\">Asegúrese de elegir <code>canDance</code>.</p></body></html>"
          },
          {
            "title": "Question 1",
            "id": 112210,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>¿Verdadero o falso? <code>var</code> es la única palabra reservada para crear variables.</p><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\">Falso</item><item value=\"2\" correct=\"false\">Verdadero</item></selection><p visible-if=\"wrong\">Asegúrese de elegir Falso.</p></body></html>"
          },
          {
            "title": "Question 2",
            "id": 112216,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>¿Qué podemos almacenar en los tres tipos de variables?</p><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\">Podemos almacenar todo tipo de datos en los tres tipos de variables</item><item value=\"2\" correct=\"false\">Solo podemos almacenar objetos en <code>let</code> y <code>const</code> y números en <code>var</code></item></selection><p visible-if=\"wrong\">Podemos almacenar todo tipo de datos en los tres tipos de variables.</p></body></html>"
          },
          {
            "title": "Question 3",
            "id": 112217,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>¿Qué tipo de variable podemos redeclarar?</p><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\"><code>var</code></item><item value=\"2\" correct=\"false\"><code>const</code></item><item value=\"3\" correct=\"false\"><code>let</code></item></selection><p visible-if=\"wrong\">Asegúrese de elegir <code>var</code>.</p></body></html>"
          },
          {
            "title": "Question 4",
            "id": 112224,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>¿Qué significa ES6?</p><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\">ECMAScript 2015</item><item value=\"2\" correct=\"false\">JavaScript 2015</item><item value=\"3\" correct=\"false\">TypeScript 2015</item></selection><p visible-if=\"wrong\">ECMAScript 2015.</p></body></html>"
          },
          {
            "title": "Example 2",
            "id": 112219,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Crea una nueva variable <code>tree</code> usando <code>let</code>.</p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"let\" class=\"keyword\" /><text value=\" tree = \" /><text value=\"&quot;Crespon&quot;\" class=\"string\" /><text value=\";\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(tree);\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"0\" endIndex=\"3\" /><option startIndex=\"4\" endIndex=\"8\" /><option startIndex=\"9\" endIndex=\"10\" /><option startIndex=\"11\" endIndex=\"20\" /></options></interaction></interactions><output><content><text value=\"Crespon\" /></content></output></code><p visible-if=\"wrong\">Asegúrese de elegir <code>let</code> seguido de <code>tree</code> y luego <code>=</code>, <code>\"Crespon\"</code>.</p></body></html>"
          },
          {
            "title": "Example 3",
            "id": 112220,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Ordena las líneas para primero declarar la variable <code>year</code>, luego actualizarla, y finalmente mostrarla en la consola.</p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"let\" class=\"keyword\" /><text value=\" year = \" /><text value=\"2021\" class=\"number\" /><text value=\";\" /><text type=\"break\" /><text value=\"year = \" /><text value=\"2022\" class=\"number\" /><text value=\";\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(year);\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"0\" endIndex=\"16\" /><option startIndex=\"17\" endIndex=\"29\" /></options></interaction></interactions><output><content><text value=\"2022\" /></content></output></code><p visible-if=\"wrong\">Asegúrese de elegir <code>let year = 2021;</code> seguido de <code>year = 2022;</code>.</p></body></html>"
          },
          {
            "title": "Example 4",
            "id": 112267,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Declara la variable <code>forest</code> usando el tipo de variable <code>const</code>.</p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"let\" class=\"keyword\" /><text value=\" river = \" /><text value=\"&quot;Thames&quot;\" class=\"string\" /><text value=\";\" /><text type=\"break\" /><text value=\"var\" class=\"keyword\" /><text value=\" mountain = \" /><text value=\"&quot;Everest&quot;\" class=\"string\" /><text value=\";\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" forest = \" /><text value=\"&quot;Sequoia National Forest&quot;\" class=\"string\" /><text value=\";\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(forest);\" /></content><interactions><interaction type=\"validatedInput\" isDefault=\"true\" startIndex=\"48\" endIndex=\"53\" /></interactions><output><content><text value=\"Sequoia National Forest\" /></content></output></code><p visible-if=\"wrong\">Asegúrese de elegir <code>const</code>.</p></body></html>"
          }
        ]
      },
      {
        "id": 12389,
        "title": "Actualizar variables y errores",
        "type": "practiceLevel1",
        "lessons": [
          {
            "title": "Intro",
            "id": 112215,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Ya conocemos los tres tipos de variables <code>let</code>, <code>const</code> y <code>var</code>.</p><p>Aprendamos más sobre las diferencias entre ellos para entender por qué se utilizan en diferentes situaciones.</p></body></html>"
          },
          {
            "title": "Updating variables",
            "id": 112229,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Podemos actualizar las variables <code>let</code> o <code>var</code> con el operador de asignación <code>=</code>. Pero no podemos cambiar las variables <code>const</code>. <code>const</code> es la abreviatura de \"constante\".</p><p>\"Pi\" es un número matemático que no cambia. Si lo almacenamos en un <code>const</code> e intentamos cambiarlo, ¿qué error obtendremos?</p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" piNumber = \" /><text value=\"3.1416\" class=\"number\" /><text value=\";\" /><text type=\"break\" /><text value=\"piNumber = \" /><text value=\"90\" class=\"number\" /><text value=\";\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(piNumber);\" /></content><output><content><text value=\"TypeError: Assignment to constant variable.\" /></content></output></code><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\"><code>TypeError: Assignment to constant variable</code></item><item value=\"2\" correct=\"false\"><code>ReferenceError: piNumber is not defined</code></item></selection><p visible-if=\"wrong\"><code>TypeError: Assignment to constant variable</code>.</p></body></html>"
          },
          {
            "title": "Updating const - Arrays",
            "id": 112232,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>No podemos cambiar un arreglo completo almacenado en una variable <code>const</code>. Sin embargo, podemos usar métodos de arreglos para <em>actualizar</em> su contenido.</p><p>Usa el método correcto de array para incluir el <code>newPresent</code> en el <code>wardrobe</code>.</p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" newPresent = \" /><text value=\"&quot;Trousers&quot;\" class=\"string\" /><text value=\";\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" wardrobe = [\" /><text value=\"&quot;Shirt&quot;\" class=\"string\" /><text value=\"];\" /><text type=\"break\" /><text value=\"wardrobe.push(newPresent);\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(wardrobe);\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"59\" endIndex=\"67\" /><option startIndex=\"67\" endIndex=\"68\" /><option startIndex=\"68\" endIndex=\"72\" /></options></interaction></interactions><output><content><text value=\"[ 'Shirt', 'Trousers' ]\" /></content></output></code><p visible-if=\"wrong\">Asegúrese de elegir <code>wardrobe</code> seguido de <code>.</code> y finalmente <code>push</code>.</p></body></html>"
          },
          {
            "title": "Updating const - Object properties",
            "id": 112296,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>De igual manera, no podemos cambiar un objeto completo almacenado en una constante, pero podemos <em>actualizar</em> sus propiedades.</p><p>¿Cuál será la salida de <code>myClothes.shirts</code>?</p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" myClothes = {\" /><text type=\"break\" /><text value=\" \" /><text value=\"shirts\" class=\"attr\" /><text value=\": \" /><text value=\"1\" class=\"number\" /><text value=\",\" /><text type=\"break\" /><text value=\"};\" /><text type=\"break\" /><text value=\"myClothes.shirts++;\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(myClothes.shirts);\" /></content><output><content><text value=\"2\" /></content></output></code><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\">2</item><item value=\"2\" correct=\"false\">1</item></selection><p visible-if=\"wrong\">Asegúrese de elegir 2.</p></body></html>"
          },
          {
            "title": "Var Hoisting",
            "id": 112275,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Otra diferencia entre los tres tipos de variables es que podemos almacenar datos en una variable <code>var</code> antes incluso de declararla.</p><p>Este proceso se llama \"hoisting\". Ten en cuenta que <strong>esto no es una buena práctica</strong>.</p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"zodiacSign = \" /><text value=\"&quot;Aries&quot;\" class=\"string\" /><text value=\";\" /><text type=\"break\" /><text value=\"var\" class=\"keyword\" /><text value=\" zodiacSign;\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(zodiacSign);\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"22\" endIndex=\"25\" /></options></interaction></interactions><output><content><text value=\"Aries\" /></content></output></code><p visible-if=\"wrong\">Asegúrese de elegir <code>var</code>.</p></body></html>"
          },
          {
            "title": "let and const not hoisting",
            "id": 112274,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p><code>let</code> y <code>const</code> evitan el hoisting porque siempre necesitamos declarar estas variables antes de almacenar datos dentro de ellas.</p><p>Veremos un error de inicialización en la consola si asignamos un valor a una variable <code>const</code> o <code>let</code> antes de haberlas declarado.</p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"car = \" /><text value=\"&quot;Renault&quot;\" class=\"string\" /><text value=\";\" /><text type=\"break\" /><text value=\"let\" class=\"keyword\" /><text value=\" car;\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(car);\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"17\" endIndex=\"20\" /><option startIndex=\"21\" endIndex=\"24\" /></options></interaction></interactions><output><content><text value=\"ReferenceError: Cannot access 'car' before initialization\" /></content></output></code><p visible-if=\"wrong\">Asegúrese de elegir <code>let</code> seguido de <code>car</code>.</p></body></html>"
          },
          {
            "title": "Question 1",
            "id": 112331,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>¿Qué tipo de variable considerarías apropiada para almacenar el número de Euler que siempre es 2.71828?</p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" eulerNumber = \" /><text value=\"2.71828\" class=\"number\" /><text value=\";\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(eulerNumber);\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"0\" endIndex=\"5\" /><option correct=\"false\"><content><text value=\"var\" /></content></option><option correct=\"false\"><content><text value=\"let\" /></content></option></options></interaction></interactions><output><content><text value=\"2.71828\" /></content></output></code><p visible-if=\"wrong\">Asegúrese de elegir <code>const</code>.</p></body></html>"
          },
          {
            "title": "Question 2",
            "id": 112332,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>¿Qué mostrará la consola?</p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" placeOfBirth = \" /><text value=\"&quot;Tokyo&quot;\" class=\"string\" /><text value=\";\" /><text type=\"break\" /><text value=\"placeOfBirth = \" /><text value=\"&quot;Asunción&quot;\" class=\"string\" /><text value=\";\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(placeOfBirth);\" /></content><output><content><text value=\"TypeError: Assignment to constant variable.\" /></content></output></code><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\"><code>TypeError: Assignment to constant variable</code></item><item value=\"2\" correct=\"false\"><code>TypeError: Assignment to let variable</code></item><item value=\"3\" correct=\"false\">Asunción</item></selection><p visible-if=\"wrong\"><code>TypeError: Assignment to constant variable</code>.</p></body></html>"
          },
          {
            "title": "Question 3",
            "id": 112333,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>¿Podemos actualizar una <em>propiedad</em> de un objeto almacenado en una variable <code>const</code>?</p><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\">Sí, puedes cambiar las propiedades de un objeto almacenado en una variable <code>const</code></item><item value=\"2\" correct=\"false\">No</item></selection><p visible-if=\"wrong\">Sí, puedes cambiar las propiedades de un objeto almacenado en una variable <code>const</code>.</p></body></html>"
          },
          {
            "title": "Question 4",
            "id": 112334,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>¿Qué mostrará la consola?</p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"artist = \" /><text value=\"&quot;Frida Kahlo&quot;\" class=\"string\" /><text value=\";\" /><text type=\"break\" /><text value=\"let\" class=\"keyword\" /><text value=\" artist;\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(artist);\" /></content><output><content><text value=\"ReferenceError: Cannot access 'artist' before initialization\" /></content></output></code><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"false\"><code>TypeError: Assignment to constant variable</code></item><item value=\"2\" correct=\"true\"><code>ReferenceError: Cannot access 'artist' before initialization</code></item></selection><p visible-if=\"wrong\"><code>ReferenceError: Cannot access 'artist' before initialization</code>.</p></body></html>"
          },
          {
            "title": "Example 1",
            "id": 112335,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Ordena las líneas de código para evitar el hoisting.</p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"var\" class=\"keyword\" /><text value=\" lotteryNumbers;\" /><text type=\"break\" /><text value=\"lotteryNumbers = [\" /><text value=\"20\" class=\"number\" /><text value=\", \" /><text value=\"34\" class=\"number\" /><text value=\", \" /><text value=\"645\" class=\"number\" /><text value=\", \" /><text value=\"01\" class=\"number\" /><text value=\"];\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(lotteryNumbers);\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"0\" endIndex=\"19\" /><option startIndex=\"20\" endIndex=\"55\" /></options></interaction></interactions><output><content><text value=\"[ 20, 34, 645, 1 ]\" /></content></output></code><p visible-if=\"wrong\">Asegúrese de elegir <code>var lotteryNumbers;</code> seguido de <code>lotteryNumbers = [20, 34, 645, 01];</code>.</p></body></html>"
          },
          {
            "title": "Example 2",
            "id": 112336,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Completa el código para que el valor de la variable no pueda ser actualizado.</p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" capitalOfZambia = \" /><text value=\"&quot;Lusaka&quot;\" class=\"string\" /><text value=\";\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(capitalOfZambia);\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"0\" endIndex=\"5\" /><option correct=\"false\"><content><text value=\"var\" /></content></option></options></interaction></interactions><output><content><text value=\"Lusaka\" /></content></output></code><p visible-if=\"wrong\">Asegúrese de elegir <code>const</code>.</p></body></html>"
          },
          {
            "title": "Example 3",
            "id": 112337,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Codifica un tipo de variable que <em>no</em> cause un error.</p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"asleep = \" /><text value=\"true\" class=\"literal\" /><text value=\";\" /><text type=\"break\" /><text value=\"var\" class=\"keyword\" /><text value=\" asleep;\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(asleep);\" /></content><interactions><interaction type=\"validatedInput\" isDefault=\"true\" startIndex=\"15\" endIndex=\"18\" /></interactions><output><content><text value=\"true\" /></content></output></code><p visible-if=\"wrong\">Asegúrese de elegir <code>var</code>.</p></body></html>"
          }
        ]
      },
      {
        "id": 12384,
        "title": "Ámbito",
        "type": "practiceLevel1",
        "lessons": [
          {
            "title": "Intro",
            "id": 112203,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Ahora que estamos cómodos con los tres tipos de variables, aprendamos sobre el concepto de \"scope\".</p><p>\"Alcance\" es un término utilizado para indicar dónde están disponibles las variables. Hay partes de nuestro código donde no tenemos acceso a ellas.</p></body></html>"
          },
          {
            "title": "Local Scope",
            "id": 112339,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>  El <strong>alcance local</strong> o <strong>de función</strong> se refiere a la parte del código dentro de una función.</p><p>Aquí, <code>country</code> es una variable local a la que podemos acceder solo dentro de la función <code>visitCountry</code>.</p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"function\" class=\"keyword\" /><text value=\" \" /><text value=\"visitCountry\" class=\"title\" /><text value=\"(\" /><text value=\"\" class=\"params\" /><text value=\") \" /><text value=\"{\" /><text type=\"break\" /><text value=\" \" /><text value=\"const\" class=\"keyword\" /><text value=\" country = \" /><text value=\"&quot;Argentina&quot;\" class=\"string\" /><text value=\";\" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(country);\" /><text type=\"break\" /><text value=\"}\" /><text type=\"break\" /><text value=\"visitCountry();\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"27\" endIndex=\"32\" /><option startIndex=\"44\" endIndex=\"55\" /><option startIndex=\"33\" endIndex=\"40\" /></options></interaction></interactions><output><content><text value=\"Argentina\" /></content></output></code><p visible-if=\"wrong\">Asegúrese de elegir <code>const</code> seguido de <code>country</code> y finalmente <code>Argentina\";</code>.</p></body></html>"
          },
          {
            "title": "Local Scope 2",
            "id": 112299,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Intentar acceder a una variable local desde fuera de la función producirá un error.</p><p>Aquí, <code>myDiary</code> es privado, por lo que no podemos acceder a él desde fuera de la función. Vamos a intentar ver qué se muestra.</p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"function\" class=\"keyword\" /><text value=\" \" /><text value=\"readDiary\" class=\"title\" /><text value=\"(\" /><text value=\"\" class=\"params\" /><text value=\") \" /><text value=\"{\" /><text type=\"break\" /><text value=\" \" /><text value=\"const\" class=\"keyword\" /><text value=\" myDiary = \" /><text value=\"&quot;Dear diary, today...&quot;\" class=\"string\" /><text value=\";\" /><text type=\"break\" /><text value=\"}\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(myDiary);\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"78\" endIndex=\"85\" /><option correct=\"false\"><content><text value=\"myDiary()\" /></content></option></options></interaction></interactions><output><content><text value=\"ReferenceError: myDiary is not defined\" /></content></output></code><p visible-if=\"wrong\">Asegúrese de elegir <code>myDiary</code>.</p></body></html>"
          },
          {
            "title": "Global Scope",
            "id": 112298,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>El espacio fuera de una función se llama <strong>ámbito global</strong>. Puedes pensar en él como el código entre funciones.</p><p>Si declaramos <code>cityToVisit</code> en el ámbito global, podemos acceder a él desde cualquier parte del código, incluyendo dentro de la función <code>travel</code>.</p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"let\" class=\"keyword\" /><text value=\" cityToVisit = \" /><text value=\"&quot;Salzburg&quot;\" class=\"string\" /><text value=\";\" /><text type=\"break\" /><text type=\"break\" /><text value=\"function\" class=\"keyword\" /><text value=\" \" /><text value=\"travel\" class=\"title\" /><text value=\"(\" /><text value=\"\" class=\"params\" /><text value=\") \" /><text value=\"{\" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;Let's go to &quot;\" class=\"string\" /><text value=\" + cityToVisit);\" /><text type=\"break\" /><text value=\"}\" /><text type=\"break\" /><text value=\"travel();\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(cityToVisit);\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"81\" endIndex=\"92\" /><option startIndex=\"119\" endIndex=\"130\" /></options></interaction></interactions><output><content><text value=\"Let's go to Salzburg\" /><text type=\"break\" /><text value=\"Salzburg\" /></content></output></code><p visible-if=\"wrong\">Asegúrese de elegir <code>cityToVisit</code> seguido de <code>cityToVisit</code>.</p></body></html>"
          },
          {
            "title": "Block scope",
            "id": 112301,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>El último tipo de alcance se llama <strong>alcance de bloque</strong>. Es la parte de nuestro código entre las llaves ( <code>{}</code> ) que pertenecen a bucles o condicionales.</p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"if\" class=\"keyword\" /><text value=\" (\" /><text value=\"10\" class=\"number\" /><text value=\" === \" /><text value=\"10\" class=\"number\" /><text value=\") {\" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;This space here is block scope&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\"}\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"15\" endIndex=\"16\" /><option startIndex=\"65\" endIndex=\"66\" /></options></interaction></interactions><output><content><text value=\"This space here is block scope\" /></content></output></code><p visible-if=\"wrong\">Asegúrese de elegir <code>{</code> seguido de <code>}</code>.</p></body></html>"
          },
          {
            "title": "Block scope - var",
            "id": 112302,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Podemos acceder a una <code>var</code> declarada dentro de un bloque, desde fuera de él, lo que puede causar confusión si la declaramos más de una vez.<br /></p><p>Aquí, estamos declarando la variable <code>access</code> dos veces. ¿Cuál será la salida?</p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"var\" class=\"keyword\" /><text value=\" age = \" /><text value=\"18\" class=\"number\" /><text value=\";\" /><text type=\"break\" /><text value=\"var\" class=\"keyword\" /><text value=\" access = \" /><text value=\"true\" class=\"literal\" /><text value=\";\" /><text type=\"break\" /><text value=\"if\" class=\"keyword\" /><text value=\" (age === \" /><text value=\"18\" class=\"number\" /><text value=\") {\" /><text type=\"break\" /><text value=\" \" /><text value=\"var\" class=\"keyword\" /><text value=\" access = \" /><text value=\"false\" class=\"literal\" /><text value=\";\" /><text type=\"break\" /><text value=\"}\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(access);\" /></content><output><content><text value=\"false\" /></content></output></code><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\">false</item><item value=\"2\" correct=\"false\">true</item></selection><p visible-if=\"wrong\">Asegúrese de elegir false.</p></body></html>"
          },
          {
            "title": "Block scope - let, const",
            "id": 112303,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Si declaramos <code>let</code> y <code>const</code> en un ámbito de bloque, solo podemos acceder a ellos en ese bloque de código.</p><p>Aquí hay dos variables <code>canDrive</code>, una en un ámbito global y la otra en un ámbito de bloque. ¿Qué se muestra en la consola?</p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" drivingAge = \" /><text value=\"18\" class=\"number\" /><text value=\";\" /><text type=\"break\" /><text value=\"let\" class=\"keyword\" /><text value=\" canDrive = \" /><text value=\"false\" class=\"literal\" /><text value=\";\" /><text type=\"break\" /><text value=\"if\" class=\"keyword\" /><text value=\" (drivingAge === \" /><text value=\"18\" class=\"number\" /><text value=\") {\" /><text type=\"break\" /><text value=\" \" /><text value=\"let\" class=\"keyword\" /><text value=\" canDrive = \" /><text value=\"true\" class=\"literal\" /><text value=\";\" /><text type=\"break\" /><text value=\"}\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(canDrive);\" /></content><output><content><text value=\"false\" /></content></output></code><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\">La variable global</item><item value=\"2\" correct=\"false\">La variable de bloque</item></selection><p visible-if=\"wrong\">La variable global.</p></body></html>"
          },
          {
            "title": "Block scope - for",
            "id": 112304,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>El alcance de bloque también es útil para limitar dónde usamos ciertas variables. Es realmente útil para prevenir efectos secundarios no deseados o errores.</p><p>Aquí, solo podemos usar la variable <code>index</code> en el bucle. Después de que el bucle termine, <code>index</code> ya no está disponible.</p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"for\" class=\"keyword\" /><text value=\" (\" /><text value=\"let\" class=\"keyword\" /><text value=\" index = \" /><text value=\"1\" class=\"number\" /><text value=\"; index &lt;= \" /><text value=\"3\" class=\"number\" /><text value=\"; index++) {\" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;Let's count to three&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\"}\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(index);\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"95\" endIndex=\"100\" /></options></interaction></interactions><output><content><text value=\"Let's count to three\" /><text type=\"break\" /><text value=\"Let's count to three\" /><text type=\"break\" /><text value=\"Let's count to three\" /><text type=\"break\" /><text value=\"Uncaught ReferenceError: index is not defined\" /></content></output></code><p visible-if=\"wrong\">Asegúrese de elegir <code>index</code>.</p></body></html>"
          },
          {
            "title": "Question 1",
            "id": 112341,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>¿Cómo se llama el alcance dentro de una función?</p><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\">Ámbito Local o de Función</item><item value=\"2\" correct=\"false\">Ámbito Global</item></selection><p visible-if=\"wrong\">Ámbito Local o de Función.</p></body></html>"
          },
          {
            "title": "Question 2",
            "id": 112342,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>¿Cuál es el alcance de la variable <code>dog</code>?</p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"function\" class=\"keyword\" /><text value=\" \" /><text value=\"annoyDog\" class=\"title\" /><text value=\"(\" /><text value=\"\" class=\"params\" /><text value=\") \" /><text value=\"{\" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;This cat doesn't like &quot;\" class=\"string\" /><text value=\" + dog.name + \" /><text value=\"&quot; the dog.&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\"}\" /><text type=\"break\" /><text value=\"var\" class=\"keyword\" /><text value=\" dog = {\" /><text type=\"break\" /><text value=\" \" /><text value=\"name\" class=\"attr\" /><text value=\": \" /><text value=\"&quot;Ryan&quot;\" class=\"string\" /><text value=\",\" /><text type=\"break\" /><text value=\" \" /><text value=\"eat\" class=\"attr\" /><text value=\": \" /><text value=\"&quot;dog food&quot;\" class=\"string\" /><text value=\",\" /><text type=\"break\" /><text value=\" \" /><text value=\"likes\" class=\"attr\" /><text value=\": [\" /><text value=\"&quot;ball&quot;\" class=\"string\" /><text value=\"]\" /><text type=\"break\" /><text value=\"};\" /><text type=\"break\" /><text value=\"annoyDog();\" /></content><output><content><text value=\"This cat doesn't like Ryan the dog.\" /></content></output></code><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\">Ámbito Global</item><item value=\"2\" correct=\"false\">Ámbito Local</item><item value=\"3\" correct=\"false\">Alcance de Bloque</item></selection><p visible-if=\"wrong\">Ámbito Global.</p></body></html>"
          },
          {
            "title": "Question 3",
            "id": 112343,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>¿El alcance de bloque es las partes del código entre qué símbolos?</p><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\"><code>{ }</code></item><item value=\"2\" correct=\"false\"><code>[ ]</code></item></selection><p visible-if=\"wrong\"><code>{ }</code>.</p></body></html>"
          },
          {
            "title": "Question 4",
            "id": 112344,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>¿Podemos acceder a una variable <code>var</code> declarada dentro de un ámbito de bloque desde fuera?</p><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\">Sí</item><item value=\"2\" correct=\"false\">No</item></selection><p visible-if=\"wrong\">Asegúrese de elegir Sí.</p></body></html>"
          },
          {
            "title": "Example 1",
            "id": 112300,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Aquí, <code>neighborhood</code> es una variable global, pero <code>BATH</code> es una local, entonces ¿qué mostrará la consola?</p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"let\" class=\"keyword\" /><text value=\" neighborhood = {\" /><text type=\"break\" /><text value=\" \" /><text value=\"apartments\" class=\"attr\" /><text value=\": \" /><text value=\"13\" class=\"number\" /><text value=\",\" /><text type=\"break\" /><text value=\" \" /><text value=\"garden\" class=\"attr\" /><text value=\": \" /><text value=\"1\" class=\"number\" /><text type=\"break\" /><text value=\"};\" /><text type=\"break\" /><text type=\"break\" /><text value=\"function\" class=\"keyword\" /><text value=\" \" /><text value=\"fixMyHouse\" class=\"title\" /><text value=\"(\" /><text value=\"\" class=\"params\" /><text value=\") \" /><text value=\"{\" /><text type=\"break\" /><text value=\" \" /><text value=\"const\" class=\"keyword\" /><text value=\" BATH = \" /><text value=\"&quot;Fix Mirror&quot;\" class=\"string\" /><text value=\";\" /><text type=\"break\" /><text value=\"}\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(BATH);\" /></content><output><content><text value=\"ReferenceError: BATH is not defined\" /></content></output></code><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\">un ReferenceError</item><item value=\"2\" correct=\"false\">\"Arreglar Espejo\"</item></selection><p visible-if=\"wrong\">un ReferenceError.</p></body></html>"
          },
          {
            "title": "Example 2",
            "id": 112345,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Crea una variable <code>const</code> de alcance global y una variable <code>let</code> de alcance de bloque.</p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" STUDY = \" /><text value=\"true\" class=\"literal\" /><text value=\";\" /><text type=\"break\" /><text value=\"if\" class=\"keyword\" /><text value=\" (STUDY) {\" /><text type=\"break\" /><text value=\" \" /><text value=\"let\" class=\"keyword\" /><text value=\" pass = \" /><text value=\"'You have passed the exam!'\" class=\"string\" /><text value=\";\" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(pass);\" /><text type=\"break\" /><text value=\"} \" /><text value=\"else\" class=\"keyword\" /><text value=\" {\" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;You have failed&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\"}\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"0\" endIndex=\"5\" /><option startIndex=\"34\" endIndex=\"37\" /></options></interaction></interactions><output><content><text value=\"You have passed the exam!\" /></content></output></code><p visible-if=\"wrong\">Asegúrese de elegir <code>const</code> seguido de <code>let</code>.</p></body></html>"
          },
          {
            "title": "Example 3",
            "id": 112340,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>¿Qué tipo de error mostrará la consola?</p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"for\" class=\"keyword\" /><text value=\" (\" /><text value=\"let\" class=\"keyword\" /><text value=\" index = \" /><text value=\"1\" class=\"number\" /><text value=\"; index &lt;= \" /><text value=\"3\" class=\"number\" /><text value=\"; index++) {\" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(index);\" /><text type=\"break\" /><text value=\"}\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(index);\" /></content><output><content><text value=\"ReferenceError: index is not defined\" /></content></output></code><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\">ReferenceError</item><item value=\"2\" correct=\"false\">Error de sintaxis</item></selection><p visible-if=\"wrong\">Asegúrese de elegir ReferenceError.</p></body></html>"
          },
          {
            "title": "Example 4",
            "id": 112346,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>¿Cuál es el alcance de la variable <code>availableBand</code>?</p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"function\" class=\"keyword\" /><text value=\" \" /><text value=\"playMusic\" class=\"title\" /><text value=\"(\" /><text value=\"\" class=\"params\" /><text value=\") \" /><text value=\"{\" /><text type=\"break\" /><text value=\" \" /><text value=\"const\" class=\"keyword\" /><text value=\" band = [\" /><text value=\"&quot;Tina&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;Michael&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;Rue&quot;\" class=\"string\" /><text value=\"];\" /><text type=\"break\" /><text value=\" \" /><text value=\"if\" class=\"keyword\" /><text value=\" (band &amp;&amp; band.length) {\" /><text type=\"break\" /><text value=\"  \" /><text value=\"const\" class=\"keyword\" /><text value=\" availableBand = \" /><text value=\"&quot;Band is Available!&quot;\" class=\"string\" /><text value=\";\" /><text type=\"break\" /><text value=\"  \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(availableBand);\" /><text type=\"break\" /><text value=\" }\" /><text type=\"break\" /><text value=\"}\" /><text type=\"break\" /><text value=\"playMusic();\" /></content><output><content><text value=\"Band is Available!\" /></content></output></code><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\">Alcance de Bloque</item><item value=\"3\" correct=\"false\">Ámbito Global</item></selection><p visible-if=\"wrong\">Alcance de Bloque.</p></body></html>"
          }
        ]
      }
    ]
  }
}