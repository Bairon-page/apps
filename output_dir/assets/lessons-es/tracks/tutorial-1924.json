{
  "tutorial": {
    "id": 1924,
    "version": 15,
    "type": "guidedProjectOptional",
    "isNew": false,
    "codeLanguage": "javascript",
    "title": "Pedidos de restaurante",
    "descriptionContent": "Usa tus conocimientos de Javascript para crear un programa que realice pedidos a restaurantes.",
    "shortDescriptionContent": "",
    "showInTrack": true,
    "iconBanner": "tutorial-1924-icon-banner.svg",
    "chapters": [
      {
        "id": 12511,
        "title": "Pedidos de restaurante",
        "type": "practiceLevel3",
        "lessons": [
          {
            "title": "Starter Code ",
            "id": 113174,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Usemos nuestro conocimiento de condicionales y bucles para crear funciones que realizarán acciones para un cliente que busca pedir comida de un restaurante.\n\nComencemos echando un vistazo a nuestro código inicial para entender hacia qué estaremos trabajando.\n\nHay tres listas de menús, cada una es una lista con representaciones de comidas disponibles en ella. Cada comida es un objeto que tiene `mealName`, `quantity` y `price` como propiedades.\n\nTambién tenemos tres funciones vacías `findMeal`, `selectMeal` y `createSummary`.\n\nUsando tu conocimiento de Javascript, definirás cada función para que puedan llevar a cabo sus respectivas tareas.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const italianFood = [{\n  mealName: \"Pasta Bolognese\",\n  quantity: 3,\n  price: 7\n}, {\n  mealName: \"Pepperoni pizza\",\n  quantity: 2,\n  price: 10\n}];\nconst thaiFood = [{\n  mealName: \"Pad Thai\",\n  quantity: 1,\n  price: 8\n}];\nconst indianFood = [{\n  mealName: \"Chapati\",\n  quantity: 8,\n  price: 7\n}, {\n  mealName: \"Chicken Massala\",\n  quantity: 5,\n  price: 9\n}, {\n  mealName: \"Tandoori Chicken\",\n  quantity: 5,\n  price: 9\n}];\n\nfunction findMeal(name, menu) {}\n\nfunction selectMeal(name, type) {}\n\nfunction createSummary(name, type, amount) {}",
                  "solvedContent": "const italianFood = [{\n  mealName: \"Pasta Bolognese\",\n  quantity: 3,\n  price: 7\n}, {\n  mealName: \"Pepperoni pizza\",\n  quantity: 2,\n  price: 10\n}];\nconst thaiFood = [{\n  mealName: \"Pad Thai\",\n  quantity: 1,\n  price: 8\n}];\nconst indianFood = [{\n  mealName: \"Chapati\",\n  quantity: 8,\n  price: 7\n}, {\n  mealName: \"Chicken Massala\",\n  quantity: 5,\n  price: 9\n}, {\n  mealName: \"Tandoori Chicken\",\n  quantity: 5,\n  price: 9\n}];\n\nfunction findMeal(name, menu) {}\n\nfunction selectMeal(name, type) {}\n\nfunction createSummary(name, type, amount) {}"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Define findMeal",
            "id": 113175,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Ahora que hemos revisado nuestro código inicial, comencemos creando una función `findMeal` que devuelva los detalles de una comida de un menú después de ingresar su nombre.\n\n1. Comienza creando un bucle `for` que itere a través del array `menu`, un parámetro en la función `findMeal`.\n2. En el cuerpo del bucle `for`, añade una condición que verifique si el `mealName` del elemento actual del `menu` es igual a la cadena `name`. Esto nos ayudará a comprobar si el `menu` seleccionado tiene una comida con ese `name`.\n3. Devuelve el elemento actual del menú si la condición es `true`. Eso significa que hemos encontrado ese plato en el menú.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const italianFood = [{\n  mealName: \"Pasta Bolognese\",\n  quantity: 3,\n  price: 7\n}, {\n  mealName: \"Pepperoni pizza\",\n  quantity: 2,\n  price: 10\n}];\nconst thaiFood = [{\n  mealName: \"Pad Thai\",\n  quantity: 1,\n  price: 8\n}];\nconst indianFood = [{\n  mealName: \"Chapati\",\n  quantity: 8,\n  price: 7\n}, {\n  mealName: \"Chicken Massala\",\n  quantity: 5,\n  price: 9\n}, {\n  mealName: \"Tandoori Chicken\",\n  quantity: 5,\n  price: 9\n}];\n\nfunction findMeal(name, menu) {}\n\nfunction selectMeal(name, type) {}\n\nfunction createSummary(name, type, amount) {}",
                  "solvedContent": "const italianFood = [{\n  mealName: \"Pasta Bolognese\",\n  quantity: 3,\n  price: 7\n}, {\n  mealName: \"Pepperoni pizza\",\n  quantity: 2,\n  price: 10\n}];\nconst thaiFood = [{\n  mealName: \"Pad Thai\",\n  quantity: 1,\n  price: 8\n}];\nconst indianFood = [{\n  mealName: \"Chapati\",\n  quantity: 8,\n  price: 7\n}, {\n  mealName: \"Chicken Massala\",\n  quantity: 5,\n  price: 9\n}, {\n  mealName: \"Tandoori Chicken\",\n  quantity: 5,\n  price: 9\n}];\n\nfunction findMeal(name, menu) {\n  for (let i = 0; i < menu.length; i++) {\n    if (menu[i].mealName === name) {\n      return menu[i];\n    }\n  }\n}\n\nfunction selectMeal(name, type) {}\n\nfunction createSummary(name, type, amount) {}"
                }
              ],
              "hints": [
                {
                  "title": "Hint",
                  "content": "1. Make sure the `for` loop looks like `for(let i = 0; i < menu.length; i++){}`\n2. Use an `if` statement inside the `for` loop. Use `menu[i].mealName` to access the `mealName` property of the current menu item.\n3. Use a `return` keyword."
                }
              ]
            }
          },
          {
            "title": "Define selectMeal pt 1",
            "id": 113176,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "¡Buen trabajo! Ahora comencemos a definir una función `selectMeal` que extraerá información de la comida basada en el `name` de la comida y su `type`.\n\n1. Añade una condicional donde si `type` es igual a `\"italian\"`, se devuelve `\"italian order\"`.\n2. Añade otra condicional donde si `type` es igual a `\"indian\"`, se devuelve `\"indian order\"`.\n3. Añade otra condicional donde si `type` es igual a `\"thai\"`, se devuelve `\"thai order\"`.\n4. Cuando todas las condicionales fallen, devuelve `\"not found\"`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const italianFood = [{\n  mealName: \"Pasta Bolognese\",\n  quantity: 3,\n  price: 7\n}, {\n  mealName: \"Pepperoni pizza\",\n  quantity: 2,\n  price: 10\n}];\nconst thaiFood = [{\n  mealName: \"Pad Thai\",\n  quantity: 1,\n  price: 8\n}];\nconst indianFood = [{\n  mealName: \"Chapati\",\n  quantity: 8,\n  price: 7\n}, {\n  mealName: \"Chicken Massala\",\n  quantity: 5,\n  price: 9\n}, {\n  mealName: \"Tandoori Chicken\",\n  quantity: 5,\n  price: 9\n}];\n\nfunction findMeal(name, menu) {\n  for (let i = 0; i < menu.length; i++) {\n    if (menu[i].mealName === name) {\n      return menu[i];\n    }\n  }\n}\n\nfunction selectMeal(name, type) {}\n\nfunction createSummary(name, type, amount) {}",
                  "solvedContent": "const italianFood = [{\n  mealName: \"Pasta Bolognese\",\n  quantity: 3,\n  price: 7\n}, {\n  mealName: \"Pepperoni pizza\",\n  quantity: 2,\n  price: 10\n}];\nconst thaiFood = [{\n  mealName: \"Pad Thai\",\n  quantity: 1,\n  price: 8\n}];\nconst indianFood = [{\n  mealName: \"Chapati\",\n  quantity: 8,\n  price: 7\n}, {\n  mealName: \"Chicken Massala\",\n  quantity: 5,\n  price: 9\n}, {\n  mealName: \"Tandoori Chicken\",\n  quantity: 5,\n  price: 9\n}];\n\nfunction findMeal(name, menu) {\n  for (let i = 0; i < menu.length; i++) {\n    if (menu[i].mealName === name) {\n      return menu[i];\n    }\n  }\n}\n\nfunction selectMeal(name, type) {\n  if (type === 'italian') {\n    return \"italian order\";\n  } else if (type === 'indian') {\n    return \"indian order\";\n  } else if (type === 'thai') {\n    return \"thai order\";\n  } else {\n    return \"not found\";\n  }\n}\n\nfunction createSummary(name, type, amount) {}"
                }
              ],
              "hints": [
                {
                  "title": "Hint",
                  "content": "Use `if`, `else if` and `else` statements."
                }
              ]
            }
          },
          {
            "title": "Define selectMeal pt 2",
            "id": 113177,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "¡Bien hecho! Mejoremos nuestra función `selectMeal` para que devuelva una comida antes de pasar a nuestra última función.\n\nDado que nuestra función `findMeal()` está diseñada para devolver una comida específica dado un `menu` y el `name` de la comida, podemos llamarla dentro de `selectMeal()` para ayudarnos a encontrar la comida solicitada.\n\n1. Reemplaza `\"italian order\"` con una llamada a la función `findMeal`, dándole `name` y `italianFood` como argumentos.\n2. Reemplaza `\"indian order\"` con una llamada a la función `findMeal`, dándole `name` y `indianFood` como argumentos.\n3. Reemplaza `\"thai order\"` con una llamada a la función `findMeal`, dándole `name` y `thaiFood` como argumentos.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const italianFood = [{\n  mealName: \"Pasta Bolognese\",\n  quantity: 3,\n  price: 7\n}, {\n  mealName: \"Pepperoni pizza\",\n  quantity: 2,\n  price: 10\n}];\nconst thaiFood = [{\n  mealName: \"Pad Thai\",\n  quantity: 1,\n  price: 8\n}];\nconst indianFood = [{\n  mealName: \"Chapati\",\n  quantity: 8,\n  price: 7\n}, {\n  mealName: \"Chicken Massala\",\n  quantity: 5,\n  price: 9\n}, {\n  mealName: \"Tandoori Chicken\",\n  quantity: 5,\n  price: 9\n}];\n\nfunction findMeal(name, menu) {\n  for (let i = 0; i < menu.length; i++) {\n    if (menu[i].mealName === name) {\n      return menu[i];\n    }\n  }\n}\n\nfunction selectMeal(name, type) {\n  if (type === 'italian') {\n    return \"italian order\";\n  } else if (type === 'indian') {\n    return \"indian order\";\n  } else if (type === 'thai') {\n    return \"thai order\";\n  } else {\n    return \"not found\";\n  }\n}\n\nfunction createSummary(name, type, amount) {}",
                  "solvedContent": "const italianFood = [{\n  mealName: \"Pasta Bolognese\",\n  quantity: 3,\n  price: 7\n}, {\n  mealName: \"Pepperoni pizza\",\n  quantity: 2,\n  price: 10\n}];\nconst thaiFood = [{\n  mealName: \"Pad Thai\",\n  quantity: 1,\n  price: 8\n}];\nconst indianFood = [{\n  mealName: \"Chapati\",\n  quantity: 8,\n  price: 7\n}, {\n  mealName: \"Chicken Massala\",\n  quantity: 5,\n  price: 9\n}, {\n  mealName: \"Tandoori Chicken\",\n  quantity: 5,\n  price: 9\n}];\n\nfunction findMeal(name, menu) {\n  for (let i = 0; i < menu.length; i++) {\n    if (menu[i].mealName === name) {\n      return menu[i];\n    }\n  }\n}\n\nfunction selectMeal(name, type) {\n  if (type === 'italian') {\n    return findMeal(name, italianFood);\n  } else if (type === 'indian') {\n    return findMeal(name, indianFood);\n  } else if (type === 'thai') {\n    return findMeal(name, thaiFood);\n  } else {\n    return \"not found\";\n  }\n}\n\nfunction createSummary(name, type, amount) {}"
                }
              ],
              "hints": [
                {
                  "title": "Hint",
                  "content": "Use `return findMeal()` with the arguments mentioned above."
                }
              ]
            }
          },
          {
            "title": "Define createSummary pt 1",
            "id": 113178,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "¡Muy bien! Comencemos a trabajar en la función `createSummary` para que podamos proporcionar al cliente un resumen de su pedido realizado.\n\n1. Añade una variable `order` y asígnale el resultado de la llamada a la función `selectMeal()`.\n2. Añade `name` y `type` como parámetros a la llamada de la función `selectMeal()`. Esto pasa los argumentos `name` y `type` de `createSummary()` a `selectMeal()`.\n3. Muestra la propiedad `mealName` de la variable `order`.  \n4. Verifica qué hace actualmente tu función `createSummary()` llamándola con `\"Pasta Bolognese\"`, `\"italian\"` y `3` como argumentos.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const italianFood = [{\n  mealName: \"Pasta Bolognese\",\n  quantity: 3,\n  price: 7\n}, {\n  mealName: \"Pepperoni pizza\",\n  quantity: 2,\n  price: 10\n}];\nconst thaiFood = [{\n  mealName: \"Pad Thai\",\n  quantity: 1,\n  price: 8\n}];\nconst indianFood = [{\n  mealName: \"Chapati\",\n  quantity: 8,\n  price: 7\n}, {\n  mealName: \"Chicken Massala\",\n  quantity: 5,\n  price: 9\n}, {\n  mealName: \"Tandoori Chicken\",\n  quantity: 5,\n  price: 9\n}];\n\nfunction findMeal(name, menu) {\n  for (let i = 0; i < menu.length; i++) {\n    if (menu[i].mealName === name) {\n      return menu[i];\n    }\n  }\n}\n\nfunction selectMeal(name, type) {\n  if (type === 'italian') {\n    return findMeal(name, italianFood);\n  } else if (type === 'indian') {\n    return findMeal(name, indianFood);\n  } else if (type === 'thai') {\n    return findMeal(name, thaiFood);\n  } else {\n    return \"not found\";\n  }\n}\n\nfunction createSummary(name, type, amount) {}",
                  "solvedContent": "const italianFood = [{\n  mealName: \"Pasta Bolognese\",\n  quantity: 3,\n  price: 7\n}, {\n  mealName: \"Pepperoni pizza\",\n  quantity: 2,\n  price: 10\n}];\nconst thaiFood = [{\n  mealName: \"Pad Thai\",\n  quantity: 1,\n  price: 8\n}];\nconst indianFood = [{\n  mealName: \"Chapati\",\n  quantity: 8,\n  price: 7\n}, {\n  mealName: \"Chicken Massala\",\n  quantity: 5,\n  price: 9\n}, {\n  mealName: \"Tandoori Chicken\",\n  quantity: 5,\n  price: 9\n}];\n\nfunction findMeal(name, menu) {\n  for (let i = 0; i < menu.length; i++) {\n    if (menu[i].mealName === name) {\n      return menu[i];\n    }\n  }\n}\n\nfunction selectMeal(name, type) {\n  if (type === 'italian') {\n    return findMeal(name, italianFood);\n  } else if (type === 'indian') {\n    return findMeal(name, indianFood);\n  } else if (type === 'thai') {\n    return findMeal(name, thaiFood);\n  } else {\n    return \"not found\";\n  }\n}\n\nfunction createSummary(name, type, amount) {\n  const order = selectMeal(name, type);\n  console.log(order.mealName);\n}\ncreateSummary('Pasta Bolognese', 'italian', 3);"
                }
              ],
              "hints": [
                {
                  "title": "Hint",
                  "content": "The function call for `createSummary()` should be placed after the code block where it is defined."
                }
              ]
            }
          },
          {
            "title": "Define createSummary pt 2",
            "id": 113179,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "¡Buen trabajo! Continuemos definiendo `createSummary`\n\n1. Añade una variable `orderPossible`, asígnale una expresión lógica para verificar si nuestra variable `order` no es igual a `\"not found\"`.\n2. Usa `&&` para encadenar una condición a `orderPossible` para verificar si `amount` es menor o igual a la propiedad `quantity` de `order`.\n3. Añade una variable `errorMessage` y asígnale `\"Something went wrong, please try again later'\"`.\n4. Muestra el valor de la variable `orderPossible`.  \n5. Muestra el valor de la variable `errorMessage`.  ",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const italianFood = [{\n  mealName: \"Pasta Bolognese\",\n  quantity: 3,\n  price: 7\n}, {\n  mealName: \"Pepperoni pizza\",\n  quantity: 2,\n  price: 10\n}];\nconst thaiFood = [{\n  mealName: \"Pad Thai\",\n  quantity: 1,\n  price: 8\n}];\nconst indianFood = [{\n  mealName: \"Chapati\",\n  quantity: 8,\n  price: 7\n}, {\n  mealName: \"Chicken Massala\",\n  quantity: 5,\n  price: 9\n}, {\n  mealName: \"Tandoori Chicken\",\n  quantity: 5,\n  price: 9\n}];\n\nfunction findMeal(name, menu) {\n  for (let i = 0; i < menu.length; i++) {\n    if (menu[i].mealName === name) {\n      return menu[i];\n    }\n  }\n}\n\nfunction selectMeal(name, type) {\n  if (type === 'italian') {\n    return findMeal(name, italianFood);\n  } else if (type === 'indian') {\n    return findMeal(name, indianFood);\n  } else if (type === 'thai') {\n    return findMeal(name, thaiFood);\n  } else {\n    return \"not found\";\n  }\n}\n\nfunction createSummary(name, type, amount) {\n  const order = selectMeal(name, type);\n  console.log(order.mealName);\n}\ncreateSummary('Pasta Bolognese', 'italian', 3);",
                  "solvedContent": "const italianFood = [{\n  mealName: \"Pasta Bolognese\",\n  quantity: 3,\n  price: 7\n}, {\n  mealName: \"Pepperoni pizza\",\n  quantity: 2,\n  price: 10\n}];\nconst thaiFood = [{\n  mealName: \"Pad Thai\",\n  quantity: 1,\n  price: 8\n}];\nconst indianFood = [{\n  mealName: \"Chapati\",\n  quantity: 8,\n  price: 7\n}, {\n  mealName: \"Chicken Massala\",\n  quantity: 5,\n  price: 9\n}, {\n  mealName: \"Tandoori Chicken\",\n  quantity: 5,\n  price: 9\n}];\n\nfunction findMeal(name, menu) {\n  for (let i = 0; i < menu.length; i++) {\n    if (menu[i].mealName === name) {\n      return menu[i];\n    }\n  }\n}\n\nfunction selectMeal(name, type) {\n  if (type === 'italian') {\n    return findMeal(name, italianFood);\n  } else if (type === 'indian') {\n    return findMeal(name, indianFood);\n  } else if (type === 'thai') {\n    return findMeal(name, thaiFood);\n  } else {\n    return \"not found\";\n  }\n}\n\nfunction createSummary(name, type, amount) {\n  const order = selectMeal(name, type);\n  console.log(order.mealName);\n  const orderPossible = order !== 'not found' && amount <= order.quantity;\n  const errorMessage = 'Something went wrong, please try again later';\n  console.log(orderPossible);\n  console.log(errorMessage);\n}\ncreateSummary('Pasta Bolognese', 'italian', 3);"
                }
              ],
              "hints": [
                {
                  "title": "Hint",
                  "content": "1. You must define two logical expressions and chain them `condition1 && condition 2`. \n2. Use comparators such as `<=` `===` or` !==`to define each expression."
                }
              ]
            }
          },
          {
            "title": "Define createSummary pt3",
            "id": 113180,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "En este paso, terminaremos de construir la función `createSummary` añadiendo primero una condicional para asegurarnos de que la comida ingresada fue encontrada. Luego, mostraremos un resumen del pedido.\n\n1. Como ya no son necesarios, puedes eliminar todas las declaraciones de consola.\n2. Añade una declaración condicional para verificar si `orderPossible` es `true`.\n3. En el cuerpo de la condicional, añade una variable `total` y asígnale el producto del argumento `amount` con la propiedad `price` del objeto `order`.\n4. Tu condición debe devolver una cadena que le diga al cliente el número de comidas pedidas, qué comida han pedido y cuánto cuesta. Debes usar `amount`, `name` y `total` en la cadena.\n5. Devuelve `errorMessage` si `orderPossible` es `false`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const italianFood = [{\n  mealName: \"Pasta Bolognese\",\n  quantity: 3,\n  price: 7\n}, {\n  mealName: \"Pepperoni pizza\",\n  quantity: 2,\n  price: 10\n}];\nconst thaiFood = [{\n  mealName: \"Pad Thai\",\n  quantity: 1,\n  price: 8\n}];\nconst indianFood = [{\n  mealName: \"Chapati\",\n  quantity: 8,\n  price: 7\n}, {\n  mealName: \"Chicken Massala\",\n  quantity: 5,\n  price: 9\n}, {\n  mealName: \"Tandoori Chicken\",\n  quantity: 5,\n  price: 9\n}];\n\nfunction findMeal(name, menu) {\n  for (let i = 0; i < menu.length; i++) {\n    if (menu[i].mealName === name) {\n      return menu[i];\n    }\n  }\n}\n\nfunction selectMeal(name, type) {\n  if (type === 'italian') {\n    return findMeal(name, italianFood);\n  } else if (type === 'indian') {\n    return findMeal(name, indianFood);\n  } else if (type === 'thai') {\n    return findMeal(name, thaiFood);\n  } else {\n    return \"not found\";\n  }\n}\n\nfunction createSummary(name, type, amount) {\n  const order = selectMeal(name, type);\n  console.log(order.mealName);\n  const orderPossible = order !== 'not found' && amount <= order.quantity;\n  const errorMessage = 'Something went wrong, please try again later';\n  console.log(orderPossible);\n  console.log(errorMessage);\n}\ncreateSummary('Pasta Bolognese', 'italian', 3);",
                  "solvedContent": "const italianFood = [{\n  mealName: \"Pasta Bolognese\",\n  quantity: 3,\n  price: 7\n}, {\n  mealName: \"Pepperoni pizza\",\n  quantity: 2,\n  price: 10\n}];\nconst thaiFood = [{\n  mealName: \"Pad Thai\",\n  quantity: 1,\n  price: 8\n}];\nconst indianFood = [{\n  mealName: \"Chapati\",\n  quantity: 8,\n  price: 7\n}, {\n  mealName: \"Chicken Massala\",\n  quantity: 5,\n  price: 9\n}, {\n  mealName: \"Tandoori Chicken\",\n  quantity: 5,\n  price: 9\n}];\n\nfunction findMeal(name, menu) {\n  for (let i = 0; i < menu.length; i++) {\n    if (menu[i].mealName === name) {\n      return menu[i];\n    }\n  }\n}\n\nfunction selectMeal(name, type) {\n  if (type === 'italian') {\n    return findMeal(name, italianFood);\n  } else if (type === 'indian') {\n    return findMeal(name, indianFood);\n  } else if (type === 'thai') {\n    return findMeal(name, thaiFood);\n  } else {\n    return \"not found\";\n  }\n}\n\nfunction createSummary(name, type, amount) {\n  const order = selectMeal(name, type);\n  const orderPossible = order !== 'not found' && amount <= order.quantity;\n  const errorMessage = 'Something went wrong, please try again later';\n  if (orderPossible) {\n    const total = amount * order.price;\n    return \"You ordered \" + amount + \" \" + name + \" for a total of \" + total +\n      \" euros\";\n  } else {\n    return errorMessage;\n  }\n}"
                }
              ],
              "hints": [
                {
                  "title": "Hint",
                  "content": "1. Use `object.propertyName `syntax to access a property value of an object.\n2. Make sure and include the `amount`, `name`, and `total` arguments from the `createSummary()` function in the return string."
                }
              ]
            }
          }
        ]
      }
    ]
  }
}