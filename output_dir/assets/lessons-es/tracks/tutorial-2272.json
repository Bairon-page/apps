{
  "tutorial": {
    "id": 2272,
    "version": 1,
    "type": "practiceOptional",
    "isNew": false,
    "codeLanguage": "javascript",
    "title": "Sincronía y asincronía en JS",
    "descriptionContent": "Sincronía y asincronía en JS",
    "shortDescriptionContent": "",
    "showInTrack": true,
    "iconBanner": null,
    "chapters": [
      {
        "id": 13429,
        "title": "Sincronía y asincronía en JS",
        "type": "practiceLevel3",
        "lessons": [
          {
            "title": "Code 1/.filter()",
            "id": 120809,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Completa `divisibleByThree` usando el método `.filter(callback)` en el array `arr`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const arr = [3, 5, 6, 8, 9, 11, 12, 14, 15];\nconst callback = (num) => num % 3 === 0;\nlet divisibleByThree = null;\n\nfunction doMath() {\n divisibleByThree =    (callback);\n return divisibleByThree;\n}\ndoMath();\nconsole.log(divisibleByThree);\nconsole.log(\"These numbers are divisible by 3\");",
                  "solvedContent": "const arr = [3, 5, 6, 8, 9, 11, 12, 14, 15];\nconst callback = (num) => num % 3 === 0;\nlet divisibleByThree = null;\n\nfunction doMath() {\n divisibleByThree = arr.filter(callback);\n return divisibleByThree;\n}\ndoMath();\nconsole.log(divisibleByThree);\nconsole.log(\"These numbers are divisible by 3\");"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Code 2/.map()",
            "id": 120810,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Termina la sintaxis reasignando el valor de `newArray`. Usa el método `.map()` en el array `arr`. Usa `tripleTheNum` como la función de callback de `.map()`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const arr = [1, 2, 3, 4, 5];\nconst tripleTheNum = (num) => num * 3;\nlet newArray = null;\nfunction doMath() {\n newArray = ();\n return newArray;\n}\ndoMath();\nconsole.log(newArray);\nconsole.log(\"The values in the array have been tripled\");",
                  "solvedContent": "const arr = [1, 2, 3, 4, 5];\nconst tripleTheNum = (num) => num * 3;\nlet newArray = null;\nfunction doMath() {\n newArray = arr.map(tripleTheNum);\n return newArray;\n}\ndoMath();\nconsole.log(newArray);\nconsole.log(\"The values in the array have been tripled\");"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Code 3/Callback",
            "id": 120814,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Pasa el nombre `\"Rachel\"` como un parámetro de `sayHello` y usa la función callback `sayGoodbye()` para el parámetro `callback`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "function sayHello(name, callback) {\n console.log(`Hello, ${name}!`);\n callback();\n}\n\nfunction sayGoodbye() {\n console.log(\"Goodbye!\");\n}\nsayHello();",
                  "solvedContent": "function sayHello(name, callback) {\n console.log(`Hello, ${name}!`);\n callback();\n}\n\nfunction sayGoodbye() {\n console.log(\"Goodbye!\");\n}\nsayHello(\"Rachel\", sayGoodbye);"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Code 4/Asynchronous Callback",
            "id": 120812,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "El método `setTimeout()` es asíncrono. Completa los registros de la consola con las cadenas `first` y `last` para que la salida aparezca en el orden correcto. La salida debería aparecer de la siguiente manera:\n\n```\nExecuted first\nExecuted last\n```",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "function callbackFunc() {\n console.log(\"Executed \");\n}\nsetTimeout(callbackFunc, 1500);\nconsole.log(\"Executed \");",
                  "solvedContent": "function callbackFunc() {\n console.log(\"Executed last\");\n}\nsetTimeout(callbackFunc, 1500);\nconsole.log(\"Executed first\");"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Code 5/Custom Callback",
            "id": 120813,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Invoca `doSomeMath`. Usa cualquier número entero positivo entre `1` y `1000` para el primer argumento. Usa `multiplyCallback()` para el segundo argumento.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "function multiplyCallback(num) {\n const result = num * 5;\n console.log(\n  `The custom callback function gives ${result} as the result.`);\n}\n\nfunction doSomeMath(input, callback) {\n console.log(\"We're multiplying the input by 5.\");\n callback(input);\n}\n",
                  "solvedContent": "function multiplyCallback(num) {\n const result = num * 5;\n console.log(\n  `The custom callback function gives ${result} as the result.`);\n}\n\nfunction doSomeMath(input, callback) {\n console.log(\"We're multiplying the input by 5.\");\n callback(input);\n}\ndoSomeMath(2, multiplyCallback);"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Code 6/ES6 Callback",
            "id": 120811,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Reescribe la función de callback `sayHello` personalizada usando la sintaxis de función flecha de ES6. No cambies el nombre o el orden de los parámetros ni los console logs.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "function sayHello(name, callback) {\n console.log(`Hello, ${name}!`);\n callback();\n}\nconst sayGoodbye = () => console.log(\"Goodbye!\");\nsayHello(\"Sam\", sayGoodbye);",
                  "solvedContent": "const sayHello = (name, callback) => {\n console.log(`Hello, ${name}!`);\n callback();\n};\nconst sayGoodbye = () => console.log(\"Goodbye!\");\nsayHello(\"Sam\", sayGoodbye);"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Code 7/Aynchronous Callback 2",
            "id": 120815,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Usa el `reverseCallback` como el primer argumento para el método asincrónico `setTimeout()`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const word = \"enola\";\n\nfunction reverseCallback() {\n const result = word.split(\"\").reverse().join(\"\");\n console.log(`The string reversed is: \"${result}\"`);\n console.log(\"Executed last because we're using asynchronous code.\");\n}\nsetTimeout( , 1500);\nconsole.log('Executed first');",
                  "solvedContent": "const word = \"enola\";\n\nfunction reverseCallback() {\n const result = word.split(\"\").reverse().join(\"\");\n console.log(`The string reversed is: \"${result}\"`);\n console.log(\"Executed last because we're using asynchronous code.\");\n}\nsetTimeout(reverseCallback, 1500);\nconsole.log('Executed first');"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 13430,
        "title": "Timeout y Intervalos en JS",
        "type": "practiceLevel3",
        "lessons": [
          {
            "title": "Code 1",
            "id": 120826,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Agrega la sintaxis para pedir postre con un retraso de `1000` milisegundos.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "(() => {\n console.log(\"Dessert\");\n}, );\nconsole.log(\"Starters\");",
                  "solvedContent": "setTimeout(() => {\n console.log(\"Dessert\");\n}, 1000);\nconsole.log(\"Starters\");"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Code 2",
            "id": 120827,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Invoca `setTimeout()` con el `callbackFunc` y un retraso de `500` milisegundos.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const callbackFunc = () => {\n console.log(\"I am the callback\");\n };\n\n ",
                  "solvedContent": "const callbackFunc = () => {\n console.log(\"I am the callback\");\n };\nsetTimeout(callbackFunc, 500);"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Code 3",
            "id": 120828,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Invoca `setTimeout()` con la función de callback y el parámetro `delay` por defecto",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "function callback() {\n console.log(\"The callback was executed as soon as possible\");\n}\nsetTimeout();",
                  "solvedContent": "function callback() {\n console.log(\"The callback was executed as soon as possible\");\n}\nsetTimeout(callback, 0);"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Code 4",
            "id": 120829,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Invoca `setInterval()` con la función `callback` y un intervalo de `300` milisegundos. Guarda el valor de retorno en la variable `intervalID`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const callback = () => console.log(\"Flash\");\nconst intervalID = ;\nsetTimeout(() => {\n clearInterval(intervalID);\n console.log(\"Stopped the paparazzi\");\n}, 1500);",
                  "solvedContent": "const callback = () => console.log(\"Flash\");\nconst intervalID = setInterval(callback, 300);\nsetTimeout(() => {\n clearInterval(intervalID);\n console.log(\"Stopped the paparazzi\");\n}, 1500);"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Code 5",
            "id": 120831,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Tus amigos te están enviando mensajes de texto con demasiada frecuencia, vamos a detener las notificaciones del chat grupal. En `setTimeout()` usa `clearInterval()` para detener que `setInterval()` ejecute su callback. Dale `intervalID` como argumento.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "function callback() {\n console.log(\"New Message\");\n}\nconst intervalID = setInterval(callback, 500);\nsetTimeout(() => {\n  ();\n   console.log(\"Muted chat\");\n}, 1500);",
                  "solvedContent": "function callback() {\n console.log(\"New Message\");\n}\nconst intervalID = setInterval(callback, 500);\nsetTimeout(() => {\n clearInterval(intervalID);\n console.log(\"Muted chat\");\n}, 1500);"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Code 6",
            "id": 120832,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Después de 2 apuestas, el `clearInterval` detendrá las opciones de apuesta en un sitio web de apuestas. En el cuerpo de la función `start()`, reasigna `intervalID` al valor de retorno de `setInterval()`. Usa la función `makeBet` y `500` milisegundos como argumentos.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "let count = 0;\nlet intervalID = null;\n\nfunction makeBet() {\n if (count < 2) {\n  count++;\n  console.log(\"New Bet\");\n } else {\n  clearInterval(intervalID);\n  console.log(\"The interval was cleared after 2 bets\");\n }\n}\n\nfunction start() {\n\n \n}\nstart();",
                  "solvedContent": "let count = 0;\nlet intervalID = null;\n\nfunction makeBet() {\n if (count < 2) {\n  count++;\n  console.log(\"New Bet\");\n } else {\n  clearInterval(intervalID);\n  console.log(\"The interval was cleared after 2 bets\");\n }\n}\n\nfunction start() {\n intervalID = setInterval(makeBet, 500);\n}\nstart();"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Code 7",
            "id": 120830,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "En una subasta, el sistema verifica las ofertas de los usuarios cada `400` milisegundos. Guarda el valor de retorno del método `setInterval()` en una variable `const` llamada `intervalID` para que podamos usarla en el método `clearInterval`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const checkOffer = () => console.log(\"New Offer\");\n setInterval(checkOffer, 400);\nsetTimeout(() => {\n clearInterval(intervalID);\n console.log(\"Stop offers after 1300 ms.\");\n}, 1300);",
                  "solvedContent": "const checkOffer = () => console.log(\"New Offer\");\nconst intervalID = setInterval(checkOffer, 400);\nsetTimeout(() => {\n clearInterval(intervalID);\n console.log(\"Stop offers after 1300 ms.\");\n}, 1300);"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Code 8",
            "id": 120833,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Una aplicación de seguimiento de vida silvestre verifica las ubicaciones de los animales para asegurarse de que estén seguros en sus lugares designados dos veces al día. En la función personalizada `checkLocation()`, termina `setInterval()` dentro de la declaración `else`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "let count = 0;\nlet intervalID = null;\n\nfunction checkLocation() {\n if (count < 2) {\n  count++;\n  console.log(\"Track Lions\");\n } else {\n   ();\n  console.log(\"Turn off tracking\");\n }\n}\n\nfunction start() {\n intervalID = setInterval(checkLocation, 500);\n}\nstart();",
                  "solvedContent": "let count = 0;\nlet intervalID = null;\n\nfunction checkLocation() {\n if (count < 2) {\n  count++;\n  console.log(\"Track Lions\");\n } else {\n  clearInterval(intervalID);\n  console.log(\"Turn off tracking\");\n }\n}\n\nfunction start() {\n intervalID = setInterval(checkLocation, 500);\n}\nstart();"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 13425,
        "title": "Esperando en JS",
        "type": "practiceLevel3",
        "lessons": [
          {
            "title": "Code: Creating a Promise Object",
            "id": 120741,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Crea una promesa vacía usando el método constructor `Promise`. Asígnala a la variable `promise`. Finalmente, pasa una función vacía al método constructor que tenga dos parámetros `resolve` y `reject`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "let promise",
                  "solvedContent": "let promise = new Promise(function(resolve, reject) {});"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Code: Burger Sandwich",
            "id": 120742,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Verifica si el `burgerSandwich` tiene cebolla. Si es `true`, cámbialo a `false`. Luego, resuelve el nuevo valor de cebolla dentro de la condición `if`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const burgerSandwich = {\n pattySource: 'chicken',\n tomato: true,\n lettuce: true,\n onion: true,\n cheese: true\n};\n\nfunction customizeOrder() {\n return new Promise(function(resolve) {\n\n  \n });\n}\ncustomizeOrder();",
                  "solvedContent": "const burgerSandwich = {\n pattySource: 'chicken',\n tomato: true,\n lettuce: true,\n onion: true,\n cheese: true\n};\n\nfunction customizeOrder() {\n return new Promise(function(resolve) {\n  if (burgerSandwich.onion) {\n   burgerSandwich.onion = false;\n   resolve(burgerSandwich.onion);\n  }\n });\n}\ncustomizeOrder();"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Code: The \"A\" Gift",
            "id": 120757,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Escribe un código para verificar si la calificación es `A` y resuelve con un mensaje de tu elección. Si la calificación es diferente de `A`, rechaza con un mensaje diferente al mensaje de resolución.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const grade = 'A';\n\nfunction giftBuyDecision() {\n return new Promise(function(resolve, reject) {\n    \n });\n}\ngiftBuyDecision();",
                  "solvedContent": "const grade = 'A';\n\nfunction giftBuyDecision() {\n return new Promise(function(resolve, reject) {\n  if (grade === 'A') {\n   resolve(\"Excellent work...\");\n  } else {\n   reject(\"Maybe next semester...\");\n  }\n });\n}\ngiftBuyDecision();"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Code: Find the Intruder Data Type",
            "id": 120758,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Completa el `.then` para imprimir el mensaje resuelto y después de eso, completa el método `.catch` para imprimir el mensaje rechazado.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const data = ['Hello', 'foo', 'bar', 7, 'smith'];\nconst intruder = data.find((i) => typeof i !== 'string');\n\nfunction checkIfIntruderFound() {\n return new Promise(function(resolve, reject) {\n  if (intruder) {\n   resolve(`Intruder has been found. It is item ${intruder}`);\n  } else {\n   reject(\"Intruder not found..\");\n  }\n });\n}\n\nfunction callOutTheIntruder() {\n checkIfIntruderFound(\n  .then(function() {\n  console.log(result);\n }).catch(function() {\n  consle.log(error);\n });\n}\ncallOutTheIntruder();",
                  "solvedContent": "const data = ['Hello', 'foo', 'bar', 7, 'smith'];\nconst intruder = data.find((i) => typeof i !== 'string');\n\nfunction checkIfIntruderFound() {\n return new Promise(function(resolve, reject) {\n  if (intruder) {\n   resolve(`Intruder has been found. It is item ${intruder}`);\n  } else {\n   reject(\"Intruder not found..\");\n  }\n });\n}\n\nfunction callOutTheIntruder() {\n checkIfIntruderFound()\n   .then(function(result) {\n  console.log(result);\n }).catch(function(error) {\n  consle.log(error);\n });\n}\ncallOutTheIntruder();"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Code: Wash the Dishes",
            "id": 120759,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Encadena la función `putDishesAway` con la función de visualización usando el método `.then`. Después de eso, añade `.catch` a la cadena.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "let cleanDishes = [false, false];\nlet allClean = false;\n\nfunction loadDishwasher() {\n return new Promise(function(resolve) {\n  for (let i = 0; i < cleanDishes.length; i++) {\n   if (!cleanDishes[i]) {\n    cleanDishes[i] = true;\n   }\n  }\n  setTimeout(function() {\n   allClean = true;\n   console.log(\n    `All ${cleanDishes.length} dishes are now clean...`);\n   resolve(allClean);\n  }, 1000);\n });\n}\n\nfunction putDishesAway(areAllDishesClean) {\n return new Promise(function(resolve, reject) {\n  if (areAllDishesClean) {\n   setTimeout(function() {\n    resolve(\"No more dishes to wash.\");\n   }, 1000);\n  } else {\n   setTimeout(function() {\n    reject(\"Some dishes are not clean yet.\");\n   }, 1000);\n  }\n });\n}\n\nfunction startDishWashingProcess() {\n return loadDishwasher()\n .then(function(allDishesClean) {\n  return putDishesAway(allDishesClean)\n  .(function(result) {\n   console.log(result);\n  }).(function(error) {\n   console.log(error);\n  });\n });\n}\nstartDishWashingProcess();",
                  "solvedContent": "let cleanDishes = [false, false];\nlet allClean = false;\n\nfunction loadDishwasher() {\n return new Promise(function(resolve) {\n  for (let i = 0; i < cleanDishes.length; i++) {\n   if (!cleanDishes[i]) {\n    cleanDishes[i] = true;\n   }\n  }\n  setTimeout(function() {\n   allClean = true;\n   console.log(\n    `All ${cleanDishes.length} dishes are now clean...`);\n   resolve(allClean);\n  }, 1000);\n });\n}\n\nfunction putDishesAway(areAllDishesClean) {\n return new Promise(function(resolve, reject) {\n  if (areAllDishesClean) {\n   setTimeout(function() {\n    resolve(\"No more dishes to wash.\");\n   }, 1000);\n  } else {\n   setTimeout(function() {\n    reject(\"Some dishes are not clean yet.\");\n   }, 1000);\n  }\n });\n}\n\nfunction startDishWashingProcess() {\n return loadDishwasher()\n .then(function(allDishesClean) {\n  return putDishesAway(allDishesClean)\n  .then(function(result) {\n   console.log(result);\n  }).catch(function(error) {\n   console.log(error);\n  });\n });\n}\nstartDishWashingProcess();"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Code: An async function",
            "id": 120772,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Haz que la función `prepareDinner` sea asíncrona.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "function prepareDinner() {\n setTimeout(function() {\n  console.log(\"Dinner is prepared...\");\n }, 1000);\n}\nprepareDinner();",
                  "solvedContent": "async function prepareDinner() {\n setTimeout(function() {\n  console.log(\"Dinner is prepared...\");\n }, 1000);\n}\nprepareDinner();"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Code: Wait for the bus",
            "id": 120773,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Convierte la función `boardTheBus` en una función async. Luego, usa `await` para hacer que la variable `message` espere hasta que `waitForBusArrival` se resuelva.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const randomWaitTime = Math.floor(Math.random() * 1000);\nlet waitForBusArrival = new Promise((resolve, reject) => {\n setTimeout(() => resolve(\n  \"The bus has finally arrived! Now boarding..\"), randomWaitTime);\n});\n\nfunction boardTheBus() {\n let message;\n console.log(message);\n}\nboardTheBus();",
                  "solvedContent": "const randomWaitTime = Math.floor(Math.random() * 1000);\nlet waitForBusArrival = new Promise((resolve, reject) => {\n setTimeout(() => resolve(\n  \"The bus has finally arrived! Now boarding..\"), randomWaitTime);\n});\nasync function boardTheBus() {\n let message = await waitForBusArrival;\n console.log(message);\n}\nboardTheBus();"
                }
              ],
              "hints": []
            }
          }
        ]
      }
    ]
  }
}