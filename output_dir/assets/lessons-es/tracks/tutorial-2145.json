{
  "tutorial": {
    "id": 2145,
    "version": 4,
    "type": "course",
    "isNew": false,
    "codeLanguage": "javascript",
    "title": "Sincronía y asincronía en JS",
    "descriptionContent": "Introducción a JavaScript asíncrono. Explora Callbacks asíncronos y síncronos.",
    "shortDescriptionContent": "",
    "showInTrack": true,
    "iconBanner": null,
    "chapters": [
      {
        "id": 13415,
        "title": "JavaScript sincrónico y asincrónico",
        "type": "practiceLevel1",
        "lessons": [
          {
            "title": "Intro",
            "id": 120557,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p><em>Synchrony</em> es un término que usamos para hablar sobre instrucciones de código que se ejecutan una tras otra.</p><p>Hasta ahora, hemos utilizado JavaScript sincrónico en nuestro código. ¡Aprendamos más sobre este código sincrónico!</p></body></html>"
          },
          {
            "title": "Synchronous JavaScript",
            "id": 120566,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>En el código <strong>síncrono</strong>, una línea de código se ejecuta solo después de que la anterior haya terminado.</p><p>El código sincrónico puede ralentizar nuestros programas. Aquí, tenemos que esperar el cálculo de 6000 números primos para obtener la última salida de la consola.</p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;We're calculating the first 6000 prime numbers.&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;Waiting...&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" arr = [\" /><text value=\"2\" class=\"number\" /><text value=\"];\" /><text type=\"break\" /><text value=\"let\" class=\"keyword\" /><text value=\" number = \" /><text value=\"3\" class=\"number\" /><text value=\";\" /><text type=\"break\" /><text value=\"while\" class=\"keyword\" /><text value=\" (arr.length &lt; \" /><text value=\"6000\" class=\"number\" /><text value=\") {\" /><text type=\"break\" /><text value=\" \" /><text value=\"for\" class=\"keyword\" /><text value=\" (\" /><text value=\"let\" class=\"keyword\" /><text value=\" i = \" /><text value=\"2\" class=\"number\" /><text value=\"; i &lt; number; i++) {\" /><text type=\"break\" /><text value=\"  \" /><text value=\"if\" class=\"keyword\" /><text value=\" (number % i === \" /><text value=\"0\" class=\"number\" /><text value=\") {\" /><text type=\"break\" /><text value=\"   number++;\" /><text type=\"break\" /><text value=\"   \" /><text value=\"break\" class=\"keyword\" /><text value=\";\" /><text type=\"break\" /><text value=\"  }\" /><text type=\"break\" /><text value=\"  \" /><text value=\"if\" class=\"keyword\" /><text value=\" (i === number - \" /><text value=\"1\" class=\"number\" /><text value=\") {\" /><text type=\"break\" /><text value=\"   arr.push(number);\" /><text type=\"break\" /><text value=\"   number++;\" /><text type=\"break\" /><text value=\"   \" /><text value=\"break\" class=\"keyword\" /><text value=\";\" /><text type=\"break\" /><text value=\"  }\" /><text type=\"break\" /><text value=\" }\" /><text type=\"break\" /><text value=\"}\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"`We finished calculating the first \" /><text value=\"${arr.length}\" class=\"subst\" /><text value=\" prime numbers.`\" /><text value=\");\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;We had to wait for this line to print.&quot;\" class=\"string\" /><text value=\");\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"399\" endIndex=\"453\" /></options></interaction></interactions><output><content><text value=\"We're calculating the first 6000 prime numbers.\" /><text type=\"break\" /><text value=\"Waiting...\" /><text type=\"break\" /><text value=\"We finished calculating the first 6000 prime numbers.\" /><text type=\"break\" /><text value=\"We had to wait for this line to print.\" /></content></output></code><p visible-if=\"wrong\">Asegúrese de elegir <code>console.log(\"We had to wait for this line to print.\");</code>.</p></body></html>"
          },
          {
            "title": "Synchronous JavaScript 2",
            "id": 120567,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Con el código sincrónico, cuanto más tiempo tarda una operación, más tiempo tenemos que esperar para que se ejecute la siguiente línea de código.</p><p>Aquí calcularemos los primeros <code>12000</code> números primos, lo que lleva más tiempo y resulta en un retraso más largo.</p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;We're calculating the first 12000 prime numbers.&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;Waiting...&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" arr = [\" /><text value=\"2\" class=\"number\" /><text value=\"];\" /><text type=\"break\" /><text value=\"let\" class=\"keyword\" /><text value=\" number = \" /><text value=\"3\" class=\"number\" /><text value=\";\" /><text type=\"break\" /><text value=\"while\" class=\"keyword\" /><text value=\" (arr.length &lt; \" /><text value=\"12000\" class=\"number\" /><text value=\") {\" /><text type=\"break\" /><text value=\" \" /><text value=\"for\" class=\"keyword\" /><text value=\" (\" /><text value=\"let\" class=\"keyword\" /><text value=\" i = \" /><text value=\"2\" class=\"number\" /><text value=\"; i &lt; number; i++) {\" /><text type=\"break\" /><text value=\"  \" /><text value=\"if\" class=\"keyword\" /><text value=\" (number % i === \" /><text value=\"0\" class=\"number\" /><text value=\") {\" /><text type=\"break\" /><text value=\"   number++;\" /><text type=\"break\" /><text value=\"   \" /><text value=\"break\" class=\"keyword\" /><text value=\";\" /><text type=\"break\" /><text value=\"  }\" /><text type=\"break\" /><text value=\"  \" /><text value=\"if\" class=\"keyword\" /><text value=\" (i === number - \" /><text value=\"1\" class=\"number\" /><text value=\") {\" /><text type=\"break\" /><text value=\"   arr.push(number);\" /><text type=\"break\" /><text value=\"   number++;\" /><text type=\"break\" /><text value=\"   \" /><text value=\"break\" class=\"keyword\" /><text value=\";\" /><text type=\"break\" /><text value=\"  }\" /><text type=\"break\" /><text value=\" }\" /><text type=\"break\" /><text value=\"}\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"`We finished calculating the first \" /><text value=\"${arr.length}\" class=\"subst\" /><text value=\" prime numbers.`\" /><text value=\");\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;We had to wait even longer for this line to print.&quot;\" class=\"string\" /><text value=\");\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"145\" endIndex=\"150\" /></options></interaction></interactions><output><content><text value=\"We're calculating the first 12000 prime numbers.\" /><text type=\"break\" /><text value=\"Waiting...\" /><text type=\"break\" /><text value=\"We finished calculating the first 12000 prime numbers.\" /><text type=\"break\" /><text value=\"We had to wait even longer for this line to print.\" /></content></output></code><p visible-if=\"wrong\">Asegúrese de elegir <code>12000</code>.</p></body></html>"
          },
          {
            "title": "Asynchronous JS 1",
            "id": 120570,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>  El código <strong>asíncrono</strong> no espera a que la instrucción anterior termine.</p><p>Aquí, incluso si incluimos la declaración de impresión en la última línea del código, vemos que el mensaje aparece <em>antes</em> de que el cálculo haya terminado.</p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"function\" class=\"keyword\" /><text value=\" \" /><text value=\"asyncExample\" class=\"title\" /><text value=\"(\" /><text value=\"\" class=\"params\" /><text value=\") \" /><text value=\"{\" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;We're calculating the first 10,000 prime numbers.&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\" \" /><text value=\"const\" class=\"keyword\" /><text value=\" arr = [\" /><text value=\"2\" class=\"number\" /><text value=\"];\" /><text type=\"break\" /><text value=\" \" /><text value=\"let\" class=\"keyword\" /><text value=\" number = \" /><text value=\"3\" class=\"number\" /><text value=\";\" /><text type=\"break\" /><text value=\" \" /><text value=\"while\" class=\"keyword\" /><text value=\" (arr.length &lt; \" /><text value=\"10000\" class=\"number\" /><text value=\") {\" /><text type=\"break\" /><text value=\"  \" /><text value=\"for\" class=\"keyword\" /><text value=\" (\" /><text value=\"let\" class=\"keyword\" /><text value=\" i = \" /><text value=\"2\" class=\"number\" /><text value=\"; i &lt; number; i++) {\" /><text type=\"break\" /><text value=\"   \" /><text value=\"if\" class=\"keyword\" /><text value=\" (number % i === \" /><text value=\"0\" class=\"number\" /><text value=\") {\" /><text type=\"break\" /><text value=\"    number++;\" /><text type=\"break\" /><text value=\"    \" /><text value=\"break\" class=\"keyword\" /><text value=\";\" /><text type=\"break\" /><text value=\"   }\" /><text type=\"break\" /><text value=\"   \" /><text value=\"if\" class=\"keyword\" /><text value=\" (i === number - \" /><text value=\"1\" class=\"number\" /><text value=\") {\" /><text type=\"break\" /><text value=\"    arr.push(number);\" /><text type=\"break\" /><text value=\"    number++;\" /><text type=\"break\" /><text value=\"    \" /><text value=\"break\" class=\"keyword\" /><text value=\";\" /><text type=\"break\" /><text value=\"   }\" /><text type=\"break\" /><text value=\"  }\" /><text type=\"break\" /><text value=\" }\" /><text type=\"break\" /><text value=\" \" /><text value=\"return\" class=\"keyword\" /><text value=\" \" /><text value=\"Promise\" class=\"built_in\" /><text value=\".resolve(arr);\" /><text type=\"break\" /><text value=\"}\" /><text type=\"break\" /><text value=\"asyncExample().then(\" /><text value=\"function\" class=\"keyword\" /><text value=\"(\" /><text value=\"value\" class=\"params\" /><text value=\") \" /><text value=\"{\" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"`We calculated the first \" /><text value=\"${value.length}\" class=\"subst\" /><text value=\" prime numbers`\" /><text value=\");\" /><text type=\"break\" /><text value=\"});\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;This line is printed during the calculation.&quot;\" class=\"string\" /><text value=\");\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"483\" endIndex=\"543\" /></options></interaction></interactions><output><content><text value=\"We're calculating the first 10,000 prime numbers.\" /><text type=\"break\" /><text value=\"This line is printed during the calculation.\" /><text type=\"break\" /><text value=\"We calculated the first 10000 prime numbers\" /></content></output></code><p visible-if=\"wrong\">Asegúrese de elegir <code>console.log(\"This line is printed during the calculation.\");</code>.</p></body></html>"
          },
          {
            "title": "Asynchronous JavaScript 2",
            "id": 120571,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>El código asíncrono es útil para manejar tareas de larga duración. Los cálculos complejos y la obtención de datos de un servidor pueden llevar tiempo.</p><p>La asincronía nos permite ejecutar otras tareas mientras esperamos. ¿Qué declaración aparecerá al final?</p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" asyncExample = fetch(\" /><text value=\"&quot;https://exampleAPI.data/1&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\"asyncExample.then(\" /><text value=\"res\" class=\"params\" /><text value=\" =&gt;\" /><text value=\" res.json()).then(\" /><text value=\"data\" class=\"params\" /><text value=\" =&gt;\" /><text value=\" {\" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"`This is our data: \" /><text value=\"${data}\" class=\"subst\" /><text value=\"`\" /><text value=\");\" /><text type=\"break\" /><text value=\"});\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;Waiting for the data...&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;Continue to use the page while the request is processing.&quot;\" class=\"string\" /><text value=\");\" /></content><output><content><text value=\"Waiting for the data...\" /><text type=\"break\" /><text value=\"Continue to use the page while the request is processing.\" /><text type=\"break\" /><text value=\"This is our data: Success!\" /></content></output></code><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\"><code>This is our data: Success!</code></item><item value=\"2\" correct=\"false\"><code>Waiting for the data...</code></item><item value=\"3\" correct=\"false\"><code>Continúa usando la página mientras se procesa la solicitud</code></item></selection><p visible-if=\"wrong\"><code>This is our data: Success!</code>.</p></body></html>"
          },
          {
            "title": "Question: Synchronous JavaScript",
            "id": 120710,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>¿Qué es el código <strong>síncrono</strong>?</p><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\">Código que se ejecuta secuencialmente</item><item value=\"2\" correct=\"false\">Código que se ejecuta concurrentemente con otro código</item></selection><p visible-if=\"wrong\">Código que se ejecuta secuencialmente.</p></body></html>"
          },
          {
            "title": "Question: Synchronous JavaScript 2",
            "id": 120711,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>¿Cuál es una razón por la que el código sincrónico puede ser ineficiente?</p><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\">Cada línea de código debe esperar a que la línea anterior se complete</item><item value=\"2\" correct=\"false\">Varias líneas de código pueden ejecutarse al mismo tiempo</item></selection><p visible-if=\"wrong\">Cada línea de código debe esperar a que la línea anterior se complete.</p></body></html>"
          },
          {
            "title": "Question: Asynchronous Javascript",
            "id": 120712,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>¿Qué es el código <strong>asíncrono</strong>?</p><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\">Código que puede ejecutarse concurrentemente con otro código</item><item value=\"2\" correct=\"false\">Código que se ejecuta secuencialmente</item></selection><p visible-if=\"wrong\">Código que puede ejecutarse concurrentemente con otro código.</p></body></html>"
          },
          {
            "title": "Question: Asynchronous JavaScript 1",
            "id": 120713,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>¿Cuál es la ventaja del código asíncrono?</p><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\">Podemos realizar varias acciones mientras esperamos que se complete una acción anterior</item><item value=\"2\" correct=\"false\">Siempre requiere más líneas de código que el código sincrónico</item></selection><p visible-if=\"wrong\">Podemos realizar varias acciones mientras esperamos que se complete una acción anterior.</p></body></html>"
          },
          {
            "title": "Question: Asynchronous JavaScript 2",
            "id": 120838,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>¿Cómo podemos reconocer que este código es asíncrono?</p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"function\" class=\"keyword\" /><text value=\" \" /><text value=\"asyncExample\" class=\"title\" /><text value=\"(\" /><text value=\"\" class=\"params\" /><text value=\") \" /><text value=\"{\" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;We're calculating the first 10,000 prime numbers.&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;Waiting...&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\" \" /><text value=\"const\" class=\"keyword\" /><text value=\" arr = [\" /><text value=\"2\" class=\"number\" /><text value=\"];\" /><text type=\"break\" /><text value=\" \" /><text value=\"let\" class=\"keyword\" /><text value=\" number = \" /><text value=\"3\" class=\"number\" /><text value=\";\" /><text type=\"break\" /><text value=\" \" /><text value=\"while\" class=\"keyword\" /><text value=\" (arr.length &lt; \" /><text value=\"10000\" class=\"number\" /><text value=\") {\" /><text type=\"break\" /><text value=\"  \" /><text value=\"for\" class=\"keyword\" /><text value=\" (\" /><text value=\"let\" class=\"keyword\" /><text value=\" i = \" /><text value=\"2\" class=\"number\" /><text value=\"; i &lt; number; i++) {\" /><text type=\"break\" /><text value=\"   \" /><text value=\"if\" class=\"keyword\" /><text value=\" (number % i === \" /><text value=\"0\" class=\"number\" /><text value=\") {\" /><text type=\"break\" /><text value=\"    number++;\" /><text type=\"break\" /><text value=\"    \" /><text value=\"break\" class=\"keyword\" /><text value=\";\" /><text type=\"break\" /><text value=\"   }\" /><text type=\"break\" /><text value=\"   \" /><text value=\"if\" class=\"keyword\" /><text value=\" (i === number - \" /><text value=\"1\" class=\"number\" /><text value=\") {\" /><text type=\"break\" /><text value=\"    arr.push(number);\" /><text type=\"break\" /><text value=\"    number++;\" /><text type=\"break\" /><text value=\"    \" /><text value=\"break\" class=\"keyword\" /><text value=\";\" /><text type=\"break\" /><text value=\"   }\" /><text type=\"break\" /><text value=\"  }\" /><text type=\"break\" /><text value=\" }\" /><text type=\"break\" /><text value=\" \" /><text value=\"return\" class=\"keyword\" /><text value=\" \" /><text value=\"Promise\" class=\"built_in\" /><text value=\".resolve(arr);\" /><text type=\"break\" /><text value=\"}\" /><text type=\"break\" /><text value=\"asyncExample().then(\" /><text value=\"function\" class=\"keyword\" /><text value=\"(\" /><text value=\"value\" class=\"params\" /><text value=\") \" /><text value=\"{\" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"`We calculated the first \" /><text value=\"${value.length}\" class=\"subst\" /><text value=\" prime numbers`\" /><text value=\");\" /><text type=\"break\" /><text value=\"});\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;This line printed during the calculation.&quot;\" class=\"string\" /><text value=\");\" /></content><output><content><text value=\"We're calculating the first 10,000 prime numbers.\" /><text type=\"break\" /><text value=\"Waiting...\" /><text type=\"break\" /><text value=\"This line printed during the calculation.\" /><text type=\"break\" /><text value=\"We calculated the first 10000 prime numbers\" /></content></output></code><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\">Continúa ejecutándose e imprimiéndose en la consola durante el cálculo</item><item value=\"2\" correct=\"false\">Utiliza un bucle while</item></selection><p visible-if=\"wrong\">Continúa ejecutándose e imprimiéndose en la consola durante el cálculo.</p></body></html>"
          },
          {
            "title": "Question: Asynchronous JavaScript 3",
            "id": 120714,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>¿Cuál es una aplicación del mundo real del código asíncrono?</p><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\">Continuar ejecutando código mientras se realizan cálculos complejos</item><item value=\"2\" correct=\"false\">Esperando para ejecutar la siguiente línea de código mientras se realiza un cálculo complejo</item></selection><p visible-if=\"wrong\">Continuar ejecutando código mientras se realizan cálculos complejos.</p></body></html>"
          },
          {
            "title": "Example: Synchronous JavaScript",
            "id": 120716,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Completa el bucle <code>for</code> para que este código sincrónico multiplique cada elemento del array por <code>5</code> y luego imprima un mensaje de \"Finish\".</p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" arr = [\" /><text value=\"1\" class=\"number\" /><text value=\", \" /><text value=\"2\" class=\"number\" /><text value=\", \" /><text value=\"3\" class=\"number\" /><text value=\", \" /><text value=\"4\" class=\"number\" /><text value=\", \" /><text value=\"5\" class=\"number\" /><text value=\"];\" /><text type=\"break\" /><text value=\"for\" class=\"keyword\" /><text value=\" (\" /><text value=\"let\" class=\"keyword\" /><text value=\" i = \" /><text value=\"0\" class=\"number\" /><text value=\"; i &lt; arr.length; i++) {\" /><text type=\"break\" /><text value=\" arr[i] *= \" /><text value=\"5\" class=\"number\" /><text value=\";\" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(arr[i]);\" /><text type=\"break\" /><text value=\"}\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;Finished!&quot;\" class=\"string\" /><text value=\");\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"29\" endIndex=\"32\" /><option startIndex=\"106\" endIndex=\"113\" /><option startIndex=\"113\" endIndex=\"114\" /><option startIndex=\"114\" endIndex=\"117\" /></options></interaction></interactions><output><content><text value=\"5\" /><text type=\"break\" /><text value=\"10\" /><text type=\"break\" /><text value=\"15\" /><text type=\"break\" /><text value=\"20\" /><text type=\"break\" /><text value=\"25\" /><text type=\"break\" /><text value=\"Finished!\" /></content></output></code><p visible-if=\"wrong\">Asegúrese de elegir <code>for</code> seguido de <code>console</code> y luego <code>.</code>, <code>log</code>.</p></body></html>"
          },
          {
            "title": "MCQ w/Code 1",
            "id": 120721,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>¿Cómo sabemos que este código es sincrónico?</p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" arr = [\" /><text value=\"10\" class=\"number\" /><text value=\", \" /><text value=\"8\" class=\"number\" /><text value=\", \" /><text value=\"4\" class=\"number\" /><text value=\", \" /><text value=\"2\" class=\"number\" /><text value=\", \" /><text value=\"0\" class=\"number\" /><text value=\"];\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;Start loop!&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\"for\" class=\"keyword\" /><text value=\" (\" /><text value=\"let\" class=\"keyword\" /><text value=\" i = \" /><text value=\"0\" class=\"number\" /><text value=\"; i &lt; arr.length; i++) {\" /><text type=\"break\" /><text value=\" arr[i] /= \" /><text value=\"2\" class=\"number\" /><text value=\";\" /><text type=\"break\" /><text value=\"}\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;The operation is complete&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(arr);\" /><text type=\"break\" /></content><output><content><text value=\"Start loop!\" /><text type=\"break\" /><text value=\"The operation is complete\" /><text type=\"break\" /><text value=\"[ 5, 4, 2, 1, 0 ]\" /></content></output></code><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\">Cada iteración del bucle se completa antes de que el código fuera del bucle se ejecute</item><item value=\"2\" correct=\"false\">El código se ejecuta todo de una vez</item></selection><p visible-if=\"wrong\">Cada iteración del bucle se completa antes de que el código fuera del bucle se ejecute.</p></body></html>"
          },
          {
            "title": "MCQ w/Code 2",
            "id": 120722,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>¿Por qué sabemos que este código es asíncrono?</p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"async\" class=\"keyword\" /><text value=\" \" /><text value=\"function\" class=\"keyword\" /><text value=\" \" /><text value=\"example\" class=\"title\" /><text value=\"(\" /><text value=\"\" class=\"params\" /><text value=\") \" /><text value=\"{\" /><text type=\"break\" /><text value=\" \" /><text value=\"const\" class=\"keyword\" /><text value=\" promise = \" /><text value=\"new\" class=\"keyword\" /><text value=\" \" /><text value=\"Promise\" class=\"built_in\" /><text value=\"(\" /><text value=\"(\" /><text value=\"resolve\" class=\"params\" /><text value=\") =&gt;\" /><text value=\" {\" /><text type=\"break\" /><text value=\"  setTimeout(\" /><text value=\"()\" class=\"params\" /><text value=\" =&gt;\" /><text value=\" resolve(\" /><text value=\"&quot;The operation is finished&quot;\" class=\"string\" /><text value=\"), \" /><text value=\"1500\" class=\"number\" /><text value=\");\" /><text type=\"break\" /><text value=\" });\" /><text type=\"break\" /><text value=\" \" /><text value=\"const\" class=\"keyword\" /><text value=\" output = \" /><text value=\"await\" class=\"keyword\" /><text value=\" promise;\" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(output);\" /><text type=\"break\" /><text value=\"}\" /><text type=\"break\" /><text value=\"example();\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;Hello&quot;\" class=\"string\" /><text value=\");\" /></content><output><content><text value=\"Hello\" /><text type=\"break\" /><text value=\"The operation is finished\" /></content></output></code><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\">Porque el último mensaje de la consola se mostrará primero en la consola</item><item value=\"2\" correct=\"false\">Porque <code>\"Hello\"</code> no se mostrará</item></selection><p visible-if=\"wrong\">Porque el último mensaje de la consola se mostrará primero en la consola.</p></body></html>"
          }
        ]
      },
      {
        "id": 13416,
        "title": "Callbacks y JS Síncrono",
        "type": "practiceLevel1",
        "lessons": [
          {
            "title": "Intro",
            "id": 120558,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Ya te has encontrado y has usado funciones <strong>callback</strong> en JavaScript sincrónico, quizás sin darte cuenta.</p><p>¡Pero aprendamos más sobre estos callbacks!</p></body></html>"
          },
          {
            "title": "Callback Function Definition",
            "id": 120574,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Una función de callback es una función regular que pasamos a otra función y luego llamamos para realizar una tarea.</p><p>Aquí, pasamos la función <code>logResult</code> a nuestra función <code>add</code> para mostrar el resultado del cálculo.</p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"function\" class=\"keyword\" /><text value=\" \" /><text value=\"add\" class=\"title\" /><text value=\"(\" /><text value=\"number1, number2, callback\" class=\"params\" /><text value=\") \" /><text value=\"{\" /><text type=\"break\" /><text value=\" \" /><text value=\"let\" class=\"keyword\" /><text value=\" result = number1 + number2;\" /><text type=\"break\" /><text value=\" callback(result);\" /><text type=\"break\" /><text value=\"}\" /><text type=\"break\" /><text type=\"break\" /><text value=\"function\" class=\"keyword\" /><text value=\" \" /><text value=\"logResult\" class=\"title\" /><text value=\"(\" /><text value=\"result\" class=\"params\" /><text value=\") \" /><text value=\"{\" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"`The result is: \" /><text value=\"${result}\" class=\"subst\" /><text value=\"`\" /><text value=\");\" /><text type=\"break\" /><text value=\"}\" /><text type=\"break\" /><text value=\"add(\" /><text value=\"2\" class=\"number\" /><text value=\", \" /><text value=\"3\" class=\"number\" /><text value=\", logResult);\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"181\" endIndex=\"190\" /></options></interaction></interactions><output><content><text value=\"The result is: 5\" /></content></output></code><p visible-if=\"wrong\">Asegúrese de elegir <code>logResult</code>.</p></body></html>"
          },
          {
            "title": ".map()",
            "id": 120575,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Ya has utilizado funciones callback en métodos como <code>.map()</code>.</p><p>Aquí, pasamos la función <code>callback</code> al método de array <code>.map()</code>. En ella, devolvemos <code>num</code> multiplicado por <code>2</code>. La acción se repite para todos los elementos del array.</p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" arr = [\" /><text value=\"1\" class=\"number\" /><text value=\", \" /><text value=\"2\" class=\"number\" /><text value=\", \" /><text value=\"3\" class=\"number\" /><text value=\", \" /><text value=\"4\" class=\"number\" /><text value=\", \" /><text value=\"5\" class=\"number\" /><text value=\"];\" /><text type=\"break\" /><text type=\"break\" /><text value=\"function\" class=\"keyword\" /><text value=\" \" /><text value=\"callback\" class=\"title\" /><text value=\"(\" /><text value=\"num\" class=\"params\" /><text value=\") \" /><text value=\"{\" /><text type=\"break\" /><text value=\" \" /><text value=\"return\" class=\"keyword\" /><text value=\" num * \" /><text value=\"2\" class=\"number\" /><text value=\";\" /><text type=\"break\" /><text value=\"}\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" newArray = arr.map(callback);\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(newArray);\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;This code is synchronous.&quot;\" class=\"string\" /><text value=\");\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"95\" endIndex=\"98\" /><option startIndex=\"99\" endIndex=\"107\" /></options></interaction></interactions><output><content><text value=\"[ 2, 4, 6, 8, 10 ]\" /><text type=\"break\" /><text value=\"This code is synchronous.\" /></content></output></code><p visible-if=\"wrong\">Asegúrese de elegir <code>map</code> seguido de <code>callback</code>.</p></body></html>"
          },
          {
            "title": ".map() 2",
            "id": 120576,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>El método <code>.map()</code> es sincrónico. Se ejecuta en su totalidad antes de que se ejecute la siguiente línea de código.</p><p>Aquí, podemos ver todos los números multiplicados en la consola antes de la última declaración de impresión.</p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" arr = [\" /><text value=\"1\" class=\"number\" /><text value=\", \" /><text value=\"2\" class=\"number\" /><text value=\", \" /><text value=\"3\" class=\"number\" /><text value=\", \" /><text value=\"4\" class=\"number\" /><text value=\", \" /><text value=\"5\" class=\"number\" /><text value=\"];\" /><text type=\"break\" /><text type=\"break\" /><text value=\"function\" class=\"keyword\" /><text value=\" \" /><text value=\"callback\" class=\"title\" /><text value=\"(\" /><text value=\"num\" class=\"params\" /><text value=\") \" /><text value=\"{\" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(num * \" /><text value=\"2\" class=\"number\" /><text value=\");\" /><text type=\"break\" /><text value=\"}\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" newArray = arr.map(callback);\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;This code is synchronous.&quot;\" class=\"string\" /><text value=\");\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"116\" endIndex=\"123\" /><option startIndex=\"123\" endIndex=\"124\" /><option startIndex=\"124\" endIndex=\"127\" /></options></interaction></interactions><output><content><text value=\"2\" /><text type=\"break\" /><text value=\"4\" /><text type=\"break\" /><text value=\"6\" /><text type=\"break\" /><text value=\"8\" /><text type=\"break\" /><text value=\"10\" /><text type=\"break\" /><text value=\"This code is synchronous.\" /></content></output></code><p visible-if=\"wrong\">Asegúrese de elegir <code>console</code> seguido de <code>.</code> y finalmente <code>log</code>.</p></body></html>"
          },
          {
            "title": ".filter()",
            "id": 120577,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>También podrías recordar <code>.filter()</code>. ¡Es otro callback que has usado sin saberlo!</p><p>Aquí, pasamos la función <code>callback</code> al método <code>.filter()</code> para devolver todos los números pares en el array original.</p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" arr = [\" /><text value=\"1\" class=\"number\" /><text value=\", \" /><text value=\"2\" class=\"number\" /><text value=\", \" /><text value=\"3\" class=\"number\" /><text value=\", \" /><text value=\"4\" class=\"number\" /><text value=\", \" /><text value=\"5\" class=\"number\" /><text value=\", \" /><text value=\"6\" class=\"number\" /><text value=\", \" /><text value=\"7\" class=\"number\" /><text value=\", \" /><text value=\"8\" class=\"number\" /><text value=\", \" /><text value=\"9\" class=\"number\" /><text value=\", \" /><text value=\"10\" class=\"number\" /><text value=\"];\" /><text type=\"break\" /><text type=\"break\" /><text value=\"function\" class=\"keyword\" /><text value=\" \" /><text value=\"callback\" class=\"title\" /><text value=\"(\" /><text value=\"num\" class=\"params\" /><text value=\") \" /><text value=\"{\" /><text type=\"break\" /><text value=\" \" /><text value=\"return\" class=\"keyword\" /><text value=\" num % \" /><text value=\"2\" class=\"number\" /><text value=\" === \" /><text value=\"0\" class=\"number\" /><text value=\";\" /><text type=\"break\" /><text value=\"}\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" evenNumArray = arr.filter(callback);\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(evenNumArray);\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;This code is also synchronous.&quot;\" class=\"string\" /><text value=\");\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"121\" endIndex=\"127\" /><option startIndex=\"128\" endIndex=\"136\" /></options></interaction></interactions><output><content><text value=\"[ 2, 4, 6, 8, 10 ]\" /><text type=\"break\" /><text value=\"This code is also synchronous.\" /></content></output></code><p visible-if=\"wrong\">Asegúrese de elegir <code>filter</code> seguido de <code>callback</code>.</p></body></html>"
          },
          {
            "title": ".filter() 2",
            "id": 120578,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>De nuevo, vemos un ejemplo de un método síncrono de JavaScript que utiliza una función de callback. Pasa <code>callback</code> al método <code>filter</code>.</p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" arr = [\" /><text value=\"1\" class=\"number\" /><text value=\", \" /><text value=\"2\" class=\"number\" /><text value=\", \" /><text value=\"3\" class=\"number\" /><text value=\", \" /><text value=\"4\" class=\"number\" /><text value=\", \" /><text value=\"5\" class=\"number\" /><text value=\", \" /><text value=\"6\" class=\"number\" /><text value=\", \" /><text value=\"7\" class=\"number\" /><text value=\", \" /><text value=\"8\" class=\"number\" /><text value=\", \" /><text value=\"9\" class=\"number\" /><text value=\", \" /><text value=\"10\" class=\"number\" /><text value=\"];\" /><text type=\"break\" /><text type=\"break\" /><text value=\"function\" class=\"keyword\" /><text value=\" \" /><text value=\"callback\" class=\"title\" /><text value=\"(\" /><text value=\"num\" class=\"params\" /><text value=\") \" /><text value=\"{\" /><text type=\"break\" /><text value=\" \" /><text value=\"return\" class=\"keyword\" /><text value=\" num % \" /><text value=\"2\" class=\"number\" /><text value=\" === \" /><text value=\"0\" class=\"number\" /><text value=\";\" /><text type=\"break\" /><text value=\"}\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" evenNumArray = arr.filter(callback);\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(evenNumArray);\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;This code is also synchronous.&quot;\" class=\"string\" /><text value=\");\" /></content><interactions><interaction type=\"validatedInput\" isDefault=\"true\" startIndex=\"128\" endIndex=\"136\" /></interactions><output><content><text value=\"[ 2, 4, 6, 8, 10 ]\" /><text type=\"break\" /><text value=\"This code is also synchronous.\" /></content></output></code><p visible-if=\"wrong\">Asegúrese de elegir <code>callback</code>.</p></body></html>"
          },
          {
            "title": ".map()/.filter()",
            "id": 120583,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Es posible que hayas visto estos métodos escritos en una forma diferente, como usando funciones flecha modernas de ES6.</p><p>La <em>arrow function</em> solo utiliza una sintaxis compacta para escribir el <em>callback</em>, pero tiene el mismo comportamiento.</p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" arr = [\" /><text value=\"1\" class=\"number\" /><text value=\", \" /><text value=\"2\" class=\"number\" /><text value=\", \" /><text value=\"3\" class=\"number\" /><text value=\", \" /><text value=\"4\" class=\"number\" /><text value=\", \" /><text value=\"5\" class=\"number\" /><text value=\"];\" /><text type=\"break\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" newArray = arr.map(\" /><text value=\"(\" /><text value=\"num\" class=\"params\" /><text value=\") =&gt;\" /><text value=\" num * \" /><text value=\"2\" class=\"number\" /><text value=\");\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(newArray);\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;This code uses an ES6 arrow function.&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;This code is synchronous.&quot;\" class=\"string\" /><text value=\");\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"61\" endIndex=\"63\" /><option startIndex=\"55\" endIndex=\"60\" /></options></interaction></interactions><output><content><text value=\"[ 2, 4, 6, 8, 10 ]\" /><text type=\"break\" /><text value=\"This code uses an ES6 arrow function.\" /><text type=\"break\" /><text value=\"This code is synchronous.\" /></content></output></code><p visible-if=\"wrong\">Asegúrese de elegir <code>(num)</code> seguido de <code>=&gt;</code>.</p></body></html>"
          },
          {
            "title": "Question: Callback Function Definition",
            "id": 120726,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Una función de callback siempre se llama dentro de otra función.</p><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\">Verdadero</item><item value=\"2\" correct=\"false\">Falso</item></selection><p visible-if=\"wrong\">Asegúrese de elegir Verdadero.</p></body></html>"
          },
          {
            "title": "Question: .map()",
            "id": 120727,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p><code>.map()</code> es un método de JavaScript que se ejecuta de manera asíncrona.</p><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\">Falso</item><item value=\"2\" correct=\"false\">Verdadero</item></selection><p visible-if=\"wrong\">Asegúrese de elegir Falso.</p></body></html>"
          },
          {
            "title": "Question: .filter()",
            "id": 120729,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>¿Qué afirmación es precisa con respecto a los métodos <code>.filter()</code> y <code>.map()</code>?</p><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\">Se ejecutan de manera sincrónica</item><item value=\"2\" correct=\"false\">Se ejecutan de forma asíncrona</item></selection><p visible-if=\"wrong\">Se ejecutan de manera sincrónica.</p></body></html>"
          },
          {
            "title": "Question: .filter() 2",
            "id": 120730,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Los métodos de JavaScript a veces requieren funciones de callback durante su ejecución.</p><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\">Verdadero</item><item value=\"2\" correct=\"false\">Falso</item></selection><p visible-if=\"wrong\">Asegúrese de elegir Verdadero.</p></body></html>"
          },
          {
            "title": "Question: .map()/.filter()",
            "id": 120731,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>¿Qué afirmación es verdadera respecto a las funciones callback en JavaScript?</p><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\">Pueden ser escritos con funciones flecha de ES6</item><item value=\"2\" correct=\"false\">Nunca se pueden escribir con funciones flecha de ES6</item></selection><p visible-if=\"wrong\">Pueden ser escritos con funciones flecha de ES6.</p></body></html>"
          },
          {
            "title": "Question: .filter()/Callback",
            "id": 120839,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>¿Cuál es la función de callback en este código sincrónico?</p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" arr = [\" /><text value=\"11\" class=\"number\" /><text value=\", \" /><text value=\"12\" class=\"number\" /><text value=\", \" /><text value=\"13\" class=\"number\" /><text value=\", \" /><text value=\"14\" class=\"number\" /><text value=\", \" /><text value=\"15\" class=\"number\" /><text value=\", \" /><text value=\"16\" class=\"number\" /><text value=\", \" /><text value=\"17\" class=\"number\" /><text value=\", \" /><text value=\"18\" class=\"number\" /><text value=\", \" /><text value=\"19\" class=\"number\" /><text value=\", \" /><text value=\"20\" class=\"number\" /><text value=\"];\" /><text type=\"break\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" evenArray = \" /><text value=\"(\" /><text value=\"num\" class=\"params\" /><text value=\") =&gt;\" /><text value=\" num % \" /><text value=\"2\" class=\"number\" /><text value=\" === \" /><text value=\"0\" class=\"number\" /><text value=\";\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" newArray = arr.filter(evenArray);\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(newArray);\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;This code is synchronous.&quot;\" class=\"string\" /><text value=\");\" /></content><output><content><text value=\"[ 12, 14, 16, 18, 20 ]\" /><text type=\"break\" /><text value=\"This code is synchronous.\" /></content></output></code><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\"><code>evenArray</code></item><item value=\"2\" correct=\"false\"><code>newArray</code></item></selection><p visible-if=\"wrong\">Asegúrese de elegir <code>evenArray</code>.</p></body></html>"
          },
          {
            "title": "Example: .map()",
            "id": 120734,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Llama al método <code>.map</code> con <code>makePositive</code> como el callback.</p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" arr = [\" /><text value=\"-1\" class=\"number\" /><text value=\", \" /><text value=\"-2\" class=\"number\" /><text value=\", \" /><text value=\"-3\" class=\"number\" /><text value=\", \" /><text value=\"-4\" class=\"number\" /><text value=\", \" /><text value=\"-5\" class=\"number\" /><text value=\"];\" /><text type=\"break\" /><text type=\"break\" /><text value=\"function\" class=\"keyword\" /><text value=\" \" /><text value=\"makePositive\" class=\"title\" /><text value=\"(\" /><text value=\"num\" class=\"params\" /><text value=\") \" /><text value=\"{\" /><text type=\"break\" /><text value=\" \" /><text value=\"return\" class=\"keyword\" /><text value=\" num * \" /><text value=\"-1\" class=\"number\" /><text value=\";\" /><text type=\"break\" /><text value=\"}\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" positiveArray = arr.map(makePositive);\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(positiveArray);\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;This code is synchronous.&quot;\" class=\"string\" /><text value=\");\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"106\" endIndex=\"109\" /><option startIndex=\"109\" endIndex=\"110\" /><option startIndex=\"110\" endIndex=\"113\" /><option startIndex=\"113\" endIndex=\"128\" /></options></interaction></interactions><output><content><text value=\"[ 1, 2, 3, 4, 5 ]\" /><text type=\"break\" /><text value=\"This code is synchronous.\" /></content></output></code><p visible-if=\"wrong\">Asegúrese de elegir <code>arr</code> seguido de <code>.</code> y luego <code>map</code>, <code>(makePositive);</code>.</p></body></html>"
          }
        ]
      },
      {
        "id": 13417,
        "title": "Callbacks y JS Asíncrono",
        "type": "practiceLevel1",
        "lessons": [
          {
            "title": "Intro",
            "id": 120559,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Hemos visto funciones de callback en JavaScript sincrónico. Ahora echemos un vistazo a los callbacks personalizados y a los callbacks en código asincrónico.</p></body></html>"
          },
          {
            "title": "Callback Functions",
            "id": 120654,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Recuerda que una función callback es una función que pasamos a otra función y luego llamamos para realizar una tarea.</p><p>Vimos que los métodos de JavaScript como <code>.map()</code> y <code>.filter()</code> están diseñados para aceptar una función de callback.</p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" arr = [\" /><text value=\"1\" class=\"number\" /><text value=\", \" /><text value=\"2\" class=\"number\" /><text value=\", \" /><text value=\"3\" class=\"number\" /><text value=\", \" /><text value=\"4\" class=\"number\" /><text value=\", \" /><text value=\"5\" class=\"number\" /><text value=\"];\" /><text type=\"break\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" newArray = arr.map(\" /><text value=\"(\" /><text value=\"num\" class=\"params\" /><text value=\") =&gt;\" /><text value=\" num * \" /><text value=\"2\" class=\"number\" /><text value=\");\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(newArray);\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;This code is synchronous.&quot;\" class=\"string\" /><text value=\");\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"47\" endIndex=\"50\" /><option startIndex=\"50\" endIndex=\"51\" /><option startIndex=\"51\" endIndex=\"54\" /></options></interaction></interactions><output><content><text value=\"[ 2, 4, 6, 8, 10 ]\" /><text type=\"break\" /><text value=\"This code is synchronous.\" /></content></output></code><p visible-if=\"wrong\">Asegúrese de elegir <code>arr</code> seguido de <code>.</code> y finalmente <code>map</code>.</p></body></html>"
          },
          {
            "title": "Callback Functions II",
            "id": 120835,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>También podemos personalizar nuestras propias funciones para aceptar y ejecutar un callback.</p><p>Aquí podemos pasar la función <code>sayGoodbye</code> que muestra <code>\"Goodbye\"</code> en la función <code>greet()</code>.</p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"function\" class=\"keyword\" /><text value=\" \" /><text value=\"greet\" class=\"title\" /><text value=\"(\" /><text value=\"name, callback\" class=\"params\" /><text value=\") \" /><text value=\"{\" /><text type=\"break\" /><text value=\"  \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"`Hello, \" /><text value=\"${name}\" class=\"subst\" /><text value=\"!`\" /><text value=\");\" /><text type=\"break\" /><text value=\"  callback();\" /><text type=\"break\" /><text value=\"}\" /><text type=\"break\" /><text type=\"break\" /><text value=\"function\" class=\"keyword\" /><text value=\" \" /><text value=\"sayGoodbye\" class=\"title\" /><text value=\"(\" /><text value=\"\" class=\"params\" /><text value=\") \" /><text value=\"{\" /><text type=\"break\" /><text value=\"  \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;Goodbye!&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\"}\" /><text type=\"break\" /><text type=\"break\" /><text value=\"greet(\" /><text value=\"&quot;Teresa&quot;\" class=\"string\" /><text value=\", sayGoodbye);\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"154\" endIndex=\"164\" /><option startIndex=\"138\" endIndex=\"143\" /></options></interaction></interactions><output><content><text value=\"Hello, Teresa!\" /><text type=\"break\" /><text value=\"Goodbye!\" /></content></output></code><p visible-if=\"wrong\">Asegúrese de elegir <code>greet</code> seguido de <code>sayGoodbye</code>.</p></body></html>"
          },
          {
            "title": "Customizing Callbacks",
            "id": 120655,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Podemos personalizar un callback para hacer cualquier cosa que necesitemos.</p><p>Llamemos a la función <code>doSomeMath</code> con el parámetro <code>input</code> establecido en <code>2</code> y el parámetro <code>callback</code> establecido en <code>multiplyCallback</code>.</p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"function\" class=\"keyword\" /><text value=\" \" /><text value=\"multiplyCallback\" class=\"title\" /><text value=\"(\" /><text value=\"num\" class=\"params\" /><text value=\") \" /><text value=\"{\" /><text type=\"break\" /><text value=\" \" /><text value=\"const\" class=\"keyword\" /><text value=\" result = num * \" /><text value=\"2\" class=\"number\" /><text value=\";\" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"`The input doubled is equal to \" /><text value=\"${result}\" class=\"subst\" /><text value=\"`\" /><text value=\");\" /><text type=\"break\" /><text value=\"}\" /><text type=\"break\" /><text type=\"break\" /><text value=\"function\" class=\"keyword\" /><text value=\" \" /><text value=\"doSomeMath\" class=\"title\" /><text value=\"(\" /><text value=\"input, callback\" class=\"params\" /><text value=\") \" /><text value=\"{\" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;We are doubling the input number.&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\" callback(input);\" /><text type=\"break\" /><text value=\"}\" /><text type=\"break\" /><text value=\"doSomeMath(\" /><text value=\"2\" class=\"number\" /><text value=\", multiplyCallback);\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"228\" endIndex=\"238\" /><option startIndex=\"238\" endIndex=\"239\" /><option startIndex=\"239\" endIndex=\"241\" /><option startIndex=\"242\" endIndex=\"258\" /><option startIndex=\"258\" endIndex=\"259\" /></options></interaction></interactions><output><content><text value=\"We are doubling the input number.\" /><text type=\"break\" /><text value=\"The input doubled is equal to 4\" /></content></output></code><p visible-if=\"wrong\">Asegúrese de elegir <code>doSomeMath</code> seguido de <code>(</code> y luego <code>2,</code>, <code>multiplyCallback</code>, <code>)</code>.</p></body></html>"
          },
          {
            "title": "Asynchronous Callback",
            "id": 120723,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>También podemos usar funciones callback en métodos asíncronos de JavaScript. Pasa el callback al método asíncrono <code>setTimeout()</code>.</p><p>Aprenderás más sobre este método más adelante, por ahora, concéntrate en la salida de la consola.</p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"function\" class=\"keyword\" /><text value=\" \" /><text value=\"callbackFunc\" class=\"title\" /><text value=\"(\" /><text value=\"\" class=\"params\" /><text value=\") \" /><text value=\"{\" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;Executed last because we're using asynchronous code.&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\"}\" /><text type=\"break\" /><text value=\"setTimeout(callbackFunc, \" /><text value=\"1500\" class=\"number\" /><text value=\");\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"'Executed first'\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"'Executed second'\" class=\"string\" /><text value=\");\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"109\" endIndex=\"121\" /></options></interaction></interactions><output><content><text value=\"Executed first\" /><text type=\"break\" /><text value=\"Executed second\" /><text type=\"break\" /><text value=\"Executed last because we're using asynchronous code.\" /></content></output></code><p visible-if=\"wrong\">Asegúrese de elegir <code>callbackFunc</code>.</p></body></html>"
          },
          {
            "title": "Asynchronous Callback 2",
            "id": 120656,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Podemos aprovechar la sincronía y la asincronía juntas. Aquí encadenamos operaciones a una cadena que ocurrirán una tras otra.</p><p> Luego ejecuta nuestra función personalizada como un callback de manera asíncrona.</p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" word = \" /><text value=\"&quot;enola&quot;\" class=\"string\" /><text value=\";\" /><text type=\"break\" /><text value=\"function\" class=\"keyword\" /><text value=\" \" /><text value=\"reverseCallback\" class=\"title\" /><text value=\"(\" /><text value=\"\" class=\"params\" /><text value=\") \" /><text value=\"{\" /><text type=\"break\" /><text value=\" \" /><text value=\"const\" class=\"keyword\" /><text value=\" result = word.split(\" /><text value=\"&quot;&quot;\" class=\"string\" /><text value=\").reverse().join(\" /><text value=\"&quot;&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"`The string reversed is: &quot;\" /><text value=\"${result}\" class=\"subst\" /><text value=\"&quot;`\" /><text value=\");\" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;Executed last because we're using asynchronous code.&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\"}\" /><text type=\"break\" /><text value=\"setTimeout(reverseCallback, \" /><text value=\"1500\" class=\"number\" /><text value=\");\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"'Executed first'\" class=\"string\" /><text value=\");\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"238\" endIndex=\"253\" /></options></interaction></interactions><output><content><text value=\"Executed first\" /><text type=\"break\" /><text value=\"The string reversed is: &quot;alone&quot;\" /><text type=\"break\" /><text value=\"Executed last because we're using asynchronous code.\" /></content></output></code><p visible-if=\"wrong\">Asegúrese de elegir <code>reverseCallback</code>.</p></body></html>"
          },
          {
            "title": "Asynchronous JS History",
            "id": 120652,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Aunque los callbacks personalizados pueden ser beneficiosos, tener demasiados callbacks resulta en una anidación profunda.</p><p>El código profundamente anidado es indeseable porque es difícil de entender y mantener. Pronto aprenderás una sintaxis que ayuda a simplificar esto.</p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"func1(\" /><text value=\"&quot;one&quot;\" class=\"string\" /><text value=\", () =&gt; {\" /><text type=\"break\" /><text value=\" func2(\" /><text value=\"&quot;two&quot;\" class=\"string\" /><text value=\", () =&gt; {\" /><text type=\"break\" /><text value=\"  func3(\" /><text value=\"&quot;three&quot;\" class=\"string\" /><text value=\", () =&gt; {\" /><text type=\"break\" /><text value=\"   \" /><text value=\"// etc...\" class=\"comment\" /><text type=\"break\" /><text value=\"  });\" /><text type=\"break\" /><text value=\" });\" /><text type=\"break\" /><text value=\"});\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"0\" endIndex=\"5\" /><option startIndex=\"22\" endIndex=\"27\" /><option startIndex=\"45\" endIndex=\"50\" /></options></interaction></interactions></code><p visible-if=\"wrong\">Asegúrese de elegir <code>func1</code> seguido de <code>func2</code> y finalmente <code>func3</code>.</p></body></html>"
          },
          {
            "title": "Question: Asynhchronous JS History",
            "id": 120744,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>¿Cuál es un problema común al usar solo callbacks para implementar código JavaScript asíncrono?</p><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\">Podemos terminar con un código profundamente anidado</item><item value=\"2\" correct=\"false\">No podemos usar callbacks desde que se introdujo ES8</item></selection><p visible-if=\"wrong\">Podemos terminar con un código profundamente anidado.</p></body></html>"
          },
          {
            "title": "Question: Callback Functions",
            "id": 120746,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>¿Cuál es una característica de las funciones callback?</p><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\">Siempre se llaman dentro de otra función</item><item value=\"2\" correct=\"false\">Solo se pueden llamar una vez</item></selection><p visible-if=\"wrong\">Siempre se llaman dentro de otra función.</p></body></html>"
          },
          {
            "title": "Question: Customizing Callbacks",
            "id": 120747,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>¿Qué es cierto sobre las funciones de callback?</p><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\">Podemos personalizarlos para hacer lo que necesitemos hacer</item><item value=\"2\" correct=\"false\">Están limitados a operaciones matemáticas</item></selection><p visible-if=\"wrong\">Podemos personalizarlos para hacer lo que necesitemos hacer.</p></body></html>"
          },
          {
            "title": "Question: Asynchronous Callback",
            "id": 120748,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>¿Qué es preciso respecto a las funciones de callback?</p><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\">Podemos usarlos con código asíncrono</item><item value=\"2\" correct=\"false\">No podemos usarlos con código asíncrono</item></selection><p visible-if=\"wrong\">Podemos usarlos con código asíncrono.</p></body></html>"
          },
          {
            "title": "Example: Callback Functions/ES6",
            "id": 120753,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Completa la función de callback que pasamos a <code>sayHello</code>.</p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" sayHello = \" /><text value=\"(\" /><text value=\"name, callback\" class=\"params\" /><text value=\") =&gt;\" /><text value=\" {\" /><text type=\"break\" /><text value=\"  \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"`Hello, \" /><text value=\"${name}\" class=\"subst\" /><text value=\"!`\" /><text value=\");\" /><text type=\"break\" /><text value=\"  callback();\" /><text type=\"break\" /><text value=\"};\" /><text type=\"break\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" sayGoodbye = \" /><text value=\"()\" class=\"params\" /><text value=\" =&gt;\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;Goodbye!&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text type=\"break\" /><text value=\"sayHello(\" /><text value=\"&quot;Jon&quot;\" class=\"string\" /><text value=\", sayGoodbye);\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"75\" endIndex=\"86\" /><option startIndex=\"97\" endIndex=\"107\" /><option startIndex=\"158\" endIndex=\"168\" /></options></interaction></interactions><output><content><text value=\"Hello, Jon!\" /><text type=\"break\" /><text value=\"Goodbye!\" /></content></output></code><p visible-if=\"wrong\">Asegúrese de elegir <code>callback();</code> seguido de <code>sayGoodbye</code> y finalmente <code>sayGoodbye</code>.</p></body></html>"
          },
          {
            "title": "Example: Customizing Callbacks",
            "id": 120754,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Completa la invocación de <code>doSomeMath()</code> pasando la función de callback personalizada al segundo parámetro.</p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"function\" class=\"keyword\" /><text value=\" \" /><text value=\"multiplyCallback\" class=\"title\" /><text value=\"(\" /><text value=\"num\" class=\"params\" /><text value=\") \" /><text value=\"{\" /><text type=\"break\" /><text value=\" \" /><text value=\"const\" class=\"keyword\" /><text value=\" result = num * \" /><text value=\"2\" class=\"number\" /><text value=\";\" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"`The input doubled is equal to \" /><text value=\"${result}\" class=\"subst\" /><text value=\"`\" /><text value=\");\" /><text type=\"break\" /><text value=\"}\" /><text type=\"break\" /><text type=\"break\" /><text value=\"function\" class=\"keyword\" /><text value=\" \" /><text value=\"doSomeMath\" class=\"title\" /><text value=\"(\" /><text value=\"input, callback\" class=\"params\" /><text value=\") \" /><text value=\"{\" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;We are doubling the input number.&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\" callback(input);\" /><text type=\"break\" /><text value=\"}\" /><text type=\"break\" /><text value=\"doSomeMath(\" /><text value=\"2\" class=\"number\" /><text value=\", multiplyCallback);\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"242\" endIndex=\"258\" /></options></interaction></interactions><output><content><text value=\"We are doubling the input number.\" /><text type=\"break\" /><text value=\"The input doubled is equal to 4\" /></content></output></code><p visible-if=\"wrong\">Asegúrese de elegir <code>multiplyCallback</code>.</p></body></html>"
          },
          {
            "title": "Example: Asynchronous Callback",
            "id": 120755,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Pasa la función de callback a <code>setTimeout()</code> para completar este código asincrónico.</p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"function\" class=\"keyword\" /><text value=\" \" /><text value=\"callbackFunc\" class=\"title\" /><text value=\"(\" /><text value=\"\" class=\"params\" /><text value=\") \" /><text value=\"{\" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;Executed last because we're using asynchronous code.&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\"}\" /><text type=\"break\" /><text value=\"setTimeout(callbackFunc, \" /><text value=\"1500\" class=\"number\" /><text value=\");\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"'Executed first'\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"'Executed second'\" class=\"string\" /><text value=\");\" /></content><interactions><interaction type=\"validatedInput\" isDefault=\"true\" startIndex=\"109\" endIndex=\"121\" /></interactions></code><p visible-if=\"wrong\">Asegúrese de elegir <code>callbackFunc</code>.</p></body></html>"
          }
        ]
      }
    ]
  }
}