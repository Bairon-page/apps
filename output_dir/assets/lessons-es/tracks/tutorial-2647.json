{
  "tutorial": {
    "id": 2647,
    "version": 4,
    "type": "guidedProjectOptional",
    "isNew": false,
    "codeLanguage": "node",
    "title": "Calculadora",
    "descriptionContent": "Usa Node.JS y Express para crear una calculadora",
    "shortDescriptionContent": "",
    "showInTrack": true,
    "iconBanner": "tutorial-2647-icon-banner.svg",
    "chapters": [
      {
        "id": 14610,
        "title": "Capítulo #1",
        "type": "practiceLevel3",
        "lessons": [
          {
            "title": "Lesson #1",
            "id": 129327,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "En este proyecto, crearemos un servidor de calculadora simple con Express.js.\n\nComencemos configurando nuestro servidor express. Aún no obtendremos una respuesta útil. No te sorprendas.\n\n1. Declara una variable `express` y requiere el módulo `express`.\n2. Declara una variable `app` e inicialízala llamando a la función `express`.\n3. Declara una variable `port` y asígnale el valor `3000`.\n4. Usa la función `listen` en `app` para que la aplicación escuche en el puerto especificado por la variable `port`.\n5. Registra un mensaje en la consola dentro del callback de la función `listen` para que sepamos que nuestro servidor está funcionando correctamente.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "app.js",
                  "codeLanguage": "javascript",
                  "content": "",
                  "solvedContent": "const express = require('express');\nconst app = express();\nconst port = 3000;\n\napp.listen(port, () => {\n  console.log(`Calculator server running on port ${port}`);\n});"
                }
              ],
              "hints": [],
              "httpOptions": {
                "method": "GET",
                "path": "/",
                "body": null
              }
            }
          },
          {
            "title": "Lesson #2",
            "id": 129329,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Ahora, vamos a crear rutas para nuestra calculadora.\n\nComenzaremos con la ruta de suma. Esta ruta sumará dos números proporcionados como parámetros de consulta.\n\n1. Ayudemos a Express a analizar el cuerpo de nuestra solicitud añadiendo `app.use(express.json());` antes de codificar la primera ruta.\n2. Crea un manejador de ruta para una solicitud `POST` a `/add`. En la función de callback, obtén los parámetros de consulta `a` y `b` de `req.body`.\n3. Calcula el resultado de sumar `a` y `b`. Asegúrate de convertirlos a números primero usando `parseFloat`.\n4. Responde con un objeto JSON que contenga una clave `\"result\"` que tenga el resultado como valor.\n5. Establece el código de estado a `200`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "app.js",
                  "codeLanguage": "javascript",
                  "content": "const express = require('express');\nconst app = express();\nconst port = 3000;\n\napp.listen(port, () => {\n  console.log(`Calculator server running on port ${port}`);\n});",
                  "solvedContent": "const express = require('express');\nconst app = express();\nconst port = 3000;\n\napp.listen(port, () => {\n  console.log(`Calculator server running on port ${port}`);\n});\n\napp.use(express.json());\n\napp.post('/add', (req, res) => {\n  const { a, b } = req.body;\n  const result = parseFloat(a) + parseFloat(b);\n  res.status(200).json({ result: result });\n});"
                }
              ],
              "hints": [],
              "httpOptions": {
                "method": "POST",
                "path": "/add",
                "body": "{\"a\": 1, \"b\": 2}"
              }
            }
          },
          {
            "title": "Lesson #3",
            "id": 129330,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "¡Buen trabajo! Ahora hagamos lo mismo para la resta.\n\n1. Crea un manejador de rutas para las solicitudes `POST` a `/subtract`. Usa los mismos pasos que la ruta de suma, pero esta vez resta `b` de `a`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "app.js",
                  "codeLanguage": "javascript",
                  "content": "const express = require('express');\nconst app = express();\nconst port = 3000;\n\napp.listen(port, () => {\n  console.log(`Calculator server running on port ${port}`);\n});\n\napp.use(express.json());\n\napp.post('/add', (req, res) => {\n  const { a, b } = req.body;\n  const result = parseFloat(a) + parseFloat(b);\n  res.status(200).json({ result: result });\n});",
                  "solvedContent": "const express = require('express');\nconst app = express();\nconst port = 3000;\n\napp.listen(port, () => {\n  console.log(`Calculator server running on port ${port}`);\n});\n\napp.use(express.json());\n\napp.post('/add', (req, res) => {\n  const { a, b } = req.body;\n  const result = parseFloat(a) + parseFloat(b);\n  res.status(200).json({ result: result });\n});\n\napp.post('/subtract', (req, res) => {\n  const { a, b } = req.body;\n  const result = parseFloat(a) - parseFloat(b);\n  res.status(200).json({ result: result });\n});"
                }
              ],
              "hints": [],
              "httpOptions": {
                "method": "POST",
                "path": "/subtract",
                "body": "{\"a\": 10, \"b\": 19}"
              }
            }
          },
          {
            "title": "Lesson #4",
            "id": 129331,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "A continuación, vamos a crear una ruta de multiplicación.\n\n1. Crea un manejador de rutas para las solicitudes `POST` a `/multiply`.\n2. En el callback, obtén los valores de `a` y `b` desde `req.body`.\n3. Multiplica `a` y `b` para obtener el resultado.\n4. Devuelve el resultado como lo hiciste en las otras rutas.\n5. Y no olvides establecer el código de estado a `200`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "app.js",
                  "codeLanguage": "javascript",
                  "content": "const express = require('express');\nconst app = express();\nconst port = 3000;\n\napp.listen(port, () => {\n  console.log(`Calculator server running on port ${port}`);\n});\n\napp.use(express.json());\n\napp.post('/add', (req, res) => {\n  const { a, b } = req.body;\n  const result = parseFloat(a) + parseFloat(b);\n  res.status(200).json({ result: result });\n});\n\napp.post('/subtract', (req, res) => {\n  const { a, b } = req.body;\n  const result = parseFloat(a) - parseFloat(b);\n  res.status(200).json({ result: result });\n});",
                  "solvedContent": "const express = require('express');\nconst app = express();\nconst port = 3000;\n\napp.listen(port, () => {\n  console.log(`Calculator server running on port ${port}`);\n});\n\napp.use(express.json());\n\napp.post('/add', (req, res) => {\n  const { a, b } = req.body;\n  const result = parseFloat(a) + parseFloat(b);\n  res.status(200).json({ result: result });\n});\n\napp.post('/subtract', (req, res) => {\n  const { a, b } = req.body;\n  const result = parseFloat(a) - parseFloat(b);\n  res.status(200).json({ result: result });\n});\n\napp.post('/multiply', (req, res) => {\n  const { a, b } = req.body;\n  const result = parseFloat(a) * parseFloat(b);\n  res.status(200).json({ result: result });\n});"
                }
              ],
              "hints": [],
              "httpOptions": {
                "method": "POST",
                "path": "/multiply",
                "body": "{\"a\": -1, \"b\": -5}"
              }
            }
          },
          {
            "title": "Lesson #5",
            "id": 129332,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Finalmente, vamos a crear una ruta de división. Sin embargo, debemos tener cuidado con la división porque no podemos dividir por cero.\n\n1. Crea un manejador de ruta para las solicitudes `POST` a `/divide`.\n2. En el callback, obtén los valores de `a` y `b` desde `req.body`.\n3. Verifica si `b` es cero. Si lo es, responde con un código de estado 400 y un objeto JSON que contenga un mensaje de error.\n4. Si `b` no es cero, divide `a` entre `b` para obtener el resultado y responde con un objeto JSON que contenga el resultado. Aquí, queremos establecer el código de estado a `200`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "app.js",
                  "codeLanguage": "javascript",
                  "content": "const express = require('express');\nconst app = express();\nconst port = 3000;\n\napp.listen(port, () => {\n  console.log(`Calculator server running on port ${port}`);\n});\n\napp.use(express.json());\n\napp.post('/add', (req, res) => {\n  const { a, b } = req.body;\n  const result = parseFloat(a) + parseFloat(b);\n  res.status(200).json({ result: result });\n});\n\napp.post('/subtract', (req, res) => {\n  const { a, b } = req.body;\n  const result = parseFloat(a) - parseFloat(b);\n  res.status(200).json({ result: result });\n});\n\napp.post('/multiply', (req, res) => {\n  const { a, b } = req.body;\n  const result = parseFloat(a) * parseFloat(b);\n  res.status(200).json({ result: result });\n});",
                  "solvedContent": "const express = require('express');\nconst app = express();\nconst port = 3000;\n\napp.listen(port, () => {\n  console.log(`Calculator server running on port ${port}`);\n});\n\napp.use(express.json());\n\napp.post('/add', (req, res) => {\n  const { a, b } = req.body;\n  const result = parseFloat(a) + parseFloat(b);\n  res.status(200).json({ result: result });\n});\n\napp.post('/subtract', (req, res) => {\n  const { a, b } = req.body;\n  const result = parseFloat(a) - parseFloat(b);\n  res.status(200).json({ result: result });\n});\n\napp.post('/multiply', (req, res) => {\n  const { a, b } = req.body;\n  const result = parseFloat(a) * parseFloat(b);\n  res.status(200).json({ result: result });\n});\n\napp.post('/divide', (req, res) => {\n  const { a, b } = req.body;\n  if (parseFloat(b) === 0) {\n    res.status(400).json({ error: 'Division by zero is not allowed' });\n  } else {\n    const result = parseFloat(a) / parseFloat(b);\n    res.status(200).json({ result: result });\n  }\n});"
                }
              ],
              "hints": [],
              "httpOptions": {
                "method": "POST",
                "path": "/divide",
                "body": "{\"a\": 10, \"b\": 5}"
              }
            }
          }
        ]
      }
    ]
  }
}