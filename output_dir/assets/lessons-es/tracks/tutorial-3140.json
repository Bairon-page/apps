{
  "tutorial": {
    "id": 3140,
    "version": 2,
    "type": "guidedProject",
    "isNew": false,
    "codeLanguage": "jsx",
    "title": "Cuadrícula de píxeles - Parte 2",
    "descriptionContent": "En la segunda parte, configurarás el front-end para consumir la API y mostrar la cuadrícula que devuelve el back-end.",
    "shortDescriptionContent": "",
    "showInTrack": true,
    "iconBanner": "tutorial-3140-icon-banner.svg",
    "chapters": [
      {
        "id": 15459,
        "title": "Capítulo #1",
        "type": "practiceLevel3",
        "lessons": [
          {
            "title": "Lesson #1",
            "id": 135919,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Bienvenido a la parte de front-end del proyecto **Pixel Grid**. En esta primera parte del front-end, consumiremos la API y mostraremos la cuadrícula que devuelve el back-end.\n\nComenzaremos creando un componente `PixelGrid` para mostrar la cuadrícula.\n\n1. En el archivo `PixelGrid.jsx`, crea un nuevo componente de React llamado `PixelGrid` que acepte propiedades. Asegúrate de importar `React` y exportar el componente también.\n2. Devuelve un elemento `div` con el `className` establecido como `\"grid\"`.\n3. Dentro del `div`, recorre la propiedad `grid` pasada, que será el array que devuelve la base de datos.\n   - Muestra un `div` por cada elemento en el array `grid` pasado.\n   - Cada elemento renderizado debe tener el `className` establecido como `\"gridItem\"`.\n4. En el archivo `App.jsx`, importa el componente `PixelGrid` y muéstralo. Al renderizarlo, pásale un array con algunos elementos como la propiedad `grid`.",
              "preselectedFileIndex": 4,
              "hasVisualOutput": true,
              "files": [
                {
                  "name": "index.html",
                  "codeLanguage": "html",
                  "content": "<!doctype html>\n<html>\n  <head>\n    <script type=\"module\" src=\"./index.js\"></script>\n    <link rel=\"stylesheet\" href=\"./index.css\" />\n    <title>Pixel Grid</title>\n  </head>\n  <body>\n    <div id=\"root\">loading</div>\n  </body>\n</html>",
                  "solvedContent": null
                },
                {
                  "name": "index.jsx",
                  "codeLanguage": "jsx",
                  "content": "import React from \"react\";\nimport { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nconst root = createRoot(rootElement);\nroot.render(<App />);\n\nexport default App;",
                  "solvedContent": null
                },
                {
                  "name": "App.jsx",
                  "codeLanguage": "jsx",
                  "content": "import React from \"react\";\nimport \"./App.css\";\n\nconst App = () => {\n  return <div></div>;\n};\n\nexport default App;\n",
                  "solvedContent": "import React from \"react\";\nimport \"./App.css\";\nimport PixelGrid from \"./PixelGrid\";\n\nconst App = () => {\n  return (\n    <div>\n      <h1>Pixel Grid</h1>\n      <PixelGrid grid={[1, 2, 3]}/>\n    </div>\n  );\n};\n\nexport default App;\n"
                },
                {
                  "name": "App.css",
                  "codeLanguage": "css",
                  "content": "",
                  "solvedContent": null
                },
                {
                  "name": "PixelGrid.jsx",
                  "codeLanguage": "jsx",
                  "content": "",
                  "solvedContent": "import React from \"react\";\n\nconst PixelGrid = ({ grid }) => {\n  return (\n    <div className=\"grid\">\n      {grid.map((cell) => (\n        <div\n          className=\"gridItem\"\n        ></div>\n      ))}\n    </div>\n  );\n};\n\nexport default PixelGrid;\n"
                },
                {
                  "name": "PixelGrid.css",
                  "codeLanguage": "css",
                  "content": "",
                  "solvedContent": ""
                },
                {
                  "name": "Toolbar.jsx",
                  "codeLanguage": "jsx",
                  "content": "",
                  "solvedContent": null
                },
                {
                  "name": "Toolbar.css",
                  "codeLanguage": "css",
                  "content": "",
                  "solvedContent": null
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Lesson #1 - Copy",
            "id": 135925,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Vamos a estilizar los píxeles para hacerlos visibles.\n\n1. Importa el archivo `PixelGrid.css` en el archivo `PixelGrid.jsx`.\n2. Cambia al archivo `PixelGrid.css` para estilizar la clase `.grid` para mostrar una cuadrícula de 20 por 20 elementos de 20px por 20px:\n   - Establece `display` en `grid`.\n   - Establece `grid-template-columns` en `repeat(20, 20px)`.\n   - Establece `grid-template-rows` en `repeat(20, 20px)`.\n3. Añade otra regla para apuntar a la clase `.gridItem`:\n   - Establece `width` en `20px`.\n   - Establece `height` en `20px`.\n   - Establece `border` en `1px solid lightgray`.",
              "preselectedFileIndex": 4,
              "hasVisualOutput": true,
              "files": [
                {
                  "name": "index.html",
                  "codeLanguage": "html",
                  "content": "<!doctype html>\n<html>\n  <head>\n    <script type=\"module\" src=\"./index.js\"></script>\n    <link rel=\"stylesheet\" href=\"./index.css\" />\n    <title>Pixel Grid</title>\n  </head>\n  <body>\n    <div id=\"root\">loading</div>\n  </body>\n</html>",
                  "solvedContent": null
                },
                {
                  "name": "index.jsx",
                  "codeLanguage": "jsx",
                  "content": "import React from \"react\";\nimport { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nconst root = createRoot(rootElement);\nroot.render(<App />);\n\nexport default App;",
                  "solvedContent": null
                },
                {
                  "name": "App.jsx",
                  "codeLanguage": "jsx",
                  "content": "import React from \"react\";\nimport \"./App.css\";\nimport PixelGrid from \"./PixelGrid\";\n\nconst App = () => {\n  return (\n    <div>\n      <h1>Pixel Grid</h1>\n      <PixelGrid grid={[1, 2, 3]}/>\n    </div>\n  );\n};\n\nexport default App;\n",
                  "solvedContent": null
                },
                {
                  "name": "App.css",
                  "codeLanguage": "css",
                  "content": "",
                  "solvedContent": null
                },
                {
                  "name": "PixelGrid.jsx",
                  "codeLanguage": "jsx",
                  "content": "import React from \"react\";\n\nconst PixelGrid = ({ grid }) => {\n  return (\n    <div className=\"grid\">\n      {grid.map((cell) => (\n        <div\n          className=\"gridItem\"\n        ></div>\n      ))}\n    </div>\n  );\n};\n\nexport default PixelGrid;\n",
                  "solvedContent": "import React from \"react\";\nimport \"./PixelGrid.css\";\n\nconst PixelGrid = ({ grid }) => {\n  return (\n    <div className=\"grid\">\n      {grid.map((cell) => (\n        <div\n          className=\"gridItem\"\n        ></div>\n      ))}\n    </div>\n  );\n};\n\nexport default PixelGrid;\n"
                },
                {
                  "name": "PixelGrid.css",
                  "codeLanguage": "css",
                  "content": "",
                  "solvedContent": ".grid {\n  display: grid;\n  grid-template-columns: repeat(20, 20px);\n  grid-template-rows: repeat(20, 20px);\n}\n\n.gridItem {\n  width: 20px;\n  height: 20px;\n  border: 1px solid lightgray;\n}\n"
                },
                {
                  "name": "Toolbar.jsx",
                  "codeLanguage": "jsx",
                  "content": "",
                  "solvedContent": null
                },
                {
                  "name": "Toolbar.css",
                  "codeLanguage": "css",
                  "content": "",
                  "solvedContent": null
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Lesson #2",
            "id": 135920,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Vamos a hacer que la magia suceda conectando el front-end con el back-end. Primero, necesitaremos obtener los datos para que nuestra app pueda mostrarlos. Por ahora, esos son solo píxeles blancos. ¡Pero oye, ya los cargamos desde nuestro back-end!\n\nDurante el proyecto guiado, puedes usar `process.env.BACKEND_URL` como el back-end. Este back-end funciona mientras trabajas en el proyecto guiado. Después, puedes continuar construyendo usando la URL pública disponible desde tu propio servidor en Mimo.\n\n1. En `App.jsx`, importa `useEffect` y `useState` de React.\n2. Crea una variable de estado llamada `grid` usando `useState` e inicialízala como un array vacío.\n3. Usa `useEffect` para hacer una solicitud GET al endpoint `\"/grid\"` del back-end. Establece el resultado en la variable de estado `grid`.\n4. En caso de un error, captúralo y regístralo en la consola.\n5. Pasa la variable de estado `grid` al componente `PixelGrid` en lugar del array definido anteriormente. Si haces eso, deberías ver la cuadrícula de 20 por 20.",
              "preselectedFileIndex": 2,
              "hasVisualOutput": true,
              "files": [
                {
                  "name": "index.html",
                  "codeLanguage": "html",
                  "content": "<!doctype html>\n<html>\n  <head>\n    <script type=\"module\" src=\"./index.js\"></script>\n    <link rel=\"stylesheet\" href=\"./index.css\" />\n    <title>Pixel Grid</title>\n  </head>\n  <body>\n    <div id=\"root\">loading</div>\n  </body>\n</html>",
                  "solvedContent": null
                },
                {
                  "name": "index.jsx",
                  "codeLanguage": "jsx",
                  "content": "import React from \"react\";\nimport { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nconst root = createRoot(rootElement);\nroot.render(<App />);\n\nexport default App;",
                  "solvedContent": null
                },
                {
                  "name": "App.jsx",
                  "codeLanguage": "jsx",
                  "content": "import React from \"react\";\nimport \"./App.css\";\nimport PixelGrid from \"./PixelGrid\";\n\nconst App = () => {\n  return (\n    <div>\n      <h1>Pixel Grid</h1>\n      <PixelGrid grid={[1, 2, 3]} />\n    </div>\n  );\n};\n\nexport default App;\n",
                  "solvedContent": "import React, { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport PixelGrid from \"./PixelGrid\";\n\nconst URL = process.env.BACKEND_URL;\n\nconst App = () => {\n  const [grid, setGrid] = useState([]);\n\n  useEffect(() => {\n    fetch(`${URL}/grid`)\n      .then((response) => response.json())\n      .then((data) => setGrid(data.grid))\n      .catch((error) => console.error(\"Error fetching grid data:\", error));\n  }, []);\n\n  return (\n    <div>\n      <h1>Pixel Grid</h1>\n      <PixelGrid grid={grid} />\n    </div>\n  );\n};\n\nexport default App;\n"
                },
                {
                  "name": "App.css",
                  "codeLanguage": "css",
                  "content": "",
                  "solvedContent": null
                },
                {
                  "name": "PixelGrid.jsx",
                  "codeLanguage": "jsx",
                  "content": "import React from \"react\";\nimport \"./PixelGrid.css\";\n\nconst PixelGrid = ({ grid }) => {\n  return (\n    <div className=\"grid\">\n      {grid.map((cell) => (\n        <div\n          className=\"gridItem\"\n        ></div>\n      ))}\n    </div>\n  );\n};\n\nexport default PixelGrid;\n",
                  "solvedContent": null
                },
                {
                  "name": "PixelGrid.css",
                  "codeLanguage": "css",
                  "content": ".grid {\n  display: grid;\n  grid-template-columns: repeat(20, 20px);\n  grid-template-rows: repeat(20, 20px);\n}\n\n.gridItem {\n  width: 20px;\n  height: 20px;\n  border: 1px solid lightgray;\n}\n",
                  "solvedContent": null
                },
                {
                  "name": "Toolbar.jsx",
                  "codeLanguage": "jsx",
                  "content": "",
                  "solvedContent": null
                },
                {
                  "name": "Toolbar.css",
                  "codeLanguage": "css",
                  "content": "",
                  "solvedContent": null
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Lesson #2 - Copy",
            "id": 135935,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Dado que ahora tenemos los 400 píxeles completos para mostrar, vamos a añadir más estilo para optimizar la cuadrícula para dispositivos móviles.\n\n1. En el archivo `PixelGrid.css`, añade una media query para apuntar a archivos con un ancho máximo de 440px.\n2. Apunta a la clase `.grid` dentro de la media query:\n   - Establece `grid-template-columns` a `repeat(20, 4vw)`.\n   - Establece `grid-template-rows` a `repeat(20, 4vw)`.\n3. Añade otra regla para apuntar a la clase `.gridItem` dentro de la media query:\n   - Establece `width` a `4vw`.\n   - Establece `height` a `4vw`.",
              "preselectedFileIndex": 5,
              "hasVisualOutput": true,
              "files": [
                {
                  "name": "index.html",
                  "codeLanguage": "html",
                  "content": "<!doctype html>\n<html>\n  <head>\n    <script type=\"module\" src=\"./index.js\"></script>\n    <link rel=\"stylesheet\" href=\"./index.css\" />\n    <title>Pixel Grid</title>\n  </head>\n  <body>\n    <div id=\"root\">loading</div>\n  </body>\n</html>",
                  "solvedContent": null
                },
                {
                  "name": "index.jsx",
                  "codeLanguage": "jsx",
                  "content": "import React from \"react\";\nimport { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nconst root = createRoot(rootElement);\nroot.render(<App />);\n\nexport default App;",
                  "solvedContent": null
                },
                {
                  "name": "App.jsx",
                  "codeLanguage": "jsx",
                  "content": "import React, { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport PixelGrid from \"./PixelGrid\";\n\nconst URL = process.env.BACKEND_URL;\n\nconst App = () => {\n  const [grid, setGrid] = useState([]);\n\n  useEffect(() => {\n    fetch(`${URL}/grid`)\n      .then((response) => response.json())\n      .then((data) => setGrid(data.grid))\n      .catch((error) => console.error(\"Error fetching grid data:\", error));\n  }, []);\n\n  return (\n    <div>\n      <h1>Pixel Grid</h1>\n      <PixelGrid grid={grid} />\n    </div>\n  );\n};\n\nexport default App;\n",
                  "solvedContent": null
                },
                {
                  "name": "App.css",
                  "codeLanguage": "css",
                  "content": "",
                  "solvedContent": null
                },
                {
                  "name": "PixelGrid.jsx",
                  "codeLanguage": "jsx",
                  "content": "import React from \"react\";\nimport \"./PixelGrid.css\";\n\nconst PixelGrid = ({ grid }) => {\n  return (\n    <div className=\"grid\">\n      {grid.map((cell) => (\n        <div\n          className=\"gridItem\"\n        ></div>\n      ))}\n    </div>\n  );\n};\n\nexport default PixelGrid;\n",
                  "solvedContent": null
                },
                {
                  "name": "PixelGrid.css",
                  "codeLanguage": "css",
                  "content": ".grid {\n  display: grid;\n  grid-template-columns: repeat(20, 20px);\n  grid-template-rows: repeat(20, 20px);\n}\n\n.gridItem {\n  width: 20px;\n  height: 20px;\n  border: 1px solid lightgray;\n}\n",
                  "solvedContent": ".grid {\n  display: grid;\n  grid-template-columns: repeat(20, 20px);\n  grid-template-rows: repeat(20, 20px);\n}\n\n.gridItem {\n  width: 20px;\n  height: 20px;\n  border: 1px solid lightgray;\n}\n\n@media (max-width: 440px) {\n  .grid {\n    grid-template-columns: repeat(20, 4vw);\n    grid-template-rows: repeat(20, 4vw);\n  }\n\n  .gridItem {\n    width: 4vw;\n    height: 4vw;\n  }\n}\n"
                },
                {
                  "name": "Toolbar.jsx",
                  "codeLanguage": "jsx",
                  "content": "",
                  "solvedContent": null
                },
                {
                  "name": "Toolbar.css",
                  "codeLanguage": "css",
                  "content": "",
                  "solvedContent": null
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Lesson #3",
            "id": 135921,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Actualicemos nuestro componente `PixelGrid` para renderizar cada celda de la cuadrícula con su color respectivo. Cada píxel seguirá siendo blanco ya que el back-end inició cada píxel con un color blanco. ¡Pronto habilitaremos el front-end para cambiar el color también!\n\n1. En el componente `PixelGrid`, al iterar sobre la propiedad `grid` pasada, establece la propiedad `key` y añade una propiedad `style`.\n   - Establece la propiedad `key` a algo único, como el índice o una combinación de los valores x e y del elemento.\n   - Establece el `backgroundColor` al valor de la propiedad `color` del elemento.\n   - Establece el `gridColumnStart` al valor `x` `+ 1` del elemento.\n   - Establece el `gridRowStart` al valor `y` `+ 1` del elemento.",
              "preselectedFileIndex": 4,
              "hasVisualOutput": true,
              "files": [
                {
                  "name": "index.html",
                  "codeLanguage": "html",
                  "content": "<!doctype html>\n<html>\n  <head>\n    <script type=\"module\" src=\"./index.js\"></script>\n    <link rel=\"stylesheet\" href=\"./index.css\" />\n    <title>Pixel Grid</title>\n  </head>\n  <body>\n    <div id=\"root\">loading</div>\n  </body>\n</html>",
                  "solvedContent": null
                },
                {
                  "name": "index.jsx",
                  "codeLanguage": "jsx",
                  "content": "import React from \"react\";\nimport { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nconst root = createRoot(rootElement);\nroot.render(<App />);\n\nexport default App;",
                  "solvedContent": null
                },
                {
                  "name": "App.jsx",
                  "codeLanguage": "jsx",
                  "content": "import React, { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport PixelGrid from \"./PixelGrid\";\n\nconst URL = process.env.BACKEND_URL;\n\nconst App = () => {\n  const [grid, setGrid] = useState([]);\n\n  useEffect(() => {\n    fetch(`${URL}/grid`)\n      .then((response) => response.json())\n      .then((data) => setGrid(data.grid))\n      .catch((error) => console.error(\"Error fetching grid data:\", error));\n  }, []);\n\n  return (\n    <div>\n      <h1>Pixel Grid</h1>\n      <PixelGrid grid={grid} />\n    </div>\n  );\n};\n\nexport default App;\n",
                  "solvedContent": null
                },
                {
                  "name": "App.css",
                  "codeLanguage": "css",
                  "content": "",
                  "solvedContent": null
                },
                {
                  "name": "PixelGrid.jsx",
                  "codeLanguage": "jsx",
                  "content": "import React from \"react\";\nimport \"./PixelGrid.css\";\n\nconst PixelGrid = ({ grid }) => {\n  return (\n    <div className=\"grid\">\n      {grid.map((cell) => (\n        <div\n          className=\"gridItem\"\n        ></div>\n      ))}\n    </div>\n  );\n};\n\nexport default PixelGrid;\n",
                  "solvedContent": "import React from \"react\";\nimport \"./PixelGrid.css\";\n\nconst PixelGrid = ({ grid }) => {\n  return (\n    <div className=\"grid\">\n      {grid.map((cell) => (\n        <div\n          key={`${cell.x}-${cell.y}`}\n          className=\"gridItem\"\n          style={{\n            backgroundColor: cell.color,\n            gridColumnStart: cell.x + 1,\n            gridRowStart: cell.y + 1,\n          }}\n        ></div>\n      ))}\n    </div>\n  );\n};\n\nexport default PixelGrid;\n"
                },
                {
                  "name": "PixelGrid.css",
                  "codeLanguage": "css",
                  "content": ".grid {\n  display: grid;\n  grid-template-columns: repeat(20, 20px);\n  grid-template-rows: repeat(20, 20px);\n}\n\n.gridItem {\n  width: 20px;\n  height: 20px;\n  border: 1px solid lightgray;\n}\n\n@media (max-width: 440px) {\n  .grid {\n    grid-template-columns: repeat(20, 4vw);\n    grid-template-rows: repeat(20, 4vw);\n  }\n\n  .gridItem {\n    width: 4vw;\n    height: 4vw;\n  }\n}\n",
                  "solvedContent": null
                },
                {
                  "name": "Toolbar.jsx",
                  "codeLanguage": "jsx",
                  "content": "",
                  "solvedContent": null
                },
                {
                  "name": "Toolbar.css",
                  "codeLanguage": "css",
                  "content": "",
                  "solvedContent": null
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Lesson #4",
            "id": 135922,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Por último, queremos agregar algunos estilos generales de CSS para que la aplicación sea visualmente atractiva.\n\n1. Importa el archivo `App.css` en el archivo `App.jsx`.\n2. Asegúrate de que el elemento de nivel superior que el componente `App` renderiza sea un `div` con la clase `\"content-wrapper\"`, que contiene el componente `PixlGrid`.\n2. Cambia al archivo `App.css` para crear una regla que apunte a `html`, `body` y la clase `.content-wrapper`:\n   - Establece `height` en `100%`.\n   - Establece `display` en `flex`.\n   - Establece `flex-direction` en `column`.\n   - Establece `justify-content` en `center`.\n   - Establece `align-items` en `center`.",
              "preselectedFileIndex": 2,
              "hasVisualOutput": true,
              "files": [
                {
                  "name": "index.html",
                  "codeLanguage": "html",
                  "content": "<!doctype html>\n<html>\n  <head>\n    <script type=\"module\" src=\"./index.js\"></script>\n    <link rel=\"stylesheet\" href=\"./index.css\" />\n    <title>Pixel Grid</title>\n  </head>\n  <body>\n    <div id=\"root\">loading</div>\n  </body>\n</html>\n",
                  "solvedContent": null
                },
                {
                  "name": "index.jsx",
                  "codeLanguage": "jsx",
                  "content": "import React from \"react\";\nimport { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nconst root = createRoot(rootElement);\nroot.render(<App />);\n\nexport default App;",
                  "solvedContent": null
                },
                {
                  "name": "App.jsx",
                  "codeLanguage": "jsx",
                  "content": "import React, { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport PixelGrid from \"./PixelGrid\";\n\nconst URL = process.env.BACKEND_URL;\n\nconst App = () => {\n  const [grid, setGrid] = useState([]);\n\n  useEffect(() => {\n    fetch(`${URL}/grid`)\n      .then((response) => response.json())\n      .then((data) => setGrid(data.grid))\n      .catch((error) => console.error(\"Error fetching grid data:\", error));\n  }, []);\n\n  return (\n    <div>\n      <h1>Pixel Grid</h1>\n      <PixelGrid grid={grid} />\n    </div>\n  );\n};\n\nexport default App;\n",
                  "solvedContent": "import React, { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport PixelGrid from \"./PixelGrid\";\n\nconst URL = process.env.BACKEND_URL;\n\nconst App = () => {\n  const [grid, setGrid] = useState([]);\n\n  useEffect(() => {\n    fetch(`${URL}/grid`)\n      .then((response) => response.json())\n      .then((data) => setGrid(data.grid))\n      .catch((error) => console.error(\"Error fetching grid data:\", error));\n  }, []);\n\n  return (\n    <div className=\"content-wrapper\">\n      <h1>Pixel Grid</h1>\n      <PixelGrid grid={grid} />\n    </div>\n  );\n};\n\nexport default App;\n"
                },
                {
                  "name": "App.css",
                  "codeLanguage": "css",
                  "content": "",
                  "solvedContent": "html,\nbody,\n.content-wrapper {\n  height: 100%;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n}\n"
                },
                {
                  "name": "PixelGrid.jsx",
                  "codeLanguage": "jsx",
                  "content": "import React from \"react\";\nimport \"./PixelGrid.css\";\n\nconst PixelGrid = ({ grid }) => {\n  return (\n    <div className=\"grid\">\n      {grid.map((cell) => (\n        <div\n          key={`${cell.x}-${cell.y}`}\n          className=\"gridItem\"\n          style={{\n            backgroundColor: cell.color,\n            gridColumnStart: cell.x + 1,\n            gridRowStart: cell.y + 1,\n          }}\n        ></div>\n      ))}\n    </div>\n  );\n};\n\nexport default PixelGrid;\n",
                  "solvedContent": null
                },
                {
                  "name": "PixelGrid.css",
                  "codeLanguage": "css",
                  "content": ".grid {\n  display: grid;\n  grid-template-columns: repeat(20, 20px);\n  grid-template-rows: repeat(20, 20px);\n}\n\n.gridItem {\n  width: 20px;\n  height: 20px;\n  border: 1px solid lightgray;\n}\n\n@media (max-width: 440px) {\n  .grid {\n    grid-template-columns: repeat(20, 4vw);\n    grid-template-rows: repeat(20, 4vw);\n  }\n\n  .gridItem {\n    width: 4vw;\n    height: 4vw;\n  }\n}\n",
                  "solvedContent": null
                },
                {
                  "name": "Toolbar.jsx",
                  "codeLanguage": "jsx",
                  "content": "",
                  "solvedContent": null
                },
                {
                  "name": "Toolbar.css",
                  "codeLanguage": "css",
                  "content": "",
                  "solvedContent": null
                }
              ],
              "hints": []
            }
          }
        ]
      }
    ]
  }
}