{
  "tutorial": {
    "id": 1798,
    "version": 11,
    "type": "challenges",
    "isNew": false,
    "codeLanguage": "javascript",
    "title": "Clases de JavaScript",
    "descriptionContent": "Los desafíos son ejercicios más difíciles que pondrán a prueba tus habilidades.",
    "shortDescriptionContent": "",
    "showInTrack": true,
    "iconBanner": "tutorial-1798-icon-banner.svg",
    "chapters": [
      {
        "id": 11990,
        "title": "Instancia de Car",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "Car Instance",
            "id": 109261,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Usando la clase `Car` del desafío anterior, construyamos una nueva instancia de esa clase.\n\n1. Crea un nuevo objeto llamado `myCar` y especifica que es un coche construido en `2021`, con un motor `V8`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "index.js",
                  "codeLanguage": "javascript",
                  "content": "class Car {\r\n constructor(year, engine) {\r\n  this.year = year;\r\n  this.engine = engine;\r\n }\r\n}",
                  "solvedContent": "class Car {\r\n constructor(year, engine) {\r\n  this.year = year;\r\n  this.engine = engine;\r\n }\r\n}\r\nconst myCar = new Car(2021, 'V8');"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 11986,
        "title": "Detalles del coche antiguo",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "Old Timer Car Details",
            "id": 109259,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Continuemos desde el desafío anterior usando la clase `Car`.\n\n1. Crea una instancia de la clase `Car`. Nombra la instancia `oldTimer`. Este coche fue construido en `1980`, y tiene un motor `diesel`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "index.js",
                  "codeLanguage": "javascript",
                  "content": "class Car {\r\n constructor(year, engine) {\r\n  this.year = year;\r\n  this.engine = engine;\r\n }\r\n}\r\nconst myCar = new Car(2021, 'V8');",
                  "solvedContent": "class Car {\r\n constructor(year, engine) {\r\n  this.year = year;\r\n  this.engine = engine;\r\n }\r\n}\r\nconst myCar = new Car(2021, 'V8');\r\nconst oldTimer = new Car(1980, 'diesel');"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 11987,
        "title": "Clase de Vehículo",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "Vehicle Class",
            "id": 109258,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Vamos a crear una clase nueva.\n\n1. Crea una clase llamada `Vehicle`.\n2. Programa la clase `Vehicle` para que acepte tres parámetros en el constructor: `year`, `mileage`, `speed`.\n3. Asigna los parámetros a las propiedades correctas dentro del constructor, usando la palabra clave `this`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "index.js",
                  "codeLanguage": "javascript",
                  "content": "class Vehicle",
                  "solvedContent": "class Vehicle {\n constructor(year, mileage, speed) {\n  this.year = year;\n  this.mileage = mileage;\n  this.speed = speed;\n }\n}"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 11984,
        "title": "Heredar propiedades",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "Inheriting properties",
            "id": 109255,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Vamos a crear otra clase que hereda propiedades de una superclase.\n\n1. Crea una nueva clase y nómbrala: `Boat`.\n2. Programa la clase `Boat` para que herede todas las propiedades de la clase `Vehicle`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "index.js",
                  "codeLanguage": "javascript",
                  "content": "class Vehicle {\r\n constructor(year, mileage, speed) {\r\n  this.year = year;\r\n  this.mileage = mileage;\r\n  this.speed = speed;\r\n }\r\n}\r\nclass {\r\n\r\n\r\n\r\n}",
                  "solvedContent": "class Vehicle {\r\n constructor(year, mileage, speed) {\r\n  this.year = year;\r\n  this.mileage = mileage;\r\n  this.speed = speed;\r\n }\r\n}\r\nclass Boat extends Vehicle {\r\n constructor(year, mileage, speed) {\r\n  super(year, mileage, speed);\r\n }\r\n}"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 11982,
        "title": "Agregar método a una clase",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "Add method to a class",
            "id": 109256,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Agreguemos un método a una clase.\n\n1. Actualiza la superclase `Vehicle` con un método llamado `turnOn`. Dentro del método `turnOn`, ejecuta `console.log(\"It's on!\")`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "index.js",
                  "codeLanguage": "javascript",
                  "content": "class Vehicle {\n constructor(year, mileage, speed) {\n  this.year = year;\n  this.mileage = mileage;\n  this.speed = speed;\n }\n}\nclass Boat extends Vehicle {\n constructor(year, mileage, speed) {\n  super(year, mileage, speed);\n }\n}\n",
                  "solvedContent": "class Vehicle {\n constructor(year, mileage, speed) {\n  this.year = year;\n  this.mileage = mileage;\n  this.speed = speed;\n }\n turnOn() {\n  console.log(\"It's on!\");\n }\n}\nclass Boat extends Vehicle {\n constructor(year, mileage, speed) {\n  super(year, mileage, speed);\n }\n}\n"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 11983,
        "title": "Sobrescribir método en subclase",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "Overriding method in method in sub-class",
            "id": 109262,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Hay un único método en la superclase. Ahora vamos a sobrescribir ese método en la subclase.\n\n1. Actualiza la subclase `Boat` con un método llamado `turnOn`.\n2. Dentro del método `turnOn`, usa `console.log()` para mostrar la propiedad `this.message`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "index.js",
                  "codeLanguage": "javascript",
                  "content": "class Vehicle {\n constructor(year, mileage, speed) {\n  this.year = year;\n  this.mileage = mileage;\n  this.speed = speed;\n }\n turnOn() {\n  console.log(\"It's on!\");\n }\n}\nclass Boat extends Vehicle {\n constructor(year, mileage, speed) {\n  super(year, mileage, speed);\n  this.message = \"Sailing!\";\n }\n}",
                  "solvedContent": "class Vehicle {\n constructor(year, mileage, speed) {\n  this.year = year;\n  this.mileage = mileage;\n  this.speed = speed;\n }\n turnOn() {\n  console.log(\"It's on!\");\n }\n}\nclass Boat extends Vehicle {\n constructor(year, mileage, speed) {\n  super(year, mileage, speed);\n  this.message = \"Sailing!\";\n }\n turnOn() {\n  console.log(this.message);\n }\n}"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 11991,
        "title": "Juego de estrategia espacial 1",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "Space strategy game",
            "id": 109254,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Estamos construyendo un juego de estrategia espacial. Necesitamos codificar la clase `Character`, luego extenderla con `Earthling`, y después extender esa subclase con otra llamada `Builder`.\n\n1. Añade a la clase `Character` un único parámetro, `health`.\n2. Haz que la subclase `Earthling` herede el parámetro `health` de `Character`.\n3. Añade un nuevo parámetro a `Earthling` y nómbralo: `iq`.\n4. Crea una subclase llamada `Builder` y hereda todas las propiedades de la clase `Earthling`.\n5. Añade un parámetro a la clase `Builder`. Nombra el parámetro: `tool`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "index.js",
                  "codeLanguage": "javascript",
                  "content": "class Character {\n}\nclass Earthling extends Character {\n constructor(health) {}\n}",
                  "solvedContent": "class Character {\n constructor(health) {\n  this.health = health;\n }\n}\nclass Earthling extends Character {\n constructor(health, iq) {\n  super(health);\n  this.iq = iq;\n }\n}\nclass Builder extends Earthling {\n constructor(health, iq, tool) {\n  super(health, iq);\n  this.tool = tool;\n }\n}"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 11985,
        "title": "Juego de estrategia espacial 2",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "Challenge #8: Hard",
            "id": 109253,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Todavía estamos construyendo nuestro juego de estrategia espacial. Necesitamos programar la clase `Vehicle`, y luego crear dos subclases: `Spaceship` y `MoonBuggy`.\n\n1. Incluye un único parámetro, `fuel` en la clase `Vehicle`.\n2. Haz que la subclase `Spaceship` herede el parámetro `fuel` de `Vehicle`.\n3. Añade un nuevo parámetro a `Spaceship`, y llámalo `speed`.\n4. Crea una subclase llamada `MoonBuggy` que herede el parámetro `fuel` de `Vehicle`.\n5. Añade el parámetro `doors` a la clase `MoonBuggy`. Después de todo, necesitamos puertas en un moon buggy.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "index.js",
                  "codeLanguage": "javascript",
                  "content": "class Vehicle {\n\n}\nclass Spaceship extends Vehicle {\n\n}",
                  "solvedContent": "class Vehicle {\n constructor(fuel) {\n  this.fuel = fuel;\n }\n}\nclass Spaceship extends Vehicle {\n constructor(fuel, speed) {\n  super(fuel);\n  this.speed = speed;\n }\n}\nclass MoonBuggy extends Vehicle {\n constructor(fuel, doors) {\n  super(fuel);\n  this.doors = doors;\n }\n}"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 11989,
        "title": "Juego de estrategia espacial 3",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "Challenge #9: Hard",
            "id": 109263,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Estamos ampliando las clases en nuestro juego de estrategia espacial con algunos comportamientos, como métodos.\n\n1. En `Vehicle`, añade alguna nueva funcionalidad. Llámala `turnOn`, y haz que `console.log` esta cadena: `Engine on`.\n2. En la subclase `Spaceship`, hereda la funcionalidad del método `turnOn`, y luego extiéndela haciendo un console log de `Hyperspace engine on`.\n3. Construye un nuevo `Vehicle` llamado `firstPrototype`, y establece su valor de `fuel` en `100`.\n4. Construye un nuevo objeto `Spaceship` llamado `endeavor`, y establece su valor de `fuel` en `100` y su velocidad en `fast`.\n5. Llama al método `turnOn` en el `firstPrototype`.\n6. Llama al método `turnOn` en el `endeavor`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "index.js",
                  "codeLanguage": "javascript",
                  "content": "class Vehicle {\n constructor(fuel) {\n  this.fuel = fuel;\n }\n\n}\nclass Spaceship extends Vehicle {\n constructor(fuel, speed) {\n  super(fuel);\n  this.speed = speed;\n }\n\n}\n\n\n\n",
                  "solvedContent": "class Vehicle {\n constructor(fuel) {\n  this.fuel = fuel;\n }\n turnOn() {\n  console.log('Engine on');\n }\n}\nclass Spaceship extends Vehicle {\n constructor(fuel, speed) {\n  super(fuel);\n  this.speed = speed;\n }\n turnOn() {\n  super.turnOn();\n  console.log('Hyperspace engine on');\n }\n}\nconst firstPrototype = new Vehicle(100);\nconst endeavor = new Spaceship(100, 'fast');\nfirstPrototype.turnOn();\nendeavor.turnOn();"
                }
              ],
              "hints": []
            }
          }
        ]
      }
    ]
  }
}