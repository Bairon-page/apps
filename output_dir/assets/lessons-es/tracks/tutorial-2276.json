{
  "tutorial": {
    "id": 2276,
    "version": 1,
    "type": "practiceOptional",
    "isNew": false,
    "codeLanguage": "javascript",
    "title": "Clases de JavaScript 2",
    "descriptionContent": "Clases de JavaScript 2",
    "shortDescriptionContent": "",
    "showInTrack": true,
    "iconBanner": null,
    "chapters": [
      {
        "id": 11920,
        "title": "Extender Clases",
        "type": "practiceLevel3",
        "lessons": [
          {
            "title": "Code: Extends",
            "id": 108780,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Crea una clase `Rose` vacía que herede de la clase `Flower`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "class Flower {\n constructor(color) {\n  this.color = color;\n }\n}",
                  "solvedContent": "class Flower {\n constructor(color) {\n  this.color = color;\n }\n}\nclass Rose extends Flower {}"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Code: Property inheritance",
            "id": 108781,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Crea una constante llamada `MUSHU` que sea una instancia de la clase `Dragon`. Incluye `true` como el valor de la propiedad `isGood`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "class Creature {\n constructor(isGood) {\n  this.isGood = isGood;\n }\n}\nclass Dragon extends Creature {}",
                  "solvedContent": "class Creature {\n constructor(isGood) {\n  this.isGood = isGood;\n }\n}\nclass Dragon extends Creature {}\nconst MUSHU = new Dragon(true);"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Code: Subclass and superclass",
            "id": 108782,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Crea una clase `Blender` que extienda `Appliance`. Crea una nueva instancia de `Blender` y guárdala en una constante llamada `blender`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "class Appliance {\n constructor() {\n  this.volts = 120;\n }\n}\nclass Toaster extends Appliance {}\n\nconst toaster = new Toaster();\n\nconsole.log(toaster);",
                  "solvedContent": "class Appliance {\n constructor() {\n  this.volts = 120;\n }\n}\nclass Toaster extends Appliance {}\nclass Blender extends Appliance {}\nconst toaster = new Toaster();\nconst blender = new Blender();\nconsole.log(toaster);"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Code: Constructor inheritance",
            "id": 108787,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Crea una clase `Dollar` que extienda `Currency`. Crea una nueva instancia de `Dollar` donde el símbolo sea `$`. Guárdala en una constante llamada `dollar`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "class Currency {\n constructor(symbol) {\n  this.symbol = symbol;\n }\n}\nclass Yen extends Currency {}\nconst yen = new Yen(\"Y\");\nconsole.log(yen);\nconsole.log(dollar);",
                  "solvedContent": "class Currency {\n constructor(symbol) {\n  this.symbol = symbol;\n }\n}\nclass Yen extends Currency {}\nclass Dollar extends Currency {}\nconst yen = new Yen(\"Y\");\nconst dollar = new Dollar(\"$\");\nconsole.log(yen);\nconsole.log(dollar);"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Code: Method inheritance",
            "id": 108784,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Crea una clase `Drill` que extienda `Tool`. Crea una nueva instancia de `Drill` con la acción `drill`. Guárdala en una constante llamada `tool1`. Llama al método `use`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "class Tool {\n constructor(action) {\n  this.action = action;\n }\n use() {\n  console.log(\"Starting to \" + this.action);\n }\n}",
                  "solvedContent": "class Tool {\n constructor(action) {\n  this.action = action;\n }\n use() {\n  console.log(\"Starting to \" + this.action);\n }\n}\nclass Drill extends Tool {}\nconst tool1 = new Drill(\"drill\");\ntool1.use();"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Code: Multiple subclasses",
            "id": 108785,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Crea una clase `Python` que extienda `ProgrammingLanguage`. Crea una constante `lang2` que almacene una nueva instancia de `Python` donde `usesCurlies` es `false`. Llama al método `compile`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "class ProgrammingLanguage {\n constructor(usesCurlies) {\n  this.usesCurlies = usesCurlies;\n }\n compile() {\n  console.log(\"Compiling, curlies: \" + this.usesCurlies);\n }\n}\nclass Java extends ProgrammingLanguage {}\nconst lang1 = new Java(true);\nlang1.compile();",
                  "solvedContent": "class ProgrammingLanguage {\n constructor(usesCurlies) {\n  this.usesCurlies = usesCurlies;\n }\n compile() {\n  console.log(\"Compiling, curlies: \" + this.usesCurlies);\n }\n}\nclass Java extends ProgrammingLanguage {}\nclass Python extends ProgrammingLanguage {}\nconst lang1 = new Java(true);\nlang1.compile();\nconst lang2 = new Python(false);\nlang2.compile();"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Code: Additional functionality",
            "id": 108786,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Agrega un método `train()` a la clase `GymTeacher`, alrededor de la declaración de visualización. Crea una constante `teacher` que guarde una nueva instancia de `GymTeacher` con `8` estudiantes. Llama al método `train`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "class Teacher {\n constructor(students) {\n  this.students = students;\n }\n grade() {\n  console.log(\"Everyone gets an A\");\n }\n}\nclass ScienceTeacher extends Teacher {\n doLab() {\n  console.log(\"Don't burn the school down.\");\n }\n}\nclass GymTeacher extends Teacher {\n console.log(\"Time to run laps.\");\n}",
                  "solvedContent": "class Teacher {\n constructor(students) {\n  this.students = students;\n }\n grade() {\n  console.log(\"Everyone gets an A\");\n }\n}\nclass ScienceTeacher extends Teacher {\n doLab() {\n  console.log(\"Don't burn the school down.\");\n }\n}\nclass GymTeacher extends Teacher {\n train() {\n  console.log(\"Time to run laps.\");\n }\n}\nconst teacher = new GymTeacher();\nteacher.train();"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 11956,
        "title": "Sobrescribir métodos",
        "type": "practiceLevel3",
        "lessons": [
          {
            "title": "Code: Overriding methods",
            "id": 109205,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Anula el método `pet()` de la clase `Animal` colocando el `console.log(\"Prrrr\")` de la clase `Cat` dentro de un método `pet()`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "class Animal {\n pet() {\n  console.log(\"growl\");\n }\n}\nclass Cat extends Animal {\n console.log(\"Prrrr\");\n}\nconst mindy = new Cat();\nmindy.pet();",
                  "solvedContent": "class Animal {\n pet() {\n  console.log(\"growl\");\n }\n}\nclass Cat extends Animal {\n pet() {\n  console.log(\"Prrrr\");\n }\n}\nconst mindy = new Cat();\nmindy.pet();"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Code: Overriding methods 2",
            "id": 109202,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Coloca el código `console.log(\"Interview witnesses\")` en un método `duty()`. Llama al método `duty()` de la constante `sherlock`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "class Officer {\n duty() {\n  console.log(\"Protect and serve.\");\n }\n}\nclass Detective extends Officer {\n console.log(\"Interview witnesses\");\n}\nconst sherlock = new Detective();",
                  "solvedContent": "class Officer {\n duty() {\n  console.log(\"Protect and serve.\");\n }\n}\nclass Detective extends Officer {\n duty() {\n  console.log(\"Interview witnesses\");\n }\n}\nconst sherlock = new Detective();\nsherlock.duty();"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Code: Overriding methods 3",
            "id": 109203,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Crea una instancia de `Bench` y guárdala en una constante llamada `exercise1`. Crea una instancia de `Squat` y guárdala en una constante llamada `exercise2`. Llama al método `sets()` en `bench` y `squat`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "class Workout {\n sets() {\n  console.log(\"10 reps done\");\n }\n}\nclass Bench extends Workout {\n sets() {\n  console.log(\"7 reps done\");\n }\n}\nclass Squat extends Workout {\n sets() {\n  console.log(\"5 reps done\");\n }\n}",
                  "solvedContent": "class Workout {\n sets() {\n  console.log(\"10 reps done\");\n }\n}\nclass Bench extends Workout {\n sets() {\n  console.log(\"7 reps done\");\n }\n}\nclass Squat extends Workout {\n sets() {\n  console.log(\"5 reps done\");\n }\n}\nconst exercise1 = new Bench();\nconst exercise2 = new Squat();\nexercise1.sets();\nexercise2.sets();"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Code: super",
            "id": 109204,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Crea un método en la clase `Pdf` para sobrescribir el método `save` de la clase `Document`. Dentro del método sobrescrito, llama a `super.save()`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "class Document {\n save() {\n  console.log(\"Writing to disk\");\n }\n}\nclass Pdf extends Document {\n const pdf1 = new Pdf();\n pdf1.save();",
                  "solvedContent": "class Document {\n save() {\n  console.log(\"Writing to disk\");\n }\n}\nclass Pdf extends Document {\n save() {\n  super.save();\n }\n}\nconst pdf1 = new Pdf();\npdf1.save();"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Code: extra",
            "id": 109201,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Codifica la clase `Server` para que tenga un método `work` que llame a `super.work()` antes de mostrar `Time to take orders`. Llama a `work()` en la constante `alex`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "class Employee {\n work() {\n  console.log(\"Clocking in\");\n }\n}\nclass Server extends Employee {\n console.log(\"Time to take orders\");\n}\nconst alex = new Server();",
                  "solvedContent": "class Employee {\n work() {\n  console.log(\"Clocking in\");\n }\n}\nclass Server extends Employee {\n work() {\n  super.work();\n  console.log(\"Time to take orders\");\n }\n}\nconst alex = new Server();\nalex.work();"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 11967,
        "title": "Propiedades de Subclase de Coding",
        "type": "practiceLevel3",
        "lessons": [
          {
            "title": "Code: super constructor",
            "id": 109233,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Un cuadrado es un rectángulo con altura y ancho iguales. Dentro del constructor de `Square`, añade una llamada a `super`. Pasa el parámetro `side` dos veces, tanto para la altura como para el ancho.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "class Rectangle {\n constructor(width, height) {\n  this.width = width;\n  this.height = height;\n }\n}\nclass Square extends Rectangle {\n constructor(side) {}\n}",
                  "solvedContent": "class Rectangle {\n constructor(width, height) {\n  this.width = width;\n  this.height = height;\n }\n}\nclass Square extends Rectangle {\n constructor(side) {\n  super(side, side);\n }\n}"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Code: subclass properties",
            "id": 109234,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Agrega un parámetro `blade` al constructor de `Saw` y guárdalo como una propiedad.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "class Tool {\n constructor(brand, cost) {\n  this.brand = brand;\n  this.cost = cost;\n }\n}\nclass Saw extends Tool {\n constructor(brand, cost) {\n  super(brand, cost);\n }\n}\nconst jigsaw = new Saw(\"ABC\", 99, \"small\");\nconsole.log(jigsaw);",
                  "solvedContent": "class Tool {\n constructor(brand, cost) {\n  this.brand = brand;\n  this.cost = cost;\n }\n}\nclass Saw extends Tool {\n constructor(brand, cost, blade) {\n  super(brand, cost);\n  this.blade = blade;\n }\n}\nconst jigsaw = new Saw(\"ABC\", 99, \"small\");\nconsole.log(jigsaw);"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Code: use subclass properties",
            "id": 109235,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Agrega un método `start` a la clase `Boat`. Dentro de él, usa `super` para llamar al método `start()` de la superclase. Luego, muestra algún texto que contenga el valor del parámetro `type` de la clase `Boat`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "class Vehicle {\n constructor(make, model) {\n  this.make = make;\n  this.model = model;\n }\n start() {\n  console.log(\"Starting \" + this.make + \" \" + this.model);\n }\n}\nclass Boat extends Vehicle {\n constructor(make, model, type) {\n  super(make, model);\n  this.type = type;\n }\n}\nconst powerboat = new Boat(\"SEA RAY\", \"L650\", \"Power\");\npowerboat.start();",
                  "solvedContent": "class Vehicle {\n constructor(make, model) {\n  this.make = make;\n  this.model = model;\n }\n start() {\n  console.log(\"Starting \" + this.make + \" \" + this.model);\n }\n}\nclass Boat extends Vehicle {\n constructor(make, model, type) {\n  super(make, model);\n  this.type = type;\n }\n start() {\n  super.start();\n  console.log(this.type + \" Boat on the water\");\n }\n}\nconst powerboat = new Boat(\"SEA RAY\", \"L650\", \"Power\");\npowerboat.start();"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Code: Instantiate subclass",
            "id": 109251,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Crea dos instancias de la clase `ElectricScooter` con valores de tu elección y guárdalas en las constantes `lime` y `bird`. Llama al método `ride()` en ambas instancias.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "class Scooter {\n constructor(rider) {\n  this.rider = rider;\n }\n}\nclass ElectricScooter extends Scooter {\n constructor(rider, battery) {\n  super(rider);\n  this.battery = battery;\n }\n ride() {\n  console.log(\"Hi \" + this.rider + \". Battery life left: \" + this\n   .battery);\n }\n}",
                  "solvedContent": "class Scooter {\n constructor(rider) {\n  this.rider = rider;\n }\n}\nclass ElectricScooter extends Scooter {\n constructor(rider, battery) {\n  super(rider);\n  this.battery = battery;\n }\n ride() {\n  console.log(\"Hi \" + this.rider + \". Battery life left: \" + this\n   .battery);\n }\n}\nconst lime = new ElectricScooter(\"Lydia\", 100);\nconst bird = new ElectricScooter(\"Sanders\", 88);\nlime.ride();\nbird.ride();"
                }
              ],
              "hints": []
            }
          }
        ]
      }
    ]
  }
}