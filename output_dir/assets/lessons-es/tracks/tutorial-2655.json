{
  "tutorial": {
    "id": 2655,
    "version": 4,
    "type": "challenges",
    "isNew": false,
    "codeLanguage": "python",
    "title": "Programación Orientada a Objetos",
    "descriptionContent": "Desafíos basados en la Programación Orientada a Objetos",
    "shortDescriptionContent": "",
    "showInTrack": true,
    "iconBanner": null,
    "chapters": [
      {
        "id": 14688,
        "title": "Límite de edad para atracciones de feria",
        "type": "challengeLevel0",
        "lessons": [
          {
            "title": "Fair Ride Age Limit",
            "id": 129716,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Como voluntario en un festival, haces un seguimiento de las atracciones que se están instalando. Tenemos una clase llamada `Ride` que almacena el nombre de la atracción y el grupo de edad adecuado. Usa instancias de esa clase para rastrear las atracciones instaladas hoy.\n\n1. Crea una nueva instancia de la clase `Ride` llamada `roller_coaster` y especifica que su nombre es `Roller coaster` y es una atracción para `adults`.\n2. Crea una nueva instancia de la clase `Ride` llamada `ferris_wheel` y especifica que su nombre es `Ferris wheel` y es una atracción para `kids`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "class Ride:\r\n    def __init__(self, name, age_group):\r\n        self.name = name\r\n        self.age_group = age_group\r\n\r\n\r\nprint(roller_coaster.age_group)\r\nprint(ferris_wheel.name)",
                  "solvedContent": "class Ride:\r\n    def __init__(self, name, age_group):\r\n        self.name = name\r\n        self.age_group = age_group\r\nroller_coaster = Ride(\"Roller coaster\", \"adults\")\r\nferris_wheel = Ride(\"Ferris wheel\", \"kids\")\r\nprint(roller_coaster.age_group)\r\nprint(ferris_wheel.name)"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 14689,
        "title": "Menú de Bebidas del Café",
        "type": "challengeLevel0",
        "lessons": [
          {
            "title": "Cafe Drink Menu",
            "id": 129717,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Hay una cafetería cercana que ofrece una nueva variedad de bebidas todos los días. Tenemos una clase `Beverage` y dos instancias: `fruity` y `cocoa`. Descubre qué hay en las bebidas de hoy.\n\n1. Accede a la propiedad `name` de la bebida `fruity` e imprímela en la consola.\n2. Accede a la propiedad `is_alcoholic` de la bebida `cocoa` e imprímela en la consola.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "class Beverage:\r\n    def __init__(self, name, is_alcoholic):\r\n        self.name = name\r\n        self.is_alcoholic = is_alcoholic\r\n\r\nfruity = Beverage(\"Fruit punch\", False)\r\ncocoa = Beverage(\"Hot chocolate\", False)",
                  "solvedContent": "class Beverage:\r\n    def __init__(self, name, is_alcoholic):\r\n        self.name = name\r\n        self.is_alcoholic = is_alcoholic\r\n\r\nfruity = Beverage(\"Fruit punch\", False)\r\ncocoa = Beverage(\"Hot chocolate\", False)\r\nprint(fruity.name)\r\nprint(cocoa.is_alcoholic)"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 14690,
        "title": "Detalles de la mascota",
        "type": "challengeLevel0",
        "lessons": [
          {
            "title": "Pet Details",
            "id": 129718,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Eres amante de las mascotas y tienes diferentes mascotas en casa. Tu hermano te está visitando y no puede recordar los nombres de tus mascotas. Completa la clase `Pet` para ayudar a tu hermano a asociar el nombre de una mascota con sus propiedades, como su familia o color.\n\n1. Dentro de la clase `Pet`, crea variables de instancia `name`, `family`, `animal_type` y `color` para almacenar la información específica recibida en los parámetros.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "class Pet:\r\n    def __init__(self, name, family, animal_type, color):\r\n        \r\n        \r\nrio = Pet(\"Rio\", \"Macaw\", \"Parrot\", \"Blue\")\r\ncoco = Pet(\"Coco\", \"Poodle\", \"Dog\", \"White\")\r\nbud = Pet(\"Bud\", \"Labrador\", \"Dog\", \"Brown\")\r\ndaisy = Pet(\"Daisy\", \"Burmese\", \"Cat\", \"Grey\")\r\nprint(f\"{rio.name} is a {rio.color} colored {rio.family} {rio.animal_type}\")",
                  "solvedContent": "class Pet:\r\n    def __init__(self, name, family, animal_type, color):\r\n        self.name = name\r\n        self.family = family\r\n        self.animal_type = animal_type\r\n        self.color = color\r\n\r\nrio = Pet(\"Rio\", \"Macaw\", \"Parrot\", \"Blue\")\r\ncoco = Pet(\"Coco\", \"Poodle\", \"Dog\", \"White\")\r\nbud = Pet(\"Bud\", \"Labrador\", \"Dog\", \"Brown\")\r\ndaisy = Pet(\"Daisy\", \"Burmese\", \"Cat\", \"Grey\")\r\nprint(f\"{rio.name} is a {rio.color} colored {rio.family} {rio.animal_type}\")"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 14692,
        "title": "Instrucciones del ascensor",
        "type": "challengeLevel0",
        "lessons": [
          {
            "title": "Elevator Instructions",
            "id": 129720,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Este ascensor les está diciendo a las personas que se está moviendo, pero en realidad siempre se queda en el mismo piso.\n\n1. Actualiza la propiedad `current_floor` para que el ascensor se mueva cada vez que se le llame para hacerlo.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "class Elevator:\r\n    def __init__(self):\r\n        self.current_floor = 0\r\n\r\n    def go_to_floor(self, floor):\r\n        if self.current_floor == floor:\r\n            print(f\"Elevator is in floor {floor}\")\r\n        else:\r\n            print(f\"Going to floor {floor}\")\r\n\r\nelevator = Elevator()\r\nelevator.go_to_floor(3)\r\nelevator.go_to_floor(3)",
                  "solvedContent": "class Elevator:\r\n    def __init__(self):\r\n        self.current_floor = 0\r\n\r\n    def go_to_floor(self, floor):\r\n        if self.current_floor == floor:\r\n            print(f\"Elevator is in floor {floor}\")\r\n        else:\r\n            print(f\"Going to floor {floor}\")\r\n            self.current_floor = floor\r\n\r\nelevator = Elevator()\r\nelevator.go_to_floor(3)\r\nelevator.go_to_floor(3)"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 14693,
        "title": "Máquina de café",
        "type": "challengeLevel0",
        "lessons": [
          {
            "title": "Coffee Machine",
            "id": 129721,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Las máquinas de café pueden hacer una cantidad limitada de tipos de café.\n\n1. Verifica si el `coffee_type` es válido para nuestra máquina y guarda el resultado en la variable `is_valid_coffee_type`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "class CoffeeMachine:\r\n    def __init__(self):\r\n        self.coffee_options = {\"Capuccino\", \"Espresso\"}\r\n        \r\n    def make_coffee(self, coffee_type):\r\n        is_valid_coffee_type = \r\n        if is_valid_coffee_type:\r\n            return f\"{coffee_type} made!\"\r\n        else:\r\n            return f\"{coffee_type} is not a valid option!\"\r\n\r\nmachine = CoffeeMachine()\r\nprint(machine.make_coffee(\"Espresso\"))\r\nprint(machine.make_coffee(\"Moka\"))",
                  "solvedContent": "class CoffeeMachine:\r\n    def __init__(self):\r\n        self.coffee_options = {\"Capuccino\", \"Espresso\"}\r\n        \r\n    def make_coffee(self, coffee_type):\r\n        is_valid_coffee_type = coffee_type in self.coffee_options\r\n        if is_valid_coffee_type:\r\n            return f\"{coffee_type} made!\"\r\n        else:\r\n            return f\"{coffee_type} is not a valid option!\"\r\n\r\nmachine = CoffeeMachine()\r\nprint(machine.make_coffee(\"Espresso\"))\r\nprint(machine.make_coffee(\"Moka\"))"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 14694,
        "title": "Castillos",
        "type": "challengeLevel0",
        "lessons": [
          {
            "title": "Castles",
            "id": 129722,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Los castillos pueden estar hechos de diferentes materiales, ayúdanos a describir la clase `WoodCastle`.\n\n1. Crea el método apropiado para describir `WoodCastle`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "class Castle:\r\n    def description(self):\r\n        return \"This is a generic castle.\"\r\n\r\nclass StoneCastle(Castle):\r\n    def description(self):\r\n        return \"This is a stone castle.\"\r\n\r\nclass WoodCastle(Castle):\r\n\r\nstone_castle = StoneCastle()\r\nstone_castle_description = stone_castle.description()\r\nprint(stone_castle_description)\r\n\r\nwood_castle = WoodCastle()\r\nwood_castle_description = wood_castle.description()\r\nprint(wood_castle_description)\r\n",
                  "solvedContent": "class Castle:\r\n    def description(self):\r\n        return \"This is a generic castle.\"\r\n\r\nclass StoneCastle(Castle):\r\n    def description(self):\r\n        return \"This is a stone castle.\"\r\n\r\nclass WoodCastle(Castle):\r\n    def description(self):\r\n        return \"This is a wood castle\"\r\n\r\nstone_castle = StoneCastle()\r\nstone_castle_description = stone_castle.description()\r\nprint(stone_castle_description)\r\n\r\nwood_castle = WoodCastle()\r\nwood_castle_description = wood_castle.description()\r\nprint(wood_castle_description)\r\n"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 13903,
        "title": "Creando un método",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "Creating a method",
            "id": 123716,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Te encanta viajar y exploras nuevos destinos cada año. Para ayudarte a mantenerte organizado, has creado una clase `Destination` que lleva un registro de los detalles de viaje para cada lugar que visitas.\n\n1. Crea un método `detail` en la clase `Destination` que use todas sus propiedades para devolver el detalle del viaje en el siguiente formato:\n```\nTraveling to <country> by <mode> for 15 <number_of_days>\n```",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "class Destination:\r\n    def __init__(self, country, mode, number_of_days):\r\n        self.country = country\r\n        self.mode = mode\r\n        self.number_of_days = number_of_days\r\n        \r\n    \r\n        \r\ndestination_one = Destination(\"Italy\", \"plane\", 10)\r\ndestination_two = Destination(\"England\", \"plane\", 5)",
                  "solvedContent": "class Destination:\r\n    def __init__(self, country, mode, number_of_days):\r\n        self.country = country\r\n        self.mode = mode\r\n        self.number_of_days = number_of_days\r\n        \r\n    def detail(self):\r\n        return f\"Traveling to {self.country} by {self.mode} for {self.number_of_days} days\"\r\n\r\ndestination_one = Destination(\"Italy\", \"plane\", 10)\r\ndestination_two = Destination(\"England\", \"plane\", 5)"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 13904,
        "title": "Creando múltiples métodos",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "Creating multiple methods",
            "id": 123717,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Organizas un taller anual para estudiantes. Sus datos se almacenan en una instancia de clase con la propiedad `is_registered` inicialmente establecida en `False`. Crea dos métodos en la clase `Register` para permitir que los estudiantes realicen y cancelen registros según sea necesario.\n\n1. Crea un método de clase `register_student` que establezca la propiedad `is_registered` en `True` y devuelva `<name> is registered!`\n3. Crea un método de clase `cancel_registration` que establezca la propiedad `is_registered` en `False` y devuelva un texto en el siguiente formato:\n ```\n<name>'s registration canceled!\n```",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "class Register:\r\n def __init__(self, name, is_registered):\r\n  self.name = name\r\n  self.is_registered = is_registered\r\n\r\n\r\n\r\n\r\n\r\n\r\ntooba = Register(\"Tooba\", False)\r\nprint(tooba.register_student())\r\nprint(tooba.cancel_registration())",
                  "solvedContent": "class Register:\r\n def __init__(self, name, is_registered):\r\n  self.name = name\r\n  self.is_registered = is_registered\r\n     \r\n def register_student(self):\r\n  self.is_registered = True\r\n  return f\"{self.name} is registered!\"\r\n     \r\n def cancel_registration(self):\r\n  self.is_registered = False\r\n  return f\"{self.name}'s registration canceled!\"\r\ntooba = Register(\"Tooba\", False)\r\nprint(tooba.register_student())\r\nprint(tooba.cancel_registration())"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 13966,
        "title": "Clases y métodos",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "Classes and methods",
            "id": 124062,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Hay muchos tipos de barcos. Cada tipo diferente tiene una forma distinta de prepararse para navegar, pero todos los barcos tienen una cosa en común. El capitán es el primero en prepararse para navegar.\n\n1. Completa la clase `Sailboat` que almacena la cantidad de velas que tiene el barco y haz el método apropiado para que el Sailboat pueda prepararse para navegar. ¡Recuerda que la preparación para navegar de cada barco comienza de la misma manera! Podrías usar la clase `Rowboat` como guía para el desafío.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "class Boat:\r\n    def __init__(self, captain):\r\n        self.captain = captain\r\n\r\n    def prepare_to_sail(self):\r\n        print(f\"Captain {self.captain} is preparing to sail!\")\r\n\r\nclass Rowboat(Boat):\r\n    def __init__(self, captain, row_amount):\r\n        self.captain = captain\r\n        self.row_amount = row_amount\r\n\r\n    def prepare_to_sail(self):\r\n        super().prepare_to_sail()\r\n        print(f\"Preparing {self.row_amount} rows!\")\r\n\r\nclass Sailboat(Boat):\r\n\r\nrowboat = Rowboat(captain=\"Hook\", row_amount=4)\r\nrowboat.prepare_to_sail()\r\n\r\nsailboat = Sailboat(captain=\"Jack Sparrow\", sail_amount=5)\r\nsailboat.prepare_to_sail()",
                  "solvedContent": "class Boat:\r\n    def __init__(self, captain):\r\n        self.captain = captain\r\n\r\n    def prepare_to_sail(self):\r\n        print(f\"Captain {self.captain} is preparing to sail!\")\r\n\r\nclass Rowboat(Boat):\r\n    def __init__(self, captain, row_amount):\r\n        self.captain = captain\r\n        self.row_amount = row_amount\r\n\r\n    def prepare_to_sail(self):\r\n        super().prepare_to_sail()\r\n        print(f\"Preparing {self.row_amount} rows!\")\r\n\r\nclass Sailboat(Boat):\r\n    def __init__(self, captain, sail_amount):\r\n        self.captain = captain\r\n        self.sail_amount = sail_amount\r\n    \r\n    def prepare_to_sail(self):\r\n        super().prepare_to_sail()\r\n        print(f\"Preparing {self.sail_amount} sails!\")\r\n\r\nrowboat = Rowboat(captain=\"Hook\", row_amount=4)\r\nrowboat.prepare_to_sail()\r\n\r\nsailboat = Sailboat(captain=\"Jack Sparrow\", sail_amount=5)\r\nsailboat.prepare_to_sail()"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 13965,
        "title": "Usando self",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "Using self",
            "id": 124131,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Una banda es una sinergia cautivadora de mentes musicales, con individuos talentosos manejando diferentes instrumentos, creando armonías que encienden nuestras almas.\n\n1. Completa los métodos `add_musician` que añade un músico a la banda y `perform` que le permite a todos saber que la banda está comenzando a actuar. ¡Recuerda que para que una banda comience una actuación, cada músico que pertenece a la banda tiene que tocar su instrumento correspondiente!",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "class Musician:\r\n    def __init__(self, name, instrument):\r\n        self.name = name\r\n        self.instrument = instrument\r\n\r\n    def play_instrument(self):\r\n        print(f\"{self.name} is playing the {self.instrument}.\")\r\n\r\nclass Band:\r\n    def __init__(self, name):\r\n        self.name = name\r\n        self.musicians = []\r\n\r\n    def add_musician(self, musician):\r\n\r\n    def perform(self):\r\n        print(f\"{self.name} is starting the performance!\")\r\n\r\nguitarist = Musician(\"John\", \"guitar\")\r\ndrummer = Musician(\"Sarah\", \"drums\")\r\n\r\nband = Band(\"Baangtron\")\r\nband.add_musician(guitarist)\r\nband.add_musician(drummer)\r\n\r\nband.perform()",
                  "solvedContent": "class Musician:\r\n    def __init__(self, name, instrument):\r\n        self.name = name\r\n        self.instrument = instrument\r\n\r\n    def play_instrument(self):\r\n        print(f\"{self.name} is playing the {self.instrument}.\")\r\n\r\nclass Band:\r\n    def __init__(self, name):\r\n        self.name = name\r\n        self.musicians = []\r\n\r\n    def add_musician(self, musician):\r\n        self.musicians.append(musician)\r\n\r\n    def perform(self):\r\n        print(f\"{self.name} is starting the performance!\")\r\n        for musician in self.musicians:\r\n            musician.play_instrument()\r\n\r\nguitarist = Musician(\"John\", \"guitar\")\r\ndrummer = Musician(\"Sarah\", \"drums\")\r\n\r\nband = Band(\"Baangtron\")\r\nband.add_musician(guitarist)\r\nband.add_musician(drummer)\r\n\r\nband.perform()"
                }
              ],
              "hints": []
            }
          }
        ]
      }
    ]
  }
}