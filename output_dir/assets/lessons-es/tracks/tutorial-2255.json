{
  "tutorial": {
    "id": 2255,
    "version": 1,
    "type": "practiceOptional",
    "isNew": false,
    "codeLanguage": "javascript",
    "title": "Funciones Aplicadas 1",
    "descriptionContent": "Funciones Aplicadas 1",
    "shortDescriptionContent": "",
    "showInTrack": true,
    "iconBanner": null,
    "chapters": [
      {
        "id": 11771,
        "title": "Anidación de condicionales",
        "type": "practiceLevel3",
        "lessons": [
          {
            "title": "Code: One Indent",
            "id": 107722,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Dentro de la función, anida una declaración para imprimir `Passed` solo si se cumple la condición.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "function hasPassed(score) {\n if (score >= 50) {\n }\n}\nhasPassed(80);",
                  "solvedContent": "function hasPassed(score) {\n if (score >= 50) {\n  console.log(\"Passed\");\n }\n}\nhasPassed(80);"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Code: Braces and spaces",
            "id": 107723,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Muestra solo `\"Checking Score\"` en la consola colocando la declaración `print` fuera de la declaración `if`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "function hasFailed(score) {\n if (score <= 50) {\n  console.log(\"Failed\");\n }\n}\n\nhasFailed(80);",
                  "solvedContent": "function hasFailed(score) {\n console.log(\"Checking Score\");\n if (score <= 50) {\n  console.log(\"Failed\");\n }\n}\n\nhasFailed(80);"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Code: Indenting the entire block",
            "id": 107724,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Muestra `\"Car started successfully!\"` si el booleano es `true`, de lo contrario muestra `\"Unable to start car\"`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "function isStarted(boolean) {\n console.log(\"Remote start initiated...\");\n if (boolean === true) {\n } else {\n }\n}\nisStarted(true);",
                  "solvedContent": "function isStarted(boolean) {\n console.log(\"Remote start initiated...\");\n if (boolean === true) {\n  console.log(\"Car started successfully!\");\n } else {\n  console.log(\"Unable to start car\");\n }\n}\nisStarted(true);"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Code: Code blocks",
            "id": 107720,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Muestra el `cost`, independientemente del valor pasado al llamar a la función.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "function totalPrice(cost) {\n if (cost <= 49) {\n cost = cost * 1.1;\n } \n \n}\n\ntotalPrice(50);",
                  "solvedContent": "function totalPrice(cost) {\n if (cost <= 49) {\n cost = cost * 1.1;\n } \n console.log(cost);\n}\n\ntotalPrice(50);"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Code: Multiple instructions",
            "id": 107728,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Llama a `getNetIncome()` con un argumento (un valor) que *no* ejecute el bloque de la declaración `if` y guárdalo en la variable `income`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "function getNetIncome(salary) {\n console.log(\"Your salary is:\");\n if (salary >= 2000) {\n  salary = salary * 0.8;\n  return salary + \", after tax and benefits\";\n }\n return salary;\n}\nconst income = \nconsole.log(income);",
                  "solvedContent": "function getNetIncome(salary) {\n console.log(\"Your salary is:\");\n if (salary >= 2000) {\n  salary = salary * 0.8;\n  return salary + \", after tax and benefits\";\n }\n return salary;\n}\nconst income = getNetIncome(1999);\nconsole.log(income);"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 11789,
        "title": "Usando condiciones y funciones",
        "type": "practiceLevel3",
        "lessons": [
          {
            "title": "Code: Input dependent",
            "id": 107865,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Llama a `applySeniorDiscount()` con un argumento (un valor) que devolverá `You get 20% off`. Guarda el resultado de la llamada a la función en la variable `discount`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "function applySeniorDiscount(age) {\n if (age >= 65) {\n  return \"You get 20% off\";\n } else {\n  return \"Please pay full price\";\n }\n}\nconst discount = \nconsole.log(discount);",
                  "solvedContent": "function applySeniorDiscount(age) {\n if (age >= 65) {\n  return \"You get 20% off\";\n } else {\n  return \"Please pay full price\";\n }\n}\nconst discount = applySeniorDiscount(65);\nconsole.log(discount);"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Code: Comparing one value",
            "id": 107866,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Escribe la expresión condicional del `if` statement para que los niños de 10 años y menores reciban un descuento.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "function applyChildDiscount(age) {\n if () {\n  return \"You get 50% off\";\n } else {\n  return \"Sorry. No discount\";\n }\n}\napplyChildDiscount(10);",
                  "solvedContent": "function applyChildDiscount(age) {\n if (age <= 10) {\n  return \"You get 50% off\";\n } else {\n  return \"Sorry. No discount\";\n }\n}\napplyChildDiscount(10);"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Code: Comparing two values",
            "id": 107867,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Escribe la expresión condicional del `if` de manera que si `a` es mayor o igual a `b`, se devuelva el mensaje.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "function checkGreater(a, b) {\n if () {\n  return a + \" is greater than or equal to \" + b;\n }\n}\ncheckGreater(15, 3);",
                  "solvedContent": "function checkGreater(a, b) {\n if (a >= b) {\n  return a + \" is greater than or equal to \" + b;\n }\n}\ncheckGreater(15, 3);"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Code: Check Equality",
            "id": 107863,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Escribe la expresión condicional del `if` de manera que si `a` es estrictamente igual a `b` se devuelva el mensaje.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "function checkEquality(a, b) {\n if () {\n  return \"Numbers are equal\";\n } else {\n  return \"Numbers aren't equal\";\n }\n}\ncheckEquality(10, 10);",
                  "solvedContent": "function checkEquality(a, b) {\n if (a === b) {\n  return \"Numbers are equal\";\n } else {\n  return \"Numbers aren't equal\";\n }\n}\ncheckEquality(10, 10);"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Code: Multiple times",
            "id": 107871,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Escribe una declaración `if else` que devuelva `\"Logging in\"` si la contraseña es estrictamente igual a `\"12345\"` y `\"Try again\"` para todos los demás casos.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "function checkPassword(secret) {\n}\ncheckPassword(\"party1999\");",
                  "solvedContent": "function checkPassword(secret) {\n if (secret === \"12345\") {\n  return \"Logging in\";\n } else {\n  return \"Try again\";\n }\n}\ncheckPassword(\"party1999\");"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 11791,
        "title": "Detener funciones con return",
        "type": "practiceLevel3",
        "lessons": [
          {
            "title": "Code: End of a function",
            "id": 107891,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Codifica una declaración de retorno que sume `100` a `number` para esta función.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "function addOneHundred(number) {\n\n}\n\nconst result = addOneHundred(29);\nconsole.log(result);",
                  "solvedContent": "function addOneHundred(number) {\n return number + 100;\n}\n\nconst result = addOneHundred(29);\nconsole.log(result);"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Code: Nothing gets executed",
            "id": 107892,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Codifica una declaración de retorno que multiplique el valor de entrada por `10` y detenga la ejecución de la declaración de retorno actual.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "function multiplyByTen(number) {\n \n return number + 100;\n}\n\nconst result = multiplyByTen(30);\nconsole.log(result);",
                  "solvedContent": "function multiplyByTen(number) {\n return number * 10;\n return number + 100;\n}\n\nconst result = multiplyByTen(30);\nconsole.log(result);"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Code: Last return statements",
            "id": 107894,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Muestra el mensaje `\"Exactly a kilometer\"` llamando a la función con un valor apropiado.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "function isKilometer(meters) {\n if (meters === 1000) {\n  return \"Exactly a kilometer\";\n }\n return \"Not a kilometer\";\n}\n\nconst result = ;\nconsole.log(result);",
                  "solvedContent": "function isKilometer(meters) {\n if (meters === 1000) {\n  return \"Exactly a kilometer\";\n }\n return \"Not a kilometer\";\n}\n\nconst result = isKilometer(1000);\nconsole.log(result);"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Code: Return in if statements",
            "id": 107889,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Completa la declaración condicional de manera que la función devuelva `\"That's not fair\"` cuando se llame usando `isFair(false)`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "function isFair(boolean) {\n if (boolean === ) {\n  return \"That's fair\";\n } else {\n return \"That's not fair\";\n }\n}\nconst result = isFair(false);\nconsole.log(result);",
                  "solvedContent": "function isFair(boolean) {\n if (boolean === true) {\n  return \"That's fair\";\n } else {\n return \"That's not fair\";\n }\n}\nconst result = isFair(false);\nconsole.log(result);"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Code: Catch last case",
            "id": 107898,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Codifica una declaración `return` que muestre un mensaje cuando la temperatura no sea demasiado fría ni demasiado caliente. No necesitas una declaración `else`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "function isTemperate(degrees) {\n if (degrees < 32) {\n  return \"Too cold\";\n } else if (degrees > 85) {\n  return \"Too hot\";\n }\n \n}\nconst result = isTemperate(75);\nconsole.log(result);",
                  "solvedContent": "function isTemperate(degrees) {\n if (degrees < 32) {\n  return \"Too cold\";\n } else if (degrees > 85) {\n  return \"Too hot\";\n }\n return \"Just right\";\n}\nconst result = isTemperate(75);\nconsole.log(result);"
                }
              ],
              "hints": []
            }
          }
        ]
      }
    ]
  }
}