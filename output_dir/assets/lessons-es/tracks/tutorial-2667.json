{
  "tutorial": {
    "id": 2667,
    "version": 7,
    "type": "guidedProject",
    "isNew": false,
    "codeLanguage": "python",
    "title": "API de Star Wars - Parte 1",
    "descriptionContent": "Lánzate a la galaxia con un proyecto que llama a la API de Star Wars para recuperar personajes del extenso universo de Star Wars",
    "shortDescriptionContent": "",
    "showInTrack": true,
    "iconBanner": "tutorial-2667-icon-banner.svg",
    "chapters": [
      {
        "id": 14642,
        "title": "Capítulo #1",
        "type": "practiceLevel3",
        "lessons": [
          {
            "title": "Lesson #1",
            "id": 129499,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Bienvenido al proyecto de la **Star Wars API**, donde usaremos una API externa para obtener datos de un servidor remoto y mostrarlos.\n\n1. Para comenzar, importa la librería `requests`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "",
                  "solvedContent": "import requests"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Lesson #2",
            "id": 129500,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Planeamos obtener datos de una REST API. Esta API tiene múltiples endpoints. Llamemos primero al endpoint de people.\n\n1. Crea una variable llamada `option` y asígnale el valor `\"people\"`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "import requests",
                  "solvedContent": "import requests\n\noption = \"people\""
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Lesson #3",
            "id": 129501,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Vamos a armar la url. Usaremos el endpoint `/people`. Pero queremos ser flexibles para poder cambiarlo en cualquier momento. Por eso usamos un f-string para armarlo.\n\n1. Crea una nueva variable llamada `url` y asígnale el siguiente f-string `f\"https://swapi.mimo.dev/api/{option}/\"`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "import requests\n\noption = \"people\"",
                  "solvedContent": "import requests\n\noption = \"people\"\nurl = f\"https://swapi.mimo.dev/api/{option}/\""
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Lesson #4",
            "id": 129502,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Es hora de enviar la solicitud al endpoint de la API.\n\n1. Agrega `requests.get(url)` y almacena el objeto de respuesta devuelto en una variable llamada `response`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "import requests\n\noption = \"people\"\nurl = f\"https://swapi.mimo.dev/api/{option}/\"",
                  "solvedContent": "import requests\n\noption = \"people\"\nurl = f\"https://swapi.mimo.dev/api/{option}/\"\nresponse = requests.get(url)"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Lesson #5",
            "id": 129503,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Necesitamos manejar adecuadamente los errores HTTP que pueden ocurrir cuando nuestra solicitud no tiene éxito. Para este propósito, usaremos el método `raise_for_status`.\n\n1. Llama al método `raise_for_status` en `response` para lanzar una excepción si la solicitud HTTP devolvió un código de estado no exitoso.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "import requests\n\noption = \"people\"\nurl = f\"https://swapi.mimo.dev/api/{option}/\"\nresponse = requests.get(url)",
                  "solvedContent": "import requests\n\noption = \"people\"\nurl = f\"https://swapi.mimo.dev/api/{option}/\"\nresponse = requests.get(url)\nresponse.raise_for_status()"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Lesson #6",
            "id": 129504,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Ahora que hemos asegurado que nuestra solicitud fue exitosa, es hora de analizar la respuesta JSON.\n\n1. Llama al método `.json()` en `response` y guarda su valor de retorno en una variable llamada `data`.\n2. Imprime un mensaje indicando el número de entidades que se obtuvieron exitosamente contando la longitud de la lista guardada en la variable `data`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "import requests\n\noption = \"people\"\nurl = f\"https://swapi.mimo.dev/api/{option}/\"\nresponse = requests.get(url)\nresponse.raise_for_status()",
                  "solvedContent": "import requests\n\noption = \"people\"\nurl = f\"https://swapi.mimo.dev/api/{option}/\"\nresponse = requests.get(url)\nresponse.raise_for_status()\n\ndata = response.json()\nprint(f\"Successfully fetched {len(data)} entities\")"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Lesson #7",
            "id": 129505,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Finalmente, vamos a añadir un bloque try-except para manejar cualquier error HTTP que pueda haber ocurrido durante nuestra solicitud.\n\n1. Mueve el código de manejo de solicitud y respuesta HTTP dentro de un bloque `try`.\n   - Mantén la declaración de importación, las variables `option` y `url` afuera.\n   - El resto debe ir dentro del bloque `try`.\n2. Dentro del bloque `except`, captura `requests.HTTPError` como `e` e imprime un mensaje de error informando sobre el error `e`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "import requests\n\noption = \"people\"\nurl = f\"https://swapi.mimo.dev/api/{option}/\"\nresponse = requests.get(url)\nresponse.raise_for_status()\n\ndata = response.json()\nprint(f\"Successfully fetched {len(data)} entities\")",
                  "solvedContent": "import requests\n\noption = \"people\"\nurl = f\"https://swapi.mimo.dev/api/{option}/\"\ntry:\n  response = requests.get(url)\n  response.raise_for_status()\n\n  data = response.json()\n  print(f\"Successfully fetched {len(data)} entities\")\nexcept requests.HTTPError as e:\n  print(f\"Error fetching data: {e}\")"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Lesson #9",
            "id": 129507,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Tenemos nuestros datos obtenidos. Ahora, vamos a añadir código para mostrar estos datos de manera agradable.\n\n1. Después del bloque try-except, añade una declaración `if` que verifique si `data` tiene valores adjuntos.\n   - En el bloque if, itera sobre la lista `data`.\n   - Los elementos de `data` son diccionarios. Para cada uno, imprime el valor de la clave `name`.\n2. Añade una declaración `else` para imprimir `Unable to download data` si `data` está vacío.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "import requests\n\noption = \"people\"\nurl = f\"https://swapi.mimo.dev/api/{option}/\"\ntry:\n  response = requests.get(url)\n  response.raise_for_status()\n\n  data = response.json()\n  print(f\"Successfully fetched {len(data)} entities\")\nexcept requests.HTTPError as e:\n  print(f\"Error fetching data: {e}\")",
                  "solvedContent": "import requests\n\noption = \"people\"\nurl = f\"https://swapi.mimo.dev/api/{option}/\"\ntry:\n  response = requests.get(url)\n  response.raise_for_status()\n\n  data = response.json()\n  print(f\"Successfully fetched {len(data)} entities\")\nexcept requests.HTTPError as e:\n  print(f\"Error fetching data: {e}\")\n\nif data:\n  for entity in data:\n    print(entity[\"name\"])\nelse:\n  print(\"Unable to download data\")"
                }
              ],
              "hints": []
            }
          }
        ]
      }
    ]
  }
}