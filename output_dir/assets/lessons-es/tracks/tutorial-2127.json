{
  "tutorial": {
    "id": 2127,
    "version": 9,
    "type": "course",
    "isNew": false,
    "codeLanguage": "node",
    "title": "Middleware",
    "descriptionContent": "Aprende qué es el middleware y cómo usarlo en tu aplicación Express",
    "shortDescriptionContent": "",
    "showInTrack": true,
    "iconBanner": null,
    "chapters": [
      {
        "id": 15056,
        "title": "Middleware incorporado",
        "type": "practiceLevel1",
        "lessons": [
          {
            "title": "Intro I",
            "id": 122314,
            "contentType": "interactive",
            "images": [
              {
                "id": "8e582a28-69f5-4ce1-8b1a-3bd18cf017c0"
              }
            ],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Middleware se refiere a funciones que actúan como una capa intermediaria entre el servidor web y la aplicación.</p><p>Esta capa intermedia permite una interacción más eficiente entre el servidor y el cliente.</p><img src=\"8e582a28-69f5-4ce1-8b1a-3bd18cf017c0\" visible-if=\"always\" /></body></html>"
          },
          {
            "title": "Intro II",
            "id": 122332,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Puedes usar middleware para tareas como registrar información, analizar solicitudes, autenticación y más.</p></body></html>"
          },
          {
            "title": ".use() - Copy",
            "id": 132746,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>En Express añadimos middleware con el método <code>use</code> en el objeto de la aplicación Express.</p><code version=\"2\" codelang=\"javascript\" name=\"app.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" express = \" /><text value=\"require\" class=\"built_in\" /><text value=\"(\" /><text value=\"&quot;express&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" app = express(); \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"app.use(); \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"app.listen(\" /><text value=\"3000\" class=\"number\" /><text value=\", () =&gt; { \" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;Server runs on port 3000&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"});\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"63\" endIndex=\"66\" /><option startIndex=\"66\" endIndex=\"67\" /><option startIndex=\"67\" endIndex=\"70\" /></options></interaction></interactions><output><content><text value=\"Server runs on port 3000\" /></content></output></code><p visible-if=\"wrong\">Asegúrese de elegir <code>app</code> seguido de <code>.</code> y finalmente <code>use</code>.</p></body></html>"
          },
          {
            "title": "Built-in Middleware",
            "id": 122317,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Pasamos el middleware que queremos usar como un argumento a la función <code>use</code>.</p><p><code>express.json</code> analiza las solicitudes entrantes que contienen cargas útiles JSON, convirtiéndolas en un objeto JS que el servidor puede procesar fácilmente.</p><code version=\"2\" codelang=\"javascript\" name=\"app.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" express = \" /><text value=\"require\" class=\"built_in\" /><text value=\"(\" /><text value=\"&quot;express&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" app = express(); \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"app.use(express.json()); \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"app.post(\" /><text value=\"&quot;/songs&quot;\" class=\"string\" /><text value=\", (req, res) =&gt; { \" /><text type=\"break\" /><text value=\" \" /><text value=\"const\" class=\"keyword\" /><text value=\" body = req.body; \" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(body); \" /><text type=\"break\" /><text value=\"}); \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"app.listen(\" /><text value=\"3000\" class=\"number\" /><text value=\", () =&gt; { \" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;Server runs on port 3000&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"});\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"71\" endIndex=\"78\" /><option startIndex=\"78\" endIndex=\"79\" /><option startIndex=\"79\" endIndex=\"85\" /><option correct=\"false\"><content><text value=\"use()\" /></content></option></options></interaction></interactions><output><content><text value=\"Server runs on port 3000\" /><text type=\"break\" /><text value=\"{\" /><text type=\"break\" /><text value=\"  &quot;title&quot;: &quot;Party in the USA&quot;,\" /><text type=\"break\" /><text value=\"  &quot;artist&quot;: &quot;Miley Cyrus&quot;\" /><text type=\"break\" /><text value=\"}\" /></content></output></code><p visible-if=\"wrong\">Asegúrese de elegir <code>express</code> seguido de <code>.</code> y finalmente <code>json()</code>.</p></body></html>"
          },
          {
            "title": "Built-in Middleware - Copy",
            "id": 132755,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Otro middleware comúnmente usado en Express es <code>express.urlencoded</code>.</p><p>Este middleware es esencial cuando se manejan datos de formularios codificados en URL, que generalmente se envían a través de formularios HTML.</p><code version=\"2\" codelang=\"javascript\" name=\"app.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" express = \" /><text value=\"require\" class=\"built_in\" /><text value=\"(\" /><text value=\"&quot;express&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" app = express(); \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"app.use(express.urlencoded()); \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"app.post(\" /><text value=\"&quot;/submit&quot;\" class=\"string\" /><text value=\", (req, res) =&gt; { \" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(req.body); \" /><text type=\"break\" /><text value=\" res.send(\" /><text value=\"&quot;Form data received&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"}); \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"app.listen(\" /><text value=\"3000\" class=\"number\" /><text value=\", () =&gt; { \" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;Server runs on port 3000&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"});\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"71\" endIndex=\"78\" /><option startIndex=\"78\" endIndex=\"79\" /><option startIndex=\"79\" endIndex=\"91\" /><option correct=\"false\"><content><text value=\"json()\" /></content></option></options></interaction></interactions><output><content><text value=\"Server runs on port 3000\" /><text type=\"break\" /><text value=\"{\" /><text type=\"break\" /><text value=\" name: &quot;Paula&quot;, age: 57\" /><text type=\"break\" /><text value=\"}\" /></content></output></code><p visible-if=\"wrong\">Asegúrese de elegir <code>express</code> seguido de <code>.</code> y finalmente <code>urlencoded()</code>.</p></body></html>"
          },
          {
            "title": "Built-in Middleware - Copy",
            "id": 132756,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>También podemos aplicar middleware solo a rutas seleccionadas pasándolo como el segundo argumento de los métodos de ruta.</p><p>Hagamos que el endpoint <code>\"/songs\"</code> use el middleware JSON.</p><code version=\"2\" codelang=\"javascript\" name=\"app.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" express = \" /><text value=\"require\" class=\"built_in\" /><text value=\"(\" /><text value=\"&quot;express&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" app = express(); \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"app.post(\" /><text value=\"&quot;/songs&quot;\" class=\"string\" /><text value=\", express.json(), (req, res) =&gt; { \" /><text type=\"break\" /><text value=\" \" /><text value=\"const\" class=\"keyword\" /><text value=\" body = req.body; \" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(body); \" /><text type=\"break\" /><text value=\"}); \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"app.get(\" /><text value=\"&quot;/&quot;\" class=\"string\" /><text value=\", (req, res) =&gt; { \" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;I don't need it!&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"}); \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"app.listen(\" /><text value=\"3000\" class=\"number\" /><text value=\", () =&gt; { \" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;Server runs on port 3000&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"});\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"82\" endIndex=\"89\" /><option startIndex=\"89\" endIndex=\"90\" /><option startIndex=\"90\" endIndex=\"96\" /><option correct=\"false\"><content><text value=\"use()\" /></content></option></options></interaction></interactions><output><content><text value=\"Server runs on port 3000\" /><text type=\"break\" /><text value=\"{\" /><text type=\"break\" /><text value=\"  &quot;title&quot;: &quot;Party in the USA&quot;,\" /><text type=\"break\" /><text value=\"  &quot;artist&quot;: &quot;Miley Cyrus&quot;\" /><text type=\"break\" /><text value=\"}\" /></content></output></code><p visible-if=\"wrong\">Asegúrese de elegir <code>express</code> seguido de <code>.</code> y finalmente <code>json()</code>.</p></body></html>"
          },
          {
            "title": "Question: Built-in Middleware",
            "id": 122319,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>¿Cuál es un ejemplo de middleware incorporado para Express?</p><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\"><code>express.json</code></item><item value=\"2\" correct=\"false\">Nuestro middleware personalizado</item></selection><p visible-if=\"wrong\">Asegúrese de elegir <code>express.json</code>.</p></body></html>"
          },
          {
            "title": ".use() - Copy - Copy",
            "id": 132747,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Usa el middleware JSON incorporado.</p><code version=\"2\" codelang=\"javascript\" name=\"app.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" express = \" /><text value=\"require\" class=\"built_in\" /><text value=\"(\" /><text value=\"&quot;express&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" app = express(); \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"app.use(express.json()); \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"app.listen(\" /><text value=\"3000\" class=\"number\" /><text value=\", () =&gt; { \" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;Server runs on port 3000&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"});\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"71\" endIndex=\"78\" /><option startIndex=\"78\" endIndex=\"79\" /><option startIndex=\"79\" endIndex=\"83\" /><option startIndex=\"83\" endIndex=\"84\" /><option startIndex=\"84\" endIndex=\"85\" /></options></interaction></interactions><output><content><text value=\"Server runs on port 3000\" /></content></output></code><p visible-if=\"wrong\">Asegúrese de elegir <code>express</code> seguido de <code>.</code> y luego <code>json</code>, <code>(</code>, <code>)</code>.</p></body></html>"
          },
          {
            "title": "Lesson #9",
            "id": 132757,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>¿Podemos usar middleware incorporado como <code>express.json</code> como un argumento en un manejador de rutas?</p><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\">Sí, si no queremos aplicarlo a cada endpoint</item><item value=\"2\" correct=\"false\">No, el middleware incorporado solo se puede usar globalmente</item></selection><p visible-if=\"wrong\">Sí, si no queremos aplicarlo a cada endpoint.</p></body></html>"
          },
          {
            "title": ".use() - Copy - Copy - Copy",
            "id": 132758,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Completa el código para habilitar el uso de middleware integrado.</p><code version=\"2\" codelang=\"javascript\" name=\"app.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" express = \" /><text value=\"require\" class=\"built_in\" /><text value=\"(\" /><text value=\"&quot;express&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" app = express(); \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"app.use(express.json()); \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"app.listen(\" /><text value=\"3000\" class=\"number\" /><text value=\", () =&gt; { \" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;Server runs on port 3000&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"});\" /></content><interactions><interaction type=\"validatedInput\" isDefault=\"true\" startIndex=\"67\" endIndex=\"70\" /></interactions><output><content><text value=\"Server runs on port 3000\" /></content></output></code><p visible-if=\"wrong\">Asegúrese de elegir <code>use</code>.</p></body></html>"
          },
          {
            "title": "Lesson #12",
            "id": 132761,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>¿Cómo aplicamos middleware a una ruta específica?</p><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\">Pásalo como el segundo argumento en el método de ruta</item><item value=\"2\" correct=\"false\">Usa <code>app.use</code> para cada ruta</item></selection><p visible-if=\"wrong\">Pásalo como el segundo argumento en el método de ruta.</p></body></html>"
          }
        ]
      },
      {
        "id": 15057,
        "title": "Middleware personalizado",
        "type": "practiceLevel1",
        "lessons": [
          {
            "title": ".use()",
            "id": 122330,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>También podemos crear nuestro propio middleware personalizado, que realiza acciones específicas que hemos definido. Hacemos eso creando una función.</p><p>Para comenzar, definimos una función con dos parámetros.</p><code version=\"2\" codelang=\"javascript\" name=\"app.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" express = \" /><text value=\"require\" class=\"built_in\" /><text value=\"(\" /><text value=\"&quot;express&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" app = express(); \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" customMiddleware = \" /><text value=\"(\" /><text value=\"req, res\" class=\"params\" /><text value=\") =&gt;\" /><text value=\" { \" /><text type=\"break\" /><text value=\"  \" /><text type=\"break\" /><text value=\"}; \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"app.get(\" /><text value=\"&quot;/&quot;\" class=\"string\" /><text value=\", (req, res) =&gt; { \" /><text type=\"break\" /><text value=\" res.send(\" /><text value=\"&quot;Hello from the root route!&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"}); \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"app.listen(\" /><text value=\"3000\" class=\"number\" /><text value=\", () =&gt; { \" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;Server runs on port 3000&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"});\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"88\" endIndex=\"98\" /><option startIndex=\"99\" endIndex=\"101\" /><option startIndex=\"102\" endIndex=\"103\" /><option startIndex=\"108\" endIndex=\"109\" /></options></interaction></interactions></code><p visible-if=\"wrong\">Asegúrese de elegir <code>(req, res)</code> seguido de <code>=&gt;</code> y luego <code>{</code>, <code>}</code>.</p></body></html>"
          },
          {
            "title": ".use() - Copy",
            "id": 132749,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Vamos a crear un middleware para registrar cada solicitud entrante e imprimir el método utilizado.</p><code version=\"2\" codelang=\"javascript\" name=\"app.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" express = \" /><text value=\"require\" class=\"built_in\" /><text value=\"(\" /><text value=\"&quot;express&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" app = express(); \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" customMiddleware = \" /><text value=\"(\" /><text value=\"req, res\" class=\"params\" /><text value=\") =&gt;\" /><text value=\" { \" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;Incoming request...&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"`Request type: \" /><text value=\"${req.method}\" class=\"subst\" /><text value=\"`\" /><text value=\"); \" /><text type=\"break\" /><text value=\"}; \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"app.get(\" /><text value=\"&quot;/&quot;\" class=\"string\" /><text value=\", (req, res) =&gt; { \" /><text type=\"break\" /><text value=\" res.send(\" /><text value=\"&quot;Hello from the root route!&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"}); \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"app.listen(\" /><text value=\"3000\" class=\"number\" /><text value=\", () =&gt; { \" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;Server runs on port 3000&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"});\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"106\" endIndex=\"117\" /><option startIndex=\"144\" endIndex=\"155\" /><option startIndex=\"173\" endIndex=\"183\" /></options></interaction></interactions></code><p visible-if=\"wrong\">Asegúrese de elegir <code>console.log</code> seguido de <code>console.log</code> y finalmente <code>req.method</code>.</p></body></html>"
          },
          {
            "title": ".use() - Copy - Copy",
            "id": 132750,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Para completar el middleware, debemos llamar a la función next para pasar el control al siguiente middleware o manejador de ruta.</p><p>Esto permite que los objetos de solicitud y respuesta continúen moviéndose a través del pipeline.</p><code version=\"2\" codelang=\"javascript\" name=\"app.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" express = \" /><text value=\"require\" class=\"built_in\" /><text value=\"(\" /><text value=\"&quot;express&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" app = express(); \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" customMiddleware = \" /><text value=\"(\" /><text value=\"req, res, next\" class=\"params\" /><text value=\") =&gt;\" /><text value=\" { \" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;Incoming request...&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"`Request type: \" /><text value=\"${req.method}\" class=\"subst\" /><text value=\"`\" /><text value=\"); \" /><text type=\"break\" /><text value=\" next(); \" /><text type=\"break\" /><text value=\"}; \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"app.get(\" /><text value=\"&quot;/&quot;\" class=\"string\" /><text value=\", (req, res) =&gt; { \" /><text type=\"break\" /><text value=\" res.send(\" /><text value=\"&quot;Hello from the root route!&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"}); \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"app.listen(\" /><text value=\"3000\" class=\"number\" /><text value=\", () =&gt; { \" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;Server runs on port 3000&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"});\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"196\" endIndex=\"202\" /><option startIndex=\"99\" endIndex=\"103\" /></options></interaction></interactions></code><p visible-if=\"wrong\">Asegúrese de elegir <code>next</code> seguido de <code>next()</code>.</p></body></html>"
          },
          {
            "title": ".use() - Copy",
            "id": 132748,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Para aplicar nuestro middleware en la aplicación Express, usamos <code>app.use</code> y usamos <code>customMiddleware</code> como argumento.</p><p>Esto le indica a Express que ejecute la función <code>customMiddleware</code> para cada solicitud entrante, permitiéndole realizar nuestro registro.</p><code version=\"2\" codelang=\"javascript\" name=\"app.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" express = \" /><text value=\"require\" class=\"built_in\" /><text value=\"(\" /><text value=\"&quot;express&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" app = express(); \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" customMiddleware = \" /><text value=\"(\" /><text value=\"req, res, next\" class=\"params\" /><text value=\") =&gt;\" /><text value=\" { \" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;Incoming request...&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"`Request type: \" /><text value=\"${req.method}\" class=\"subst\" /><text value=\"`\" /><text value=\"); \" /><text type=\"break\" /><text value=\" next(); \" /><text type=\"break\" /><text value=\"}; \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"app.use(customMiddleware); \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"app.get(\" /><text value=\"&quot;/&quot;\" class=\"string\" /><text value=\", (req, res) =&gt; { \" /><text type=\"break\" /><text value=\" res.send(\" /><text value=\"&quot;Hello from the root route!&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"}); \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"app.listen(\" /><text value=\"3000\" class=\"number\" /><text value=\", () =&gt; { \" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;Server runs on port 3000&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"});\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"211\" endIndex=\"214\" /><option startIndex=\"214\" endIndex=\"215\" /><option startIndex=\"215\" endIndex=\"218\" /><option startIndex=\"219\" endIndex=\"235\" /></options></interaction></interactions><output><content><text value=\"Server runs on port 3000\" /><text type=\"break\" /><text value=\"Incoming request...\" /><text type=\"break\" /><text value=\"Request type: GET\" /></content></output></code><p visible-if=\"wrong\">Asegúrese de elegir <code>app</code> seguido de <code>.</code> y luego <code>use</code>, <code>customMiddleware</code>.</p></body></html>"
          },
          {
            "title": "Custom Middleware - Copy1",
            "id": 132751,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>También podemos aplicar nuestro middleware personalizado solo a rutas seleccionadas pasándolo como el segundo argumento de los métodos de ruta.</p><p>Hagamos que la ruta <code>\"/\"</code> use nuestro middleware <code>logRequest</code>.</p><code version=\"2\" codelang=\"javascript\" name=\"app.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" express = \" /><text value=\"require\" class=\"built_in\" /><text value=\"(\" /><text value=\"&quot;express&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" app = express(); \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" logRequest = \" /><text value=\"(\" /><text value=\"req, res, next\" class=\"params\" /><text value=\") =&gt;\" /><text value=\" { \" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"`Incoming request type: \" /><text value=\"${req.method}\" class=\"subst\" /><text value=\"`\" /><text value=\"); \" /><text type=\"break\" /><text value=\" next(); \" /><text type=\"break\" /><text value=\"}; \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"app.get(\" /><text value=\"&quot;/&quot;\" class=\"string\" /><text value=\", logRequest, (req, res) =&gt; { \" /><text type=\"break\" /><text value=\" res.send(\" /><text value=\"&quot;Hello from the root route!&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"}); \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"app.listen(\" /><text value=\"3000\" class=\"number\" /><text value=\", () =&gt; { \" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;Server runs on port 3000&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"});\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"189\" endIndex=\"199\" /></options></interaction></interactions><output><content><text value=\"Server runs on port 3000\" /><text type=\"break\" /><text value=\"Incoming request type: GET\" /></content></output></code><p visible-if=\"wrong\">Asegúrese de elegir <code>logRequest</code>.</p></body></html>"
          },
          {
            "title": "Multiple Middleware",
            "id": 122331,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>¿Por qué el endpoint <code>\"/\"</code> no ejecuta su registro en la consola cuando se accede a él?</p><code version=\"2\" codelang=\"javascript\" name=\"app.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" express = \" /><text value=\"require\" class=\"built_in\" /><text value=\"(\" /><text value=\"&quot;express&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" app = express(); \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"app.use(\" /><text value=\"(\" /><text value=\"req, res, next\" class=\"params\" /><text value=\") =&gt;\" /><text value=\" { \" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;Incoming request...&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"`Request type: \" /><text value=\"${req.method}\" class=\"subst\" /><text value=\"`\" /><text value=\"); \" /><text type=\"break\" /><text value=\"}); \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"app.get(\" /><text value=\"'/'\" class=\"string\" /><text value=\", (req, res) =&gt; { \" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;Hello from the endpoint&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"}); \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"app.listen(\" /><text value=\"3000\" class=\"number\" /><text value=\", () =&gt; { \" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;Server runs on port 3000&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"});\" /></content><output><content><text value=\"Server runs on port 3000\" /><text type=\"break\" /><text value=\"Incoming request...\" /><text type=\"break\" /><text value=\"Request type: GET\" /></content></output></code><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\">El middleware bloquea la ruta al no llamar a <code>next</code></item><item value=\"2\" correct=\"false\">Falta la ruta <code>\"/\"</code></item></selection><p visible-if=\"wrong\">El middleware bloquea la ruta al no llamar a <code>next</code>.</p></body></html>"
          },
          {
            "title": "next()",
            "id": 122321,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Completa el código para asegurarte de que se alcanza el endpoint.</p><code version=\"2\" codelang=\"javascript\" name=\"app.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" express = \" /><text value=\"require\" class=\"built_in\" /><text value=\"(\" /><text value=\"&quot;express&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" app = express(); \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"app.use(\" /><text value=\"(\" /><text value=\"req, res, next\" class=\"params\" /><text value=\") =&gt;\" /><text value=\" { \" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;Incoming request...&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"`Requesting server: \" /><text value=\"${req.hostname}\" class=\"subst\" /><text value=\"`\" /><text value=\"); \" /><text type=\"break\" /><text value=\" next(); \" /><text type=\"break\" /><text value=\"}); \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"app.get(\" /><text value=\"&quot;/user/:id&quot;\" class=\"string\" /><text value=\", \" /><text value=\"function\" class=\"keyword\" /><text value=\"(\" /><text value=\"req, res, next\" class=\"params\" /><text value=\") \" /><text value=\"{ \" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;GET request processing...&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"}); \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"app.listen(\" /><text value=\"3000\" class=\"number\" /><text value=\", () =&gt; { \" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;Server runs on port 3000&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"});\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"82\" endIndex=\"86\" /><option startIndex=\"186\" endIndex=\"192\" /></options></interaction></interactions><output><content><text value=\"Server runs on port 3000\" /><text type=\"break\" /><text value=\"Incoming request...\" /><text type=\"break\" /><text value=\"Requesting server: localhost\" /><text type=\"break\" /><text value=\"Get request processing...\" /></content></output></code><p visible-if=\"wrong\">Asegúrese de elegir <code>next</code> seguido de <code>next()</code>.</p></body></html>"
          },
          {
            "title": "Question: Custom Middleware",
            "id": 122322,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>¿Cuál es un beneficio de crear <em>middleware</em> personalizado?</p><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\">El middleware personalizado permite acciones personalizadas con solicitudes HTTP</item><item value=\"2\" correct=\"false\">No podemos crear middleware personalizado</item></selection><p visible-if=\"wrong\">El middleware personalizado permite acciones personalizadas con solicitudes HTTP.</p></body></html>"
          },
          {
            "title": "Custom Middleware - Copy - Copy",
            "id": 132752,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>¿Por qué la ruta <code>\"/me\"</code> no está activando el middleware de registro?</p><code version=\"2\" codelang=\"javascript\" name=\"app.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" express = \" /><text value=\"require\" class=\"built_in\" /><text value=\"(\" /><text value=\"&quot;express&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" app = express(); \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" logRequest = \" /><text value=\"(\" /><text value=\"req, res, next\" class=\"params\" /><text value=\") =&gt;\" /><text value=\" { \" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"`Incoming request type: \" /><text value=\"${req.method}\" class=\"subst\" /><text value=\"`\" /><text value=\"); \" /><text type=\"break\" /><text value=\" next(); \" /><text type=\"break\" /><text value=\"}; \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"app.get(\" /><text value=\"&quot;/&quot;\" class=\"string\" /><text value=\", logRequest, (req, res) =&gt; { \" /><text type=\"break\" /><text value=\" res.send(\" /><text value=\"&quot;Hello from the root route!&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"}); \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"app.get(\" /><text value=\"&quot;/me&quot;\" class=\"string\" /><text value=\", (req, res) =&gt; { \" /><text type=\"break\" /><text value=\" res.send(\" /><text value=\"&quot;Hello from my route!&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"}); \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"app.listen(\" /><text value=\"3000\" class=\"number\" /><text value=\", () =&gt; { \" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;Server runs on port 3000&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"});\" /></content><output><content><text value=\"Server runs on port 3000\" /></content></output></code><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\">El middleware de logging no se aplica a la ruta <code>\"/me\"</code></item><item value=\"2\" correct=\"false\">La ruta <code>\"/me\"</code> no está funcionando porque no está configurada correctamente</item></selection><p visible-if=\"wrong\">El middleware de logging no se aplica a la ruta <code>\"/me\"</code>.</p></body></html>"
          },
          {
            "title": "Question: Third Party Middleware",
            "id": 122323,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>¿Qué está mal con el código?</p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" express = \" /><text value=\"require\" class=\"built_in\" /><text value=\"(\" /><text value=\"&quot;express&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" app = express(); \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"function\" class=\"keyword\" /><text value=\" \" /><text value=\"logTime\" class=\"title\" /><text value=\"(\" /><text value=\"req, res, next\" class=\"params\" /><text value=\") \" /><text value=\"{ \" /><text type=\"break\" /><text value=\"  \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"`Request received at: \" /><text value=\"${\" /><text value=\"new\" class=\"keyword\" /><text value=\" \" /><text value=\"Date\" class=\"built_in\" /><text value=\"().toLocaleString()}\" /><text value=\"`\" /><text value=\"); \" /><text type=\"break\" /><text value=\"} \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"app.use(logTime); \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"app.get(\" /><text value=\"&quot;/&quot;\" class=\"string\" /><text value=\", (req, res) =&gt; { \" /><text type=\"break\" /><text value=\"  res.send(\" /><text value=\"&quot;Hello, World!&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"}); \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"app.listen(\" /><text value=\"3000\" class=\"number\" /><text value=\", () =&gt; { \" /><text type=\"break\" /><text value=\"  \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;Server runs on port 3000&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"});\" /></content><output><content><text value=\"Server runs on port 3000\" /><text type=\"break\" /><text value=\"GET / 200 150 - 1.650 ms\" /><text type=\"break\" /><text value=\"Request received\" /></content></output></code><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\">Debemos usar <code>next</code> en nuestro middleware personalizado para permitir que los objetos de solicitud y respuesta continúen moviéndose a través del pipeline</item><item value=\"2\" correct=\"false\">Debemos definir nuestro middleware como una función flecha para que funcione con Express</item></selection><p visible-if=\"wrong\">Debemos usar <code>next</code> en nuestro middleware personalizado para permitir que los objetos de solicitud y respuesta continúen moviéndose a través del pipeline.</p></body></html>"
          }
        ]
      },
      {
        "id": 15058,
        "title": "Aún Más Middleware",
        "type": "practiceLevel1",
        "lessons": [
          {
            "title": "Custom Middleware",
            "id": 122320,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Podemos usar múltiples middleware en nuestra aplicación.</p><code version=\"2\" codelang=\"javascript\" name=\"app.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" express = \" /><text value=\"require\" class=\"built_in\" /><text value=\"(\" /><text value=\"&quot;express&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" app = express(); \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"app.use(express.json()); \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"function\" class=\"keyword\" /><text value=\" \" /><text value=\"authenticate\" class=\"title\" /><text value=\"(\" /><text value=\"req, res, next\" class=\"params\" /><text value=\") \" /><text value=\"{ \" /><text type=\"break\" /><text value=\"  \" /><text value=\"if\" class=\"keyword\" /><text value=\" (req.body.role === \" /><text value=\"&quot;Admin&quot;\" class=\"string\" /><text value=\") { \" /><text type=\"break\" /><text value=\"    \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;Authenticated&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"    next(); \" /><text type=\"break\" /><text value=\"  } \" /><text value=\"else\" class=\"keyword\" /><text value=\" { \" /><text type=\"break\" /><text value=\"    \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;Unauthorized&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"    res.status(\" /><text value=\"401\" class=\"number\" /><text value=\").send(\" /><text value=\"&quot;Unauthorized&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"  } \" /><text type=\"break\" /><text value=\"} \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"app.use(authenticate); \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"app.listen(\" /><text value=\"3000\" class=\"number\" /><text value=\", () =&gt; { \" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;Server runs on port 3000&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"});\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"323\" endIndex=\"335\" /><option correct=\"false\"><content><text value=\"express\" /></content></option><option startIndex=\"63\" endIndex=\"66\" /><option startIndex=\"66\" endIndex=\"67\" /><option startIndex=\"67\" endIndex=\"70\" /></options></interaction></interactions><output><content><text value=\"Server runs on port 3000\" /><text type=\"break\" /><text value=\"Unauthorized\" /><text type=\"break\" /><text value=\"\" /></content></output></code><p visible-if=\"wrong\">Asegúrese de elegir <code>app</code> seguido de <code>.</code> y luego <code>use</code>, <code>authenticate</code>.</p></body></html>"
          },
          {
            "title": "Custom Middleware - Copy - Copy - Copy",
            "id": 132764,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Podemos encadenar múltiples funciones de middleware en la definición de la ruta.</p><p>Usemos el middleware incorporado, como <code>express.json</code>, como un argumento junto con tu middleware personalizado <code>logRequest</code>.</p><code version=\"2\" codelang=\"javascript\" name=\"app.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" express = \" /><text value=\"require\" class=\"built_in\" /><text value=\"(\" /><text value=\"&quot;express&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" app = express(); \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" logRequest = \" /><text value=\"(\" /><text value=\"req, res, next\" class=\"params\" /><text value=\") =&gt;\" /><text value=\" { \" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"`Incoming request type: \" /><text value=\"${req.method}\" class=\"subst\" /><text value=\"`\" /><text value=\"); \" /><text type=\"break\" /><text value=\" next(); \" /><text type=\"break\" /><text value=\"}; \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"app.post(\" /><text value=\"&quot;/&quot;\" class=\"string\" /><text value=\", express.json(), logRequest, (req, res) =&gt; { \" /><text type=\"break\" /><text value=\" res.send(\" /><text value=\"&quot;Hello from the root route!&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"}); \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"app.listen(\" /><text value=\"3000\" class=\"number\" /><text value=\", () =&gt; { \" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;Server runs on port 3000&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"});\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"190\" endIndex=\"197\" /><option startIndex=\"198\" endIndex=\"202\" /><option startIndex=\"206\" endIndex=\"216\" /></options></interaction></interactions><output><content><text value=\"Server runs on port 3000\" /><text type=\"break\" /><text value=\"Incoming request type: GET\" /></content></output></code><p visible-if=\"wrong\">Asegúrese de elegir <code>express</code> seguido de <code>json</code> y finalmente <code>logRequest</code>.</p></body></html>"
          },
          {
            "title": "Custom Middleware - Copy - Copy",
            "id": 132753,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Cuando pasamos middleware a una función de ruta, también podemos usar un array.</p><code version=\"2\" codelang=\"javascript\" name=\"app.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" express = \" /><text value=\"require\" class=\"built_in\" /><text value=\"(\" /><text value=\"&quot;express&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" app = express(); \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" logRequest = \" /><text value=\"(\" /><text value=\"req, res, next\" class=\"params\" /><text value=\") =&gt;\" /><text value=\" { \" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"`Incoming request type: \" /><text value=\"${req.method}\" class=\"subst\" /><text value=\"`\" /><text value=\"); \" /><text type=\"break\" /><text value=\" next(); \" /><text type=\"break\" /><text value=\"}; \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"app.post(\" /><text value=\"&quot;/&quot;\" class=\"string\" /><text value=\", [express.json(), logRequest], (req, res) =&gt; { \" /><text type=\"break\" /><text value=\"  res.send(\" /><text value=\"&quot;Hello from the root route!&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"}); \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"app.listen(\" /><text value=\"3000\" class=\"number\" /><text value=\", () =&gt; { \" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;Server runs on port 3000&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"});\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"190\" endIndex=\"191\" /><option startIndex=\"205\" endIndex=\"206\" /><option startIndex=\"217\" endIndex=\"218\" /></options></interaction></interactions><output><content><text value=\"Server runs on port 3000\" /><text type=\"break\" /><text value=\"Incoming request type: GET\" /></content></output></code><p visible-if=\"wrong\">Asegúrese de elegir <code>[</code> seguido de <code>,</code> y finalmente <code>]</code>.</p></body></html>"
          },
          {
            "title": "Custom Middleware  -dCopy -",
            "id": 132765,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>El beneficio de usar un array para agrupar funciones de middleware en Express se trata principalmente de limpieza, flexibilidad y organización.</p><p>Con esta estructura, podemos reutilizar el array <code>middlewares</code> en múltiples rutas, promoviendo un código más limpio.</p><code version=\"2\" codelang=\"javascript\" name=\"app.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" express = \" /><text value=\"require\" class=\"built_in\" /><text value=\"(\" /><text value=\"&quot;express&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" app = express(); \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" logRequest = \" /><text value=\"(\" /><text value=\"req, res, next\" class=\"params\" /><text value=\") =&gt;\" /><text value=\" { \" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"`Incoming request type: \" /><text value=\"${req.method}\" class=\"subst\" /><text value=\"`\" /><text value=\"); \" /><text type=\"break\" /><text value=\" next(); \" /><text type=\"break\" /><text value=\"}; \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" middlewares = [express.json(), logRequest]; \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"app.post(\" /><text value=\"&quot;/&quot;\" class=\"string\" /><text value=\", middlewares, (req, res) =&gt; { \" /><text type=\"break\" /><text value=\"  res.send(\" /><text value=\"&quot;Hello from the root route!&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"}); \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"app.put(\" /><text value=\"&quot;/update&quot;\" class=\"string\" /><text value=\", middlewares, (req, res) =&gt; { \" /><text type=\"break\" /><text value=\" res.send(\" /><text value=\"&quot;Update route&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"}); \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"app.listen(\" /><text value=\"3000\" class=\"number\" /><text value=\", () =&gt; { \" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;Server runs on port 3000&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"});\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"176\" endIndex=\"181\" /><option startIndex=\"182\" endIndex=\"193\" /><option startIndex=\"243\" endIndex=\"254\" /><option startIndex=\"342\" endIndex=\"353\" /></options></interaction></interactions><output><content><text value=\"Server runs on port 3000\" /><text type=\"break\" /><text value=\"Incoming request type: GET\" /></content></output></code><p visible-if=\"wrong\">Asegúrese de elegir <code>const</code> seguido de <code>middlewares</code> y luego <code>middlewares</code>, <code>middlewares</code>.</p></body></html>"
          },
          {
            "title": "Custom Middleware  -dCopy - - Copy",
            "id": 132769,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>El middleware se ejecuta en el orden en que se definen, de izquierda a derecha.</p><code version=\"2\" codelang=\"javascript\" name=\"app.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" express = \" /><text value=\"require\" class=\"built_in\" /><text value=\"(\" /><text value=\"&quot;express&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" app = express(); \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" logRequest = \" /><text value=\"(\" /><text value=\"req, res, next\" class=\"params\" /><text value=\") =&gt;\" /><text value=\" { \" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"`Incoming request type: \" /><text value=\"${req.method}\" class=\"subst\" /><text value=\"`\" /><text value=\"); \" /><text type=\"break\" /><text value=\" next(); \" /><text type=\"break\" /><text value=\"}; \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" middlewares = [express.json(), logRequest]; \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"app.post(\" /><text value=\"&quot;/&quot;\" class=\"string\" /><text value=\", middlewares, (req, res) =&gt; { \" /><text type=\"break\" /><text value=\"  es.send(\" /><text value=\"&quot;Hello from the root route!&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"}); \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"app.put(\" /><text value=\"&quot;/update&quot;\" class=\"string\" /><text value=\", middlewares, (req, res) =&gt; { \" /><text type=\"break\" /><text value=\" res.send(\" /><text value=\"&quot;Update route&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"}); \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"app.listen(\" /><text value=\"3000\" class=\"number\" /><text value=\", () =&gt; { \" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;Server runs on port 3000&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"});\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"182\" endIndex=\"193\" /><option startIndex=\"243\" endIndex=\"254\" /><option startIndex=\"341\" endIndex=\"352\" /></options></interaction></interactions><output><content><text value=\"Server runs on port 3000\" /><text type=\"break\" /><text value=\"Incoming request type: GET\" /></content></output></code><p visible-if=\"wrong\">Asegúrese de elegir <code>middlewares</code> seguido de <code>middlewares</code> y finalmente <code>middlewares</code>.</p></body></html>"
          },
          {
            "title": "Exercise: Custom Middleware",
            "id": 122327,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Completa el código para agregar el middleware de autenticación personalizado.</p><code version=\"2\" codelang=\"javascript\" name=\"app.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" express = \" /><text value=\"require\" class=\"built_in\" /><text value=\"(\" /><text value=\"&quot;express&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" app = express(); \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"app.use(express.json()); \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"function\" class=\"keyword\" /><text value=\" \" /><text value=\"checkReqBody\" class=\"title\" /><text value=\"(\" /><text value=\"req, res, next\" class=\"params\" /><text value=\") \" /><text value=\"{ \" /><text type=\"break\" /><text value=\" \" /><text value=\"if\" class=\"keyword\" /><text value=\" (req.body !== \" /><text value=\"undefined\" class=\"literal\" /><text value=\") { \" /><text type=\"break\" /><text value=\"  \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;Valid request body&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"  next(); \" /><text type=\"break\" /><text value=\" } \" /><text value=\"else\" class=\"keyword\" /><text value=\" { \" /><text type=\"break\" /><text value=\"  \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;Invalid request body&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"  res.status(\" /><text value=\"400\" class=\"number\" /><text value=\").send(\" /><text value=\"&quot;Invalid request body&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\" } \" /><text type=\"break\" /><text value=\"} \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"app.use(checkReqBody); \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"app.listen(\" /><text value=\"3000\" class=\"number\" /><text value=\", () =&gt; { \" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"'Server is running on port 3000.'\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"});\" /></content><interactions><interaction type=\"validatedInput\" isDefault=\"true\" startIndex=\"330\" endIndex=\"342\" /></interactions><output><content><text value=\"Server is running on port 3000\" /><text type=\"break\" /><text value=\"Valid request body\" /></content></output></code><p visible-if=\"wrong\">Asegúrese de elegir <code>checkReqBody</code>.</p></body></html>"
          },
          {
            "title": "Lesson #7",
            "id": 132766,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>¿Puedes aplicar múltiples funciones de middleware a una sola ruta?</p><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\">Sí, pasándolos como argumentos individuales adicionales al método de ruta o como un array</item><item value=\"2\" correct=\"false\">No, solo podemos usar una función de middleware por ruta</item></selection><p visible-if=\"wrong\">Sí, pasándolos como argumentos individuales adicionales al método de ruta o como un array.</p></body></html>"
          },
          {
            "title": "Exercise: Third Party Middleware",
            "id": 122328,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Crea un array de middleware y pásalo como el segundo argumento de la ruta <code>\"/\"</code>.</p><code version=\"2\" codelang=\"javascript\" name=\"app.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" express = \" /><text value=\"require\" class=\"built_in\" /><text value=\"(\" /><text value=\"&quot;express&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" app = express(); \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"function\" class=\"keyword\" /><text value=\" \" /><text value=\"blockIP\" class=\"title\" /><text value=\"(\" /><text value=\"req, res, next\" class=\"params\" /><text value=\") \" /><text value=\"{ \" /><text type=\"break\" /><text value=\"  \" /><text value=\"const\" class=\"keyword\" /><text value=\" blockedIPs = [\" /><text value=\"'123.45.67.89'\" class=\"string\" /><text value=\"]; \" /><text type=\"break\" /><text value=\"  \" /><text value=\"const\" class=\"keyword\" /><text value=\" clientIP = req.ip; \" /><text type=\"break\" /><text value=\"   \" /><text type=\"break\" /><text value=\"  \" /><text value=\"if\" class=\"keyword\" /><text value=\" (blockedIPs.includes(clientIP)) { \" /><text type=\"break\" /><text value=\"    res.status(\" /><text value=\"403\" class=\"number\" /><text value=\").send(\" /><text value=\"&quot;Access forbidden&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"  } \" /><text value=\"else\" class=\"keyword\" /><text value=\" { \" /><text type=\"break\" /><text value=\"    next(); \" /><text type=\"break\" /><text value=\"  } \" /><text type=\"break\" /><text value=\"} \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" middleware = [express.json(), blockIP]; \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"app.get(\" /><text value=\"&quot;/&quot;\" class=\"string\" /><text value=\", middleware, (req, res) =&gt; { \" /><text type=\"break\" /><text value=\"  res.send(\" /><text value=\"&quot;Welcome to the site!&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"}); \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"app.listen(\" /><text value=\"3000\" class=\"number\" /><text value=\", () =&gt; { \" /><text type=\"break\" /><text value=\"  \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;Server runs on port 3000&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"});\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"299\" endIndex=\"309\" /><option startIndex=\"293\" endIndex=\"298\" /><option startIndex=\"355\" endIndex=\"365\" /><option startIndex=\"312\" endIndex=\"313\" /><option startIndex=\"327\" endIndex=\"328\" /><option startIndex=\"336\" endIndex=\"337\" /></options></interaction></interactions><output><content><text value=\"Server runs on port 3000\" /></content></output></code><p visible-if=\"wrong\">Asegúrese de elegir <code>const</code> seguido de <code>middleware</code> y luego <code>[</code>, <code>,</code>, <code>]</code>, <code>middleware</code>.</p></body></html>"
          },
          {
            "title": "Lesson #8",
            "id": 132767,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>¿Puedes mezclar middleware incorporado y personalizado en una sola definición de ruta?</p><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\">Sí</item><item value=\"2\" correct=\"false\">No</item></selection><p visible-if=\"wrong\">Asegúrese de elegir Sí.</p></body></html>"
          }
        ]
      }
    ]
  }
}