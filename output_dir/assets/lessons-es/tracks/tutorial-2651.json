{
  "tutorial": {
    "id": 2651,
    "version": 4,
    "type": "challenges",
    "isNew": false,
    "codeLanguage": "python",
    "title": "Control de flujo",
    "descriptionContent": "Ejercicios de Desafío basados en el Control de Flujo",
    "shortDescriptionContent": "",
    "showInTrack": true,
    "iconBanner": null,
    "chapters": [
      {
        "id": 14664,
        "title": "Notificaciones leídas y no leídas",
        "type": "challengeLevel0",
        "lessons": [
          {
            "title": "Read and Unread Notifications",
            "id": 129692,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Imprimiremos el número de notificaciones leídas o no leídas que un usuario ha recibido.\n\n1. Si `unread` no es `0`, imprime `You have {unread} unread messages`. Usa f-string para mostrar el valor de `unread` dentro de la cadena.\n2. De lo contrario, imprime `No unread messages. Check your {read} read messages`. Usa f-string para mostrar el valor de `read` dentro de la cadena.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "read = 5\r\nunread = 4",
                  "solvedContent": "read = 5\r\nunread = 4\r\nif unread != 0:\r\n print(f\"You have {unread} unread messages\")\r\nelse:\r\n print(f\"No unread messages. Check your {read} read messages\")"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 14665,
        "title": "Verificador de contraseñas",
        "type": "challengeLevel0",
        "lessons": [
          {
            "title": "Password Checker",
            "id": 129693,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Vamos a verificar si una contraseña es correcta usando Python.\n\n1. Si `actualPass` es igual a `enteredPass`, imprime `Login successful`.\n2. De lo contrario, imprime `Incorrect credentials. Please try again`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "actualPass = \"abc123\"\r\nenteredPass = \"Abc123\"",
                  "solvedContent": "actualPass = \"abc123\"\r\nenteredPass = \"Abc123\"\r\nif actualPass == enteredPass:\r\n print(\"Login successful\")\r\nelse:\r\n print(\"Incorrect credentials. Please try again\")"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 14666,
        "title": "Verificación de entrada",
        "type": "challengeLevel0",
        "lessons": [
          {
            "title": "Entry Check",
            "id": 129694,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Entrar a ciertos establecimientos como un club depende de ser mayor de la edad permitida y tener una reservación. Vamos a escribir un programa en Python para verificar si una persona puede entrar.\n\n1. Si `age` es mayor o igual a `18` y `hasReservation` es `True`, establece el `result` en `True`.\n2. Imprime `Entry granted: ` seguido del resultado. Por ejemplo, si el resultado es `False`, entonces imprime `Entry granted: False`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "age = 21\r\nhasReservation = True\r\nresult = False",
                  "solvedContent": "age = 21\r\nhasReservation = True\r\nresult = False\r\nif age >= 18 and hasReservation:\r\n result = True\r\n\r\nprint(f\"Entry granted: {result}\")"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 14667,
        "title": "Inventario de la Tienda de Camisas",
        "type": "challengeLevel0",
        "lessons": [
          {
            "title": "Shirt Store Inventory",
            "id": 129695,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Crea un programa de inventario simple para una tienda de camisas. El programa debe aumentar la variable `sales` en 1 y disminuir la variable `inventory` en 1 cuando se vende una camisa.\n\n1. Entre la inicialización de variables y las declaraciones de impresión, aumenta el valor de la variable `sales` en `1` usando un operador.\n2. Disminuye el valor de la variable `inventory` en `1` usando un operador.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "sales = 0\r\ninventory = 10\r\n\r\n\r\nprint(f'Sales: {sales}')\r\nprint(f'Inventory: {inventory}')",
                  "solvedContent": "sales = 0\r\ninventory = 10\r\nsales += 1\r\ninventory -= 1\r\nprint(f'Sales: {sales}')\r\nprint(f'Inventory: {inventory}')"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 14668,
        "title": "Detener el Bot",
        "type": "challengeLevel0",
        "lessons": [
          {
            "title": "Stop the Bot",
            "id": 129696,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Crea un programa que nos recuerde tres veces detener el bot.\n\n1. Codifica un bucle `while` que imprima `\"Reminder: Stop the bot!\"` cuando `reminder_count` sea menor que `3`.\n2. Después de la declaración `print`, incrementa el valor de `reminder_count` en `1`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "reminder_count = 0\r\n\r\nprint(\"Reminder: Stop the bot!\")",
                  "solvedContent": "reminder_count = 0\r\nwhile reminder_count < 3:\r\n print(\"Reminder: Stop the bot!\")\r\n reminder_count += 1"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 14669,
        "title": "Verificación de bucle",
        "type": "challengeLevel0",
        "lessons": [
          {
            "title": "Loop Check",
            "id": 129697,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Escribimos una declaración `print` para informarnos que el programa ha entrado en el bucle. Sin embargo, el programa está en un bucle infinito, ¡arréglalo antes de que bloquee nuestra computadora!\n\n1. En el bucle `while`, cambia el valor de la variable `loop` de manera que `\"Entered the loop!\"` se imprima solo una vez.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "loop = True\r\nwhile loop:\r\n print(\"Entered the loop!\")\r\n \r\n",
                  "solvedContent": "loop = True\r\nwhile loop:\r\n print(\"Entered the loop!\")\r\n loop = False"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 13091,
        "title": "Blackjack",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "Blackjack",
            "id": 118060,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Vamos a programar una versión simple de BlackJack en Python. En esta versión, hay dos jugadores que reciben dos cartas cada uno.\n\n`p1card1` y `p1card2` almacenan los valores de las cartas para el jugador uno.\n\n`p2card1` y `p2card2` almacenan los valores de las cartas para el jugador dos.\n\n`p1check` almacena la suma de las cartas del jugador uno, y `p2check` almacena lo mismo para el jugador dos.\n\n1. Primero, verificaremos si algún valor es igual o mayor que `21`.\n    - Si `p1check` o `p2check` es `21`, establece el `status` a `blackjack`.\n    - Si no, si `p1check` es mayor que `21`, establece el `status` a `P1 lose`.\n    - Si no, si `p2check` es mayor que `21`, establece el `status` a `P2 lose`.\n    - Si no, imprime `Checking player cards...`.\n2. Segundo, compararemos ambos valores.\n    - Si `p1check` es mayor que `p2check` y menor o igual a `21`, establece el `winner` a `P1`.\n    - Si no, si `p2check` es mayor que `p1check` y menor o igual a `21`, establece el `winner` a `P2`.\n    - Si no, imprime `Draw`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "p1card1 = 10\r\np1card2 = 1\r\np2card1 = 10\r\np2card2 = 11\r\nstatus = \"\"\r\nwinner = \"\"\r\np1check = p1card1 + p1card2\r\np2check = p2card1 + p2card2\r\nprint(status)\r\nprint(\"Winner: \" + winner)",
                  "solvedContent": "p1card1 = 10\r\np1card2 = 1\r\np2card1 = 10\r\np2card2 = 11\r\nstatus = \"\"\r\nwinner = \"\"\r\np1check = p1card1 + p1card2\r\np2check = p2card1 + p2card2\r\n\r\nif p1check == 21 or p2check == 21:\r\n status = \"blackjack\"\r\nelif p1check > 21:\r\n status = \"P1 lose\"\r\nelif p2check > 21:\r\n status = \"P2 lose\"\r\nelse:\r\n print(\"Checking player cards...\")\r\n\r\nif p1check > p2check and p1check <= 21:\r\n winner = \"P1\"\r\nelif p1check < p2check and p2check <= 21:\r\n winner = \"P2\"\r\nelse:\r\n print(\"Draw\")\r\n\r\nprint(status)\r\nprint(\"Winner: \" + winner)"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 13094,
        "title": "Verificación de almacenamiento",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "Storage check",
            "id": 118063,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Escribiremos un programa en Python que muestre un mensaje basado en el espacio de almacenamiento y el pin ingresado.\n\n1. Si `stored` es menor que `limit` y `enteredPin` es igual a `correctPin`, imprime `{stored} GB cloud storage used. Limit is {limit} GB`. Usa f-string para mostrar el valor de `stored` y `limit`.\n2. Si `stored` es igual a `limit` y `enteredPin` es igual a `correctPin`, imprime `Cloud Storage limit reached`.\n3. Si `enteredPin` no es igual a `correctPin`, imprime `Pin not correct`.\n4. De lo contrario, imprime `System error`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "stored = 40\r\nlimit = 50\r\nenteredPin = 4351\r\ncorrectPin = 4351",
                  "solvedContent": "stored = 40\r\nlimit = 50\r\nenteredPin = 4351\r\ncorrectPin = 4351\r\nif stored < limit and enteredPin == correctPin:\r\n print(f\"{stored} GB cloud storage used. Limit is {limit} GB\")\r\nelif stored == limit and enteredPin == correctPin:\r\n print(\"Cloud Storage limit reached\")\r\nelif enteredPin != correctPin:\r\n print(\"Pin not correct\")\r\nelse:\r\n print(\"System error\")"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 13093,
        "title": "Informe de salud",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "Health report",
            "id": 118062,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Escribiremos un programa en Python para verificar la presión arterial (BP) y mostrar el resultado en consecuencia.\n\n1. Si `bpUpper` es igual a `120` y `bpLower` es igual a `80`, establece el `result` en `normal`.\n2. Si `bpUpper` es menor que `120` o `bpLower` es menor que 80, establece el `result` en `low`.\n3. De lo contrario, establece el `result` en `high`.\n4. Imprime el resultado fuera de los bloques condicionales.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "bpUpper = 118\r\nbpLower = 70\r\nresult = \"\"",
                  "solvedContent": "bpUpper = 118\r\nbpLower = 70\r\nresult = \"\"\r\nif bpUpper == 120 and bpLower == 80:\r\n result = \"normal\"\r\nelif bpUpper < 120 or bpLower < 80:\r\n result = \"low\"\r\nelse:\r\n result = \"high\"\r\n\r\nprint(\"BP \" + result)"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 13090,
        "title": "Iluminación automática",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "Automatic lighting",
            "id": 118059,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Escribiremos un programa en Python para crear un sistema de iluminación automático.\n\n1. Si un objeto está presente y la luz está aumentada, entonces establece el `brightness` a `full`.\n2. Si un objeto está presente pero la luz no está aumentada, entonces establece el `brightness` a `dim`.\n3. De lo contrario, establece el brillo a `off`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "objectPresent = True\r\nincreasedLight = False\r\nprint(\"Light brightness: \" + brightness)",
                  "solvedContent": "objectPresent = True\r\nincreasedLight = False\r\nbrightness = \"\"\r\nif objectPresent and increasedLight:\r\n brightness = \"full\"\r\nelif objectPresent and not increasedLight:\r\n brightness = \"dim\"\r\nelse:\r\n brightness = \"off\"\r\n\r\nprint(\"Light brightness: \" + brightness)"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 13089,
        "title": "Comprobador de batería",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "Battery checker",
            "id": 118058,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Nuestro teléfono muestra diferentes mensajes según el porcentaje de la batería del teléfono. Vamos a escribir un programa en Python para informar a los usuarios sobre el estado de su batería.\n\n1. Si `percentage` es menor que `10`, imprime `Phone will shut down soon`.\n2. Si `percentage` es mayor o igual a `10` y menor que `20`, imprime `Low Battery`.\n3. De lo contrario, imprime el valor del porcentaje seguido de `%`. Por ejemplo, si el porcentaje es `61`, imprime `61%`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "percentage = 49",
                  "solvedContent": "percentage = 49\r\nif percentage < 10:\r\n print(\"Phone will shut down soon\")\r\nelif percentage >= 10 and percentage < 20:\r\n print(\"Low Battery\")\r\nelse:\r\n print(f\"{percentage}%\")"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 13086,
        "title": "Calculadora de impuestos",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "Tax calculator",
            "id": 118055,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Vamos a escribir un programa en Python que calcule el impuesto.\n\n1. Si `income` es menor que `40000`, el impuesto sería `income * 0.1`.\n2. Si `income` es mayor o igual a `40000` y menor que `170000`, el impuesto sería `income * 0.22`.\n3. Si `income` es mayor o igual a `170000` y menor que `540000`, el impuesto sería `income * 0.32`.\n4. De lo contrario, el impuesto sería `income * 0.37`.\n5. Después de las condicionales, imprime el valor de `tax`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "income = 44000\r\ntax = 0",
                  "solvedContent": "income = 44000\r\ntax = 0\r\nif income < 40000:\r\n tax = income * 0.1\r\nelif income >= 40000 and income < 170000:\r\n tax = income * 0.22\r\nelif income >= 170000 and income < 540000:\r\n tax = income * 0.32\r\nelse:\r\n tax = income * 0.37\r\n\r\nprint(f\"Tax: {tax}\")"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 13815,
        "title": "Para en rango",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "For in range",
            "id": 123251,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Estamos creando un reloj que suena cada hora.\n\n1. Codifica un bucle `for` usando `range()` que se repita 12 veces para las 12 horas que tenemos en el reloj.\n2. Dentro del bucle `for`, imprime `\"Ring\"`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "",
                  "solvedContent": "for i in range(12):\r\n print(\"Ring\")"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 13814,
        "title": "Bucle while",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "While loop",
            "id": 123250,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Crea un programa para un paseo en montaña rusa. Solo hay 10 asientos disponibles, queremos un programa que imprima el número de personas en la montaña rusa para asegurarnos de que no esté sobrecargada.\n\n1. Escribe la condición para el bucle while de manera que el valor de la variable `counter` se imprima desde `1` hasta `10`.\n2. Después de imprimir el valor de la variable `counter`, usa un operador para aumentar su valor en `1`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "counter = 1\r\n\r\nwhile : \r\n  print(counter)\r\n",
                  "solvedContent": "counter = 1\r\n\r\nwhile counter <= 10: \r\n  print(counter)\r\n  counter += 1"
                }
              ],
              "hints": []
            }
          }
        ]
      }
    ]
  }
}