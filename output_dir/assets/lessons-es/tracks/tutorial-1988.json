{
  "tutorial": {
    "id": 1988,
    "version": 9,
    "type": "guidedProjectOptional",
    "isNew": false,
    "codeLanguage": "javascript",
    "title": "App de Personalización de Escritorio",
    "descriptionContent": "Usa tu conocimiento sobre clases de JavaScript para construir un servicio simple de pedido y personalización de escritorios",
    "shortDescriptionContent": "",
    "showInTrack": true,
    "iconBanner": "tutorial-1988-icon-banner.svg",
    "chapters": [
      {
        "id": 12698,
        "title": "Tienda de Escritorios para el Hogar",
        "type": "practiceLevel3",
        "lessons": [
          {
            "title": "Creating the Class",
            "id": 116162,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Aprendamos cómo podemos usar clases de JS en esta lección. Crearemos una pequeña aplicación para una empresa que construye y entrega escritorios personalizados.\n\nComenzaremos creando una clase de JS.\n\n1. Crea una clase vacía `Desk`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "",
                  "solvedContent": "class Desk {}"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Setting up The Desk Class",
            "id": 116163,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Genial. Ahora, necesitamos configurar nuestra clase. Vamos a añadir algunas propiedades y establecer sus valores iniciales.\n\n1. Crea una función `constructor` y añade las propiedades `width`, `height` y `color` a la clase `Desk`.\n2. Establece el valor inicial de cada propiedad para que sea ella misma. Por ejemplo, `this.width = width`.\n3. Crea una propiedad extra `price` y establece su valor inicial en `0`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "class Desk {}",
                  "solvedContent": "class Desk {\n  constructor(width, height, color) {\n    this.price = 0;\n    this.width = width;\n    this.height = height;\n    this.color = color;\n  }\n}"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Calculating the Price",
            "id": 116164,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Ahora, necesitamos implementar una forma de calcular el precio del escritorio. A continuación, proporcionamos un posible método de precios. De esta manera, estamos estableciendo el precio basado en la altura y el ancho del escritorio.\n\n1. Dentro de la clase `Desk`, crea un método `calculatePrice`.\n2. Copia y pega el siguiente código dentro del método.\n```\n    this.price = (this.width / 100 + this.height / 100) * 100;\n    console.log(this.price);\n```",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "class Desk {\n  constructor(width, height, color) {\n    this.price = 0;\n    this.width = width;\n    this.height = height;\n    this.color = color;\n  }\n}",
                  "solvedContent": "class Desk {\n  constructor(width, height, color) {\n    this.price = 0;\n    this.width = width;\n    this.height = height;\n    this.color = color;\n  }\n  calculatePrice() {\n    this.price = (this.width / 100 + this.height / 100) * 100;\n    console.log(this.price);\n  }\n}"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Creating Custom Desks",
            "id": 116165,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Ahora tenemos una clase básica con la que podemos crear instancias. Pero, ¿qué pasa si el usuario quiere más opciones personalizadas añadidas a su escritorio, como ajuste de altura eléctrico, cajones, etc.? Vamos a extender la clase actual para permitir esas opciones.\n\n1. Crea una clase vacía llamada `CustomDesk`. Asegúrate de que sea una subclase de la clase original `Desk`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "class Desk {\n  constructor(width, height, color) {\n    this.price = 0;\n    this.width = width;\n    this.height = height;\n    this.color = color;\n  }\n  calculatePrice() {\n    this.price = (this.width / 100 + this.height / 100) * 100;\n    console.log(this.price);\n  }\n}",
                  "solvedContent": "class Desk {\n  constructor(width, height, color) {\n    this.price = 0;\n    this.width = width;\n    this.height = height;\n    this.color = color;\n  }\n  calculatePrice() {\n    this.price = (this.width / 100 + this.height / 100) * 100;\n    console.log(this.price);\n  }\n}\nclass CustomDesk extends Desk {}"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Adding Custom Desk Properties",
            "id": 116166,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Debido a que `CustomDesk` es una subclase, también necesitará tener las mismas propiedades que la clase `Desk`, además de cualquier otra que añadamos.\n\n1. Crea un método `constructor()` vacío. Añade los parámetros correctos al constructor mientras sigues las otras instrucciones.\n2. Asegúrate de que las propiedades originales de la clase `Desk` estén presentes y configuradas correctamente. Revisa las pistas para refrescar la memoria.\n3. Crea propiedades únicas `drawerUnitsAmount`, `hasCableManagement` y `adjustingMechanism`.\n4. Establece el valor inicial de cada nueva propiedad única para que sea ella misma.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "class Desk {\n  constructor(width, height, color) {\n    this.price = 0;\n    this.width = width;\n    this.height = height;\n    this.color = color;\n  }\n  calculatePrice() {\n    this.price = (this.width / 100 + this.height / 100) * 100;\n    console.log(this.price);\n  }\n}\nclass CustomDesk extends Desk {}",
                  "solvedContent": "class Desk {\n  constructor(width, height, color) {\n    this.price = 0;\n    this.width = width;\n    this.height = height;\n    this.color = color;\n  }\n  calculatePrice() {\n    this.price = (this.width / 100 + this.height / 100) * 100;\n    console.log(this.price);\n  }\n}\nclass CustomDesk extends Desk {\n  constructor(width, height, color, drawerUnitsAmount, hasCableManagement,\n    adjustingMechanism) {\n    super(width, height, color);\n    this.drawerUnitsAmount = drawerUnitsAmount;\n    this.hasCableManagement = hasCableManagement;\n    this.adjustingMechanism = adjustingMechanism;\n  }\n}"
                }
              ],
              "hints": [
                {
                  "title": "Hint",
                  "content": "Use the `super()` method to refer to the original properties correctly."
                }
              ]
            }
          },
          {
            "title": "Calculating the Custom Desk Price",
            "id": 116168,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "A continuación, queremos calcular el precio del escritorio personalizado, basado en las preferencias del usuario y las adiciones seleccionadas. Hemos creado la lógica para calcular el precio del escritorio personalizado para ti. Solo necesitarás crear el método de cálculo, agregar las variables correctas y copiar y pegar el código a continuación dentro de él.\n\n1. Crea un método personalizado `calculatePrice` en la clase `CustomDesk`.\n2. Crea una variable local `cableManagementPrice` y asígnale el valor `20`.\n3. Crea una variable local `electricAdjustingPrice` y asígnale el valor `125`.\n4. Crea una variable local `manualAdjustingPrice` y asígnale el valor `25`.\n5. Crea una variable local `drawerUnitPrice` y asígnale el valor `30`.\n6. Crea una variable local `initialCost` y asígnale el valor `(this.width / 100 + this.height / 100) * 100`.\n7. Copia y pega el código a continuación dentro del método `calculatePrice()`, debajo de las variables.\n\n```\n    // lógica para calcular el precio basado en la configuración y elecciones del usuario\n    if (this.adjustingMechanism === 'electric') {\n      if (this.hasCableManagement) {\n        this.price = initialCost + cableManagementPrice +\n            electricAdjustingPrice + drawerUnitPrice * this.drawerUnitsAmount\n            ;\n      } else {\n        this.price = initialCost + electricAdjustingPrice + drawerUnitPrice *\n          this.drawerUnitsAmount;\n      }\n    } else if (this.adjustingMechanism === 'manual') {\n      if (this.hasCableManagement) {\n        this.price = initialCost + cableManagementPrice +\n            manualAdjustingPrice + drawerUnitPrice * this.drawerUnitsAmount;\n      } else {\n        this.price = initialCost + manualAdjustingPrice + drawerUnitPrice *\n          this.drawerUnitsAmount;\n      }\n    }\n    console.log(this.price);\n\n```",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "class Desk {\n  constructor(width, height, color) {\n    this.price = 0;\n    this.width = width;\n    this.height = height;\n    this.color = color;\n  }\n  calculatePrice() {\n    this.price = (this.width / 100 + this.height / 100) * 100;\n    console.log(this.price);\n  }\n}\nclass CustomDesk extends Desk {\n  constructor(width, height, color, drawerUnitsAmount, hasCableManagement,\n    adjustingMechanism) {\n    super(width, height, color);\n    this.drawerUnitsAmount = drawerUnitsAmount;\n    this.hasCableManagement = hasCableManagement;\n    this.adjustingMechanism = adjustingMechanism;\n  }\n}",
                  "solvedContent": "class Desk {\n  constructor(width, height, color) {\n    this.price = 0;\n    this.width = width;\n    this.height = height;\n    this.color = color;\n  }\n  calculatePrice() {\n    this.price = (this.width / 100 + this.height / 100) * 100;\n    console.log(this.price);\n  }\n}\nclass CustomDesk extends Desk {\n  constructor(width, height, color, drawerUnitsAmount, hasCableManagement,\n    adjustingMechanism) {\n    super(width, height, color);\n    this.drawerUnitsAmount = drawerUnitsAmount;\n    this.hasCableManagement = hasCableManagement;\n    this.adjustingMechanism = adjustingMechanism;\n  }\n  calculatePrice() {\n    let cableManagementPrice = 20;\n    let electricAdjustingPrice = 125;\n    let manualAdjustingPrice = 25;\n    let drawerUnitPrice = 30;\n    let initialCost = (this.width / 100 + this.height / 100) * 100;\n    if (this.adjustingMechanism === 'electric') {\n      if (this.hasCableManagement) {\n        this.price = initialCost + cableManagementPrice +\n          electricAdjustingPrice + drawerUnitPrice * this.drawerUnitsAmount;\n      } else {\n        this.price = initialCost + electricAdjustingPrice + drawerUnitPrice *\n          this.drawerUnitsAmount;\n      }\n    } else if (this.adjustingMechanism === 'manual') {\n      if (this.hasCableManagement) {\n        this.price = initialCost + cableManagementPrice +\n          manualAdjustingPrice + drawerUnitPrice * this.drawerUnitsAmount;\n      } else {\n        this.price = initialCost + manualAdjustingPrice + drawerUnitPrice *\n          this.drawerUnitsAmount;\n      }\n    }\n    console.log(this.price);\n  }\n}"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Creating Instances",
            "id": 116169,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "¡Genial! Todo debería estar configurado correctamente. Veamos nuestro código en acción. Para hacerlo, ¡crearemos algunas instancias!\n\n1. Crea una instancia de la clase `Desk` y llámala `basicDesk`. Dale un `width` de `200`, un `height` de `80`, y un color `white`.\n2. Crea una instancia de `CustomDesk` y llámala `awesomeDesk`. Dale un `width` de `200`, un `height` de `110`, y un color `blue`. Asegúrate de que tenga `1` unidad de cajón, una unidad de gestión de cables, y un mecanismo de ajuste \"electric\".\n3. Calcula el precio del escritorio básico y observa lo que se imprime en la consola.\n4. Calcula el precio del escritorio impresionante y observa lo que se imprime en la consola.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "class Desk {\n  constructor(width, height, color) {\n    this.price = 0;\n    this.width = width;\n    this.height = height;\n    this.color = color;\n  }\n  calculatePrice() {\n    this.price = (this.width / 100 + this.height / 100) * 100;\n    console.log(this.price);\n  }\n}\nclass CustomDesk extends Desk {\n  constructor(width, height, color, drawerUnitsAmount, hasCableManagement,\n    adjustingMechanism) {\n    super(width, height, color);\n    this.drawerUnitsAmount = drawerUnitsAmount;\n    this.hasCableManagement = hasCableManagement;\n    this.adjustingMechanism = adjustingMechanism;\n  }\n  calculatePrice() {\n    let cableManagementPrice = 20;\n    let electricAdjustingPrice = 125;\n    let manualAdjustingPrice = 25;\n    let drawerUnitPrice = 30;\n    let initialCost = (this.width / 100 + this.height / 100) * 100;\n    if (this.adjustingMechanism === 'electric') {\n      if (this.hasCableManagement) {\n        this.price = initialCost + cableManagementPrice +\n          electricAdjustingPrice + drawerUnitPrice * this.drawerUnitsAmount;\n      } else {\n        this.price = initialCost + electricAdjustingPrice + drawerUnitPrice *\n          this.drawerUnitsAmount;\n      }\n    } else if (this.adjustingMechanism === 'manual') {\n      if (this.hasCableManagement) {\n        this.price = initialCost + cableManagementPrice +\n          manualAdjustingPrice + drawerUnitPrice * this.drawerUnitsAmount;\n      } else {\n        this.price = initialCost + manualAdjustingPrice + drawerUnitPrice *\n          this.drawerUnitsAmount;\n      }\n    }\n    console.log(this.price);\n  }\n}",
                  "solvedContent": "class Desk {\n  constructor(width, height, color) {\n    this.price = 0;\n    this.width = width;\n    this.height = height;\n    this.color = color;\n  }\n  calculatePrice() {\n    this.price = (this.width / 100 + this.height / 100) * 100;\n    console.log(this.price);\n  }\n}\nclass CustomDesk extends Desk {\n  constructor(width, height, color, drawerUnitsAmount, hasCableManagement,\n    adjustingMechanism) {\n    super(width, height, color);\n    this.drawerUnitsAmount = drawerUnitsAmount;\n    this.hasCableManagement = hasCableManagement;\n    this.adjustingMechanism = adjustingMechanism;\n  }\n  calculatePrice() {\n    let cableManagementPrice = 20;\n    let electricAdjustingPrice = 125;\n    let manualAdjustingPrice = 25;\n    let drawerUnitPrice = 30;\n    let initialCost = (this.width / 100 + this.height / 100) * 100;\n    if (this.adjustingMechanism === 'electric') {\n      if (this.hasCableManagement) {\n        this.price = initialCost + cableManagementPrice +\n          electricAdjustingPrice + drawerUnitPrice * this.drawerUnitsAmount;\n      } else {\n        this.price = initialCost + electricAdjustingPrice + drawerUnitPrice *\n          this.drawerUnitsAmount;\n      }\n    } else if (this.adjustingMechanism === 'manual') {\n      if (this.hasCableManagement) {\n        this.price = initialCost + cableManagementPrice +\n          manualAdjustingPrice + drawerUnitPrice * this.drawerUnitsAmount;\n      } else {\n        this.price = initialCost + manualAdjustingPrice + drawerUnitPrice *\n          this.drawerUnitsAmount;\n      }\n    }\n    console.log(this.price);\n  }\n}\nconst basicDesk = new Desk(200, 80, 'white');\nconst awesomeDesk = new CustomDesk(200, 110, 'blue', 1, true, 'electric');\nbasicDesk.calculatePrice();\nawesomeDesk.calculatePrice();"
                }
              ],
              "hints": [
                {
                  "title": "Hint",
                  "content": "If you observe the logic we use to calculate the custom desk price, you see that the `hasCableManagement` is a boolean (either `true` or `false`). Take that into account when creating the `awesomeDesk` instance.\n\nFor the `adjustingMechanism`, the user input is either `manual` or `electric`.\n\n\n"
                }
              ]
            }
          }
        ]
      }
    ]
  }
}