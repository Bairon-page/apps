{
  "tutorial": {
    "id": 2156,
    "version": 5,
    "type": "guidedProjectOptional",
    "isNew": false,
    "codeLanguage": "javascript",
    "title": "Día aleatorio en el trabajo",
    "descriptionContent": "Una analogía de las promesas de JavaScript usando un día cualquiera en el trabajo",
    "shortDescriptionContent": "",
    "showInTrack": true,
    "iconBanner": "tutorial-2156-icon-banner.svg",
    "chapters": [
      {
        "id": 13482,
        "title": "Día aleatorio en el trabajo",
        "type": "practiceLevel3",
        "lessons": [
          {
            "title": "Order from Boss I",
            "id": 121197,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Cada día se nos pide completar algunas tareas en el trabajo. Vamos a crear un programa que muestre un día aleatorio en el trabajo. ¡Nos daremos cuenta de que las promesas son muy relevantes para nuestra vida cotidiana al final del proyecto!\n\nComo trabajadores, usualmente recibimos órdenes de nuestros jefes. Vamos a crear una función para imitar la acción de recibir órdenes de nuestros jefes.\n\n1. Escribe una función `orderFromBoss()` que devuelva una `Promise`.\n2. Usa una función con `resolve` y `reject` como los parámetros de la `Promise`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "",
                  "solvedContent": "function orderFromBoss() {\r\n  return new Promise(function(resolve, reject) {});\r\n}"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Order from Boss II",
            "id": 121207,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "¡Las órdenes de los jefes deberían contener algunas instrucciones! De lo contrario, ¡no sabríamos qué quieren que hagamos!\n\n1. Dentro de la función promise, crea una variable `isCodeDone` y establece el valor como `false`.\n2. Imprime ```Finish the code, it's an order!``` usando `console.log()`.\n3. Establece `isCodeDone` como el parámetro para `resolve()`.\n\nNormalmente no podemos rechazar a nuestros jefes, así que dejemos `reject` sin usar.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "function orderFromBoss() {\r\n  return new Promise(function(resolve, reject) {});\r\n}",
                  "solvedContent": "function orderFromBoss() {\r\n  return new Promise(function(resolve, reject) {\r\n    let isCodeDone = false;\r\n    console.log(\"Finish the code, it's an order!\");\r\n    resolve(isCodeDone);\r\n  });\r\n}"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Coding I",
            "id": 121198,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "A continuación, ¡vamos a crear una función para ti, el programador!\n\n1. Escribe una función `coding()` que tome `isCodeDone` como parámetro y devuelva una `Promise`.\n2. Usa una función con los parámetros `resolve` y `reject` como el parámetro de la `Promise`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "function orderFromBoss() {\r\n  return new Promise(function(resolve, reject) {\r\n    let isCodeDone = false;\r\n    console.log(\"Finish the code, it's an order!\");\r\n    resolve(isCodeDone);\r\n  });\r\n}",
                  "solvedContent": "function orderFromBoss() {\r\n  return new Promise(function(resolve, reject) {\r\n    let isCodeDone = false;\r\n    console.log(\"Finish the code, it's an order!\");\r\n    resolve(isCodeDone);\r\n  });\r\n}\r\n\r\nfunction coding(isCodeDone) {\r\n  return new Promise(function(resolve, reject) {});\r\n}"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Coding II",
            "id": 121208,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Los programadores solo necesitan programar cuando tienen una tarea en la que trabajar. Vamos a modificar la función `coding()` para reflejar eso.\n\n1. Dentro de la función promesa `coding()`, verifica si `isCodeDone` es `false`.\n2. Si `isCodeDone` es `false`, imprime `Working...` usando `console.log()`.\n3. Luego, establece `isCodeDone` a `true` y establece `isCodeDone` como el parámetro para `resolve()`.\n4. Si `isCodeDone` es `true`, establece ```\"No instructions from boss yet.\"``` como el parámetro para `reject()`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "function orderFromBoss() {\r\n  return new Promise(function(resolve, reject) {\r\n    let isCodeDone = false;\r\n    console.log(\"Finish the code, it's an order!\");\r\n    resolve(isCodeDone);\r\n  });\r\n}\r\n\r\nfunction coding(isCodeDone) {\r\n  return new Promise(function(resolve, reject) {});\r\n}",
                  "solvedContent": "function orderFromBoss() {\r\n  return new Promise(function(resolve, reject) {\r\n    let isCodeDone = false;\r\n    console.log(\"Finish the code, it's an order!\");\r\n    resolve(isCodeDone);\r\n  });\r\n}\r\n\r\nfunction coding(isCodeDone) {\r\n  return new Promise(function(resolve, reject) {\r\n    if (!isCodeDone) {\r\n      console.log(\"Working...\");\r\n      isCodeDone = true;\r\n      resolve(isCodeDone);\r\n    } else {\r\n      reject(\"No instructions from boss yet.\");\r\n    }\r\n  });\r\n}"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Performance Review I",
            "id": 121199,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Cuando terminemos nuestro trabajo, nuestros jefes querrán revisar nuestro rendimiento.\n\n1. Escribe una función `performanceReview()` que tome `isCodeDone` como parámetro y devuelva una `Promise`.\n2. Usa una función con los parámetros `resolve` y `reject` como el parámetro de la `Promise`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "function orderFromBoss() {\r\n  return new Promise(function(resolve, reject) {\r\n    let isCodeDone = false;\r\n    console.log(\"Finish the code, it's an order!\");\r\n    resolve(isCodeDone);\r\n  });\r\n}\r\n\r\nfunction coding(isCodeDone) {\r\n  return new Promise(function(resolve, reject) {\r\n    if (!isCodeDone) {\r\n      console.log(\"Working...\");\r\n      isCodeDone = true;\r\n      resolve(isCodeDone);\r\n    } else {\r\n      reject(\"No instructions from boss yet.\");\r\n    }\r\n  });\r\n}",
                  "solvedContent": "function orderFromBoss() {\r\n  return new Promise(function(resolve, reject) {\r\n    let isCodeDone = false;\r\n    console.log(\"Finish the code, it's an order!\");\r\n    resolve(isCodeDone);\r\n  });\r\n}\r\n\r\nfunction coding(isCodeDone) {\r\n  return new Promise(function(resolve, reject) {\r\n    if (!isCodeDone) {\r\n      console.log(\"Working...\");\r\n      isCodeDone = true;\r\n      resolve(isCodeDone);\r\n    } else {\r\n      reject(\"No instructions from boss yet.\");\r\n    }\r\n  });\r\n}\r\n\r\nfunction performanceReview(isCodeDone) {\r\n  return new Promise(function(resolve, reject) {});\r\n}"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Performance Review II",
            "id": 121209,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Nuestros jefes revisaron nuestro desempeño, pero no podemos mejorar a menos que la revisión se comparta con nosotros. Vamos a modificar `performanceReview()` para hacer eso.\n\n1. Dentro de la función promesa `performanceReview()`, verifica si `isCodeDone` es `true`.\n2. Si `isCodeDone` es `true`, establece `\"You kept your promise and finished the code. You're getting promoted!\"` como el parámetro para `resolve()`.\n3. Si `isCodeDone` es `false`, establece `\"You broke your promise, how can I trust you with bigger responsibilities?\"` como el parámetro para `reject()`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "function orderFromBoss() {\r\n  return new Promise(function(resolve, reject) {\r\n    let isCodeDone = false;\r\n    console.log(\"Finish the code, it's an order!\");\r\n    resolve(isCodeDone);\r\n  });\r\n}\r\n\r\nfunction coding(isCodeDone) {\r\n  return new Promise(function(resolve, reject) {\r\n    if (!isCodeDone) {\r\n      console.log(\"Working...\");\r\n      isCodeDone = true;\r\n      resolve(isCodeDone);\r\n    } else {\r\n      reject(\"No instructions from boss yet.\");\r\n    }\r\n  });\r\n}\r\n\r\nfunction performanceReview(isCodeDone) {\r\n  return new Promise(function(resolve, reject) {});\r\n}",
                  "solvedContent": "function orderFromBoss() {\r\n  return new Promise(function(resolve, reject) {\r\n    let isCodeDone = false;\r\n    console.log(\"Finish the code, it's an order!\");\r\n    resolve(isCodeDone);\r\n  });\r\n}\r\n\r\nfunction coding(isCodeDone) {\r\n  return new Promise(function(resolve, reject) {\r\n    if (!isCodeDone) {\r\n      console.log(\"Working...\");\r\n      isCodeDone = true;\r\n      resolve(isCodeDone);\r\n    } else {\r\n      reject(\"No instructions from boss yet.\");\r\n    }\r\n  });\r\n}\r\n\r\nfunction performanceReview(isCodeDone) {\r\n  return new Promise(function(resolve, reject) {\r\n    if (isCodeDone) {\r\n      resolve(\r\n        \"You kept your promise and finished the code. You're getting promoted!\"\r\n        );\r\n    } else {\r\n      reject(\r\n        \"You broke your promise, how can I trust you with bigger responsibilities?\"\r\n        );\r\n    }\r\n  });\r\n}"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Random Day at Work I",
            "id": 121200,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Ahora que todos los escenarios ya están implementados, vamos a juntarlos para formar un día de trabajo. Dado que las cosas no siempre suceden una tras otra en la vida real, también deberíamos hacer la función asíncrona.\n\n1. Escribe una función asíncrona `randomDayAtWork()`.\n2. Llama a `orderFromBoss()` y guárdalo en una variable `instruction`.\n3. Llama a `coding()` usando `instruction` como parámetro y guárdalo en una variable `work`.\n4. Llama a `performanceReview()` usando `work` como parámetro y guárdalo en una variable `review`.\n5. Imprime el valor de `review` usando `console.log()`",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "function orderFromBoss() {\r\n  return new Promise(function(resolve, reject) {\r\n    let isCodeDone = false;\r\n    console.log(\"Finish the code, it's an order!\");\r\n    resolve(isCodeDone);\r\n  });\r\n}\r\n\r\nfunction coding(isCodeDone) {\r\n  return new Promise(function(resolve, reject) {\r\n    if (!isCodeDone) {\r\n      console.log(\"Working...\");\r\n      isCodeDone = true;\r\n      resolve(isCodeDone);\r\n    } else {\r\n      reject(\"No instructions from boss yet.\");\r\n    }\r\n  });\r\n}\r\n\r\nfunction performanceReview(isCodeDone) {\r\n  return new Promise(function(resolve, reject) {\r\n    if (isCodeDone) {\r\n      resolve(\r\n        \"You kept your promise and finished the code. You're getting promoted!\"\r\n        );\r\n    } else {\r\n      reject(\r\n        \"You broke your promise, how can I trust you with bigger responsibilities?\"\r\n        );\r\n    }\r\n  });\r\n}",
                  "solvedContent": "function orderFromBoss() {\r\n  return new Promise(function(resolve, reject) {\r\n    let isCodeDone = false;\r\n    console.log(\"Finish the code, it's an order!\");\r\n    resolve(isCodeDone);\r\n  });\r\n}\r\n\r\nfunction coding(isCodeDone) {\r\n  return new Promise(function(resolve, reject) {\r\n    if (!isCodeDone) {\r\n      console.log(\"Working...\");\r\n      isCodeDone = true;\r\n      resolve(isCodeDone);\r\n    } else {\r\n      reject(\"No instructions from boss yet.\");\r\n    }\r\n  });\r\n}\r\n\r\nfunction performanceReview(isCodeDone) {\r\n  return new Promise(function(resolve, reject) {\r\n    if (isCodeDone) {\r\n      resolve(\r\n        \"You kept your promise and finished the code. You're getting promoted!\"\r\n        );\r\n    } else {\r\n      reject(\r\n        \"You broke your promise, how can I trust you with bigger responsibilities?\"\r\n        );\r\n    }\r\n  });\r\n}\r\nasync function randomDayAtWork() {\r\n  const instruction = orderFromBoss();\r\n  const work = coding(instruction);\r\n  const review = performanceReview(work);\r\n  console.log(review);\r\n}"
                }
              ],
              "hints": [
                {
                  "title": "Hint",
                  "content": "You can make your functions asynchronous by adding the `async` keyword before defining the function. The syntax is:\n```\nasync function myAsyncFunc(){\n\n//code here\n\n}\n```"
                }
              ]
            }
          },
          {
            "title": "Random Day at Work II",
            "id": 121210,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Como sabes, a veces el trabajo no está listo para que lo tomemos y necesitamos esperar. ¡Por ejemplo, debemos esperar a que llegue la orden de nuestro jefe antes de trabajar en algo!\n\n1. Agrega la palabra clave `await` a las llamadas de función en la función `randomDayAtWork()` para asegurarte de que se llamarán solo después de que la anterior haya completado su ejecución.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "function orderFromBoss() {\r\n  return new Promise(function(resolve, reject) {\r\n    let isCodeDone = false;\r\n    console.log(\"Finish the code, it's an order!\");\r\n    resolve(isCodeDone);\r\n  });\r\n}\r\n\r\nfunction coding(isCodeDone) {\r\n  return new Promise(function(resolve, reject) {\r\n    if (!isCodeDone) {\r\n      console.log(\"Working...\");\r\n      isCodeDone = true;\r\n      resolve(isCodeDone);\r\n    } else {\r\n      reject(\"No instructions from boss yet.\");\r\n    }\r\n  });\r\n}\r\n\r\nfunction performanceReview(isCodeDone) {\r\n  return new Promise(function(resolve, reject) {\r\n    if (isCodeDone) {\r\n      resolve(\r\n        \"You kept your promise and finished the code. You're getting promoted!\"\r\n        );\r\n    } else {\r\n      reject(\r\n        \"You broke your promise, how can I trust you with bigger responsibilities?\"\r\n        );\r\n    }\r\n  });\r\n}\r\nasync function randomDayAtWork() {\r\n  const instruction = orderFromBoss();\r\n  const work = coding(instruction);\r\n  const review = performanceReview(work);\r\n  console.log(review);\r\n}",
                  "solvedContent": "function orderFromBoss() {\r\n  return new Promise(function(resolve, reject) {\r\n    let isCodeDone = false;\r\n    console.log(\"Finish the code, it's an order!\");\r\n    resolve(isCodeDone);\r\n  });\r\n}\r\n\r\nfunction coding(isCodeDone) {\r\n  return new Promise(function(resolve, reject) {\r\n    if (!isCodeDone) {\r\n      console.log(\"Working...\");\r\n      isCodeDone = true;\r\n      resolve(isCodeDone);\r\n    } else {\r\n      reject(\"No instructions from boss yet.\");\r\n    }\r\n  });\r\n}\r\n\r\nfunction performanceReview(isCodeDone) {\r\n  return new Promise(function(resolve, reject) {\r\n    if (isCodeDone) {\r\n      resolve(\r\n        \"You kept your promise and finished the code. You're getting promoted!\"\r\n        );\r\n    } else {\r\n      reject(\r\n        \"You broke your promise, how can I trust you with bigger responsibilities?\"\r\n        );\r\n    }\r\n  });\r\n}\r\nasync function randomDayAtWork() {\r\n  const instruction = await orderFromBoss();\r\n  const work = await coding(instruction);\r\n  const review = await performanceReview(work);\r\n  console.log(review);\r\n}"
                }
              ],
              "hints": [
                {
                  "title": "Hint",
                  "content": "`await` should be before the function call.\n\n```\nawait myFunc();\n```"
                }
              ]
            }
          },
          {
            "title": "Random Day at Work III",
            "id": 121201,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "¡Genial! El último paso es ver si las promesas se cumplen. Las promesas no siempre se cumplen, así que deberíamos **intentar** ejecutar las funciones que escribimos antes y **capturar** los errores que podríamos encontrar al intentar ejecutar el código.\n\n1. Usa `try` para ejecutar el código dentro de `randomDayAtWork()`.\n2. Después del bloque `try` en `randomDayAtWork()`, codifica un `catch` con `error` como parámetro.\n3. En el bloque `catch`, imprime el `error` usando `console.log`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "function orderFromBoss() {\r\n  return new Promise(function(resolve, reject) {\r\n    let isCodeDone = false;\r\n    console.log(\"Finish the code, it's an order!\");\r\n    resolve(isCodeDone);\r\n  });\r\n}\r\n\r\nfunction coding(isCodeDone) {\r\n  return new Promise(function(resolve, reject) {\r\n    if (!isCodeDone) {\r\n      console.log(\"Working...\");\r\n      isCodeDone = true;\r\n      resolve(isCodeDone);\r\n    } else {\r\n      reject(\"No instructions from boss yet.\");\r\n    }\r\n  });\r\n}\r\n\r\nfunction performanceReview(isCodeDone) {\r\n  return new Promise(function(resolve, reject) {\r\n    if (isCodeDone) {\r\n      resolve(\r\n        \"You kept your promise and finished the code. You're getting promoted!\"\r\n        );\r\n    } else {\r\n      reject(\r\n        \"You broke your promise, how can I trust you with bigger responsibilities?\"\r\n        );\r\n    }\r\n  });\r\n}\r\nasync function randomDayAtWork() {\r\n  const instruction = await orderFromBoss();\r\n  const work = await coding(instruction);\r\n  const review = await performanceReview(work);\r\n  console.log(review);\r\n}",
                  "solvedContent": "function orderFromBoss() {\r\n  return new Promise(function(resolve, reject) {\r\n    let isCodeDone = false;\r\n    console.log(\"Finish the code, it's an order!\");\r\n    resolve(isCodeDone);\r\n  });\r\n}\r\n\r\nfunction coding(isCodeDone) {\r\n  return new Promise(function(resolve, reject) {\r\n    if (!isCodeDone) {\r\n      console.log(\"Working...\");\r\n      isCodeDone = true;\r\n      resolve(isCodeDone);\r\n    } else {\r\n      reject(\"No instructions from boss yet.\");\r\n    }\r\n  });\r\n}\r\n\r\nfunction performanceReview(isCodeDone) {\r\n  return new Promise(function(resolve, reject) {\r\n    if (isCodeDone) {\r\n      resolve(\r\n        \"You kept your promise and finished the code. You're getting promoted!\"\r\n        );\r\n    } else {\r\n      reject(\r\n        \"You broke your promise, how can I trust you with bigger responsibilities?\"\r\n        );\r\n    }\r\n  });\r\n}\r\nasync function randomDayAtWork() {\r\n  try {\r\n    const instruction = await orderFromBoss();\r\n    const work = await coding(instruction);\r\n    const review = await performanceReview(work);\r\n    console.log(review);\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n}"
                }
              ],
              "hints": [
                {
                  "title": "Hint",
                  "content": "The syntax for `try-catch` is as below:\n\n```\ntry {\n\n// code to try\n\n} catch(error) {\n\n//code to run when an error happens\n\n}\n```"
                }
              ]
            }
          },
          {
            "title": "Execute randomDayAtWork()!",
            "id": 121202,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "¡Todas nuestras funciones están listas ahora, pero no se ejecutarán a menos que hagamos algo al respecto! Llamemos a la función que inicia un nuevo día aleatorio en el trabajo.\n\n1. Al final del código, llama a `randomDayAtWork()`",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "function orderFromBoss() {\r\n  return new Promise(function(resolve, reject) {\r\n    let isCodeDone = false;\r\n    console.log(\"Finish the code, it's an order!\");\r\n    resolve(isCodeDone);\r\n  });\r\n}\r\n\r\nfunction coding(isCodeDone) {\r\n  return new Promise(function(resolve, reject) {\r\n    if (!isCodeDone) {\r\n      console.log(\"Working...\");\r\n      isCodeDone = true;\r\n      resolve(isCodeDone);\r\n    } else {\r\n      reject(\"No instructions from boss yet.\");\r\n    }\r\n  });\r\n}\r\n\r\nfunction performanceReview(isCodeDone) {\r\n  return new Promise(function(resolve, reject) {\r\n    if (isCodeDone) {\r\n      resolve(\r\n        \"You kept your promise and finished the code. You're getting promoted!\"\r\n        );\r\n    } else {\r\n      reject(\r\n        \"You broke your promise, how can I trust you with bigger responsibilities?\"\r\n        );\r\n    }\r\n  });\r\n}\r\nasync function randomDayAtWork() {\r\n  try {\r\n    const instruction = await orderFromBoss();\r\n    const work = await coding(instruction);\r\n    const review = await performanceReview(work);\r\n    console.log(review);\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n}",
                  "solvedContent": "function orderFromBoss() {\r\n  return new Promise(function(resolve, reject) {\r\n    let isCodeDone = false;\r\n    console.log(\"Finish the code, it's an order!\");\r\n    resolve(isCodeDone);\r\n  });\r\n}\r\n\r\nfunction coding(isCodeDone) {\r\n  return new Promise(function(resolve, reject) {\r\n    if (!isCodeDone) {\r\n      console.log(\"Working...\");\r\n      isCodeDone = true;\r\n      resolve(isCodeDone);\r\n    } else {\r\n      reject(\"No instructions from boss yet.\");\r\n    }\r\n  });\r\n}\r\n\r\nfunction performanceReview(isCodeDone) {\r\n  return new Promise(function(resolve, reject) {\r\n    if (isCodeDone) {\r\n      resolve(\r\n        \"You kept your promise and finished the code. You're getting promoted!\"\r\n        );\r\n    } else {\r\n      reject(\r\n        \"You broke your promise, how can I trust you with bigger responsibilities?\"\r\n        );\r\n    }\r\n  });\r\n}\r\nasync function randomDayAtWork() {\r\n  try {\r\n    const instruction = await orderFromBoss();\r\n    const work = await coding(instruction);\r\n    const review = await performanceReview(work);\r\n    console.log(review);\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n}\r\nrandomDayAtWork();"
                }
              ],
              "hints": []
            }
          }
        ]
      }
    ]
  }
}