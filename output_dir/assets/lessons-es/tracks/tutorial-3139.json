{
  "tutorial": {
    "id": 3139,
    "version": 2,
    "type": "guidedProject",
    "isNew": false,
    "codeLanguage": "node",
    "title": "Cuadrícula de píxeles - Parte 3",
    "descriptionContent": "En la tercera parte, implementarás un nuevo endpoint para permitir a tus usuarios actualizar píxeles en la cuadrícula.",
    "shortDescriptionContent": "",
    "showInTrack": true,
    "iconBanner": "tutorial-3139-icon-banner.svg",
    "chapters": [
      {
        "id": 15458,
        "title": "Capítulo #1",
        "type": "practiceLevel3",
        "lessons": [
          {
            "title": "Lesson #2",
            "id": 135915,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Bienvenido de nuevo al back-end de **Pixel Grid**. En esta parte, implementaremos un endpoint `POST` para permitir que nuestros usuarios actualicen píxeles en la cuadrícula.\n\nComo requisito previo, permitiremos que el servidor analice cargas útiles JSON utilizando el middleware JSON incorporado de Express.\n\n1. Haz que la aplicación use el middleware JSON de Express para habilitar que nuestro servidor maneje datos JSON en las solicitudes entrantes.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "app.js",
                  "codeLanguage": "javascript",
                  "content": "const express = require(\"express\");\nconst cors = require(\"cors\");\nconst db = require(\"./database\");\nconst app = express();\nconst PORT = 3000;\n\napp.use(cors());\n\napp.get(\"/grid\", (req, res) => {\n  try {\n    const rows = db.prepare(\"SELECT * FROM grid\").all();\n    res.status(200).json({ grid: rows });\n  } catch (error) {\n    res.status(500).json({ message: \"Error fetching grid data\", error });\n  }\n});\n\napp.listen(PORT, () => {\n  console.log(`Server is running on port ${PORT}`);\n});\n",
                  "solvedContent": "const express = require(\"express\");\nconst cors = require(\"cors\");\nconst db = require(\"./database\");\nconst app = express();\nconst PORT = 3000;\n\napp.use(cors());\napp.use(express.json());\n\napp.get(\"/grid\", (req, res) => {\n  try {\n    const rows = db.prepare(\"SELECT * FROM grid\").all();\n    res.status(200).json({ grid: rows });\n  } catch (error) {\n    res.status(500).json({ message: \"Error fetching grid data\", error });\n  }\n});\n\napp.listen(PORT, () => {\n  console.log(`Server is running on port ${PORT}`);\n});\n"
                },
                {
                  "name": "database.js",
                  "codeLanguage": "javascript",
                  "content": "const Database = require(\"better-sqlite3\");\nconst db = new Database(\"/tmp/grid.db\");\n\ndb.exec(`\n  CREATE TABLE IF NOT EXISTS grid (\n    x INT,\n    y INT,\n    color TEXT\n  )\n`);\n\nconst rowCount = db.prepare(\"SELECT COUNT(*) AS count FROM grid\").get().count;\n\nif (rowCount === 0) {\n  const grid = [];\n  for (let x = 0; x < 20; x++) {\n    for (let y = 0; y < 20; y++) {\n      grid.push({ x, y, color: \"white\" });\n    }\n  }\n\n  const insertStatement = db.prepare(\n    `INSERT INTO grid (x, y, color) VALUES (?, ?, ?)`,\n  );\n  const insertTransaction = db.transaction((rows) => {\n    for (const row of rows) {\n      insertStatement.run(row.x, row.y, row.color);\n    }\n  });\n\n  insertTransaction(grid);\n}\n\nmodule.exports = db;\n",
                  "solvedContent": null
                }
              ],
              "hints": [],
              "httpOptions": {
                "method": "GET",
                "path": "/grid",
                "body": null
              }
            }
          },
          {
            "title": "Lesson #3",
            "id": 135916,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Ahora, comenzaremos a agregar un nuevo endpoint para actualizar el color de un píxel en la cuadrícula de píxeles. Como primer paso, define la ruta y extrae los datos en la solicitud para verificar su integridad. Una solicitud sin un color debería ser inválida.\n\n1. Crea un nuevo manejador de ruta `POST` para `\"/setGridColor\"`.\n2. Desestructura `x`, `y` y `color` del cuerpo del objeto de solicitud.\n3. Si falta el `color`, establece el estado en `400` y responde con un JSON con una propiedad *message* y un mensaje de error apropiado.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "app.js",
                  "codeLanguage": "javascript",
                  "content": "const express = require(\"express\");\nconst cors = require(\"cors\");\nconst db = require(\"./database\");\nconst app = express();\nconst PORT = 3000;\n\napp.use(cors());\napp.use(express.json());\n\napp.get(\"/grid\", (req, res) => {\n  try {\n    const rows = db.prepare(\"SELECT * FROM grid\").all();\n    res.status(200).json({ grid: rows });\n  } catch (error) {\n    res.status(500).json({ message: \"Error fetching grid data\", error });\n  }\n});\n\napp.listen(PORT, () => {\n  console.log(`Server is running on port ${PORT}`);\n});\n",
                  "solvedContent": "const express = require(\"express\");\nconst cors = require(\"cors\");\nconst db = require(\"./database\");\nconst app = express();\nconst PORT = 3000;\n\napp.use(cors());\napp.use(express.json());\n\napp.get(\"/grid\", (req, res) => {\n  try {\n    const rows = db.prepare(\"SELECT * FROM grid\").all();\n    res.status(200).json({ grid: rows });\n  } catch (error) {\n    res.status(500).json({ message: \"Error fetching grid data\", error });\n  }\n});\n\napp.post(\"/setGridColor\", (req, res) => {\n  const { x, y, color } = req.body;\n\n  if (!color) {\n    return res.status(400).json({ message: \"Invalid color value\" });\n  }\n});\n\napp.listen(PORT, () => {\n  console.log(`Server is running on port ${PORT}`);\n});\n"
                },
                {
                  "name": "database.js",
                  "codeLanguage": "javascript",
                  "content": "const Database = require(\"better-sqlite3\");\nconst db = new Database(\"/tmp/grid.db\");\n\ndb.exec(`\n  CREATE TABLE IF NOT EXISTS grid (\n    x INT,\n    y INT,\n    color TEXT\n  )\n`);\n\nconst rowCount = db.prepare(\"SELECT COUNT(*) AS count FROM grid\").get().count;\n\nif (rowCount === 0) {\n  const grid = [];\n  for (let x = 0; x < 20; x++) {\n    for (let y = 0; y < 20; y++) {\n      grid.push({ x, y, color: \"white\" });\n    }\n  }\n\n  const insertStatement = db.prepare(\n    `INSERT INTO grid (x, y, color) VALUES (?, ?, ?)`,\n  );\n  const insertTransaction = db.transaction((rows) => {\n    for (const row of rows) {\n      insertStatement.run(row.x, row.y, row.color);\n    }\n  });\n\n  insertTransaction(grid);\n}\n\nmodule.exports = db;\n",
                  "solvedContent": null
                }
              ],
              "hints": [],
              "httpOptions": {
                "method": "POST",
                "path": "/setGridColor",
                "body": "{ \"x\": 1, \"y\": 1, \"color\": \"black\" }"
              }
            }
          },
          {
            "title": "Lesson #4",
            "id": 135917,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "A continuación, valida las coordenadas recibidas en la solicitud ya que el cliente debe enviar las coordenadas junto con el color para que el back-end sepa qué píxel pintar y de qué color.\n\n1. Selecciona la fila de la base de datos con las coordenadas `x` e `y` dadas usando `db.prepare(\"SELECT * FROM grid WHERE x = ? AND y = ?\").get(x, y);`.\n2. Si no se encuentra ninguna fila, establece el estado a `400` y responde con un JSON con una propiedad *message* y un mensaje de error apropiado.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "app.js",
                  "codeLanguage": "javascript",
                  "content": "const express = require(\"express\");\nconst cors = require(\"cors\");\nconst db = require(\"./database\");\nconst app = express();\nconst PORT = 3000;\n\napp.use(cors());\napp.use(express.json());\n\napp.get(\"/grid\", (req, res) => {\n  try {\n    const rows = db.prepare(\"SELECT * FROM grid\").all();\n    res.status(200).json({ grid: rows });\n  } catch (error) {\n    res.status(500).json({ message: \"Error fetching grid data\", error });\n  }\n});\n\napp.post(\"/setGridColor\", (req, res) => {\n  const { x, y, color } = req.body;\n\n  if (!color) {\n    return res.status(400).json({ message: \"Invalid color value\" });\n  }\n});\n\napp.listen(PORT, () => {\n  console.log(`Server is running on port ${PORT}`);\n});\n",
                  "solvedContent": "const express = require(\"express\");\nconst cors = require(\"cors\");\nconst db = require(\"./database\");\nconst app = express();\nconst PORT = 3000;\n\napp.use(cors());\napp.use(express.json());\n\napp.get(\"/grid\", (req, res) => {\n  try {\n    const rows = db.prepare(\"SELECT * FROM grid\").all();\n    res.status(200).json({ grid: rows });\n  } catch (error) {\n    res.status(500).json({ message: \"Error fetching grid data\", error });\n  }\n});\n\napp.post(\"/setGridColor\", (req, res) => {\n  const { x, y, color } = req.body;\n\n  if (!color) {\n    return res.status(400).json({ message: \"Invalid color value\" });\n  }\n\n  const row = db.prepare(\"SELECT * FROM grid WHERE x = ? AND y = ?\").get(x, y);\n\n  if (!row) {\n    return res.status(400).json({ message: \"Invalid coordinates\" });\n  }\n});\n\napp.listen(PORT, () => {\n  console.log(`Server is running on port ${PORT}`);\n});\n"
                },
                {
                  "name": "database.js",
                  "codeLanguage": "javascript",
                  "content": "const Database = require(\"better-sqlite3\");\nconst db = new Database(\"/tmp/grid.db\");\n\ndb.exec(`\n  CREATE TABLE IF NOT EXISTS grid (\n    x INT,\n    y INT,\n    color TEXT\n  )\n`);\n\nconst rowCount = db.prepare(\"SELECT COUNT(*) AS count FROM grid\").get().count;\n\nif (rowCount === 0) {\n  const grid = [];\n  for (let x = 0; x < 20; x++) {\n    for (let y = 0; y < 20; y++) {\n      grid.push({ x, y, color: \"white\" });\n    }\n  }\n\n  const insertStatement = db.prepare(\n    `INSERT INTO grid (x, y, color) VALUES (?, ?, ?)`,\n  );\n  const insertTransaction = db.transaction((rows) => {\n    for (const row of rows) {\n      insertStatement.run(row.x, row.y, row.color);\n    }\n  });\n\n  insertTransaction(grid);\n}\n\nmodule.exports = db;\n",
                  "solvedContent": null
                }
              ],
              "hints": [],
              "httpOptions": {
                "method": "POST",
                "path": "/setGridColor",
                "body": "{ \"x\": 1, \"y\": 1, \"color\": \"black\" }"
              }
            }
          },
          {
            "title": "Lesson #5",
            "id": 135918,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Finalmente, actualizaremos el color del píxel en la base de datos y devolveremos la cuadrícula actualizada en la respuesta. Queremos devolver la cuadrícula completa para asegurarnos de que el usuario esté actualizado en caso de que otro usuario actualice partes de la cuadrícula mientras tanto.\n\n1. Actualiza el color de la celda de la cuadrícula deseada:\n   - Prepara una declaración con `db.prepare(\"UPDATE ...\")`.\n   - Ejecuta la declaración preparada con los valores pasados.\n2. Después de actualizar el color del píxel, recupera la cuadrícula completa de la base de datos.\n3. Responde con la cuadrícula actualizada y un mensaje de éxito. Establece el código de estado en `200` y asegúrate de que el objeto de respuesta devuelva un JSON con una propiedad *message* y una propiedad *grid*.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "app.js",
                  "codeLanguage": "javascript",
                  "content": "const express = require(\"express\");\nconst cors = require(\"cors\");\nconst db = require(\"./database\");\nconst app = express();\nconst PORT = 3000;\n\napp.use(cors());\napp.use(express.json());\n\napp.get(\"/grid\", (req, res) => {\n  try {\n    const rows = db.prepare(\"SELECT * FROM grid\").all();\n    res.status(200).json({ grid: rows });\n  } catch (error) {\n    res.status(500).json({ message: \"Error fetching grid data\", error });\n  }\n});\n\napp.post(\"/setGridColor\", (req, res) => {\n  const { x, y, color } = req.body;\n\n  if (!color) {\n    return res.status(400).json({ message: \"Invalid color value\" });\n  }\n\n  const row = db.prepare(\"SELECT * FROM grid WHERE x = ? AND y = ?\").get(x, y);\n\n  if (!row) {\n    return res.status(400).json({ message: \"Invalid coordinates\" });\n  }\n});\n\napp.listen(PORT, () => {\n  console.log(`Server is running on port ${PORT}`);\n});",
                  "solvedContent": "const express = require(\"express\");\nconst cors = require(\"cors\");\nconst db = require(\"./database\");\nconst app = express();\nconst PORT = 3000;\n\napp.use(cors());\napp.use(express.json());\n\napp.get(\"/grid\", (req, res) => {\n  try {\n    const rows = db.prepare(\"SELECT * FROM grid\").all();\n    res.status(200).json({ grid: rows });\n  } catch (error) {\n    res.status(500).json({ message: \"Error fetching grid data\", error });\n  }\n});\n\napp.post(\"/setGridColor\", (req, res) => {\n  const { x, y, color } = req.body;\n\n  if (!color) {\n    return res.status(400).json({ message: \"Invalid color value\" });\n  }\n\n  const row = db.prepare(\"SELECT * FROM grid WHERE x = ? AND y = ?\").get(x, y);\n\n  if (!row) {\n    return res.status(400).json({ message: \"Invalid coordinates\" });\n  }\n\n  db.prepare(\"UPDATE grid SET color = ? WHERE x = ? AND y = ?\").run(\n    color,\n    x,\n    y,\n  );\n\n  const updatedGrid = db.prepare(\"SELECT * FROM grid\").all();\n  res.status(200).json({ message: \"Grid color updated\", grid: updatedGrid });\n});\n\napp.listen(PORT, () => {\n  console.log(`Server is running on port ${PORT}`);\n});"
                },
                {
                  "name": "database.js",
                  "codeLanguage": "javascript",
                  "content": "const Database = require(\"better-sqlite3\");\nconst db = new Database(\"/tmp/grid.db\");\n\ndb.exec(`\n  CREATE TABLE IF NOT EXISTS grid (\n    x INT,\n    y INT,\n    color TEXT\n  )\n`);\n\nconst rowCount = db.prepare(\"SELECT COUNT(*) AS count FROM grid\").get().count;\n\nif (rowCount === 0) {\n  const grid = [];\n  for (let x = 0; x < 20; x++) {\n    for (let y = 0; y < 20; y++) {\n      grid.push({ x, y, color: \"white\" });\n    }\n  }\n\n  const insertStatement = db.prepare(\n    `INSERT INTO grid (x, y, color) VALUES (?, ?, ?)`,\n  );\n  const insertTransaction = db.transaction((rows) => {\n    for (const row of rows) {\n      insertStatement.run(row.x, row.y, row.color);\n    }\n  });\n\n  insertTransaction(grid);\n}\n\nmodule.exports = db;\n",
                  "solvedContent": null
                }
              ],
              "hints": [],
              "httpOptions": {
                "method": "POST",
                "path": "/setGridColor",
                "body": "{ \"x\": 1, \"y\": 1, \"color\": \"black\" }"
              }
            }
          }
        ]
      }
    ]
  }
}