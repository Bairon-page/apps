{
  "tutorial": {
    "id": 2661,
    "version": 5,
    "type": "guidedProject",
    "isNew": false,
    "codeLanguage": "python",
    "title": "Lista de Tareas - Parte 1",
    "descriptionContent": "Comienza a construir tu aplicación de lista de tareas. Este primer paso se centra en crear la estructura básica y agregar tareas.",
    "shortDescriptionContent": "",
    "showInTrack": true,
    "iconBanner": "tutorial-2661-icon-banner.svg",
    "chapters": [
      {
        "id": 14636,
        "title": "Capítulo #1",
        "type": "practiceLevel3",
        "lessons": [
          {
            "title": "Lesson #1",
            "id": 129453,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Bienvenido al proyecto de **ToDo List**. Aquí, construirás una lista para todas tus tareas.\n\nComencemos creando una lista vacía que contendrá las tareas para la lista de ToDo.\n\n1. Crea una variable llamada `todo_list` y asígnale una lista vacía `[]`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "",
                  "solvedContent": "todo_list = []"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Lesson #2",
            "id": 129454,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Deberíamos decirle al usuario si su lista de tareas está vacía. Haz esto comprobando la longitud de `todo_list` dentro de una declaración `if`.\n\n1. Usa una declaración `if` que verifique si `todo_list` está vacía.\n2. Si lo está, debería imprimir la cadena `\"Your ToDo list is empty\"`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "todo_list = []",
                  "solvedContent": "todo_list = []\n\nif not todo_list:\n  print(\"Your ToDo list is empty\")"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Lesson #3",
            "id": 129455,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "¿Lista vacía? Vamos a solucionarlo añadiendo algunas tareas y mostrándolas.\n\n1. Actualiza la primera línea añadiendo dos elementos a la `todo_list` que podamos mostrar;\n2. Añade una cláusula `else` a la declaración `if` que se ejecutará si la lista no está vacía.\n3. Dentro de la cláusula `else`, crea una variable llamada `index` y asígnale un valor de `1`.\n4. Aún dentro de la cláusula `else`, inicia un bucle `for` para iterar sobre cada `task` en `todo_list`.\n5. En el bucle `for`, imprime el `index`, seguido de un `.` y luego la `task`. Usa un f-string para esto como `f\"{index}. {task}\"`.\n6. Después de imprimir la tarea, incrementa `index` en `1`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "todo_list = []\n\nif not todo_list:\n  print(\"Your ToDo list is empty\")",
                  "solvedContent": "todo_list = [\"Task 1\", \"Task 2\"]\n\nif not todo_list:\n  print(\"Your ToDo list is empty\")\nelse:\n  index = 1\n  for task in todo_list:\n    print(f\"{index}. {task}\")\n    index += 1"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Lesson #4",
            "id": 129456,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Nuestro programa debería pedirle al usuario que ingrese una nueva tarea. Usemos la función `input` para obtener la entrada del usuario.\n\n1. Agrega una función `input` con el mensaje `\"Enter the task: \"` directamente debajo de la línea donde defines el `todo_list`. Crea una variable llamada `new_task` para guardar la entrada recibida de la función `input`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "todo_list = [\"Task 1\", \"Task 2\"]\n\nif not todo_list:\n  print(\"Your ToDo list is empty\")\nelse:\n  index = 1\n  for task in todo_list:\n    print(f\"{index}. {task}\")\n    index += 1",
                  "solvedContent": "todo_list = [\"Task 1\", \"Task 2\"]\n\nnew_task = input(\"Enter the task: \")\n\nif not todo_list:\n  print(\"Your ToDo list is empty\")\nelse:\n  index = 1\n  for task in todo_list:\n    print(f\"{index}. {task}\")\n    index += 1"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Lesson #5",
            "id": 129457,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Vamos a añadir la nueva tarea del usuario a la `todo_list` y confirmar que la tarea ha sido añadida.\n\n1. Antes del bloque `if`, añade la variable `new_task` a `todo_list`.\n2. Imprime `Task \"{new_task}\" added`, usando un f-string para incluir la tarea que el usuario añadió.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "todo_list = [\"Task 1\", \"Task 2\"]\n\nnew_task = input(\"Enter the task: \")\n\nif not todo_list:\n  print(\"Your ToDo list is empty\")\nelse:\n  index = 1\n  for task in todo_list:\n    print(f\"{index}. {task}\")\n    index += 1",
                  "solvedContent": "todo_list = [\"Task 1\", \"Task 2\"]\n\nnew_task = input(\"Enter the task: \")\ntodo_list.append(new_task)\nprint(f\"Task '{new_task}' added to the ToDo list\")\n\nif not todo_list:\n  print(\"Your ToDo list is empty\")\nelse:\n  index = 1\n  for task in todo_list:\n    print(f\"{index}. {task}\")\n    index += 1"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Lesson #6",
            "id": 129458,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Finalmente, ejecutemos un bucle hasta que el usuario decida salir. Por ahora, lo haremos correr para siempre. Cambiaremos eso en la segunda parte del proyecto.\n\n1. Envuelve todo el código dentro de un bucle `while` que tenga la condición establecida en `True`, manteniendo la primera línea donde defines la variable `todo_list` afuera.\n\nDespués de implementar el bucle `while`, agrega algunas tareas y observa cómo crece la lista.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "todo_list = [\"Task 1\", \"Task 2\"]\n\nnew_task = input(\"Enter the task: \")\ntodo_list.append(new_task)\nprint(f\"Task '{new_task}' added to the ToDo list\")\n\nif not todo_list:\n  print(\"Your ToDo list is empty\")\nelse:\n  index = 1\n  for task in todo_list:\n    print(f\"{index}. {task}\")\n    index += 1",
                  "solvedContent": "todo_list = [\"Task 1\", \"Task 2\"]\n\nwhile True:\n  new_task = input(\"Enter the task: \")\n  todo_list.append(new_task)\n  print(f\"Task '{new_task}' added to the ToDo list\")\n\n  if not todo_list:\n    print(\"Your ToDo list is empty\")\n  else:\n    index = 1\n    for task in todo_list:\n      print(f\"{index}. {task}\")\n      index += 1"
                }
              ],
              "hints": []
            }
          }
        ]
      }
    ]
  }
}