{
  "tutorial": {
    "id": 2887,
    "version": 3,
    "type": "guidedProject",
    "isNew": false,
    "codeLanguage": "node",
    "title": "Book Keeper - Parte 1",
    "descriptionContent": "Construye un backend que haga un seguimiento de todos los libros que lees. Con la ayuda de una base de datos, crearás la estantería digital perfecta.",
    "shortDescriptionContent": "",
    "showInTrack": true,
    "iconBanner": "tutorial-2887-icon-banner.svg",
    "chapters": [
      {
        "id": 14978,
        "title": "Capítulo #1",
        "type": "practiceLevel3",
        "lessons": [
          {
            "title": "Lesson #7",
            "id": 132068,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Bienvenido al proyecto **Book Keeper**. Vamos a construir una app para guardar los libros que leemos y permitirnos añadir notas.\n\nComenzaremos configurando el servidor Express.\n\n1. Declara una variable `express` y requiere el módulo `express`.\n2. Declara una variable `app` e inicialízala llamando a la función `express`.\n3. Declara una variable `port` y asígnale el valor `3000`.\n4. Usa la función `listen` en `app` para que la app escuche en el puerto especificado por la variable `port`.\n5. Registra un mensaje en la consola dentro del callback de la función `listen` para que sepamos que nuestro servidor está funcionando correctamente.",
              "preselectedFileIndex": 1,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "database.js",
                  "codeLanguage": "javascript",
                  "content": "",
                  "solvedContent": null
                },
                {
                  "name": "app.js",
                  "codeLanguage": "javascript",
                  "content": "",
                  "solvedContent": "const express = require('express');\nconst app = express();\nconst port = 3000;\n\napp.listen(port, function() {\n  console.log(`App is listening on port ${port}`);\n});"
                }
              ],
              "hints": [],
              "httpOptions": {
                "method": "GET",
                "path": "/books",
                "body": null
              }
            }
          },
          {
            "title": "Lesson #6",
            "id": 132067,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "A continuación, agregaremos algunos middleware para analizar cuerpos JSON en las solicitudes entrantes.\n\n1. Llama a `app.use` y pasa `express.json()` para analizar los cuerpos de todas las solicitudes entrantes y colocar los datos analizados en `req.body`.",
              "preselectedFileIndex": 1,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "database.js",
                  "codeLanguage": "javascript",
                  "content": "",
                  "solvedContent": null
                },
                {
                  "name": "app.js",
                  "codeLanguage": "javascript",
                  "content": "const express = require('express');\nconst app = express();\nconst port = 3000;\n\napp.listen(port, function() {\n  console.log(`App is listening on port ${port}`);\n});",
                  "solvedContent": "const express = require('express');\nconst app = express();\nconst port = 3000;\n\napp.use(express.json());\n\napp.listen(port, function() {\n  console.log(`App is listening on port ${port}`);\n});"
                }
              ],
              "hints": [],
              "httpOptions": {
                "method": "GET",
                "path": "/books",
                "body": null
              }
            }
          },
          {
            "title": "Lesson #1",
            "id": 132062,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Para trabajar con datos, configuraremos nuestra base de datos SQLite.\n\n1. En `database.js`, importa el módulo `better-sqlite3` usando `require(\"better-sqlite3'\")`. Asigna el objeto resultante a una constante llamada `Database`.\n2. Crea una nueva base de datos SQLite llamada `/tmp/quiz.db` invocando `new Database(\"/tmp/books.db\")`. Guarda el objeto de la base de datos en una constante llamada `db`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "database.js",
                  "codeLanguage": "javascript",
                  "content": "",
                  "solvedContent": "const Database = require('better-sqlite3');\nconst db = new Database('/tmp/books.db');"
                },
                {
                  "name": "app.js",
                  "codeLanguage": "javascript",
                  "content": "const express = require('express');\nconst app = express();\nconst port = 3000;\n\napp.use(express.json());\n\napp.listen(port, function() {\n  console.log(`App is listening on port ${port}`);\n});",
                  "solvedContent": null
                }
              ],
              "hints": [],
              "httpOptions": {
                "method": "GET",
                "path": "/books",
                "body": null
              }
            }
          },
          {
            "title": "Lesson #2",
            "id": 132063,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Ahora, vamos a crear una tabla para almacenar nuestros libros.\n\n1. Usa el método `db.exec` para ejecutar el comando SQL de creación de la tabla.\n2. Crea una tabla `questions` solo si aún no existe. La tabla `books` debe tener las siguientes columnas:\n- `id`: un entero, clave primaria, auto-incrementado\n- `title`: una cadena, no nula\n- `author`: una cadena, no nula\n- `year`: un entero",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "database.js",
                  "codeLanguage": "javascript",
                  "content": "const Database = require('better-sqlite3');\nconst db = new Database('/tmp/books.db');",
                  "solvedContent": "const Database = require('better-sqlite3');\nconst db = new Database('/tmp/books.db');\n\ndb.exec(`\n    CREATE TABLE IF NOT EXISTS books (\n      id INTEGER PRIMARY KEY AUTOINCREMENT,\n      title TEXT NOT NULL,\n      author TEXT NOT NULL,\n      year INTEGER\n    )\n`);"
                },
                {
                  "name": "app.js",
                  "codeLanguage": "javascript",
                  "content": "const express = require('express');\nconst app = express();\nconst port = 3000;\n\napp.use(express.json());\n\napp.listen(port, function() {\n  console.log(`App is listening on port ${port}`);\n});",
                  "solvedContent": null
                }
              ],
              "hints": [],
              "httpOptions": {
                "method": "GET",
                "path": "/books",
                "body": null
              }
            }
          },
          {
            "title": "Lesson #3",
            "id": 132064,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Agreguemos algunas entradas de ejemplo a nuestra tabla de libros.\n\n1. Usando `db.exec`, agrega al menos tres libros a la base de datos.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "database.js",
                  "codeLanguage": "javascript",
                  "content": "const Database = require('better-sqlite3');\nconst db = new Database('/tmp/books.db');\n\ndb.exec(`\n    CREATE TABLE IF NOT EXISTS books (\n      id INTEGER PRIMARY KEY AUTOINCREMENT,\n      title TEXT NOT NULL,\n      author TEXT NOT NULL,\n      year INTEGER\n    )\n`);\n",
                  "solvedContent": "const Database = require('better-sqlite3');\nconst db = new Database('/tmp/books.db');\n\ndb.exec(`\n    CREATE TABLE IF NOT EXISTS books (\n      id INTEGER PRIMARY KEY AUTOINCREMENT,\n      title TEXT NOT NULL,\n      author TEXT NOT NULL,\n      year INTEGER\n    )\n`);\n\ndb.exec(`\n  INSERT INTO books (title, author, year)\n    VALUES \n    ('1984', 'George Orwell', 1949),\n    ('Brave New World', 'Aldous Huxley', 1932),\n    ('Fahrenheit 451', 'Ray Bradbury', 1953)\n`);"
                },
                {
                  "name": "app.js",
                  "codeLanguage": "javascript",
                  "content": "const express = require('express');\nconst app = express();\nconst port = 3000;\n\napp.use(express.json());\n\napp.listen(port, function() {\n  console.log(`App is listening on port ${port}`);\n});",
                  "solvedContent": null
                }
              ],
              "hints": [],
              "httpOptions": {
                "method": "GET",
                "path": "/books",
                "body": null
              }
            }
          },
          {
            "title": "Lesson #4",
            "id": 132065,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Finalmente, asegúrate de que podemos usar nuestra conexión a la base de datos en otros archivos.\n\n1. Usando `module.exports`, exporta `db` al final del archivo.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "database.js",
                  "codeLanguage": "javascript",
                  "content": "const Database = require('better-sqlite3');\nconst db = new Database('/tmp/books.db');\n\ndb.exec(`\n    CREATE TABLE IF NOT EXISTS books (\n      id INTEGER PRIMARY KEY AUTOINCREMENT,\n      title TEXT NOT NULL,\n      author TEXT NOT NULL,\n      year INTEGER\n    )\n`);\n\ndb.exec(`\n  INSERT INTO books (title, author, year)\n    VALUES \n    ('1984', 'George Orwell', 1949),\n    ('Brave New World', 'Aldous Huxley', 1932),\n    ('Fahrenheit 451', 'Ray Bradbury', 1953)\n`);",
                  "solvedContent": "const Database = require('better-sqlite3');\nconst db = new Database('/tmp/books.db');\n\ndb.exec(`\n    CREATE TABLE IF NOT EXISTS books (\n      id INTEGER PRIMARY KEY AUTOINCREMENT,\n      title TEXT NOT NULL,\n      author TEXT NOT NULL,\n      year INTEGER\n    )\n`);\n\ndb.exec(`\n  INSERT INTO books (title, author, year)\n    VALUES \n    ('1984', 'George Orwell', 1949),\n    ('Brave New World', 'Aldous Huxley', 1932),\n    ('Fahrenheit 451', 'Ray Bradbury', 1953)\n`);\n\nmodule.exports = db;"
                },
                {
                  "name": "app.js",
                  "codeLanguage": "javascript",
                  "content": "const express = require('express');\nconst app = express();\nconst port = 3000;\n\napp.use(express.json());\n\napp.listen(port, function() {\n  console.log(`App is listening on port ${port}`);\n});",
                  "solvedContent": null
                }
              ],
              "hints": [],
              "httpOptions": {
                "method": "GET",
                "path": "/books",
                "body": null
              }
            }
          },
          {
            "title": "Lesson #5",
            "id": 132066,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Vamos a usar la base de datos que creamos en nuestra aplicación.\n\n1. Importa el objeto `db` que exportamos en `database.js` al inicio del archivo `app.js`. Guarda la base de datos importada en una variable llamada `db`.",
              "preselectedFileIndex": 1,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "database.js",
                  "codeLanguage": "javascript",
                  "content": "const Database = require('better-sqlite3');\nconst db = new Database('/tmp/books.db');\n\ndb.exec(`\n    CREATE TABLE IF NOT EXISTS books (\n      id INTEGER PRIMARY KEY AUTOINCREMENT,\n      title TEXT NOT NULL,\n      author TEXT NOT NULL,\n      year INTEGER\n    )\n`);\n\ndb.exec(`\n  INSERT INTO books (title, author, year)\n    VALUES \n    ('1984', 'George Orwell', 1949),\n    ('Brave New World', 'Aldous Huxley', 1932),\n    ('Fahrenheit 451', 'Ray Bradbury', 1953)\n`);\n\nmodule.exports = db;",
                  "solvedContent": null
                },
                {
                  "name": "app.js",
                  "codeLanguage": "javascript",
                  "content": "const express = require('express');\nconst app = express();\nconst port = 3000;\n\napp.use(express.json());\n\napp.listen(port, function() {\n  console.log(`App is listening on port ${port}`);\n});",
                  "solvedContent": "const express = require('express');\nconst db = require('./database');\n\nconst app = express();\nconst port = 3000;\n\napp.use(express.json());\n\napp.listen(port, function() {\n  console.log(`App is listening on port ${port}`);\n});"
                }
              ],
              "hints": [],
              "httpOptions": {
                "method": "GET",
                "path": "/books",
                "body": null
              }
            }
          },
          {
            "title": "Lesson #8",
            "id": 132069,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "A continuación, vamos a crear un endpoint para obtener todos los libros.\n\n1. Usa `app.get` para crear una nueva ruta GET para el path `/books`.\n2. Dentro del manejador de rutas, usa el `db` importado para seleccionar todos los registros de la tabla `books`.\n3. Responde con un objeto JSON que contenga los libros y establece el código de estado a 200.",
              "preselectedFileIndex": 1,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "database.js",
                  "codeLanguage": "javascript",
                  "content": "const Database = require('better-sqlite3');\nconst db = new Database('/tmp/books.db');\n\ndb.exec(`\n    CREATE TABLE IF NOT EXISTS books (\n      id INTEGER PRIMARY KEY AUTOINCREMENT,\n      title TEXT NOT NULL,\n      author TEXT NOT NULL,\n      year INTEGER\n    )\n`);\n\ndb.exec(`\n  INSERT INTO books (title, author, year)\n    VALUES \n    ('1984', 'George Orwell', 1949),\n    ('Brave New World', 'Aldous Huxley', 1932),\n    ('Fahrenheit 451', 'Ray Bradbury', 1953)\n`);\n\nmodule.exports = db;",
                  "solvedContent": null
                },
                {
                  "name": "app.js",
                  "codeLanguage": "javascript",
                  "content": "const express = require('express');\nconst db = require('./database');\n\nconst app = express();\nconst port = 3000;\n\napp.use(express.json());\n\napp.listen(port, function() {\n  console.log(`App is listening on port ${port}`);\n});",
                  "solvedContent": "const express = require('express');\nconst db = require('./database');\n\nconst app = express();\nconst port = 3000;\n\napp.use(express.json());\n\napp.listen(port, function() {\n  console.log(`App is listening on port ${port}`);\n});\n\napp.get('/books', (req, res) => {\n  const rows = db.prepare('SELECT * FROM books').all();\n  res.status(200).json({\n    books: rows\n  });\n});"
                }
              ],
              "hints": [],
              "httpOptions": {
                "method": "GET",
                "path": "/books",
                "body": null
              }
            }
          },
          {
            "title": "Lesson #9",
            "id": 132070,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Ahora, vamos a crear un endpoint para obtener un solo libro.\n\n1. Usa `app.get` para crear una nueva ruta GET para el camino `/books/:id`.\n2. Dentro del manejador de rutas, desestructura `id` de `req.params`.\n3. Usa el `db` importado para seleccionar un registro de la tabla `books` con un `id` que coincida.\n4. Responde con un objeto JSON que contenga el libro y establece el código de estado a 200.",
              "preselectedFileIndex": 1,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "database.js",
                  "codeLanguage": "javascript",
                  "content": "const Database = require('better-sqlite3');\nconst db = new Database('/tmp/books.db');\n\ndb.exec(`\n    CREATE TABLE IF NOT EXISTS books (\n      id INTEGER PRIMARY KEY AUTOINCREMENT,\n      title TEXT NOT NULL,\n      author TEXT NOT NULL,\n      year INTEGER\n    )\n`);\n\ndb.exec(`\n  INSERT INTO books (title, author, year)\n    VALUES \n    ('1984', 'George Orwell', 1949),\n    ('Brave New World', 'Aldous Huxley', 1932),\n    ('Fahrenheit 451', 'Ray Bradbury', 1953)\n`);\n\nmodule.exports = db;",
                  "solvedContent": null
                },
                {
                  "name": "app.js",
                  "codeLanguage": "javascript",
                  "content": "const express = require('express');\nconst db = require('./database');\n\nconst app = express();\nconst port = 3000;\n\napp.use(express.json());\n\napp.listen(port, function() {\n  console.log(`App is listening on port ${port}`);\n});\n\napp.get('/books', (req, res) => {\n  const rows = db.prepare('SELECT * FROM books').all();\n  res.status(200).json({\n    books: rows\n  });\n});",
                  "solvedContent": "const express = require('express');\nconst db = require('./database');\n\nconst app = express();\nconst port = 3000;\n\napp.use(express.json());\n\napp.listen(port, function() {\n  console.log(`App is listening on port ${port}`);\n});\n\napp.get('/books', (req, res) => {\n  const rows = db.prepare('SELECT * FROM books').all();\n  res.status(200).json({\n    books: rows\n  });\n});\n\napp.get('/books/:id', (req, res) => {\n  const { id } = req.params;\n  const book = db.prepare('SELECT * FROM books WHERE id = ?').get(id);\n  \n  res.status(200).json({\n    book: book\n  });\n});\n"
                }
              ],
              "hints": [],
              "httpOptions": {
                "method": "GET",
                "path": "/books/1",
                "body": null
              }
            }
          },
          {
            "title": "Lesson #10",
            "id": 132071,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Ahora, vamos a crear un endpoint para añadir un nuevo libro.\n\n1. Usa `app.post` para crear una nueva ruta POST para el camino `/books`.\n2. Dentro del manejador de rutas, desestructura `title`, `author` y `year` de `req.body`.\n3. Inserta una nueva fila en la tabla de libros usando el `title`, `author` y `year` proporcionados.\n4. Responde con un estado 201 y un objeto JSON que contenga la clave `\"bookId\"` que tenga el id del nuevo libro.",
              "preselectedFileIndex": 1,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "database.js",
                  "codeLanguage": "javascript",
                  "content": "const Database = require('better-sqlite3');\nconst db = new Database('/tmp/books.db');\n\ndb.exec(`\n    CREATE TABLE IF NOT EXISTS books (\n      id INTEGER PRIMARY KEY AUTOINCREMENT,\n      title TEXT NOT NULL,\n      author TEXT NOT NULL,\n      year INTEGER\n    )\n`);\n\ndb.exec(`\n  INSERT INTO books (title, author, year)\n    VALUES \n    ('1984', 'George Orwell', 1949),\n    ('Brave New World', 'Aldous Huxley', 1932),\n    ('Fahrenheit 451', 'Ray Bradbury', 1953)\n`);\n\nmodule.exports = db;",
                  "solvedContent": null
                },
                {
                  "name": "app.js",
                  "codeLanguage": "javascript",
                  "content": "const express = require('express');\nconst db = require('./database');\n\nconst app = express();\nconst port = 3000;\n\napp.use(express.json());\n\napp.listen(port, function() {\n  console.log(`App is listening on port ${port}`);\n});\n\napp.get('/books', (req, res) => {\n  const rows = db.prepare('SELECT * FROM books').all();\n  res.status(200).json({\n    books: rows\n  });\n});\n\napp.get('/books/:id', (req, res) => {\n  const { id } = req.params;\n  const book = db.prepare('SELECT * FROM books WHERE id = ?').get(id);\n  \n  res.status(200).json({\n    book: book\n  });\n});\n",
                  "solvedContent": "const express = require('express');\nconst db = require('./database');\n\nconst app = express();\nconst port = 3000;\n\napp.use(express.json());\n\napp.listen(port, function() {\n  console.log(`App is listening on port ${port}`);\n});\n\napp.get('/books', (req, res) => {\n  const rows = db.prepare('SELECT * FROM books').all();\n  res.status(200).json({\n    books: rows\n  });\n});\n\napp.get('/books/:id', (req, res) => {\n  const { id } = req.params;\n  const book = db.prepare('SELECT * FROM books WHERE id = ?').get(id);\n  \n  res.status(200).json({\n    book: book\n  });\n});\n\napp.post('/books', (req, res) => {\n  const { title, author, year } = req.body;\n\n  const insert = db.prepare('INSERT INTO books (title, author, year) VALUES (?, ?, ?)');\n  const result = insert.run(title, author, year);\n\n  res.status(201).json({\n    bookId: result.lastInsertRowid\n  });\n});"
                }
              ],
              "hints": [],
              "httpOptions": {
                "method": "POST",
                "path": "/books",
                "body": "{\n  \"title\": \"My Book\",\n  \"author\": \"Me\",\n  \"year\": 2024\n}"
              }
            }
          }
        ]
      }
    ]
  }
}