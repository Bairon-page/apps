{
  "tutorial": {
    "id": 1924,
    "version": 15,
    "type": "guidedProjectOptional",
    "isNew": false,
    "codeLanguage": "javascript",
    "title": "Restaurantbestellungen",
    "descriptionContent": "Nutze dein JavaScript-Wissen, um ein Programm zu erstellen, das Bestellungen an Restaurants aufgibt.",
    "shortDescriptionContent": "",
    "showInTrack": true,
    "iconBanner": "tutorial-1924-icon-banner.svg",
    "chapters": [
      {
        "id": 12511,
        "title": "Restaurantbestellungen",
        "type": "practiceLevel3",
        "lessons": [
          {
            "title": "Starter Code ",
            "id": 113174,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Lass uns unser Wissen über Bedingungen und Schleifen nutzen, um Funktionen zu erstellen, die Aktionen für einen Kunden ausführen, der Essen in einem Restaurant bestellen möchte.\n\nBeginnen wir damit, unseren Starter-Code anzusehen, damit wir verstehen, worauf wir hinarbeiten.\n\nEs gibt drei Menüliste, jede ist eine Liste mit Darstellungen der verfügbaren Mahlzeiten. Jede Mahlzeit ist ein Objekt, das `mealName`, `quantity` und `price` als Eigenschaften hat.\n\nWir haben auch drei leere Funktionen `findMeal`, `selectMeal` und `createSummary`.\n\nMit deinem Javascript-Wissen wirst du jede Funktion definieren, damit sie ihre jeweiligen Aufgaben ausführen können.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const italianFood = [{\n  mealName: \"Pasta Bolognese\",\n  quantity: 3,\n  price: 7\n}, {\n  mealName: \"Pepperoni pizza\",\n  quantity: 2,\n  price: 10\n}];\nconst thaiFood = [{\n  mealName: \"Pad Thai\",\n  quantity: 1,\n  price: 8\n}];\nconst indianFood = [{\n  mealName: \"Chapati\",\n  quantity: 8,\n  price: 7\n}, {\n  mealName: \"Chicken Massala\",\n  quantity: 5,\n  price: 9\n}, {\n  mealName: \"Tandoori Chicken\",\n  quantity: 5,\n  price: 9\n}];\n\nfunction findMeal(name, menu) {}\n\nfunction selectMeal(name, type) {}\n\nfunction createSummary(name, type, amount) {}",
                  "solvedContent": "const italianFood = [{\n  mealName: \"Pasta Bolognese\",\n  quantity: 3,\n  price: 7\n}, {\n  mealName: \"Pepperoni pizza\",\n  quantity: 2,\n  price: 10\n}];\nconst thaiFood = [{\n  mealName: \"Pad Thai\",\n  quantity: 1,\n  price: 8\n}];\nconst indianFood = [{\n  mealName: \"Chapati\",\n  quantity: 8,\n  price: 7\n}, {\n  mealName: \"Chicken Massala\",\n  quantity: 5,\n  price: 9\n}, {\n  mealName: \"Tandoori Chicken\",\n  quantity: 5,\n  price: 9\n}];\n\nfunction findMeal(name, menu) {}\n\nfunction selectMeal(name, type) {}\n\nfunction createSummary(name, type, amount) {}"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Define findMeal",
            "id": 113175,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Jetzt, da wir unseren Starter-Code durchgegangen sind, lass uns mit der Erstellung einer Funktion `findMeal` beginnen, die die Details eines Gerichts aus einem Menü zurückgibt, nachdem dessen Name eingegeben wurde.\n\n1. Beginne mit der Erstellung einer `for`-Schleife, die durch das `menu`-Array iteriert, ein Parameter in der Funktion `findMeal`.\n2. Füge im Körper der `for`-Schleife eine Bedingung hinzu, die überprüft, ob der `mealName` des aktuellen `menu`-Elements gleich dem `name`-String ist. Dies hilft uns zu überprüfen, ob das ausgewählte `menu` ein Gericht mit diesem `name` hat.\n3. Gib das aktuelle Menüelement zurück, wenn die Bedingung `true` ist. Das bedeutet, dass wir dieses Gericht im Menü gefunden haben.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const italianFood = [{\n  mealName: \"Pasta Bolognese\",\n  quantity: 3,\n  price: 7\n}, {\n  mealName: \"Pepperoni pizza\",\n  quantity: 2,\n  price: 10\n}];\nconst thaiFood = [{\n  mealName: \"Pad Thai\",\n  quantity: 1,\n  price: 8\n}];\nconst indianFood = [{\n  mealName: \"Chapati\",\n  quantity: 8,\n  price: 7\n}, {\n  mealName: \"Chicken Massala\",\n  quantity: 5,\n  price: 9\n}, {\n  mealName: \"Tandoori Chicken\",\n  quantity: 5,\n  price: 9\n}];\n\nfunction findMeal(name, menu) {}\n\nfunction selectMeal(name, type) {}\n\nfunction createSummary(name, type, amount) {}",
                  "solvedContent": "const italianFood = [{\n  mealName: \"Pasta Bolognese\",\n  quantity: 3,\n  price: 7\n}, {\n  mealName: \"Pepperoni pizza\",\n  quantity: 2,\n  price: 10\n}];\nconst thaiFood = [{\n  mealName: \"Pad Thai\",\n  quantity: 1,\n  price: 8\n}];\nconst indianFood = [{\n  mealName: \"Chapati\",\n  quantity: 8,\n  price: 7\n}, {\n  mealName: \"Chicken Massala\",\n  quantity: 5,\n  price: 9\n}, {\n  mealName: \"Tandoori Chicken\",\n  quantity: 5,\n  price: 9\n}];\n\nfunction findMeal(name, menu) {\n  for (let i = 0; i < menu.length; i++) {\n    if (menu[i].mealName === name) {\n      return menu[i];\n    }\n  }\n}\n\nfunction selectMeal(name, type) {}\n\nfunction createSummary(name, type, amount) {}"
                }
              ],
              "hints": [
                {
                  "title": "Hint",
                  "content": "1. Make sure the `for` loop looks like `for(let i = 0; i < menu.length; i++){}`\n2. Use an `if` statement inside the `for` loop. Use `menu[i].mealName` to access the `mealName` property of the current menu item.\n3. Use a `return` keyword."
                }
              ]
            }
          },
          {
            "title": "Define selectMeal pt 1",
            "id": 113176,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Gute Arbeit! Jetzt lass uns eine Funktion `selectMeal` definieren, die Mahlzeiteninformationen basierend auf dem Mahlzeiten-`name` und ihrem `type` extrahiert.\n\n1. Füge eine Bedingung hinzu, bei der, wenn `type` gleich `\"italian\"` ist, `\"italian order\"` zurückgegeben wird.\n2. Füge eine weitere Bedingung hinzu, bei der, wenn `type` gleich `\"indian\"` ist, `\"indian order\"` zurückgegeben wird.\n3. Füge eine weitere Bedingung hinzu, bei der, wenn `type` gleich `\"thai\"` ist, `\"thai order\"` zurückgegeben wird.\n4. Wenn alle Bedingungen fehlschlagen, gib `\"not found\"` zurück.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const italianFood = [{\n  mealName: \"Pasta Bolognese\",\n  quantity: 3,\n  price: 7\n}, {\n  mealName: \"Pepperoni pizza\",\n  quantity: 2,\n  price: 10\n}];\nconst thaiFood = [{\n  mealName: \"Pad Thai\",\n  quantity: 1,\n  price: 8\n}];\nconst indianFood = [{\n  mealName: \"Chapati\",\n  quantity: 8,\n  price: 7\n}, {\n  mealName: \"Chicken Massala\",\n  quantity: 5,\n  price: 9\n}, {\n  mealName: \"Tandoori Chicken\",\n  quantity: 5,\n  price: 9\n}];\n\nfunction findMeal(name, menu) {\n  for (let i = 0; i < menu.length; i++) {\n    if (menu[i].mealName === name) {\n      return menu[i];\n    }\n  }\n}\n\nfunction selectMeal(name, type) {}\n\nfunction createSummary(name, type, amount) {}",
                  "solvedContent": "const italianFood = [{\n  mealName: \"Pasta Bolognese\",\n  quantity: 3,\n  price: 7\n}, {\n  mealName: \"Pepperoni pizza\",\n  quantity: 2,\n  price: 10\n}];\nconst thaiFood = [{\n  mealName: \"Pad Thai\",\n  quantity: 1,\n  price: 8\n}];\nconst indianFood = [{\n  mealName: \"Chapati\",\n  quantity: 8,\n  price: 7\n}, {\n  mealName: \"Chicken Massala\",\n  quantity: 5,\n  price: 9\n}, {\n  mealName: \"Tandoori Chicken\",\n  quantity: 5,\n  price: 9\n}];\n\nfunction findMeal(name, menu) {\n  for (let i = 0; i < menu.length; i++) {\n    if (menu[i].mealName === name) {\n      return menu[i];\n    }\n  }\n}\n\nfunction selectMeal(name, type) {\n  if (type === 'italian') {\n    return \"italian order\";\n  } else if (type === 'indian') {\n    return \"indian order\";\n  } else if (type === 'thai') {\n    return \"thai order\";\n  } else {\n    return \"not found\";\n  }\n}\n\nfunction createSummary(name, type, amount) {}"
                }
              ],
              "hints": [
                {
                  "title": "Hint",
                  "content": "Use `if`, `else if` and `else` statements."
                }
              ]
            }
          },
          {
            "title": "Define selectMeal pt 2",
            "id": 113177,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Gut gemacht! Lass uns unsere `selectMeal` Funktion verbessern, damit sie eine Mahlzeit zurückgibt, bevor wir zu unserer letzten Funktion übergehen.\n\nDa unsere Funktion `findMeal()` darauf ausgelegt ist, eine bestimmte Mahlzeit zu liefern, wenn ein `menu` und der Mahlzeit `name` gegeben sind, können wir sie innerhalb von `selectMeal()` aufrufen, um uns bei der Suche nach der gewünschten Mahlzeit zu helfen.\n\n1. Ersetze `\"italian order\"` durch einen `findMeal` Funktionsaufruf und gib `name` und `italianFood` als Argumente.\n2. Ersetze `\"indian order\"` durch einen `findMeal` Funktionsaufruf und gib `name` und `indianFood` als Argumente.\n3. Ersetze `\"thai order\"` durch einen `findMeal` Funktionsaufruf und gib `name` und `thaiFood` als Argumente.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const italianFood = [{\n  mealName: \"Pasta Bolognese\",\n  quantity: 3,\n  price: 7\n}, {\n  mealName: \"Pepperoni pizza\",\n  quantity: 2,\n  price: 10\n}];\nconst thaiFood = [{\n  mealName: \"Pad Thai\",\n  quantity: 1,\n  price: 8\n}];\nconst indianFood = [{\n  mealName: \"Chapati\",\n  quantity: 8,\n  price: 7\n}, {\n  mealName: \"Chicken Massala\",\n  quantity: 5,\n  price: 9\n}, {\n  mealName: \"Tandoori Chicken\",\n  quantity: 5,\n  price: 9\n}];\n\nfunction findMeal(name, menu) {\n  for (let i = 0; i < menu.length; i++) {\n    if (menu[i].mealName === name) {\n      return menu[i];\n    }\n  }\n}\n\nfunction selectMeal(name, type) {\n  if (type === 'italian') {\n    return \"italian order\";\n  } else if (type === 'indian') {\n    return \"indian order\";\n  } else if (type === 'thai') {\n    return \"thai order\";\n  } else {\n    return \"not found\";\n  }\n}\n\nfunction createSummary(name, type, amount) {}",
                  "solvedContent": "const italianFood = [{\n  mealName: \"Pasta Bolognese\",\n  quantity: 3,\n  price: 7\n}, {\n  mealName: \"Pepperoni pizza\",\n  quantity: 2,\n  price: 10\n}];\nconst thaiFood = [{\n  mealName: \"Pad Thai\",\n  quantity: 1,\n  price: 8\n}];\nconst indianFood = [{\n  mealName: \"Chapati\",\n  quantity: 8,\n  price: 7\n}, {\n  mealName: \"Chicken Massala\",\n  quantity: 5,\n  price: 9\n}, {\n  mealName: \"Tandoori Chicken\",\n  quantity: 5,\n  price: 9\n}];\n\nfunction findMeal(name, menu) {\n  for (let i = 0; i < menu.length; i++) {\n    if (menu[i].mealName === name) {\n      return menu[i];\n    }\n  }\n}\n\nfunction selectMeal(name, type) {\n  if (type === 'italian') {\n    return findMeal(name, italianFood);\n  } else if (type === 'indian') {\n    return findMeal(name, indianFood);\n  } else if (type === 'thai') {\n    return findMeal(name, thaiFood);\n  } else {\n    return \"not found\";\n  }\n}\n\nfunction createSummary(name, type, amount) {}"
                }
              ],
              "hints": [
                {
                  "title": "Hint",
                  "content": "Use `return findMeal()` with the arguments mentioned above."
                }
              ]
            }
          },
          {
            "title": "Define createSummary pt 1",
            "id": 113178,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Sehr gut! Lass uns mit der Arbeit an der Funktion `createSummary` beginnen, damit wir einem Kunden eine Zusammenfassung seiner aufgegebenen Bestellung bereitstellen können.\n\n1. Füge eine Variable `order` hinzu und weise ihr das Ergebnis des Funktionsaufrufs `selectMeal()` zu.\n2. Füge `name` und `type` als Parameter zum Funktionsaufruf von `selectMeal()` hinzu. Dies übergibt die Argumente `name` und `type` von `createSummary()` an `selectMeal()`.\n3. Zeige die Eigenschaft `mealName` der Variablen `order` an.  \n4. Überprüfe, was deine Funktion `createSummary()` derzeit macht, indem du sie mit den Argumenten `\"Pasta Bolognese\"`, `\"italian\"` und `3` aufrufst.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const italianFood = [{\n  mealName: \"Pasta Bolognese\",\n  quantity: 3,\n  price: 7\n}, {\n  mealName: \"Pepperoni pizza\",\n  quantity: 2,\n  price: 10\n}];\nconst thaiFood = [{\n  mealName: \"Pad Thai\",\n  quantity: 1,\n  price: 8\n}];\nconst indianFood = [{\n  mealName: \"Chapati\",\n  quantity: 8,\n  price: 7\n}, {\n  mealName: \"Chicken Massala\",\n  quantity: 5,\n  price: 9\n}, {\n  mealName: \"Tandoori Chicken\",\n  quantity: 5,\n  price: 9\n}];\n\nfunction findMeal(name, menu) {\n  for (let i = 0; i < menu.length; i++) {\n    if (menu[i].mealName === name) {\n      return menu[i];\n    }\n  }\n}\n\nfunction selectMeal(name, type) {\n  if (type === 'italian') {\n    return findMeal(name, italianFood);\n  } else if (type === 'indian') {\n    return findMeal(name, indianFood);\n  } else if (type === 'thai') {\n    return findMeal(name, thaiFood);\n  } else {\n    return \"not found\";\n  }\n}\n\nfunction createSummary(name, type, amount) {}",
                  "solvedContent": "const italianFood = [{\n  mealName: \"Pasta Bolognese\",\n  quantity: 3,\n  price: 7\n}, {\n  mealName: \"Pepperoni pizza\",\n  quantity: 2,\n  price: 10\n}];\nconst thaiFood = [{\n  mealName: \"Pad Thai\",\n  quantity: 1,\n  price: 8\n}];\nconst indianFood = [{\n  mealName: \"Chapati\",\n  quantity: 8,\n  price: 7\n}, {\n  mealName: \"Chicken Massala\",\n  quantity: 5,\n  price: 9\n}, {\n  mealName: \"Tandoori Chicken\",\n  quantity: 5,\n  price: 9\n}];\n\nfunction findMeal(name, menu) {\n  for (let i = 0; i < menu.length; i++) {\n    if (menu[i].mealName === name) {\n      return menu[i];\n    }\n  }\n}\n\nfunction selectMeal(name, type) {\n  if (type === 'italian') {\n    return findMeal(name, italianFood);\n  } else if (type === 'indian') {\n    return findMeal(name, indianFood);\n  } else if (type === 'thai') {\n    return findMeal(name, thaiFood);\n  } else {\n    return \"not found\";\n  }\n}\n\nfunction createSummary(name, type, amount) {\n  const order = selectMeal(name, type);\n  console.log(order.mealName);\n}\ncreateSummary('Pasta Bolognese', 'italian', 3);"
                }
              ],
              "hints": [
                {
                  "title": "Hint",
                  "content": "The function call for `createSummary()` should be placed after the code block where it is defined."
                }
              ]
            }
          },
          {
            "title": "Define createSummary pt 2",
            "id": 113179,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Gute Arbeit! Lass uns mit der Definition von `createSummary` fortfahren.\n\n1. Füge eine Variable `orderPossible` hinzu und weise ihr einen logischen Ausdruck zu, um zu überprüfen, ob unsere Variable `order` nicht gleich `\"not found\"` ist.\n2. Verwende `&&`, um eine Bedingung an `orderPossible` zu verketten, die überprüft, ob `amount` kleiner oder gleich der `quantity`-Eigenschaft von `order` ist.\n3. Füge eine Variable `errorMessage` hinzu und weise ihr den Wert `\"Something went wrong, please try again later\"` zu.\n4. Zeige den Wert der Variablen `orderPossible` an.\n5. Zeige den Wert der Variablen `errorMessage` an.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const italianFood = [{\n  mealName: \"Pasta Bolognese\",\n  quantity: 3,\n  price: 7\n}, {\n  mealName: \"Pepperoni pizza\",\n  quantity: 2,\n  price: 10\n}];\nconst thaiFood = [{\n  mealName: \"Pad Thai\",\n  quantity: 1,\n  price: 8\n}];\nconst indianFood = [{\n  mealName: \"Chapati\",\n  quantity: 8,\n  price: 7\n}, {\n  mealName: \"Chicken Massala\",\n  quantity: 5,\n  price: 9\n}, {\n  mealName: \"Tandoori Chicken\",\n  quantity: 5,\n  price: 9\n}];\n\nfunction findMeal(name, menu) {\n  for (let i = 0; i < menu.length; i++) {\n    if (menu[i].mealName === name) {\n      return menu[i];\n    }\n  }\n}\n\nfunction selectMeal(name, type) {\n  if (type === 'italian') {\n    return findMeal(name, italianFood);\n  } else if (type === 'indian') {\n    return findMeal(name, indianFood);\n  } else if (type === 'thai') {\n    return findMeal(name, thaiFood);\n  } else {\n    return \"not found\";\n  }\n}\n\nfunction createSummary(name, type, amount) {\n  const order = selectMeal(name, type);\n  console.log(order.mealName);\n}\ncreateSummary('Pasta Bolognese', 'italian', 3);",
                  "solvedContent": "const italianFood = [{\n  mealName: \"Pasta Bolognese\",\n  quantity: 3,\n  price: 7\n}, {\n  mealName: \"Pepperoni pizza\",\n  quantity: 2,\n  price: 10\n}];\nconst thaiFood = [{\n  mealName: \"Pad Thai\",\n  quantity: 1,\n  price: 8\n}];\nconst indianFood = [{\n  mealName: \"Chapati\",\n  quantity: 8,\n  price: 7\n}, {\n  mealName: \"Chicken Massala\",\n  quantity: 5,\n  price: 9\n}, {\n  mealName: \"Tandoori Chicken\",\n  quantity: 5,\n  price: 9\n}];\n\nfunction findMeal(name, menu) {\n  for (let i = 0; i < menu.length; i++) {\n    if (menu[i].mealName === name) {\n      return menu[i];\n    }\n  }\n}\n\nfunction selectMeal(name, type) {\n  if (type === 'italian') {\n    return findMeal(name, italianFood);\n  } else if (type === 'indian') {\n    return findMeal(name, indianFood);\n  } else if (type === 'thai') {\n    return findMeal(name, thaiFood);\n  } else {\n    return \"not found\";\n  }\n}\n\nfunction createSummary(name, type, amount) {\n  const order = selectMeal(name, type);\n  console.log(order.mealName);\n  const orderPossible = order !== 'not found' && amount <= order.quantity;\n  const errorMessage = 'Something went wrong, please try again later';\n  console.log(orderPossible);\n  console.log(errorMessage);\n}\ncreateSummary('Pasta Bolognese', 'italian', 3);"
                }
              ],
              "hints": [
                {
                  "title": "Hint",
                  "content": "1. You must define two logical expressions and chain them `condition1 && condition 2`. \n2. Use comparators such as `<=` `===` or` !==`to define each expression."
                }
              ]
            }
          },
          {
            "title": "Define createSummary pt3",
            "id": 113180,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "In diesem Schritt werden wir die Funktion `createSummary` fertigstellen, indem wir zuerst eine Bedingung hinzufügen, um sicherzustellen, dass das eingegebene Gericht gefunden wurde. Dann zeigen wir eine Zusammenfassung der Bestellung an.\n\n1. Da sie nicht mehr benötigt werden, kannst du alle Konsolenausgaben entfernen.\n2. Füge eine Bedingung hinzu, um zu überprüfen, ob `orderPossible` `true` ist.\n3. Im Bedingungskörper füge eine Variable `total` hinzu und weise ihr das Produkt des `amount`-Arguments mit der `price`-Eigenschaft des `order`-Objekts zu.\n4. Deine Bedingung sollte einen String zurückgeben, der dem Kunden die Anzahl der bestellten Gerichte, welches Gericht sie bestellt haben und wie viel es kostet, mitteilt. Du *musst* `amount`, `name` und `total` im String verwenden.\n5. Gib `errorMessage` zurück, wenn `orderPossible` `false` ist.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const italianFood = [{\n  mealName: \"Pasta Bolognese\",\n  quantity: 3,\n  price: 7\n}, {\n  mealName: \"Pepperoni pizza\",\n  quantity: 2,\n  price: 10\n}];\nconst thaiFood = [{\n  mealName: \"Pad Thai\",\n  quantity: 1,\n  price: 8\n}];\nconst indianFood = [{\n  mealName: \"Chapati\",\n  quantity: 8,\n  price: 7\n}, {\n  mealName: \"Chicken Massala\",\n  quantity: 5,\n  price: 9\n}, {\n  mealName: \"Tandoori Chicken\",\n  quantity: 5,\n  price: 9\n}];\n\nfunction findMeal(name, menu) {\n  for (let i = 0; i < menu.length; i++) {\n    if (menu[i].mealName === name) {\n      return menu[i];\n    }\n  }\n}\n\nfunction selectMeal(name, type) {\n  if (type === 'italian') {\n    return findMeal(name, italianFood);\n  } else if (type === 'indian') {\n    return findMeal(name, indianFood);\n  } else if (type === 'thai') {\n    return findMeal(name, thaiFood);\n  } else {\n    return \"not found\";\n  }\n}\n\nfunction createSummary(name, type, amount) {\n  const order = selectMeal(name, type);\n  console.log(order.mealName);\n  const orderPossible = order !== 'not found' && amount <= order.quantity;\n  const errorMessage = 'Something went wrong, please try again later';\n  console.log(orderPossible);\n  console.log(errorMessage);\n}\ncreateSummary('Pasta Bolognese', 'italian', 3);",
                  "solvedContent": "const italianFood = [{\n  mealName: \"Pasta Bolognese\",\n  quantity: 3,\n  price: 7\n}, {\n  mealName: \"Pepperoni pizza\",\n  quantity: 2,\n  price: 10\n}];\nconst thaiFood = [{\n  mealName: \"Pad Thai\",\n  quantity: 1,\n  price: 8\n}];\nconst indianFood = [{\n  mealName: \"Chapati\",\n  quantity: 8,\n  price: 7\n}, {\n  mealName: \"Chicken Massala\",\n  quantity: 5,\n  price: 9\n}, {\n  mealName: \"Tandoori Chicken\",\n  quantity: 5,\n  price: 9\n}];\n\nfunction findMeal(name, menu) {\n  for (let i = 0; i < menu.length; i++) {\n    if (menu[i].mealName === name) {\n      return menu[i];\n    }\n  }\n}\n\nfunction selectMeal(name, type) {\n  if (type === 'italian') {\n    return findMeal(name, italianFood);\n  } else if (type === 'indian') {\n    return findMeal(name, indianFood);\n  } else if (type === 'thai') {\n    return findMeal(name, thaiFood);\n  } else {\n    return \"not found\";\n  }\n}\n\nfunction createSummary(name, type, amount) {\n  const order = selectMeal(name, type);\n  const orderPossible = order !== 'not found' && amount <= order.quantity;\n  const errorMessage = 'Something went wrong, please try again later';\n  if (orderPossible) {\n    const total = amount * order.price;\n    return \"You ordered \" + amount + \" \" + name + \" for a total of \" + total +\n      \" euros\";\n  } else {\n    return errorMessage;\n  }\n}"
                }
              ],
              "hints": [
                {
                  "title": "Hint",
                  "content": "1. Use `object.propertyName `syntax to access a property value of an object.\n2. Make sure and include the `amount`, `name`, and `total` arguments from the `createSummary()` function in the return string."
                }
              ]
            }
          }
        ]
      }
    ]
  }
}