{
  "tutorial": {
    "id": 1993,
    "version": 4,
    "type": "course",
    "isNew": false,
    "codeLanguage": "javascript",
    "title": "Array.reduce()",
    "descriptionContent": "Lerne, wie du Array-Werte zu einem Wert reduzierst",
    "shortDescriptionContent": "",
    "showInTrack": true,
    "iconBanner": null,
    "chapters": [
      {
        "id": 12711,
        "title": "Reduzieren",
        "type": "practiceLevel1",
        "lessons": [
          {
            "title": "Intro",
            "id": 115251,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Manchmal müssen wir eine Reihe von Array-Werten in einen einzelnen Wert umwandeln. Zum Beispiel, wenn wir eine Summe berechnen wollen.</p><p>Eine klassische Methode, dies zu tun, ist durch eine Schleife.</p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" miles = [\" /><text value=\"33\" class=\"number\" /><text value=\", \" /><text value=\"95\" class=\"number\" /><text value=\", \" /><text value=\"79\" class=\"number\" /><text value=\"];\" /><text type=\"break\" /><text value=\"let\" class=\"keyword\" /><text value=\" total = \" /><text value=\"0\" class=\"number\" /><text value=\";\" /><text type=\"break\" /><text value=\"for\" class=\"keyword\" /><text value=\" (\" /><text value=\"const\" class=\"keyword\" /><text value=\" element \" /><text value=\"of\" class=\"keyword\" /><text value=\" miles) {\" /><text type=\"break\" /><text value=\" total += element;\" /><text type=\"break\" /><text value=\"}\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(total);\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"75\" endIndex=\"80\" /></options></interaction></interactions><output><content><text value=\"207\" /></content></output></code><p visible-if=\"wrong\">Wähle <code>total</code> aus.</p></body></html>"
          },
          {
            "title": "Calling .reduce on an Array",
            "id": 115252,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Allerdings bietet JavaScript eine einfachere, bereits vorhandene Methode. <code>.reduce()</code> kann Array-Werte mit einer Inline-Funktion zu einem Wert kombinieren.</p><p><code>.reduce()</code> verwendet die Syntax: <code>ArrayName.reduce()</code>. Schauen wir uns an, wie wir es auf das <code>miles</code>-Array anwenden könnten.</p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" miles = [\" /><text value=\"33\" class=\"number\" /><text value=\", \" /><text value=\"95\" class=\"number\" /><text value=\", \" /><text value=\"79\" class=\"number\" /><text value=\"];\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" total = miles.reduce();\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"42\" endIndex=\"47\" /><option startIndex=\"47\" endIndex=\"48\" /><option startIndex=\"48\" endIndex=\"54\" /><option startIndex=\"54\" endIndex=\"55\" /><option startIndex=\"55\" endIndex=\"56\" /><option correct=\"false\"><content><text value=\"list\" /></content></option></options></interaction></interactions><output><content><text value=\"        \" /><text type=\"break\" /><text value=\"\" /><text type=\"break\" /><text value=\"\" /><text type=\"break\" /><text value=\"\" /><text type=\"break\" /><text value=\"\" /><text type=\"break\" /><text value=\"\" /><text type=\"break\" /><text value=\"\" /><text type=\"break\" /><text value=\"\" /><text type=\"break\" /><text value=\"\" /><text type=\"break\" /><text value=\"\" /><text type=\"break\" /><text value=\"\" /><text type=\"break\" /><text value=\"\" /></content></output></code><p visible-if=\"wrong\">Wähle <code>miles</code>, gefolgt von <code>.</code> und schließlich <code>reduce</code>, <code>(</code>, <code>)</code> aus.</p></body></html>"
          },
          {
            "title": "Passing Functions",
            "id": 115253,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Um der <code>.reduce()</code>-Funktion mitzuteilen, wie Werte kombiniert werden sollen, müssen wir zuerst eine Funktion als Parameter übergeben.</p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" miles = [\" /><text value=\"33\" class=\"number\" /><text value=\", \" /><text value=\"95\" class=\"number\" /><text value=\", \" /><text value=\"79\" class=\"number\" /><text value=\"];\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" total = miles.reduce(\" /><text value=\"function\" class=\"keyword\" /><text value=\"(\" /><text value=\"\" class=\"params\" /><text value=\") \" /><text value=\"{});\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"55\" endIndex=\"63\" /><option startIndex=\"63\" endIndex=\"64\" /><option startIndex=\"64\" endIndex=\"65\" /><option startIndex=\"66\" endIndex=\"67\" /><option startIndex=\"67\" endIndex=\"68\" /></options></interaction></interactions></code><p visible-if=\"wrong\">Wähle <code>function</code>, gefolgt von <code>(</code> und schließlich <code>)</code>, <code>{</code>, <code>}</code> aus.</p></body></html>"
          },
          {
            "title": "Parameters",
            "id": 115255,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Unsere Funktion benötigt zwei Parameter: der erste, um auf das Ergebnis der vorherigen <strong>Reduktion</strong> zuzugreifen, und der zweite, um auf den aktuellen Wert zuzugreifen.</p><p>Füge zwei Parameter hinzu: <code>prev</code> und <code>curr</code>, in dieser Reihenfolge.</p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" miles = [\" /><text value=\"33\" class=\"number\" /><text value=\", \" /><text value=\"95\" class=\"number\" /><text value=\", \" /><text value=\"79\" class=\"number\" /><text value=\"];\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" total = miles.reduce(\" /><text value=\"function\" class=\"keyword\" /><text value=\"(\" /><text value=\"prev, curr\" class=\"params\" /><text value=\") \" /><text value=\"{});\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"64\" endIndex=\"69\" /><option startIndex=\"70\" endIndex=\"74\" /></options></interaction></interactions></code><p visible-if=\"wrong\">Wähle <code>prev,</code>, gefolgt von <code>curr</code> aus.</p></body></html>"
          },
          {
            "title": "Return",
            "id": 115254,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p><code>reduce()</code> iteriert durch ein Array und führt bei jedem Wert eine Operation mit den zwei Parametern durch, bis es zu einem einzelnen Wert gelangt.</p><p>Zum Beispiel gibt die Inline-Funktion zur Summierung der Werte die Summe der <code>prev</code> Reduktion und des <code>curr</code> Wertes zurück.</p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" miles = [\" /><text value=\"33\" class=\"number\" /><text value=\", \" /><text value=\"95\" class=\"number\" /><text value=\", \" /><text value=\"79\" class=\"number\" /><text value=\"];\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" total = miles.reduce(\" /><text value=\"function\" class=\"keyword\" /><text value=\"(\" /><text value=\"prev, curr\" class=\"params\" /><text value=\") \" /><text value=\"{\" /><text type=\"break\" /><text value=\" \" /><text value=\"return\" class=\"keyword\" /><text value=\" prev + curr;\" /><text type=\"break\" /><text value=\"});\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(total);\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"79\" endIndex=\"85\" /><option startIndex=\"86\" endIndex=\"97\" /></options></interaction></interactions><output><content><text value=\"207\" /></content></output></code><p visible-if=\"wrong\">Wähle <code>return</code>, gefolgt von <code>prev + curr</code> aus.</p></body></html>"
          },
          {
            "title": "Arrow functions",
            "id": 115258,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Um unsere Syntax zu vereinfachen, können wir eine JavaScript-Arrow-Funktion anstelle der Inline-Funktion verwenden.</p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" miles = [\" /><text value=\"33\" class=\"number\" /><text value=\", \" /><text value=\"95\" class=\"number\" /><text value=\", \" /><text value=\"79\" class=\"number\" /><text value=\"];\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" total = miles.reduce(\" /><text value=\"(\" /><text value=\"prevVal, currVal\" class=\"params\" /><text value=\") =&gt;\" /><text value=\" prevVal + currVal);\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(total);\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"55\" endIndex=\"73\" /><option startIndex=\"74\" endIndex=\"76\" /><option startIndex=\"77\" endIndex=\"94\" /><option correct=\"false\"><content><text value=\"&lt;=\" /></content></option><option correct=\"false\"><content><text value=\"-\" /></content></option></options></interaction></interactions><output><content><text value=\"207\" /></content></output></code><p visible-if=\"wrong\">Wähle <code>(prevVal, currVal)</code>, gefolgt von <code>=&gt;</code> und schließlich <code>prevVal + currVal</code> aus.</p></body></html>"
          },
          {
            "title": "Parameters II",
            "id": 115256,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Wenn wir einen dritten Parameter in die Funktion aufnehmen, können wir auch auf den Index jeder Iteration zugreifen.</p><p>In diesem Beispiel verwenden wir <code>.reduce()</code>, um die <code>prices</code> zu summieren, aber wir integrieren auch <code>index</code>, um einen Rabattfaktor aus einem zweiten Array anzuwenden.</p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" prices = [\" /><text value=\"17.50\" class=\"number\" /><text value=\", \" /><text value=\"20.25\" class=\"number\" /><text value=\", \" /><text value=\"24.75\" class=\"number\" /><text value=\", \" /><text value=\"13.50\" class=\"number\" /><text value=\", \" /><text value=\"8.50\" class=\"number\" /><text value=\"];\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" discountFactor = [\" /><text value=\"0.9\" class=\"number\" /><text value=\", \" /><text value=\"0.9\" class=\"number\" /><text value=\", \" /><text value=\"1.0\" class=\"number\" /><text value=\", \" /><text value=\"1.0\" class=\"number\" /><text value=\", \" /><text value=\"0.9\" class=\"number\" /><text value=\"];\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" total = prices.reduce(\" /><text value=\"function\" class=\"keyword\" /><text value=\"(\" /><text value=\"prevVal, currVal, index\" class=\"params\" /><text value=\") \" /><text value=\"{\" /><text type=\"break\" /><text value=\" \" /><text value=\"return\" class=\"keyword\" /><text value=\" prevVal + (currVal * discountFactor[index]);\" /><text type=\"break\" /><text value=\"});\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(total);\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"156\" endIndex=\"161\" /><option startIndex=\"209\" endIndex=\"214\" /></options></interaction></interactions><output><content><text value=\"81.625\" /></content></output></code><p visible-if=\"wrong\">Wähle <code>index</code>, gefolgt von <code>index</code> aus.</p></body></html>"
          },
          {
            "title": "Question: Intro",
            "id": 115259,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Welche JavaScript-Funktion können wir verwenden, um eine Reihe von Array-Werten in einen einzelnen Wert umzuwandeln?</p><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\"><code>.reduce()</code></item><item value=\"2\" correct=\"false\"><code>.filter()</code></item></selection><p visible-if=\"wrong\">Wähle <code>.reduce()</code> aus.</p></body></html>"
          },
          {
            "title": "Question: Passing Functions",
            "id": 115261,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Was müssen wir als Parameter übergeben, um der <code>.reduce()</code>-Funktion mitzuteilen, wie Werte kombiniert werden sollen?</p><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\">Eine Funktion</item><item value=\"2\" correct=\"false\">Eine Variable</item></selection><p visible-if=\"wrong\">Eine Funktion.</p></body></html>"
          },
          {
            "title": "Question: Parameters",
            "id": 115262,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Worauf gibt der erste Parameter der Inline-Funktion <code>reduce()</code> Zugriff?</p><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\">Das Ergebnis der vorherigen Reduktion</item><item value=\"2\" correct=\"false\">Der aktuelle Array-Wert der Iteration</item></selection><p visible-if=\"wrong\">Das Ergebnis der vorherigen Reduktion.</p></body></html>"
          },
          {
            "title": "Question: Parameters",
            "id": 115275,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Worauf gibt der zweite Parameter der Inline-Funktion <code>reduce()</code> Zugriff?</p><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\">Der aktuelle Array-Wert der Iteration</item><item value=\"2\" correct=\"false\">Das Ergebnis der vorherigen Reduktion</item></selection><p visible-if=\"wrong\">Der aktuelle Array-Wert der Iteration.</p></body></html>"
          },
          {
            "title": "Question: Parameters II",
            "id": 115263,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Was können wir durch Hinzufügen eines dritten, optionalen Parameters zur Funktion erreichen?</p><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\">Der Index</item><item value=\"2\" correct=\"false\">Das aufrufende Array</item></selection><p visible-if=\"wrong\">Der Index.</p></body></html>"
          },
          {
            "title": "Example: Calling .reduce on an Array",
            "id": 115268,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Rufe die <code>.reduce()</code>-Funktion auf dem <code>prices</code>-Array auf.</p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" prices = [\" /><text value=\"17.50\" class=\"number\" /><text value=\", \" /><text value=\"20.25\" class=\"number\" /><text value=\", \" /><text value=\"24.75\" class=\"number\" /><text value=\", \" /><text value=\"13.50\" class=\"number\" /><text value=\", \" /><text value=\"8.50\" class=\"number\" /><text value=\"];\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" total = prices.reduce(\" /><text value=\"function\" class=\"keyword\" /><text value=\"(\" /><text value=\"prevVal, currVal\" class=\"params\" /><text value=\") \" /><text value=\"{\" /><text type=\"break\" /><text value=\" \" /><text value=\"return\" class=\"keyword\" /><text value=\" prevVal + currVal;\" /><text type=\"break\" /><text value=\"});\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(total);\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"65\" endIndex=\"71\" /><option startIndex=\"71\" endIndex=\"72\" /><option startIndex=\"72\" endIndex=\"78\" /></options></interaction></interactions><output><content><text value=\"84.5\" /></content></output></code><p visible-if=\"wrong\">Wähle <code>prices</code>, gefolgt von <code>.</code> und schließlich <code>reduce</code> aus.</p></body></html>"
          },
          {
            "title": "Example: Passing Functions",
            "id": 115269,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Füge eine Inline-Funktion innerhalb der <code>.reduce()</code>-Funktion hinzu.</p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" values = [\" /><text value=\"4\" class=\"number\" /><text value=\", \" /><text value=\"3\" class=\"number\" /><text value=\", \" /><text value=\"2\" class=\"number\" /><text value=\", \" /><text value=\"1\" class=\"number\" /><text value=\"];\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" factorial = values.reduce(\" /><text value=\"function\" class=\"keyword\" /><text value=\"(\" /><text value=\"\" class=\"params\" /><text value=\") \" /><text value=\"{});\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"61\" endIndex=\"69\" /><option startIndex=\"69\" endIndex=\"70\" /><option startIndex=\"70\" endIndex=\"71\" /><option startIndex=\"72\" endIndex=\"73\" /><option startIndex=\"73\" endIndex=\"74\" /></options></interaction></interactions></code><p visible-if=\"wrong\">Wähle <code>function</code>, gefolgt von <code>(</code> und schließlich <code>)</code>, <code>{</code>, <code>}</code> aus.</p></body></html>"
          },
          {
            "title": "Example: Parameters",
            "id": 115270,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Füge die entsprechenden Parameter hinzu, um der Inline-Funktion Zugriff auf den vorherigen Reduktionswert und den aktuellen Array-Wert zu geben.</p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" values = [\" /><text value=\"4\" class=\"number\" /><text value=\", \" /><text value=\"3\" class=\"number\" /><text value=\", \" /><text value=\"2\" class=\"number\" /><text value=\", \" /><text value=\"1\" class=\"number\" /><text value=\"];\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" factorial = values.reduce(\" /><text value=\"function\" class=\"keyword\" /><text value=\"(\" /><text value=\"prev, curr\" class=\"params\" /><text value=\") \" /><text value=\"{\" /><text type=\"break\" /><text value=\" \" /><text value=\"return\" class=\"keyword\" /><text value=\" prev * curr;\" /><text type=\"break\" /><text value=\"});\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(factorial);\" /></content><interactions><interaction type=\"validatedInput\" isDefault=\"true\" startIndex=\"70\" endIndex=\"74\" /></interactions><output><content><text value=\"24\" /></content></output></code><p visible-if=\"wrong\">Gib <code>prev</code> ein.</p></body></html>"
          },
          {
            "title": "Example: Return",
            "id": 115272,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Wir möchten, dass die <code>.reduce()</code>-Funktion alle <code>words</code> zu einem Satz zusammenfügt.</p><p>Code das korrekte Schlüsselwort in die Inline-Funktion, damit es den vorherigen Reduktionswert mit dem aktuellen Wort verknüpft zurückgibt.</p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" words = [\" /><text value=\"&quot;The&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;house&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;is&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;red&quot;\" class=\"string\" /><text value=\"];\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" sentence = words.reduce(\" /><text value=\"function\" class=\"keyword\" /><text value=\"(\" /><text value=\"prev, curr\" class=\"params\" /><text value=\") \" /><text value=\"{\" /><text type=\"break\" /><text value=\" \" /><text value=\"return\" class=\"keyword\" /><text value=\" prev + \" /><text value=\"&quot; &quot;\" class=\"string\" /><text value=\" + curr;\" /><text type=\"break\" /><text value=\"});\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(sentence);\" /></content><interactions><interaction type=\"validatedInput\" isDefault=\"true\" startIndex=\"99\" endIndex=\"105\" /></interactions><output><content><text value=\"The house is red\" /></content></output></code><p visible-if=\"wrong\">Gib <code>return</code> ein.</p></body></html>"
          },
          {
            "title": "Example: Arrow functions",
            "id": 115273,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Vervollständige die Arrow Function so, dass <code>total</code> die Summe der Werte des <code>prices</code>-Arrays speichert.</p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" prices = [\" /><text value=\"17.50\" class=\"number\" /><text value=\", \" /><text value=\"20.25\" class=\"number\" /><text value=\", \" /><text value=\"24.75\" class=\"number\" /><text value=\", \" /><text value=\"13.50\" class=\"number\" /><text value=\", \" /><text value=\"8.50\" class=\"number\" /><text value=\"];\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" total = prices.reduce(\" /><text value=\"(\" /><text value=\"prevVal, currVal\" class=\"params\" /><text value=\") =&gt;\" /><text value=\" prevVal + currVal);\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(total);\" /></content><interactions><interaction type=\"validatedInput\" isDefault=\"true\" startIndex=\"109\" endIndex=\"118\" /></interactions><output><content><text value=\"84.5\" /></content></output></code><p visible-if=\"wrong\">Gib <code>+ currVal</code> ein.</p></body></html>"
          }
        ]
      }
    ]
  }
}