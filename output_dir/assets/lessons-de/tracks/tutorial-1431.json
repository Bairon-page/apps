{
  "tutorial": {
    "id": 1431,
    "version": 5,
    "type": "course",
    "isNew": false,
    "codeLanguage": "python",
    "title": "Objekte kapseln",
    "descriptionContent": "Lerne, wie man OOP-Code identifiziert und wie man wie ein Entwickler denkt, indem man gekapselte Objekte erstellt.",
    "shortDescriptionContent": "",
    "showInTrack": true,
    "iconBanner": null,
    "chapters": [
      {
        "id": 10318,
        "title": "Einführung in OOP",
        "type": "practiceLevel1",
        "lessons": [
          {
            "title": "Intro",
            "id": 92845,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Lass uns über verschiedene Codierungsstile lernen, die von Entwicklern verwendet werden. Wir werden <strong>funktionale Programmierung</strong> und <strong>objektorientierte Programmierung</strong> erkunden.</p></body></html>"
          },
          {
            "title": "FP vs OOP",
            "id": 92841,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Verschiedene Programmierstile sind auch als <strong>Paradigmen</strong> bekannt. Ein gängiger Stil wird <strong>funktionale Programmierung</strong> genannt, oder kurz FP.</p><p>In der funktionalen Programmierung verwenden wir viele Funktionen und Variablen.</p><code version=\"2\" codelang=\"python\" name=\"fp.py\" visible-if=\"always\"><content><text value=\"def\" class=\"keyword\" /><text value=\" \" /><text value=\"getTotal\" class=\"title\" /><text value=\"(a, b)\" class=\"params\" /><text value=\":\" /><text type=\"break\" /><text value=\"  \" /><text value=\"return\" class=\"keyword\" /><text value=\" a + b\" /><text type=\"break\" /><text type=\"break\" /><text value=\"num1 = \" /><text value=\"2\" class=\"number\" /><text type=\"break\" /><text value=\"num2 = \" /><text value=\"3\" class=\"number\" /><text type=\"break\" /><text value=\"total = getTotal(num1, num2)\" /><text type=\"break\" /><text value=\"print(total)\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"0\" endIndex=\"3\" /><option startIndex=\"4\" endIndex=\"12\" /></options></interaction></interactions><output><content><text value=\"5\" /></content></output></code><p visible-if=\"wrong\">Wähle <code>def</code>, gefolgt von <code>getTotal</code> aus.</p></body></html>"
          },
          {
            "title": "FP 1",
            "id": 92840,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Im FP-Stil halten wir Daten und Funktionalität getrennt. Wir übergeben Daten an Funktionen, wann immer wir etwas wollen.</p><code version=\"2\" codelang=\"python\" name=\"script.py\" visible-if=\"always\"><content><text value=\"def\" class=\"keyword\" /><text value=\" \" /><text value=\"getDistance\" class=\"title\" /><text value=\"(mph, h)\" class=\"params\" /><text value=\":\" /><text type=\"break\" /><text value=\"  \" /><text value=\"return\" class=\"keyword\" /><text value=\" mph * h\" /><text type=\"break\" /><text type=\"break\" /><text value=\"mph = \" /><text value=\"60\" class=\"number\" /><text type=\"break\" /><text value=\"h = \" /><text value=\"2\" class=\"number\" /><text type=\"break\" /><text type=\"break\" /><text value=\"distance = getDistance(mph, h)\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"82\" endIndex=\"85\" /><option startIndex=\"88\" endIndex=\"89\" /><option startIndex=\"81\" endIndex=\"82\" /><option correct=\"false\"><content><text value=\"[\" /></content></option><option correct=\"false\"><content><text value=\"]\" /></content></option></options></interaction></interactions></code><p visible-if=\"wrong\">Wähle <code>(</code>, gefolgt von <code>mph</code> und schließlich <code>)</code> aus.</p></body></html>"
          },
          {
            "title": "FP 2",
            "id": 92839,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>In der funktionalen Programmierung <strong>return</strong> Funktionen neue Werte und verwenden diese Werte dann an anderer Stelle im Code.</p><code version=\"2\" codelang=\"python\" name=\"script.py\" visible-if=\"always\"><content><text value=\"def\" class=\"keyword\" /><text value=\" \" /><text value=\"getDistance\" class=\"title\" /><text value=\"(mph, h)\" class=\"params\" /><text value=\":\" /><text type=\"break\" /><text value=\"  \" /><text value=\"return\" class=\"keyword\" /><text value=\" mph * h\" /><text type=\"break\" /><text type=\"break\" /><text value=\"mph = \" /><text value=\"60\" class=\"number\" /><text type=\"break\" /><text value=\"h = \" /><text value=\"2\" class=\"number\" /><text type=\"break\" /><text type=\"break\" /><text value=\"distance = getDistance(mph, h)\" /><text type=\"break\" /><text value=\"print(distance)\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"27\" endIndex=\"33\" /><option startIndex=\"96\" endIndex=\"104\" /></options></interaction></interactions><output><content><text value=\"120\" /></content></output></code><p visible-if=\"wrong\">Wähle <code>return</code>, gefolgt von <code>distance</code> aus.</p></body></html>"
          },
          {
            "title": "OOP 1",
            "id": 92838,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>In der <strong>objektorientierten Programmierung (OOP)</strong> gruppieren wir Daten und Funktionalität als Eigenschaften und Methoden innerhalb von Objekten, wie hier bei <code>Virtual_Pet</code>.</p><code version=\"2\" codelang=\"python\" name=\"script.py\" visible-if=\"always\"><content><text value=\"class\" class=\"keyword\" /><text value=\" \" /><text value=\"Virtual_Pet\" class=\"title\" /><text value=\":\" /><text type=\"break\" /><text value=\"  \" /><text value=\"def\" class=\"keyword\" /><text value=\" \" /><text value=\"__init__\" class=\"title\" /><text value=\"(self, color, name)\" class=\"params\" /><text value=\":\" /><text type=\"break\" /><text value=\"    self.color = color\" /><text type=\"break\" /><text value=\"    self.name = name\" /><text type=\"break\" /><text type=\"break\" /><text value=\"rocky = Virtual_Pet(\" /><text value=\"&quot;brown&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;rocky&quot;\" class=\"string\" /><text value=\")\" /><text type=\"break\" /><text type=\"break\" /><text value=\"print(rocky.color)\" /><text type=\"break\" /><text value=\"print(rocky.name)\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"144\" endIndex=\"149\" /><option startIndex=\"169\" endIndex=\"173\" /></options></interaction></interactions><output><content><text value=\"brown\" /><text type=\"break\" /><text value=\"rocky\" /></content></output></code><p visible-if=\"wrong\">Wähle <code>rocky</code>, gefolgt von <code>name</code> aus.</p></body></html>"
          },
          {
            "title": "OOP 2",
            "id": 92833,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>OOP ist nützlich zur Modellierung von Objekten, ob real oder nicht. Objekte haben Eigenschaften und Methoden, die wir als eine Einheit betrachten, wie <code>car</code> hier.</p><code version=\"2\" codelang=\"python\" name=\"script.py\" visible-if=\"always\"><content><text value=\"class\" class=\"keyword\" /><text value=\" \" /><text value=\"Car\" class=\"title\" /><text value=\":\" /><text type=\"break\" /><text value=\"  mileage = \" /><text value=\"12000\" class=\"number\" /><text type=\"break\" /><text value=\"  \" /><text type=\"break\" /><text value=\"  \" /><text value=\"def\" class=\"keyword\" /><text value=\" \" /><text value=\"drive\" class=\"title\" /><text value=\"(self, miles)\" class=\"params\" /><text value=\":\" /><text type=\"break\" /><text value=\"    self.mileage += miles\" /><text type=\"break\" /><text type=\"break\" /><text value=\"tesla = Car()\" /><text type=\"break\" /><text value=\"tesla.drive(\" /><text value=\"100\" class=\"number\" /><text value=\")\" /><text type=\"break\" /><text value=\"print(tesla.mileage)\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"0\" endIndex=\"5\" /><option startIndex=\"6\" endIndex=\"9\" /></options></interaction></interactions><output><content><text value=\"12100\" /></content></output></code><p visible-if=\"wrong\">Wähle <code>class</code>, gefolgt von <code>Car</code> aus.</p></body></html>"
          },
          {
            "title": "OOP 3",
            "id": 92836,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>In der OOP verwenden wir Methoden, um bestehende Werte eines Objekts zu <strong>aktualisieren</strong>, wie hier, wo wir <code>eat()</code> verwenden, um den Wert von <code>hungry</code> zu aktualisieren.</p><code version=\"2\" codelang=\"python\" name=\"script.py\" visible-if=\"always\"><content><text value=\"class\" class=\"keyword\" /><text value=\" \" /><text value=\"Dog\" class=\"title\" /><text value=\":\" /><text type=\"break\" /><text value=\"  hungry = \" /><text value=\"True\" class=\"literal\" /><text type=\"break\" /><text value=\"  \" /><text type=\"break\" /><text value=\"  \" /><text value=\"def\" class=\"keyword\" /><text value=\" \" /><text value=\"eat\" class=\"title\" /><text value=\"(self)\" class=\"params\" /><text value=\":\" /><text type=\"break\" /><text value=\"    self.hungry = \" /><text value=\"False\" class=\"literal\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"51\" endIndex=\"55\" /><option startIndex=\"55\" endIndex=\"56\" /><option startIndex=\"56\" endIndex=\"62\" /><option startIndex=\"63\" endIndex=\"64\" /><option startIndex=\"65\" endIndex=\"70\" /></options></interaction></interactions></code><p visible-if=\"wrong\">Wähle <code>self</code>, gefolgt von <code>.</code> und schließlich <code>hungry</code>, <code>=</code>, <code>False</code> aus.</p></body></html>"
          },
          {
            "title": "Question 1",
            "id": 92832,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Was ist objektorientierte Programmierung?</p><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\">Ein Programmierstil, bei dem wir zusammengehörige Daten und Funktionalität bündeln</item><item value=\"2\" correct=\"false\">Ein Programmierstil, bei dem wir Daten und Funktionalität getrennt halten</item></selection><p visible-if=\"wrong\">Ein Programmierstil, bei dem wir zusammengehörige Daten und Funktionalität bündeln.</p></body></html>"
          },
          {
            "title": "Question 2",
            "id": 92831,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Wann verwenden wir OOP?</p><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\">Beim Gruppieren von Daten und Funktionalität innerhalb eines Objekts</item><item value=\"2\" correct=\"false\">Wenn wir möchten, dass Funktionen neue Werte zurückgeben, anstatt Eigenschaften zu aktualisieren</item></selection><p visible-if=\"wrong\">Beim Gruppieren von Daten und Funktionalität innerhalb eines Objekts.</p></body></html>"
          },
          {
            "title": "Question 3",
            "id": 92863,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Was wird der Wert der <code>hungry</code>-Eigenschaft sein, nachdem wir die <code>eat()</code>-Methode aufgerufen haben?</p><code version=\"2\" codelang=\"python\" name=\"script.py\" visible-if=\"always\"><content><text value=\"class\" class=\"keyword\" /><text value=\" \" /><text value=\"Dog\" class=\"title\" /><text value=\":\" /><text type=\"break\" /><text value=\"  hungry = \" /><text value=\"True\" class=\"literal\" /><text type=\"break\" /><text value=\"  \" /><text value=\"def\" class=\"keyword\" /><text value=\" \" /><text value=\"eat\" class=\"title\" /><text value=\"(self)\" class=\"params\" /><text value=\":\" /><text type=\"break\" /><text value=\"    self.hungry = \" /><text value=\"False\" class=\"literal\" /><text type=\"break\" /><text type=\"break\" /><text value=\"dog = Dog()\" /><text type=\"break\" /><text value=\"dog.eat()\" /><text type=\"break\" /><text value=\"print(dog.hungry);\" /></content><output><content><text value=\"False\" /></content></output></code><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"false\">Wahr</item><item value=\"2\" correct=\"true\">Falsch</item></selection><p visible-if=\"wrong\">Wähle Falsch aus.</p></body></html>"
          },
          {
            "title": "Example 1",
            "id": 92829,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Lass uns ein virtuelles Sparschwein mit OOP erstellen. Zuerst erstellen wir eine neue Klasse namens <code>Piggy</code> mit einer <code>value</code>-Eigenschaft, die auf 0 gesetzt ist.</p><code version=\"2\" codelang=\"python\" name=\"script.py\" visible-if=\"always\"><content><text value=\"class\" class=\"keyword\" /><text value=\" \" /><text value=\"Piggy\" class=\"title\" /><text value=\":\" /><text type=\"break\" /><text value=\"  value = \" /><text value=\"0\" class=\"number\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"15\" endIndex=\"20\" /><option startIndex=\"21\" endIndex=\"22\" /><option startIndex=\"23\" endIndex=\"24\" /></options></interaction></interactions></code><p visible-if=\"wrong\">Wähle <code>value</code>, gefolgt von <code>=</code> und schließlich <code>0</code> aus.</p></body></html>"
          },
          {
            "title": "Example 2",
            "id": 92828,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Füge als nächstes eine Methode namens <code>addMoney()</code> hinzu, die einen Parameter namens <code>amount</code> akzeptiert.</p><code version=\"2\" codelang=\"python\" name=\"script.py\" visible-if=\"always\"><content><text value=\"class\" class=\"keyword\" /><text value=\" \" /><text value=\"Piggy\" class=\"title\" /><text value=\":\" /><text type=\"break\" /><text value=\"  value = \" /><text value=\"0\" class=\"number\" /><text type=\"break\" /><text value=\"  \" /><text value=\"def\" class=\"keyword\" /><text value=\" \" /><text value=\"addMoney\" class=\"title\" /><text value=\"(self, amount)\" class=\"params\" /><text value=\":\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"27\" endIndex=\"30\" /><option startIndex=\"31\" endIndex=\"39\" /><option startIndex=\"39\" endIndex=\"40\" /><option startIndex=\"40\" endIndex=\"45\" /><option startIndex=\"46\" endIndex=\"52\" /><option startIndex=\"52\" endIndex=\"53\" /><option startIndex=\"53\" endIndex=\"54\" /></options></interaction></interactions></code><p visible-if=\"wrong\">Wähle <code>def</code>, gefolgt von <code>addMoney</code> und schließlich <code>(</code>, <code>self,</code>, <code>amount</code>, <code>)</code>, <code>:</code> aus.</p></body></html>"
          },
          {
            "title": "Example 3",
            "id": 92834,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Jetzt lass uns <code>addMoney()</code> den Wert mit der Summe aus dem aktuellen Wert von <code>Piggy</code> und <code>amount</code> aktualisieren.</p><code version=\"2\" codelang=\"python\" name=\"script.py\" visible-if=\"always\"><content><text value=\"class\" class=\"keyword\" /><text value=\" \" /><text value=\"Piggy\" class=\"title\" /><text value=\":\" /><text type=\"break\" /><text value=\"  value = \" /><text value=\"0\" class=\"number\" /><text type=\"break\" /><text value=\"  \" /><text value=\"def\" class=\"keyword\" /><text value=\" \" /><text value=\"addMoney\" class=\"title\" /><text value=\"(self, amount)\" class=\"params\" /><text value=\":\" /><text type=\"break\" /><text value=\"    self.value = self.value + amount\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"85\" endIndex=\"91\" /><option startIndex=\"59\" endIndex=\"63\" /><option startIndex=\"63\" endIndex=\"64\" /><option startIndex=\"64\" endIndex=\"69\" /></options></interaction></interactions></code><p visible-if=\"wrong\">Wähle <code>self</code>, gefolgt von <code>.</code> und schließlich <code>value</code>, <code>amount</code> aus.</p></body></html>"
          },
          {
            "title": "Example 4",
            "id": 92844,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Lass uns $100 in unser Sparschwein legen, indem wir die <code>addMoney()</code>-Methode von <code>Piggy</code> mit <code>100</code> als Argument aufrufen.</p><code version=\"2\" codelang=\"python\" name=\"script.py\" visible-if=\"always\"><content><text value=\"class\" class=\"keyword\" /><text value=\" \" /><text value=\"Piggy\" class=\"title\" /><text value=\":\" /><text type=\"break\" /><text value=\"  value = \" /><text value=\"0\" class=\"number\" /><text type=\"break\" /><text value=\"  \" /><text value=\"def\" class=\"keyword\" /><text value=\" \" /><text value=\"addMoney\" class=\"title\" /><text value=\"(self, amount)\" class=\"params\" /><text value=\":\" /><text type=\"break\" /><text value=\"    self.value = self.value + amount\" /><text type=\"break\" /><text value=\"    \" /><text type=\"break\" /><text value=\"myPiggy = Piggy()\" /><text type=\"break\" /><text value=\"myPiggy.addMoney(\" /><text value=\"100\" class=\"number\" /><text value=\")\" /></content><interactions><interaction type=\"validatedInput\" isDefault=\"true\" startIndex=\"115\" endIndex=\"136\" /></interactions></code><p visible-if=\"wrong\">Gib <code>myPiggy.addMoney(100)</code> ein.</p></body></html>"
          },
          {
            "title": "Example 5",
            "id": 92852,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Schließlich lass uns die <code>value</code>-Eigenschaft von <code>myPiggy</code> anzeigen, um zu sehen, ob sie tatsächlich aktualisiert wurde.</p><code version=\"2\" codelang=\"python\" name=\"script.py\" visible-if=\"always\"><content><text value=\"class\" class=\"keyword\" /><text value=\" \" /><text value=\"Piggy\" class=\"title\" /><text value=\":\" /><text type=\"break\" /><text value=\"  value = \" /><text value=\"0\" class=\"number\" /><text type=\"break\" /><text value=\"  \" /><text value=\"def\" class=\"keyword\" /><text value=\" \" /><text value=\"addMoney\" class=\"title\" /><text value=\"(self, amount)\" class=\"params\" /><text value=\":\" /><text type=\"break\" /><text value=\"    self.value = self.value + amount\" /><text type=\"break\" /><text value=\"    \" /><text type=\"break\" /><text value=\"myPiggy = Piggy()\" /><text type=\"break\" /><text value=\"myPiggy.addMoney(\" /><text value=\"100\" class=\"number\" /><text value=\")\" /><text type=\"break\" /><text type=\"break\" /><text value=\"print(myPiggy.value)\" /></content><interactions><interaction type=\"validatedInput\" isDefault=\"true\" startIndex=\"144\" endIndex=\"157\" /></interactions><output><content><text value=\"100\" /></content></output></code><p visible-if=\"wrong\">Gib <code>myPiggy.value</code> ein.</p></body></html>"
          }
        ]
      },
      {
        "id": 10320,
        "title": "Kapselung",
        "type": "practiceLevel1",
        "lessons": [
          {
            "title": "Encapsulation",
            "id": 92859,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>In der OOP gruppieren wir zusammengehörige Daten und Funktionen im selben Objekt. Wir nennen dies <strong>Encapsulation</strong>.</p><code version=\"2\" codelang=\"python\" name=\"script.py\" visible-if=\"always\"><content><text value=\"class\" class=\"keyword\" /><text value=\" \" /><text value=\"Dog\" class=\"title\" /><text value=\":\" /><text type=\"break\" /><text value=\"  name = \" /><text value=\"'Fido'\" class=\"string\" /><text type=\"break\" /><text value=\"  hungry = \" /><text value=\"False\" class=\"literal\" /><text type=\"break\" /><text value=\"  \" /><text type=\"break\" /><text value=\"  \" /><text value=\"def\" class=\"keyword\" /><text value=\" \" /><text value=\"eat\" class=\"title\" /><text value=\"(self)\" class=\"params\" /><text value=\":\" /><text type=\"break\" /><text value=\"    self.hungry = \" /><text value=\"True\" class=\"literal\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"0\" endIndex=\"5\" /><option startIndex=\"6\" endIndex=\"9\" /><option startIndex=\"9\" endIndex=\"10\" /></options></interaction></interactions></code><p visible-if=\"wrong\">Wähle <code>class</code>, gefolgt von <code>Dog</code> und schließlich <code>:</code> aus.</p></body></html>"
          },
          {
            "title": "Non-encapsulated example 1",
            "id": 92856,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>In FP wird Code nicht gekapselt. Kannst du erklären, warum dieser Code keine Kapselung zeigt?</p><code version=\"2\" codelang=\"python\" name=\"script.py\" visible-if=\"always\"><content><text value=\"def\" class=\"keyword\" /><text value=\" \" /><text value=\"getDistance\" class=\"title\" /><text value=\"(mph, h)\" class=\"params\" /><text value=\":\" /><text type=\"break\" /><text value=\"  \" /><text value=\"return\" class=\"keyword\" /><text value=\" mph * h\" /><text type=\"break\" /><text type=\"break\" /><text value=\"mph = \" /><text value=\"60\" class=\"number\" /><text type=\"break\" /><text value=\"h = \" /><text value=\"2\" class=\"number\" /></content></code><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\">Die Daten und die Funktion sind nicht in einem Objekt zusammengefasst</item><item value=\"2\" correct=\"false\">Die Daten und die Funktion sind nicht verwandt</item></selection><p visible-if=\"wrong\">Die Daten und die Funktion sind nicht in einem Objekt zusammengefasst.</p></body></html>"
          },
          {
            "title": "Non-encapsulated example 2",
            "id": 92857,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Wir können Code erkennen, der nicht gut gekapselt ist, wenn verwandte Methoden und Eigenschaften in verschiedenen Objekten sind. Wie können wir diesen Code kapseln?</p><code version=\"2\" codelang=\"python\" name=\"script.py\" visible-if=\"always\"><content><text value=\"class\" class=\"keyword\" /><text value=\" \" /><text value=\"Dog\" class=\"title\" /><text value=\":\" /><text type=\"break\" /><text value=\"  hungry = \" /><text value=\"True\" class=\"literal\" /><text type=\"break\" /><text type=\"break\" /><text value=\"def\" class=\"keyword\" /><text value=\" \" /><text value=\"eat\" class=\"title\" /><text value=\"()\" class=\"params\" /><text value=\":\" /><text type=\"break\" /><text value=\"  hungry = \" /><text value=\"False\" class=\"literal\" /></content></code><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\">Verschiebe <code>eat()</code> in die <code>Dog</code>-Klasse</item><item value=\"2\" correct=\"false\">Mache <code>Dog</code> und <code>eat</code> beide zu Funktionen</item></selection><p visible-if=\"wrong\">Verschiebe <code>eat()</code> in die <code>Dog</code>-Klasse.</p></body></html>"
          },
          {
            "title": "Encapsulated example 1",
            "id": 92860,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>In der OOP identifizieren wir, welche Methoden und Eigenschaften zusammengehören und zu unseren Objekten hinzugefügt werden sollten.</p><code version=\"2\" codelang=\"python\" name=\"script.py\" visible-if=\"always\"><content><text value=\"class\" class=\"keyword\" /><text value=\" \" /><text value=\"Cat\" class=\"title\" /><text value=\":\" /><text type=\"break\" /><text value=\"  color = \" /><text value=\"'orange'\" class=\"string\" /><text type=\"break\" /><text type=\"break\" /><text value=\"  \" /><text value=\"def\" class=\"keyword\" /><text value=\" \" /><text value=\"meow\" class=\"title\" /><text value=\"(self)\" class=\"params\" /><text value=\":\" /><text type=\"break\" /><text value=\"    print(\" /><text value=\"'Meow'\" class=\"string\" /><text value=\")\" /><text type=\"break\" /><text type=\"break\" /><text type=\"break\" /><text value=\"class\" class=\"keyword\" /><text value=\" \" /><text value=\"Car\" class=\"title\" /><text value=\":\" /><text type=\"break\" /><text value=\"  color = \" /><text value=\"&quot;gray&quot;\" class=\"string\" /><text type=\"break\" /><text value=\"  \" /><text type=\"break\" /><text value=\"  \" /><text value=\"def\" class=\"keyword\" /><text value=\" \" /><text value=\"drive\" class=\"title\" /><text value=\"(self)\" class=\"params\" /><text value=\":\" /><text type=\"break\" /><text value=\"    print(\" /><text value=\"&quot;accelerating...&quot;\" class=\"string\" /><text value=\")\" /></content></code></body></html>"
          },
          {
            "title": "Encapsulated example 2",
            "id": 92858,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Mit der Kapselung haben wir auch Methoden, die die anderen Eigenschaften verwenden, die zum Objekt gehören, wie in diesem Beispiel <code>eat</code> auf <code>hungry</code> zugreift.</p><code version=\"2\" codelang=\"python\" name=\"script.py\" visible-if=\"always\"><content><text value=\"class\" class=\"keyword\" /><text value=\" \" /><text value=\"Dog\" class=\"title\" /><text value=\":\" /><text type=\"break\" /><text value=\"  name = \" /><text value=\"'Fido'\" class=\"string\" /><text type=\"break\" /><text value=\"  hungry = \" /><text value=\"True\" class=\"literal\" /><text type=\"break\" /><text value=\"  \" /><text type=\"break\" /><text value=\"   \" /><text value=\"def\" class=\"keyword\" /><text value=\" \" /><text value=\"eat\" class=\"title\" /><text value=\"(self)\" class=\"params\" /><text value=\":\" /><text type=\"break\" /><text value=\"    self.hungry = \" /><text value=\"False\" class=\"literal\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"68\" endIndex=\"72\" /><option startIndex=\"72\" endIndex=\"73\" /><option startIndex=\"73\" endIndex=\"79\" /></options></interaction></interactions></code><p visible-if=\"wrong\">Wähle <code>self</code>, gefolgt von <code>.</code> und schließlich <code>hungry</code> aus.</p></body></html>"
          },
          {
            "title": "Question 1",
            "id": 92855,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Was ist Kapselung?</p><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\">Gruppieren von verwandten Daten und Funktionen im selben Objekt</item><item value=\"2\" correct=\"false\">Gruppierung verwandter Daten in einem Objekt und deren Funktionen in einem anderen</item></selection><p visible-if=\"wrong\">Gruppieren von verwandten Daten und Funktionen im selben Objekt.</p></body></html>"
          },
          {
            "title": "Question 2",
            "id": 92854,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Ist dieser Code gekapselt?</p><code version=\"2\" codelang=\"python\" name=\"script.py\" visible-if=\"always\"><content><text value=\"class\" class=\"keyword\" /><text value=\" \" /><text value=\"Car\" class=\"title\" /><text value=\":\" /><text type=\"break\" /><text value=\"  color = \" /><text value=\"'red'\" class=\"string\" /><text type=\"break\" /><text value=\"  on = \" /><text value=\"False\" class=\"literal\" /><text type=\"break\" /><text value=\"  \" /><text value=\"def\" class=\"keyword\" /><text value=\" \" /><text value=\"start\" class=\"title\" /><text value=\"(self)\" class=\"params\" /><text value=\":\" /><text type=\"break\" /><text value=\"   self.on = \" /><text value=\"True\" class=\"literal\" /></content></code><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\">Ja</item><item value=\"2\" correct=\"false\">Nein, weil es eine Funktion enthält</item></selection><p visible-if=\"wrong\">Wähle Ja aus.</p></body></html>"
          },
          {
            "title": "Question 3",
            "id": 92853,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Ist dieser Code gekapselt?</p><code version=\"2\" codelang=\"python\" name=\"script.py\" visible-if=\"always\"><content><text value=\"class\" class=\"keyword\" /><text value=\" \" /><text value=\"Person\" class=\"title\" /><text value=\":\" /><text type=\"break\" /><text value=\"  name = \" /><text value=\"'Mike'\" class=\"string\" /><text type=\"break\" /><text value=\"  \" /><text value=\"def\" class=\"keyword\" /><text value=\" \" /><text value=\"greet\" class=\"title\" /><text value=\"(self)\" class=\"params\" /><text value=\":\" /><text type=\"break\" /><text value=\"    print(\" /><text value=\"'Hi there!'\" class=\"string\" /><text value=\")\" /></content></code><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\">Ja</item><item value=\"2\" correct=\"false\">Nein</item></selection><p visible-if=\"wrong\">Wähle Ja aus.</p></body></html>"
          },
          {
            "title": "Question 4",
            "id": 92851,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Warum ist dieser Code nicht in der <code>Laptop</code>-Klasse kapsuliert?</p><code version=\"2\" codelang=\"python\" name=\"script.py\" visible-if=\"always\"><content><text value=\"class\" class=\"keyword\" /><text value=\" \" /><text value=\"Laptop\" class=\"title\" /><text value=\":\" /><text type=\"break\" /><text value=\"  on = \" /><text value=\"False\" class=\"literal\" /><text type=\"break\" /><text type=\"break\" /><text value=\"def\" class=\"keyword\" /><text value=\" \" /><text value=\"turnOn\" class=\"title\" /><text value=\"()\" class=\"params\" /><text value=\":\" /><text type=\"break\" /><text value=\"  on = \" /><text value=\"True\" class=\"literal\" /></content></code><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\"><code>turnOn()</code> ist nicht in der Klasse <code>Laptop</code>, daher ist die Funktion kein Teil des <code>Laptop</code>-Objekts</item><item value=\"2\" correct=\"false\"><code>turnOn</code> ist eine Funktion und keine Eigenschaft</item></selection><p visible-if=\"wrong\"><code>turnOn()</code> ist nicht in der Klasse <code>Laptop</code>, daher ist die Funktion kein Teil des <code>Laptop</code>-Objekts.</p></body></html>"
          },
          {
            "title": "Question 5",
            "id": 92850,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Wie können wir diesen Code kapseln?</p><code version=\"2\" codelang=\"python\" name=\"script.py\" visible-if=\"always\"><content><text value=\"def\" class=\"keyword\" /><text value=\" \" /><text value=\"getArea\" class=\"title\" /><text value=\"(b, h)\" class=\"params\" /><text value=\":\" /><text type=\"break\" /><text value=\"  \" /><text value=\"return\" class=\"keyword\" /><text value=\" b * h\" /><text type=\"break\" /><text type=\"break\" /><text value=\"base = \" /><text value=\"3\" class=\"number\" /><text type=\"break\" /><text value=\"height = \" /><text value=\"4\" class=\"number\" /></content></code><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\">Platziere <code>base</code>, <code>height</code> und <code>getArea()</code> in derselben Klasse</item><item value=\"2\" correct=\"false\">Setze nur <code>base</code> und <code>height</code> in die gleiche Klasse</item></selection><p visible-if=\"wrong\">Platziere <code>base</code>, <code>height</code> und <code>getArea()</code> in derselben Klasse.</p></body></html>"
          },
          {
            "title": "Example 1",
            "id": 92849,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Konvertiere diesen nicht kapsulierten Code in OOP-Code. Erstelle zuerst eine Klasse namens <code>Rectangle</code>.</p><code version=\"2\" codelang=\"python\" name=\"script.py\" visible-if=\"always\"><content><text value=\"def\" class=\"keyword\" /><text value=\" \" /><text value=\"getArea\" class=\"title\" /><text value=\"(b, h)\" class=\"params\" /><text value=\":\" /><text type=\"break\" /><text value=\"  \" /><text value=\"return\" class=\"keyword\" /><text value=\" b * h\" /><text type=\"break\" /><text type=\"break\" /><text value=\"base = \" /><text value=\"3\" class=\"number\" /><text type=\"break\" /><text value=\"height = \" /><text value=\"4\" class=\"number\" /><text type=\"break\" /><text type=\"break\" /><text value=\"class\" class=\"keyword\" /><text value=\" \" /><text value=\"Rectangle\" class=\"title\" /><text value=\":\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"56\" endIndex=\"61\" /><option startIndex=\"62\" endIndex=\"72\" /></options></interaction></interactions></code><p visible-if=\"wrong\">Wähle <code>class</code>, gefolgt von <code>Rectangle:</code> aus.</p></body></html>"
          },
          {
            "title": "Example 2",
            "id": 92848,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Wir kapseln die Daten und Funktionen, indem wir <code>Rectangle</code> die Eigenschaften <code>base</code> und <code>height</code> sowie eine <code>getArea()</code>-Methode geben.</p><code version=\"2\" codelang=\"python\" name=\"script.py\" visible-if=\"always\"><content><text value=\"def\" class=\"keyword\" /><text value=\" \" /><text value=\"getArea\" class=\"title\" /><text value=\"(b, h)\" class=\"params\" /><text value=\":\" /><text type=\"break\" /><text value=\"  \" /><text value=\"return\" class=\"keyword\" /><text value=\" b * h\" /><text type=\"break\" /><text type=\"break\" /><text value=\"base = \" /><text value=\"3\" class=\"number\" /><text type=\"break\" /><text value=\"height = \" /><text value=\"4\" class=\"number\" /><text type=\"break\" /><text type=\"break\" /><text value=\"class\" class=\"keyword\" /><text value=\" \" /><text value=\"Rectangle\" class=\"title\" /><text value=\":\" /><text type=\"break\" /><text value=\"  base = \" /><text value=\"3\" class=\"number\" /><text type=\"break\" /><text value=\"  height = \" /><text value=\"4\" class=\"number\" /><text type=\"break\" /><text value=\"  \" /><text value=\"def\" class=\"keyword\" /><text value=\" \" /><text value=\"getArea\" class=\"title\" /><text value=\"()\" class=\"params\" /><text value=\":\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"99\" endIndex=\"102\" /><option startIndex=\"103\" endIndex=\"110\" /><option startIndex=\"110\" endIndex=\"111\" /><option startIndex=\"111\" endIndex=\"112\" /><option startIndex=\"86\" endIndex=\"92\" /></options></interaction></interactions></code><p visible-if=\"wrong\">Wähle <code>height</code>, gefolgt von <code>def</code> und schließlich <code>getArea</code>, <code>(</code>, <code>)</code> aus.</p></body></html>"
          },
          {
            "title": "Example 3",
            "id": 92847,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Als nächstes werden wir die <code>getArea()</code>-Methode vervollständigen. Füge <code>self.base</code>, <code>*</code> und dann <code>self.height</code> hinzu.</p><code version=\"2\" codelang=\"python\" name=\"script.py\" visible-if=\"always\"><content><text value=\"def\" class=\"keyword\" /><text value=\" \" /><text value=\"getArea\" class=\"title\" /><text value=\"(b, h)\" class=\"params\" /><text value=\":\" /><text type=\"break\" /><text value=\"  \" /><text value=\"return\" class=\"keyword\" /><text value=\" b * h\" /><text type=\"break\" /><text type=\"break\" /><text value=\"base = \" /><text value=\"3\" class=\"number\" /><text type=\"break\" /><text value=\"height = \" /><text value=\"4\" class=\"number\" /><text type=\"break\" /><text type=\"break\" /><text value=\"class\" class=\"keyword\" /><text value=\" \" /><text value=\"Rectangle\" class=\"title\" /><text value=\":\" /><text type=\"break\" /><text value=\"  base = \" /><text value=\"3\" class=\"number\" /><text type=\"break\" /><text value=\"  height = \" /><text value=\"4\" class=\"number\" /><text type=\"break\" /><text value=\"  \" /><text value=\"def\" class=\"keyword\" /><text value=\" \" /><text value=\"getArea\" class=\"title\" /><text value=\"(self)\" class=\"params\" /><text value=\":\" /><text type=\"break\" /><text value=\"   \" /><text value=\"return\" class=\"keyword\" /><text value=\" self.base * self.height\" /></content><interactions><interaction type=\"validatedInput\" isDefault=\"true\" startIndex=\"128\" endIndex=\"151\" /></interactions></code><p visible-if=\"wrong\">Gib <code>self.base * self.height</code> ein.</p></body></html>"
          },
          {
            "title": "Example 4",
            "id": 92846,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>An diesem Punkt können wir den alten FP-Code entfernen. Lass uns die <code>getArea()</code>-Methode des Rechtecks aufrufen, damit wir das Ergebnis in einer Variable speichern können.</p><code version=\"2\" codelang=\"python\" name=\"script.py\" visible-if=\"always\"><content><text value=\"class\" class=\"keyword\" /><text value=\" \" /><text value=\"Rectangle\" class=\"title\" /><text value=\":\" /><text type=\"break\" /><text value=\"  base = \" /><text value=\"3\" class=\"number\" /><text type=\"break\" /><text value=\"  height = \" /><text value=\"4\" class=\"number\" /><text type=\"break\" /><text value=\"  \" /><text type=\"break\" /><text value=\"  \" /><text value=\"def\" class=\"keyword\" /><text value=\" \" /><text value=\"getArea\" class=\"title\" /><text value=\"(self)\" class=\"params\" /><text value=\":\" /><text type=\"break\" /><text value=\"   \" /><text value=\"return\" class=\"keyword\" /><text value=\" self.base * self.height\" /><text type=\"break\" /><text type=\"break\" /><text value=\"rect = Rectangle()\" /><text type=\"break\" /><text value=\"area = rect.getArea()\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"126\" endIndex=\"130\" /><option startIndex=\"130\" endIndex=\"131\" /><option startIndex=\"131\" endIndex=\"138\" /><option startIndex=\"138\" endIndex=\"139\" /><option startIndex=\"139\" endIndex=\"140\" /></options></interaction></interactions></code><p visible-if=\"wrong\">Wähle <code>rect</code>, gefolgt von <code>.</code> und schließlich <code>getArea</code>, <code>(</code>, <code>)</code> aus.</p></body></html>"
          },
          {
            "title": "Example 5",
            "id": 92826,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Lass uns das Ergebnis in der Konsole anzeigen, um zu sehen, ob es das ist, was wir erwarten.</p><code version=\"2\" codelang=\"python\" name=\"script.py\" visible-if=\"always\"><content><text value=\"class\" class=\"keyword\" /><text value=\" \" /><text value=\"Rectangle\" class=\"title\" /><text value=\":\" /><text type=\"break\" /><text value=\"  base = \" /><text value=\"3\" class=\"number\" /><text type=\"break\" /><text value=\"  height = \" /><text value=\"4\" class=\"number\" /><text type=\"break\" /><text value=\"  \" /><text type=\"break\" /><text value=\"  \" /><text value=\"def\" class=\"keyword\" /><text value=\" \" /><text value=\"getArea\" class=\"title\" /><text value=\"(self)\" class=\"params\" /><text value=\":\" /><text type=\"break\" /><text value=\"   \" /><text value=\"return\" class=\"keyword\" /><text value=\" self.base * self.height\" /><text type=\"break\" /><text type=\"break\" /><text value=\"rect = Rectangle()\" /><text type=\"break\" /><text value=\"area = rect.getArea()\" /><text type=\"break\" /><text value=\"print(area)\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"141\" endIndex=\"146\" /><option startIndex=\"146\" endIndex=\"147\" /><option startIndex=\"147\" endIndex=\"151\" /><option startIndex=\"151\" endIndex=\"152\" /></options></interaction></interactions><output><content><text value=\"12\" /></content></output></code><p visible-if=\"wrong\">Wähle <code>print</code>, gefolgt von <code>(</code> und schließlich <code>area</code>, <code>)</code> aus.</p></body></html>"
          }
        ]
      }
    ]
  }
}