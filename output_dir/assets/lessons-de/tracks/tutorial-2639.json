{
  "tutorial": {
    "id": 2639,
    "version": 4,
    "type": "challenges",
    "isNew": false,
    "codeLanguage": "node",
    "title": "Express-Grundlagen",
    "descriptionContent": "Herausforderungen sind schwierigere Übungen, die deine Fähigkeiten testen werden.",
    "shortDescriptionContent": "",
    "showInTrack": true,
    "iconBanner": null,
    "chapters": [
      {
        "id": 14586,
        "title": "Express App - 1",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "Express App 1",
            "id": 129246,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Erstelle eine App mit Express. Lasse dann die App auf Port `3000` hören.\n\n1. Rufe die Funktion `listen()` mit der Variable `app` auf.\n2. Setze `PORT` als ersten Parameter der Funktion `listen()` und eine Callback-Arrow-Funktion als zweiten Parameter.\n3. Verwende in der Callback-Funktion `console.log`, um die folgende Nachricht auszugeben.\n```\n`The server is listening on port ${PORT}`\n```",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "app.js",
                  "codeLanguage": "javascript",
                  "content": "const express = require(\"express\");\r\nconst app = express();\r\nconst PORT = 3000;\r\n",
                  "solvedContent": "const express = require(\"express\");\r\nconst app = express();\r\nconst PORT = 3000;\r\n\r\napp.listen(PORT, () => {\r\n  console.log(`The server is listening on port ${PORT}`);\r\n});\r\n"
                }
              ],
              "hints": [],
              "httpOptions": {
                "method": "GET",
                "path": "/",
                "body": null
              }
            }
          }
        ]
      },
      {
        "id": 14587,
        "title": "Express App 2",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "Express App 2",
            "id": 129247,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Verbessere den Code der App, um GET-Anfragen zu bearbeiten und eine Nachricht in der Antwort zu senden.\n\n1. Rufe die `get()`-Funktion mit der Variablen `app` auf.\n2. Setze `/` als ersten Parameter und eine Callback-Funktion mit `req` und `res` als ihre Parameter als zweiten Parameter der `get()`-Funktion.\n3. Rufe in der Callback-Funktion `res.send()` auf, um `\"Success!\"` zu senden.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "app.js",
                  "codeLanguage": "javascript",
                  "content": "const express = require(\"express\");\r\nconst app = express();\r\nconst PORT = 3000;\r\n\r\napp.listen(PORT, () => {\r\n  console.log(`The server is listening on port ${PORT}`);\r\n});\r\n",
                  "solvedContent": "const express = require(\"express\");\r\nconst app = express();\r\nconst PORT = 3000;\r\n\r\napp.get(\"/\", (req, res) => {\r\n  res.send(\"Success!\");\r\n});\r\n\r\napp.listen(PORT, () => {\r\n  console.log(`The server is listening on port ${PORT}`);\r\n});\r\n"
                }
              ],
              "hints": [],
              "httpOptions": {
                "method": "GET",
                "path": "/",
                "body": null
              }
            }
          }
        ]
      },
      {
        "id": 14588,
        "title": "Express App 3",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "Express App 3",
            "id": 129248,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Verwende die App, um bei GET-Anfragen einen Statuscode zusammen mit einer Nachricht in der Antwort zu senden.\n\n1. Rufe in der Callback-Funktion der `get()`-Funktion die `status()`-Funktion mit `res` auf.\n2. Setze `200` als Status der Antwort.\n3. Rufe nach der `status()`-Funktion die `send()`-Funktion auf, um Folgendes zu senden:\n```\n\"<h1>Welcome</h1>\"\n```",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "app.js",
                  "codeLanguage": "javascript",
                  "content": "const express = require(\"express\");\r\nconst app = express();\r\nconst port = 3000;\r\napp.get(\"/\", (req, res) => {\r\n\r\n});\r\napp.listen(port, () => {\r\n  console.log(`The server is listening on port ${port}`);\r\n});\r\n",
                  "solvedContent": "const express = require(\"express\");\r\nconst app = express();\r\nconst port = 3000;\r\napp.get(\"/\", (req, res) => {\r\n  res.status(200).send(\"<h1>Welcome</h1>\");\r\n});\r\napp.listen(port, () => {\r\n  console.log(`The server is listening on port ${port}`);\r\n});\r\n"
                }
              ],
              "hints": [],
              "httpOptions": {
                "method": "GET",
                "path": "/",
                "body": null
              }
            }
          }
        ]
      },
      {
        "id": 14589,
        "title": "Fitness-App",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "Fitness App",
            "id": 129249,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Die \"FittnessFriend\"-App benötigt eine Route für ihre Startseite!\n\n1. Gib der `GET`-Route einen Pfad von `/home`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "app.js",
                  "codeLanguage": "javascript",
                  "content": "const express = require(\"express\");\nconst app = express();\napp.get(\"\", (request, response) => {\n  response.status(200).send({\n    message: \"Welcome To FittnessFriend!\",\n  });\n});\napp.listen(3000, () => {\n  console.log(\"listening on port 3000\");\n});\n",
                  "solvedContent": "const express = require(\"express\");\nconst app = express();\napp.get(\"/home\", (request, response) => {\n  response.status(200).send({\n    message: \"Welcome To FittnessFriend!\",\n  });\n});\napp.listen(3000, () => {\n  console.log(\"listening on port 3000\");\n});\n"
                }
              ],
              "hints": [],
              "httpOptions": {
                "method": "GET",
                "path": "/",
                "body": null
              }
            }
          }
        ]
      },
      {
        "id": 14590,
        "title": "Detaillierter Kalorienzähler",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "Detailed Calorie Tracker",
            "id": 129250,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Für diese `GET`-Route senden wir alle Essensdaten an einen Benutzer zurück.\n\n1. Gib der `GET`-Route den Pfad `/foods/today`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "app.js",
                  "codeLanguage": "javascript",
                  "content": "const express = require(\"express\");\nconst app = express();\nconst allFoods = [\n  {\n    category: \"Breakfast\",\n    name: \"Banana\",\n    calories: 110,\n  },\n  {\n    category: \"Lunch\",\n    name: \"Spinach Bruschetta\",\n    calories: 110,\n  },\n  {\n    category: \"Dinner\",\n    name: \"Smoked Salmon\",\n    calories: 110,\n  },\n];\napp.get(\"\", (request, response) => {\n  response.status(200).send(allFoods);\n});\napp.listen(3000, () => {\n  console.log(\"listening on port 3000\");\n});\n",
                  "solvedContent": "const express = require(\"express\");\nconst app = express();\nconst allFoods = [\n  {\n    category: \"Breakfast\",\n    name: \"Banana\",\n    calories: 110,\n  },\n  {\n    category: \"Lunch\",\n    name: \"Spinach Bruschetta\",\n    calories: 110,\n  },\n  {\n    category: \"Dinner\",\n    name: \"Smoked Salmon\",\n    calories: 110,\n  },\n];\napp.get(\"/foods/today\", (request, response) => {\n  response.status(200).send(allFoods);\n});\napp.listen(3000, () => {\n  console.log(\"listening on port 3000\");\n});\n"
                }
              ],
              "hints": [],
              "httpOptions": {
                "method": "GET",
                "path": "/",
                "body": null
              }
            }
          }
        ]
      },
      {
        "id": 14591,
        "title": "Online-Menü",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "Online Menu",
            "id": 129251,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Ein lokales Restaurant ist dabei, seine Online-Speisekarte einzurichten! Lass uns ihnen helfen, indem wir diese `GET`-Route vervollständigen, die einen einzelnen Parameter verwendet.\n\n1. Gib der `GET`-Route einen Pfad von `/foods/today/:searchedFood`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "app.js",
                  "codeLanguage": "javascript",
                  "content": "const express = require(\"express\");\nconst app = express();\nconst allFoods = [\n  {\n    category: \"Breakfast\",\n    name: \"Banana\",\n    calories: 110,\n  },\n  {\n    category: \"Lunch\",\n    name: \"Spinach Bruschetta\",\n    calories: 110,\n  },\n  {\n    category: \"Dinner\",\n    name: \"Smoked Salmon\",\n    calories: 110,\n  },\n];\napp.get(\"\", (request, response) => {\n  const foundFood = allFoods.find(\n    (eachFood) => eachFood.name === request.params.searchedFood,\n  );\n  response.status(200).send(foundFood);\n});\napp.listen(3000, () => {\n  console.log(\"listening on port 3000\");\n});\n",
                  "solvedContent": "const express = require(\"express\");\nconst app = express();\nconst allFoods = [\n  {\n    category: \"Breakfast\",\n    name: \"Banana\",\n    calories: 110,\n  },\n  {\n    category: \"Lunch\",\n    name: \"Spinach Bruschetta\",\n    calories: 110,\n  },\n  {\n    category: \"Dinner\",\n    name: \"Smoked Salmon\",\n    calories: 110,\n  },\n];\napp.get(\"/foods/today/:searchedFood\", (request, response) => {\n  const foundFood = allFoods.find(\n    (eachFood) => eachFood.name === request.params.searchedFood,\n  );\n  response.status(200).send(foundFood);\n});\napp.listen(3000, () => {\n  console.log(\"listening on port 3000\");\n});\n"
                }
              ],
              "hints": [],
              "httpOptions": {
                "method": "GET",
                "path": "/",
                "body": null
              }
            }
          }
        ]
      }
    ]
  }
}