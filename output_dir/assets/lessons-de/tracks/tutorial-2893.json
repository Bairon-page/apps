{
  "tutorial": {
    "id": 2893,
    "version": 2,
    "type": "guidedProject",
    "isNew": false,
    "codeLanguage": "node",
    "title": "Medienbibliothek - Teil 2",
    "descriptionContent": "Im zweiten Teil des Projekts werden wir die Datenstruktur optimieren, um sie skalierbar zu machen.",
    "shortDescriptionContent": "",
    "showInTrack": true,
    "iconBanner": "tutorial-2893-icon-banner.svg",
    "chapters": [
      {
        "id": 14984,
        "title": "Kapitel #1",
        "type": "practiceLevel3",
        "lessons": [
          {
            "title": "Lesson #1",
            "id": 132109,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Willkommen zurück zum zweiten Teil des **Media Library** Projekts.\n\nHier werden wir eine Klasse für die Medienobjekte erstellen, anstatt die Objekte direkt zu unserer Bibliothek hinzuzufügen. Wir beginnen mit der `Movie` Klasse.\n\n1. Erstelle die `Movie` Klasse mit einem Konstruktor, der `id`, `title` und `director` als Parameter nimmt.\n2. Initialisiere innerhalb des Konstruktors die Instanzvariablen `id`, `title` und `director` mit den Werten, die an den Konstruktor übergeben werden.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "MediaItem.js",
                  "codeLanguage": "javascript",
                  "content": "",
                  "solvedContent": "class Movie {\n  constructor(id, title, director) {\n    this.id = id;\n    this.title = title;\n    this.director = director;\n  }\n}"
                },
                {
                  "name": "Library.js",
                  "codeLanguage": "javascript",
                  "content": "class Library {\n  constructor() {\n    this.movies = [{\n      id: 1,\n      title: 'Pulp Fiction',\n      director: 'Quentin Tarantino'\n    }, {\n      id: 2,\n      title: 'Inception',\n      director: 'Christopher Nolan'\n    }, {\n      id: 3,\n      title: 'The Matrix',\n      director: 'The Wachowskis'\n    }];\n  }\n  getAllMovies() {\n    return this.movies;\n  }\n  getMovieById(id) {\n    return this.movies.find(movie => movie.id === parseInt(id));\n  }\n}\nmodule.exports = new Library();",
                  "solvedContent": null
                },
                {
                  "name": "app.js",
                  "codeLanguage": "javascript",
                  "content": "const express = require('express');\nconst library = require('./Library');\n\nconst app = express();\nconst port = 3000;\n\napp.listen(port, function() {\n  console.log(`App is listening on port ${port}`);\n});\n\napp.get('/movies', (req, res) => {\n  res.status(200).json({\n   movies: library.getAllMovies()\n  });\n});\n\napp.get('/movies/:id', (req, res) => {\n  const id = req.params.id;\n  const movie = library.getMovieById(id);\n  if (movie) {\n    res.status(200).json(movie);\n  } else {\n    res.status(404).json({error: 'Movie not found'});\n  }\n});",
                  "solvedContent": null
                }
              ],
              "hints": [],
              "httpOptions": {
                "method": "GET",
                "path": "/movies",
                "body": null
              }
            }
          },
          {
            "title": "Lesson #2",
            "id": 132110,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Nun lass uns eine Methode in die `Movie`-Klasse hinzufügen, um die Filmdetails abzurufen.\n\n1. Füge der `Movie`-Klasse eine Methode `getDetails` hinzu, die einen formatierten String mit dem Titel und dem Regisseur des Films zurückgibt.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "MediaItem.js",
                  "codeLanguage": "javascript",
                  "content": "class Movie {\n  constructor(id, title, director) {\n    this.id = id;\n    this.title = title;\n    this.director = director;\n  }\n}",
                  "solvedContent": "class Movie {\n  constructor(id, title, director) {\n    this.id = id;\n    this.title = title;\n    this.director = director;\n  }\n  getDetails() {\n    return `${this.title} directed by ${this.director}`;\n  }\n}"
                },
                {
                  "name": "Library.js",
                  "codeLanguage": "javascript",
                  "content": "class Library {\n  constructor() {\n    this.movies = [{\n      id: 1,\n      title: 'Pulp Fiction',\n      director: 'Quentin Tarantino'\n    }, {\n      id: 2,\n      title: 'Inception',\n      director: 'Christopher Nolan'\n    }, {\n      id: 3,\n      title: 'The Matrix',\n      director: 'The Wachowskis'\n    }];\n  }\n  getAllMovies() {\n    return this.movies;\n  }\n  getMovieById(id) {\n    return this.movies.find(movie => movie.id === parseInt(id));\n  }\n}\nmodule.exports = new Library();",
                  "solvedContent": null
                },
                {
                  "name": "app.js",
                  "codeLanguage": "javascript",
                  "content": "const express = require('express');\nconst library = require('./Library');\n\nconst app = express();\nconst port = 3000;\n\napp.listen(port, function() {\n  console.log(`App is listening on port ${port}`);\n});\n\napp.get('/movies', (req, res) => {\n  res.status(200).json({\n   movies: library.getAllMovies()\n  });\n});\n\napp.get('/movies/:id', (req, res) => {\n  const id = req.params.id;\n  const movie = library.getMovieById(id);\n  if (movie) {\n    res.status(200).json(movie);\n  } else {\n    res.status(404).json({error: 'Movie not found'});\n  }\n});",
                  "solvedContent": null
                }
              ],
              "hints": [],
              "httpOptions": {
                "method": "GET",
                "path": "/movies",
                "body": null
              }
            }
          },
          {
            "title": "Lesson #3",
            "id": 132111,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "In vielen Mediatheken ist es üblich, Filme zu haben, die Teil einer Franchise sind. Wir werden eine `FranchiseFilm`-Klasse einführen, die die `Movie`-Klasse erweitert.\n\nEin Franchise-Film ist im Grunde ein Film, der Teil einer größeren Serie ist, daher ist es sinnvoll, dass `FranchiseFilm` von `Movie` erbt. Neben den grundlegenden Filmdetails hat ein Franchise-Film auch Informationen über die Franchise, zu der er gehört, seine Position in der Serie und die Gesamtanzahl der Teile in der Serie.\n\n1. Definiere eine neue `FranchiseFilm`-Klasse, die die `Movie`-Klasse erweitert.\n2. Der `FranchiseFilm`-Konstruktor sollte Parameter für `id`, `title`, `director`, `franchiseName`, `installmentNumber` und `totalInstallments` akzeptieren.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "MediaItem.js",
                  "codeLanguage": "javascript",
                  "content": "class Movie {\n  constructor(id, title, director) {\n    this.id = id;\n    this.title = title;\n    this.director = director;\n  }\n  getDetails() {\n    return `${this.title} directed by ${this.director}`;\n  }\n}",
                  "solvedContent": "class Movie {\n  constructor(id, title, director) {\n    this.id = id;\n    this.title = title;\n    this.director = director;\n  }\n  getDetails() {\n    return `${this.title} directed by ${this.director}`;\n  }\n}\nclass FranchiseFilm extends Movie {\n  constructor(id, title, director, franchiseName, installmentNumber,\n    totalInstallments) {\n    super(id, title, director);\n    this.franchiseName = franchiseName;\n    this.installmentNumber = installmentNumber;\n    this.totalInstallments = totalInstallments;\n  }\n}"
                },
                {
                  "name": "Library.js",
                  "codeLanguage": "javascript",
                  "content": "class Library {\n  constructor() {\n    this.movies = [{\n      id: 1,\n      title: 'Pulp Fiction',\n      director: 'Quentin Tarantino'\n    }, {\n      id: 2,\n      title: 'Inception',\n      director: 'Christopher Nolan'\n    }, {\n      id: 3,\n      title: 'The Matrix',\n      director: 'The Wachowskis'\n    }];\n  }\n  getAllMovies() {\n    return this.movies;\n  }\n  getMovieById(id) {\n    return this.movies.find(movie => movie.id === parseInt(id));\n  }\n}\nmodule.exports = new Library();",
                  "solvedContent": null
                },
                {
                  "name": "app.js",
                  "codeLanguage": "javascript",
                  "content": "const express = require('express');\nconst library = require('./Library');\n\nconst app = express();\nconst port = 3000;\n\napp.listen(port, function() {\n  console.log(`App is listening on port ${port}`);\n});\n\napp.get('/movies', (req, res) => {\n  res.status(200).json({\n   movies: library.getAllMovies()\n  });\n});\n\napp.get('/movies/:id', (req, res) => {\n  const id = req.params.id;\n  const movie = library.getMovieById(id);\n  if (movie) {\n    res.status(200).json(movie);\n  } else {\n    res.status(404).json({error: 'Movie not found'});\n  }\n});",
                  "solvedContent": null
                }
              ],
              "hints": [],
              "httpOptions": {
                "method": "GET",
                "path": "/movies",
                "body": null
              }
            }
          },
          {
            "title": "Lesson #4",
            "id": 132112,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Schließlich fügen wir der Klasse `FranchiseFilm` eine Methode `getDetails` hinzu.\n\nDiese Methode sollte die grundlegenden Filmdetails in der Ausgabe enthalten und auch Informationen über das Franchise und die Position des Films in der Serie hinzufügen.\n\n1. Füge der Klasse `FranchiseFilm` eine Methode `getDetails` hinzu, die das `super`-Schlüsselwort verwendet, um die grundlegenden Filmdetails einzuschließen, die von der `getDetails`-Methode der Klasse `Movie` zurückgegeben werden.\n2. Ergänze Informationen über das Franchise in der `getDetails`-Methode der Unterklasse.\n   - Füge den Wert der Variablen `franchiseName` in den zurückgegebenen String ein.\n   - Füge den Wert der Variablen `installmentNumber` in den zurückgegebenen String ein.\n   - Füge den Wert der Variablen `totalInstallments` in den zurückgegebenen String ein.\n3. Gib einen String zurück, der all diese Informationen in der `getDetails`-Methode enthält.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "MediaItem.js",
                  "codeLanguage": "javascript",
                  "content": "class Movie {\n  constructor(id, title, director) {\n    this.id = id;\n    this.title = title;\n    this.director = director;\n  }\n  getDetails() {\n    return `${this.title} directed by ${this.director}`;\n  }\n}\nclass FranchiseFilm extends Movie {\n  constructor(id, title, director, franchiseName, installmentNumber,\n    totalInstallments) {\n    super(id, title, director);\n    this.franchiseName = franchiseName;\n    this.installmentNumber = installmentNumber;\n    this.totalInstallments = totalInstallments;\n  }\n}",
                  "solvedContent": "class Movie {\n  constructor(id, title, director) {\n    this.id = id;\n    this.title = title;\n    this.director = director;\n  }\n  getDetails() {\n    return `${this.title} directed by ${this.director}`;\n  }\n}\nclass FranchiseFilm extends Movie {\n  constructor(id, title, director, franchiseName, installmentNumber,\n    totalInstallments) {\n    super(id, title, director);\n    this.franchiseName = franchiseName;\n    this.installmentNumber = installmentNumber;\n    this.totalInstallments = totalInstallments;\n  }\n  getDetails() {\n    return `${this.franchiseName} - Installment ${this.installmentNumber} of ${this.totalInstallments}: ${super.getDetails()}`;\n  }\n}"
                },
                {
                  "name": "Library.js",
                  "codeLanguage": "javascript",
                  "content": "class Library {\n  constructor() {\n    this.movies = [{\n      id: 1,\n      title: 'Pulp Fiction',\n      director: 'Quentin Tarantino'\n    }, {\n      id: 2,\n      title: 'Inception',\n      director: 'Christopher Nolan'\n    }, {\n      id: 3,\n      title: 'The Matrix',\n      director: 'The Wachowskis'\n    }];\n  }\n  getAllMovies() {\n    return this.movies;\n  }\n  getMovieById(id) {\n    return this.movies.find(movie => movie.id === parseInt(id));\n  }\n}\nmodule.exports = new Library();",
                  "solvedContent": null
                },
                {
                  "name": "app.js",
                  "codeLanguage": "javascript",
                  "content": "const express = require('express');\nconst library = require('./Library');\n\nconst app = express();\nconst port = 3000;\n\napp.listen(port, function() {\n  console.log(`App is listening on port ${port}`);\n});\n\napp.get('/movies', (req, res) => {\n  res.status(200).json({\n   movies: library.getAllMovies()\n  });\n});\n\napp.get('/movies/:id', (req, res) => {\n  const id = req.params.id;\n  const movie = library.getMovieById(id);\n  if (movie) {\n    res.status(200).json(movie);\n  } else {\n    res.status(404).json({error: 'Movie not found'});\n  }\n});",
                  "solvedContent": null
                }
              ],
              "hints": [],
              "httpOptions": {
                "method": "GET",
                "path": "/movies",
                "body": null
              }
            }
          },
          {
            "title": "Lesson #5",
            "id": 132113,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Wir verwenden das Schlüsselwort `module.exports`, um beide Klassen zu exportieren, damit sie in anderen Dateien importiert werden können.\n\n1. Füge am Ende der Datei `MediaItem.js` eine Zeile hinzu, um beide Klassen als Objekt mit den Eigenschaften `Movie` und `FranchiseFilm` zu exportieren.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "MediaItem.js",
                  "codeLanguage": "javascript",
                  "content": "class Movie {\n  constructor(id, title, director) {\n    this.id = id;\n    this.title = title;\n    this.director = director;\n  }\n  getDetails() {\n    return `${this.title} directed by ${this.director}`;\n  }\n}\nclass FranchiseFilm extends Movie {\n  constructor(id, title, director, franchiseName, installmentNumber,\n    totalInstallments) {\n    super(id, title, director);\n    this.franchiseName = franchiseName;\n    this.installmentNumber = installmentNumber;\n    this.totalInstallments = totalInstallments;\n  }\n  getDetails() {\n    return `${this.franchiseName} - Installment ${this.installmentNumber} of ${this.totalInstallments}: ${super.getDetails()}`;\n  }\n}",
                  "solvedContent": "class Movie {\n  constructor(id, title, director) {\n    this.id = id;\n    this.title = title;\n    this.director = director;\n  }\n  getDetails() {\n    return `${this.title} directed by ${this.director}`;\n  }\n}\nclass FranchiseFilm extends Movie {\n  constructor(id, title, director, franchiseName, installmentNumber,\n    totalInstallments) {\n    super(id, title, director);\n    this.franchiseName = franchiseName;\n    this.installmentNumber = installmentNumber;\n    this.totalInstallments = totalInstallments;\n  }\n  getDetails() {\n    return `${this.franchiseName} - Installment ${this.installmentNumber} of ${this.totalInstallments}: ${super.getDetails()}`;\n  }\n}\nmodule.exports = {\n  Movie,\n  FranchiseFilm\n};"
                },
                {
                  "name": "Library.js",
                  "codeLanguage": "javascript",
                  "content": "class Library {\n  constructor() {\n    this.movies = [{\n      id: 1,\n      title: 'Pulp Fiction',\n      director: 'Quentin Tarantino'\n    }, {\n      id: 2,\n      title: 'Inception',\n      director: 'Christopher Nolan'\n    }, {\n      id: 3,\n      title: 'The Matrix',\n      director: 'The Wachowskis'\n    }];\n  }\n  getAllMovies() {\n    return this.movies;\n  }\n  getMovieById(id) {\n    return this.movies.find(movie => movie.id === parseInt(id));\n  }\n}\nmodule.exports = new Library();",
                  "solvedContent": null
                },
                {
                  "name": "app.js",
                  "codeLanguage": "javascript",
                  "content": "const express = require('express');\nconst library = require('./Library');\n\nconst app = express();\nconst port = 3000;\n\napp.listen(port, function() {\n  console.log(`App is listening on port ${port}`);\n});\n\napp.get('/movies', (req, res) => {\n  res.status(200).json({\n   movies: library.getAllMovies()\n  });\n});\n\napp.get('/movies/:id', (req, res) => {\n  const id = req.params.id;\n  const movie = library.getMovieById(id);\n  if (movie) {\n    res.status(200).json(movie);\n  } else {\n    res.status(404).json({error: 'Movie not found'});\n  }\n});",
                  "solvedContent": null
                }
              ],
              "hints": [],
              "httpOptions": {
                "method": "GET",
                "path": "/movies",
                "body": null
              }
            }
          },
          {
            "title": "Lesson #6",
            "id": 132114,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Jetzt werden wir unsere `Library`-Klasse aktualisieren, um diese neuen Klassen zu nutzen.\n\n1. Erstelle am Anfang der Datei `Library.js` zwei neue Variablen, `Movie` und `FranchiseFilm`, und weise ihnen die Werte aus der importierten Datei `MediaItem.js` zu, indem du `require` verwendest.",
              "preselectedFileIndex": 1,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "MediaItem.js",
                  "codeLanguage": "javascript",
                  "content": "class Movie {\n  constructor(id, title, director) {\n    this.id = id;\n    this.title = title;\n    this.director = director;\n  }\n  getDetails() {\n    return `${this.title} directed by ${this.director}`;\n  }\n}\nclass FranchiseFilm extends Movie {\n  constructor(id, title, director, franchiseName, installmentNumber,\n    totalInstallments) {\n    super(id, title, director);\n    this.franchiseName = franchiseName;\n    this.installmentNumber = installmentNumber;\n    this.totalInstallments = totalInstallments;\n  }\n  getDetails() {\n    return `${this.franchiseName} - Installment ${this.installmentNumber} of ${this.totalInstallments}: ${super.getDetails()}`;\n  }\n}\nmodule.exports = {\n  Movie,\n  FranchiseFilm\n};",
                  "solvedContent": null
                },
                {
                  "name": "Library.js",
                  "codeLanguage": "javascript",
                  "content": "class Library {\n  constructor() {\n    this.movies = [{\n      id: 1,\n      title: 'Pulp Fiction',\n      director: 'Quentin Tarantino'\n    }, {\n      id: 2,\n      title: 'Inception',\n      director: 'Christopher Nolan'\n    }, {\n      id: 3,\n      title: 'The Matrix',\n      director: 'The Wachowskis'\n    }];\n  }\n  getAllMovies() {\n    return this.movies;\n  }\n  getMovieById(id) {\n    return this.movies.find(movie => movie.id === parseInt(id));\n  }\n}\nmodule.exports = new Library();",
                  "solvedContent": "const {\n  Movie,\n  FranchiseFilm\n} = require('./MediaItem');\nclass Library {\n  constructor() {\n    this.movies = [{\n      id: 1,\n      title: 'Pulp Fiction',\n      director: 'Quentin Tarantino'\n    }, {\n      id: 2,\n      title: 'Inception',\n      director: 'Christopher Nolan'\n    }, {\n      id: 3,\n      title: 'The Matrix',\n      director: 'The Wachowskis'\n    }];\n  }\n  getAllMovies() {\n    return this.movies;\n  }\n  getMovieById(id) {\n    return this.movies.find(movie => movie.id === parseInt(id));\n  }\n}\nmodule.exports = new Library();"
                },
                {
                  "name": "app.js",
                  "codeLanguage": "javascript",
                  "content": "const express = require('express');\nconst library = require('./Library');\n\nconst app = express();\nconst port = 3000;\n\napp.listen(port, function() {\n  console.log(`App is listening on port ${port}`);\n});\n\napp.get('/movies', (req, res) => {\n  res.status(200).json({\n   movies: library.getAllMovies()\n  });\n});\n\napp.get('/movies/:id', (req, res) => {\n  const id = req.params.id;\n  const movie = library.getMovieById(id);\n  if (movie) {\n    res.status(200).json(movie);\n  } else {\n    res.status(404).json({error: 'Movie not found'});\n  }\n});",
                  "solvedContent": null
                }
              ],
              "hints": [],
              "httpOptions": {
                "method": "GET",
                "path": "/movies",
                "body": null
              }
            }
          },
          {
            "title": "Lesson #7",
            "id": 132115,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Als nächstes verwenden wir die neu importierten Klassen, um Instanzen von Filmen und Franchise-Filmen anstelle von einfachen Objekten zu erstellen.\n\n1. Ersetze im Konstruktor der `Library` die Objekte im `movies`-Array durch Instanzen der Klassen `Movie` und `FranchiseFilm`.\n2. Verwende das `new`-Schlüsselwort zusammen mit dem Klassennamen, um neue Instanzen zu erstellen. Gib die entsprechenden Argumente basierend auf den Konstruktoren der Klassen `Movie` und `FranchiseFilm` an. Die `id`, `title` und `director` Daten für jeden Film sind wie zuvor.\n3. Füge mindestens 3 Filme und 3 Franchise-Filme hinzu.\n\nDu kannst gerne die folgenden Filme verwenden, wenn du keine eigenen Ideen hinzufügen möchtest:\n```JavaScript\n[\nnew Movie(1, 'Pulp Fiction', 'Quentin Tarantino'),\nnew Movie(2, 'Inception', 'Christopher Nolan'),\nnew Movie(3, 'The Matrix', 'The Wachowskis'),\nnew FranchiseFilm(4, 'The Fellowship of the Ring', 'Peter Jackson', 'The Lord of the Rings', 1, 3),\nnew FranchiseFilm(5, 'The Two Towers', 'Peter Jackson', 'The Lord of the Rings', 2, 3),\nnew FranchiseFilm(6, 'The Return of the King', 'Peter Jackson', 'The Lord of the Rings', 3, 3)\n]\n```",
              "preselectedFileIndex": 1,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "MediaItem.js",
                  "codeLanguage": "javascript",
                  "content": "class Movie {\n  constructor(id, title, director) {\n    this.id = id;\n    this.title = title;\n    this.director = director;\n  }\n  getDetails() {\n    return `${this.title} directed by ${this.director}`;\n  }\n}\nclass FranchiseFilm extends Movie {\n  constructor(id, title, director, franchiseName, installmentNumber,\n    totalInstallments) {\n    super(id, title, director);\n    this.franchiseName = franchiseName;\n    this.installmentNumber = installmentNumber;\n    this.totalInstallments = totalInstallments;\n  }\n  getDetails() {\n    return `${this.franchiseName} - Installment ${this.installmentNumber} of ${this.totalInstallments}: ${super.getDetails()}`;\n  }\n}\nmodule.exports = {\n  Movie,\n  FranchiseFilm\n};",
                  "solvedContent": null
                },
                {
                  "name": "Library.js",
                  "codeLanguage": "javascript",
                  "content": "const {\n  Movie,\n  FranchiseFilm\n} = require('./MediaItem');\nclass Library {\n  constructor() {\n    this.movies = [{\n      id: 1,\n      title: 'Pulp Fiction',\n      director: 'Quentin Tarantino'\n    }, {\n      id: 2,\n      title: 'Inception',\n      director: 'Christopher Nolan'\n    }, {\n      id: 3,\n      title: 'The Matrix',\n      director: 'The Wachowskis'\n    }];\n  }\n  getAllMovies() {\n    return this.movies;\n  }\n  getMovieById(id) {\n    return this.movies.find(movie => movie.id === parseInt(id));\n  }\n}\nmodule.exports = new Library();",
                  "solvedContent": "const {\n  Movie,\n  FranchiseFilm\n} = require('./MediaItem');\nclass Library {\n  constructor() {\n    this.movies = [\n      new Movie(1, 'Pulp Fiction', 'Quentin Tarantino'),\n      new Movie(2, 'Inception', 'Christopher Nolan'),\n      new Movie(3, 'The Matrix', 'The Wachowskis'),\n      new FranchiseFilm(4, 'The Fellowship of the Ring', 'Peter Jackson',\n        'The Lord of the Rings', 1, 3),\n      new FranchiseFilm(5, 'The Two Towers', 'Peter Jackson',\n        'The Lord of the Rings', 2, 3),\n      new FranchiseFilm(6, 'The Return of the King', 'Peter Jackson',\n        'The Lord of the Rings', 3, 3)\n    ];\n  }\n  getAllMovies() {\n    return this.movies;\n  }\n  getMovieById(id) {\n    return this.movies.find(movie => movie.id === parseInt(id));\n  }\n}\nmodule.exports = new Library();"
                },
                {
                  "name": "app.js",
                  "codeLanguage": "javascript",
                  "content": "const express = require('express');\nconst library = require('./Library');\n\nconst app = express();\nconst port = 3000;\n\napp.listen(port, function() {\n  console.log(`App is listening on port ${port}`);\n});\n\napp.get('/movies', (req, res) => {\n  res.status(200).json({\n   movies: library.getAllMovies()\n  });\n});\n\napp.get('/movies/:id', (req, res) => {\n  const id = req.params.id;\n  const movie = library.getMovieById(id);\n  if (movie) {\n    res.status(200).json(movie);\n  } else {\n    res.status(404).json({error: 'Movie not found'});\n  }\n});",
                  "solvedContent": null
                }
              ],
              "hints": [],
              "httpOptions": {
                "method": "GET",
                "path": "/movies",
                "body": null
              }
            }
          },
          {
            "title": "Lesson #8",
            "id": 132116,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Zum Schluss lass uns unsere neue Methode `getDetails` in der Express-App anwenden.\n\nWir werden zuerst die Route `/movies` aktualisieren.\n\n1. Innerhalb der Callback-Funktion für die Route `/movies` konvertiere das Array von Filmobjekten, das von `getAllMovies` zurückgegeben wird, in ein Array von Film-Detail-Strings, bevor es als Antwort gesendet wird. Sende das Array als Wert für den Schlüssel `movies` im JSON. Du kannst dies entweder mit der map-Methode oder einer Schleife erreichen, um durch das Array zu iterieren.",
              "preselectedFileIndex": 2,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "MediaItem.js",
                  "codeLanguage": "javascript",
                  "content": "class Movie {\n    constructor(id, title, director) {\n        this.id = id;\n        this.title = title;\n        this.director = director;\n    }\n\n    getDetails() {\n        return `${this.title} directed by ${this.director}`;\n    }\n}\n\nclass FranchiseFilm extends Movie {\n    constructor(id, title, director, franchiseName, installmentNumber, totalInstallments) {\n        super(id, title, director);\n        this.franchiseName = franchiseName;\n        this.installmentNumber = installmentNumber;\n        this.totalInstallments = totalInstallments;\n    }\n\n    getDetails() {\n        return `${this.franchiseName} - Installment ${this.installmentNumber} of ${this.totalInstallments}: ${super.getDetails()}`;\n    }\n}\n\nmodule.exports = { Movie, FranchiseFilm };",
                  "solvedContent": null
                },
                {
                  "name": "Library.js",
                  "codeLanguage": "javascript",
                  "content": "const { Movie, FranchiseFilm } = require('./MediaItem');\n\nclass Library {\n    constructor() {\n        this.movies = [\n            new Movie(1, 'Pulp Fiction', 'Quentin Tarantino'),\n            new Movie(2, 'Inception', 'Christopher Nolan'),\n            new Movie(3, 'The Matrix', 'The Wachowskis'),\n            new FranchiseFilm(4, 'The Fellowship of the Ring', 'Peter Jackson', 'The Lord of the Rings', 1, 3),\n            new FranchiseFilm(5, 'The Two Towers', 'Peter Jackson', 'The Lord of the Rings', 2, 3),\n            new FranchiseFilm(6, 'The Return of the King', 'Peter Jackson', 'The Lord of the Rings', 3, 3)\n        ];\n    }\n\n    getAllMovies() {\n        return this.movies;\n    }\n\n    getMovieById(id) {\n        return this.movies.find(movie => movie.id === parseInt(id));\n    }\n}\n\nmodule.exports = new Library();",
                  "solvedContent": null
                },
                {
                  "name": "app.js",
                  "codeLanguage": "javascript",
                  "content": "const express = require('express');\nconst library = require('./Library');\n\nconst app = express();\nconst port = 3000;\n\napp.listen(port, function() {\n  console.log(`App is listening on port ${port}`);\n});\n\napp.get('/movies', (req, res) => {\n  res.status(200).json({\n   movies: library.getAllMovies()\n  });\n});\n\napp.get('/movies/:id', (req, res) => {\n  const id = req.params.id;\n  const movie = library.getMovieById(id);\n  if (movie) {\n    res.status(200).json(movie);\n  } else {\n    res.status(404).json({error: 'Movie not found'});\n  }\n});",
                  "solvedContent": "const express = require('express');\nconst library = require('./Library');\n\nconst app = express();\nconst port = 3000;\n\napp.listen(port, function() {\n  console.log(`App is listening on port ${port}`);\n});\n\napp.get('/movies', (req, res) => {\n const movies = library.getAllMovies().map(movie => movie.getDetails());\n  res.status(200).json({\n   movies: movies\n  });\n});\n\napp.get('/movies/:id', (req, res) => {\n  const id = req.params.id;\n  const movie = library.getMovieById(id);\n  if (movie) {\n    res.status(200).json(movie);\n  } else {\n    res.status(404).json({error: 'Movie not found'});\n  }\n});"
                }
              ],
              "hints": [],
              "httpOptions": {
                "method": "GET",
                "path": "/movies",
                "body": null
              }
            }
          },
          {
            "title": "Lesson #9",
            "id": 132117,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Nun lass uns dasselbe für die Route `/movies/:id` machen.\n\n1. Rufe in der Callback-Funktion für die Route `/movies/:id` die Methode `getDetails` auf dem Movie-Objekt auf, das von `getMovieById` zurückgegeben wird, bevor du es als Wert des Schlüssels `movie` im Response-Objekt sendest.",
              "preselectedFileIndex": 2,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "MediaItem.js",
                  "codeLanguage": "javascript",
                  "content": "class Movie {\n    constructor(id, title, director) {\n        this.id = id;\n        this.title = title;\n        this.director = director;\n    }\n\n    getDetails() {\n        return `${this.title} directed by ${this.director}`;\n    }\n}\n\nclass FranchiseFilm extends Movie {\n    constructor(id, title, director, franchiseName, installmentNumber, totalInstallments) {\n        super(id, title, director);\n        this.franchiseName = franchiseName;\n        this.installmentNumber = installmentNumber;\n        this.totalInstallments = totalInstallments;\n    }\n\n    getDetails() {\n        return `${this.franchiseName} - Installment ${this.installmentNumber} of ${this.totalInstallments}: ${super.getDetails()}`;\n    }\n}\n\nmodule.exports = { Movie, FranchiseFilm };",
                  "solvedContent": null
                },
                {
                  "name": "Library.js",
                  "codeLanguage": "javascript",
                  "content": "const { Movie, FranchiseFilm } = require('./MediaItem');\n\nclass Library {\n    constructor() {\n        this.movies = [\n            new Movie(1, 'Pulp Fiction', 'Quentin Tarantino'),\n            new Movie(2, 'Inception', 'Christopher Nolan'),\n            new Movie(3, 'The Matrix', 'The Wachowskis'),\n            new FranchiseFilm(4, 'The Fellowship of the Ring', 'Peter Jackson', 'The Lord of the Rings', 1, 3),\n            new FranchiseFilm(5, 'The Two Towers', 'Peter Jackson', 'The Lord of the Rings', 2, 3),\n            new FranchiseFilm(6, 'The Return of the King', 'Peter Jackson', 'The Lord of the Rings', 3, 3)\n        ];\n    }\n\n    getAllMovies() {\n        return this.movies;\n    }\n\n    getMovieById(id) {\n        return this.movies.find(movie => movie.id === parseInt(id));\n    }\n}\n\nmodule.exports = new Library();",
                  "solvedContent": null
                },
                {
                  "name": "app.js",
                  "codeLanguage": "javascript",
                  "content": "const express = require('express');\nconst library = require('./Library');\n\nconst app = express();\nconst port = 3000;\n\napp.listen(port, function() {\n  console.log(`App is listening on port ${port}`);\n});\n\napp.get('/movies', (req, res) => {\n const movies = library.getAllMovies().map(movie => movie.getDetails());\n  res.status(200).json({\n   movies: movies\n  });\n});\n\napp.get('/movies/:id', (req, res) => {\n  const id = req.params.id;\n  const movie = library.getMovieById(id);\n  if (movie) {\n    res.status(200).json(movie);\n  } else {\n    res.status(404).json({error: 'Movie not found'});\n  }\n});",
                  "solvedContent": "const express = require('express');\nconst library = require('./Library');\n\nconst app = express();\nconst port = 3000;\n\napp.listen(port, function() {\n  console.log(`App is listening on port ${port}`);\n});\n\napp.get('/movies', (req, res) => {\n const movies = library.getAllMovies().map(movie => movie.getDetails());\n  res.status(200).json({\n   movies: movies\n  });\n});\n\napp.get('/movies/:id', (req, res) => {\n  const id = req.params.id;\n  const movie = library.getMovieById(id);\n  if (movie) {\n    res.status(200).json({movie: movie.getDetails()});\n  } else {\n    res.status(404).json({error: 'Movie not found'});\n  }\n});"
                }
              ],
              "hints": [],
              "httpOptions": {
                "method": "GET",
                "path": "/movies/1",
                "body": null
              }
            }
          }
        ]
      }
    ]
  }
}