{
  "tutorial": {
    "id": 1988,
    "version": 9,
    "type": "guidedProjectOptional",
    "isNew": false,
    "codeLanguage": "javascript",
    "title": "App zur Anpassung des Schreibtischs",
    "descriptionContent": "Verwende dein Wissen über JavaScript-Klassen, um einen einfachen Bestell- und Anpassungsservice für Schreibtische zu erstellen.",
    "shortDescriptionContent": "",
    "showInTrack": true,
    "iconBanner": "tutorial-1988-icon-banner.svg",
    "chapters": [
      {
        "id": 12698,
        "title": "Home Desk Shop",
        "type": "practiceLevel3",
        "lessons": [
          {
            "title": "Creating the Class",
            "id": 116162,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Lass uns lernen, wie wir JS-Klassen in dieser Lektion verwenden können. Wir werden eine kleine Anwendung für ein Unternehmen erstellen, das maßgefertigte Schreibtische baut und liefert.\n\nWir beginnen mit der Erstellung einer JS-Klasse.\n\n1. Erstelle eine leere Klasse `Desk`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "",
                  "solvedContent": "class Desk {}"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Setting up The Desk Class",
            "id": 116163,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Großartig. Jetzt müssen wir unsere Klasse einrichten. Wir werden einige Eigenschaften hinzufügen und ihre Anfangswerte festlegen.\n\n1. Erstelle eine `constructor`-Funktion und füge die Eigenschaften `width`, `height` und `color` zur `Desk`-Klasse hinzu.\n2. Setze den Anfangswert jeder Eigenschaft auf sich selbst. Zum Beispiel, `this.width = width`.\n3. Erstelle eine zusätzliche Eigenschaft `price` und setze ihren Anfangswert auf `0`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "class Desk {}",
                  "solvedContent": "class Desk {\n  constructor(width, height, color) {\n    this.price = 0;\n    this.width = width;\n    this.height = height;\n    this.color = color;\n  }\n}"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Calculating the Price",
            "id": 116164,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Nun müssen wir eine Möglichkeit implementieren, den Preis des Schreibtisches zu berechnen. Unten haben wir eine mögliche Preismethode bereitgestellt. Auf diese Weise setzen wir den Preis basierend auf der Höhe und der Breite des Schreibtisches fest.\n\n1. Erstelle innerhalb der `Desk`-Klasse eine Methode `calculatePrice`.\n2. Kopiere und füge den folgenden Code in die Methode ein.\n```\n    this.price = (this.width / 100 + this.height / 100) * 100;\n    console.log(this.price);\n```",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "class Desk {\n  constructor(width, height, color) {\n    this.price = 0;\n    this.width = width;\n    this.height = height;\n    this.color = color;\n  }\n}",
                  "solvedContent": "class Desk {\n  constructor(width, height, color) {\n    this.price = 0;\n    this.width = width;\n    this.height = height;\n    this.color = color;\n  }\n  calculatePrice() {\n    this.price = (this.width / 100 + this.height / 100) * 100;\n    console.log(this.price);\n  }\n}"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Creating Custom Desks",
            "id": 116165,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Wir haben jetzt eine grundlegende Klasse, mit der wir Instanzen erstellen können. Aber was, wenn der Benutzer mehr benutzerdefinierte Optionen zu seinem Schreibtisch hinzufügen möchte, wie elektrische Höhenverstellung, Schubladen usw.? Lass uns die aktuelle Klasse erweitern, um diese Optionen zu ermöglichen.\n\n1. Erstelle eine leere Klasse namens `CustomDesk`. Stelle sicher, dass sie eine Unterklasse der ursprünglichen `Desk`-Klasse ist.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "class Desk {\n  constructor(width, height, color) {\n    this.price = 0;\n    this.width = width;\n    this.height = height;\n    this.color = color;\n  }\n  calculatePrice() {\n    this.price = (this.width / 100 + this.height / 100) * 100;\n    console.log(this.price);\n  }\n}",
                  "solvedContent": "class Desk {\n  constructor(width, height, color) {\n    this.price = 0;\n    this.width = width;\n    this.height = height;\n    this.color = color;\n  }\n  calculatePrice() {\n    this.price = (this.width / 100 + this.height / 100) * 100;\n    console.log(this.price);\n  }\n}\nclass CustomDesk extends Desk {}"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Adding Custom Desk Properties",
            "id": 116166,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Da `CustomDesk` eine Unterklasse ist, muss sie auch die gleichen Eigenschaften wie die `Desk`-Klasse haben, plus alle zusätzlichen, die wir hinzufügen.\n\n1. Erstelle eine leere `constructor()`-Methode. Füge die richtigen Parameter zum Konstruktor hinzu, während du den anderen Anweisungen folgst.\n2. Stelle sicher, dass die ursprünglichen Eigenschaften der `Desk`-Klasse vorhanden sind und korrekt gesetzt werden. Sieh dir die Hinweise an, um dein Wissen aufzufrischen.\n3. Erstelle die einzigartigen Eigenschaften `drawerUnitsAmount`, `hasCableManagement` und `adjustingMechanism`.\n4. Setze den Anfangswert jeder neuen einzigartigen Eigenschaft auf sich selbst.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "class Desk {\n  constructor(width, height, color) {\n    this.price = 0;\n    this.width = width;\n    this.height = height;\n    this.color = color;\n  }\n  calculatePrice() {\n    this.price = (this.width / 100 + this.height / 100) * 100;\n    console.log(this.price);\n  }\n}\nclass CustomDesk extends Desk {}",
                  "solvedContent": "class Desk {\n  constructor(width, height, color) {\n    this.price = 0;\n    this.width = width;\n    this.height = height;\n    this.color = color;\n  }\n  calculatePrice() {\n    this.price = (this.width / 100 + this.height / 100) * 100;\n    console.log(this.price);\n  }\n}\nclass CustomDesk extends Desk {\n  constructor(width, height, color, drawerUnitsAmount, hasCableManagement,\n    adjustingMechanism) {\n    super(width, height, color);\n    this.drawerUnitsAmount = drawerUnitsAmount;\n    this.hasCableManagement = hasCableManagement;\n    this.adjustingMechanism = adjustingMechanism;\n  }\n}"
                }
              ],
              "hints": [
                {
                  "title": "Hint",
                  "content": "Use the `super()` method to refer to the original properties correctly."
                }
              ]
            }
          },
          {
            "title": "Calculating the Custom Desk Price",
            "id": 116168,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Als nächstes möchten wir den Preis des maßgefertigten Schreibtisches basierend auf den Benutzerpräferenzen und den ausgewählten Ergänzungen berechnen. Wir haben die Logik zur Berechnung des Preises für den maßgefertigten Schreibtisch für dich erstellt. Du musst nur die Berechnungsmethode erstellen, die richtigen Variablen hinzufügen und den untenstehenden Code darin einfügen.\n\n1. Erstelle eine benutzerdefinierte Methode `calculatePrice` in der Klasse `CustomDesk`.\n2. Erstelle eine lokale Variable `cableManagementPrice` und setze sie auf den Wert `20`.\n3. Erstelle eine lokale Variable `electricAdjustingPrice` und setze sie auf den Wert `125`.\n4. Erstelle eine lokale Variable `manualAdjustingPrice` und setze sie auf den Wert `25`.\n5. Erstelle eine lokale Variable `drawerUnitPrice` und setze sie auf den Wert `30`.\n6. Erstelle eine lokale Variable `initialCost` und setze sie auf den Wert `(this.width / 100 + this.height / 100) * 100`.\n7. Kopiere und füge den untenstehenden Code in die Methode `calculatePrice()` unterhalb der Variablen ein.\n\n```\n    // Logik zur Berechnung des Preises basierend auf Benutzereinstellungen und -auswahlen\n    if (this.adjustingMechanism === 'electric') {\n      if (this.hasCableManagement) {\n        this.price = initialCost + cableManagementPrice +\n            electricAdjustingPrice + drawerUnitPrice * this.drawerUnitsAmount\n            ;\n      } else {\n        this.price = initialCost + electricAdjustingPrice + drawerUnitPrice *\n          this.drawerUnitsAmount;\n      }\n    } else if (this.adjustingMechanism === 'manual') {\n      if (this.hasCableManagement) {\n        this.price = initialCost + cableManagementPrice +\n            manualAdjustingPrice + drawerUnitPrice * this.drawerUnitsAmount;\n      } else {\n        this.price = initialCost + manualAdjustingPrice + drawerUnitPrice *\n          this.drawerUnitsAmount;\n      }\n    }\n    console.log(this.price);\n\n```",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "class Desk {\n  constructor(width, height, color) {\n    this.price = 0;\n    this.width = width;\n    this.height = height;\n    this.color = color;\n  }\n  calculatePrice() {\n    this.price = (this.width / 100 + this.height / 100) * 100;\n    console.log(this.price);\n  }\n}\nclass CustomDesk extends Desk {\n  constructor(width, height, color, drawerUnitsAmount, hasCableManagement,\n    adjustingMechanism) {\n    super(width, height, color);\n    this.drawerUnitsAmount = drawerUnitsAmount;\n    this.hasCableManagement = hasCableManagement;\n    this.adjustingMechanism = adjustingMechanism;\n  }\n}",
                  "solvedContent": "class Desk {\n  constructor(width, height, color) {\n    this.price = 0;\n    this.width = width;\n    this.height = height;\n    this.color = color;\n  }\n  calculatePrice() {\n    this.price = (this.width / 100 + this.height / 100) * 100;\n    console.log(this.price);\n  }\n}\nclass CustomDesk extends Desk {\n  constructor(width, height, color, drawerUnitsAmount, hasCableManagement,\n    adjustingMechanism) {\n    super(width, height, color);\n    this.drawerUnitsAmount = drawerUnitsAmount;\n    this.hasCableManagement = hasCableManagement;\n    this.adjustingMechanism = adjustingMechanism;\n  }\n  calculatePrice() {\n    let cableManagementPrice = 20;\n    let electricAdjustingPrice = 125;\n    let manualAdjustingPrice = 25;\n    let drawerUnitPrice = 30;\n    let initialCost = (this.width / 100 + this.height / 100) * 100;\n    if (this.adjustingMechanism === 'electric') {\n      if (this.hasCableManagement) {\n        this.price = initialCost + cableManagementPrice +\n          electricAdjustingPrice + drawerUnitPrice * this.drawerUnitsAmount;\n      } else {\n        this.price = initialCost + electricAdjustingPrice + drawerUnitPrice *\n          this.drawerUnitsAmount;\n      }\n    } else if (this.adjustingMechanism === 'manual') {\n      if (this.hasCableManagement) {\n        this.price = initialCost + cableManagementPrice +\n          manualAdjustingPrice + drawerUnitPrice * this.drawerUnitsAmount;\n      } else {\n        this.price = initialCost + manualAdjustingPrice + drawerUnitPrice *\n          this.drawerUnitsAmount;\n      }\n    }\n    console.log(this.price);\n  }\n}"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Creating Instances",
            "id": 116169,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Super! Alles sollte jetzt korrekt eingerichtet sein. Lass uns unseren Code in Aktion sehen. Dazu erstellen wir einige Instanzen!\n\n1. Erstelle eine Instanz der `Desk` Klasse und nenne sie `basicDesk`. Gib ihr eine `width` von `200`, eine `height` von `80` und eine `white` Farbe.\n2. Erstelle eine Instanz der `CustomDesk` und nenne sie `awesomeDesk`. Gib ihr eine `width` von `200`, eine `height` von `110` und eine `blue` Farbe. Stelle sicher, dass sie `1` Schubladeneinheit, eine Kabelmanagementeinheit und einen \"electric\" Verstellmechanismus hat.\n3. Berechne den Preis des einfachen Schreibtisches und beobachte, was in der Konsole ausgegeben wird.\n4. Berechne den Preis des großartigen Schreibtisches und beobachte, was in der Konsole ausgegeben wird.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "class Desk {\n  constructor(width, height, color) {\n    this.price = 0;\n    this.width = width;\n    this.height = height;\n    this.color = color;\n  }\n  calculatePrice() {\n    this.price = (this.width / 100 + this.height / 100) * 100;\n    console.log(this.price);\n  }\n}\nclass CustomDesk extends Desk {\n  constructor(width, height, color, drawerUnitsAmount, hasCableManagement,\n    adjustingMechanism) {\n    super(width, height, color);\n    this.drawerUnitsAmount = drawerUnitsAmount;\n    this.hasCableManagement = hasCableManagement;\n    this.adjustingMechanism = adjustingMechanism;\n  }\n  calculatePrice() {\n    let cableManagementPrice = 20;\n    let electricAdjustingPrice = 125;\n    let manualAdjustingPrice = 25;\n    let drawerUnitPrice = 30;\n    let initialCost = (this.width / 100 + this.height / 100) * 100;\n    if (this.adjustingMechanism === 'electric') {\n      if (this.hasCableManagement) {\n        this.price = initialCost + cableManagementPrice +\n          electricAdjustingPrice + drawerUnitPrice * this.drawerUnitsAmount;\n      } else {\n        this.price = initialCost + electricAdjustingPrice + drawerUnitPrice *\n          this.drawerUnitsAmount;\n      }\n    } else if (this.adjustingMechanism === 'manual') {\n      if (this.hasCableManagement) {\n        this.price = initialCost + cableManagementPrice +\n          manualAdjustingPrice + drawerUnitPrice * this.drawerUnitsAmount;\n      } else {\n        this.price = initialCost + manualAdjustingPrice + drawerUnitPrice *\n          this.drawerUnitsAmount;\n      }\n    }\n    console.log(this.price);\n  }\n}",
                  "solvedContent": "class Desk {\n  constructor(width, height, color) {\n    this.price = 0;\n    this.width = width;\n    this.height = height;\n    this.color = color;\n  }\n  calculatePrice() {\n    this.price = (this.width / 100 + this.height / 100) * 100;\n    console.log(this.price);\n  }\n}\nclass CustomDesk extends Desk {\n  constructor(width, height, color, drawerUnitsAmount, hasCableManagement,\n    adjustingMechanism) {\n    super(width, height, color);\n    this.drawerUnitsAmount = drawerUnitsAmount;\n    this.hasCableManagement = hasCableManagement;\n    this.adjustingMechanism = adjustingMechanism;\n  }\n  calculatePrice() {\n    let cableManagementPrice = 20;\n    let electricAdjustingPrice = 125;\n    let manualAdjustingPrice = 25;\n    let drawerUnitPrice = 30;\n    let initialCost = (this.width / 100 + this.height / 100) * 100;\n    if (this.adjustingMechanism === 'electric') {\n      if (this.hasCableManagement) {\n        this.price = initialCost + cableManagementPrice +\n          electricAdjustingPrice + drawerUnitPrice * this.drawerUnitsAmount;\n      } else {\n        this.price = initialCost + electricAdjustingPrice + drawerUnitPrice *\n          this.drawerUnitsAmount;\n      }\n    } else if (this.adjustingMechanism === 'manual') {\n      if (this.hasCableManagement) {\n        this.price = initialCost + cableManagementPrice +\n          manualAdjustingPrice + drawerUnitPrice * this.drawerUnitsAmount;\n      } else {\n        this.price = initialCost + manualAdjustingPrice + drawerUnitPrice *\n          this.drawerUnitsAmount;\n      }\n    }\n    console.log(this.price);\n  }\n}\nconst basicDesk = new Desk(200, 80, 'white');\nconst awesomeDesk = new CustomDesk(200, 110, 'blue', 1, true, 'electric');\nbasicDesk.calculatePrice();\nawesomeDesk.calculatePrice();"
                }
              ],
              "hints": [
                {
                  "title": "Hint",
                  "content": "If you observe the logic we use to calculate the custom desk price, you see that the `hasCableManagement` is a boolean (either `true` or `false`). Take that into account when creating the `awesomeDesk` instance.\n\nFor the `adjustingMechanism`, the user input is either `manual` or `electric`.\n\n\n"
                }
              ]
            }
          }
        ]
      }
    ]
  }
}