{
  "tutorial": {
    "id": 2633,
    "version": 5,
    "type": "challenges",
    "isNew": false,
    "codeLanguage": "javascript",
    "title": "Arrays & Funktionen",
    "descriptionContent": "Herausforderungen sind schwierigere Übungen, die deine Fähigkeiten testen werden.",
    "shortDescriptionContent": "",
    "showInTrack": true,
    "iconBanner": null,
    "chapters": [
      {
        "id": 14525,
        "title": "Sehenswerte Orte",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "Places To Visit",
            "id": 129185,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Erstelle ein Array, das die Namen von Orten enthält, die in dieser Reihenfolge besucht werden sollen: `\"New York\"`, `\"Tokyo\"`, `\"Hawaii\"`. Weise dieses Array der Variablen `places` zu. Dann greife **ohne eine Änderung am ursprünglichen Array zu verursachen** auf den letzten Eintrag im Array zu und weise diese Syntax der Variablen `retirement` zu.\n\nAusgabe:\n`You should visit Hawaii.`",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const places;\nconst retirement;\nconsole.log(\"You should visit \" + retirement + \".\");",
                  "solvedContent": "const places = [\"New York\", \"Tokyo\", \"Hawaii\"];\nconst retirement = places[2];\nconsole.log(\"You should visit \" + retirement + \".\");"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 14526,
        "title": "Geschwister",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "Siblings",
            "id": 129186,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Lass uns ein Array erstellen, das eine Sammlung von Geschwistern enthält.\n\n1. Code ein Array, das die Namen der Geschwister in dieser Reihenfolge enthält: `\"Jon\",` `\"Jess\"`, `\"Jen\"`, `\"Jarod\"` und weise es der Variable `siblings` zu.\n2. Verwende die `push()` Methode, um ein neues Kind `\"Jacob\"` hinzuzufügen und weise diese Syntax der Variable `add` zu.\n3. Greife auf das mittlere Kind zu und speichere diese Syntax in der Variable `middleChild`.\n\nAusgabe:\n`Das mittlere Kind ist Jen.`",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const siblings;\nconst add;\nconst middleChild;\nconsole.log(`The middle child is ${middleChild}.`);",
                  "solvedContent": "const siblings = [\"Jon\", \"Jess\", \"Jen\", \"Jarod\"];\nconst add = siblings.push(\"Jacob\");\nconst middleChild = siblings[2];\nconsole.log(`The middle child is ${middleChild}.`);"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 14527,
        "title": "Zu erledigen",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "Todo",
            "id": 129187,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Lass uns ein Array erstellen, das eine Reihe von Aufgaben enthält.\n\n1. Code ein Array, das eine Liste dieser Aufgaben enthält: `\"study\"`, `\"chores\"` und `\"meditate\"`. Speichere das Array in der Variable `todos`.\n2. Verwende `pop`, um die letzte Aufgabe aus dem Array zu entfernen und speichere diese in der Variable `remove`.\n3. Erstelle eine `const` Variable `leftToDo`, die die Anzahl der verbleibenden Elemente im `todos` Array speichert. Verwende eine Array-Eigenschaft, um diesen Schritt zu codieren.\n\nAusgabe:\n`You have 2 items left to do.`",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const todos;\nconst remove;\nconst;\nconsole.log(`You have ${leftToDo} items left to do.`);",
                  "solvedContent": "const todos = [\"study\", \"chores\", \"meditate\"];\nremove = todos.pop();\nconst leftToDo = todos.length;\nconsole.log(`You have ${leftToDo} items left to do.`);"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 14528,
        "title": "Erstes Element in einem Array",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "First Value Element in an Array",
            "id": 129188,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Schreibe eine Funktion, die den ersten Wert aus ihrem `array`-Parameter zurückgibt.\n\nBeispiele:\n\n`firstValue([9, 7, 11])` gibt `9` zurück.\n\n`firstValue([2, 22, 7])` gibt `2` zurück.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "index.js",
                  "codeLanguage": "javascript",
                  "content": "function firstValue(array) {}",
                  "solvedContent": "function firstValue(array) {\n  return array[0];\n}"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 14529,
        "title": "Stunden und Minuten in Sekunden",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "Hours and Minutes to Seconds",
            "id": 129189,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Schreibe eine Funktion, die das Ergebnis der Umwandlung der Parameter `hours` und `minutes` in Sekunden zurückgibt.\n\nBeispiele:\n`toSeconds(2, 5)` gibt `7500` zurück.\n`toSeconds(1, 0)` gibt `3600` zurück.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "index.js",
                  "codeLanguage": "javascript",
                  "content": "function toSeconds(hours, minutes) {}",
                  "solvedContent": "function toSeconds(hours, minutes) {\n  return (hours * 60 + minutes) * 60;\n}"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 14530,
        "title": "Kleiner oder gleich Null",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "Less Than or Equal to Zero",
            "id": 129190,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Schreibe eine Funktion, die `true` zurückgibt, wenn der `number` Parameter kleiner oder gleich 0 ist. Andernfalls gib `false` zurück.\n\nBeispiele:\n`lessThanOrEqualToZero(7)` gibt `false` zurück.\n`lessThanOrEqualToZero(-5)` gibt `true` zurück.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "index.js",
                  "codeLanguage": "javascript",
                  "content": "function lessThanOrEqualToZero(number) {}",
                  "solvedContent": "function lessThanOrEqualToZero(number) {\n  return number <= 0;\n}"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 14531,
        "title": "Funktion mit zwei Argumenten",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "Function to Calculate and Display Value",
            "id": 129191,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Lass uns eine Funktion erstellen, die zwei Argumente nimmt und das Ergebnis einer Berechnung anzeigt.\n\n1. Erstelle eine Funktion `fuelCost`, die zwei Argumente nimmt: `litres` und `costPerLitre`.\n\n2. Innerhalb der Funktion erstelle eine Variable `totalCost`, die gleich `litres` * `costPerLitre` ist.\n\n3. Immer noch innerhalb der Funktion, zeige den Wert von `totalCost` an.\n\n4. Rufe außerhalb der Funktion die Funktion mit den Werten `60` und `1.44` für `litres` und `costPerLitre` auf.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "",
                  "solvedContent": "function fuelCost (liters, costPerLiter) {\r\n const totalCost = liters * costPerLiter;\r\n console.log(totalCost);\r\n}\r\n\r\nfuelCost(60, 1.44);"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 14532,
        "title": "Einen Wert zurückgeben und verwenden",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "Function to Return a Value",
            "id": 129192,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Lass uns eine Funktion erstellen, die einen Wert zurückgibt, und dann etwas Code schreiben, um diesen Wert anzuzeigen.\n\n1. Erstelle eine `milesToKm()` Funktion, die einen einzelnen Parameter `miles` annimmt.\n\n2. Innerhalb der Funktion erstelle eine Variable `km`, die gleich `(miles / 5) * 8` ist.\n\n3. Schreibe eine `return` Anweisung am Ende der Funktion, um den Wert von `km` zurückzugeben.\n\n4. Zeige das Ergebnis des Aufrufs der Funktion mit einem Wert von `70` an.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "",
                  "solvedContent": "function milesToKm(miles) {\r\n  const km = (miles / 5) * 8;\r\n  return km;\r\n}\r\n\r\nconsole.log(milesToKm(70));"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 14533,
        "title": "Bedingung in Funktion",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "If-else If-else in Function",
            "id": 129193,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Lass uns eine Funktion erstellen, die einen String zurückgibt, sobald eine Bedingung erfüllt ist. Hier möchten wir eine Nachricht zurückgeben, die uns basierend auf den bereitgestellten Informationen mitteilt, ob nicht genug Vorrat für alle Benutzer, für einige Benutzer oder für keinen Benutzer vorhanden ist.\n\n1. Vervollständige die Funktionsdefinition, indem du auf jeder Seite der beiden `>` Operatoren Code hinzufügst, um die korrekte Aussage zurückzugeben.\n  - Überprüfe in der `if`-Anweisung, ob `minPerUser` größer ist als `totalAvailable` (es gibt nicht genug Vorrat für sogar einen Benutzer).\n  - Überprüfe in der `else if`-Anweisung, ob `groupSize * minPerUser` größer ist als `totalAvailable` (es gibt nicht genug Vorrat für alle Benutzer).\n2. Zeige das Ergebnis des Aufrufs der Funktion mit den Parametern `group`, `total` und `minimum` an.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const group = 4;\r\nconst total = 500;\r\nconst minimum = 150;\r\n\r\nfunction stockCheck (groupSize, totalAvailable, minPerUser) {\r\n if ( > ) {\r\n  return \"Insufficient for one user\";\r\n } else if ( > ) {\r\n   return \"Insufficient for all users\";\r\n } else {\r\n  return \"Sufficient for all users\";\r\n }\r\n}",
                  "solvedContent": "const group = 4;\r\nconst total = 500;\r\nconst minimum = 150;\r\n\r\nfunction stockCheck (groupSize, totalAvailable, minPerUser) {\r\n if (minPerUser > totalAvailable) {\r\n  return \"Insufficient for one user\";\r\n } else if (groupSize * minPerUser > totalAvailable) {\r\n   return \"Insufficient for all users\";\r\n } else {\r\n  return \"Sufficient for all users\";\r\n }\r\n}\r\n\r\nconsole.log(stockCheck(group, total, minimum));"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 14535,
        "title": "Besuchernamen",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "Visitor Names",
            "id": 129195,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Rufe die entsprechende eingebaute JavaScript-Funktion auf dem `visitors` Array auf, um ein neues Array zu erstellen, das nur die Namen enthält, die mit dem Buchstaben \"C\" beginnen. Die Inline-Funktion ist für dich bereitgestellt.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "index.js",
                  "codeLanguage": "javascript",
                  "content": "let visitors = [\"Christina\", \"Andrew\", \"Chris\", \"Delia\"];\nlet C = (function(element) {\n return element[0] == \"C\";\n});\nconsole.log(C);",
                  "solvedContent": "let visitors = [\"Christina\", \"Andrew\", \"Chris\", \"Delia\"];\nlet C = visitors.filter(function(element) {\n return element[0] == \"C\";\n});\nconsole.log(C);"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 14536,
        "title": "Berechne den Gesamtpreis",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "Calculate Total Price",
            "id": 129196,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Rufe die entsprechende JavaScript-Funktion auf dem `prices`-Array auf, um die Gesamtsumme zu berechnen. Die Inline-Funktion ist für dich bereitgestellt.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "index.js",
                  "codeLanguage": "javascript",
                  "content": "let prices = [2500.25, 3482.50, 1746.50];\nlet total = (function(prev, curr) {\n return prev + curr;\n});\nconsole.log(total);",
                  "solvedContent": "let prices = [2500.25, 3482.50, 1746.50];\nlet total = prices.reduce(function(prev, curr) {\n return prev + curr;\n});\nconsole.log(total);"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 14537,
        "title": "Kilos in Pfund",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "Kilos to Pounds",
            "id": 129197,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Rufe die entsprechende JavaScript-Funktion auf dem `kilograms`-Array auf, um die Werte in Pfund umzuwandeln, und speichere das resultierende Array in einer Variablen namens `pounds`. Die Inline-Funktion ist für dich bereitgestellt.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "index.js",
                  "codeLanguage": "javascript",
                  "content": "let kilograms = [25, 45, 55];\nlet pounds = (function(element) {\n return element * 2.2;\n});\nconsole.log(pounds);",
                  "solvedContent": "let kilograms = [25, 45, 55];\nlet pounds = kilograms.map(function(element) {\n return element * 2.2;\n});\nconsole.log(pounds);"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 11549,
        "title": "Top Drei",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "Top Three",
            "id": 106219,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Füge die ersten drei Filme von `topTen` zum `topThree` Array hinzu.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const topTen = ['Jack Reacher', 'Beautiful Creatures', 'Safe Haven',\n'Side Effects', 'The Last Stand',\n'Silver Linings Playbook',\n'Broken City', 'Cloud Atlas','Parker', 'Eternals'];\nconst topThree = [];\n\n\n",
                  "solvedContent": "const topTen = ['Jack Reacher', 'Beautiful Creatures', 'Safe Haven',\n'Side Effects', 'The Last Stand',\n'Silver Linings Playbook',\n'Broken City', 'Cloud Atlas','Parker', 'Eternals'];\nconst topThree = [];\ntopThree[0] = topTen[0];\ntopThree[1] = topTen[1];\ntopThree[2] = topTen[2];"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 7851,
        "title": "Ein Array umkehren",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "Reverse an Array",
            "id": 68803,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Schreibe eine Funktion, die den Inhalt des `array`-Parameters umkehrt und als neues Array zurückgibt.\n\nBeispiele:\n`reverse([1,2,5,8])` gibt `[8,5,2,1]` zurück.\n`reverse([\"Deb\",\"Lee\"])` gibt `[\"Lee\",\"Deb\"]` zurück.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "function reverse(array) {}",
                  "solvedContent": "function reverse(array) {\r\n  const reversed = [];\r\n  for (let i = array.length - 1; i > -1; i--) {\r\n    reversed.push(array[i]);\r\n  }\r\n  return reversed;\r\n}"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 7852,
        "title": "Kleinste Zahl in einem Array",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "Smallest Number in an Array",
            "id": 68868,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Schreibe eine Funktion, die die kleinste Zahl aus dem `array`-Parameter als Ergebnis zurückgibt.\n\nBeispiele:\n`smallest([10,44,2,11])` gibt `2` zurück.\n`smallest([5,7,8,9])` gibt `5` zurück.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "function smallest(array) {}",
                  "solvedContent": "function smallest(array) {\r\n  let smallest = array[0];\r\n  for (let i = 0; i < array.length; i++) {\r\n    if (array[i] < smallest) {\r\n      smallest = array[i];\r\n    }\r\n  }\r\n  return smallest;\r\n}"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 7809,
        "title": "Unterschied zwischen Zahlen in Array",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "Difference between numbers in Array",
            "id": 68339,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Schreibe eine Funktion, die ein Array von Zahlen nimmt und die Differenz zwischen der größten und der kleinsten Zahl als Ergebnis zurückgibt.\n\nBeispiele:\n`differenceMinMax([0, 7, 11, 100])` gibt `100` zurück.\n`differenceMinMax([55, 9, 22, 11])` gibt `46` zurück.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "index.js",
                  "codeLanguage": "javascript",
                  "content": "function differenceMinMax(array) {}",
                  "solvedContent": "function differenceMinMax(array) {\n  let biggest = array[0];\n  let smallest = array[0];\n  for (let i = 0; i < array.length; i++) {\n    if (array[i] > biggest) {\n      biggest = array[i];\n    }\n    if (array[i] < smallest) {\n      smallest = array[i];\n    }\n  }\n  return biggest - smallest;\n}"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 7808,
        "title": "Enthält ein Array eine Zahl",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "Does an Array contain a number",
            "id": 68342,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Schreibe eine Funktion, die `true` zurückgibt, wenn die als zweiter Parameter übergebene `number` im als erster Parameter übergebenen `array` existiert. Andernfalls sollte sie `false` zurückgeben.\n\nBeispiele:\n\n<br>\n\n`contains([1, 2, 3, 4], 3)` gibt `true` zurück, weil die Zahl 3 im Array existiert\n\n<br>\n\n`contains([2, 2, 4], 3)` gibt `false` zurück, weil die Zahl 3 nicht im Array existiert",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "index.js",
                  "codeLanguage": "javascript",
                  "content": "function contains(array, number) {}",
                  "solvedContent": "function contains(array, number) {\n  for (let i = 0; i < array.length; i++) {\n    if (array[i] === number) {\n      return true;\n    }\n  }\n  return false;\n}"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 7873,
        "title": "Durchschnitt eines Arrays",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "Average",
            "id": 68928,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Schreibe eine Funktion, die ein Array von Zahlen als Parameter nimmt und den Durchschnitt davon als Ergebnis zurückgibt.\n\nBeispiele:\n`average([2,2,5,8])` gibt `4.25` zurück.\n`average([59,60,40])` gibt `53` zurück.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "function average(array) {}",
                  "solvedContent": "function average(array) {\n  let total = 0;\n  if (array.length === 0) {\n    return total;\n  }\n  for (let i = 0; i < array.length; i++) {\n    total += array[i];\n  }\n  return total / array.length;\n}"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 11697,
        "title": "Funktion mit Iteration",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "iteration with simple logic",
            "id": 107125,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Lass uns eine `for` Schleife innerhalb einer Funktion einfügen. Wir werden eine Countdown-Anzeige von 5 bis 1 erstellen.\n\n1. Erstelle eine Funktion namens `countdown`, die keine Argumente annimmt.\n\n2. Füge eine `for` Schleife hinzu, die eine Variable `i` von `5` bis `1` iteriert, wobei sie in Schritten von `1` abnimmt, und jedes Mal den Wert mit `console.log()` anzeigt.\n\n3. Rufe die Funktion `countdown()` auf.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "",
                  "solvedContent": "function countdown() {\r\n  for (let i = 5; i > 0; i--) {\r\n    console.log(i);\r\n  }\r\n}\r\ncountdown();"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 11722,
        "title": "Bedingte Funktionsaufrufe in Funktion",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "Function to make a decision",
            "id": 107407,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Lass uns eine Funktion erstellen, die zwei andere Funktionen verwendet, um eine Berechnung durchzuführen und zu einer Entscheidung zu gelangen. Wir möchten einige bestehende Funktionen nutzen, um zu entscheiden, ob es sicher ist, eine Mountainbike-Tour zu unternehmen.\n\n1. Definiere eine Funktion `isSafe` mit zwei Parametern: `wind` und `rain`.\n\n2. Erstelle innerhalb der Funktion eine Variable `risk`. Rufe `windRisk()` mit `wind` auf und addiere das Ergebnis zu dem von `rainRisk` mit `rain`. Speichere die Summe in der Variable `risk`.\n\n3. Schreibe innerhalb der Funktion eine `if`-Anweisung, die `true` zurückgibt, wenn `risk` kleiner als `10` ist, und `false` andernfalls.\n\n4. Zeige das Ergebnis des Aufrufs von `isSafe` mit den Argumenten `windSpeed` und `rainFall` an.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const windSpeed = 20;\r\nconst rainFall = 2;\r\n\r\nfunction windRisk(wind) {\r\n  return wind / 2.5;\r\n}\r\n\r\nfunction rainRisk(rain) {\r\n  return rain / 0.5;\r\n}",
                  "solvedContent": "const windSpeed = 20;\r\nconst rainFall = 2;\r\n\r\nfunction windRisk(wind) {\r\n  return wind / 2.5;\r\n}\r\n\r\nfunction rainRisk(rain) {\r\n  return rain / 0.5;\r\n}\r\n\r\nfunction isSafe(wind, rain) {\r\n  const risk = windRisk(wind) + rainRisk(rain);\r\n  if (risk < 10) {\r\n    return true;\r\n  } else {\r\n    return false;\r\n  }\r\n}\r\nconsole.log(isSafe(windSpeed, rainFall));"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 11686,
        "title": "Funktion mit gemischten Argumenten",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "Use of an array and another argument",
            "id": 107092,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Lass uns eine Funktion programmieren, die ein Array als Argument nimmt. Unsere Funktion wird uns sagen, wie viele Plätze noch verfügbar sind, basierend auf der Liste der Teilnehmer, die wir angeben.\n\n1. Erstelle eine Funktion `sparePlaces`, die zwei Argumente nimmt, `entries` und `capacity`.\n\n2. Erstelle eine Variable `taken` innerhalb der Funktion und weise ihr die Länge von `entries` mit der `.length` Eigenschaft zu.\n\n3. Lasse die Funktion den Wert von `capacity - taken` zurückgeben.\n\n4. Zeige das Ergebnis eines Aufrufs von `sparePlaces` an, indem du `attendees` und die Zahl `8` als Argumente verwendest.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const attendees = ['John', 'Jane', 'Jemima'];\r\n",
                  "solvedContent": "const attendees = ['John', 'Jane', 'Jemima'];\r\n\r\nfunction sparePlaces(entries, capacity) {\r\n  const taken = entries.length;\r\n  return capacity - taken;\r\n}\r\n\r\nconsole.log(sparePlaces(attendees, 8));\r\n\r\n"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 11703,
        "title": "Funktion, die eine andere aufruft",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "Call a function within another",
            "id": 107131,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Lass uns eine bestehende Funktion innerhalb einer anderen aufrufen. Wir werden eine bestehende Funktion verwenden, die eine Währung in eine andere umwandelt, um herauszufinden, wie viel wir erhalten, wenn wir die Gebühr einbeziehen.\n\n1. Definiere eine `convert`-Funktion mit zwei Parametern, `value` und `fee`.\n\n2. Erstelle innerhalb der Funktion eine Variable `gbpValue`. Rufe `usdToGbp` mit `value` als Argument auf. Subtrahiere `fee` von dem Wert, der von `usdToGbp()` zurückgegeben wird. Speichere das Ergebnis in `gbpValue`.\n\n3. Gib innerhalb der Funktion den `gbpValue` aus.\n\n4. Rufe `convert()` mit `100` und `2.5` als Argumente auf.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const usdGbp = 1.5;\r\n\r\nfunction usdToGbp(dollars) {\r\n  return dollars / usdGbp;\r\n}",
                  "solvedContent": "const usdGbp = 1.5;\r\n\r\nfunction usdToGbp(dollars) {\r\n  return dollars / usdGbp;\r\n}\r\n\r\nfunction convert(value, fee) {\r\n  const gbpValue = usdToGbp(value) - fee;\r\n  console.log(gbpValue);\r\n}\r\nconvert(100, 2.5);"
                }
              ],
              "hints": []
            }
          }
        ]
      }
    ]
  }
}