{
  "tutorial": {
    "id": 3084,
    "version": 3,
    "type": "guidedProject",
    "isNew": false,
    "codeLanguage": "jsx",
    "title": "Wordle-Klon",
    "descriptionContent": "Rekreiere das weltberühmte Wortspiel, indem du seine Kernlogik und Mechanik Schritt für Schritt aufbaust.",
    "shortDescriptionContent": "",
    "showInTrack": true,
    "iconBanner": "tutorial-3084-icon-banner.svg",
    "chapters": [
      {
        "id": 15372,
        "title": "Kapitel #1",
        "type": "practiceLevel3",
        "lessons": [
          {
            "title": "Lesson #1 - Copy",
            "id": 135288,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Willkommen zum **Wordle Clone** Projekt. Wir werden React verwenden, um einen Klon des weltberühmten Wordle-Spiels zu erstellen. Bei dem Spiel geht es darum, ein 5-Buchstaben-Wort zu erraten.\n\nLass uns damit beginnen, etwas Styling über die Datei `App.css` hinzuzufügen.\n\n1. Importiere in der `App` Komponente die Datei `App.css`.\n2. Wechsle zur Datei `App.css`, um das `body` Element zu stylen:\n   - Setze `margin` auf `0`.\n   - Setze `font-family` auf `Arial, sans-serif`.\n   - Setze `height` auf `100vh`.\n   - Setze `background` auf `linear-gradient(135deg, #f3e7e9, #e3eeff)`.",
              "preselectedFileIndex": 2,
              "hasVisualOutput": true,
              "files": [
                {
                  "name": "index.html",
                  "codeLanguage": "html",
                  "content": "<!doctype html>\n<html>\n  <head>\n    <script type=\"module\" src=\"./index.js\"></script>\n    <link rel=\"stylesheet\" href=\"./index.css\" />\n    <title>Wordle</title>\n  </head>\n  <body>\n    <div id=\"root\">loading</div>\n  </body>\n</html>",
                  "solvedContent": null
                },
                {
                  "name": "index.jsx",
                  "codeLanguage": "jsx",
                  "content": "import React from \"react\";\nimport { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\n\nconst container = document.getElementById(\"root\");\nconst root = createRoot(container);\nroot.render(<App />);\n",
                  "solvedContent": null
                },
                {
                  "name": "App.jsx",
                  "codeLanguage": "jsx",
                  "content": "import React from \"react\";\n\nconst App = () => {\n\n  return (\n    <div>\n      <h1>Wordle</h1>\n    </div>\n  );\n};\n\nexport default App;\n",
                  "solvedContent": "import React from \"react\";\nimport \"./App.css\";\n\nconst App = () => {\n\n  return (\n    <div>\n      <h1>Wordle</h1>\n    </div>\n  );\n};\n\nexport default App;\n"
                },
                {
                  "name": "App.css",
                  "codeLanguage": "css",
                  "content": "",
                  "solvedContent": "body {\n  margin: 0;\n  font-family: Arial, sans-serif;\n  height: 100vh;\n  background: linear-gradient(135deg, #f3e7e9, #e3eeff);\n}"
                },
                {
                  "name": "Row.jsx",
                  "codeLanguage": "jsx",
                  "content": "",
                  "solvedContent": null
                },
                {
                  "name": "Row.css",
                  "codeLanguage": "css",
                  "content": "",
                  "solvedContent": null
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Lesson #11",
            "id": 135282,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Als zweiten Schritt wollen wir eine Klasse für den Hauptcontainer innerhalb der `App` Komponente erstellen, die wir für zusätzliche Stilgebung ansprechen können.\n\n1. Setze in der `App` Komponente `\"main-container\"` als Wert für das `className` des `div` Elements.\n2. Wechsle zur `App.css` Datei, um Stilgebung für die `.main-container` Klasse hinzuzufügen:\n   - Setze `display` auf `flex`.\n   - Setze `flex-direction` auf `column`.\n   - Setze `align-items` auf `center`.\n   - Setze `justify-content` auf `center`.",
              "preselectedFileIndex": 2,
              "hasVisualOutput": true,
              "files": [
                {
                  "name": "index.html",
                  "codeLanguage": "html",
                  "content": "<!doctype html>\n<html>\n  <head>\n    <script type=\"module\" src=\"./index.js\"></script>\n    <link rel=\"stylesheet\" href=\"./index.css\" />\n    <title>Wordle</title>\n  </head>\n  <body>\n    <div id=\"root\">loading</div>\n  </body>\n</html>",
                  "solvedContent": null
                },
                {
                  "name": "index.jsx",
                  "codeLanguage": "jsx",
                  "content": "import React from \"react\";\nimport { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\n\nconst container = document.getElementById(\"root\");\nconst root = createRoot(container);\nroot.render(<App />);\n",
                  "solvedContent": null
                },
                {
                  "name": "App.jsx",
                  "codeLanguage": "jsx",
                  "content": "import React from \"react\";\nimport \"./App.css\";\n\nconst App = () => {\n\n  return (\n    <div>\n      <h1>Wordle</h1>\n    </div>\n  );\n};\n\nexport default App;\n",
                  "solvedContent": "import React from \"react\";\nimport \"./App.css\";\n\nconst App = () => {\n\n  return (\n    <div className=\"main-container\">\n      <h1>Wordle</h1>\n    </div>\n  );\n};\n\nexport default App;\n"
                },
                {
                  "name": "App.css",
                  "codeLanguage": "css",
                  "content": "body {\n  margin: 0;\n  font-family: Arial, sans-serif;\n  height: 100vh;\n  background: linear-gradient(135deg, #f3e7e9, #e3eeff);\n}",
                  "solvedContent": "body {\n  margin: 0;\n  font-family: Arial, sans-serif;\n  height: 100vh;\n  background: linear-gradient(135deg, #f3e7e9, #e3eeff);\n}\n\n.main-container {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n}"
                },
                {
                  "name": "Row.jsx",
                  "codeLanguage": "jsx",
                  "content": "",
                  "solvedContent": null
                },
                {
                  "name": "Row.css",
                  "codeLanguage": "css",
                  "content": "",
                  "solvedContent": null
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Lesson #4",
            "id": 135275,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Wir beginnen jetzt mit der Logik. Um uns bei der Arbeit an der App zu unterstützen, fügen wir sofort einige Demo-Daten zur Anzeige hinzu.\n\n1. Aktualisiere die Import-Anweisung, um `useState` von React einzuschließen.\n2. Definiere eine neue Konstante `targetWord` und weise den Wert `\"REACT\"` zu. Dies wird das Wort sein, das der Spieler erraten muss.\n3. Erstelle eine neue State-Variable `guesses`, die mit einem Array von erratenen Wörtern initialisiert wird. Für den Moment simulieren wir drei Vermutungen. Verwende `[\"PARTY\", \"DRAFT\", \"REACT\"]` als Anfangswert des `guesses`-Arrays.\n4. Iteriere über das `guesses`-Array und rendere jeden Wert in der `guesses`-State-Variable.",
              "preselectedFileIndex": 2,
              "hasVisualOutput": true,
              "files": [
                {
                  "name": "index.html",
                  "codeLanguage": "html",
                  "content": "<!doctype html>\n<html>\n  <head>\n    <script type=\"module\" src=\"./index.js\"></script>\n    <link rel=\"stylesheet\" href=\"./index.css\" />\n    <title>Wordle</title>\n  </head>\n  <body>\n    <div id=\"root\">loading</div>\n  </body>\n</html>",
                  "solvedContent": null
                },
                {
                  "name": "index.jsx",
                  "codeLanguage": "jsx",
                  "content": "import React from \"react\";\nimport { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\n\nconst container = document.getElementById(\"root\");\nconst root = createRoot(container);\nroot.render(<App />);",
                  "solvedContent": null
                },
                {
                  "name": "App.jsx",
                  "codeLanguage": "jsx",
                  "content": "import React from \"react\";\nimport \"./App.css\";\n\nconst App = () => {\n  return (\n    <div className=\"main-container\">\n      <h1>Wordle</h1>\n    </div>\n  );\n};\n\nexport default App;\n",
                  "solvedContent": "import React, { useState } from \"react\";\nimport \"./App.css\";\n\nconst App = () => {\n  const targetWord = \"REACT\";\n\n  const [guesses, setGuesses] = useState([\"PARTY\", \"DRAFT\", \"REACT\"]);\n\n  return (\n    <div className=\"main-container\">\n      <h1>Wordle</h1>\n      {guesses.map((guess, index) => (\n        guess\n      ))}\n    </div>\n  );\n};\n\nexport default App;\n"
                },
                {
                  "name": "App.css",
                  "codeLanguage": "css",
                  "content": "body {\n  margin: 0;\n  font-family: Arial, sans-serif;\n  height: 100vh;\n  background: linear-gradient(135deg, #f3e7e9, #e3eeff);\n}\n\n.main-container {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n}",
                  "solvedContent": null
                },
                {
                  "name": "Row.jsx",
                  "codeLanguage": "jsx",
                  "content": "",
                  "solvedContent": "import React from \"react\";\n\nconst Row = ({ guess, targetWord }) => {\n  return <div className=\"word-row\">{guess}</div>;\n};\n\nexport default Row;\n"
                },
                {
                  "name": "Row.css",
                  "codeLanguage": "css",
                  "content": "",
                  "solvedContent": null
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Lesson #4 - Copy",
            "id": 135291,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Als nächstes integrieren wir die `Row` Komponente, um jede Wortvermutung anzuzeigen.\n\n1. Erstelle in der Datei `Row.jsx` eine neue React-Komponente namens `Row`. Stelle sicher, dass du `React` importierst und die Komponente ebenfalls exportierst.\n2. Stelle sicher, dass die Komponente `guess` und `targetWord` als Props entgegennimmt.\n3. Gib ein `div` Element mit dem `className` `\"word-row\"` zurück und zeige die übergebene `guess` darin an.\n4. Importiere die `Row` Komponente am Anfang der Datei `App.jsx`.\n5. In der `map` Funktion, wo du über das `guesses` Array iterierst, rendere eine `Row` Komponente für jede Vermutung.\n6. Setze den `index` als `key` und übergebe `guess` und `targetWord` als Props an jede `Row`.",
              "preselectedFileIndex": 2,
              "hasVisualOutput": true,
              "files": [
                {
                  "name": "index.html",
                  "codeLanguage": "html",
                  "content": "<!doctype html>\n<html>\n  <head>\n    <script type=\"module\" src=\"./index.js\"></script>\n    <link rel=\"stylesheet\" href=\"./index.css\" />\n    <title>Wordle</title>\n  </head>\n  <body>\n    <div id=\"root\">loading</div>\n  </body>\n</html>",
                  "solvedContent": null
                },
                {
                  "name": "index.jsx",
                  "codeLanguage": "jsx",
                  "content": "import React from \"react\";\nimport { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\n\nconst container = document.getElementById(\"root\");\nconst root = createRoot(container);\nroot.render(<App />);",
                  "solvedContent": null
                },
                {
                  "name": "App.jsx",
                  "codeLanguage": "jsx",
                  "content": "import React, { useState } from \"react\";\nimport \"./App.css\";\n\nconst App = () => {\n  const targetWord = \"REACT\";\n\n  const [guesses, setGuesses] = useState([\"PARTY\", \"DRAFT\", \"REACT\"]);\n\n  return (\n    <div className=\"main-container\">\n      <h1>Wordle</h1>\n      {guesses.map((guess, index) => (\n        guess\n      ))}\n    </div>\n  );\n};\n\nexport default App;\n",
                  "solvedContent": "import React, { useState } from \"react\";\nimport \"./App.css\";\nimport Row from \"./Row\";\n\nconst App = () => {\n  const targetWord = \"REACT\";\n\n  const [guesses, setGuesses] = useState([\"PARTY\", \"DRAFT\", \"REACT\"]);\n\n  return (\n    <div className=\"main-container\">\n      <h1>Wordle</h1>\n      {guesses.map((guess, index) => (\n        <Row key={index} guess={guess} targetWord={targetWord} />\n      ))}\n    </div>\n  );\n};\n\nexport default App;\n"
                },
                {
                  "name": "App.css",
                  "codeLanguage": "css",
                  "content": "body {\n  margin: 0;\n  font-family: Arial, sans-serif;\n  height: 100vh;\n  background: linear-gradient(135deg, #f3e7e9, #e3eeff);\n}\n\n.main-container {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n}",
                  "solvedContent": null
                },
                {
                  "name": "Row.jsx",
                  "codeLanguage": "jsx",
                  "content": "",
                  "solvedContent": "import React from \"react\";\n\nconst Row = ({ guess, targetWord }) => {\n  return <div className=\"word-row\">{guess}</div>;\n};\n\nexport default Row;\n"
                },
                {
                  "name": "Row.css",
                  "codeLanguage": "css",
                  "content": "",
                  "solvedContent": null
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Lesson #6",
            "id": 135277,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Wir möchten dem Spieler einige Hinweise geben, indem wir anzeigen, ob ein bestimmter Buchstabe richtig geraten wurde oder nicht. Wir möchten auch zeigen, ob ein Buchstabe im Wort vorhanden ist, aber nicht an der richtigen Position.\n\n1. Definiere in der `Row`-Komponente eine Hilfsfunktion `getLetterStatus` innerhalb der Komponente, um zu bestimmen, ob jeder Buchstabe im Tipp im Vergleich zum Zielwort `correct`, `present` oder `absent` ist.\n   - Die Funktion sollte zwei Parameter akzeptieren, `letter` und `index`.\n   - Überprüfe zuerst, ob der Buchstabe gleich dem Buchstaben an der angegebenen Position im Zielwort ist: `letter === targetWord[index]`.\n   - Wenn das der Fall ist, gib `\"correct\"` zurück.\n   - Wenn das nicht der Fall ist, überprüfe, ob das Zielwort den Buchstaben enthält: `targetWord.includes(letter)`.\n   - Wenn das der Fall ist, gib `\"present\"` zurück.\n   - Wenn nichts davon zutrifft, gib `\"absent\"` zurück.\n2. Teile innerhalb der `return`-Anweisung den Tipp in einzelne Buchstaben, um ein Array von Buchstaben anstelle eines Wortes zu erhalten: `guess.split(\"\")`.\n3. Verwende `map`, um über das neu erstellte Array zu iterieren. Gib für jeden Buchstaben ein `span`-Element zurück.\n   - Setze den `key` auf `index`.\n   - Setze das `className` auf `\"letter\"` und entweder `\"correct\"`, `\"present\"` oder `\"absent\"`, indem du folgendes codierst: ``className={`letter ${getLetterStatus(letter, index)}`}``.\n   - Zeige den Buchstaben als Inhalt des `span`-Elements an.",
              "preselectedFileIndex": 4,
              "hasVisualOutput": true,
              "files": [
                {
                  "name": "index.html",
                  "codeLanguage": "html",
                  "content": "<!doctype html>\n<html>\n  <head>\n    <script type=\"module\" src=\"./index.js\"></script>\n    <link rel=\"stylesheet\" href=\"./index.css\" />\n    <title>Wordle</title>\n  </head>\n  <body>\n    <div id=\"root\">loading</div>\n  </body>\n</html>",
                  "solvedContent": null
                },
                {
                  "name": "index.jsx",
                  "codeLanguage": "jsx",
                  "content": "import React from \"react\";\nimport { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\n\nconst container = document.getElementById(\"root\");\nconst root = createRoot(container);\nroot.render(<App />);",
                  "solvedContent": null
                },
                {
                  "name": "App.jsx",
                  "codeLanguage": "jsx",
                  "content": "import React, { useState } from \"react\";\nimport \"./App.css\";\nimport Row from \"./Row\";\n\nconst App = () => {\n  const targetWord = \"REACT\";\n\n  const [guesses, setGuesses] = useState([\"PARTY\", \"DRAFT\", \"REACT\"]);\n\n  return (\n    <div className=\"main-container\">\n      <h1>Wordle</h1>\n      {guesses.map((guess, index) => (\n        <Row key={index} guess={guess} targetWord={targetWord} />\n      ))}\n    </div>\n  );\n};\n\nexport default App;\n",
                  "solvedContent": null
                },
                {
                  "name": "App.css",
                  "codeLanguage": "css",
                  "content": "body {\n  margin: 0;\n  font-family: Arial, sans-serif;\n  height: 100vh;\n  background: linear-gradient(135deg, #f3e7e9, #e3eeff);\n}\n\n.main-container {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n}",
                  "solvedContent": null
                },
                {
                  "name": "Row.jsx",
                  "codeLanguage": "jsx",
                  "content": "import React from \"react\";\n\nconst Row = ({ guess, targetWord }) => {\n  return <div className=\"word-row\">{guess}</div>;\n};\n\nexport default Row;\n",
                  "solvedContent": "import React from \"react\";\n\nconst Row = ({ guess, targetWord }) => {\n  const getLetterStatus = (letter, index) => {\n    if (letter === targetWord[index]) {\n      return \"correct\";\n    } else if (targetWord.includes(letter)) {\n      return \"present\";\n    } else {\n      return \"absent\";\n    }\n  };\n\n  return (\n    <div className=\"word-row\">\n      {guess.split(\"\").map((letter, index) => (\n        <span\n          key={index}\n          className={`letter ${getLetterStatus(letter, index)}`}\n        >\n          {letter}\n        </span>\n      ))}\n    </div>\n  );\n};\n\nexport default Row;\n"
                },
                {
                  "name": "Row.css",
                  "codeLanguage": "css",
                  "content": "",
                  "solvedContent": null
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Lesson #8",
            "id": 135279,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Als nächstes: Styling für die `Row` Komponente mit CSS.\n\n1. Immer noch in der `Row` Komponente, importiere die `Row.css` Datei.\n1. Erstelle in der `Row.css` Datei Regeln für `.word-row`, um das Layout der Zeile zu definieren:\n   - Setze `display` auf `flex`.\n   - Setze `justify-content` auf `center`.\n   - Setze `margin` auf `5px`.\n2. Erstelle außerdem eine `.letter` Regel, um einzelne Buchstaben zu stylen:\n   - Setze `width` auf `40px`.\n   - Setze `height` auf `40px`.\n   - Setze `display` auf `inline-flex`.\n   - Setze `justify-content` auf `center`.\n   - Setze `align-items` auf `center`.\n   - Setze `margin` auf `2px`.\n   - Setze `color` auf `white`.\n   - Setze `font-weight` auf `bold`.\n   - Setze `font-size` auf `1.2em`.",
              "preselectedFileIndex": 4,
              "hasVisualOutput": true,
              "files": [
                {
                  "name": "index.html",
                  "codeLanguage": "html",
                  "content": "<!doctype html>\n<html>\n  <head>\n    <script type=\"module\" src=\"./index.js\"></script>\n    <link rel=\"stylesheet\" href=\"./index.css\" />\n    <title>Wordle</title>\n  </head>\n  <body>\n    <div id=\"root\">loading</div>\n  </body>\n</html>",
                  "solvedContent": null
                },
                {
                  "name": "index.jsx",
                  "codeLanguage": "jsx",
                  "content": "import React from \"react\";\nimport { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\n\nconst container = document.getElementById(\"root\");\nconst root = createRoot(container);\nroot.render(<App />);",
                  "solvedContent": null
                },
                {
                  "name": "App.jsx",
                  "codeLanguage": "jsx",
                  "content": "import React, { useState } from \"react\";\nimport \"./App.css\";\nimport Row from \"./Row\";\n\nconst App = () => {\n  const targetWord = \"REACT\";\n\n  const [guesses, setGuesses] = useState([\"PARTY\", \"DRAFT\", \"REACT\"]);\n\n  return (\n    <div className=\"main-container\">\n      <h1>Wordle</h1>\n      {guesses.map((guess, index) => (\n        <Row key={index} guess={guess} targetWord={targetWord} />\n      ))}\n    </div>\n  );\n};\n\nexport default App;\n",
                  "solvedContent": null
                },
                {
                  "name": "App.css",
                  "codeLanguage": "css",
                  "content": "body {\n  margin: 0;\n  font-family: Arial, sans-serif;\n  height: 100vh;\n  background: linear-gradient(135deg, #f3e7e9, #e3eeff);\n}\n\n.main-container {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n}",
                  "solvedContent": null
                },
                {
                  "name": "Row.jsx",
                  "codeLanguage": "jsx",
                  "content": "import React from \"react\";\n\nconst Row = ({ guess, targetWord }) => {\n  const getLetterStatus = (letter, index) => {\n    if (letter === targetWord[index]) {\n      return \"correct\";\n    } else if (targetWord.includes(letter)) {\n      return \"present\";\n    } else {\n      return \"absent\";\n    }\n  };\n\n  return (\n    <div className=\"word-row\">\n      {guess.split(\"\").map((letter, index) => (\n        <span\n          key={index}\n          className={`letter ${getLetterStatus(letter, index)}`}\n        >\n          {letter}\n        </span>\n      ))}\n    </div>\n  );\n};\n\nexport default Row;",
                  "solvedContent": "import React from \"react\";\nimport \"./Row.css\";\n\nconst Row = ({ guess, targetWord }) => {\n  const getLetterStatus = (letter, index) => {\n    if (letter === targetWord[index]) {\n      return \"correct\";\n    } else if (targetWord.includes(letter)) {\n      return \"present\";\n    } else {\n      return \"absent\";\n    }\n  };\n\n  return (\n    <div className=\"word-row\">\n      {guess.split(\"\").map((letter, index) => (\n        <span\n          key={index}\n          className={`letter ${getLetterStatus(letter, index)}`}\n        >\n          {letter}\n        </span>\n      ))}\n    </div>\n  );\n};\n\nexport default Row;"
                },
                {
                  "name": "Row.css",
                  "codeLanguage": "css",
                  "content": "",
                  "solvedContent": ".word-row {\n  display: flex;\n  justify-content: center;\n  margin: 5px;\n}\n\n.letter {\n  width: 40px;\n  height: 40px;\n  display: inline-flex;\n  justify-content: center;\n  align-items: center;\n  margin: 2px;\n  color: white;\n  font-weight: bold;\n  font-size: 1.2em;\n}"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Lesson #9",
            "id": 135280,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Wir möchten buchstabenspezifische Stile für korrekte, vorhandene und fehlende Buchstaben verwenden.\n\n1. Füge in der Datei `Row.css` spezifische Stile für `.letter.correct`, `.letter.present` und `.letter.absent` hinzu. Setze die Hintergrundfarbe entsprechend auf `\"green\"`, `\"gold\"` und `\"lightgray\"`.",
              "preselectedFileIndex": 5,
              "hasVisualOutput": true,
              "files": [
                {
                  "name": "index.html",
                  "codeLanguage": "html",
                  "content": "<!doctype html>\n<html>\n  <head>\n    <script type=\"module\" src=\"./index.js\"></script>\n    <link rel=\"stylesheet\" href=\"./index.css\" />\n    <title>Wordle</title>\n  </head>\n  <body>\n    <div id=\"root\">loading</div>\n  </body>\n</html>",
                  "solvedContent": null
                },
                {
                  "name": "index.jsx",
                  "codeLanguage": "jsx",
                  "content": "import React from \"react\";\nimport { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\n\nconst container = document.getElementById(\"root\");\nconst root = createRoot(container);\nroot.render(<App />);\n",
                  "solvedContent": null
                },
                {
                  "name": "App.jsx",
                  "codeLanguage": "jsx",
                  "content": "import React, { useState } from \"react\";\nimport \"./App.css\";\nimport Row from \"./Row\";\n\nconst App = () => {\n  const targetWord = \"REACT\";\n\n  const [guesses, setGuesses] = useState([\"PARTY\", \"DRAFT\", \"REACT\"]);\n\n  return (\n    <div className=\"main-container\">\n      <h1>Wordle</h1>\n      {guesses.map((guess, index) => (\n        <Row key={index} guess={guess} targetWord={targetWord} />\n      ))}\n    </div>\n  );\n};\n\nexport default App;\n",
                  "solvedContent": null
                },
                {
                  "name": "App.css",
                  "codeLanguage": "css",
                  "content": "body {\n  margin: 0;\n  font-family: Arial, sans-serif;\n  height: 100vh;\n  background: linear-gradient(135deg, #f3e7e9, #e3eeff);\n}\n\n.main-container {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n}",
                  "solvedContent": null
                },
                {
                  "name": "Row.jsx",
                  "codeLanguage": "jsx",
                  "content": "import React from \"react\";\nimport \"./Row.css\";\n\nconst Row = ({ guess, targetWord }) => {\n  const getLetterStatus = (letter, index) => {\n    if (letter === targetWord[index]) {\n      return \"correct\";\n    } else if (targetWord.includes(letter)) {\n      return \"present\";\n    } else {\n      return \"absent\";\n    }\n  };\n\n  return (\n    <div className=\"word-row\">\n      {guess.split(\"\").map((letter, index) => (\n        <span\n          key={index}\n          className={`letter ${getLetterStatus(letter, index)}`}\n        >\n          {letter}\n        </span>\n      ))}\n    </div>\n  );\n};\n\nexport default Row;",
                  "solvedContent": null
                },
                {
                  "name": "Row.css",
                  "codeLanguage": "css",
                  "content": ".word-row {\n  display: flex;\n  justify-content: center;\n  margin: 5px;\n}\n\n.letter {\n  width: 40px;\n  height: 40px;\n  display: inline-flex;\n  justify-content: center;\n  align-items: center;\n  margin: 2px;\n  color: white;\n  font-weight: bold;\n  font-size: 1.2em;\n}",
                  "solvedContent": ".word-row {\n  display: flex;\n  justify-content: center;\n  margin: 5px;\n}\n\n.letter {\n  width: 40px;\n  height: 40px;\n  display: inline-flex;\n  justify-content: center;\n  align-items: center;\n  margin: 2px;\n  color: white;\n  font-weight: bold;\n  font-size: 1.2em;\n}\n\n.letter.correct {\n  background-color: green;\n}\n\n.letter.present {\n  background-color: gold;\n}\n\n.letter.absent {\n  background-color: lightgray;\n}"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Lesson #2",
            "id": 135284,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Als nächstes müssen wir die Benutzereingabe in unserer App verarbeiten, um das Eingeben und Verwalten von Vermutungen zu ermöglichen.\n\n1. Erstelle innerhalb der `App`-Komponente eine weitere Zustandsvariable `currentGuess`, die als leerer String initialisiert wird.\n2. Erstelle außerdem eine Funktion namens `handleInputChange`, die ein Ereignis als Argument nimmt und `currentGuess` mit `setCurrentGuess` unter Verwendung des Eingabewerts in Großbuchstaben aktualisiert: `event.target.value.toUpperCase()`.\n3. Füge im zurückgegebenen JSX unter den `Row`-Komponenten ein `input`-Element mit folgenden Attributen hinzu:\n   - Füge `onChange={handleInputChange}` hinzu, um Eingabeänderungen mit der neu erstellten Funktion zu verarbeiten.\n   - Füge `maxLength={targetWord.length}` hinzu, um die Eingabelänge zu beschränken.\n   - Füge einen Platzhalter wie `\"Enter your guess\"` hinzu.",
              "preselectedFileIndex": 2,
              "hasVisualOutput": true,
              "files": [
                {
                  "name": "index.jsx",
                  "codeLanguage": "jsx",
                  "content": "import React from \"react\";\nimport { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\n\nconst container = document.getElementById(\"root\");\nconst root = createRoot(container);\nroot.render(<App />);",
                  "solvedContent": null
                },
                {
                  "name": "index.html",
                  "codeLanguage": "html",
                  "content": "<!doctype html>\n<html>\n<head>\n  <script type=\"module\" src=\"./index.js\"></script>\n  <link rel=\"stylesheet\" href=\"./index.css\" />\n  <title>Wordle</title>\n</head>\n<body>\n  <div id=\"root\">loading</div>\n</body>\n</html>",
                  "solvedContent": null
                },
                {
                  "name": "App.jsx",
                  "codeLanguage": "jsx",
                  "content": "import React, { useState } from \"react\";\nimport \"./App.css\";\nimport Row from \"./Row\";\n\nconst App = () => {\n  const targetWord = \"REACT\";\n\n  const [guesses, setGuesses] = useState([\"PARTY\", \"DRAFT\", \"REACT\"]);\n\n  return (\n    <div className=\"main-container\">\n      <h1>Wordle</h1>\n      {guesses.map((guess, index) => (\n        <Row key={index} guess={guess} targetWord={targetWord} />\n      ))}\n    </div>\n  );\n};\n\nexport default App;\n",
                  "solvedContent": "import React, { useState } from \"react\";\nimport \"./App.css\";\nimport Row from \"./Row\";\n\nconst App = () => {\n  const targetWord = \"REACT\";\n\n  const [guesses, setGuesses] = useState([\"PARTY\", \"DRAFT\", \"REACT\"]);\n  const [currentGuess, setCurrentGuess] = useState(\"\");\n\n  const handleInputChange = (event) => {\n    setCurrentGuess(event.target.value.toUpperCase());\n  };\n\n  return (\n    <div className=\"main-container\">\n      <h1>Wordle</h1>\n      {guesses.map((guess, index) => (\n        <Row key={index} guess={guess} targetWord={targetWord} />\n      ))}\n      <input\n        onChange={handleInputChange}\n        maxLength={targetWord.length}\n        placeholder=\"Enter your guess\"\n      />\n    </div>\n  );\n};\n\nexport default App;"
                },
                {
                  "name": "App.css",
                  "codeLanguage": "css",
                  "content": "body {\n  margin: 0;\n  font-family: Arial, sans-serif;\n  height: 100vh;\n  background: linear-gradient(135deg, #f3e7e9, #e3eeff);\n}\n\n.main-container {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n}",
                  "solvedContent": null
                },
                {
                  "name": "Row.jsx",
                  "codeLanguage": "jsx",
                  "content": "import React from \"react\";\nimport \"./Row.css\"\n\nconst Row = ({ guess, targetWord }) => {\n  const getLetterStatus = (letter, index) => {\n    if (letter === targetWord[index]) {\n      return \"correct\";\n    } else if (targetWord.includes(letter)) {\n      return \"present\";\n    } else {\n      return \"absent\";\n    }\n  };\n\n  return (\n    <div className=\"word-row\">\n      {guess.split(\"\").map((letter, index) => (\n        <span\n          key={index}\n          className={`letter ${getLetterStatus(letter, index)}`}\n        >\n          {letter}\n        </span>\n      ))}\n    </div>\n  );\n};\n\nexport default Row;",
                  "solvedContent": null
                },
                {
                  "name": "Row.css",
                  "codeLanguage": "css",
                  "content": ".word-row {\n  display: flex;\n  justify-content: center;\n  margin: 5px;\n}\n\n.letter {\n  width: 40px;\n  height: 40px;\n  display: inline-flex;\n  justify-content: center;\n  align-items: center;\n  margin: 2px;\n  color: white;\n  font-weight: bold;\n  font-size: 1.2em;\n}\n\n.letter.correct {\n  background-color: green;\n}\n\n.letter.present {\n  background-color: gold;\n}\n\n.letter.absent {\n  background-color: lightgray;\n}",
                  "solvedContent": null
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Lesson #3",
            "id": 135285,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Zeit, die Funktionalität zum Einreichen von Vermutungen und zur Verarbeitung der Spiel-Logik zu integrieren.\n\n1. Erstelle in der `App`-Komponente eine Funktion namens `handleGuess`.\n   - Kehre sofort zurück, wenn `currentGuess.length` nicht gleich `5` ist, da jede Vermutung 5 Buchstaben haben muss.\n   - Erstelle ein Array `updatedGuesses` mit den bestehenden Vermutungen plus `currentGuess`. Verwende den Spread-Operator, um `currentGuess` zum `guesses`-Array hinzuzufügen, bevor du die Zustandsvariable mit diesem neuen erweiterten Array aktualisierst.\n   - Setze die Zustandsvariable `guesses` auf den Wert der Variable `updatedGuesses` mit `setGuesses`.\n2. Füge unter dem `input`-Element ein `button`-Element mit `onClick={handleGuess}` und dem Text `Guess` hinzu. Dies sollte die neue Funktion beim Klicken auslösen.",
              "preselectedFileIndex": 2,
              "hasVisualOutput": true,
              "files": [
                {
                  "name": "index.jsx",
                  "codeLanguage": "jsx",
                  "content": "import React from \"react\";\nimport { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\n\nconst container = document.getElementById(\"root\");\nconst root = createRoot(container);\nroot.render(<App />);",
                  "solvedContent": null
                },
                {
                  "name": "index.html",
                  "codeLanguage": "html",
                  "content": "<!doctype html>\n<html>\n<head>\n  <script type=\"module\" src=\"./index.js\"></script>\n  <link rel=\"stylesheet\" href=\"./index.css\" />\n  <title>Wordle</title>\n</head>\n<body>\n  <div id=\"root\">loading</div>\n</body>\n</html>",
                  "solvedContent": null
                },
                {
                  "name": "App.jsx",
                  "codeLanguage": "jsx",
                  "content": "import React, { useState } from \"react\";\nimport \"./App.css\";\nimport Row from \"./Row\";\n\nconst App = () => {\n  const targetWord = \"REACT\";\n\n  const [guesses, setGuesses] = useState([\"PARTY\", \"DRAFT\", \"REACT\"]);\n  const [currentGuess, setCurrentGuess] = useState(\"\");\n\n  const handleInputChange = (event) => {\n    setCurrentGuess(event.target.value.toUpperCase());\n  };\n\n  return (\n    <div className=\"main-container\">\n      <h1>Wordle</h1>\n      {guesses.map((guess, index) => (\n        <Row key={index} guess={guess} targetWord={targetWord} />\n      ))}\n      <input\n        onChange={handleInputChange}\n        maxLength={targetWord.length}\n        placeholder=\"Enter your guess\"\n      />\n    </div>\n  );\n};\n\nexport default App;",
                  "solvedContent": "import React, { useState } from \"react\";\nimport \"./App.css\";\nimport Row from \"./Row\";\n\nconst App = () => {\n  const targetWord = \"REACT\";\n\n  const [guesses, setGuesses] = useState([\"PARTY\", \"DRAFT\", \"REACT\"]);\n  const [currentGuess, setCurrentGuess] = useState(\"\");\n\n  const handleInputChange = (event) => {\n    setCurrentGuess(event.target.value.toUpperCase());\n  };\n\n  const handleGuess = () => {\n    if (currentGuess.length !== 5) {\n      return;\n    }\n\n    const updatedGuesses = [...guesses, currentGuess];\n    setGuesses(updatedGuesses);\n  };\n\n  return (\n    <div className=\"main-container\">\n      <h1>Wordle</h1>\n      {guesses.map((guess, index) => (\n        <Row key={index} guess={guess} targetWord={targetWord} />\n      ))}\n      <input\n        onChange={handleInputChange}\n        maxLength={targetWord.length}\n        placeholder=\"Enter your guess\"\n      />\n      <button onClick={handleGuess}>Guess</button>\n    </div>\n  );\n};\n\nexport default App;"
                },
                {
                  "name": "App.css",
                  "codeLanguage": "css",
                  "content": "body {\n  margin: 0;\n  font-family: Arial, sans-serif;\n  height: 100vh;\n  background: linear-gradient(135deg, #f3e7e9, #e3eeff);\n}\n\n.main-container {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n}",
                  "solvedContent": null
                },
                {
                  "name": "Row.jsx",
                  "codeLanguage": "jsx",
                  "content": "import React from \"react\";\nimport \"./Row.css\"\n\nconst Row = ({ guess, targetWord }) => {\n  const getLetterStatus = (letter, index) => {\n    if (letter === targetWord[index]) {\n      return \"correct\";\n    } else if (targetWord.includes(letter)) {\n      return \"present\";\n    } else {\n      return \"absent\";\n    }\n  };\n\n  return (\n    <div className=\"word-row\">\n      {guess.split(\"\").map((letter, index) => (\n        <span\n          key={index}\n          className={`letter ${getLetterStatus(letter, index)}`}\n        >\n          {letter}\n        </span>\n      ))}\n    </div>\n  );\n};\n\nexport default Row;",
                  "solvedContent": null
                },
                {
                  "name": "Row.css",
                  "codeLanguage": "css",
                  "content": ".word-row {\n  display: flex;\n  justify-content: center;\n  margin: 5px;\n}\n\n.letter {\n  width: 40px;\n  height: 40px;\n  display: inline-flex;\n  justify-content: center;\n  align-items: center;\n  margin: 2px;\n  color: white;\n  font-weight: bold;\n  font-size: 1.2em;\n}\n\n.letter.correct {\n  background-color: green;\n}\n\n.letter.present {\n  background-color: gold;\n}\n\n.letter.absent {\n  background-color: lightgray;\n}",
                  "solvedContent": null
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Lesson #3 - Copy",
            "id": 135290,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Natürlich müssen wir dem Spieler mitteilen, ob das Spiel vorbei ist.\n\n1. Füge eine neue Konstante `maxAttempts` hinzu und setze ihren Wert auf `6`, um dem Spieler sechs Versuche zu erlauben.\n2. Erstelle eine weitere Zustandsvariable `isGameOver` mit einem anfänglichen Wert von `false`.\n3. Initialisiere die Zustandsvariable `guesses` mit einem leeren Array anstelle der drei Wörter, die wir zuvor hinzugefügt haben.\n4. Bestimme am Ende von `handleGuess`, ob das Spiel vorbei ist, indem du überprüfst, ob `currentGuess` mit dem Zielwort übereinstimmt oder ob die maximale Anzahl von Versuchen erreicht ist.\n5. Verwende bedingtes Rendering, um die `input`- und `button`-Elemente auszublenden, wenn das Spiel vorbei ist.",
              "preselectedFileIndex": 2,
              "hasVisualOutput": true,
              "files": [
                {
                  "name": "index.jsx",
                  "codeLanguage": "jsx",
                  "content": "import React from \"react\";\nimport { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\n\nconst container = document.getElementById(\"root\");\nconst root = createRoot(container);\nroot.render(<App />);",
                  "solvedContent": null
                },
                {
                  "name": "index.html",
                  "codeLanguage": "html",
                  "content": "<!doctype html>\n<html>\n<head>\n  <script type=\"module\" src=\"./index.js\"></script>\n  <link rel=\"stylesheet\" href=\"./index.css\" />\n  <title>Wordle</title>\n</head>\n<body>\n  <div id=\"root\">loading</div>\n</body>\n</html>",
                  "solvedContent": null
                },
                {
                  "name": "App.jsx",
                  "codeLanguage": "jsx",
                  "content": "import React, { useState } from \"react\";\nimport \"./App.css\";\nimport Row from \"./Row\";\n\nconst App = () => {\n  const targetWord = \"REACT\";\n\n  const [guesses, setGuesses] = useState([\"PARTY\", \"DRAFT\", \"REACT\"]);\n  const [currentGuess, setCurrentGuess] = useState(\"\");\n\n  const handleInputChange = (event) => {\n    setCurrentGuess(event.target.value.toUpperCase());\n  };\n\n  const handleGuess = () => {\n    if (currentGuess.length !== 5) {\n      return;\n    }\n\n    const updatedGuesses = [...guesses, currentGuess];\n    setGuesses(updatedGuesses);\n  };\n\n  return (\n    <div className=\"main-container\">\n      <h1>Wordle</h1>\n      {guesses.map((guess, index) => (\n        <Row key={index} guess={guess} targetWord={targetWord} />\n      ))}\n      <input\n        onChange={handleInputChange}\n        maxLength={targetWord.length}\n        placeholder=\"Enter your guess\"\n      />\n      <button onClick={handleGuess}>Guess</button>\n    </div>\n  );\n};\n\nexport default App;",
                  "solvedContent": "import React, { useState } from \"react\";\nimport \"./App.css\";\nimport Row from \"./Row\";\n\nconst App = () => {\n  const targetWord = \"REACT\";\n  const maxAttempts = 6;\n\n  const [guesses, setGuesses] = useState([]);\n  const [currentGuess, setCurrentGuess] = useState(\"\");\n  const [isGameOver, setIsGameOver] = useState(false);\n\n  const handleInputChange = (event) => {\n    setCurrentGuess(event.target.value.toUpperCase());\n  };\n\n  const handleGuess = () => {\n    if (currentGuess.length !== 5) {\n      return;\n    }\n\n    const updatedGuesses = [...guesses, currentGuess];\n    setGuesses(updatedGuesses);\n\n    if (currentGuess === targetWord || updatedGuesses.length >= maxAttempts) {\n      setIsGameOver(true);\n    }\n  };\n\n  return (\n    <div className=\"main-container\">\n      <h1>Wordle</h1>\n      {guesses.map((guess, index) => (\n        <Row key={index} guess={guess} targetWord={targetWord} />\n      ))}\n      {!isGameOver && (\n        <>\n          <input\n            onChange={handleInputChange}\n            maxLength={targetWord.length}\n            placeholder=\"Enter your guess\"\n          />\n          <button onClick={handleGuess}>Guess</button>\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default App;\n"
                },
                {
                  "name": "App.css",
                  "codeLanguage": "css",
                  "content": "body {\n  margin: 0;\n  font-family: Arial, sans-serif;\n  height: 100vh;\n  background: linear-gradient(135deg, #f3e7e9, #e3eeff);\n}\n\n.main-container {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n}",
                  "solvedContent": null
                },
                {
                  "name": "Row.jsx",
                  "codeLanguage": "jsx",
                  "content": "import React from \"react\";\nimport \"./Row.css\"\n\nconst Row = ({ guess, targetWord }) => {\n  const getLetterStatus = (letter, index) => {\n    if (letter === targetWord[index]) {\n      return \"correct\";\n    } else if (targetWord.includes(letter)) {\n      return \"present\";\n    } else {\n      return \"absent\";\n    }\n  };\n\n  return (\n    <div className=\"word-row\">\n      {guess.split(\"\").map((letter, index) => (\n        <span\n          key={index}\n          className={`letter ${getLetterStatus(letter, index)}`}\n        >\n          {letter}\n        </span>\n      ))}\n    </div>\n  );\n};\n\nexport default Row;",
                  "solvedContent": null
                },
                {
                  "name": "Row.css",
                  "codeLanguage": "css",
                  "content": ".word-row {\n  display: flex;\n  justify-content: center;\n  margin: 5px;\n}\n\n.letter {\n  width: 40px;\n  height: 40px;\n  display: inline-flex;\n  justify-content: center;\n  align-items: center;\n  margin: 2px;\n  color: white;\n  font-weight: bold;\n  font-size: 1.2em;\n}\n\n.letter.correct {\n  background-color: green;\n}\n\n.letter.present {\n  background-color: gold;\n}\n\n.letter.absent {\n  background-color: lightgray;\n}",
                  "solvedContent": null
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Lesson #4",
            "id": 135286,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Jetzt, da die Ratefunktionalität vorhanden ist, lass uns den Spielende-Zustand verwalten, indem wir Feedback geben, wenn das Spiel endet und der Spieler nicht richtig geraten hat.\n\n1. Am Ende der Rückgabeanweisung der Komponente, nach dem Button, füge eine Bedingung hinzu, die überprüft, ob `isGameOver` wahr ist und `currentGuess` nicht gleich `targetWord` ist. Dann rendere ein `p`-Element, das eine Nachricht anzeigt, um dem Spieler zu sagen, was das Wort war.",
              "preselectedFileIndex": 2,
              "hasVisualOutput": true,
              "files": [
                {
                  "name": "index.jsx",
                  "codeLanguage": "jsx",
                  "content": "import React from \"react\";\nimport { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\n\nconst container = document.getElementById(\"root\");\nconst root = createRoot(container);\nroot.render(<App />);",
                  "solvedContent": null
                },
                {
                  "name": "index.html",
                  "codeLanguage": "html",
                  "content": "<!doctype html>\n<html>\n<head>\n  <script type=\"module\" src=\"./index.js\"></script>\n  <link rel=\"stylesheet\" href=\"./index.css\" />\n  <title>Wordle</title>\n</head>\n<body>\n  <div id=\"root\">loading</div>\n</body>\n</html>",
                  "solvedContent": null
                },
                {
                  "name": "App.jsx",
                  "codeLanguage": "jsx",
                  "content": "import React, { useState } from \"react\";\nimport \"./App.css\";\nimport Row from \"./Row\";\n\nconst App = () => {\n  const targetWord = \"REACT\";\n  const maxAttempts = 6;\n\n  const [guesses, setGuesses] = useState([]);\n  const [currentGuess, setCurrentGuess] = useState(\"\");\n  const [isGameOver, setIsGameOver] = useState(false);\n\n  const handleInputChange = (event) => {\n    setCurrentGuess(event.target.value.toUpperCase());\n  };\n\n  const handleGuess = () => {\n    if (currentGuess.length !== 5) {\n      return;\n    }\n\n    const updatedGuesses = [...guesses, currentGuess];\n    setGuesses(updatedGuesses);\n\n    if (currentGuess === targetWord || updatedGuesses.length >= maxAttempts) {\n      setIsGameOver(true);\n    }\n  };\n\n  return (\n    <div className=\"main-container\">\n      <h1>Wordle</h1>\n      {guesses.map((guess, index) => (\n        <Row key={index} guess={guess} targetWord={targetWord} />\n      ))}\n      {!isGameOver && (\n        <>\n          <input\n            onChange={handleInputChange}\n            maxLength={targetWord.length}\n            placeholder=\"Enter your guess\"\n          />\n          <button onClick={handleGuess}>Guess</button>\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default App;\n",
                  "solvedContent": "import React, { useState } from \"react\";\nimport \"./App.css\";\nimport Row from \"./Row\";\n\nconst App = () => {\n  const targetWord = \"REACT\";\n  const maxAttempts = 6;\n\n  const [guesses, setGuesses] = useState([]);\n  const [currentGuess, setCurrentGuess] = useState(\"\");\n  const [isGameOver, setIsGameOver] = useState(false);\n\n  const handleInputChange = (event) => {\n    setCurrentGuess(event.target.value.toUpperCase());\n  };\n\n  const handleGuess = () => {\n    if (currentGuess.length !== 5) {\n      return;\n    }\n\n    const updatedGuesses = [...guesses, currentGuess];\n    setGuesses(updatedGuesses);\n\n    if (currentGuess === targetWord || updatedGuesses.length >= maxAttempts) {\n      setIsGameOver(true);\n    }\n  };\n\n  return (\n    <div className=\"main-container\">\n      <h1>Wordle</h1>\n      {guesses.map((guess, index) => (\n        <Row key={index} guess={guess} targetWord={targetWord} />\n      ))}\n      {!isGameOver && (\n        <>\n          <input\n            onChange={handleInputChange}\n            maxLength={targetWord.length}\n            placeholder=\"Enter your guess\"\n          />\n          <button onClick={handleGuess}>Guess</button>\n        </>\n      )}\n      {isGameOver && currentGuess !== targetWord && (\n        <p>{`Game over! The word was: ${targetWord}`}</p>\n      )}\n    </div>\n  );\n};\n\nexport default App;\n"
                },
                {
                  "name": "App.css",
                  "codeLanguage": "css",
                  "content": "body {\n  margin: 0;\n  font-family: Arial, sans-serif;\n  height: 100vh;\n  background: linear-gradient(135deg, #f3e7e9, #e3eeff);\n}\n\n.main-container {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n}",
                  "solvedContent": null
                },
                {
                  "name": "Row.jsx",
                  "codeLanguage": "jsx",
                  "content": "import React from \"react\";\nimport \"./Row.css\"\n\nconst Row = ({ guess, targetWord }) => {\n  const getLetterStatus = (letter, index) => {\n    if (letter === targetWord[index]) {\n      return \"correct\";\n    } else if (targetWord.includes(letter)) {\n      return \"present\";\n    } else {\n      return \"absent\";\n    }\n  };\n\n  return (\n    <div className=\"word-row\">\n      {guess.split(\"\").map((letter, index) => (\n        <span\n          key={index}\n          className={`letter ${getLetterStatus(letter, index)}`}\n        >\n          {letter}\n        </span>\n      ))}\n    </div>\n  );\n};\n\nexport default Row;",
                  "solvedContent": null
                },
                {
                  "name": "Row.css",
                  "codeLanguage": "css",
                  "content": ".word-row {\n  display: flex;\n  justify-content: center;\n  margin: 5px;\n}\n\n.letter {\n  width: 40px;\n  height: 40px;\n  display: inline-flex;\n  justify-content: center;\n  align-items: center;\n  margin: 2px;\n  color: white;\n  font-weight: bold;\n  font-size: 1.2em;\n}\n\n.letter.correct {\n  background-color: green;\n}\n\n.letter.present {\n  background-color: gold;\n}\n\n.letter.absent {\n  background-color: lightgray;\n}",
                  "solvedContent": null
                }
              ],
              "hints": []
            }
          }
        ]
      }
    ]
  }
}