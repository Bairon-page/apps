{
  "tutorial": {
    "id": 1785,
    "version": 9,
    "type": "guidedProjectOptional",
    "isNew": false,
    "codeLanguage": "javascript",
    "title": "Smartphone-Display",
    "descriptionContent": "Verwende dein Wissen über Klassen und Unterklassen, um eine Kontaktfunktion für ein Spiel hinzuzufügen.",
    "shortDescriptionContent": "",
    "showInTrack": true,
    "iconBanner": "tutorial-1785-icon-banner.svg",
    "chapters": [
      {
        "id": 11784,
        "title": "Smartphone-Display",
        "type": "practiceLevel3",
        "lessons": [
          {
            "title": "Create a class",
            "id": 108505,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Alex entwickelt ein Lebenssimulationsspiel und möchte eine Telefonkommunikationsfunktion einführen. Wir werden ihr helfen, indem wir ein virtuelles Telefon und ein Smartphone einführen, damit die Charaktere aus der Ferne kommunizieren können.\n\nLass uns damit beginnen, eine Telefonklasse für die Telefonkommunikationsfunktion des Spiels zu erstellen.\n\n1. Erstelle eine Klasse namens `Phone`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "",
                  "solvedContent": "class Phone {}"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Add method to a class",
            "id": 108506,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Jetzt lass uns eine Methode erstellen, damit wir Anrufe mit unserem `Phone` tätigen können.\n\n1. Erstelle eine `call()`-Methode in der `Phone`-Klasse aus der vorherigen Übung.\n2. Gib ihr einen Parameter namens `user`.\n2. Füge innerhalb der `call()`-Methode eine Zeile hinzu, die den `user` anzeigt, den wir anrufen. Die resultierende Anzeige könnte für den Benutzer `Mom` so aussehen:\n\n```\nCalling: Mom\n```",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "class Phone {}",
                  "solvedContent": "class Phone {\n  call(user) {\n    console.log(\"Calling: \" + user);\n  }\n}"
                }
              ],
              "hints": [
                {
                  "title": "Hint",
                  "content": "1. The syntax for creating a method is:\n\n```JS\nmethodName(parameter) {\n}\n```"
                }
              ]
            }
          },
          {
            "title": "Smartphone",
            "id": 108513,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Das Schlüsselwort `extends` wird verwendet, um eine Klasse zu erstellen, die ein Kind oder eine direkte Untermenge einer anderen Klasse ist.\n\nSmartphones können alles tun, was Telefone tun, daher kannst du dir Smartphones als Untermenge eines Telefons vorstellen.\n\nLass uns eine `Smartphone`-Klasse erstellen.\n\n1. Erstelle eine Klasse `Smartphone`, die `Phone` erweitert.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "class Phone {\n  call(user) {\n    console.log(\"Calling: \" + user);\n  }\n}",
                  "solvedContent": "class Phone {\n  call(user) {\n    console.log(\"Calling: \" + user);\n  }\n}\nclass Smartphone extends Phone {}"
                }
              ],
              "hints": [
                {
                  "title": "Hint",
                  "content": "1. The syntax for creating an extended class is:\n```JS\nclass className extends extendedClass {\n}\n```"
                }
              ]
            }
          },
          {
            "title": "Video call",
            "id": 108514,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Die `Smartphone`-Klasse erbt automatisch die mit `Phone` verbundenen Methoden.\n\nDu kannst jedoch weiterhin zusätzliche Methoden in einem Teilbereich einer Klasse erstellen, zum Beispiel um Videoanrufe zu tätigen.\n\n1. Erstelle eine Methode `videoCall`, um Videoanrufe zu tätigen.\n2. Gib ihr den Parameter `user`.\n2. Füge eine Zeile hinzu, die den Namen des Benutzers anzeigt, den der Charakter per Videoanruf anruft. Die resultierende Anzeige könnte für den Benutzer `Mom` so aussehen:\n\n```\nFacetiming: Mom\n```",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "class Phone {\n  call(user) {\n    console.log(\"Calling: \" + user);\n  }\n}\nclass Smartphone extends Phone {}",
                  "solvedContent": "class Phone {\n  call(user) {\n    console.log(\"Calling: \" + user);\n  }\n}\nclass Smartphone extends Phone {\n  videoCall(user) {\n    console.log(\"Facetiming: \" + user);\n  }\n}"
                }
              ],
              "hints": [
                {
                  "title": "Hint",
                  "content": "1. The syntax for creating a method is:\n```JS\nmethodName(parameter) {\n}\n```"
                }
              ]
            }
          },
          {
            "title": "New device",
            "id": 108516,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Brandon ist ein neuer Charakter in unserem Spiel. Lass uns ihn mit einem Smartphone ausstatten.\n\n1. Erstelle ein neues Objekt aus der `Smartphone`-Klasse und speichere es in einer Variablen namens `device`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "class Phone {\n  call(user) {\n    console.log(\"Calling: \" + user);\n  }\n}\nclass Smartphone extends Phone {\n  videoCall(user) {\n    console.log(\"Facetiming: \" + user);\n  }\n}",
                  "solvedContent": "class Phone {\n  call(user) {\n    console.log(\"Calling: \" + user);\n  }\n}\nclass Smartphone extends Phone {\n  videoCall(user) {\n    console.log(\"Facetiming: \" + user);\n  }\n}\nconst device = new Smartphone();"
                }
              ],
              "hints": [
                {
                  "title": "Hint",
                  "content": "1. The syntax for creating an instance of a class is:\n```JS\nconst variableName = new className();\n```"
                }
              ]
            }
          },
          {
            "title": "Inherited method",
            "id": 108517,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Brandon muss seine Mutter anrufen.\n\n1. Verwende die Methode, die `device` von der `Phone`-Klasse geerbt hat, um `\"Mom\"` zu erreichen.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "class Phone {\n  call(user) {\n    console.log(\"Calling: \" + user);\n  }\n}\nclass Smartphone extends Phone {\n  videoCall(user) {\n    console.log(\"Facetiming: \" + user);\n  }\n}\nconst device = new Smartphone();",
                  "solvedContent": "class Phone {\n  call(user) {\n    console.log(\"Calling: \" + user);\n  }\n}\nclass Smartphone extends Phone {\n  videoCall(user) {\n    console.log(\"Facetiming: \" + user);\n  }\n}\nconst device = new Smartphone();\ndevice.call(\"Mom\");"
                }
              ],
              "hints": [
                {
                  "title": "Hint",
                  "content": "The inherited method is `call()`."
                }
              ]
            }
          },
          {
            "title": "Specific method",
            "id": 108518,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Brandon und seine Mutter haben sich eine Weile nicht gesehen, also beschließen sie, auf einen Videoanruf umzusteigen. Allerdings geht der Akku des Telefons seiner Mutter zur Neige, also sagte sie Brandon, er solle den Videoanruf stattdessen an seinen Vater richten.\n\n1. Verwende die Methode `videoCall()` von der Variable `device` mit dem Argument `\"Dad\"`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "class Phone {\n  call(user) {\n    console.log(\"Calling: \" + user);\n  }\n}\nclass Smartphone extends Phone {\n  videoCall(user) {\n    console.log(\"Facetiming: \" + user);\n  }\n}\nconst device = new Smartphone();\ndevice.call(\"Mom\");",
                  "solvedContent": "class Phone {\n  call(user) {\n    console.log(\"Calling: \" + user);\n  }\n}\nclass Smartphone extends Phone {\n  videoCall(user) {\n    console.log(\"Facetiming: \" + user);\n  }\n}\nconst device = new Smartphone();\ndevice.call(\"Mom\");\ndevice.videoCall(\"Dad\");"
                }
              ],
              "hints": []
            }
          }
        ]
      }
    ]
  }
}