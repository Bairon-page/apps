{
  "tutorial": {
    "id": 2647,
    "version": 4,
    "type": "guidedProjectOptional",
    "isNew": false,
    "codeLanguage": "node",
    "title": "Taschenrechner",
    "descriptionContent": "Verwende Node.JS und Express, um einen Taschenrechner zu erstellen",
    "shortDescriptionContent": "",
    "showInTrack": true,
    "iconBanner": "tutorial-2647-icon-banner.svg",
    "chapters": [
      {
        "id": 14610,
        "title": "Kapitel #1",
        "type": "practiceLevel3",
        "lessons": [
          {
            "title": "Lesson #1",
            "id": 129327,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "In diesem Projekt werden wir einen einfachen Calculator-Server mit Express.js erstellen.\n\nLass uns damit beginnen, unseren Express-Server einzurichten. Wir werden noch keine nützliche Antwort zurückbekommen. Sei nicht überrascht.\n\n1. Deklariere eine Variable `express` und require das `express` Modul.\n2. Deklariere eine Variable `app` und initialisiere sie, indem du die `express` Funktion aufrufst.\n3. Deklariere eine Variable `port` und weise ihr den Wert `3000` zu.\n4. Verwende die `listen` Funktion auf `app`, um die App auf dem Port, der durch die Variable `port` angegeben ist, lauschen zu lassen.\n5. Logge eine Nachricht in die Konsole innerhalb des Callbacks der `listen` Funktion, damit wir wissen, dass unser Server ordnungsgemäß läuft.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "app.js",
                  "codeLanguage": "javascript",
                  "content": "",
                  "solvedContent": "const express = require('express');\nconst app = express();\nconst port = 3000;\n\napp.listen(port, () => {\n  console.log(`Calculator server running on port ${port}`);\n});"
                }
              ],
              "hints": [],
              "httpOptions": {
                "method": "GET",
                "path": "/",
                "body": null
              }
            }
          },
          {
            "title": "Lesson #2",
            "id": 129329,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Jetzt erstellen wir Routen für unseren Taschenrechner.\n\nWir beginnen mit der Additionsroute. Diese Route wird zwei Zahlen addieren, die als Query-Parameter übergeben werden.\n\n1. Lass uns Express helfen, den Body unserer Anfrage zu parsen, indem wir `app.use(express.json());` hinzufügen, bevor wir die erste Route codieren.\n2. Erstelle einen Routen-Handler für eine `POST`-Anfrage an `/add`. Hole in der Callback-Funktion die `a` und `b` Query-Parameter aus `req.body`.\n3. Berechne das Ergebnis der Addition von `a` und `b`. Stelle sicher, dass du sie zuerst mit `parseFloat` in Zahlen umwandelst.\n4. Antworte mit einem JSON-Objekt, das einen `\"result\"`-Schlüssel enthält, der das Ergebnis als Wert hält.\n5. Setze den Statuscode auf `200`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "app.js",
                  "codeLanguage": "javascript",
                  "content": "const express = require('express');\nconst app = express();\nconst port = 3000;\n\napp.listen(port, () => {\n  console.log(`Calculator server running on port ${port}`);\n});",
                  "solvedContent": "const express = require('express');\nconst app = express();\nconst port = 3000;\n\napp.listen(port, () => {\n  console.log(`Calculator server running on port ${port}`);\n});\n\napp.use(express.json());\n\napp.post('/add', (req, res) => {\n  const { a, b } = req.body;\n  const result = parseFloat(a) + parseFloat(b);\n  res.status(200).json({ result: result });\n});"
                }
              ],
              "hints": [],
              "httpOptions": {
                "method": "POST",
                "path": "/add",
                "body": "{\"a\": 1, \"b\": 2}"
              }
            }
          },
          {
            "title": "Lesson #3",
            "id": 129330,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Großartige Arbeit! Jetzt machen wir dasselbe für die Subtraktion.\n\n1. Erstelle einen Route-Handler für `POST`-Anfragen an `/subtract`. Verwende die gleichen Schritte wie bei der Additionsroute, aber ziehe diesmal `b` von `a` ab.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "app.js",
                  "codeLanguage": "javascript",
                  "content": "const express = require('express');\nconst app = express();\nconst port = 3000;\n\napp.listen(port, () => {\n  console.log(`Calculator server running on port ${port}`);\n});\n\napp.use(express.json());\n\napp.post('/add', (req, res) => {\n  const { a, b } = req.body;\n  const result = parseFloat(a) + parseFloat(b);\n  res.status(200).json({ result: result });\n});",
                  "solvedContent": "const express = require('express');\nconst app = express();\nconst port = 3000;\n\napp.listen(port, () => {\n  console.log(`Calculator server running on port ${port}`);\n});\n\napp.use(express.json());\n\napp.post('/add', (req, res) => {\n  const { a, b } = req.body;\n  const result = parseFloat(a) + parseFloat(b);\n  res.status(200).json({ result: result });\n});\n\napp.post('/subtract', (req, res) => {\n  const { a, b } = req.body;\n  const result = parseFloat(a) - parseFloat(b);\n  res.status(200).json({ result: result });\n});"
                }
              ],
              "hints": [],
              "httpOptions": {
                "method": "POST",
                "path": "/subtract",
                "body": "{\"a\": 10, \"b\": 19}"
              }
            }
          },
          {
            "title": "Lesson #4",
            "id": 129331,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Als nächstes erstellen wir eine Multiplikationsroute.\n\n1. Erstelle einen Routen-Handler für `POST` Anfragen an `/multiply`.\n2. Hole im Callback die Werte für `a` und `b` aus `req.body`.\n3. Multipliziere `a` und `b`, um das Ergebnis zu erhalten.\n4. Gib das Ergebnis zurück, wie du es in den anderen Routen gemacht hast.\n5. Und vergiss nicht, den Statuscode auf `200` zu setzen.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "app.js",
                  "codeLanguage": "javascript",
                  "content": "const express = require('express');\nconst app = express();\nconst port = 3000;\n\napp.listen(port, () => {\n  console.log(`Calculator server running on port ${port}`);\n});\n\napp.use(express.json());\n\napp.post('/add', (req, res) => {\n  const { a, b } = req.body;\n  const result = parseFloat(a) + parseFloat(b);\n  res.status(200).json({ result: result });\n});\n\napp.post('/subtract', (req, res) => {\n  const { a, b } = req.body;\n  const result = parseFloat(a) - parseFloat(b);\n  res.status(200).json({ result: result });\n});",
                  "solvedContent": "const express = require('express');\nconst app = express();\nconst port = 3000;\n\napp.listen(port, () => {\n  console.log(`Calculator server running on port ${port}`);\n});\n\napp.use(express.json());\n\napp.post('/add', (req, res) => {\n  const { a, b } = req.body;\n  const result = parseFloat(a) + parseFloat(b);\n  res.status(200).json({ result: result });\n});\n\napp.post('/subtract', (req, res) => {\n  const { a, b } = req.body;\n  const result = parseFloat(a) - parseFloat(b);\n  res.status(200).json({ result: result });\n});\n\napp.post('/multiply', (req, res) => {\n  const { a, b } = req.body;\n  const result = parseFloat(a) * parseFloat(b);\n  res.status(200).json({ result: result });\n});"
                }
              ],
              "hints": [],
              "httpOptions": {
                "method": "POST",
                "path": "/multiply",
                "body": "{\"a\": -1, \"b\": -5}"
              }
            }
          },
          {
            "title": "Lesson #5",
            "id": 129332,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Schließlich lass uns eine Division-Route erstellen. Allerdings müssen wir bei der Division vorsichtig sein, da wir nicht durch null teilen können.\n\n1. Erstelle einen Route-Handler für `POST`-Anfragen an `/divide`.\n2. Hole im Callback die Werte für `a` und `b` aus `req.body`.\n3. Überprüfe, ob `b` null ist. Wenn ja, antworte mit einem 400-Statuscode und einem JSON-Objekt, das eine Fehlermeldung enthält.\n4. Wenn `b` nicht null ist, teile `a` durch `b`, um das Ergebnis zu erhalten, und antworte mit einem JSON-Objekt, das das Ergebnis enthält. Hierbei möchten wir den Statuscode auf `200` setzen.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "app.js",
                  "codeLanguage": "javascript",
                  "content": "const express = require('express');\nconst app = express();\nconst port = 3000;\n\napp.listen(port, () => {\n  console.log(`Calculator server running on port ${port}`);\n});\n\napp.use(express.json());\n\napp.post('/add', (req, res) => {\n  const { a, b } = req.body;\n  const result = parseFloat(a) + parseFloat(b);\n  res.status(200).json({ result: result });\n});\n\napp.post('/subtract', (req, res) => {\n  const { a, b } = req.body;\n  const result = parseFloat(a) - parseFloat(b);\n  res.status(200).json({ result: result });\n});\n\napp.post('/multiply', (req, res) => {\n  const { a, b } = req.body;\n  const result = parseFloat(a) * parseFloat(b);\n  res.status(200).json({ result: result });\n});",
                  "solvedContent": "const express = require('express');\nconst app = express();\nconst port = 3000;\n\napp.listen(port, () => {\n  console.log(`Calculator server running on port ${port}`);\n});\n\napp.use(express.json());\n\napp.post('/add', (req, res) => {\n  const { a, b } = req.body;\n  const result = parseFloat(a) + parseFloat(b);\n  res.status(200).json({ result: result });\n});\n\napp.post('/subtract', (req, res) => {\n  const { a, b } = req.body;\n  const result = parseFloat(a) - parseFloat(b);\n  res.status(200).json({ result: result });\n});\n\napp.post('/multiply', (req, res) => {\n  const { a, b } = req.body;\n  const result = parseFloat(a) * parseFloat(b);\n  res.status(200).json({ result: result });\n});\n\napp.post('/divide', (req, res) => {\n  const { a, b } = req.body;\n  if (parseFloat(b) === 0) {\n    res.status(400).json({ error: 'Division by zero is not allowed' });\n  } else {\n    const result = parseFloat(a) / parseFloat(b);\n    res.status(200).json({ result: result });\n  }\n});"
                }
              ],
              "hints": [],
              "httpOptions": {
                "method": "POST",
                "path": "/divide",
                "body": "{\"a\": 10, \"b\": 5}"
              }
            }
          }
        ]
      }
    ]
  }
}