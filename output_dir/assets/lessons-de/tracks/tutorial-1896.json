{
  "tutorial": {
    "id": 1896,
    "version": 12,
    "type": "course",
    "isNew": false,
    "codeLanguage": "javascript",
    "title": "ES6-Variablen und Gültigkeitsbereich",
    "descriptionContent": "Verwende verschiedene Methoden, um Variablen zu erstellen und den Gültigkeitsbereich zu verstehen.",
    "shortDescriptionContent": "",
    "showInTrack": true,
    "iconBanner": null,
    "chapters": [
      {
        "id": 12383,
        "title": "Var-Variablen",
        "type": "practiceLevel1",
        "lessons": [
          {
            "title": "Intro",
            "id": 112202,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Bis jetzt haben wir viel über JavaScript gelernt, eine Technologie, die sich ständig weiterentwickelt.</p><p>Im Jahr 2015 gab es eine große JS-Revision namens ECMAScript 2015 (ES6). Sie brachte neue Funktionen mit sich, wie die beiden Variablen, die du bereits kennst.</p></body></html>"
          },
          {
            "title": "Var",
            "id": 112208,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Aber bevor wir <code>let</code> und <code>const</code> verwendeten, haben wir Variablen mit dem Schlüsselwort <code>var</code> deklariert, das für <code>\"variable\"</code> steht.<br /></p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"var\" class=\"keyword\" /><text value=\" color = \" /><text value=\"&quot;red&quot;\" class=\"string\" /><text value=\";\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"0\" endIndex=\"3\" /></options></interaction></interactions></code><p visible-if=\"wrong\">Wähle <code>var</code> aus.</p></body></html>"
          },
          {
            "title": "Let and Const",
            "id": 112211,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>ES6 führte <code>let</code> und <code>const</code> Variablen ein, um die Einschränkungen von <code>var</code> zu überwinden. Daher solltest du immer versuchen, <code>let</code> und <code>const</code> zu verwenden.</p><p>Gib die drei verschiedenen Arten von Variablen in der Konsole in der Reihenfolge aus, in der wir sie deklariert haben, um zu sehen, dass sie gleich funktionieren.</p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"var\" class=\"keyword\" /><text value=\" fullName = \" /><text value=\"&quot;Emma Watson&quot;\" class=\"string\" /><text value=\";\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" occupation = \" /><text value=\"&quot;Activist&quot;\" class=\"string\" /><text value=\";\" /><text type=\"break\" /><text value=\"let\" class=\"keyword\" /><text value=\" age = \" /><text value=\"30\" class=\"number\" /><text value=\";\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(fullName);\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(occupation);\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(age);\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"87\" endIndex=\"95\" /><option startIndex=\"110\" endIndex=\"120\" /><option startIndex=\"135\" endIndex=\"138\" /></options></interaction></interactions><output><content><text value=\"Emma Watson\" /><text type=\"break\" /><text value=\"Activist\" /><text type=\"break\" /><text value=\"30\" /></content></output></code><p visible-if=\"wrong\">Wähle <code>fullName</code>, gefolgt von <code>occupation</code> und schließlich <code>age</code> aus.</p></body></html>"
          },
          {
            "title": "Let, const and var similarities",
            "id": 112212,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Wir verwenden <code>var</code>, <code>let</code> und <code>const</code> Variablen, um Daten zu speichern, und sie folgen denselben Namensregeln, die wir bereits gelernt haben.</p><p>Wähle die passenden Namen für die Variablen.</p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"var\" class=\"keyword\" /><text value=\" number = \" /><text value=\"20\" class=\"number\" /><text value=\";\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" player1 = \" /><text value=\"'Sonic'\" class=\"string\" /><text value=\";\" /><text type=\"break\" /><text value=\"let\" class=\"keyword\" /><text value=\" badWeather = \" /><text value=\"&quot;rainy&quot;\" class=\"string\" /><text value=\";\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(number);\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(player1);\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(badWeather);\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"4\" endIndex=\"10\" /><option startIndex=\"23\" endIndex=\"30\" /><option startIndex=\"46\" endIndex=\"56\" /></options></interaction></interactions><output><content><text value=\"20\" /><text type=\"break\" /><text value=\"Sonic\" /><text type=\"break\" /><text value=\"rainy\" /></content></output></code><p visible-if=\"wrong\">Wähle <code>number</code>, gefolgt von <code>player1</code> und schließlich <code>badWeather</code> aus.</p></body></html>"
          },
          {
            "title": "Redeclaring var",
            "id": 112209,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Abgesehen von der Benennung verhalten sich diese Variablen ganz unterschiedlich. Zum Beispiel kann <code>var</code> mehrmals deklariert werden, während <code>let</code> und <code>const</code> das nicht können.</p><p>Wenn wir <code>surname</code> in der Konsole anzeigen, sehen wir nur den letzten Wert, den wir der Variable zugewiesen haben.</p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"var\" class=\"keyword\" /><text value=\" surname = \" /><text value=\"&quot;Smit&quot;\" class=\"string\" /><text value=\";\" /><text type=\"break\" /><text value=\"var\" class=\"keyword\" /><text value=\" surname = \" /><text value=\"&quot;Smith&quot;\" class=\"string\" /><text value=\";\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(surname);\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"57\" endIndex=\"64\" /><option correct=\"false\"><content><text value=\"firstName\" /></content></option></options></interaction></interactions><output><content><text value=\"Smith\" /></content></output></code><p visible-if=\"wrong\">Wähle <code>surname</code> aus.</p></body></html>"
          },
          {
            "title": "Redeclaring const",
            "id": 112213,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Wir können <code>let</code> und <code>const</code> nur einmal deklarieren. Wenn wir versuchen, diese Variablen erneut zu deklarieren, erhalten wir einen Syntaxfehler in der Konsole.</p><p>Zeige <code>color</code> in der Konsole an, um den Fehler zu sehen.</p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" color = \" /><text value=\"&quot;Brow&quot;\" class=\"string\" /><text value=\";\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" color = \" /><text value=\"&quot;Brown&quot;\" class=\"string\" /><text value=\";\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(color);\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"57\" endIndex=\"62\" /></options></interaction></interactions><output><content><text value=\"SyntaxError: Identifier 'color' has already been declared\" /><text type=\"break\" /><text value=\" \" /></content></output></code><p visible-if=\"wrong\">Wähle <code>color</code> aus.</p></body></html>"
          },
          {
            "title": "Redeclaring let",
            "id": 112214,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Das Gleiche passiert mit einer <code>let</code>-Variable wie <code>movie</code>. Wir können eine <code>let</code>-Variable nicht mehrfach deklarieren.</p><p>Was wird die Konsole anzeigen?</p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"let\" class=\"keyword\" /><text value=\" movie = \" /><text value=\"&quot;The Huner Games&quot;\" class=\"string\" /><text value=\";\" /><text type=\"break\" /><text value=\"let\" class=\"keyword\" /><text value=\" movie = \" /><text value=\"&quot;The Hunger Games&quot;\" class=\"string\" /><text value=\";\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(movie);\" /></content><output><content><text value=\"Uncaught SyntaxError: Identifier 'movie' has already been declared\" /></content></output></code><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\"><code>Uncaught SyntaxError: Identifier 'movie' has already been declared</code></item><item value=\"2\" correct=\"false\"><code>The Huner Games</code></item><item value=\"3\" correct=\"false\"><code>The Hunger Games</code></item></selection><p visible-if=\"wrong\"><code>Uncaught SyntaxError: Identifier 'movie' has already been declared</code>.</p></body></html>"
          },
          {
            "title": "Final explanation",
            "id": 112265,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Variablen mit <code>let</code> und <code>const</code> zu deklarieren, ist entscheidend, um viele andere Codefehler zu vermeiden, daher sollten wir sie als unsere erste Option verwenden.</p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" canDance = \" /><text value=\"true\" class=\"literal\" /><text value=\";\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" canDance = \" /><text value=\"false\" class=\"literal\" /><text value=\";\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(canDance);\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"59\" endIndex=\"67\" /></options></interaction></interactions><output><content><text value=\"SyntaxError: Identifier 'canDance' has already been declared\" /></content></output></code><p visible-if=\"wrong\">Wähle <code>canDance</code> aus.</p></body></html>"
          },
          {
            "title": "Question 1",
            "id": 112210,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Wahr oder falsch? <code>var</code> ist das einzige reservierte Wort zum Erstellen von Variablen.</p><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\">Falsch</item><item value=\"2\" correct=\"false\">Wahr</item></selection><p visible-if=\"wrong\">Wähle Falsch aus.</p></body></html>"
          },
          {
            "title": "Question 2",
            "id": 112216,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Was können wir in den drei Arten von Variablen speichern?</p><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\">Wir können alle Arten von Daten in den drei Variablentypen speichern</item><item value=\"2\" correct=\"false\">Wir können nur Objekte in <code>let</code> und <code>const</code> und Zahlen in <code>var</code> speichern</item></selection><p visible-if=\"wrong\">Wir können alle Arten von Daten in den drei Variablentypen speichern.</p></body></html>"
          },
          {
            "title": "Question 3",
            "id": 112217,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Welchen Variablentyp können wir neu deklarieren?</p><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\"><code>var</code></item><item value=\"2\" correct=\"false\"><code>const</code></item><item value=\"3\" correct=\"false\"><code>let</code></item></selection><p visible-if=\"wrong\">Wähle <code>var</code> aus.</p></body></html>"
          },
          {
            "title": "Question 4",
            "id": 112224,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Wofür steht ES6?</p><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\">ECMAScript 2015</item><item value=\"2\" correct=\"false\">JavaScript 2015</item><item value=\"3\" correct=\"false\">TypeScript 2015</item></selection><p visible-if=\"wrong\">ECMAScript 2015.</p></body></html>"
          },
          {
            "title": "Example 2",
            "id": 112219,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Erstelle eine neue <code>tree</code>-Variable mit <code>let</code>.</p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"let\" class=\"keyword\" /><text value=\" tree = \" /><text value=\"&quot;Crespon&quot;\" class=\"string\" /><text value=\";\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(tree);\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"0\" endIndex=\"3\" /><option startIndex=\"4\" endIndex=\"8\" /><option startIndex=\"9\" endIndex=\"10\" /><option startIndex=\"11\" endIndex=\"20\" /></options></interaction></interactions><output><content><text value=\"Crespon\" /></content></output></code><p visible-if=\"wrong\">Wähle <code>let</code>, gefolgt von <code>tree</code> und schließlich <code>=</code>, <code>\"Crespon\"</code> aus.</p></body></html>"
          },
          {
            "title": "Example 3",
            "id": 112220,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Ordne die Zeilen so, dass zuerst die <code>year</code>-Variable deklariert, dann aktualisiert und schließlich in der Konsole angezeigt wird.</p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"let\" class=\"keyword\" /><text value=\" year = \" /><text value=\"2021\" class=\"number\" /><text value=\";\" /><text type=\"break\" /><text value=\"year = \" /><text value=\"2022\" class=\"number\" /><text value=\";\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(year);\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"0\" endIndex=\"16\" /><option startIndex=\"17\" endIndex=\"29\" /></options></interaction></interactions><output><content><text value=\"2022\" /></content></output></code><p visible-if=\"wrong\">Wähle <code>let year = 2021;</code>, gefolgt von <code>year = 2022;</code> aus.</p></body></html>"
          },
          {
            "title": "Example 4",
            "id": 112267,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Deklariere die Variable <code>forest</code> mit dem Variablentyp <code>const</code>.</p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"let\" class=\"keyword\" /><text value=\" river = \" /><text value=\"&quot;Thames&quot;\" class=\"string\" /><text value=\";\" /><text type=\"break\" /><text value=\"var\" class=\"keyword\" /><text value=\" mountain = \" /><text value=\"&quot;Everest&quot;\" class=\"string\" /><text value=\";\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" forest = \" /><text value=\"&quot;Sequoia National Forest&quot;\" class=\"string\" /><text value=\";\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(forest);\" /></content><interactions><interaction type=\"validatedInput\" isDefault=\"true\" startIndex=\"48\" endIndex=\"53\" /></interactions><output><content><text value=\"Sequoia National Forest\" /></content></output></code><p visible-if=\"wrong\">Gib <code>const</code> ein.</p></body></html>"
          }
        ]
      },
      {
        "id": 12389,
        "title": "Variablen aktualisieren und Fehler",
        "type": "practiceLevel1",
        "lessons": [
          {
            "title": "Intro",
            "id": 112215,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Wir kennen bereits die drei Arten von Variablen <code>let</code>, <code>const</code> und <code>var</code>.</p><p>Lass uns mehr über die Unterschiede zwischen ihnen lernen, um zu verstehen, warum sie in verschiedenen Situationen verwendet werden.</p></body></html>"
          },
          {
            "title": "Updating variables",
            "id": 112229,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Wir können <code>let</code> oder <code>var</code> Variablen mit dem Zuweisungsoperator <code>=</code> aktualisieren. Aber wir können <code>const</code> Variablen nicht ändern. <code>const</code> ist die Abkürzung für \"Konstante\".</p><p>\"Pi\" ist eine mathematische Zahl, die sich nicht ändert. Wenn wir sie in einem <code>const</code> speichern und versuchen, sie zu ändern, welchen Fehler werden wir erhalten?</p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" piNumber = \" /><text value=\"3.1416\" class=\"number\" /><text value=\";\" /><text type=\"break\" /><text value=\"piNumber = \" /><text value=\"90\" class=\"number\" /><text value=\";\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(piNumber);\" /></content><output><content><text value=\"TypeError: Assignment to constant variable.\" /></content></output></code><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\"><code>TypeError: Assignment to constant variable</code></item><item value=\"2\" correct=\"false\"><code>ReferenceError: piNumber is not defined</code></item></selection><p visible-if=\"wrong\"><code>TypeError: Assignment to constant variable</code>.</p></body></html>"
          },
          {
            "title": "Updating const - Arrays",
            "id": 112232,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Wir können ein ganzes Array, das in einer <code>const</code>-Variable gespeichert ist, nicht ändern. Wir können jedoch Array-Methoden verwenden, um seinen Inhalt zu <em>aktualisieren</em>.</p><p>Verwende die richtige Array-Methode, um das <code>newPresent</code> in die <code>wardrobe</code> aufzunehmen.</p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" newPresent = \" /><text value=\"&quot;Trousers&quot;\" class=\"string\" /><text value=\";\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" wardrobe = [\" /><text value=\"&quot;Shirt&quot;\" class=\"string\" /><text value=\"];\" /><text type=\"break\" /><text value=\"wardrobe.push(newPresent);\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(wardrobe);\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"59\" endIndex=\"67\" /><option startIndex=\"67\" endIndex=\"68\" /><option startIndex=\"68\" endIndex=\"72\" /></options></interaction></interactions><output><content><text value=\"[ 'Shirt', 'Trousers' ]\" /></content></output></code><p visible-if=\"wrong\">Wähle <code>wardrobe</code>, gefolgt von <code>.</code> und schließlich <code>push</code> aus.</p></body></html>"
          },
          {
            "title": "Updating const - Object properties",
            "id": 112296,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Ebenso können wir ein ganzes Objekt, das in einer Konstante gespeichert ist, nicht ändern, aber wir können seine Eigenschaften <em>aktualisieren</em>.</p><p>Was wird die Ausgabe von <code>myClothes.shirts</code> sein?</p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" myClothes = {\" /><text type=\"break\" /><text value=\" \" /><text value=\"shirts\" class=\"attr\" /><text value=\": \" /><text value=\"1\" class=\"number\" /><text value=\",\" /><text type=\"break\" /><text value=\"};\" /><text type=\"break\" /><text value=\"myClothes.shirts++;\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(myClothes.shirts);\" /></content><output><content><text value=\"2\" /></content></output></code><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\">2</item><item value=\"2\" correct=\"false\">1</item></selection><p visible-if=\"wrong\">Wähle 2 aus.</p></body></html>"
          },
          {
            "title": "Var Hoisting",
            "id": 112275,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Ein weiterer Unterschied zwischen den drei Arten von Variablen ist, dass wir Daten in einer <code>var</code>-Variable speichern können, bevor wir sie überhaupt deklarieren.</p><p>Dieser Prozess wird \"Hoisting\" genannt. Beachte, dass <strong>dies keine gute Praxis ist</strong>.</p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"zodiacSign = \" /><text value=\"&quot;Aries&quot;\" class=\"string\" /><text value=\";\" /><text type=\"break\" /><text value=\"var\" class=\"keyword\" /><text value=\" zodiacSign;\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(zodiacSign);\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"22\" endIndex=\"25\" /></options></interaction></interactions><output><content><text value=\"Aries\" /></content></output></code><p visible-if=\"wrong\">Wähle <code>var</code> aus.</p></body></html>"
          },
          {
            "title": "let and const not hoisting",
            "id": 112274,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p><code>let</code> und <code>const</code> verhindern Hoisting, weil wir diese Variablen immer deklarieren müssen, bevor wir Daten in ihnen speichern.</p><p>Wir werden einen Initialisierungsfehler in der Konsole sehen, wenn wir einer <code>const</code> oder <code>let</code> Variable einen Wert zuweisen, bevor wir sie deklariert haben.</p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"car = \" /><text value=\"&quot;Renault&quot;\" class=\"string\" /><text value=\";\" /><text type=\"break\" /><text value=\"let\" class=\"keyword\" /><text value=\" car;\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(car);\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"17\" endIndex=\"20\" /><option startIndex=\"21\" endIndex=\"24\" /></options></interaction></interactions><output><content><text value=\"ReferenceError: Cannot access 'car' before initialization\" /></content></output></code><p visible-if=\"wrong\">Wähle <code>let</code>, gefolgt von <code>car</code> aus.</p></body></html>"
          },
          {
            "title": "Question 1",
            "id": 112331,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Welchen Variablentyp würdest du für geeignet halten, um Eulers Zahl zu speichern, die immer 2.71828 ist?</p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" eulerNumber = \" /><text value=\"2.71828\" class=\"number\" /><text value=\";\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(eulerNumber);\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"0\" endIndex=\"5\" /><option correct=\"false\"><content><text value=\"var\" /></content></option><option correct=\"false\"><content><text value=\"let\" /></content></option></options></interaction></interactions><output><content><text value=\"2.71828\" /></content></output></code><p visible-if=\"wrong\">Wähle <code>const</code> aus.</p></body></html>"
          },
          {
            "title": "Question 2",
            "id": 112332,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Was wird die Konsole anzeigen?</p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" placeOfBirth = \" /><text value=\"&quot;Tokyo&quot;\" class=\"string\" /><text value=\";\" /><text type=\"break\" /><text value=\"placeOfBirth = \" /><text value=\"&quot;Asunción&quot;\" class=\"string\" /><text value=\";\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(placeOfBirth);\" /></content><output><content><text value=\"TypeError: Assignment to constant variable.\" /></content></output></code><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\"><code>TypeError: Assignment to constant variable</code></item><item value=\"2\" correct=\"false\"><code>TypeError: Assignment to let variable</code></item><item value=\"3\" correct=\"false\">Asunción</item></selection><p visible-if=\"wrong\"><code>TypeError: Assignment to constant variable</code>.</p></body></html>"
          },
          {
            "title": "Question 3",
            "id": 112333,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Können wir eine <em>Eigenschaft</em> eines Objekts aktualisieren, das in einer <code>const</code> Variablen gespeichert ist?</p><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\">Ja, du kannst die Eigenschaften eines Objekts ändern, das in einer <code>const</code>-Variable gespeichert ist</item><item value=\"2\" correct=\"false\">Nein</item></selection><p visible-if=\"wrong\">Ja, du kannst die Eigenschaften eines Objekts ändern, das in einer <code>const</code>-Variable gespeichert ist.</p></body></html>"
          },
          {
            "title": "Question 4",
            "id": 112334,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Was wird die Konsole anzeigen?</p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"artist = \" /><text value=\"&quot;Frida Kahlo&quot;\" class=\"string\" /><text value=\";\" /><text type=\"break\" /><text value=\"let\" class=\"keyword\" /><text value=\" artist;\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(artist);\" /></content><output><content><text value=\"ReferenceError: Cannot access 'artist' before initialization\" /></content></output></code><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"false\"><code>TypeError: Assignment to constant variable</code></item><item value=\"2\" correct=\"true\"><code>ReferenceError: Cannot access 'artist' before initialization</code></item></selection><p visible-if=\"wrong\"><code>ReferenceError: Cannot access 'artist' before initialization</code>.</p></body></html>"
          },
          {
            "title": "Example 1",
            "id": 112335,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Ordne die Codezeilen, um Hoisting zu vermeiden.</p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"var\" class=\"keyword\" /><text value=\" lotteryNumbers;\" /><text type=\"break\" /><text value=\"lotteryNumbers = [\" /><text value=\"20\" class=\"number\" /><text value=\", \" /><text value=\"34\" class=\"number\" /><text value=\", \" /><text value=\"645\" class=\"number\" /><text value=\", \" /><text value=\"01\" class=\"number\" /><text value=\"];\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(lotteryNumbers);\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"0\" endIndex=\"19\" /><option startIndex=\"20\" endIndex=\"55\" /></options></interaction></interactions><output><content><text value=\"[ 20, 34, 645, 1 ]\" /></content></output></code><p visible-if=\"wrong\">Wähle <code>var lotteryNumbers;</code>, gefolgt von <code>lotteryNumbers = [20, 34, 645, 01];</code> aus.</p></body></html>"
          },
          {
            "title": "Example 2",
            "id": 112336,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Vervollständige den Code, sodass der Wert der Variable nicht aktualisiert werden kann.</p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" capitalOfZambia = \" /><text value=\"&quot;Lusaka&quot;\" class=\"string\" /><text value=\";\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(capitalOfZambia);\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"0\" endIndex=\"5\" /><option correct=\"false\"><content><text value=\"var\" /></content></option></options></interaction></interactions><output><content><text value=\"Lusaka\" /></content></output></code><p visible-if=\"wrong\">Wähle <code>const</code> aus.</p></body></html>"
          },
          {
            "title": "Example 3",
            "id": 112337,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Code eine Variable, die <em>keinen</em> Fehler verursacht.</p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"asleep = \" /><text value=\"true\" class=\"literal\" /><text value=\";\" /><text type=\"break\" /><text value=\"var\" class=\"keyword\" /><text value=\" asleep;\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(asleep);\" /></content><interactions><interaction type=\"validatedInput\" isDefault=\"true\" startIndex=\"15\" endIndex=\"18\" /></interactions><output><content><text value=\"true\" /></content></output></code><p visible-if=\"wrong\">Gib <code>var</code> ein.</p></body></html>"
          }
        ]
      },
      {
        "id": 12384,
        "title": "Gültigkeitsbereich",
        "type": "practiceLevel1",
        "lessons": [
          {
            "title": "Intro",
            "id": 112203,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Jetzt, da wir mit den drei Arten von Variablen vertraut sind, lass uns das Konzept des \"Scope\" lernen.</p><p>\"Scope\" ist ein Begriff, der verwendet wird, um anzuzeigen, wo Variablen verfügbar sind. Es gibt Teile unseres Codes, auf die wir keinen Zugriff haben.</p></body></html>"
          },
          {
            "title": "Local Scope",
            "id": 112339,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p><strong>Lokaler</strong> oder <strong>Funktions</strong>-Scope bezieht sich auf den Teil des Codes innerhalb einer Funktion.</p><p>Hier ist <code>country</code> eine lokale Variable, auf die wir nur innerhalb der <code>visitCountry</code>-Funktion zugreifen können.</p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"function\" class=\"keyword\" /><text value=\" \" /><text value=\"visitCountry\" class=\"title\" /><text value=\"(\" /><text value=\"\" class=\"params\" /><text value=\") \" /><text value=\"{\" /><text type=\"break\" /><text value=\" \" /><text value=\"const\" class=\"keyword\" /><text value=\" country = \" /><text value=\"&quot;Argentina&quot;\" class=\"string\" /><text value=\";\" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(country);\" /><text type=\"break\" /><text value=\"}\" /><text type=\"break\" /><text value=\"visitCountry();\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"27\" endIndex=\"32\" /><option startIndex=\"44\" endIndex=\"55\" /><option startIndex=\"33\" endIndex=\"40\" /></options></interaction></interactions><output><content><text value=\"Argentina\" /></content></output></code><p visible-if=\"wrong\">Wähle <code>const</code>, gefolgt von <code>country</code> und schließlich <code>Argentina\";</code> aus.</p></body></html>"
          },
          {
            "title": "Local Scope 2",
            "id": 112299,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Der Versuch, auf eine lokale Variable von außerhalb der Funktion zuzugreifen, führt zu einem Fehler.</p><p>Hier ist <code>myDiary</code> privat, daher können wir von außerhalb der Funktion nicht darauf zugreifen. Lass uns versuchen zu sehen, was angezeigt wird.</p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"function\" class=\"keyword\" /><text value=\" \" /><text value=\"readDiary\" class=\"title\" /><text value=\"(\" /><text value=\"\" class=\"params\" /><text value=\") \" /><text value=\"{\" /><text type=\"break\" /><text value=\" \" /><text value=\"const\" class=\"keyword\" /><text value=\" myDiary = \" /><text value=\"&quot;Dear diary, today...&quot;\" class=\"string\" /><text value=\";\" /><text type=\"break\" /><text value=\"}\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(myDiary);\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"78\" endIndex=\"85\" /><option correct=\"false\"><content><text value=\"myDiary()\" /></content></option></options></interaction></interactions><output><content><text value=\"ReferenceError: myDiary is not defined\" /></content></output></code><p visible-if=\"wrong\">Wähle <code>myDiary</code> aus.</p></body></html>"
          },
          {
            "title": "Global Scope",
            "id": 112298,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Der Raum außerhalb einer Funktion wird als <strong>globaler Geltungsbereich</strong> bezeichnet. Du kannst es dir als den Code zwischen den Funktionen vorstellen.</p><p>Wenn wir <code>cityToVisit</code> im globalen Scope deklarieren, können wir von überall im Code darauf zugreifen, einschließlich innerhalb der <code>travel</code>-Funktion.</p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"let\" class=\"keyword\" /><text value=\" cityToVisit = \" /><text value=\"&quot;Salzburg&quot;\" class=\"string\" /><text value=\";\" /><text type=\"break\" /><text type=\"break\" /><text value=\"function\" class=\"keyword\" /><text value=\" \" /><text value=\"travel\" class=\"title\" /><text value=\"(\" /><text value=\"\" class=\"params\" /><text value=\") \" /><text value=\"{\" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;Let's go to &quot;\" class=\"string\" /><text value=\" + cityToVisit);\" /><text type=\"break\" /><text value=\"}\" /><text type=\"break\" /><text value=\"travel();\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(cityToVisit);\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"81\" endIndex=\"92\" /><option startIndex=\"119\" endIndex=\"130\" /></options></interaction></interactions><output><content><text value=\"Let's go to Salzburg\" /><text type=\"break\" /><text value=\"Salzburg\" /></content></output></code><p visible-if=\"wrong\">Wähle <code>cityToVisit</code>, gefolgt von <code>cityToVisit</code> aus.</p></body></html>"
          },
          {
            "title": "Block scope",
            "id": 112301,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Der letzte Gültigkeitsbereichstyp wird <strong>Block Scope</strong> genannt. Es ist der Teil unseres Codes zwischen den geschweiften Klammern ( <code>{}</code> ), die zu Schleifen oder Bedingungen gehören.</p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"if\" class=\"keyword\" /><text value=\" (\" /><text value=\"10\" class=\"number\" /><text value=\" === \" /><text value=\"10\" class=\"number\" /><text value=\") {\" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;This space here is block scope&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\"}\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"15\" endIndex=\"16\" /><option startIndex=\"65\" endIndex=\"66\" /></options></interaction></interactions><output><content><text value=\"This space here is block scope\" /></content></output></code><p visible-if=\"wrong\">Wähle <code>{</code>, gefolgt von <code>}</code> aus.</p></body></html>"
          },
          {
            "title": "Block scope - var",
            "id": 112302,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Wir können auf eine innerhalb eines Blocks deklarierte <code>var</code> von außerhalb zugreifen, was zu Verwirrung führen kann, wenn wir sie mehr als einmal deklarieren.<br /></p><p>Hier deklarieren wir die <code>access</code>-Variable zweimal. Was wird die Ausgabe sein?</p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"var\" class=\"keyword\" /><text value=\" age = \" /><text value=\"18\" class=\"number\" /><text value=\";\" /><text type=\"break\" /><text value=\"var\" class=\"keyword\" /><text value=\" access = \" /><text value=\"true\" class=\"literal\" /><text value=\";\" /><text type=\"break\" /><text value=\"if\" class=\"keyword\" /><text value=\" (age === \" /><text value=\"18\" class=\"number\" /><text value=\") {\" /><text type=\"break\" /><text value=\" \" /><text value=\"var\" class=\"keyword\" /><text value=\" access = \" /><text value=\"false\" class=\"literal\" /><text value=\";\" /><text type=\"break\" /><text value=\"}\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(access);\" /></content><output><content><text value=\"false\" /></content></output></code><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\">false</item><item value=\"2\" correct=\"false\">wahr</item></selection><p visible-if=\"wrong\">Wähle false aus.</p></body></html>"
          },
          {
            "title": "Block scope - let, const",
            "id": 112303,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Wenn wir <code>let</code> und <code>const</code> in einem Blockscope deklarieren, können wir nur in diesem Codeblock auf sie zugreifen.</p><p>Hier gibt es zwei <code>canDrive</code> Variablen, eine im globalen Scope und die andere in einem Block-Scope. Was wird in der Konsole angezeigt?</p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" drivingAge = \" /><text value=\"18\" class=\"number\" /><text value=\";\" /><text type=\"break\" /><text value=\"let\" class=\"keyword\" /><text value=\" canDrive = \" /><text value=\"false\" class=\"literal\" /><text value=\";\" /><text type=\"break\" /><text value=\"if\" class=\"keyword\" /><text value=\" (drivingAge === \" /><text value=\"18\" class=\"number\" /><text value=\") {\" /><text type=\"break\" /><text value=\" \" /><text value=\"let\" class=\"keyword\" /><text value=\" canDrive = \" /><text value=\"true\" class=\"literal\" /><text value=\";\" /><text type=\"break\" /><text value=\"}\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(canDrive);\" /></content><output><content><text value=\"false\" /></content></output></code><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\">Die globale Variable</item><item value=\"2\" correct=\"false\">Die Blockvariable</item></selection><p visible-if=\"wrong\">Die globale Variable.</p></body></html>"
          },
          {
            "title": "Block scope - for",
            "id": 112304,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Block Scope ist auch nützlich, um zu begrenzen, wo wir bestimmte Variablen verwenden. Es ist wirklich hilfreich, um unerwünschte Nebeneffekte oder Fehler zu verhindern.</p><p>Hier können wir die <code>index</code>-Variable nur in der Schleife verwenden. Nachdem die Schleife beendet ist, ist <code>index</code> nicht mehr verfügbar.</p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"for\" class=\"keyword\" /><text value=\" (\" /><text value=\"let\" class=\"keyword\" /><text value=\" index = \" /><text value=\"1\" class=\"number\" /><text value=\"; index &lt;= \" /><text value=\"3\" class=\"number\" /><text value=\"; index++) {\" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;Let's count to three&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\"}\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(index);\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"95\" endIndex=\"100\" /></options></interaction></interactions><output><content><text value=\"Let's count to three\" /><text type=\"break\" /><text value=\"Let's count to three\" /><text type=\"break\" /><text value=\"Let's count to three\" /><text type=\"break\" /><text value=\"Uncaught ReferenceError: index is not defined\" /></content></output></code><p visible-if=\"wrong\">Wähle <code>index</code> aus.</p></body></html>"
          },
          {
            "title": "Question 1",
            "id": 112341,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Wie nennt man den Gültigkeitsbereich innerhalb einer Funktion?</p><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\">Lokaler oder Funktions-Scope</item><item value=\"2\" correct=\"false\">Globaler Scope</item></selection><p visible-if=\"wrong\">Lokaler oder Funktions-Scope.</p></body></html>"
          },
          {
            "title": "Question 2",
            "id": 112342,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Was ist der Gültigkeitsbereich der <code>dog</code>-Variable?</p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"function\" class=\"keyword\" /><text value=\" \" /><text value=\"annoyDog\" class=\"title\" /><text value=\"(\" /><text value=\"\" class=\"params\" /><text value=\") \" /><text value=\"{\" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;This cat doesn't like &quot;\" class=\"string\" /><text value=\" + dog.name + \" /><text value=\"&quot; the dog.&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\"}\" /><text type=\"break\" /><text value=\"var\" class=\"keyword\" /><text value=\" dog = {\" /><text type=\"break\" /><text value=\" \" /><text value=\"name\" class=\"attr\" /><text value=\": \" /><text value=\"&quot;Ryan&quot;\" class=\"string\" /><text value=\",\" /><text type=\"break\" /><text value=\" \" /><text value=\"eat\" class=\"attr\" /><text value=\": \" /><text value=\"&quot;dog food&quot;\" class=\"string\" /><text value=\",\" /><text type=\"break\" /><text value=\" \" /><text value=\"likes\" class=\"attr\" /><text value=\": [\" /><text value=\"&quot;ball&quot;\" class=\"string\" /><text value=\"]\" /><text type=\"break\" /><text value=\"};\" /><text type=\"break\" /><text value=\"annoyDog();\" /></content><output><content><text value=\"This cat doesn't like Ryan the dog.\" /></content></output></code><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\">Globaler Scope</item><item value=\"2\" correct=\"false\">Lokaler Geltungsbereich</item><item value=\"3\" correct=\"false\">Blockbereich</item></selection><p visible-if=\"wrong\">Globaler Scope.</p></body></html>"
          },
          {
            "title": "Question 3",
            "id": 112343,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Blockbereich ist der Teil des Codes zwischen welchen Symbolen?</p><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\"><code>{ }</code></item><item value=\"2\" correct=\"false\"><code>[ ]</code></item></selection><p visible-if=\"wrong\"><code>{ }</code>.</p></body></html>"
          },
          {
            "title": "Question 4",
            "id": 112344,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Können wir auf eine <code>var</code>-Variable, die innerhalb eines Blockbereichs deklariert wurde, von außen zugreifen?</p><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\">Ja</item><item value=\"2\" correct=\"false\">Nein</item></selection><p visible-if=\"wrong\">Wähle Ja aus.</p></body></html>"
          },
          {
            "title": "Example 1",
            "id": 112300,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Hier ist <code>neighborhood</code> eine globale Variable, aber <code>BATH</code> ist eine lokale, also was wird die Konsole anzeigen?</p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"let\" class=\"keyword\" /><text value=\" neighborhood = {\" /><text type=\"break\" /><text value=\" \" /><text value=\"apartments\" class=\"attr\" /><text value=\": \" /><text value=\"13\" class=\"number\" /><text value=\",\" /><text type=\"break\" /><text value=\" \" /><text value=\"garden\" class=\"attr\" /><text value=\": \" /><text value=\"1\" class=\"number\" /><text type=\"break\" /><text value=\"};\" /><text type=\"break\" /><text type=\"break\" /><text value=\"function\" class=\"keyword\" /><text value=\" \" /><text value=\"fixMyHouse\" class=\"title\" /><text value=\"(\" /><text value=\"\" class=\"params\" /><text value=\") \" /><text value=\"{\" /><text type=\"break\" /><text value=\" \" /><text value=\"const\" class=\"keyword\" /><text value=\" BATH = \" /><text value=\"&quot;Fix Mirror&quot;\" class=\"string\" /><text value=\";\" /><text type=\"break\" /><text value=\"}\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(BATH);\" /></content><output><content><text value=\"ReferenceError: BATH is not defined\" /></content></output></code><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\">ein ReferenceError</item><item value=\"2\" correct=\"false\">\"Spiegel reparieren\"</item></selection><p visible-if=\"wrong\">ein ReferenceError.</p></body></html>"
          },
          {
            "title": "Example 2",
            "id": 112345,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Erstelle eine globale <code>const</code> Variable und eine blockweite <code>let</code> Variable.</p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" STUDY = \" /><text value=\"true\" class=\"literal\" /><text value=\";\" /><text type=\"break\" /><text value=\"if\" class=\"keyword\" /><text value=\" (STUDY) {\" /><text type=\"break\" /><text value=\" \" /><text value=\"let\" class=\"keyword\" /><text value=\" pass = \" /><text value=\"'You have passed the exam!'\" class=\"string\" /><text value=\";\" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(pass);\" /><text type=\"break\" /><text value=\"} \" /><text value=\"else\" class=\"keyword\" /><text value=\" {\" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;You have failed&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\"}\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"0\" endIndex=\"5\" /><option startIndex=\"34\" endIndex=\"37\" /></options></interaction></interactions><output><content><text value=\"You have passed the exam!\" /></content></output></code><p visible-if=\"wrong\">Wähle <code>const</code>, gefolgt von <code>let</code> aus.</p></body></html>"
          },
          {
            "title": "Example 3",
            "id": 112340,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Welcher Fehlertyp wird in der Konsole angezeigt?</p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"for\" class=\"keyword\" /><text value=\" (\" /><text value=\"let\" class=\"keyword\" /><text value=\" index = \" /><text value=\"1\" class=\"number\" /><text value=\"; index &lt;= \" /><text value=\"3\" class=\"number\" /><text value=\"; index++) {\" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(index);\" /><text type=\"break\" /><text value=\"}\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(index);\" /></content><output><content><text value=\"ReferenceError: index is not defined\" /></content></output></code><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\">ReferenceError</item><item value=\"2\" correct=\"false\">SyntaxError</item></selection><p visible-if=\"wrong\">Wähle ReferenceError aus.</p></body></html>"
          },
          {
            "title": "Example 4",
            "id": 112346,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Was ist der Gültigkeitsbereich der <code>availableBand</code>-Variable?</p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"function\" class=\"keyword\" /><text value=\" \" /><text value=\"playMusic\" class=\"title\" /><text value=\"(\" /><text value=\"\" class=\"params\" /><text value=\") \" /><text value=\"{\" /><text type=\"break\" /><text value=\" \" /><text value=\"const\" class=\"keyword\" /><text value=\" band = [\" /><text value=\"&quot;Tina&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;Michael&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;Rue&quot;\" class=\"string\" /><text value=\"];\" /><text type=\"break\" /><text value=\" \" /><text value=\"if\" class=\"keyword\" /><text value=\" (band &amp;&amp; band.length) {\" /><text type=\"break\" /><text value=\"  \" /><text value=\"const\" class=\"keyword\" /><text value=\" availableBand = \" /><text value=\"&quot;Band is Available!&quot;\" class=\"string\" /><text value=\";\" /><text type=\"break\" /><text value=\"  \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(availableBand);\" /><text type=\"break\" /><text value=\" }\" /><text type=\"break\" /><text value=\"}\" /><text type=\"break\" /><text value=\"playMusic();\" /></content><output><content><text value=\"Band is Available!\" /></content></output></code><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\">Blockbereich</item><item value=\"3\" correct=\"false\">Globaler Scope</item></selection><p visible-if=\"wrong\">Wähle Blockbereich aus.</p></body></html>"
          }
        ]
      }
    ]
  }
}