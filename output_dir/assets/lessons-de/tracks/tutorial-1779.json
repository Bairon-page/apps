{
  "tutorial": {
    "id": 1779,
    "version": 10,
    "type": "guidedProjectOptional",
    "isNew": false,
    "codeLanguage": "javascript",
    "title": "Nochmal streamen",
    "descriptionContent": "Verwende Objekte und Objektmethoden, um eine Streaming-Plattform nachzuahmen.",
    "shortDescriptionContent": "",
    "showInTrack": true,
    "iconBanner": "tutorial-1779-icon-banner.svg",
    "chapters": [
      {
        "id": 11743,
        "title": "Nochmal streamen",
        "type": "practiceLevel3",
        "lessons": [
          {
            "title": "Starter code",
            "id": 107846,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Unser Streaming-Dienst produziert seine eigene Show. Lass uns einige Methoden hinzufügen, um das Streaming zu starten und die `\"views\"` zu erhöhen.\n\nWir haben bereits etwas Code hinzugefügt, um dir den Einstieg zu erleichtern.\n\nWir haben ein Objekt namens `show` mit zwei Eigenschaften definiert: `name` und `views`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const show = {\r\n  name: \"Pick and Shorty\",\r\n  views: 10\r\n};",
                  "solvedContent": null
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Play it",
            "id": 107579,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Zuerst werden wir eine Methode erstellen.\n\n1. Gib dem Objekt `show` eine Methode namens `play`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const show = {\r\n  name: \"Pick and Shorty\",\r\n  views: 10\r\n};",
                  "solvedContent": "const show = {\r\n  name: \"Pick and Shorty\",\r\n  views: 10,\r\n  play: function() {}\r\n};"
                }
              ],
              "hints": [
                {
                  "title": "Hint",
                  "content": "Use `play: function ( ) { }` to create a method in `show` object. \nRemember to add a comma after `views`, before the method."
                }
              ]
            }
          },
          {
            "title": "Getting properties with \"this\"",
            "id": 107575,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Lass uns auch den Namen der Show innerhalb der Funktion einfügen.\n\n1. Erstelle ein `const showName` innerhalb der `play` Methode und setze es gleich der `name` Eigenschaft des Objekts.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const show = {\n name: \"Pick and Shorty\",\n views: 10,\n play : function () {\n\n }\n};",
                  "solvedContent": "const show = {\n name: \"Pick and Shorty\",\n views: 10,\n play : function () {\n  const showName = this.name;\n }\n};"
                }
              ],
              "hints": [
                {
                  "title": "Hint",
                  "content": "Use `this` keyword to refer to the show's name inside an object."
                }
              ]
            }
          },
          {
            "title": "Displaying properties",
            "id": 107580,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Jetzt, da wir den Namen der Show in der Funktion haben, lass ihn uns in der Konsole anzeigen.\n\n1. Innerhalb der `play`-Methode, gib den Satz `\"Now Playing \"` gefolgt vom Wert der Variablen `showName` aus.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const show = {\n  name: \"Pick and Shorty\",\n  views: 10,\n  play: function() {\n    const showName = this.name;\n  }\n};",
                  "solvedContent": "const show = {\n  name: \"Pick and Shorty\",\n  views: 10,\n  play: function() {\n    const showName = this.name;\n    console.log(\"Now Playing \" + showName);\n  }\n};"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Calling a method",
            "id": 107569,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Jetzt, da unsere Methode festgelegt ist, lass uns die Methode aufrufen und die Show abspielen.\n\n1. Rufe die `play`-Methode des `show`-Objekts unterhalb des Objekts auf.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const show = {\n  name: \"Pick and Shorty\",\n  views: 10,\n  play: function() {\n    const showName = this.name;\n    console.log(\"Now Playing \" + showName);\n  }\n};",
                  "solvedContent": "const show = {\n  name: \"Pick and Shorty\",\n  views: 10,\n  play: function() {\n    const showName = this.name;\n    console.log(\"Now Playing \" + showName);\n  }\n};\nshow.play();"
                }
              ],
              "hints": [
                {
                  "title": "Hint",
                  "content": "To call a method, the syntax is : `objectName.methodName()`."
                }
              ]
            }
          },
          {
            "title": "Add views",
            "id": 107581,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Aber nur spielen reicht nicht. Wir müssen auch Views hinzufügen!\n\n1. Gib dem `show` Objekt eine zweite Methode namens `addViews`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const show = {\n  name: \"Pick and Shorty\",\n  views: 10,\n  play: function() {\n    const showName = this.name;\n    console.log(\"Now Playing \" + showName);\n  }\n};\nshow.play();",
                  "solvedContent": "const show = {\n  name: \"Pick and Shorty\",\n  views: 10,\n  play: function() {\n    const showName = this.name;\n    console.log(\"Now Playing \" + showName);\n  },\n  addViews: function() {}\n};\nshow.play();"
                }
              ],
              "hints": [
                {
                  "title": "Hint",
                  "content": "To create a method, the syntax is : `methodName : function ( ) { }`. \nRemember to add a comma `,` before the new method."
                }
              ]
            }
          },
          {
            "title": "Adding a parameter",
            "id": 107577,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Als nächstes fügen wir der Methode `addViews` einen Parameter hinzu. Dieser Parameter wird die Anzahl der Views übergeben.\n\n1. Ändere die Methode `addViews` so, dass sie einen Parameter `numberViews` annimmt.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const show = {\n  name: \"Pick and Shorty\",\n  views: 10,\n  play: function() {\n    const showName = this.name;\n    console.log(\"Now Playing \" + showName);\n  },\n  addViews: function() {}\n};\nshow.play();",
                  "solvedContent": "const show = {\n  name: \"Pick and Shorty\",\n  views: 10,\n  play: function() {\n    const showName = this.name;\n    console.log(\"Now Playing \" + showName);\n  },\n  addViews: function(numberViews) {}\n};\nshow.play();"
                }
              ],
              "hints": [
                {
                  "title": "Hint",
                  "content": "Specify parameters inside the parentheses after the `function` keyword. "
                }
              ]
            }
          },
          {
            "title": "Updating properties with \"this\"",
            "id": 107567,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Der Wert, der als `numberViews` übergeben wird, sollte zur `views`-Eigenschaft addiert werden.\n\n1. Innerhalb der `addViews`-Methode, verwende Selbstzuweisung, um den Wert der `views`-Eigenschaft um die `numberViews` zu erhöhen.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const show = {\n  name: \"Pick and Shorty\",\n  views: 10,\n  play: function() {\n    const showName = this.name;\n    console.log(\"Now Playing \" + showName);\n  },\n  addViews: function(numberViews) {}\n};\nshow.play();",
                  "solvedContent": "const show = {\n  name: \"Pick and Shorty\",\n  views: 10,\n  play: function() {\n    const showName = this.name;\n    console.log(\"Now Playing \" + showName);\n  },\n  addViews: function(numberViews) {\n    this.views = this.views + numberViews;\n  }\n};\nshow.play();"
                }
              ],
              "hints": [
                {
                  "title": "Hint",
                  "content": "Access an object's property using `this`, like `this.views`."
                }
              ]
            }
          },
          {
            "title": "Calling a method",
            "id": 107570,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Nachdem wir die Show abgespielt haben, sollte sich die Anzahl der `views` um `1` erhöhen.\n\n1. Füge eine Zeile nach `show.play();` hinzu, um `addViews` aufzurufen und `1` als Argument zu übergeben.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const show = {\n  name: \"Pick and Shorty\",\n  views: 10,\n  play: function() {\n    const showName = this.name;\n    console.log(\"Now Playing \" + showName);\n  },\n  addViews: function(numberViews) {\n    this.views = this.views + numberViews;\n  }\n};\nshow.play();",
                  "solvedContent": "const show = {\n  name: \"Pick and Shorty\",\n  views: 10,\n  play: function() {\n    const showName = this.name;\n    console.log(\"Now Playing \" + showName);\n  },\n  addViews: function(numberViews) {\n    this.views = this.views + numberViews;\n  }\n};\nshow.play();\nshow.addViews(1);"
                }
              ],
              "hints": [
                {
                  "title": "Hint",
                  "content": "To pass a value while calling a method, the syntax is : `objectName.methodName(value1, value2...)`."
                }
              ]
            }
          },
          {
            "title": "Returning a value",
            "id": 107578,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Wir werden auch die Gesamtanzahl der Ansichten zurückgeben.\n\n1. Füge eine Zeile hinzu, um `this.views` am Ende von `addViews` zurückzugeben.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const show = {\n  name: \"Pick and Shorty\",\n  views: 10,\n  play: function() {\n    const showName = this.name;\n    console.log(\"Now Playing \" + showName);\n  },\n  addViews: function(numberViews) {\n    this.views = this.views + numberViews;\n  }\n};\nshow.play();\nshow.addViews(1);",
                  "solvedContent": "const show = {\n  name: \"Pick and Shorty\",\n  views: 10,\n  play: function() {\n    const showName = this.name;\n    console.log(\"Now Playing \" + showName);\n  },\n  addViews: function(numberViews) {\n    this.views = this.views + numberViews;\n    return this.views;\n  }\n};\nshow.play();\nshow.addViews(1);"
                }
              ],
              "hints": [
                {
                  "title": "Hint",
                  "content": "Use the `return` keyword to return values. "
                }
              ]
            }
          },
          {
            "title": "Displaying return value",
            "id": 107572,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Lass uns überprüfen, ob `addViews` so funktioniert, wie wir es erwarten.\n\n1. Bearbeite den Code und setze `show.addViews(1)` in eine `console.log()`-Anweisung, um den zurückgegebenen Wert anzuzeigen.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const show = {\n  name: \"Pick and Shorty\",\n  views: 10,\n  play: function() {\n    const showName = this.name;\n    console.log(\"Now Playing \" + showName);\n  },\n  addViews: function(numberViews) {\n    this.views = this.views + numberViews;\n    return this.views;\n  }\n};\nshow.play();\nshow.addViews(1);",
                  "solvedContent": "const show = {\n  name: \"Pick and Shorty\",\n  views: 10,\n  play: function() {\n    const showName = this.name;\n    console.log(\"Now Playing \" + showName);\n  },\n  addViews: function(numberViews) {\n    this.views = this.views + numberViews;\n    return this.views;\n  }\n};\nshow.play();\nconsole.log(show.addViews(1));"
                }
              ],
              "hints": []
            }
          }
        ]
      }
    ]
  }
}