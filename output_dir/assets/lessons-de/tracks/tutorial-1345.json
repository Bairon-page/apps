{
  "tutorial": {
    "id": 1345,
    "version": 3,
    "type": "course",
    "isNew": false,
    "codeLanguage": "python",
    "title": "Tupel und Listen",
    "descriptionContent": "Tupel und Listen",
    "shortDescriptionContent": "",
    "showInTrack": true,
    "iconBanner": null,
    "chapters": [
      {
        "id": 9911,
        "title": "Listen von Tupeln",
        "type": "practiceLevel1",
        "lessons": [
          {
            "title": "Intro",
            "id": 88362,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Wir können Tupel in einer Liste speichern, genau wie andere Werte, wie hier mit diesen Tupeln, die Spieler und ihre Punktzahlen enthalten.</p><code version=\"2\" codelang=\"python\" name=\"script.py\" visible-if=\"always\"><content><text value=\"scores = [(\" /><text value=\"&quot;mia&quot;\" class=\"string\" /><text value=\", \" /><text value=\"75\" class=\"number\" /><text value=\"), (\" /><text value=\"&quot;lee&quot;\" class=\"string\" /><text value=\", \" /><text value=\"90\" class=\"number\" /><text value=\")]\" /><text type=\"break\" /><text value=\"print(scores)\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"10\" endIndex=\"34\" /><option correct=\"false\"><content><text value=\"score\" /></content></option><option correct=\"false\"><content><text value=\"if\" /></content></option></options></interaction></interactions><output><content><text value=\"[('mia', 75), ('lee', 90)]\" /></content></output></code><p visible-if=\"wrong\">Wähle <code>(\"mia\", 75), (\"lee\", 90)</code> aus.</p></body></html>"
          },
          {
            "title": "One value",
            "id": 88363,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Wir betrachten jedes Tupel als einen Wert, daher ist die Länge der <code>scores</code>-Liste zwei.</p><code version=\"2\" codelang=\"python\" name=\"script.py\" visible-if=\"always\"><content><text value=\"scores = [(\" /><text value=\"&quot;mia&quot;\" class=\"string\" /><text value=\", \" /><text value=\"75\" class=\"number\" /><text value=\"), (\" /><text value=\"&quot;lee&quot;\" class=\"string\" /><text value=\", \" /><text value=\"90\" class=\"number\" /><text value=\")]\" /><text type=\"break\" /><text value=\"print(len(scores))\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"42\" endIndex=\"45\" /><option startIndex=\"45\" endIndex=\"46\" /><option startIndex=\"46\" endIndex=\"52\" /><option startIndex=\"52\" endIndex=\"53\" /></options></interaction></interactions><output><content><text value=\"2\" /></content></output></code><p visible-if=\"wrong\">Wähle <code>len</code>, gefolgt von <code>(</code> und schließlich <code>scores</code>, <code>)</code> aus.</p></body></html>"
          },
          {
            "title": "Commas",
            "id": 88364,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Genau wie bei allen anderen Werten verwenden wir Kommas <code>,</code>, um Tupel in einer Liste zu trennen.</p><code version=\"2\" codelang=\"python\" name=\"script.py\" visible-if=\"always\"><content><text value=\"scores = [(\" /><text value=\"&quot;mia&quot;\" class=\"string\" /><text value=\", \" /><text value=\"75\" class=\"number\" /><text value=\"), (\" /><text value=\"&quot;lee&quot;\" class=\"string\" /><text value=\", \" /><text value=\"90\" class=\"number\" /><text value=\")]\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"10\" endIndex=\"21\" /><option startIndex=\"21\" endIndex=\"22\" /></options></interaction></interactions></code><p visible-if=\"wrong\">Wähle <code>(\"mia\", 75)</code>, gefolgt von <code>,</code> aus.</p></body></html>"
          },
          {
            "title": "Access a tuple",
            "id": 88365,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Wir können auf ein bestimmtes Tupel in einer Liste über seinen Index zugreifen, genau wie hier mit <code>scores[0]</code> für das erste Tupel.</p><code version=\"2\" codelang=\"python\" name=\"script.py\" visible-if=\"always\"><content><text value=\"scores = [(\" /><text value=\"&quot;mia&quot;\" class=\"string\" /><text value=\", \" /><text value=\"75\" class=\"number\" /><text value=\"), (\" /><text value=\"&quot;lee&quot;\" class=\"string\" /><text value=\", \" /><text value=\"90\" class=\"number\" /><text value=\")]\" /><text type=\"break\" /><text value=\"print(scores[\" /><text value=\"0\" class=\"number\" /><text value=\"])\" /></content><interactions><interaction type=\"validatedInput\" isDefault=\"true\" startIndex=\"42\" endIndex=\"51\" /></interactions><output><content><text value=\"('mia', 75)\" /></content></output></code><p visible-if=\"wrong\">Gib <code>scores[0]</code> ein.</p></body></html>"
          },
          {
            "title": "Save in variable",
            "id": 88366,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Sobald wir auf das Tuple zugegriffen haben, können wir es in einer Variable wie <code>mia_score</code> speichern.</p><code version=\"2\" codelang=\"python\" name=\"script.py\" visible-if=\"always\"><content><text value=\"scores = [(\" /><text value=\"&quot;mia&quot;\" class=\"string\" /><text value=\", \" /><text value=\"75\" class=\"number\" /><text value=\"), (\" /><text value=\"&quot;lee&quot;\" class=\"string\" /><text value=\", \" /><text value=\"90\" class=\"number\" /><text value=\")]\" /><text type=\"break\" /><text value=\"mia_score = scores[\" /><text value=\"0\" class=\"number\" /><text value=\"]\" /><text type=\"break\" /><text value=\"print(mia_score)\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"36\" endIndex=\"45\" /><option startIndex=\"46\" endIndex=\"47\" /></options></interaction></interactions><output><content><text value=\"('mia', 75)\" /></content></output></code><p visible-if=\"wrong\">Wähle <code>mia_score</code>, gefolgt von <code>=</code> aus.</p></body></html>"
          },
          {
            "title": "Loop",
            "id": 88367,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Wir können eine <code>for</code>-Schleife oder eine andere Art von Schleife verwenden, um über eine Liste von Tupeln zu iterieren.</p><code version=\"2\" codelang=\"python\" name=\"script.py\" visible-if=\"always\"><content><text value=\"scores = [(\" /><text value=\"&quot;mia&quot;\" class=\"string\" /><text value=\", \" /><text value=\"75\" class=\"number\" /><text value=\"), (\" /><text value=\"&quot;lee&quot;\" class=\"string\" /><text value=\", \" /><text value=\"90\" class=\"number\" /><text value=\")]\" /><text type=\"break\" /><text type=\"break\" /><text value=\"for\" class=\"keyword\" /><text value=\" user_score \" /><text value=\"in\" class=\"keyword\" /><text value=\" scores:\" /><text type=\"break\" /><text value=\" print(\" /><text value=\"f&quot;Result: \" /><text value=\"{user_score}\" class=\"subst\" /><text value=\"&quot;\" /><text value=\")\" /></content><interactions><interaction type=\"validatedInput\" isDefault=\"true\" startIndex=\"37\" endIndex=\"40\" /></interactions><output><content><text value=\"Result: ('mia', 75)\" /><text type=\"break\" /><text value=\"Result: ('lee', 90)\" /></content></output></code><p visible-if=\"wrong\">Gib <code>for</code> ein.</p></body></html>"
          },
          {
            "title": "Question: One value",
            "id": 88623,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Warum ist diese Liste zwei Elemente lang?</p><code version=\"2\" codelang=\"python\" name=\"script.py\" visible-if=\"always\"><content><text value=\"water = [(\" /><text value=\"&quot;hydrogen&quot;\" class=\"string\" /><text value=\", \" /><text value=\"11.19\" class=\"number\" /><text value=\"), (\" /><text value=\"&quot;oxygen&quot;\" class=\"string\" /><text value=\", \" /><text value=\"88.81\" class=\"number\" /><text value=\")]\" /><text type=\"break\" /><text value=\"print(len(water))\" /></content><output><content><text value=\"2\" /></content></output></code><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\">Weil jedes Tupel als ein Element zählt</item><item value=\"2\" correct=\"false\">Weil jedes Tupel zwei Arten von Werten hat</item></selection><p visible-if=\"wrong\">Weil jedes Tupel als ein Element zählt.</p></body></html>"
          },
          {
            "title": "Question: Commas",
            "id": 88624,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Wie trennt man Tupel in einer Liste?</p><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\">Indem du Kommas zwischen jedem zwei Tupeln verwendest</item><item value=\"2\" correct=\"false\">Durch die Verwendung von Semikolons zwischen jedem zwei Tupeln</item></selection><p visible-if=\"wrong\">Indem du Kommas zwischen jedem zwei Tupeln verwendest.</p></body></html>"
          },
          {
            "title": "Question: Access a tuple",
            "id": 88625,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Wie greifen wir auf Tupel in einer Liste zu?</p><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\">Wie wir auf andere Listenelemente zugreifen, über ihren Index</item><item value=\"2\" correct=\"false\">Wir können nicht auf Tupel zugreifen, sobald sie in einer Liste gespeichert sind</item></selection><p visible-if=\"wrong\">Wie wir auf andere Listenelemente zugreifen, über ihren Index.</p></body></html>"
          },
          {
            "title": "Question: Save in variable",
            "id": 88626,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Wie können wir ein <code>tuple</code> wiederverwenden, das in einer <code>list</code> gespeichert ist?</p><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\">Indem du darauf zugreifst und es in einer Variable speicherst</item><item value=\"2\" correct=\"false\">Wir können Tupel, die in Listen gespeichert sind, nicht wiederverwenden, weil wir nicht auf sie zugreifen können</item></selection><p visible-if=\"wrong\">Indem du darauf zugreifst und es in einer Variable speicherst.</p></body></html>"
          },
          {
            "title": "Question: Loop",
            "id": 88627,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Welche Arten von Schleifen können wir verwenden, um über eine Liste von Tupeln zu iterieren?</p><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\">Jede Art von Schleife</item><item value=\"2\" correct=\"false\">Nur <code>for</code>-Schleifen</item></selection><p visible-if=\"wrong\">Jede Art von Schleife.</p></body></html>"
          },
          {
            "title": "Example: One value",
            "id": 88628,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Speichere eine Liste in der <code>cart</code>-Variable, sodass <code>1</code> in der Konsole angezeigt wird.</p><code version=\"2\" codelang=\"python\" name=\"script.py\" visible-if=\"always\"><content><text value=\"cart = [(\" /><text value=\"&quot;t-shirt&quot;\" class=\"string\" /><text value=\", \" /><text value=\"40\" class=\"number\" /><text value=\")]\" /><text type=\"break\" /><text value=\"print(len(cart))\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"7\" endIndex=\"24\" /><option correct=\"false\"><content><text value=\"[(&quot;t-shirt&quot;, 40), (&quot;jeans&quot;, 70)]\" /></content></option></options></interaction></interactions><output><content><text value=\"1\" /></content></output></code><p visible-if=\"wrong\">Wähle <code>[(\"t-shirt\", 40)]</code> aus.</p></body></html>"
          },
          {
            "title": "Example: Commas",
            "id": 88629,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Code das Tuple <code>(\"jeans\", 70)</code>, gefolgt von <code>(\"sweater\", 90)</code> in der <code>cart</code> Liste.</p><code version=\"2\" codelang=\"python\" name=\"script.py\" visible-if=\"always\"><content><text value=\"cart = [(\" /><text value=\"&quot;t-shirt&quot;\" class=\"string\" /><text value=\", \" /><text value=\"40\" class=\"number\" /><text value=\"), (\" /><text value=\"&quot;jeans&quot;\" class=\"string\" /><text value=\", \" /><text value=\"70\" class=\"number\" /><text value=\"), (\" /><text value=\"&quot;sweater&quot;\" class=\"string\" /><text value=\", \" /><text value=\"90\" class=\"number\" /><text value=\")]\" /><text type=\"break\" /><text value=\"print(cart)\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"23\" endIndex=\"24\" /><option startIndex=\"25\" endIndex=\"38\" /><option startIndex=\"38\" endIndex=\"39\" /><option startIndex=\"40\" endIndex=\"55\" /></options></interaction></interactions><output><content><text value=\"[('t-shirt', 40), ('jeans', 70), ('sweater', 90)]\" /></content></output></code><p visible-if=\"wrong\">Wähle <code>,</code>, gefolgt von <code>(\"jeans\", 70)</code> und schließlich <code>,</code>, <code>(\"sweater\", 90)</code> aus.</p></body></html>"
          },
          {
            "title": "Example: Access a tuple",
            "id": 88630,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Greife auf das zweite Tuple in der Liste zu, indem du <code>cart[]</code> mit dem Index <code>1</code> codierst.</p><code version=\"2\" codelang=\"python\" name=\"script.py\" visible-if=\"always\"><content><text value=\"cart = [(\" /><text value=\"&quot;t-shirt&quot;\" class=\"string\" /><text value=\", \" /><text value=\"40\" class=\"number\" /><text value=\"), (\" /><text value=\"&quot;jeans&quot;\" class=\"string\" /><text value=\", \" /><text value=\"70\" class=\"number\" /><text value=\"), (\" /><text value=\"&quot;sweater&quot;\" class=\"string\" /><text value=\", \" /><text value=\"90\" class=\"number\" /><text value=\")]\" /><text type=\"break\" /><text value=\"print(cart[\" /><text value=\"1\" class=\"number\" /><text value=\"])\" /></content><interactions><interaction type=\"validatedInput\" isDefault=\"true\" startIndex=\"63\" endIndex=\"70\" /></interactions><output><content><text value=\"('jeans', 70)\" /></content></output></code><p visible-if=\"wrong\">Gib <code>cart[1]</code> ein.</p></body></html>"
          },
          {
            "title": "Example: Save in variable ",
            "id": 88631,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Erstelle die Variable <code>item_2</code>, die das zweite Tupel im Warenkorb speichert.</p><code version=\"2\" codelang=\"python\" name=\"script.py\" visible-if=\"always\"><content><text value=\"cart = [(\" /><text value=\"&quot;t-shirt&quot;\" class=\"string\" /><text value=\", \" /><text value=\"40\" class=\"number\" /><text value=\"), (\" /><text value=\"&quot;jeans&quot;\" class=\"string\" /><text value=\", \" /><text value=\"70\" class=\"number\" /><text value=\"), (\" /><text value=\"&quot;sweater&quot;\" class=\"string\" /><text value=\", \" /><text value=\"90\" class=\"number\" /><text value=\")]\" /><text type=\"break\" /><text type=\"break\" /><text value=\"item_2 = cart[\" /><text value=\"1\" class=\"number\" /><text value=\"]\" /><text type=\"break\" /><text value=\"print(item_2)\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"58\" endIndex=\"64\" /><option startIndex=\"65\" endIndex=\"66\" /><option startIndex=\"67\" endIndex=\"74\" /><option correct=\"false\"><content><text value=\"cart[2]\" /></content></option></options></interaction></interactions><output><content><text value=\"('jeans', 70)\" /></content></output></code><p visible-if=\"wrong\">Wähle <code>item_2</code>, gefolgt von <code>=</code> und schließlich <code>cart[1]</code> aus.</p></body></html>"
          }
        ]
      },
      {
        "id": 9914,
        "title": "Tupel vs Listen",
        "type": "practiceLevel1",
        "lessons": [
          {
            "title": "Intro",
            "id": 88368,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Schauen wir uns die Gemeinsamkeiten und Unterschiede zwischen Tupeln wie <code>event_tuple</code> und Listen wie <code>days_list</code> an, um zu wissen, wann man das eine oder das andere verwenden sollte.</p><code version=\"2\" codelang=\"python\" name=\"script.py\" visible-if=\"always\"><content><text value=\"event_tuple = (\" /><text value=\"&quot;Saturday&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;21:00&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;Anna's Bday&quot;\" class=\"string\" /><text value=\")\" /><text type=\"break\" /><text value=\"days_list = [\" /><text value=\"&quot;Saturday&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;Sunday&quot;\" class=\"string\" /><text value=\"]\" /></content></code></body></html>"
          },
          {
            "title": "Access by index",
            "id": 88369,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Ähnlich wie bei Listen können wir auf die Werte eines Tupels über ihren Index zugreifen, wie hier mit <code>event_tuple[1]</code>, um die Zeit zu erhalten.</p><code version=\"2\" codelang=\"python\" name=\"script.py\" visible-if=\"always\"><content><text value=\"event_tuple = (\" /><text value=\"&quot;Saturday&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;21:00&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;Anna's Bday&quot;\" class=\"string\" /><text value=\")\" /><text type=\"break\" /><text value=\"print(event_tuple[\" /><text value=\"1\" class=\"number\" /><text value=\"])\" /><text type=\"break\" /><text type=\"break\" /></content><interactions><interaction type=\"validatedInput\" isDefault=\"true\" startIndex=\"57\" endIndex=\"71\" /></interactions><output><content><text value=\"21:00\" /></content></output></code><p visible-if=\"wrong\">Gib <code>event_tuple[1]</code> ein.</p></body></html>"
          },
          {
            "title": "Immutable 1",
            "id": 88370,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Der Hauptunterschied besteht darin, dass wir im Gegensatz zu Listen Werte in Tupeln <em>nicht</em> aktualisieren, hinzufügen oder löschen können.</p><code version=\"2\" codelang=\"python\" name=\"script.py\" visible-if=\"always\"><content><text value=\"event_tuple = (\" /><text value=\"&quot;Saturday&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;21:00&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;Anna's Bday&quot;\" class=\"string\" /><text value=\")\" /><text type=\"break\" /><text type=\"break\" /><text value=\"days_list = [\" /><text value=\"&quot;Saturday&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;Sunday&quot;\" class=\"string\" /><text value=\"]\" /><text type=\"break\" /><text value=\"days_list[\" /><text value=\"0\" class=\"number\" /><text value=\"] = \" /><text value=\"&quot;Friday&quot;\" class=\"string\" /></content></code></body></html>"
          },
          {
            "title": "Immutable 2",
            "id": 88371,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Wir sagen, dass Tupel unveränderlich sind, da der Versuch, sie zu ändern, wie hier mit <code>event_tuple[0] = \"Friday\"</code>, zu einem Fehler führt.</p><code version=\"2\" codelang=\"python\" name=\"script.py\" visible-if=\"always\"><content><text value=\"event_tuple = (\" /><text value=\"&quot;Saturday&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;21:00&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;Anna's Bday&quot;\" class=\"string\" /><text value=\")\" /><text type=\"break\" /><text value=\"event_tuple[\" /><text value=\"0\" class=\"number\" /><text value=\"] = \" /><text value=\"&quot;Friday&quot;\" class=\"string\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"51\" endIndex=\"65\" /><option startIndex=\"66\" endIndex=\"67\" /><option startIndex=\"68\" endIndex=\"76\" /></options></interaction></interactions><output><content><text value=\"Traceback (most recent call last):\" /><text type=\"break\" /><text value=\"  File &quot;file.py&quot;, line 2, in &lt;module&gt;\" /><text type=\"break\" /><text value=\"    event_tuple[0] = &quot;Friday&quot;\" /><text type=\"break\" /><text value=\"TypeError: 'tuple' object does not support item assignment\" /><text type=\"break\" /><text value=\"\" /></content></output></code><p visible-if=\"wrong\">Wähle <code>event_tuple[0]</code>, gefolgt von <code>=</code> und schließlich <code>\"Friday\"</code> aus.</p></body></html>"
          },
          {
            "title": "Immutable 3",
            "id": 88372,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Da Tupel unveränderlich sind, verwenden wir sie, um Informationen zu speichern, die nicht geändert werden sollten, wie den Namen und das Geburtsdatum einer Person.</p><code version=\"2\" codelang=\"python\" name=\"script.py\" visible-if=\"always\"><content><text value=\"personal_data = (\" /><text value=\"&quot;Anna&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;21.05&quot;\" class=\"string\" /><text value=\")\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"16\" endIndex=\"17\" /><option startIndex=\"32\" endIndex=\"33\" /><option startIndex=\"25\" endIndex=\"32\" /><option startIndex=\"23\" endIndex=\"24\" /></options></interaction></interactions></code><p visible-if=\"wrong\">Wähle <code>(</code>, gefolgt von <code>,</code> und schließlich <code>\"21.05\"</code>, <code>)</code> aus.</p></body></html>"
          },
          {
            "title": "Question: Access by index",
            "id": 88633,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Wie greifen wir auf einen Wert zu, der in einem Tuple gespeichert ist?</p><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\">Nach seinem Index, genau wie in einer Liste</item><item value=\"2\" correct=\"false\">Nach seinem Wert</item></selection><p visible-if=\"wrong\">Nach seinem Index, genau wie in einer Liste.</p></body></html>"
          },
          {
            "title": "Question: Immutable 1",
            "id": 88634,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Was ist der Hauptunterschied zwischen <code>tuples</code> und <code>lists</code>?</p><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\">Wir können Tupel nicht aktualisieren, löschen oder neue Werte hinzufügen</item><item value=\"2\" correct=\"false\">Es gibt keinen Unterschied</item></selection><p visible-if=\"wrong\">Wir können Tupel nicht aktualisieren, löschen oder neue Werte hinzufügen.</p></body></html>"
          },
          {
            "title": "Question: Immutable 2",
            "id": 88635,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Was meinen wir, wenn wir sagen, dass <code>tuples</code> unveränderlich sind?</p><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\">Der Versuch, sie zu ändern, führt zu einem Fehler</item><item value=\"2\" correct=\"false\">Wir können sie nicht in <code>variablen</code> speichern</item></selection><p visible-if=\"wrong\">Der Versuch, sie zu ändern, führt zu einem Fehler.</p></body></html>"
          },
          {
            "title": "Question: Immutable 3",
            "id": 88636,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Was sollten wir verwenden, um Werte zu speichern, die wir später nicht ändern können?</p><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\">Ein Tupel</item><item value=\"2\" correct=\"false\">Eine Liste</item></selection><p visible-if=\"wrong\">Ein Tupel.</p></body></html>"
          },
          {
            "title": "Example: Access by index",
            "id": 88637,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Greife auf den ersten Wert des Tupels über seinen Index zu.</p><code version=\"2\" codelang=\"python\" name=\"script.py\" visible-if=\"always\"><content><text value=\"jupiter = (\" /><text value=\"&quot;61.42 billion km2&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;79 moons&quot;\" class=\"string\" /><text value=\")\" /><text type=\"break\" /><text value=\"print(\" /><text value=\"f&quot;surface area: \" /><text value=\"{jupiter[\" /><text value=\"0\" class=\"number\" /><text value=\"]}\" /><text value=\"&quot;\" /><text value=\")\" /><text type=\"break\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"67\" endIndex=\"74\" /><option startIndex=\"74\" endIndex=\"75\" /><option startIndex=\"75\" endIndex=\"76\" /><option startIndex=\"76\" endIndex=\"77\" /><option correct=\"false\"><content><text value=\"(\" /></content></option><option correct=\"false\"><content><text value=\")\" /></content></option></options></interaction></interactions><output><content><text value=\"surface area: 61.42 billion km2\" /></content></output></code><p visible-if=\"wrong\">Wähle <code>jupiter</code>, gefolgt von <code>[</code> und schließlich <code>0</code>, <code>]</code> aus.</p></body></html>"
          },
          {
            "title": "Example: Immutable 3",
            "id": 88640,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Erstelle ein Tuple, um diese Fakten über die Gefrier- und Siedetemperaturen von Wasser zu speichern.</p><code version=\"2\" codelang=\"python\" name=\"script.py\" visible-if=\"always\"><content><text value=\"water_temperatures = (\" /><text value=\"0\" class=\"number\" /><text value=\", \" /><text value=\"100\" class=\"number\" /><text value=\")\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"21\" endIndex=\"29\" /><option correct=\"false\"><content><text value=\"[0, 100]\" /></content></option></options></interaction></interactions></code><p visible-if=\"wrong\">Wähle <code>(0, 100)</code> aus.</p></body></html>"
          }
        ]
      }
    ]
  }
}