{
  "tutorial": {
    "id": 2664,
    "version": 5,
    "type": "guidedProject",
    "isNew": false,
    "codeLanguage": "python",
    "title": "Lebensmittel-Bestellsystem - Teil 2",
    "descriptionContent": "Erweitere dein Bestellsystem für Lebensmittel um eine Welt voller Aromen! In diesem Teil fügen wir verschiedene Küchen hinzu und machen dein System zu einem globalen Food-Ziel.",
    "shortDescriptionContent": "",
    "showInTrack": true,
    "iconBanner": "tutorial-2664-icon-banner.svg",
    "chapters": [
      {
        "id": 14639,
        "title": "Kapitel #1",
        "type": "practiceLevel3",
        "lessons": [
          {
            "title": "Lesson #1",
            "id": 129477,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Willkommen zurück beim **Food Order System** Projekt! Wir werden nun unsere Benutzer zwischen verschiedenen Küchen wählen lassen. Zuerst fügen wir ein weiteres Speisemenü hinzu. In diesem Beispiel werden wir ein indisches Speisemenü hinzufügen.\n\n1. Definiere unter `italian_food` die Liste `indian_food` und fülle sie mit Strings, die indische Gerichte repräsentieren. Füge der `indian_food` Liste mindestens 4 String-Elemente hinzu, wie `\"Curry\"`, `\"Chutney\"`, `\"Samosa\"` und `\"Naan\"`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "italian_food = [\n  \"Pasta Bolognese\",\n  \"Pepperoni pizza\",\n  \"Margherita pizza\",\n  \"Lasagna\"\n]\n\ndef find_meal(name, menu):\n  return name if name in menu else None\n\ndef select_meal(name):\n  return find_meal(name, italian_food)\n\ndef display_available_meals():\n  print(\"Available Italian Meals:\")\n  for meal in italian_food:\n    print(meal)\n\ndef create_summary(name, amount):\n  order = select_meal(name)\n  if order:\n    return f\"You ordered {amount} {name}\"\n  else:\n    return \"Meal not found\"\n\nprint(\"Welcome to the Food Order System!\")\ndisplay_available_meals()\nname_input = input(\"Enter the name of the meal you want to order: \")\namount_input = int(input(\"Enter the quantity you want to order: \"))\n\nresult = create_summary(name_input, amount_input)\nprint(result)",
                  "solvedContent": "italian_food = [\n  \"Pasta Bolognese\",\n  \"Pepperoni pizza\",\n  \"Margherita pizza\",\n  \"Lasagna\"\n]\n\nindian_food = [\n  \"Curry\",\n  \"Chutney\",\n  \"Samosa\",\n  \"Naan\"\n]\n\ndef find_meal(name, menu):\n  return name if name in menu else None\n\ndef select_meal(name):\n  return find_meal(name, italian_food)\n\ndef display_available_meals():\n  print(\"Available Italian Meals:\")\n  for meal in italian_food:\n    print(meal)\n\ndef create_summary(name, amount):\n  order = select_meal(name)\n  if order:\n    return f\"You ordered {amount} {name}\"\n  else:\n    return \"Meal not found\"\n\nprint(\"Welcome to the Food Order System!\")\ndisplay_available_meals()\nname_input = input(\"Enter the name of the meal you want to order: \")\namount_input = int(input(\"Enter the quantity you want to order: \"))\n\nresult = create_summary(name_input, amount_input)\nprint(result)"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Lesson #1 - Copy",
            "id": 129482,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Lassen wir unsere Benutzer zuerst die Küche auswählen, aus der sie ein Gericht wählen möchten.\n\n1. Nach der Willkommensnachricht, die du ausgibst, füge vor den anderen `input`-Anweisungen ein neues `input` hinzu.\n   - Frage nach der Art von Essen, aus der der Benutzer wählen möchte.\n   - Speichere die Eingabe des Benutzers in einer Variablen namens `type_input`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "italian_food = [\n  \"Pasta Bolognese\",\n  \"Pepperoni pizza\",\n  \"Margherita pizza\",\n  \"Lasagna\"\n]\n\nindian_food = [\n  \"Curry\",\n  \"Chutney\",\n  \"Samosa\",\n  \"Naan\"\n]\n\ndef find_meal(name, menu):\n  return name if name in menu else None\n\ndef select_meal(name):\n  return find_meal(name, italian_food)\n\ndef display_available_meals():\n  print(\"Available Italian Meals:\")\n  for meal in italian_food:\n    print(meal)\n\ndef create_summary(name, amount):\n  order = select_meal(name)\n  if order:\n    return f\"You ordered {amount} {name}\"\n  else:\n    return \"Meal not found\"\n\nprint(\"Welcome to the Food Order System!\")\ndisplay_available_meals()\nname_input = input(\"Enter the name of the meal you want to order: \")\namount_input = int(input(\"Enter the quantity you want to order: \"))\n\nresult = create_summary(name_input, amount_input)\nprint(result)",
                  "solvedContent": "italian_food = [\n  \"Pasta Bolognese\",\n  \"Pepperoni pizza\",\n  \"Margherita pizza\",\n  \"Lasagna\"\n]\n\nindian_food = [\n  \"Curry\",\n  \"Chutney\",\n  \"Samosa\",\n  \"Naan\"\n]\n\ndef find_meal(name, menu):\n  return name if name in menu else None\n\ndef select_meal(name):\n  return find_meal(name, italian_food)\n\ndef display_available_meals():\n  print(\"Available Italian Meals:\")\n  for meal in italian_food:\n    print(meal)\n\ndef create_summary(name, amount):\n  order = select_meal(name)\n  if order:\n    return f\"You ordered {amount} {name}\"\n  else:\n    return \"Meal not found\"\n\nprint(\"Welcome to the Food Order System!\")\ntype_input = input(\"Enter the type of food you want to order: \") \ndisplay_available_meals()\nname_input = input(\"Enter the name of the meal you want to order: \")\namount_input = int(input(\"Enter the quantity you want to order: \"))\n\nresult = create_summary(name_input, amount_input)\nprint(result)"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Lesson #1 - Copy - Copy",
            "id": 129483,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Wir haben jetzt verschiedene Küchen, daher sollten wir nur die ausgewählte anzeigen. Um dies zu tun, ändere die Funktion `display_available_meals`.\n\n1. Übergebe der Funktion einen Parameter namens `food_type`.\n2. Verwende eine `if`-Anweisung, um zu vergleichen, ob das übergebene Argument gleich `\"Italian\"` ist.\n3. Füge eine `elif`-Anweisung hinzu, um zu überprüfen, ob das übergebene Argument gleich `\"Indian\"` ist.\n4. Füge eine `else`-Anweisung hinzu.\n5. Verschiebe den Code, den du vorher hattest, in den `if`-Block, um `\"Available Italian Meals\"` anzuzeigen, und durchlaufe dann die Liste, um alle einzelnen Mahlzeiten auszugeben.\n6. Mache dasselbe für den elif-Block, aber für indische Gerichte.\n7. Gib im `else`-Block `\"Invalid food type\"` aus.\n8. Übergib schließlich die Benutzereingabe, die wir in `type_input` gespeichert haben, wenn du die Funktion `display_available_meals` aufrufst.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "italian_food = [\n  \"Pasta Bolognese\",\n  \"Pepperoni pizza\",\n  \"Margherita pizza\",\n  \"Lasagna\"\n]\n\nindian_food = [\n  \"Curry\",\n  \"Chutney\",\n  \"Samosa\",\n  \"Naan\"\n]\n\ndef find_meal(name, menu):\n  return name if name in menu else None\n\ndef select_meal(name):\n  return find_meal(name, italian_food)\n\ndef display_available_meals():\n  print(\"Available Italian Meals:\")\n  for meal in italian_food:\n    print(meal)\n\ndef create_summary(name, amount):\n  order = select_meal(name)\n  if order:\n    return f\"You ordered {amount} {name}\"\n  else:\n    return \"Meal not found\"\n\nprint(\"Welcome to the Food Order System!\")\ntype_input = input(\"Enter the type of food you want to order: \") \ndisplay_available_meals()\nname_input = input(\"Enter the name of the meal you want to order: \")\namount_input = int(input(\"Enter the quantity you want to order: \"))\n\nresult = create_summary(name_input, amount_input)\nprint(result)",
                  "solvedContent": "italian_food = [\n  \"Pasta Bolognese\",\n  \"Pepperoni pizza\",\n  \"Margherita pizza\",\n  \"Lasagna\"\n]\n\nindian_food = [\n  \"Curry\",\n  \"Chutney\",\n  \"Samosa\",\n  \"Naan\"\n]\n\ndef find_meal(name, menu):\n  return name if name in menu else None\n\ndef select_meal(name):\n  return find_meal(name, italian_food)\n\ndef display_available_meals(food_type):\n  if food_type == \"Italian\":\n    print(\"Available Italian Meals:\")\n    for meal in italian_food:\n      print(meal)\n  elif food_type == \"Indian\":\n    print(\"Available Indian Meals:\")\n    for meal in indian_food:\n      print(meal)\n  else:\n    print(\"Invalid food type\")\n\ndef create_summary(name, amount):\n  order = select_meal(name)\n  if order:\n    return f\"You ordered {amount} {name}\"\n  else:\n    return \"Meal not found\"\n\nprint(\"Welcome to the Food Order System!\")\ntype_input = input(\"Enter the type of food you want to order: \") \ndisplay_available_meals(type_input)\nname_input = input(\"Enter the name of the meal you want to order: \")\namount_input = int(input(\"Enter the quantity you want to order: \"))\n\nresult = create_summary(name_input, amount_input)\nprint(result)"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Lesson #2",
            "id": 129478,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Schließlich müssen wir unsere Funktion `select_meal` aktualisieren, um den Nutzern zu ermöglichen, ein Gericht auszuwählen, das ihnen gefällt.\n\n1. Füge der Funktion einen zweiten Parameter namens `food_type` hinzu.\n2. Ähnlich wie zuvor, füge einen `if`-Block, einen `elif`-Block und einen `else`-Block hinzu.\n3. Die Bedingung des `if`-Blocks sollte prüfen, ob die übergebene Variable `food_type` gleich `\"Italian\"` ist.\n4. Die Bedingung des `elif`-Blocks sollte prüfen, ob die übergebene Variable `food_type` gleich `\"Indian\"` ist.\n5. Verschiebe den bereits vorhandenen Code in den `if`-Block, um das italienische Essen über `return find_meal(name, italian_food)` zu erhalten und zurückzugeben.\n6. Mache dasselbe für den `elif`-Block, aber für indisches Essen.\n7. Gib `None` im `else`-Block zurück.\n8. Wir müssen einen weiteren Parameter zu `create_summary` hinzufügen, den wir `food_type` nennen können.\n9. Beim Aufruf von `create_summary` übergebe die Variable `type_input` als `food_type`.\n10. Beim Aufruf von `select_meal` innerhalb von `create_summary`, übergebe den empfangenen Parameter weiter.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "italian_food = [\n  \"Pasta Bolognese\",\n  \"Pepperoni pizza\",\n  \"Margherita pizza\",\n  \"Lasagna\"\n]\n\nindian_food = [\n  \"Curry\",\n  \"Chutney\",\n  \"Samosa\",\n  \"Naan\"\n]\n\ndef find_meal(name, menu):\n  return name if name in menu else None\n\ndef select_meal(name):\n  return find_meal(name, italian_food)\n\ndef display_available_meals(food_type):\n  if food_type == \"Italian\":\n    print(\"Available Italian Meals:\")\n    for meal in italian_food:\n      print(meal)\n  elif food_type == \"Indian\":\n    print(\"Available Indian Meals:\")\n    for meal in indian_food:\n      print(meal)\n  else:\n    print(\"Invalid food type\")\n\ndef create_summary(name, amount):\n  order = select_meal(name)\n  if order:\n    return f\"You ordered {amount} {name}\"\n  else:\n    return \"Meal not found\"\n\nprint(\"Welcome to the Food Order System!\")\ntype_input = input(\"Enter the type of food you want to order: \") \ndisplay_available_meals(type_input)\nname_input = input(\"Enter the name of the meal you want to order: \")\namount_input = int(input(\"Enter the quantity you want to order: \"))\n\nresult = create_summary(name_input, amount_input)\nprint(result)",
                  "solvedContent": "italian_food = [\n  \"Pasta Bolognese\",\n  \"Pepperoni pizza\",\n  \"Margherita pizza\",\n  \"Lasagna\"\n]\n\nindian_food = [\n  \"Curry\",\n  \"Chutney\",\n  \"Samosa\",\n  \"Naan\"\n]\n\ndef find_meal(name, menu):\n  return name if name in menu else None\n\ndef select_meal(name, food_type):\n  if food_type == \"Italian\":\n    return find_meal(name, italian_food)\n  elif food_type == \"Indian\":\n    return find_meal(name, indian_food)\n  else:\n    return None \n\n\ndef display_available_meals(food_type):\n  if food_type == \"Italian\":\n    print(\"Available Italian Meals:\")\n    for meal in italian_food:\n      print(meal)\n  elif food_type == \"Indian\":\n    print(\"Available Indian Meals:\")\n    for meal in indian_food:\n      print(meal)\n  else:\n    print(\"Invalid food type\")\n\ndef create_summary(name, amount, food_type):\n  order = select_meal(name, food_type)\n  if order:\n    return f\"You ordered {amount} {name}\"\n  else:\n    return \"Meal not found\"\n\nprint(\"Welcome to the Food Order System!\")\ntype_input = input(\"Enter the type of food you want to order: \") \ndisplay_available_meals(type_input)\nname_input = input(\"Enter the name of the meal you want to order: \")\namount_input = int(input(\"Enter the quantity you want to order: \"))\n\nresult = create_summary(name_input, amount_input, type_input)\nprint(result)"
                }
              ],
              "hints": []
            }
          }
        ]
      }
    ]
  }
}