{
  "tutorial": {
    "id": 2113,
    "version": 15,
    "type": "course",
    "isNew": false,
    "codeLanguage": "node",
    "title": "Kommunikation mit einer API",
    "descriptionContent": "Lerne über APIs. Was sie sind, wie sie funktionieren und warum wir sie verwenden.",
    "shortDescriptionContent": "",
    "showInTrack": true,
    "iconBanner": null,
    "chapters": [
      {
        "id": 13266,
        "title": "Dein erstes Endpoint",
        "type": "practiceLevel1",
        "lessons": [
          {
            "title": "Intro",
            "id": 119226,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p><em>Anwendungsprogrammierschnittstellen</em>, auch bekannt als <code>API</code>, ermöglichen die Kommunikation zwischen zwei Programmen.</p><p>Sie ermöglichen es einem Programm, Anfragen zu senden und Antworten von einem anderen zu empfangen, wodurch Systeme effizient interagieren und Daten austauschen können.</p></body></html>"
          },
          {
            "title": "Intro: Similar real life example I",
            "id": 119237,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Viele reale Systeme funktionieren wie eine <strong>API</strong>. Eine API ist wie ein Kellner, der deine Bestellung (<em>request</em>) in die Küche bringt.</p><p>Die Küche (Server) verarbeitet es und sendet das Essen (<em>response</em>) durch den Kellner zurück.</p></body></html>"
          },
          {
            "title": "GET",
            "id": 132243,
            "contentType": "interactive",
            "images": [
              {
                "id": "906453c7-49b9-498a-a1e9-217d327dccf9"
              }
            ],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Eine häufige API-Anfrage ist eine <code>GET</code>-Anfrage, ähnlich wie wenn man den Kellner nach einer Speisekarte fragt.</p><p>Eine <code>GET</code>-Anfrage fordert den Server auf, Informationen bereitzustellen. Der Server antwortet dann mit den benötigten Daten.</p><img src=\"906453c7-49b9-498a-a1e9-217d327dccf9\" visible-if=\"always\" /></body></html>"
          },
          {
            "title": "Express - Copy",
            "id": 132289,
            "contentType": "interactive",
            "images": [
              {
                "id": "696c8f33-dd3d-4182-b8ae-71f0a5e912e1"
              }
            ],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Wir verwenden <strong>Node</strong>, um JavaScript auf dem Server auszuführen, und das <strong>Express</strong>-Framework, um Serverfunktionen wie Anfragen und Antworten zu erstellen.</p><p>Express ist ein beliebtes Web-Framework für Node, das die Erstellung von Servern vereinfacht.</p><img src=\"696c8f33-dd3d-4182-b8ae-71f0a5e912e1\" visible-if=\"always\" /></body></html>"
          },
          {
            "title": "GET requests",
            "id": 119239,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Hier ist der erste Endpoint in Express. Es passiert viel, aber du verstehst bereits, dass dies eine <code>GET</code>-Anfrage ist.</p><code version=\"2\" codelang=\"javascript\" name=\"app.js\" visible-if=\"always\"><content><text value=\"app.get(\" /><text value=\"&quot;/menu&quot;\" class=\"string\" /><text value=\", (req, res) =&gt; {\" /><text type=\"break\" /><text type=\"break\" /><text value=\"});\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"4\" endIndex=\"7\" /></options></interaction></interactions><output><content><text value=\"Here is your menu!\" /></content></output></code><p visible-if=\"wrong\">Wähle <code>get</code> aus.</p></body></html>"
          },
          {
            "title": "GET requests - Copy",
            "id": 132301,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Wie du weißt, soll eine API etwas zurückgeben. Lass uns das hier auch tun und <code>\"Here is your menu!\"</code> zurücksenden.</p><p>Der Server sendet eine Antwort über <code>res</code> zurück.</p><code version=\"2\" codelang=\"javascript\" name=\"app.js\" visible-if=\"always\"><content><text value=\"app.get(\" /><text value=\"&quot;/menu&quot;\" class=\"string\" /><text value=\", (req, res) =&gt; {\" /><text type=\"break\" /><text value=\" res.send(\" /><text value=\"&quot;Here is your menu!&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\"});\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"43\" endIndex=\"63\" /></options></interaction></interactions><output><content><text value=\"Here is your menu!\" /></content></output></code><p visible-if=\"wrong\">Wähle <code>\"Here is your menu!\"</code> aus.</p></body></html>"
          },
          {
            "title": "GET requests - Copy",
            "id": 132287,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Das <code>GET</code> in einer <code>GET</code>-Anfrage bezieht sich auf die verwendete HTTP-Methode. Es ist eine von mehreren Methoden, um Daten vom Server abzurufen.</p><code version=\"2\" codelang=\"javascript\" name=\"app.js\" visible-if=\"always\"><content><text value=\"app.get(\" /><text value=\"&quot;/menu&quot;\" class=\"string\" /><text value=\", (req, res) =&gt; {\" /><text type=\"break\" /><text value=\" res.send(\" /><text value=\"&quot;Here is your menu!&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\"});\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"4\" endIndex=\"7\" /><option correct=\"false\"><content><text value=\"retrieve\" /></content></option></options></interaction></interactions><output><content><text value=\"Here is your menu!\" /></content></output></code><p visible-if=\"wrong\">Wähle <code>get</code> aus.</p></body></html>"
          },
          {
            "title": "GET requests 2",
            "id": 132246,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Eine <em>Route</em> ist ein Pfad auf dem Server, der eine spezifische Antwort sendet, wenn er angefordert wird, wie zum Beispiel <code>/menu</code>, das ein Menü zurückgibt.</p><code version=\"2\" codelang=\"javascript\" name=\"app.js\" visible-if=\"always\"><content><text value=\"app.get(\" /><text value=\"&quot;/menu&quot;\" class=\"string\" /><text value=\", (req, res) =&gt; {\" /><text type=\"break\" /><text value=\" res.send(\" /><text value=\"&quot;Here is your menu!&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\"});\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"8\" endIndex=\"15\" /></options></interaction></interactions><output><content><text value=\"Here is your menu!\" /></content></output></code><p visible-if=\"wrong\">Wähle <code>\"/menu\"</code> aus.</p></body></html>"
          },
          {
            "title": "GET requests 3",
            "id": 132247,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Jeder Endpoint definiert eine Route, wie <code>/menu</code>, und hat eine Funktion, die <code>req</code> (request) und <code>res</code> (response) übernimmt, um die Anfrage zu bearbeiten und zu beantworten.</p><code version=\"2\" codelang=\"javascript\" name=\"app.js\" visible-if=\"always\"><content><text value=\"app.get(\" /><text value=\"&quot;/menu&quot;\" class=\"string\" /><text value=\", (req, res) =&gt; {\" /><text type=\"break\" /><text value=\" res.send(\" /><text value=\"&quot;Here is your menu!&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\"});\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"18\" endIndex=\"22\" /><option startIndex=\"23\" endIndex=\"26\" /><option startIndex=\"34\" endIndex=\"37\" /></options></interaction></interactions><output><content><text value=\"Here is your menu!\" /></content></output></code><p visible-if=\"wrong\">Wähle <code>req,</code>, gefolgt von <code>res</code> und schließlich <code>res</code> aus.</p></body></html>"
          },
          {
            "title": "GET requests 4",
            "id": 132248,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>In diesem Beispiel müssen wir den <code>req</code>-Parameter nicht verwenden, aber wir nutzen <code>res</code>, um eine Antwort an den Client zu senden, wie das Überreichen der Speisekarte.</p><code version=\"2\" codelang=\"javascript\" name=\"app.js\" visible-if=\"always\"><content><text value=\"app.get(\" /><text value=\"&quot;/menu&quot;\" class=\"string\" /><text value=\", (req, res) =&gt; {\" /><text type=\"break\" /><text value=\" res.send(\" /><text value=\"&quot;Here is your menu!&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\"});\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"23\" endIndex=\"26\" /><option startIndex=\"34\" endIndex=\"37\" /><option startIndex=\"37\" endIndex=\"42\" /></options></interaction></interactions><output><content><text value=\"Here is your menu!\" /></content></output></code><p visible-if=\"wrong\">Wähle <code>res</code>, gefolgt von <code>res</code> und schließlich <code>.send</code> aus.</p></body></html>"
          },
          {
            "title": "Example 1",
            "id": 119248,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Schreibe eine <code>GET</code>-Anfrage.</p><code version=\"2\" codelang=\"javascript\" name=\"app.js\" visible-if=\"always\"><content><text value=\"app.get(\" /><text value=\"&quot;/menu&quot;\" class=\"string\" /><text value=\", (req, res) =&gt; {\" /><text type=\"break\" /><text value=\" res.send(\" /><text value=\"&quot;Here is your menu!&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\"});\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"0\" endIndex=\"3\" /><option startIndex=\"4\" endIndex=\"7\" /></options></interaction></interactions><output><content><text value=\"Here is your menu!\" /></content></output></code><p visible-if=\"wrong\">Wähle <code>app</code>, gefolgt von <code>get</code> aus.</p></body></html>"
          },
          {
            "title": "Question 1",
            "id": 119227,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Wofür steht <code>API</code>?</p><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\">Application Programming Interface</item><item value=\"2\" correct=\"false\">Unterstützende Programmieroberfläche</item></selection><p visible-if=\"wrong\">Application Programming Interface.</p></body></html>"
          },
          {
            "title": "Example 2",
            "id": 119249,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Stelle sicher, dass der <code>/menu</code>-Endpunkt eine Antwort zurücksendet.</p><code version=\"2\" codelang=\"javascript\" name=\"app.js\" visible-if=\"always\"><content><text value=\"app.get(\" /><text value=\"&quot;/menu&quot;\" class=\"string\" /><text value=\", (req, res) =&gt; { \" /><text type=\"break\" /><text value=\" res.send(\" /><text value=\"&quot;Here is your menu!&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"});\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"35\" endIndex=\"38\" /><option startIndex=\"38\" endIndex=\"39\" /><option startIndex=\"39\" endIndex=\"43\" /></options></interaction></interactions><output><content><text value=\"Here is your menu!\" /></content></output></code><p visible-if=\"wrong\">Wähle <code>res</code>, gefolgt von <code>.</code> und schließlich <code>send</code> aus.</p></body></html>"
          },
          {
            "title": "Question 2",
            "id": 119243,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Hier ist ein weiteres Beispiel aus dem echten Leben. Du füllst ein Online-Antragsformular für einen Bankkredit aus, welche Rolle hat jede beteiligte Partei?</p><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\">Du bist der Absender, das Online-Bewerbungsformular ist die <code>API</code>, die Bank ist der Empfänger</item><item value=\"2\" correct=\"false\">Du bist die <code>API</code>, das Online-Bewerbungsformular ist der Absender, die Bank ist der Empfänger</item><item value=\"3\" correct=\"false\">Du bist der Absender, das Online-Bewerbungsformular ist der Empfänger, die Bank ist die <code>API</code></item></selection><p visible-if=\"wrong\">Du bist der Absender, das Online-Bewerbungsformular ist die <code>API</code>, die Bank ist der Empfänger.</p></body></html>"
          },
          {
            "title": "Example 3",
            "id": 132249,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Definiere die <code>/menu</code> Route.</p><code version=\"2\" codelang=\"javascript\" name=\"app.js\" visible-if=\"always\"><content><text value=\"app.get(\" /><text value=\"&quot;/menu&quot;\" class=\"string\" /><text value=\", (req, res) =&gt; { \" /><text type=\"break\" /><text value=\" res.send(\" /><text value=\"&quot;Here is your menu!&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"});\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"8\" endIndex=\"15\" /><option correct=\"false\"><content><text value=\"&quot;/&quot;\" /></content></option></options></interaction></interactions><output><content><text value=\"Here is your menu!\" /></content></output></code><p visible-if=\"wrong\">Wähle <code>\"/menu\"</code> aus.</p></body></html>"
          },
          {
            "title": "Question 3",
            "id": 119244,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Wie funktioniert eine <code>API</code>?</p><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\">Es sendet die Anfrage des Absenders an den Empfänger und die Antwort des Empfängers an den Absender</item><item value=\"2\" correct=\"false\">Es verbindet einfach den Sender und den Empfänger und lässt sie ihre Sache machen</item><item value=\"3\" correct=\"false\">Es überwacht nur, um sicherzustellen, dass Sender und Empfänger Nachrichten aneinander senden</item></selection><p visible-if=\"wrong\">Es sendet die Anfrage des Absenders an den Empfänger und die Antwort des Empfängers an den Absender.</p></body></html>"
          },
          {
            "title": "Example 4",
            "id": 132250,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Stelle sicher, dass die <code>/menu</code>-Route eine <code>GET</code>-Anfrage verarbeiten und eine Antwort an den Client senden kann.</p><code version=\"2\" codelang=\"javascript\" name=\"app.js\" visible-if=\"always\"><content><text value=\"app.get(\" /><text value=\"&quot;/menu&quot;\" class=\"string\" /><text value=\", (req, res) =&gt; { \" /><text type=\"break\" /><text value=\" res.send(\" /><text value=\"&quot;Here is your menu!&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"});\" /></content><interactions><interaction type=\"validatedInput\" isDefault=\"true\" startIndex=\"4\" endIndex=\"7\" /></interactions><output><content><text value=\"Here is your menu!\" /></content></output></code><p visible-if=\"wrong\">Gib <code>get</code> ein.</p></body></html>"
          }
        ]
      },
      {
        "id": 13269,
        "title": "Einen Server starten",
        "type": "practiceLevel1",
        "lessons": [
          {
            "title": "APIs",
            "id": 119251,
            "contentType": "interactive",
            "images": [
              {
                "id": "9e38976a-0aca-4e11-8369-1243822de4d5"
              }
            ],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Jetzt, da du weißt, was eine <code>API</code> ist, lass uns darüber sprechen, wie du deinen eigenen Server startest.</p><img src=\"9e38976a-0aca-4e11-8369-1243822de4d5\" visible-if=\"always\" /></body></html>"
          },
          {
            "title": "npm init",
            "id": 132302,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Führe <code>node app.js</code> im Terminal aus, um einen lokalen Server zu starten, wobei app.js die Datei ist, die deinen Servercode enthält.</p><p>Bei Mimo übernehmen wir das jedoch für dich. Wenn du zum Projektbereich gehst, kannst du mit einem Klick auf eine Schaltfläche einen neuen Server erstellen.</p><code version=\"2\" codelang=\"bash\" name=\"Console Editor\" visible-if=\"always\"><content><text value=\"node app.js\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"0\" endIndex=\"4\" /><option startIndex=\"5\" endIndex=\"11\" /></options></interaction></interactions><output><content><text value=\"Server is running on port 3000\" /></content></output></code><p visible-if=\"wrong\">Wähle <code>node</code>, gefolgt von <code>app.js</code> aus.</p></body></html>"
          },
          {
            "title": "Localhost",
            "id": 132258,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p><code>http://localhost:3000</code> bezieht sich auf den lokalen Rechner (deinen Computer), der den Server auf Port 3000 ausführt, sodass du auf die Anwendung zugreifen kannst.</p><p>Bei Mimo übernehmen wir das für dich. Wir betreiben den Server und machen ihn für dich leicht zugänglich.</p><code version=\"2\" codelang=\"bash\" name=\"Console Editor\" visible-if=\"always\"><content><text value=\"http://localhost:3000\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"0\" endIndex=\"21\" /></options></interaction></interactions><output><content><text value=\"Server is running on port 3000\" /></content></output></code><p visible-if=\"wrong\">Wähle <code>http://localhost:3000</code> aus.</p></body></html>"
          },
          {
            "title": "Lesson #18 - Copy - Copy",
            "id": 132253,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Sobald dein Server gestartet ist, kannst du einen Browser verwenden, um einen Endpoint aufzurufen. Um eine Antwort zu erhalten, gib <code>http://localhost:3000/menu</code> in den Browser ein.</p><p>In unserem Fall antwortet der Server mit <code>\"Here is your menu!\"</code>.</p><webview version=\"2\" visible-if=\"always\" content=\"&lt;html&gt;&lt;body&gt;&lt;p&gt;Here is your menu!&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;\" /></body></html>"
          },
          {
            "title": "API Tools - Copy",
            "id": 132276,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Browser können einen API-Endpunkt aufrufen. Manchmal ist es jedoch effizienter, einen API-Tester zu verwenden.</p><p>Mit einem API-Tester definierst du den Typ der Anfrage (wie <code>GET</code>), die Endpunkt-URL und mehr. Bei Mimo stellen wir einen benutzerfreundlichen zur Verfügung.</p><webview version=\"2\" visible-if=\"always\" content=\"&lt;!doctype html&gt;&#xA;&lt;html lang=&quot;en&quot;&gt;&#xA;&lt;head&gt;&#xA;  &lt;meta charset=&quot;UTF-8&quot;&gt;&#xA;  &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;&#xA;  &lt;title&gt;Simple API Tester&lt;/title&gt;&#xA;  &lt;link href=&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.2.2/dist/css/bootstrap.min.css&quot; rel=&quot;stylesheet&quot;&gt;&#xA;  &lt;style&gt;&#xA;    body {&#xA;      padding: 20px;&#xA;    }&#xA;    .response-box {&#xA;      margin-top: 20px;&#xA;      padding: 15px;&#xA;      background-color: #f8f9fa;&#xA;      border-radius: 5px;&#xA;    }&#xA;  &lt;/style&gt;&#xA;&lt;/head&gt;&#xA;&lt;body&gt;&#xA;&#xA;  &lt;div class=&quot;container&quot;&gt;&#xA;    &lt;h1&gt;API Request Tester&lt;/h1&gt;&#xA;&#xA;    &lt;form id=&quot;apiForm&quot;&gt;&#xA;      &lt;div class=&quot;input-group mb-4&quot;&gt;&#xA;        &lt;select class=&quot;form-select flex-grow-0 w-auto&quot; id=&quot;methodSelect&quot;&gt;&#xA;          &lt;option value=&quot;GET&quot; selected&gt;GET&lt;/option&gt;&#xA;          &lt;option value=&quot;POST&quot; disabled&gt;POST&lt;/option&gt;&#xA;          &lt;option value=&quot;PUT&quot; disabled&gt;PUT&lt;/option&gt;&#xA;          &lt;option value=&quot;DELETE&quot; disabled&gt;DELETE&lt;/option&gt;&#xA;        &lt;/select&gt;&#xA;        &lt;input id=&quot;urlInput&quot; required class=&quot;form-control&quot; type=&quot;url&quot; value=&quot;http://localhost:3000/menu&quot; /&gt;&#xA;        &lt;button id=&quot;sendRequest&quot; type=&quot;submit&quot; class=&quot;btn btn-primary&quot;&gt;Send&lt;/button&gt;&#xA;      &lt;/div&gt;&#xA;    &lt;/form&gt;&#xA;&#xA;    &lt;div id=&quot;response&quot; class=&quot;response-box d-none&quot;&gt;&#xA;      &lt;h3&gt;Response&lt;/h3&gt;&#xA;      &lt;br&gt;&#xA;      &lt;p&gt;&lt;strong&gt;Status:&lt;/strong&gt; &lt;span id=&quot;status&quot;&gt;200 OK&lt;/span&gt;&lt;/p&gt;&#xA;      &lt;p&gt;&lt;strong&gt;Response:&lt;/strong&gt; &lt;span id=&quot;responseBody&quot;&gt;200 OK&lt;/span&gt;&lt;/p&gt;&#xA;    &lt;/div&gt;&#xA;  &lt;/div&gt;&#xA;&#xA;  &lt;script&gt;&#xA;    document.getElementById('apiForm').addEventListener('submit', function(e) {&#xA;      e.preventDefault();&#xA;&#xA;      // Get the selected method and URL&#xA;      const method = document.getElementById('methodSelect').value;&#xA;      const url = document.getElementById('urlInput').value;&#xA;&#xA;      if (method === 'GET') {&#xA;        // Simulate a GET request and a simple string response&#xA;        const responseBody = &quot;Here is your menu!&quot;;&#xA;&#xA;        // Display the simulated response&#xA;        document.getElementById('responseBody').innerText = responseBody;&#xA;        document.getElementById('status').innerText = '200 OK';&#xA;        document.getElementById('response').classList.remove('d-none');&#xA;      } else {&#xA;        alert('Only GET requests are supported in this example.');&#xA;      }&#xA;    });&#xA;  &lt;/script&gt;&#xA;&#xA;&lt;/body&gt;&#xA;&lt;/html&gt;&#xA;\" /></body></html>"
          },
          {
            "title": "API Tools",
            "id": 119260,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Wenn du die Antwort analysierst, die der API-Tester uns zurückgibt, siehst du einen <em>Status</em>, der auf <code>200 OK</code> gesetzt ist.</p><p>APIs senden einen Statuscode zurück, um schnell zu identifizieren, ob alles nach Plan verlaufen ist. <code>200 OK</code> ist die Standardantwort für <code>GET</code>-Anfragen.</p><webview version=\"2\" visible-if=\"always\" content=\"&lt;!doctype html&gt;&#xA;&lt;html lang=&quot;en&quot;&gt;&#xA;&lt;head&gt;&#xA;  &lt;meta charset=&quot;UTF-8&quot;&gt;&#xA;  &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;&#xA;  &lt;title&gt;Simple API Tester&lt;/title&gt;&#xA;  &lt;link href=&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.2.2/dist/css/bootstrap.min.css&quot; rel=&quot;stylesheet&quot;&gt;&#xA;  &lt;style&gt;&#xA;    body {&#xA;      padding: 20px;&#xA;    }&#xA;    .response-box {&#xA;      margin-top: 20px;&#xA;      padding: 15px;&#xA;      background-color: #f8f9fa;&#xA;      border-radius: 5px;&#xA;    }&#xA;  &lt;/style&gt;&#xA;&lt;/head&gt;&#xA;&lt;body&gt;&#xA;&#xA;  &lt;div class=&quot;container&quot;&gt;&#xA;    &lt;h1&gt;API Request Tester&lt;/h1&gt;&#xA;&#xA;    &lt;form id=&quot;apiForm&quot;&gt;&#xA;      &lt;div class=&quot;input-group mb-4&quot;&gt;&#xA;        &lt;select class=&quot;form-select flex-grow-0 w-auto&quot; id=&quot;methodSelect&quot;&gt;&#xA;          &lt;option value=&quot;GET&quot; selected&gt;GET&lt;/option&gt;&#xA;          &lt;option value=&quot;POST&quot; disabled&gt;POST&lt;/option&gt;&#xA;          &lt;option value=&quot;PUT&quot; disabled&gt;PUT&lt;/option&gt;&#xA;          &lt;option value=&quot;DELETE&quot; disabled&gt;DELETE&lt;/option&gt;&#xA;        &lt;/select&gt;&#xA;        &lt;input id=&quot;urlInput&quot; required class=&quot;form-control&quot; type=&quot;url&quot; value=&quot;http://localhost:3000/menu&quot; /&gt;&#xA;        &lt;button id=&quot;sendRequest&quot; type=&quot;submit&quot; class=&quot;btn btn-primary&quot;&gt;Send&lt;/button&gt;&#xA;      &lt;/div&gt;&#xA;    &lt;/form&gt;&#xA;&#xA;    &lt;div id=&quot;response&quot; class=&quot;response-box d-none&quot;&gt;&#xA;      &lt;h3&gt;Response&lt;/h3&gt;&#xA;      &lt;br&gt;&#xA;      &lt;p&gt;&lt;strong&gt;Status:&lt;/strong&gt; &lt;span id=&quot;status&quot;&gt;200 OK&lt;/span&gt;&lt;/p&gt;&#xA;      &lt;p&gt;&lt;strong&gt;Response:&lt;/strong&gt; &lt;span id=&quot;responseBody&quot;&gt;200 OK&lt;/span&gt;&lt;/p&gt;&#xA;    &lt;/div&gt;&#xA;  &lt;/div&gt;&#xA;&#xA;  &lt;script&gt;&#xA;    document.getElementById('apiForm').addEventListener('submit', function(e) {&#xA;      e.preventDefault();&#xA;&#xA;      // Get the selected method and URL&#xA;      const method = document.getElementById('methodSelect').value;&#xA;      const url = document.getElementById('urlInput').value;&#xA;&#xA;      if (method === 'GET') {&#xA;        // Simulate a GET request and a simple string response&#xA;        const responseBody = &quot;Here is your menu!&quot;;&#xA;&#xA;        // Display the simulated response&#xA;        document.getElementById('responseBody').innerText = responseBody;&#xA;        document.getElementById('status').innerText = '200 OK';&#xA;        document.getElementById('response').classList.remove('d-none');&#xA;      } else {&#xA;        alert('Only GET requests are supported in this example.');&#xA;      }&#xA;    });&#xA;  &lt;/script&gt;&#xA;&#xA;&lt;/body&gt;&#xA;&lt;/html&gt;&#xA;\" /></body></html>"
          },
          {
            "title": "Lesson #11",
            "id": 132274,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Was ist die Rolle des API-Aufrufers?</p><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\">Das Programm oder der Benutzer, der die Anfrage an die API stellt</item><item value=\"2\" correct=\"false\">Der Server, der die Anfrage empfängt</item><item value=\"3\" correct=\"false\">Die Funktion zur Behandlung von API-Fehlern</item></selection><p visible-if=\"wrong\">Das Programm oder der Benutzer, der die Anfrage an die API stellt.</p></body></html>"
          },
          {
            "title": "Lesson #11",
            "id": 132275,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Wie startest du einen Express-Server vom Terminal aus?</p><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\"><code>node app.js</code></item><item value=\"2\" correct=\"false\"><code>npm install</code></item><item value=\"3\" correct=\"false\"><code>express start</code></item></selection><p visible-if=\"wrong\"><code>node app.js</code>.</p></body></html>"
          },
          {
            "title": "Lesson #13",
            "id": 132277,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Was bedeutet ein Statuscode <code>200 OK</code> in einer API-Antwort?</p><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\">Die Anfrage war erfolgreich, und der Server hat die angeforderten Daten gesendet</item><item value=\"2\" correct=\"false\">Die Anfrage war ungültig</item><item value=\"3\" correct=\"false\">Der Server kann die angeforderte Ressource nicht finden</item></selection><p visible-if=\"wrong\">Die Anfrage war erfolgreich, und der Server hat die angeforderten Daten gesendet.</p></body></html>"
          }
        ]
      },
      {
        "id": 13270,
        "title": "Einen API mit fetch aufrufen",
        "type": "practiceLevel1",
        "lessons": [
          {
            "title": "Intro",
            "id": 119529,
            "contentType": "interactive",
            "images": [
              {
                "id": "51cdb5e9-febe-4d11-a6a4-2f8761c9b60e"
              }
            ],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Jetzt, da du weißt, wie eine API funktioniert, ist es an der Zeit zu lernen, wie man eine Anfrage an sie sendet.</p><img src=\"51cdb5e9-febe-4d11-a6a4-2f8761c9b60e\" visible-if=\"always\" /></body></html>"
          },
          {
            "title": "fetch()",
            "id": 119262,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Node hat eine eingebaute Methode zum Senden von Anfragen an APIs: <code>fetch</code>. Versuche, die <code>GET</code>-Anfrage mit <code>fetch</code> zu vervollständigen.</p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"fetch(\" /><text value=\"&quot;http://localhost:3000/menu&quot;\" class=\"string\" /><text value=\");\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"0\" endIndex=\"5\" /></options></interaction></interactions></code><p visible-if=\"wrong\">Wähle <code>fetch</code> aus.</p></body></html>"
          },
          {
            "title": "fetch() 2",
            "id": 119343,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p><code>fetch</code> verwendet standardmäßig <code>GET</code>, aber wir können die <code>method</code> ändern oder explizit <code>GET</code> festlegen.</p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"fetch(\" /><text value=\"&quot;http://localhost:3000/menu&quot;\" class=\"string\" /><text value=\", { \" /><text type=\"break\" /><text value=\" \" /><text value=\"method\" class=\"attr\" /><text value=\": \" /><text value=\"&quot;GET&quot;\" class=\"string\" /><text value=\" \" /><text type=\"break\" /><text value=\"});\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"0\" endIndex=\"5\" /><option startIndex=\"49\" endIndex=\"52\" /></options></interaction></interactions></code><p visible-if=\"wrong\">Wähle <code>fetch</code>, gefolgt von <code>GET</code> aus.</p></body></html>"
          },
          {
            "title": "fetch() 2 - Copy",
            "id": 132278,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Beim Verwenden von <code>fetch</code> definieren wir zuerst den Endpunkt, den wir aufrufen möchten.</p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"fetch(\" /><text value=\"&quot;http://localhost:3000/menu&quot;\" class=\"string\" /><text value=\");\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"0\" endIndex=\"5\" /><option startIndex=\"6\" endIndex=\"34\" /></options></interaction></interactions></code><p visible-if=\"wrong\">Wähle <code>fetch</code>, gefolgt von <code>\"http://localhost:3000/menu\"</code> aus.</p></body></html>"
          },
          {
            "title": "fetch() 2 - Copy - Copy",
            "id": 132279,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Als nächstes verwenden wir <code>.then</code>, um die Antwort des Servers zu verarbeiten. Sobald die Anfrage erfolgreich ist, wird die Callback-Methode aufgerufen.</p><p>Eine Callback-Methode ist eine Funktion, die du einer anderen Funktion übergibst, damit sie später aufgerufen wird.</p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"fetch(\" /><text value=\"&quot;http://localhost:3000/menu&quot;\" class=\"string\" /><text value=\") \" /><text type=\"break\" /><text value=\" .then(\" /><text value=\"(\" /><text value=\"response\" class=\"params\" /><text value=\") =&gt;\" /><text value=\" { });\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"38\" endIndex=\"43\" /><option startIndex=\"44\" endIndex=\"61\" /></options></interaction></interactions><output><content><text value=\"API Request successfully sent!\" /></content></output></code><p visible-if=\"wrong\">Wähle <code>.then</code>, gefolgt von <code>(response) =&gt; { }</code> aus.</p></body></html>"
          },
          {
            "title": "fetch() 2 - Copy - Copy - Copy",
            "id": 132303,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Sobald die Anfrage erfolgreich ist, protokollieren wir die erfolgreich gesendete API-Anfrage mit der Callback-Methode.</p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"fetch(\" /><text value=\"&quot;http://localhost:3000/menu&quot;\" class=\"string\" /><text value=\") \" /><text type=\"break\" /><text value=\" .then(\" /><text value=\"(\" /><text value=\"response\" class=\"params\" /><text value=\") =&gt;\" /><text value=\" { \" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;API Request successfully sent!&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"});\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"62\" endIndex=\"108\" /><option startIndex=\"44\" endIndex=\"59\" /><option startIndex=\"110\" endIndex=\"111\" /></options></interaction></interactions><output><content><text value=\"API Request successfully sent!\" /></content></output></code><p visible-if=\"wrong\">Wähle <code>(response) =&gt; {</code>, gefolgt von <code>console.log(\"API Request successfully sent!\");</code> und schließlich <code>}</code> aus.</p></body></html>"
          },
          {
            "title": "fetch() 2 - Copy - Copy - Copy",
            "id": 132280,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Wir erhalten ein <code>response</code>-Objekt zurück. Es enthält Informationen über die Anfrage, wie zum Beispiel ihren Status und alle Daten, die der Server zurückgegeben hat.</p><p>Protokolliere das Antwortobjekt, um zu sehen, was es enthält.</p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"fetch(\" /><text value=\"&quot;http://localhost:3000/menu&quot;\" class=\"string\" /><text value=\") \" /><text type=\"break\" /><text value=\" .then(\" /><text value=\"(\" /><text value=\"response\" class=\"params\" /><text value=\") =&gt;\" /><text value=\" { \" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(response); \" /><text type=\"break\" /><text value=\"});\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"62\" endIndex=\"74\" /><option startIndex=\"74\" endIndex=\"82\" /><option startIndex=\"82\" endIndex=\"84\" /></options></interaction></interactions><output><content><text value=\"{type: &quot;cors&quot;, url: &quot;http://localhost:3000/menu&quot;, status: 200, statusText: &quot;OK&quot;, ...}\" /></content></output></code><p visible-if=\"wrong\">Wähle <code>console.log(</code>, gefolgt von <code>response</code> und schließlich <code>);</code> aus.</p></body></html>"
          },
          {
            "title": "Question 3",
            "id": 119346,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Wofür können wir <code>fetch</code> verwenden?</p><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\">API-Aufrufe an externe Server durchführen</item><item value=\"2\" correct=\"false\">Zugriff auf lokale Dateisystemdaten<br /></item><item value=\"3\" correct=\"false\">Ausführen von Datenbankabfragen</item><item value=\"4\" correct=\"false\">Manipulieren von DOM-Elementen</item></selection><p visible-if=\"wrong\">API-Aufrufe an externe Server durchführen.</p></body></html>"
          },
          {
            "title": "Example 1",
            "id": 119347,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Schreibe den Code, um eine <code>GET</code>-Anfrage an den <code>/menu</code>-Endpunkt auf localhost mit <code>fetch</code> zu senden.</p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"fetch(\" /><text value=\"&quot;http://localhost:3000/menu&quot;\" class=\"string\" /><text value=\") \" /><text type=\"break\" /><text value=\" .then(\" /><text value=\"(\" /><text value=\"response\" class=\"params\" /><text value=\") =&gt;\" /><text value=\" { \" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;API Request successfully sent!&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"});\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"0\" endIndex=\"5\" /><option startIndex=\"7\" endIndex=\"28\" /><option startIndex=\"28\" endIndex=\"33\" /><option correct=\"false\"><content><text value=\"GET\" /></content></option><option correct=\"false\"><content><text value=\"/users\" /></content></option></options></interaction></interactions><output><content><text value=\"API Request successfully sent!\" /></content></output></code><p visible-if=\"wrong\">Wähle <code>fetch</code>, gefolgt von <code>http://localhost:3000</code> und schließlich <code>/menu</code> aus.</p></body></html>"
          },
          {
            "title": "Lesson #10",
            "id": 132281,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Im Kontext von <code>fetch</code>, was ist der Zweck der <code>.then</code>-Methode?</p><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\">Um die Antwort des Servers zu verarbeiten, wenn sie empfangen wird</item><item value=\"2\" correct=\"false\">Um die Anfrage an den Server zu senden</item><item value=\"3\" correct=\"false\">Um zu überprüfen, ob der Server ausgefallen ist</item></selection><p visible-if=\"wrong\">Um die Antwort des Servers zu verarbeiten, wenn sie empfangen wird.</p></body></html>"
          },
          {
            "title": "Example 2",
            "id": 119348,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Schreibe den Code, um eine <code>GET</code>-Anfrage an <code>http://localhost:3000/menu</code> mit <code>fetch</code> zu senden.</p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"fetch(\" /><text value=\"&quot;http://localhost:3000/menu&quot;\" class=\"string\" /><text value=\", { \" /><text type=\"break\" /><text value=\" \" /><text value=\"method\" class=\"attr\" /><text value=\": \" /><text value=\"&quot;GET&quot;\" class=\"string\" /><text value=\" \" /><text type=\"break\" /><text value=\"}).then(\" /><text value=\"(\" /><text value=\"response\" class=\"params\" /><text value=\") =&gt;\" /><text value=\" { \" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;API Request successfully sent!&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"});\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"40\" endIndex=\"46\" /><option startIndex=\"48\" endIndex=\"49\" /><option startIndex=\"49\" endIndex=\"52\" /><option startIndex=\"52\" endIndex=\"53\" /><option correct=\"false\"><content><text value=\"endpoint\" /></content></option></options></interaction></interactions></code><p visible-if=\"wrong\">Wähle <code>method</code>, gefolgt von <code>\"</code> und schließlich <code>GET</code>, <code>\"</code> aus.</p></body></html>"
          },
          {
            "title": "Lesson #11",
            "id": 132282,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Welche der folgenden Optionen können aus dem <code>response</code>-Objekt in einer <code>fetch</code>-Anfrage abgerufen werden?</p><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\">Der Statuscode des Servers (z.B. <code>200</code>)</item><item value=\"2\" correct=\"false\">Die Anfragemethode (z.B. <code>GET</code>)</item></selection><p visible-if=\"wrong\">Der Statuscode des Servers (z.B. <code>200</code>).</p></body></html>"
          }
        ]
      }
    ]
  }
}