{
  "tutorial": {
    "id": 1914,
    "version": 11,
    "type": "guidedProjectOptional",
    "isNew": false,
    "codeLanguage": "jsx",
    "title": "Single-Page-Anwendung",
    "descriptionContent": "Verwende React, um eine einfache Single-Page-Application-Website zu erstellen",
    "shortDescriptionContent": "",
    "showInTrack": true,
    "iconBanner": "tutorial-1914-icon-banner.svg",
    "chapters": [
      {
        "id": 12483,
        "title": "Single-Page-Anwendung",
        "type": "practiceLevel3",
        "lessons": [
          {
            "title": "Step 1 - Preparation",
            "id": 114677,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "In diesem Projekt arbeiten wir an der **Camera Tips**-Website, die aus vier Webseiten besteht: `Home`, `ShutterSpeed`, `Aperture` und `ISO`. Diese Seiten sind als funktionale Komponenten in der Datei `pages.jsx` dargestellt.\n\nDie `App`-Komponente in `index.jsx` ist die übergeordnete Komponente. Alle vier Webseiten werden in `index.jsx` gerendert. Zunächst müssen wir die vier Webseiten in `index.jsx` importieren.\n\n1. `importiere` die vier Komponenten aus `pages.jsx` in `index.jsx`.\n2. Füge vorerst nur die `<Home />`-Komponente unterhalb des `<h1>`-Überschriftselements in `App` hinzu.",
              "preselectedFileIndex": 1,
              "hasVisualOutput": true,
              "files": [
                {
                  "name": "index.html",
                  "codeLanguage": "html",
                  "content": "<!doctype html>\n<html>\n  <head>\n    <style>\n      html,\n      body {\n        margin: 0;\n        padding: 0;\n        background-color: #fefef1;\n      }\n      \n      a {\n        text-decoration: underline;\n        color: blue;\n      }\n      \n      a:hover {\n        cursor: pointer;\n      }\n    </style>\n    <script type=\"module\" src=\"./index.js\"></script>\n  </head>\n  <body>\n    <div id=\"root\"></div>\n  </body>\n</html>",
                  "solvedContent": null
                },
                {
                  "name": "index.jsx",
                  "codeLanguage": "jsx",
                  "content": "import React from \"react\";\nimport { createRoot } from \"react-dom/client\";\n\nimport { wrapperStyle } from \"./styles.jsx\";\n\nconst App = () => {\n  return (\n    <div style={wrapperStyle.wrapper}>\n      <h1>Camera Tips</h1>\n    </div>\n  );\n};\n\nconst rootElement = document.getElementById(\"root\");\nconst root = createRoot(rootElement);\nroot.render(<App />);\n\nexport default App;",
                  "solvedContent": "import React from \"react\";\nimport { createRoot } from \"react-dom/client\";\n\nimport { wrapperStyle } from \"./styles.jsx\";\nimport { Home, Aperture, ShutterSpeed, ISO } from \"./pages.jsx\";\n\nconst App = () => {\n  return (\n    <div style={wrapperStyle.wrapper}>\n      <h1>Camera Tips</h1>\n      <Home />\n    </div>\n  );\n};\n\nconst rootElement = document.getElementById(\"root\");\nconst root = createRoot(rootElement);\nroot.render(<App />);\n\nexport default App;"
                },
                {
                  "name": "pages.jsx",
                  "codeLanguage": "jsx",
                  "content": "import React from \"react\";\nimport { pageStyle } from \"./styles\";\n\nconst Home = () => {\n  return (\n    <div>\n      <p>\n        Want a quick guide on how to take good photos? Confused about photo\n        terms? You've come to the right place!\n      </p>\n    </div>\n  );\n};\n\nconst ShutterSpeed = () => {\n  return (\n    <div>\n      <h3>Shutter Speed</h3>\n      <p>\n        <strong>Shutter Speed</strong> is how quickly your camera takes the\n        picture.\n      </p>\n      <div style={pageStyle.table}>\n        <div style={pageStyle.row}>\n          <div style={pageStyle.column}>\n            <strong>Fast Shutter Speed:</strong>\n          </div>\n          <div style={pageStyle.column}>\n            <strong>Slow Shutter Speed:</strong>\n          </div>\n        </div>\n        <div style={pageStyle.row}>\n          <div style={pageStyle.column}>\n            Clearer subjects when they are moving. Darker picture because less\n            light can enter your camera.\n          </div>\n          <div style={pageStyle.column}>\n            Blurrier subjects when they are moving. Brighter pictures because\n            more light can enter your camera.\n          </div>\n        </div>\n      </div>\n      <p>\n        A shutter speed of 1/60 is the lowest speed you can get for a bright\n        photo that isn't noticeably blurry.\n      </p>\n    </div>\n  );\n};\n\nconst Aperture = () => {\n  return (\n    <div>\n      <h3>Aperture</h3>\n      <p>\n        The <strong>Aperture</strong> is the camera lens' opening that allows\n        light in. The measurement of that opening is called the{\" \"}\n        <strong>F-Stop</strong>. The Aperture and F-Stop are inversely\n        proportional.\n      </p>\n      <div style={pageStyle.table}>\n        <div style={pageStyle.row}>\n          <div style={pageStyle.column}>\n            <strong>Low F-Stop / High Aperture:</strong>\n          </div>\n          <div style={pageStyle.column}>\n            <strong>High F-Stop / Low Aperture:</strong>\n          </div>\n        </div>\n        <div style={pageStyle.row}>\n          <div style={pageStyle.column}>\n            Your Depth of Field is very narrow; your pictures will be brighter\n            and will have foreground and background blur.\n          </div>\n          <div style={pageStyle.column}>\n            Your Depth of Field is very wide; your pictures will be darker but\n            will have less blurred backgrounds and foregrounds.\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nconst ISO = () => {\n  return (\n    <div>\n      <h3>ISO</h3>\n      <p>\n        Your camera's <strong>ISO</strong> is a measure of how sensitive your\n        camera's sensors are to light.\n      </p>\n      <p>\n        Increasing your camera's ISO makes your pictures brighter, but it also\n        increases their <strong>noise</strong>, or their grainy-ness. This is\n        why night photos, which usually are taken with high ISO, have black dots\n        when you look closely.\n      </p>\n      <div style={pageStyle.table}>\n        <div style={pageStyle.row}>\n          <div style={pageStyle.column}>\n            <strong>Low ISO:</strong>\n          </div>\n          <div style={pageStyle.column}>\n            <strong>High ISO:</strong>\n          </div>\n        </div>\n        <div style={pageStyle.row}>\n          <div style={pageStyle.column}>\n            Your camera's sensors are not very sensitive, reducing overall\n            brightness. This makes your pictures less noisy though.\n          </div>\n          <div style={pageStyle.column}>\n            Your camera's sensors are very sensitive to light, meaning brighter\n            images. However, this make your pictures more noisy.\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport { Home, Aperture, ShutterSpeed, ISO };",
                  "solvedContent": null
                },
                {
                  "name": "navigation.jsx",
                  "codeLanguage": "jsx",
                  "content": "import React from \"react\";\nimport { navStyle } from \"./styles.jsx\";\n\nconst Navigation = (props) => {\n  return (\n    <nav style={navStyle.nav}>\n      <button style={navStyle.navLink}>Home</button>\n      <button style={navStyle.navLink}>Aperture</button>\n      <button style={navStyle.navLink}>Shutter Speed</button>\n      <button style={navStyle.navLink}>ISO</button>\n    </nav>\n  );\n};\n\nexport default Navigation;",
                  "solvedContent": null
                },
                {
                  "name": "styles.jsx",
                  "codeLanguage": "jsx",
                  "content": "const wrapperStyle = {\n  wrapper: {\n    width: \"100%\",\n    fontFamily: \"Times New Roman, Verdana, Arial, sans-serif\",\n    fontSize: 16,\n    padding: 16,\n    boxSizing: \"border-box\",\n    textAlign: \"center\",\n  },\n};\n\nconst navStyle = {\n  nav: {\n    textAlign: \"center\",\n    display: \"flex\",\n    flexDirection: \"row\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    flexWrap: \"nowrap\",\n  },\n  navLink: {\n    flexBasis: \"100\",\n    flexShrink: \"1\",\n    margin: 2,\n    paddingLeft: 8,\n    paddingRight: 8,\n    paddingTop: 4,\n    paddingBottom: 4,\n    fontSize: 12,\n  },\n};\n\nconst pageStyle = {\n  table: {\n    width: \"100%\",\n    display: \"flex\",\n    flexDirection: \"column\",\n    flexWrap: \"nowrap\",\n    justifyContent: \"flex-start\",\n    alignItems: \"stretch\",\n  },\n  row: {\n    width: \"100%\",\n    marginBottom: 4,\n    display: \"flex\",\n    flexDirection: \"row\",\n    flexWrap: \"nowrap\",\n    justifyContent: \"space-between\",\n    alignItems: \"flex-start\",\n  },\n  column: {\n    flexBasis: \"50%\",\n    flexShrink: 1,\n    flexGrow: 0,\n    marginLeft: 4,\n    marginRight: 4,\n  },\n};\n\nexport { wrapperStyle, navStyle, pageStyle };",
                  "solvedContent": null
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Step 2 - import `react-router-dom`",
            "id": 114678,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Mit `react-router-dom`, einem NPM-Paket, ist es einfach, eine SPA mit React zu erstellen. `react-router-dom` rendert das JSX basierend auf der bereitgestellten URL und ahmt normale Websites und Webseiten nach. Allerdings erfordert `react-router-dom` kein Neuladen der Seite, was Speicher spart und den Internetverkehr reduziert.\n\nWir müssen `react-router-dom` in unser Projekt importieren, ähnlich wie `React` und `ReactDOM`. Insbesondere sind drei Komponenten von `react-router-dom` notwendig: `BrowserRouter`, `Routes` und `Route`.\n\n1. Importiere die folgenden Komponenten aus `react-router-dom`: `BrowserRouter`, `Routes` und `Route`.",
              "preselectedFileIndex": 1,
              "hasVisualOutput": true,
              "files": [
                {
                  "name": "index.html",
                  "codeLanguage": "html",
                  "content": "<!doctype html>\n<html>\n  <head>\n    <style>\n      html,\n      body {\n        margin: 0;\n        padding: 0;\n        background-color: #fefef1;\n      }\n      \n      a {\n        text-decoration: underline;\n        color: blue;\n      }\n      \n      a:hover {\n        cursor: pointer;\n      }\n    </style>\n    <script type=\"module\" src=\"./index.js\"></script>\n  </head>\n  <body>\n    <div id=\"root\"></div>\n  </body>\n</html>",
                  "solvedContent": null
                },
                {
                  "name": "index.jsx",
                  "codeLanguage": "jsx",
                  "content": "import React from \"react\";\nimport { createRoot } from \"react-dom/client\";\n\nimport { wrapperStyle } from \"./styles.jsx\";\nimport { Home, Aperture, ShutterSpeed, ISO } from \"./pages.jsx\";\n\nconst App = () => {\n  return (\n    <div style={wrapperStyle.wrapper}>\n      <h1>Camera Tips</h1>\n      <Home />\n    </div>\n  );\n};\n\nconst rootElement = document.getElementById(\"root\");\nconst root = createRoot(rootElement);\nroot.render(<App />);\n\nexport default App;",
                  "solvedContent": "import React from \"react\";\nimport { createRoot } from \"react-dom/client\";\n\nimport { wrapperStyle } from \"./styles.jsx\";\nimport { Home, Aperture, ShutterSpeed, ISO } from \"./pages.jsx\";\nimport { BrowserRouter, Routes, Route } from \"react-router-dom\";\n\nconst App = () => {\n  return (\n    <div style={wrapperStyle.wrapper}>\n      <h1>Camera Tips</h1>\n      <Home />\n    </div>\n  );\n};\n\nconst rootElement = document.getElementById(\"root\");\nconst root = createRoot(rootElement);\nroot.render(<App />);\n\nexport default App;"
                },
                {
                  "name": "pages.jsx",
                  "codeLanguage": "jsx",
                  "content": "import React from \"react\";\nimport { pageStyle } from \"./styles\";\n\nconst Home = () => {\n  return (\n    <div>\n      <p>\n        Want a quick guide on how to take good photos? Confused about photo\n        terms? You've come to the right place!\n      </p>\n    </div>\n  );\n};\n\nconst ShutterSpeed = () => {\n  return (\n    <div>\n      <h3>Shutter Speed</h3>\n      <p>\n        <strong>Shutter Speed</strong> is how quickly your camera takes the\n        picture.\n      </p>\n      <div style={pageStyle.table}>\n        <div style={pageStyle.row}>\n          <div style={pageStyle.column}>\n            <strong>Fast Shutter Speed:</strong>\n          </div>\n          <div style={pageStyle.column}>\n            <strong>Slow Shutter Speed:</strong>\n          </div>\n        </div>\n        <div style={pageStyle.row}>\n          <div style={pageStyle.column}>\n            Clearer subjects when they are moving. Darker picture because less\n            light can enter your camera.\n          </div>\n          <div style={pageStyle.column}>\n            Blurrier subjects when they are moving. Brighter pictures because\n            more light can enter your camera.\n          </div>\n        </div>\n      </div>\n      <p>\n        A shutter speed of 1/60 is the lowest speed you can get for a bright\n        photo that isn't noticeably blurry.\n      </p>\n    </div>\n  );\n};\n\nconst Aperture = () => {\n  return (\n    <div>\n      <h3>Aperture</h3>\n      <p>\n        The <strong>Aperture</strong> is the camera lens' opening that allows\n        light in. The measurement of that opening is called the{\" \"}\n        <strong>F-Stop</strong>. The Aperture and F-Stop are inversely\n        proportional.\n      </p>\n      <div style={pageStyle.table}>\n        <div style={pageStyle.row}>\n          <div style={pageStyle.column}>\n            <strong>Low F-Stop / High Aperture:</strong>\n          </div>\n          <div style={pageStyle.column}>\n            <strong>High F-Stop / Low Aperture:</strong>\n          </div>\n        </div>\n        <div style={pageStyle.row}>\n          <div style={pageStyle.column}>\n            Your Depth of Field is very narrow; your pictures will be brighter\n            and will have foreground and background blur.\n          </div>\n          <div style={pageStyle.column}>\n            Your Depth of Field is very wide; your pictures will be darker but\n            will have less blurred backgrounds and foregrounds.\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nconst ISO = () => {\n  return (\n    <div>\n      <h3>ISO</h3>\n      <p>\n        Your camera's <strong>ISO</strong> is a measure of how sensitive your\n        camera's sensors are to light.\n      </p>\n      <p>\n        Increasing your camera's ISO makes your pictures brighter, but it also\n        increases their <strong>noise</strong>, or their grainy-ness. This is\n        why night photos, which usually are taken with high ISO, have black dots\n        when you look closely.\n      </p>\n      <div style={pageStyle.table}>\n        <div style={pageStyle.row}>\n          <div style={pageStyle.column}>\n            <strong>Low ISO:</strong>\n          </div>\n          <div style={pageStyle.column}>\n            <strong>High ISO:</strong>\n          </div>\n        </div>\n        <div style={pageStyle.row}>\n          <div style={pageStyle.column}>\n            Your camera's sensors are not very sensitive, reducing overall\n            brightness. This makes your pictures less noisy though.\n          </div>\n          <div style={pageStyle.column}>\n            Your camera's sensors are very sensitive to light, meaning brighter\n            images. However, this make your pictures more noisy.\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport { Home, Aperture, ShutterSpeed, ISO };",
                  "solvedContent": null
                },
                {
                  "name": "navigation.jsx",
                  "codeLanguage": "jsx",
                  "content": "import React from \"react\";\nimport { navStyle } from \"./styles.jsx\";\n\nconst Navigation = (props) => {\n  return (\n    <nav style={navStyle.nav}>\n      <button style={navStyle.navLink}>Home</button>\n      <button style={navStyle.navLink}>Aperture</button>\n      <button style={navStyle.navLink}>Shutter Speed</button>\n      <button style={navStyle.navLink}>ISO</button>\n    </nav>\n  );\n};\n\nexport default Navigation;",
                  "solvedContent": null
                },
                {
                  "name": "styles.jsx",
                  "codeLanguage": "jsx",
                  "content": "const wrapperStyle = {\n  wrapper: {\n    width: \"100%\",\n    fontFamily: \"Times New Roman, Verdana, Arial, sans-serif\",\n    fontSize: 16,\n    padding: 16,\n    boxSizing: \"border-box\",\n    textAlign: \"center\",\n  },\n};\n\nconst navStyle = {\n  nav: {\n    textAlign: \"center\",\n    display: \"flex\",\n    flexDirection: \"row\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    flexWrap: \"nowrap\",\n  },\n  navLink: {\n    flexBasis: \"100\",\n    flexShrink: \"1\",\n    margin: 2,\n    paddingLeft: 8,\n    paddingRight: 8,\n    paddingTop: 4,\n    paddingBottom: 4,\n    fontSize: 12,\n  },\n};\n\nconst pageStyle = {\n  table: {\n    width: \"100%\",\n    display: \"flex\",\n    flexDirection: \"column\",\n    flexWrap: \"nowrap\",\n    justifyContent: \"flex-start\",\n    alignItems: \"stretch\",\n  },\n  row: {\n    width: \"100%\",\n    marginBottom: 4,\n    display: \"flex\",\n    flexDirection: \"row\",\n    flexWrap: \"nowrap\",\n    justifyContent: \"space-between\",\n    alignItems: \"flex-start\",\n  },\n  column: {\n    flexBasis: \"50%\",\n    flexShrink: 1,\n    flexGrow: 0,\n    marginLeft: 4,\n    marginRight: 4,\n  },\n};\n\nexport { wrapperStyle, navStyle, pageStyle };",
                  "solvedContent": null
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Step 3 - BrowserRouter, Routes, Route",
            "id": 114681,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Mit `react-dom-router` importiert, müssen wir als nächstes die notwendigen Komponenten von `react-router-dom` in `App` hinzufügen.\n\n1. In `App` umschließe den gesamten vorhandenen JSX mit einer neuen `<BrowserRouter>` Wrapper-Komponente.\n2. Unterhalb des `<h1>` Headers umschließe die `<Home />` Komponente mit einer neuen `<Routes>` Wrapper-Komponente.\n3. Ersetze `<Home />` mit dem folgenden Code:\n```jsx\n<Route exact path=\"/\" element={ <Home /> } />\n```\n\n_Die Änderungen sind möglicherweise nicht sofort offensichtlich, wenn wir diese Schritte abschließen. Wenn wir jedoch nach diesen Schritten immer noch den Inhalt von `<Home />` sehen, sind wir auf dem richtigen Weg._",
              "preselectedFileIndex": 1,
              "hasVisualOutput": true,
              "files": [
                {
                  "name": "index.html",
                  "codeLanguage": "html",
                  "content": "<!doctype html>\n<html>\n  <head>\n    <style>\n      html,\n      body {\n        margin: 0;\n        padding: 0;\n        background-color: #fefef1;\n      }\n      \n      a {\n        text-decoration: underline;\n        color: blue;\n      }\n      \n      a:hover {\n        cursor: pointer;\n      }\n    </style>\n    <script type=\"module\" src=\"./index.js\"></script>\n  </head>\n  <body>\n    <div id=\"root\"></div>\n  </body>\n</html>",
                  "solvedContent": null
                },
                {
                  "name": "index.jsx",
                  "codeLanguage": "jsx",
                  "content": "import React from \"react\";\nimport { createRoot } from \"react-dom/client\";\n\nimport { wrapperStyle } from \"./styles.jsx\";\nimport { Home, Aperture, ShutterSpeed, ISO } from \"./pages.jsx\";\nimport { BrowserRouter, Routes, Route } from \"react-router-dom\";\n\nconst App = () => {\n  return (\n    <div style={wrapperStyle.wrapper}>\n      <h1>Camera Tips</h1>\n      <Home />\n    </div>\n  );\n};\n\nconst rootElement = document.getElementById(\"root\");\nconst root = createRoot(rootElement);\nroot.render(<App />);\n\nexport default App;",
                  "solvedContent": "import React from \"react\";\nimport { createRoot } from \"react-dom/client\";\n\nimport { wrapperStyle } from \"./styles.jsx\";\nimport { Home, Aperture, ShutterSpeed, ISO } from \"./pages.jsx\";\nimport { BrowserRouter, Routes, Route } from \"react-router-dom\";\n\nconst App = () => {\n  return (\n    <BrowserRouter>\n      <div style={wrapperStyle.wrapper}>\n        <h1>Camera Tips</h1>\n        <Routes>\n          <Route exact path=\"/\" element={<Home />} />\n        </Routes>\n      </div>\n    </BrowserRouter>\n  );\n};\n\nconst rootElement = document.getElementById(\"root\");\nconst root = createRoot(rootElement);\nroot.render(<App />);\n\nexport default App;"
                },
                {
                  "name": "pages.jsx",
                  "codeLanguage": "jsx",
                  "content": "import React from \"react\";\nimport { pageStyle } from \"./styles\";\n\nconst Home = () => {\n  return (\n    <div>\n      <p>\n        Want a quick guide on how to take good photos? Confused about photo\n        terms? You've come to the right place!\n      </p>\n    </div>\n  );\n};\n\nconst ShutterSpeed = () => {\n  return (\n    <div>\n      <h3>Shutter Speed</h3>\n      <p>\n        <strong>Shutter Speed</strong> is how quickly your camera takes the\n        picture.\n      </p>\n      <div style={pageStyle.table}>\n        <div style={pageStyle.row}>\n          <div style={pageStyle.column}>\n            <strong>Fast Shutter Speed:</strong>\n          </div>\n          <div style={pageStyle.column}>\n            <strong>Slow Shutter Speed:</strong>\n          </div>\n        </div>\n        <div style={pageStyle.row}>\n          <div style={pageStyle.column}>\n            Clearer subjects when they are moving. Darker picture because less\n            light can enter your camera.\n          </div>\n          <div style={pageStyle.column}>\n            Blurrier subjects when they are moving. Brighter pictures because\n            more light can enter your camera.\n          </div>\n        </div>\n      </div>\n      <p>\n        A shutter speed of 1/60 is the lowest speed you can get for a bright\n        photo that isn't noticeably blurry.\n      </p>\n    </div>\n  );\n};\n\nconst Aperture = () => {\n  return (\n    <div>\n      <h3>Aperture</h3>\n      <p>\n        The <strong>Aperture</strong> is the camera lens' opening that allows\n        light in. The measurement of that opening is called the{\" \"}\n        <strong>F-Stop</strong>. The Aperture and F-Stop are inversely\n        proportional.\n      </p>\n      <div style={pageStyle.table}>\n        <div style={pageStyle.row}>\n          <div style={pageStyle.column}>\n            <strong>Low F-Stop / High Aperture:</strong>\n          </div>\n          <div style={pageStyle.column}>\n            <strong>High F-Stop / Low Aperture:</strong>\n          </div>\n        </div>\n        <div style={pageStyle.row}>\n          <div style={pageStyle.column}>\n            Your Depth of Field is very narrow; your pictures will be brighter\n            and will have foreground and background blur.\n          </div>\n          <div style={pageStyle.column}>\n            Your Depth of Field is very wide; your pictures will be darker but\n            will have less blurred backgrounds and foregrounds.\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nconst ISO = () => {\n  return (\n    <div>\n      <h3>ISO</h3>\n      <p>\n        Your camera's <strong>ISO</strong> is a measure of how sensitive your\n        camera's sensors are to light.\n      </p>\n      <p>\n        Increasing your camera's ISO makes your pictures brighter, but it also\n        increases their <strong>noise</strong>, or their grainy-ness. This is\n        why night photos, which usually are taken with high ISO, have black dots\n        when you look closely.\n      </p>\n      <div style={pageStyle.table}>\n        <div style={pageStyle.row}>\n          <div style={pageStyle.column}>\n            <strong>Low ISO:</strong>\n          </div>\n          <div style={pageStyle.column}>\n            <strong>High ISO:</strong>\n          </div>\n        </div>\n        <div style={pageStyle.row}>\n          <div style={pageStyle.column}>\n            Your camera's sensors are not very sensitive, reducing overall\n            brightness. This makes your pictures less noisy though.\n          </div>\n          <div style={pageStyle.column}>\n            Your camera's sensors are very sensitive to light, meaning brighter\n            images. However, this make your pictures more noisy.\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport { Home, Aperture, ShutterSpeed, ISO };",
                  "solvedContent": null
                },
                {
                  "name": "navigation.jsx",
                  "codeLanguage": "jsx",
                  "content": "import React from \"react\";\nimport { navStyle } from \"./styles.jsx\";\n\nconst Navigation = (props) => {\n  return (\n    <nav style={navStyle.nav}>\n      <button style={navStyle.navLink}>Home</button>\n      <button style={navStyle.navLink}>Aperture</button>\n      <button style={navStyle.navLink}>Shutter Speed</button>\n      <button style={navStyle.navLink}>ISO</button>\n    </nav>\n  );\n};\n\nexport default Navigation;",
                  "solvedContent": null
                },
                {
                  "name": "styles.jsx",
                  "codeLanguage": "jsx",
                  "content": "const wrapperStyle = {\n  wrapper: {\n    width: \"100%\",\n    fontFamily: \"Times New Roman, Verdana, Arial, sans-serif\",\n    fontSize: 16,\n    padding: 16,\n    boxSizing: \"border-box\",\n    textAlign: \"center\",\n  },\n};\n\nconst navStyle = {\n  nav: {\n    textAlign: \"center\",\n    display: \"flex\",\n    flexDirection: \"row\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    flexWrap: \"nowrap\",\n  },\n  navLink: {\n    flexBasis: \"100\",\n    flexShrink: \"1\",\n    margin: 2,\n    paddingLeft: 8,\n    paddingRight: 8,\n    paddingTop: 4,\n    paddingBottom: 4,\n    fontSize: 12,\n  },\n};\n\nconst pageStyle = {\n  table: {\n    width: \"100%\",\n    display: \"flex\",\n    flexDirection: \"column\",\n    flexWrap: \"nowrap\",\n    justifyContent: \"flex-start\",\n    alignItems: \"stretch\",\n  },\n  row: {\n    width: \"100%\",\n    marginBottom: 4,\n    display: \"flex\",\n    flexDirection: \"row\",\n    flexWrap: \"nowrap\",\n    justifyContent: \"space-between\",\n    alignItems: \"flex-start\",\n  },\n  column: {\n    flexBasis: \"50%\",\n    flexShrink: 1,\n    flexGrow: 0,\n    marginLeft: 4,\n    marginRight: 4,\n  },\n};\n\nexport { wrapperStyle, navStyle, pageStyle };",
                  "solvedContent": null
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Step 4 - <Route />",
            "id": 114682,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "In `react-router-dom` möchten wir steuern, welches JSX basierend auf dem URL-Link für die Webseite angezeigt wird. Jeder mögliche URL-Pfad wird als `<Route>` geschrieben, komplett mit `path` und `element` Attributen.\n\nDie `path` und `element` Attribute arbeiten zusammen, um der App mitzuteilen, was gerendert werden soll. Wenn die aktuelle URL der ausgewählten Webseiten mit dem `path` übereinstimmt, wird das in `element` bereitgestellte JSX gerendert.\n\nLass uns einen weiteren Pfad hinzufügen, den `react-dom-router` verfolgen muss: `/aperture`.\n\n1. Füge im `<Routes>`-Komponent ein neues `<Route>`-Komponent über der bestehenden `Home`-Route mit den folgenden Attributen und Werten hinzu:\n    - `exact`\n    - `path=\"/aperture\"`\n    - `element={ <Aperture /> }`\n\n2. Um zu überprüfen, ob wir die entsprechenden Änderungen vorgenommen haben, kopiere die URL aus dem Vorschaufenster und füge sie in einem neuen Tab in deinem Browser ein. Dann führe Folgendes aus:\n    - Stelle sicher, dass die URL nichts hinter `el.mimo.run` hat. Bestätige, dass die `<Home />` Seite erscheint.\n    - Füge `/aperture` an das Ende der URL hinzu und lade die Seite. Bestätige, dass die Seite nun die `<Aperture/>` Seite zeigt. Sieh dir den Hinweis an, um weitere Unterstützung zu erhalten, wie du dies überprüfen kannst.",
              "preselectedFileIndex": 1,
              "hasVisualOutput": true,
              "files": [
                {
                  "name": "index.html",
                  "codeLanguage": "html",
                  "content": "<!doctype html>\n<html>\n  <head>\n    <style>\n      html,\n      body {\n        margin: 0;\n        padding: 0;\n        background-color: #fefef1;\n      }\n      \n      a {\n        text-decoration: underline;\n        color: blue;\n      }\n      \n      a:hover {\n        cursor: pointer;\n      }\n    </style>\n    <script type=\"module\" src=\"./index.js\"></script>\n  </head>\n  <body>\n    <div id=\"root\"></div>\n  </body>\n</html>",
                  "solvedContent": null
                },
                {
                  "name": "index.jsx",
                  "codeLanguage": "jsx",
                  "content": "import React from \"react\";\nimport { createRoot } from \"react-dom/client\";\n\nimport { wrapperStyle } from \"./styles.jsx\";\nimport { Home, Aperture, ShutterSpeed, ISO } from \"./pages.jsx\";\nimport { BrowserRouter, Routes, Route } from \"react-router-dom\";\n\nconst App = () => {\n  return (\n    <BrowserRouter>\n      <div style={wrapperStyle.wrapper}>\n        <h1>Camera Tips</h1>\n        <Routes>\n          <Route exact path=\"/\" element={<Home />} />\n        </Routes>\n      </div>\n    </BrowserRouter>\n  );\n};\n\nconst rootElement = document.getElementById(\"root\");\nconst root = createRoot(rootElement);\nroot.render(<App />);\n\nexport default App;",
                  "solvedContent": "import React from \"react\";\nimport { createRoot } from \"react-dom/client\";\n\nimport { wrapperStyle } from \"./styles.jsx\";\nimport { Home, Aperture, ShutterSpeed, ISO } from \"./pages.jsx\";\nimport { BrowserRouter, Routes, Route } from \"react-router-dom\";\n\nconst App = () => {\n  return (\n    <BrowserRouter>\n      <div style={wrapperStyle.wrapper}>\n        <h1>Camera Tips</h1>\n        <Routes>\n          <Route exact path=\"/aperture\" element={<Aperture />} />\n          <Route exact path=\"/\" element={<Home />} />\n        </Routes>\n      </div>\n    </BrowserRouter>\n  );\n};\n\nconst rootElement = document.getElementById(\"root\");\nconst root = createRoot(rootElement);\nroot.render(<App />);\n\nexport default App;"
                },
                {
                  "name": "pages.jsx",
                  "codeLanguage": "jsx",
                  "content": "import React from \"react\";\nimport { pageStyle } from \"./styles\";\n\nconst Home = () => {\n  return (\n    <div>\n      <p>\n        Want a quick guide on how to take good photos? Confused about photo\n        terms? You've come to the right place!\n      </p>\n    </div>\n  );\n};\n\nconst ShutterSpeed = () => {\n  return (\n    <div>\n      <h3>Shutter Speed</h3>\n      <p>\n        <strong>Shutter Speed</strong> is how quickly your camera takes the\n        picture.\n      </p>\n      <div style={pageStyle.table}>\n        <div style={pageStyle.row}>\n          <div style={pageStyle.column}>\n            <strong>Fast Shutter Speed:</strong>\n          </div>\n          <div style={pageStyle.column}>\n            <strong>Slow Shutter Speed:</strong>\n          </div>\n        </div>\n        <div style={pageStyle.row}>\n          <div style={pageStyle.column}>\n            Clearer subjects when they are moving. Darker picture because less\n            light can enter your camera.\n          </div>\n          <div style={pageStyle.column}>\n            Blurrier subjects when they are moving. Brighter pictures because\n            more light can enter your camera.\n          </div>\n        </div>\n      </div>\n      <p>\n        A shutter speed of 1/60 is the lowest speed you can get for a bright\n        photo that isn't noticeably blurry.\n      </p>\n    </div>\n  );\n};\n\nconst Aperture = () => {\n  return (\n    <div>\n      <h3>Aperture</h3>\n      <p>\n        The <strong>Aperture</strong> is the camera lens' opening that allows\n        light in. The measurement of that opening is called the{\" \"}\n        <strong>F-Stop</strong>. The Aperture and F-Stop are inversely\n        proportional.\n      </p>\n      <div style={pageStyle.table}>\n        <div style={pageStyle.row}>\n          <div style={pageStyle.column}>\n            <strong>Low F-Stop / High Aperture:</strong>\n          </div>\n          <div style={pageStyle.column}>\n            <strong>High F-Stop / Low Aperture:</strong>\n          </div>\n        </div>\n        <div style={pageStyle.row}>\n          <div style={pageStyle.column}>\n            Your Depth of Field is very narrow; your pictures will be brighter\n            and will have foreground and background blur.\n          </div>\n          <div style={pageStyle.column}>\n            Your Depth of Field is very wide; your pictures will be darker but\n            will have less blurred backgrounds and foregrounds.\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nconst ISO = () => {\n  return (\n    <div>\n      <h3>ISO</h3>\n      <p>\n        Your camera's <strong>ISO</strong> is a measure of how sensitive your\n        camera's sensors are to light.\n      </p>\n      <p>\n        Increasing your camera's ISO makes your pictures brighter, but it also\n        increases their <strong>noise</strong>, or their grainy-ness. This is\n        why night photos, which usually are taken with high ISO, have black dots\n        when you look closely.\n      </p>\n      <div style={pageStyle.table}>\n        <div style={pageStyle.row}>\n          <div style={pageStyle.column}>\n            <strong>Low ISO:</strong>\n          </div>\n          <div style={pageStyle.column}>\n            <strong>High ISO:</strong>\n          </div>\n        </div>\n        <div style={pageStyle.row}>\n          <div style={pageStyle.column}>\n            Your camera's sensors are not very sensitive, reducing overall\n            brightness. This makes your pictures less noisy though.\n          </div>\n          <div style={pageStyle.column}>\n            Your camera's sensors are very sensitive to light, meaning brighter\n            images. However, this make your pictures more noisy.\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport { Home, Aperture, ShutterSpeed, ISO };",
                  "solvedContent": null
                },
                {
                  "name": "navigation.jsx",
                  "codeLanguage": "jsx",
                  "content": "import React from \"react\";\nimport { navStyle } from \"./styles.jsx\";\n\nconst Navigation = (props) => {\n  return (\n    <nav style={navStyle.nav}>\n      <button style={navStyle.navLink}>Home</button>\n      <button style={navStyle.navLink}>Aperture</button>\n      <button style={navStyle.navLink}>Shutter Speed</button>\n      <button style={navStyle.navLink}>ISO</button>\n    </nav>\n  );\n};\n\nexport default Navigation;",
                  "solvedContent": null
                },
                {
                  "name": "styles.jsx",
                  "codeLanguage": "jsx",
                  "content": "const wrapperStyle = {\n  wrapper: {\n    width: \"100%\",\n    fontFamily: \"Times New Roman, Verdana, Arial, sans-serif\",\n    fontSize: 16,\n    padding: 16,\n    boxSizing: \"border-box\",\n    textAlign: \"center\",\n  },\n};\n\nconst navStyle = {\n  nav: {\n    textAlign: \"center\",\n    display: \"flex\",\n    flexDirection: \"row\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    flexWrap: \"nowrap\",\n  },\n  navLink: {\n    flexBasis: \"100\",\n    flexShrink: \"1\",\n    margin: 2,\n    paddingLeft: 8,\n    paddingRight: 8,\n    paddingTop: 4,\n    paddingBottom: 4,\n    fontSize: 12,\n  },\n};\n\nconst pageStyle = {\n  table: {\n    width: \"100%\",\n    display: \"flex\",\n    flexDirection: \"column\",\n    flexWrap: \"nowrap\",\n    justifyContent: \"flex-start\",\n    alignItems: \"stretch\",\n  },\n  row: {\n    width: \"100%\",\n    marginBottom: 4,\n    display: \"flex\",\n    flexDirection: \"row\",\n    flexWrap: \"nowrap\",\n    justifyContent: \"space-between\",\n    alignItems: \"flex-start\",\n  },\n  column: {\n    flexBasis: \"50%\",\n    flexShrink: 1,\n    flexGrow: 0,\n    marginLeft: 4,\n    marginRight: 4,\n  },\n};\n\nexport { wrapperStyle, navStyle, pageStyle };",
                  "solvedContent": null
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Step 5 - What's <Routes />?",
            "id": 114683,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "`<Routes>` rendert nur eine der `<Route>` Komponenten innerhalb von sich. Die Reihenfolge der `<Route>` Komponenten innerhalb von `<Routes>` ist wichtig: die erste `<Route>`, die mit der aktuellen URL übereinstimmt, wird gerendert, und alle anderen `<Route>` Komponenten werden ignoriert.\n\n1. Füge im `<Routes>`-Komponent eine neue `<Route>`-Komponente zwischen den \"Home\"- und \"Aperture\"-Routen mit den folgenden Attributen hinzu: `exact`, Pfad `path=\"/shutterspeed\"` und Element `element={ <ShutterSpeed /> }`.\n2. Um deine Änderungen zu überprüfen, kopiere die URL aus dem Vorschaufenster und füge sie in einem **neuen Tab in deinem Browser** ein. Dann mache Folgendes:\n  - Stelle sicher, dass die URL nichts hinter `el.mimo.run` hat. Bestätige, dass die `<Home />` Seite erscheint.\n  - Füge `/shutterspeed` am Ende der URL hinzu und lade die Seite. Bestätige, dass die Seite jetzt die `<Shutterspeed/>` Seite zeigt.\n  - Probiere ein beliebiges anderes URL-Ende aus. Bestätige, dass die Seite leer ist.\nÜberprüfe den Hinweisblock für weitere Unterstützung bei dieser Überprüfung.",
              "preselectedFileIndex": 1,
              "hasVisualOutput": true,
              "files": [
                {
                  "name": "index.html",
                  "codeLanguage": "html",
                  "content": "<!doctype html>\n<html>\n  <head>\n    <style>\n      html,\n      body {\n        margin: 0;\n        padding: 0;\n        background-color: #fefef1;\n      }\n      \n      a {\n        text-decoration: underline;\n        color: blue;\n      }\n      \n      a:hover {\n        cursor: pointer;\n      }\n    </style>\n    <script type=\"module\" src=\"./index.js\"></script>\n  </head>\n  <body>\n    <div id=\"root\"></div>\n  </body>\n</html>",
                  "solvedContent": null
                },
                {
                  "name": "index.jsx",
                  "codeLanguage": "jsx",
                  "content": "import React from \"react\";\nimport { createRoot } from \"react-dom/client\";\n\nimport { wrapperStyle } from \"./styles.jsx\";\nimport { Home, Aperture, ShutterSpeed, ISO } from \"./pages.jsx\";\nimport { BrowserRouter, Routes, Route } from \"react-router-dom\";\n\nconst App = () => {\n  return (\n    <BrowserRouter>\n      <div style={wrapperStyle.wrapper}>\n        <h1>Camera Tips</h1>\n        <Routes>\n          <Route exact path=\"/aperture\" element={<Aperture />} />\n          <Route exact path=\"/\" element={<Home />} />\n        </Routes>\n      </div>\n    </BrowserRouter>\n  );\n};\n\nconst rootElement = document.getElementById(\"root\");\nconst root = createRoot(rootElement);\nroot.render(<App />);\n\nexport default App;",
                  "solvedContent": "import React from \"react\";\nimport { createRoot } from \"react-dom/client\";\n\nimport { wrapperStyle } from \"./styles.jsx\";\nimport { Home, Aperture, ShutterSpeed, ISO } from \"./pages.jsx\";\nimport { BrowserRouter, Routes, Route } from \"react-router-dom\";\n\nconst App = () => {\n  return (\n    <BrowserRouter>\n      <div style={wrapperStyle.wrapper}>\n        <h1>Camera Tips</h1>\n        <Routes>\n          <Route exact path=\"/aperture\" element={<Aperture />} />\n          <Route exact path=\"/shutterspeed\" element={<ShutterSpeed />} />\n          <Route exact path=\"/\" element={<Home />} />\n        </Routes>\n      </div>\n    </BrowserRouter>\n  );\n};\n\nconst rootElement = document.getElementById(\"root\");\nconst root = createRoot(rootElement);\nroot.render(<App />);\n\nexport default App;"
                },
                {
                  "name": "pages.jsx",
                  "codeLanguage": "jsx",
                  "content": "import React from \"react\";\nimport { pageStyle } from \"./styles\";\n\nconst Home = () => {\n  return (\n    <div>\n      <p>\n        Want a quick guide on how to take good photos? Confused about photo\n        terms? You've come to the right place!\n      </p>\n    </div>\n  );\n};\n\nconst ShutterSpeed = () => {\n  return (\n    <div>\n      <h3>Shutter Speed</h3>\n      <p>\n        <strong>Shutter Speed</strong> is how quickly your camera takes the\n        picture.\n      </p>\n      <div style={pageStyle.table}>\n        <div style={pageStyle.row}>\n          <div style={pageStyle.column}>\n            <strong>Fast Shutter Speed:</strong>\n          </div>\n          <div style={pageStyle.column}>\n            <strong>Slow Shutter Speed:</strong>\n          </div>\n        </div>\n        <div style={pageStyle.row}>\n          <div style={pageStyle.column}>\n            Clearer subjects when they are moving. Darker picture because less\n            light can enter your camera.\n          </div>\n          <div style={pageStyle.column}>\n            Blurrier subjects when they are moving. Brighter pictures because\n            more light can enter your camera.\n          </div>\n        </div>\n      </div>\n      <p>\n        A shutter speed of 1/60 is the lowest speed you can get for a bright\n        photo that isn't noticeably blurry.\n      </p>\n    </div>\n  );\n};\n\nconst Aperture = () => {\n  return (\n    <div>\n      <h3>Aperture</h3>\n      <p>\n        The <strong>Aperture</strong> is the camera lens' opening that allows\n        light in. The measurement of that opening is called the{\" \"}\n        <strong>F-Stop</strong>. The Aperture and F-Stop are inversely\n        proportional.\n      </p>\n      <div style={pageStyle.table}>\n        <div style={pageStyle.row}>\n          <div style={pageStyle.column}>\n            <strong>Low F-Stop / High Aperture:</strong>\n          </div>\n          <div style={pageStyle.column}>\n            <strong>High F-Stop / Low Aperture:</strong>\n          </div>\n        </div>\n        <div style={pageStyle.row}>\n          <div style={pageStyle.column}>\n            Your Depth of Field is very narrow; your pictures will be brighter\n            and will have foreground and background blur.\n          </div>\n          <div style={pageStyle.column}>\n            Your Depth of Field is very wide; your pictures will be darker but\n            will have less blurred backgrounds and foregrounds.\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nconst ISO = () => {\n  return (\n    <div>\n      <h3>ISO</h3>\n      <p>\n        Your camera's <strong>ISO</strong> is a measure of how sensitive your\n        camera's sensors are to light.\n      </p>\n      <p>\n        Increasing your camera's ISO makes your pictures brighter, but it also\n        increases their <strong>noise</strong>, or their grainy-ness. This is\n        why night photos, which usually are taken with high ISO, have black dots\n        when you look closely.\n      </p>\n      <div style={pageStyle.table}>\n        <div style={pageStyle.row}>\n          <div style={pageStyle.column}>\n            <strong>Low ISO:</strong>\n          </div>\n          <div style={pageStyle.column}>\n            <strong>High ISO:</strong>\n          </div>\n        </div>\n        <div style={pageStyle.row}>\n          <div style={pageStyle.column}>\n            Your camera's sensors are not very sensitive, reducing overall\n            brightness. This makes your pictures less noisy though.\n          </div>\n          <div style={pageStyle.column}>\n            Your camera's sensors are very sensitive to light, meaning brighter\n            images. However, this make your pictures more noisy.\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport { Home, Aperture, ShutterSpeed, ISO };",
                  "solvedContent": null
                },
                {
                  "name": "navigation.jsx",
                  "codeLanguage": "jsx",
                  "content": "import React from \"react\";\nimport { navStyle } from \"./styles.jsx\";\n\nconst Navigation = (props) => {\n  return (\n    <nav style={navStyle.nav}>\n      <button style={navStyle.navLink}>Home</button>\n      <button style={navStyle.navLink}>Aperture</button>\n      <button style={navStyle.navLink}>Shutter Speed</button>\n      <button style={navStyle.navLink}>ISO</button>\n    </nav>\n  );\n};\n\nexport default Navigation;",
                  "solvedContent": null
                },
                {
                  "name": "styles.jsx",
                  "codeLanguage": "jsx",
                  "content": "const wrapperStyle = {\n  wrapper: {\n    width: \"100%\",\n    fontFamily: \"Times New Roman, Verdana, Arial, sans-serif\",\n    fontSize: 16,\n    padding: 16,\n    boxSizing: \"border-box\",\n    textAlign: \"center\",\n  },\n};\n\nconst navStyle = {\n  nav: {\n    textAlign: \"center\",\n    display: \"flex\",\n    flexDirection: \"row\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    flexWrap: \"nowrap\",\n  },\n  navLink: {\n    flexBasis: \"100\",\n    flexShrink: \"1\",\n    margin: 2,\n    paddingLeft: 8,\n    paddingRight: 8,\n    paddingTop: 4,\n    paddingBottom: 4,\n    fontSize: 12,\n  },\n};\n\nconst pageStyle = {\n  table: {\n    width: \"100%\",\n    display: \"flex\",\n    flexDirection: \"column\",\n    flexWrap: \"nowrap\",\n    justifyContent: \"flex-start\",\n    alignItems: \"stretch\",\n  },\n  row: {\n    width: \"100%\",\n    marginBottom: 4,\n    display: \"flex\",\n    flexDirection: \"row\",\n    flexWrap: \"nowrap\",\n    justifyContent: \"space-between\",\n    alignItems: \"flex-start\",\n  },\n  column: {\n    flexBasis: \"50%\",\n    flexShrink: 1,\n    flexGrow: 0,\n    marginLeft: 4,\n    marginRight: 4,\n  },\n};\n\nexport { wrapperStyle, navStyle, pageStyle };",
                  "solvedContent": null
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Step 6 - Final <Route />",
            "id": 114684,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Bis jetzt haben wir drei `<Route>` Komponenten. Wir müssen die letzte Seite hinzufügen: `/iso`.\n\n1. Füge im `<Routes>`-Komponente eine neue `<Route>`-Komponente zwischen den `Shutter Speed` und `Home` Routen mit den folgenden Attributen hinzu:\n    * `exact`\n    * `path=\"/iso\"`\n    * `element={ <ISO /> }`",
              "preselectedFileIndex": 1,
              "hasVisualOutput": true,
              "files": [
                {
                  "name": "index.html",
                  "codeLanguage": "html",
                  "content": "<!doctype html>\n<html>\n  <head>\n    <style>\n      html,\n      body {\n        margin: 0;\n        padding: 0;\n        background-color: #fefef1;\n      }\n      \n      a {\n        text-decoration: underline;\n        color: blue;\n      }\n      \n      a:hover {\n        cursor: pointer;\n      }\n    </style>\n    <script type=\"module\" src=\"./index.js\"></script>\n  </head>\n  <body>\n    <div id=\"root\"></div>\n  </body>\n</html>",
                  "solvedContent": null
                },
                {
                  "name": "index.jsx",
                  "codeLanguage": "jsx",
                  "content": "import React from \"react\";\nimport { createRoot } from \"react-dom/client\";\n\nimport { wrapperStyle } from \"./styles.jsx\";\nimport { Home, Aperture, ShutterSpeed, ISO } from \"./pages.jsx\";\nimport { BrowserRouter, Routes, Route } from \"react-router-dom\";\n\nconst App = () => {\n  return (\n    <BrowserRouter>\n      <div style={wrapperStyle.wrapper}>\n        <h1>Camera Tips</h1>\n        <Routes>\n          <Route exact path=\"/aperture\" element={<Aperture />} />\n          <Route exact path=\"/shutterspeed\" element={<ShutterSpeed />} />\n          <Route exact path=\"/\" element={<Home />} />\n        </Routes>\n      </div>\n    </BrowserRouter>\n  );\n};\n\nconst rootElement = document.getElementById(\"root\");\nconst root = createRoot(rootElement);\nroot.render(<App />);\n\nexport default App;",
                  "solvedContent": "import React from \"react\";\nimport { createRoot } from \"react-dom/client\";\n\nimport { wrapperStyle } from \"./styles.jsx\";\nimport { Home, Aperture, ShutterSpeed, ISO } from \"./pages.jsx\";\nimport { BrowserRouter, Routes, Route } from \"react-router-dom\";\n\nconst App = () => {\n  return (\n    <BrowserRouter>\n      <div style={wrapperStyle.wrapper}>\n        <h1>Camera Tips</h1>\n        <Routes>\n          <Route exact path=\"/aperture\" element={<Aperture />} />\n          <Route exact path=\"/shutterspeed\" element={<ShutterSpeed />} />\n          <Route exact path=\"/iso\" element={<ISO />} />\n          <Route exact path=\"/\" element={<Home />} />\n        </Routes>\n      </div>\n    </BrowserRouter>\n  );\n};\n\nconst rootElement = document.getElementById(\"root\");\nconst root = createRoot(rootElement);\nroot.render(<App />);\n\nexport default App;"
                },
                {
                  "name": "pages.jsx",
                  "codeLanguage": "jsx",
                  "content": "import React from \"react\";\nimport { pageStyle } from \"./styles\";\n\nconst Home = () => {\n  return (\n    <div>\n      <p>\n        Want a quick guide on how to take good photos? Confused about photo\n        terms? You've come to the right place!\n      </p>\n    </div>\n  );\n};\n\nconst ShutterSpeed = () => {\n  return (\n    <div>\n      <h3>Shutter Speed</h3>\n      <p>\n        <strong>Shutter Speed</strong> is how quickly your camera takes the\n        picture.\n      </p>\n      <div style={pageStyle.table}>\n        <div style={pageStyle.row}>\n          <div style={pageStyle.column}>\n            <strong>Fast Shutter Speed:</strong>\n          </div>\n          <div style={pageStyle.column}>\n            <strong>Slow Shutter Speed:</strong>\n          </div>\n        </div>\n        <div style={pageStyle.row}>\n          <div style={pageStyle.column}>\n            Clearer subjects when they are moving. Darker picture because less\n            light can enter your camera.\n          </div>\n          <div style={pageStyle.column}>\n            Blurrier subjects when they are moving. Brighter pictures because\n            more light can enter your camera.\n          </div>\n        </div>\n      </div>\n      <p>\n        A shutter speed of 1/60 is the lowest speed you can get for a bright\n        photo that isn't noticeably blurry.\n      </p>\n    </div>\n  );\n};\n\nconst Aperture = () => {\n  return (\n    <div>\n      <h3>Aperture</h3>\n      <p>\n        The <strong>Aperture</strong> is the camera lens' opening that allows\n        light in. The measurement of that opening is called the{\" \"}\n        <strong>F-Stop</strong>. The Aperture and F-Stop are inversely\n        proportional.\n      </p>\n      <div style={pageStyle.table}>\n        <div style={pageStyle.row}>\n          <div style={pageStyle.column}>\n            <strong>Low F-Stop / High Aperture:</strong>\n          </div>\n          <div style={pageStyle.column}>\n            <strong>High F-Stop / Low Aperture:</strong>\n          </div>\n        </div>\n        <div style={pageStyle.row}>\n          <div style={pageStyle.column}>\n            Your Depth of Field is very narrow; your pictures will be brighter\n            and will have foreground and background blur.\n          </div>\n          <div style={pageStyle.column}>\n            Your Depth of Field is very wide; your pictures will be darker but\n            will have less blurred backgrounds and foregrounds.\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nconst ISO = () => {\n  return (\n    <div>\n      <h3>ISO</h3>\n      <p>\n        Your camera's <strong>ISO</strong> is a measure of how sensitive your\n        camera's sensors are to light.\n      </p>\n      <p>\n        Increasing your camera's ISO makes your pictures brighter, but it also\n        increases their <strong>noise</strong>, or their grainy-ness. This is\n        why night photos, which usually are taken with high ISO, have black dots\n        when you look closely.\n      </p>\n      <div style={pageStyle.table}>\n        <div style={pageStyle.row}>\n          <div style={pageStyle.column}>\n            <strong>Low ISO:</strong>\n          </div>\n          <div style={pageStyle.column}>\n            <strong>High ISO:</strong>\n          </div>\n        </div>\n        <div style={pageStyle.row}>\n          <div style={pageStyle.column}>\n            Your camera's sensors are not very sensitive, reducing overall\n            brightness. This makes your pictures less noisy though.\n          </div>\n          <div style={pageStyle.column}>\n            Your camera's sensors are very sensitive to light, meaning brighter\n            images. However, this make your pictures more noisy.\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport { Home, Aperture, ShutterSpeed, ISO };",
                  "solvedContent": null
                },
                {
                  "name": "navigation.jsx",
                  "codeLanguage": "jsx",
                  "content": "import React from \"react\";\nimport { navStyle } from \"./styles.jsx\";\n\nconst Navigation = (props) => {\n  return (\n    <nav style={navStyle.nav}>\n      <button style={navStyle.navLink}>Home</button>\n      <button style={navStyle.navLink}>Aperture</button>\n      <button style={navStyle.navLink}>Shutter Speed</button>\n      <button style={navStyle.navLink}>ISO</button>\n    </nav>\n  );\n};\n\nexport default Navigation;",
                  "solvedContent": null
                },
                {
                  "name": "styles.jsx",
                  "codeLanguage": "jsx",
                  "content": "const wrapperStyle = {\n  wrapper: {\n    width: \"100%\",\n    fontFamily: \"Times New Roman, Verdana, Arial, sans-serif\",\n    fontSize: 16,\n    padding: 16,\n    boxSizing: \"border-box\",\n    textAlign: \"center\",\n  },\n};\n\nconst navStyle = {\n  nav: {\n    textAlign: \"center\",\n    display: \"flex\",\n    flexDirection: \"row\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    flexWrap: \"nowrap\",\n  },\n  navLink: {\n    flexBasis: \"100\",\n    flexShrink: \"1\",\n    margin: 2,\n    paddingLeft: 8,\n    paddingRight: 8,\n    paddingTop: 4,\n    paddingBottom: 4,\n    fontSize: 12,\n  },\n};\n\nconst pageStyle = {\n  table: {\n    width: \"100%\",\n    display: \"flex\",\n    flexDirection: \"column\",\n    flexWrap: \"nowrap\",\n    justifyContent: \"flex-start\",\n    alignItems: \"stretch\",\n  },\n  row: {\n    width: \"100%\",\n    marginBottom: 4,\n    display: \"flex\",\n    flexDirection: \"row\",\n    flexWrap: \"nowrap\",\n    justifyContent: \"space-between\",\n    alignItems: \"flex-start\",\n  },\n  column: {\n    flexBasis: \"50%\",\n    flexShrink: 1,\n    flexGrow: 0,\n    marginLeft: 4,\n    marginRight: 4,\n  },\n};\n\nexport { wrapperStyle, navStyle, pageStyle };",
                  "solvedContent": null
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Step 7 - Import Navigation",
            "id": 114685,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Es ist ermüdend, die URL direkt zu manipulieren, um die Seite zu wechseln. Wir brauchen eine Navigationsleiste, um auszuwählen, zu welcher Seite wir gehen möchten. Wir haben bereits eine `Navigation`-Komponente mit Navigationsbuttons, also lass sie uns in `App` importieren und hinzufügen. Wir werden die Buttons in der nächsten Lektion tatsächlich funktionsfähig machen.\n\n1. Importiere die `Navigation`-Komponente aus `./navigation.jsx`.\n2. Füge `<Navigation />` über dem `<h1>`-Header hinzu.",
              "preselectedFileIndex": 1,
              "hasVisualOutput": true,
              "files": [
                {
                  "name": "index.html",
                  "codeLanguage": "html",
                  "content": "<!doctype html>\n<html>\n  <head>\n    <style>\n      html,\n      body {\n        margin: 0;\n        padding: 0;\n        background-color: #fefef1;\n      }\n      \n      a {\n        text-decoration: underline;\n        color: blue;\n      }\n      \n      a:hover {\n        cursor: pointer;\n      }\n    </style>\n    <script type=\"module\" src=\"./index.js\"></script>\n  </head>\n  <body>\n    <div id=\"root\"></div>\n  </body>\n</html>",
                  "solvedContent": null
                },
                {
                  "name": "index.jsx",
                  "codeLanguage": "jsx",
                  "content": "import React from \"react\";\nimport { createRoot } from \"react-dom/client\";\n\nimport { wrapperStyle } from \"./styles.jsx\";\nimport { Home, Aperture, ShutterSpeed, ISO } from \"./pages.jsx\";\nimport { BrowserRouter, Routes, Route } from \"react-router-dom\";\n\nconst App = () => {\n  return (\n    <BrowserRouter>\n      <div style={wrapperStyle.wrapper}>\n        <h1>Camera Tips</h1>\n        <Routes>\n          <Route exact path=\"/aperture\" element={<Aperture />} />\n          <Route exact path=\"/shutterspeed\" element={<ShutterSpeed />} />\n          <Route exact path=\"/iso\" element={<ISO />} />\n          <Route exact path=\"/\" element={<Home />} />\n        </Routes>\n      </div>\n    </BrowserRouter>\n  );\n};\n\nconst rootElement = document.getElementById(\"root\");\nconst root = createRoot(rootElement);\nroot.render(<App />);\n\nexport default App;",
                  "solvedContent": "import React from \"react\";\nimport { createRoot } from \"react-dom/client\";\n\nimport { wrapperStyle } from \"./styles.jsx\";\nimport { Home, Aperture, ShutterSpeed, ISO } from \"./pages.jsx\";\nimport Navigation from \"./navigation.jsx\";\nimport { BrowserRouter, Routes, Route } from \"react-router-dom\";\n\nconst App = () => {\n  return (\n    <BrowserRouter>\n      <div style={wrapperStyle.wrapper}>\n        <Navigation />\n        <h1>Camera Tips</h1>\n        <Routes>\n          <Route exact path=\"/aperture\" element={<Aperture />} />\n          <Route exact path=\"/shutterspeed\" element={<ShutterSpeed />} />\n          <Route exact path=\"/iso\" element={<ISO />} />\n          <Route exact path=\"/\" element={<Home />} />\n        </Routes>\n      </div>\n    </BrowserRouter>\n  );\n};\n\nconst rootElement = document.getElementById(\"root\");\nconst root = createRoot(rootElement);\nroot.render(<App />);\n\nexport default App;"
                },
                {
                  "name": "pages.jsx",
                  "codeLanguage": "jsx",
                  "content": "import React from \"react\";\nimport { pageStyle } from \"./styles\";\n\nconst Home = () => {\n  return (\n    <div>\n      <p>\n        Want a quick guide on how to take good photos? Confused about photo\n        terms? You've come to the right place!\n      </p>\n    </div>\n  );\n};\n\nconst ShutterSpeed = () => {\n  return (\n    <div>\n      <h3>Shutter Speed</h3>\n      <p>\n        <strong>Shutter Speed</strong> is how quickly your camera takes the\n        picture.\n      </p>\n      <div style={pageStyle.table}>\n        <div style={pageStyle.row}>\n          <div style={pageStyle.column}>\n            <strong>Fast Shutter Speed:</strong>\n          </div>\n          <div style={pageStyle.column}>\n            <strong>Slow Shutter Speed:</strong>\n          </div>\n        </div>\n        <div style={pageStyle.row}>\n          <div style={pageStyle.column}>\n            Clearer subjects when they are moving. Darker picture because less\n            light can enter your camera.\n          </div>\n          <div style={pageStyle.column}>\n            Blurrier subjects when they are moving. Brighter pictures because\n            more light can enter your camera.\n          </div>\n        </div>\n      </div>\n      <p>\n        A shutter speed of 1/60 is the lowest speed you can get for a bright\n        photo that isn't noticeably blurry.\n      </p>\n    </div>\n  );\n};\n\nconst Aperture = () => {\n  return (\n    <div>\n      <h3>Aperture</h3>\n      <p>\n        The <strong>Aperture</strong> is the camera lens' opening that allows\n        light in. The measurement of that opening is called the{\" \"}\n        <strong>F-Stop</strong>. The Aperture and F-Stop are inversely\n        proportional.\n      </p>\n      <div style={pageStyle.table}>\n        <div style={pageStyle.row}>\n          <div style={pageStyle.column}>\n            <strong>Low F-Stop / High Aperture:</strong>\n          </div>\n          <div style={pageStyle.column}>\n            <strong>High F-Stop / Low Aperture:</strong>\n          </div>\n        </div>\n        <div style={pageStyle.row}>\n          <div style={pageStyle.column}>\n            Your Depth of Field is very narrow; your pictures will be brighter\n            and will have foreground and background blur.\n          </div>\n          <div style={pageStyle.column}>\n            Your Depth of Field is very wide; your pictures will be darker but\n            will have less blurred backgrounds and foregrounds.\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nconst ISO = () => {\n  return (\n    <div>\n      <h3>ISO</h3>\n      <p>\n        Your camera's <strong>ISO</strong> is a measure of how sensitive your\n        camera's sensors are to light.\n      </p>\n      <p>\n        Increasing your camera's ISO makes your pictures brighter, but it also\n        increases their <strong>noise</strong>, or their grainy-ness. This is\n        why night photos, which usually are taken with high ISO, have black dots\n        when you look closely.\n      </p>\n      <div style={pageStyle.table}>\n        <div style={pageStyle.row}>\n          <div style={pageStyle.column}>\n            <strong>Low ISO:</strong>\n          </div>\n          <div style={pageStyle.column}>\n            <strong>High ISO:</strong>\n          </div>\n        </div>\n        <div style={pageStyle.row}>\n          <div style={pageStyle.column}>\n            Your camera's sensors are not very sensitive, reducing overall\n            brightness. This makes your pictures less noisy though.\n          </div>\n          <div style={pageStyle.column}>\n            Your camera's sensors are very sensitive to light, meaning brighter\n            images. However, this make your pictures more noisy.\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport { Home, Aperture, ShutterSpeed, ISO };",
                  "solvedContent": null
                },
                {
                  "name": "navigation.jsx",
                  "codeLanguage": "jsx",
                  "content": "import React from \"react\";\nimport { navStyle } from \"./styles.jsx\";\n\nconst Navigation = (props) => {\n  return (\n    <nav style={navStyle.nav}>\n      <button style={navStyle.navLink}>Home</button>\n      <button style={navStyle.navLink}>Aperture</button>\n      <button style={navStyle.navLink}>Shutter Speed</button>\n      <button style={navStyle.navLink}>ISO</button>\n    </nav>\n  );\n};\n\nexport default Navigation;",
                  "solvedContent": null
                },
                {
                  "name": "styles.jsx",
                  "codeLanguage": "jsx",
                  "content": "const wrapperStyle = {\n  wrapper: {\n    width: \"100%\",\n    fontFamily: \"Times New Roman, Verdana, Arial, sans-serif\",\n    fontSize: 16,\n    padding: 16,\n    boxSizing: \"border-box\",\n    textAlign: \"center\",\n  },\n};\n\nconst navStyle = {\n  nav: {\n    textAlign: \"center\",\n    display: \"flex\",\n    flexDirection: \"row\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    flexWrap: \"nowrap\",\n  },\n  navLink: {\n    flexBasis: \"100\",\n    flexShrink: \"1\",\n    margin: 2,\n    paddingLeft: 8,\n    paddingRight: 8,\n    paddingTop: 4,\n    paddingBottom: 4,\n    fontSize: 12,\n  },\n};\n\nconst pageStyle = {\n  table: {\n    width: \"100%\",\n    display: \"flex\",\n    flexDirection: \"column\",\n    flexWrap: \"nowrap\",\n    justifyContent: \"flex-start\",\n    alignItems: \"stretch\",\n  },\n  row: {\n    width: \"100%\",\n    marginBottom: 4,\n    display: \"flex\",\n    flexDirection: \"row\",\n    flexWrap: \"nowrap\",\n    justifyContent: \"space-between\",\n    alignItems: \"flex-start\",\n  },\n  column: {\n    flexBasis: \"50%\",\n    flexShrink: 1,\n    flexGrow: 0,\n    marginLeft: 4,\n    marginRight: 4,\n  },\n};\n\nexport { wrapperStyle, navStyle, pageStyle };",
                  "solvedContent": null
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Step 8: Adding Nav Capabilities",
            "id": 114687,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Im Moment haben die `<Navigation>`-Buttons keine Wirkung. Das liegt daran, dass wir die Buttons anpassen müssen, damit sie mit `react-router-dom` funktionieren.\n\nAuf einer normalen Webseite würden wir das `<a href=\"\">`-Tag verwenden, um Hyperlinks und Navigationselemente zu erstellen.\n\nBei der Verwendung von `react-router-dom` verwenden wir die `Link`-Komponente anstelle der `<a>`-Tags, da `<a>`-Tags die Seite neu laden und `Link`-Komponenten dies nicht tun.\n\nDer erste Schritt besteht darin, eine weitere Komponente aus `react-router-dom` zu importieren.\n\n1. Importiere in `navigation.jsx` `Link` aus `react-router-dom`.",
              "preselectedFileIndex": 3,
              "hasVisualOutput": true,
              "files": [
                {
                  "name": "index.html",
                  "codeLanguage": "html",
                  "content": "<!doctype html>\n<html>\n  <head>\n    <style>\n      html,\n      body {\n        margin: 0;\n        padding: 0;\n        background-color: #fefef1;\n      }\n      \n      a {\n        text-decoration: underline;\n        color: blue;\n      }\n      \n      a:hover {\n        cursor: pointer;\n      }\n    </style>\n    <script type=\"module\" src=\"./index.js\"></script>\n  </head>\n  <body>\n    <div id=\"root\"></div>\n  </body>\n</html>",
                  "solvedContent": null
                },
                {
                  "name": "index.jsx",
                  "codeLanguage": "jsx",
                  "content": "import React from \"react\";\nimport { createRoot } from \"react-dom/client\";\n\n\nimport { wrapperStyle } from \"./styles.jsx\";\nimport { Home, Aperture, ShutterSpeed, ISO } from \"./pages.jsx\";\nimport Navigation from \"./navigation.jsx\";\nimport { BrowserRouter, Routes, Route } from \"react-router-dom\";\n\nconst App = () => {\n  return (\n    <BrowserRouter>\n      <div style={wrapperStyle.wrapper}>\n        <Navigation />\n        <h1>Camera Tips</h1>\n        <Routes>\n          <Route exact path=\"/aperture\" element={<Aperture />} />\n          <Route exact path=\"/shutterspeed\" element={<ShutterSpeed />} />\n          <Route exact path=\"/iso\" element={<ISO />} />\n          <Route exact path=\"/\" element={<Home />} />\n        </Routes>\n      </div>\n    </BrowserRouter>\n  );\n};\n\nconst rootElement = document.getElementById(\"root\");\nconst root = createRoot(rootElement);\nroot.render(<App />);\n\nexport default App;",
                  "solvedContent": null
                },
                {
                  "name": "pages.jsx",
                  "codeLanguage": "jsx",
                  "content": "import React from \"react\";\nimport { pageStyle } from \"./styles\";\n\nconst Home = () => {\n  return (\n    <div>\n      <p>\n        Want a quick guide on how to take good photos? Confused about photo\n        terms? You've come to the right place!\n      </p>\n    </div>\n  );\n};\n\nconst ShutterSpeed = () => {\n  return (\n    <div>\n      <h3>Shutter Speed</h3>\n      <p>\n        <strong>Shutter Speed</strong> is how quickly your camera takes the\n        picture.\n      </p>\n      <div style={pageStyle.table}>\n        <div style={pageStyle.row}>\n          <div style={pageStyle.column}>\n            <strong>Fast Shutter Speed:</strong>\n          </div>\n          <div style={pageStyle.column}>\n            <strong>Slow Shutter Speed:</strong>\n          </div>\n        </div>\n        <div style={pageStyle.row}>\n          <div style={pageStyle.column}>\n            Clearer subjects when they are moving. Darker picture because less\n            light can enter your camera.\n          </div>\n          <div style={pageStyle.column}>\n            Blurrier subjects when they are moving. Brighter pictures because\n            more light can enter your camera.\n          </div>\n        </div>\n      </div>\n      <p>\n        A shutter speed of 1/60 is the lowest speed you can get for a bright\n        photo that isn't noticeably blurry.\n      </p>\n    </div>\n  );\n};\n\nconst Aperture = () => {\n  return (\n    <div>\n      <h3>Aperture</h3>\n      <p>\n        The <strong>Aperture</strong> is the camera lens' opening that allows\n        light in. The measurement of that opening is called the{\" \"}\n        <strong>F-Stop</strong>. The Aperture and F-Stop are inversely\n        proportional.\n      </p>\n      <div style={pageStyle.table}>\n        <div style={pageStyle.row}>\n          <div style={pageStyle.column}>\n            <strong>Low F-Stop / High Aperture:</strong>\n          </div>\n          <div style={pageStyle.column}>\n            <strong>High F-Stop / Low Aperture:</strong>\n          </div>\n        </div>\n        <div style={pageStyle.row}>\n          <div style={pageStyle.column}>\n            Your Depth of Field is very narrow; your pictures will be brighter\n            and will have foreground and background blur.\n          </div>\n          <div style={pageStyle.column}>\n            Your Depth of Field is very wide; your pictures will be darker but\n            will have less blurred backgrounds and foregrounds.\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nconst ISO = () => {\n  return (\n    <div>\n      <h3>ISO</h3>\n      <p>\n        Your camera's <strong>ISO</strong> is a measure of how sensitive your\n        camera's sensors are to light.\n      </p>\n      <p>\n        Increasing your camera's ISO makes your pictures brighter, but it also\n        increases their <strong>noise</strong>, or their grainy-ness. This is\n        why night photos, which usually are taken with high ISO, have black dots\n        when you look closely.\n      </p>\n      <div style={pageStyle.table}>\n        <div style={pageStyle.row}>\n          <div style={pageStyle.column}>\n            <strong>Low ISO:</strong>\n          </div>\n          <div style={pageStyle.column}>\n            <strong>High ISO:</strong>\n          </div>\n        </div>\n        <div style={pageStyle.row}>\n          <div style={pageStyle.column}>\n            Your camera's sensors are not very sensitive, reducing overall\n            brightness. This makes your pictures less noisy though.\n          </div>\n          <div style={pageStyle.column}>\n            Your camera's sensors are very sensitive to light, meaning brighter\n            images. However, this make your pictures more noisy.\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport { Home, Aperture, ShutterSpeed, ISO };",
                  "solvedContent": null
                },
                {
                  "name": "navigation.jsx",
                  "codeLanguage": "jsx",
                  "content": "import React from \"react\";\n\nconst Navigation = (props) => {\n  return (\n    <nav style={navStyle.nav}>\n      <button style={navStyle.navLink}>Home</button>\n      <button style={navStyle.navLink}>Aperture</button>\n      <button style={navStyle.navLink}>Shutter Speed</button>\n      <button style={navStyle.navLink}>ISO</button>\n    </nav>\n  );\n};\n\nexport default Navigation;",
                  "solvedContent": "import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nconst Navigation = (props) => {\n  return (\n    <nav style={navStyle.nav}>\n      <button style={navStyle.navLink}>Home</button>\n      <button style={navStyle.navLink}>Aperture</button>\n      <button style={navStyle.navLink}>Shutter Speed</button>\n      <button style={navStyle.navLink}>ISO</button>\n    </nav>\n  );\n};\n\nexport default Navigation;"
                },
                {
                  "name": "styles.jsx",
                  "codeLanguage": "jsx",
                  "content": "const wrapperStyle = {\n  wrapper: {\n    width: \"100%\",\n    fontFamily: \"Times New Roman, Verdana, Arial, sans-serif\",\n    fontSize: 16,\n    padding: 16,\n    boxSizing: \"border-box\",\n    textAlign: \"center\",\n  },\n};\n\nconst navStyle = {\n  nav: {\n    textAlign: \"center\",\n    display: \"flex\",\n    flexDirection: \"row\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    flexWrap: \"nowrap\",\n  },\n  navLink: {\n    flexBasis: \"100\",\n    flexShrink: \"1\",\n    margin: 2,\n    paddingLeft: 8,\n    paddingRight: 8,\n    paddingTop: 4,\n    paddingBottom: 4,\n    fontSize: 12,\n  },\n};\n\nconst pageStyle = {\n  table: {\n    width: \"100%\",\n    display: \"flex\",\n    flexDirection: \"column\",\n    flexWrap: \"nowrap\",\n    justifyContent: \"flex-start\",\n    alignItems: \"stretch\",\n  },\n  row: {\n    width: \"100%\",\n    marginBottom: 4,\n    display: \"flex\",\n    flexDirection: \"row\",\n    flexWrap: \"nowrap\",\n    justifyContent: \"space-between\",\n    alignItems: \"flex-start\",\n  },\n  column: {\n    flexBasis: \"50%\",\n    flexShrink: 1,\n    flexGrow: 0,\n    marginLeft: 4,\n    marginRight: 4,\n  },\n};\n\nexport { wrapperStyle, navStyle, pageStyle };",
                  "solvedContent": null
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Step 9: One Link",
            "id": 114688,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Mit der importierten `Link`-Komponente können wir nun etwas Funktionalität zur Navigationsleiste unserer SPA hinzufügen. Lass uns vorerst nur einen `Link` hinzufügen und sehen, ob er funktioniert.\n\n1. Umwickle den `Aperture`-Button mit der neuen `<Link>`-Komponente.\n2. Füge ein `to`-Attribut zu `<Link>` hinzu und setze den `to`-Wert auf `\"/aperture\"`, um beim Klicken auf den Button zu `\"/aperture\"` zu verlinken.\n3. Lade die Seite und klicke im Vorschau auf den \"Aperture\"-Button, du solltest sehen, dass sich der Seiteninhalt zur `<Aperture/>`-Komponente ändert.",
              "preselectedFileIndex": 3,
              "hasVisualOutput": true,
              "files": [
                {
                  "name": "index.html",
                  "codeLanguage": "html",
                  "content": "<!doctype html>\n<html>\n  <head>\n    <style>\n      html,\n      body {\n        margin: 0;\n        padding: 0;\n        background-color: #fefef1;\n      }\n      \n      a {\n        text-decoration: underline;\n        color: blue;\n      }\n      \n      a:hover {\n        cursor: pointer;\n      }\n    </style>\n    <script type=\"module\" src=\"./index.js\"></script>\n  </head>\n  <body>\n    <div id=\"root\"></div>\n  </body>\n</html>",
                  "solvedContent": null
                },
                {
                  "name": "index.jsx",
                  "codeLanguage": "jsx",
                  "content": "import React from \"react\";\nimport { createRoot } from \"react-dom/client\";\nimport { wrapperStyle } from \"./styles.jsx\";\nimport { Home, Aperture, ShutterSpeed, ISO } from \"./pages.jsx\";\nimport Navigation from \"./navigation.jsx\";\nimport { BrowserRouter, Routes, Route } from \"react-router-dom\";\n\nconst App = () => {\n  return (\n    <BrowserRouter>\n      <div style={wrapperStyle.wrapper}>\n        <Navigation />\n        <h1>Camera Tips</h1>\n        <Routes>\n          <Route exact path=\"/aperture\" element={<Aperture />} />\n          <Route exact path=\"/shutterspeed\" element={<ShutterSpeed />} />\n          <Route exact path=\"/iso\" element={<ISO />} />\n          <Route exact path=\"/\" element={<Home />} />\n        </Routes>\n      </div>\n    </BrowserRouter>\n  );\n};\n\nconst rootElement = document.getElementById(\"root\");\nconst root = createRoot(rootElement);\nroot.render(<App />);\n\nexport default App;",
                  "solvedContent": null
                },
                {
                  "name": "pages.jsx",
                  "codeLanguage": "jsx",
                  "content": "import React from \"react\";\nimport { pageStyle } from \"./styles\";\n\nconst Home = () => {\n  return (\n    <div>\n      <p>\n        Want a quick guide on how to take good photos? Confused about photo\n        terms? You've come to the right place!\n      </p>\n    </div>\n  );\n};\n\nconst ShutterSpeed = () => {\n  return (\n    <div>\n      <h3>Shutter Speed</h3>\n      <p>\n        <strong>Shutter Speed</strong> is how quickly your camera takes the\n        picture.\n      </p>\n      <div style={pageStyle.table}>\n        <div style={pageStyle.row}>\n          <div style={pageStyle.column}>\n            <strong>Fast Shutter Speed:</strong>\n          </div>\n          <div style={pageStyle.column}>\n            <strong>Slow Shutter Speed:</strong>\n          </div>\n        </div>\n        <div style={pageStyle.row}>\n          <div style={pageStyle.column}>\n            Clearer subjects when they are moving. Darker picture because less\n            light can enter your camera.\n          </div>\n          <div style={pageStyle.column}>\n            Blurrier subjects when they are moving. Brighter pictures because\n            more light can enter your camera.\n          </div>\n        </div>\n      </div>\n      <p>\n        A shutter speed of 1/60 is the lowest speed you can get for a bright\n        photo that isn't noticeably blurry.\n      </p>\n    </div>\n  );\n};\n\nconst Aperture = () => {\n  return (\n    <div>\n      <h3>Aperture</h3>\n      <p>\n        The <strong>Aperture</strong> is the camera lens' opening that allows\n        light in. The measurement of that opening is called the{\" \"}\n        <strong>F-Stop</strong>. The Aperture and F-Stop are inversely\n        proportional.\n      </p>\n      <div style={pageStyle.table}>\n        <div style={pageStyle.row}>\n          <div style={pageStyle.column}>\n            <strong>Low F-Stop / High Aperture:</strong>\n          </div>\n          <div style={pageStyle.column}>\n            <strong>High F-Stop / Low Aperture:</strong>\n          </div>\n        </div>\n        <div style={pageStyle.row}>\n          <div style={pageStyle.column}>\n            Your Depth of Field is very narrow; your pictures will be brighter\n            and will have foreground and background blur.\n          </div>\n          <div style={pageStyle.column}>\n            Your Depth of Field is very wide; your pictures will be darker but\n            will have less blurred backgrounds and foregrounds.\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nconst ISO = () => {\n  return (\n    <div>\n      <h3>ISO</h3>\n      <p>\n        Your camera's <strong>ISO</strong> is a measure of how sensitive your\n        camera's sensors are to light.\n      </p>\n      <p>\n        Increasing your camera's ISO makes your pictures brighter, but it also\n        increases their <strong>noise</strong>, or their grainy-ness. This is\n        why night photos, which usually are taken with high ISO, have black dots\n        when you look closely.\n      </p>\n      <div style={pageStyle.table}>\n        <div style={pageStyle.row}>\n          <div style={pageStyle.column}>\n            <strong>Low ISO:</strong>\n          </div>\n          <div style={pageStyle.column}>\n            <strong>High ISO:</strong>\n          </div>\n        </div>\n        <div style={pageStyle.row}>\n          <div style={pageStyle.column}>\n            Your camera's sensors are not very sensitive, reducing overall\n            brightness. This makes your pictures less noisy though.\n          </div>\n          <div style={pageStyle.column}>\n            Your camera's sensors are very sensitive to light, meaning brighter\n            images. However, this make your pictures more noisy.\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport { Home, Aperture, ShutterSpeed, ISO };",
                  "solvedContent": null
                },
                {
                  "name": "navigation.jsx",
                  "codeLanguage": "jsx",
                  "content": "import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { navStyle } from \"./styles\";\n\nconst Navigation = (props) => {\n  return (\n    <nav style={navStyle.nav}>\n      <button style={navStyle.navLink}>Home</button>\n      <button style={navStyle.navLink}>Aperture</button>\n      <button style={navStyle.navLink}>Shutter Speed</button>\n      <button style={navStyle.navLink}>ISO</button>\n    </nav>\n  );\n};\n\nexport default Navigation;",
                  "solvedContent": "import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { navStyle } from \"./styles\";\n\nconst Navigation = (props) => {\n  return (\n    <nav style={navStyle.nav}>\n      <button style={navStyle.navLink}>Home</button>\n      <Link to=\"/aperture\">\n        <button style={navStyle.navLink}>Aperture</button>\n      </Link>\n      <button style={navStyle.navLink}>Shutter Speed</button>\n      <button style={navStyle.navLink}>ISO</button>\n    </nav>\n  );\n};\n\nexport default Navigation;"
                },
                {
                  "name": "styles.jsx",
                  "codeLanguage": "jsx",
                  "content": "const wrapperStyle = {\n  wrapper: {\n    width: \"100%\",\n    fontFamily: \"Times New Roman, Verdana, Arial, sans-serif\",\n    fontSize: 16,\n    padding: 16,\n    boxSizing: \"border-box\",\n    textAlign: \"center\",\n  },\n};\n\nconst navStyle = {\n  nav: {\n    textAlign: \"center\",\n    display: \"flex\",\n    flexDirection: \"row\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    flexWrap: \"nowrap\",\n  },\n  navLink: {\n    flexBasis: \"100\",\n    flexShrink: \"1\",\n    margin: 2,\n    paddingLeft: 8,\n    paddingRight: 8,\n    paddingTop: 4,\n    paddingBottom: 4,\n    fontSize: 12,\n  },\n};\n\nconst pageStyle = {\n  table: {\n    width: \"100%\",\n    display: \"flex\",\n    flexDirection: \"column\",\n    flexWrap: \"nowrap\",\n    justifyContent: \"flex-start\",\n    alignItems: \"stretch\",\n  },\n  row: {\n    width: \"100%\",\n    marginBottom: 4,\n    display: \"flex\",\n    flexDirection: \"row\",\n    flexWrap: \"nowrap\",\n    justifyContent: \"space-between\",\n    alignItems: \"flex-start\",\n  },\n  column: {\n    flexBasis: \"50%\",\n    flexShrink: 1,\n    flexGrow: 0,\n    marginLeft: 4,\n    marginRight: 4,\n  },\n};\n\nexport { wrapperStyle, navStyle, pageStyle };",
                  "solvedContent": null
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Step 10: Add all Links",
            "id": 114689,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Mit dem funktionierenden `<Link>` können wir nun die `<Link>`-Komponente zu den restlichen drei Buttons innerhalb der `Navigation` hinzufügen.\n\n1. Für jeden der verbleibenden Buttons, umschließe sie mit der neuen `<Link>`-Komponente und setze ihr `to`-Attribut auf die richtige URL:\n\n    - `Home` muss auf `/` verlinken.\n    - `Shutter Speed` muss auf `/shutterspeed` verlinken.\n    - `ISO` muss auf `/iso` verlinken.\n\n2. Führe den Code aus und klicke dann auf jeden der Buttons in der Navigationsleiste. Du solltest sehen, dass sich die Seiten ändern, als würdest du zwischen verschiedenen Webseiten navigieren.",
              "preselectedFileIndex": 3,
              "hasVisualOutput": true,
              "files": [
                {
                  "name": "index.html",
                  "codeLanguage": "html",
                  "content": "<!doctype html>\n<html>\n  <head>\n    <style>\n      html,\n      body {\n        margin: 0;\n        padding: 0;\n        background-color: #fefef1;\n      }\n      \n      a {\n        text-decoration: underline;\n        color: blue;\n      }\n      \n      a:hover {\n        cursor: pointer;\n      }\n    </style>\n    <script type=\"module\" src=\"./index.js\"></script>\n  </head>\n  <body>\n    <div id=\"root\"></div>\n  </body>\n</html>",
                  "solvedContent": null
                },
                {
                  "name": "index.jsx",
                  "codeLanguage": "jsx",
                  "content": "import React from \"react\";\nimport { createRoot } from \"react-dom/client\";\n\nimport { wrapperStyle } from \"./styles.jsx\";\nimport { Home, Aperture, ShutterSpeed, ISO } from \"./pages.jsx\";\nimport Navigation from \"./navigation.jsx\";\nimport { BrowserRouter, Routes, Route } from \"react-router-dom\";\n\nconst App = () => {\n  return (\n    <BrowserRouter>\n      <div style={wrapperStyle.wrapper}>\n        <Navigation />\n        <h1>Camera Tips</h1>\n        <Routes>\n          <Route exact path=\"/aperture\" element={<Aperture />} />\n          <Route exact path=\"/shutterspeed\" element={<ShutterSpeed />} />\n          <Route exact path=\"/iso\" element={<ISO />} />\n          <Route exact path=\"/\" element={<Home />} />\n        </Routes>\n      </div>\n    </BrowserRouter>\n  );\n};\n\nconst rootElement = document.getElementById(\"root\");\nconst root = createRoot(rootElement);\nroot.render(<App />);\n\nexport default App;",
                  "solvedContent": null
                },
                {
                  "name": "pages.jsx",
                  "codeLanguage": "jsx",
                  "content": "import React from \"react\";\nimport { pageStyle } from \"./styles\";\n\nconst Home = () => {\n  return (\n    <div>\n      <p>\n        Want a quick guide on how to take good photos? Confused about photo\n        terms? You've come to the right place!\n      </p>\n    </div>\n  );\n};\n\nconst ShutterSpeed = () => {\n  return (\n    <div>\n      <h3>Shutter Speed</h3>\n      <p>\n        <strong>Shutter Speed</strong> is how quickly your camera takes the\n        picture.\n      </p>\n      <div style={pageStyle.table}>\n        <div style={pageStyle.row}>\n          <div style={pageStyle.column}>\n            <strong>Fast Shutter Speed:</strong>\n          </div>\n          <div style={pageStyle.column}>\n            <strong>Slow Shutter Speed:</strong>\n          </div>\n        </div>\n        <div style={pageStyle.row}>\n          <div style={pageStyle.column}>\n            Clearer subjects when they are moving. Darker picture because less\n            light can enter your camera.\n          </div>\n          <div style={pageStyle.column}>\n            Blurrier subjects when they are moving. Brighter pictures because\n            more light can enter your camera.\n          </div>\n        </div>\n      </div>\n      <p>\n        A shutter speed of 1/60 is the lowest speed you can get for a bright\n        photo that isn't noticeably blurry.\n      </p>\n    </div>\n  );\n};\n\nconst Aperture = () => {\n  return (\n    <div>\n      <h3>Aperture</h3>\n      <p>\n        The <strong>Aperture</strong> is the camera lens' opening that allows\n        light in. The measurement of that opening is called the{\" \"}\n        <strong>F-Stop</strong>. The Aperture and F-Stop are inversely\n        proportional.\n      </p>\n      <div style={pageStyle.table}>\n        <div style={pageStyle.row}>\n          <div style={pageStyle.column}>\n            <strong>Low F-Stop / High Aperture:</strong>\n          </div>\n          <div style={pageStyle.column}>\n            <strong>High F-Stop / Low Aperture:</strong>\n          </div>\n        </div>\n        <div style={pageStyle.row}>\n          <div style={pageStyle.column}>\n            Your Depth of Field is very narrow; your pictures will be brighter\n            and will have foreground and background blur.\n          </div>\n          <div style={pageStyle.column}>\n            Your Depth of Field is very wide; your pictures will be darker but\n            will have less blurred backgrounds and foregrounds.\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nconst ISO = () => {\n  return (\n    <div>\n      <h3>ISO</h3>\n      <p>\n        Your camera's <strong>ISO</strong> is a measure of how sensitive your\n        camera's sensors are to light.\n      </p>\n      <p>\n        Increasing your camera's ISO makes your pictures brighter, but it also\n        increases their <strong>noise</strong>, or their grainy-ness. This is\n        why night photos, which usually are taken with high ISO, have black dots\n        when you look closely.\n      </p>\n      <div style={pageStyle.table}>\n        <div style={pageStyle.row}>\n          <div style={pageStyle.column}>\n            <strong>Low ISO:</strong>\n          </div>\n          <div style={pageStyle.column}>\n            <strong>High ISO:</strong>\n          </div>\n        </div>\n        <div style={pageStyle.row}>\n          <div style={pageStyle.column}>\n            Your camera's sensors are not very sensitive, reducing overall\n            brightness. This makes your pictures less noisy though.\n          </div>\n          <div style={pageStyle.column}>\n            Your camera's sensors are very sensitive to light, meaning brighter\n            images. However, this make your pictures more noisy.\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport { Home, Aperture, ShutterSpeed, ISO };",
                  "solvedContent": null
                },
                {
                  "name": "navigation.jsx",
                  "codeLanguage": "jsx",
                  "content": "import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { navStyle } from \"./styles.jsx\";\n\nconst Navigation = (props) => {\n  return (\n    <nav style={navStyle.nav}>\n      <button style={navStyle.navLink}>Home</button>\n      <Link to=\"/aperture\">\n        <button style={navStyle.navLink}>Aperture</button>\n      </Link>\n      <button style={navStyle.navLink}>Shutter Speed</button>\n      <button style={navStyle.navLink}>ISO</button>\n    </nav>\n  );\n};\n\nexport default Navigation;",
                  "solvedContent": "import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { navStyle } from \"./styles.jsx\";\n\nconst Navigation = (props) => {\n  return (\n    <nav style={navStyle.nav}>\n      <Link to=\"/\">\n        <button style={navStyle.navLink}>Home</button>\n      </Link>\n      <Link to=\"/aperture\">\n        <button style={navStyle.navLink}>Aperture</button>\n      </Link>\n      <Link to=\"/shutterspeed\">\n        <button style={navStyle.navLink}>Shutter Speed</button>\n      </Link>\n      <Link to=\"/iso\">\n        <button style={navStyle.navLink}>ISO</button>\n      </Link>\n    </nav>\n  );\n};\n\nexport default Navigation;"
                },
                {
                  "name": "styles.jsx",
                  "codeLanguage": "jsx",
                  "content": "const wrapperStyle = {\n  wrapper: {\n    width: \"100%\",\n    fontFamily: \"Times New Roman, Verdana, Arial, sans-serif\",\n    fontSize: 16,\n    padding: 16,\n    boxSizing: \"border-box\",\n    textAlign: \"center\",\n  },\n};\n\nconst navStyle = {\n  nav: {\n    textAlign: \"center\",\n    display: \"flex\",\n    flexDirection: \"row\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    flexWrap: \"nowrap\",\n  },\n  navLink: {\n    flexBasis: \"100\",\n    flexShrink: \"1\",\n    margin: 2,\n    paddingLeft: 8,\n    paddingRight: 8,\n    paddingTop: 4,\n    paddingBottom: 4,\n    fontSize: 12,\n  },\n};\n\nconst pageStyle = {\n  table: {\n    width: \"100%\",\n    display: \"flex\",\n    flexDirection: \"column\",\n    flexWrap: \"nowrap\",\n    justifyContent: \"flex-start\",\n    alignItems: \"stretch\",\n  },\n  row: {\n    width: \"100%\",\n    marginBottom: 4,\n    display: \"flex\",\n    flexDirection: \"row\",\n    flexWrap: \"nowrap\",\n    justifyContent: \"space-between\",\n    alignItems: \"flex-start\",\n  },\n  column: {\n    flexBasis: \"50%\",\n    flexShrink: 1,\n    flexGrow: 0,\n    marginLeft: 4,\n    marginRight: 4,\n  },\n};\n\nexport { wrapperStyle, navStyle, pageStyle };",
                  "solvedContent": null
                }
              ],
              "hints": []
            }
          }
        ]
      }
    ]
  }
}