{
  "tutorial": {
    "id": 2666,
    "version": 5,
    "type": "guidedProject",
    "isNew": false,
    "codeLanguage": "python",
    "title": "Ziehe eine Karte - Teil 2",
    "descriptionContent": "Übernimm die Kontrolle im zweiten Teil, indem du entscheidest, wie viele Karten du ziehst, und mache das Kartenspiel noch spannender.",
    "shortDescriptionContent": "",
    "showInTrack": true,
    "iconBanner": "tutorial-2666-icon-banner.svg",
    "chapters": [
      {
        "id": 14641,
        "title": "Kapitel #1",
        "type": "practiceLevel3",
        "lessons": [
          {
            "title": "Lesson #1",
            "id": 129494,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Willkommen zurück zum zweiten Teil des **Draw a Card**-Projekts. Wir werden dem Benutzer erlauben, auszuwählen, wie viele Karten er ziehen möchte, und sie buchstäblich in der Konsole zeichnen.\n\n1. Aktualisiere die `draw_card` Funktion\n   - Füge der Funktion `draw_card` einen zweiten Parameter hinzu, der die Anzahl der Karten angibt, die wir vom Deck ziehen möchten.\n   - Verwende diese Information, um so viele Karten in der Variable `hand` zu speichern und entferne so viele Karten aus dem Deck.\n   - Belasse die `return`-Anweisung unverändert.\n2. Wenn die Funktion `draw_card` innerhalb der `while`-Schleife aufgerufen wird, übergebe `1` als zweites Argument, um die Funktionalität vorerst gleich zu halten.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "import random\n\ndef draw_card(deck):\n  hand = deck.pop()\n  return [hand], deck\n\ndef create_deck():\n  suits = [\"♥\", \"♦\", \"♣\", \"♠\"]\n  ranks = [\"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"J\", \"Q\", \"K\", \"A\"]\n  deck = []\n\n  for suit in suits:\n    for rank in ranks:\n      deck.append((suit, rank))\n\n  return deck\n\ndeck = create_deck()\nwhile len(deck) > 0:\n  input(\"Press Enter to draw the next card\")\n  hand, deck = draw_card(deck)\n  print(hand[0])\n\nprint(\"We are out of cards\")",
                  "solvedContent": "import random\n\ndef draw_card(deck, num_cards):\n  hand = []\n  for _ in range(num_cards):\n    if deck:\n      hand.append(deck.pop())\n    else:\n      break\n  return hand, deck\n\ndef create_deck():\n  suits = [\"♥\", \"♦\", \"♣\", \"♠\"]\n  ranks = [\"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"J\", \"Q\", \"K\", \"A\"]\n  deck = []\n\n  for suit in suits:\n    for rank in ranks:\n      deck.append((suit, rank))\n\n  return deck\n\ndeck = create_deck()\nwhile len(deck) > 0:\n  input(\"Press Enter to draw the next card\")\n  hand, deck = draw_card(deck, 1)\n  print(hand[0])\n\nprint(\"We are out of cards\")"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Lesson #2",
            "id": 129495,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Lass uns die Hauptschleife des Programms so ändern, dass der Benutzer angeben kann, wie viele Karten er auf einmal ziehen möchte.\n\n1. Ändere den `input`-Aufruf, um den Benutzer zu fragen, wie viele Karten er ziehen möchte. Wandle die Benutzereingabe in einen Integer um und weise sie einer Variablen namens `num_cards` zu.\n2. Ändere anschließend den `draw_card`-Funktionsaufruf, sodass er `num_cards` als Argument anstelle von `1` übernimmt, um die Anzahl der zu ziehenden Karten widerzuspiegeln.\n3. Füge eine Überprüfung hinzu, um niemals mehr Karten zu ziehen, als noch im Deck verfügbar sind.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "import random\n\ndef draw_card(deck, num_cards):\n  hand = []\n  for _ in range(num_cards):\n    if deck:\n      hand.append(deck.pop())\n    else:\n      break\n  return hand, deck\n\ndef create_deck():\n  suits = [\"♥\", \"♦\", \"♣\", \"♠\"]\n  ranks = [\"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"J\", \"Q\", \"K\", \"A\"]\n  deck = []\n\n  for suit in suits:\n    for rank in ranks:\n      deck.append((suit, rank))\n\n  return deck\n\ndeck = create_deck()\nwhile len(deck) > 0:\n  input(\"Press Enter to draw the next card\")\n  hand, deck = draw_card(deck, 1)\n  print(hand[0])\n\nprint(\"We are out of cards\")",
                  "solvedContent": "import random\n\ndef draw_card(deck, num_cards):\n  hand = []\n  for _ in range(num_cards):\n    if deck:\n      hand.append(deck.pop())\n    else:\n      break\n  return hand, deck\n\ndef create_deck():\n  suits = [\"♥\", \"♦\", \"♣\", \"♠\"]\n  ranks = [\"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"J\", \"Q\", \"K\", \"A\"]\n  deck = []\n\n  for suit in suits:\n    for rank in ranks:\n      deck.append((suit, rank))\n\n  return deck\n\ndeck = create_deck()\nwhile len(deck) > 0:\n  num_cards = int(input(\"How many cards do you want to draw? \"))\n  hand, deck = draw_card(deck, num_cards)\n  print(hand[0])\n\nprint(\"We are out of cards\")"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Lesson #4",
            "id": 129497,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Lass uns jede Karte einzeln ausdrucken.\n\n1. Erstelle oberhalb der `while`-Schleife eine neue Funktion `show_card`, die einen Parameter namens `card` akzeptiert. Alles, was die Funktion tun sollte, ist das Argument zu drucken, das an sie übergeben wurde.\n2. Lösche innerhalb der `while`-Schleife die `print`-Anweisung, die zuvor verwendet wurde, um die Karte zu drucken.\n3. Rufe stattdessen `show_card` für jedes Element in `hand` auf.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "import random\n\ndef draw_card(deck, num_cards):\n  hand = []\n  for _ in range(num_cards):\n    if deck:\n      hand.append(deck.pop())\n    else:\n      break\n  return hand, deck\n\ndef create_deck():\n  suits = [\"♥\", \"♦\", \"♣\", \"♠\"]\n  ranks = [\"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"J\", \"Q\", \"K\", \"A\"]\n  deck = []\n\n  for suit in suits:\n    for rank in ranks:\n      deck.append((suit, rank))\n\n  return deck\n\ndeck = create_deck()\nwhile len(deck) > 0:\n  num_cards = int(input(\"How many cards do you want to draw? \"))\n  hand, deck = draw_card(deck, num_cards)\n  print(hand[0])\n\nprint(\"We are out of cards\")",
                  "solvedContent": "import random\n\ndef draw_card(deck, num_cards):\n  hand = []\n  for _ in range(num_cards):\n    if deck:\n      hand.append(deck.pop())\n    else:\n      break\n  return hand, deck\n\ndef create_deck():\n  suits = [\"♥\", \"♦\", \"♣\", \"♠\"]\n  ranks = [\"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"J\", \"Q\", \"K\", \"A\"]\n  deck = []\n\n  for suit in suits:\n    for rank in ranks:\n      deck.append((suit, rank))\n\n  return deck\n\ndef show_card(card):\n  print(card)\n\ndeck = create_deck()\nwhile len(deck) > 0:\n  num_cards = int(input(\"How many cards do you want to draw? \"))\n  hand, deck = draw_card(deck, num_cards)\n  for card in hand:\n    show_card(card)\n\nprint(\"We are out of cards\")"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Lesson #3",
            "id": 129496,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Als letzter Schritt im Projekt aktualisieren wir die neu erstellte Funktion `show_card`, um Karten schön anzuzeigen. Wir möchten, dass sie eine ASCII-Darstellung einer Karte ausgibt.\n\n1. Aktualisiere die Funktion `show_card`:\n   - Lösche die `print`-Funktion, die das übergebene Argument `card` ausgibt.\n   - Kopiere stattdessen den folgenden Code oder passe ihn nach Belieben an:\n   ```Python\n   space = \" \"\n   if len(card[1]) == 2:\n     space = \"\"\n   print (f\"\"\"\n   +-------+\n   |{card[1]}     {space}|\n   |       |\n   |   {card[0]}   |\n   |       |\n   |{space}     {card[1]}|\n   +-------+\n   \"\"\")\n   ```\n\nDieser Code druckt das Symbol der Karte in der Mitte und den Rang oben links und unten rechts. Es wird auch ein zusätzliches Leerzeichen für alle Ränge außer `10` hinzugefügt, damit die Karte für alle Variationen gut aussieht. \n\nFühle dich frei, mit dem Code zu experimentieren und ihn nach Belieben anzupassen.\n\nEs gibt keinen Test für die konkrete Kartenausgabe. Fühle dich frei, das Projekt abzuschließen, wann immer du bereit bist.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "import random\n\ndef draw_card(deck, num_cards):\n  hand = []\n  for _ in range(num_cards):\n    if deck:\n      hand.append(deck.pop())\n    else:\n      break\n  return hand, deck\n\ndef create_deck():\n  suits = [\"♥\", \"♦\", \"♣\", \"♠\"]\n  ranks = [\"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"J\", \"Q\", \"K\", \"A\"]\n  deck = []\n\n  for suit in suits:\n    for rank in ranks:\n      deck.append((suit, rank))\n\n  return deck\n\ndef show_card(card):\n  print(card)\n\ndeck = create_deck()\nwhile len(deck) > 0:\n  num_cards = int(input(\"How many cards do you want to draw? \"))\n  hand, deck = draw_card(deck, num_cards)\n  for card in hand:\n    show_card(card)\n\nprint(\"We are out of cards\")",
                  "solvedContent": "import random\n\ndef draw_card(deck, num_cards):\n  hand = []\n  for _ in range(num_cards):\n    if deck:\n      hand.append(deck.pop())\n    else:\n      break\n  return hand, deck\n\ndef create_deck():\n  suits = [\"♥\", \"♦\", \"♣\", \"♠\"]\n  ranks = [\"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"J\", \"Q\", \"K\", \"A\"]\n  deck = []\n\n  for suit in suits:\n    for rank in ranks:\n      deck.append((suit, rank))\n\n  return deck\n\ndef show_card(card):\n  space = \" \"\n  if len(card[1]) == 2:\n    space = \"\"\n  print (f\"\"\"\n      +-------+\n      |{card[1]}     {space}|\n      |       |\n      |   {card[0]}   |\n      |       |\n      |{space}     {card[1]}|\n      +-------+\n      \"\"\")\n\ndeck = create_deck()\nwhile len(deck) > 0:\n  num_cards = int(input(\"How many cards do you want to draw? \"))\n  hand, deck = draw_card(deck, num_cards)\n  for card in hand:\n    show_card(card)\n\nprint(\"We are out of cards\")"
                }
              ],
              "hints": []
            }
          }
        ]
      }
    ]
  }
}