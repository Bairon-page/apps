{
  "tutorial": {
    "id": 1973,
    "version": 10,
    "type": "guidedProjectOptional",
    "isNew": false,
    "codeLanguage": "javascript",
    "title": "Todo-App",
    "descriptionContent": "Verwende dein bisheriges Wissen, um eine Todo-App zu erstellen",
    "shortDescriptionContent": "",
    "showInTrack": true,
    "iconBanner": "tutorial-1973-icon-banner.svg",
    "chapters": [
      {
        "id": 12643,
        "title": "Todo-App",
        "type": "practiceLevel3",
        "lessons": [
          {
            "title": "Starter Code",
            "id": 114691,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Lass uns unser Wissen über dynamische Webseiten nutzen, um eine Todo-Anwendung zu erstellen.\n\nWir beginnen damit, uns mit dem Starter-Code vertraut zu machen.\n\nWir haben bereits den HTML- und CSS-Code für die Website hinzugefügt.\n\nDeine Aufgabe ist es, dein Javascript-Wissen zu nutzen, um die Funktionen `createTodo`, `deleteTodos` und `todoCheck` funktionsfähig zu machen.\n\nNimm dir einen Moment Zeit, um den Anfangscode anzusehen, und gehe dann zum Beginn der Übung über.",
              "preselectedFileIndex": 2,
              "hasVisualOutput": true,
              "files": [
                {
                  "name": "index.html",
                  "codeLanguage": "html",
                  "content": "<!doctype html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>To do list application</title>\n    <link rel=\"stylesheet\" href=\"./style.css\">\n  </head>\n  <body>\n    <h1> Todo List</h1>\n    <div class=\"lines\">\n      <ul id=\"todos-container\">\n      </ul>\n    </div>\n    <p>Add items on the list, you can click on an item to check it off</p>\n    <div id=\"container\">\n      <input id=\"note\" type=\"text\" placeholder=\"Add something\" />\n      <button type=\"button\" onclick=\"createTodo()\">Add</button>\n      <button type=\"button\" onclick=\"deleteTodos()\">Delete all</button>\n    </div>\n    <script src=\"./script.js\"></script>\n  </body>\n</html>",
                  "solvedContent": null
                },
                {
                  "name": "style.css",
                  "codeLanguage": "css",
                  "content": "h1,\np,\n#container {\n  text-align: center;\n}\n\nli {\n  list-style: none;\n  border-bottom: 1px dotted #CCC;\n  height: auto;\n  background-color: #F0F0F0;\n}\n\nli:hover {\n  background-color: #FFFFFF;\n  -webkit-transition: all 0.2s;\n  -moz-transition: all 0.2s;\n  -ms-transition: all 0.2s;\n  -o-transition: all 0.2s;\n}\n\n.notes {\n  display: flex;\n  justify-content: center;\n  flex-direction: column;\n  background-color: #F5F5F5;\n}\n\n.lines {\n  line-height: 20px;\n  margin: 0 auto;\n  width: auto;\n}",
                  "solvedContent": null
                },
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "function createTodo() {}\n\nfunction deleteTodos() {}\n\nfunction todoCheck(e, todo) {}",
                  "solvedContent": null
                }
              ],
              "hints": []
            }
          },
          {
            "title": "CreateTodo - Step 1",
            "id": 114693,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Lass uns mit dem Erstellen der Funktion `createTodo` beginnen.\n\nDiese Funktion erstellt ein `li`-Element, fügt das Element innerhalb des `ul`-Elements hinzu und erfasst die Benutzereingabe, um sie dem `li` hinzuzufügen.\n\nZuerst erstellen wir das `li`-Element.\n\nWir werden das `li`-Element auch dem `ul`-Todos-Container anhängen, damit es später verwendet werden kann, um die Benutzereingabe anzuzeigen.\n\n1. Erstelle eine Konstante `listItem` innerhalb der Funktion `createTodo`.\n2. Erzeuge ein `li`-Element und speichere es in der Konstante `listItem`.\n3. Erstelle eine Konstante `todosContainerElement` innerhalb der Funktion `createTodo`.\n4. Greife auf das `ul`-Element zu, indem du seine ID verwendest, und speichere es in der Konstante `todosContainerElement`.\n5. Füge in der nächsten Zeile `listItem` zu `todosContainerElement` hinzu.\n6. (Optional) Ersetze den `background-color`-Wert des `li`-Elements (z.B.: verwende `\"red\"`), damit du testen und sehen kannst, wie das Todo auf der Seite erscheint. Setze es wieder zurück, bevor du zur nächsten Übung übergehst.",
              "preselectedFileIndex": 2,
              "hasVisualOutput": true,
              "files": [
                {
                  "name": "index.html",
                  "codeLanguage": "html",
                  "content": "<!doctype html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>To do list application</title>\n    <link rel=\"stylesheet\" href=\"./style.css\">\n  </head>\n  <body>\n    <h1> Todo List</h1>\n    <div class=\"lines\">\n      <ul id=\"todos-container\">\n      </ul>\n    </div>\n    <p>Add items on the list, you can click on an item to check it off</p>\n    <div id=\"container\">\n      <input id=\"note\" type=\"text\" placeholder=\"Add something\" />\n      <button type=\"button\" onclick=\"createTodo()\">Add</button>\n      <button type=\"button\" onclick=\"deleteTodos()\">Delete all</button>\n    </div>\n    <script src=\"./script.js\"></script>\n  </body>\n</html>",
                  "solvedContent": null
                },
                {
                  "name": "style.css",
                  "codeLanguage": "css",
                  "content": "h1,\np,\n#container {\n text-align: center;\n}\n\nli {\n list-style: none;\n border-bottom: 1px dotted #CCC;\n height: auto;\n background-color: #F0F0F0;\n}\n\nli:hover {\n background-color: #FFFFFF;\n -webkit-transition: all 0.2s;\n -moz-transition: all 0.2s;\n -ms-transition: all 0.2s;\n -o-transition: all 0.2s;\n}\n\n.notes {\n display: flex;\n justify-content: center;\n flex-direction: column;\n background-color: #F5F5F5;\n}\n\n.lines {\n line-height: 20px;\n margin: 0 auto;\n width: auto;\n}",
                  "solvedContent": null
                },
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "function createTodo() {}\n\nfunction deleteTodos() {}\n\nfunction todoCheck(e, todo) {}",
                  "solvedContent": "function createTodo() {\n  const listItem = document.createElement(\"li\");\n  const todosContainerElement = document.getElementById('todos-container');\n  todosContainerElement.appendChild(listItem);\n}\n\nfunction deleteTodos() {}\n\nfunction todoCheck(e, todo) {}"
                }
              ],
              "hints": [
                {
                  "title": "Hint",
                  "content": "To create elements, use `document.createElement()`.\n\nTo access elements by id, use `document.getElementById()`.\n\nTo append an element, use `appendChild()`."
                }
              ]
            }
          },
          {
            "title": "CreateTodo - Step 2",
            "id": 114695,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Nun lass uns erfassen, was der Benutzer in das Eingabefeld eingibt, und es in einer Variable speichern, damit wir es dynamisch zur Seite hinzufügen können.\n\nDann lass uns den Wert unserer Eingabe `listItem` zuweisen, damit es den Wert unseres Todos enthält.\n\n1. Erstelle eine Konstante `userInput` innerhalb der Funktion `createTodo`.\n2. Finde das Eingabeelement, indem du seine ID verwendest, und speichere es in der Konstante `userInput`.\n3. Füge `.value` zur gleichen Zeile hinzu, um auf den Inhalt des `input`-Elements zuzugreifen und ihn zu speichern.\n4. Füge in der nächsten Zeile Code hinzu, um auf den HTML-Inhalt von `listItem` zuzugreifen.\n5. Weisen den HTML-Inhalt `userInput` als seinen Wert zu.",
              "preselectedFileIndex": 2,
              "hasVisualOutput": true,
              "files": [
                {
                  "name": "index.html",
                  "codeLanguage": "html",
                  "content": "<!doctype html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>To do list application</title>\n    <link rel=\"stylesheet\" href=\"./style.css\">\n  </head>\n  <body>\n    <h1> Todo List</h1>\n    <div class=\"lines\">\n      <ul id=\"todos-container\">\n      </ul>\n    </div>\n    <p>Add items on the list, you can click on an item to check it off</p>\n    <div id=\"container\">\n      <input id=\"note\" type=\"text\" placeholder=\"Add something\" />\n      <button type=\"button\" onclick=\"createTodo()\">Add</button>\n      <button type=\"button\" onclick=\"deleteTodos()\">Delete all</button>\n    </div>\n    <script src=\"./script.js\"></script>\n  </body>\n</html>",
                  "solvedContent": null
                },
                {
                  "name": "style.css",
                  "codeLanguage": "css",
                  "content": "h1,\np,\n#container {\n  text-align: center;\n}\n\nli {\n  list-style: none;\n  border-bottom: 1px dotted #CCC;\n  height: auto;\n  background-color: #F0F0F0;\n}\n\nli:hover {\n  background-color: #FFFFFF;\n  -webkit-transition: all 0.2s;\n  -moz-transition: all 0.2s;\n  -ms-transition: all 0.2s;\n  -o-transition: all 0.2s;\n}\n\n.notes {\n  display: flex;\n  justify-content: center;\n  flex-direction: column;\n  background-color: #F5F5F5;\n}\n\n.lines {\n  line-height: 20px;\n  margin: 0 auto;\n  width: auto;\n}",
                  "solvedContent": null
                },
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "function createTodo() {\n  const listItem = document.createElement(\"li\");\n  const todosContainerElement = document.getElementById('todos-container');\n  todosContainerElement.appendChild(listItem);\n}\n\nfunction deleteTodos() {}\n\nfunction todoCheck(e, todo) {}",
                  "solvedContent": "function createTodo() {\n  const listItem = document.createElement(\"li\");\n  const todosContainerElement = document.getElementById('todos-container');\n  todosContainerElement.appendChild(listItem);\n  const userInput = document.getElementById('note').value;\n  listItem.innerHTML = userInput;\n}\n\nfunction deleteTodos() {}\n\nfunction todoCheck(e, todo) {}"
                }
              ],
              "hints": [
                {
                  "title": "Hint",
                  "content": "You can access the content of an element by using `.innerHTML`.\n\nYou can add `console.log(userInput)` temporarily in order to check that the input value gets captured. Make sure to remove it before moving to the next step.\n"
                }
              ]
            }
          },
          {
            "title": "CreateTodo - Step 3",
            "id": 114694,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Schließlich müssen wir etwas Code hinzufügen, damit unsere Todos die Funktion `todoCheck` ausführen, wenn sie angeklickt werden. Diese Funktion sollte das Listenelement durchstreichen.\n\nWir verwenden die Funktion `setAttribute()`, um ein `onclick`-Attribut zu unseren Todos hinzuzufügen und die Funktion `todoCheck` als ihren Wert festzulegen.\n\nAußerdem verbessern wir die Benutzererfahrung, indem wir das, was im `input`-Element eingegeben wurde, entfernen, nachdem unser Todo erstellt wurde.\n\n1. Verwende `setAttribute()`, um das `onclick`-Attribut von `listItem` auf die Funktion `todoCheck(e, todo)` zu setzen. Auf diese Weise wird die Funktion ausgeführt, wenn Benutzer auf das Todo klicken. Sieh dir die Hinweise an, wenn du damit nicht vertraut bist.\n2. Leere den `input`-Wert, indem du auf das Element mit der ID `note` zugreifst. Setze dann seinen `.value` auf einen leeren String.\n3. Bestätige, dass dein Eingabefeld leer wird, nachdem du ein Todo eingegeben hast.",
              "preselectedFileIndex": 2,
              "hasVisualOutput": true,
              "files": [
                {
                  "name": "index.html",
                  "codeLanguage": "html",
                  "content": "<!doctype html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>To do list application</title>\n    <link rel=\"stylesheet\" href=\"./style.css\">\n  </head>\n  <body>\n    <h1> Todo List</h1>\n    <div class=\"lines\">\n      <ul id=\"todos-container\">\n      </ul>\n    </div>\n    <p>Add items on the list, you can click on an item to check it off</p>\n    <div id=\"container\">\n      <input id=\"note\" type=\"text\" placeholder=\"Add something\" />\n      <button type=\"button\" onclick=\"createTodo()\">Add</button>\n      <button type=\"button\" onclick=\"deleteTodos()\">Delete all</button>\n    </div>\n    <script src=\"./script.js\"></script>\n  </body>\n</html>",
                  "solvedContent": null
                },
                {
                  "name": "style.css",
                  "codeLanguage": "css",
                  "content": "h1,\np,\n#container {\n  text-align: center;\n}\n\nli {\n  list-style: none;\n  border-bottom: 1px dotted #CCC;\n  height: auto;\n  background-color: #F0F0F0;\n}\n\nli:hover {\n  background-color: #FFFFFF;\n  -webkit-transition: all 0.2s;\n  -moz-transition: all 0.2s;\n  -ms-transition: all 0.2s;\n  -o-transition: all 0.2s;\n}\n\n.notes {\n  display: flex;\n  justify-content: center;\n  flex-direction: column;\n  background-color: #F5F5F5;\n}\n\n.lines {\n  line-height: 20px;\n  margin: 0 auto;\n  width: auto;\n}",
                  "solvedContent": null
                },
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "function createTodo() {\n  const listItem = document.createElement(\"li\");\n  const todosContainerElement = document.getElementById('todos-container');\n  todosContainerElement.appendChild(listItem);\n  const userInput = document.getElementById('note').value;\n  listItem.innerHTML = userInput;\n}\n\nfunction deleteTodos() {}\n\nfunction todoCheck(e, todo) {}",
                  "solvedContent": "function createTodo() {\n  const listItem = document.createElement(\"li\");\n  const todosContainerElement = document.getElementById('todos-container');\n  todosContainerElement.appendChild(listItem);\n  const userInput = document.getElementById('note').value;\n  listItem.innerHTML = userInput;\n  listItem.setAttribute(\"onclick\", \"todoCheck(event, this)\");\n  document.getElementById('note').value = '';\n}\n\nfunction deleteTodos() {}\n\nfunction todoCheck(e, todo) {}"
                }
              ],
              "hints": [
                {
                  "title": "Hint",
                  "content": "Set the `onclick` attribute on the list item like this: `.setAttribute(\"onclick\", \"todoCheck(event, this)\")`.\n\nEmpty the input with `document.getElementById('note').value = ''`."
                }
              ]
            }
          },
          {
            "title": "TodoCheck - Step 1",
            "id": 114698,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Lass uns nun `todoCheck` definieren, das sich um das Abhaken und Entfernen des Hakens von Todos auf der Seite kümmern wird.\n\nWir werden dies tun, indem wir die CSS-Eigenschaft `text-decoration` verwenden, die wir dynamisch über die `style`-Eigenschaft des Todo-Elements aktualisieren.\n\nWir haben die Funktion so eingerichtet, dass ihr zweites Argument `todo` das angeklickte Todo enthalten wird.\n\nWir werden dieses Argument und die `style`-Eigenschaft verwenden, um das Aussehen unseres Todos zu ändern, nachdem es angeklickt wurde.\n\n1. Füge `todo.style.textDecoration` in `todoCheck()` hinzu, das eine Linie durch ein Todo zieht, wenn du darauf klickst.",
              "preselectedFileIndex": 2,
              "hasVisualOutput": true,
              "files": [
                {
                  "name": "index.html",
                  "codeLanguage": "html",
                  "content": "<!doctype html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>To do list application</title>\n    <link rel=\"stylesheet\" href=\"./style.css\">\n  </head>\n  <body>\n    <h1> Todo List</h1>\n    <div class=\"lines\">\n      <ul id=\"todos-container\">\n      </ul>\n    </div>\n    <p>Add items on the list, you can click on an item to check it off</p>\n    <div id=\"container\">\n      <input id=\"note\" type=\"text\" placeholder=\"Add something\" />\n      <button type=\"button\" onclick=\"createTodo()\">Add</button>\n      <button type=\"button\" onclick=\"deleteTodos()\">Delete all</button>\n    </div>\n    <script src=\"./script.js\"></script>\n  </body>\n</html>",
                  "solvedContent": null
                },
                {
                  "name": "style.css",
                  "codeLanguage": "css",
                  "content": "h1,\np,\n#container {\n  text-align: center;\n}\n\nli {\n  list-style: none;\n  border-bottom: 1px dotted #CCC;\n  height: auto;\n  background-color: #F0F0F0;\n}\n\nli:hover {\n  background-color: #FFFFFF;\n  -webkit-transition: all 0.2s;\n  -moz-transition: all 0.2s;\n  -ms-transition: all 0.2s;\n  -o-transition: all 0.2s;\n}\n\n.notes {\n  display: flex;\n  justify-content: center;\n  flex-direction: column;\n  background-color: #F5F5F5;\n}\n\n.lines {\n  line-height: 20px;\n  margin: 0 auto;\n  width: auto;\n}",
                  "solvedContent": null
                },
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "function createTodo() {\n  const userInput = document.getElementById('note').value;\n  const listItem = document.createElement(\"li\");\n  const todosContainerElement = document.getElementById('todos-container');\n  listItem.innerHTML = userInput;\n  todosContainerElement.appendChild(listItem);\n  listItem.setAttribute(\"onclick\", \"todoCheck(event, this)\");\n  document.getElementById('note').value = '';\n}\n\nfunction deleteTodos() {}\n\nfunction todoCheck(e, todo) {}",
                  "solvedContent": "function createTodo() {\n  const userInput = document.getElementById('note').value;\n  const listItem = document.createElement(\"li\");\n  const todosContainerElement = document.getElementById('todos-container');\n  listItem.innerHTML = userInput;\n  todosContainerElement.appendChild(listItem);\n  listItem.setAttribute(\"onclick\", \"todoCheck(event, this)\");\n  document.getElementById('note').value = '';\n}\n\nfunction deleteTodos() {}\n\nfunction todoCheck(e, todo) {\n  todo.style.textDecoration = 'line-through';\n}"
                }
              ],
              "hints": [
                {
                  "title": "Hint",
                  "content": "You should have something like this\n```JS\ntodo.style.textDecoration = <assignedValue>\n```"
                }
              ]
            }
          },
          {
            "title": "TodoCheck - Step 2",
            "id": 114699,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Als nächstes möchten wir in der Lage sein, ein Todo-Element durchzustreichen. Lass uns `todoCheck` verfeinern, damit es unsere Todos je nach ihrem Zustand an- und abwählen kann.\n\nWir werden dazu eine `if`-Bedingung verwenden.\n\n1. Füge eine Bedingung hinzu, um zu überprüfen, ob die `textDecoration`-Eigenschaft unseres Todos leer ist (du kannst feststellen, dass eine Eigenschaft leer ist, indem du überprüfst, ob sie einem leeren String entspricht).\n2. Wenn die Bedingung wahr ist, weise `line-through` als Wert der `textDecoration`-Eigenschaft unseres Todos zu.",
              "preselectedFileIndex": 2,
              "hasVisualOutput": true,
              "files": [
                {
                  "name": "index.html",
                  "codeLanguage": "html",
                  "content": "<!doctype html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>To do list application</title>\n    <link rel=\"stylesheet\" href=\"./style.css\">\n  </head>\n  <body>\n    <h1> Todo List</h1>\n    <div class=\"lines\">\n      <ul id=\"todos-container\">\n      </ul>\n    </div>\n    <p>Add items on the list, you can click on an item to check it off</p>\n    <div id=\"container\">\n      <input id=\"note\" type=\"text\" placeholder=\"Add something\" />\n      <button type=\"button\" onclick=\"createTodo()\">Add</button>\n      <button type=\"button\" onclick=\"deleteTodos()\">Delete all</button>\n    </div>\n    <script src=\"./script.js\"></script>\n  </body>\n</html>",
                  "solvedContent": null
                },
                {
                  "name": "style.css",
                  "codeLanguage": "css",
                  "content": "h1,\np,\n#container {\n  text-align: center;\n}\n\nli {\n  list-style: none;\n  border-bottom: 1px dotted #CCC;\n  height: auto;\n  background-color: #F0F0F0;\n}\n\nli:hover {\n  background-color: #FFFFFF;\n  -webkit-transition: all 0.2s;\n  -moz-transition: all 0.2s;\n  -ms-transition: all 0.2s;\n  -o-transition: all 0.2s;\n}\n\n.notes {\n  display: flex;\n  justify-content: center;\n  flex-direction: column;\n  background-color: #F5F5F5;\n}\n\n.lines {\n  line-height: 20px;\n  margin: 0 auto;\n  width: auto;\n}",
                  "solvedContent": null
                },
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "function createTodo() {\n  const userInput = document.getElementById('note').value;\n  const listItem = document.createElement(\"li\");\n  const todosContainerElement = document.getElementById('todos-container');\n  listItem.innerHTML = userInput;\n  todosContainerElement.appendChild(listItem);\n  listItem.setAttribute(\"onclick\", \"todoCheck(event, this)\");\n  document.getElementById('note').value = '';\n}\n\nfunction deleteTodos() {}\n\nfunction todoCheck(e, todo) {\n  todo.style.textDecoration = 'line-through';\n}",
                  "solvedContent": "function createTodo() {\n  const userInput = document.getElementById('note').value;\n  const listItem = document.createElement(\"li\");\n  const todosContainerElement = document.getElementById('todos-container');\n  listItem.innerHTML = userInput;\n  todosContainerElement.appendChild(listItem);\n  listItem.setAttribute(\"onclick\", \"todoCheck(event, this)\");\n  document.getElementById('note').value = '';\n}\n\nfunction deleteTodos() {}\n\nfunction todoCheck(e, todo) {\n  if (todo.style.textDecoration === '') {\n    todo.style.textDecoration = 'line-through';\n  }\n}"
                }
              ],
              "hints": [
                {
                  "title": "Hint",
                  "content": "You should have something like this:\n\n```JS\nfunction todoCheck(e, todo) {\n  if (property === ' ') {\n    // code to assign 'line-through' to `textDecoration`\n  }\n}\n```"
                }
              ]
            }
          },
          {
            "title": "TodosCheck - Step 3",
            "id": 114700,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Zum Schluss müssen wir etwas Code hinzufügen, um unser Todo abzuwählen.\n\nWir werden hierfür eine `else`-Anweisung verwenden.\n\n1. Füge eine `else`-Anweisung nach der `if`-Bedingung hinzu.\n2. Weise innerhalb der Anweisung den Wert von `textDecoration` einem leeren String zu.\n3. Erstelle ein Todo, um zu testen, ob die Abwahl-Funktionalität funktioniert.",
              "preselectedFileIndex": 2,
              "hasVisualOutput": true,
              "files": [
                {
                  "name": "index.html",
                  "codeLanguage": "html",
                  "content": "<!doctype html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>To do list application</title>\n    <link rel=\"stylesheet\" href=\"./style.css\">\n  </head>\n  <body>\n    <h1> Todo List</h1>\n    <div class=\"lines\">\n      <ul id=\"todos-container\">\n      </ul>\n    </div>\n    <p>Add items on the list, you can click on an item to check it off</p>\n    <div id=\"container\">\n      <input id=\"note\" type=\"text\" placeholder=\"Add something\" />\n      <button type=\"button\" onclick=\"createTodo()\">Add</button>\n      <button type=\"button\" onclick=\"deleteTodos()\">Delete all</button>\n    </div>\n    <script src=\"./script.js\"></script>\n  </body>\n</html>",
                  "solvedContent": null
                },
                {
                  "name": "style.css",
                  "codeLanguage": "css",
                  "content": "h1,\np,\n#container {\n  text-align: center;\n}\n\nli {\n  list-style: none;\n  border-bottom: 1px dotted #CCC;\n  height: auto;\n  background-color: #F0F0F0;\n}\n\nli:hover {\n  background-color: #FFFFFF;\n  -webkit-transition: all 0.2s;\n  -moz-transition: all 0.2s;\n  -ms-transition: all 0.2s;\n  -o-transition: all 0.2s;\n}\n\n.notes {\n  display: flex;\n  justify-content: center;\n  flex-direction: column;\n  background-color: #F5F5F5;\n}\n\n.lines {\n  line-height: 20px;\n  margin: 0 auto;\n  width: auto;\n}",
                  "solvedContent": null
                },
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "function createTodo() {\n  const userInput = document.getElementById('note').value;\n  const listItem = document.createElement(\"li\");\n  const todosContainerElement = document.getElementById('todos-container');\n  listItem.innerHTML = userInput;\n  todosContainerElement.appendChild(listItem);\n  listItem.setAttribute(\"onclick\", \"todoCheck(event, this)\");\n  document.getElementById('note').value = '';\n}\n\nfunction deleteTodos() {}\n\nfunction todoCheck(e, todo) {\n  if (todo.style.textDecoration === '') {\n    todo.style.textDecoration = 'line-through';\n  }\n}",
                  "solvedContent": "function createTodo() {\n  const userInput = document.getElementById('note').value;\n  const listItem = document.createElement(\"li\");\n  const todosContainerElement = document.getElementById('todos-container');\n  listItem.innerHTML = userInput;\n  todosContainerElement.appendChild(listItem);\n  listItem.setAttribute(\"onclick\", \"todoCheck(event, this)\");\n  document.getElementById('note').value = '';\n}\n\nfunction deleteTodos() {}\n\nfunction todoCheck(e, todo) {\n  if (todo.style.textDecoration === '') {\n    todo.style.textDecoration = 'line-through';\n  } else {\n    todo.style.textDecoration = '';\n  }\n}"
                }
              ],
              "hints": [
                {
                  "title": "Hint",
                  "content": "You should have something like this:\n\n```JS\nfunction todoCheck(e, todo) {\n  if (condition) {\n    // code to assign 'line-through' to `textDecoration`\n  }\n else{\n// code to assign empty string '' to `textDecoration`\n  }\n}\n```"
                }
              ]
            }
          },
          {
            "title": "DeleteTodos",
            "id": 114697,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Lass uns nun `deleteTodos` definieren, das alle vorhandenen Todos von der Seite entfernt.\n\nDer Container unserer Todos ist ein `ul`-Element. Um alle seine Todo-Kinder zu entfernen, werden wir seine `innerHTML`-Eigenschaft leeren.\n\n1. Greife auf das `ul`-Element zu, indem du seine id verwendest. Sieh dir die `index.html`-Datei an, um die id zu finden.\n2. Greife auf seinen Inhalt zu und weise ihm einen leeren String zu, damit alle Elemente gelöscht werden.\n3. Erstelle ein Todo und teste, ob die Funktionalität funktioniert, nachdem du auf den `Delete all`-Button geklickt hast.",
              "preselectedFileIndex": 2,
              "hasVisualOutput": true,
              "files": [
                {
                  "name": "index.html",
                  "codeLanguage": "html",
                  "content": "<!doctype html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>To do list application</title>\n    <link rel=\"stylesheet\" href=\"./style.css\">\n  </head>\n  <body>\n    <h1> Todo List</h1>\n    <div class=\"lines\">\n      <ul id=\"todos-container\">\n      </ul>\n    </div>\n    <p>Add items on the list, you can click on an item to check it off</p>\n    <div id=\"container\">\n      <input id=\"note\" type=\"text\" placeholder=\"Add something\" />\n      <button type=\"button\" onclick=\"createTodo()\">Add</button>\n      <button type=\"button\" onclick=\"deleteTodos()\">Delete all</button>\n    </div>\n    <script src=\"./script.js\"></script>\n  </body>\n</html>",
                  "solvedContent": null
                },
                {
                  "name": "style.css",
                  "codeLanguage": "css",
                  "content": "h1,\np,\n#container {\n  text-align: center;\n}\n\nli {\n  list-style: none;\n  border-bottom: 1px dotted #CCC;\n  height: auto;\n  background-color: #F0F0F0;\n}\n\nli:hover {\n  background-color: #FFFFFF;\n  -webkit-transition: all 0.2s;\n  -moz-transition: all 0.2s;\n  -ms-transition: all 0.2s;\n  -o-transition: all 0.2s;\n}\n\n.notes {\n  display: flex;\n  justify-content: center;\n  flex-direction: column;\n  background-color: #F5F5F5;\n}\n\n.lines {\n  line-height: 20px;\n  margin: 0 auto;\n  width: auto;\n}",
                  "solvedContent": null
                },
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "function createTodo() {\n  const userInput = document.getElementById('note').value;\n  const listItem = document.createElement(\"li\");\n  const todosContainerElement = document.getElementById('todos-container');\n  listItem.innerHTML = userInput;\n  todosContainerElement.appendChild(listItem);\n  listItem.setAttribute(\"onclick\", \"todoCheck(event, this)\");\n  document.getElementById('note').value = '';\n}\n\nfunction deleteTodos() {}\n\nfunction todoCheck(e, todo) {\n  if (todo.style.textDecoration === '') {\n    todo.style.textDecoration = 'line-through';\n  } else {\n    todo.style.textDecoration = '';\n  }\n}",
                  "solvedContent": "function createTodo() {\n  const userInput = document.getElementById('note').value;\n  const listItem = document.createElement(\"li\");\n  const todosContainerElement = document.getElementById('todos-container');\n  listItem.innerHTML = userInput;\n  todosContainerElement.appendChild(listItem);\n  listItem.setAttribute(\"onclick\", \"todoCheck(event, this)\");\n  document.getElementById('note').value = '';\n}\n\nfunction deleteTodos() {\n  document.getElementById('todos-container').innerHTML = '';\n}\n\nfunction todoCheck(e, todo) {\n  if (todo.style.textDecoration === '') {\n    todo.style.textDecoration = 'line-through';\n  } else {\n    todo.style.textDecoration = '';\n  }\n}"
                }
              ],
              "hints": [
                {
                  "title": "Hint",
                  "content": "To track elements, use `document.getElementById()`.\n\nYou can access the content of an element by using `.innerHTML`.\n\nAn empty string syntax is `\"\"`."
                }
              ]
            }
          }
        ]
      }
    ]
  }
}