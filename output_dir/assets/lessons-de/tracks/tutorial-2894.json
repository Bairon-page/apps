{
  "tutorial": {
    "id": 2894,
    "version": 4,
    "type": "guidedProject",
    "isNew": false,
    "codeLanguage": "javascript",
    "title": "Blackjack - Teil 1",
    "descriptionContent": "Im Blackjack werden wir das, was wir bisher gelernt haben, nutzen, um unsere eigene Version des klassischen Kartenspiels zu erstellen.",
    "shortDescriptionContent": "",
    "showInTrack": true,
    "iconBanner": "tutorial-2894-icon-banner.svg",
    "chapters": [
      {
        "id": 14985,
        "title": "Kapitel #1",
        "type": "practiceLevel3",
        "lessons": [
          {
            "title": "Lesson #1",
            "id": 132125,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Willkommen zum **Blackjack**-Projekt. In diesem Projekt erstellen wir unsere Version des klassischen Kartenspiels Blackjack.\n\nWir werden ein Array von Objekten verwenden, von denen jedes eine Karte und ihren Wert im Blackjack darstellt.\n\n1. Deklariere eine `cards`-Variable, die ein Array hält.\n2. Füge die erste Karte hinzu, ein Objekt, das zwei Attribute mit `rank` und `value` hat. Setze für die erste Karte den `rank` auf `\"2\"` und den `value` auf `2`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "app.js",
                  "codeLanguage": "javascript",
                  "content": "",
                  "solvedContent": "const cards = [{\n  rank: '2',\n  value: 2\n}];"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Lesson #1 - Copy",
            "id": 132212,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Wir müssen die verbleibenden Karten zum Array `cards` hinzufügen.\n\n1. Füge Objekte für die verbleibenden Karten zum Array `cards` hinzu.\n   - Ein Objekt für die Karte mit dem Rang `\"3\"` und dem Wert `3`.\n   - Ein Objekt für die Karte mit dem Rang `\"4\"` und dem Wert `4`.\n   - Ein Objekt für die Karte mit dem Rang `\"5\"` und dem Wert `5`.\n   - Ein Objekt für die Karte mit dem Rang `\"6\"` und dem Wert `6`.\n   - Ein Objekt für die Karte mit dem Rang `\"7\"` und dem Wert `7`.\n   - Ein Objekt für die Karte mit dem Rang `\"8\"` und dem Wert `8`.\n   - Ein Objekt für die Karte mit dem Rang `\"9\"` und dem Wert `9`.\n   - Ein Objekt für die Karte mit dem Rang `\"10\"` und dem Wert `10`.\n   - Ein Objekt für die Karte mit dem Rang `\"J\"` und dem Wert `10`.\n   - Ein Objekt für die Karte mit dem Rang `\"Q\"` und dem Wert `10`.\n   - Ein Objekt für die Karte mit dem Rang `\"K\"` und dem Wert `10`.\n   - Ein Objekt für die Karte mit dem Rang `\"A\"` und dem Wert `11`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "app.js",
                  "codeLanguage": "javascript",
                  "content": "const cards = [{\n  rank: '2',\n  value: 2\n}];",
                  "solvedContent": "const cards = [{\n  rank: '2',\n  value: 2\n}, {\n  rank: '3',\n  value: 3\n}, {\n  rank: '4',\n  value: 4\n}, {\n  rank: '5',\n  value: 5\n}, {\n  rank: '6',\n  value: 6\n}, {\n  rank: '7',\n  value: 7\n}, {\n  rank: '8',\n  value: 8\n}, {\n  rank: '9',\n  value: 9\n}, {\n  rank: '10',\n  value: 10\n}, {\n  rank: 'J',\n  value: 10\n}, {\n  rank: 'Q',\n  value: 10\n}, {\n  rank: 'K',\n  value: 10\n}, {\n  rank: 'A',\n  value: 11\n}];"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Lesson #2",
            "id": 132126,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Wir brauchen eine Funktion, um eine Karte zufällig aus unserem Deck zu ziehen.\n\n1. Erstelle eine `drawCard` Funktion, die kein Argument annimmt.\n2. Die Funktion sollte eine zufällige Karte aus unserem `cards` Array zurückgeben. Du kannst die `Math.random` Funktion verwenden, um einen zufälligen Index für das Array zu generieren. Wenn du weitere Hilfe benötigst, versuche, unsere AI-Unterstützung zu fragen. Du schaffst das!",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "app.js",
                  "codeLanguage": "javascript",
                  "content": "const cards = [{\n  rank: '2',\n  value: 2\n}, {\n  rank: '3',\n  value: 3\n}, {\n  rank: '4',\n  value: 4\n}, {\n  rank: '5',\n  value: 5\n}, {\n  rank: '6',\n  value: 6\n}, {\n  rank: '7',\n  value: 7\n}, {\n  rank: '8',\n  value: 8\n}, {\n  rank: '9',\n  value: 9\n}, {\n  rank: '10',\n  value: 10\n}, {\n  rank: 'J',\n  value: 10\n}, {\n  rank: 'Q',\n  value: 10\n}, {\n  rank: 'K',\n  value: 10\n}, {\n  rank: 'A',\n  value: 11\n}];",
                  "solvedContent": "const cards = [{\n  rank: '2',\n  value: 2\n}, {\n  rank: '3',\n  value: 3\n}, {\n  rank: '4',\n  value: 4\n}, {\n  rank: '5',\n  value: 5\n}, {\n  rank: '6',\n  value: 6\n}, {\n  rank: '7',\n  value: 7\n}, {\n  rank: '8',\n  value: 8\n}, {\n  rank: '9',\n  value: 9\n}, {\n  rank: '10',\n  value: 10\n}, {\n  rank: 'J',\n  value: 10\n}, {\n  rank: 'Q',\n  value: 10\n}, {\n  rank: 'K',\n  value: 10\n}, {\n  rank: 'A',\n  value: 11\n}];\n\nfunction drawCard() {\n  return cards[Math.floor(Math.random() * cards.length)];\n}"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Lesson #2 - Copy",
            "id": 132214,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Wir werden `@mimo-org/input` verwenden, um die Eingabe des Benutzers zu erfassen.\n\n1. Deklariere am Anfang der Datei eine Variable `input` und require das `input` Modul. Wir verwenden `@mimo-org/input`, um mit dem Benutzer in der Konsole zu interagieren.\n   ```const input = require(\"@mimo-org/input\");```",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "app.js",
                  "codeLanguage": "javascript",
                  "content": "const cards = [{\n  rank: '2',\n  value: 2\n}, {\n  rank: '3',\n  value: 3\n}, {\n  rank: '4',\n  value: 4\n}, {\n  rank: '5',\n  value: 5\n}, {\n  rank: '6',\n  value: 6\n}, {\n  rank: '7',\n  value: 7\n}, {\n  rank: '8',\n  value: 8\n}, {\n  rank: '9',\n  value: 9\n}, {\n  rank: '10',\n  value: 10\n}, {\n  rank: 'J',\n  value: 10\n}, {\n  rank: 'Q',\n  value: 10\n}, {\n  rank: 'K',\n  value: 10\n}, {\n  rank: 'A',\n  value: 11\n}];\n\nfunction drawCard() {\n  return cards[Math.floor(Math.random() * cards.length)];\n}",
                  "solvedContent": "const input = require(\"@mimo-org/input\");\n\nconst cards = [{\n  rank: '2',\n  value: 2\n}, {\n  rank: '3',\n  value: 3\n}, {\n  rank: '4',\n  value: 4\n}, {\n  rank: '5',\n  value: 5\n}, {\n  rank: '6',\n  value: 6\n}, {\n  rank: '7',\n  value: 7\n}, {\n  rank: '8',\n  value: 8\n}, {\n  rank: '9',\n  value: 9\n}, {\n  rank: '10',\n  value: 10\n}, {\n  rank: 'J',\n  value: 10\n}, {\n  rank: 'Q',\n  value: 10\n}, {\n  rank: 'K',\n  value: 10\n}, {\n  rank: 'A',\n  value: 11\n}];\n\nfunction drawCard() {\n  return cards[Math.floor(Math.random() * cards.length)];\n}"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Lesson #2 - Copy",
            "id": 132213,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Zeit, den Benutzer zu fragen, ob er eine neue Karte ziehen möchte (hit) oder mit dem zufrieden ist, was er hat (stand).\n\n1. Erstelle eine neue Variable, `playerHand`, und weise ihr ein leeres Array zu. Wir werden dieses Array verwenden, um alle Karten zu verfolgen.\n2. Frage den Spieler, ob er hit oder stand möchte, indem du `input` verwendest. Gib an, dass die Eingabe von `\"h\"` es ihm ermöglicht, hit (eine neue Karte ziehen) zu wählen, und `\"s\"` steht für stand (keine weiteren Karten nehmen).\n3. Wenn der Spieler `\"h\"` eingibt, verwende die Funktion `drawCard`, um eine neue Karte zu erhalten, und füge die gezogene Karte dem Array `playerHand` hinzu.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "app.js",
                  "codeLanguage": "javascript",
                  "content": "const input = require(\"@mimo-org/input\");\n\nconst cards = [{\n  rank: '2',\n  value: 2\n}, {\n  rank: '3',\n  value: 3\n}, {\n  rank: '4',\n  value: 4\n}, {\n  rank: '5',\n  value: 5\n}, {\n  rank: '6',\n  value: 6\n}, {\n  rank: '7',\n  value: 7\n}, {\n  rank: '8',\n  value: 8\n}, {\n  rank: '9',\n  value: 9\n}, {\n  rank: '10',\n  value: 10\n}, {\n  rank: 'J',\n  value: 10\n}, {\n  rank: 'Q',\n  value: 10\n}, {\n  rank: 'K',\n  value: 10\n}, {\n  rank: 'A',\n  value: 11\n}];\n\nfunction drawCard() {\n  return cards[Math.floor(Math.random() * cards.length)];\n}",
                  "solvedContent": "const input = require(\"@mimo-org/input\");\n\nconst cards = [{\n  rank: '2',\n  value: 2\n}, {\n  rank: '3',\n  value: 3\n}, {\n  rank: '4',\n  value: 4\n}, {\n  rank: '5',\n  value: 5\n}, {\n  rank: '6',\n  value: 6\n}, {\n  rank: '7',\n  value: 7\n}, {\n  rank: '8',\n  value: 8\n}, {\n  rank: '9',\n  value: 9\n}, {\n  rank: '10',\n  value: 10\n}, {\n  rank: 'J',\n  value: 10\n}, {\n  rank: 'Q',\n  value: 10\n}, {\n  rank: 'K',\n  value: 10\n}, {\n  rank: 'A',\n  value: 11\n}];\n\nfunction drawCard() {\n  return cards[Math.floor(Math.random() * cards.length)];\n}\n\nlet playerHand = [];\n\nconst action = input('Do you want to (h)it or (s)tand? ');\nif (action === 'h') {\n  playerHand.push(drawCard());\n}"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Lesson #3",
            "id": 132127,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Wir benötigen auch eine Methode, die den Wert einer Hand berechnet.\n\n1. Erstelle eine Funktion `calculateHandValue`, die einen Parameter namens `hand` (Array von Karten) entgegennimmt.\n2. Beginne innerhalb der Funktion damit, die Summe der Werte der Karten in der Hand zu berechnen.\n3. Zähle außerdem die Anzahl der Asse in der Hand.\n4. Behandle dann den Fall gemäß den Blackjack-Regeln: Wenn der Gesamtwert über 21 liegt und sich mindestens ein Ass in der Hand befindet, ziehe für jedes Ass 10 vom Gesamtwert ab, bis der Gesamtwert 21 oder weniger beträgt oder keine Asse mehr vorhanden sind.\n5. Gib den Gesamtwert der Hand zurück.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "app.js",
                  "codeLanguage": "javascript",
                  "content": "const input = require(\"@mimo-org/input\");\n\nconst cards = [{\n  rank: '2',\n  value: 2\n}, {\n  rank: '3',\n  value: 3\n}, {\n  rank: '4',\n  value: 4\n}, {\n  rank: '5',\n  value: 5\n}, {\n  rank: '6',\n  value: 6\n}, {\n  rank: '7',\n  value: 7\n}, {\n  rank: '8',\n  value: 8\n}, {\n  rank: '9',\n  value: 9\n}, {\n  rank: '10',\n  value: 10\n}, {\n  rank: 'J',\n  value: 10\n}, {\n  rank: 'Q',\n  value: 10\n}, {\n  rank: 'K',\n  value: 10\n}, {\n  rank: 'A',\n  value: 11\n}];\n\nfunction drawCard() {\n  return cards[Math.floor(Math.random() * cards.length)];\n}\n\nlet playerHand = [];\n\nconst action = input('Do you want to (h)it or (s)tand? ');\nif (action === 'h') {\n  playerHand.push(drawCard());\n}",
                  "solvedContent": "const input = require(\"@mimo-org/input\");\n\nconst cards = [{\n  rank: '2',\n  value: 2\n}, {\n  rank: '3',\n  value: 3\n}, {\n  rank: '4',\n  value: 4\n}, {\n  rank: '5',\n  value: 5\n}, {\n  rank: '6',\n  value: 6\n}, {\n  rank: '7',\n  value: 7\n}, {\n  rank: '8',\n  value: 8\n}, {\n  rank: '9',\n  value: 9\n}, {\n  rank: '10',\n  value: 10\n}, {\n  rank: 'J',\n  value: 10\n}, {\n  rank: 'Q',\n  value: 10\n}, {\n  rank: 'K',\n  value: 10\n}, {\n  rank: 'A',\n  value: 11\n}];\n\nfunction drawCard() {\n  return cards[Math.floor(Math.random() * cards.length)];\n}\n\nfunction calculateHandValue(hand) {\n  let value = 0;\n  let aceCount = 0;\n\n  for (let card of hand) {\n    value += card.value;\n    if (card.rank === 'A') {\n      aceCount += 1;\n    }\n  }\n\n  while (value > 21 && aceCount > 0) {\n    value -= 10;\n    aceCount -= 1;\n  }\n\n  return value;\n}\n\nlet playerHand = [];\n\nconst action = input('Do you want to (h)it or (s)tand? ');\nif (action === 'h') {\n  playerHand.push(drawCard());\n}"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Lesson #3 - Copy",
            "id": 132215,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Lass uns die neue Funktion verwenden, um den Wert der Hand zu berechnen, nachdem unser Spieler die erste Karte gezogen hat.\n\n1. Bevor du den Spieler fragst, ob er eine neue Karte ziehen oder aufhören möchte, erstelle eine neue Variable `playerValue` und setze sie auf `0`.\n2. Nachdem du eine Karte gezogen und sie der Variable `playerHand` hinzugefügt hast, berechne den Wert und weise den Rückgabewert des Aufrufs der Funktion `calculateHandValue` der Variable `playerValue` zu.\n3. Gib den Punktestand aus.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "app.js",
                  "codeLanguage": "javascript",
                  "content": "const input = require(\"@mimo-org/input\");\n\nconst cards = [{\n  rank: '2',\n  value: 2\n}, {\n  rank: '3',\n  value: 3\n}, {\n  rank: '4',\n  value: 4\n}, {\n  rank: '5',\n  value: 5\n}, {\n  rank: '6',\n  value: 6\n}, {\n  rank: '7',\n  value: 7\n}, {\n  rank: '8',\n  value: 8\n}, {\n  rank: '9',\n  value: 9\n}, {\n  rank: '10',\n  value: 10\n}, {\n  rank: 'J',\n  value: 10\n}, {\n  rank: 'Q',\n  value: 10\n}, {\n  rank: 'K',\n  value: 10\n}, {\n  rank: 'A',\n  value: 11\n}];\n\nfunction drawCard() {\n  return cards[Math.floor(Math.random() * cards.length)];\n}\n\nfunction calculateHandValue(hand) {\n  let value = 0;\n  let aceCount = 0;\n\n  for (let card of hand) {\n    value += card.value;\n    if (card.rank === 'A') {\n      aceCount += 1;\n    }\n  }\n\n  while (value > 21 && aceCount > 0) {\n    value -= 10;\n    aceCount -= 1;\n  }\n\n  return value;\n}\n\nlet playerHand = [];\n\nconst action = input('Do you want to (h)it or (s)tand? ');\nif (action === 'h') {\n  playerHand.push(drawCard());\n}",
                  "solvedContent": "const input = require(\"@mimo-org/input\");\n\nconst cards = [{\n  rank: '2',\n  value: 2\n}, {\n  rank: '3',\n  value: 3\n}, {\n  rank: '4',\n  value: 4\n}, {\n  rank: '5',\n  value: 5\n}, {\n  rank: '6',\n  value: 6\n}, {\n  rank: '7',\n  value: 7\n}, {\n  rank: '8',\n  value: 8\n}, {\n  rank: '9',\n  value: 9\n}, {\n  rank: '10',\n  value: 10\n}, {\n  rank: 'J',\n  value: 10\n}, {\n  rank: 'Q',\n  value: 10\n}, {\n  rank: 'K',\n  value: 10\n}, {\n  rank: 'A',\n  value: 11\n}];\n\nfunction drawCard() {\n  return cards[Math.floor(Math.random() * cards.length)];\n}\n\nfunction calculateHandValue(hand) {\n  let value = 0;\n  let aceCount = 0;\n\n  for (let card of hand) {\n    value += card.value;\n    if (card.rank === 'A') {\n      aceCount += 1;\n    }\n  }\n\n  while (value > 21 && aceCount > 0) {\n    value -= 10;\n    aceCount -= 1;\n  }\n\n  return value;\n}\n\nlet playerHand = [];\nlet playerValue = 0;\n\nconst action = input('Do you want to (h)it or (s)tand? ');\nif (action === 'h') {\n  playerHand.push(drawCard());\n  playerValue = calculateHandValue(playerHand);\n  console.log(`Your score: ${playerValue}`);\n}"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Lesson #4",
            "id": 132128,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Bis jetzt erlauben wir dem Spieler, eine Karte zu ziehen und ihren Wert anzuzeigen. Wir müssen dem Spieler jedoch noch die tatsächliche Karte zeigen, die er gezogen hat.\n\n1. Erstelle eine Funktion namens `displayHand`, die einen Parameter namens `hand` (Array von Karten) annimmt.\n2. Gehe innerhalb der Funktion über jedes Element im Array. Füge den Rang jeder Karte im `hand`-Array zu einem String hinzu, den du am Ende der Funktion ausgibst, um alle Karten anzuzeigen, die der Spieler in seiner Hand hat.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "app.js",
                  "codeLanguage": "javascript",
                  "content": "const input = require(\"@mimo-org/input\");\n\nconst cards = [{\n  rank: '2',\n  value: 2\n}, {\n  rank: '3',\n  value: 3\n}, {\n  rank: '4',\n  value: 4\n}, {\n  rank: '5',\n  value: 5\n}, {\n  rank: '6',\n  value: 6\n}, {\n  rank: '7',\n  value: 7\n}, {\n  rank: '8',\n  value: 8\n}, {\n  rank: '9',\n  value: 9\n}, {\n  rank: '10',\n  value: 10\n}, {\n  rank: 'J',\n  value: 10\n}, {\n  rank: 'Q',\n  value: 10\n}, {\n  rank: 'K',\n  value: 10\n}, {\n  rank: 'A',\n  value: 11\n}];\n\nfunction drawCard() {\n  return cards[Math.floor(Math.random() * cards.length)];\n}\n\nfunction calculateHandValue(hand) {\n  let value = 0;\n  let aceCount = 0;\n\n  for (let card of hand) {\n    value += card.value;\n    if (card.rank === 'A') {\n      aceCount += 1;\n    }\n  }\n\n  while (value > 21 && aceCount > 0) {\n    value -= 10;\n    aceCount -= 1;\n  }\n\n  return value;\n}\n\nlet playerHand = [];\nlet playerValue = 0;\n\nconst action = input('Do you want to (h)it or (s)tand? ');\n\nif (action === 'h') {\n  playerHand.push(drawCard());\n  playerValue = calculateHandValue(playerHand);\n  console.log(`Your score: ${playerValue}`);\n}",
                  "solvedContent": "const input = require(\"@mimo-org/input\");\n\nconst cards = [{\n  rank: '2',\n  value: 2\n}, {\n  rank: '3',\n  value: 3\n}, {\n  rank: '4',\n  value: 4\n}, {\n  rank: '5',\n  value: 5\n}, {\n  rank: '6',\n  value: 6\n}, {\n  rank: '7',\n  value: 7\n}, {\n  rank: '8',\n  value: 8\n}, {\n  rank: '9',\n  value: 9\n}, {\n  rank: '10',\n  value: 10\n}, {\n  rank: 'J',\n  value: 10\n}, {\n  rank: 'Q',\n  value: 10\n}, {\n  rank: 'K',\n  value: 10\n}, {\n  rank: 'A',\n  value: 11\n}];\n\nfunction drawCard() {\n  return cards[Math.floor(Math.random() * cards.length)];\n}\n\nfunction calculateHandValue(hand) {\n  let value = 0;\n  let aceCount = 0;\n\n  for (let card of hand) {\n    value += card.value;\n    if (card.rank === 'A') {\n      aceCount += 1;\n    }\n  }\n\n  while (value > 21 && aceCount > 0) {\n    value -= 10;\n    aceCount -= 1;\n  }\n\n  return value;\n}\n\nfunction displayHand(hand) {\n  let ranks = '';\n\n  for (let i = 0; i < hand.length; i++) {\n    ranks += hand[i].rank;\n    if (i < hand.length - 1) {\n      ranks += ', ';\n    }\n  }\n\n  console.log(`Your hand: ${ranks}`);\n}\n\nlet playerHand = [];\nlet playerValue = 0;\n\nconst action = input('Do you want to (h)it or (s)tand? ');\n\nif (action === 'h') {\n  playerHand.push(drawCard());\n  playerValue = calculateHandValue(playerHand);\n  displayHand(playerHand);\n  console.log(`Your score: ${playerValue}`);\n}"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Lesson #5",
            "id": 132129,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Blackjack dreht sich darum, so nah wie möglich an 21 heranzukommen. Wenn du über 21 bist, verlierst du. Wir brauchen eine Spielschleife, die es erlaubt, so viele Karten zu ziehen, wie der Spieler möchte.\n\n1. Füge eine `while`-Schleife hinzu, die so lange fortfährt, wie der Handwert des Spielers `playerValue` kleiner als 21 ist.\n2. Verschiebe den Code, der nach Hit oder Stand fragt, eine Karte zieht, wenn der Spieler Hit wählt, den Handwert aktualisiert und die Hand und den Punktestand anzeigt, in die while-Schleife.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "app.js",
                  "codeLanguage": "javascript",
                  "content": "const input = require(\"@mimo-org/input\");\n\nconst cards = [{\n  rank: '2',\n  value: 2\n}, {\n  rank: '3',\n  value: 3\n}, {\n  rank: '4',\n  value: 4\n}, {\n  rank: '5',\n  value: 5\n}, {\n  rank: '6',\n  value: 6\n}, {\n  rank: '7',\n  value: 7\n}, {\n  rank: '8',\n  value: 8\n}, {\n  rank: '9',\n  value: 9\n}, {\n  rank: '10',\n  value: 10\n}, {\n  rank: 'J',\n  value: 10\n}, {\n  rank: 'Q',\n  value: 10\n}, {\n  rank: 'K',\n  value: 10\n}, {\n  rank: 'A',\n  value: 11\n}];\n\nfunction drawCard() {\n  return cards[Math.floor(Math.random() * cards.length)];\n}\n\nfunction calculateHandValue(hand) {\n  let value = 0;\n  let aceCount = 0;\n\n  for (let card of hand) {\n    value += card.value;\n    if (card.rank === 'A') {\n      aceCount += 1;\n    }\n  }\n\n  while (value > 21 && aceCount > 0) {\n    value -= 10;\n    aceCount -= 1;\n  }\n\n  return value;\n}\n\nfunction displayHand(hand) {\n  let ranks = '';\n\n  for (let i = 0; i < hand.length; i++) {\n    ranks += hand[i].rank;\n    if (i < hand.length - 1) {\n      ranks += ', ';\n    }\n  }\n\n  console.log(`Your hand: ${ranks}`);\n}\n\nlet playerHand = [];\nlet playerValue = 0;\n\nconst action = input('Do you want to (h)it or (s)tand? ');\n\nif (action === 'h') {\n  playerHand.push(drawCard());\n  playerValue = calculateHandValue(playerHand);\n  displayHand(playerHand);\n  console.log(`Your score: ${playerValue}`);\n}",
                  "solvedContent": "const input = require(\"@mimo-org/input\");\n\nconst cards = [{\n  rank: '2',\n  value: 2\n}, {\n  rank: '3',\n  value: 3\n}, {\n  rank: '4',\n  value: 4\n}, {\n  rank: '5',\n  value: 5\n}, {\n  rank: '6',\n  value: 6\n}, {\n  rank: '7',\n  value: 7\n}, {\n  rank: '8',\n  value: 8\n}, {\n  rank: '9',\n  value: 9\n}, {\n  rank: '10',\n  value: 10\n}, {\n  rank: 'J',\n  value: 10\n}, {\n  rank: 'Q',\n  value: 10\n}, {\n  rank: 'K',\n  value: 10\n}, {\n  rank: 'A',\n  value: 11\n}];\n\nfunction drawCard() {\n  return cards[Math.floor(Math.random() * cards.length)];\n}\n\nfunction calculateHandValue(hand) {\n  let value = 0;\n  let aceCount = 0;\n\n  for (let card of hand) {\n    value += card.value;\n    if (card.rank === 'A') {\n      aceCount += 1;\n    }\n  }\n\n  while (value > 21 && aceCount > 0) {\n    value -= 10;\n    aceCount -= 1;\n  }\n\n  return value;\n}\n\nfunction displayHand(hand) {\n  let ranks = '';\n\n  for (let i = 0; i < hand.length; i++) {\n    ranks += hand[i].rank;\n    if (i < hand.length - 1) {\n      ranks += ', ';\n    }\n  }\n\n  console.log(`Your hand: ${ranks}`);\n}\n\nlet playerHand = [];\nlet playerValue = 0;\n\nwhile (playerValue < 21) {\n  const action = input('Do you want to (h)it or (s)tand? ');\n  if (action === 'h') {\n    playerHand.push(drawCard());\n    playerValue = calculateHandValue(playerHand);\n    displayHand(playerHand);\n    console.log(`Your score: ${playerValue}`);\n  }\n}"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Lesson #7",
            "id": 132131,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Jetzt müssen wir auf die Aktion des Spielers reagieren, wenn er vermeiden möchte, weitere Karten zu ziehen (stand).\n\n1. Wenn der Spieler sich entscheidet zu stehen, verwende `break`, um die Schleife zu verlassen.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "app.js",
                  "codeLanguage": "javascript",
                  "content": "const input = require(\"@mimo-org/input\");\n\nconst cards = [{\n  rank: '2',\n  value: 2\n}, {\n  rank: '3',\n  value: 3\n}, {\n  rank: '4',\n  value: 4\n}, {\n  rank: '5',\n  value: 5\n}, {\n  rank: '6',\n  value: 6\n}, {\n  rank: '7',\n  value: 7\n}, {\n  rank: '8',\n  value: 8\n}, {\n  rank: '9',\n  value: 9\n}, {\n  rank: '10',\n  value: 10\n}, {\n  rank: 'J',\n  value: 10\n}, {\n  rank: 'Q',\n  value: 10\n}, {\n  rank: 'K',\n  value: 10\n}, {\n  rank: 'A',\n  value: 11\n}];\n\nfunction drawCard() {\n  return cards[Math.floor(Math.random() * cards.length)];\n}\n\nfunction calculateHandValue(hand) {\n  let value = 0;\n  let aceCount = 0;\n\n  for (let card of hand) {\n    value += card.value;\n    if (card.rank === 'A') {\n      aceCount += 1;\n    }\n  }\n\n  while (value > 21 && aceCount > 0) {\n    value -= 10;\n    aceCount -= 1;\n  }\n\n  return value;\n}\n\nfunction displayHand(hand) {\n  let ranks = '';\n\n  for (let i = 0; i < hand.length; i++) {\n    ranks += hand[i].rank;\n    if (i < hand.length - 1) {\n      ranks += ', ';\n    }\n  }\n\n  console.log(`Your hand: ${ranks}`);\n}\n\nlet playerHand = [];\nlet playerValue = 0;\n\nwhile (playerValue < 21) {\n  const action = input('Do you want to (h)it or (s)tand? ');\n  if (action === 'h') {\n    playerHand.push(drawCard());\n    playerValue = calculateHandValue(playerHand);\n    displayHand(playerHand);\n    console.log(`Your score: ${playerValue}`);\n  }\n}",
                  "solvedContent": "const input = require(\"@mimo-org/input\");\n\nconst cards = [{\n  rank: '2',\n  value: 2\n}, {\n  rank: '3',\n  value: 3\n}, {\n  rank: '4',\n  value: 4\n}, {\n  rank: '5',\n  value: 5\n}, {\n  rank: '6',\n  value: 6\n}, {\n  rank: '7',\n  value: 7\n}, {\n  rank: '8',\n  value: 8\n}, {\n  rank: '9',\n  value: 9\n}, {\n  rank: '10',\n  value: 10\n}, {\n  rank: 'J',\n  value: 10\n}, {\n  rank: 'Q',\n  value: 10\n}, {\n  rank: 'K',\n  value: 10\n}, {\n  rank: 'A',\n  value: 11\n}];\n\nfunction drawCard() {\n  return cards[Math.floor(Math.random() * cards.length)];\n}\n\nfunction calculateHandValue(hand) {\n  let value = 0;\n  let aceCount = 0;\n\n  for (let card of hand) {\n    value += card.value;\n    if (card.rank === 'A') {\n      aceCount += 1;\n    }\n  }\n\n  while (value > 21 && aceCount > 0) {\n    value -= 10;\n    aceCount -= 1;\n  }\n\n  return value;\n}\n\nfunction displayHand(hand) {\n  let ranks = '';\n\n  for (let i = 0; i < hand.length; i++) {\n    ranks += hand[i].rank;\n    if (i < hand.length - 1) {\n      ranks += ', ';\n    }\n  }\n\n  console.log(`Your hand: ${ranks}`);\n}\n\nlet playerHand = [];\nlet playerValue = 0;\n\nwhile (playerValue < 21) {\n  const action = input('Do you want to (h)it or (s)tand? ');\n  if (action === 'h') {\n    playerHand.push(drawCard());\n    playerValue = calculateHandValue(playerHand);\n    displayHand(playerHand);\n    console.log(`Your score: ${playerValue}`);\n  } else if (action === 's') {\n    break;\n  }\n}"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Lesson #8",
            "id": 132132,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Zuletzt fügen wir weitere print-Anweisungen hinzu, um dem Spieler zu erklären, was vor sich geht.\n\n1. Wenn der Spieler etwas anderes als 'h' oder 's' eingibt, gib eine Fehlermeldung aus, die ihn auffordert, eine gültige Eingabe zu machen.\n2. Nach der `while`-Schleife gib die endgültige Punktzahl des Spielers mit `caculateHandValue` noch einmal aus und bestätige, dass dies der endgültige Wert ist.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "app.js",
                  "codeLanguage": "javascript",
                  "content": "const input = require(\"@mimo-org/input\");\n\nconst cards = [{\n  rank: '2',\n  value: 2\n}, {\n  rank: '3',\n  value: 3\n}, {\n  rank: '4',\n  value: 4\n}, {\n  rank: '5',\n  value: 5\n}, {\n  rank: '6',\n  value: 6\n}, {\n  rank: '7',\n  value: 7\n}, {\n  rank: '8',\n  value: 8\n}, {\n  rank: '9',\n  value: 9\n}, {\n  rank: '10',\n  value: 10\n}, {\n  rank: 'J',\n  value: 10\n}, {\n  rank: 'Q',\n  value: 10\n}, {\n  rank: 'K',\n  value: 10\n}, {\n  rank: 'A',\n  value: 11\n}];\n\nfunction drawCard() {\n  return cards[Math.floor(Math.random() * cards.length)];\n}\n\nfunction calculateHandValue(hand) {\n  let value = 0;\n  let aceCount = 0;\n\n  for (let card of hand) {\n    value += card.value;\n    if (card.rank === 'A') {\n      aceCount += 1;\n    }\n  }\n\n  while (value > 21 && aceCount > 0) {\n    value -= 10;\n    aceCount -= 1;\n  }\n\n  return value;\n}\n\nfunction displayHand(hand) {\n  let ranks = '';\n\n  for (let i = 0; i < hand.length; i++) {\n    ranks += hand[i].rank;\n    if (i < hand.length - 1) {\n      ranks += ', ';\n    }\n  }\n\n  console.log(`Your hand: ${ranks}`);\n}\n\nlet playerHand = [];\nlet playerValue = 0;\n\nwhile (playerValue < 21) {\n  const action = input('Do you want to (h)it or (s)tand? ');\n  if (action === 'h') {\n    playerHand.push(drawCard());\n    playerValue = calculateHandValue(playerHand);\n    displayHand(playerHand);\n    console.log(`Your score: ${playerValue}`);\n  } else if (action === 's') {\n    break;\n  }\n}",
                  "solvedContent": "const input = require(\"@mimo-org/input\");\n\nconst cards = [{\n  rank: '2',\n  value: 2\n}, {\n  rank: '3',\n  value: 3\n}, {\n  rank: '4',\n  value: 4\n}, {\n  rank: '5',\n  value: 5\n}, {\n  rank: '6',\n  value: 6\n}, {\n  rank: '7',\n  value: 7\n}, {\n  rank: '8',\n  value: 8\n}, {\n  rank: '9',\n  value: 9\n}, {\n  rank: '10',\n  value: 10\n}, {\n  rank: 'J',\n  value: 10\n}, {\n  rank: 'Q',\n  value: 10\n}, {\n  rank: 'K',\n  value: 10\n}, {\n  rank: 'A',\n  value: 11\n}];\n\nfunction drawCard() {\n  return cards[Math.floor(Math.random() * cards.length)];\n}\n\nfunction calculateHandValue(hand) {\n  let value = 0;\n  let aceCount = 0;\n\n  for (let card of hand) {\n    value += card.value;\n    if (card.rank === 'A') {\n      aceCount += 1;\n    }\n  }\n\n  while (value > 21 && aceCount > 0) {\n    value -= 10;\n    aceCount -= 1;\n  }\n\n  return value;\n}\n\nfunction displayHand(hand) {\n  let ranks = '';\n\n  for (let i = 0; i < hand.length; i++) {\n    ranks += hand[i].rank;\n    if (i < hand.length - 1) {\n      ranks += ', ';\n    }\n  }\n\n  console.log(`Your hand: ${ranks}`);\n}\n\nlet playerHand = [];\nlet playerValue = 0;\n\nwhile (playerValue < 21) {\n  const action = input('Do you want to (h)it or (s)tand? ');\n  if (action === 'h') {\n    playerHand.push(drawCard());\n    playerValue = calculateHandValue(playerHand);\n    displayHand(playerHand);\n    console.log(`Your score: ${playerValue}`);\n  } else if (action === 's') {\n    break;\n  } else {\n    console.log('Invalid input, please choose \"h\" to hit or \"s\" to stand.');\n  }\n}\n\nconsole.log(`Your final score: ${playerValue}`);"
                }
              ],
              "hints": []
            }
          }
        ]
      }
    ]
  }
}