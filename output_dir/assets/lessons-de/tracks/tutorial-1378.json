{
  "tutorial": {
    "id": 1378,
    "version": 8,
    "type": "course",
    "isNew": false,
    "codeLanguage": "python",
    "title": "Konstruktoren",
    "descriptionContent": "Konstruktoren",
    "shortDescriptionContent": "",
    "showInTrack": true,
    "iconBanner": null,
    "chapters": [
      {
        "id": 9985,
        "title": "Konstruktoren",
        "type": "practiceLevel1",
        "lessons": [
          {
            "title": "Constructor",
            "id": 88767,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Es gibt eine Methode, die wir verwenden können, die flexibler ist, wenn wir verschiedene Instanzen aus einer Klasse erstellen. Sie wird <strong>Konstruktor</strong>-Methode genannt.</p><code version=\"2\" codelang=\"python\" name=\"script.py\" visible-if=\"always\"><content><text value=\"class\" class=\"keyword\" /><text value=\" \" /><text value=\"Virtual_Pet\" class=\"title\" /><text value=\":\" /><text type=\"break\" /><text value=\"  \" /><text value=\"def\" class=\"keyword\" /><text value=\" \" /><text value=\"__init__\" class=\"title\" /><text value=\"(self, color)\" class=\"params\" /><text value=\":\" /><text type=\"break\" /><text value=\"    self.color = color\" /><text type=\"break\" /><text type=\"break\" /><text value=\"rocky = Virtual_Pet(\" /><text value=\"&quot;brown&quot;\" class=\"string\" /><text value=\")\" /><text type=\"break\" /><text value=\"benny = Virtual_Pet(\" /><text value=\"&quot;black&quot;\" class=\"string\" /><text value=\")\" /><text type=\"break\" /><text type=\"break\" /><text value=\"print(rocky.color)\" /><text type=\"break\" /><text value=\"print(benny.color)\" /></content><output><content><text value=\"brown\" /><text type=\"break\" /><text value=\"black\" /></content></output></code></body></html>"
          },
          {
            "title": "Constructor",
            "id": 89355,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Die Konstruktor-Methode sieht aus wie <code>__init__()</code> und ermöglicht es uns, einzigartige Werte für die Klassenvariablen festzulegen, wenn wir eine Instanz erstellen.</p><p>Stelle sicher, dass du doppelte Unterstriche auf jeder Seite von <code>init</code> verwendest.</p><code version=\"2\" codelang=\"python\" name=\"script.py\" visible-if=\"always\"><content><text value=\"class\" class=\"keyword\" /><text value=\" \" /><text value=\"Virtual_Pet\" class=\"title\" /><text value=\":\" /><text type=\"break\" /><text value=\"  \" /><text value=\"def\" class=\"keyword\" /><text value=\" \" /><text value=\"__init__\" class=\"title\" /><text value=\"(self, color)\" class=\"params\" /><text value=\":\" /><text type=\"break\" /><text value=\"    self.color = color\" /><text type=\"break\" /><text type=\"break\" /><text value=\"rocky = Virtual_Pet(\" /><text value=\"&quot;red&quot;\" class=\"string\" /><text value=\")\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"25\" endIndex=\"33\" /></options></interaction></interactions></code><p visible-if=\"wrong\">Wähle <code>__init__</code> aus.</p></body></html>"
          },
          {
            "title": "Constructor",
            "id": 89359,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Statt einer Klassendefinition, die immer die gleiche Farbe hat, ermöglicht uns eine Konstruktor-Methode, festzulegen, was wir beim Erstellen haben möchten.</p><code version=\"2\" codelang=\"python\" name=\"script.py\" visible-if=\"always\"><content><text value=\"class\" class=\"keyword\" /><text value=\" \" /><text value=\"Virtual_Pet\" class=\"title\" /><text value=\":\" /><text type=\"break\" /><text value=\"  \" /><text value=\"def\" class=\"keyword\" /><text value=\" \" /><text value=\"__init__\" class=\"title\" /><text value=\"(self, color)\" class=\"params\" /><text value=\":\" /><text type=\"break\" /><text value=\"    self.color = color\" /><text type=\"break\" /><text type=\"break\" /><text value=\"rocky = Virtual_Pet(\" /><text value=\"&quot;red&quot;\" class=\"string\" /><text value=\")\" /></content></code></body></html>"
          },
          {
            "title": "Constructor",
            "id": 89360,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Wenn wir eine Instanz aus der Klassendefinition erstellen, können wir einzigartige Werte in die Klammern übergeben, wie hier mit <code>yellow</code>.</p><code version=\"2\" codelang=\"python\" name=\"script.py\" visible-if=\"always\"><content><text value=\"class\" class=\"keyword\" /><text value=\" \" /><text value=\"Virtual_Pet\" class=\"title\" /><text value=\":\" /><text type=\"break\" /><text value=\"  \" /><text value=\"def\" class=\"keyword\" /><text value=\" \" /><text value=\"__init__\" class=\"title\" /><text value=\"(self, color)\" class=\"params\" /><text value=\":\" /><text type=\"break\" /><text value=\"    self.color = color\" /><text type=\"break\" /><text type=\"break\" /><text value=\"rocky = Virtual_Pet(\" /><text value=\"&quot;yellow&quot;\" class=\"string\" /><text value=\")\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"92\" endIndex=\"93\" /><option startIndex=\"93\" endIndex=\"99\" /><option startIndex=\"99\" endIndex=\"100\" /></options></interaction></interactions></code><p visible-if=\"wrong\">Wähle <code>\"</code>, gefolgt von <code>yellow</code> und schließlich <code>\"</code> aus.</p></body></html>"
          },
          {
            "title": "Constructor",
            "id": 89354,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Um diese Flexibilität zu unseren Klassen hinzuzufügen, beginnen wir mit dem Hinzufügen der Konstruktionsfunktion, die wie <code>__init__()</code> aussieht.</p><code version=\"2\" codelang=\"python\" name=\"script.py\" visible-if=\"always\"><content><text value=\"class\" class=\"keyword\" /><text value=\" \" /><text value=\"Virtual_Pet\" class=\"title\" /><text value=\":\" /><text type=\"break\" /><text value=\"  \" /><text value=\"def\" class=\"keyword\" /><text value=\" \" /><text value=\"__init__\" class=\"title\" /><text value=\"()\" class=\"params\" /><text value=\":\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"25\" endIndex=\"33\" /><option startIndex=\"33\" endIndex=\"34\" /><option startIndex=\"34\" endIndex=\"35\" /></options></interaction></interactions></code><p visible-if=\"wrong\">Wähle <code>__init__</code>, gefolgt von <code>(</code> und schließlich <code>)</code> aus.</p></body></html>"
          },
          {
            "title": "Constructor",
            "id": 89357,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Genau wie bei regulären Klassenmethoden müssen wir <code>self</code> als ersten Parameter zur Konstruktor-Methode hinzufügen.</p><code version=\"2\" codelang=\"python\" name=\"script.py\" visible-if=\"always\"><content><text value=\"class\" class=\"keyword\" /><text value=\" \" /><text value=\"Virtual_Pet\" class=\"title\" /><text value=\":\" /><text type=\"break\" /><text value=\"  \" /><text value=\"def\" class=\"keyword\" /><text value=\" \" /><text value=\"__init__\" class=\"title\" /><text value=\"(self)\" class=\"params\" /><text value=\":\" /></content><interactions><interaction type=\"validatedInput\" isDefault=\"true\" startIndex=\"34\" endIndex=\"38\" /></interactions></code><p visible-if=\"wrong\">Gib <code>self</code> ein.</p></body></html>"
          },
          {
            "title": "Constructor",
            "id": 89362,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Als nächstes fügen wir die Parameter für die benutzerdefinierten Werte hinzu, die wir festlegen möchten, wenn wir die Instanz erstellen, wie hier mit <code>color</code>.</p><code version=\"2\" codelang=\"python\" name=\"script.py\" visible-if=\"always\"><content><text value=\"class\" class=\"keyword\" /><text value=\" \" /><text value=\"Virtual_Pet\" class=\"title\" /><text value=\":\" /><text type=\"break\" /><text value=\"  \" /><text value=\"def\" class=\"keyword\" /><text value=\" \" /><text value=\"__init__\" class=\"title\" /><text value=\"(self, color)\" class=\"params\" /><text value=\":\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"40\" endIndex=\"45\" /><option correct=\"false\"><content><text value=\"self\" /></content></option><option startIndex=\"34\" endIndex=\"39\" /></options></interaction></interactions></code><p visible-if=\"wrong\">Wähle <code>self,</code>, gefolgt von <code>color</code> aus.</p></body></html>"
          },
          {
            "title": "Constructor",
            "id": 89363,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Dann setzen wir den Wert, indem wir <code>self</code>, einen <code>.</code>, den Parameternamen und dann eine Gleichsetzung mit dem Parameternamen selbst codieren. Dies setzt den Wert.</p><code version=\"2\" codelang=\"python\" name=\"script.py\" visible-if=\"always\"><content><text value=\"class\" class=\"keyword\" /><text value=\" \" /><text value=\"Virtual_Pet\" class=\"title\" /><text value=\":\" /><text type=\"break\" /><text value=\"  \" /><text value=\"def\" class=\"keyword\" /><text value=\" \" /><text value=\"__init__\" class=\"title\" /><text value=\"(self, color)\" class=\"params\" /><text value=\":\" /><text type=\"break\" /><text value=\"    self.color = color\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"52\" endIndex=\"56\" /><option startIndex=\"56\" endIndex=\"57\" /><option startIndex=\"57\" endIndex=\"62\" /></options></interaction></interactions></code><p visible-if=\"wrong\">Wähle <code>self</code>, gefolgt von <code>.</code> und schließlich <code>color</code> aus.</p></body></html>"
          },
          {
            "title": "Constructor",
            "id": 89041,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Wenn wir eine Instanz aus der Klassendefinition erstellen, fügen wir die Werte, die wir festlegen möchten, in Klammern hinzu, wie hier mit <code>\"red\"</code>.</p><code version=\"2\" codelang=\"python\" name=\"script.py\" visible-if=\"always\"><content><text value=\"class\" class=\"keyword\" /><text value=\" \" /><text value=\"Virtual_Pet\" class=\"title\" /><text value=\":\" /><text type=\"break\" /><text value=\"  \" /><text value=\"def\" class=\"keyword\" /><text value=\" \" /><text value=\"__init__\" class=\"title\" /><text value=\"(self, color)\" class=\"params\" /><text value=\":\" /><text type=\"break\" /><text value=\"    self.color = color\" /><text type=\"break\" /><text type=\"break\" /><text value=\"rocky = Virtual_Pet(\" /><text value=\"&quot;red&quot;\" class=\"string\" /><text value=\")\" /><text type=\"break\" /><text value=\"print(rocky.color)\" /></content><interactions><interaction type=\"validatedInput\" isDefault=\"true\" startIndex=\"92\" endIndex=\"97\" /></interactions><output><content><text value=\"red\" /></content></output></code><p visible-if=\"wrong\">Gib <code>\"red\"</code> ein.</p></body></html>"
          },
          {
            "title": "Constructor",
            "id": 89358,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Die Konstruktor-Methode hilft uns, die Instanzen unserer Klasse so zu konstruieren, wie wir es möchten. Wir können so viele Parameter hinzufügen, wie wir wollen.</p><code version=\"2\" codelang=\"python\" name=\"script.py\" visible-if=\"always\"><content><text value=\"class\" class=\"keyword\" /><text value=\" \" /><text value=\"Virtual_Pet\" class=\"title\" /><text value=\":\" /><text type=\"break\" /><text value=\"  \" /><text value=\"def\" class=\"keyword\" /><text value=\" \" /><text value=\"__init__\" class=\"title\" /><text value=\"(self, color, legs)\" class=\"params\" /><text value=\":\" /><text type=\"break\" /><text value=\"    self.color = color\" /><text type=\"break\" /><text value=\"    self.legs = legs\" /><text type=\"break\" /><text value=\"    \" /><text type=\"break\" /><text value=\"rocky = Virtual_Pet(\" /><text value=\"&quot;red&quot;\" class=\"string\" /><text value=\", \" /><text value=\"4\" class=\"number\" /><text value=\")\" /><text type=\"break\" /><text value=\"print(rocky.color)\" /><text type=\"break\" /><text value=\"print(rocky.legs)\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"40\" endIndex=\"46\" /><option startIndex=\"47\" endIndex=\"51\" /></options></interaction></interactions><output><content><text value=\"red\" /><text type=\"break\" /><text value=\"4\" /></content></output></code><p visible-if=\"wrong\">Wähle <code>color,</code>, gefolgt von <code>legs</code> aus.</p></body></html>"
          },
          {
            "title": "Outside of constructors",
            "id": 88770,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Wir können auf die Parameter von anderen Stellen in der Klassendefinition zugreifen, indem wir <code>self</code> verwenden, wie hier <code>self.color</code>.</p><code version=\"2\" codelang=\"python\" name=\"script.py\" visible-if=\"always\"><content><text value=\"class\" class=\"keyword\" /><text value=\" \" /><text value=\"Flower\" class=\"title\" /><text value=\":\" /><text type=\"break\" /><text value=\"  \" /><text value=\"def\" class=\"keyword\" /><text value=\" \" /><text value=\"__init__\" class=\"title\" /><text value=\"(self, kind, color)\" class=\"params\" /><text value=\":\" /><text type=\"break\" /><text value=\"   self.kind = kind\" /><text type=\"break\" /><text value=\"   self.color = color\" /><text type=\"break\" /><text type=\"break\" /><text value=\"  \" /><text value=\"def\" class=\"keyword\" /><text value=\" \" /><text value=\"display_color\" class=\"title\" /><text value=\"(self)\" class=\"params\" /><text value=\":\" /><text type=\"break\" /><text value=\"    print(self.color)\" /><text type=\"break\" /><text type=\"break\" /><text value=\"rose_flower = Flower(\" /><text value=\"&quot;rose&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;red&quot;\" class=\"string\" /><text value=\")\" /><text type=\"break\" /><text value=\"print(rose_flower.kind)\" /><text type=\"break\" /><text value=\"rose_flower.display_color()\" /></content><interactions><interaction type=\"validatedInput\" isDefault=\"true\" startIndex=\"129\" endIndex=\"139\" /></interactions><output><content><text value=\"rose\" /><text type=\"break\" /><text value=\"red\" /></content></output></code><p visible-if=\"wrong\">Gib <code>self.color</code> ein.</p></body></html>"
          },
          {
            "title": "Question 1",
            "id": 88786,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Was ist der Zweck eines Konstruktors?</p><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\">Um eine Instanz eines Klassenobjekts mit einzigartigen Klassenvariablen zu erstellen</item><item value=\"2\" correct=\"false\">Um eine Methode für ein Klassenobjekt zu erstellen</item></selection><p visible-if=\"wrong\">Um eine Instanz eines Klassenobjekts mit einzigartigen Klassenvariablen zu erstellen.</p></body></html>"
          },
          {
            "title": "Question 2",
            "id": 88789,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Wie definieren wir die <code>constructor</code>-Methode?</p><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\"><code>def __init__(self):</code></item><item value=\"4\" correct=\"false\"><code>def init(self):</code></item></selection><p visible-if=\"wrong\"><code>def __init__(self):</code>.</p></body></html>"
          },
          {
            "title": "Question 3",
            "id": 88791,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Wann verwenden wir das Schlüsselwort <code>self</code>?</p><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\">Wenn wir auf Klassenvariablen oder -methoden innerhalb der Klassendefinition zugreifen müssen</item><item value=\"2\" correct=\"false\">Wir verwenden das Schlüsselwort <code>self</code> nicht</item></selection><p visible-if=\"wrong\">Wenn wir auf Klassenvariablen oder -methoden innerhalb der Klassendefinition zugreifen müssen.</p></body></html>"
          },
          {
            "title": "Question 4",
            "id": 89483,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Können wir Parameter verwenden, wenn wir die Konstruktor-Methode definieren?</p><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\">Ja, wir setzen Werte für die Parameter, wenn wir eine Instanz erstellen</item><item value=\"2\" correct=\"false\">Wir können keine Parameter in der init-Funktion verwenden</item></selection><p visible-if=\"wrong\">Ja, wir setzen Werte für die Parameter, wenn wir eine Instanz erstellen.</p></body></html>"
          },
          {
            "title": "Example 1",
            "id": 89484,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Füge die <code>constructor</code>-Methode zur folgenden Klassendefinition hinzu.</p><code version=\"2\" codelang=\"python\" name=\"script.py\" visible-if=\"always\"><content><text value=\"class\" class=\"keyword\" /><text value=\" \" /><text value=\"Pokemon\" class=\"title\" /><text value=\":\" /><text type=\"break\" /><text value=\"  \" /><text value=\"def\" class=\"keyword\" /><text value=\" \" /><text value=\"__init__\" class=\"title\" /><text value=\"(self)\" class=\"params\" /><text value=\":\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"17\" endIndex=\"20\" /><option startIndex=\"21\" endIndex=\"29\" /><option startIndex=\"29\" endIndex=\"30\" /><option startIndex=\"30\" endIndex=\"34\" /><option startIndex=\"34\" endIndex=\"35\" /></options></interaction></interactions></code><p visible-if=\"wrong\">Wähle <code>def</code>, gefolgt von <code>__init__</code> und schließlich <code>(</code>, <code>self</code>, <code>)</code> aus.</p></body></html>"
          },
          {
            "title": "Example 2",
            "id": 89485,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Füge zwei Parameter zur Konstruktor-Methode hinzu, <code>color</code> und <code>name</code>.</p><code version=\"2\" codelang=\"python\" name=\"script.py\" visible-if=\"always\"><content><text value=\"class\" class=\"keyword\" /><text value=\" \" /><text value=\"Pokemon\" class=\"title\" /><text value=\":\" /><text type=\"break\" /><text value=\"  \" /><text value=\"def\" class=\"keyword\" /><text value=\" \" /><text value=\"__init__\" class=\"title\" /><text value=\"(self, color, name)\" class=\"params\" /><text value=\":\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"43\" endIndex=\"47\" /><option startIndex=\"36\" endIndex=\"42\" /></options></interaction></interactions></code><p visible-if=\"wrong\">Wähle <code>color,</code>, gefolgt von <code>name</code> aus.</p></body></html>"
          },
          {
            "title": "Example 3",
            "id": 89486,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Setze die Klassenvariablen auf die Parameter der Konstruktor-Methode mit dem Schlüsselwort <code>self</code>.</p><code version=\"2\" codelang=\"python\" name=\"script.py\" visible-if=\"always\"><content><text value=\"class\" class=\"keyword\" /><text value=\" \" /><text value=\"Pokemon\" class=\"title\" /><text value=\":\" /><text type=\"break\" /><text value=\"  \" /><text value=\"def\" class=\"keyword\" /><text value=\" \" /><text value=\"__init__\" class=\"title\" /><text value=\"(self, color, name)\" class=\"params\" /><text value=\":\" /><text type=\"break\" /><text value=\"    self.color = color\" /><text type=\"break\" /><text value=\"    self.name = name\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"54\" endIndex=\"58\" /><option startIndex=\"58\" endIndex=\"59\" /><option startIndex=\"67\" endIndex=\"72\" /><option startIndex=\"87\" endIndex=\"88\" /><option startIndex=\"89\" endIndex=\"93\" /></options></interaction></interactions></code><p visible-if=\"wrong\">Wähle <code>self</code>, gefolgt von <code>.</code> und schließlich <code>color</code>, <code>=</code>, <code>name</code> aus.</p></body></html>"
          },
          {
            "title": "Example 4",
            "id": 89487,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Verwende den Konstruktor, um eine Pokemon-Instanz zu erstellen, die die Farbe <code>\"orange\"</code> und den Namen <code>\"charizard\"</code> hat.</p><code version=\"2\" codelang=\"python\" name=\"script.py\" visible-if=\"always\"><content><text value=\"class\" class=\"keyword\" /><text value=\" \" /><text value=\"Pokemon\" class=\"title\" /><text value=\":\" /><text type=\"break\" /><text value=\"  \" /><text value=\"def\" class=\"keyword\" /><text value=\" \" /><text value=\"__init__\" class=\"title\" /><text value=\"(self, color, name)\" class=\"params\" /><text value=\":\" /><text type=\"break\" /><text value=\"    self.color = color\" /><text type=\"break\" /><text value=\"    self.name = name\" /><text type=\"break\" /><text type=\"break\" /><text value=\"charizard = Pokemon(\" /><text value=\"&quot;orange&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;charizard&quot;\" class=\"string\" /><text value=\")\" /><text type=\"break\" /><text value=\"print(charizard.color)\" /><text type=\"break\" /><text value=\"print(charizard.name)\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"107\" endIndex=\"114\" /><option startIndex=\"114\" endIndex=\"115\" /><option startIndex=\"115\" endIndex=\"123\" /><option startIndex=\"123\" endIndex=\"124\" /><option startIndex=\"125\" endIndex=\"136\" /><option startIndex=\"136\" endIndex=\"137\" /><option correct=\"false\"><content><text value=\"[\" /></content></option><option correct=\"false\"><content><text value=\"]\" /></content></option></options></interaction></interactions><output><content><text value=\"orange\" /><text type=\"break\" /><text value=\"charizard\" /></content></output></code><p visible-if=\"wrong\">Wähle <code>Pokemon</code>, gefolgt von <code>(</code> und schließlich <code>\"orange\"</code>, <code>,</code>, <code>\"charizard\"</code>, <code>)</code> aus.</p></body></html>"
          }
        ]
      }
    ]
  }
}