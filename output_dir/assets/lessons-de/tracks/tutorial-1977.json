{
  "tutorial": {
    "id": 1977,
    "version": 10,
    "type": "guidedProjectOptional",
    "isNew": false,
    "codeLanguage": "javascript",
    "title": "Lieferplaner",
    "descriptionContent": "Erstelle ein Programm zur Planung von Lieferungen",
    "shortDescriptionContent": "",
    "showInTrack": true,
    "iconBanner": "tutorial-1977-icon-banner.svg",
    "chapters": [
      {
        "id": 12678,
        "title": "Lieferplaner",
        "type": "practiceLevel3",
        "lessons": [
          {
            "title": "Store day preferences",
            "id": 114891,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Sheila muss ein Paket erhalten, und sie möchte sicherstellen, dass es ankommt, wenn sie zu Hause ist. Lass uns ein Lieferplanungsprogramm schreiben, das ihren Vorlieben entspricht und sicherstellt, dass sie da ist, wenn das Paket ankommt!\n\nDas Lieferprogramm wird Sheilas Tages- und Zeitpräferenzen berücksichtigen, bevor eine Lieferung geplant wird. Beginnen wir mit ihren Tagespräferenzen und erlauben zwei bevorzugte Tage.\n\n1. Erstelle ein `const` namens `firstDay`, um Sheilas ersten bevorzugten Tag, `\"Monday\"`, zu speichern.\n2. Erstelle ein `const` namens `secondDay`, um Sheilas zweiten bevorzugten Tag, `\"Friday\"`, zu speichern.\n3. Gib in der Konsole eine Nachricht in diesem Stil aus: `\"Available days: Monday and Friday\"`. Verwende eine Zeichenkettenverkettung mit den Konstanten `firstDay` und `secondDay`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "",
                  "solvedContent": "const firstDay = \"Monday\";\r\nconst secondDay = \"Friday\";\r\nconsole.log(\"Available days: \" + firstDay + \" and \" + secondDay);"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Declare program's day selection",
            "id": 114999,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Das Lieferunternehmen arbeitet nur an einem Tag pro Woche. Der Liefertag dieser Woche ist Freitag. Lass uns diesen Wert speichern.\n1. Erstelle eine `const` mit dem Namen `deliveryDay` und setze ihren Wert auf `\"Friday\"`.\n2. Gib `\"Delivery Day: Friday\"` in der Konsole aus, indem du die Konstante `deliveryDay` und String-Konkatenation verwendest.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const firstDay = \"Monday\";\r\nconst secondDay = \"Friday\";\r\nconsole.log(\"Available days: \" + firstDay + \" and \" + secondDay);",
                  "solvedContent": "const firstDay = \"Monday\";\r\nconst secondDay = \"Friday\";\r\nconsole.log(\"Available days: \" + firstDay + \" and \" + secondDay);\r\nconst deliveryDay = \"Friday\";\r\nconsole.log(\"Delivery Day: \" + deliveryDay);"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Check Day I",
            "id": 114895,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Es ist an der Zeit zu überprüfen, ob der Liefertag in Sheilas bevorzugten Liefertag passt! Sheila hat 2 bevorzugte Tage, aber lass uns damit beginnen zu überprüfen, ob der Liefertag mit dem ersten Tag übereinstimmt.\n\n1. Überprüfe, ob `deliveryDay` gleich `firstDay` ist, und setze diesen Vergleich als den Wert einer neuen `const`-Variable namens `firstDayCheck`.\n2. Gib `\"Erfolgreiche Lieferung am ersten Tag? \" + firstDayCheck` in der Konsole aus.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const firstDay = \"Monday\";\r\nconst secondDay = \"Friday\";\r\nconsole.log(\"Available days: \" + firstDay + \" and \" + secondDay);\r\nconst deliveryDay = \"Friday\";\r\nconsole.log(\"Delivery Day: \" + deliveryDay);",
                  "solvedContent": "const firstDay = \"Monday\";\r\nconst secondDay = \"Friday\";\r\nconsole.log(\"Available days: \" + firstDay + \" and \" + secondDay);\r\nconst deliveryDay = \"Friday\";\r\nconsole.log(\"Delivery Day: \" + deliveryDay);\r\nconst firstDayCheck = deliveryDay === firstDay;\r\nconsole.log(\"Successful delivery on the first day? \" + firstDayCheck);"
                }
              ],
              "hints": [
                {
                  "title": "Hint",
                  "content": "You can check if strings are equal using `===`."
                }
              ]
            }
          },
          {
            "title": "Check Day II",
            "id": 114903,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Die Lieferung ist am ersten Tag nicht verfügbar! Lass uns überprüfen, ob der Liefertag mit dem zweiten Tag übereinstimmt.\n\n1. Überprüfe, ob `deliveryDay` gleich `secondDay` ist und setze diesen Vergleich als Wert einer neuen `const`-Variable namens `secondDayCheck`.\n2. Gib `\"Erfolgreiche Lieferung am zweiten Tag? \" + secondDayCheck` in der Konsole aus.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const firstDay = \"Monday\";\r\nconst secondDay = \"Friday\";\r\nconsole.log(\"Available days: \" + firstDay + \" and \" + secondDay);\r\nconst deliveryDay = \"Friday\";\r\nconsole.log(\"Delivery Day: \" + deliveryDay);\r\nconst firstDayCheck = deliveryDay === firstDay;\r\nconsole.log(\"Successful delivery on the first day? \" + firstDayCheck);",
                  "solvedContent": "const firstDay = \"Monday\";\r\nconst secondDay = \"Friday\";\r\nconsole.log(\"Available days: \" + firstDay + \" and \" + secondDay);\r\nconst deliveryDay = \"Friday\";\r\nconsole.log(\"Delivery Day: \" + deliveryDay);\r\nconst firstDayCheck = deliveryDay === firstDay;\r\nconsole.log(\"Successful delivery on the first day? \" + firstDayCheck);\r\nconst secondDayCheck = deliveryDay === secondDay;\r\nconsole.log(\"Successful delivery on the second day? \" + secondDayCheck);"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Check Day III",
            "id": 114904,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Lass uns überprüfen, ob Sheilas Tagespräferenzen in einem Schritt erfüllt wurden, indem wir den logischen Operator *OR* verwenden.\n\n1. Erstelle eine `dayResult` `const` Variable.\n2. Überprüfe, ob entweder `firstDayCheck` oder `secondDayCheck` `true` sind, und speichere diesen logischen Ausdruck in der Variable `dayResult`.\n3. Gib `\"Fulfilled Sheila's day preference? \" + dayResult` in der Konsole aus.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const firstDay = \"Monday\";\r\nconst secondDay = \"Friday\";\r\nconsole.log(\"Available days: \" + firstDay + \" and \" + secondDay);\r\nconst deliveryDay = \"Friday\";\r\nconsole.log(\"Delivery Day: \" + deliveryDay);\r\nconst firstDayCheck = deliveryDay === firstDay;\r\nconsole.log(\"Successful delivery on the first day? \" + firstDayCheck);\r\nconst secondDayCheck = deliveryDay === secondDay;\r\nconsole.log(\"Successful delivery on the second day? \" + secondDayCheck);",
                  "solvedContent": "const firstDay = \"Monday\";\r\nconst secondDay = \"Friday\";\r\nconsole.log(\"Available days: \" + firstDay + \" and \" + secondDay);\r\nconst deliveryDay = \"Friday\";\r\nconsole.log(\"Delivery Day: \" + deliveryDay);\r\nconst firstDayCheck = deliveryDay === firstDay;\r\nconsole.log(\"Successful delivery on the first day? \" + firstDayCheck);\r\nconst secondDayCheck = deliveryDay === secondDay;\r\nconsole.log(\"Successful delivery on the second day? \" + secondDayCheck);\r\nconst dayResult = firstDayCheck || secondDayCheck;\r\nconsole.log(\"Fulfilled Sheila's day preference? \" + dayResult);"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Declare Sheila's preferred time",
            "id": 114892,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Der Liefertag passt! Lass uns nun die Lieferzeit erkunden. Sheila ist nur zwischen 8 Uhr und 10 Uhr zu Hause. Erstelle Variablen, um Sheilas bevorzugte Zeit anzugeben.\n\n1. Die Lieferung muss nach 8 Uhr erfolgen, setze also `8` als Wert einer neuen `const`-Variable namens `requestAfterTime`.\n2. Die Lieferung muss vor 10 Uhr erfolgen, setze also `10` als Wert einer neuen `const`-Variable namens `requestBeforeTime`.\n3. Gib `\"Request delivery after \" + requestAfterTime + \" but before \" + requestBeforeTime` in der Konsole aus.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const firstDay = \"Monday\";\r\nconst secondDay = \"Friday\";\r\nconsole.log(\"Available days: \" + firstDay + \" and \" + secondDay);\r\nconst deliveryDay = \"Friday\";\r\nconsole.log(\"Delivery Day: \" + deliveryDay);\r\nconst firstDayCheck = deliveryDay === firstDay;\r\nconsole.log(\"Successful delivery on the first day? \" + firstDayCheck);\r\nconst secondDayCheck = deliveryDay === secondDay;\r\nconsole.log(\"Successful delivery on the second day? \" + secondDayCheck);\r\nconst dayResult = firstDayCheck || secondDayCheck;\r\nconsole.log(\"Fulfilled Sheila's day preference? \" + dayResult);",
                  "solvedContent": "const firstDay = \"Monday\";\r\nconst secondDay = \"Friday\";\r\nconsole.log(\"Available days: \" + firstDay + \" and \" + secondDay);\r\nconst deliveryDay = \"Friday\";\r\nconsole.log(\"Delivery Day: \" + deliveryDay);\r\nconst firstDayCheck = deliveryDay === firstDay;\r\nconsole.log(\"Successful delivery on the first day? \" + firstDayCheck);\r\nconst secondDayCheck = deliveryDay === secondDay;\r\nconsole.log(\"Successful delivery on the second day? \" + secondDayCheck);\r\nconst dayResult = firstDayCheck || secondDayCheck;\r\nconsole.log(\"Fulfilled Sheila's day preference? \" + dayResult);\r\nconst requestBeforeTime = 10;\r\nconst requestAfterTime = 8;\r\nconsole.log(\"Request delivery after \" + requestAfterTime + \" but before \" +\r\n  requestBeforeTime);"
                }
              ],
              "hints": [
                {
                  "title": "Hint",
                  "content": "Note that the variables should be numbers and not strings. Eg. `const <variableName> = <number>;`"
                }
              ]
            }
          },
          {
            "title": "Declare program's selection",
            "id": 114893,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Das Lieferunternehmen hat nächsten Freitag um 9 Uhr einen Liefertermin. Lass uns diese Information zu unserer App hinzufügen.\n\n1. Erstelle eine `deliveryTime` `const` Variable und speichere die Zahl `9` als ihren Wert.\n2. Gib `\"Delivery Time: \" + deliveryTime` in der Konsole aus.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const firstDay = \"Monday\";\r\nconst secondDay = \"Friday\";\r\nconsole.log(\"Available days: \" + firstDay + \" \" + secondDay);\r\nconst deliveryDay = \"Friday\";\r\nconsole.log(\"Delivery Day: \" + deliveryDay);\r\nconst firstDayCheck = deliveryDay === firstDay;\r\nconsole.log(\"Successful delivery on the first day? \" + firstDayCheck);\r\nconst secondDayCheck = deliveryDay === secondDay;\r\nconsole.log(\"Successful delivery on the second day? \" + secondDayCheck);\r\nconst dayResult = firstDayCheck || secondDayCheck;\r\nconsole.log(\"Fulfilled Sheila's day preference? \" + dayResult);\r\nconst requestBeforeTime = 10;\r\nconst requestAfterTime = 8;\r\nconsole.log(\"Request delivery after \" + requestAfterTime + \" but before \" +\r\n  requestBeforeTime);",
                  "solvedContent": "const firstDay = \"Monday\";\r\nconst secondDay = \"Friday\";\r\nconsole.log(\"Available days: \" + firstDay + \" \" + secondDay);\r\nconst deliveryDay = \"Friday\";\r\nconsole.log(\"Delivery Day: \" + deliveryDay);\r\nconst firstDayCheck = deliveryDay === firstDay;\r\nconsole.log(\"Successful delivery on the first day? \" + firstDayCheck);\r\nconst secondDayCheck = deliveryDay === secondDay;\r\nconsole.log(\"Successful delivery on the second day? \" + secondDayCheck);\r\nconst dayResult = firstDayCheck || secondDayCheck;\r\nconsole.log(\"Fulfilled Sheila's day preference? \" + dayResult);\r\nconst requestBeforeTime = 10;\r\nconst requestAfterTime = 8;\r\nconsole.log(\"Request delivery after \" + requestAfterTime + \" but before \" +\r\n  requestBeforeTime);\r\nconst deliveryTime = 9;\r\nconsole.log(\"Delivery Time: \" + deliveryTime);"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Check Time I",
            "id": 114897,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Lass uns überprüfen, ob Sheilas Vorlieben in die verfügbare Zeit passen. Überprüfe, ob die Lieferung nach 8 Uhr morgens erfolgt.\n\n1. Überprüfe, ob `deliveryTime` um oder nach `requestAfterTime` ist und setze den Vergleich als Wert einer neuen `const`-Variable namens `afterTimeCheck`.\n2. Gib `\"Delivery is after \" + requestAfterTime + \"? \" + afterTimeCheck` in der Konsole aus.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const firstDay = \"Monday\";\r\nconst secondDay = \"Friday\";\r\nconsole.log(\"Available days: \" + firstDay + \" and \" + secondDay);\r\nconst deliveryDay = \"Friday\";\r\nconsole.log(\"Delivery Day: \" + deliveryDay);\r\nconst firstDayCheck = deliveryDay === firstDay;\r\nconsole.log(\"Successful delivery on the first day? \" + firstDayCheck);\r\nconst secondDayCheck = deliveryDay === secondDay;\r\nconsole.log(\"Successful delivery on the second day? \" + secondDayCheck);\r\nconst dayResult = firstDayCheck || secondDayCheck;\r\nconsole.log(\"Fulfilled Sheila's day preference? \" + dayResult);\r\nconst requestBeforeTime = 10;\r\nconst requestAfterTime = 8;\r\nconsole.log(\"Request delivery after \" + requestAfterTime + \" but before \" +\r\n  requestBeforeTime);\r\nconst deliveryTime = 9;\r\nconsole.log(\"Delivery Time: \" + deliveryTime);",
                  "solvedContent": "const firstDay = \"Monday\";\r\nconst secondDay = \"Friday\";\r\nconsole.log(\"Available days: \" + firstDay + \" and \" + secondDay);\r\nconst deliveryDay = \"Friday\";\r\nconsole.log(\"Delivery Day: \" + deliveryDay);\r\nconst firstDayCheck = deliveryDay === firstDay;\r\nconsole.log(\"Successful delivery on the first day? \" + firstDayCheck);\r\nconst secondDayCheck = deliveryDay === secondDay;\r\nconsole.log(\"Successful delivery on the second day? \" + secondDayCheck);\r\nconst dayResult = firstDayCheck || secondDayCheck;\r\nconsole.log(\"Fulfilled Sheila's day preference? \" + dayResult);\r\nconst requestBeforeTime = 10;\r\nconst requestAfterTime = 8;\r\nconsole.log(\"Request delivery after \" + requestAfterTime + \" but before \" +\r\n  requestBeforeTime);\r\nconst deliveryTime = 9;\r\nconsole.log(\"Delivery Time: \" + deliveryTime);\r\nconst afterTimeCheck = deliveryTime >= requestAfterTime;\r\nconsole.log(\"Delivery is after \" + requestAfterTime + \"? \" + afterTimeCheck);"
                }
              ],
              "hints": [
                {
                  "title": "Hint",
                  "content": "You can use >= to see if the `deliveryTime` is after or equal to the `requestAfterTime`."
                }
              ]
            }
          },
          {
            "title": "Check Time II",
            "id": 114894,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Lass uns nun überprüfen, ob die Lieferung vor 10 Uhr morgens erfolgt!\n\n1. Überprüfe, ob `deliveryTime` vor `requestBeforeTime` liegt, und setze den Vergleich als Wert einer neuen `const`-Variable namens `beforeTimeCheck`.\n2. Gib `\"Delivery is before \" + requestBeforeTime + \"? \" + beforeTimeCheck` in der Konsole aus.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const firstDay = \"Monday\";\r\nconst secondDay = \"Friday\";\r\nconsole.log(\"Available days: \" + firstDay + \" and \" + secondDay);\r\nconst deliveryDay = \"Friday\";\r\nconsole.log(\"Delivery Day: \" + deliveryDay);\r\nconst firstDayCheck = deliveryDay === firstDay;\r\nconsole.log(\"Successful delivery on the first day? \" + firstDayCheck);\r\nconst secondDayCheck = deliveryDay === secondDay;\r\nconsole.log(\"Successful delivery on the second day? \" + secondDayCheck);\r\nconst dayResult = firstDayCheck || secondDayCheck;\r\nconsole.log(\"Fulfilled Sheila's day preference? \" + dayResult);\r\nconst requestBeforeTime = 10;\r\nconst requestAfterTime = 8;\r\nconsole.log(\"Request delivery after \" + requestAfterTime + \" but before \" +\r\n  requestBeforeTime);\r\nconst deliveryTime = 9;\r\nconsole.log(\"Delivery Time: \" + deliveryTime);\r\nconst afterTimeCheck = deliveryTime >= requestAfterTime;\r\nconsole.log(\"Delivery is after \" + requestAfterTime + \"? \" + afterTimeCheck);",
                  "solvedContent": "const firstDay = \"Monday\";\r\nconst secondDay = \"Friday\";\r\nconsole.log(\"Available days: \" + firstDay + \" and \" + secondDay);\r\nconst deliveryDay = \"Friday\";\r\nconsole.log(\"Delivery Day: \" + deliveryDay);\r\nconst firstDayCheck = deliveryDay === firstDay;\r\nconsole.log(\"Successful delivery on the first day? \" + firstDayCheck);\r\nconst secondDayCheck = deliveryDay === secondDay;\r\nconsole.log(\"Successful delivery on the second day? \" + secondDayCheck);\r\nconst dayResult = firstDayCheck || secondDayCheck;\r\nconsole.log(\"Fulfilled Sheila's day preference? \" + dayResult);\r\nconst requestBeforeTime = 10;\r\nconst requestAfterTime = 8;\r\nconsole.log(\"Request delivery after \" + requestAfterTime + \" but before \" +\r\n  requestBeforeTime);\r\nconst deliveryTime = 9;\r\nconsole.log(\"Delivery Time: \" + deliveryTime);\r\nconst afterTimeCheck = deliveryTime >= requestAfterTime;\r\nconsole.log(\"Delivery is after \" + requestAfterTime + \"? \" + afterTimeCheck);\r\nconst beforeTimeCheck = deliveryTime <= requestBeforeTime;\r\nconsole.log(\"Delivery is before \" + requestBeforeTime + \"? \" + beforeTimeCheck);"
                }
              ],
              "hints": [
                {
                  "title": "Hint",
                  "content": "You can use <= to see if the `deliveryTime` is before or equal to the `requestBeforeTime`."
                }
              ]
            }
          },
          {
            "title": "Check Time III",
            "id": 114898,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Großartig! Sheila wird zu dieser Zeit zu Hause sein! Aber lass uns jetzt die Zeitüberprüfung mit dem logischen Operator AND vereinfachen.\n\n1. Überprüfe, ob `beforeTimeCheck` und `afterTimeCheck` `true` sind, und setze diesen logischen Ausdruck als den Wert einer neuen `const`-Variable namens `timeResult`.\n2. Gib `\"Fulfilled Sheila's time preference? \" + timeResult` in der Konsole aus.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const firstDay = \"Monday\";\r\nconst secondDay = \"Friday\";\r\nconsole.log(\"Available days: \" + firstDay + \" and \" + secondDay);\r\nconst deliveryDay = \"Friday\";\r\nconsole.log(\"Delivery Day: \" + deliveryDay);\r\nconst firstDayCheck = deliveryDay === firstDay;\r\nconsole.log(\"Successful delivery on the first day? \" + firstDayCheck);\r\nconst secondDayCheck = deliveryDay === secondDay;\r\nconsole.log(\"Successful delivery on the second day? \" + secondDayCheck);\r\nconst dayResult = firstDayCheck || secondDayCheck;\r\nconsole.log(\"Fulfilled Sheila's day preference? \" + dayResult);\r\nconst requestBeforeTime = 10;\r\nconst requestAfterTime = 8;\r\nconsole.log(\"Request delivery after \" + requestAfterTime + \" but before \" +\r\n  requestBeforeTime);\r\nconst deliveryTime = 9;\r\nconsole.log(\"Delivery Time: \" + deliveryTime);\r\nconst afterTimeCheck = deliveryTime >= requestAfterTime;\r\nconsole.log(\"Delivery is after \" + requestAfterTime + \"? \" + afterTimeCheck);\r\nconst beforeTimeCheck = deliveryTime <= requestBeforeTime;\r\nconsole.log(\"Delivery is before \" + requestBeforeTime + \"? \" + beforeTimeCheck);",
                  "solvedContent": "const firstDay = \"Monday\";\r\nconst secondDay = \"Friday\";\r\nconsole.log(\"Available days: \" + firstDay + \" and \" + secondDay);\r\nconst deliveryDay = \"Friday\";\r\nconsole.log(\"Delivery Day: \" + deliveryDay);\r\nconst firstDayCheck = deliveryDay === firstDay;\r\nconsole.log(\"Successful delivery on the first day? \" + firstDayCheck);\r\nconst secondDayCheck = deliveryDay === secondDay;\r\nconsole.log(\"Successful delivery on the second day? \" + secondDayCheck);\r\nconst dayResult = firstDayCheck || secondDayCheck;\r\nconsole.log(\"Fulfilled Sheila's day preference? \" + dayResult);\r\nconst requestBeforeTime = 10;\r\nconst requestAfterTime = 8;\r\nconsole.log(\"Request delivery after \" + requestAfterTime + \" but before \" +\r\n  requestBeforeTime);\r\nconst deliveryTime = 9;\r\nconsole.log(\"Delivery Time: \" + deliveryTime);\r\nconst afterTimeCheck = deliveryTime >= requestAfterTime;\r\nconsole.log(\"Delivery is after \" + requestAfterTime + \"? \" + afterTimeCheck);\r\nconst beforeTimeCheck = deliveryTime <= requestBeforeTime;\r\nconsole.log(\"Delivery is before \" + requestBeforeTime + \"? \" + beforeTimeCheck);\r\nconst timeResult = beforeTimeCheck && afterTimeCheck;\r\nconsole.log(\"Fulfilled Sheila's time preference? \" + timeResult);"
                }
              ],
              "hints": [
                {
                  "title": "Hint",
                  "content": "You can use the AND operator  `&&`  for the check. It returns `false` if *any* of the conditions are `false`. It returns `true` if *both* of the conditions are `true`."
                }
              ]
            }
          },
          {
            "title": "Check day and time",
            "id": 114896,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Schließlich müssen wir überprüfen, ob die Lieferung sowohl Sheilas Tages- als auch Zeitpräferenzen erfüllt hat, und das Ergebnis der Überprüfung ausdrucken!\n\n1. Überprüfe, ob sowohl `timeResult` als auch `dayResult` `true` sind, und setze diesen logischen Ausdruck als Wert der neuen `const`-Variable `overallCheck`.\n2. Gib `\"Program scheduled well? \" + overallCheck` in der Konsole aus.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const firstDay = \"Monday\";\r\nconst secondDay = \"Friday\";\r\nconsole.log(\"Available days: \" + firstDay + \" and \" + secondDay);\r\nconst deliveryDay = \"Friday\";\r\nconsole.log(\"Delivery Day: \" + deliveryDay);\r\nconst firstDayCheck = deliveryDay === firstDay;\r\nconsole.log(\"Successful delivery on the first day? \" + firstDayCheck);\r\nconst secondDayCheck = deliveryDay === secondDay;\r\nconsole.log(\"Successful delivery on the second day? \" + secondDayCheck);\r\nconst dayResult = firstDayCheck || secondDayCheck;\r\nconsole.log(\"Fulfilled Sheila's day preference? \" + dayResult);\r\nconst requestBeforeTime = 10;\r\nconst requestAfterTime = 8;\r\nconsole.log(\"Request delivery after \" + requestAfterTime + \" but before \" +\r\n  requestBeforeTime);\r\nconst deliveryTime = 9;\r\nconsole.log(\"Delivery Time: \" + deliveryTime);\r\nconst afterTimeCheck = deliveryTime >= requestAfterTime;\r\nconsole.log(\"Delivery is after \" + requestAfterTime + \"? \" + afterTimeCheck);\r\nconst beforeTimeCheck = deliveryTime <= requestBeforeTime;\r\nconsole.log(\"Delivery is before \" + requestBeforeTime + \"? \" + beforeTimeCheck);\r\nconst timeResult = beforeTimeCheck && afterTimeCheck;\r\nconsole.log(\"Fulfilled Sheila's time preference? \" + timeResult);",
                  "solvedContent": "const firstDay = \"Monday\";\r\nconst secondDay = \"Friday\";\r\nconsole.log(\"Available days: \" + firstDay + \" and \" + secondDay);\r\nconst deliveryDay = \"Friday\";\r\nconsole.log(\"Delivery Day: \" + deliveryDay);\r\nconst firstDayCheck = deliveryDay === firstDay;\r\nconsole.log(\"Successful delivery on the first day? \" + firstDayCheck);\r\nconst secondDayCheck = deliveryDay === secondDay;\r\nconsole.log(\"Successful delivery on the second day? \" + secondDayCheck);\r\nconst dayResult = firstDayCheck || secondDayCheck;\r\nconsole.log(\"Fulfilled Sheila's day preference? \" + dayResult);\r\nconst requestBeforeTime = 10;\r\nconst requestAfterTime = 8;\r\nconsole.log(\"Request delivery after \" + requestAfterTime + \" but before \" +\r\n  requestBeforeTime);\r\nconst deliveryTime = 9;\r\nconsole.log(\"Delivery Time: \" + deliveryTime);\r\nconst afterTimeCheck = deliveryTime >= requestAfterTime;\r\nconsole.log(\"Delivery is after \" + requestAfterTime + \"? \" + afterTimeCheck);\r\nconst beforeTimeCheck = deliveryTime <= requestBeforeTime;\r\nconsole.log(\"Delivery is before \" + requestBeforeTime + \"? \" + beforeTimeCheck);\r\nconst timeResult = beforeTimeCheck && afterTimeCheck;\r\nconsole.log(\"Fulfilled Sheila's time preference? \" + timeResult);\r\nconst overallCheck = timeResult && dayResult;\r\nconsole.log(\"Program scheduled well? \" + (overallCheck));"
                }
              ],
              "hints": []
            }
          }
        ]
      }
    ]
  }
}