{
  "tutorial": {
    "id": 2260,
    "version": 1,
    "type": "practiceOptional",
    "isNew": false,
    "codeLanguage": "javascript",
    "title": "ES6 2",
    "descriptionContent": "ES6 2",
    "shortDescriptionContent": "",
    "showInTrack": true,
    "iconBanner": null,
    "chapters": [
      {
        "id": 12265,
        "title": "Template Literale",
        "type": "practiceLevel3",
        "lessons": [
          {
            "title": "Code: Literal String",
            "id": 111442,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Erstelle eine Variable mit dem Namen `favoriteIceCream` und weise ihr einen String-Literal `chocolate` zu.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "console.log(favoriteIceCream);",
                  "solvedContent": "const favoriteIceCream = `chocolate`;\r\nconsole.log(favoriteIceCream);"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Code: Variables",
            "id": 111443,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Kombiniere die String-Literale, sodass `bestDessert` gleich `vanilla ice cream` ist.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const favoriteIceCream = `vanilla`;\r\nconst bestDessert = ``;\r\nconsole.log(bestDessert);",
                  "solvedContent": "const favoriteIceCream = `vanilla`;\r\nconst bestDessert = `${favoriteIceCream} ice cream`;\r\nconsole.log(bestDessert);"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Code: Expressions",
            "id": 111444,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Innerhalb des `students`-Strings und nach dem `:`, schreibe einen Ausdruck, der alle Schülerzahlen der Schule addiert. Du möchtest einen String, der so aussieht: `# of Students: 260`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const elementarySchool = 90;\r\nconst middleSchool = 70;\r\nconst highSchool = 100;\r\nconst students = `# of Students:`;",
                  "solvedContent": "const elementarySchool = 90;\r\nconst middleSchool = 70;\r\nconst highSchool = 100;\r\nconst students =\r\n `# of Students: ${elementarySchool + middleSchool + highSchool}`;"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Code: Functions",
            "id": 111441,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Code das `${color}` in der Rückgabezeile und rufe die Funktion so auf, dass die Nachricht `Jerry always wears blue shirts.` lautet. Übergebe den Parameter ohne Klammern.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const bestColor = (color) => {\r\n const name = `Jerry`;\r\n return `${name} always wears  shirts.`;\r\n};\r\nconsole.log();",
                  "solvedContent": "const bestColor = (color) => {\r\n const name = `Jerry`;\r\n return `${name} always wears ${color} shirts.`;\r\n};\r\nconsole.log(bestColor`blue`);"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 13605,
        "title": "Destrukturierung",
        "type": "practiceLevel3",
        "lessons": [
          {
            "title": "Code 1: Basic Array Destructuring",
            "id": 122394,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Wir haben eine Liste mit fabelhafter Kleidung geplant und müssen sie ausdrucken! Destrukturiere das Array und speichere seine Elemente in den Variablen `top`, `bottom`, `outerwear` und `footwear`. Behalte die Reihenfolge innerhalb der `[]`. Dann `console.log` jede Variable.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const [, , , ] = [\"Baseball top\", \"kilt\", \"Blazer\", \"Boots\"];\nconsole.log();\nconsole.log();\nconsole.log();\nconsole.log();",
                  "solvedContent": "const [top, bottom, outerwear, footwear] = [\"Baseball top\", \"kilt\",\n \"Blazer\", \"Boots\"\n];\nconsole.log(top);\nconsole.log(bottom);\nconsole.log(outerwear);\nconsole.log(footwear);"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Code 2: The rest in Array Destructuring",
            "id": 122395,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "In dieser Teeliste finden wir verschiedene Geschmacksrichtungen. Wir möchten einen Satz über die Vorteile von Beeren-Tee drucken, aber die restlichen Tees behalten. Speichere `Berry` in der Variable `berryTea` und die restlichen Tees in `otherTeas`. Dann füge die Variable, die sich auf `Berry` bezieht, in das erste `console.log` ein und drucke die restlichen Tees im zweiten.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const [] = ['Berry', 'Chai', 'Chamomile', 'Citrus', 'Fruity'];\nconsole.log(`The ${} tea has Sun-proofing and Nourishing effects.`);\nconsole.log();",
                  "solvedContent": "const [berryTea, ...otherTeas] = ['Berry', 'Chai', 'Chamomile',\n 'Citrus', 'Fruity'\n];\nconsole.log(\n `The ${berryTea} tea has Sun-proofing and Nourishing effects.`);\nconsole.log(otherTeas);"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Code 3: Extract Values in Destructuring",
            "id": 122396,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "In der Bäckerei unseres Nachbarn haben wir verschiedene Brotsorten. Dieses Mal müssen wir das `Focaccia` auswählen, um einen informativen Satz zu drucken, der dieses Brot wie warme Semmeln verkaufen lässt! Extrahiere und speichere diesen Wert in der Variable `italianBread`, und verwende ihn dann in der `console.log`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const [] = ['Sourdough', 'Baguette', 'Brioche', 'Focaccia',\n 'Multigrain'\n];\nconsole.log(\n `${} is leavened bread than produces a fluffy appearance.`);",
                  "solvedContent": "const [, , , italianBread] = ['Sourdough', 'Baguette', 'Brioche',\n 'Focaccia', 'Multigrain'\n];\nconsole.log(\n `${italianBread} is leavened bread than produces a fluffy appearance.`\n );"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Code 4: Basic Object Destructuring",
            "id": 122397,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Fliegen ist ein fantastisches Abenteuer! Lass uns einige Boeing-Eigenschaften in diesem Objekt überprüfen. Destrukturiere alle seine Eigenschaften, um sie im `console.log` zu verwenden.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const aircrafts = {\n brand: 'Boeing',\n nose: 'Pointed nose',\n windshield: 'V-shaped windshield',\n tail: 'Sloped Tail',\n};\nconst {} = aircrafts;\nconsole.log(`The ${brand} Company was founded on July 15, 1916.`);\nconsole.log(`This aircraft has a ${nose}, and a ${windshield}`);\nconsole.log(`And at least but not last a ${tail}`);",
                  "solvedContent": "const aircrafts = {\n brand: 'Boeing',\n nose: 'Pointed nose',\n windshield: 'V-shaped windshield',\n tail: 'Sloped Tail',\n};\nconst {\n brand,\n nose,\n windshield,\n tail\n} = aircrafts;\nconsole.log(`The ${brand} Company was founded on July 15, 1916.`);\nconsole.log(`This aircraft has a ${nose}, and a ${windshield}`);\nconsole.log(`And at least but not last a ${tail}`);"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Code 5: Different variable name",
            "id": 122398,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Wir müssen die Eigenschaften des `smartTV` überprüfen, bevor wir ins Einkaufszentrum gehen und einen neuen kaufen. Wenn wir uns die Eigenschaftsnamen ansehen, sind die ersten beiden zu allgemein, um nützlich zu sein; also lass uns `type` in `screenType` und `shape` in `screenShape` bei der Objekt-Destrukturierung ändern.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const smartTV = {\n type: \"QLED\",\n shape: \"Flat\",\n ports: \"HDMI\",\n connectivity: 'Wi-Fi'\n};\nconst {} = smartTV;\nconsole.log(screenType);\nconsole.log(screenShape);",
                  "solvedContent": "const smartTV = {\n type: \"QLED\",\n shape: \"Flat\",\n ports: \"HDMI\",\n connectivity: 'Wi-Fi'\n};\nconst {\n type: screenType,\n shape: screenShape,\n} = smartTV;\nconsole.log(screenType);\nconsole.log(screenShape);"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Code 6: The rest in Object destructuring",
            "id": 122399,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Wir haben ein Objekt mit den besten TV-Shows pro Jahrzehnt. Wir möchten die Eigenschaft `eighties` speichern, aber die verbleibenden Eigenschaften in `otherOldShows` behalten. Füge diese Variablen zur Objekt-Destrukturierung hinzu und schließe `eighties` in das erste `console.log` ein.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const oldShows = {\n fifties: \"Maverick\",\n sixties: \"The Saint\",\n seventies: \"The Love Boat\",\n eighties: \"Manimal\",\n nineties: \"Dawson's Creek\"\n};\nconst {} = oldShows;\nconsole.log(`The best tv show in the 80s was ${}`);\nconsole.log(otherOldShows);",
                  "solvedContent": "const oldShows = {\n fifties: \"Maverick\",\n sixties: \"The Saint\",\n seventies: \"The Love Boat\",\n eighties: \"Manimal\",\n nineties: \"Dawson's Creek\"\n};\nconst {\n eighties,\n ...otherOldShows\n} = oldShows;\nconsole.log(`The best tv show in the 80s was ${eighties}`);\nconsole.log(otherOldShows);"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Code 7: Default Values in Destructuring",
            "id": 122400,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Die Bierwelt ist faszinierend mit all den verschiedenen Sorten und der beträchtlichen Menge, die wir finden können. Wir haben ein Objekt mit Informationen über ein bestimmtes Bier. Es ist notwendig, einen Standardwert für die Eigenschaft `brand` festzulegen, da sie in `beer` fehlt. Setze `\"N/A\"` als Standardwert für `brand` in der Objekt-Destrukturierung. Dann drucke `brand`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const beer = {\n name: '\tBlue Moon White',\n alcoholPercentage: 5.4,\n calories: 171,\n carbs: 12.9\n};\nconst {} = beer;\nconsole.log();",
                  "solvedContent": "const beer = {\n name: '\tBlue Moon White',\n alcoholPercentage: 5.4,\n calories: 171,\n carbs: 12.9\n};\nconst {\n brand = \"N/A\"\n} = beer;\nconsole.log(brand);"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Code 8: Parameters in Functions",
            "id": 122401,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Destrukturiere die ersten beiden Elemente von `mountains` als Parameter für `getMountainsNickname`. Verwende die Variablennamen `alps` und `logan`. Dann, gib sie in der Funktion in derselben Reihenfolge aus.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const mountains = [\"Swiss Alps\", \"Mount Logan\", \"Mount Fuji\",\n \"Mauna Kea\", \"Jotunheimen Mountains\"\n];\n\nfunction getMountainsNickname() {\n console.log(`The ${} are The Magical Mountains.`);\n console.log(`The ${} is The Snowy Paradise.`);\n}\ngetMountainsNickname(mountains);",
                  "solvedContent": "const mountains = [\"Swiss Alps\", \"Mount Logan\", \"Mount Fuji\",\n \"Mauna Kea\", \"Jotunheimen Mountains\"\n];\n\nfunction getMountainsNickname([alps, logan]) {\n console.log(`The ${alps} are The Magical Mountains.`);\n console.log(`The ${logan} is The Snowy Paradise.`);\n}\ngetMountainsNickname(mountains);"
                }
              ],
              "hints": []
            }
          }
        ]
      }
    ]
  }
}