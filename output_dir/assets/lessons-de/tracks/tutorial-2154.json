{
  "tutorial": {
    "id": 2154,
    "version": 8,
    "type": "challenges",
    "isNew": false,
    "codeLanguage": "javascript",
    "title": "Synchronität & Asynchronität in JS",
    "descriptionContent": "Herausforderungen sind schwierigere Übungen, die deine Fähigkeiten testen werden.",
    "shortDescriptionContent": "",
    "showInTrack": true,
    "iconBanner": "tutorial-2154-icon-banner.svg",
    "chapters": [
      {
        "id": 13467,
        "title": "Obst-Einkaufsliste",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "Fruit Grocery List",
            "id": 121144,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Es ist Frühstückszeit! Wir haben kein Obst zu Hause, also müssen wir mit einer Liste auf den Markt gehen. Schreibe ein Programm, das die Früchte ausgibt, die wir brauchen.\n1. Verwende die `.map()` Methode auf dem `fruitsArray` und speichere es in `newArrayOfStrings`.\n2. Verwende `fruitsList` als Callback-Funktion von `.map()`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const fruitsArray = ['apples', 'coconuts', 'bananas', 'strawberries',\r\n'oranges'];\r\n\r\nfunction fruitsList(fruit) {\r\n  return 'Buy 2 ' + fruit;\r\n}\r\nconst newArrayOfStrings = ;\r\nconsole.log(newArrayOfStrings);",
                  "solvedContent": "const fruitsArray = ['apples', 'coconuts', 'bananas', 'strawberries',\n'oranges'];\n\nfunction fruitsList(fruit) {\n  return 'Buy 2 ' + fruit;\n}\nconst newArrayOfStrings = fruitsArray.map(fruitsList);\nconsole.log(newArrayOfStrings);"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 13469,
        "title": "Klassenbester",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "Best in Class",
            "id": 121146,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Der Mathelehrer möchte die besten zwei Schüler der Klasse belohnen. Der Lehrer weiß, dass die besten zwei Schüler mehr als 4/5 Punkte in der Prüfung erreicht haben. Hilf dem Lehrer, die besten zwei Noten der Klasse zu identifizieren, indem du die Callback-Funktion aufrufst.\n1. Füge in `bestGrades` das `mathGrades` Array mit der `.filter()` Methode ein.\n2. Übergebe die `callbackConditional` Funktion an die `.filter()` Methode, um die besten zwei Noten aus dem `mathGrades` Array zurückzugeben.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const mathGrades = [5.0, 4.8, 3.5, 3.0];\nconst callbackConditional = (num) => num > 4;\n\nfunction bestMathGrades() {\n  const bestGrades = ;\n  console.log(bestGrades);\n  return bestGrades;\n}\nbestMathGrades();\nconsole.log(\"The best two grades in Maths\");",
                  "solvedContent": "const mathGrades = [5.0, 4.8, 3.5, 3.0];\nconst callbackConditional = (num) => num > 4;\n\nfunction bestMathGrades() {\n  const bestGrades = mathGrades.filter(callbackConditional);\n  console.log(bestGrades);\n  return bestGrades;\n}\nbestMathGrades();\nconsole.log(\"The best two grades in Maths\");"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 13475,
        "title": "Taschenrechner-App",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "Calculator App",
            "id": 121152,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Wir müssen ein Programm testen, das zwei Zahlen summiert. Das Programm nimmt zwei Zahlen und eine Callback-Funktion.\n\n1. Füge `5` und `7` sowie die Callback-Funktion als Parameter zur `calculator`-Funktion hinzu, um zu sehen, ob es funktioniert.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const calculator = (number1, number2, callback) => {\r\n  console.log(\r\n    `The calculator gets the addition of the numbers ${number1} and ${number2}.`\r\n    );\r\n  const result = number1 + number2;\r\n  callback(result);\r\n};\r\nconst resultCalculator = result => console.log(`The result is ${result}`);",
                  "solvedContent": "const calculator = (number1, number2, callback) => {\n  console.log(\n    `The calculator gets the addition of the numbers ${number1} and ${number2}.`\n    );\n  const result = number1 + number2;\n  callback(result);\n};\nconst resultCalculator = result => console.log(`The result is ${result}`);\ncalculator(5, 7, resultCalculator);"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 13472,
        "title": "setTimeout",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "setTimeout",
            "id": 121149,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Wir möchten ein Programm erstellen, das zwei Nachrichten anzeigt. Die zweite Nachricht sollte 1,5 Sekunden nach der ersten erscheinen.\n1. Füge ein `setTimeout` hinzu, das die Funktion `callbackTime` nach 1,5 Sekunden aufruft.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "function callbackTime() {\r\n  console.log('Hi again! A second and a half later!!');\r\n}\r\nconsole.log('Hi');",
                  "solvedContent": "function callbackTime() {\n  console.log('Hi again! A second and a half later!!');\n}\nsetTimeout(callbackTime, 1500);\nconsole.log('Hi');"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 13470,
        "title": "Promises",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "Promises",
            "id": 121147,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Dieses Programm überprüft, ob die Anzahl der Stühle gleich oder größer ist als die Gesamtzahl der Schüler plus Lehrer.\n1. Füge Code hinzu, der mit der Nachricht `\"Chairs are enough for students and teachers.\"` endet.\n2. Wenn es zu wenige Stühle gibt, erstelle das Ablehnungsszenario, das `We need more chairs` ausgibt.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const school = {\n  students: 10,\n  teachers: 7,\n  chairs: 18\n};\n\nfunction enoughChairs() {\n  return new Promise(function(resolve, reject) {\n    if (school.chairs >= (school.students + school.teachers)) {\n     (\"Chairs are enough for students and teachers.\");\n    } else {\n     (\"We need more chairs\");\n    }\n  });\n}\nconst schoolData = enoughChairs();\nconsole.log(schoolData);",
                  "solvedContent": "const school = {\n  students: 10,\n  teachers: 7,\n  chairs: 18\n};\n\nfunction enoughChairs() {\n  return new Promise(function(resolve, reject) {\n    if (school.chairs >= (school.students + school.teachers)) {\n     resolve(\"Chairs are enough for students and teachers.\");\n    } else {\n     reject(\"We need more chairs\");\n    }\n  });\n}\nconst schoolData = enoughChairs();\nconsole.log(schoolData);"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 13474,
        "title": "asynchron",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "async",
            "id": 121151,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Es ist Zeit für einen leckeren Kaffee, und wir möchten zwei Löffel Zucker hinzufügen.\n1. Füge `async` und `await` hinzu, um die asynchrone Antwort der Funktionen innerhalb von `putSugarOnMyCoffee` zu ermöglichen.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const spoonsForCoffee = () => new Promise(function(resolve) {\n  let enoughSugar = false;\n  for (let spoons = 0; spoons <= 2; spoons++) {\n    if (spoons === 2) {\n      enoughSugar = true;\n    }\n  }\n  resolve(enoughSugar);\n  console.log('This coffee has two spoons of sugar');\n});\nconst isEnoughSugarForMyCoffee = sugar => new Promise(function(resolve) {\n  if (sugar) {\n    resolve(\"yummy! It tastes good!\");\n  } else {\n    reject('Another spoon of sugar, please.');\n  }\n});\nconst putSugarOnMyCoffee = () => {\n  const isEnoughSugar = spoonsForCoffee();\n  const response = isEnoughSugarForMyCoffee(isEnoughSugar);\n  console.log(response);\n};\nputSugarOnMyCoffee();",
                  "solvedContent": "const spoonsForCoffee = () => new Promise(function(resolve) {\n  let enoughSugar = false;\n  for (let spoons = 0; spoons <= 2; spoons++) {\n    if (spoons === 2) {\n      enoughSugar = true;\n    }\n  }\n  resolve(enoughSugar);\n  console.log('This coffee has two spoons of sugar');\n});\nconst isEnoughSugarForMyCoffee = sugar => new Promise(function(resolve) {\n  if (sugar) {\n    resolve(\"yummy! It tastes good!\");\n  } else {\n    reject('Another spoon of sugar, please.');\n  }\n});\nconst putSugarOnMyCoffee = async () => {\n  const isEnoughSugar = await spoonsForCoffee();\n  const response = await isEnoughSugarForMyCoffee(isEnoughSugar);\n  console.log(response);\n};\nputSugarOnMyCoffee();"
                }
              ],
              "hints": []
            }
          }
        ]
      }
    ]
  }
}