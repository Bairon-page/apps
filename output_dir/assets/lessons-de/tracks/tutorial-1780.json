{
  "tutorial": {
    "id": 1780,
    "version": 9,
    "type": "guidedProjectOptional",
    "isNew": false,
    "codeLanguage": "javascript",
    "title": "Sparrechner",
    "descriptionContent": "Verwende Schleifen, um ein Kundenquittungsprogramm zu erstellen",
    "shortDescriptionContent": "",
    "showInTrack": true,
    "iconBanner": "tutorial-1780-icon-banner.svg",
    "chapters": [
      {
        "id": 11755,
        "title": "Rabattrechner",
        "type": "practiceLevel3",
        "lessons": [
          {
            "title": "Step 1",
            "id": 107602,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Lass uns unser Wissen über wiederverwendbare Programme nutzen, um Rabatte in einem Schnäppchenladen zu berechnen.\n\nZuerst machen wir uns mit dem bereitgestellten Code vertraut: Es gibt ein Array, das Artikelpreise enthält, und eine Funktion, die die Anzahl der Cents von diesem Preis zurückgibt. Die Funktion verwendet `.toString()`, um den Preis von einer Zahl in einen String zu konvertieren. Dann verwendet sie `.split(\".\")`, um den Preis in Dollar und Cents zu teilen, wobei der `.` als Argument übergeben wird, und gibt das zweite Element des resultierenden Arrays zurück.\n\nUm zu beginnen, schreibst du zwei Hilfsfunktionen. Lass uns die erste angehen: `getsDiscount(rec)`. Diese Funktion wird zuerst die Preise des Kassenbons mit einer `for`-Schleife summieren. Dann wird die Funktion mit einer `if-else`-Anweisung `true` zurückgeben, wenn die Summe größer als 50 $ ist, andernfalls `false`.\n\nBeachte, dass die Funktion `getDiscount(rec)` einen Parameter `rec` hat, der Arrays annimmt, die den Kassenbon enthalten.\n\n1. Deklariere innerhalb des Funktionskörpers eine Variable `total` und setze ihren Wert auf 0.\n2. Schreibe eine `for`-Schleife, um von 0 bis zur Länge des `rec`-Arrays zu iterieren.\n3. Aktualisiere die Variable `total` während jeder Iteration der `for`-Schleife, indem du einen neuen Kassenbon hinzufügst.\n4. Schreibe schließlich nach der `for`-Schleife eine `if-else`-Anweisung, die `true` zurückgibt, wenn `total` größer als 50 $ ist, und andernfalls `false`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "index.js",
                  "codeLanguage": "javascript",
                  "content": "const receipt = [21.99, 10.67, 18.50];\n\nfunction getCents(price) {\n  const splitPrice = price.toString().split(\".\");\n  return splitPrice[1];\n}\n\nfunction getsDiscount(rec) {}",
                  "solvedContent": "const receipt = [21.99, 10.67, 18.50];\n\nfunction getCents(price) {\n  const splitPrice = price.toString().split(\".\");\n  return splitPrice[1];\n}\n\nfunction getsDiscount(rec) {\n  let total = 0;\n  for (let i = 0; i < rec.length; i++) {\n    total += rec[i];\n  }\n  if (total > 50) {\n    return true;\n  } else {\n    return false;\n  }\n}"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Step 2",
            "id": 107606,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Als nächstes schreiben wir die zweite Hilfsfunktion, `findDiscount()`. Diese Funktion nimmt einen einzelnen Parameter: `price`. Basierend auf der Anzahl der Cents im Preis wird die Funktion `if`, `else-if` und `else` Anweisungen verwenden, um einen \"Rabattfaktor\" (einen prozentualen Rabatt als Dezimalzahl ausgedrückt) zurückzugeben.\n\n1. Zuerst deklariere die Funktion `findDiscount()`. Die Funktion sollte einen einzelnen Parameter entgegennehmen: `price`.\n2. Als nächstes deklariere eine Variable namens `cents`. Verwende die bereitgestellte Funktion `getCents()`, um die Anzahl der Cents des Preises in der Variable `cents` zu speichern.\n3. Schließlich schreibe eine Reihe von `if`, `else-if` und `else` Anweisungen, um Rabattfaktoren basierend auf der Anzahl der `cents` zurückzugeben.\n    - Wenn der Preis 67 Cents beträgt, sollte die Funktion `0.3` zurückgeben, was einem 30% Rabatt entspricht.\n    - Wenn der Preis 95 Cents beträgt, sollte die Funktion `0.4` zurückgeben, was einem 40% Rabatt entspricht.\n    - Wenn der Preis 99 Cents beträgt, sollte die Funktion `0.5` zurückgeben, was einem 50% Rabatt entspricht.\n    - Andernfalls sollte die Funktion `0` zurückgeben, was keinen Rabatt bedeutet.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "index.js",
                  "codeLanguage": "javascript",
                  "content": "const receipt = [21.99, 10.67, 18.50];\n\nfunction getCents(price) {\n  const splitPrice = price.toString().split(\".\");\n  return splitPrice[1];\n}\n\nfunction getsDiscount(rec) {\n  let total = 0;\n  for (let i = 0; i < rec.length; i++) {\n    total += rec[i];\n  }\n  if (total > 50) {\n    return true;\n  } else {\n    return false;\n  }\n}",
                  "solvedContent": "const receipt = [21.99, 10.67, 18.50];\n\nfunction getCents(price) {\n  const splitPrice = price.toString().split(\".\");\n  return splitPrice[1];\n}\n\nfunction getsDiscount(rec) {\n  let total = 0;\n  for (let i = 0; i < rec.length; i++) {\n    total += rec[i];\n  }\n  if (total > 50) {\n    return true;\n  } else {\n    return false;\n  }\n}\n\nfunction findDiscount(price) {\n  const cents = getCents(price);\n  if (cents == 67) {\n    return 0.3;\n  } else if (cents == 95) {\n    return 0.4;\n  } else if (cents == 99) {\n    return 0.5;\n  } else {\n    return 0;\n  }\n}"
                }
              ],
              "hints": [
                {
                  "title": "Hint",
                  "content": "1. Syntax of calling a function and storing its return value in a variable: `const varName = functionName(arg1, arg2...)`.\n2. Because the cents are returned in string format from `getCents()`, we must use the equality operator `==` instead of the strict equality operator `===`.\n3. Use a `return` statement to return a value from a function.\n"
                }
              ]
            }
          },
          {
            "title": "Step 3",
            "id": 107607,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Jetzt, da wir unsere beiden Hilfsfunktionen erstellt haben, lass uns die Funktion schreiben, um die Gesamtsumme des Belegs zu berechnen, unter Berücksichtigung aller anwendbaren Rabatte.\n\n1. Deklariere eine Funktion `calculateTotal`, die einen Parameter `receipt` annimmt. Genau wie die Funktion `getsDiscount` wird der Parameter `receipt` Arrays enthalten, die die Belege darstellen.\n2. Initialisiere innerhalb der Funktion zwei Variablen `total` und `totalSavings` mit 0. `total` wird den Gesamtbetrag nach Rabatt speichern und `totalSavings` wird den insgesamt gesparten Betrag nach Rabatt speichern.\n3. Rufe die Funktion `calculateTotal()` am Ende der Datei `index.js` auf, damit wir die Ausgaben verfolgen können. Übergebe `receipt` als Wert.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "index.js",
                  "codeLanguage": "javascript",
                  "content": "const receipt = [21.99, 10.67, 18.50];\n\nfunction getCents(price) {\n  const splitPrice = price.toString().split(\".\");\n  return splitPrice[1];\n}\n\nfunction getsDiscount(rec) {\n  let total = 0;\n  for (let i = 0; i < rec.length; i++) {\n    total += rec[i];\n  }\n  if (total > 50) {\n    return true;\n  } else {\n    return false;\n  }\n}\n\nfunction findDiscount(price) {\n  const cents = getCents(price);\n  if (cents == 67) {\n    return 0.3;\n  } else if (cents == 95) {\n    return 0.4;\n  } else if (cents == 99) {\n    return 0.5;\n  } else {\n    return 0;\n  }\n}",
                  "solvedContent": "const receipt = [21.99, 10.67, 18.50];\n\nfunction getCents(price) {\n  const splitPrice = price.toString().split(\".\");\n  return splitPrice[1];\n}\n\nfunction getsDiscount(rec) {\n  let total = 0;\n  for (let i = 0; i < rec.length; i++) {\n    total += rec[i];\n  }\n  if (total > 50) {\n    return true;\n  } else {\n    return false;\n  }\n}\n\nfunction findDiscount(price) {\n  const cents = getCents(price);\n  if (cents == 67) {\n    return 0.3;\n  } else if (cents == 95) {\n    return 0.4;\n  } else if (cents == 99) {\n    return 0.5;\n  } else {\n    return 0;\n  }\n}\n\nfunction calculateTotal(receipt) {\n  let total = 0;\n  let totalSavings = 0;\n}\ncalculateTotal(receipt);"
                }
              ],
              "hints": [
                {
                  "title": "Hint",
                  "content": "Use `let` to initialize `total` and `totalSavings` since the values of the variables will change depending on the prices."
                }
              ]
            }
          },
          {
            "title": "Step 4",
            "id": 107608,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Als nächstes schreiben wir eine `for`-Schleife, um durch das `receipt`-Array zu iterieren und die Originalpreise zu erhalten.\n\n1. Schreibe nach den Variablendeklarationen eine `for`-Schleife, die eine Zählvariable verwendet, um durch die `receipt`-Elemente zu iterieren.\n2. Speichere dann innerhalb des Schleifenkörpers das aktuelle `receipt`-Element in einer Variablen namens `originalPrice`.\n3. Um zu überprüfen, ob die Schleife korrekt durch das `receipt`-Array iteriert, gib den Wert von `originalPrice` innerhalb der Schleife aus. Die Ausgabe sollte wie das unten gegebene Snippet aussehen.\n\n```javascript\n21.99\n10.67\n18.5\n```",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "index.js",
                  "codeLanguage": "javascript",
                  "content": "const receipt = [21.99, 10.67, 18.50];\n\nfunction getCents(price) {\n  const splitPrice = price.toString().split(\".\");\n  return splitPrice[1];\n}\n\nfunction getsDiscount(rec) {\n  let total = 0;\n  for (let i = 0; i < rec.length; i++) {\n    total += rec[i];\n  }\n  if (total > 50) {\n    return true;\n  } else {\n    return false;\n  }\n}\n\nfunction findDiscount(price) {\n  const cents = getCents(price);\n  if (cents == 67) {\n    return 0.3;\n  } else if (cents == 95) {\n    return 0.4;\n  } else if (cents == 99) {\n    return 0.5;\n  } else {\n    return 0;\n  }\n}\n\nfunction calculateTotal(receipt) {\n  let total = 0;\n  let totalSavings = 0;\n}\ncalculateTotal(receipt);",
                  "solvedContent": "const receipt = [21.99, 10.67, 18.50];\n\nfunction getCents(price) {\n  const splitPrice = price.toString().split(\".\");\n  return splitPrice[1];\n}\n\nfunction getsDiscount(rec) {\n  let total = 0;\n  for (let i = 0; i < rec.length; i++) {\n    total += rec[i];\n  }\n  if (total > 50) {\n    return true;\n  } else {\n    return false;\n  }\n}\n\nfunction findDiscount(price) {\n  const cents = getCents(price);\n  if (cents == 67) {\n    return 0.3;\n  } else if (cents == 95) {\n    return 0.4;\n  } else if (cents == 99) {\n    return 0.5;\n  } else {\n    return 0;\n  }\n}\n\nfunction calculateTotal(receipt) {\n  let total = 0;\n  let totalSavings = 0;\n  for (let i = 0; i < receipt.length; i++) {\n    const originalPrice = receipt[i];\n    console.log(originalPrice);\n  }\n}\ncalculateTotal(receipt);"
                }
              ],
              "hints": [
                {
                  "title": "Hint",
                  "content": "1. To access the current element of an array based on the iteration, you can use `array[counter]`. For example, if the counter variable is `i`, the current element of the `arr` array would be `arr[i]` in a loop.\n2. Start the `for` loop's counter with 0 since an array's index starts from 0."
                }
              ]
            }
          },
          {
            "title": "Step 5",
            "id": 107609,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Als nächstes schreiben wir die Logik, um einen Rabatt auf jeden Preis anzuwenden. Wir schreiben eine `if`-Anweisung, die überprüft, ob die Funktion `getsDiscount()` `true` oder `false` zurückgibt (denk daran, dass zusätzliche Artikelrabatte nur gelten, wenn der Kunde über 50 $ ausgibt).\n\n1. Entferne die Anweisung, die `originalPrice` in der Konsole protokolliert, da wir sie nicht mehr benötigen.\n2. Schreibe eine `if`-Anweisung, die das Ergebnis der Funktion `getsDiscount()` als Bedingung verwendet.\n3. Wenn `getsDiscount(receipt)` `true` zurückgibt, deklariere dann eine Variable `discountRate`.\n4. Die Variable `discountRate` sollte das Ergebnis des Aufrufs der Funktion `findDiscount()` mit der Variable `originalPrice` als Parameter speichern.\n5. Ähnlich wie beim ursprünglichen Preis, zeige `discountRate` in der Konsole innerhalb der Bedingung an, um zu überprüfen, ob es richtig funktioniert. Die Ausgabe sollte so aussehen:\n\n```javascript\n0.5\n0.3\n0\n```",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "index.js",
                  "codeLanguage": "javascript",
                  "content": "const receipt = [21.99, 10.67, 18.50];\n\nfunction getCents(price) {\n  const splitPrice = price.toString().split(\".\");\n  return splitPrice[1];\n}\n\nfunction getsDiscount(rec) {\n  let total = 0;\n  for (let i = 0; i < rec.length; i++) {\n    total += rec[i];\n  }\n  if (total > 50) {\n    return true;\n  } else {\n    return false;\n  }\n}\n\nfunction findDiscount(price) {\n  const cents = getCents(price);\n  if (cents == 67) {\n    return 0.3;\n  } else if (cents == 95) {\n    return 0.4;\n  } else if (cents == 99) {\n    return 0.5;\n  } else {\n    return 0;\n  }\n}\n\nfunction calculateTotal(receipt) {\n  let total = 0;\n  let totalSavings = 0;\n  for (let i = 0; i < receipt.length; i++) {\n    const originalPrice = receipt[i];\n    console.log(originalPrice);\n  }\n}\n\ncalculateTotal(receipt);",
                  "solvedContent": "const receipt = [21.99, 10.67, 18.50];\n\nfunction getCents(price) {\n  const splitPrice = price.toString().split(\".\");\n  return splitPrice[1];\n}\n\nfunction getsDiscount(rec) {\n  let total = 0;\n  for (let i = 0; i < rec.length; i++) {\n    total += rec[i];\n  }\n  if (total > 50) {\n    return true;\n  } else {\n    return false;\n  }\n}\n\nfunction findDiscount(price) {\n  const cents = getCents(price);\n  if (cents == 67) {\n    return 0.3;\n  } else if (cents == 95) {\n    return 0.4;\n  } else if (cents == 99) {\n    return 0.5;\n  } else {\n    return 0;\n  }\n}\n\nfunction calculateTotal(receipt) {\n  let total = 0;\n  let totalSavings = 0;\n  for (let i = 0; i < receipt.length; i++) {\n    const originalPrice = receipt[i];\n    if (getsDiscount(receipt)) {\n      const discountRate = findDiscount(originalPrice);\n      console.log(discountRate);\n    }\n  }\n}\n\ncalculateTotal(receipt);"
                }
              ],
              "hints": [
                {
                  "title": "Hint",
                  "content": "Syntax of calling a function and storing it in a variable : `const varName = functionName(arg1, arg2...)`."
                }
              ]
            }
          },
          {
            "title": "Step 6",
            "id": 107610,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Jetzt haben wir eine Schleife, die durch jeden Preis im `receipt`-Array iteriert und den Rabattfaktor findet. Wir werden nun die Ersparnisse für jeden Artikel berechnen, indem wir den Preis mit dem Rabattfaktor multiplizieren. Schließlich summieren wir jeden Ersparnisbetrag in der `totalSavings`-Variable, die wir zuvor erstellt haben, damit wir diese Information später dem Benutzer anzeigen können.\n\n1. Entferne die Anweisung, die `discountRate` in der Konsole protokolliert, da wir sie nicht mehr benötigen.\n2. Unmittelbar nach der Deklaration der `discountRate`-Variable deklariere eine Variable namens `savings` und weise ihr das Ergebnis der Multiplikation von `originalPrice` mit `discountRate` zu.\n3. Füge als Nächstes `savings` zu `totalSavings` hinzu und speichere die resultierende Summe in der `totalSavings`-Variable.\n4. Gib innerhalb der Bedingung `totalSavings` in der Konsole aus, um zu überprüfen, ob alles funktioniert. Hier ist ein Ausschnitt der Ausgabe:\n\n```javascript\n10.995\n14.196\n14.196\n```",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "index.js",
                  "codeLanguage": "javascript",
                  "content": "const receipt = [21.99, 10.67, 18.50];\n\nfunction getCents(price) {\n  const splitPrice = price.toString().split(\".\");\n  return splitPrice[1];\n}\n\nfunction getsDiscount(rec) {\n  let total = 0;\n  for (let i = 0; i < rec.length; i++) {\n    total += rec[i];\n  }\n  if (total > 50) {\n    return true;\n  } else {\n    return false;\n  }\n}\n\nfunction findDiscount(price) {\n  const cents = getCents(price);\n  if (cents == 67) {\n    return 0.3;\n  } else if (cents == 95) {\n    return 0.4;\n  } else if (cents == 99) {\n    return 0.5;\n  } else {\n    return 0;\n  }\n}\n\nfunction calculateTotal(receipt) {\n  let total = 0;\n  let totalSavings = 0;\n  for (let i = 0; i < receipt.length; i++) {\n    const originalPrice = receipt[i];\n    if (getsDiscount(receipt)) {\n      const discountRate = findDiscount(originalPrice);\n      console.log(discountRate);\n    }\n  }\n}\ncalculateTotal(receipt);",
                  "solvedContent": "const receipt = [21.99, 10.67, 18.50];\n\nfunction getCents(price) {\n  const splitPrice = price.toString().split(\".\");\n  return splitPrice[1];\n}\n\nfunction getsDiscount(rec) {\n  let total = 0;\n  for (let i = 0; i < rec.length; i++) {\n    total += rec[i];\n  }\n  if (total > 50) {\n    return true;\n  } else {\n    return false;\n  }\n}\n\nfunction findDiscount(price) {\n  const cents = getCents(price);\n  if (cents == 67) {\n    return 0.3;\n  } else if (cents == 95) {\n    return 0.4;\n  } else if (cents == 99) {\n    return 0.5;\n  } else {\n    return 0;\n  }\n}\n\nfunction calculateTotal(receipt) {\n  let total = 0;\n  let totalSavings = 0;\n  for (let i = 0; i < receipt.length; i++) {\n    const originalPrice = receipt[i];\n    if (getsDiscount(receipt)) {\n      const discountRate = findDiscount(originalPrice);\n      const savings = originalPrice * discountRate;\n      totalSavings += savings;\n      console.log(totalSavings);\n    }\n  }\n}\ncalculateTotal(receipt);"
                }
              ],
              "hints": [
                {
                  "title": "Hint",
                  "content": "Use arithmetic operators (`+`, `-`, `*`, `/`) to perform arithmetic operations on variables."
                }
              ]
            }
          },
          {
            "title": "Step 7",
            "id": 108070,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Jetzt, da wir die Ersparnisse berechnet haben, lass uns jeden reduzierten Preis berechnen. Zuerst ziehen wir die im vorherigen Schritt berechneten Ersparnisse vom `originalPrice` ab. Dann summieren wir diese reduzierten Preise in der `total`-Variable, die wir zuvor erstellt haben, was uns die Gesamtsumme für den Kunden gibt.\n\n1. Entferne die Anweisung, die `totalSavings` in der Konsole protokolliert, da wir sie nicht mehr benötigen.\n2. Erstelle direkt nach der Operation zur Summierung von `totalSavings` eine Variable namens `discountedPrice`, um die Differenz zwischen den Variablen `originalPrice` und `savings` zu speichern.\n3. Füge als Nächstes den `discountedPrice` zur `total`-Variable hinzu und speichere dieses Ergebnis in der `total`-Variable.\n4. Zeige `total` in der Konsole innerhalb der Bedingung an. Die Ausgabe sollte folgendermaßen aussehen:\n\n```javascript\n10.995\n18.464\n36.964\n```",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "index.js",
                  "codeLanguage": "javascript",
                  "content": "const receipt = [21.99, 10.67, 18.50];\n\nfunction getCents(price) {\n  const splitPrice = price.toString().split(\".\");\n  return splitPrice[1];\n}\n\nfunction getsDiscount(rec) {\n  let total = 0;\n  for (let i = 0; i < rec.length; i++) {\n    total += rec[i];\n  }\n  if (total > 50) {\n    return true;\n  } else {\n    return false;\n  }\n}\n\nfunction findDiscount(price) {\n  const cents = getCents(price);\n  if (cents == 67) {\n    return 0.3;\n  } else if (cents == 95) {\n    return 0.4;\n  } else if (cents == 99) {\n    return 0.5;\n  } else {\n    return 0;\n  }\n}\n\nfunction calculateTotal(receipt) {\n  let total = 0;\n  let totalSavings = 0;\n  for (let i = 0; i < receipt.length; i++) {\n    const originalPrice = receipt[i];\n    if (getsDiscount(receipt)) {\n      const discountRate = findDiscount(originalPrice);\n      const savings = originalPrice * discountRate;\n      totalSavings += savings;\n      console.log(totalSavings);\n    }\n  }\n}\ncalculateTotal(receipt);",
                  "solvedContent": "const receipt = [21.99, 10.67, 18.50];\n\nfunction getCents(price) {\n  const splitPrice = price.toString().split(\".\");\n  return splitPrice[1];\n}\n\nfunction getsDiscount(rec) {\n  let total = 0;\n  for (let i = 0; i < rec.length; i++) {\n    total += rec[i];\n  }\n  if (total > 50) {\n    return true;\n  } else {\n    return false;\n  }\n}\n\nfunction findDiscount(price) {\n  const cents = getCents(price);\n  if (cents == 67) {\n    return 0.3;\n  } else if (cents == 95) {\n    return 0.4;\n  } else if (cents == 99) {\n    return 0.5;\n  } else {\n    return 0;\n  }\n}\n\nfunction calculateTotal(receipt) {\n  let total = 0;\n  let totalSavings = 0;\n  for (let i = 0; i < receipt.length; i++) {\n    const originalPrice = receipt[i];\n    if (getsDiscount(receipt)) {\n      const discountRate = findDiscount(originalPrice);\n      const savings = originalPrice * discountRate;\n      totalSavings += savings;\n      const discountedPrice = originalPrice - savings;\n      total += discountedPrice;\n      console.log(total);\n    }\n  }\n}\ncalculateTotal(receipt);"
                }
              ],
              "hints": [
                {
                  "title": "Hint",
                  "content": "Use arithmetic operators (`+`, `-`, `*`, `/`) to perform arithmetic operations on variables."
                }
              ]
            }
          },
          {
            "title": "Step 8",
            "id": 108071,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Wir müssen nun die Logik schreiben, wenn der Kunde keinen Rabatt erhält. Es gibt keinen Rabattfaktor oder Einsparungen zu berechnen, daher können wir diese Preise einfach in der Variable `total` summieren.\n\n1. Entferne die Anweisung, die `total` innerhalb der `if`-Anweisung protokolliert.\n2. Schreibe eine `else`-Anweisung, die den `originalPrice` zur Variable `total` hinzufügt und dann dieses Ergebnis in der Variable `total` speichert.\n3. Zeige den Wert von `total` erneut innerhalb der `else`-Anweisung an.\n4. Mit dem aktuellen `receipt`-Array wird die `else`-Anweisung nicht ausgeführt. Daher werden wir dasselbe mit einem anderen Array ausführen, das es auslöst. Wir werden es später entfernen.\n    - Erstelle nach der Definition des `receipt`-Arrays ein weiteres Array namens `rec2`, das `[2.99, 1.46, 5.67]` speichert.\n    - Übergebe im Funktionsaufruf `calculateTotal` `rec2` als Wert anstelle von `receipt`.\n5. Die Ausgabe sollte folgendermaßen aussehen:\n\n```javascript\n2.99\n4.45\n10.120000000000001\n```",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "index.js",
                  "codeLanguage": "javascript",
                  "content": "const receipt = [21.99, 10.67, 18.50];\n\nfunction getCents(price) {\n  const splitPrice = price.toString().split(\".\");\n  return splitPrice[1];\n}\n\nfunction getsDiscount(rec) {\n  let total = 0;\n  for (let i = 0; i < rec.length; i++) {\n    total += rec[i];\n  }\n  if (total > 50) {\n    return true;\n  } else {\n    return false;\n  }\n}\n\nfunction findDiscount(price) {\n  const cents = getCents(price);\n  if (cents == 67) {\n    return 0.3;\n  } else if (cents == 95) {\n    return 0.4;\n  } else if (cents == 99) {\n    return 0.5;\n  } else {\n    return 0;\n  }\n}\n\nfunction calculateTotal(receipt) {\n  let total = 0;\n  let totalSavings = 0;\n  for (let i = 0; i < receipt.length; i++) {\n    const originalPrice = receipt[i];\n    if (getsDiscount(receipt)) {\n      const discountRate = findDiscount(originalPrice);\n      const savings = originalPrice * discountRate;\n      totalSavings += savings;\n      const discountedPrice = originalPrice - savings;\n      total += discountedPrice;\n      console.log(total);\n    }\n  }\n}\ncalculateTotal(receipt);",
                  "solvedContent": "const receipt = [21.99, 10.67, 18.50];\nconst rec2 = [2.99, 1.46, 5.67];\n\nfunction getCents(price) {\n  const splitPrice = price.toString().split(\".\");\n  return splitPrice[1];\n}\n\nfunction getsDiscount(rec) {\n  let total = 0;\n  for (let i = 0; i < rec.length; i++) {\n    total += rec[i];\n  }\n  if (total > 50) {\n    return true;\n  } else {\n    return false;\n  }\n}\n\nfunction findDiscount(price) {\n  const cents = getCents(price);\n  if (cents == 67) {\n    return 0.3;\n  } else if (cents == 95) {\n    return 0.4;\n  } else if (cents == 99) {\n    return 0.5;\n  } else {\n    return 0;\n  }\n}\n\nfunction calculateTotal(receipt) {\n  let total = 0;\n  let totalSavings = 0;\n  for (let i = 0; i < receipt.length; i++) {\n    const originalPrice = receipt[i];\n    if (getsDiscount(receipt)) {\n      const discountRate = findDiscount(originalPrice);\n      const savings = originalPrice * discountRate;\n      totalSavings += savings;\n      const discountedPrice = originalPrice - savings;\n      total += discountedPrice;\n    } else {\n      total += originalPrice;\n      console.log(total);\n    }\n  }\n}\ncalculateTotal(rec2);"
                }
              ],
              "hints": [
                {
                  "title": "Hint",
                  "content": "The syntax for `if-else` statement is:\n```javascript\nif(condition) {\n\n} else {\n\n}\n```"
                }
              ]
            }
          },
          {
            "title": "Step 9",
            "id": 107611,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Schließlich fügen wir eine `console.log` Anweisung hinzu, um sicherzustellen, dass unsere Logik korrekt funktioniert. Wir schreiben eine `if`-Anweisung am Ende des `if`-Blocks (aber immer noch innerhalb des `if`-Blocks), die überprüft, ob es einen Rabatt gibt. Wenn es einen gibt, zeigt das Programm die Ersparnisse im folgenden Format an:\n\n```javascript\nItem 1 Savings: $4.50\n```\n\n1. Entferne die Anweisung, die `total` innerhalb der `else`-Anweisung protokolliert.\n2. Entferne den Code zur Definition des `rec2` Arrays. Ändere auch im Funktionsaufruf von `calculateTotal` den Wert von `rec2` wieder zu `receipt`.\n3. Schreibe innerhalb des `if`-Blocks nach dem bestehenden Code eine weitere `if`-Anweisung, die überprüft, ob `discountRate` ungleich 0 ist.\n4. Wenn ungleich 0, dann protokolliere die Ersparnisse des Artikels gemäß dem obigen Formatbeispiel in der Konsole.\n5. Um die Werte auf zwei Nachkommastellen zu formatieren, füge `.toFixed(2)` am Ende von `savings` hinzu.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "index.js",
                  "codeLanguage": "javascript",
                  "content": "const receipt = [21.99, 10.67, 18.50];\nconst rec2 = [2.99, 1.46, 5.67];\n\nfunction getCents(price) {\n  const splitPrice = price.toString().split(\".\");\n  return splitPrice[1];\n}\n\nfunction getsDiscount(rec) {\n  let total = 0;\n  for (let i = 0; i < rec.length; i++) {\n    total += rec[i];\n  }\n  if (total > 50) {\n    return true;\n  } else {\n    return false;\n  }\n}\n\nfunction findDiscount(price) {\n  const cents = getCents(price);\n  if (cents == 67) {\n    return 0.3;\n  } else if (cents == 95) {\n    return 0.4;\n  } else if (cents == 99) {\n    return 0.5;\n  } else {\n    return 0;\n  }\n}\n\nfunction calculateTotal(receipt) {\n  let total = 0;\n  let totalSavings = 0;\n  for (let i = 0; i < receipt.length; i++) {\n    const originalPrice = receipt[i];\n    if (getsDiscount(receipt)) {\n      const discountRate = findDiscount(originalPrice);\n      const savings = originalPrice * discountRate;\n      totalSavings += savings;\n      const discountedPrice = originalPrice - savings;\n      total += discountedPrice;\n    } else {\n      total += originalPrice;\n      console.log(total);\n    }\n  }\n}\ncalculateTotal(rec2);",
                  "solvedContent": "const receipt = [21.99, 10.67, 18.50];\n\nfunction getCents(price) {\n  const splitPrice = price.toString().split(\".\");\n  return splitPrice[1];\n}\n\nfunction getsDiscount(rec) {\n  let total = 0;\n  for (let i = 0; i < rec.length; i++) {\n    total += rec[i];\n  }\n  if (total > 50) {\n    return true;\n  } else {\n    return false;\n  }\n}\n\nfunction findDiscount(price) {\n  const cents = getCents(price);\n  if (cents == 67) {\n    return 0.3;\n  } else if (cents == 95) {\n    return 0.4;\n  } else if (cents == 99) {\n    return 0.5;\n  } else {\n    return 0;\n  }\n}\n\nfunction calculateTotal(receipt) {\n  let total = 0;\n  let totalSavings = 0;\n  for (let i = 0; i < receipt.length; i++) {\n    const originalPrice = receipt[i];\n    if (getsDiscount(receipt)) {\n      const discountRate = findDiscount(originalPrice);\n      const savings = originalPrice * discountRate;\n      totalSavings += savings;\n      const discountedPrice = originalPrice - savings;\n      total += discountedPrice;\n      if (discountRate !== 0) {\n        console.log(\"Item \" + i + \" Savings: $\" + savings.toFixed(2));\n      }\n    } else {\n      total += originalPrice;\n    }\n  }\n}\ncalculateTotal(receipt);"
                }
              ],
              "hints": [
                {
                  "title": "Hint",
                  "content": "Use `console.log` to display the result in the console."
                }
              ]
            }
          },
          {
            "title": "Step 10",
            "id": 107612,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Beende das Programm, indem du eine Nachricht an den Benutzer protokollierst, die seine Ersparnisse zusammenfasst. Sobald deine Änderungen abgeschlossen sind, rufe die Funktion am Ende des Programms auf!\n\n1. Schreibe eine `console.log` Anweisung am Ende der `calculateTotal` Funktion, die die Variable `totalSavings` in einem Format ähnlich dem untenstehenden Beispiel protokolliert.\n2. Schreibe eine weitere `console.log` Anweisung am Ende der `calculateTotal` Funktion, die die Variable `total` in einem Format ähnlich dem untenstehenden Beispiel protokolliert.\n3. Rufe die `calculateTotal()` Funktion am Ende der `index.js` Datei auf.\n\n```javascript\nTotal Saved: $16.56\nTotal Post-Discount: $48.56\n```",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "index.js",
                  "codeLanguage": "javascript",
                  "content": "const receipt = [21.99, 10.67, 18.50];\n\nfunction getCents(price) {\n  const splitPrice = price.toString().split(\".\");\n  return splitPrice[1];\n}\n\nfunction getsDiscount(rec) {\n  let total = 0;\n  for (let i = 0; i < rec.length; i++) {\n    total += rec[i];\n  }\n  if (total > 50) {\n    return true;\n  } else {\n    return false;\n  }\n}\n\nfunction findDiscount(price) {\n  const cents = getCents(price);\n  if (cents == 67) {\n    return 0.3;\n  } else if (cents == 95) {\n    return 0.4;\n  } else if (cents == 99) {\n    return 0.5;\n  } else {\n    return 0;\n  }\n}\n\nfunction calculateTotal(receipt) {\n  let total = 0;\n  let totalSavings = 0;\n  for (let i = 0; i < receipt.length; i++) {\n    const originalPrice = receipt[i];\n    if (getsDiscount(receipt)) {\n      const discountRate = findDiscount(originalPrice);\n      const savings = originalPrice * discountRate;\n      totalSavings += savings;\n      const discountedPrice = originalPrice - savings;\n      total += discountedPrice;\n      if (discountRate !== 0) {\n        console.log(\"Item \" + i + \" Savings: $\" + savings.toFixed(2));\n      }\n    } else {\n      total += originalPrice;\n    }\n  }\n}\ncalculateTotal(receipt);",
                  "solvedContent": "const receipt = [21.99, 10.67, 18.50];\n\nfunction getCents(price) {\n  const splitPrice = price.toString().split(\".\");\n  return splitPrice[1];\n}\n\nfunction getsDiscount(rec) {\n  let total = 0;\n  for (let i = 0; i < rec.length; i++) {\n    total += rec[i];\n  }\n  if (total > 50) {\n    return true;\n  } else {\n    return false;\n  }\n}\n\nfunction findDiscount(price) {\n  const cents = getCents(price);\n  if (cents == 67) {\n    return 0.3;\n  } else if (cents == 95) {\n    return 0.4;\n  } else if (cents == 99) {\n    return 0.5;\n  } else {\n    return 0;\n  }\n}\n\nfunction calculateTotal(receipt) {\n  let total = 0;\n  let totalSavings = 0;\n  for (let i = 0; i < receipt.length; i++) {\n    const originalPrice = receipt[i];\n    if (getsDiscount(receipt)) {\n      const discountRate = findDiscount(originalPrice);\n      const savings = originalPrice * discountRate;\n      totalSavings += savings;\n      const discountedPrice = originalPrice - savings;\n      total += discountedPrice;\n      if (discountRate !== 0) {\n        console.log(\"Item \" + i + \" Savings: $\" + savings.toFixed(2));\n      }\n    } else {\n      total += originalPrice;\n    }\n  }\n  console.log(\"Total Saved: $\" + totalSavings.toFixed(2));\n  console.log(\"Total Post-Discount: $\" + total.toFixed(2));\n}\ncalculateTotal(receipt);"
                }
              ],
              "hints": [
                {
                  "title": "Hint",
                  "content": "Use `console.log` to display the result in the console."
                }
              ]
            }
          }
        ]
      }
    ]
  }
}