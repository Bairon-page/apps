{
  "tutorial": {
    "id": 2651,
    "version": 4,
    "type": "challenges",
    "isNew": false,
    "codeLanguage": "python",
    "title": "Ablaufsteuerung",
    "descriptionContent": "Herausforderungsübungen basierend auf Kontrollfluss",
    "shortDescriptionContent": "",
    "showInTrack": true,
    "iconBanner": null,
    "chapters": [
      {
        "id": 14664,
        "title": "Gelesene und ungelesene Nachrichten",
        "type": "challengeLevel0",
        "lessons": [
          {
            "title": "Read and Unread Notifications",
            "id": 129692,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Wir werden die Anzahl der gelesenen oder ungelesenen Benachrichtigungen drucken, die ein Benutzer erhalten hat.\n\n1. Wenn `unread` nicht `0` ist, drucke `You have {unread} unread messages`. Verwende ein f-String, um den Wert von `unread` innerhalb des Strings anzuzeigen.\n2. Andernfalls drucke `No unread messages. Check your {read} read messages`. Verwende ein f-String, um den Wert von `read` innerhalb des Strings anzuzeigen.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "read = 5\r\nunread = 4",
                  "solvedContent": "read = 5\r\nunread = 4\r\nif unread != 0:\r\n print(f\"You have {unread} unread messages\")\r\nelse:\r\n print(f\"No unread messages. Check your {read} read messages\")"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 14665,
        "title": "Passwortprüfer",
        "type": "challengeLevel0",
        "lessons": [
          {
            "title": "Password Checker",
            "id": 129693,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Lass uns überprüfen, ob ein Passwort korrekt ist, indem wir Python verwenden.\n\n1. Wenn `actualPass` gleich `enteredPass` ist, drucke `Login successful`.\n2. Andernfalls drucke `Incorrect credentials. Please try again`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "actualPass = \"abc123\"\r\nenteredPass = \"Abc123\"",
                  "solvedContent": "actualPass = \"abc123\"\r\nenteredPass = \"Abc123\"\r\nif actualPass == enteredPass:\r\n print(\"Login successful\")\r\nelse:\r\n print(\"Incorrect credentials. Please try again\")"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 14666,
        "title": "Eingangskontrolle",
        "type": "challengeLevel0",
        "lessons": [
          {
            "title": "Entry Check",
            "id": 129694,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Der Eintritt in bestimmte Einrichtungen wie einen Club hängt davon ab, ob man über der Altersgrenze liegt und eine Reservierung hat. Lass uns ein Python-Programm schreiben, um zu überprüfen, ob eine Person eintreten kann.\n\n1. Wenn `age` größer oder gleich `18` ist und `hasReservation` `True` ist, setze das `result` auf `True`.\n2. Gib `Entry granted: ` gefolgt vom Ergebnis aus. Zum Beispiel, wenn das Ergebnis `False` ist, dann gib `Entry granted: False` aus.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "age = 21\r\nhasReservation = True\r\nresult = False",
                  "solvedContent": "age = 21\r\nhasReservation = True\r\nresult = False\r\nif age >= 18 and hasReservation:\r\n result = True\r\n\r\nprint(f\"Entry granted: {result}\")"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 14667,
        "title": "Lagerbestand des Hemdgeschäfts",
        "type": "challengeLevel0",
        "lessons": [
          {
            "title": "Shirt Store Inventory",
            "id": 129695,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Erstelle ein einfaches Inventarprogramm für ein Hemdgeschäft. Das Programm sollte die Variable `sales` um 1 erhöhen und die Variable `inventory` um 1 verringern, wenn ein Hemd verkauft wird.\n\n1. Erhöhe den Wert der Variable `sales` zwischen der Variableninitialisierung und den print-Anweisungen um `1` mit einem Operator.\n2. Verringere den Wert der Variable `inventory` um `1` mit einem Operator.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "sales = 0\r\ninventory = 10\r\n\r\n\r\nprint(f'Sales: {sales}')\r\nprint(f'Inventory: {inventory}')",
                  "solvedContent": "sales = 0\r\ninventory = 10\r\nsales += 1\r\ninventory -= 1\r\nprint(f'Sales: {sales}')\r\nprint(f'Inventory: {inventory}')"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 14668,
        "title": "Stoppe den Bot",
        "type": "challengeLevel0",
        "lessons": [
          {
            "title": "Stop the Bot",
            "id": 129696,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Erstelle ein Programm, das uns dreimal daran erinnert, den Bot zu stoppen.\n\n1. Schreibe eine `while` Schleife, die `\"Reminder: Stop the bot!\"` ausgibt, wenn `reminder_count` kleiner als `3` ist.\n2. Erhöhe nach der Ausgabe den Wert von `reminder_count` um `1`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "reminder_count = 0\r\n\r\nprint(\"Reminder: Stop the bot!\")",
                  "solvedContent": "reminder_count = 0\r\nwhile reminder_count < 3:\r\n print(\"Reminder: Stop the bot!\")\r\n reminder_count += 1"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 14669,
        "title": "Schleifenüberprüfung",
        "type": "challengeLevel0",
        "lessons": [
          {
            "title": "Loop Check",
            "id": 129697,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Wir haben eine `print`-Anweisung geschrieben, um uns mitzuteilen, dass das Programm die Schleife betreten hat. Allerdings läuft das Programm endlos, behebe es, bevor es unseren Computer abstürzt!\n\n1. Ändere in der `while`-Schleife den Wert der Variable `loop`, sodass `\"Entered the loop!\"` nur einmal gedruckt wird.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "loop = True\r\nwhile loop:\r\n print(\"Entered the loop!\")\r\n \r\n",
                  "solvedContent": "loop = True\r\nwhile loop:\r\n print(\"Entered the loop!\")\r\n loop = False"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 13091,
        "title": "Blackjack",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "Blackjack",
            "id": 118060,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Wir werden eine einfache Version von BlackJack in Python programmieren. In dieser Version gibt es zwei Spieler, die jeweils zwei Karten erhalten.\n\n`p1card1` und `p1card2` speichern die Kartenwerte für Spieler eins.\n\n`p2card1` und `p2card2` speichern die Kartenwerte für Spieler zwei.\n\n`p1check` speichert die Summe der Karten von Spieler eins, und `p2check` speichert dasselbe für Spieler zwei.\n\n1. Zuerst überprüfen wir, ob irgendwelche Werte gleich oder größer als `21` sind.\n    - Wenn `p1check` oder `p2check` `21` ist, setze den `status` auf `blackjack`.\n    - Andernfalls, wenn `p1check` größer als `21` ist, setze den `status` auf `P1 lose`.\n    - Andernfalls, wenn `p2check` größer als `21` ist, setze den `status` auf `P2 lose`.\n    - Andernfalls drucke `Checking player cards...`.\n2. Zweitens vergleichen wir beide Werte.\n    - Wenn `p1check` größer als `p2check` und kleiner oder gleich `21` ist, setze den `winner` auf `P1`.\n    - Andernfalls, wenn `p2check` größer als `p1check` und kleiner oder gleich `21` ist, setze den `winner` auf `P2`.\n    - Andernfalls drucke `Draw`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "p1card1 = 10\r\np1card2 = 1\r\np2card1 = 10\r\np2card2 = 11\r\nstatus = \"\"\r\nwinner = \"\"\r\np1check = p1card1 + p1card2\r\np2check = p2card1 + p2card2\r\nprint(status)\r\nprint(\"Winner: \" + winner)",
                  "solvedContent": "p1card1 = 10\r\np1card2 = 1\r\np2card1 = 10\r\np2card2 = 11\r\nstatus = \"\"\r\nwinner = \"\"\r\np1check = p1card1 + p1card2\r\np2check = p2card1 + p2card2\r\n\r\nif p1check == 21 or p2check == 21:\r\n status = \"blackjack\"\r\nelif p1check > 21:\r\n status = \"P1 lose\"\r\nelif p2check > 21:\r\n status = \"P2 lose\"\r\nelse:\r\n print(\"Checking player cards...\")\r\n\r\nif p1check > p2check and p1check <= 21:\r\n winner = \"P1\"\r\nelif p1check < p2check and p2check <= 21:\r\n winner = \"P2\"\r\nelse:\r\n print(\"Draw\")\r\n\r\nprint(status)\r\nprint(\"Winner: \" + winner)"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 13094,
        "title": "Speicherüberprüfung",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "Storage check",
            "id": 118063,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Wir schreiben ein Python-Programm, das eine Nachricht basierend auf dem Speicherplatz und der eingegebenen PIN anzeigt.\n\n1. Wenn `stored` kleiner als `limit` ist und `enteredPin` gleich `correctPin` ist, drucke `{stored} GB cloud storage used. Limit is {limit} GB`. Verwende ein f-String, um den Wert von `stored` und `limit` anzuzeigen.\n2. Wenn `stored` gleich `limit` ist und `enteredPin` gleich `correctPin` ist, drucke `Cloud Storage limit reached`.\n3. Wenn `enteredPin` nicht gleich `correctPin` ist, drucke `Pin not correct`.\n4. Andernfalls drucke `System error`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "stored = 40\r\nlimit = 50\r\nenteredPin = 4351\r\ncorrectPin = 4351",
                  "solvedContent": "stored = 40\r\nlimit = 50\r\nenteredPin = 4351\r\ncorrectPin = 4351\r\nif stored < limit and enteredPin == correctPin:\r\n print(f\"{stored} GB cloud storage used. Limit is {limit} GB\")\r\nelif stored == limit and enteredPin == correctPin:\r\n print(\"Cloud Storage limit reached\")\r\nelif enteredPin != correctPin:\r\n print(\"Pin not correct\")\r\nelse:\r\n print(\"System error\")"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 13093,
        "title": "Gesundheitsbericht",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "Health report",
            "id": 118062,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Wir werden ein Python-Programm schreiben, um den Blutdruck (BP) zu überprüfen und das Ergebnis entsprechend auszugeben.\n\n1. Wenn `bpUpper` gleich `120` und `bpLower` gleich `80` ist, setze das `result` auf `normal`.\n2. Wenn `bpUpper` kleiner als `120` oder `bpLower` kleiner als `80` ist, setze das `result` auf `low`.\n3. Andernfalls setze das `result` auf `high`.\n4. Gib das Ergebnis außerhalb der Bedingungsblöcke aus.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "bpUpper = 118\r\nbpLower = 70\r\nresult = \"\"",
                  "solvedContent": "bpUpper = 118\r\nbpLower = 70\r\nresult = \"\"\r\nif bpUpper == 120 and bpLower == 80:\r\n result = \"normal\"\r\nelif bpUpper < 120 or bpLower < 80:\r\n result = \"low\"\r\nelse:\r\n result = \"high\"\r\n\r\nprint(\"BP \" + result)"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 13090,
        "title": "Automatische Beleuchtung",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "Automatic lighting",
            "id": 118059,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Wir werden ein Python-Programm schreiben, um ein automatisches Beleuchtungssystem zu erstellen.\n\n1. Wenn ein Objekt vorhanden ist und das Licht erhöht wird, dann setze die `brightness` auf `full`.\n2. Wenn ein Objekt vorhanden ist, aber das Licht nicht erhöht wird, dann setze die `brightness` auf `dim`.\n3. Andernfalls setze die Helligkeit auf `off`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "objectPresent = True\r\nincreasedLight = False\r\nprint(\"Light brightness: \" + brightness)",
                  "solvedContent": "objectPresent = True\r\nincreasedLight = False\r\nbrightness = \"\"\r\nif objectPresent and increasedLight:\r\n brightness = \"full\"\r\nelif objectPresent and not increasedLight:\r\n brightness = \"dim\"\r\nelse:\r\n brightness = \"off\"\r\n\r\nprint(\"Light brightness: \" + brightness)"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 13089,
        "title": "Batterieprüfer",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "Battery checker",
            "id": 118058,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Unser Telefon zeigt verschiedene Nachrichten basierend auf dem Prozentsatz des Telefonakkus an. Lass uns ein Python-Programm schreiben, um Benutzer über ihren Akkustand zu informieren.\n\n1. Wenn `percentage` weniger als `10` ist, drucke `Phone will shut down soon`.\n2. Wenn `percentage` größer oder gleich `10` und kleiner als `20` ist, drucke `Low Battery`.\n3. Andernfalls drucke den Prozentwert gefolgt von `%`. Zum Beispiel, wenn der Prozentsatz `61` ist, drucke `61%`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "percentage = 49",
                  "solvedContent": "percentage = 49\r\nif percentage < 10:\r\n print(\"Phone will shut down soon\")\r\nelif percentage >= 10 and percentage < 20:\r\n print(\"Low Battery\")\r\nelse:\r\n print(f\"{percentage}%\")"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 13086,
        "title": "Steuerrechner",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "Tax calculator",
            "id": 118055,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Lass uns ein Python-Programm schreiben, das die Steuer berechnet.\n\n1. Wenn das `income` weniger als `40000` ist, beträgt die Steuer `income * 0.1`.\n2. Wenn das `income` größer oder gleich `40000` und weniger als `170000` ist, beträgt die Steuer `income * 0.22`.\n3. Wenn das `income` größer oder gleich `170000` und weniger als `540000` ist, beträgt die Steuer `income * 0.32`.\n4. Andernfalls beträgt die Steuer `income * 0.37`.\n5. Nach den Bedingungen, gib den `tax`-Wert aus.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "income = 44000\r\ntax = 0",
                  "solvedContent": "income = 44000\r\ntax = 0\r\nif income < 40000:\r\n tax = income * 0.1\r\nelif income >= 40000 and income < 170000:\r\n tax = income * 0.22\r\nelif income >= 170000 and income < 540000:\r\n tax = income * 0.32\r\nelse:\r\n tax = income * 0.37\r\n\r\nprint(f\"Tax: {tax}\")"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 13815,
        "title": "For in Range",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "For in range",
            "id": 123251,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Wir erstellen eine Uhr, die jede Stunde läutet.\n\n1. Code eine `for`-Schleife mit `range()`, die 12 Mal für die 12 Stunden auf der Uhr durchläuft.\n2. Innerhalb der `for`-Schleife, drucke `\"Ring\"`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "",
                  "solvedContent": "for i in range(12):\r\n print(\"Ring\")"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 13814,
        "title": "While-Schleife",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "While loop",
            "id": 123250,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Erstelle ein Programm für eine Achterbahnfahrt. Es sind nur 10 Plätze verfügbar, wir möchten ein Programm, das die Anzahl der Personen auf der Achterbahn ausgibt, um sicherzustellen, dass sie nicht überladen ist.\n\n1. Schreibe die Bedingung für die while-Schleife so, dass der Wert der Variablen `counter` von `1` bis `10` ausgegeben wird.\n2. Erhöhe nach dem Ausdrucken des Wertes der Variablen `counter` ihren Wert um `1` mit einem Operator.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "counter = 1\r\n\r\nwhile : \r\n  print(counter)\r\n",
                  "solvedContent": "counter = 1\r\n\r\nwhile counter <= 10: \r\n  print(counter)\r\n  counter += 1"
                }
              ],
              "hints": []
            }
          }
        ]
      }
    ]
  }
}