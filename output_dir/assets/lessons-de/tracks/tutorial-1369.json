{
  "tutorial": {
    "id": 1369,
    "version": 8,
    "type": "course",
    "isNew": false,
    "codeLanguage": "python",
    "title": "Funktionen als Ausdrücke",
    "descriptionContent": "Funktionsausdruck",
    "shortDescriptionContent": "",
    "showInTrack": true,
    "iconBanner": null,
    "chapters": [
      {
        "id": 9988,
        "title": "Funktion als Ausdrücke",
        "type": "practiceLevel1",
        "lessons": [
          {
            "title": "Function",
            "id": 89381,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Wir können eine Listenkomprehension verwenden, um eine neue Liste zu erstellen, indem wir eine Funktion wie <code>halve()</code> auf jedes Element einer bestehenden Liste wie <code>prices</code> anwenden.</p><code version=\"2\" codelang=\"python\" name=\"script.py\" visible-if=\"always\"><content><text value=\"prices = [\" /><text value=\"10\" class=\"number\" /><text value=\", \" /><text value=\"22\" class=\"number\" /><text value=\", \" /><text value=\"30\" class=\"number\" /><text value=\", \" /><text value=\"40\" class=\"number\" /><text value=\", \" /><text value=\"58\" class=\"number\" /><text value=\", \" /><text value=\"62\" class=\"number\" /><text value=\"]\" /><text type=\"break\" /><text type=\"break\" /><text value=\"def\" class=\"keyword\" /><text value=\" \" /><text value=\"halve\" class=\"title\" /><text value=\"(num)\" class=\"params\" /><text value=\":\" /><text type=\"break\" /><text value=\"  \" /><text value=\"return\" class=\"keyword\" /><text value=\" num/\" /><text value=\"2\" class=\"number\" /></content></code></body></html>"
          },
          {
            "title": "Function 2",
            "id": 89382,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Die Funktion, die wir verwenden werden, <code>halve()</code>, nimmt eine Zahl <code>num</code> als Argument und gibt deren Hälfte mit <code>num/2</code> zurück.</p><code version=\"2\" codelang=\"python\" name=\"script.py\" visible-if=\"always\"><content><text value=\"prices = [\" /><text value=\"10\" class=\"number\" /><text value=\", \" /><text value=\"22\" class=\"number\" /><text value=\", \" /><text value=\"30\" class=\"number\" /><text value=\", \" /><text value=\"40\" class=\"number\" /><text value=\", \" /><text value=\"58\" class=\"number\" /><text value=\", \" /><text value=\"62\" class=\"number\" /><text value=\"]\" /><text type=\"break\" /><text type=\"break\" /><text value=\"def\" class=\"keyword\" /><text value=\" \" /><text value=\"halve\" class=\"title\" /><text value=\"(num)\" class=\"params\" /><text value=\":\" /><text type=\"break\" /><text value=\" \" /><text value=\"return\" class=\"keyword\" /><text value=\" num/\" /><text value=\"2\" class=\"number\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"45\" endIndex=\"48\" /><option startIndex=\"59\" endIndex=\"64\" /></options></interaction></interactions></code><p visible-if=\"wrong\">Wähle <code>num</code>, gefolgt von <code>num/2</code> aus.</p></body></html>"
          },
          {
            "title": "Loop",
            "id": 89383,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Wie zuvor beginnen wir damit, durch jeden <code>price</code> in der ursprünglichen <code>prices</code>-Liste mit einer <code>for</code>-Schleife zu iterieren.</p><code version=\"2\" codelang=\"python\" name=\"script.py\" visible-if=\"always\"><content><text value=\"prices = [\" /><text value=\"10\" class=\"number\" /><text value=\", \" /><text value=\"22\" class=\"number\" /><text value=\", \" /><text value=\"30\" class=\"number\" /><text value=\", \" /><text value=\"40\" class=\"number\" /><text value=\", \" /><text value=\"58\" class=\"number\" /><text value=\", \" /><text value=\"62\" class=\"number\" /><text value=\"]\" /><text type=\"break\" /><text type=\"break\" /><text value=\"def\" class=\"keyword\" /><text value=\" \" /><text value=\"halve\" class=\"title\" /><text value=\"(num)\" class=\"params\" /><text value=\":\" /><text type=\"break\" /><text value=\"  \" /><text value=\"return\" class=\"keyword\" /><text value=\" num/\" /><text value=\"2\" class=\"number\" /><text type=\"break\" /><text type=\"break\" /><text value=\"halved = [halve(price) \" /><text value=\"for\" class=\"keyword\" /><text value=\" price \" /><text value=\"in\" class=\"keyword\" /><text value=\" prices]\" /><text type=\"break\" /><text value=\"print(halved)\" /><text type=\"break\" /></content><interactions><interaction type=\"validatedInput\" isDefault=\"true\" startIndex=\"90\" endIndex=\"109\" /></interactions><output><content><text value=\"[5.0, 11.0, 15.0, 20.0, 29.0, 31.0]\" /></content></output></code><p visible-if=\"wrong\">Gib <code>for price in prices</code> ein.</p></body></html>"
          },
          {
            "title": "Function as an expression",
            "id": 89384,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Wir können die Operationen auswählen, die wir auf jeden <code>price</code>-Wert in einer Funktion wie <code>halve()</code> anwenden möchten, und sie als Ausdruck verwenden.</p><code version=\"2\" codelang=\"python\" name=\"script.py\" visible-if=\"always\"><content><text value=\"prices = [\" /><text value=\"10\" class=\"number\" /><text value=\", \" /><text value=\"22\" class=\"number\" /><text value=\", \" /><text value=\"30\" class=\"number\" /><text value=\", \" /><text value=\"40\" class=\"number\" /><text value=\", \" /><text value=\"58\" class=\"number\" /><text value=\", \" /><text value=\"62\" class=\"number\" /><text value=\"]\" /><text type=\"break\" /><text type=\"break\" /><text value=\"def\" class=\"keyword\" /><text value=\" \" /><text value=\"halve\" class=\"title\" /><text value=\"(num)\" class=\"params\" /><text value=\":\" /><text type=\"break\" /><text value=\"  \" /><text value=\"return\" class=\"keyword\" /><text value=\" num/\" /><text value=\"2\" class=\"number\" /><text type=\"break\" /><text type=\"break\" /><text value=\"halved = [halve(price) \" /><text value=\"for\" class=\"keyword\" /><text value=\" price \" /><text value=\"in\" class=\"keyword\" /><text value=\" prices]\" /><text type=\"break\" /><text type=\"break\" /><text value=\"print(halved)\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"77\" endIndex=\"82\" /><option startIndex=\"82\" endIndex=\"83\" /><option startIndex=\"83\" endIndex=\"88\" /><option startIndex=\"88\" endIndex=\"89\" /></options></interaction></interactions><output><content><text value=\"[5.0, 11.0, 15.0, 20.0, 29.0, 31.0]\" /></content></output></code><p visible-if=\"wrong\">Wähle <code>halve</code>, gefolgt von <code>(</code> und schließlich <code>price</code>, <code>)</code> aus.</p></body></html>"
          },
          {
            "title": "Multiple expressions",
            "id": 89670,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Funktionen sind nützlich, wenn wir mehr Ausdrücke anwenden wollen, wie zum Beispiel die Steuer zu entfernen, bevor wir den Preis halbieren.</p><code version=\"2\" codelang=\"python\" name=\"script.py\" visible-if=\"always\"><content><text value=\"prices = [\" /><text value=\"10\" class=\"number\" /><text value=\", \" /><text value=\"22\" class=\"number\" /><text value=\", \" /><text value=\"30\" class=\"number\" /><text value=\", \" /><text value=\"40\" class=\"number\" /><text value=\", \" /><text value=\"58\" class=\"number\" /><text value=\", \" /><text value=\"60\" class=\"number\" /><text value=\"]\" /><text type=\"break\" /><text type=\"break\" /><text value=\"def\" class=\"keyword\" /><text value=\" \" /><text value=\"halve\" class=\"title\" /><text value=\"(num)\" class=\"params\" /><text value=\":\" /><text type=\"break\" /><text value=\"  no_tax = \" /><text value=\"0.85\" class=\"number\" /><text value=\" * num\" /><text type=\"break\" /><text value=\"  \" /><text value=\"return\" class=\"keyword\" /><text value=\" no_tax/\" /><text value=\"2\" class=\"number\" /><text type=\"break\" /><text type=\"break\" /><text value=\"halved = [halve(price) \" /><text value=\"for\" class=\"keyword\" /><text value=\" price \" /><text value=\"in\" class=\"keyword\" /><text value=\" prices]\" /><text type=\"break\" /><text type=\"break\" /><text value=\"print(halved)\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"53\" endIndex=\"72\" /><option startIndex=\"82\" endIndex=\"90\" /></options></interaction></interactions><output><content><text value=\"[4.25, 9.35, 12.75, 17.0, 24.65, 25.5]\" /></content></output></code><p visible-if=\"wrong\">Wähle <code>no_tax = 0.85 * num</code>, gefolgt von <code>no_tax/2</code> aus.</p></body></html>"
          },
          {
            "title": "Return statement",
            "id": 89671,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Wir können nur Funktionen verwenden, die ein <code>return</code>-Statement haben, da wir tatsächlich den zurückgegebenen Wert an die neue Liste anhängen.</p><code version=\"2\" codelang=\"python\" name=\"script.py\" visible-if=\"always\"><content><text value=\"prices = [\" /><text value=\"10\" class=\"number\" /><text value=\", \" /><text value=\"22\" class=\"number\" /><text value=\", \" /><text value=\"30\" class=\"number\" /><text value=\", \" /><text value=\"40\" class=\"number\" /><text value=\", \" /><text value=\"58\" class=\"number\" /><text value=\", \" /><text value=\"62\" class=\"number\" /><text value=\"]\" /><text type=\"break\" /><text type=\"break\" /><text value=\"def\" class=\"keyword\" /><text value=\" \" /><text value=\"halve\" class=\"title\" /><text value=\"(num)\" class=\"params\" /><text value=\":\" /><text type=\"break\" /><text value=\"  \" /><text value=\"return\" class=\"keyword\" /><text value=\" num/\" /><text value=\"2\" class=\"number\" /><text type=\"break\" /><text type=\"break\" /><text value=\"halved = [halve(price) \" /><text value=\"for\" class=\"keyword\" /><text value=\" price \" /><text value=\"in\" class=\"keyword\" /><text value=\" prices]\" /><text type=\"break\" /><text type=\"break\" /><text value=\"print(halved)\" /></content><interactions><interaction type=\"validatedInput\" isDefault=\"true\" startIndex=\"53\" endIndex=\"59\" /></interactions><output><content><text value=\"[5.0, 11.0, 15.0, 20.0, 29.0, 31.0]\" /></content></output></code><p visible-if=\"wrong\">Gib <code>return</code> ein.</p></body></html>"
          },
          {
            "title": "Question: Function as an expression",
            "id": 89665,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Wie verwenden wir einen Funktionsaufruf als Ausdruck?</p><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\">Wir rufen die Funktion mit der Schleifenvariablen als Argument auf, um sie auf jedes Listenelement anzuwenden</item><item value=\"2\" correct=\"false\">Wir rufen die Funktion ohne Argument auf</item></selection><p visible-if=\"wrong\">Wir rufen die Funktion mit der Schleifenvariablen als Argument auf, um sie auf jedes Listenelement anzuwenden.</p></body></html>"
          },
          {
            "title": "Question: Multiple expressions",
            "id": 89673,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Warum sollten wir eine Funktion als Ausdruck in einer List Comprehension verwenden?</p><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\">Um mehrere Ausdrücke auf die Werte anzuwenden, über die wir iterieren</item><item value=\"2\" correct=\"false\">Weil Ausdrücke immer Funktionen sind</item></selection><p visible-if=\"wrong\">Um mehrere Ausdrücke auf die Werte anzuwenden, über die wir iterieren.</p></body></html>"
          },
          {
            "title": "Question: Return statement",
            "id": 89674,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Können wir diese Funktion in einer List Comprehension verwenden?</p><code version=\"2\" codelang=\"python\" name=\"script.py\" visible-if=\"always\"><content><text value=\"def\" class=\"keyword\" /><text value=\" \" /><text value=\"get_full_name\" class=\"title\" /><text value=\"()\" class=\"params\" /><text value=\":\" /><text type=\"break\" /><text value=\"  full = \" /><text value=\"&quot;Claire&quot;\" class=\"string\" /><text value=\" + \" /><text value=\"&quot;Johnson&quot;\" class=\"string\" /><text type=\"break\" /><text value=\"  print(full)\" /></content></code><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\">Nein, weil es keinen Wert zurückgibt</item><item value=\"2\" correct=\"false\">Ja, wir können jede Funktion innerhalb eines List Comprehension verwenden</item></selection><p visible-if=\"wrong\">Nein, weil es keinen Wert zurückgibt.</p></body></html>"
          },
          {
            "title": "Example: Function",
            "id": 89666,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Innerhalb des List Comprehension rufe die Funktion <code>add_comma()</code> mit der Schleifenvariablen <code>name</code> als Argument auf.</p><code version=\"2\" codelang=\"python\" name=\"script.py\" visible-if=\"always\"><content><text value=\"authors = [\" /><text value=\"&quot;Virginia Woolf&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;John Steinbeck&quot;\" class=\"string\" /><text value=\"]\" /><text type=\"break\" /><text type=\"break\" /><text value=\"def\" class=\"keyword\" /><text value=\" \" /><text value=\"add_comma\" class=\"title\" /><text value=\"(name)\" class=\"params\" /><text value=\":\" /><text type=\"break\" /><text value=\"  parts = name.split(\" /><text value=\"&quot; &quot;\" class=\"string\" /><text value=\")\" /><text type=\"break\" /><text value=\"  \" /><text value=\"return\" class=\"keyword\" /><text value=\" parts[\" /><text value=\"1\" class=\"number\" /><text value=\"] + \" /><text value=\"&quot;, &quot;\" class=\"string\" /><text value=\" + parts[\" /><text value=\"0\" class=\"number\" /><text value=\"]\" /><text type=\"break\" /><text type=\"break\" /><text value=\"authors_update = [add_comma(name) \" /><text value=\"for\" class=\"keyword\" /><text value=\" name \" /><text value=\"in\" class=\"keyword\" /><text value=\" authors]\" /><text type=\"break\" /><text type=\"break\" /><text value=\"print(authors_update)\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"150\" endIndex=\"159\" /><option startIndex=\"159\" endIndex=\"160\" /><option startIndex=\"160\" endIndex=\"164\" /><option startIndex=\"164\" endIndex=\"165\" /></options></interaction></interactions><output><content><text value=\"['Woolf, Virginia', 'Steinbeck, John']\" /></content></output></code><p visible-if=\"wrong\">Wähle <code>add_comma</code>, gefolgt von <code>(</code> und schließlich <code>name</code>, <code>)</code> aus.</p></body></html>"
          },
          {
            "title": "Example: Function 2",
            "id": 89667,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Innerhalb der Funktion <code>add_comma()</code> teile den Namen in eine Liste namens <code>parts</code> mit <code>split()</code>. Füge dann ein Komma zwischen Index <code>1</code> und Index <code>0</code> hinzu.</p><code version=\"2\" codelang=\"python\" name=\"script.py\" visible-if=\"always\"><content><text value=\"authors = [\" /><text value=\"&quot;Virginia Woolf&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;John Steinbeck&quot;\" class=\"string\" /><text value=\"]\" /><text type=\"break\" /><text type=\"break\" /><text value=\"def\" class=\"keyword\" /><text value=\" \" /><text value=\"add_comma\" class=\"title\" /><text value=\"(name)\" class=\"params\" /><text value=\":\" /><text type=\"break\" /><text value=\"  parts = name.split(\" /><text value=\"&quot; &quot;\" class=\"string\" /><text value=\")\" /><text type=\"break\" /><text value=\"  \" /><text value=\"return\" class=\"keyword\" /><text value=\" parts[\" /><text value=\"1\" class=\"number\" /><text value=\"] + \" /><text value=\"&quot;, &quot;\" class=\"string\" /><text value=\" + parts[\" /><text value=\"0\" class=\"number\" /><text value=\"]\" /><text type=\"break\" /><text type=\"break\" /><text value=\"authors_update = [add_comma(name) \" /><text value=\"for\" class=\"keyword\" /><text value=\" name \" /><text value=\"in\" class=\"keyword\" /><text value=\" authors]\" /><text type=\"break\" /><text type=\"break\" /><text value=\"print(authors_update)\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"71\" endIndex=\"94\" /><option startIndex=\"104\" endIndex=\"130\" /></options></interaction></interactions><output><content><text value=\"['Woolf, Virginia', 'Steinbeck, John']\" /></content></output></code><p visible-if=\"wrong\">Wähle <code>parts = name.split(\" \")</code>, gefolgt von <code>parts[1] + \", \" + parts[0]</code> aus.</p></body></html>"
          },
          {
            "title": "Example: Loop",
            "id": 89668,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Innerhalb des List Comprehension programmiere eine <code>for</code>-Schleife, um durch jeden <code>name</code> in der <code>authors</code>-Liste zu iterieren.</p><code version=\"2\" codelang=\"python\" name=\"script.py\" visible-if=\"always\"><content><text value=\"authors = [\" /><text value=\"&quot;Virginia Woolf&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;John Steinbeck&quot;\" class=\"string\" /><text value=\"]\" /><text type=\"break\" /><text type=\"break\" /><text value=\"def\" class=\"keyword\" /><text value=\" \" /><text value=\"add_comma\" class=\"title\" /><text value=\"(name)\" class=\"params\" /><text value=\":\" /><text type=\"break\" /><text value=\"  parts = name.split(\" /><text value=\"&quot; &quot;\" class=\"string\" /><text value=\")\" /><text type=\"break\" /><text value=\"  \" /><text value=\"return\" class=\"keyword\" /><text value=\" parts[\" /><text value=\"1\" class=\"number\" /><text value=\"] + \" /><text value=\"&quot;, &quot;\" class=\"string\" /><text value=\" + parts[\" /><text value=\"0\" class=\"number\" /><text value=\"]\" /><text type=\"break\" /><text type=\"break\" /><text value=\"authors_update = [add_comma(name) \" /><text value=\"for\" class=\"keyword\" /><text value=\" name \" /><text value=\"in\" class=\"keyword\" /><text value=\" authors]\" /><text type=\"break\" /><text type=\"break\" /><text value=\"print(authors_update)\" /></content><interactions><interaction type=\"validatedInput\" isDefault=\"true\" startIndex=\"166\" endIndex=\"185\" /></interactions><output><content><text value=\"['Woolf, Virginia', 'Steinbeck, John']\" /></content></output></code><p visible-if=\"wrong\">Gib <code>for name in authors</code> ein.</p></body></html>"
          },
          {
            "title": "Example: Function as an expression",
            "id": 89669,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Rufe die Funktion für jeden Wert der <code>words</code>-Liste auf, indem du die Schleifenvariable als Argument übergibst.</p><code version=\"2\" codelang=\"python\" name=\"script.py\" visible-if=\"always\"><content><text value=\"words = [\" /><text value=\"&quot;apple&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;alligator&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;abracadabra&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;avatar&quot;\" class=\"string\" /><text value=\"]\" /><text type=\"break\" /><text type=\"break\" /><text value=\"def\" class=\"keyword\" /><text value=\" \" /><text value=\"has_double_a\" class=\"title\" /><text value=\"(word)\" class=\"params\" /><text value=\":\" /><text type=\"break\" /><text value=\"  count = word.count(\" /><text value=\"&quot;a&quot;\" class=\"string\" /><text value=\")\" /><text type=\"break\" /><text value=\"  \" /><text value=\"return\" class=\"keyword\" /><text value=\" count == \" /><text value=\"2\" class=\"number\" /><text type=\"break\" /><text type=\"break\" /><text value=\"double_a = [has_double_a(word) \" /><text value=\"for\" class=\"keyword\" /><text value=\" word \" /><text value=\"in\" class=\"keyword\" /><text value=\" words]\" /><text type=\"break\" /><text type=\"break\" /><text value=\"print(double_a)\" /></content><interactions><interaction type=\"validatedInput\" isDefault=\"true\" startIndex=\"153\" endIndex=\"157\" /></interactions><output><content><text value=\"[False, True, False, False]\" /></content></output></code><p visible-if=\"wrong\">Gib <code>word</code> ein.</p></body></html>"
          },
          {
            "title": "Example: Multiple expressions",
            "id": 89675,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Innerhalb der <code>passed()</code>-Funktion, schreibe eine Zeile, um einen Bonus von 10 Punkten zur Punktzahl hinzuzufügen, und gib dann das Ergebnis zurück, ob die Bonuspunktzahl über <code>90</code> liegt.</p><code version=\"2\" codelang=\"python\" name=\"script.py\" visible-if=\"always\"><content><text value=\"scores = [\" /><text value=\"40\" class=\"number\" /><text value=\", \" /><text value=\"12\" class=\"number\" /><text value=\", \" /><text value=\"83\" class=\"number\" /><text value=\"]\" /><text type=\"break\" /><text type=\"break\" /><text value=\"def\" class=\"keyword\" /><text value=\" \" /><text value=\"passed\" class=\"title\" /><text value=\"(score)\" class=\"params\" /><text value=\":\" /><text type=\"break\" /><text value=\"  with_bonus = score + \" /><text value=\"10\" class=\"number\" /><text type=\"break\" /><text value=\"  \" /><text value=\"return\" class=\"keyword\" /><text value=\" with_bonus &gt; \" /><text value=\"90\" class=\"number\" /><text type=\"break\" /><text type=\"break\" /><text value=\"passing_scores = [passed(score) \" /><text value=\"for\" class=\"keyword\" /><text value=\" score \" /><text value=\"in\" class=\"keyword\" /><text value=\" scores]\" /><text type=\"break\" /><text type=\"break\" /><text value=\"print(passing_scores)\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"44\" endIndex=\"67\" /><option startIndex=\"70\" endIndex=\"76\" /><option startIndex=\"77\" endIndex=\"92\" /></options></interaction></interactions><output><content><text value=\"[False, False, True]\" /></content></output></code><p visible-if=\"wrong\">Wähle <code>with_bonus = score + 10</code>, gefolgt von <code>return</code> und schließlich <code>with_bonus &gt; 90</code> aus.</p></body></html>"
          },
          {
            "title": "Example: Return statement",
            "id": 89676,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Gib das Ergebnis der Funktion so aus, dass wir das Ergebnis der Funktion in einer List Comprehension verwenden können.</p><code version=\"2\" codelang=\"python\" name=\"script.py\" visible-if=\"always\"><content><text value=\"scores = [\" /><text value=\"156\" class=\"number\" /><text value=\", \" /><text value=\"70\" class=\"number\" /><text value=\", \" /><text value=\"100\" class=\"number\" /><text value=\"]\" /><text type=\"break\" /><text type=\"break\" /><text value=\"def\" class=\"keyword\" /><text value=\" \" /><text value=\"passed\" class=\"title\" /><text value=\"(score)\" class=\"params\" /><text value=\":\" /><text type=\"break\" /><text value=\"  with_bonus = score + \" /><text value=\"10\" class=\"number\" /><text type=\"break\" /><text value=\"  passed = with_bonus &gt; \" /><text value=\"90\" class=\"number\" /><text type=\"break\" /><text value=\"  \" /><text value=\"return\" class=\"keyword\" /><text value=\" passed\" /><text type=\"break\" /><text type=\"break\" /><text value=\"passing_scores = [passed(score) \" /><text value=\"for\" class=\"keyword\" /><text value=\" score \" /><text value=\"in\" class=\"keyword\" /><text value=\" scores]\" /><text type=\"break\" /><text type=\"break\" /><text value=\"print(passing_scores)\" /></content><interactions><interaction type=\"validatedInput\" isDefault=\"true\" startIndex=\"99\" endIndex=\"105\" /></interactions><output><content><text value=\"[True, False, True]\" /></content></output></code><p visible-if=\"wrong\">Gib <code>return</code> ein.</p></body></html>"
          }
        ]
      }
    ]
  }
}