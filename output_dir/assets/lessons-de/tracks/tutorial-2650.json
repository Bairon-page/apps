{
  "tutorial": {
    "id": 2650,
    "version": 6,
    "type": "challenges",
    "isNew": false,
    "codeLanguage": "python",
    "title": "Einführung in Python",
    "descriptionContent": "Herausforderungsübungen basierend auf Einführung in Python",
    "shortDescriptionContent": "",
    "showInTrack": true,
    "iconBanner": null,
    "chapters": [
      {
        "id": 14658,
        "title": "Hallo - Python",
        "type": "challengeLevel0",
        "lessons": [
          {
            "title": "How Challenges Work",
            "id": 129686,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Jede Herausforderung erfordert, dass du den Code gemäß den Anweisungen schreibst.\n\nDein Code wird automatisch getestet, wenn du den Absenden-Button drückst. Du wirst ein Feedback erhalten, um zu wissen, ob er korrekt ist. Du kannst deinen Code auch ausführen, bevor du ihn einreichst, indem du den Code ausführen-Button drückst. Lass es uns ausprobieren!\n\n1. Beende die print-Anweisung, indem du `print` codierst.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "(\"Hello!\")",
                  "solvedContent": "print(\"Hello!\")"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 14659,
        "title": "Strings deklarieren",
        "type": "challengeLevel0",
        "lessons": [
          {
            "title": "Declaring Variables with String Values",
            "id": 129687,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Dein Freund hat dich gebeten herauszufinden, wie gut sein YouTube-Kanal läuft. Lass uns ihre besten und schlechtesten Videos finden!\n\n1. Erstelle eine Variable `most_viewed` und weise ihr den Wert `\"7 Amazing Mugs I CANNOT live without\"` zu.\n2. Erstelle eine Variable `least_viewed` und weise ihr den Wert `\"The Best Mug to Take Scuba Diving\"` zu.\n3. Verwende die `print` Funktion, um die Variablen in der Konsole anzuzeigen, jede auf einer anderen Zeile.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "",
                  "solvedContent": "most_viewed = \"7 Amazing Mugs I CANNOT live without\"\nleast_viewed = \"The Best Mug to Take Scuba Diving\"\n\nprint(most_viewed)\nprint(least_viewed)"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 14660,
        "title": "Zahlen deklarieren",
        "type": "challengeLevel0",
        "lessons": [
          {
            "title": "Declaring Variables with Number Values",
            "id": 129688,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Deine Lieblingsband hat ein neues Video hochgeladen! Lass uns sehen, wie viele Leute es angesehen und kommentiert haben.\n\n1. Erstelle eine Variable `views` und weise ihr den Wert `1145` zu.\n2. Erstelle eine Variable `comments` und weise ihr den Wert `200` zu.\n3. Verwende eine `print` Anweisung, um die Variable `views` auf der Konsole auszugeben.\n4. Verwende eine `print` Anweisung, um die Variable `comments` auf der Konsole auszugeben.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "",
                  "solvedContent": "views = 1145\ncomments = 200\n\nprint(views)\nprint(comments)"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 14661,
        "title": "Mindestalter für das Fahren",
        "type": "challengeLevel0",
        "lessons": [
          {
            "title": "Legal Driving Age",
            "id": 129689,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Sam ist 16 Jahre alt und möchte wissen, ob sie alt genug ist, um ein Auto zu fahren. Vervollständige die fehlenden Operatoren, um zu zeigen, dass jeder, der jünger als 17 ist, nicht fahren darf.\n\n1. Vervollständige den `too_young` Vergleich, um die Frage in der Konsole mit einem `Boolean` zu beantworten, der sagt, dass Sam zu jung ist, um zu fahren.\n2. Vervollständige den `car_driver` Vergleich, um zu zeigen, dass sie kein Auto fahren kann.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "sams_age = 16\r\ntoo_young = sams_age  17\r\ncar_driver = sams_age  17\r\n\r\nprint(f\"Is Sam too young to drive? {too_young}\")\r\nprint(f\"Can Sam drive a car? {car_driver}\")",
                  "solvedContent": "sams_age = 16\r\ntoo_young = sams_age < 17\r\ncar_driver = sams_age > 17\r\n\r\nprint(f\"Is Sam too young to drive? {too_young}\")\r\nprint(f\"Can Sam drive a car? {car_driver}\")"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 14662,
        "title": "Altes Passwort überprüfen",
        "type": "challengeLevel0",
        "lessons": [
          {
            "title": "Old Password Check",
            "id": 129690,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Lorde hat ihr Passwort vergessen und verwendet ein Programm, um es wiederherzustellen. Das Programm überprüft, ob ihr neues Passwort sich von dem alten unterscheidet. Außerdem muss Lorde das neue Passwort zweimal eingeben, um sicherzustellen, dass es korrekt geschrieben ist. Lass uns dieses Programm fertigstellen!\n\n1. Verwende den Ungleichheitsoperator in `compare_old_new`, um zu zeigen, dass die Passwörter **nicht** gleich sind.\n2. Stelle sicher, dass das `new_password` mit dem `repeat_new_password` übereinstimmt.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "old_password = \"hello123\"\r\nnew_password = \"goodbye321\"\r\ncompare_old_new = old_password new_password\r\nrepeat_new_password = \"goodbye321\"\r\ncompare_new = new_password repeat_new_password\r\n\r\nprint(f\"Is new password different from old password? {compare_old_new}\")\r\nprint(f\"Has new password been introduced correctly? {compare_new}\")",
                  "solvedContent": "old_password = \"hello123\"\r\nnew_password = \"goodbye321\"\r\ncompare_old_new = old_password != new_password\r\nrepeat_new_password = \"goodbye321\"\r\ncompare_new = new_password == repeat_new_password\r\n\r\nprint(f\"Is new password different from old password? {compare_old_new}\")\r\nprint(f\"Has new password been introduced correctly? {compare_new}\")"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 14663,
        "title": "Kinokartenpreis",
        "type": "challengeLevel0",
        "lessons": [
          {
            "title": "Movie Ticket Price",
            "id": 129691,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Jonas geht ins Kino. Er hat die Preise überprüft und er braucht ein Ticket für einen Erwachsenen.\n\n1. Vervollständige den f-String, um zu zeigen, dass er ein Ticket für einen Erwachsenen kaufen wird, indem du die richtige Variable verwendest.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "age = 15\r\nadult_ticket = age >= 12\r\n\r\nprint( \"Buy one adult ticket: {}\")",
                  "solvedContent": "age = 15\r\nadult_ticket= age >= 12\r\n\r\nprint(f\"Buy one adult ticket: {adult_ticket}\")"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 13124,
        "title": "Ungleichheitsoperator",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "Inequality Operator with Variables",
            "id": 118105,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Lass uns unserem YouTuber-Freund helfen herauszufinden, wann er sein Publikum bitten sollte, zu abonnieren!\n\n1. Verwende `views` und `subscribers`, um eine neue Variable namens `askToSubscribe` zu erstellen, die das Ergebnis eines Ungleichheitsvergleichs zwischen den beiden enthält.\n2. Zeige das Ergebnis an.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "views = 1533\nsubscribers = 123\n",
                  "solvedContent": "views = 1533\nsubscribers = 123\n\naskToSubscribe = views != subscribers\n\nprint(askToSubscribe)"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 13119,
        "title": "Verwendung von Variablen: Zahlen",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "Using variables that have numbers",
            "id": 118100,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Du bist der Schlagzeuger einer großartigen neuen Band. Lass uns herausfinden, wie viel Zeit die Leute insgesamt damit verbracht haben, euren beliebtesten Song zu hören!\n\n1. Erstelle eine Variable `totalListenTime`. Multipliziere `bestSongLength` mit `bestSongListens` und speichere das Ergebnis in der Variable.\n2. Verwende eine `print`-Anweisung, um die neue Variable anzuzeigen.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "bestSongLength = 3.5\nbestSongListens = 456",
                  "solvedContent": "bestSongLength = 3.5\nbestSongListens = 456\n\ntotalListenTime = bestSongLength * bestSongListens\nprint(totalListenTime)"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 13121,
        "title": "Gleichheitsoperator mit Zahlen",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "Checking for equality with numbers",
            "id": 118102,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Du hast dich entschieden, deine erstaunlichen Witze mit der Welt zu teilen und ein Twitter-Konto erstellt! Lass uns den Gleichheitsoperator verwenden, um zu sehen, ob du bereits 1000 Follower erreicht hast.\n\n1. Erstelle eine Variable namens `celebrationTime` und weise ihr das Ergebnis des Vergleichs zwischen `followers` und `1000` zu.\n2. Verwende eine `print`-Anweisung, um das Ergebnis anzuzeigen.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "followers = 900",
                  "solvedContent": "followers = 900\ncelebrationTime = followers == 1000\n\nprint(celebrationTime)"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 13122,
        "title": "Gleichheitsoperator mit Strings",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "Checking for equality with strings",
            "id": 118103,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Du hast gerade das süßeste Tier-Video entdeckt! Aber es kommt dir ein wenig bekannt vor. Lass uns herausfinden, ob es von deinem Lieblings-Content-Creator gemacht wurde.\n\n1. Erstelle eine Variable `madeByFavorite` und weise ihr das Ergebnis eines Vergleichs zwischen `newCreator` und `favoriteCreator` zu. Stelle sicher, dass du den Gleichheitsoperator verwendest.\n2. Zeige die neue Variable an.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "newCreator = \"Bunnies4Ever\"\nfavoriteCreator = \"BestBunnies\"",
                  "solvedContent": "newCreator = \"Bunnies4Ever\"\nfavoriteCreator = \"BestBunnies\"\n\nmadeByFavorite = newCreator == favoriteCreator\n\nprint(madeByFavorite)"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 13118,
        "title": "Variablen aktualisieren",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "Updating variables with new values",
            "id": 118099,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Du hast dich entschieden, eine YouTube-Karriere zu starten und dein erstes Video gepostet. Lass uns nachsehen, wie viele Likes es bekommt.\n\n1. Erhöhe die Variable `likes` um 1.\n2. Verwende die `print` Anweisung, um den Wert der Variable `likes` anzuzeigen.\n3. Erhöhe die Variable `likes` erneut um 1.\n4. Verwende die `print` Anweisung, um den Wert der Variable `likes` erneut anzuzeigen.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "likes = 1145\nlikes = 1146",
                  "solvedContent": "likes = 1145\nlikes = 1146\nlikes = 1147\nprint (likes)\nlikes = 1148\nprint (likes)"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 13123,
        "title": "Gleichheitsoperator mit Variablen",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "Equality with numbers in variables",
            "id": 118104,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Dein kleiner Cousin hat seine eigene Social-Media-Plattform erstellt! Sie haben dich überzeugt, beizutreten. Lass uns überprüfen, ob dein erster Beitrag die gleiche Anzahl an Ansichten und Kommentaren erhalten hat.\n\n1. Erstelle eine Variable `everyoneComments` und weise ihr das Ergebnis eines Vergleichs zwischen `views` und `comments` zu.\n2. Zeige das Ergebnis an.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "views = 1511\ncomments = 1511",
                  "solvedContent": "views = 1511\ncomments = 1511\n\neveryoneComments = views == comments\n\nprint(everyoneComments)"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 13113,
        "title": "Größer-als-Operator",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "Greater than operator",
            "id": 118090,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Zwei Personen spielen Bowling. Bowler1 wirft 5 Strikes und 5 Spares. Bowler2 wirft 4 Strikes und sechs Spares. Es gibt keine Unentschieden!\n\n1. Nach `\"bowler1 wins:\"` erstelle eine `print`-Anweisung, um zu überprüfen, ob die Punktzahl von Bowler1 größer ist als die von Bowler2.\n2. Nach `\"bowler2 wins:\"` drucke den Vergleich, um zu überprüfen, ob die Punktzahl von Bowler2 größer ist als die von Bowler1.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "sam_strikes = 5\r\nsam_spares = 5\r\nleo_strikes = 4\r\nleo_spares = 6\r\nsam_score = sam_strikes * 30 + sam_spares * 20\r\nleo_score = leo_strikes * 30 + leo_spares * 20\r\n\r\n#Decide winner\r\nprint(\"Sam wins:\")\r\n\r\nprint(\"Leo wins:\")",
                  "solvedContent": "sam_strikes = 5\r\nsam_spares = 5\r\nleo_strikes = 4\r\nleo_spares = 6\r\nsam_score = sam_strikes * 30 + sam_spares * 20\r\nleo_score = leo_strikes * 30 + leo_spares * 20\r\n\r\n#Decide winner\r\nprint(\"Sam wins:\")\r\nprint(sam_score > leo_score)\r\n\r\nprint(\"Leo wins:\")\r\nprint(leo_score > sam_score)"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 13111,
        "title": "Operatoren",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "Operators",
            "id": 118088,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Anne benutzt einen Geldautomaten, um eine `Einzahlung` von $200 auf ihr Konto zu machen. Sie möchte eine `Abhebung` von $100 vornehmen.\n\n1. Vervollständige den Code, um zu zeigen, dass Annes Abhebung `genehmigt` wird, wenn sie genug Geld auf ihrem `Kontostand` hat, oder `abgelehnt` wird, wenn nicht.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "deposit  200\r\nwithdrawal  100\r\naccount_balance = deposit - withdrawal\r\nprint(\"Account balance is:\")\r\nprint(account_balance)\r\nprint(\"Withdrawal is:\")\r\nprint(withdrawal)\r\n\r\napproved  withdrawal  account_balance\r\ndenied  withdrawal  account_balance\r\n\r\nprint(\"Withdrawal approved. \") \r\nprint(approved)\r\n\r\nprint(\"Withdrawal denied. \")\r\nprint(denied)",
                  "solvedContent": "deposit = 200\r\nwithdrawal = 100\r\naccount_balance = deposit - withdrawal\r\nprint(\"Account balance is:\")\r\nprint(account_balance)\r\nprint(\"Withdrawal is:\")\r\nprint(withdrawal)\r\n\r\napproved = withdrawal <= account_balance\r\ndenied = withdrawal > account_balance\r\n\r\nprint(\"Withdrawal approved. \") \r\nprint(approved)\r\n\r\nprint(\"Withdrawal denied. \")\r\nprint(denied)"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 13112,
        "title": "Gleichheits- und Ungleichheitsoperatoren",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "Equality and inequality operators",
            "id": 118089,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Eine Wähler-ID wird mit dem Wählerverzeichnis verglichen, bevor jemand einen Stimmzettel erhält.\n\n1. Erstelle eine Variable `valid_voter`, die den Vergleich des Wähler-`ID_name` und des `voter_register_name` speichert.\n2. Gib den Vergleich von `valid_voter` mit `True` aus, um zu sehen, ob der Wähler einen Stimmzettel erhält oder sich registrieren muss.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "#voter_id_match_registry\r\nID_name = \"Kristen Stewart\"\r\nvoter_register_name = \"Kristen Jaymes Stewart\"\r\n\r\n\r\nprint(\"Here's your ballot.\")\r\nprint(valid_voter  True)\r\n\r\nprint(\"You must register to vote first.\")\r\nprint(valid_voter  True)",
                  "solvedContent": "#voter_id_match_registry\r\nID_name = \"Kristen Stewart\"\r\nvoter_register_name = \"Kristen Jaymes Stewart\"\r\nvalid_voter = ID_name == voter_register_name\r\n\r\nprint(\"Here's your ballot.\")\r\nprint(valid_voter == True)\r\n\r\nprint(\"You must register to vote first.\")\r\nprint(valid_voter != True)"
                }
              ],
              "hints": []
            }
          }
        ]
      }
    ]
  }
}