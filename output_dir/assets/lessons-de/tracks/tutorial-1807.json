{
  "tutorial": {
    "id": 1807,
    "version": 7,
    "type": "guidedProjectOptional",
    "isNew": false,
    "codeLanguage": "javascript",
    "title": "Investitionsrechner",
    "descriptionContent": "Verwende Arrow Functions, um einen Investitionsrechner zu erstellen",
    "shortDescriptionContent": "",
    "showInTrack": true,
    "iconBanner": "tutorial-1807-icon-banner.svg",
    "chapters": [
      {
        "id": 12025,
        "title": "Investitionsrechner",
        "type": "practiceLevel3",
        "lessons": [
          {
            "title": "Initial variable",
            "id": 109613,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Lass uns eine Pfeilfunktion verwenden, um einen Investitionsrechner zu erstellen, alles in JavaScript.\n\nWir beginnen mit der Erstellung einer Variable.\n\n1. Beginne damit, eine Variable `initial` zu initialisieren, um einen Startinvestitionswert von `2000` zu speichern.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "",
                  "solvedContent": "const initial = 2000;"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Interest rate variable",
            "id": 109614,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Als nächstes erstellen wir eine Variable, um den Zinssatz zu speichern.\n\n1. Initialisiere eine Variable `rate` und weise ihr den Wert `10` zu.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "",
                  "solvedContent": "const rate = 10;"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Years variable",
            "id": 109616,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Als nächstes speicherst du die Anzahl der Investitionsjahre in einer Variable.\n\n1. Initialisiere eine weitere Variable `years` und setze den Wert auf `3`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "",
                  "solvedContent": "const years = 3;"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Parameters",
            "id": 109619,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Als nächstes erstelle eine Arrow Function. Die Arrow Function nimmt drei Parameter `init`, `rate` und `time` entgegen, die die Eingaben für `initial`, `rate` und `years` darstellen.\n\n1. Initialisiere eine Variable `getValue`.\n2. Weise der Variable `getValue` eine Arrow Function zu.\n3. Die Syntax der Arrow Function sollte `init`, `rate` und `time` als Parameter haben.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const initial = 2000;\nconst rate = 10;\nconst years = 3;",
                  "solvedContent": "const initial = 2000;\nconst rate = 10;\nconst years = 3;\nconst getValue = (init, rate, time) => {};"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Parameter default values",
            "id": 109620,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Die Parameter der Arrow Function `init`, `rate` und `time` können innerhalb der Klammern der Arrow Function Anfangswerte zugewiesen bekommen.\n\n1. Weise den Parametern `init`, `rate` und `time` die Werte `0`, `5` und `0` innerhalb der Klammern zu.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const initial = 2000;\nconst rate = 10;\nconst years = 3;\nconst getValue = (init, rate, time) => {};",
                  "solvedContent": "const initial = 2000;\nconst rate = 10;\nconst years = 3;\nconst getValue = (init = 0, rate = 5, time = 0) => {};"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Arrow function variable and expression",
            "id": 109621,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Als Nächstes benötigen wir eine Variable, um das Ergebnis der Investitionsberechnung zu speichern.\n\n1. Deklariere innerhalb der Arrow Function eine block-skopierte Variable `value`.\n2. Weise der Variable `value` den Ausdruck `init + (init * (rate / 100) * time)` zu.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const initial = 2000;\nconst rate = 10;\nconst years = 3;\nconst getValue = (init = 0, rate = 5, time = 0) => {};",
                  "solvedContent": "const initial = 2000;\nconst rate = 10;\nconst years = 3;\nconst getValue = (init = 0, rate = 5, time = 0) => {\n  const value = init + (init * (rate / 100) * time);\n};"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Return",
            "id": 109622,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Lass `getValue` das Ergebnis des Ausdrucks zurückgeben.\n\n1. Gib innerhalb der Arrow-Funktion `value` zurück.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const initial = 2000;\nconst rate = 10;\nconst years = 3;\nconst getValue = (init = 0, rate = 5, time = 0) => {\n  const value = init + (init * (rate / 100) * time);\n};",
                  "solvedContent": "const initial = 2000;\nconst rate = 10;\nconst years = 3;\nconst getValue = (init = 0, rate = 5, time = 0) => {\n  const value = init + (init * (rate / 100) * time);\n  return value;\n};"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Calling the function",
            "id": 109624,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Als nächstes benutze die Funktion, indem du sie aufrufst.\n\n1. Rufe `getValue()` auf.\n2. Stelle sicher, dass du die Variablen `initial`, `rate` und `years` als Argumente an `getValue()` übergibst.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const initial = 2000;\nconst rate = 10;\nconst years = 3;\nconst getValue = (init = 0, rate = 5, time = 0) => {\n  const value = init + (init * (rate / 100) * time);\n  return value;\n};",
                  "solvedContent": "const initial = 2000;\nconst rate = 10;\nconst years = 3;\nconst getValue = (init = 0, rate = 5, time = 0) => {\n  const value = init + (init * (rate / 100) * time);\n  return value;\n};\ngetValue(initial, rate, years);"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Console",
            "id": 109625,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Um den zurückgegebenen Investitionswert auszugeben, zeige ihn in der Konsole an.\n\n1. Wickle `getValue(initial, rate, years)` mit einem `console.log()` ein, um den Wert in Pfund anzuzeigen.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const initial = 2000;\nconst rate = 10;\nconst years = 3;\nconst getValue = (init = 0, rate = 5, time = 0) => {\n  const value = init + (init * (rate / 100) * time);\n  return value;\n};\ngetValue(initial, rate, years);",
                  "solvedContent": "const initial = 2000;\nconst rate = 10;\nconst years = 3;\nconst getValue = (init = 0, rate = 5, time = 0) => {\n  const value = init + (init * (rate / 100) * time);\n  return value;\n};\nconsole.log(getValue(initial, rate, years));"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Shortening the code",
            "id": 109623,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Als nächstes lass uns den Code verkürzen, indem wir `getvalue` umstrukturieren. Wenn sich die Arrow Function und der Ausdruck in derselben Zeile befinden, können wir die geschweiften Klammern, die `value`-Variable und das `return`-Schlüsselwort weglassen.\n\n1. Entferne die geschweiften Klammern.\n2. Entferne die `value`-Variable.\n3. Entferne das `return`-Schlüsselwort, da es in Einzeilern impliziert ist.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const initial = 2000;\nconst rate = 10;\nconst years = 3;\nconst getValue = (init = 0, rate = 5, time = 0) => ;\nconsole.log(getValue(initial, rate, years));",
                  "solvedContent": "const initial = 2000;\nconst rate = 10;\nconst years = 3;\nconst getValue = (init = 0, rate = 5, time = 0) => init + (init * (rate / 100) *\n  time);\nconsole.log(getValue(initial, rate, years));"
                }
              ],
              "hints": [
                {
                  "title": "Hint",
                  "content": "After refactoring, `getValue` should only contain the expression `init + (init * (rate / 100) * time)` on the same line."
                }
              ]
            }
          }
        ]
      }
    ]
  }
}