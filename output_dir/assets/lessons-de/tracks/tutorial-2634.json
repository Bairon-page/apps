{
  "tutorial": {
    "id": 2634,
    "version": 4,
    "type": "challenges",
    "isNew": false,
    "codeLanguage": "javascript",
    "title": "Objekte & ES 6",
    "descriptionContent": "Herausforderungen sind schwierigere Übungen, die deine Fähigkeiten testen werden.",
    "shortDescriptionContent": "",
    "showInTrack": true,
    "iconBanner": null,
    "chapters": [
      {
        "id": 14539,
        "title": "Eigenschaften hinzufügen",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "Adding Properties",
            "id": 129199,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Lass uns eine weitere Eigenschaft zu einem Objekt hinzufügen, das aus einem JSON-String geparst wurde. Wir werden das Objekt aktualisieren, indem wir ihm eine Eigenschaft hinzufügen, nachdem wir das Objekt erstellt haben.\n\n1. Parse den JSON-String `tajMahalJSON` und speichere ihn in einer Variable `tajMahal`, damit wir damit als JS-Objekt arbeiten können.\n\n3. Zeige den `takeout`-Wert des `tajMahal`-Objekts an.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const tajMahalJSON = '{ \"cuisine\": \"Indian\", \"takeout\": false}';\r\n\r\n",
                  "solvedContent": "const tajMahalJSON = '{ \"cuisine\": \"Indian\", \"takeout\": false}';\r\nconst tajMahal = JSON.parse(tajMahalJSON);\r\nconsole.log(tajMahal.takeout);"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 14540,
        "title": "Eigenschaften aktualisieren",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "Updating an Object Property",
            "id": 129200,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Lass uns die Werte der vorhandenen Eigenschaften eines Objekts aktualisieren.\n\n1. Aktualisiere in einer separaten Zeile nach dem Objekt die Eigenschaft `takeout` von `tajMahal` auf `true`. Bearbeite nicht den ursprünglichen Wert innerhalb des Objekts.\n\n2. Zeige das `tajMahal`-Objekt an, um zu bestätigen, dass es aktualisiert wurde.\n\n3. Um das Objekt für den Versand an den Server vorzubereiten, lass uns eine neue Variable namens `stringTajMahal` erstellen und die in einen String umgewandelte Version von `tajMahal` speichern.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const tajMahal = {\r\n  cuisine: \"Indian\",\r\n  takeout: false,\r\n  starRating: 4.5\r\n};",
                  "solvedContent": "const tajMahal = {\r\n  cuisine: \"Indian\",\r\n  takeout: false,\r\n  starRating: 4.5\r\n};\r\ntajMahal.takeout = true;\r\nconsole.log(tajMahal);\r\nconst stringTajMahal = JSON.stringify(tajMahal);\r\nconsole.log(stringTajMahal);\r\n"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 14541,
        "title": "Zugriff auf Eigenschaften",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "Use Property Value",
            "id": 129201,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Lass uns den Wert einer Eigenschaft des Objekts, das aus einem JSON-String geparst wurde, abrufen und in einer neuen Berechnung verwenden.\n\n1. Parse den JSON-String in ein JS-Objekt und speichere es in einer neuen Variable, der `tajMahal`-Variable.\n2. Erstelle mit `const` eine neue Variable namens `tenRating`, die dem Wert der `starRating`-Eigenschaft von `tajMahal` multipliziert mit `2` entspricht.\n2. Zeige den Wert von `tenRating` an, um das Ergebnis zu überprüfen.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const tajMahalJSON = '{ \"cuisine\": \"Indian\", \"takeout\": false, \"starRating\": 4.5}';",
                  "solvedContent": "const tajMahalJSON = '{ \"cuisine\": \"Indian\", \"takeout\": false, \"starRating\": 4.5}';\r\nconst tajMahal = JSON.parse(tajMahalJSON);\r\nconst tenRating = tajMahal.starRating * 2;\r\nconsole.log(tenRating);"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 14542,
        "title": "Hotel-Willkommensnachricht",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "Hotel Welcome Message",
            "id": 129202,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Eine Hotelkette muss eine Willkommensnachricht für Gäste auf ihren neuen Außendisplays anzeigen. Schreibe eine Arrow Function, die eine Willkommensnachricht ähnlich dem untenstehenden Beispiel zurückgibt. Du kannst deine eigene Willkommensnachricht wählen, solange sie ein String ist.\n\nBeispielausgabe:\n```\nHello! Welcome to Terrace Inn & Suites!\n```\n\n1. Deklariere eine Arrow Function mit dem Namen `checkInMessage`, die die bereitgestellte Willkommensnachricht zurückgibt. Klicke auf die Willkommensnachricht, um sie zu kopieren, und füge sie dann als String ein, der von der Arrow Function zurückgegeben wird.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "index.js",
                  "codeLanguage": "javascript",
                  "content": "console.log(checkInMessage());",
                  "solvedContent": "const checkInMessage = () => \"Hello! Welcome to Terrace Inn & Suites!\";\nconsole.log(checkInMessage());"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 14543,
        "title": "Saisonale Nachricht hinzufügen",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "Seasonal Message Addition",
            "id": 129203,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Der General Manager des Terrace Inn & Suites möchte, dass die Arrow Function so modifiziert wird, dass sie eine `generalMessage` und eine `seasonalMessage` enthält.\n\nDie allgemeine Nachricht bleibt gleich: `Hello! Welcome to Terrace Inn & Suites`.\n\nNach den Anweisungen des General Managers lautet die saisonale Nachricht: `Need to cool off? Visit one of our three resort pools!`.\n\nDie Arrow Function sollte diese beiden Nachrichten in Variablen speichern und die verketteten Strings zurückgeben. Vergiss nicht, ein Leerzeichen dazwischen zu setzen!\n\nBeispielausgabe\n```javascript\nHello! Welcome to Terrace Inn & Suites! Need to cool off? Visit one of our three resort pools!\n```\n\n1. Verwandle die bestehende Arrow Function in eine mehrzeilige Arrow Function.\n2. Deklariere und speichere die bereitgestellten Nachrichten in Variablen mit den Namen `generalMessage` und `seasonalMessage`.\n3. Schließlich sollte die Arrow Function die beiden Variablen mit einem Leerzeichen dazwischen verketten und zurückgeben.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "index.js",
                  "codeLanguage": "javascript",
                  "content": "const challengeGreeting = () => \"Hello! Welcome to Terrace Inn & Suites!\";\r\nconsole.log(challengeGreeting());",
                  "solvedContent": "const challengeGreeting = () => {\n  const generalMessage = \"Hello! Welcome to Terrace Inn & Suites!\";\n  const seasonalMessage =\n    \"Need to cool off? Visit one of our three resort pools!\";\n  return generalMessage + \" \" + seasonalMessage;\n};\nconsole.log(challengeGreeting());"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 14544,
        "title": "Personalisierte Willkommensnachricht",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "Personalized Welcome Message",
            "id": 129204,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Der General Manager hat noch eine Verbesserung. Er möchte die Nachricht für Gäste personalisieren. Ändere die Arrow Function und den Arrow Function Body, um einen `name`-Parameter einzubauen.\n\nBeispielausgabe\n```javascript\nHello, Sarah! Welcome to Terrace Inn & Suites! Need to cool off? Visit one of our three resort pools!\n```\n\n1. Ändere zuerst die Arrow Function, um einen `name`-Parameter zu übernehmen.\n2. Ändere als Nächstes die Variable `generalMessage`, um den `name`-Parameter gemäß dem obigen Beispiel einzubauen.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "index.js",
                  "codeLanguage": "javascript",
                  "content": "const challengeGreeting = () => {\r\n  const generalMessage = \"Welcome to Terrace Inn & Suites!\";\r\n  const seasonalMessage =\r\n    \"Need to cool off? Visit one of our three resort pools!\";\r\n  return generalMessage + \" \" + seasonalMessage;\r\n};\r\nconsole.log(challengeGreeting(\"Sarah\"));",
                  "solvedContent": "const challengeGreeting = (name) => {\n  const generalMessage = \"Hello, \" + name +\n    \"! Welcome to Terrace Inn & Suites!\";\n  const seasonalMessage =\n    \"Need to cool off? Visit one of our three resort pools!\";\n  return generalMessage + \" \" + seasonalMessage;\n};\nconsole.log(challengeGreeting(\"Sarah\"));"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 11641,
        "title": "Methoden mit Parametern",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "Methods with parameters",
            "id": 107101,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Schau dir die Funktion `eligible()` an. Ihr Zweck ist es, `true` zurückzugeben, wenn `volume` kleiner oder gleich einem `maxVolume` ist. Lass uns diese Funktion in eine Objektmethode umwandeln.\n\n1. Füge dem `parcel`-Objekt eine Methode namens `volume` hinzu, die den Wert von `length * width * depth` für das Objekt zurückgibt.\n\n2. Wandle die Funktion `eligible` in eine Methode mit demselben Namen innerhalb des `parcel`-Objekts um. Die Methode sollte nur einen Parameter `maxVolume` haben und `this.volume()` aufrufen, um das Volumen zu erhalten.\n\n3. Verwende `console.log()`, um das Ergebnis eines Aufrufs der `eligible`-Methode von `parcel` mit einem Wert von `100` für `maxVolume` auszugeben.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const parcel = {\n  length: 100,\n  width: 80,\n  depth: 30,\n};\n\nfunction eligible(length, width, depth, maxVolume) {\n  volume = length * width * depth;\n  if (this.volume() <= maxVolume) {\n    return true;\n  } else {\n    return false;\n  }\n}\nconsole.log(eligible(parcel.length, parcel.width, parcel.depth, 100));",
                  "solvedContent": "const parcel = {\n  length: 100,\n  width: 80,\n  depth: 30,\n  volume: function() {\n    return this.length * this.width * this.depth;\n  },\n  eligible: function(maxVolume) {\n    if (this.volume() <= maxVolume) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n};\nconsole.log(parcel.eligible(100));"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 11639,
        "title": "Methoden hinzufügen",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "Add a method and use",
            "id": 107001,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Lass uns eine Methode zu unserem Objekt hinzufügen, die eine Berechnung unter Verwendung des Wertes einer anderen Eigenschaft des Objekts durchführt. Denke daran, dass wir auf das Objekt selbst mit `this.` verweisen können.\n\n1. Füge eine Methode innerhalb des `tajMahal` Objekts (innerhalb der `{` Klammern `}` ) hinzu, die `tenRating` genannt wird und den Wert von `starRating * 2` für das gegebene Objekt zurückgibt.\n\n2. Aktualisiere als Nächstes unterhalb des `tajMahal` Objekts (außerhalb der `{` Klammern `}` ) den `starRating` von `tajMahal` auf `4.1`.\n\n3. Schließlich, `console.log()` das *Ergebnis* des Aufrufs der `tenRating` Methode, um zu überprüfen, ob das Ergebnis wie erwartet ist.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const tajMahal = {\r\n  cuisine: \"Indian\",\r\n  takeout: false,\r\n  starRating: 4.5,\r\n};",
                  "solvedContent": "const tajMahal = {\r\n  cuisine: \"Indian\",\r\n  takeout: false,\r\n  starRating: 4.5,\r\n  tenRating: function() {\r\n    return this.starRating * 2;\r\n  }\r\n};\r\ntajMahal.starRating = 4.1;\r\nconsole.log(tajMahal.tenRating());"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 11640,
        "title": "Mehr Methoden",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "Adding more complex methods",
            "id": 107002,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Schau dir das `employee` Objekt an. Lass uns eine Methode zu diesem Objekt hinzufügen.\n\n1. Füge eine Methode namens `fullName` hinzu. Die Methode sollte einen String zurückgeben, der aus dem Vornamen, gefolgt von einem Leerzeichen (`\" \"`) und dem Nachnamen besteht (`Amanda Jimenez` in unserem Beispiel).\n\n2. Zeige das Ergebnis des Aufrufs der `fullName()` Methode auf `employee` an.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const employee = {\r\n  firstName: \"Amanda\",\r\n  secondName: \"Jimenez\"\r\n};",
                  "solvedContent": "const employee = {\n  firstName: \"Amanda\",\n  secondName: \"Jimenez\",\n  fullName: function() {\n    return this.firstName + \" \" + this.secondName;\n  }\n};\nconsole.log(employee.fullName());"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 11638,
        "title": "Eigenschaft zugreifen und verwenden",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "Access and compare property",
            "id": 107000,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Wir wollen sehen, ob die `cuisine` von `tajMahal` in `preferredCuisines` ist.\n\n1. Verwende `const`, um eine Variable namens `inPreferred` zu erstellen, die überprüft, ob `preferredCuisines` den `cuisine`-Wert für `tajMahal` enthält.\n\n   Tipp: Verwende die `.includes()` Array-Methode auf `preferredCuisines`, die `true` zurückgibt, wenn der angegebene Wert darin enthalten ist.\n\n2. Zeige `inPreferred` an, um das Ergebnis zu überprüfen.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const tajMahal = {\r\n  cuisine: \"Indian\",\r\n  takeout: false,\r\n  starRating: 4.5\r\n};\r\nconst preferredCuisines = [\"Chinese\", \"Italian\", \"Turkish\"];",
                  "solvedContent": "const tajMahal = {\r\n  cuisine: \"Indian\",\r\n  takeout: false,\r\n  starRating: 4.5\r\n};\r\nconst preferredCuisines = [\"Chinese\", \"Italian\", \"Turkish\"];\r\nconst inPreferred = preferredCuisines.includes(tajMahal.cuisine);\r\nconsole.log(inPreferred);"
                }
              ],
              "hints": []
            }
          }
        ]
      }
    ]
  }
}