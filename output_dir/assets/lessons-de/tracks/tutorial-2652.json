{
  "tutorial": {
    "id": 2652,
    "version": 5,
    "type": "challenges",
    "isNew": false,
    "codeLanguage": "python",
    "title": "Listen",
    "descriptionContent": "Herausforderungsübungen basierend auf Listen",
    "shortDescriptionContent": "",
    "showInTrack": true,
    "iconBanner": null,
    "chapters": [
      {
        "id": 14670,
        "title": "Mahlzeitenplanung",
        "type": "challengeLevel0",
        "lessons": [
          {
            "title": "Meal Planning",
            "id": 129698,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Du entscheidest dich, deine täglichen Mahlzeiten mit Python-Listen zu planen.\n\n1. Erstelle innerhalb der Variable `meals` eine Liste, die deine Mahlzeiten für Frühstück, Mittagessen und Abendessen in dieser Reihenfolge enthält: `\"omelet\"`, `\"salad\"` und `\"chicken\"`.\n2. Ändere die erste print-Anweisung, um das Mittagsmenü einzuschließen.\n3. Ein Freund kommt mit Pizza vorbei! Ändere den Abendessen-Wert (den letzten Wert) der `meals`-Liste zu `\"pizza\"`.\n4. Ändere die zweite print-Anweisung, um das aktuelle Abendessen-Menüelement einzuschließen!",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "meals = \n\nprint(f\"Lunch menu: {}\")\n\nprint(f\"Dinner menu: {}\")",
                  "solvedContent": "meals = [\"omelet\", \"salad\", \"chicken\"]\n\nprint(f\"Lunch menu: {meals[1]}\")\nmeals[2] = \"pizza\"\nprint(f\"Dinner menu: {meals[2]}\")"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 14671,
        "title": "Volleyball-Auswechslungen",
        "type": "challengeLevel0",
        "lessons": [
          {
            "title": "Volleyball Subs",
            "id": 129699,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Es ist Turnierzeit für deine Volleyballliga, aber viele deiner Teamkollegen sind für das lange Wochenende verreist. Klingt, als müssten wir einige Auswechslungen vornehmen!\n\n1. Verwende eine Listenoperation, um `\"Iliana\"` durch `\"Jack\"` zu ersetzen ( `sub_1` ).\n2. Ersetze `\"Anders\"` durch `\"Celeste\"` ( `sub_2` ).\n3. Ersetze `\"Gabrielle\"` durch `\"Mary\"` ( `sub_3` ).\n\nEs ist Spielzeit. Auf geht's, Team!",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "players = [\"Iliana\", \"Samuel\", \"Anders\", \"Teresa\", \"Gabrielle\", \"Alejandro\"]\nsub1 = \"Jack\"\nsub2 = \"Celeste\"\nsub3 = \"Mary\"\n\n",
                  "solvedContent": "players = [\"Iliana\", \"Samuel\", \"Anders\", \"Teresa\", \"Gabrielle\", \"Alejandro\"]\nsub1 = \"Jack\"\nsub2 = \"Celeste\"\nsub3 = \"Mary\"\n\nplayers[0] = sub1\nplayers[2] = sub2\nplayers[4] = sub3"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 14672,
        "title": "Einkaufsliste Erinnerungen",
        "type": "challengeLevel0",
        "lessons": [
          {
            "title": "Shopping List Reminders",
            "id": 129700,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Lass uns `for` Schleifen verwenden, um mit unserer `shopping_list` Liste auf dem Laufenden zu bleiben!\n\n1. Für jeden Artikel, drucke einen Erinnerungssatz im folgenden Format aus: `\"Vergiss nicht, <...> zu kaufen!\"`.\n2. Ersetze `<...>` mit dem Wert des aktuellen Einkaufslistenartikels in deiner Schleife.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "shopping_list = [\"dish soap\", \"kleenex\", \"batteries\", \"aluminum foil\", \"pet food\", \"toothpaste\", \"lightbulbs\"]\n\n",
                  "solvedContent": "shopping_list = [\"dish soap\", \"kleenex\", \"batteries\", \"aluminum foil\", \"pet food\", \"toothpaste\", \"lightbulbs\"]\n\nfor item in shopping_list:\n print(f\"Don't forget to buy {item}!\")"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 14673,
        "title": "Waldfeuchtigkeitsindex",
        "type": "challengeLevel0",
        "lessons": [
          {
            "title": "Forest Humidity Index",
            "id": 129701,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Gab ist Geograph und untersucht die Feuchtigkeitswerte von Wäldern. Gab hat einige Daten über die Feuchtigkeitswerte von 50 Abschnitten des Waldes gesammelt und möchte wissen, welche die höchsten und niedrigsten Feuchtigkeitswerte des Waldes sind. Verwende `min()` und `max()`, um diese Werte aus der `humidity`-Liste für Gab zu finden und auszugeben.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "humidity = [77.78, 65.51, 74.42, 80.48, 71.71, 68.39, 65.10, 71.26, 75.95, 81.29, 71.54, 80.85, 84.45, 84.23, 83.18, 68.59, 80.83, 84.72, 78.23, 74.44, 83.20, 74.90, 80.59, 75.09, 82.46, 67.96, 77.65, 69.51, 74.57, 72.98, 66.01, 67.89, 82.52, 65.15, 70.07, 66.84, 74.74, 82.16, 73.73, 82.23, 66.47, 68.70, 71.28, 67.42, 82.87, 66.41, 80.43, 83.42, 74.70, 83.97]",
                  "solvedContent": "humidity = [77.78, 65.51, 74.42, 80.48, 71.71, 68.39, 65.10, 71.26, 75.95, 81.29, 71.54, 80.85, 84.45, 84.23, 83.18, 68.59, 80.83, 84.72, 78.23, 74.44, 83.20, 74.90, 80.59, 75.09, 82.46, 67.96, 77.65, 69.51, 74.57, 72.98, 66.01, 67.89, 82.52, 65.15, 70.07, 66.84, 74.74, 82.16, 73.73, 82.23, 66.47, 68.70, 71.28, 67.42, 82.87, 66.41, 80.43, 83.42, 74.70, 83.97]\r\nprint(min(humidity))\r\nprint(max(humidity))"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 14674,
        "title": "Disqualifizierter Teilnehmer",
        "type": "challengeLevel0",
        "lessons": [
          {
            "title": "Disqualified Participant",
            "id": 129702,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Wir haben ein monatliches Turnier und haben den Namen des Champions in der `champions` Liste festgehalten. Kürzlich haben wir herausgefunden, dass ein regelmäßiger Teilnehmer `\"Tooti3\"` geschummelt hat. Wir müssen überprüfen, ob `\"Tooti3\"` irgendwelche Turniere gewonnen hat und ihn aus der Liste entfernen. Finde heraus, wie oft `\"Tooti3\"` in der `champions` Liste mit `count()` erscheint und gib das Ergebnis in der Konsole aus.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "champions = [\"Miracle+\", \"Tooti3\", \"Orustat\", \"Emkay\", \"mizuhana\", \"CaptainSpark\", \"NichMercs\", \"mizuhana\", \"dabian\", \"Cyle\",  \"Tooti3\", \"Flaker\"]",
                  "solvedContent": "champions = [\"Miracle+\", \"Tooti3\", \"Orustat\", \"Emkay\", \"mizuhana\", \"CaptainSpark\", \"NichMercs\", \"mizuhana\", \"dabian\", \"Cyle\",  \"Tooti3\", \"Flaker\"]\r\nprint(champions.count(\"Tooti3\"))"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 14675,
        "title": "Sparkonto",
        "type": "challengeLevel0",
        "lessons": [
          {
            "title": "Savings Account",
            "id": 129703,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Joe notiert, wie viel Geld er jeden Monat in einer Liste namens `savings` gespart hat. Hilf Joe, seine gesamten Ersparnisse für das Jahr mit `sum()` zu berechnen und das Ergebnis in der Konsole auszugeben.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "savings = [122, 50, 102, 103, 79, 46, 107, 9, 13, 91, 193, 4]",
                  "solvedContent": "savings = [122, 50, 102, 103, 79, 46, 107, 9, 13, 91, 193, 4]\r\nprint(sum(savings))"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 13970,
        "title": "Filtern großer Abhebungen",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "Filtering Large Withdrawals",
            "id": 124070,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Um deine Ausgabengewohnheiten besser zu verstehen, möchtest du eine Möglichkeit, alle Abhebungen anzuzeigen, die größer oder gleich einem festgelegten Abhebungsschwellenwert sind.\n\n1. Durchlaufe die `withdrawals`.\n2. Wenn der Abhebungsbetrag größer oder gleich `withdrawal_threshold` ist, füge ihn der Liste `large_withdrawals` hinzu.\n3. Drucke schließlich die Anzahl der Elemente in der endgültigen Liste `large_withdrawals`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "withdrawals = [25, 195, 6, 34, 18, 99, 110, 7, 87, 38, 101, 77, 250]\nwithdrawal_threshold = 100\nlarge_withdrawals = []\n\n",
                  "solvedContent": "withdrawals = [25, 195, 6, 34, 18, 99, 110, 7, 87, 38, 101, 77, 250]\nwithdrawal_threshold = 100\nlarge_withdrawals = []\n\nfor withdrawal in withdrawals:\n if withdrawal >= withdrawal_threshold:\n  large_withdrawals.append(withdrawal)\n\nprint(len(large_withdrawals))"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 13951,
        "title": "Sortieren",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "Sorting",
            "id": 123980,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Die Listen `students_1E` und `students_1F` enthalten die Namen der Schüler in den Klassen `1E` und `1F`. Aufgrund einer Umstrukturierung der Schule werden die Schüler beider Klassen zusammengefasst. Verbinde `students_1F` mit `students_1E` und sortiere ihre Namen alphabetisch. Gib die zusammengeführte Liste in der Konsole aus.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "students_1E = [\"Leslie\", \"Shyanne\", \"Cayden\", \"Karla\", \"Monika\", \"Abigale\", \"Tristen\", \"Salena\", \"Rosalie\", \"Francisca\", \"Harris\"]\r\nstudents_1F = [\"Mackenzie\", \"Trey\", \"Dashawn\", \"Jamia\", \"Emilio\", \"Desean\", \"Lucero\", \"Lilly\", \"Justice\", \"Cale\"]",
                  "solvedContent": "students_1E = [\"Leslie\", \"Shyanne\", \"Cayden\", \"Karla\", \"Monika\", \"Abigale\", \"Tristen\", \"Salena\", \"Rosalie\", \"Francisca\", \"Harris\"]\r\nstudents_1F = [\"Mackenzie\", \"Trey\", \"Dashawn\", \"Jamia\", \"Emilio\", \"Desean\", \"Lucero\", \"Lilly\", \"Justice\", \"Cale\"]\r\nstudents_1E += students_1F\r\nstudents_1E.sort()\r\nprint(students_1E)"
                }
              ],
              "hints": []
            }
          }
        ]
      }
    ]
  }
}