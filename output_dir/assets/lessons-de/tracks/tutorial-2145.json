{
  "tutorial": {
    "id": 2145,
    "version": 4,
    "type": "course",
    "isNew": false,
    "codeLanguage": "javascript",
    "title": "Synchronität und Asynchronität in JS",
    "descriptionContent": "Einführung in asynchrones JavaScript. Erkunde asynchrone und synchrone Callbacks.",
    "shortDescriptionContent": "",
    "showInTrack": true,
    "iconBanner": null,
    "chapters": [
      {
        "id": 13415,
        "title": "Synchrones und Asynchrones JavaScript",
        "type": "practiceLevel1",
        "lessons": [
          {
            "title": "Intro",
            "id": 120557,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p><em>Synchronität</em> ist ein Begriff, den wir verwenden, um über Codeanweisungen zu sprechen, die nacheinander ausgeführt werden.</p><p>Bis jetzt haben wir synchrones JavaScript in unserem Code verwendet. Lass uns mehr über diesen synchronen Code lernen!</p></body></html>"
          },
          {
            "title": "Synchronous JavaScript",
            "id": 120566,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>In <strong>synchronem</strong> Code wird eine Zeile Code nur ausgeführt, nachdem die vorherige abgeschlossen ist.</p><p>Synchroner Code kann unsere Programme verlangsamen. Hier müssen wir auf die Berechnung von 6000 Primzahlen warten, um die letzte Konsolenausgabe zu erhalten.</p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;We're calculating the first 6000 prime numbers.&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;Waiting...&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" arr = [\" /><text value=\"2\" class=\"number\" /><text value=\"];\" /><text type=\"break\" /><text value=\"let\" class=\"keyword\" /><text value=\" number = \" /><text value=\"3\" class=\"number\" /><text value=\";\" /><text type=\"break\" /><text value=\"while\" class=\"keyword\" /><text value=\" (arr.length &lt; \" /><text value=\"6000\" class=\"number\" /><text value=\") {\" /><text type=\"break\" /><text value=\" \" /><text value=\"for\" class=\"keyword\" /><text value=\" (\" /><text value=\"let\" class=\"keyword\" /><text value=\" i = \" /><text value=\"2\" class=\"number\" /><text value=\"; i &lt; number; i++) {\" /><text type=\"break\" /><text value=\"  \" /><text value=\"if\" class=\"keyword\" /><text value=\" (number % i === \" /><text value=\"0\" class=\"number\" /><text value=\") {\" /><text type=\"break\" /><text value=\"   number++;\" /><text type=\"break\" /><text value=\"   \" /><text value=\"break\" class=\"keyword\" /><text value=\";\" /><text type=\"break\" /><text value=\"  }\" /><text type=\"break\" /><text value=\"  \" /><text value=\"if\" class=\"keyword\" /><text value=\" (i === number - \" /><text value=\"1\" class=\"number\" /><text value=\") {\" /><text type=\"break\" /><text value=\"   arr.push(number);\" /><text type=\"break\" /><text value=\"   number++;\" /><text type=\"break\" /><text value=\"   \" /><text value=\"break\" class=\"keyword\" /><text value=\";\" /><text type=\"break\" /><text value=\"  }\" /><text type=\"break\" /><text value=\" }\" /><text type=\"break\" /><text value=\"}\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"`We finished calculating the first \" /><text value=\"${arr.length}\" class=\"subst\" /><text value=\" prime numbers.`\" /><text value=\");\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;We had to wait for this line to print.&quot;\" class=\"string\" /><text value=\");\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"399\" endIndex=\"453\" /></options></interaction></interactions><output><content><text value=\"We're calculating the first 6000 prime numbers.\" /><text type=\"break\" /><text value=\"Waiting...\" /><text type=\"break\" /><text value=\"We finished calculating the first 6000 prime numbers.\" /><text type=\"break\" /><text value=\"We had to wait for this line to print.\" /></content></output></code><p visible-if=\"wrong\">Wähle <code>console.log(\"We had to wait for this line to print.\");</code> aus.</p></body></html>"
          },
          {
            "title": "Synchronous JavaScript 2",
            "id": 120567,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Bei synchronem Code gilt: Je länger eine Operation dauert, desto länger müssen wir warten, bis die nächste Codezeile ausgeführt wird.</p><p>Hier werden wir die ersten <code>12000</code> Primzahlen berechnen, was mehr Zeit in Anspruch nimmt und zu einer längeren Verzögerung führt.</p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;We're calculating the first 12000 prime numbers.&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;Waiting...&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" arr = [\" /><text value=\"2\" class=\"number\" /><text value=\"];\" /><text type=\"break\" /><text value=\"let\" class=\"keyword\" /><text value=\" number = \" /><text value=\"3\" class=\"number\" /><text value=\";\" /><text type=\"break\" /><text value=\"while\" class=\"keyword\" /><text value=\" (arr.length &lt; \" /><text value=\"12000\" class=\"number\" /><text value=\") {\" /><text type=\"break\" /><text value=\" \" /><text value=\"for\" class=\"keyword\" /><text value=\" (\" /><text value=\"let\" class=\"keyword\" /><text value=\" i = \" /><text value=\"2\" class=\"number\" /><text value=\"; i &lt; number; i++) {\" /><text type=\"break\" /><text value=\"  \" /><text value=\"if\" class=\"keyword\" /><text value=\" (number % i === \" /><text value=\"0\" class=\"number\" /><text value=\") {\" /><text type=\"break\" /><text value=\"   number++;\" /><text type=\"break\" /><text value=\"   \" /><text value=\"break\" class=\"keyword\" /><text value=\";\" /><text type=\"break\" /><text value=\"  }\" /><text type=\"break\" /><text value=\"  \" /><text value=\"if\" class=\"keyword\" /><text value=\" (i === number - \" /><text value=\"1\" class=\"number\" /><text value=\") {\" /><text type=\"break\" /><text value=\"   arr.push(number);\" /><text type=\"break\" /><text value=\"   number++;\" /><text type=\"break\" /><text value=\"   \" /><text value=\"break\" class=\"keyword\" /><text value=\";\" /><text type=\"break\" /><text value=\"  }\" /><text type=\"break\" /><text value=\" }\" /><text type=\"break\" /><text value=\"}\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"`We finished calculating the first \" /><text value=\"${arr.length}\" class=\"subst\" /><text value=\" prime numbers.`\" /><text value=\");\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;We had to wait even longer for this line to print.&quot;\" class=\"string\" /><text value=\");\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"145\" endIndex=\"150\" /></options></interaction></interactions><output><content><text value=\"We're calculating the first 12000 prime numbers.\" /><text type=\"break\" /><text value=\"Waiting...\" /><text type=\"break\" /><text value=\"We finished calculating the first 12000 prime numbers.\" /><text type=\"break\" /><text value=\"We had to wait even longer for this line to print.\" /></content></output></code><p visible-if=\"wrong\">Wähle <code>12000</code> aus.</p></body></html>"
          },
          {
            "title": "Asynchronous JS 1",
            "id": 120570,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p><strong>Asynchroner</strong> Code wartet nicht darauf, dass die vorherige Anweisung abgeschlossen wird.</p><p>Hier sehen wir, dass die Nachricht <em>vor</em> der Berechnung angezeigt wird, selbst wenn wir die print-Anweisung in die letzte Zeile des Codes einfügen.</p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"function\" class=\"keyword\" /><text value=\" \" /><text value=\"asyncExample\" class=\"title\" /><text value=\"(\" /><text value=\"\" class=\"params\" /><text value=\") \" /><text value=\"{\" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;We're calculating the first 10,000 prime numbers.&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\" \" /><text value=\"const\" class=\"keyword\" /><text value=\" arr = [\" /><text value=\"2\" class=\"number\" /><text value=\"];\" /><text type=\"break\" /><text value=\" \" /><text value=\"let\" class=\"keyword\" /><text value=\" number = \" /><text value=\"3\" class=\"number\" /><text value=\";\" /><text type=\"break\" /><text value=\" \" /><text value=\"while\" class=\"keyword\" /><text value=\" (arr.length &lt; \" /><text value=\"10000\" class=\"number\" /><text value=\") {\" /><text type=\"break\" /><text value=\"  \" /><text value=\"for\" class=\"keyword\" /><text value=\" (\" /><text value=\"let\" class=\"keyword\" /><text value=\" i = \" /><text value=\"2\" class=\"number\" /><text value=\"; i &lt; number; i++) {\" /><text type=\"break\" /><text value=\"   \" /><text value=\"if\" class=\"keyword\" /><text value=\" (number % i === \" /><text value=\"0\" class=\"number\" /><text value=\") {\" /><text type=\"break\" /><text value=\"    number++;\" /><text type=\"break\" /><text value=\"    \" /><text value=\"break\" class=\"keyword\" /><text value=\";\" /><text type=\"break\" /><text value=\"   }\" /><text type=\"break\" /><text value=\"   \" /><text value=\"if\" class=\"keyword\" /><text value=\" (i === number - \" /><text value=\"1\" class=\"number\" /><text value=\") {\" /><text type=\"break\" /><text value=\"    arr.push(number);\" /><text type=\"break\" /><text value=\"    number++;\" /><text type=\"break\" /><text value=\"    \" /><text value=\"break\" class=\"keyword\" /><text value=\";\" /><text type=\"break\" /><text value=\"   }\" /><text type=\"break\" /><text value=\"  }\" /><text type=\"break\" /><text value=\" }\" /><text type=\"break\" /><text value=\" \" /><text value=\"return\" class=\"keyword\" /><text value=\" \" /><text value=\"Promise\" class=\"built_in\" /><text value=\".resolve(arr);\" /><text type=\"break\" /><text value=\"}\" /><text type=\"break\" /><text value=\"asyncExample().then(\" /><text value=\"function\" class=\"keyword\" /><text value=\"(\" /><text value=\"value\" class=\"params\" /><text value=\") \" /><text value=\"{\" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"`We calculated the first \" /><text value=\"${value.length}\" class=\"subst\" /><text value=\" prime numbers`\" /><text value=\");\" /><text type=\"break\" /><text value=\"});\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;This line is printed during the calculation.&quot;\" class=\"string\" /><text value=\");\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"483\" endIndex=\"543\" /></options></interaction></interactions><output><content><text value=\"We're calculating the first 10,000 prime numbers.\" /><text type=\"break\" /><text value=\"This line is printed during the calculation.\" /><text type=\"break\" /><text value=\"We calculated the first 10000 prime numbers\" /></content></output></code><p visible-if=\"wrong\">Wähle <code>console.log(\"This line is printed during the calculation.\");</code> aus.</p></body></html>"
          },
          {
            "title": "Asynchronous JavaScript 2",
            "id": 120571,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Asynchroner Code ist nützlich für die Bearbeitung von lang andauernden Aufgaben. Komplexe Berechnungen und das Abrufen von Daten von einem Server können Zeit in Anspruch nehmen.</p><p>Asynchronität ermöglicht es uns, andere Aufgaben auszuführen, während wir warten. Welche Anweisung wird zuletzt angezeigt?</p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" asyncExample = fetch(\" /><text value=\"&quot;https://exampleAPI.data/1&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\"asyncExample.then(\" /><text value=\"res\" class=\"params\" /><text value=\" =&gt;\" /><text value=\" res.json()).then(\" /><text value=\"data\" class=\"params\" /><text value=\" =&gt;\" /><text value=\" {\" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"`This is our data: \" /><text value=\"${data}\" class=\"subst\" /><text value=\"`\" /><text value=\");\" /><text type=\"break\" /><text value=\"});\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;Waiting for the data...&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;Continue to use the page while the request is processing.&quot;\" class=\"string\" /><text value=\");\" /></content><output><content><text value=\"Waiting for the data...\" /><text type=\"break\" /><text value=\"Continue to use the page while the request is processing.\" /><text type=\"break\" /><text value=\"This is our data: Success!\" /></content></output></code><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\"><code>This is our data: Success!</code></item><item value=\"2\" correct=\"false\"><code>Waiting for the data...</code></item><item value=\"3\" correct=\"false\"><code>Continue to use the page while the request is processing</code></item></selection><p visible-if=\"wrong\"><code>This is our data: Success!</code>.</p></body></html>"
          },
          {
            "title": "Question: Synchronous JavaScript",
            "id": 120710,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Was ist <strong>synchroner</strong> Code?</p><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\">Code, der nacheinander ausgeführt wird</item><item value=\"2\" correct=\"false\">Code, der gleichzeitig mit anderem Code ausgeführt wird</item></selection><p visible-if=\"wrong\">Code, der nacheinander ausgeführt wird.</p></body></html>"
          },
          {
            "title": "Question: Synchronous JavaScript 2",
            "id": 120711,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Was ist ein Grund, warum synchroner Code ineffizient sein kann?</p><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\">Jede Codezeile muss warten, bis die vorherige Zeile abgeschlossen ist</item><item value=\"2\" correct=\"false\">Mehrere Codezeilen können gleichzeitig ausgeführt werden</item></selection><p visible-if=\"wrong\">Jede Codezeile muss warten, bis die vorherige Zeile abgeschlossen ist.</p></body></html>"
          },
          {
            "title": "Question: Asynchronous Javascript",
            "id": 120712,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Was ist <strong>asynchroner</strong> Code?</p><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\">Code, das gleichzeitig mit anderem Code ausgeführt werden kann</item><item value=\"2\" correct=\"false\">Code, das sequenziell ausgeführt wird</item></selection><p visible-if=\"wrong\">Code, das gleichzeitig mit anderem Code ausgeführt werden kann.</p></body></html>"
          },
          {
            "title": "Question: Asynchronous JavaScript 1",
            "id": 120713,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Was ist der Vorteil von asynchronem Code?</p><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\">Wir können mehrere Aktionen ausführen, während wir darauf warten, dass eine vorherige Aktion abgeschlossen wird</item><item value=\"2\" correct=\"false\">Es erfordert immer mehr Codezeilen als synchroner Code</item></selection><p visible-if=\"wrong\">Wir können mehrere Aktionen ausführen, während wir darauf warten, dass eine vorherige Aktion abgeschlossen wird.</p></body></html>"
          },
          {
            "title": "Question: Asynchronous JavaScript 2",
            "id": 120838,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Wie können wir erkennen, dass dieser Code asynchron ist?</p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"function\" class=\"keyword\" /><text value=\" \" /><text value=\"asyncExample\" class=\"title\" /><text value=\"(\" /><text value=\"\" class=\"params\" /><text value=\") \" /><text value=\"{\" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;We're calculating the first 10,000 prime numbers.&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;Waiting...&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\" \" /><text value=\"const\" class=\"keyword\" /><text value=\" arr = [\" /><text value=\"2\" class=\"number\" /><text value=\"];\" /><text type=\"break\" /><text value=\" \" /><text value=\"let\" class=\"keyword\" /><text value=\" number = \" /><text value=\"3\" class=\"number\" /><text value=\";\" /><text type=\"break\" /><text value=\" \" /><text value=\"while\" class=\"keyword\" /><text value=\" (arr.length &lt; \" /><text value=\"10000\" class=\"number\" /><text value=\") {\" /><text type=\"break\" /><text value=\"  \" /><text value=\"for\" class=\"keyword\" /><text value=\" (\" /><text value=\"let\" class=\"keyword\" /><text value=\" i = \" /><text value=\"2\" class=\"number\" /><text value=\"; i &lt; number; i++) {\" /><text type=\"break\" /><text value=\"   \" /><text value=\"if\" class=\"keyword\" /><text value=\" (number % i === \" /><text value=\"0\" class=\"number\" /><text value=\") {\" /><text type=\"break\" /><text value=\"    number++;\" /><text type=\"break\" /><text value=\"    \" /><text value=\"break\" class=\"keyword\" /><text value=\";\" /><text type=\"break\" /><text value=\"   }\" /><text type=\"break\" /><text value=\"   \" /><text value=\"if\" class=\"keyword\" /><text value=\" (i === number - \" /><text value=\"1\" class=\"number\" /><text value=\") {\" /><text type=\"break\" /><text value=\"    arr.push(number);\" /><text type=\"break\" /><text value=\"    number++;\" /><text type=\"break\" /><text value=\"    \" /><text value=\"break\" class=\"keyword\" /><text value=\";\" /><text type=\"break\" /><text value=\"   }\" /><text type=\"break\" /><text value=\"  }\" /><text type=\"break\" /><text value=\" }\" /><text type=\"break\" /><text value=\" \" /><text value=\"return\" class=\"keyword\" /><text value=\" \" /><text value=\"Promise\" class=\"built_in\" /><text value=\".resolve(arr);\" /><text type=\"break\" /><text value=\"}\" /><text type=\"break\" /><text value=\"asyncExample().then(\" /><text value=\"function\" class=\"keyword\" /><text value=\"(\" /><text value=\"value\" class=\"params\" /><text value=\") \" /><text value=\"{\" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"`We calculated the first \" /><text value=\"${value.length}\" class=\"subst\" /><text value=\" prime numbers`\" /><text value=\");\" /><text type=\"break\" /><text value=\"});\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;This line printed during the calculation.&quot;\" class=\"string\" /><text value=\");\" /></content><output><content><text value=\"We're calculating the first 10,000 prime numbers.\" /><text type=\"break\" /><text value=\"Waiting...\" /><text type=\"break\" /><text value=\"This line printed during the calculation.\" /><text type=\"break\" /><text value=\"We calculated the first 10000 prime numbers\" /></content></output></code><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\">Es wird während der Berechnung weiterhin ausgeführt und im Konsolenfenster ausgegeben</item><item value=\"2\" correct=\"false\">Es verwendet eine while-Schleife</item></selection><p visible-if=\"wrong\">Es wird während der Berechnung weiterhin ausgeführt und im Konsolenfenster ausgegeben.</p></body></html>"
          },
          {
            "title": "Question: Asynchronous JavaScript 3",
            "id": 120714,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Was ist eine reale Anwendung von asynchronem Code?</p><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\">Weiterhin Code ausführen, während komplexe Berechnungen durchgeführt werden</item><item value=\"2\" correct=\"false\">Warten, um die nächste Codezeile auszuführen, während eine komplexe Berechnung durchgeführt wird</item></selection><p visible-if=\"wrong\">Weiterhin Code ausführen, während komplexe Berechnungen durchgeführt werden.</p></body></html>"
          },
          {
            "title": "Example: Synchronous JavaScript",
            "id": 120716,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Vervollständige die <code>for</code>-Schleife, sodass dieser synchrone Code jedes Element des Arrays mit <code>5</code> multipliziert und dann eine \"Fertig\"-Nachricht ausgibt.</p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" arr = [\" /><text value=\"1\" class=\"number\" /><text value=\", \" /><text value=\"2\" class=\"number\" /><text value=\", \" /><text value=\"3\" class=\"number\" /><text value=\", \" /><text value=\"4\" class=\"number\" /><text value=\", \" /><text value=\"5\" class=\"number\" /><text value=\"];\" /><text type=\"break\" /><text value=\"for\" class=\"keyword\" /><text value=\" (\" /><text value=\"let\" class=\"keyword\" /><text value=\" i = \" /><text value=\"0\" class=\"number\" /><text value=\"; i &lt; arr.length; i++) {\" /><text type=\"break\" /><text value=\" arr[i] *= \" /><text value=\"5\" class=\"number\" /><text value=\";\" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(arr[i]);\" /><text type=\"break\" /><text value=\"}\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;Finished!&quot;\" class=\"string\" /><text value=\");\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"29\" endIndex=\"32\" /><option startIndex=\"106\" endIndex=\"113\" /><option startIndex=\"113\" endIndex=\"114\" /><option startIndex=\"114\" endIndex=\"117\" /></options></interaction></interactions><output><content><text value=\"5\" /><text type=\"break\" /><text value=\"10\" /><text type=\"break\" /><text value=\"15\" /><text type=\"break\" /><text value=\"20\" /><text type=\"break\" /><text value=\"25\" /><text type=\"break\" /><text value=\"Finished!\" /></content></output></code><p visible-if=\"wrong\">Wähle <code>for</code>, gefolgt von <code>console</code> und schließlich <code>.</code>, <code>log</code> aus.</p></body></html>"
          },
          {
            "title": "MCQ w/Code 1",
            "id": 120721,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Woher wissen wir, dass dieser Code synchron ist?</p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" arr = [\" /><text value=\"10\" class=\"number\" /><text value=\", \" /><text value=\"8\" class=\"number\" /><text value=\", \" /><text value=\"4\" class=\"number\" /><text value=\", \" /><text value=\"2\" class=\"number\" /><text value=\", \" /><text value=\"0\" class=\"number\" /><text value=\"];\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;Start loop!&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\"for\" class=\"keyword\" /><text value=\" (\" /><text value=\"let\" class=\"keyword\" /><text value=\" i = \" /><text value=\"0\" class=\"number\" /><text value=\"; i &lt; arr.length; i++) {\" /><text type=\"break\" /><text value=\" arr[i] /= \" /><text value=\"2\" class=\"number\" /><text value=\";\" /><text type=\"break\" /><text value=\"}\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;The operation is complete&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(arr);\" /><text type=\"break\" /></content><output><content><text value=\"Start loop!\" /><text type=\"break\" /><text value=\"The operation is complete\" /><text type=\"break\" /><text value=\"[ 5, 4, 2, 1, 0 ]\" /></content></output></code><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\">Jede Iteration der Schleife wird abgeschlossen, bevor der Code außerhalb der Schleife ausgeführt wird</item><item value=\"2\" correct=\"false\">Der Code wird auf einmal ausgeführt</item></selection><p visible-if=\"wrong\">Jede Iteration der Schleife wird abgeschlossen, bevor der Code außerhalb der Schleife ausgeführt wird.</p></body></html>"
          },
          {
            "title": "MCQ w/Code 2",
            "id": 120722,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Warum wissen wir, dass dieser Code asynchron ist?</p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"async\" class=\"keyword\" /><text value=\" \" /><text value=\"function\" class=\"keyword\" /><text value=\" \" /><text value=\"example\" class=\"title\" /><text value=\"(\" /><text value=\"\" class=\"params\" /><text value=\") \" /><text value=\"{\" /><text type=\"break\" /><text value=\" \" /><text value=\"const\" class=\"keyword\" /><text value=\" promise = \" /><text value=\"new\" class=\"keyword\" /><text value=\" \" /><text value=\"Promise\" class=\"built_in\" /><text value=\"(\" /><text value=\"(\" /><text value=\"resolve\" class=\"params\" /><text value=\") =&gt;\" /><text value=\" {\" /><text type=\"break\" /><text value=\"  setTimeout(\" /><text value=\"()\" class=\"params\" /><text value=\" =&gt;\" /><text value=\" resolve(\" /><text value=\"&quot;The operation is finished&quot;\" class=\"string\" /><text value=\"), \" /><text value=\"1500\" class=\"number\" /><text value=\");\" /><text type=\"break\" /><text value=\" });\" /><text type=\"break\" /><text value=\" \" /><text value=\"const\" class=\"keyword\" /><text value=\" output = \" /><text value=\"await\" class=\"keyword\" /><text value=\" promise;\" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(output);\" /><text type=\"break\" /><text value=\"}\" /><text type=\"break\" /><text value=\"example();\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;Hello&quot;\" class=\"string\" /><text value=\");\" /></content><output><content><text value=\"Hello\" /><text type=\"break\" /><text value=\"The operation is finished\" /></content></output></code><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\">Weil die letzte Konsolennachricht zuerst in der Konsole angezeigt wird</item><item value=\"2\" correct=\"false\">Weil <code>\"Hello\"</code> nicht angezeigt wird</item></selection><p visible-if=\"wrong\">Weil die letzte Konsolennachricht zuerst in der Konsole angezeigt wird.</p></body></html>"
          }
        ]
      },
      {
        "id": 13416,
        "title": "Callbacks und synchrones JS",
        "type": "practiceLevel1",
        "lessons": [
          {
            "title": "Intro",
            "id": 120558,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Du bist bereits auf <strong>Callback</strong>-Funktionen in synchronem JavaScript gestoßen und hast sie verwendet, vielleicht ohne es zu merken.</p><p>Aber lass uns mehr über diese Callbacks lernen!</p></body></html>"
          },
          {
            "title": "Callback Function Definition",
            "id": 120574,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Eine Callback-Funktion ist eine normale Funktion, die wir in eine andere Funktion übergeben und dann aufrufen, um eine Aufgabe auszuführen.</p><p>Hier übergeben wir die <code>logResult</code>-Funktion an unsere <code>add</code>-Funktion, um das Ergebnis der Berechnung anzuzeigen.</p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"function\" class=\"keyword\" /><text value=\" \" /><text value=\"add\" class=\"title\" /><text value=\"(\" /><text value=\"number1, number2, callback\" class=\"params\" /><text value=\") \" /><text value=\"{\" /><text type=\"break\" /><text value=\" \" /><text value=\"let\" class=\"keyword\" /><text value=\" result = number1 + number2;\" /><text type=\"break\" /><text value=\" callback(result);\" /><text type=\"break\" /><text value=\"}\" /><text type=\"break\" /><text type=\"break\" /><text value=\"function\" class=\"keyword\" /><text value=\" \" /><text value=\"logResult\" class=\"title\" /><text value=\"(\" /><text value=\"result\" class=\"params\" /><text value=\") \" /><text value=\"{\" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"`The result is: \" /><text value=\"${result}\" class=\"subst\" /><text value=\"`\" /><text value=\");\" /><text type=\"break\" /><text value=\"}\" /><text type=\"break\" /><text value=\"add(\" /><text value=\"2\" class=\"number\" /><text value=\", \" /><text value=\"3\" class=\"number\" /><text value=\", logResult);\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"181\" endIndex=\"190\" /></options></interaction></interactions><output><content><text value=\"The result is: 5\" /></content></output></code><p visible-if=\"wrong\">Wähle <code>logResult</code> aus.</p></body></html>"
          },
          {
            "title": ".map()",
            "id": 120575,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Du hast bereits Callback-Funktionen in Methoden wie <code>.map()</code> verwendet.</p><p>Hier übergeben wir die <code>callback</code>-Funktion an die <code>.map()</code>-Array-Methode. Darin geben wir <code>num</code> multipliziert mit <code>2</code> zurück. Die Aktion wird für alle Elemente des Arrays wiederholt.</p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" arr = [\" /><text value=\"1\" class=\"number\" /><text value=\", \" /><text value=\"2\" class=\"number\" /><text value=\", \" /><text value=\"3\" class=\"number\" /><text value=\", \" /><text value=\"4\" class=\"number\" /><text value=\", \" /><text value=\"5\" class=\"number\" /><text value=\"];\" /><text type=\"break\" /><text type=\"break\" /><text value=\"function\" class=\"keyword\" /><text value=\" \" /><text value=\"callback\" class=\"title\" /><text value=\"(\" /><text value=\"num\" class=\"params\" /><text value=\") \" /><text value=\"{\" /><text type=\"break\" /><text value=\" \" /><text value=\"return\" class=\"keyword\" /><text value=\" num * \" /><text value=\"2\" class=\"number\" /><text value=\";\" /><text type=\"break\" /><text value=\"}\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" newArray = arr.map(callback);\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(newArray);\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;This code is synchronous.&quot;\" class=\"string\" /><text value=\");\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"95\" endIndex=\"98\" /><option startIndex=\"99\" endIndex=\"107\" /></options></interaction></interactions><output><content><text value=\"[ 2, 4, 6, 8, 10 ]\" /><text type=\"break\" /><text value=\"This code is synchronous.\" /></content></output></code><p visible-if=\"wrong\">Wähle <code>map</code>, gefolgt von <code>callback</code> aus.</p></body></html>"
          },
          {
            "title": ".map() 2",
            "id": 120576,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Die <code>.map()</code>-Methode ist synchron. Sie wird vollständig ausgeführt, bevor die nächste Codezeile läuft.</p><p>Hier können wir alle multiplizierten Zahlen in der Konsole vor der letzten Druckanweisung sehen.</p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" arr = [\" /><text value=\"1\" class=\"number\" /><text value=\", \" /><text value=\"2\" class=\"number\" /><text value=\", \" /><text value=\"3\" class=\"number\" /><text value=\", \" /><text value=\"4\" class=\"number\" /><text value=\", \" /><text value=\"5\" class=\"number\" /><text value=\"];\" /><text type=\"break\" /><text type=\"break\" /><text value=\"function\" class=\"keyword\" /><text value=\" \" /><text value=\"callback\" class=\"title\" /><text value=\"(\" /><text value=\"num\" class=\"params\" /><text value=\") \" /><text value=\"{\" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(num * \" /><text value=\"2\" class=\"number\" /><text value=\");\" /><text type=\"break\" /><text value=\"}\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" newArray = arr.map(callback);\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;This code is synchronous.&quot;\" class=\"string\" /><text value=\");\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"116\" endIndex=\"123\" /><option startIndex=\"123\" endIndex=\"124\" /><option startIndex=\"124\" endIndex=\"127\" /></options></interaction></interactions><output><content><text value=\"2\" /><text type=\"break\" /><text value=\"4\" /><text type=\"break\" /><text value=\"6\" /><text type=\"break\" /><text value=\"8\" /><text type=\"break\" /><text value=\"10\" /><text type=\"break\" /><text value=\"This code is synchronous.\" /></content></output></code><p visible-if=\"wrong\">Wähle <code>console</code>, gefolgt von <code>.</code> und schließlich <code>log</code> aus.</p></body></html>"
          },
          {
            "title": ".filter()",
            "id": 120577,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Du erinnerst dich vielleicht auch an <code>.filter()</code>. Es ist ein weiterer Callback, den du benutzt hast, ohne es zu wissen!</p><p>Hier übergeben wir die <code>callback</code>-Funktion an die <code>.filter()</code>-Methode, um alle geraden Zahlen im ursprünglichen Array zurückzugeben.</p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" arr = [\" /><text value=\"1\" class=\"number\" /><text value=\", \" /><text value=\"2\" class=\"number\" /><text value=\", \" /><text value=\"3\" class=\"number\" /><text value=\", \" /><text value=\"4\" class=\"number\" /><text value=\", \" /><text value=\"5\" class=\"number\" /><text value=\", \" /><text value=\"6\" class=\"number\" /><text value=\", \" /><text value=\"7\" class=\"number\" /><text value=\", \" /><text value=\"8\" class=\"number\" /><text value=\", \" /><text value=\"9\" class=\"number\" /><text value=\", \" /><text value=\"10\" class=\"number\" /><text value=\"];\" /><text type=\"break\" /><text type=\"break\" /><text value=\"function\" class=\"keyword\" /><text value=\" \" /><text value=\"callback\" class=\"title\" /><text value=\"(\" /><text value=\"num\" class=\"params\" /><text value=\") \" /><text value=\"{\" /><text type=\"break\" /><text value=\" \" /><text value=\"return\" class=\"keyword\" /><text value=\" num % \" /><text value=\"2\" class=\"number\" /><text value=\" === \" /><text value=\"0\" class=\"number\" /><text value=\";\" /><text type=\"break\" /><text value=\"}\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" evenNumArray = arr.filter(callback);\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(evenNumArray);\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;This code is also synchronous.&quot;\" class=\"string\" /><text value=\");\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"121\" endIndex=\"127\" /><option startIndex=\"128\" endIndex=\"136\" /></options></interaction></interactions><output><content><text value=\"[ 2, 4, 6, 8, 10 ]\" /><text type=\"break\" /><text value=\"This code is also synchronous.\" /></content></output></code><p visible-if=\"wrong\">Wähle <code>filter</code>, gefolgt von <code>callback</code> aus.</p></body></html>"
          },
          {
            "title": ".filter() 2",
            "id": 120578,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Wieder sehen wir ein Beispiel für eine synchrone JavaScript-Methode, die eine Callback-Funktion verwendet. Übergebe <code>callback</code> an die <code>filter</code>-Methode.</p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" arr = [\" /><text value=\"1\" class=\"number\" /><text value=\", \" /><text value=\"2\" class=\"number\" /><text value=\", \" /><text value=\"3\" class=\"number\" /><text value=\", \" /><text value=\"4\" class=\"number\" /><text value=\", \" /><text value=\"5\" class=\"number\" /><text value=\", \" /><text value=\"6\" class=\"number\" /><text value=\", \" /><text value=\"7\" class=\"number\" /><text value=\", \" /><text value=\"8\" class=\"number\" /><text value=\", \" /><text value=\"9\" class=\"number\" /><text value=\", \" /><text value=\"10\" class=\"number\" /><text value=\"];\" /><text type=\"break\" /><text type=\"break\" /><text value=\"function\" class=\"keyword\" /><text value=\" \" /><text value=\"callback\" class=\"title\" /><text value=\"(\" /><text value=\"num\" class=\"params\" /><text value=\") \" /><text value=\"{\" /><text type=\"break\" /><text value=\" \" /><text value=\"return\" class=\"keyword\" /><text value=\" num % \" /><text value=\"2\" class=\"number\" /><text value=\" === \" /><text value=\"0\" class=\"number\" /><text value=\";\" /><text type=\"break\" /><text value=\"}\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" evenNumArray = arr.filter(callback);\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(evenNumArray);\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;This code is also synchronous.&quot;\" class=\"string\" /><text value=\");\" /></content><interactions><interaction type=\"validatedInput\" isDefault=\"true\" startIndex=\"128\" endIndex=\"136\" /></interactions><output><content><text value=\"[ 2, 4, 6, 8, 10 ]\" /><text type=\"break\" /><text value=\"This code is also synchronous.\" /></content></output></code><p visible-if=\"wrong\">Gib <code>callback</code> ein.</p></body></html>"
          },
          {
            "title": ".map()/.filter()",
            "id": 120583,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Du hast diese Methoden vielleicht in einer anderen Form gesehen, zum Beispiel mit modernen ES6-Arrow-Funktionen.</p><p>Die Arrow Function verwendet nur eine kompakte Syntax, um den Callback zu schreiben, aber das Verhalten ist dasselbe.</p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" arr = [\" /><text value=\"1\" class=\"number\" /><text value=\", \" /><text value=\"2\" class=\"number\" /><text value=\", \" /><text value=\"3\" class=\"number\" /><text value=\", \" /><text value=\"4\" class=\"number\" /><text value=\", \" /><text value=\"5\" class=\"number\" /><text value=\"];\" /><text type=\"break\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" newArray = arr.map(\" /><text value=\"(\" /><text value=\"num\" class=\"params\" /><text value=\") =&gt;\" /><text value=\" num * \" /><text value=\"2\" class=\"number\" /><text value=\");\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(newArray);\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;This code uses an ES6 arrow function.&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;This code is synchronous.&quot;\" class=\"string\" /><text value=\");\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"61\" endIndex=\"63\" /><option startIndex=\"55\" endIndex=\"60\" /></options></interaction></interactions><output><content><text value=\"[ 2, 4, 6, 8, 10 ]\" /><text type=\"break\" /><text value=\"This code uses an ES6 arrow function.\" /><text type=\"break\" /><text value=\"This code is synchronous.\" /></content></output></code><p visible-if=\"wrong\">Wähle <code>(num)</code>, gefolgt von <code>=&gt;</code> aus.</p></body></html>"
          },
          {
            "title": "Question: Callback Function Definition",
            "id": 120726,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Eine Callback-Funktion wird immer innerhalb einer anderen Funktion aufgerufen.</p><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\">Wahr</item><item value=\"2\" correct=\"false\">Falsch</item></selection><p visible-if=\"wrong\">Wähle Wahr aus.</p></body></html>"
          },
          {
            "title": "Question: .map()",
            "id": 120727,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p><code>.map()</code> ist eine JavaScript-Methode, die asynchron ausgeführt wird.</p><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\">Falsch</item><item value=\"2\" correct=\"false\">Wahr</item></selection><p visible-if=\"wrong\">Wähle Falsch aus.</p></body></html>"
          },
          {
            "title": "Question: .filter()",
            "id": 120729,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Welche Aussage trifft auf die Methoden <code>.filter()</code> und <code>.map()</code> zu?</p><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\">Sie werden synchron ausgeführt</item><item value=\"2\" correct=\"false\">Sie werden asynchron ausgeführt</item></selection><p visible-if=\"wrong\">Sie werden synchron ausgeführt.</p></body></html>"
          },
          {
            "title": "Question: .filter() 2",
            "id": 120730,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>JavaScript-Methoden erfordern manchmal Callback-Funktionen während ihrer Ausführung.</p><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\">Wahr</item><item value=\"2\" correct=\"false\">Falsch</item></selection><p visible-if=\"wrong\">Wähle Wahr aus.</p></body></html>"
          },
          {
            "title": "Question: .map()/.filter()",
            "id": 120731,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Welche Aussage trifft auf Callback-Funktionen in JavaScript zu?</p><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\">Sie können mit ES6-Arrow-Funktionen geschrieben werden</item><item value=\"2\" correct=\"false\">Sie können niemals mit ES6 Arrow Functions geschrieben werden</item></selection><p visible-if=\"wrong\">Sie können mit ES6-Arrow-Funktionen geschrieben werden.</p></body></html>"
          },
          {
            "title": "Question: .filter()/Callback",
            "id": 120839,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Was ist die Callback-Funktion in diesem synchronen Code?</p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" arr = [\" /><text value=\"11\" class=\"number\" /><text value=\", \" /><text value=\"12\" class=\"number\" /><text value=\", \" /><text value=\"13\" class=\"number\" /><text value=\", \" /><text value=\"14\" class=\"number\" /><text value=\", \" /><text value=\"15\" class=\"number\" /><text value=\", \" /><text value=\"16\" class=\"number\" /><text value=\", \" /><text value=\"17\" class=\"number\" /><text value=\", \" /><text value=\"18\" class=\"number\" /><text value=\", \" /><text value=\"19\" class=\"number\" /><text value=\", \" /><text value=\"20\" class=\"number\" /><text value=\"];\" /><text type=\"break\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" evenArray = \" /><text value=\"(\" /><text value=\"num\" class=\"params\" /><text value=\") =&gt;\" /><text value=\" num % \" /><text value=\"2\" class=\"number\" /><text value=\" === \" /><text value=\"0\" class=\"number\" /><text value=\";\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" newArray = arr.filter(evenArray);\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(newArray);\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;This code is synchronous.&quot;\" class=\"string\" /><text value=\");\" /></content><output><content><text value=\"[ 12, 14, 16, 18, 20 ]\" /><text type=\"break\" /><text value=\"This code is synchronous.\" /></content></output></code><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\"><code>evenArray</code></item><item value=\"2\" correct=\"false\"><code>newArray</code></item></selection><p visible-if=\"wrong\">Wähle <code>evenArray</code> aus.</p></body></html>"
          },
          {
            "title": "Example: .map()",
            "id": 120734,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Rufe die <code>.map</code>-Methode mit <code>makePositive</code> als Callback auf.</p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" arr = [\" /><text value=\"-1\" class=\"number\" /><text value=\", \" /><text value=\"-2\" class=\"number\" /><text value=\", \" /><text value=\"-3\" class=\"number\" /><text value=\", \" /><text value=\"-4\" class=\"number\" /><text value=\", \" /><text value=\"-5\" class=\"number\" /><text value=\"];\" /><text type=\"break\" /><text type=\"break\" /><text value=\"function\" class=\"keyword\" /><text value=\" \" /><text value=\"makePositive\" class=\"title\" /><text value=\"(\" /><text value=\"num\" class=\"params\" /><text value=\") \" /><text value=\"{\" /><text type=\"break\" /><text value=\" \" /><text value=\"return\" class=\"keyword\" /><text value=\" num * \" /><text value=\"-1\" class=\"number\" /><text value=\";\" /><text type=\"break\" /><text value=\"}\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" positiveArray = arr.map(makePositive);\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(positiveArray);\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;This code is synchronous.&quot;\" class=\"string\" /><text value=\");\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"106\" endIndex=\"109\" /><option startIndex=\"109\" endIndex=\"110\" /><option startIndex=\"110\" endIndex=\"113\" /><option startIndex=\"113\" endIndex=\"128\" /></options></interaction></interactions><output><content><text value=\"[ 1, 2, 3, 4, 5 ]\" /><text type=\"break\" /><text value=\"This code is synchronous.\" /></content></output></code><p visible-if=\"wrong\">Wähle <code>arr</code>, gefolgt von <code>.</code> und schließlich <code>map</code>, <code>(makePositive);</code> aus.</p></body></html>"
          }
        ]
      },
      {
        "id": 13417,
        "title": "Callbacks und asynchrones JS",
        "type": "practiceLevel1",
        "lessons": [
          {
            "title": "Intro",
            "id": 120559,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Wir haben Callback-Funktionen in synchronem JavaScript gesehen. Schauen wir uns nun angepasste Callbacks und Callbacks in asynchronem Code an.</p></body></html>"
          },
          {
            "title": "Callback Functions",
            "id": 120654,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Denke daran, dass eine Callback-Funktion eine Funktion ist, die wir in eine andere Funktion übergeben und dann aufrufen, um eine Aufgabe auszuführen.</p><p>Wir haben gesehen, dass JavaScript-Methoden wie <code>.map()</code> und <code>.filter()</code> dafür ausgelegt sind, eine Callback-Funktion zu akzeptieren.</p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" arr = [\" /><text value=\"1\" class=\"number\" /><text value=\", \" /><text value=\"2\" class=\"number\" /><text value=\", \" /><text value=\"3\" class=\"number\" /><text value=\", \" /><text value=\"4\" class=\"number\" /><text value=\", \" /><text value=\"5\" class=\"number\" /><text value=\"];\" /><text type=\"break\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" newArray = arr.map(\" /><text value=\"(\" /><text value=\"num\" class=\"params\" /><text value=\") =&gt;\" /><text value=\" num * \" /><text value=\"2\" class=\"number\" /><text value=\");\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(newArray);\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;This code is synchronous.&quot;\" class=\"string\" /><text value=\");\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"47\" endIndex=\"50\" /><option startIndex=\"50\" endIndex=\"51\" /><option startIndex=\"51\" endIndex=\"54\" /></options></interaction></interactions><output><content><text value=\"[ 2, 4, 6, 8, 10 ]\" /><text type=\"break\" /><text value=\"This code is synchronous.\" /></content></output></code><p visible-if=\"wrong\">Wähle <code>arr</code>, gefolgt von <code>.</code> und schließlich <code>map</code> aus.</p></body></html>"
          },
          {
            "title": "Callback Functions II",
            "id": 120835,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Wir können auch unsere eigenen Funktionen anpassen, um einen Callback zu akzeptieren und auszuführen.</p><p>Hier können wir die <code>sayGoodbye</code>-Funktion, die <code>\"Goodbye\"</code> anzeigt, in die <code>greet()</code>-Funktion übergeben.</p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"function\" class=\"keyword\" /><text value=\" \" /><text value=\"greet\" class=\"title\" /><text value=\"(\" /><text value=\"name, callback\" class=\"params\" /><text value=\") \" /><text value=\"{\" /><text type=\"break\" /><text value=\"  \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"`Hello, \" /><text value=\"${name}\" class=\"subst\" /><text value=\"!`\" /><text value=\");\" /><text type=\"break\" /><text value=\"  callback();\" /><text type=\"break\" /><text value=\"}\" /><text type=\"break\" /><text type=\"break\" /><text value=\"function\" class=\"keyword\" /><text value=\" \" /><text value=\"sayGoodbye\" class=\"title\" /><text value=\"(\" /><text value=\"\" class=\"params\" /><text value=\") \" /><text value=\"{\" /><text type=\"break\" /><text value=\"  \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;Goodbye!&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\"}\" /><text type=\"break\" /><text type=\"break\" /><text value=\"greet(\" /><text value=\"&quot;Teresa&quot;\" class=\"string\" /><text value=\", sayGoodbye);\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"154\" endIndex=\"164\" /><option startIndex=\"138\" endIndex=\"143\" /></options></interaction></interactions><output><content><text value=\"Hello, Teresa!\" /><text type=\"break\" /><text value=\"Goodbye!\" /></content></output></code><p visible-if=\"wrong\">Wähle <code>greet</code>, gefolgt von <code>sayGoodbye</code> aus.</p></body></html>"
          },
          {
            "title": "Customizing Callbacks",
            "id": 120655,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Wir können einen Callback anpassen, um alles zu tun, was wir benötigen.</p><p>Lass uns die Funktion <code>doSomeMath</code> mit dem <code>input</code>-Parameter auf <code>2</code> und dem <code>callback</code>-Parameter auf <code>multiplyCallback</code> setzen.</p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"function\" class=\"keyword\" /><text value=\" \" /><text value=\"multiplyCallback\" class=\"title\" /><text value=\"(\" /><text value=\"num\" class=\"params\" /><text value=\") \" /><text value=\"{\" /><text type=\"break\" /><text value=\" \" /><text value=\"const\" class=\"keyword\" /><text value=\" result = num * \" /><text value=\"2\" class=\"number\" /><text value=\";\" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"`The input doubled is equal to \" /><text value=\"${result}\" class=\"subst\" /><text value=\"`\" /><text value=\");\" /><text type=\"break\" /><text value=\"}\" /><text type=\"break\" /><text type=\"break\" /><text value=\"function\" class=\"keyword\" /><text value=\" \" /><text value=\"doSomeMath\" class=\"title\" /><text value=\"(\" /><text value=\"input, callback\" class=\"params\" /><text value=\") \" /><text value=\"{\" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;We are doubling the input number.&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\" callback(input);\" /><text type=\"break\" /><text value=\"}\" /><text type=\"break\" /><text value=\"doSomeMath(\" /><text value=\"2\" class=\"number\" /><text value=\", multiplyCallback);\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"228\" endIndex=\"238\" /><option startIndex=\"238\" endIndex=\"239\" /><option startIndex=\"239\" endIndex=\"241\" /><option startIndex=\"242\" endIndex=\"258\" /><option startIndex=\"258\" endIndex=\"259\" /></options></interaction></interactions><output><content><text value=\"We are doubling the input number.\" /><text type=\"break\" /><text value=\"The input doubled is equal to 4\" /></content></output></code><p visible-if=\"wrong\">Wähle <code>doSomeMath</code>, gefolgt von <code>(</code> und schließlich <code>2,</code>, <code>multiplyCallback</code>, <code>)</code> aus.</p></body></html>"
          },
          {
            "title": "Asynchronous Callback",
            "id": 120723,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Wir können auch Callback-Funktionen in asynchronen JavaScript-Methoden verwenden. Übergebe den Callback in die asynchrone Methode <code>setTimeout()</code>.</p><p>Du wirst später mehr über diese Methode lernen, konzentriere dich jetzt auf die Konsolenausgabe.</p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"function\" class=\"keyword\" /><text value=\" \" /><text value=\"callbackFunc\" class=\"title\" /><text value=\"(\" /><text value=\"\" class=\"params\" /><text value=\") \" /><text value=\"{\" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;Executed last because we're using asynchronous code.&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\"}\" /><text type=\"break\" /><text value=\"setTimeout(callbackFunc, \" /><text value=\"1500\" class=\"number\" /><text value=\");\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"'Executed first'\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"'Executed second'\" class=\"string\" /><text value=\");\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"109\" endIndex=\"121\" /></options></interaction></interactions><output><content><text value=\"Executed first\" /><text type=\"break\" /><text value=\"Executed second\" /><text type=\"break\" /><text value=\"Executed last because we're using asynchronous code.\" /></content></output></code><p visible-if=\"wrong\">Wähle <code>callbackFunc</code> aus.</p></body></html>"
          },
          {
            "title": "Asynchronous Callback 2",
            "id": 120656,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Wir können Synchronität und Asynchronität zusammen nutzen. Hier verketten wir Operationen zu einem String, der nacheinander ausgeführt wird.</p><p> Führe dann unsere angepasste Funktion als Callback asynchron aus.</p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" word = \" /><text value=\"&quot;enola&quot;\" class=\"string\" /><text value=\";\" /><text type=\"break\" /><text value=\"function\" class=\"keyword\" /><text value=\" \" /><text value=\"reverseCallback\" class=\"title\" /><text value=\"(\" /><text value=\"\" class=\"params\" /><text value=\") \" /><text value=\"{\" /><text type=\"break\" /><text value=\" \" /><text value=\"const\" class=\"keyword\" /><text value=\" result = word.split(\" /><text value=\"&quot;&quot;\" class=\"string\" /><text value=\").reverse().join(\" /><text value=\"&quot;&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"`The string reversed is: &quot;\" /><text value=\"${result}\" class=\"subst\" /><text value=\"&quot;`\" /><text value=\");\" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;Executed last because we're using asynchronous code.&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\"}\" /><text type=\"break\" /><text value=\"setTimeout(reverseCallback, \" /><text value=\"1500\" class=\"number\" /><text value=\");\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"'Executed first'\" class=\"string\" /><text value=\");\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"238\" endIndex=\"253\" /></options></interaction></interactions><output><content><text value=\"Executed first\" /><text type=\"break\" /><text value=\"The string reversed is: &quot;alone&quot;\" /><text type=\"break\" /><text value=\"Executed last because we're using asynchronous code.\" /></content></output></code><p visible-if=\"wrong\">Wähle <code>reverseCallback</code> aus.</p></body></html>"
          },
          {
            "title": "Asynchronous JS History",
            "id": 120652,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Auch wenn benutzerdefinierte Callbacks vorteilhaft sein können, führt eine zu große Anzahl von Callbacks zu einer tiefen Verschachtelung.</p><p>Tief verschachtelter Code ist unerwünscht, weil er schwer zu verstehen und zu warten ist. Du wirst bald Syntax lernen, die dabei hilft, dies zu vereinfachen.</p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"func1(\" /><text value=\"&quot;one&quot;\" class=\"string\" /><text value=\", () =&gt; {\" /><text type=\"break\" /><text value=\" func2(\" /><text value=\"&quot;two&quot;\" class=\"string\" /><text value=\", () =&gt; {\" /><text type=\"break\" /><text value=\"  func3(\" /><text value=\"&quot;three&quot;\" class=\"string\" /><text value=\", () =&gt; {\" /><text type=\"break\" /><text value=\"   \" /><text value=\"// etc...\" class=\"comment\" /><text type=\"break\" /><text value=\"  });\" /><text type=\"break\" /><text value=\" });\" /><text type=\"break\" /><text value=\"});\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"0\" endIndex=\"5\" /><option startIndex=\"22\" endIndex=\"27\" /><option startIndex=\"45\" endIndex=\"50\" /></options></interaction></interactions></code><p visible-if=\"wrong\">Wähle <code>func1</code>, gefolgt von <code>func2</code> und schließlich <code>func3</code> aus.</p></body></html>"
          },
          {
            "title": "Question: Asynhchronous JS History",
            "id": 120744,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Was ist ein häufiges Problem bei der Verwendung von nur Callbacks zur Implementierung von asynchronem JavaScript-Code?</p><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\">Wir können am Ende einen tief verschachtelten Code haben</item><item value=\"2\" correct=\"false\">Wir können keine Callbacks verwenden, seit ES8 eingeführt wurde</item></selection><p visible-if=\"wrong\">Wir können am Ende einen tief verschachtelten Code haben.</p></body></html>"
          },
          {
            "title": "Question: Callback Functions",
            "id": 120746,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Was ist ein Merkmal von Callback-Funktionen?</p><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\">Sie werden immer innerhalb einer anderen Funktion aufgerufen</item><item value=\"2\" correct=\"false\">Sie können nur einmal aufgerufen werden</item></selection><p visible-if=\"wrong\">Sie werden immer innerhalb einer anderen Funktion aufgerufen.</p></body></html>"
          },
          {
            "title": "Question: Customizing Callbacks",
            "id": 120747,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Was ist wahr über Callback-Funktionen?</p><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\">Wir können sie anpassen, um alles zu tun, was wir tun müssen</item><item value=\"2\" correct=\"false\">Sie sind auf mathematische Operationen beschränkt</item></selection><p visible-if=\"wrong\">Wir können sie anpassen, um alles zu tun, was wir tun müssen.</p></body></html>"
          },
          {
            "title": "Question: Asynchronous Callback",
            "id": 120748,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Was ist zutreffend in Bezug auf Callback-Funktionen?</p><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\">Wir können sie mit asynchronem Code verwenden</item><item value=\"2\" correct=\"false\">Wir können sie nicht mit asynchronem Code verwenden</item></selection><p visible-if=\"wrong\">Wir können sie mit asynchronem Code verwenden.</p></body></html>"
          },
          {
            "title": "Example: Callback Functions/ES6",
            "id": 120753,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Vervollständige die Callback-Funktion, die wir in <code>sayHello</code> übergeben.</p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" sayHello = \" /><text value=\"(\" /><text value=\"name, callback\" class=\"params\" /><text value=\") =&gt;\" /><text value=\" {\" /><text type=\"break\" /><text value=\"  \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"`Hello, \" /><text value=\"${name}\" class=\"subst\" /><text value=\"!`\" /><text value=\");\" /><text type=\"break\" /><text value=\"  callback();\" /><text type=\"break\" /><text value=\"};\" /><text type=\"break\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" sayGoodbye = \" /><text value=\"()\" class=\"params\" /><text value=\" =&gt;\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;Goodbye!&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text type=\"break\" /><text value=\"sayHello(\" /><text value=\"&quot;Jon&quot;\" class=\"string\" /><text value=\", sayGoodbye);\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"75\" endIndex=\"86\" /><option startIndex=\"97\" endIndex=\"107\" /><option startIndex=\"158\" endIndex=\"168\" /></options></interaction></interactions><output><content><text value=\"Hello, Jon!\" /><text type=\"break\" /><text value=\"Goodbye!\" /></content></output></code><p visible-if=\"wrong\">Wähle <code>callback();</code>, gefolgt von <code>sayGoodbye</code> und schließlich <code>sayGoodbye</code> aus.</p></body></html>"
          },
          {
            "title": "Example: Customizing Callbacks",
            "id": 120754,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Vervollständige den Aufruf von <code>doSomeMath()</code>, indem du die angepasste Callback-Funktion als zweiten Parameter übergibst.</p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"function\" class=\"keyword\" /><text value=\" \" /><text value=\"multiplyCallback\" class=\"title\" /><text value=\"(\" /><text value=\"num\" class=\"params\" /><text value=\") \" /><text value=\"{\" /><text type=\"break\" /><text value=\" \" /><text value=\"const\" class=\"keyword\" /><text value=\" result = num * \" /><text value=\"2\" class=\"number\" /><text value=\";\" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"`The input doubled is equal to \" /><text value=\"${result}\" class=\"subst\" /><text value=\"`\" /><text value=\");\" /><text type=\"break\" /><text value=\"}\" /><text type=\"break\" /><text type=\"break\" /><text value=\"function\" class=\"keyword\" /><text value=\" \" /><text value=\"doSomeMath\" class=\"title\" /><text value=\"(\" /><text value=\"input, callback\" class=\"params\" /><text value=\") \" /><text value=\"{\" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;We are doubling the input number.&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\" callback(input);\" /><text type=\"break\" /><text value=\"}\" /><text type=\"break\" /><text value=\"doSomeMath(\" /><text value=\"2\" class=\"number\" /><text value=\", multiplyCallback);\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"242\" endIndex=\"258\" /></options></interaction></interactions><output><content><text value=\"We are doubling the input number.\" /><text type=\"break\" /><text value=\"The input doubled is equal to 4\" /></content></output></code><p visible-if=\"wrong\">Wähle <code>multiplyCallback</code> aus.</p></body></html>"
          },
          {
            "title": "Example: Asynchronous Callback",
            "id": 120755,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Übergebe die Callback-Funktion an <code>setTimeout()</code>, um diesen asynchronen Code zu vervollständigen.</p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"function\" class=\"keyword\" /><text value=\" \" /><text value=\"callbackFunc\" class=\"title\" /><text value=\"(\" /><text value=\"\" class=\"params\" /><text value=\") \" /><text value=\"{\" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;Executed last because we're using asynchronous code.&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\"}\" /><text type=\"break\" /><text value=\"setTimeout(callbackFunc, \" /><text value=\"1500\" class=\"number\" /><text value=\");\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"'Executed first'\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"'Executed second'\" class=\"string\" /><text value=\");\" /></content><interactions><interaction type=\"validatedInput\" isDefault=\"true\" startIndex=\"109\" endIndex=\"121\" /></interactions></code><p visible-if=\"wrong\">Gib <code>callbackFunc</code> ein.</p></body></html>"
          }
        ]
      }
    ]
  }
}