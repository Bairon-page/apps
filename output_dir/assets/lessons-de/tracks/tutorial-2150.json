{
  "tutorial": {
    "id": 2150,
    "version": 5,
    "type": "course",
    "isNew": false,
    "codeLanguage": "javascript",
    "title": "Timeouts und Intervalle in JS",
    "descriptionContent": "Lerne über die asynchronen Methoden in JavaScript: setTimeout, setInterval und clearInterval.",
    "shortDescriptionContent": "",
    "showInTrack": true,
    "iconBanner": null,
    "chapters": [
      {
        "id": 13418,
        "title": "setTimeout",
        "type": "practiceLevel1",
        "lessons": [
          {
            "title": "Intro",
            "id": 120560,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>JavaScript hat einige native Methoden, die Code asynchron ausführen, wie <code>setTimeout()</code> und <code>setInterval()</code>.</p><p>In diesem Kapitel werfen wir einen Blick auf die <code>setTimeout()</code>-Methode.</p></body></html>"
          },
          {
            "title": "setTimeout()",
            "id": 120594,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Die <code>setTimeout()</code>-Methode setzt einen Timer in Millisekunden, der eine Funktion oder einen Codeblock ausführt, wenn der Timer abläuft.</p><p>Programmiere deine erste <code>setTimeout</code>-Methode im Beispielcode.</p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"'Executed First'\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\"setTimeout(\" /><text value=\"()\" class=\"params\" /><text value=\" =&gt;\" /><text value=\" {\" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"'Executed Last'\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\"}, \" /><text value=\"2000\" class=\"number\" /><text value=\");\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"'Executed Second'\" class=\"string\" /><text value=\");\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"31\" endIndex=\"41\" /></options></interaction></interactions><output><content><text value=\"Executed First\" /><text type=\"break\" /><text value=\"Executed Second\" /><text type=\"break\" /><text value=\"Executed Last\" /></content></output></code><p visible-if=\"wrong\">Wähle <code>setTimeout</code> aus.</p></body></html>"
          },
          {
            "title": "setTimeout() 2",
            "id": 120595,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Der Code hier ist asynchron. Das bedeutet, dass während wir darauf warten, dass der <em>callback</em> ausgeführt wird, der Code nach der <code>setTimeout</code>-Methode ausgeführt wird.</p><p>Die Konsolenausgabe der <code>setTimeout</code>-Methode wird zuletzt angezeigt, aufgrund der Verzögerung in der <code>setTimeout</code>-Methode.</p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"'Executed First'\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\"setTimeout(\" /><text value=\"()\" class=\"params\" /><text value=\" =&gt;\" /><text value=\" {\" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"'Executed Last'\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\"}, \" /><text value=\"2000\" class=\"number\" /><text value=\");\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"'Executed Second'\" class=\"string\" /><text value=\");\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"31\" endIndex=\"41\" /></options></interaction></interactions><output><content><text value=\"Executed First\" /><text type=\"break\" /><text value=\"Executed Second\" /><text type=\"break\" /><text value=\"Executed Last\" /></content></output></code><p visible-if=\"wrong\">Wähle <code>setTimeout</code> aus.</p></body></html>"
          },
          {
            "title": "Delay Parameter",
            "id": 120596,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Der <code>delay</code>-Parameter ist die Zeit in Millisekunden, die vergeht, bevor die Funktion oder der Codeblock ausgeführt wird.</p><p>Im folgenden Code setze eine Verzögerung von <code>2000</code> Millisekunden, damit der Codeblock ausgeführt wird.</p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"'Executed First'\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\"setTimeout(\" /><text value=\"()\" class=\"params\" /><text value=\" =&gt;\" /><text value=\" {\" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"'Executed after 2 seconds'\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\"}, \" /><text value=\"2000\" class=\"number\" /><text value=\");\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"'Executed Second'\" class=\"string\" /><text value=\");\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"95\" endIndex=\"99\" /></options></interaction></interactions><output><content><text value=\"Executed First\" /><text type=\"break\" /><text value=\"Executed Second\" /><text type=\"break\" /><text value=\"Executed after 2 seconds\" /></content></output></code><p visible-if=\"wrong\">Wähle <code>2000</code> aus.</p></body></html>"
          },
          {
            "title": "Delay of 0",
            "id": 120598,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p><code>setTimeout()</code> ist immer asynchron, selbst wenn der <code>delay</code>-Parameter weggelassen wird oder wir ihn auf <code>0</code> setzen.</p><p>Mit einem <code>delay</code> von <code>0</code> wird der Code nach der <code>setTimeout()</code>-Methode sofort ausgeführt, aber die Callback-Funktion wird <em>so schnell wie möglich</em> ausgeführt.</p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"'Executed First'\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\"setTimeout(\" /><text value=\"()\" class=\"params\" /><text value=\" =&gt;\" /><text value=\" {\" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"'Executed Last, even if we set 0 seconds '\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\"}, \" /><text value=\"0\" class=\"number\" /><text value=\");\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"'Executed Second'\" class=\"string\" /><text value=\");\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"111\" endIndex=\"112\" /></options></interaction></interactions><output><content><text value=\"Executed First\" /><text type=\"break\" /><text value=\"Executed Second\" /><text type=\"break\" /><text value=\"Executed Last, even if we set 0 seconds \" /></content></output></code><p visible-if=\"wrong\">Wähle <code>0</code> aus.</p></body></html>"
          },
          {
            "title": "Callback Function",
            "id": 120597,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p><code>setTimeout()</code> führt den <code>callback</code> nach der angegebenen <code>delay</code> aus.</p><p>Der Code <em>nach</em> dem <code>setTimeout</code> wird weiterhin ausgeführt, unabhängig davon, ob ein Callback oder ein Codeblock verwendet wird.</p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"function\" class=\"keyword\" /><text value=\" \" /><text value=\"callback\" class=\"title\" /><text value=\"(\" /><text value=\"\" class=\"params\" /><text value=\") \" /><text value=\"{\" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;Executed Last because of setTimeout&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\"}\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"'Executed First'\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\"setTimeout(callback, \" /><text value=\"2000\" class=\"number\" /><text value=\");\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"'Executed Second'\" class=\"string\" /><text value=\");\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"119\" endIndex=\"127\" /></options></interaction></interactions><output><content><text value=\"Executed First\" /><text type=\"break\" /><text value=\"Executed Second\" /><text type=\"break\" /><text value=\"Executed Last because of setTimeout\" /></content></output></code><p visible-if=\"wrong\">Wähle <code>callback</code> aus.</p></body></html>"
          },
          {
            "title": "Question: Intro",
            "id": 120760,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Welche Aussage trifft auf JavaScript-Methoden zu?</p><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\">JavaScript hat einige Methoden, die Code asynchron ausführen</item><item value=\"2\" correct=\"false\">JavaScript hat nur Methoden, die Code synchron ausführen</item></selection><p visible-if=\"wrong\">JavaScript hat einige Methoden, die Code asynchron ausführen.</p></body></html>"
          },
          {
            "title": "Question: setTimeout()",
            "id": 120761,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Was macht die <code>setTimeout()</code>-Methode?</p><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\">Es führt eine Callback-Funktion aus, wenn ein Timer abläuft</item><item value=\"2\" correct=\"false\">Es stellt nur einen Timer ein</item></selection><p visible-if=\"wrong\">Es führt eine Callback-Funktion aus, wenn ein Timer abläuft.</p></body></html>"
          },
          {
            "title": "Question: setTimeout() 2",
            "id": 120762,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Welche Aussage ist wahr in Bezug auf die <code>setTimeout()</code>-Methode?</p><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\">Es ist eine asynchrone JavaScript-Methode</item><item value=\"2\" correct=\"false\">Es ist eine synchronisierte JavaScript-Methode</item></selection><p visible-if=\"wrong\">Es ist eine asynchrone JavaScript-Methode.</p></body></html>"
          },
          {
            "title": "Question: Delay Parameter",
            "id": 120763,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Was macht der <code>delay</code>-Parameter von <code>setTimeout()</code>?</p><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\">Es gibt an, wie viele Millisekunden vergehen, bevor der Callback ausgeführt wird</item><item value=\"2\" correct=\"false\">Es führt dazu, dass der gesamte Code nicht mehr ausgeführt wird</item></selection><p visible-if=\"wrong\">Es gibt an, wie viele Millisekunden vergehen, bevor der Callback ausgeführt wird.</p></body></html>"
          },
          {
            "title": "Question: Delay of 0",
            "id": 120764,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Was ist der Standardwert des <code>delay</code>-Parameters, wenn wir keinen Wert dafür übergeben?</p><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\">0 Millisekunden</item><item value=\"2\" correct=\"false\">1000 Millisekunden</item></selection><p visible-if=\"wrong\">0 Millisekunden.</p></body></html>"
          },
          {
            "title": "Question: Callback Function",
            "id": 120765,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Wann wird die Callback-Funktion von <code>setTimeout()</code> ausgeführt?</p><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\">Nachdem der Timer, der durch den <code>delay</code>-Parameter gesetzt wurde, abläuft</item><item value=\"2\" correct=\"false\">Bevor der Timer, der durch den <code>delay</code>-Parameter festgelegt wurde, abläuft</item></selection><p visible-if=\"wrong\">Nachdem der Timer, der durch den <code>delay</code>-Parameter gesetzt wurde, abläuft.</p></body></html>"
          },
          {
            "title": "Example: setTimeout()",
            "id": 120767,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Code die <code>setTimeout()</code>-Methode, um den Code zu vervollständigen.</p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"let\" class=\"keyword\" /><text value=\" counter = \" /><text value=\"0\" class=\"number\" /><text value=\";\" /><text type=\"break\" /><text value=\"function\" class=\"keyword\" /><text value=\" \" /><text value=\"calculate\" class=\"title\" /><text value=\"(\" /><text value=\"\" class=\"params\" /><text value=\") \" /><text value=\"{\" /><text type=\"break\" /><text value=\" \" /><text value=\"// complex calculation\" class=\"comment\" /><text type=\"break\" /><text value=\" \" /><text value=\"// updates `counter` variable\" class=\"comment\" /><text type=\"break\" /><text value=\"}\" /><text type=\"break\" /><text value=\"calculate();\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"'Calculating...'\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" answer = \" /><text value=\"`The result is \" /><text value=\"${counter}\" class=\"subst\" /><text value=\" solutions`\" /><text value=\";\" /><text type=\"break\" /><text value=\"setTimeout(\" /><text value=\"()\" class=\"params\" /><text value=\" =&gt;\" /><text value=\" {\" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(answer);\" /><text type=\"break\" /><text value=\"}, \" /><text value=\"9000\" class=\"number\" /><text value=\");\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"'Please enter your next request while waiting.'\" class=\"string\" /><text value=\");\" /></content><interactions><interaction type=\"validatedInput\" isDefault=\"true\" startIndex=\"194\" endIndex=\"204\" /></interactions><output><content><text value=\"Calculating...\" /><text type=\"break\" /><text value=\"Please enter your next request while waiting.\" /><text type=\"break\" /><text value=\"The result is 1000 solutions\" /></content></output></code><p visible-if=\"wrong\">Gib <code>setTimeout</code> ein.</p></body></html>"
          },
          {
            "title": "Example: Delay Parameter",
            "id": 120769,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Code eine <code>8000</code> Millisekunden-Verzögerung in der <code>setTimeout()</code>-Methode.</p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"let\" class=\"keyword\" /><text value=\" counter = \" /><text value=\"0\" class=\"number\" /><text value=\";\" /><text type=\"break\" /><text value=\"function\" class=\"keyword\" /><text value=\" \" /><text value=\"calculate\" class=\"title\" /><text value=\"(\" /><text value=\"\" class=\"params\" /><text value=\") \" /><text value=\"{\" /><text type=\"break\" /><text value=\" \" /><text value=\"// complex calculation\" class=\"comment\" /><text type=\"break\" /><text value=\" \" /><text value=\"// updates `counter` variable\" class=\"comment\" /><text type=\"break\" /><text value=\"}\" /><text type=\"break\" /><text value=\"calculate();\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"'Calculating...'\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" answer = \" /><text value=\"`The result is \" /><text value=\"${counter}\" class=\"subst\" /><text value=\" solutions`\" /><text value=\";\" /><text type=\"break\" /><text value=\"setTimeout(\" /><text value=\"()\" class=\"params\" /><text value=\" =&gt;\" /><text value=\" {\" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(answer);\" /><text type=\"break\" /><text value=\"}, \" /><text value=\"8000\" class=\"number\" /><text value=\");\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"'Please enter your next request while waiting.'\" class=\"string\" /><text value=\");\" /></content><interactions><interaction type=\"validatedInput\" isDefault=\"true\" startIndex=\"238\" endIndex=\"242\" /></interactions><output><content><text value=\"Calculating...\" /><text type=\"break\" /><text value=\"Please enter your next request while waiting.\" /><text type=\"break\" /><text value=\"The result is 875 solutions\" /></content></output></code><p visible-if=\"wrong\">Gib <code>8000</code> ein.</p></body></html>"
          },
          {
            "title": "Example: Delay of 0",
            "id": 120770,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Vervollständige den Code, damit die Callback-Funktion so schnell wie möglich ausgeführt wird.</p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"'Executed First'\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\"setTimeout(\" /><text value=\"()\" class=\"params\" /><text value=\" =&gt;\" /><text value=\" {\" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"'Executed Last because of setTimeout(), even with no delay'\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\"}, \" /><text value=\"0\" class=\"number\" /><text value=\");\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"'Executed Second'\" class=\"string\" /><text value=\");\" /></content><interactions><interaction type=\"validatedInput\" isDefault=\"true\" startIndex=\"128\" endIndex=\"129\" /></interactions><output><content><text value=\"Executed First\" /><text type=\"break\" /><text value=\"Executed Second\" /><text type=\"break\" /><text value=\"Executed Last because of setTimeout(), even with no delay\" /></content></output></code><p visible-if=\"wrong\">Gib <code>0</code> ein.</p></body></html>"
          },
          {
            "title": "Example: Callback Function",
            "id": 120771,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Code die Callback-Funktion, die das Ergebnis von <code>calculate()</code> für den ersten Parameter von <code>setTimeout()</code> ausgibt.</p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"let\" class=\"keyword\" /><text value=\" counter = \" /><text value=\"0\" class=\"number\" /><text value=\";\" /><text type=\"break\" /><text type=\"break\" /><text value=\"function\" class=\"keyword\" /><text value=\" \" /><text value=\"calculate\" class=\"title\" /><text value=\"(\" /><text value=\"\" class=\"params\" /><text value=\") \" /><text value=\"{\" /><text type=\"break\" /><text value=\" \" /><text value=\"// complex calculation\" class=\"comment\" /><text type=\"break\" /><text value=\" \" /><text value=\"// updates `counter` variable\" class=\"comment\" /><text type=\"break\" /><text value=\"}\" /><text type=\"break\" /><text value=\"calculate();\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"'Calculating...'\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" answer = \" /><text value=\"`The result is \" /><text value=\"${counter}\" class=\"subst\" /><text value=\" solutions`\" /><text value=\";\" /><text type=\"break\" /><text type=\"break\" /><text value=\"function\" class=\"keyword\" /><text value=\" \" /><text value=\"printAnswer\" class=\"title\" /><text value=\"(\" /><text value=\"\" class=\"params\" /><text value=\") \" /><text value=\"{\" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(answer);\" /><text type=\"break\" /><text value=\"}\" /><text type=\"break\" /><text value=\"setTimeout(printAnswer, \" /><text value=\"5000\" class=\"number\" /><text value=\");\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"'Please enter your next request while waiting.'\" class=\"string\" /><text value=\");\" /></content><interactions><interaction type=\"validatedInput\" isDefault=\"true\" startIndex=\"256\" endIndex=\"267\" /></interactions><output><content><text value=\"Calculating...\" /><text type=\"break\" /><text value=\"Please enter your next request while waiting.\" /><text type=\"break\" /><text value=\"The result is 450 solutions\" /></content></output></code><p visible-if=\"wrong\">Gib <code>printAnswer</code> ein.</p></body></html>"
          }
        ]
      },
      {
        "id": 13419,
        "title": "setInterval und clearInterval",
        "type": "practiceLevel1",
        "lessons": [
          {
            "title": "Intro",
            "id": 120561,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p><code>setInterval()</code> ist eine weitere native JavaScript-Methode, die Code asynchron ausführt.</p><p>Mit <code>setInterval</code> können wir Code in regelmäßigen Abständen ausführen. Lass uns mehr über diese Methode lernen.</p></body></html>"
          },
          {
            "title": "setInterval()",
            "id": 120836,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p><code>setInterval()</code> nimmt eine Callback-Funktion und ein Intervall als Parameter. Hier schaltet der <code>toggleBlinker</code> die Blinker ein und aus.</p><p>Übergebe die Callback-Funktion und das Intervall an den <code>setInterval</code>-Aufruf.</p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"let\" class=\"keyword\" /><text value=\" blinkerOn = \" /><text value=\"false\" class=\"literal\" /><text value=\";\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" toggleBlinker = \" /><text value=\"()\" class=\"params\" /><text value=\" =&gt;\" /><text value=\" {\" /><text type=\"break\" /><text value=\" \" /><text value=\"if\" class=\"keyword\" /><text value=\" (blinkerOn) {\" /><text type=\"break\" /><text value=\"  \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;Blinker off&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\"  blinkerOn = \" /><text value=\"false\" class=\"literal\" /><text value=\";\" /><text type=\"break\" /><text value=\" } \" /><text value=\"else\" class=\"keyword\" /><text value=\" {\" /><text type=\"break\" /><text value=\"  \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;Blinker on&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\"  blinkerOn = \" /><text value=\"true\" class=\"literal\" /><text value=\";\" /><text type=\"break\" /><text value=\" }\" /><text type=\"break\" /><text value=\"};\" /><text type=\"break\" /><text value=\"setInterval(toggleBlinker, \" /><text value=\"500\" class=\"number\" /><text value=\");\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"187\" endIndex=\"198\" /><option startIndex=\"199\" endIndex=\"212\" /><option startIndex=\"214\" endIndex=\"217\" /></options></interaction></interactions></code><p visible-if=\"wrong\">Wähle <code>setInterval</code>, gefolgt von <code>toggleBlinker</code> und schließlich <code>500</code> aus.</p></body></html>"
          },
          {
            "title": "Interval",
            "id": 120608,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p><code>setInterval</code> führt die Callback-Funktion für immer aus, mit einer Verzögerung der angegebenen Anzahl von Millisekunden, die wir als zweiten Parameter übergeben.</p><p>Die erste Ausführung des Callback erfolgt nach der angegebenen Zeit. Sie wird nicht sofort ausgeführt.</p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"let\" class=\"keyword\" /><text value=\" blinkerOn = \" /><text value=\"false\" class=\"literal\" /><text value=\";\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" toggleBlinker = \" /><text value=\"()\" class=\"params\" /><text value=\" =&gt;\" /><text value=\" {\" /><text type=\"break\" /><text value=\" \" /><text value=\"if\" class=\"keyword\" /><text value=\" (blinkerOn) {\" /><text type=\"break\" /><text value=\"  \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;Blinker off&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\"  blinkerOn = \" /><text value=\"false\" class=\"literal\" /><text value=\";\" /><text type=\"break\" /><text value=\" } \" /><text value=\"else\" class=\"keyword\" /><text value=\" {\" /><text type=\"break\" /><text value=\"  \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;Blinker on&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\"  blinkerOn = \" /><text value=\"true\" class=\"literal\" /><text value=\";\" /><text type=\"break\" /><text value=\" }\" /><text type=\"break\" /><text value=\"};\" /><text type=\"break\" /><text value=\"setInterval(toggleBlinker, \" /><text value=\"500\" class=\"number\" /><text value=\");\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"214\" endIndex=\"217\" /></options></interaction></interactions></code><p visible-if=\"wrong\">Wähle <code>500</code> aus.</p></body></html>"
          },
          {
            "title": "setInterval() Callback",
            "id": 120607,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Wenn wir den Code ausführen, könnten wir einen Timeout-Fehler erhalten, weil es keinen Stopp für das <code>setInterval</code> gibt.</p><p>Füge hier <code>500</code> Millisekunden hinzu, um zu sehen, wie der Code alle <code>500</code> Millisekunden für immer ein- und ausgeschaltet wird!</p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"let\" class=\"keyword\" /><text value=\" blinkerOn = \" /><text value=\"false\" class=\"literal\" /><text value=\";\" /><text type=\"break\" /><text value=\"setInterval(\" /><text value=\"()\" class=\"params\" /><text value=\" =&gt;\" /><text value=\" {\" /><text type=\"break\" /><text value=\" \" /><text value=\"if\" class=\"keyword\" /><text value=\" (blinkerOn) {\" /><text type=\"break\" /><text value=\"  \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;Blinker off&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\"  blinkerOn = \" /><text value=\"false\" class=\"literal\" /><text value=\";\" /><text type=\"break\" /><text value=\" } \" /><text value=\"else\" class=\"keyword\" /><text value=\" {\" /><text type=\"break\" /><text value=\"  \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;Blinker on&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\"  blinkerOn = \" /><text value=\"true\" class=\"literal\" /><text value=\";\" /><text type=\"break\" /><text value=\" }\" /><text type=\"break\" /><text value=\"}, \" /><text value=\"500\" class=\"number\" /><text value=\");\" /></content><interactions><interaction type=\"validatedInput\" isDefault=\"true\" startIndex=\"177\" endIndex=\"180\" /></interactions><output><content><text value=\"Blinker on\" /><text type=\"break\" /><text value=\"Blinker off\" /><text type=\"break\" /><text value=\"Blinker on\" /><text type=\"break\" /><text value=\"Blinker off\" /><text type=\"break\" /><text value=\"Blinker on\" /><text type=\"break\" /><text value=\"Blinker off\" /><text type=\"break\" /><text value=\"...\" /><text type=\"break\" /><text value=\"Timeout\" /></content></output></code><p visible-if=\"wrong\">Gib <code>500</code> ein.</p></body></html>"
          },
          {
            "title": "Stopping the Interval",
            "id": 120609,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Um zu verhindern, dass <code>setInterval()</code> unendlich läuft, können wir die <code>clearInterval</code>-Methode verwenden.<br /></p><p>Wir können das <code>setInterval</code> in einer <code>blinkerInterval</code>-Variable speichern. Dann verwenden wir <code>clearInterval(blinkerInterval)</code> innerhalb eines <code>setTimeout</code>, das nach <code>2500</code> Millisekunden ausgeführt wird.</p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"let\" class=\"keyword\" /><text value=\" blinkerOn = \" /><text value=\"false\" class=\"literal\" /><text value=\";\" /><text type=\"break\" /><text value=\"let\" class=\"keyword\" /><text value=\" blinkerInterval = setInterval(\" /><text value=\"()\" class=\"params\" /><text value=\" =&gt;\" /><text value=\" {\" /><text type=\"break\" /><text value=\" \" /><text value=\"if\" class=\"keyword\" /><text value=\" (blinkerOn) {\" /><text type=\"break\" /><text value=\"  \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;Blinker off&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\"  blinkerOn = \" /><text value=\"false\" class=\"literal\" /><text value=\";\" /><text type=\"break\" /><text value=\" } \" /><text value=\"else\" class=\"keyword\" /><text value=\" {\" /><text type=\"break\" /><text value=\"  \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;Blinker on&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\"  blinkerOn = \" /><text value=\"true\" class=\"literal\" /><text value=\";\" /><text type=\"break\" /><text value=\" }\" /><text type=\"break\" /><text value=\"}, \" /><text value=\"500\" class=\"number\" /><text value=\");\" /><text type=\"break\" /><text value=\"setTimeout(\" /><text value=\"()\" class=\"params\" /><text value=\" =&gt;\" /><text value=\" {\" /><text type=\"break\" /><text value=\" clearInterval(blinkerInterval);\" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;STOP!&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\"}, \" /><text value=\"2500\" class=\"number\" /><text value=\");\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"23\" endIndex=\"26\" /><option startIndex=\"27\" endIndex=\"42\" /><option startIndex=\"225\" endIndex=\"238\" /><option startIndex=\"239\" endIndex=\"254\" /><option startIndex=\"283\" endIndex=\"287\" /></options></interaction></interactions><output><content><text value=\"Blinker on\" /><text type=\"break\" /><text value=\"Blinker off\" /><text type=\"break\" /><text value=\"Blinker on\" /><text type=\"break\" /><text value=\"Blinker off\" /><text type=\"break\" /><text value=\"STOP!\" /></content></output></code><p visible-if=\"wrong\">Wähle <code>let</code>, gefolgt von <code>blinkerInterval</code> und schließlich <code>clearInterval</code>, <code>blinkerInterval</code>, <code>2500</code> aus.</p></body></html>"
          },
          {
            "title": "intervalID/clearInterval()",
            "id": 120611,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Die Methode <code>clearInterval()</code> nimmt das <code>blinkerInterval</code> als einzigen Parameter.</p><p>Bei der Ausführung stoppt es die wiederholte Aktion der <code>setInterval()</code>-Methode.</p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"let\" class=\"keyword\" /><text value=\" blinkerOn = \" /><text value=\"false\" class=\"literal\" /><text value=\";\" /><text type=\"break\" /><text value=\"let\" class=\"keyword\" /><text value=\" blinkerInterval = setInterval(\" /><text value=\"()\" class=\"params\" /><text value=\" =&gt;\" /><text value=\" {\" /><text type=\"break\" /><text value=\" \" /><text value=\"if\" class=\"keyword\" /><text value=\" (blinkerOn) {\" /><text type=\"break\" /><text value=\"  \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;Blinker off&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\"  blinkerOn = \" /><text value=\"false\" class=\"literal\" /><text value=\";\" /><text type=\"break\" /><text value=\" } \" /><text value=\"else\" class=\"keyword\" /><text value=\" {\" /><text type=\"break\" /><text value=\"  \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;Blinker on&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\"  blinkerOn = \" /><text value=\"true\" class=\"literal\" /><text value=\";\" /><text type=\"break\" /><text value=\" }\" /><text type=\"break\" /><text value=\"}, \" /><text value=\"500\" class=\"number\" /><text value=\");\" /><text type=\"break\" /><text value=\"setTimeout(\" /><text value=\"()\" class=\"params\" /><text value=\" =&gt;\" /><text value=\" {\" /><text type=\"break\" /><text value=\" clearInterval(blinkerInterval);\" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;STOP!&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\"}, \" /><text value=\"2500\" class=\"number\" /><text value=\");\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"225\" endIndex=\"238\" /><option startIndex=\"239\" endIndex=\"254\" /></options></interaction></interactions><output><content><text value=\"Blinker on\" /><text type=\"break\" /><text value=\"Blinker off\" /><text type=\"break\" /><text value=\"Blinker on\" /><text type=\"break\" /><text value=\"Blinker off\" /><text type=\"break\" /><text value=\"STOP!\" /></content></output></code><p visible-if=\"wrong\">Wähle <code>clearInterval</code>, gefolgt von <code>blinkerInterval</code> aus.</p></body></html>"
          },
          {
            "title": "Question: Intro",
            "id": 120782,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Was ist eine JavaScript-Methode, die Code asynchron ausführt?</p><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\"><code>setInterval()</code></item><item value=\"2\" correct=\"false\"><code>.filter()</code></item></selection><p visible-if=\"wrong\">Wähle <code>setInterval()</code> aus.</p></body></html>"
          },
          {
            "title": "Question: setInterval() Delay",
            "id": 120784,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Was gibt der <code>delay</code>-Parameter für die <code>setInterval()</code>-Methode an?</p><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\">Die Anzahl der Millisekunden, die zwischen den Ausführungen des Callback vergehen</item><item value=\"2\" correct=\"false\">Die Anzahl der Minuten, die zwischen den Ausführungen des Callback vergehen</item></selection><p visible-if=\"wrong\">Die Anzahl der Millisekunden, die zwischen den Ausführungen des Callback vergehen.</p></body></html>"
          },
          {
            "title": "Question: Stopping the Interval",
            "id": 120785,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Welche Aussage ist wahr in Bezug auf die <code>setInterval()</code>-Methode?</p><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\">Es läuft unendlich, es sei denn, wir fügen zusätzlichen Code hinzu, um es zu stoppen</item><item value=\"2\" correct=\"false\">Es erlaubt dem Callback nur, 10 Mal ausgeführt zu werden</item></selection><p visible-if=\"wrong\">Es läuft unendlich, es sei denn, wir fügen zusätzlichen Code hinzu, um es zu stoppen.</p></body></html>"
          },
          {
            "title": "Question: setInterval() Callback",
            "id": 120783,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Was sind zwei häufige Parameter, die <code>setInterval()</code> hat?</p><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\">Eine Callback-Funktion und eine Verzögerung</item><item value=\"2\" correct=\"false\"><code>setInterval()</code> akzeptiert nur eine Callback-Funktion als Parameter</item></selection><p visible-if=\"wrong\">Eine Callback-Funktion und eine Verzögerung.</p></body></html>"
          },
          {
            "title": "Question: intervalID/clearInterval()",
            "id": 120787,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Welche Methode können wir verwenden, um die Ausführung von <code>setInterval()</code> zu stoppen?</p><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\"><code>clearInterval()</code></item><item value=\"2\" correct=\"false\"><code>setTimeout</code></item></selection><p visible-if=\"wrong\">Wähle <code>clearInterval()</code> aus.</p></body></html>"
          },
          {
            "title": "Example: setInterval() Callback",
            "id": 120790,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Code die Callback-Funktion für den Countdown, um mit einem <code>setInterval</code> zu starten und auch zu stoppen, wenn <code>countdown &lt; 0</code>.</p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"let\" class=\"keyword\" /><text value=\" countdown = \" /><text value=\"3\" class=\"number\" /><text value=\";\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" countdownInterval = setInterval(\" /><text value=\"()\" class=\"params\" /><text value=\" =&gt;\" /><text value=\" {\" /><text type=\"break\" /><text value=\" \" /><text value=\"if\" class=\"keyword\" /><text value=\" (countdown &gt; \" /><text value=\"0\" class=\"number\" /><text value=\") {\" /><text type=\"break\" /><text value=\"  \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(countdown);\" /><text type=\"break\" /><text value=\" }\" /><text type=\"break\" /><text value=\" countdown--;\" /><text type=\"break\" /><text value=\" \" /><text value=\"if\" class=\"keyword\" /><text value=\" (countdown &lt; \" /><text value=\"0\" class=\"number\" /><text value=\") {\" /><text type=\"break\" /><text value=\"  clearInterval(countdownInterval);\" /><text type=\"break\" /><text value=\"  \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;GO&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\" }\" /><text type=\"break\" /><text value=\"}, \" /><text value=\"1000\" class=\"number\" /><text value=\");\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"45\" endIndex=\"56\" /><option startIndex=\"154\" endIndex=\"167\" /><option startIndex=\"168\" endIndex=\"185\" /><option startIndex=\"25\" endIndex=\"42\" /></options></interaction></interactions><output><content><text value=\"3\" /><text type=\"break\" /><text value=\"2\" /><text type=\"break\" /><text value=\"1\" /><text type=\"break\" /><text value=\"GO\" /></content></output></code><p visible-if=\"wrong\">Wähle <code>countdownInterval</code>, gefolgt von <code>setInterval</code> und schließlich <code>clearInterval</code>, <code>countdownInterval</code> aus.</p></body></html>"
          },
          {
            "title": "Example: setInterval() Delay",
            "id": 120791,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Vervollständige den Code, indem du die Verzögerung zwischen den Ausführungen der Callback-Funktion auf <code>600</code> Millisekunden einstellst.</p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"let\" class=\"keyword\" /><text value=\" count = \" /><text value=\"0\" class=\"number\" /><text value=\";\" /><text type=\"break\" /><text value=\"let\" class=\"keyword\" /><text value=\" intervalID;\" /><text type=\"break\" /><text type=\"break\" /><text value=\"function\" class=\"keyword\" /><text value=\" \" /><text value=\"callback\" class=\"title\" /><text value=\"(\" /><text value=\"\" class=\"params\" /><text value=\") \" /><text value=\"{\" /><text type=\"break\" /><text value=\" \" /><text value=\"if\" class=\"keyword\" /><text value=\" (count &lt; \" /><text value=\"3\" class=\"number\" /><text value=\") {\" /><text type=\"break\" /><text value=\"  count += \" /><text value=\"1\" class=\"number\" /><text value=\";\" /><text type=\"break\" /><text value=\"  \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;Callback executed&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\" } \" /><text value=\"else\" class=\"keyword\" /><text value=\" {\" /><text type=\"break\" /><text value=\"  clearInterval(intervalID);\" /><text type=\"break\" /><text value=\"  \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;The interval was cleared after 3 executions&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\" }\" /><text type=\"break\" /><text value=\"}\" /><text type=\"break\" /><text type=\"break\" /><text value=\"function\" class=\"keyword\" /><text value=\" \" /><text value=\"start\" class=\"title\" /><text value=\"(\" /><text value=\"\" class=\"params\" /><text value=\") \" /><text value=\"{\" /><text type=\"break\" /><text value=\" intervalID = setInterval(callback, \" /><text value=\"600\" class=\"number\" /><text value=\");\" /><text type=\"break\" /><text value=\"}\" /><text type=\"break\" /><text value=\"start();\" /></content><interactions><interaction type=\"validatedInput\" isDefault=\"true\" startIndex=\"284\" endIndex=\"287\" /></interactions><output><content><text value=\"Callback executed\" /><text type=\"break\" /><text value=\"Callback executed\" /><text type=\"break\" /><text value=\"Callback executed\" /><text type=\"break\" /><text value=\"The interval was cleared after 3 executions\" /></content></output></code><p visible-if=\"wrong\">Gib <code>600</code> ein.</p></body></html>"
          },
          {
            "title": "Example: intervalID/clearInterval()",
            "id": 120794,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Code die <code>clearInterval()</code>-Methode, um die Ausführung der Callback-Funktion nach <code>2</code> Sekunden zu stoppen.</p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"let\" class=\"keyword\" /><text value=\" intervalId;\" /><text type=\"break\" /><text value=\"let\" class=\"keyword\" /><text value=\" direction = \" /><text value=\"&quot;left&quot;\" class=\"string\" /><text value=\";\" /><text type=\"break\" /><text type=\"break\" /><text value=\"function\" class=\"keyword\" /><text value=\" \" /><text value=\"startInterval\" class=\"title\" /><text value=\"(\" /><text value=\"\" class=\"params\" /><text value=\") \" /><text value=\"{\" /><text type=\"break\" /><text value=\"  intervalId = setInterval(\" /><text value=\"()\" class=\"params\" /><text value=\" =&gt;\" /><text value=\" {\" /><text type=\"break\" /><text value=\"    \" /><text value=\"if\" class=\"keyword\" /><text value=\" (direction === \" /><text value=\"&quot;left&quot;\" class=\"string\" /><text value=\") {\" /><text type=\"break\" /><text value=\"      direction = \" /><text value=\"&quot;right&quot;\" class=\"string\" /><text value=\";\" /><text type=\"break\" /><text value=\"    } \" /><text value=\"else\" class=\"keyword\" /><text value=\" {\" /><text type=\"break\" /><text value=\"      direction = \" /><text value=\"&quot;left&quot;\" class=\"string\" /><text value=\";\" /><text type=\"break\" /><text value=\"    }\" /><text type=\"break\" /><text value=\"    \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(direction);\" /><text type=\"break\" /><text value=\"  }, \" /><text value=\"500\" class=\"number\" /><text value=\");\" /><text type=\"break\" /><text value=\"}\" /><text type=\"break\" /><text type=\"break\" /><text value=\"function\" class=\"keyword\" /><text value=\" \" /><text value=\"stopInterval\" class=\"title\" /><text value=\"(\" /><text value=\"\" class=\"params\" /><text value=\") \" /><text value=\"{\" /><text type=\"break\" /><text value=\"  clearInterval(intervalId);\" /><text type=\"break\" /><text value=\"  \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;Interval stopped&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\"}\" /><text type=\"break\" /><text type=\"break\" /><text value=\"startInterval();\" /><text type=\"break\" /><text value=\"setTimeout(stopInterval, \" /><text value=\"2000\" class=\"number\" /><text value=\");\" /><text type=\"break\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"277\" endIndex=\"290\" /><option startIndex=\"370\" endIndex=\"382\" /><option startIndex=\"384\" endIndex=\"388\" /></options></interaction></interactions><output><content><text value=\"right\" /><text type=\"break\" /><text value=\"left\" /><text type=\"break\" /><text value=\"right\" /><text type=\"break\" /><text value=\"Interval stopped\" /></content></output></code><p visible-if=\"wrong\">Wähle <code>clearInterval</code>, gefolgt von <code>stopInterval</code> und schließlich <code>2000</code> aus.</p></body></html>"
          }
        ]
      }
    ]
  }
}