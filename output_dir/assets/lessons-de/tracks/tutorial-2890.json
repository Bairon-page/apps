{
  "tutorial": {
    "id": 2890,
    "version": 3,
    "type": "guidedProject",
    "isNew": false,
    "codeLanguage": "node",
    "title": "Task Manager - Teil 2",
    "descriptionContent": "Im zweiten Teil des Projekts werden wir unseren Nutzern ermöglichen, Aufgaben als erledigt zu markieren, und damit den Aufgabenmanager zu einem nützlichen Werkzeug machen.",
    "shortDescriptionContent": "",
    "showInTrack": true,
    "iconBanner": "tutorial-2890-icon-banner.svg",
    "chapters": [
      {
        "id": 14981,
        "title": "Kapitel #1",
        "type": "practiceLevel3",
        "lessons": [
          {
            "title": "Lesson #1",
            "id": 132085,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Willkommen zurück beim **Task Manager**-Projekt. Im zweiten Teil des Projekts werden wir es den Nutzern ermöglichen, neue Aufgaben hinzuzufügen und den Status von Aufgaben zu ändern.\n\n1. Erstelle unterhalb des `GET /tasks/:id` Endpunkts in deiner `app.js` Datei einen neuen Endpunkt für eine POST-Anfrage bei `/tasks`.\n2. Extrahiere in der Callback-Funktion den `title` und die `description` aus `req.body` mittels Objekt-Destrukturierung.\n3. Wenn kein Titel vorhanden ist, sende eine 400-Antwort mit einer JSON-Fehlermeldung, die besagt `\"Title is required\"`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "app.js",
                  "codeLanguage": "javascript",
                  "content": "const db = require(\"./database\");\nconst express = require(\"express\");\nconst app = express();\nconst port = 3000;\n\napp.use(express.json());\n\napp.listen(port, () => {\n  console.log(`App is running on port ${port}`);\n});\n\napp.get(\"/tasks\", (req, res) => {\n  const tasks = db.prepare(\"SELECT * FROM tasks\").all();\n  res.status(200).json({\n    tasks: tasks,\n  });\n});\n",
                  "solvedContent": "const db = require(\"./database\");\nconst express = require(\"express\");\nconst app = express();\nconst port = 3000;\n\napp.use(express.json());\n\napp.listen(port, () => {\n  console.log(`App is running on port ${port}`);\n});\n\napp.get(\"/tasks\", (req, res) => {\n  const tasks = db.prepare(\"SELECT * FROM tasks\").all();\n  res.status(200).json({\n    tasks: tasks,\n  });\n});\n\napp.post(\"/tasks\", (req, res) => {\n  const { title, description } = req.body;\n  if (!title) {\n    return res.status(400).json({ error: \"Title is required\" });\n  }\n});\n"
                },
                {
                  "name": "database.js",
                  "codeLanguage": "javascript",
                  "content": "const Database = require(\"better-sqlite3\");\nconst db = new Database(\"/tmp/tasks.db\");\n\ndb.exec(`\n    CREATE TABLE IF NOT EXISTS tasks (\n      id INTEGER PRIMARY KEY AUTOINCREMENT,\n      title TEXT NOT NULL,\n      description TEXT,\n      status TEXT NOT NULL DEFAULT 'pending' CHECK(status IN ('pending', 'completed'))\n    )\n`);\n\ndb.exec(`\n    INSERT INTO tasks (title, description, status)\n    VALUES \n    ('Buy groceries', 'Milk, Bread, Eggs', 'pending'),\n    ('Clean the house', 'Vacuum and dust the living room', 'completed'),\n    ('Finish the report', 'Complete the annual financial report', 'pending')\n`);\n\nmodule.exports = db;\n",
                  "solvedContent": null
                }
              ],
              "hints": [],
              "httpOptions": {
                "method": "POST",
                "path": "/tasks",
                "body": "{}"
              }
            }
          },
          {
            "title": "Lesson #2",
            "id": 132086,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Lass uns den Code implementieren, um die neue Aufgabe in die Datenbank einzufügen.\n\n1. Verwende den übergebenen `title` und `description`, um eine neue Aufgabe in die Aufgaben-Tabelle hinzuzufügen.\n2. Gib die ID der neu erstellten Aufgabe im JSON als `taskId` zurück und setze den Status auf 201.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "app.js",
                  "codeLanguage": "javascript",
                  "content": "const db = require(\"./database\");\nconst express = require(\"express\");\nconst app = express();\nconst port = 3000;\n\napp.use(express.json());\n\napp.listen(port, () => {\n  console.log(`App is running on port ${port}`);\n});\n\napp.get(\"/tasks\", (req, res) => {\n  const tasks = db.prepare(\"SELECT * FROM tasks\").all();\n  res.status(200).json({\n    tasks: tasks,\n  });\n});\n\napp.post(\"/tasks\", (req, res) => {\n  const { title, description } = req.body;\n  if (!title) {\n    return res.status(400).json({ error: \"Title is required\" });\n  }\n});\n",
                  "solvedContent": "const db = require(\"./database\");\nconst express = require(\"express\");\nconst app = express();\nconst port = 3000;\n\napp.use(express.json());\n\napp.listen(port, () => {\n  console.log(`App is running on port ${port}`);\n});\n\napp.get(\"/tasks\", (req, res) => {\n  const tasks = db.prepare(\"SELECT * FROM tasks\").all();\n  res.status(200).json({\n    tasks: tasks,\n  });\n});\n\napp.post(\"/tasks\", (req, res) => {\n  const { title, description } = req.body;\n  if (!title) {\n    return res.status(400).json({ error: \"Title is required\" });\n  }\n\n  const insert = db.prepare(\n    \"INSERT INTO tasks (title, description) VALUES (?, ?)\",\n  );\n  const result = insert.run(title, description);\n\n  res.status(201).json({\n    taskId: result.lastInsertRowid,\n    message: \"Task created successfully\",\n  });\n});\n"
                },
                {
                  "name": "database.js",
                  "codeLanguage": "javascript",
                  "content": "const Database = require(\"better-sqlite3\");\nconst db = new Database(\"/tmp/tasks.db\");\n\ndb.exec(`\n    CREATE TABLE IF NOT EXISTS tasks (\n      id INTEGER PRIMARY KEY AUTOINCREMENT,\n      title TEXT NOT NULL,\n      description TEXT,\n      status TEXT NOT NULL DEFAULT 'pending' CHECK(status IN ('pending', 'completed'))\n    )\n`);\n\ndb.exec(`\n    INSERT INTO tasks (title, description, status)\n    VALUES \n    ('Buy groceries', 'Milk, Bread, Eggs', 'pending'),\n    ('Clean the house', 'Vacuum and dust the living room', 'completed'),\n    ('Finish the report', 'Complete the annual financial report', 'pending')\n`);\n\nmodule.exports = db;\n",
                  "solvedContent": null
                }
              ],
              "hints": [],
              "httpOptions": {
                "method": "POST",
                "path": "/tasks",
                "body": "{\n  \"title\": \"Read a book\",\n  \"description\": \"I really want to read 'Catch-22' or a similar book.\"\n}"
              }
            }
          },
          {
            "title": "Lesson #3",
            "id": 132087,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Um den Status einer bestehenden Aufgabe zu aktualisieren, lass uns einen Endpoint erstellen, der eine PUT-Anfrage verarbeitet.\n\n1. Definiere einen neuen Endpoint für eine `PUT`-Anfrage an der URI `/tasks/:id`.\n2. Extrahiere in der Callback-Funktion die `id` aus `req.params` und den `status` aus `req.body`.\n3. Wenn der Status nicht den Wert `\"completed\"` oder `\"pending\"` hat, antworte mit dem Statuscode 400 und einer Fehlermeldung im JSON-Format mit dem Text `\"Invalid status\"`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "app.js",
                  "codeLanguage": "javascript",
                  "content": "const db = require(\"./database\");\nconst express = require(\"express\");\nconst app = express();\nconst port = 3000;\n\napp.use(express.json());\n\napp.listen(port, () => {\n  console.log(`App is running on port ${port}`);\n});\n\napp.get(\"/tasks\", (req, res) => {\n  const tasks = db.prepare(\"SELECT * FROM tasks\").all();\n  res.status(200).json({\n    tasks: tasks,\n  });\n});\n\napp.post(\"/tasks\", (req, res) => {\n  const { title, description } = req.body;\n  if (!title) {\n    return res.status(400).json({ error: \"Title is required\" });\n  }\n\n  const insert = db.prepare(\n    \"INSERT INTO tasks (title, description) VALUES (?, ?)\",\n  );\n  const result = insert.run(title, description);\n\n  res.status(201).json({\n    taskId: result.lastInsertRowid,\n    message: \"Task created successfully\",\n  });\n});\n",
                  "solvedContent": "const db = require(\"./database\");\nconst express = require(\"express\");\nconst app = express();\nconst port = 3000;\n\napp.use(express.json());\n\napp.listen(port, () => {\n  console.log(`App is running on port ${port}`);\n});\n\napp.get(\"/tasks\", (req, res) => {\n  const tasks = db.prepare(\"SELECT * FROM tasks\").all();\n  res.status(200).json({\n    tasks: tasks,\n  });\n});\n\napp.post(\"/tasks\", (req, res) => {\n  const { title, description } = req.body;\n  if (!title) {\n    return res.status(400).json({ error: \"Title is required\" });\n  }\n\n  const insert = db.prepare(\n    \"INSERT INTO tasks (title, description) VALUES (?, ?)\",\n  );\n  const result = insert.run(title, description);\n\n  res.status(201).json({\n    taskId: result.lastInsertRowid,\n    message: \"Task created successfully\",\n  });\n});\n\napp.put(\"/tasks/:id\", (req, res) => {\n  const { id } = req.params;\n  const { status } = req.body;\n  if (status !== \"completed\" && status !== \"pending\") {\n    return res.status(400).json({ error: \"Invalid status\" });\n  }\n});\n"
                },
                {
                  "name": "database.js",
                  "codeLanguage": "javascript",
                  "content": "const Database = require(\"better-sqlite3\");\nconst db = new Database(\"/tmp/tasks.db\");\n\ndb.exec(`\n    CREATE TABLE IF NOT EXISTS tasks (\n      id INTEGER PRIMARY KEY AUTOINCREMENT,\n      title TEXT NOT NULL,\n      description TEXT,\n      status TEXT NOT NULL DEFAULT 'pending' CHECK(status IN ('pending', 'completed'))\n    )\n`);\n\ndb.exec(`\n    INSERT INTO tasks (title, description, status)\n    VALUES \n    ('Buy groceries', 'Milk, Bread, Eggs', 'pending'),\n    ('Clean the house', 'Vacuum and dust the living room', 'completed'),\n    ('Finish the report', 'Complete the annual financial report', 'pending')\n`);\n\nmodule.exports = db;\n",
                  "solvedContent": null
                }
              ],
              "hints": [],
              "httpOptions": {
                "method": "PUT",
                "path": "/tasks/1",
                "body": "{\n  \"status\": \"Invalid status\"\n}"
              }
            }
          },
          {
            "title": "Lesson #4",
            "id": 132088,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Lass uns die Route abschließen, indem wir die Datenbank mit dem neuen Aufgabenstatus aktualisieren.\n\n1. Aktualisiere den Status der Aufgabe mit der gegebenen ID, indem du ihn entweder auf `\"completed\"` oder `\"pending\"` setzt.\n2. Wenn keine Aufgabe mit der gegebenen ID gefunden wurde, gib den Statuscode `404` zusammen mit einer Fehlermeldung zurück.\n3. Wenn die Aufgabe erfolgreich aktualisiert wurde, gib den Statuscode `200` zurück.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "app.js",
                  "codeLanguage": "javascript",
                  "content": "const db = require(\"./database\");\nconst express = require(\"express\");\nconst app = express();\nconst port = 3000;\n\napp.use(express.json());\n\napp.listen(port, () => {\n  console.log(`App is running on port ${port}`);\n});\n\napp.get(\"/tasks\", (req, res) => {\n  const tasks = db.prepare(\"SELECT * FROM tasks\").all();\n  res.status(200).json({\n    tasks: tasks,\n  });\n});\n\napp.post(\"/tasks\", (req, res) => {\n  const { title, description } = req.body;\n  if (!title) {\n    return res.status(400).json({ error: \"Title is required\" });\n  }\n\n  const insert = db.prepare(\n    \"INSERT INTO tasks (title, description) VALUES (?, ?)\",\n  );\n  const result = insert.run(title, description);\n\n  res.status(201).json({\n    taskId: result.lastInsertRowid,\n    message: \"Task created successfully\",\n  });\n});\n\napp.put(\"/tasks/:id\", (req, res) => {\n  const { id } = req.params;\n  const { status } = req.body;\n  if (status !== \"completed\" && status !== \"pending\") {\n    return res.status(400).json({ error: \"Invalid status\" });\n  }\n});\n",
                  "solvedContent": "const db = require(\"./database\");\nconst express = require(\"express\");\nconst app = express();\nconst port = 3000;\n\napp.use(express.json());\n\napp.listen(port, () => {\n  console.log(`App is running on port ${port}`);\n});\n\napp.get(\"/tasks\", (req, res) => {\n  const tasks = db.prepare(\"SELECT * FROM tasks\").all();\n  res.status(200).json({\n    tasks: tasks,\n  });\n});\n\napp.post(\"/tasks\", (req, res) => {\n  const { title, description } = req.body;\n  if (!title) {\n    return res.status(400).json({ error: \"Title is required\" });\n  }\n\n  const insert = db.prepare(\n    \"INSERT INTO tasks (title, description) VALUES (?, ?)\",\n  );\n  const result = insert.run(title, description);\n\n  res.status(201).json({\n    taskId: result.lastInsertRowid,\n    message: \"Task created successfully\",\n  });\n});\n\napp.put(\"/tasks/:id\", (req, res) => {\n  const { id } = req.params;\n  const { status } = req.body;\n  if (status !== \"completed\" && status !== \"pending\") {\n    return res.status(400).json({ error: \"Invalid status\" });\n  }\n\n  const update = db.prepare(\"UPDATE tasks SET status = ? WHERE id = ?\");\n  const result = update.run(status, id);\n\n  if (result.changes === 0) {\n    return res.status(404).json({ error: \"Task not found\" });\n  }\n\n  res.status(200).json({\n    message: `Task with id ${id} updated successfully.`,\n    updatedStatus: status,\n  });\n});\n"
                },
                {
                  "name": "database.js",
                  "codeLanguage": "javascript",
                  "content": "const Database = require(\"better-sqlite3\");\nconst db = new Database(\"/tmp/tasks.db\");\n\ndb.exec(`\n    CREATE TABLE IF NOT EXISTS tasks (\n      id INTEGER PRIMARY KEY AUTOINCREMENT,\n      title TEXT NOT NULL,\n      description TEXT,\n      status TEXT NOT NULL DEFAULT 'pending' CHECK(status IN ('pending', 'completed'))\n    )\n`);\n\ndb.exec(`\n    INSERT INTO tasks (title, description, status)\n    VALUES \n    ('Buy groceries', 'Milk, Bread, Eggs', 'pending'),\n    ('Clean the house', 'Vacuum and dust the living room', 'completed'),\n    ('Finish the report', 'Complete the annual financial report', 'pending')\n`);\n\nmodule.exports = db;\n",
                  "solvedContent": null
                }
              ],
              "hints": [],
              "httpOptions": {
                "method": "PUT",
                "path": "/tasks/1",
                "body": "{\n  \"status\": \"completed\"\n}"
              }
            }
          }
        ]
      }
    ]
  }
}