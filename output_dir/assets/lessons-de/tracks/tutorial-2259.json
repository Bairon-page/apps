{
  "tutorial": {
    "id": 2259,
    "version": 2,
    "type": "practiceOptional",
    "isNew": false,
    "codeLanguage": "javascript",
    "title": "ES6 1",
    "descriptionContent": "ES6 1",
    "shortDescriptionContent": "",
    "showInTrack": true,
    "iconBanner": null,
    "chapters": [
      {
        "id": 12387,
        "title": "ES6-Variablen und Gültigkeitsbereich",
        "type": "practiceLevel3",
        "lessons": [
          {
            "title": "Code 1",
            "id": 112463,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Erstelle eine lokale Variable `area`, die `width` multipliziert mit `height` innerhalb der Funktion speichert.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "function calculateArea(width, height) {\n\n return area;\n}\nconst wallSize = calculateArea(6, 7);\nconsole.log(wallSize);",
                  "solvedContent": "function calculateArea(width, height) {\n const area = width * height;\n return area;\n}\nconst wallSize = calculateArea(6, 7);\nconsole.log(wallSize);"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Code 2",
            "id": 112464,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Der Countdown funktioniert. Allerdings möchten wir, dass sich der Wert der in der ersten Zeile deklarierten Variable nicht ändert. Verwende den richtigen Variablentyp im Block-Scope, damit `console.log` \"The value of variable i is 10\" ausgibt.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "var i = 10;\nfor (var i = 10; i >= 0; i--) {\n console.log(i);\n}\nconsole.log(\"The value of variable i is: \" + i);",
                  "solvedContent": "var i = 10;\nfor (let i = 10; i >= 0; i--) {\n console.log(i);\n}\nconsole.log(\"The value of variable i is: \" + i);"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Code 3",
            "id": 112466,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Mache die Variable `winningNumber` verfügbar zur Nutzung innerhalb der Funktion `drawWinner`, indem du sie im globalen Scope definierst.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "function drawWinningNumber() {\n const winningNumber = Math.floor((Math.random() * 3));\n}\n\nfunction drawWinner() {\n const players = [\"Amanda\", \"Sheila\", \"Rob\"];\n const winner = players[winningNumber];\n console.log(\"The winner is \" + winner);\n}\ndrawWinner();",
                  "solvedContent": "const winningNumber = Math.floor((Math.random() * 3));\n\nfunction drawWinner() {\n const players = [\"Amanda\", \"Sheila\", \"Rob\"];\n const winner = players[winningNumber];\n console.log(\"The winner is \" + winner);\n}\ndrawWinner();"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Code 4",
            "id": 112467,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Mache die lokale Variable `toDoList` zu einer globalen Variable, indem du sie aus der Funktion `cleanUp` herausnimmst.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "function cleanUp() {\n const toDoList = [\"sweeping\", \"washing\", \"mopping\"];\n for (let i = 0; i < toDoList.length; i++) {\n  toDoList.pop(toDoList[i]);\n }\n console.log(\"I still have some \" + toDoList + \" to do\");\n}\ncleanUp();",
                  "solvedContent": "const toDoList = [\"sweeping\", \"washing\", \"mopping\"];\nfunction cleanUp() {\n for (let i = 0; i < toDoList.length; i++) {\n  toDoList.pop(toDoList[i]);\n }\n console.log(\"I still have some \" + toDoList + \" to do\");\n}\ncleanUp();"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Code 5",
            "id": 112468,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Entferne den Code, der den Wert der konstanten Variable neu definiert, damit der Code ohne Fehler ausgeführt wird.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const retirement_age = 65;\n\nfunction retire(age) {\n retirement_age = 65;\n if (age >= retirement_age) {\n  console.log(\"Finally some rest!\");\n }\n}\nconst finalRetirement = retire(70);",
                  "solvedContent": "const retirement_age = 65;\n\nfunction retire(age) {\n if (age >= retirement_age) {\n  console.log(\"Finally some rest!\");\n }\n}\nconst finalRetirement = retire(70);"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Code 6",
            "id": 112543,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Wenn wir `year` im globalen Scope verwenden, sieht es so aus, als ob beide Kriege im selben Jahr endeten. Stelle sicher, dass `World War I ended in 1918` und `World War II ended in 1945` gedruckt werden, indem du `year` als lokale Variable innerhalb jeder Funktion verwendest. Verwende `const`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const year = 1918;\n\nfunction checkDateFirstWorldWar() {\n console.log(\"World War I ended in \" + year);\n}\n\nfunction checkDateSecondWorldWar() {\n console.log(\"World War II ended in \" + year);\n}\ncheckDateFirstWorldWar();\ncheckDateSecondWorldWar();",
                  "solvedContent": "function checkDateFirstWorldWar() {\n const year = 1918;\n console.log(\"World War I ended in \" + year);\n}\n\nfunction checkDateSecondWorldWar() {\n const year = 1945;\n console.log(\"World War II ended in \" + year);\n}\ncheckDateFirstWorldWar();\ncheckDateSecondWorldWar();"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 11829,
        "title": "Arrow-Funktionen",
        "type": "practiceLevel3",
        "lessons": [
          {
            "title": "Code: Parenthesis and Arrow",
            "id": 108142,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Ändere die folgende Funktion in eine Arrow Function und speichere sie in einer Variable namens `greetGuest`. Rufe die Funktion auf.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "function greetGuest() {\n console.log(\"Hi \" + \"Jon\");\n console.log(\"Hola \" + \"Jon\");\n}\ngreetGuest();",
                  "solvedContent": "const greetGuest = () => {\n console.log(\"Hi \" + \"Jon\");\n console.log(\"Hola \" + \"Jon\");\n};\ngreetGuest();"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Code: Parenthesis and Arrow 2",
            "id": 108202,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Ändere die folgende Funktion in eine Arrow Function und speichere sie in einer Variablen namens `dailyMotivation`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "function dailyMotivation() {\n console.log(\"You are capable of anything you set your mind to.\");\n}\ndailyMotivation();",
                  "solvedContent": "const dailyMotivation = () => {\n console.log(\"You are capable of anything you set your mind to.\");\n};\ndailyMotivation();"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Code: Parameter",
            "id": 108143,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Füge einen Parameter namens `name` hinzu. Rufe die Funktion mit `\"Jon\"` auf.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const greetGuest = () => {\n console.log(\"Hi\", name);\n console.log(\"Hola\", name);\n}",
                  "solvedContent": "const greetGuest = (name) => {\n console.log(\"Hi\", name);\n console.log(\"Hola\", name);\n};\ngreetGuest(\"Jon\");"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Code: Parameter 2",
            "id": 108203,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Füge einen Parameter namens `day` hinzu. Und rufe die Funktion mit einem Wert auf, sodass `You are capable of anything you set your mind to.` angezeigt wird.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const dailyMotivation = () => {\n if (day === \"mon\") console.log(\n  \"You are capable of anything you set your mind to.\");\n else console.log(\"You are an inspiration to everyone around you.\");\n};",
                  "solvedContent": "const dailyMotivation = (day) => {\n if (day === \"mon\") console.log(\n  \"You are capable of anything you set your mind to.\");\n else console.log(\"You are an inspiration to everyone around you.\");\n};\ndailyMotivation(\"mon\");"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Code: Multiple body statements return",
            "id": 108145,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Speichere den folgenden Code in einer Arrow Function in einer Variable namens `canDrive`. Füge einen Parameter `age` hinzu. Rufe die Funktion mit `17` auf.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "if (age >= 16) {\n return \"Yes\";\n} else {\n return \"No\";\n}",
                  "solvedContent": "const canDrive = (age) => {\n if (age >= 16) {\n  return \"Yes\";\n } else {\n  return \"No\";\n }\n};\ncanDrive(17);"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Code: Return One Line",
            "id": 108146,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Ändere die Arrow Function so, dass sie keine geschweiften Klammern und das `return`-Schlüsselwort mehr verwendet.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const isEvenNumber = (number) => {\n return number % 2 == 0;\n};\nconsole.log(isEvenNumber(26));",
                  "solvedContent": "const isEvenNumber = (number) => number % 2 == 0;\nconsole.log(isEvenNumber(26));"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 11830,
        "title": "Parameter von Arrow Functions",
        "type": "practiceLevel3",
        "lessons": [
          {
            "title": "Code: Parameter",
            "id": 108195,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Füge der Funktion einen Parameter namens `altitude` hinzu und gib `true` nur dann zurück, wenn `altitude` kleiner oder gleich `2000` ist.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const shouldDeployChute = () => {\n if () return true;\n return false;\n};",
                  "solvedContent": "const shouldDeployChute = (altitude) => {\n if (altitude <= 2000) return true;\n return false;\n};"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Code: Parameter without parenthesis",
            "id": 108196,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Füge der Funktion einen Parameter namens `amount` hinzu. Verwende keine Klammern.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "let balance = 100;\nconst withdraw = => {\n balance = balance - amount;\n if (balance < 0) {\n  console.log(\"Overdrawn\");\n }\n};",
                  "solvedContent": "let balance = 100;\nconst withdraw = amount => {\n balance = balance - amount;\n if (balance < 0) {\n  console.log(\"Overdrawn\");\n }\n};"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Code: Default Parameters",
            "id": 108192,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Füge zwei Parameter hinzu: `er` und `ip`. Gib `ip` einen Standardwert von `9`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const pitcherERA = () => {\n return er * 9 / ip;\n};",
                  "solvedContent": "const pitcherERA = (er, ip = 9) => {\n return er * 9 / ip;\n};"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Code: Default Parameters 2",
            "id": 108194,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Füge der Funktion zwei Parameter hinzu: `cost` und `rate`. Gib `rate` einen Standardwert von `0.15`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const calculateTip = => {\n return cost * rate;\n};",
                  "solvedContent": "const calculateTip = (cost, rate = 0.15) => {\n return cost * rate;\n};"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Code: Multiple Parameters",
            "id": 108204,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Füge der Arrow Function zwei Parameter hinzu: `hand` und `dealer`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const twentyOne = => {\n if (hand > 21) return \"bust\";\n if (hand === dealer) return \"push\";\n if (hand > dealer) return \"win\";\n if (hand < dealer);\n return \"lose\";\n};",
                  "solvedContent": "const twentyOne = (hand, dealer) => {\n if (hand > 21) return \"bust\";\n if (hand === dealer) return \"push\";\n if (hand > dealer) return \"win\";\n if (hand < dealer);\n return \"lose\";\n};"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Code: Multiple Parameters",
            "id": 108193,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Lass uns die Koordinaten der Schachfiguren auf einem Schachbrett speichern. Füge der Pfeilfunktion drei Parameter hinzu: `column`, `row` und `piece`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const movePiece = () => {\n console.log(piece + \" to \" + column + row);\n};\nmovePiece(\"e\", 6, \"queen\");",
                  "solvedContent": "const movePiece = (column, row, piece) => {\n console.log(piece + \" to \" + column + row);\n};\nmovePiece(\"e\", 6, \"queen\");"
                }
              ],
              "hints": []
            }
          }
        ]
      }
    ]
  }
}