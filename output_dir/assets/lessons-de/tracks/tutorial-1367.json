{
  "tutorial": {
    "id": 1367,
    "version": 8,
    "type": "course",
    "isNew": false,
    "codeLanguage": "python",
    "title": "Mengenoperationen",
    "descriptionContent": "Mengenoperationen",
    "shortDescriptionContent": "",
    "showInTrack": true,
    "iconBanner": null,
    "chapters": [
      {
        "id": 9978,
        "title": "Teilmenge",
        "type": "practiceLevel1",
        "lessons": [
          {
            "title": "Length",
            "id": 89324,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Genau wie bei Listen können wir die Größe einer Menge wie <code>friends</code> mit der <code>len()</code>-Anweisung ermitteln.</p><code version=\"2\" codelang=\"python\" name=\"script.py\" visible-if=\"always\"><content><text value=\"friends = {\" /><text value=\"&quot;Emma&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;Jen&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;Rob&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;Ed&quot;\" class=\"string\" /><text value=\"}\" /><text type=\"break\" /><text value=\"print(len(friends))\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"45\" endIndex=\"48\" /><option startIndex=\"48\" endIndex=\"49\" /><option startIndex=\"49\" endIndex=\"56\" /><option startIndex=\"56\" endIndex=\"57\" /></options></interaction></interactions><output><content><text value=\"4\" /></content></output></code><p visible-if=\"wrong\">Wähle <code>len</code>, gefolgt von <code>(</code> und schließlich <code>friends</code>, <code>)</code> aus.</p></body></html>"
          },
          {
            "title": "Subset",
            "id": 89325,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Wenn <em>alle</em> Elemente einer Menge wie <code>chat</code> in einer anderen Menge wie <code>friends</code> vorhanden sind, sagen wir, dass <code>chat</code> eine <strong>Teilmenge</strong> von <code>friends</code> ist.</p><code version=\"2\" codelang=\"python\" name=\"script.py\" visible-if=\"always\"><content><text value=\"friends = {\" /><text value=\"&quot;Emma&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;Jen&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;Rob&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;Ed&quot;\" class=\"string\" /><text value=\"}\" /><text type=\"break\" /><text value=\"chat = {\" /><text value=\"&quot;Jen&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;Ed&quot;\" class=\"string\" /><text value=\"}\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"39\" endIndex=\"43\" /><option startIndex=\"44\" endIndex=\"45\" /><option startIndex=\"46\" endIndex=\"59\" /></options></interaction></interactions></code><p visible-if=\"wrong\">Wähle <code>chat</code>, gefolgt von <code>=</code> und schließlich <code>{\"Jen\", \"Ed\"}</code> aus.</p></body></html>"
          },
          {
            "title": "Is subset",
            "id": 89326,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Um zu überprüfen, ob eine Menge wie <code>chat</code> eine Teilmenge einer anderen, wie <code>friends</code>, ist, kodieren wir <code>chat</code>, dann <code>.issubset()</code>, mit <code>friends</code> in Klammern.</p><code version=\"2\" codelang=\"python\" name=\"script.py\" visible-if=\"always\"><content><text value=\"friends = {\" /><text value=\"&quot;Emma&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;Jen&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;Rob&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;Ed&quot;\" class=\"string\" /><text value=\"}\" /><text type=\"break\" /><text value=\"chat = {\" /><text value=\"&quot;Jen&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;Ed&quot;\" class=\"string\" /><text value=\"}\" /><text type=\"break\" /><text type=\"break\" /><text value=\"print(chat.issubset(friends))\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"67\" endIndex=\"71\" /><option startIndex=\"71\" endIndex=\"80\" /><option startIndex=\"80\" endIndex=\"89\" /></options></interaction></interactions><output><content><text value=\"True\" /></content></output></code><p visible-if=\"wrong\">Wähle <code>chat</code>, gefolgt von <code>.issubset</code> und schließlich <code>(friends)</code> aus.</p></body></html>"
          },
          {
            "title": "True or False",
            "id": 89327,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p><code>issubset()</code> gibt <code>True</code> zurück, wenn die linke Menge eine Teilmenge der rechten ist, und <code>False</code> andernfalls, wie hier mit <code>study_group</code>.</p><code version=\"2\" codelang=\"python\" name=\"script.py\" visible-if=\"always\"><content><text value=\"friends = {\" /><text value=\"&quot;Emma&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;Jen&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;Rob&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;Ed&quot;\" class=\"string\" /><text value=\"}\" /><text type=\"break\" /><text value=\"study_group = {\" /><text value=\"&quot;Emma&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;Lisa&quot;\" class=\"string\" /><text value=\"}\" /><text type=\"break\" /><text type=\"break\" /><text value=\"print(study_group.issubset(friends))\" /></content><interactions><interaction type=\"validatedInput\" isDefault=\"true\" startIndex=\"77\" endIndex=\"88\" /></interactions><output><content><text value=\"False\" /></content></output></code><p visible-if=\"wrong\">Gib <code>study_group</code> ein.</p></body></html>"
          },
          {
            "title": "Save in variable",
            "id": 89339,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Wir können den von <code>issubset()</code> gegebenen booleschen Wert in einer Variable speichern, wie <code>are_friends</code>.</p><code version=\"2\" codelang=\"python\" name=\"script.py\" visible-if=\"always\"><content><text value=\"friends = {\" /><text value=\"&quot;Emma&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;Jen&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;Rob&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;Ed&quot;\" class=\"string\" /><text value=\"}\" /><text type=\"break\" /><text value=\"study_group = {\" /><text value=\"&quot;Emma&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;Lisa&quot;\" class=\"string\" /><text value=\"}\" /><text type=\"break\" /><text type=\"break\" /><text value=\"are_friends = study_group.issubset(friends)\" /><text type=\"break\" /><text value=\"print(are_friends)\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"71\" endIndex=\"82\" /><option startIndex=\"83\" endIndex=\"84\" /></options></interaction></interactions><output><content><text value=\"False\" /></content></output></code><p visible-if=\"wrong\">Wähle <code>are_friends</code>, gefolgt von <code>=</code> aus.</p></body></html>"
          },
          {
            "title": "Question: Length",
            "id": 89423,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Wie können wir herausfinden, wie viele Elemente eine Menge enthält?</p><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\">Mit der <code>len()</code>-Anweisung, um die Länge der Menge zu finden</item><item value=\"2\" correct=\"false\">Wir können nicht wissen, wie viele Elemente eine Menge enthält</item></selection><p visible-if=\"wrong\">Mit der <code>len()</code>-Anweisung, um die Länge der Menge zu finden.</p></body></html>"
          },
          {
            "title": "Question: Subset",
            "id": 89424,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Wann sagen wir, dass eine Menge eine Teilmenge einer anderen ist?</p><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\">Wenn alle Elemente der Menge im anderen vorhanden sind</item><item value=\"2\" correct=\"false\">Wenn einige der Elemente der Menge in der anderen vorhanden sind</item></selection><p visible-if=\"wrong\">Wenn alle Elemente der Menge im anderen vorhanden sind.</p></body></html>"
          },
          {
            "title": "Question: Is subset",
            "id": 89425,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Wie können wir überprüfen, ob eine Menge eine Teilmenge einer anderen ist?</p><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\">Mit der <code>issubset()</code>-Anweisung</item><item value=\"2\" correct=\"false\">Indem du die Längen beider Sets vergleichst</item></selection><p visible-if=\"wrong\">Mit der <code>issubset()</code>-Anweisung.</p></body></html>"
          },
          {
            "title": "Question: True or False",
            "id": 89426,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Was gibt uns <code>issubset()</code>, wenn die Menge eine Teilmenge einer anderen ist?</p><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\">Der boolesche Wert <code>True</code></item><item value=\"2\" correct=\"false\">Die Elemente der Teilmenge</item></selection><p visible-if=\"wrong\">Der boolesche Wert <code>True</code>.</p></body></html>"
          },
          {
            "title": "Question: Save in variable",
            "id": 89427,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Wie können wir den Wert, den wir durch die Verwendung von <code>issubset()</code> erhalten, wiederverwenden?</p><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\">Wir speichern es in einer Variable</item><item value=\"2\" correct=\"false\">Wir können es nicht wiederverwenden, wir können es nur anzeigen</item></selection><p visible-if=\"wrong\">Wir speichern es in einer Variable.</p></body></html>"
          },
          {
            "title": "Example: Length",
            "id": 89428,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Verwende <code>len()</code>, um die Länge der <code>invitations</code>-Menge zu erhalten.</p><code version=\"2\" codelang=\"python\" name=\"script.py\" visible-if=\"always\"><content><text value=\"invitations = {\" /><text value=\"&quot;Meg&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;Alex&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;Lee&quot;\" class=\"string\" /><text value=\"}\" /><text type=\"break\" /><text type=\"break\" /><text value=\"print(\" /><text value=\"f&quot;\" /><text value=\"{len(invitations)}\" class=\"subst\" /><text value=\" invitations sent&quot;\" /><text value=\")\" /></content><interactions><interaction type=\"validatedInput\" isDefault=\"true\" startIndex=\"47\" endIndex=\"63\" /></interactions><output><content><text value=\"3 invitations sent\" /></content></output></code><p visible-if=\"wrong\">Gib <code>len(invitations)</code> ein.</p></body></html>"
          },
          {
            "title": "Example: Subset",
            "id": 89429,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Speichere eine Menge in <code>pets</code>, sodass <code>pets</code> eine Teilmenge von <code>animals</code> ist.</p><code version=\"2\" codelang=\"python\" name=\"script.py\" visible-if=\"always\"><content><text value=\"animals = {\" /><text value=\"&quot;whale&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;dog&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;cat&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;giraffe&quot;\" class=\"string\" /><text value=\"}\" /><text type=\"break\" /><text type=\"break\" /><text value=\"pets = {\" /><text value=\"&quot;dog&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;cat&quot;\" class=\"string\" /><text value=\"}\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"53\" endIndex=\"67\" /><option correct=\"false\"><content><text value=\"{&quot;dog&quot;, &quot;turtle&quot;}\" /></content></option><option correct=\"false\"><content><text value=\"{&quot;dog&quot;, &quot;cat&quot;, &quot;bird&quot;}\" /></content></option></options></interaction></interactions></code><p visible-if=\"wrong\">Wähle <code>{\"dog\", \"cat\"}</code> aus.</p></body></html>"
          },
          {
            "title": "Example: Is subset",
            "id": 89430,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Verwende <code>issubset()</code>, um zu überprüfen, ob <code>pets</code> eine Teilmenge von <code>animals</code> ist.</p><code version=\"2\" codelang=\"python\" name=\"script.py\" visible-if=\"always\"><content><text value=\"animals = {\" /><text value=\"&quot;whale&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;dog&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;cat&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;giraffe&quot;\" class=\"string\" /><text value=\"}\" /><text type=\"break\" /><text type=\"break\" /><text value=\"pets = {\" /><text value=\"&quot;dog&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;cat&quot;\" class=\"string\" /><text value=\"}\" /><text type=\"break\" /><text value=\"print(pets.issubset(animals))\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"74\" endIndex=\"78\" /><option startIndex=\"78\" endIndex=\"79\" /><option startIndex=\"79\" endIndex=\"87\" /><option startIndex=\"87\" endIndex=\"88\" /><option startIndex=\"88\" endIndex=\"95\" /><option startIndex=\"95\" endIndex=\"96\" /></options></interaction></interactions><output><content><text value=\"True\" /></content></output></code><p visible-if=\"wrong\">Wähle <code>pets</code>, gefolgt von <code>.</code> und schließlich <code>issubset</code>, <code>(</code>, <code>animals</code>, <code>)</code> aus.</p></body></html>"
          },
          {
            "title": "Example: True or False",
            "id": 89431,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Speichere eine Menge in <code>capitals</code>, sodass <code>False</code> in der Konsole angezeigt wird.</p><code version=\"2\" codelang=\"python\" name=\"script.py\" visible-if=\"always\"><content><text value=\"cities = {\" /><text value=\"&quot;Kyoto&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;Nice&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;Madrid&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;Oslo&quot;\" class=\"string\" /><text value=\"}\" /><text type=\"break\" /><text value=\"capitals = {\" /><text value=\"&quot;Madrid&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;Paris&quot;\" class=\"string\" /><text value=\"}\" /><text type=\"break\" /><text type=\"break\" /><text value=\"print(capitals.issubset(cities))\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"56\" endIndex=\"75\" /><option correct=\"false\"><content><text value=\"{&quot;Madrid&quot;, &quot;Oslo&quot;, &quot;Nice&quot;}\" /></content></option></options></interaction></interactions><output><content><text value=\"False\" /></content></output></code><p visible-if=\"wrong\">Wähle <code>{\"Madrid\", \"Paris\"}</code> aus.</p></body></html>"
          },
          {
            "title": "Example: Save in variable",
            "id": 89432,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Speichere den von <code>issubset()</code> zurückgegebenen booleschen Wert in der Variable <code>is_subset</code>.</p><code version=\"2\" codelang=\"python\" name=\"script.py\" visible-if=\"always\"><content><text value=\"cities = {\" /><text value=\"&quot;Kyoto&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;Nice&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;Madrid&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;Oslo&quot;\" class=\"string\" /><text value=\"}\" /><text type=\"break\" /><text value=\"capitals = {\" /><text value=\"&quot;Madrid&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;Paris&quot;\" class=\"string\" /><text value=\"}\" /><text type=\"break\" /><text type=\"break\" /><text value=\"is_subset = capitals.issubset(cities)\" /><text type=\"break\" /><text value=\"print(is_subset)\" /></content><interactions><interaction type=\"validatedInput\" isDefault=\"true\" startIndex=\"77\" endIndex=\"88\" /></interactions><output><content><text value=\"False\" /></content></output></code><p visible-if=\"wrong\">Gib <code>is_subset =</code> ein.</p></body></html>"
          }
        ]
      },
      {
        "id": 9979,
        "title": "Vereinigung und Schnittmenge",
        "type": "practiceLevel1",
        "lessons": [
          {
            "title": "Union",
            "id": 89329,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Wir können zwei Sets wie <code>classmates</code> und <code>friends</code> mit <code>.union()</code> verbinden, wie hier mit <code>classmates.union(friends)</code>.</p><code version=\"2\" codelang=\"python\" name=\"script.py\" visible-if=\"always\"><content><text value=\"classmates = {\" /><text value=\"&quot;Sue&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;Paul&quot;\" class=\"string\" /><text value=\"}\" /><text type=\"break\" /><text value=\"friends = {\" /><text value=\"&quot;Don&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;Sue&quot;\" class=\"string\" /><text value=\"}\" /><text type=\"break\" /><text type=\"break\" /><text value=\"print(classmates.union(friends))\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"61\" endIndex=\"71\" /><option startIndex=\"71\" endIndex=\"77\" /><option startIndex=\"77\" endIndex=\"86\" /></options></interaction></interactions><output><content><text value=\"{'Don', 'Paul', 'Sue'}\" /></content></output></code><p visible-if=\"wrong\">Wähle <code>classmates</code>, gefolgt von <code>.union</code> und schließlich <code>(friends)</code> aus.</p></body></html>"
          },
          {
            "title": "No duplicates",
            "id": 89330,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p><code>union()</code> gibt uns eine neue Menge ohne Duplikate, selbst wenn einige Elemente in beiden ursprünglichen Mengen vorhanden sind, wie <code>\"Sue\"</code> hier.</p><code version=\"2\" codelang=\"python\" name=\"script.py\" visible-if=\"always\"><content><text value=\"classmates = {\" /><text value=\"&quot;Sue&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;Paul&quot;\" class=\"string\" /><text value=\"}\" /><text type=\"break\" /><text value=\"friends = {\" /><text value=\"&quot;Don&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;Sue&quot;\" class=\"string\" /><text value=\"}\" /><text type=\"break\" /><text type=\"break\" /><text value=\"print(classmates.union(friends))\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"47\" endIndex=\"52\" /><option startIndex=\"14\" endIndex=\"19\" /></options></interaction></interactions><output><content><text value=\"{'Paul', 'Sue', 'Don'}\" /></content></output></code><p visible-if=\"wrong\">Wähle <code>\"Sue\"</code>, gefolgt von <code>\"Sue\"</code> aus.</p></body></html>"
          },
          {
            "title": "Intersection",
            "id": 89331,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Ähnlich können wir <code>intersection()</code> verwenden, um eine Menge von Elementen zu erstellen, die in <em>beiden</em> Mengen vorhanden sind, wie <code>\"Sue\"</code> und <code>\"Luke\"</code>.</p><code version=\"2\" codelang=\"python\" name=\"script.py\" visible-if=\"always\"><content><text value=\"classmates = {\" /><text value=\"&quot;Sue&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;Luke&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;Paul&quot;\" class=\"string\" /><text value=\"}\" /><text type=\"break\" /><text value=\"friends = {\" /><text value=\"&quot;Don&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;Sue&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;Luke&quot;\" class=\"string\" /><text value=\"}\" /><text type=\"break\" /><text type=\"break\" /><text value=\"print(classmates.intersection(friends))\" /></content><output><content><text value=\"{'Sue', 'Luke'}\" /></content></output></code></body></html>"
          },
          {
            "title": "Union vs Intersection",
            "id": 89332,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Während <code>union()</code> uns alle Elemente der beiden Mengen gibt, liefert <code>intersection()</code> uns nur die gemeinsamen.</p><code version=\"2\" codelang=\"python\" name=\"script.py\" visible-if=\"always\"><content><text value=\"classmates = {\" /><text value=\"&quot;Sue&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;Luke&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;Paul&quot;\" class=\"string\" /><text value=\"}\" /><text type=\"break\" /><text value=\"friends = {\" /><text value=\"&quot;Don&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;Sue&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;Luke&quot;\" class=\"string\" /><text value=\"}\" /><text type=\"break\" /><text type=\"break\" /><text value=\"print(\" /><text value=\"&quot;Union:&quot;\" class=\"string\" /><text value=\")\" /><text type=\"break\" /><text value=\"print(classmates.union(friends))\" /><text type=\"break\" /><text type=\"break\" /><text value=\"print(\" /><text value=\"&quot;Intersection:&quot;\" class=\"string\" /><text value=\")\" /><text type=\"break\" /><text value=\"print(classmates.intersection(friends))\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"104\" endIndex=\"109\" /><option startIndex=\"161\" endIndex=\"173\" /></options></interaction></interactions><output><content><text value=\"Union:\" /><text type=\"break\" /><text value=\"{'Paul', 'Sue', 'Luke', 'Don'}\" /><text type=\"break\" /><text value=\"Intersection\" /><text type=\"break\" /><text value=\"{'Sue', 'Luke'}\" /></content></output></code><p visible-if=\"wrong\">Wähle <code>union</code>, gefolgt von <code>intersection</code> aus.</p></body></html>"
          },
          {
            "title": "Save in variable",
            "id": 89338,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Wir können die durch <code>union()</code> und <code>intersection()</code> gegebenen Mengen in Variablen speichern, wie <code>everybody</code> für <code>union()</code> und <code>common</code> für <code>intersection()</code>.</p><code version=\"2\" codelang=\"python\" name=\"script.py\" visible-if=\"always\"><content><text value=\"classmates = {\" /><text value=\"&quot;Sue&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;Luke&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;Paul&quot;\" class=\"string\" /><text value=\"}\" /><text type=\"break\" /><text value=\"friends = {\" /><text value=\"&quot;Don&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;Sue&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;Luke&quot;\" class=\"string\" /><text value=\"}\" /><text type=\"break\" /><text type=\"break\" /><text type=\"break\" /><text value=\"everybody = classmates.union(friends)\" /><text type=\"break\" /><text value=\"print(everybody)\" /><text type=\"break\" /><text type=\"break\" /><text value=\"common = classmates.intersection(friends)\" /><text type=\"break\" /><text value=\"print(common)\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"72\" endIndex=\"81\" /><option startIndex=\"128\" endIndex=\"134\" /></options></interaction></interactions></code><p visible-if=\"wrong\">Wähle <code>everybody</code>, gefolgt von <code>common</code> aus.</p></body></html>"
          },
          {
            "title": "Question: Union",
            "id": 89441,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Welche Anweisung verwenden wir, um die Elemente von zwei Mengen zu einer neuen Menge zu verbinden?</p><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\"><code>union()</code></item><item value=\"2\" correct=\"false\"><code>issubset()</code></item></selection><p visible-if=\"wrong\">Wähle <code>union()</code> aus.</p></body></html>"
          },
          {
            "title": "Question: No duplicates",
            "id": 89442,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Wie viele Elemente hat <code>all_flights</code>?</p><code version=\"2\" codelang=\"python\" name=\"script.py\" visible-if=\"always\"><content><text value=\"arrivals = {\" /><text value=\"&quot;JL5273&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;NH5753&quot;\" class=\"string\" /><text value=\"}\" /><text type=\"break\" /><text value=\"departures = {\" /><text value=\"&quot;AA5827&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;BA4616&quot;\" class=\"string\" /><text value=\"}\" /><text type=\"break\" /><text type=\"break\" /><text value=\"all_flights = arrivals.union(departures)\" /><text type=\"break\" /><text value=\"print(all_flights)\" /></content><output><content><text value=\"{'JL5273', 'BA4616', 'NH5753', 'AA5827'}\" /></content></output></code><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\">Vier</item><item value=\"2\" correct=\"false\">Zwei</item></selection><p visible-if=\"wrong\">Wähle Vier aus.</p></body></html>"
          },
          {
            "title": "Question: Intersection",
            "id": 89443,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Welche Anweisung verwenden wir, um eine Menge der gemeinsamen Elemente zwischen zwei Mengen zu erstellen?</p><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\"><code>intersection()</code></item><item value=\"2\" correct=\"false\"><code>union()</code></item></selection><p visible-if=\"wrong\">Wähle <code>intersection()</code> aus.</p></body></html>"
          },
          {
            "title": "Question: Union vs Intersection",
            "id": 89444,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Wie könnte das Set <code>destinations</code> erstellt worden sein?</p><code version=\"2\" codelang=\"python\" name=\"script.py\" visible-if=\"always\"><content><text value=\"visited = {\" /><text value=\"&quot;Paris&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;New York&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;Tokyo&quot;\" class=\"string\" /><text value=\"}\" /><text type=\"break\" /><text value=\"holiday_plans = {\" /><text value=\"&quot;Rome&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;Paris&quot;\" class=\"string\" /><text value=\"}\" /><text type=\"break\" /><text type=\"break\" /><text value=\"destinations = {\" /><text value=\"&quot;Paris&quot;\" class=\"string\" /><text value=\"}\" /></content></code><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\">Durch die Verwendung von <code>intersection()</code> mit <code>visited</code> und <code>holiday_plans</code></item><item value=\"2\" correct=\"false\">Durch die Verwendung von <code>union()</code> mit <code>visited</code> und <code>holiday_plans</code></item></selection><p visible-if=\"wrong\">Durch die Verwendung von <code>intersection()</code> mit <code>visited</code> und <code>holiday_plans</code>.</p></body></html>"
          },
          {
            "title": "Question: Save in variable",
            "id": 89445,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Wie können wir die von <code>union()</code> oder <code>intersection()</code> zurückgegebene Menge wiederverwenden?</p><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\">Indem du die Anweisung einer Variable zuweist, speicherst du tatsächlich das Ergebnis</item><item value=\"2\" correct=\"false\">Indem wir es anzeigen und dann selbst programmieren</item></selection><p visible-if=\"wrong\">Indem du die Anweisung einer Variable zuweist, speicherst du tatsächlich das Ergebnis.</p></body></html>"
          },
          {
            "title": "Example: Union",
            "id": 89446,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Verwende <code>union()</code>, um die <code>volunteers</code>-Menge mit den <code>coordinators</code> zu verbinden, um eine Menge aller Personen zu erhalten, die eine Veranstaltung organisieren.</p><code version=\"2\" codelang=\"python\" name=\"script.py\" visible-if=\"always\"><content><text value=\"volunteers = {\" /><text value=\"&quot;Jess&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;Ty&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;Kevin&quot;\" class=\"string\" /><text value=\"}\" /><text type=\"break\" /><text value=\"coordinators = {\" /><text value=\"&quot;Mae&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;Sue&quot;\" class=\"string\" /><text value=\"}\" /><text type=\"break\" /><text type=\"break\" /><text value=\"print(volunteers.union(coordinators))\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"84\" endIndex=\"85\" /><option startIndex=\"85\" endIndex=\"90\" /><option startIndex=\"90\" endIndex=\"91\" /><option startIndex=\"91\" endIndex=\"103\" /><option startIndex=\"103\" endIndex=\"104\" /></options></interaction></interactions><output><content><text value=\"{'Mae', 'Kevin', 'Jess', 'Sue', 'Ty'}\" /></content></output></code><p visible-if=\"wrong\">Wähle <code>.</code>, gefolgt von <code>union</code> und schließlich <code>(</code>, <code>coordinators</code>, <code>)</code> aus.</p></body></html>"
          },
          {
            "title": "Example: Intersection",
            "id": 89448,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Finde die gemeinsamen Klassen von Andy und May, indem du die <code>.intersection()</code>-Anweisung mit <code>may_classes</code> in den Klammern verwendest.</p><code version=\"2\" codelang=\"python\" name=\"script.py\" visible-if=\"always\"><content><text value=\"andy_classes = {\" /><text value=\"&quot;french&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;ballet&quot;\" class=\"string\" /><text value=\"}\" /><text type=\"break\" /><text value=\"may_classes = {\" /><text value=\"&quot;french&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;drums&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;pottery&quot;\" class=\"string\" /><text value=\"}\" /><text type=\"break\" /><text type=\"break\" /><text value=\"print(andy_classes.intersection(may_classes))\" /></content><interactions><interaction type=\"validatedInput\" isDefault=\"true\" startIndex=\"100\" endIndex=\"126\" /></interactions><output><content><text value=\"{'french'}\" /></content></output></code><p visible-if=\"wrong\">Gib <code>.intersection(may_classes)</code> ein.</p></body></html>"
          },
          {
            "title": "Example: Union vs Intersection",
            "id": 89449,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Verwende eine Anweisung, um eine Menge zu erstellen, die alle Elemente der <code>even</code> und <code>odd</code> Mengen enthält.</p><code version=\"2\" codelang=\"python\" name=\"script.py\" visible-if=\"always\"><content><text value=\"even = {\" /><text value=\"0\" class=\"number\" /><text value=\", \" /><text value=\"2\" class=\"number\" /><text value=\", \" /><text value=\"4\" class=\"number\" /><text value=\", \" /><text value=\"6\" class=\"number\" /><text value=\"}\" /><text type=\"break\" /><text value=\"odd = {\" /><text value=\"1\" class=\"number\" /><text value=\", \" /><text value=\"3\" class=\"number\" /><text value=\", \" /><text value=\"5\" class=\"number\" /><text value=\", \" /><text value=\"7\" class=\"number\" /><text value=\"}\" /><text type=\"break\" /><text type=\"break\" /><text value=\"print(even.union(odd))\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"50\" endIndex=\"51\" /><option startIndex=\"51\" endIndex=\"56\" /><option startIndex=\"56\" endIndex=\"57\" /><option startIndex=\"57\" endIndex=\"60\" /><option startIndex=\"60\" endIndex=\"61\" /><option correct=\"false\"><content><text value=\"intersection\" /></content></option></options></interaction></interactions><output><content><text value=\"{0, 1, 2, 3, 4, 5, 6, 7}\" /></content></output></code><p visible-if=\"wrong\">Wähle <code>.</code>, gefolgt von <code>union</code> und schließlich <code>(</code>, <code>odd</code>, <code>)</code> aus.</p></body></html>"
          },
          {
            "title": "Example: Save in variable",
            "id": 89450,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Code die Variable <code>common_div</code>, um die gemeinsamen Teiler von fünfzehn und sechs zu speichern, die sich aus dem Schnittpunkt der beiden Mengen ergeben.</p><code version=\"2\" codelang=\"python\" name=\"script.py\" visible-if=\"always\"><content><text value=\"div_15 = {\" /><text value=\"1\" class=\"number\" /><text value=\", \" /><text value=\"3\" class=\"number\" /><text value=\", \" /><text value=\"5\" class=\"number\" /><text value=\", \" /><text value=\"15\" class=\"number\" /><text value=\"}\" /><text type=\"break\" /><text value=\"div_6 = {\" /><text value=\"1\" class=\"number\" /><text value=\", \" /><text value=\"2\" class=\"number\" /><text value=\", \" /><text value=\"3\" class=\"number\" /><text value=\", \" /><text value=\"6\" class=\"number\" /><text value=\"}\" /><text type=\"break\" /><text type=\"break\" /><text value=\"common_div = div_15.intersection(div_6)\" /><text type=\"break\" /><text type=\"break\" /><text value=\"print(common_div)\" /></content><interactions><interaction type=\"validatedInput\" isDefault=\"true\" startIndex=\"45\" endIndex=\"57\" /></interactions><output><content><text value=\"{1, 3}\" /></content></output></code><p visible-if=\"wrong\">Gib <code>common_div =</code> ein.</p></body></html>"
          }
        ]
      },
      {
        "id": 9980,
        "title": "Unterschied",
        "type": "practiceLevel1",
        "lessons": [
          {
            "title": "Difference",
            "id": 89334,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Um eine Menge von Elementen zu erhalten, die in <code>classmates</code>, aber nicht in <code>friends</code> vorhanden sind, verwenden wir die <code>difference()</code>-Anweisung.</p><code version=\"2\" codelang=\"python\" name=\"script.py\" visible-if=\"always\"><content><text value=\"classmates = {\" /><text value=\"&quot;Sue&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;Paul&quot;\" class=\"string\" /><text value=\"}\" /><text type=\"break\" /><text value=\"friends = {\" /><text value=\"&quot;Don&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;Sue&quot;\" class=\"string\" /><text value=\"}\" /><text type=\"break\" /><text type=\"break\" /><text value=\"print(classmates.difference(friends))\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"72\" endIndex=\"82\" /><option startIndex=\"82\" endIndex=\"83\" /><option startIndex=\"90\" endIndex=\"91\" /></options></interaction></interactions><output><content><text value=\"{'Paul'}\" /></content></output></code><p visible-if=\"wrong\">Wähle <code>difference</code>, gefolgt von <code>(</code> und schließlich <code>)</code> aus.</p></body></html>"
          },
          {
            "title": "Left minus right",
            "id": 89335,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Die Verwendung von <code>difference()</code> gibt uns die Elemente, die die linke Menge, hier <code>classmates</code>, hat, aber die rechte Menge, hier <code>friends</code>, nicht hat.</p><code version=\"2\" codelang=\"python\" name=\"script.py\" visible-if=\"always\"><content><text value=\"classmates = {\" /><text value=\"&quot;Sue&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;Paul&quot;\" class=\"string\" /><text value=\"}\" /><text type=\"break\" /><text value=\"friends = {\" /><text value=\"&quot;Don&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;Sue&quot;\" class=\"string\" /><text value=\"}\" /><text type=\"break\" /><text type=\"break\" /><text value=\"print(classmates.difference(friends))\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"61\" endIndex=\"71\" /><option startIndex=\"83\" endIndex=\"90\" /></options></interaction></interactions><output><content><text value=\"{'Paul'}\" /></content></output></code><p visible-if=\"wrong\">Wähle <code>classmates</code>, gefolgt von <code>friends</code> aus.</p></body></html>"
          },
          {
            "title": "The other way around",
            "id": 89336,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Für die Elemente, die in <code>friends</code>, aber nicht in <code>classmates</code> sind, müssen wir <code>friends</code> links und <code>classmates</code> rechts codieren.</p><code version=\"2\" codelang=\"python\" name=\"script.py\" visible-if=\"always\"><content><text value=\"classmates = {\" /><text value=\"&quot;Sue&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;Paul&quot;\" class=\"string\" /><text value=\"}\" /><text type=\"break\" /><text value=\"friends = {\" /><text value=\"&quot;Don&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;Sue&quot;\" class=\"string\" /><text value=\"}\" /><text type=\"break\" /><text type=\"break\" /><text value=\"print(friends.difference(classmates))\" /></content><output><content><text value=\"{'Don'}\" /></content></output></code></body></html>"
          },
          {
            "title": "Save in variable",
            "id": 89337,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Wie zuvor können wir die mit <code>difference()</code> erhaltene Menge in einer Variable wie <code>friends_not_classmates</code> speichern.</p><code version=\"2\" codelang=\"python\" name=\"script.py\" visible-if=\"always\"><content><text value=\"classmates = {\" /><text value=\"&quot;Sue&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;Paul&quot;\" class=\"string\" /><text value=\"}\" /><text type=\"break\" /><text value=\"friends = {\" /><text value=\"&quot;Don&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;Sue&quot;\" class=\"string\" /><text value=\"}\" /><text type=\"break\" /><text type=\"break\" /><text value=\"friends_not_classmates = friends.difference(classmates)\" /><text type=\"break\" /><text value=\"print(friends_not_classmates)\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"55\" endIndex=\"77\" /><option startIndex=\"78\" endIndex=\"79\" /></options></interaction></interactions><output><content><text value=\"{'Don'}\" /></content></output></code><p visible-if=\"wrong\">Wähle <code>friends_not_classmates</code>, gefolgt von <code>=</code> aus.</p></body></html>"
          },
          {
            "title": "Question: Difference",
            "id": 89433,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Was macht die <code>difference()</code>-Anweisung, wenn sie mit zwei Sets verwendet wird?</p><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\">Es gibt uns eine Menge von Elementen, die im linken Set vorhanden sind, aber im rechten fehlen</item><item value=\"2\" correct=\"false\">Es gibt uns eine Menge gemeinsamer Elemente der beiden Mengen</item></selection><p visible-if=\"wrong\">Es gibt uns eine Menge von Elementen, die im linken Set vorhanden sind, aber im rechten fehlen.</p></body></html>"
          },
          {
            "title": "Question: Left minus right",
            "id": 89434,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Was enthält die <code>difference</code>-Menge?</p><code version=\"2\" codelang=\"python\" name=\"script.py\" visible-if=\"always\"><content><text value=\"animals = {\" /><text value=\"&quot;whale&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;dog&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;cat&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;giraffe&quot;\" class=\"string\" /><text value=\"}\" /><text type=\"break\" /><text type=\"break\" /><text value=\"pets = {\" /><text value=\"&quot;dog&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;cat&quot;\" class=\"string\" /><text value=\"}\" /><text type=\"break\" /><text type=\"break\" /><text value=\"difference = animals.difference(pets)\" /><text type=\"break\" /><text value=\"print(difference)\" /></content><output><content><text value=\"{'giraffe', 'whale'}\" /></content></output></code><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\"><code>{'giraffe', 'whale'}</code></item><item value=\"2\" correct=\"false\">Eine leere Menge </item></selection><p visible-if=\"wrong\"><code>{'giraffe', 'whale'}</code>.</p></body></html>"
          },
          {
            "title": "Question: The other way around",
            "id": 89435,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Was wird in der Konsole angezeigt?</p><code version=\"2\" codelang=\"python\" name=\"script.py\" visible-if=\"always\"><content><text value=\"andy_classes = {\" /><text value=\"&quot;french&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;ballet&quot;\" class=\"string\" /><text value=\"}\" /><text type=\"break\" /><text value=\"may_classes = {\" /><text value=\"&quot;drums&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;pottery&quot;\" class=\"string\" /><text value=\"}\" /><text type=\"break\" /><text type=\"break\" /><text type=\"break\" /><text value=\"print(andy_classes.difference(may_classes))\" /><text type=\"break\" /><text value=\"print(may_classes.difference(andy_classes))\" /></content><output><content><text value=\"{'french', 'ballet'}\" /><text type=\"break\" /><text value=\"{'pottery', 'drums'}\" /></content></output></code><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\">Zuerst <code>{'french', 'ballet'}</code>, und dann <code>{'pottery', 'drums'}</code></item><item value=\"2\" correct=\"false\">Nichts</item></selection><p visible-if=\"wrong\">Zuerst <code>{'french', 'ballet'}</code>, und dann <code>{'pottery', 'drums'}</code>.</p></body></html>"
          },
          {
            "title": "Question: Save in variable",
            "id": 89436,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Wie können wir die Menge, die wir mit <code>difference()</code> erhalten, wiederverwenden?</p><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\">Wir können die Anweisung einer Variable zuweisen und so die Menge speichern, die sie uns gibt</item><item value=\"2\" correct=\"false\">Wir können die Menge nicht wiederverwenden, weil wir sie nicht in einer Variable speichern können</item></selection><p visible-if=\"wrong\">Wir können die Anweisung einer Variable zuweisen und so die Menge speichern, die sie uns gibt.</p></body></html>"
          },
          {
            "title": "Example: Difference",
            "id": 89437,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Erhalte eine Menge von <code>networks</code>, die nicht in <code>public</code> sind, indem du <code>networks.difference(public)</code> codierst.</p><code version=\"2\" codelang=\"python\" name=\"script.py\" visible-if=\"always\"><content><text value=\"networks = {\" /><text value=\"&quot;May's&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;PizzaParty5&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;Wi-Free&quot;\" class=\"string\" /><text value=\"} \" /><text type=\"break\" /><text value=\"public = {\" /><text value=\"&quot;Wi-Free&quot;\" class=\"string\" /><text value=\"}\" /><text type=\"break\" /><text type=\"break\" /><text value=\"print(networks.difference(public))\" /></content><interactions><interaction type=\"validatedInput\" isDefault=\"true\" startIndex=\"76\" endIndex=\"103\" /></interactions><output><content><text value=\"{&quot;May's&quot;, 'PizzaParty5'}\" /></content></output></code><p visible-if=\"wrong\">Gib <code>networks.difference(public)</code> ein.</p></body></html>"
          },
          {
            "title": "Example: Left minus right",
            "id": 89438,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Verwende <code>difference()</code> mit <code>wishlist</code> auf der linken Seite, um die Artikel zu erhalten, die auf der <code>wishlist</code> sind, aber nicht im <code>cart</code>.</p><code version=\"2\" codelang=\"python\" name=\"script.py\" visible-if=\"always\"><content><text value=\"wishlist = {\" /><text value=\"&quot;earpods&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;notebook&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;handgloves&quot;\" class=\"string\" /><text value=\"}\" /><text type=\"break\" /><text value=\"cart = {\" /><text value=\"&quot;cat food&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;book&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;earpods&quot;\" class=\"string\" /><text value=\"}\" /><text type=\"break\" /><text type=\"break\" /><text value=\"print(wishlist.difference(cart))\" /><text type=\"break\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"95\" endIndex=\"103\" /><option startIndex=\"103\" endIndex=\"104\" /><option startIndex=\"104\" endIndex=\"114\" /><option startIndex=\"114\" endIndex=\"115\" /><option startIndex=\"115\" endIndex=\"119\" /><option startIndex=\"119\" endIndex=\"120\" /></options></interaction></interactions><output><content><text value=\"{'notebook', 'handgloves'}\" /></content></output></code><p visible-if=\"wrong\">Wähle <code>wishlist</code>, gefolgt von <code>.</code> und schließlich <code>difference</code>, <code>(</code>, <code>cart</code>, <code>)</code> aus.</p></body></html>"
          },
          {
            "title": "Example: The other way around",
            "id": 89439,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Verwende <code>difference()</code> mit <code>cart</code> auf der linken Seite, um die Artikel zu erhalten, die sich im <code>cart</code> befinden, ohne auf der <code>wishlist</code> zu sein.</p><code version=\"2\" codelang=\"python\" name=\"script.py\" visible-if=\"always\"><content><text value=\"wishlist = {\" /><text value=\"&quot;earpods&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;notebook&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;handgloves&quot;\" class=\"string\" /><text value=\"}\" /><text type=\"break\" /><text value=\"cart = {\" /><text value=\"&quot;cat food&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;book&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;earpods&quot;\" class=\"string\" /><text value=\"}\" /><text type=\"break\" /><text type=\"break\" /><text value=\"print(cart.difference(wishlist))\" /><text type=\"break\" /></content><output><content><text value=\"{'cat food', 'book'}\" /></content></output></code></body></html>"
          },
          {
            "title": "Example: Save in variable",
            "id": 89440,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Code die Variable <code>not_pets</code>, die die Elemente speichert, die die <code>animals</code> Menge hat, aber die <code>pets</code> nicht hat.</p><code version=\"2\" codelang=\"python\" name=\"script.py\" visible-if=\"always\"><content><text value=\"animals = {\" /><text value=\"&quot;whale&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;dog&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;cat&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;giraffe&quot;\" class=\"string\" /><text value=\"}\" /><text type=\"break\" /><text type=\"break\" /><text value=\"pets = {\" /><text value=\"&quot;dog&quot;\" class=\"string\" /><text value=\", \" /><text value=\"&quot;cat&quot;\" class=\"string\" /><text value=\"}\" /><text type=\"break\" /><text type=\"break\" /><text value=\"not_pets = animals.difference(pets)\" /><text type=\"break\" /><text value=\"print(not_pets)\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"69\" endIndex=\"77\" /><option startIndex=\"78\" endIndex=\"79\" /><option startIndex=\"80\" endIndex=\"87\" /><option startIndex=\"87\" endIndex=\"88\" /><option startIndex=\"88\" endIndex=\"98\" /><option startIndex=\"98\" endIndex=\"99\" /><option startIndex=\"99\" endIndex=\"103\" /><option startIndex=\"103\" endIndex=\"104\" /></options></interaction></interactions><output><content><text value=\"{'giraffe', 'whale'}\" /></content></output></code><p visible-if=\"wrong\">Wähle <code>not_pets</code>, gefolgt von <code>=</code> und schließlich <code>animals</code>, <code>.</code>, <code>difference</code>, <code>(</code>, <code>pets</code>, <code>)</code> aus.</p></body></html>"
          }
        ]
      }
    ]
  }
}