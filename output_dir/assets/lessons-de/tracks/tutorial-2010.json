{
  "tutorial": {
    "id": 2010,
    "version": 9,
    "type": "guidedProjectOptional",
    "isNew": false,
    "codeLanguage": "javascript",
    "title": "Geschenkeladen-Bericht",
    "descriptionContent": "Verwende dein Wissen über Array-Operationen, um einen Bericht für den Geschenkeladen zu erstellen.",
    "shortDescriptionContent": "",
    "showInTrack": true,
    "iconBanner": "tutorial-2010-icon-banner.svg",
    "chapters": [
      {
        "id": 12785,
        "title": "Geschenkeladen-Bericht",
        "type": "practiceLevel3",
        "lessons": [
          {
            "title": "Step 1",
            "id": 115889,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "In diesem Projekt wirst du dein Wissen über JavaScript-Array-Operatoren wie `.reduce()`, `.map()` und `.filter()` nutzen, um die Verkaufsdaten eines neu eröffneten Geschenkeladens zu analysieren.\n\nWir werden uns auf die Analyse der Verkäufe der ersten Woche konzentrieren, also lass uns zuerst eine Variable namens `firstWeekSales` erstellen, um ein Array zu speichern, das nur die Verkaufsdaten der ersten Woche enthält. Um eine prägnante Syntax zu üben, solltest du eine Inline-Funktion verwenden.\n\n1. Rufe die entsprechende JavaScript-Funktion auf dem `sales`-Array auf, um ein neues Array zu erzeugen, das nur die Verkaufsdaten der ersten Woche enthält. Speichere dein Ergebnis in `firstWeekSales`.\n2. Dann `console.log` den Text `\"First Week Sales: \"` verkettet mit `firstWeekSales`, um deine Arbeit zu überprüfen. Du solltest nur 7 Werte in deinem neuen Array haben.\n\nBeispielausgabe:\n```\nFirst Week Sales: 455,505,340,780,690,880,900\n```",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "index.js",
                  "codeLanguage": "javascript",
                  "content": "let sales = [455, 505, 340, 780, 690, 880, 900, 685, 835, 754];\nlet customers = [25, 30, 20, 35, 36, 32, 44, 45, 34, 15];\nlet daysOfTheWeek = [\"Monday\", \"Tuesday\", \"Wednesday\",\"Thursday\", \"Friday\", \"Saturday\", \"Sunday\"];\n\n\n\n\n",
                  "solvedContent": "let sales = [455, 505, 340, 780, 690, 880, 900, 685, 835, 754];\nlet customers = [25, 30, 20, 35, 36, 32, 44, 45, 34, 15];\nlet daysOfTheWeek = [\"Monday\", \"Tuesday\", \"Wednesday\",\"Thursday\", \"Friday\", \"Saturday\", \"Sunday\"];\n\nlet firstWeekSales = sales.filter(function(element, index) {\n return index < 7;\n});\nconsole.log(\"First Week Sales: \" + firstWeekSales);"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Step 2",
            "id": 116143,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Jetzt müssen wir ein entsprechendes Array mit den Kundendaten der ersten Woche erstellen. Wie im letzten Schritt erwähnt, werden wir eine Inline-Funktion zur weiteren Übung verwenden.\n\n1. Erstelle eine Variable namens `firstWeekCustomers` und verwende eine ähnliche Syntax wie im vorherigen Schritt, um ein Array mit den Kundendaten der ersten 7 Tage zu speichern.\n2. Wie zuvor, `console.log` den Text `\"First Week Customers: \"` verkettet mit `firstWeekCustomers`, um deine Arbeit zu überprüfen. Du solltest nur 7 Werte in deinem neuen Array haben.\n\nDeine Ausgabe aus beiden Dateien sollte wie folgt aussehen:\n```\nFirst Week Sales: 455,505,340,780,690,880,900\nFirst Week Customers: 25,30,20,35,36,32,44\n```",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "index.js",
                  "codeLanguage": "javascript",
                  "content": "let sales = [455, 505, 340, 780, 690, 880, 900, 685, 835, 754];\nlet customers = [25, 30, 20, 35, 36, 32, 44, 45, 34, 15];\nlet daysOfTheWeek = [\"Monday\", \"Tuesday\", \"Wednesday\",\"Thursday\", \"Friday\", \"Saturday\", \"Sunday\"];\n\nlet firstWeekSales = sales.filter(function(element, index) {\n return index < 7;\n});\nconsole.log(\"First Week Sales: \" + firstWeekSales);\n\n\n\n\n",
                  "solvedContent": "let sales = [455, 505, 340, 780, 690, 880, 900, 685, 835, 754];\nlet customers = [25, 30, 20, 35, 36, 32, 44, 45, 34, 15];\nlet daysOfTheWeek = [\"Monday\", \"Tuesday\", \"Wednesday\",\"Thursday\", \"Friday\", \"Saturday\", \"Sunday\"];\n\nlet firstWeekSales = sales.filter(function(element, index) {\n return index < 7;\n});\nconsole.log(\"First Week Sales: \" + firstWeekSales);\n\nlet firstWeekCustomers = customers.filter(function(element, index) {\n return index < 7;\n});\nconsole.log(\"First Week Customers: \" + firstWeekCustomers);"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Step 3",
            "id": 116144,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Lass uns unsere Syntax vereinfachen, indem wir Arrow Functions verwenden. Du solltest die gleichen `console.log` Anweisungen beibehalten.\n\n1. Konvertiere die beiden `.filter()` Inline-Funktionen zu Arrow Functions.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "index.js",
                  "codeLanguage": "javascript",
                  "content": "let sales = [455, 505, 340, 780, 690, 880, 900, 685, 835, 754];\nlet customers = [25, 30, 20, 35, 36, 32, 44, 45, 34, 15];\nlet daysOfTheWeek = [\"Monday\", \"Tuesday\", \"Wednesday\",\"Thursday\", \"Friday\", \"Saturday\", \"Sunday\"];\n\nlet firstWeekSales = sales.filter(function(element, index) {\n return index < 7;\n});\nconsole.log(\"First Week Sales: \" + firstWeekSales);\n\nlet firstWeekCustomers = customers.filter(function(element, index) {\n return index < 7;\n});\nconsole.log(\"First Week Customers: \" + firstWeekCustomers);",
                  "solvedContent": "let sales = [455, 505, 340, 780, 690, 880, 900, 685, 835, 754];\nlet customers = [25, 30, 20, 35, 36, 32, 44, 45, 34, 15];\nlet daysOfTheWeek = [\"Monday\", \"Tuesday\", \"Wednesday\",\"Thursday\", \"Friday\", \"Saturday\", \"Sunday\"];\n\nlet firstWeekSales = sales.filter((element, index) => index < 7);\nconsole.log(\"First Week Sales: \" + firstWeekSales);\n\nlet firstWeekCustomers = customers.filter((element, index) => index < 7);\nconsole.log(\"First Week Customers: \" + firstWeekCustomers);"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Step 4",
            "id": 116145,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Wir haben ein Array mit den Verkaufszahlen der ersten Woche. Lass uns die Summe berechnen, um den wöchentlichen Gesamtumsatz des Geschenkshops zu ermitteln.\n\n1. Erstelle eine neue Variable mit dem Namen `firstWeekSalesSum`.\n2. Rufe dann die passende eingebaute JavaScript-Funktion auf dem `firstWeekSales` Array auf, um die Summe zu berechnen. Speichere diesen Wert in deiner neu erstellten Variable `firstWeekSalesSum`. Du solltest eine Arrow-Funktion verwenden.\n3. Schließlich, `console.log` den Text `\"First Week Sales Sum: \"` zusammen mit der `firstWeekSalesSum` Variable, um deine Arbeit zu überprüfen.\n\nDeine Ausgabe sollte sein:\n```\nFirst Week Sales: 455,505,340,780,690,880,900\nFirst Week Customers: 25,30,20,35,36,32,44\nFirst Week Sales Sum: 4550 \n```",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "index.js",
                  "codeLanguage": "javascript",
                  "content": "let sales = [455, 505, 340, 780, 690, 880, 900, 685, 835, 754];\nlet customers = [25, 30, 20, 35, 36, 32, 44, 45, 34, 15];\nlet daysOfTheWeek = [\"Monday\", \"Tuesday\", \"Wednesday\",\"Thursday\", \"Friday\", \"Saturday\", \"Sunday\"];\n\nlet firstWeekSales = sales.filter((element, index) => index < 7);\nconsole.log(\"First Week Sales: \" + firstWeekSales);\n\nlet firstWeekCustomers = customers.filter((element, index) => index < 7);\nconsole.log(\"First Week Customers: \" + firstWeekCustomers);\n\n\n",
                  "solvedContent": "let sales = [455, 505, 340, 780, 690, 880, 900, 685, 835, 754];\nlet customers = [25, 30, 20, 35, 36, 32, 44, 45, 34, 15];\nlet daysOfTheWeek = [\"Monday\", \"Tuesday\", \"Wednesday\",\"Thursday\", \"Friday\", \"Saturday\", \"Sunday\"];\n\nlet firstWeekSales = sales.filter((element, index) => index < 7);\nconsole.log(\"First Week Sales: \" + firstWeekSales);\n\nlet firstWeekCustomers = customers.filter((element, index) => index < 7);\nconsole.log(\"First Week Customers: \" + firstWeekCustomers);\n\nlet firstWeekSalesSum = firstWeekSales.reduce((prev, curr) => prev + curr);\nconsole.log(\"First Week Sales Sum: \" + firstWeekSalesSum);"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Step 5",
            "id": 116147,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Lass uns nun die gleiche Operation auf `firstWeekCustomers` durchführen, um die Gesamtzahl der Kunden der ersten Woche zu ermitteln. Du solltest wieder eine Arrow Function verwenden, um deine Syntax zu vereinfachen.\n\n1. Erstelle eine neue Variable namens `firstWeekCustomersSum`.\n2. Rufe dann die passende JavaScript-Funktion auf dem Array `firstWeekCustomers` auf, um dessen Summe zu berechnen, und speichere diesen Wert in deiner neu erstellten Variable `firstWeekCustomersSum`. Du solltest eine Arrow Function verwenden.\n3. Schließlich `console.log` den Text `\"First Week Customers Sum: \"` zusammen mit der Variable `firstWeekCustomersSum`, um deine Arbeit zu überprüfen.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "index.js",
                  "codeLanguage": "javascript",
                  "content": "let sales = [455, 505, 340, 780, 690, 880, 900, 685, 835, 754];\nlet customers = [25, 30, 20, 35, 36, 32, 44, 45, 34, 15];\nlet daysOfTheWeek = [\"Monday\", \"Tuesday\", \"Wednesday\",\"Thursday\", \"Friday\", \"Saturday\", \"Sunday\"];\n\nlet firstWeekSales = sales.filter((element, index) => index < 7);\nconsole.log(\"First Week Sales: \" + firstWeekSales);\n\nlet firstWeekCustomers = customers.filter((element, index) => index < 7);\nconsole.log(\"First Week Customers: \" + firstWeekCustomers);\n\nlet firstWeekSalesSum = firstWeekSales.reduce((prev, curr) => prev + curr);\nconsole.log(\"First Week Sales Sum: \" + firstWeekSalesSum);\n\n\n",
                  "solvedContent": "let sales = [455, 505, 340, 780, 690, 880, 900, 685, 835, 754];\nlet customers = [25, 30, 20, 35, 36, 32, 44, 45, 34, 15];\nlet daysOfTheWeek = [\"Monday\", \"Tuesday\", \"Wednesday\",\"Thursday\", \"Friday\", \"Saturday\", \"Sunday\"];\n\nlet firstWeekSales = sales.filter((element, index) => index < 7);\nconsole.log(\"First Week Sales: \" + firstWeekSales);\n\nlet firstWeekCustomers = customers.filter((element, index) => index < 7);\nconsole.log(\"First Week Customers: \" + firstWeekCustomers);\n\nlet firstWeekSalesSum = firstWeekSales.reduce((prev, curr) => prev + curr);\nconsole.log(\"First Week Sales Sum: \" + firstWeekSalesSum);\n\nlet firstWeekCustomersSum = firstWeekCustomers.reduce((prev, curr) => prev + curr);\nconsole.log(\"First Week Customers Sum: \" + firstWeekCustomersSum);"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Step 6",
            "id": 116148,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Lass uns unsere berechneten Gesamtsummen verwenden, um die täglichen und die durchschnittlichen Kundeneinnahmen zu ermitteln.\n\n1. Erstelle eine Variable namens `firstWeekAverage` und berechne den täglichen Umsatzdurchschnitt mit `firstWeekSalesSum`.\n2. Erstelle dann eine Variable namens `firstWeekCustomerAvg` und berechne den durchschnittlichen Umsatz pro Kunde mit `firstWeekSalesSum` und `firstWeekCustomersSum`.\n3. Um deine Arbeit zu überprüfen, `console.log` den Text `\"First Week Average: \"` verkettet mit der Variable `firstWeekAverage`.\n4. Schließlich `console.log` den Text `\"First Week Customer Average: \"` verkettet mit der Variable `firstWeekCustomerAvg`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "index.js",
                  "codeLanguage": "javascript",
                  "content": "let sales = [455, 505, 340, 780, 690, 880, 900, 685, 835, 754];\nlet customers = [25, 30, 20, 35, 36, 32, 44, 45, 34, 15];\nlet daysOfTheWeek = [\"Monday\", \"Tuesday\", \"Wednesday\",\"Thursday\", \"Friday\", \"Saturday\", \"Sunday\"];\n\nlet firstWeekSales = sales.filter((element, index) => index < 7);\nconsole.log(\"First Week Sales: \" + firstWeekSales);\n\nlet firstWeekCustomers = customers.filter((element, index) => index < 7);\nconsole.log(\"First Week Customers: \" + firstWeekCustomers);\n\nlet firstWeekSalesSum = firstWeekSales.reduce((prev, curr) => prev + curr);\nconsole.log(\"First Week Sales Sum: \" + firstWeekSalesSum);\n\nlet firstWeekCustomersSum = firstWeekCustomers.reduce((prev, curr) => prev + curr);\nconsole.log(\"First Week Customers Sum: \" + firstWeekCustomersSum);\n\n\n\n\n",
                  "solvedContent": "let sales = [455, 505, 340, 780, 690, 880, 900, 685, 835, 754];\nlet customers = [25, 30, 20, 35, 36, 32, 44, 45, 34, 15];\nlet daysOfTheWeek = [\"Monday\", \"Tuesday\", \"Wednesday\",\"Thursday\", \"Friday\", \"Saturday\", \"Sunday\"];\n\nlet firstWeekSales = sales.filter((element, index) => index < 7);\nconsole.log(\"First Week Sales: \" + firstWeekSales);\n\nlet firstWeekCustomers = customers.filter((element, index) => index < 7);\nconsole.log(\"First Week Customers: \" + firstWeekCustomers);\n\nlet firstWeekSalesSum = firstWeekSales.reduce((prev, curr) => prev + curr);\nconsole.log(\"First Week Sales Sum: \" + firstWeekSalesSum);\n\nlet firstWeekCustomersSum = firstWeekCustomers.reduce((prev, curr) => prev + curr);\nconsole.log(\"First Week Customers Sum: \" + firstWeekCustomersSum);\n\nlet firstWeekAverage = firstWeekSalesSum / 7;\nlet firstWeekCustomerAvg = firstWeekSalesSum / firstWeekCustomersSum;\nconsole.log(\"First Week Average: \" + firstWeekAverage);\nconsole.log(\"First Week Customer Average: \" + firstWeekCustomerAvg);"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Step 7",
            "id": 116149,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Der Geschenkladenbesitzer hat um detailliertere Analysen für die erste Woche gebeten. Sie möchten den durchschnittlichen Verkauf pro Kunde für jeden Tag sehen, mit der entsprechenden Bezeichnung des Wochentags. Lass uns zuerst das Array der täglichen Verkaufsdurchschnitte erstellen.\n\n1. Erstelle eine neue Variable namens `firstWeekDailyAverage`.\n2. Rufe dann die `.map()` Funktion auf dem `firstWeekSales` Array auf, um den durchschnittlichen Verkauf pro Kunde für jeden Tag zu berechnen und speichere das neue Array in `firstWeekDailyAverage`. Du solltest den `index` Wert des Arrays verwenden, um auf das `firstWeekCustomers` Array zuzugreifen und deine Berechnung durchzuführen (die Verkäufe jedes Tages geteilt durch die Anzahl der Kunden an diesem Tag).\n2. Dann `console.log` deine resultierende `firstWeekDailyAverage` Variable, um deine Arbeit zu überprüfen. Füge keinen Text hinzu.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "index.js",
                  "codeLanguage": "javascript",
                  "content": "let sales = [455, 505, 340, 780, 690, 880, 900, 685, 835, 754];\nlet customers = [25, 30, 20, 35, 36, 32, 44, 45, 34, 15];\nlet daysOfTheWeek = [\"Monday\", \"Tuesday\", \"Wednesday\",\"Thursday\", \"Friday\", \"Saturday\", \"Sunday\"];\n\nlet firstWeekSales = sales.filter((element, index) => index < 7);\nconsole.log(\"First Week Sales: \" + firstWeekSales);\n\nlet firstWeekCustomers = customers.filter((element, index) => index < 7);\nconsole.log(\"First Week Customers: \" + firstWeekCustomers);\n\nlet firstWeekSalesSum = firstWeekSales.reduce((prev, curr) => prev + curr);\nconsole.log(\"First Week Sales Sum: \" + firstWeekSalesSum);\n\nlet firstWeekCustomersSum = firstWeekCustomers.reduce((prev, curr) => prev + curr);\nconsole.log(\"First Week Customers Sum: \" + firstWeekCustomersSum);\n\nlet firstWeekAverage = firstWeekSalesSum / 7;\nlet firstWeekCustomerAvg = firstWeekSalesSum / firstWeekCustomersSum;\nconsole.log(\"First Week Average: \" + firstWeekAverage);\nconsole.log(\"First Week Customer Average: \" + firstWeekCustomerAvg);\n\n\n\n\n",
                  "solvedContent": "let sales = [455, 505, 340, 780, 690, 880, 900, 685, 835, 754];\nlet customers = [25, 30, 20, 35, 36, 32, 44, 45, 34, 15];\nlet daysOfTheWeek = [\"Monday\", \"Tuesday\", \"Wednesday\",\"Thursday\", \"Friday\", \"Saturday\", \"Sunday\"];\n\nlet firstWeekSales = sales.filter((element, index) => index < 7);\nconsole.log(\"First Week Sales: \" + firstWeekSales);\n\nlet firstWeekCustomers = customers.filter((element, index) => index < 7);\nconsole.log(\"First Week Customers: \" + firstWeekCustomers);\n\nlet firstWeekSalesSum = firstWeekSales.reduce((prev, curr) => prev + curr);\nconsole.log(\"First Week Sales Sum: \" + firstWeekSalesSum);\n\nlet firstWeekCustomersSum = firstWeekCustomers.reduce((prev, curr) => prev + curr);\nconsole.log(\"First Week Customers Sum: \" + firstWeekCustomersSum);\n\nlet firstWeekAverage = firstWeekSalesSum / 7;\nlet firstWeekCustomerAvg = firstWeekSalesSum / firstWeekCustomersSum;\nconsole.log(\"First Week Average: \" + firstWeekAverage);\nconsole.log(\"First Week Customer Average: \" + firstWeekCustomerAvg);\n\nlet firstWeekDailyAverage = firstWeekSales.map(function(element, index) {\n return (element / firstWeekCustomers[index]);\n});\nconsole.log(firstWeekDailyAverage);"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Step 8",
            "id": 116150,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Lass uns nun `.map()` verwenden, um jeden täglichen Durchschnitt zu kennzeichnen.\n\n1. Lösche zuerst die `console.log` Anweisung, die `firstWeekDailyAverage` protokolliert.\n2. Erstelle als Nächstes eine Variable namens `labeled` und rufe `.map()` auf der Variable `firstWeekDailyAverage` auf. Deine Funktion sollte den entsprechenden Wochentag (du kannst den `index`-Wert verwenden, um auf das `daysofTheWeek` Array zuzugreifen) mit einem Leerzeichen und dem Durchschnitt dieses Tages, gerundet auf 2 Dezimalstellen, verketten.\n3. Dann `console.log` die Variable `labeled`.\n\nZum Beispiel könnte dein resultierendes Array einen Wert enthalten: `Monday 28.55`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "index.js",
                  "codeLanguage": "javascript",
                  "content": "let sales = [455, 505, 340, 780, 690, 880, 900, 685, 835, 754];\nlet customers = [25, 30, 20, 35, 36, 32, 44, 45, 34, 15];\nlet daysOfTheWeek = [\"Monday\", \"Tuesday\", \"Wednesday\",\"Thursday\", \"Friday\", \"Saturday\", \"Sunday\"];\n\nlet firstWeekSales = sales.filter((element, index) => index < 7);\nconsole.log(\"First Week Sales: \" + firstWeekSales);\n\nlet firstWeekCustomers = customers.filter((element, index) => index < 7);\nconsole.log(\"First Week Customers: \" + firstWeekCustomers);\n\nlet firstWeekSalesSum = firstWeekSales.reduce((prev, curr) => prev + curr);\nconsole.log(\"First Week Sales Sum: \" + firstWeekSalesSum);\n\nlet firstWeekCustomersSum = firstWeekCustomers.reduce((prev, curr) => prev + curr);\nconsole.log(\"First Week Customers Sum: \" + firstWeekCustomersSum);\n\nlet firstWeekAverage = firstWeekSalesSum / 7;\nlet firstWeekCustomerAvg = firstWeekSalesSum / firstWeekCustomersSum;\nconsole.log(\"First Week Average: \" + firstWeekAverage);\nconsole.log(\"First Week Customer Average: \" + firstWeekCustomerAvg);\n\nlet firstWeekDailyAverage = firstWeekSales.map(function(element, index) {\n return (element / firstWeekCustomers[index]);\n});\n\nconsole.log(firstWeekDailyAverage);\n\n\n",
                  "solvedContent": "let sales = [455, 505, 340, 780, 690, 880, 900, 685, 835, 754];\nlet customers = [25, 30, 20, 35, 36, 32, 44, 45, 34, 15];\nlet daysOfTheWeek = [\"Monday\", \"Tuesday\", \"Wednesday\",\"Thursday\", \"Friday\", \"Saturday\", \"Sunday\"];\n\nlet firstWeekSales = sales.filter((element, index) => index < 7);\nconsole.log(\"First Week Sales: \" + firstWeekSales);\n\nlet firstWeekCustomers = customers.filter((element, index) => index < 7);\nconsole.log(\"First Week Customers: \" + firstWeekCustomers);\n\nlet firstWeekSalesSum = firstWeekSales.reduce((prev, curr) => prev + curr);\nconsole.log(\"First Week Sales Sum: \" + firstWeekSalesSum);\n\nlet firstWeekCustomersSum = firstWeekCustomers.reduce((prev, curr) => prev + curr);\nconsole.log(\"First Week Customers Sum: \" + firstWeekCustomersSum);\n\nlet firstWeekAverage = firstWeekSalesSum / 7;\nlet firstWeekCustomerAvg = firstWeekSalesSum / firstWeekCustomersSum;\nconsole.log(\"First Week Average: \" + firstWeekAverage);\nconsole.log(\"First Week Customer Average: \" + firstWeekCustomerAvg);\n\nlet firstWeekDailyAverage = firstWeekSales.map(function(element, index) {\n return (element / firstWeekCustomers[index]);\n});\n\nlet labeled = firstWeekDailyAverage.map(function(element, index) {\n return daysOfTheWeek[index] + \" \" + element.toFixed(2);\n});\nconsole.log(labeled);"
                }
              ],
              "hints": [
                {
                  "title": "Hint",
                  "content": "To round a number, you can call `.toFixed()` with the number of decimals passed as a parameter."
                }
              ]
            }
          },
          {
            "title": "Step 9",
            "id": 116152,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Abschließend wollen wir die beschrifteten Werte zu einem String kombinieren. Es gilt als Best Practice, unsere Ausgabe so lesbar wie möglich zu gestalten, daher sollte jeder Wert durch ein Komma und ein Leerzeichen getrennt werden.\n\n1. Lösche zuerst die `console.log` Anweisung, die die `labeled` Variable protokolliert.\n2. Erstelle als Nächstes eine Variable namens `labeledString`.\n3. Rufe dann die passende JavaScript-Funktion auf dem `labeled` Array auf, um die Werte zu einem einzigen String zu verketten, der in `labeledString` gespeichert wird. Jeder Wert sollte durch ein Komma und ein Leerzeichen getrennt werden.\n4. Schließlich, `console.log` deine neu erstellte `labeledString` Variable, um deine Arbeit zu überprüfen.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "index.js",
                  "codeLanguage": "javascript",
                  "content": "let sales = [455, 505, 340, 780, 690, 880, 900, 685, 835, 754];\nlet customers = [25, 30, 20, 35, 36, 32, 44, 45, 34, 15];\nlet daysOfTheWeek = [\"Monday\", \"Tuesday\", \"Wednesday\",\"Thursday\", \"Friday\", \"Saturday\", \"Sunday\"];\n\nlet firstWeekSales = sales.filter((element, index) => index < 7);\nconsole.log(\"First Week Sales: \" + firstWeekSales);\n\nlet firstWeekCustomers = customers.filter((element, index) => index < 7);\nconsole.log(\"First Week Customers: \" + firstWeekCustomers);\n\nlet firstWeekSalesSum = firstWeekSales.reduce((prev, curr) => prev + curr);\nconsole.log(\"First Week Sales Sum: \" + firstWeekSalesSum);\n\nlet firstWeekCustomersSum = firstWeekCustomers.reduce((prev, curr) => prev + curr);\nconsole.log(\"First Week Customers Sum: \" + firstWeekCustomersSum);\n\nlet firstWeekAverage = firstWeekSalesSum / 7;\nlet firstWeekCustomerAvg = firstWeekSalesSum / firstWeekCustomersSum;\nconsole.log(\"First Week Average: \" + firstWeekAverage);\nconsole.log(\"First Week Customer Average: \" + firstWeekCustomerAvg);\n\nlet firstWeekDailyAverage = firstWeekSales.map(function(element, index) {\n return (element / firstWeekCustomers[index]);\n});\n\nlet labeled = firstWeekDailyAverage.map(function(element, index) {\n return daysOfTheWeek[index] + \" \" + element.toFixed(2);\n});\n\n\n\n\n",
                  "solvedContent": "let sales = [455, 505, 340, 780, 690, 880, 900, 685, 835, 754];\nlet customers = [25, 30, 20, 35, 36, 32, 44, 45, 34, 15];\nlet daysOfTheWeek = [\"Monday\", \"Tuesday\", \"Wednesday\",\"Thursday\", \"Friday\", \"Saturday\", \"Sunday\"];\n\nlet firstWeekSales = sales.filter((element, index) => index < 7);\nconsole.log(\"First Week Sales: \" + firstWeekSales);\n\nlet firstWeekCustomers = customers.filter((element, index) => index < 7);\nconsole.log(\"First Week Customers: \" + firstWeekCustomers);\n\nlet firstWeekSalesSum = firstWeekSales.reduce((prev, curr) => prev + curr);\nconsole.log(\"First Week Sales Sum: \" + firstWeekSalesSum);\n\nlet firstWeekCustomersSum = firstWeekCustomers.reduce((prev, curr) => prev + curr);\nconsole.log(\"First Week Customers Sum: \" + firstWeekCustomersSum);\n\nlet firstWeekAverage = firstWeekSalesSum / 7;\nlet firstWeekCustomerAvg = firstWeekSalesSum / firstWeekCustomersSum;\nconsole.log(\"First Week Average: \" + firstWeekAverage);\nconsole.log(\"First Week Customer Average: \" + firstWeekCustomerAvg);\n\nlet firstWeekDailyAverage = firstWeekSales.map(function(element, index) {\n return (element / firstWeekCustomers[index]);\n});\n\nlet labeled = firstWeekDailyAverage.map(function(element, index) {\n return daysOfTheWeek[index] + \" \" + element.toFixed(2);\n});\n\nlet labeledString = labeled.reduce(function(prev, curr) {\n return prev + \", \" + curr;\n});\nconsole.log(labeledString);"
                }
              ],
              "hints": []
            }
          }
        ]
      }
    ]
  }
}