{
  "tutorial": {
    "id": 2668,
    "version": 7,
    "type": "guidedProject",
    "isNew": false,
    "codeLanguage": "python",
    "title": "Star Wars API - Teil 2",
    "descriptionContent": "Gib den Nutzern in dieser Fortsetzung die Möglichkeit, selbst zu entscheiden, wie viele Charaktere sie herunterladen und erkunden möchten.",
    "shortDescriptionContent": "",
    "showInTrack": true,
    "iconBanner": "tutorial-2668-icon-banner.svg",
    "chapters": [
      {
        "id": 14643,
        "title": "Kapitel #1",
        "type": "practiceLevel3",
        "lessons": [
          {
            "title": "Lesson #1",
            "id": 129511,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Willkommen zurück beim **Star Wars API** Projekt. Im zweiten Teil werden wir dem Benutzer die Möglichkeit geben, zu entscheiden, welche Daten wir von der API abrufen.\n\n1. Erstelle eine neue Funktion namens `fetch_data`, die den gesamten bestehenden Code außer der Import-Anweisung kapselt.\n   - Die Funktion sollte einen Parameter namens `option` akzeptieren.\n   - Definiere vor dem try-except-Block die Variable `data`, die wir später verwenden werden, und weise ihr eine leere Liste zu.\n   - Innerhalb dieser Funktion bleibt der andere bestehende Code unverändert.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "import requests\n\noption = \"people\"\nurl = f\"https://swapi.mimo.dev/api/{option}/\"\ntry:\n  response = requests.get(url)\n  response.raise_for_status()\n\n  data = response.json()\n  print(f\"Successfully fetched {len(data)} entities\")\nexcept requests.HTTPError as e:\n  print(f\"Error fetching data: {e}\")\n\nif data:\n  for entity in data:\n    print(entity[\"name\"])\nelse:\n  print(\"Unable to download data\")",
                  "solvedContent": "import requests\n\ndef fetch_data(option):\n  option = \"people\"\n  url = f\"https://swapi.mimo.dev/api/{option}/\"\n  data = []\n  try:\n    response = requests.get(url)\n    response.raise_for_status()\n\n    data = response.json()\n    print(f\"Successfully fetched {len(data)} entities\")\n  except requests.HTTPError as e:\n    print(f\"Error fetching data: {e}\")\n\n  if data:\n    for entity in data:\n      print(entity[\"name\"])\n  else:\n    print(\"Unable to download data\")"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Lesson #2",
            "id": 129512,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Die erste Zeile der Funktion erstellt die Variable `option` und weist ihr den Wert `\"people\"` zu. Da wir diese Option nun als Parameter an die Funktion übergeben, benötigen wir diese Zeile nicht mehr.\n\n1. Lösche die Zeile `option = \"people\"` aus der Funktion, damit die `url` den übergebenen Parameter `option` verwendet.\n2. Rufe schließlich die Funktion mit dem Parameter `\"people\"` auf.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "import requests\n\ndef fetch_data(option):\n  option = \"people\"\n  url = f\"https://swapi.mimo.dev/api/{option}/\"\n  data = []\n  try:\n    response = requests.get(url)\n    response.raise_for_status()\n\n    data = response.json()\n    print(f\"Successfully fetched {len(data)} entities\")\n  except requests.HTTPError as e:\n    print(f\"Error fetching data: {e}\")\n\n  if data:\n    for entity in data:\n      print(entity[\"name\"])\n  else:\n    print(\"Unable to download data\")",
                  "solvedContent": "import requests\n\ndef fetch_data(option):\n  url = f\"https://swapi.mimo.dev/api/{option}/\"\n  data = []\n  try:\n    response = requests.get(url)\n    response.raise_for_status()\n\n    data = response.json()\n    print(f\"Successfully fetched {len(data)} entities\")\n  except requests.HTTPError as e:\n    print(f\"Error fetching data: {e}\")\n\n  if data:\n    for entity in data:\n      print(entity[\"name\"])\n  else:\n    print(\"Unable to download data\")\n\nfetch_data(\"people\")"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Lesson #8",
            "id": 129518,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Im Moment gibt die Funktion das Ergebnis direkt aus. Lass uns das ändern und stattdessen das Ergebnis zurückgeben.\n\n1. Verschiebe den `if`-Block, der jedes Element des Ergebnisses ausgibt, aus der Funktion heraus und platziere ihn unter dem Funktionsaufruf.\n2. Ändere die Funktion so, dass sie am Ende die `data` zurückgibt.\n3. Füge `return None` im `except`-Block hinzu.\n4. Weise den Rückgabewert der Funktion einer neuen Variablen namens `data` außerhalb der Funktion zu.\n5. Verwende diese `data`-Variable, um über die Elemente der zurückgegebenen Liste zu iterieren und sie auszugeben.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "import requests\n\ndef fetch_data(option):\n  url = f\"https://swapi.mimo.dev/api/{option}/\"\n  data = []\n  try:\n    response = requests.get(url)\n    response.raise_for_status()\n\n    data = response.json()\n    print(f\"Successfully fetched {len(data)} entities\")\n  except requests.HTTPError as e:\n    print(f\"Error fetching data: {e}\")\n\n  if data:\n    for entity in data:\n      print(entity[\"name\"])\n  else:\n    print(\"Unable to download data\")\n\nfetch_data(\"people\")",
                  "solvedContent": "import requests\n\ndef fetch_data(option):\n  url = f\"https://swapi.mimo.dev/api/{option}/\"\n  data = []\n  try:\n    response = requests.get(url)\n    response.raise_for_status()\n\n    data = response.json()\n    print(f\"Successfully fetched {len(data)} entities\")\n  except requests.HTTPError as e:\n    print(f\"Error fetching data: {e}\")\n    return None\n\n  return data\n\ndata = fetch_data(\"people\")\n\nif data:\n  for entity in data:\n    print(entity[\"name\"])\nelse:\n    print(\"Unable to download data\")\n"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Lesson #8 - Copy",
            "id": 131645,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Es gibt mehr Endpunkte, die wir aufrufen können. Lassen wir unseren Nutzern die Wahl.\n\n1. Frage den Nutzer, welche StarWars-Daten er erkunden möchte.\n2. Sammle die Antwort über Pythons `input` Funktion und speichere sie.\n   - Entferne unnötige führende und nachfolgende Leerzeichen.\n   - Wandle die Eingabe in Kleinbuchstaben um.\n   - Speichere die Eingabe in einer Variablen namens `option`.\n3. Anstatt `\"people\"` als Argument beim Aufruf von `fetch_data` zu übergeben, übergebe `option`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "import requests\n\ndef fetch_data(option):\n  url = f\"https://swapi.mimo.dev/api/{option}/\"\n  data = []\n  try:\n    response = requests.get(url)\n    response.raise_for_status()\n\n    data = response.json()\n    print(f\"Successfully fetched {len(data)} entities\")\n  except requests.HTTPError as e:\n    print(f\"Error fetching data: {e}\")\n    return None\n\n  return data\n\ndata = fetch_data(\"people\")\n\nif data:\n  for entity in data:\n    print(entity[\"name\"])\nelse:\n    print(\"Unable to download data\")",
                  "solvedContent": "import requests\n\ndef fetch_data(option):\n  url = f\"https://swapi.mimo.dev/api/{option}/\"\n  data = []\n  try:\n    response = requests.get(url)\n    response.raise_for_status()\n\n    data = response.json()\n    print(f\"Successfully fetched {len(data)} entities\")\n  except requests.HTTPError as e:\n    print(f\"Error fetching data: {e}\")\n    return None\n\n  return data\n\noption = input(\"Enter an option (e.g., 'people' or 'planets'): \").strip().lower()\ndata = fetch_data(option)\n\nif data:\n  for entity in data:\n    print(entity[\"name\"])\nelse:\n    print(\"Unable to download data\")"
                }
              ],
              "hints": []
            }
          }
        ]
      }
    ]
  }
}