{
  "tutorial": {
    "id": 2127,
    "version": 9,
    "type": "course",
    "isNew": false,
    "codeLanguage": "node",
    "title": "Middleware",
    "descriptionContent": "Lerne, was Middleware ist und wie du sie in deiner Express-App verwendest",
    "shortDescriptionContent": "",
    "showInTrack": true,
    "iconBanner": null,
    "chapters": [
      {
        "id": 15056,
        "title": "Eingebautes Middleware",
        "type": "practiceLevel1",
        "lessons": [
          {
            "title": "Intro I",
            "id": 122314,
            "contentType": "interactive",
            "images": [
              {
                "id": "8e582a28-69f5-4ce1-8b1a-3bd18cf017c0"
              }
            ],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Middleware bezieht sich auf Funktionen, die als Zwischenschicht zwischen dem Webserver und der Anwendung fungieren.</p><p>Diese Zwischenschicht ermöglicht eine effizientere Interaktion zwischen Server und Client.</p><img src=\"8e582a28-69f5-4ce1-8b1a-3bd18cf017c0\" visible-if=\"always\" /></body></html>"
          },
          {
            "title": "Intro II",
            "id": 122332,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Du kannst Middleware für Aufgaben wie das Protokollieren von Informationen, das Parsen von Anfragen, die Authentifizierung und mehr verwenden.</p></body></html>"
          },
          {
            "title": ".use() - Copy",
            "id": 132746,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>In Express fügen wir Middleware mit der <code>use</code>-Methode auf dem Express-App-Objekt hinzu.</p><code version=\"2\" codelang=\"javascript\" name=\"app.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" express = \" /><text value=\"require\" class=\"built_in\" /><text value=\"(\" /><text value=\"&quot;express&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" app = express(); \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"app.use(); \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"app.listen(\" /><text value=\"3000\" class=\"number\" /><text value=\", () =&gt; { \" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;Server runs on port 3000&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"});\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"63\" endIndex=\"66\" /><option startIndex=\"66\" endIndex=\"67\" /><option startIndex=\"67\" endIndex=\"70\" /></options></interaction></interactions><output><content><text value=\"Server runs on port 3000\" /></content></output></code><p visible-if=\"wrong\">Wähle <code>app</code>, gefolgt von <code>.</code> und schließlich <code>use</code> aus.</p></body></html>"
          },
          {
            "title": "Built-in Middleware",
            "id": 122317,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Wir übergeben die Middleware, die wir verwenden möchten, als Argument an die <code>use</code>-Funktion.</p><p><code>express.json</code> analysiert eingehende Anfragen, die JSON-Nutzdaten enthalten, und wandelt sie in ein JS-Objekt um, das der Server problemlos verarbeiten kann.</p><code version=\"2\" codelang=\"javascript\" name=\"app.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" express = \" /><text value=\"require\" class=\"built_in\" /><text value=\"(\" /><text value=\"&quot;express&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" app = express(); \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"app.use(express.json()); \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"app.post(\" /><text value=\"&quot;/songs&quot;\" class=\"string\" /><text value=\", (req, res) =&gt; { \" /><text type=\"break\" /><text value=\" \" /><text value=\"const\" class=\"keyword\" /><text value=\" body = req.body; \" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(body); \" /><text type=\"break\" /><text value=\"}); \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"app.listen(\" /><text value=\"3000\" class=\"number\" /><text value=\", () =&gt; { \" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;Server runs on port 3000&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"});\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"71\" endIndex=\"78\" /><option startIndex=\"78\" endIndex=\"79\" /><option startIndex=\"79\" endIndex=\"85\" /><option correct=\"false\"><content><text value=\"use()\" /></content></option></options></interaction></interactions><output><content><text value=\"Server runs on port 3000\" /><text type=\"break\" /><text value=\"{\" /><text type=\"break\" /><text value=\"  &quot;title&quot;: &quot;Party in the USA&quot;,\" /><text type=\"break\" /><text value=\"  &quot;artist&quot;: &quot;Miley Cyrus&quot;\" /><text type=\"break\" /><text value=\"}\" /></content></output></code><p visible-if=\"wrong\">Wähle <code>express</code>, gefolgt von <code>.</code> und schließlich <code>json()</code> aus.</p></body></html>"
          },
          {
            "title": "Built-in Middleware - Copy",
            "id": 132755,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Ein weiteres häufig verwendetes Middleware in Express ist <code>express.urlencoded</code>.</p><p>Diese Middleware ist unerlässlich, wenn es um die Verarbeitung von URL-kodierten Formulardaten geht, die typischerweise über HTML-Formulare gesendet werden.</p><code version=\"2\" codelang=\"javascript\" name=\"app.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" express = \" /><text value=\"require\" class=\"built_in\" /><text value=\"(\" /><text value=\"&quot;express&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" app = express(); \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"app.use(express.urlencoded()); \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"app.post(\" /><text value=\"&quot;/submit&quot;\" class=\"string\" /><text value=\", (req, res) =&gt; { \" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(req.body); \" /><text type=\"break\" /><text value=\" res.send(\" /><text value=\"&quot;Form data received&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"}); \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"app.listen(\" /><text value=\"3000\" class=\"number\" /><text value=\", () =&gt; { \" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;Server runs on port 3000&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"});\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"71\" endIndex=\"78\" /><option startIndex=\"78\" endIndex=\"79\" /><option startIndex=\"79\" endIndex=\"91\" /><option correct=\"false\"><content><text value=\"json()\" /></content></option></options></interaction></interactions><output><content><text value=\"Server runs on port 3000\" /><text type=\"break\" /><text value=\"{\" /><text type=\"break\" /><text value=\" name: &quot;Paula&quot;, age: 57\" /><text type=\"break\" /><text value=\"}\" /></content></output></code><p visible-if=\"wrong\">Wähle <code>express</code>, gefolgt von <code>.</code> und schließlich <code>urlencoded()</code> aus.</p></body></html>"
          },
          {
            "title": "Built-in Middleware - Copy",
            "id": 132756,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Wir können Middleware auch nur auf ausgewählte Routen anwenden, indem wir sie als zweites Argument der Routenmethoden übergeben.</p><p>Lass uns den <code>\"/songs\"</code> Endpoint das JSON-Middleware verwenden.</p><code version=\"2\" codelang=\"javascript\" name=\"app.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" express = \" /><text value=\"require\" class=\"built_in\" /><text value=\"(\" /><text value=\"&quot;express&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" app = express(); \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"app.post(\" /><text value=\"&quot;/songs&quot;\" class=\"string\" /><text value=\", express.json(), (req, res) =&gt; { \" /><text type=\"break\" /><text value=\" \" /><text value=\"const\" class=\"keyword\" /><text value=\" body = req.body; \" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(body); \" /><text type=\"break\" /><text value=\"}); \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"app.get(\" /><text value=\"&quot;/&quot;\" class=\"string\" /><text value=\", (req, res) =&gt; { \" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;I don't need it!&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"}); \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"app.listen(\" /><text value=\"3000\" class=\"number\" /><text value=\", () =&gt; { \" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;Server runs on port 3000&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"});\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"82\" endIndex=\"89\" /><option startIndex=\"89\" endIndex=\"90\" /><option startIndex=\"90\" endIndex=\"96\" /><option correct=\"false\"><content><text value=\"use()\" /></content></option></options></interaction></interactions><output><content><text value=\"Server runs on port 3000\" /><text type=\"break\" /><text value=\"{\" /><text type=\"break\" /><text value=\"  &quot;title&quot;: &quot;Party in the USA&quot;,\" /><text type=\"break\" /><text value=\"  &quot;artist&quot;: &quot;Miley Cyrus&quot;\" /><text type=\"break\" /><text value=\"}\" /></content></output></code><p visible-if=\"wrong\">Wähle <code>express</code>, gefolgt von <code>.</code> und schließlich <code>json()</code> aus.</p></body></html>"
          },
          {
            "title": "Question: Built-in Middleware",
            "id": 122319,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Was ist ein Beispiel für integrierte Middleware in Express?</p><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\"><code>express.json</code></item><item value=\"2\" correct=\"false\">Unsere benutzerdefinierte Middleware</item></selection><p visible-if=\"wrong\">Wähle <code>express.json</code> aus.</p></body></html>"
          },
          {
            "title": ".use() - Copy - Copy",
            "id": 132747,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Verwende die integrierte JSON-Middleware.</p><code version=\"2\" codelang=\"javascript\" name=\"app.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" express = \" /><text value=\"require\" class=\"built_in\" /><text value=\"(\" /><text value=\"&quot;express&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" app = express(); \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"app.use(express.json()); \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"app.listen(\" /><text value=\"3000\" class=\"number\" /><text value=\", () =&gt; { \" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;Server runs on port 3000&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"});\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"71\" endIndex=\"78\" /><option startIndex=\"78\" endIndex=\"79\" /><option startIndex=\"79\" endIndex=\"83\" /><option startIndex=\"83\" endIndex=\"84\" /><option startIndex=\"84\" endIndex=\"85\" /></options></interaction></interactions><output><content><text value=\"Server runs on port 3000\" /></content></output></code><p visible-if=\"wrong\">Wähle <code>express</code>, gefolgt von <code>.</code> und schließlich <code>json</code>, <code>(</code>, <code>)</code> aus.</p></body></html>"
          },
          {
            "title": "Lesson #9",
            "id": 132757,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Können wir integrierte Middleware wie <code>express.json</code> als Argument in einem Routen-Handler verwenden?</p><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\">Ja, wenn wir es nicht auf jeden Endpunkt anwenden wollen</item><item value=\"2\" correct=\"false\">Nein, integrierte Middleware kann nur global verwendet werden</item></selection><p visible-if=\"wrong\">Ja, wenn wir es nicht auf jeden Endpunkt anwenden wollen.</p></body></html>"
          },
          {
            "title": ".use() - Copy - Copy - Copy",
            "id": 132758,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Vervollständige den Code, um die Verwendung von eingebautem Middleware zu ermöglichen.</p><code version=\"2\" codelang=\"javascript\" name=\"app.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" express = \" /><text value=\"require\" class=\"built_in\" /><text value=\"(\" /><text value=\"&quot;express&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" app = express(); \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"app.use(express.json()); \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"app.listen(\" /><text value=\"3000\" class=\"number\" /><text value=\", () =&gt; { \" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;Server runs on port 3000&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"});\" /></content><interactions><interaction type=\"validatedInput\" isDefault=\"true\" startIndex=\"67\" endIndex=\"70\" /></interactions><output><content><text value=\"Server runs on port 3000\" /></content></output></code><p visible-if=\"wrong\">Gib <code>use</code> ein.</p></body></html>"
          },
          {
            "title": "Lesson #12",
            "id": 132761,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Wie wendet man Middleware auf eine bestimmte Route an?</p><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\">Übergebe es als zweites Argument in der route-Methode</item><item value=\"2\" correct=\"false\">Verwende <code>app.use</code> für jede Route</item></selection><p visible-if=\"wrong\">Übergebe es als zweites Argument in der route-Methode.</p></body></html>"
          }
        ]
      },
      {
        "id": 15057,
        "title": "Benutzerdefinierte Middleware",
        "type": "practiceLevel1",
        "lessons": [
          {
            "title": ".use()",
            "id": 122330,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Wir können auch unsere eigene benutzerdefinierte Middleware erstellen, die spezifische benutzerdefinierte Aktionen ausführt, die wir definiert haben. Das tun wir, indem wir eine Funktion erstellen.</p><p>Um zu beginnen, definieren wir eine Funktion mit zwei Parametern.</p><code version=\"2\" codelang=\"javascript\" name=\"app.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" express = \" /><text value=\"require\" class=\"built_in\" /><text value=\"(\" /><text value=\"&quot;express&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" app = express(); \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" customMiddleware = \" /><text value=\"(\" /><text value=\"req, res\" class=\"params\" /><text value=\") =&gt;\" /><text value=\" { \" /><text type=\"break\" /><text value=\"  \" /><text type=\"break\" /><text value=\"}; \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"app.get(\" /><text value=\"&quot;/&quot;\" class=\"string\" /><text value=\", (req, res) =&gt; { \" /><text type=\"break\" /><text value=\" res.send(\" /><text value=\"&quot;Hello from the root route!&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"}); \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"app.listen(\" /><text value=\"3000\" class=\"number\" /><text value=\", () =&gt; { \" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;Server runs on port 3000&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"});\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"88\" endIndex=\"98\" /><option startIndex=\"99\" endIndex=\"101\" /><option startIndex=\"102\" endIndex=\"103\" /><option startIndex=\"108\" endIndex=\"109\" /></options></interaction></interactions></code><p visible-if=\"wrong\">Wähle <code>(req, res)</code>, gefolgt von <code>=&gt;</code> und schließlich <code>{</code>, <code>}</code> aus.</p></body></html>"
          },
          {
            "title": ".use() - Copy",
            "id": 132749,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Lass uns Middleware erstellen, um jede eingehende Anfrage zu protokollieren und die verwendete Methode auszugeben.</p><code version=\"2\" codelang=\"javascript\" name=\"app.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" express = \" /><text value=\"require\" class=\"built_in\" /><text value=\"(\" /><text value=\"&quot;express&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" app = express(); \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" customMiddleware = \" /><text value=\"(\" /><text value=\"req, res\" class=\"params\" /><text value=\") =&gt;\" /><text value=\" { \" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;Incoming request...&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"`Request type: \" /><text value=\"${req.method}\" class=\"subst\" /><text value=\"`\" /><text value=\"); \" /><text type=\"break\" /><text value=\"}; \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"app.get(\" /><text value=\"&quot;/&quot;\" class=\"string\" /><text value=\", (req, res) =&gt; { \" /><text type=\"break\" /><text value=\" res.send(\" /><text value=\"&quot;Hello from the root route!&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"}); \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"app.listen(\" /><text value=\"3000\" class=\"number\" /><text value=\", () =&gt; { \" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;Server runs on port 3000&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"});\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"106\" endIndex=\"117\" /><option startIndex=\"144\" endIndex=\"155\" /><option startIndex=\"173\" endIndex=\"183\" /></options></interaction></interactions></code><p visible-if=\"wrong\">Wähle <code>console.log</code>, gefolgt von <code>console.log</code> und schließlich <code>req.method</code> aus.</p></body></html>"
          },
          {
            "title": ".use() - Copy - Copy",
            "id": 132750,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Um die Middleware abzuschließen, müssen wir die <code>next</code>-Funktion aufrufen, um die Kontrolle an die nächste Middleware oder den Routen-Handler zu übergeben.</p><p>Dies ermöglicht es den Request- und Response-Objekten, sich weiterhin durch die Pipeline zu bewegen.</p><code version=\"2\" codelang=\"javascript\" name=\"app.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" express = \" /><text value=\"require\" class=\"built_in\" /><text value=\"(\" /><text value=\"&quot;express&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" app = express(); \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" customMiddleware = \" /><text value=\"(\" /><text value=\"req, res, next\" class=\"params\" /><text value=\") =&gt;\" /><text value=\" { \" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;Incoming request...&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"`Request type: \" /><text value=\"${req.method}\" class=\"subst\" /><text value=\"`\" /><text value=\"); \" /><text type=\"break\" /><text value=\" next(); \" /><text type=\"break\" /><text value=\"}; \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"app.get(\" /><text value=\"&quot;/&quot;\" class=\"string\" /><text value=\", (req, res) =&gt; { \" /><text type=\"break\" /><text value=\" res.send(\" /><text value=\"&quot;Hello from the root route!&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"}); \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"app.listen(\" /><text value=\"3000\" class=\"number\" /><text value=\", () =&gt; { \" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;Server runs on port 3000&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"});\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"196\" endIndex=\"202\" /><option startIndex=\"99\" endIndex=\"103\" /></options></interaction></interactions></code><p visible-if=\"wrong\">Wähle <code>next</code>, gefolgt von <code>next()</code> aus.</p></body></html>"
          },
          {
            "title": ".use() - Copy",
            "id": 132748,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Um unsere Middleware in der Express-Anwendung anzuwenden, verwenden wir <code>app.use</code> und verwenden <code>customMiddleware</code> als Argument.</p><p>Dies weist Express an, die <code>customMiddleware</code>-Funktion für jede eingehende Anfrage auszuführen, sodass sie unser Logging durchführen kann.</p><code version=\"2\" codelang=\"javascript\" name=\"app.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" express = \" /><text value=\"require\" class=\"built_in\" /><text value=\"(\" /><text value=\"&quot;express&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" app = express(); \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" customMiddleware = \" /><text value=\"(\" /><text value=\"req, res, next\" class=\"params\" /><text value=\") =&gt;\" /><text value=\" { \" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;Incoming request...&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"`Request type: \" /><text value=\"${req.method}\" class=\"subst\" /><text value=\"`\" /><text value=\"); \" /><text type=\"break\" /><text value=\" next(); \" /><text type=\"break\" /><text value=\"}; \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"app.use(customMiddleware); \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"app.get(\" /><text value=\"&quot;/&quot;\" class=\"string\" /><text value=\", (req, res) =&gt; { \" /><text type=\"break\" /><text value=\" res.send(\" /><text value=\"&quot;Hello from the root route!&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"}); \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"app.listen(\" /><text value=\"3000\" class=\"number\" /><text value=\", () =&gt; { \" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;Server runs on port 3000&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"});\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"211\" endIndex=\"214\" /><option startIndex=\"214\" endIndex=\"215\" /><option startIndex=\"215\" endIndex=\"218\" /><option startIndex=\"219\" endIndex=\"235\" /></options></interaction></interactions><output><content><text value=\"Server runs on port 3000\" /><text type=\"break\" /><text value=\"Incoming request...\" /><text type=\"break\" /><text value=\"Request type: GET\" /></content></output></code><p visible-if=\"wrong\">Wähle <code>app</code>, gefolgt von <code>.</code> und schließlich <code>use</code>, <code>customMiddleware</code> aus.</p></body></html>"
          },
          {
            "title": "Custom Middleware - Copy1",
            "id": 132751,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Wir können unsere benutzerdefinierte Middleware auch nur auf ausgewählte Routen anwenden, indem wir sie als zweites Argument der Routenmethoden übergeben.</p><p>Lass uns die <code>\"/\"</code>-Route unser <code>logRequest</code>-Middleware verwenden.</p><code version=\"2\" codelang=\"javascript\" name=\"app.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" express = \" /><text value=\"require\" class=\"built_in\" /><text value=\"(\" /><text value=\"&quot;express&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" app = express(); \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" logRequest = \" /><text value=\"(\" /><text value=\"req, res, next\" class=\"params\" /><text value=\") =&gt;\" /><text value=\" { \" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"`Incoming request type: \" /><text value=\"${req.method}\" class=\"subst\" /><text value=\"`\" /><text value=\"); \" /><text type=\"break\" /><text value=\" next(); \" /><text type=\"break\" /><text value=\"}; \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"app.get(\" /><text value=\"&quot;/&quot;\" class=\"string\" /><text value=\", logRequest, (req, res) =&gt; { \" /><text type=\"break\" /><text value=\" res.send(\" /><text value=\"&quot;Hello from the root route!&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"}); \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"app.listen(\" /><text value=\"3000\" class=\"number\" /><text value=\", () =&gt; { \" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;Server runs on port 3000&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"});\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"189\" endIndex=\"199\" /></options></interaction></interactions><output><content><text value=\"Server runs on port 3000\" /><text type=\"break\" /><text value=\"Incoming request type: GET\" /></content></output></code><p visible-if=\"wrong\">Wähle <code>logRequest</code> aus.</p></body></html>"
          },
          {
            "title": "Multiple Middleware",
            "id": 122331,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Warum wird das <code>\"/\"</code>-Endpunkt-Console-Log nicht ausgeführt, wenn darauf zugegriffen wird?</p><code version=\"2\" codelang=\"javascript\" name=\"app.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" express = \" /><text value=\"require\" class=\"built_in\" /><text value=\"(\" /><text value=\"&quot;express&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" app = express(); \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"app.use(\" /><text value=\"(\" /><text value=\"req, res, next\" class=\"params\" /><text value=\") =&gt;\" /><text value=\" { \" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;Incoming request...&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"`Request type: \" /><text value=\"${req.method}\" class=\"subst\" /><text value=\"`\" /><text value=\"); \" /><text type=\"break\" /><text value=\"}); \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"app.get(\" /><text value=\"'/'\" class=\"string\" /><text value=\", (req, res) =&gt; { \" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;Hello from the endpoint&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"}); \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"app.listen(\" /><text value=\"3000\" class=\"number\" /><text value=\", () =&gt; { \" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;Server runs on port 3000&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"});\" /></content><output><content><text value=\"Server runs on port 3000\" /><text type=\"break\" /><text value=\"Incoming request...\" /><text type=\"break\" /><text value=\"Request type: GET\" /></content></output></code><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\">Middleware blockiert die Route, indem es <code>next</code> nicht aufruft</item><item value=\"2\" correct=\"false\">Die <code>\"/\"</code> Route fehlt</item></selection><p visible-if=\"wrong\">Middleware blockiert die Route, indem es <code>next</code> nicht aufruft.</p></body></html>"
          },
          {
            "title": "next()",
            "id": 122321,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Vervollständige den Code, um sicherzustellen, dass der Endpoint erreicht wird.</p><code version=\"2\" codelang=\"javascript\" name=\"app.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" express = \" /><text value=\"require\" class=\"built_in\" /><text value=\"(\" /><text value=\"&quot;express&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" app = express(); \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"app.use(\" /><text value=\"(\" /><text value=\"req, res, next\" class=\"params\" /><text value=\") =&gt;\" /><text value=\" { \" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;Incoming request...&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"`Requesting server: \" /><text value=\"${req.hostname}\" class=\"subst\" /><text value=\"`\" /><text value=\"); \" /><text type=\"break\" /><text value=\" next(); \" /><text type=\"break\" /><text value=\"}); \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"app.get(\" /><text value=\"&quot;/user/:id&quot;\" class=\"string\" /><text value=\", \" /><text value=\"function\" class=\"keyword\" /><text value=\"(\" /><text value=\"req, res, next\" class=\"params\" /><text value=\") \" /><text value=\"{ \" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;GET request processing...&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"}); \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"app.listen(\" /><text value=\"3000\" class=\"number\" /><text value=\", () =&gt; { \" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;Server runs on port 3000&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"});\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"82\" endIndex=\"86\" /><option startIndex=\"186\" endIndex=\"192\" /></options></interaction></interactions><output><content><text value=\"Server runs on port 3000\" /><text type=\"break\" /><text value=\"Incoming request...\" /><text type=\"break\" /><text value=\"Requesting server: localhost\" /><text type=\"break\" /><text value=\"Get request processing...\" /></content></output></code><p visible-if=\"wrong\">Wähle <code>next</code>, gefolgt von <code>next()</code> aus.</p></body></html>"
          },
          {
            "title": "Question: Custom Middleware",
            "id": 122322,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Was ist ein Vorteil der Erstellung von benutzerdefiniertem Middleware?</p><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\">Benutzerdefinierte Middleware ermöglicht benutzerdefinierte Aktionen mit HTTP-Anfragen</item><item value=\"2\" correct=\"false\">Wir können keine benutzerdefinierte Middleware erstellen</item></selection><p visible-if=\"wrong\">Benutzerdefinierte Middleware ermöglicht benutzerdefinierte Aktionen mit HTTP-Anfragen.</p></body></html>"
          },
          {
            "title": "Custom Middleware - Copy - Copy",
            "id": 132752,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Warum löst die <code>\"/me\"</code> Route nicht das Logging-Middleware aus?</p><code version=\"2\" codelang=\"javascript\" name=\"app.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" express = \" /><text value=\"require\" class=\"built_in\" /><text value=\"(\" /><text value=\"&quot;express&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" app = express(); \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" logRequest = \" /><text value=\"(\" /><text value=\"req, res, next\" class=\"params\" /><text value=\") =&gt;\" /><text value=\" { \" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"`Incoming request type: \" /><text value=\"${req.method}\" class=\"subst\" /><text value=\"`\" /><text value=\"); \" /><text type=\"break\" /><text value=\" next(); \" /><text type=\"break\" /><text value=\"}; \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"app.get(\" /><text value=\"&quot;/&quot;\" class=\"string\" /><text value=\", logRequest, (req, res) =&gt; { \" /><text type=\"break\" /><text value=\" res.send(\" /><text value=\"&quot;Hello from the root route!&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"}); \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"app.get(\" /><text value=\"&quot;/me&quot;\" class=\"string\" /><text value=\", (req, res) =&gt; { \" /><text type=\"break\" /><text value=\" res.send(\" /><text value=\"&quot;Hello from my route!&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"}); \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"app.listen(\" /><text value=\"3000\" class=\"number\" /><text value=\", () =&gt; { \" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;Server runs on port 3000&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"});\" /></content><output><content><text value=\"Server runs on port 3000\" /></content></output></code><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\">Das Logging-Middleware wird nicht auf die <code>\"/me\"</code>-Route angewendet</item><item value=\"2\" correct=\"false\">Die <code>\"/me\"</code>-Route funktioniert nicht, weil sie nicht korrekt eingerichtet ist</item></selection><p visible-if=\"wrong\">Das Logging-Middleware wird nicht auf die <code>\"/me\"</code>-Route angewendet.</p></body></html>"
          },
          {
            "title": "Question: Third Party Middleware",
            "id": 122323,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Was ist falsch mit dem Code?</p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" express = \" /><text value=\"require\" class=\"built_in\" /><text value=\"(\" /><text value=\"&quot;express&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" app = express(); \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"function\" class=\"keyword\" /><text value=\" \" /><text value=\"logTime\" class=\"title\" /><text value=\"(\" /><text value=\"req, res, next\" class=\"params\" /><text value=\") \" /><text value=\"{ \" /><text type=\"break\" /><text value=\"  \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"`Request received at: \" /><text value=\"${\" /><text value=\"new\" class=\"keyword\" /><text value=\" \" /><text value=\"Date\" class=\"built_in\" /><text value=\"().toLocaleString()}\" /><text value=\"`\" /><text value=\"); \" /><text type=\"break\" /><text value=\"} \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"app.use(logTime); \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"app.get(\" /><text value=\"&quot;/&quot;\" class=\"string\" /><text value=\", (req, res) =&gt; { \" /><text type=\"break\" /><text value=\"  res.send(\" /><text value=\"&quot;Hello, World!&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"}); \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"app.listen(\" /><text value=\"3000\" class=\"number\" /><text value=\", () =&gt; { \" /><text type=\"break\" /><text value=\"  \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;Server runs on port 3000&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"});\" /></content><output><content><text value=\"Server runs on port 3000\" /><text type=\"break\" /><text value=\"GET / 200 150 - 1.650 ms\" /><text type=\"break\" /><text value=\"Request received\" /></content></output></code><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\">Wir müssen <code>next</code> in unserer benutzerdefinierten Middleware verwenden, um die Anfrage- und Antwortobjekte weiterhin durch die Pipeline zu leiten</item><item value=\"2\" correct=\"false\">Wir müssen unser Middleware als Pfeilfunktion definieren, damit es mit Express funktioniert</item></selection><p visible-if=\"wrong\">Wir müssen <code>next</code> in unserer benutzerdefinierten Middleware verwenden, um die Anfrage- und Antwortobjekte weiterhin durch die Pipeline zu leiten.</p></body></html>"
          }
        ]
      },
      {
        "id": 15058,
        "title": "Noch mehr Middleware",
        "type": "practiceLevel1",
        "lessons": [
          {
            "title": "Custom Middleware",
            "id": 122320,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Wir können mehrere Middleware in unserer App verwenden.</p><code version=\"2\" codelang=\"javascript\" name=\"app.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" express = \" /><text value=\"require\" class=\"built_in\" /><text value=\"(\" /><text value=\"&quot;express&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" app = express(); \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"app.use(express.json()); \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"function\" class=\"keyword\" /><text value=\" \" /><text value=\"authenticate\" class=\"title\" /><text value=\"(\" /><text value=\"req, res, next\" class=\"params\" /><text value=\") \" /><text value=\"{ \" /><text type=\"break\" /><text value=\"  \" /><text value=\"if\" class=\"keyword\" /><text value=\" (req.body.role === \" /><text value=\"&quot;Admin&quot;\" class=\"string\" /><text value=\") { \" /><text type=\"break\" /><text value=\"    \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;Authenticated&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"    next(); \" /><text type=\"break\" /><text value=\"  } \" /><text value=\"else\" class=\"keyword\" /><text value=\" { \" /><text type=\"break\" /><text value=\"    \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;Unauthorized&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"    res.status(\" /><text value=\"401\" class=\"number\" /><text value=\").send(\" /><text value=\"&quot;Unauthorized&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"  } \" /><text type=\"break\" /><text value=\"} \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"app.use(authenticate); \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"app.listen(\" /><text value=\"3000\" class=\"number\" /><text value=\", () =&gt; { \" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;Server runs on port 3000&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"});\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"323\" endIndex=\"335\" /><option correct=\"false\"><content><text value=\"express\" /></content></option><option startIndex=\"63\" endIndex=\"66\" /><option startIndex=\"66\" endIndex=\"67\" /><option startIndex=\"67\" endIndex=\"70\" /></options></interaction></interactions><output><content><text value=\"Server runs on port 3000\" /><text type=\"break\" /><text value=\"Unauthorized\" /><text type=\"break\" /><text value=\"\" /></content></output></code><p visible-if=\"wrong\">Wähle <code>app</code>, gefolgt von <code>.</code> und schließlich <code>use</code>, <code>authenticate</code> aus.</p></body></html>"
          },
          {
            "title": "Custom Middleware - Copy - Copy - Copy",
            "id": 132764,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Wir können mehrere Middleware-Funktionen in der Routen-Definition verketten.</p><p>Lass uns die eingebaute Middleware, wie <code>express.json</code>, als Argument zusammen mit deiner benutzerdefinierten Middleware <code>logRequest</code> verwenden.</p><code version=\"2\" codelang=\"javascript\" name=\"app.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" express = \" /><text value=\"require\" class=\"built_in\" /><text value=\"(\" /><text value=\"&quot;express&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" app = express(); \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" logRequest = \" /><text value=\"(\" /><text value=\"req, res, next\" class=\"params\" /><text value=\") =&gt;\" /><text value=\" { \" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"`Incoming request type: \" /><text value=\"${req.method}\" class=\"subst\" /><text value=\"`\" /><text value=\"); \" /><text type=\"break\" /><text value=\" next(); \" /><text type=\"break\" /><text value=\"}; \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"app.post(\" /><text value=\"&quot;/&quot;\" class=\"string\" /><text value=\", express.json(), logRequest, (req, res) =&gt; { \" /><text type=\"break\" /><text value=\" res.send(\" /><text value=\"&quot;Hello from the root route!&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"}); \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"app.listen(\" /><text value=\"3000\" class=\"number\" /><text value=\", () =&gt; { \" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;Server runs on port 3000&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"});\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"190\" endIndex=\"197\" /><option startIndex=\"198\" endIndex=\"202\" /><option startIndex=\"206\" endIndex=\"216\" /></options></interaction></interactions><output><content><text value=\"Server runs on port 3000\" /><text type=\"break\" /><text value=\"Incoming request type: GET\" /></content></output></code><p visible-if=\"wrong\">Wähle <code>express</code>, gefolgt von <code>json</code> und schließlich <code>logRequest</code> aus.</p></body></html>"
          },
          {
            "title": "Custom Middleware - Copy - Copy",
            "id": 132753,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Wenn wir Middleware an eine Routenfunktion übergeben, können wir auch ein Array verwenden.</p><code version=\"2\" codelang=\"javascript\" name=\"app.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" express = \" /><text value=\"require\" class=\"built_in\" /><text value=\"(\" /><text value=\"&quot;express&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" app = express(); \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" logRequest = \" /><text value=\"(\" /><text value=\"req, res, next\" class=\"params\" /><text value=\") =&gt;\" /><text value=\" { \" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"`Incoming request type: \" /><text value=\"${req.method}\" class=\"subst\" /><text value=\"`\" /><text value=\"); \" /><text type=\"break\" /><text value=\" next(); \" /><text type=\"break\" /><text value=\"}; \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"app.post(\" /><text value=\"&quot;/&quot;\" class=\"string\" /><text value=\", [express.json(), logRequest], (req, res) =&gt; { \" /><text type=\"break\" /><text value=\"  res.send(\" /><text value=\"&quot;Hello from the root route!&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"}); \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"app.listen(\" /><text value=\"3000\" class=\"number\" /><text value=\", () =&gt; { \" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;Server runs on port 3000&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"});\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"190\" endIndex=\"191\" /><option startIndex=\"205\" endIndex=\"206\" /><option startIndex=\"217\" endIndex=\"218\" /></options></interaction></interactions><output><content><text value=\"Server runs on port 3000\" /><text type=\"break\" /><text value=\"Incoming request type: GET\" /></content></output></code><p visible-if=\"wrong\">Wähle <code>[</code>, gefolgt von <code>,</code> und schließlich <code>]</code> aus.</p></body></html>"
          },
          {
            "title": "Custom Middleware  -dCopy -",
            "id": 132765,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Der Vorteil der Verwendung eines Arrays zur Gruppierung von Middleware-Funktionen in Express liegt hauptsächlich in der Sauberkeit, Flexibilität und Organisation.</p><p>Mit dieser Struktur können wir das <code>middlewares</code>-Array über mehrere Routen hinweg wiederverwenden, was zu saubererem Code führt.</p><code version=\"2\" codelang=\"javascript\" name=\"app.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" express = \" /><text value=\"require\" class=\"built_in\" /><text value=\"(\" /><text value=\"&quot;express&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" app = express(); \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" logRequest = \" /><text value=\"(\" /><text value=\"req, res, next\" class=\"params\" /><text value=\") =&gt;\" /><text value=\" { \" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"`Incoming request type: \" /><text value=\"${req.method}\" class=\"subst\" /><text value=\"`\" /><text value=\"); \" /><text type=\"break\" /><text value=\" next(); \" /><text type=\"break\" /><text value=\"}; \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" middlewares = [express.json(), logRequest]; \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"app.post(\" /><text value=\"&quot;/&quot;\" class=\"string\" /><text value=\", middlewares, (req, res) =&gt; { \" /><text type=\"break\" /><text value=\"  res.send(\" /><text value=\"&quot;Hello from the root route!&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"}); \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"app.put(\" /><text value=\"&quot;/update&quot;\" class=\"string\" /><text value=\", middlewares, (req, res) =&gt; { \" /><text type=\"break\" /><text value=\" res.send(\" /><text value=\"&quot;Update route&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"}); \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"app.listen(\" /><text value=\"3000\" class=\"number\" /><text value=\", () =&gt; { \" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;Server runs on port 3000&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"});\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"176\" endIndex=\"181\" /><option startIndex=\"182\" endIndex=\"193\" /><option startIndex=\"243\" endIndex=\"254\" /><option startIndex=\"342\" endIndex=\"353\" /></options></interaction></interactions><output><content><text value=\"Server runs on port 3000\" /><text type=\"break\" /><text value=\"Incoming request type: GET\" /></content></output></code><p visible-if=\"wrong\">Wähle <code>const</code>, gefolgt von <code>middlewares</code> und schließlich <code>middlewares</code>, <code>middlewares</code> aus.</p></body></html>"
          },
          {
            "title": "Custom Middleware  -dCopy - - Copy",
            "id": 132769,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Middleware wird in der Reihenfolge ausgeführt, in der sie definiert sind, von links nach rechts.</p><code version=\"2\" codelang=\"javascript\" name=\"app.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" express = \" /><text value=\"require\" class=\"built_in\" /><text value=\"(\" /><text value=\"&quot;express&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" app = express(); \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" logRequest = \" /><text value=\"(\" /><text value=\"req, res, next\" class=\"params\" /><text value=\") =&gt;\" /><text value=\" { \" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"`Incoming request type: \" /><text value=\"${req.method}\" class=\"subst\" /><text value=\"`\" /><text value=\"); \" /><text type=\"break\" /><text value=\" next(); \" /><text type=\"break\" /><text value=\"}; \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" middlewares = [express.json(), logRequest]; \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"app.post(\" /><text value=\"&quot;/&quot;\" class=\"string\" /><text value=\", middlewares, (req, res) =&gt; { \" /><text type=\"break\" /><text value=\"  es.send(\" /><text value=\"&quot;Hello from the root route!&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"}); \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"app.put(\" /><text value=\"&quot;/update&quot;\" class=\"string\" /><text value=\", middlewares, (req, res) =&gt; { \" /><text type=\"break\" /><text value=\" res.send(\" /><text value=\"&quot;Update route&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"}); \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"app.listen(\" /><text value=\"3000\" class=\"number\" /><text value=\", () =&gt; { \" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;Server runs on port 3000&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"});\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"182\" endIndex=\"193\" /><option startIndex=\"243\" endIndex=\"254\" /><option startIndex=\"341\" endIndex=\"352\" /></options></interaction></interactions><output><content><text value=\"Server runs on port 3000\" /><text type=\"break\" /><text value=\"Incoming request type: GET\" /></content></output></code><p visible-if=\"wrong\">Wähle <code>middlewares</code>, gefolgt von <code>middlewares</code> und schließlich <code>middlewares</code> aus.</p></body></html>"
          },
          {
            "title": "Exercise: Custom Middleware",
            "id": 122327,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Vervollständige den Code, um die benutzerdefinierte Authentifizierungs-Middleware hinzuzufügen.</p><code version=\"2\" codelang=\"javascript\" name=\"app.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" express = \" /><text value=\"require\" class=\"built_in\" /><text value=\"(\" /><text value=\"&quot;express&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" app = express(); \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"app.use(express.json()); \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"function\" class=\"keyword\" /><text value=\" \" /><text value=\"checkReqBody\" class=\"title\" /><text value=\"(\" /><text value=\"req, res, next\" class=\"params\" /><text value=\") \" /><text value=\"{ \" /><text type=\"break\" /><text value=\" \" /><text value=\"if\" class=\"keyword\" /><text value=\" (req.body !== \" /><text value=\"undefined\" class=\"literal\" /><text value=\") { \" /><text type=\"break\" /><text value=\"  \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;Valid request body&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"  next(); \" /><text type=\"break\" /><text value=\" } \" /><text value=\"else\" class=\"keyword\" /><text value=\" { \" /><text type=\"break\" /><text value=\"  \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;Invalid request body&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"  res.status(\" /><text value=\"400\" class=\"number\" /><text value=\").send(\" /><text value=\"&quot;Invalid request body&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\" } \" /><text type=\"break\" /><text value=\"} \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"app.use(checkReqBody); \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"app.listen(\" /><text value=\"3000\" class=\"number\" /><text value=\", () =&gt; { \" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"'Server is running on port 3000.'\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"});\" /></content><interactions><interaction type=\"validatedInput\" isDefault=\"true\" startIndex=\"330\" endIndex=\"342\" /></interactions><output><content><text value=\"Server is running on port 3000\" /><text type=\"break\" /><text value=\"Valid request body\" /></content></output></code><p visible-if=\"wrong\">Gib <code>checkReqBody</code> ein.</p></body></html>"
          },
          {
            "title": "Lesson #7",
            "id": 132766,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Kannst du mehrere Middleware-Funktionen auf eine einzelne Route anwenden?</p><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\">Ja, indem du sie als zusätzliche einzelne Argumente an die route-Methode übergibst oder als ein Array</item><item value=\"2\" correct=\"false\">Nein, wir können nur eine Middleware-Funktion pro Route verwenden</item></selection><p visible-if=\"wrong\">Ja, indem du sie als zusätzliche einzelne Argumente an die route-Methode übergibst oder als ein Array.</p></body></html>"
          },
          {
            "title": "Exercise: Third Party Middleware",
            "id": 122328,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Erstelle ein Array von Middleware und übergebe es als zweites Argument der <code>\"/\"</code>-Route.</p><code version=\"2\" codelang=\"javascript\" name=\"app.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" express = \" /><text value=\"require\" class=\"built_in\" /><text value=\"(\" /><text value=\"&quot;express&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" app = express(); \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"function\" class=\"keyword\" /><text value=\" \" /><text value=\"blockIP\" class=\"title\" /><text value=\"(\" /><text value=\"req, res, next\" class=\"params\" /><text value=\") \" /><text value=\"{ \" /><text type=\"break\" /><text value=\"  \" /><text value=\"const\" class=\"keyword\" /><text value=\" blockedIPs = [\" /><text value=\"'123.45.67.89'\" class=\"string\" /><text value=\"]; \" /><text type=\"break\" /><text value=\"  \" /><text value=\"const\" class=\"keyword\" /><text value=\" clientIP = req.ip; \" /><text type=\"break\" /><text value=\"   \" /><text type=\"break\" /><text value=\"  \" /><text value=\"if\" class=\"keyword\" /><text value=\" (blockedIPs.includes(clientIP)) { \" /><text type=\"break\" /><text value=\"    res.status(\" /><text value=\"403\" class=\"number\" /><text value=\").send(\" /><text value=\"&quot;Access forbidden&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"  } \" /><text value=\"else\" class=\"keyword\" /><text value=\" { \" /><text type=\"break\" /><text value=\"    next(); \" /><text type=\"break\" /><text value=\"  } \" /><text type=\"break\" /><text value=\"} \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" middleware = [express.json(), blockIP]; \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"app.get(\" /><text value=\"&quot;/&quot;\" class=\"string\" /><text value=\", middleware, (req, res) =&gt; { \" /><text type=\"break\" /><text value=\"  res.send(\" /><text value=\"&quot;Welcome to the site!&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"}); \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"app.listen(\" /><text value=\"3000\" class=\"number\" /><text value=\", () =&gt; { \" /><text type=\"break\" /><text value=\"  \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;Server runs on port 3000&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"});\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"299\" endIndex=\"309\" /><option startIndex=\"293\" endIndex=\"298\" /><option startIndex=\"355\" endIndex=\"365\" /><option startIndex=\"312\" endIndex=\"313\" /><option startIndex=\"327\" endIndex=\"328\" /><option startIndex=\"336\" endIndex=\"337\" /></options></interaction></interactions><output><content><text value=\"Server runs on port 3000\" /></content></output></code><p visible-if=\"wrong\">Wähle <code>const</code>, gefolgt von <code>middleware</code> und schließlich <code>[</code>, <code>,</code>, <code>]</code>, <code>middleware</code> aus.</p></body></html>"
          },
          {
            "title": "Lesson #8",
            "id": 132767,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Kannst du eingebaute und benutzerdefinierte Middleware in einer einzigen Routen-Definition mischen?</p><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\">Ja</item><item value=\"2\" correct=\"false\">Nein</item></selection><p visible-if=\"wrong\">Wähle Ja aus.</p></body></html>"
          }
        ]
      }
    ]
  }
}