{
  "tutorial": {
    "id": 1786,
    "version": 9,
    "type": "guidedProjectOptional",
    "isNew": false,
    "codeLanguage": "javascript",
    "title": "Abenteuerspiel",
    "descriptionContent": "Verwende dein Wissen über das Überschreiben von Methoden, um eine Charakterinteraktion in einem Spiel zu simulieren.",
    "shortDescriptionContent": "",
    "showInTrack": true,
    "iconBanner": "tutorial-1786-icon-banner.svg",
    "chapters": [
      {
        "id": 11785,
        "title": "Abenteuerspiel",
        "type": "practiceLevel3",
        "lessons": [
          {
            "title": "Create a class",
            "id": 108520,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Joe ist an der Entwicklung eines Abenteuerspiels beteiligt. Er ist für die menschlichen und Piratencharaktere verantwortlich. Wir werden ihm helfen, das Verhalten der Charaktere anzupassen.\n\nLass uns damit beginnen, eine Klasse für unsere Charaktere zu erstellen.\n\n1. Erstelle eine Klasse `Human`, um alle Charaktere darzustellen.\n2. Gib ihr einen leeren Konstruktor.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "",
                  "solvedContent": "class Human {\n  constructor() {}\n}"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Class Properties",
            "id": 108521,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Lass uns unserer definierten Klasse eine Eigenschaft hinzufügen, damit wir wissen, wer unsere Charaktere sind.\n\n1. Füge deinem Konstruktor einen `name`-Parameter hinzu.\n2. Gib der `Human`-Klasse eine `name`-Eigenschaft und setze sie auf den Wert des `name`-Parameters.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "class Human {\n  constructor() {}\n}",
                  "solvedContent": "class Human {\n  constructor(name) {\n    this.name = name;\n  }\n}"
                }
              ],
              "hints": [
                {
                  "title": "Hint",
                  "content": "The syntax for adding a property to a class is:\n```JS\nclass className {\n   constructor(property){\n     this.property = property;\n    }\n}\n```"
                }
              ]
            }
          },
          {
            "title": "Class Methods",
            "id": 108522,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Da dies ein Mehrspieler-Spiel ist, möchten wir, dass die Charaktere miteinander interagieren. Lass uns eine Methode erstellen, die sich darum kümmert.\n\n1. Erstelle eine `say`-Methode, die `stuff` als Parameter übernimmt.\n2. Füge eine Anweisung hinzu, die `stuff` anzeigt.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "class Human {\n  constructor(name) {\n    this.name = name;\n  }\n}",
                  "solvedContent": "class Human {\n  constructor(name) {\n    this.name = name;\n  }\n  say(stuff) {\n    console.log(stuff);\n  }\n}"
                }
              ],
              "hints": [
                {
                  "title": "Hint",
                  "content": "The syntax for adding a method to a class is:\n```JS\nclass className {\n   constructor(){}\n   method(parameter){\n   }\n}"
                }
              ]
            }
          },
          {
            "title": "Display contents",
            "id": 108524,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Um den Dialog zwischen den Charakteren besser nachzuverfolgen, möchten wir ihren Namen anzeigen, um zu wissen, wer gesprochen hat.\n\n1. Aktualisiere `say`, sodass es den Benutzernamen sowie das, was der Benutzer sagt, anzeigt. Zum Beispiel, wenn ein Benutzer `\"Joe\"` `\"hi\"` sagt, sollten wir lesen:\n\n```\nJoe: hi\n```",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "class Human {\n  constructor(name) {\n    this.name = name;\n  }\n  say(stuff) {\n    console.log(stuff);\n  }\n}",
                  "solvedContent": "class Human {\n  constructor(name) {\n    this.name = name;\n  }\n  say(stuff) {\n    console.log(this.name + \": \" + stuff);\n  }\n}"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Pirate",
            "id": 108525,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Als nächstes werden wir an dem Piratencharakter arbeiten. Lass uns damit beginnen, eine Klasse für Piraten zu erstellen.\n\n1. Erstelle eine `Pirate`-Klasse als direkte Erweiterung der `Human`-Klasse.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "class Human {\n  constructor(name) {\n    this.name = name;\n  }\n  say(stuff) {\n    console.log(this.name + \": \" + stuff);\n  }\n}",
                  "solvedContent": "class Human {\n  constructor(name) {\n    this.name = name;\n  }\n  say(stuff) {\n    console.log(this.name + \": \" + stuff);\n  }\n}\nclass Pirate extends Human {}"
                }
              ],
              "hints": [
                {
                  "title": "Hint",
                  "content": "The syntax for creating an extended class is:\n```JS\nclass className extends extendedClass {\n}\n```"
                }
              ]
            }
          },
          {
            "title": "Override",
            "id": 108526,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Als nächstes werden wir daran arbeiten, unsere `Pirate`-Klasse anzupassen.\n\n1. Überschreibe die `say`-Methode in der `Pirate`-Klasse.\n2. Verwende `super`, um die Funktionalität der `say`-Methode der Superklasse als Teil der Überschreibung hinzuzufügen.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "class Human {\n  constructor(name) {\n    this.name = name;\n  }\n  say(stuff) {\n    console.log(this.name + \": \" + stuff);\n  }\n}\nclass Pirate extends Human {}",
                  "solvedContent": "class Human {\n  constructor(name) {\n    this.name = name;\n  }\n  say(stuff) {\n    console.log(this.name + \": \" + stuff);\n  }\n}\nclass Pirate extends Human {\n  say(stuff) {\n   super.say(stuff);\n  }\n}"
                }
              ],
              "hints": [
                {
                  "title": "Hint",
                  "content": "To override a method, you should redefine it again in one of its extended class.\n```JS\nclass extendedClass {\n   method(parameter){\n    }\n}\n\nclass className extends extendedClass {\n  method(parameter){\n   }\n}\n```"
                }
              ]
            }
          },
          {
            "title": "Yarr!",
            "id": 108528,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Wann immer ein Pirat etwas sagt, endet er mit `\"Yarr!\"`. Lass uns unsere `say` Methode aktualisieren, um diese Besonderheit widerzuspiegeln.\n\n1. Füge eine Zeile hinzu, um die `name` Eigenschaft zusammen mit `\"Yarr!\"` anzuzeigen.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "class Human {\n  constructor(name) {\n    this.name = name;\n  }\n  say(stuff) {\n    console.log(this.name + \": \" + stuff);\n  }\n}\nclass Pirate extends Human {\n  say(stuff) {\n    super.say(stuff);\n  }\n}",
                  "solvedContent": "class Human {\n  constructor(name) {\n    this.name = name;\n  }\n  say(stuff) {\n    console.log(this.name + \": \" + stuff);\n  }\n}\nclass Pirate extends Human {\n  say(stuff) {\n    super.say(stuff);\n    console.log(this.name + \": Yarr!\");\n  }\n}"
                }
              ],
              "hints": [
                {
                  "title": "Hint",
                  "content": "For a pirate 'John' saying 'I am the captain', we should read :\n\n'John: I am the captain '\n'John: Yarr!'"
                }
              ]
            }
          },
          {
            "title": "Frances",
            "id": 108529,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Lass uns unseren ersten Charakter erstellen.\n\n1. Erstelle eine Variable namens `human`.\n2. Erstelle eine Instanz von `Human` mit dem Namen `\"Frances\"` und speichere sie in der Variable.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "class Human {\n  constructor(name) {\n    this.name = name;\n  }\n  say(stuff) {\n    console.log(this.name + \": \" + stuff);\n  }\n}\nclass Pirate extends Human {\n  say(stuff) {\n    super.say(stuff);\n    console.log(this.name + \": Yarr!\");\n  }\n}",
                  "solvedContent": "class Human {\n  constructor(name) {\n    this.name = name;\n  }\n  say(stuff) {\n    console.log(this.name + \": \" + stuff);\n  }\n}\nclass Pirate extends Human {\n  say(stuff) {\n    super.say(stuff);\n    console.log(this.name + \": Yarr!\");\n  }\n}\nconst human = new Human(\"Frances\");"
                }
              ],
              "hints": [
                {
                  "title": "Hint",
                  "content": "The syntax for adding an instance of a class is:\n```JS\nconst instance = new className();\n```"
                }
              ]
            }
          },
          {
            "title": "Long John",
            "id": 108530,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Nun, lass uns unseren ersten Piraten erstellen.\n\n1. Erstelle als Nächstes eine Variable namens `pirate`.\n2. Erstelle eine Instanz von `Pirate` mit dem Namen `\"Long John\"` und speichere sie in der Variable.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "class Human {\n  constructor(name) {\n    this.name = name;\n  }\n  say(stuff) {\n    console.log(this.name + \": \" + stuff);\n  }\n}\nclass Pirate extends Human {\n  say(stuff) {\n    super.say(stuff);\n    console.log(this.name + \": Yarr!\");\n  }\n}\nconst human = new Human(\"Frances\");",
                  "solvedContent": "class Human {\n  constructor(name) {\n    this.name = name;\n  }\n  say(stuff) {\n    console.log(this.name + \": \" + stuff);\n  }\n}\nclass Pirate extends Human {\n  say(stuff) {\n    super.say(stuff);\n    console.log(this.name + \": Yarr!\");\n  }\n}\nconst human = new Human(\"Frances\");\nconst pirate = new Pirate(\"Long John\");"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Frances says",
            "id": 108531,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Nun lass uns die Charaktere miteinander kommunizieren.\n\n1. Verwende eine Methode, um Frances sagen zu lassen: `\"G'day, Sir!\"`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "class Human {\n  constructor(name) {\n    this.name = name;\n  }\n  say(stuff) {\n    console.log(this.name + \": \" + stuff);\n  }\n}\nclass Pirate extends Human {\n  say(stuff) {\n    super.say(stuff);\n    console.log(this.name + \": Yarr!\");\n  }\n}\nconst human = new Human(\"Frances\");\nconst pirate = new Pirate(\"Long John\");",
                  "solvedContent": "class Human {\n  constructor(name) {\n    this.name = name;\n  }\n  say(stuff) {\n    console.log(this.name + \": \" + stuff);\n  }\n}\nclass Pirate extends Human {\n  say(stuff) {\n    super.say(stuff);\n    console.log(this.name + \": Yarr!\");\n  }\n}\nconst human = new Human(\"Frances\");\nconst pirate = new Pirate(\"Long John\");\nhuman.say(\"Good day, Sir!\");"
                }
              ],
              "hints": [
                {
                  "title": "Hint",
                  "content": "The syntax for using a method is:\n```JS\n    instance.method(value)\n```"
                }
              ]
            }
          },
          {
            "title": "Long John says",
            "id": 108532,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Lass uns auf Frances' Gruß antworten.\n\n1. Verwende eine Methode, damit dein Pirat mit `\"Ahoy!\"` antwortet.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "class Human {\n  constructor(name) {\n    this.name = name;\n  }\n  say(stuff) {\n    console.log(this.name + \": \" + stuff);\n  }\n}\nclass Pirate extends Human {\n  say(stuff) {\n    super.say(stuff);\n    console.log(this.name + \": Yarr!\");\n  }\n}\nconst human = new Human(\"Frances\");\nconst pirate = new Pirate(\"Long John\");\nhuman.say(\"Good day, sir!\");",
                  "solvedContent": "class Human {\n  constructor(name) {\n    this.name = name;\n  }\n  say(stuff) {\n    console.log(this.name + \": \" + stuff);\n  }\n}\nclass Pirate extends Human {\n  say(stuff) {\n    super.say(stuff);\n    console.log(this.name + \": Yarr!\");\n  }\n}\nconst human = new Human(\"Frances\");\nconst pirate = new Pirate(\"Long John\");\nhuman.say(\"Good day, sir!\");\npirate.say(\"Ahoy!\");"
                }
              ],
              "hints": []
            }
          }
        ]
      }
    ]
  }
}