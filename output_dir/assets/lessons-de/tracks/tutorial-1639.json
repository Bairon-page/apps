{
  "tutorial": {
    "id": 1639,
    "version": 11,
    "type": "course",
    "isNew": false,
    "codeLanguage": "javascript",
    "title": "Template Literale",
    "descriptionContent": "Lerne, wie du Template-Literals verwenden kannst, um deinen Code zu verkürzen.",
    "shortDescriptionContent": "",
    "showInTrack": true,
    "iconBanner": null,
    "chapters": [
      {
        "id": 11259,
        "title": "Template-Strings",
        "type": "practiceLevel1",
        "lessons": [
          {
            "title": "Intro",
            "id": 104384,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Lass uns lernen, wie man mit JavaScript <strong>Template Literals</strong> arbeitet, die es einfach machen, Variablen und Ausdrücke in Strings einzufügen.</p><p>Schau dir unten an, wie Template-Literale dasselbe Ergebnis wie die längere Methode darüber erzielen.</p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" fullName = \" /><text value=\"&quot;Helen McGuire&quot;\" class=\"string\" /><text value=\";\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;Hello &quot;\" class=\"string\" /><text value=\" + fullName + \" /><text value=\"&quot;!&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"`Hello \" /><text value=\"${fullName}\" class=\"subst\" /><text value=\"!`\" /><text value=\");\" /></content><output><content><text value=\"Hello Helen McGuire!\" /><text type=\"break\" /><text value=\"Hello Helen McGuire!\" /></content></output></code></body></html>"
          },
          {
            "title": "Literal string",
            "id": 104385,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Template-Literale machen es einfach, Strings mit Variablen durch String-Literale zu kombinieren.</p><p>Lass uns den String <code>\"Apple\"</code> in ein String-Literal umwandeln, indem wir <code>Apple</code> in Backtick-Zeichen anstelle von Anführungszeichen einschließen.</p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" cake = \" /><text value=\"`Apple`\" class=\"string\" /><text value=\";\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(cake);\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"13\" endIndex=\"14\" /><option startIndex=\"14\" endIndex=\"19\" /><option startIndex=\"19\" endIndex=\"20\" /></options></interaction></interactions><output><content><text value=\"Apple\" /></content></output></code><p visible-if=\"wrong\">Wähle <code>`</code>, gefolgt von <code>Apple</code> und schließlich <code>`</code> aus.</p></body></html>"
          },
          {
            "title": "Variables",
            "id": 104386,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Um Variablen einfach mit String-Literalen zu kombinieren, verwenden wir die <code>${name}</code>-Syntax, wobei <code>name</code> eine Variable ist.</p><p>Code <code>${category}</code>.</p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" category = \" /><text value=\"`pie`\" class=\"string\" /><text value=\";\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" cake = \" /><text value=\"`Apple \" /><text value=\"${category}\" class=\"subst\" /><text value=\"`\" /><text value=\";\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(cake);\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"44\" endIndex=\"45\" /><option startIndex=\"45\" endIndex=\"46\" /><option startIndex=\"46\" endIndex=\"54\" /><option startIndex=\"54\" endIndex=\"55\" /><option correct=\"false\"><content><text value=\"(\" /></content></option><option correct=\"false\"><content><text value=\")\" /></content></option><option correct=\"false\"><content><text value=\"&amp;\" /></content></option></options></interaction></interactions><output><content><text value=\"Apple pie\" /></content></output></code><p visible-if=\"wrong\">Wähle <code>$</code>, gefolgt von <code>{</code> und schließlich <code>category</code>, <code>}</code> aus.</p></body></html>"
          },
          {
            "title": "Expressions",
            "id": 104387,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Wir können auch Operationen innerhalb eines String-Literals durchführen, indem wir Ausdrücke in die geschweiften Klammern von <code>${}</code> einfügen.</p><p>Füge den Ausdruck <code>quantity * price</code> hinzu.</p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" quantity = \" /><text value=\"20\" class=\"number\" /><text value=\";\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" price = \" /><text value=\"10\" class=\"number\" /><text value=\";\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" cost = \" /><text value=\"`Total cost : \" /><text value=\"${quantity * price}\" class=\"subst\" /><text value=\"`\" /><text value=\";\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(cost);\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"68\" endIndex=\"76\" /><option startIndex=\"77\" endIndex=\"78\" /><option startIndex=\"79\" endIndex=\"84\" /><option correct=\"false\"><content><text value=\",\" /></content></option></options></interaction></interactions><output><content><text value=\"Total cost : 200\" /></content></output></code><p visible-if=\"wrong\">Wähle <code>quantity</code>, gefolgt von <code>*</code> und schließlich <code>price</code> aus.</p></body></html>"
          },
          {
            "title": "Functions",
            "id": 104388,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Beim Aufrufen einer Funktion lassen wir die Klammern <code>()</code> weg, wenn wir ein String-Literal als Argument an die Funktion übergeben.</p><p>Lass uns den String-Literal <code>Jane</code> übergeben, während wir die <code>greetings</code>-Funktion aufrufen.</p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" greetings = \" /><text value=\"(\" /><text value=\"name\" class=\"params\" /><text value=\") =&gt;\" /><text value=\" {\" /><text type=\"break\" /><text value=\" \" /><text value=\"return\" class=\"keyword\" /><text value=\" \" /><text value=\"`Bonjour \" /><text value=\"${name}\" class=\"subst\" /><text value=\"!`\" /><text value=\";\" /><text type=\"break\" /><text value=\"};\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(greetings\" /><text value=\"`Jane`\" class=\"string\" /><text value=\");\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"82\" endIndex=\"88\" /><option correct=\"false\"><content><text value=\"(Jane)\" /></content></option></options></interaction></interactions><output><content><text value=\"Bonjour Jane!\" /></content></output></code><p visible-if=\"wrong\">Wähle <code>`Jane`</code> aus.</p></body></html>"
          },
          {
            "title": "Question: Literal string",
            "id": 105017,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Wie wandeln wir einen String in ein String-Literal um?</p><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\">Indem du den String in Backtick-Zeichen einschließt</item><item value=\"2\" correct=\"false\">Indem du den String in doppelte Anführungszeichen setzt</item></selection><p visible-if=\"wrong\">Indem du den String in Backtick-Zeichen einschließt.</p></body></html>"
          },
          {
            "title": "Question: Variables",
            "id": 105018,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Was ist falsch an dem folgenden Code, der <code>June Jenny</code> anzeigen soll?</p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" lastName = \" /><text value=\"`Jenny`\" class=\"string\" /><text value=\";\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" fullName = \" /><text value=\"`June $[lastName]`\" class=\"string\" /><text value=\";\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(fullName);\" /></content><output><content><text value=\"June $[lastName]\" /></content></output></code><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\">Wir sollten geschweifte Klammern <code>{}</code> anstelle von eckigen Klammern <code>[]</code> verwenden</item><item value=\"2\" correct=\"false\">Wir sollten Klammern <code>()</code> anstelle von eckigen Klammern <code>[]</code> verwenden</item></selection><p visible-if=\"wrong\">Wir sollten geschweifte Klammern <code>{}</code> anstelle von eckigen Klammern <code>[]</code> verwenden.</p></body></html>"
          },
          {
            "title": "Question: Expressions",
            "id": 105019,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Wie kombinieren wir Ausdrücke mit String-Literalen?</p><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\">Wir fügen Ausdrücke innerhalb der geschweiften Klammern der <code>${}</code>-Syntax hinzu</item><item value=\"2\" correct=\"false\">Wir fügen Ausdrücke nach den geschweiften Klammern der <code>${}</code>-Syntax hinzu</item></selection><p visible-if=\"wrong\">Wir fügen Ausdrücke innerhalb der geschweiften Klammern der <code>${}</code>-Syntax hinzu.</p></body></html>"
          },
          {
            "title": "Question: Functions",
            "id": 105020,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Was lassen wir weg, wenn wir eine Funktion mit einem String-Literal-Argument aufrufen?</p><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\">Die Klammern <code>()</code></item><item value=\"2\" correct=\"false\">Die Backticks</item></selection><p visible-if=\"wrong\">Die Klammern <code>()</code>.</p></body></html>"
          },
          {
            "title": "Example: Literal string",
            "id": 105022,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Füge den Filmtitel <code>Brave</code> als String-Literal ein.</p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"let\" class=\"keyword\" /><text value=\" movie = \" /><text value=\"`Brave`\" class=\"string\" /><text value=\";\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(movie);\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"12\" endIndex=\"19\" /><option correct=\"false\"><content><text value=\"´Brave´\" /></content></option></options></interaction></interactions><output><content><text value=\"Brave\" /></content></output></code><p visible-if=\"wrong\">Wähle <code>`Brave`</code> aus.</p></body></html>"
          },
          {
            "title": "Example: Variables",
            "id": 105023,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Kodiere das zweite String-Literal, um die beiden zu einem zu kombinieren.</p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"let\" class=\"keyword\" /><text value=\" old = \" /><text value=\"`Superman`\" class=\"string\" /><text value=\";\" /><text type=\"break\" /><text value=\"let\" class=\"keyword\" /><text value=\" latest = \" /><text value=\"`Startrek`\" class=\"string\" /><text value=\";\" /><text type=\"break\" /><text value=\"let\" class=\"keyword\" /><text value=\" movies = \" /><text value=\"`\" /><text value=\"${old}\" class=\"subst\" /><text value=\", \" /><text value=\"${latest}\" class=\"subst\" /><text value=\"`\" /><text value=\";\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(movies);\" /></content><interactions><interaction type=\"validatedInput\" isDefault=\"true\" startIndex=\"69\" endIndex=\"78\" /></interactions><output><content><text value=\"Superman, Startrek\" /></content></output></code><p visible-if=\"wrong\">Gib <code>${latest}</code> ein.</p></body></html>"
          },
          {
            "title": "Example: Expressions",
            "id": 105024,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Schreibe den Code, um die Gesamtkosten der Kinokarten zu berechnen.</p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"let\" class=\"keyword\" /><text value=\" ticketPrice = \" /><text value=\"500\" class=\"number\" /><text value=\";\" /><text type=\"break\" /><text value=\"let\" class=\"keyword\" /><text value=\" persons = \" /><text value=\"5\" class=\"number\" /><text value=\";\" /><text type=\"break\" /><text value=\"let\" class=\"keyword\" /><text value=\" total = \" /><text value=\"`Total cost: \" /><text value=\"${ticketPrice * persons}\" class=\"subst\" /><text value=\"`\" /><text value=\";\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(total);\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"65\" endIndex=\"66\" /><option startIndex=\"66\" endIndex=\"67\" /><option startIndex=\"79\" endIndex=\"80\" /><option startIndex=\"88\" endIndex=\"89\" /><option correct=\"false\"><content><text value=\"(\" /></content></option><option correct=\"false\"><content><text value=\")\" /></content></option></options></interaction></interactions><output><content><text value=\"Total cost: 2500\" /></content></output></code><p visible-if=\"wrong\">Wähle <code>$</code>, gefolgt von <code>{</code> und schließlich <code>*</code>, <code>}</code> aus.</p></body></html>"
          },
          {
            "title": "Example: Functions",
            "id": 105025,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Rufe die Funktion <code>likedBy</code> auf und übergebe das String-Literal-Argument <code>Hellen</code>.</p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" likedBy = \" /><text value=\"person\" class=\"params\" /><text value=\" =&gt;\" /><text value=\" {\" /><text type=\"break\" /><text value=\" \" /><text value=\"return\" class=\"keyword\" /><text value=\" \" /><text value=\"`Movie liked by: \" /><text value=\"${person}\" class=\"subst\" /><text value=\"`\" /><text value=\";\" /><text type=\"break\" /><text value=\"};\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(likedBy\" /><text value=\"`Hellen`\" class=\"string\" /><text value=\");\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"80\" endIndex=\"87\" /><option startIndex=\"87\" endIndex=\"95\" /><option correct=\"false\"><content><text value=\"(&quot;Hellen&quot;)\" /></content></option></options></interaction></interactions><output><content><text value=\"Movie liked by: Hellen\" /></content></output></code><p visible-if=\"wrong\">Wähle <code>likedBy</code>, gefolgt von <code>`Hellen`</code> aus.</p></body></html>"
          }
        ]
      }
    ]
  }
}