{
  "tutorial": {
    "id": 2156,
    "version": 5,
    "type": "guidedProjectOptional",
    "isNew": false,
    "codeLanguage": "javascript",
    "title": "Zufälliger Tag bei der Arbeit",
    "descriptionContent": "Eine Analogie zu JavaScript-Promises anhand eines zufälligen Arbeitstags",
    "shortDescriptionContent": "",
    "showInTrack": true,
    "iconBanner": "tutorial-2156-icon-banner.svg",
    "chapters": [
      {
        "id": 13482,
        "title": "Zufälliger Tag bei der Arbeit",
        "type": "practiceLevel3",
        "lessons": [
          {
            "title": "Order from Boss I",
            "id": 121197,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Jeden Tag werden wir gebeten, einige Aufgaben bei der Arbeit zu erledigen. Lass uns ein Programm erstellen, das einen zufälligen Arbeitstag zeigt. Am Ende des Projekts werden wir erkennen, dass Promises in unserem Alltag sehr relevant sind!\n\nAls Arbeiter bekommen wir normalerweise Anweisungen von unseren Chefs. Lass uns eine Funktion erstellen, die das Erhalten von Anweisungen von unseren Chefs nachahmt.\n\n1. Schreibe eine Funktion `orderFromBoss()`, die ein `Promise` zurückgibt.\n2. Verwende eine Funktion mit `resolve` und `reject` als Parameter des `Promise`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "",
                  "solvedContent": "function orderFromBoss() {\r\n  return new Promise(function(resolve, reject) {});\r\n}"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Order from Boss II",
            "id": 121207,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Anweisungen von Chefs sollten einige Anweisungen enthalten. Andernfalls wüssten wir nicht, was sie von uns wollen!\n\n1. Erstelle innerhalb der Promise-Funktion eine Variable `isCodeDone` und setze den Wert auf `false`.\n2. Gib ```Finish the code, it's an order!``` mit `console.log()` aus.\n3. Setze `isCodeDone` als Parameter für `resolve()`.\n\nWir können unsere Chefs normalerweise nicht ablehnen, also lassen wir `reject` ungenutzt.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "function orderFromBoss() {\r\n  return new Promise(function(resolve, reject) {});\r\n}",
                  "solvedContent": "function orderFromBoss() {\r\n  return new Promise(function(resolve, reject) {\r\n    let isCodeDone = false;\r\n    console.log(\"Finish the code, it's an order!\");\r\n    resolve(isCodeDone);\r\n  });\r\n}"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Coding I",
            "id": 121198,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Als nächstes lass uns eine Funktion für dich, den Programmierer, erstellen!\n\n1. Schreibe eine `coding()` Funktion, die `isCodeDone` als Parameter nimmt und ein `Promise` zurückgibt.\n2. Verwende eine Funktion mit den Parametern `resolve` und `reject` als Parameter des `Promise`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "function orderFromBoss() {\r\n  return new Promise(function(resolve, reject) {\r\n    let isCodeDone = false;\r\n    console.log(\"Finish the code, it's an order!\");\r\n    resolve(isCodeDone);\r\n  });\r\n}",
                  "solvedContent": "function orderFromBoss() {\r\n  return new Promise(function(resolve, reject) {\r\n    let isCodeDone = false;\r\n    console.log(\"Finish the code, it's an order!\");\r\n    resolve(isCodeDone);\r\n  });\r\n}\r\n\r\nfunction coding(isCodeDone) {\r\n  return new Promise(function(resolve, reject) {});\r\n}"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Coding II",
            "id": 121208,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Coder müssen nur dann programmieren, wenn sie eine Aufgabe zu erledigen haben. Lass uns die Funktion `coding()` so anpassen, dass sie das widerspiegelt.\n\n1. Überprüfe innerhalb der `coding()`-Promise-Funktion, ob `isCodeDone` `false` ist.\n2. Wenn `isCodeDone` `false` ist, gib `Working...` mit `console.log()` aus.\n3. Setze dann `isCodeDone` auf `true` und übergebe `isCodeDone` als Parameter an `resolve()`.\n4. Wenn `isCodeDone` `true` ist, übergebe ```\"No instructions from boss yet.\"``` als Parameter an `reject()`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "function orderFromBoss() {\r\n  return new Promise(function(resolve, reject) {\r\n    let isCodeDone = false;\r\n    console.log(\"Finish the code, it's an order!\");\r\n    resolve(isCodeDone);\r\n  });\r\n}\r\n\r\nfunction coding(isCodeDone) {\r\n  return new Promise(function(resolve, reject) {});\r\n}",
                  "solvedContent": "function orderFromBoss() {\r\n  return new Promise(function(resolve, reject) {\r\n    let isCodeDone = false;\r\n    console.log(\"Finish the code, it's an order!\");\r\n    resolve(isCodeDone);\r\n  });\r\n}\r\n\r\nfunction coding(isCodeDone) {\r\n  return new Promise(function(resolve, reject) {\r\n    if (!isCodeDone) {\r\n      console.log(\"Working...\");\r\n      isCodeDone = true;\r\n      resolve(isCodeDone);\r\n    } else {\r\n      reject(\"No instructions from boss yet.\");\r\n    }\r\n  });\r\n}"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Performance Review I",
            "id": 121199,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Wenn wir mit unserer Arbeit fertig sind, möchten unsere Chefs unsere Leistung überprüfen.\n\n1. Schreibe eine Funktion `performanceReview()`, die `isCodeDone` als Parameter nimmt und ein `Promise` zurückgibt.\n2. Verwende eine Funktion mit den Parametern `resolve` und `reject` als Parameter des `Promise`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "function orderFromBoss() {\r\n  return new Promise(function(resolve, reject) {\r\n    let isCodeDone = false;\r\n    console.log(\"Finish the code, it's an order!\");\r\n    resolve(isCodeDone);\r\n  });\r\n}\r\n\r\nfunction coding(isCodeDone) {\r\n  return new Promise(function(resolve, reject) {\r\n    if (!isCodeDone) {\r\n      console.log(\"Working...\");\r\n      isCodeDone = true;\r\n      resolve(isCodeDone);\r\n    } else {\r\n      reject(\"No instructions from boss yet.\");\r\n    }\r\n  });\r\n}",
                  "solvedContent": "function orderFromBoss() {\r\n  return new Promise(function(resolve, reject) {\r\n    let isCodeDone = false;\r\n    console.log(\"Finish the code, it's an order!\");\r\n    resolve(isCodeDone);\r\n  });\r\n}\r\n\r\nfunction coding(isCodeDone) {\r\n  return new Promise(function(resolve, reject) {\r\n    if (!isCodeDone) {\r\n      console.log(\"Working...\");\r\n      isCodeDone = true;\r\n      resolve(isCodeDone);\r\n    } else {\r\n      reject(\"No instructions from boss yet.\");\r\n    }\r\n  });\r\n}\r\n\r\nfunction performanceReview(isCodeDone) {\r\n  return new Promise(function(resolve, reject) {});\r\n}"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Performance Review II",
            "id": 121209,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Unsere Chefs haben unsere Leistungen überprüft, aber wir können uns nicht verbessern, wenn die Bewertung nicht mit uns geteilt wird. Lass uns `performanceReview()` so ändern, dass das passiert.\n\n1. Innerhalb der `performanceReview()` Promise-Funktion, überprüfe, ob `isCodeDone` `true` ist.\n2. Wenn `isCodeDone` `true` ist, setze `\"You kept your promise and finished the code. You're getting promoted!\"` als Parameter für `resolve()`.\n3. Wenn `isCodeDone` `false` ist, setze `\"You broke your promise, how can I trust you with bigger responsibilities?\"` als Parameter für `reject()`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "function orderFromBoss() {\r\n  return new Promise(function(resolve, reject) {\r\n    let isCodeDone = false;\r\n    console.log(\"Finish the code, it's an order!\");\r\n    resolve(isCodeDone);\r\n  });\r\n}\r\n\r\nfunction coding(isCodeDone) {\r\n  return new Promise(function(resolve, reject) {\r\n    if (!isCodeDone) {\r\n      console.log(\"Working...\");\r\n      isCodeDone = true;\r\n      resolve(isCodeDone);\r\n    } else {\r\n      reject(\"No instructions from boss yet.\");\r\n    }\r\n  });\r\n}\r\n\r\nfunction performanceReview(isCodeDone) {\r\n  return new Promise(function(resolve, reject) {});\r\n}",
                  "solvedContent": "function orderFromBoss() {\r\n  return new Promise(function(resolve, reject) {\r\n    let isCodeDone = false;\r\n    console.log(\"Finish the code, it's an order!\");\r\n    resolve(isCodeDone);\r\n  });\r\n}\r\n\r\nfunction coding(isCodeDone) {\r\n  return new Promise(function(resolve, reject) {\r\n    if (!isCodeDone) {\r\n      console.log(\"Working...\");\r\n      isCodeDone = true;\r\n      resolve(isCodeDone);\r\n    } else {\r\n      reject(\"No instructions from boss yet.\");\r\n    }\r\n  });\r\n}\r\n\r\nfunction performanceReview(isCodeDone) {\r\n  return new Promise(function(resolve, reject) {\r\n    if (isCodeDone) {\r\n      resolve(\r\n        \"You kept your promise and finished the code. You're getting promoted!\"\r\n        );\r\n    } else {\r\n      reject(\r\n        \"You broke your promise, how can I trust you with bigger responsibilities?\"\r\n        );\r\n    }\r\n  });\r\n}"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Random Day at Work I",
            "id": 121200,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Jetzt, da alle Szenarien bereits implementiert sind, lass uns alles zusammenfügen, um einen Arbeitstag zu gestalten. Da die Dinge im echten Leben nicht immer nacheinander passieren, sollten wir die Funktion ebenfalls asynchron gestalten.\n\n1. Schreibe eine asynchrone Funktion `randomDayAtWork()`.\n2. Rufe `orderFromBoss()` auf und speichere es in einer Variablen `instruction`.\n3. Rufe `coding()` mit `instruction` als Parameter auf und speichere es in einer Variablen `work`.\n4. Rufe `performanceReview()` mit `work` als Parameter auf und speichere es in einer Variablen `review`.\n5. Gib den Wert von `review` mit `console.log()` aus.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "function orderFromBoss() {\r\n  return new Promise(function(resolve, reject) {\r\n    let isCodeDone = false;\r\n    console.log(\"Finish the code, it's an order!\");\r\n    resolve(isCodeDone);\r\n  });\r\n}\r\n\r\nfunction coding(isCodeDone) {\r\n  return new Promise(function(resolve, reject) {\r\n    if (!isCodeDone) {\r\n      console.log(\"Working...\");\r\n      isCodeDone = true;\r\n      resolve(isCodeDone);\r\n    } else {\r\n      reject(\"No instructions from boss yet.\");\r\n    }\r\n  });\r\n}\r\n\r\nfunction performanceReview(isCodeDone) {\r\n  return new Promise(function(resolve, reject) {\r\n    if (isCodeDone) {\r\n      resolve(\r\n        \"You kept your promise and finished the code. You're getting promoted!\"\r\n        );\r\n    } else {\r\n      reject(\r\n        \"You broke your promise, how can I trust you with bigger responsibilities?\"\r\n        );\r\n    }\r\n  });\r\n}",
                  "solvedContent": "function orderFromBoss() {\r\n  return new Promise(function(resolve, reject) {\r\n    let isCodeDone = false;\r\n    console.log(\"Finish the code, it's an order!\");\r\n    resolve(isCodeDone);\r\n  });\r\n}\r\n\r\nfunction coding(isCodeDone) {\r\n  return new Promise(function(resolve, reject) {\r\n    if (!isCodeDone) {\r\n      console.log(\"Working...\");\r\n      isCodeDone = true;\r\n      resolve(isCodeDone);\r\n    } else {\r\n      reject(\"No instructions from boss yet.\");\r\n    }\r\n  });\r\n}\r\n\r\nfunction performanceReview(isCodeDone) {\r\n  return new Promise(function(resolve, reject) {\r\n    if (isCodeDone) {\r\n      resolve(\r\n        \"You kept your promise and finished the code. You're getting promoted!\"\r\n        );\r\n    } else {\r\n      reject(\r\n        \"You broke your promise, how can I trust you with bigger responsibilities?\"\r\n        );\r\n    }\r\n  });\r\n}\r\nasync function randomDayAtWork() {\r\n  const instruction = orderFromBoss();\r\n  const work = coding(instruction);\r\n  const review = performanceReview(work);\r\n  console.log(review);\r\n}"
                }
              ],
              "hints": [
                {
                  "title": "Hint",
                  "content": "You can make your functions asynchronous by adding the `async` keyword before defining the function. The syntax is:\n```\nasync function myAsyncFunc(){\n\n//code here\n\n}\n```"
                }
              ]
            }
          },
          {
            "title": "Random Day at Work II",
            "id": 121210,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Wie du weißt, ist die Arbeit manchmal nicht bereit für uns, und wir müssen warten. Zum Beispiel sollten wir auf die Anweisung unseres Chefs warten, bevor wir mit etwas beginnen!\n\n1. Füge das `await` Schlüsselwort zu den Funktionsaufrufen in der `randomDayAtWork()` Funktion hinzu, um sicherzustellen, dass sie erst aufgerufen werden, nachdem die vorherige ihre Ausführung abgeschlossen hat.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "function orderFromBoss() {\r\n  return new Promise(function(resolve, reject) {\r\n    let isCodeDone = false;\r\n    console.log(\"Finish the code, it's an order!\");\r\n    resolve(isCodeDone);\r\n  });\r\n}\r\n\r\nfunction coding(isCodeDone) {\r\n  return new Promise(function(resolve, reject) {\r\n    if (!isCodeDone) {\r\n      console.log(\"Working...\");\r\n      isCodeDone = true;\r\n      resolve(isCodeDone);\r\n    } else {\r\n      reject(\"No instructions from boss yet.\");\r\n    }\r\n  });\r\n}\r\n\r\nfunction performanceReview(isCodeDone) {\r\n  return new Promise(function(resolve, reject) {\r\n    if (isCodeDone) {\r\n      resolve(\r\n        \"You kept your promise and finished the code. You're getting promoted!\"\r\n        );\r\n    } else {\r\n      reject(\r\n        \"You broke your promise, how can I trust you with bigger responsibilities?\"\r\n        );\r\n    }\r\n  });\r\n}\r\nasync function randomDayAtWork() {\r\n  const instruction = orderFromBoss();\r\n  const work = coding(instruction);\r\n  const review = performanceReview(work);\r\n  console.log(review);\r\n}",
                  "solvedContent": "function orderFromBoss() {\r\n  return new Promise(function(resolve, reject) {\r\n    let isCodeDone = false;\r\n    console.log(\"Finish the code, it's an order!\");\r\n    resolve(isCodeDone);\r\n  });\r\n}\r\n\r\nfunction coding(isCodeDone) {\r\n  return new Promise(function(resolve, reject) {\r\n    if (!isCodeDone) {\r\n      console.log(\"Working...\");\r\n      isCodeDone = true;\r\n      resolve(isCodeDone);\r\n    } else {\r\n      reject(\"No instructions from boss yet.\");\r\n    }\r\n  });\r\n}\r\n\r\nfunction performanceReview(isCodeDone) {\r\n  return new Promise(function(resolve, reject) {\r\n    if (isCodeDone) {\r\n      resolve(\r\n        \"You kept your promise and finished the code. You're getting promoted!\"\r\n        );\r\n    } else {\r\n      reject(\r\n        \"You broke your promise, how can I trust you with bigger responsibilities?\"\r\n        );\r\n    }\r\n  });\r\n}\r\nasync function randomDayAtWork() {\r\n  const instruction = await orderFromBoss();\r\n  const work = await coding(instruction);\r\n  const review = await performanceReview(work);\r\n  console.log(review);\r\n}"
                }
              ],
              "hints": [
                {
                  "title": "Hint",
                  "content": "`await` should be before the function call.\n\n```\nawait myFunc();\n```"
                }
              ]
            }
          },
          {
            "title": "Random Day at Work III",
            "id": 121201,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Super! Der letzte Schritt besteht darin, zu überprüfen, ob Promises erfüllt sind. Promises werden nicht immer erfüllt, daher sollten wir **try** verwenden, um die Funktionen auszuführen, die wir zuvor geschrieben haben, und **catch**, um Fehler abzufangen, die beim Ausführen des Codes auftreten könnten.\n\n1. Verwende `try`, um den Code innerhalb von `randomDayAtWork()` auszuführen.\n2. Nach dem `try`-Block in `randomDayAtWork()`, schreibe einen `catch` mit `error` als Parameter.\n3. Im `catch`-Block, gib den `error` mit `console.log` aus.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "function orderFromBoss() {\r\n  return new Promise(function(resolve, reject) {\r\n    let isCodeDone = false;\r\n    console.log(\"Finish the code, it's an order!\");\r\n    resolve(isCodeDone);\r\n  });\r\n}\r\n\r\nfunction coding(isCodeDone) {\r\n  return new Promise(function(resolve, reject) {\r\n    if (!isCodeDone) {\r\n      console.log(\"Working...\");\r\n      isCodeDone = true;\r\n      resolve(isCodeDone);\r\n    } else {\r\n      reject(\"No instructions from boss yet.\");\r\n    }\r\n  });\r\n}\r\n\r\nfunction performanceReview(isCodeDone) {\r\n  return new Promise(function(resolve, reject) {\r\n    if (isCodeDone) {\r\n      resolve(\r\n        \"You kept your promise and finished the code. You're getting promoted!\"\r\n        );\r\n    } else {\r\n      reject(\r\n        \"You broke your promise, how can I trust you with bigger responsibilities?\"\r\n        );\r\n    }\r\n  });\r\n}\r\nasync function randomDayAtWork() {\r\n  const instruction = await orderFromBoss();\r\n  const work = await coding(instruction);\r\n  const review = await performanceReview(work);\r\n  console.log(review);\r\n}",
                  "solvedContent": "function orderFromBoss() {\r\n  return new Promise(function(resolve, reject) {\r\n    let isCodeDone = false;\r\n    console.log(\"Finish the code, it's an order!\");\r\n    resolve(isCodeDone);\r\n  });\r\n}\r\n\r\nfunction coding(isCodeDone) {\r\n  return new Promise(function(resolve, reject) {\r\n    if (!isCodeDone) {\r\n      console.log(\"Working...\");\r\n      isCodeDone = true;\r\n      resolve(isCodeDone);\r\n    } else {\r\n      reject(\"No instructions from boss yet.\");\r\n    }\r\n  });\r\n}\r\n\r\nfunction performanceReview(isCodeDone) {\r\n  return new Promise(function(resolve, reject) {\r\n    if (isCodeDone) {\r\n      resolve(\r\n        \"You kept your promise and finished the code. You're getting promoted!\"\r\n        );\r\n    } else {\r\n      reject(\r\n        \"You broke your promise, how can I trust you with bigger responsibilities?\"\r\n        );\r\n    }\r\n  });\r\n}\r\nasync function randomDayAtWork() {\r\n  try {\r\n    const instruction = await orderFromBoss();\r\n    const work = await coding(instruction);\r\n    const review = await performanceReview(work);\r\n    console.log(review);\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n}"
                }
              ],
              "hints": [
                {
                  "title": "Hint",
                  "content": "The syntax for `try-catch` is as below:\n\n```\ntry {\n\n// code to try\n\n} catch(error) {\n\n//code to run when an error happens\n\n}\n```"
                }
              ]
            }
          },
          {
            "title": "Execute randomDayAtWork()!",
            "id": 121202,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Alle unsere Funktionen sind jetzt bereit, aber sie werden nicht ausgeführt, es sei denn, wir tun etwas dagegen! Lass uns die Funktion aufrufen, die einen neuen zufälligen Arbeitstag startet.\n\n1. Rufe am Ende des Codes `randomDayAtWork()` auf.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "function orderFromBoss() {\r\n  return new Promise(function(resolve, reject) {\r\n    let isCodeDone = false;\r\n    console.log(\"Finish the code, it's an order!\");\r\n    resolve(isCodeDone);\r\n  });\r\n}\r\n\r\nfunction coding(isCodeDone) {\r\n  return new Promise(function(resolve, reject) {\r\n    if (!isCodeDone) {\r\n      console.log(\"Working...\");\r\n      isCodeDone = true;\r\n      resolve(isCodeDone);\r\n    } else {\r\n      reject(\"No instructions from boss yet.\");\r\n    }\r\n  });\r\n}\r\n\r\nfunction performanceReview(isCodeDone) {\r\n  return new Promise(function(resolve, reject) {\r\n    if (isCodeDone) {\r\n      resolve(\r\n        \"You kept your promise and finished the code. You're getting promoted!\"\r\n        );\r\n    } else {\r\n      reject(\r\n        \"You broke your promise, how can I trust you with bigger responsibilities?\"\r\n        );\r\n    }\r\n  });\r\n}\r\nasync function randomDayAtWork() {\r\n  try {\r\n    const instruction = await orderFromBoss();\r\n    const work = await coding(instruction);\r\n    const review = await performanceReview(work);\r\n    console.log(review);\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n}",
                  "solvedContent": "function orderFromBoss() {\r\n  return new Promise(function(resolve, reject) {\r\n    let isCodeDone = false;\r\n    console.log(\"Finish the code, it's an order!\");\r\n    resolve(isCodeDone);\r\n  });\r\n}\r\n\r\nfunction coding(isCodeDone) {\r\n  return new Promise(function(resolve, reject) {\r\n    if (!isCodeDone) {\r\n      console.log(\"Working...\");\r\n      isCodeDone = true;\r\n      resolve(isCodeDone);\r\n    } else {\r\n      reject(\"No instructions from boss yet.\");\r\n    }\r\n  });\r\n}\r\n\r\nfunction performanceReview(isCodeDone) {\r\n  return new Promise(function(resolve, reject) {\r\n    if (isCodeDone) {\r\n      resolve(\r\n        \"You kept your promise and finished the code. You're getting promoted!\"\r\n        );\r\n    } else {\r\n      reject(\r\n        \"You broke your promise, how can I trust you with bigger responsibilities?\"\r\n        );\r\n    }\r\n  });\r\n}\r\nasync function randomDayAtWork() {\r\n  try {\r\n    const instruction = await orderFromBoss();\r\n    const work = await coding(instruction);\r\n    const review = await performanceReview(work);\r\n    console.log(review);\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n}\r\nrandomDayAtWork();"
                }
              ],
              "hints": []
            }
          }
        ]
      }
    ]
  }
}