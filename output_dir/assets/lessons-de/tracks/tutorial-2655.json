{
  "tutorial": {
    "id": 2655,
    "version": 4,
    "type": "challenges",
    "isNew": false,
    "codeLanguage": "python",
    "title": "Objektorientierte Programmierung",
    "descriptionContent": "Herausforderungen basierend auf objektorientierter Programmierung",
    "shortDescriptionContent": "",
    "showInTrack": true,
    "iconBanner": null,
    "chapters": [
      {
        "id": 14688,
        "title": "Altersbeschränkung für Fahrgeschäfte",
        "type": "challengeLevel0",
        "lessons": [
          {
            "title": "Fair Ride Age Limit",
            "id": 129716,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Als Freiwilliger auf einem Festival verfolgst du die Installation der Fahrgeschäfte. Wir haben eine Klasse namens `Ride`, die den Namen des Fahrgeschäfts und die geeignete Altersgruppe speichert. Verwende Instanzen dieser Klasse, um die heute installierten Fahrgeschäfte zu verfolgen.\n\n1. Erstelle eine neue Instanz der `Ride`-Klasse namens `roller_coaster` und gib an, dass ihr Name `Roller coaster` ist und es sich um ein `adults`-Fahrgeschäft handelt.\n2. Erstelle eine neue Instanz der `Ride`-Klasse namens `ferris_wheel` und gib an, dass ihr Name `Ferris wheel` ist und es sich um ein `kids`-Fahrgeschäft handelt.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "class Ride:\r\n    def __init__(self, name, age_group):\r\n        self.name = name\r\n        self.age_group = age_group\r\n\r\n\r\nprint(roller_coaster.age_group)\r\nprint(ferris_wheel.name)",
                  "solvedContent": "class Ride:\r\n    def __init__(self, name, age_group):\r\n        self.name = name\r\n        self.age_group = age_group\r\nroller_coaster = Ride(\"Roller coaster\", \"adults\")\r\nferris_wheel = Ride(\"Ferris wheel\", \"kids\")\r\nprint(roller_coaster.age_group)\r\nprint(ferris_wheel.name)"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 14689,
        "title": "Getränkekarte des Cafés",
        "type": "challengeLevel0",
        "lessons": [
          {
            "title": "Cafe Drink Menu",
            "id": 129717,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Es gibt ein Café in der Nähe, das jeden Tag eine neue Auswahl an Getränken anbietet. Wir haben eine `Beverage`-Klasse und zwei Instanzen: `fruity` und `cocoa`. Finde heraus, was in den heutigen Getränken ist.\n\n1. Greife auf die `name`-Eigenschaft des `fruity`-Getränks zu und gib sie auf der Konsole aus.\n2. Greife auf die `is_alcoholic`-Eigenschaft des `cocoa`-Getränks zu und gib sie auf der Konsole aus.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "class Beverage:\r\n    def __init__(self, name, is_alcoholic):\r\n        self.name = name\r\n        self.is_alcoholic = is_alcoholic\r\n\r\nfruity = Beverage(\"Fruit punch\", False)\r\ncocoa = Beverage(\"Hot chocolate\", False)",
                  "solvedContent": "class Beverage:\r\n    def __init__(self, name, is_alcoholic):\r\n        self.name = name\r\n        self.is_alcoholic = is_alcoholic\r\n\r\nfruity = Beverage(\"Fruit punch\", False)\r\ncocoa = Beverage(\"Hot chocolate\", False)\r\nprint(fruity.name)\r\nprint(cocoa.is_alcoholic)"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 14690,
        "title": "Haustierdetails",
        "type": "challengeLevel0",
        "lessons": [
          {
            "title": "Pet Details",
            "id": 129718,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Du bist ein Tierliebhaber und hast verschiedene Haustiere zu Hause. Dein Geschwister besucht dich und kann sich nicht an die Namen deiner Haustiere erinnern. Vervollständige die `Pet`-Klasse, um deinem Geschwister zu helfen, den Namen eines Haustiers mit seinen Eigenschaften wie Familie oder Farbe zu verknüpfen.\n\n1. Erstelle innerhalb der `Pet`-Klasse Instanzvariablen `name`, `family`, `animal_type` und `color`, um die spezifischen Informationen zu speichern, die in den Parametern empfangen werden.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "class Pet:\r\n    def __init__(self, name, family, animal_type, color):\r\n        \r\n        \r\nrio = Pet(\"Rio\", \"Macaw\", \"Parrot\", \"Blue\")\r\ncoco = Pet(\"Coco\", \"Poodle\", \"Dog\", \"White\")\r\nbud = Pet(\"Bud\", \"Labrador\", \"Dog\", \"Brown\")\r\ndaisy = Pet(\"Daisy\", \"Burmese\", \"Cat\", \"Grey\")\r\nprint(f\"{rio.name} is a {rio.color} colored {rio.family} {rio.animal_type}\")",
                  "solvedContent": "class Pet:\r\n    def __init__(self, name, family, animal_type, color):\r\n        self.name = name\r\n        self.family = family\r\n        self.animal_type = animal_type\r\n        self.color = color\r\n\r\nrio = Pet(\"Rio\", \"Macaw\", \"Parrot\", \"Blue\")\r\ncoco = Pet(\"Coco\", \"Poodle\", \"Dog\", \"White\")\r\nbud = Pet(\"Bud\", \"Labrador\", \"Dog\", \"Brown\")\r\ndaisy = Pet(\"Daisy\", \"Burmese\", \"Cat\", \"Grey\")\r\nprint(f\"{rio.name} is a {rio.color} colored {rio.family} {rio.animal_type}\")"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 14692,
        "title": "Aufzuginstruktionen",
        "type": "challengeLevel0",
        "lessons": [
          {
            "title": "Elevator Instructions",
            "id": 129720,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Dieser Aufzug teilt den Menschen mit, dass er sich bewegt, aber in Wirklichkeit bleibt er immer auf derselben Etage.\n\n1. Aktualisiere die Eigenschaft `current_floor`, damit sich der Aufzug bewegt, wann immer er dazu aufgefordert wird.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "class Elevator:\r\n    def __init__(self):\r\n        self.current_floor = 0\r\n\r\n    def go_to_floor(self, floor):\r\n        if self.current_floor == floor:\r\n            print(f\"Elevator is in floor {floor}\")\r\n        else:\r\n            print(f\"Going to floor {floor}\")\r\n\r\nelevator = Elevator()\r\nelevator.go_to_floor(3)\r\nelevator.go_to_floor(3)",
                  "solvedContent": "class Elevator:\r\n    def __init__(self):\r\n        self.current_floor = 0\r\n\r\n    def go_to_floor(self, floor):\r\n        if self.current_floor == floor:\r\n            print(f\"Elevator is in floor {floor}\")\r\n        else:\r\n            print(f\"Going to floor {floor}\")\r\n            self.current_floor = floor\r\n\r\nelevator = Elevator()\r\nelevator.go_to_floor(3)\r\nelevator.go_to_floor(3)"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 14693,
        "title": "Kaffeemaschine",
        "type": "challengeLevel0",
        "lessons": [
          {
            "title": "Coffee Machine",
            "id": 129721,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Kaffeemaschinen können nur eine begrenzte Anzahl von Kaffeesorten zubereiten.\n\n1. Überprüfe, ob der `coffee_type` für unsere Maschine gültig ist, und speichere das Ergebnis in der Variable `is_valid_coffee_type`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "class CoffeeMachine:\r\n    def __init__(self):\r\n        self.coffee_options = {\"Capuccino\", \"Espresso\"}\r\n        \r\n    def make_coffee(self, coffee_type):\r\n        is_valid_coffee_type = \r\n        if is_valid_coffee_type:\r\n            return f\"{coffee_type} made!\"\r\n        else:\r\n            return f\"{coffee_type} is not a valid option!\"\r\n\r\nmachine = CoffeeMachine()\r\nprint(machine.make_coffee(\"Espresso\"))\r\nprint(machine.make_coffee(\"Moka\"))",
                  "solvedContent": "class CoffeeMachine:\r\n    def __init__(self):\r\n        self.coffee_options = {\"Capuccino\", \"Espresso\"}\r\n        \r\n    def make_coffee(self, coffee_type):\r\n        is_valid_coffee_type = coffee_type in self.coffee_options\r\n        if is_valid_coffee_type:\r\n            return f\"{coffee_type} made!\"\r\n        else:\r\n            return f\"{coffee_type} is not a valid option!\"\r\n\r\nmachine = CoffeeMachine()\r\nprint(machine.make_coffee(\"Espresso\"))\r\nprint(machine.make_coffee(\"Moka\"))"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 14694,
        "title": "Burgen",
        "type": "challengeLevel0",
        "lessons": [
          {
            "title": "Castles",
            "id": 129722,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Burgen können aus verschiedenen Materialien gebaut werden, hilf uns, die Klasse `WoodCastle` zu beschreiben.\n\n1. Erstelle die passende Methode, um `WoodCastle` zu beschreiben.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "class Castle:\r\n    def description(self):\r\n        return \"This is a generic castle.\"\r\n\r\nclass StoneCastle(Castle):\r\n    def description(self):\r\n        return \"This is a stone castle.\"\r\n\r\nclass WoodCastle(Castle):\r\n\r\nstone_castle = StoneCastle()\r\nstone_castle_description = stone_castle.description()\r\nprint(stone_castle_description)\r\n\r\nwood_castle = WoodCastle()\r\nwood_castle_description = wood_castle.description()\r\nprint(wood_castle_description)\r\n",
                  "solvedContent": "class Castle:\r\n    def description(self):\r\n        return \"This is a generic castle.\"\r\n\r\nclass StoneCastle(Castle):\r\n    def description(self):\r\n        return \"This is a stone castle.\"\r\n\r\nclass WoodCastle(Castle):\r\n    def description(self):\r\n        return \"This is a wood castle\"\r\n\r\nstone_castle = StoneCastle()\r\nstone_castle_description = stone_castle.description()\r\nprint(stone_castle_description)\r\n\r\nwood_castle = WoodCastle()\r\nwood_castle_description = wood_castle.description()\r\nprint(wood_castle_description)\r\n"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 13903,
        "title": "Eine Methode erstellen",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "Creating a method",
            "id": 123716,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Du liebst es zu reisen und erkundest jedes Jahr neue Ziele. Um organisiert zu bleiben, hast du eine `Destination`-Klasse erstellt, die die Reisedetails für jeden Ort, den du besuchst, verfolgt.\n\n1. Erstelle eine `detail`-Methode in der `Destination`-Klasse, die alle ihre Eigenschaften verwendet, um die Reisedetails im folgenden Format zurückzugeben:\n```\nTraveling to <country> by <mode> for 15 <number_of_days>\n```",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "class Destination:\r\n    def __init__(self, country, mode, number_of_days):\r\n        self.country = country\r\n        self.mode = mode\r\n        self.number_of_days = number_of_days\r\n        \r\n    \r\n        \r\ndestination_one = Destination(\"Italy\", \"plane\", 10)\r\ndestination_two = Destination(\"England\", \"plane\", 5)",
                  "solvedContent": "class Destination:\r\n    def __init__(self, country, mode, number_of_days):\r\n        self.country = country\r\n        self.mode = mode\r\n        self.number_of_days = number_of_days\r\n        \r\n    def detail(self):\r\n        return f\"Traveling to {self.country} by {self.mode} for {self.number_of_days} days\"\r\n\r\ndestination_one = Destination(\"Italy\", \"plane\", 10)\r\ndestination_two = Destination(\"England\", \"plane\", 5)"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 13904,
        "title": "Erstellen mehrerer Methoden",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "Creating multiple methods",
            "id": 123717,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Du führst einen jährlichen Workshop für Studenten durch. Ihre Daten werden in einer Klasseninstanz gespeichert, wobei die Eigenschaft `is_registered` zunächst auf `False` gesetzt ist. Erstelle zwei Methoden in der `Register`-Klasse, um es den Studenten zu ermöglichen, Registrierungen nach Bedarf vorzunehmen und zu stornieren.\n\n1. Erstelle eine `register_student` Klassenmethode, die die Eigenschaft `is_registered` auf `True` setzt und `<name> is registered!` zurückgibt.\n2. Erstelle eine `cancel_registration` Klassenmethode, die die Eigenschaft `is_registered` auf `False` setzt und einen Text im folgenden Format zurückgibt:\n ```\n<name>'s registration canceled!\n```",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "class Register:\r\n def __init__(self, name, is_registered):\r\n  self.name = name\r\n  self.is_registered = is_registered\r\n\r\n\r\n\r\n\r\n\r\n\r\ntooba = Register(\"Tooba\", False)\r\nprint(tooba.register_student())\r\nprint(tooba.cancel_registration())",
                  "solvedContent": "class Register:\r\n def __init__(self, name, is_registered):\r\n  self.name = name\r\n  self.is_registered = is_registered\r\n     \r\n def register_student(self):\r\n  self.is_registered = True\r\n  return f\"{self.name} is registered!\"\r\n     \r\n def cancel_registration(self):\r\n  self.is_registered = False\r\n  return f\"{self.name}'s registration canceled!\"\r\ntooba = Register(\"Tooba\", False)\r\nprint(tooba.register_student())\r\nprint(tooba.cancel_registration())"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 13966,
        "title": "Klassen und Methoden",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "Classes and methods",
            "id": 124062,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Es gibt viele Arten von Booten. Jede Art hat eine andere Art, sich auf das Segeln vorzubereiten, aber alle Boote haben eines gemeinsam. Der Kapitän ist der Erste, der sich auf das Segeln vorbereitet.\n\n1. Fülle die Klasse `Sailboat`, die die Anzahl der Segel speichert, die das Boot hat, und erstelle die passende Methode, damit das Segelboot sich auf das Segeln vorbereiten kann! Denke daran, dass die Vorbereitung jedes Bootes auf das Segeln auf die gleiche Weise beginnt! Du könntest die Klasse `Rowboat` als Orientierung für die Herausforderung verwenden.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "class Boat:\r\n    def __init__(self, captain):\r\n        self.captain = captain\r\n\r\n    def prepare_to_sail(self):\r\n        print(f\"Captain {self.captain} is preparing to sail!\")\r\n\r\nclass Rowboat(Boat):\r\n    def __init__(self, captain, row_amount):\r\n        self.captain = captain\r\n        self.row_amount = row_amount\r\n\r\n    def prepare_to_sail(self):\r\n        super().prepare_to_sail()\r\n        print(f\"Preparing {self.row_amount} rows!\")\r\n\r\nclass Sailboat(Boat):\r\n\r\nrowboat = Rowboat(captain=\"Hook\", row_amount=4)\r\nrowboat.prepare_to_sail()\r\n\r\nsailboat = Sailboat(captain=\"Jack Sparrow\", sail_amount=5)\r\nsailboat.prepare_to_sail()",
                  "solvedContent": "class Boat:\r\n    def __init__(self, captain):\r\n        self.captain = captain\r\n\r\n    def prepare_to_sail(self):\r\n        print(f\"Captain {self.captain} is preparing to sail!\")\r\n\r\nclass Rowboat(Boat):\r\n    def __init__(self, captain, row_amount):\r\n        self.captain = captain\r\n        self.row_amount = row_amount\r\n\r\n    def prepare_to_sail(self):\r\n        super().prepare_to_sail()\r\n        print(f\"Preparing {self.row_amount} rows!\")\r\n\r\nclass Sailboat(Boat):\r\n    def __init__(self, captain, sail_amount):\r\n        self.captain = captain\r\n        self.sail_amount = sail_amount\r\n    \r\n    def prepare_to_sail(self):\r\n        super().prepare_to_sail()\r\n        print(f\"Preparing {self.sail_amount} sails!\")\r\n\r\nrowboat = Rowboat(captain=\"Hook\", row_amount=4)\r\nrowboat.prepare_to_sail()\r\n\r\nsailboat = Sailboat(captain=\"Jack Sparrow\", sail_amount=5)\r\nsailboat.prepare_to_sail()"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 13965,
        "title": "Verwendung von self",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "Using self",
            "id": 124131,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Eine Band ist eine fesselnde Synergie musikalischer Köpfe, mit talentierten Individuen, die verschiedene Instrumente beherrschen und Harmonien schaffen, die unsere Seelen entfachen.\n\n1. Fülle die Methoden `add_musician`, die einen Musiker zur Band hinzufügt, und `perform`, die alle wissen lässt, dass die Band mit der Aufführung beginnt. Denke daran, dass für den Beginn einer Aufführung jeder Musiker, der zur Band gehört, sein entsprechendes Instrument spielen muss!",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "class Musician:\r\n    def __init__(self, name, instrument):\r\n        self.name = name\r\n        self.instrument = instrument\r\n\r\n    def play_instrument(self):\r\n        print(f\"{self.name} is playing the {self.instrument}.\")\r\n\r\nclass Band:\r\n    def __init__(self, name):\r\n        self.name = name\r\n        self.musicians = []\r\n\r\n    def add_musician(self, musician):\r\n\r\n    def perform(self):\r\n        print(f\"{self.name} is starting the performance!\")\r\n\r\nguitarist = Musician(\"John\", \"guitar\")\r\ndrummer = Musician(\"Sarah\", \"drums\")\r\n\r\nband = Band(\"Baangtron\")\r\nband.add_musician(guitarist)\r\nband.add_musician(drummer)\r\n\r\nband.perform()",
                  "solvedContent": "class Musician:\r\n    def __init__(self, name, instrument):\r\n        self.name = name\r\n        self.instrument = instrument\r\n\r\n    def play_instrument(self):\r\n        print(f\"{self.name} is playing the {self.instrument}.\")\r\n\r\nclass Band:\r\n    def __init__(self, name):\r\n        self.name = name\r\n        self.musicians = []\r\n\r\n    def add_musician(self, musician):\r\n        self.musicians.append(musician)\r\n\r\n    def perform(self):\r\n        print(f\"{self.name} is starting the performance!\")\r\n        for musician in self.musicians:\r\n            musician.play_instrument()\r\n\r\nguitarist = Musician(\"John\", \"guitar\")\r\ndrummer = Musician(\"Sarah\", \"drums\")\r\n\r\nband = Band(\"Baangtron\")\r\nband.add_musician(guitarist)\r\nband.add_musician(drummer)\r\n\r\nband.perform()"
                }
              ],
              "hints": []
            }
          }
        ]
      }
    ]
  }
}