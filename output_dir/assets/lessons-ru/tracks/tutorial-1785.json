{
  "tutorial": {
    "id": 1785,
    "version": 9,
    "type": "guidedProjectOptional",
    "isNew": false,
    "codeLanguage": "javascript",
    "title": "Дисплей смартфона",
    "descriptionContent": "Используй свои знания о классах и подклассах, чтобы добавить функцию контакта для игры",
    "shortDescriptionContent": "",
    "showInTrack": true,
    "iconBanner": "tutorial-1785-icon-banner.svg",
    "chapters": [
      {
        "id": 11784,
        "title": "Дисплей смартфона",
        "type": "practiceLevel3",
        "lessons": [
          {
            "title": "Create a class",
            "id": 108505,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Алекс разрабатывает симулятор жизни и хочет ввести функцию телефонной связи. Мы поможем ей, введя виртуальное телефонное устройство и смартфон, чтобы персонажи могли общаться на расстоянии.\n\nДавайте начнем с создания класса телефона для функции телефонной связи в игре.\n\n1. Соберите класс под названием `Phone`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "",
                  "solvedContent": "class Phone {}"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Add method to a class",
            "id": 108506,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Теперь давай создадим метод, чтобы мы могли совершать звонки, используя наш `Phone`.\n\n1. Создай метод `call()` в классе `Phone` из предыдущего упражнения.\n2. Дай ему параметр с именем `user`.\n2. Внутри метода `call()` добавь строку, которая отображает `user`, которому мы звоним. Результирующее отображение может выглядеть так для пользователя `Mom`:\n\n```\nCalling: Mom\n```",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "class Phone {}",
                  "solvedContent": "class Phone {\n  call(user) {\n    console.log(\"Calling: \" + user);\n  }\n}"
                }
              ],
              "hints": [
                {
                  "title": "Hint",
                  "content": "1. The syntax for creating a method is:\n\n```JS\nmethodName(parameter) {\n}\n```"
                }
              ]
            }
          },
          {
            "title": "Smartphone",
            "id": 108513,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Ключевое слово `extends` используется для создания класса, который является дочерним или прямым подмножеством другого класса.\n\nСмартфоны могут делать все, что делают телефоны, поэтому можно считать, что смартфоны являются подмножеством телефона.\n\nДавайте создадим класс `Smartphone`.\n\n1. Создай класс `Smartphone`, который расширяет `Phone`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "class Phone {\n  call(user) {\n    console.log(\"Calling: \" + user);\n  }\n}",
                  "solvedContent": "class Phone {\n  call(user) {\n    console.log(\"Calling: \" + user);\n  }\n}\nclass Smartphone extends Phone {}"
                }
              ],
              "hints": [
                {
                  "title": "Hint",
                  "content": "1. The syntax for creating an extended class is:\n```JS\nclass className extends extendedClass {\n}\n```"
                }
              ]
            }
          },
          {
            "title": "Video call",
            "id": 108514,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Класс `Smartphone` автоматически наследует методы, связанные с `Phone`.\n\nТем не менее, ты все еще можешь создавать дополнительные методы в подмножестве класса, например, для совершения видеозвонков.\n\n1. Создай метод `videoCall` для совершения видеозвонков.\n2. Дай ему параметр `user`.\n2. Добавь строку, которая отображает имя пользователя, которому персонаж совершает видеозвонок. Итоговое отображение может выглядеть так для пользователя `Mom`:\n\n```\nFacetiming: Mom\n```",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "class Phone {\n  call(user) {\n    console.log(\"Calling: \" + user);\n  }\n}\nclass Smartphone extends Phone {}",
                  "solvedContent": "class Phone {\n  call(user) {\n    console.log(\"Calling: \" + user);\n  }\n}\nclass Smartphone extends Phone {\n  videoCall(user) {\n    console.log(\"Facetiming: \" + user);\n  }\n}"
                }
              ],
              "hints": [
                {
                  "title": "Hint",
                  "content": "1. The syntax for creating a method is:\n```JS\nmethodName(parameter) {\n}\n```"
                }
              ]
            }
          },
          {
            "title": "New device",
            "id": 108516,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Брэндон — новый персонаж в нашей игре. Давайте оснастим его смартфоном.\n\n1. Создай новый объект из класса `Smartphone` и сохрани его в переменной с именем `device`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "class Phone {\n  call(user) {\n    console.log(\"Calling: \" + user);\n  }\n}\nclass Smartphone extends Phone {\n  videoCall(user) {\n    console.log(\"Facetiming: \" + user);\n  }\n}",
                  "solvedContent": "class Phone {\n  call(user) {\n    console.log(\"Calling: \" + user);\n  }\n}\nclass Smartphone extends Phone {\n  videoCall(user) {\n    console.log(\"Facetiming: \" + user);\n  }\n}\nconst device = new Smartphone();"
                }
              ],
              "hints": [
                {
                  "title": "Hint",
                  "content": "1. The syntax for creating an instance of a class is:\n```JS\nconst variableName = new className();\n```"
                }
              ]
            }
          },
          {
            "title": "Inherited method",
            "id": 108517,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Брэндону нужно позвонить своей маме.\n\n1. Используй метод, который `device` унаследовал от класса `Phone`, чтобы дозвониться до `\"Mom\"`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "class Phone {\n  call(user) {\n    console.log(\"Calling: \" + user);\n  }\n}\nclass Smartphone extends Phone {\n  videoCall(user) {\n    console.log(\"Facetiming: \" + user);\n  }\n}\nconst device = new Smartphone();",
                  "solvedContent": "class Phone {\n  call(user) {\n    console.log(\"Calling: \" + user);\n  }\n}\nclass Smartphone extends Phone {\n  videoCall(user) {\n    console.log(\"Facetiming: \" + user);\n  }\n}\nconst device = new Smartphone();\ndevice.call(\"Mom\");"
                }
              ],
              "hints": [
                {
                  "title": "Hint",
                  "content": "The inherited method is `call()`."
                }
              ]
            }
          },
          {
            "title": "Specific method",
            "id": 108518,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Брэндон и его мама давно не виделись, поэтому они решили переключиться на видеозвонок. Однако телефон его мамы разряжается, поэтому она сказала Брэндону позвонить по видеосвязи его папе.\n\n1. Используй метод `videoCall()` из переменной `device` с аргументом `\"Dad\"`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "class Phone {\n  call(user) {\n    console.log(\"Calling: \" + user);\n  }\n}\nclass Smartphone extends Phone {\n  videoCall(user) {\n    console.log(\"Facetiming: \" + user);\n  }\n}\nconst device = new Smartphone();\ndevice.call(\"Mom\");",
                  "solvedContent": "class Phone {\n  call(user) {\n    console.log(\"Calling: \" + user);\n  }\n}\nclass Smartphone extends Phone {\n  videoCall(user) {\n    console.log(\"Facetiming: \" + user);\n  }\n}\nconst device = new Smartphone();\ndevice.call(\"Mom\");\ndevice.videoCall(\"Dad\");"
                }
              ],
              "hints": []
            }
          }
        ]
      }
    ]
  }
}