{
  "tutorial": {
    "id": 2663,
    "version": 5,
    "type": "guidedProject",
    "isNew": false,
    "codeLanguage": "python",
    "title": "Система заказа еды - Часть 1",
    "descriptionContent": "Отправься в кулинарное путешествие: система заказа итальянской еды. Погрузись в восхитительный мир пиццы и пасты, создавая службу доставки.",
    "shortDescriptionContent": "",
    "showInTrack": true,
    "iconBanner": "tutorial-2663-icon-banner.svg",
    "chapters": [
      {
        "id": 14638,
        "title": "Глава №1",
        "type": "practiceLevel3",
        "lessons": [
          {
            "title": "Lesson #1",
            "id": 129468,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Добро пожаловать в проект **Система Заказа Еды**. Мы создадим систему для заказа твоей любимой еды. Давай начнем проект с создания списка традиционных итальянских блюд, которые мы хотим включить в наше меню.\n\n1. Создай список с именем `italian_food`. В этом списке включи четыре строковых значения блюд, таких как `\"Pasta Bolognese\"`, `\"Pepperoni pizza\"`, `\"Margherita pizza\"` и `\"Lasagna\"`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "",
                  "solvedContent": "italian_food = [\n  \"Pasta Bolognese\",\n  \"Pepperoni pizza\",\n  \"Margherita pizza\",\n  \"Lasagna\"\n]"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Lesson #2",
            "id": 129469,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Далее создайте функцию, чтобы проверить, готово ли блюдо к заказу.\n\n1. Определите функцию с именем `find_meal`, которая принимает два параметра: `name` и `menu`.\n2. В функции верните имя, если вы можете найти его в переданном меню (которое должно представлять список, как определено выше).\n3. Если блюдо (переданное в качестве первого параметра) не найдено в меню (переданном в качестве второго параметра), верните `None`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "italian_food = [\n  \"Pasta Bolognese\",\n  \"Pepperoni pizza\",\n  \"Margherita pizza\",\n  \"Lasagna\"\n]",
                  "solvedContent": "italian_food = [\n  \"Pasta Bolognese\",\n  \"Pepperoni pizza\",\n  \"Margherita pizza\",\n  \"Lasagna\"\n]\n\ndef find_meal(name, menu):\n  return name if name in menu else None"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Lesson #3",
            "id": 129470,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "После успешного определения функции поиска, пришло время адаптировать её к нашему случаю.\n\n1. Создай функцию `select_meal` с параметром `name`.\n2. Внутри функции `select_meal` вызови функцию `find_meal` и передай имя вместе с предопределённым списком `italian_food` в функцию `find_meal`.\n3. Функция `select_meal` должна затем вернуть то, что она получает от функции `find_meal`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "italian_food = [\n  \"Pasta Bolognese\",\n  \"Pepperoni pizza\",\n  \"Margherita pizza\",\n  \"Lasagna\"\n]\n\ndef find_meal(name, menu):\n  return name if name in menu else None",
                  "solvedContent": "italian_food = [\n  \"Pasta Bolognese\",\n  \"Pepperoni pizza\",\n  \"Margherita pizza\",\n  \"Lasagna\"\n]\n\ndef find_meal(name, menu):\n  return name if name in menu else None\n\ndef select_meal(name):\n  return find_meal(name, italian_food)"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Lesson #4",
            "id": 129471,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Теперь создайте другую функцию для отображения меню клиентам.\n\n1. Определите функцию с именем `display_available_meals`.\n2. Внутри функции используйте функцию `print`, чтобы вывести `Available Italian Meals:`.\n3. Используйте цикл для перебора списка `italian_food` и вывода каждого блюда.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "italian_food = [\n  \"Pasta Bolognese\",\n  \"Pepperoni pizza\",\n  \"Margherita pizza\",\n  \"Lasagna\"\n]\n\ndef find_meal(name, menu):\n  return name if name in menu else None\n\ndef select_meal(name):\n  return find_meal(name, italian_food)",
                  "solvedContent": "italian_food = [\n  \"Pasta Bolognese\",\n  \"Pepperoni pizza\",\n  \"Margherita pizza\",\n  \"Lasagna\"\n]\n\ndef find_meal(name, menu):\n  return name if name in menu else None\n\ndef select_meal(name):\n  return find_meal(name, italian_food)\n\ndef display_available_meals():\n  print(\"Available Italian Meals:\")\n  for meal in italian_food:\n    print(meal)"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Lesson #5",
            "id": 129472,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Создайте функцию для составления резюме вашего заказа на еду или уведомления, если это блюдо не найдено в нашем меню.\n\n1. Определите функцию с именем `create_summary`. Функция должна принимать два аргумента: `name` и `amount`.\n2. Внутри функции создайте переменную с именем `order` и присвойте ей результат вызова `select_meal` с параметром `name`.\n3. Добавьте условный оператор, который проверяет, была ли найдена еда.\n   - Верните отформатированную строку, указывающую количество и название блюда, если `order` найден.\n   - Если `order` равен `None`, верните `Meal not found`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "italian_food = [\n  \"Pasta Bolognese\",\n  \"Pepperoni pizza\",\n  \"Margherita pizza\",\n  \"Lasagna\"\n]\n\ndef find_meal(name, menu):\n  return name if name in menu else None\n\ndef select_meal(name):\n  return find_meal(name, italian_food)\n\ndef display_available_meals():\n  print(\"Available Italian Meals:\")\n  for meal in italian_food:\n    print(meal)",
                  "solvedContent": "italian_food = [\n  \"Pasta Bolognese\",\n  \"Pepperoni pizza\",\n  \"Margherita pizza\",\n  \"Lasagna\"\n]\n\ndef find_meal(name, menu):\n  return name if name in menu else None\n\ndef select_meal(name):\n  return find_meal(name, italian_food)\n\ndef display_available_meals():\n  print(\"Available Italian Meals:\")\n  for meal in italian_food:\n    print(meal)\n\ndef create_summary(name, amount):\n  order = select_meal(name)\n  if order:\n    return f\"You ordered {amount} {name}\"\n  else:\n    return \"Meal not found\""
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Lesson #6",
            "id": 129473,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Время взаимодействовать с виртуальным клиентом и позволить ему сделать заказ.\n\n1. В самом конце вашего кода выведите приветственное сообщение `Welcome to the Food Order System!`.\n2. Затем вызовите функцию `display_available_meals`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "italian_food = [\n  \"Pasta Bolognese\",\n  \"Pepperoni pizza\",\n  \"Margherita pizza\",\n  \"Lasagna\"\n]\n\ndef find_meal(name, menu):\n  return name if name in menu else None\n\ndef select_meal(name):\n  return find_meal(name, italian_food)\n\ndef display_available_meals():\n  print(\"Available Italian Meals:\")\n  for meal in italian_food:\n    print(meal)\n\ndef create_summary(name, amount):\n  order = select_meal(name)\n  if order:\n    return f\"You ordered {amount} {name}\"\n  else:\n    return \"Meal not found\"",
                  "solvedContent": "italian_food = [\n  \"Pasta Bolognese\",\n  \"Pepperoni pizza\",\n  \"Margherita pizza\",\n  \"Lasagna\"\n]\n\ndef find_meal(name, menu):\n  return name if name in menu else None\n\ndef select_meal(name):\n  return find_meal(name, italian_food)\n\ndef display_available_meals():\n  print(\"Available Italian Meals:\")\n  for meal in italian_food:\n    print(meal)\n\ndef create_summary(name, amount):\n  order = select_meal(name)\n  if order:\n    return f\"You ordered {amount} {name}\"\n  else:\n    return \"Meal not found\"\n\nprint(\"Welcome to the Food Order System!\")\ndisplay_available_meals()"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Lesson #7",
            "id": 129474,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Далее: получение заказа от клиента.\n\n1. В конце вашего кода добавьте две функции `input`.\n   - Первая должна получить выбор блюда и быть сохранена в переменной с именем `name_input`.\n   - Вторая должна запросить количество заказа и сохранить его в переменной с именем `amount_input`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "italian_food = [\n  \"Pasta Bolognese\",\n  \"Pepperoni pizza\",\n  \"Margherita pizza\",\n  \"Lasagna\"\n]\n\ndef find_meal(name, menu):\n  return name if name in menu else None\n\ndef select_meal(name):\n  return find_meal(name, italian_food)\n\ndef display_available_meals():\n  print(\"Available Italian Meals:\")\n  for meal in italian_food:\n    print(meal)\n\ndef create_summary(name, amount):\n  order = select_meal(name)\n  if order:\n    return f\"You ordered {amount} {name}\"\n  else:\n    return \"Meal not found\"\n\nprint(\"Welcome to the Food Order System!\")\ndisplay_available_meals()",
                  "solvedContent": "italian_food = [\n  \"Pasta Bolognese\",\n  \"Pepperoni pizza\",\n  \"Margherita pizza\",\n  \"Lasagna\"\n]\n\ndef find_meal(name, menu):\n  return name if name in menu else None\n\ndef select_meal(name):\n  return find_meal(name, italian_food)\n\ndef display_available_meals():\n  print(\"Available Italian Meals:\")\n  for meal in italian_food:\n    print(meal)\n\ndef create_summary(name, amount):\n  order = select_meal(name)\n  if order:\n    return f\"You ordered {amount} {name}\"\n  else:\n    return \"Meal not found\"\n\nprint(\"Welcome to the Food Order System!\")\ndisplay_available_meals()\nname_input = input(\"Enter the name of the meal you want to order: \")\namount_input = int(input(\"Enter the quantity you want to order: \"))"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Lesson #8",
            "id": 129475,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Отобразите сводку заказа или сообщите клиенту, что выбранное блюдо отсутствует в меню.\n\n1. Теперь вызовите функцию `create_summary` и передайте аргументы `name_input` и `amount_input`. Создайте переменную `result`, которая будет хранить возвращаемое значение вызова функции.\n2. Затем выведите значение `result`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "italian_food = [\n  \"Pasta Bolognese\",\n  \"Pepperoni pizza\",\n  \"Margherita pizza\",\n  \"Lasagna\"\n]\n\ndef find_meal(name, menu):\n  return name if name in menu else None\n\ndef select_meal(name):\n  return find_meal(name, italian_food)\n\ndef display_available_meals():\n  print(\"Available Italian Meals:\")\n  for meal in italian_food:\n    print(meal)\n\ndef create_summary(name, amount):\n  order = select_meal(name)\n  if order:\n    return f\"You ordered {amount} {name}\"\n  else:\n    return \"Meal not found\"\n\nprint(\"Welcome to the Food Order System!\")\ndisplay_available_meals()\nname_input = input(\"Enter the name of the meal you want to order: \")\namount_input = int(input(\"Enter the quantity you want to order: \"))",
                  "solvedContent": "italian_food = [\n  \"Pasta Bolognese\",\n  \"Pepperoni pizza\",\n  \"Margherita pizza\",\n  \"Lasagna\"\n]\n\ndef find_meal(name, menu):\n  return name if name in menu else None\n\ndef select_meal(name):\n  return find_meal(name, italian_food)\n\ndef display_available_meals():\n  print(\"Available Italian Meals:\")\n  for meal in italian_food:\n    print(meal)\n\ndef create_summary(name, amount):\n  order = select_meal(name)\n  if order:\n    return f\"You ordered {amount} {name}\"\n  else:\n    return \"Meal not found\"\n\nprint(\"Welcome to the Food Order System!\")\ndisplay_available_meals()\nname_input = input(\"Enter the name of the meal you want to order: \")\namount_input = int(input(\"Enter the quantity you want to order: \"))\n\nresult = create_summary(name_input, amount_input)\nprint(result)"
                }
              ],
              "hints": []
            }
          }
        ]
      }
    ]
  }
}