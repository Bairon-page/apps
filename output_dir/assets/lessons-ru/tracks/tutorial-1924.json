{
  "tutorial": {
    "id": 1924,
    "version": 15,
    "type": "guidedProjectOptional",
    "isNew": false,
    "codeLanguage": "javascript",
    "title": "Заказы в ресторане",
    "descriptionContent": "Используй свои знания Javascript, чтобы создать программу, которая делает заказы в рестораны.",
    "shortDescriptionContent": "",
    "showInTrack": true,
    "iconBanner": "tutorial-1924-icon-banner.svg",
    "chapters": [
      {
        "id": 12511,
        "title": "Заказы в ресторане",
        "type": "practiceLevel3",
        "lessons": [
          {
            "title": "Starter Code ",
            "id": 113174,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Давайте используем наши знания о условных операторах и циклах, чтобы создать функции, которые будут выполнять действия для клиента, желающего заказать еду из ресторана.\n\nНачнем с того, что посмотрим на наш стартовый код, чтобы понять, к чему мы будем стремиться.\n\nУ нас есть три списка меню, каждый из которых представляет собой список с доступными блюдами. Каждое блюдо — это объект, который имеет свойства `mealName`, `quantity` и `price`.\n\nУ нас также есть три пустые функции: `findMeal`, `selectMeal` и `createSummary`.\n\nИспользуя свои знания Javascript, вы определите каждую функцию так, чтобы они могли выполнять свои соответствующие задачи.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const italianFood = [{\n  mealName: \"Pasta Bolognese\",\n  quantity: 3,\n  price: 7\n}, {\n  mealName: \"Pepperoni pizza\",\n  quantity: 2,\n  price: 10\n}];\nconst thaiFood = [{\n  mealName: \"Pad Thai\",\n  quantity: 1,\n  price: 8\n}];\nconst indianFood = [{\n  mealName: \"Chapati\",\n  quantity: 8,\n  price: 7\n}, {\n  mealName: \"Chicken Massala\",\n  quantity: 5,\n  price: 9\n}, {\n  mealName: \"Tandoori Chicken\",\n  quantity: 5,\n  price: 9\n}];\n\nfunction findMeal(name, menu) {}\n\nfunction selectMeal(name, type) {}\n\nfunction createSummary(name, type, amount) {}",
                  "solvedContent": "const italianFood = [{\n  mealName: \"Pasta Bolognese\",\n  quantity: 3,\n  price: 7\n}, {\n  mealName: \"Pepperoni pizza\",\n  quantity: 2,\n  price: 10\n}];\nconst thaiFood = [{\n  mealName: \"Pad Thai\",\n  quantity: 1,\n  price: 8\n}];\nconst indianFood = [{\n  mealName: \"Chapati\",\n  quantity: 8,\n  price: 7\n}, {\n  mealName: \"Chicken Massala\",\n  quantity: 5,\n  price: 9\n}, {\n  mealName: \"Tandoori Chicken\",\n  quantity: 5,\n  price: 9\n}];\n\nfunction findMeal(name, menu) {}\n\nfunction selectMeal(name, type) {}\n\nfunction createSummary(name, type, amount) {}"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Define findMeal",
            "id": 113175,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Теперь, когда мы рассмотрели наш стартовый код, давайте начнем с создания функции `findMeal`, которая возвращает детали блюда из меню после ввода его названия.\n\n1. Начнем с создания цикла `for`, который будет перебирать массив `menu`, являющийся параметром функции `findMeal`.\n2. В теле цикла `for` добавьте условие, которое проверяет, равен ли `mealName` текущего элемента `menu` строке `name`. Это поможет нам проверить, есть ли в выбранном `menu` блюдо с таким `name`.\n3. Верните текущий элемент меню, если условие истинно. Это означает, что мы нашли это блюдо в меню.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const italianFood = [{\n  mealName: \"Pasta Bolognese\",\n  quantity: 3,\n  price: 7\n}, {\n  mealName: \"Pepperoni pizza\",\n  quantity: 2,\n  price: 10\n}];\nconst thaiFood = [{\n  mealName: \"Pad Thai\",\n  quantity: 1,\n  price: 8\n}];\nconst indianFood = [{\n  mealName: \"Chapati\",\n  quantity: 8,\n  price: 7\n}, {\n  mealName: \"Chicken Massala\",\n  quantity: 5,\n  price: 9\n}, {\n  mealName: \"Tandoori Chicken\",\n  quantity: 5,\n  price: 9\n}];\n\nfunction findMeal(name, menu) {}\n\nfunction selectMeal(name, type) {}\n\nfunction createSummary(name, type, amount) {}",
                  "solvedContent": "const italianFood = [{\n  mealName: \"Pasta Bolognese\",\n  quantity: 3,\n  price: 7\n}, {\n  mealName: \"Pepperoni pizza\",\n  quantity: 2,\n  price: 10\n}];\nconst thaiFood = [{\n  mealName: \"Pad Thai\",\n  quantity: 1,\n  price: 8\n}];\nconst indianFood = [{\n  mealName: \"Chapati\",\n  quantity: 8,\n  price: 7\n}, {\n  mealName: \"Chicken Massala\",\n  quantity: 5,\n  price: 9\n}, {\n  mealName: \"Tandoori Chicken\",\n  quantity: 5,\n  price: 9\n}];\n\nfunction findMeal(name, menu) {\n  for (let i = 0; i < menu.length; i++) {\n    if (menu[i].mealName === name) {\n      return menu[i];\n    }\n  }\n}\n\nfunction selectMeal(name, type) {}\n\nfunction createSummary(name, type, amount) {}"
                }
              ],
              "hints": [
                {
                  "title": "Hint",
                  "content": "1. Make sure the `for` loop looks like `for(let i = 0; i < menu.length; i++){}`\n2. Use an `if` statement inside the `for` loop. Use `menu[i].mealName` to access the `mealName` property of the current menu item.\n3. Use a `return` keyword."
                }
              ]
            }
          },
          {
            "title": "Define selectMeal pt 1",
            "id": 113176,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Хорошая работа! Теперь давай начнем определять функцию `selectMeal`, которая будет извлекать информацию о блюде на основе его `name` и `type`.\n\n1. Добавь условие, где если `type` равен `\"italian\"`, возвращается `\"italian order\"`.\n2. Добавь другое условие, где если `type` равен `\"indian\"`, возвращается `\"indian order\"`.\n3. Добавь еще одно условие, где если `type` равен `\"thai\"`, возвращается `\"thai order\"`.\n4. Если все условия не выполняются, возвращается `\"not found\"`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const italianFood = [{\n  mealName: \"Pasta Bolognese\",\n  quantity: 3,\n  price: 7\n}, {\n  mealName: \"Pepperoni pizza\",\n  quantity: 2,\n  price: 10\n}];\nconst thaiFood = [{\n  mealName: \"Pad Thai\",\n  quantity: 1,\n  price: 8\n}];\nconst indianFood = [{\n  mealName: \"Chapati\",\n  quantity: 8,\n  price: 7\n}, {\n  mealName: \"Chicken Massala\",\n  quantity: 5,\n  price: 9\n}, {\n  mealName: \"Tandoori Chicken\",\n  quantity: 5,\n  price: 9\n}];\n\nfunction findMeal(name, menu) {\n  for (let i = 0; i < menu.length; i++) {\n    if (menu[i].mealName === name) {\n      return menu[i];\n    }\n  }\n}\n\nfunction selectMeal(name, type) {}\n\nfunction createSummary(name, type, amount) {}",
                  "solvedContent": "const italianFood = [{\n  mealName: \"Pasta Bolognese\",\n  quantity: 3,\n  price: 7\n}, {\n  mealName: \"Pepperoni pizza\",\n  quantity: 2,\n  price: 10\n}];\nconst thaiFood = [{\n  mealName: \"Pad Thai\",\n  quantity: 1,\n  price: 8\n}];\nconst indianFood = [{\n  mealName: \"Chapati\",\n  quantity: 8,\n  price: 7\n}, {\n  mealName: \"Chicken Massala\",\n  quantity: 5,\n  price: 9\n}, {\n  mealName: \"Tandoori Chicken\",\n  quantity: 5,\n  price: 9\n}];\n\nfunction findMeal(name, menu) {\n  for (let i = 0; i < menu.length; i++) {\n    if (menu[i].mealName === name) {\n      return menu[i];\n    }\n  }\n}\n\nfunction selectMeal(name, type) {\n  if (type === 'italian') {\n    return \"italian order\";\n  } else if (type === 'indian') {\n    return \"indian order\";\n  } else if (type === 'thai') {\n    return \"thai order\";\n  } else {\n    return \"not found\";\n  }\n}\n\nfunction createSummary(name, type, amount) {}"
                }
              ],
              "hints": [
                {
                  "title": "Hint",
                  "content": "Use `if`, `else if` and `else` statements."
                }
              ]
            }
          },
          {
            "title": "Define selectMeal pt 2",
            "id": 113177,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Отлично! Давай улучшим нашу функцию `selectMeal`, чтобы она возвращала блюдо, прежде чем мы перейдем к нашей последней функции.\n\nПоскольку наша функция `findMeal()` предназначена для возврата конкретного блюда, учитывая `menu` и название блюда `name`, мы можем вызвать ее внутри `selectMeal()`, чтобы помочь нам найти запрашиваемое блюдо.\n\n1. Замените `\"italian order\"` вызовом функции `findMeal`, передав ей в качестве аргументов `name` и `italianFood`.\n2. Замените `\"indian order\"` вызовом функции `findMeal`, передав ей в качестве аргументов `name` и `indianFood`.\n3. Замените `\"thai order\"` вызовом функции `findMeal`, передав ей в качестве аргументов `name` и `thaiFood`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const italianFood = [{\n  mealName: \"Pasta Bolognese\",\n  quantity: 3,\n  price: 7\n}, {\n  mealName: \"Pepperoni pizza\",\n  quantity: 2,\n  price: 10\n}];\nconst thaiFood = [{\n  mealName: \"Pad Thai\",\n  quantity: 1,\n  price: 8\n}];\nconst indianFood = [{\n  mealName: \"Chapati\",\n  quantity: 8,\n  price: 7\n}, {\n  mealName: \"Chicken Massala\",\n  quantity: 5,\n  price: 9\n}, {\n  mealName: \"Tandoori Chicken\",\n  quantity: 5,\n  price: 9\n}];\n\nfunction findMeal(name, menu) {\n  for (let i = 0; i < menu.length; i++) {\n    if (menu[i].mealName === name) {\n      return menu[i];\n    }\n  }\n}\n\nfunction selectMeal(name, type) {\n  if (type === 'italian') {\n    return \"italian order\";\n  } else if (type === 'indian') {\n    return \"indian order\";\n  } else if (type === 'thai') {\n    return \"thai order\";\n  } else {\n    return \"not found\";\n  }\n}\n\nfunction createSummary(name, type, amount) {}",
                  "solvedContent": "const italianFood = [{\n  mealName: \"Pasta Bolognese\",\n  quantity: 3,\n  price: 7\n}, {\n  mealName: \"Pepperoni pizza\",\n  quantity: 2,\n  price: 10\n}];\nconst thaiFood = [{\n  mealName: \"Pad Thai\",\n  quantity: 1,\n  price: 8\n}];\nconst indianFood = [{\n  mealName: \"Chapati\",\n  quantity: 8,\n  price: 7\n}, {\n  mealName: \"Chicken Massala\",\n  quantity: 5,\n  price: 9\n}, {\n  mealName: \"Tandoori Chicken\",\n  quantity: 5,\n  price: 9\n}];\n\nfunction findMeal(name, menu) {\n  for (let i = 0; i < menu.length; i++) {\n    if (menu[i].mealName === name) {\n      return menu[i];\n    }\n  }\n}\n\nfunction selectMeal(name, type) {\n  if (type === 'italian') {\n    return findMeal(name, italianFood);\n  } else if (type === 'indian') {\n    return findMeal(name, indianFood);\n  } else if (type === 'thai') {\n    return findMeal(name, thaiFood);\n  } else {\n    return \"not found\";\n  }\n}\n\nfunction createSummary(name, type, amount) {}"
                }
              ],
              "hints": [
                {
                  "title": "Hint",
                  "content": "Use `return findMeal()` with the arguments mentioned above."
                }
              ]
            }
          },
          {
            "title": "Define createSummary pt 1",
            "id": 113178,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Очень хорошо! Давай начнем работать над функцией `createSummary`, чтобы мы могли предоставить клиенту сводку о его заказе.\n\n1. Добавь переменную `order` и присвой ей результат вызова функции `selectMeal()`.\n2. Добавь `name` и `type` в качестве параметров к вызову функции `selectMeal()`. Это передает аргументы `name` и `type` из `createSummary()` в `selectMeal()`.\n3. Отобрази свойство `mealName` переменной `order`.\n4. Проверь, что в данный момент делает твоя функция `createSummary()`, вызвав ее с аргументами `\"Pasta Bolognese\"`, `\"italian\"` и `3`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const italianFood = [{\n  mealName: \"Pasta Bolognese\",\n  quantity: 3,\n  price: 7\n}, {\n  mealName: \"Pepperoni pizza\",\n  quantity: 2,\n  price: 10\n}];\nconst thaiFood = [{\n  mealName: \"Pad Thai\",\n  quantity: 1,\n  price: 8\n}];\nconst indianFood = [{\n  mealName: \"Chapati\",\n  quantity: 8,\n  price: 7\n}, {\n  mealName: \"Chicken Massala\",\n  quantity: 5,\n  price: 9\n}, {\n  mealName: \"Tandoori Chicken\",\n  quantity: 5,\n  price: 9\n}];\n\nfunction findMeal(name, menu) {\n  for (let i = 0; i < menu.length; i++) {\n    if (menu[i].mealName === name) {\n      return menu[i];\n    }\n  }\n}\n\nfunction selectMeal(name, type) {\n  if (type === 'italian') {\n    return findMeal(name, italianFood);\n  } else if (type === 'indian') {\n    return findMeal(name, indianFood);\n  } else if (type === 'thai') {\n    return findMeal(name, thaiFood);\n  } else {\n    return \"not found\";\n  }\n}\n\nfunction createSummary(name, type, amount) {}",
                  "solvedContent": "const italianFood = [{\n  mealName: \"Pasta Bolognese\",\n  quantity: 3,\n  price: 7\n}, {\n  mealName: \"Pepperoni pizza\",\n  quantity: 2,\n  price: 10\n}];\nconst thaiFood = [{\n  mealName: \"Pad Thai\",\n  quantity: 1,\n  price: 8\n}];\nconst indianFood = [{\n  mealName: \"Chapati\",\n  quantity: 8,\n  price: 7\n}, {\n  mealName: \"Chicken Massala\",\n  quantity: 5,\n  price: 9\n}, {\n  mealName: \"Tandoori Chicken\",\n  quantity: 5,\n  price: 9\n}];\n\nfunction findMeal(name, menu) {\n  for (let i = 0; i < menu.length; i++) {\n    if (menu[i].mealName === name) {\n      return menu[i];\n    }\n  }\n}\n\nfunction selectMeal(name, type) {\n  if (type === 'italian') {\n    return findMeal(name, italianFood);\n  } else if (type === 'indian') {\n    return findMeal(name, indianFood);\n  } else if (type === 'thai') {\n    return findMeal(name, thaiFood);\n  } else {\n    return \"not found\";\n  }\n}\n\nfunction createSummary(name, type, amount) {\n  const order = selectMeal(name, type);\n  console.log(order.mealName);\n}\ncreateSummary('Pasta Bolognese', 'italian', 3);"
                }
              ],
              "hints": [
                {
                  "title": "Hint",
                  "content": "The function call for `createSummary()` should be placed after the code block where it is defined."
                }
              ]
            }
          },
          {
            "title": "Define createSummary pt 2",
            "id": 113179,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Хорошая работа! Давайте продолжим определять `createSummary`\n\n1. Добавьте переменную `orderPossible`, присвойте ей логическое выражение для проверки, что наша переменная `order` не равна `\"not found\"`.\n2. Используйте `&&`, чтобы добавить условие к `orderPossible` для проверки, что `amount` меньше или равно свойству `quantity` в `order`.\n3. Добавьте переменную `errorMessage` и присвойте ей значение `\"Something went wrong, please try again later'\"`.\n4. Отобразите значение переменной `orderPossible`.  \n5. Отобразите значение переменной `errorMessage`.  ",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const italianFood = [{\n  mealName: \"Pasta Bolognese\",\n  quantity: 3,\n  price: 7\n}, {\n  mealName: \"Pepperoni pizza\",\n  quantity: 2,\n  price: 10\n}];\nconst thaiFood = [{\n  mealName: \"Pad Thai\",\n  quantity: 1,\n  price: 8\n}];\nconst indianFood = [{\n  mealName: \"Chapati\",\n  quantity: 8,\n  price: 7\n}, {\n  mealName: \"Chicken Massala\",\n  quantity: 5,\n  price: 9\n}, {\n  mealName: \"Tandoori Chicken\",\n  quantity: 5,\n  price: 9\n}];\n\nfunction findMeal(name, menu) {\n  for (let i = 0; i < menu.length; i++) {\n    if (menu[i].mealName === name) {\n      return menu[i];\n    }\n  }\n}\n\nfunction selectMeal(name, type) {\n  if (type === 'italian') {\n    return findMeal(name, italianFood);\n  } else if (type === 'indian') {\n    return findMeal(name, indianFood);\n  } else if (type === 'thai') {\n    return findMeal(name, thaiFood);\n  } else {\n    return \"not found\";\n  }\n}\n\nfunction createSummary(name, type, amount) {\n  const order = selectMeal(name, type);\n  console.log(order.mealName);\n}\ncreateSummary('Pasta Bolognese', 'italian', 3);",
                  "solvedContent": "const italianFood = [{\n  mealName: \"Pasta Bolognese\",\n  quantity: 3,\n  price: 7\n}, {\n  mealName: \"Pepperoni pizza\",\n  quantity: 2,\n  price: 10\n}];\nconst thaiFood = [{\n  mealName: \"Pad Thai\",\n  quantity: 1,\n  price: 8\n}];\nconst indianFood = [{\n  mealName: \"Chapati\",\n  quantity: 8,\n  price: 7\n}, {\n  mealName: \"Chicken Massala\",\n  quantity: 5,\n  price: 9\n}, {\n  mealName: \"Tandoori Chicken\",\n  quantity: 5,\n  price: 9\n}];\n\nfunction findMeal(name, menu) {\n  for (let i = 0; i < menu.length; i++) {\n    if (menu[i].mealName === name) {\n      return menu[i];\n    }\n  }\n}\n\nfunction selectMeal(name, type) {\n  if (type === 'italian') {\n    return findMeal(name, italianFood);\n  } else if (type === 'indian') {\n    return findMeal(name, indianFood);\n  } else if (type === 'thai') {\n    return findMeal(name, thaiFood);\n  } else {\n    return \"not found\";\n  }\n}\n\nfunction createSummary(name, type, amount) {\n  const order = selectMeal(name, type);\n  console.log(order.mealName);\n  const orderPossible = order !== 'not found' && amount <= order.quantity;\n  const errorMessage = 'Something went wrong, please try again later';\n  console.log(orderPossible);\n  console.log(errorMessage);\n}\ncreateSummary('Pasta Bolognese', 'italian', 3);"
                }
              ],
              "hints": [
                {
                  "title": "Hint",
                  "content": "1. You must define two logical expressions and chain them `condition1 && condition 2`. \n2. Use comparators such as `<=` `===` or` !==`to define each expression."
                }
              ]
            }
          },
          {
            "title": "Define createSummary pt3",
            "id": 113180,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "На этом этапе мы закончим создание функции `createSummary`, сначала добавив условие, чтобы убедиться, что введенное блюдо было найдено. Затем мы отобразим сводку заказа.\n\n1. Так как они больше не нужны, ты можешь удалить все операторы console.\n2. Добавь условный оператор, чтобы проверить, является ли `orderPossible` значением `true`.\n3. В теле условия добавь переменную `total` и присвой ей произведение аргумента `amount` и свойства `price` объекта `order`.\n4. Твое условие должно возвращать строку, которая сообщает клиенту количество заказанных блюд, какое блюдо они заказали и сколько это стоит. Ты *должен* использовать `amount`, `name` и `total` в строке.\n5. Верни `errorMessage`, если `orderPossible` имеет значение `false`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const italianFood = [{\n  mealName: \"Pasta Bolognese\",\n  quantity: 3,\n  price: 7\n}, {\n  mealName: \"Pepperoni pizza\",\n  quantity: 2,\n  price: 10\n}];\nconst thaiFood = [{\n  mealName: \"Pad Thai\",\n  quantity: 1,\n  price: 8\n}];\nconst indianFood = [{\n  mealName: \"Chapati\",\n  quantity: 8,\n  price: 7\n}, {\n  mealName: \"Chicken Massala\",\n  quantity: 5,\n  price: 9\n}, {\n  mealName: \"Tandoori Chicken\",\n  quantity: 5,\n  price: 9\n}];\n\nfunction findMeal(name, menu) {\n  for (let i = 0; i < menu.length; i++) {\n    if (menu[i].mealName === name) {\n      return menu[i];\n    }\n  }\n}\n\nfunction selectMeal(name, type) {\n  if (type === 'italian') {\n    return findMeal(name, italianFood);\n  } else if (type === 'indian') {\n    return findMeal(name, indianFood);\n  } else if (type === 'thai') {\n    return findMeal(name, thaiFood);\n  } else {\n    return \"not found\";\n  }\n}\n\nfunction createSummary(name, type, amount) {\n  const order = selectMeal(name, type);\n  console.log(order.mealName);\n  const orderPossible = order !== 'not found' && amount <= order.quantity;\n  const errorMessage = 'Something went wrong, please try again later';\n  console.log(orderPossible);\n  console.log(errorMessage);\n}\ncreateSummary('Pasta Bolognese', 'italian', 3);",
                  "solvedContent": "const italianFood = [{\n  mealName: \"Pasta Bolognese\",\n  quantity: 3,\n  price: 7\n}, {\n  mealName: \"Pepperoni pizza\",\n  quantity: 2,\n  price: 10\n}];\nconst thaiFood = [{\n  mealName: \"Pad Thai\",\n  quantity: 1,\n  price: 8\n}];\nconst indianFood = [{\n  mealName: \"Chapati\",\n  quantity: 8,\n  price: 7\n}, {\n  mealName: \"Chicken Massala\",\n  quantity: 5,\n  price: 9\n}, {\n  mealName: \"Tandoori Chicken\",\n  quantity: 5,\n  price: 9\n}];\n\nfunction findMeal(name, menu) {\n  for (let i = 0; i < menu.length; i++) {\n    if (menu[i].mealName === name) {\n      return menu[i];\n    }\n  }\n}\n\nfunction selectMeal(name, type) {\n  if (type === 'italian') {\n    return findMeal(name, italianFood);\n  } else if (type === 'indian') {\n    return findMeal(name, indianFood);\n  } else if (type === 'thai') {\n    return findMeal(name, thaiFood);\n  } else {\n    return \"not found\";\n  }\n}\n\nfunction createSummary(name, type, amount) {\n  const order = selectMeal(name, type);\n  const orderPossible = order !== 'not found' && amount <= order.quantity;\n  const errorMessage = 'Something went wrong, please try again later';\n  if (orderPossible) {\n    const total = amount * order.price;\n    return \"You ordered \" + amount + \" \" + name + \" for a total of \" + total +\n      \" euros\";\n  } else {\n    return errorMessage;\n  }\n}"
                }
              ],
              "hints": [
                {
                  "title": "Hint",
                  "content": "1. Use `object.propertyName `syntax to access a property value of an object.\n2. Make sure and include the `amount`, `name`, and `total` arguments from the `createSummary()` function in the return string."
                }
              ]
            }
          }
        ]
      }
    ]
  }
}