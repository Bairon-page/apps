{
  "tutorial": {
    "id": 2127,
    "version": 9,
    "type": "course",
    "isNew": false,
    "codeLanguage": "node",
    "title": "Промежуточное программное обеспечение",
    "descriptionContent": "Узнай, что такое middleware и как его использовать в твоем приложении Express",
    "shortDescriptionContent": "",
    "showInTrack": true,
    "iconBanner": null,
    "chapters": [
      {
        "id": 15056,
        "title": "Встроенное Middleware",
        "type": "practiceLevel1",
        "lessons": [
          {
            "title": "Intro I",
            "id": 122314,
            "contentType": "interactive",
            "images": [
              {
                "id": "8e582a28-69f5-4ce1-8b1a-3bd18cf017c0"
              }
            ],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Промежуточное программное обеспечение (Middleware) относится к функциям, которые действуют как промежуточный слой между веб-сервером и приложением.</p><p>Этот промежуточный слой позволяет более эффективно взаимодействовать серверу и клиенту.</p><img src=\"8e582a28-69f5-4ce1-8b1a-3bd18cf017c0\" visible-if=\"always\" /></body></html>"
          },
          {
            "title": "Intro II",
            "id": 122332,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Вы можете использовать middleware для таких задач, как ведение журнала информации, разбор запросов, аутентификация и многого другого.</p></body></html>"
          },
          {
            "title": ".use() - Copy",
            "id": 132746,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>В Express мы добавляем middleware с помощью метода <code>use</code> на объекте приложения Express.</p><code version=\"2\" codelang=\"javascript\" name=\"app.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" express = \" /><text value=\"require\" class=\"built_in\" /><text value=\"(\" /><text value=\"&quot;express&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" app = express(); \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"app.use(); \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"app.listen(\" /><text value=\"3000\" class=\"number\" /><text value=\", () =&gt; { \" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;Server runs on port 3000&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"});\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"63\" endIndex=\"66\" /><option startIndex=\"66\" endIndex=\"67\" /><option startIndex=\"67\" endIndex=\"70\" /></options></interaction></interactions><output><content><text value=\"Server runs on port 3000\" /></content></output></code><p visible-if=\"wrong\">Обязательно выбери <code>app</code>, затем <code>.</code>, и наконец <code>use</code>.</p></body></html>"
          },
          {
            "title": "Built-in Middleware",
            "id": 122317,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Мы передаем middleware, который хотим использовать, в качестве аргумента функции <code>use</code>.</p><p><code>express.json</code> анализирует входящие запросы, содержащие JSON данные, преобразуя их в объект JS, который сервер может легко обработать.</p><code version=\"2\" codelang=\"javascript\" name=\"app.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" express = \" /><text value=\"require\" class=\"built_in\" /><text value=\"(\" /><text value=\"&quot;express&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" app = express(); \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"app.use(express.json()); \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"app.post(\" /><text value=\"&quot;/songs&quot;\" class=\"string\" /><text value=\", (req, res) =&gt; { \" /><text type=\"break\" /><text value=\" \" /><text value=\"const\" class=\"keyword\" /><text value=\" body = req.body; \" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(body); \" /><text type=\"break\" /><text value=\"}); \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"app.listen(\" /><text value=\"3000\" class=\"number\" /><text value=\", () =&gt; { \" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;Server runs on port 3000&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"});\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"71\" endIndex=\"78\" /><option startIndex=\"78\" endIndex=\"79\" /><option startIndex=\"79\" endIndex=\"85\" /><option correct=\"false\"><content><text value=\"use()\" /></content></option></options></interaction></interactions><output><content><text value=\"Server runs on port 3000\" /><text type=\"break\" /><text value=\"{\" /><text type=\"break\" /><text value=\"  &quot;title&quot;: &quot;Party in the USA&quot;,\" /><text type=\"break\" /><text value=\"  &quot;artist&quot;: &quot;Miley Cyrus&quot;\" /><text type=\"break\" /><text value=\"}\" /></content></output></code><p visible-if=\"wrong\">Обязательно выбери <code>express</code>, затем <code>.</code>, и наконец <code>json()</code>.</p></body></html>"
          },
          {
            "title": "Built-in Middleware - Copy",
            "id": 132755,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Еще одно часто используемое middleware в Express — это <code>express.urlencoded</code>.</p><p>Это middleware необходимо при обработке URL-кодированных данных формы, которые обычно отправляются через HTML-формы.</p><code version=\"2\" codelang=\"javascript\" name=\"app.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" express = \" /><text value=\"require\" class=\"built_in\" /><text value=\"(\" /><text value=\"&quot;express&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" app = express(); \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"app.use(express.urlencoded()); \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"app.post(\" /><text value=\"&quot;/submit&quot;\" class=\"string\" /><text value=\", (req, res) =&gt; { \" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(req.body); \" /><text type=\"break\" /><text value=\" res.send(\" /><text value=\"&quot;Form data received&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"}); \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"app.listen(\" /><text value=\"3000\" class=\"number\" /><text value=\", () =&gt; { \" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;Server runs on port 3000&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"});\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"71\" endIndex=\"78\" /><option startIndex=\"78\" endIndex=\"79\" /><option startIndex=\"79\" endIndex=\"91\" /><option correct=\"false\"><content><text value=\"json()\" /></content></option></options></interaction></interactions><output><content><text value=\"Server runs on port 3000\" /><text type=\"break\" /><text value=\"{\" /><text type=\"break\" /><text value=\" name: &quot;Paula&quot;, age: 57\" /><text type=\"break\" /><text value=\"}\" /></content></output></code><p visible-if=\"wrong\">Обязательно выбери <code>express</code>, затем <code>.</code>, и наконец <code>urlencoded()</code>.</p></body></html>"
          },
          {
            "title": "Built-in Middleware - Copy",
            "id": 132756,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Мы также можем применять middleware только к выбранным маршрутам, передавая его в качестве второго аргумента методов маршрута.</p><p>Давай сделаем так, чтобы конечная точка <code>\"/songs\"</code> использовала JSON middleware.</p><code version=\"2\" codelang=\"javascript\" name=\"app.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" express = \" /><text value=\"require\" class=\"built_in\" /><text value=\"(\" /><text value=\"&quot;express&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" app = express(); \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"app.post(\" /><text value=\"&quot;/songs&quot;\" class=\"string\" /><text value=\", express.json(), (req, res) =&gt; { \" /><text type=\"break\" /><text value=\" \" /><text value=\"const\" class=\"keyword\" /><text value=\" body = req.body; \" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(body); \" /><text type=\"break\" /><text value=\"}); \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"app.get(\" /><text value=\"&quot;/&quot;\" class=\"string\" /><text value=\", (req, res) =&gt; { \" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;I don't need it!&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"}); \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"app.listen(\" /><text value=\"3000\" class=\"number\" /><text value=\", () =&gt; { \" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;Server runs on port 3000&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"});\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"82\" endIndex=\"89\" /><option startIndex=\"89\" endIndex=\"90\" /><option startIndex=\"90\" endIndex=\"96\" /><option correct=\"false\"><content><text value=\"use()\" /></content></option></options></interaction></interactions><output><content><text value=\"Server runs on port 3000\" /><text type=\"break\" /><text value=\"{\" /><text type=\"break\" /><text value=\"  &quot;title&quot;: &quot;Party in the USA&quot;,\" /><text type=\"break\" /><text value=\"  &quot;artist&quot;: &quot;Miley Cyrus&quot;\" /><text type=\"break\" /><text value=\"}\" /></content></output></code><p visible-if=\"wrong\">Обязательно выбери <code>express</code>, затем <code>.</code>, и наконец <code>json()</code>.</p></body></html>"
          },
          {
            "title": "Question: Built-in Middleware",
            "id": 122319,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Какой пример встроенного middleware для Express?</p><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\"><code>express.json</code></item><item value=\"2\" correct=\"false\">Наше пользовательское middleware</item></selection><p visible-if=\"wrong\">Обязательно выбери <code>express.json</code>.</p></body></html>"
          },
          {
            "title": ".use() - Copy - Copy",
            "id": 132747,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Используй встроенное JSON middleware.</p><code version=\"2\" codelang=\"javascript\" name=\"app.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" express = \" /><text value=\"require\" class=\"built_in\" /><text value=\"(\" /><text value=\"&quot;express&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" app = express(); \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"app.use(express.json()); \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"app.listen(\" /><text value=\"3000\" class=\"number\" /><text value=\", () =&gt; { \" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;Server runs on port 3000&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"});\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"71\" endIndex=\"78\" /><option startIndex=\"78\" endIndex=\"79\" /><option startIndex=\"79\" endIndex=\"83\" /><option startIndex=\"83\" endIndex=\"84\" /><option startIndex=\"84\" endIndex=\"85\" /></options></interaction></interactions><output><content><text value=\"Server runs on port 3000\" /></content></output></code><p visible-if=\"wrong\">Обязательно выбери <code>express</code>, затем <code>.</code>, а затем <code>json</code>, <code>(</code>, <code>)</code>.</p></body></html>"
          },
          {
            "title": "Lesson #9",
            "id": 132757,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Можем ли мы использовать встроенное middleware, такое как <code>express.json</code>, в качестве аргумента в обработчике маршрута?</p><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\">Да, если мы не хотим применять это к каждому endpoint</item><item value=\"2\" correct=\"false\">Нет, встроенное middleware можно использовать только глобально</item></selection><p visible-if=\"wrong\">Да, если мы не хотим применять это к каждому endpoint.</p></body></html>"
          },
          {
            "title": ".use() - Copy - Copy - Copy",
            "id": 132758,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Заверши код, чтобы включить использование встроенного middleware.</p><code version=\"2\" codelang=\"javascript\" name=\"app.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" express = \" /><text value=\"require\" class=\"built_in\" /><text value=\"(\" /><text value=\"&quot;express&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" app = express(); \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"app.use(express.json()); \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"app.listen(\" /><text value=\"3000\" class=\"number\" /><text value=\", () =&gt; { \" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;Server runs on port 3000&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"});\" /></content><interactions><interaction type=\"validatedInput\" isDefault=\"true\" startIndex=\"67\" endIndex=\"70\" /></interactions><output><content><text value=\"Server runs on port 3000\" /></content></output></code><p visible-if=\"wrong\">Обязательно выбери <code>use</code>.</p></body></html>"
          },
          {
            "title": "Lesson #12",
            "id": 132761,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Как применить middleware к определенному маршруту?</p><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\">Передай это в качестве второго аргумента в метод route</item><item value=\"2\" correct=\"false\">Используй <code>app.use</code> для каждого маршрута</item></selection><p visible-if=\"wrong\">Передай это в качестве второго аргумента в метод route.</p></body></html>"
          }
        ]
      },
      {
        "id": 15057,
        "title": "Пользовательский Middleware",
        "type": "practiceLevel1",
        "lessons": [
          {
            "title": ".use()",
            "id": 122330,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Мы также можем создать собственное middleware, которое выполняет определенные действия, которые мы определили. Мы делаем это, создавая функцию.</p><p>Для начала мы определяем функцию с двумя параметрами.</p><code version=\"2\" codelang=\"javascript\" name=\"app.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" express = \" /><text value=\"require\" class=\"built_in\" /><text value=\"(\" /><text value=\"&quot;express&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" app = express(); \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" customMiddleware = \" /><text value=\"(\" /><text value=\"req, res\" class=\"params\" /><text value=\") =&gt;\" /><text value=\" { \" /><text type=\"break\" /><text value=\"  \" /><text type=\"break\" /><text value=\"}; \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"app.get(\" /><text value=\"&quot;/&quot;\" class=\"string\" /><text value=\", (req, res) =&gt; { \" /><text type=\"break\" /><text value=\" res.send(\" /><text value=\"&quot;Hello from the root route!&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"}); \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"app.listen(\" /><text value=\"3000\" class=\"number\" /><text value=\", () =&gt; { \" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;Server runs on port 3000&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"});\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"88\" endIndex=\"98\" /><option startIndex=\"99\" endIndex=\"101\" /><option startIndex=\"102\" endIndex=\"103\" /><option startIndex=\"108\" endIndex=\"109\" /></options></interaction></interactions></code><p visible-if=\"wrong\">Обязательно выбери <code>(req, res)</code>, затем <code>=&gt;</code>, а затем <code>{</code>, <code>}</code>.</p></body></html>"
          },
          {
            "title": ".use() - Copy",
            "id": 132749,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Давай создадим middleware, чтобы логировать каждый входящий запрос и выводить используемый метод.</p><code version=\"2\" codelang=\"javascript\" name=\"app.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" express = \" /><text value=\"require\" class=\"built_in\" /><text value=\"(\" /><text value=\"&quot;express&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" app = express(); \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" customMiddleware = \" /><text value=\"(\" /><text value=\"req, res\" class=\"params\" /><text value=\") =&gt;\" /><text value=\" { \" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;Incoming request...&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"`Request type: \" /><text value=\"${req.method}\" class=\"subst\" /><text value=\"`\" /><text value=\"); \" /><text type=\"break\" /><text value=\"}; \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"app.get(\" /><text value=\"&quot;/&quot;\" class=\"string\" /><text value=\", (req, res) =&gt; { \" /><text type=\"break\" /><text value=\" res.send(\" /><text value=\"&quot;Hello from the root route!&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"}); \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"app.listen(\" /><text value=\"3000\" class=\"number\" /><text value=\", () =&gt; { \" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;Server runs on port 3000&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"});\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"106\" endIndex=\"117\" /><option startIndex=\"144\" endIndex=\"155\" /><option startIndex=\"173\" endIndex=\"183\" /></options></interaction></interactions></code><p visible-if=\"wrong\">Обязательно выбери <code>console.log</code>, затем <code>console.log</code>, и наконец <code>req.method</code>.</p></body></html>"
          },
          {
            "title": ".use() - Copy - Copy",
            "id": 132750,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Чтобы завершить middleware, мы должны вызвать функцию next, чтобы передать управление следующему middleware или обработчику маршрута.</p><p>Это позволяет объектам запроса и ответа продолжать движение через конвейер.</p><code version=\"2\" codelang=\"javascript\" name=\"app.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" express = \" /><text value=\"require\" class=\"built_in\" /><text value=\"(\" /><text value=\"&quot;express&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" app = express(); \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" customMiddleware = \" /><text value=\"(\" /><text value=\"req, res, next\" class=\"params\" /><text value=\") =&gt;\" /><text value=\" { \" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;Incoming request...&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"`Request type: \" /><text value=\"${req.method}\" class=\"subst\" /><text value=\"`\" /><text value=\"); \" /><text type=\"break\" /><text value=\" next(); \" /><text type=\"break\" /><text value=\"}; \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"app.get(\" /><text value=\"&quot;/&quot;\" class=\"string\" /><text value=\", (req, res) =&gt; { \" /><text type=\"break\" /><text value=\" res.send(\" /><text value=\"&quot;Hello from the root route!&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"}); \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"app.listen(\" /><text value=\"3000\" class=\"number\" /><text value=\", () =&gt; { \" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;Server runs on port 3000&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"});\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"196\" endIndex=\"202\" /><option startIndex=\"99\" endIndex=\"103\" /></options></interaction></interactions></code><p visible-if=\"wrong\">Обязательно выбери <code>next</code>, а затем <code>next()</code>.</p></body></html>"
          },
          {
            "title": ".use() - Copy",
            "id": 132748,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Чтобы применить наше middleware в приложении Express, мы используем <code>app.use</code> и используем <code>customMiddleware</code> в качестве аргумента.</p><p>Это говорит Express выполнять функцию <code>customMiddleware</code> для каждого входящего запроса, позволяя ей выполнять наш логгинг.</p><code version=\"2\" codelang=\"javascript\" name=\"app.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" express = \" /><text value=\"require\" class=\"built_in\" /><text value=\"(\" /><text value=\"&quot;express&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" app = express(); \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" customMiddleware = \" /><text value=\"(\" /><text value=\"req, res, next\" class=\"params\" /><text value=\") =&gt;\" /><text value=\" { \" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;Incoming request...&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"`Request type: \" /><text value=\"${req.method}\" class=\"subst\" /><text value=\"`\" /><text value=\"); \" /><text type=\"break\" /><text value=\" next(); \" /><text type=\"break\" /><text value=\"}; \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"app.use(customMiddleware); \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"app.get(\" /><text value=\"&quot;/&quot;\" class=\"string\" /><text value=\", (req, res) =&gt; { \" /><text type=\"break\" /><text value=\" res.send(\" /><text value=\"&quot;Hello from the root route!&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"}); \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"app.listen(\" /><text value=\"3000\" class=\"number\" /><text value=\", () =&gt; { \" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;Server runs on port 3000&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"});\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"211\" endIndex=\"214\" /><option startIndex=\"214\" endIndex=\"215\" /><option startIndex=\"215\" endIndex=\"218\" /><option startIndex=\"219\" endIndex=\"235\" /></options></interaction></interactions><output><content><text value=\"Server runs on port 3000\" /><text type=\"break\" /><text value=\"Incoming request...\" /><text type=\"break\" /><text value=\"Request type: GET\" /></content></output></code><p visible-if=\"wrong\">Обязательно выбери <code>app</code>, затем <code>.</code>, а затем <code>use</code>, <code>customMiddleware</code>.</p></body></html>"
          },
          {
            "title": "Custom Middleware - Copy1",
            "id": 132751,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Мы также можем применить наше пользовательское middleware только к выбранным маршрутам, передав его в качестве второго аргумента методов маршрута.</p><p>Давай сделаем так, чтобы маршрут <code>\"/\"</code> использовал наш middleware <code>logRequest</code>.</p><code version=\"2\" codelang=\"javascript\" name=\"app.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" express = \" /><text value=\"require\" class=\"built_in\" /><text value=\"(\" /><text value=\"&quot;express&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" app = express(); \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" logRequest = \" /><text value=\"(\" /><text value=\"req, res, next\" class=\"params\" /><text value=\") =&gt;\" /><text value=\" { \" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"`Incoming request type: \" /><text value=\"${req.method}\" class=\"subst\" /><text value=\"`\" /><text value=\"); \" /><text type=\"break\" /><text value=\" next(); \" /><text type=\"break\" /><text value=\"}; \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"app.get(\" /><text value=\"&quot;/&quot;\" class=\"string\" /><text value=\", logRequest, (req, res) =&gt; { \" /><text type=\"break\" /><text value=\" res.send(\" /><text value=\"&quot;Hello from the root route!&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"}); \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"app.listen(\" /><text value=\"3000\" class=\"number\" /><text value=\", () =&gt; { \" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;Server runs on port 3000&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"});\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"189\" endIndex=\"199\" /></options></interaction></interactions><output><content><text value=\"Server runs on port 3000\" /><text type=\"break\" /><text value=\"Incoming request type: GET\" /></content></output></code><p visible-if=\"wrong\">Обязательно выбери <code>logRequest</code>.</p></body></html>"
          },
          {
            "title": "Multiple Middleware",
            "id": 122331,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Почему <code>\"/\"</code> endpoint не выполняет свой console log при доступе?</p><code version=\"2\" codelang=\"javascript\" name=\"app.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" express = \" /><text value=\"require\" class=\"built_in\" /><text value=\"(\" /><text value=\"&quot;express&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" app = express(); \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"app.use(\" /><text value=\"(\" /><text value=\"req, res, next\" class=\"params\" /><text value=\") =&gt;\" /><text value=\" { \" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;Incoming request...&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"`Request type: \" /><text value=\"${req.method}\" class=\"subst\" /><text value=\"`\" /><text value=\"); \" /><text type=\"break\" /><text value=\"}); \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"app.get(\" /><text value=\"'/'\" class=\"string\" /><text value=\", (req, res) =&gt; { \" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;Hello from the endpoint&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"}); \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"app.listen(\" /><text value=\"3000\" class=\"number\" /><text value=\", () =&gt; { \" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;Server runs on port 3000&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"});\" /></content><output><content><text value=\"Server runs on port 3000\" /><text type=\"break\" /><text value=\"Incoming request...\" /><text type=\"break\" /><text value=\"Request type: GET\" /></content></output></code><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\">Middleware блокирует маршрут, не вызывая <code>next</code></item><item value=\"2\" correct=\"false\">Маршрут <code>\"/\"</code> отсутствует</item></selection><p visible-if=\"wrong\">Middleware блокирует маршрут, не вызывая <code>next</code>.</p></body></html>"
          },
          {
            "title": "next()",
            "id": 122321,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Дополните код, чтобы убедиться, что endpoint достигнут.</p><code version=\"2\" codelang=\"javascript\" name=\"app.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" express = \" /><text value=\"require\" class=\"built_in\" /><text value=\"(\" /><text value=\"&quot;express&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" app = express(); \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"app.use(\" /><text value=\"(\" /><text value=\"req, res, next\" class=\"params\" /><text value=\") =&gt;\" /><text value=\" { \" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;Incoming request...&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"`Requesting server: \" /><text value=\"${req.hostname}\" class=\"subst\" /><text value=\"`\" /><text value=\"); \" /><text type=\"break\" /><text value=\" next(); \" /><text type=\"break\" /><text value=\"}); \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"app.get(\" /><text value=\"&quot;/user/:id&quot;\" class=\"string\" /><text value=\", \" /><text value=\"function\" class=\"keyword\" /><text value=\"(\" /><text value=\"req, res, next\" class=\"params\" /><text value=\") \" /><text value=\"{ \" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;GET request processing...&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"}); \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"app.listen(\" /><text value=\"3000\" class=\"number\" /><text value=\", () =&gt; { \" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;Server runs on port 3000&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"});\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"82\" endIndex=\"86\" /><option startIndex=\"186\" endIndex=\"192\" /></options></interaction></interactions><output><content><text value=\"Server runs on port 3000\" /><text type=\"break\" /><text value=\"Incoming request...\" /><text type=\"break\" /><text value=\"Requesting server: localhost\" /><text type=\"break\" /><text value=\"Get request processing...\" /></content></output></code><p visible-if=\"wrong\">Обязательно выбери <code>next</code>, а затем <code>next()</code>.</p></body></html>"
          },
          {
            "title": "Question: Custom Middleware",
            "id": 122322,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Какое преимущество создания пользовательского middleware?</p><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\">Пользовательское middleware позволяет выполнять пользовательские действия с HTTP-запросами</item><item value=\"2\" correct=\"false\">Мы не можем создать пользовательский middleware</item></selection><p visible-if=\"wrong\">Пользовательское middleware позволяет выполнять пользовательские действия с HTTP-запросами.</p></body></html>"
          },
          {
            "title": "Custom Middleware - Copy - Copy",
            "id": 132752,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Почему маршрут <code>\"/me\"</code> не запускает промежуточное программное обеспечение для ведения журнала?</p><code version=\"2\" codelang=\"javascript\" name=\"app.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" express = \" /><text value=\"require\" class=\"built_in\" /><text value=\"(\" /><text value=\"&quot;express&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" app = express(); \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" logRequest = \" /><text value=\"(\" /><text value=\"req, res, next\" class=\"params\" /><text value=\") =&gt;\" /><text value=\" { \" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"`Incoming request type: \" /><text value=\"${req.method}\" class=\"subst\" /><text value=\"`\" /><text value=\"); \" /><text type=\"break\" /><text value=\" next(); \" /><text type=\"break\" /><text value=\"}; \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"app.get(\" /><text value=\"&quot;/&quot;\" class=\"string\" /><text value=\", logRequest, (req, res) =&gt; { \" /><text type=\"break\" /><text value=\" res.send(\" /><text value=\"&quot;Hello from the root route!&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"}); \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"app.get(\" /><text value=\"&quot;/me&quot;\" class=\"string\" /><text value=\", (req, res) =&gt; { \" /><text type=\"break\" /><text value=\" res.send(\" /><text value=\"&quot;Hello from my route!&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"}); \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"app.listen(\" /><text value=\"3000\" class=\"number\" /><text value=\", () =&gt; { \" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;Server runs on port 3000&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"});\" /></content><output><content><text value=\"Server runs on port 3000\" /></content></output></code><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\">Промежуточное ПО для ведения журнала не применяется к маршруту <code>\"/me\"</code></item><item value=\"2\" correct=\"false\">Маршрут <code>\"/me\"</code> не работает, потому что он настроен неправильно</item></selection><p visible-if=\"wrong\">Промежуточное ПО для ведения журнала не применяется к маршруту <code>\"/me\"</code>.</p></body></html>"
          },
          {
            "title": "Question: Third Party Middleware",
            "id": 122323,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Что не так с кодом?</p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" express = \" /><text value=\"require\" class=\"built_in\" /><text value=\"(\" /><text value=\"&quot;express&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" app = express(); \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"function\" class=\"keyword\" /><text value=\" \" /><text value=\"logTime\" class=\"title\" /><text value=\"(\" /><text value=\"req, res, next\" class=\"params\" /><text value=\") \" /><text value=\"{ \" /><text type=\"break\" /><text value=\"  \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"`Request received at: \" /><text value=\"${\" /><text value=\"new\" class=\"keyword\" /><text value=\" \" /><text value=\"Date\" class=\"built_in\" /><text value=\"().toLocaleString()}\" /><text value=\"`\" /><text value=\"); \" /><text type=\"break\" /><text value=\"} \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"app.use(logTime); \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"app.get(\" /><text value=\"&quot;/&quot;\" class=\"string\" /><text value=\", (req, res) =&gt; { \" /><text type=\"break\" /><text value=\"  res.send(\" /><text value=\"&quot;Hello, World!&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"}); \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"app.listen(\" /><text value=\"3000\" class=\"number\" /><text value=\", () =&gt; { \" /><text type=\"break\" /><text value=\"  \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;Server runs on port 3000&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"});\" /></content><output><content><text value=\"Server runs on port 3000\" /><text type=\"break\" /><text value=\"GET / 200 150 - 1.650 ms\" /><text type=\"break\" /><text value=\"Request received\" /></content></output></code><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\">Мы должны использовать <code>next</code> в нашем пользовательском middleware, чтобы позволить объектам запроса и ответа продолжать движение через конвейер</item><item value=\"2\" correct=\"false\">Мы должны определить нашу middleware как стрелочную функцию, чтобы она работала с Express</item></selection><p visible-if=\"wrong\">Мы должны использовать <code>next</code> в нашем пользовательском middleware, чтобы позволить объектам запроса и ответа продолжать движение через конвейер.</p></body></html>"
          }
        ]
      },
      {
        "id": 15058,
        "title": "Еще больше Middleware",
        "type": "practiceLevel1",
        "lessons": [
          {
            "title": "Custom Middleware",
            "id": 122320,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Мы можем использовать несколько middleware в нашем приложении.</p><code version=\"2\" codelang=\"javascript\" name=\"app.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" express = \" /><text value=\"require\" class=\"built_in\" /><text value=\"(\" /><text value=\"&quot;express&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" app = express(); \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"app.use(express.json()); \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"function\" class=\"keyword\" /><text value=\" \" /><text value=\"authenticate\" class=\"title\" /><text value=\"(\" /><text value=\"req, res, next\" class=\"params\" /><text value=\") \" /><text value=\"{ \" /><text type=\"break\" /><text value=\"  \" /><text value=\"if\" class=\"keyword\" /><text value=\" (req.body.role === \" /><text value=\"&quot;Admin&quot;\" class=\"string\" /><text value=\") { \" /><text type=\"break\" /><text value=\"    \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;Authenticated&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"    next(); \" /><text type=\"break\" /><text value=\"  } \" /><text value=\"else\" class=\"keyword\" /><text value=\" { \" /><text type=\"break\" /><text value=\"    \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;Unauthorized&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"    res.status(\" /><text value=\"401\" class=\"number\" /><text value=\").send(\" /><text value=\"&quot;Unauthorized&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"  } \" /><text type=\"break\" /><text value=\"} \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"app.use(authenticate); \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"app.listen(\" /><text value=\"3000\" class=\"number\" /><text value=\", () =&gt; { \" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;Server runs on port 3000&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"});\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"323\" endIndex=\"335\" /><option correct=\"false\"><content><text value=\"express\" /></content></option><option startIndex=\"63\" endIndex=\"66\" /><option startIndex=\"66\" endIndex=\"67\" /><option startIndex=\"67\" endIndex=\"70\" /></options></interaction></interactions><output><content><text value=\"Server runs on port 3000\" /><text type=\"break\" /><text value=\"Unauthorized\" /><text type=\"break\" /><text value=\"\" /></content></output></code><p visible-if=\"wrong\">Обязательно выбери <code>app</code>, затем <code>.</code>, а затем <code>use</code>, <code>authenticate</code>.</p></body></html>"
          },
          {
            "title": "Custom Middleware - Copy - Copy - Copy",
            "id": 132764,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Мы можем связать несколько функций middleware в определении маршрута.</p><p>Давай использовать встроенное middleware, такое как <code>express.json</code>, в качестве аргумента вместе с твоим пользовательским middleware <code>logRequest</code>.</p><code version=\"2\" codelang=\"javascript\" name=\"app.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" express = \" /><text value=\"require\" class=\"built_in\" /><text value=\"(\" /><text value=\"&quot;express&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" app = express(); \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" logRequest = \" /><text value=\"(\" /><text value=\"req, res, next\" class=\"params\" /><text value=\") =&gt;\" /><text value=\" { \" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"`Incoming request type: \" /><text value=\"${req.method}\" class=\"subst\" /><text value=\"`\" /><text value=\"); \" /><text type=\"break\" /><text value=\" next(); \" /><text type=\"break\" /><text value=\"}; \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"app.post(\" /><text value=\"&quot;/&quot;\" class=\"string\" /><text value=\", express.json(), logRequest, (req, res) =&gt; { \" /><text type=\"break\" /><text value=\" res.send(\" /><text value=\"&quot;Hello from the root route!&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"}); \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"app.listen(\" /><text value=\"3000\" class=\"number\" /><text value=\", () =&gt; { \" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;Server runs on port 3000&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"});\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"190\" endIndex=\"197\" /><option startIndex=\"198\" endIndex=\"202\" /><option startIndex=\"206\" endIndex=\"216\" /></options></interaction></interactions><output><content><text value=\"Server runs on port 3000\" /><text type=\"break\" /><text value=\"Incoming request type: GET\" /></content></output></code><p visible-if=\"wrong\">Обязательно выбери <code>express</code>, затем <code>json</code>, и наконец <code>logRequest</code>.</p></body></html>"
          },
          {
            "title": "Custom Middleware - Copy - Copy",
            "id": 132753,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>При передаче middleware в функцию маршрута мы также можем использовать массив.</p><code version=\"2\" codelang=\"javascript\" name=\"app.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" express = \" /><text value=\"require\" class=\"built_in\" /><text value=\"(\" /><text value=\"&quot;express&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" app = express(); \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" logRequest = \" /><text value=\"(\" /><text value=\"req, res, next\" class=\"params\" /><text value=\") =&gt;\" /><text value=\" { \" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"`Incoming request type: \" /><text value=\"${req.method}\" class=\"subst\" /><text value=\"`\" /><text value=\"); \" /><text type=\"break\" /><text value=\" next(); \" /><text type=\"break\" /><text value=\"}; \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"app.post(\" /><text value=\"&quot;/&quot;\" class=\"string\" /><text value=\", [express.json(), logRequest], (req, res) =&gt; { \" /><text type=\"break\" /><text value=\"  res.send(\" /><text value=\"&quot;Hello from the root route!&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"}); \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"app.listen(\" /><text value=\"3000\" class=\"number\" /><text value=\", () =&gt; { \" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;Server runs on port 3000&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"});\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"190\" endIndex=\"191\" /><option startIndex=\"205\" endIndex=\"206\" /><option startIndex=\"217\" endIndex=\"218\" /></options></interaction></interactions><output><content><text value=\"Server runs on port 3000\" /><text type=\"break\" /><text value=\"Incoming request type: GET\" /></content></output></code><p visible-if=\"wrong\">Обязательно выбери <code>[</code>, затем <code>,</code>, и наконец <code>]</code>.</p></body></html>"
          },
          {
            "title": "Custom Middleware  -dCopy -",
            "id": 132765,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Преимущество использования массива для группировки функций middleware в Express заключается главным образом в чистоте, гибкости и организации.</p><p>С этой структурой мы можем использовать массив <code>middlewares</code> на нескольких маршрутах, что способствует более чистому коду.</p><code version=\"2\" codelang=\"javascript\" name=\"app.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" express = \" /><text value=\"require\" class=\"built_in\" /><text value=\"(\" /><text value=\"&quot;express&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" app = express(); \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" logRequest = \" /><text value=\"(\" /><text value=\"req, res, next\" class=\"params\" /><text value=\") =&gt;\" /><text value=\" { \" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"`Incoming request type: \" /><text value=\"${req.method}\" class=\"subst\" /><text value=\"`\" /><text value=\"); \" /><text type=\"break\" /><text value=\" next(); \" /><text type=\"break\" /><text value=\"}; \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" middlewares = [express.json(), logRequest]; \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"app.post(\" /><text value=\"&quot;/&quot;\" class=\"string\" /><text value=\", middlewares, (req, res) =&gt; { \" /><text type=\"break\" /><text value=\"  res.send(\" /><text value=\"&quot;Hello from the root route!&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"}); \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"app.put(\" /><text value=\"&quot;/update&quot;\" class=\"string\" /><text value=\", middlewares, (req, res) =&gt; { \" /><text type=\"break\" /><text value=\" res.send(\" /><text value=\"&quot;Update route&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"}); \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"app.listen(\" /><text value=\"3000\" class=\"number\" /><text value=\", () =&gt; { \" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;Server runs on port 3000&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"});\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"176\" endIndex=\"181\" /><option startIndex=\"182\" endIndex=\"193\" /><option startIndex=\"243\" endIndex=\"254\" /><option startIndex=\"342\" endIndex=\"353\" /></options></interaction></interactions><output><content><text value=\"Server runs on port 3000\" /><text type=\"break\" /><text value=\"Incoming request type: GET\" /></content></output></code><p visible-if=\"wrong\">Обязательно выбери <code>const</code>, затем <code>middlewares</code>, а затем <code>middlewares</code>, <code>middlewares</code>.</p></body></html>"
          },
          {
            "title": "Custom Middleware  -dCopy - - Copy",
            "id": 132769,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Middleware выполняется в том порядке, в котором они определены, слева направо.</p><code version=\"2\" codelang=\"javascript\" name=\"app.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" express = \" /><text value=\"require\" class=\"built_in\" /><text value=\"(\" /><text value=\"&quot;express&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" app = express(); \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" logRequest = \" /><text value=\"(\" /><text value=\"req, res, next\" class=\"params\" /><text value=\") =&gt;\" /><text value=\" { \" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"`Incoming request type: \" /><text value=\"${req.method}\" class=\"subst\" /><text value=\"`\" /><text value=\"); \" /><text type=\"break\" /><text value=\" next(); \" /><text type=\"break\" /><text value=\"}; \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" middlewares = [express.json(), logRequest]; \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"app.post(\" /><text value=\"&quot;/&quot;\" class=\"string\" /><text value=\", middlewares, (req, res) =&gt; { \" /><text type=\"break\" /><text value=\"  es.send(\" /><text value=\"&quot;Hello from the root route!&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"}); \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"app.put(\" /><text value=\"&quot;/update&quot;\" class=\"string\" /><text value=\", middlewares, (req, res) =&gt; { \" /><text type=\"break\" /><text value=\" res.send(\" /><text value=\"&quot;Update route&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"}); \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"app.listen(\" /><text value=\"3000\" class=\"number\" /><text value=\", () =&gt; { \" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;Server runs on port 3000&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"});\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"182\" endIndex=\"193\" /><option startIndex=\"243\" endIndex=\"254\" /><option startIndex=\"341\" endIndex=\"352\" /></options></interaction></interactions><output><content><text value=\"Server runs on port 3000\" /><text type=\"break\" /><text value=\"Incoming request type: GET\" /></content></output></code><p visible-if=\"wrong\">Обязательно выбери <code>middlewares</code>, затем <code>middlewares</code>, и наконец <code>middlewares</code>.</p></body></html>"
          },
          {
            "title": "Exercise: Custom Middleware",
            "id": 122327,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Заверши код, чтобы добавить пользовательское middleware для аутентификации.</p><code version=\"2\" codelang=\"javascript\" name=\"app.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" express = \" /><text value=\"require\" class=\"built_in\" /><text value=\"(\" /><text value=\"&quot;express&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" app = express(); \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"app.use(express.json()); \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"function\" class=\"keyword\" /><text value=\" \" /><text value=\"checkReqBody\" class=\"title\" /><text value=\"(\" /><text value=\"req, res, next\" class=\"params\" /><text value=\") \" /><text value=\"{ \" /><text type=\"break\" /><text value=\" \" /><text value=\"if\" class=\"keyword\" /><text value=\" (req.body !== \" /><text value=\"undefined\" class=\"literal\" /><text value=\") { \" /><text type=\"break\" /><text value=\"  \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;Valid request body&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"  next(); \" /><text type=\"break\" /><text value=\" } \" /><text value=\"else\" class=\"keyword\" /><text value=\" { \" /><text type=\"break\" /><text value=\"  \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;Invalid request body&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"  res.status(\" /><text value=\"400\" class=\"number\" /><text value=\").send(\" /><text value=\"&quot;Invalid request body&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\" } \" /><text type=\"break\" /><text value=\"} \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"app.use(checkReqBody); \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"app.listen(\" /><text value=\"3000\" class=\"number\" /><text value=\", () =&gt; { \" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"'Server is running on port 3000.'\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"});\" /></content><interactions><interaction type=\"validatedInput\" isDefault=\"true\" startIndex=\"330\" endIndex=\"342\" /></interactions><output><content><text value=\"Server is running on port 3000\" /><text type=\"break\" /><text value=\"Valid request body\" /></content></output></code><p visible-if=\"wrong\">Обязательно выбери <code>checkReqBody</code>.</p></body></html>"
          },
          {
            "title": "Lesson #7",
            "id": 132766,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Можешь ли ты применить несколько функций middleware к одному маршруту?</p><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\">Да, передавая их в качестве дополнительных отдельных аргументов в метод route или в виде массива</item><item value=\"2\" correct=\"false\">Нет, мы можем использовать только одну функцию middleware на маршрут</item></selection><p visible-if=\"wrong\">Да, передавая их в качестве дополнительных отдельных аргументов в метод route или в виде массива.</p></body></html>"
          },
          {
            "title": "Exercise: Third Party Middleware",
            "id": 122328,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Создай массив middleware и передай его в качестве второго аргумента маршрута <code>\"/\"</code>.</p><code version=\"2\" codelang=\"javascript\" name=\"app.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" express = \" /><text value=\"require\" class=\"built_in\" /><text value=\"(\" /><text value=\"&quot;express&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" app = express(); \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"function\" class=\"keyword\" /><text value=\" \" /><text value=\"blockIP\" class=\"title\" /><text value=\"(\" /><text value=\"req, res, next\" class=\"params\" /><text value=\") \" /><text value=\"{ \" /><text type=\"break\" /><text value=\"  \" /><text value=\"const\" class=\"keyword\" /><text value=\" blockedIPs = [\" /><text value=\"'123.45.67.89'\" class=\"string\" /><text value=\"]; \" /><text type=\"break\" /><text value=\"  \" /><text value=\"const\" class=\"keyword\" /><text value=\" clientIP = req.ip; \" /><text type=\"break\" /><text value=\"   \" /><text type=\"break\" /><text value=\"  \" /><text value=\"if\" class=\"keyword\" /><text value=\" (blockedIPs.includes(clientIP)) { \" /><text type=\"break\" /><text value=\"    res.status(\" /><text value=\"403\" class=\"number\" /><text value=\").send(\" /><text value=\"&quot;Access forbidden&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"  } \" /><text value=\"else\" class=\"keyword\" /><text value=\" { \" /><text type=\"break\" /><text value=\"    next(); \" /><text type=\"break\" /><text value=\"  } \" /><text type=\"break\" /><text value=\"} \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" middleware = [express.json(), blockIP]; \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"app.get(\" /><text value=\"&quot;/&quot;\" class=\"string\" /><text value=\", middleware, (req, res) =&gt; { \" /><text type=\"break\" /><text value=\"  res.send(\" /><text value=\"&quot;Welcome to the site!&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"}); \" /><text type=\"break\" /><text value=\" \" /><text type=\"break\" /><text value=\"app.listen(\" /><text value=\"3000\" class=\"number\" /><text value=\", () =&gt; { \" /><text type=\"break\" /><text value=\"  \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;Server runs on port 3000&quot;\" class=\"string\" /><text value=\"); \" /><text type=\"break\" /><text value=\"});\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"299\" endIndex=\"309\" /><option startIndex=\"293\" endIndex=\"298\" /><option startIndex=\"355\" endIndex=\"365\" /><option startIndex=\"312\" endIndex=\"313\" /><option startIndex=\"327\" endIndex=\"328\" /><option startIndex=\"336\" endIndex=\"337\" /></options></interaction></interactions><output><content><text value=\"Server runs on port 3000\" /></content></output></code><p visible-if=\"wrong\">Обязательно выбери <code>const</code>, затем <code>middleware</code>, а затем <code>[</code>, <code>,</code>, <code>]</code>, <code>middleware</code>.</p></body></html>"
          },
          {
            "title": "Lesson #8",
            "id": 132767,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Можно ли смешивать встроенное и пользовательское middleware в одном определении маршрута?</p><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\">Да</item><item value=\"2\" correct=\"false\">Нет</item></selection><p visible-if=\"wrong\">Обязательно выбери Да.</p></body></html>"
          }
        ]
      }
    ]
  }
}