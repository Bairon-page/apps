{
  "tutorial": {
    "id": 2887,
    "version": 3,
    "type": "guidedProject",
    "isNew": false,
    "codeLanguage": "node",
    "title": "Бухгалтер - Часть 1",
    "descriptionContent": "Создай backend, который будет отслеживать все книги, которые ты читаешь. С помощью базы данных ты создашь идеальную цифровую книжную полку.",
    "shortDescriptionContent": "",
    "showInTrack": true,
    "iconBanner": "tutorial-2887-icon-banner.svg",
    "chapters": [
      {
        "id": 14978,
        "title": "Глава №1",
        "type": "practiceLevel3",
        "lessons": [
          {
            "title": "Lesson #7",
            "id": 132068,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Добро пожаловать в проект **Book Keeper**. Мы создадим приложение для сохранения книг, которые мы читаем, и добавления заметок.\n\nНачнем с настройки сервера Express.\n\n1. Объяви переменную `express` и подключи модуль `express`.\n2. Объяви переменную `app` и инициализируй ее, вызвав функцию `express`.\n3. Объяви переменную `port` и присвой ей значение `3000`.\n4. Используй функцию `listen` на `app`, чтобы приложение слушало порт, указанный в переменной `port`.\n5. Выведи сообщение в консоль внутри функции обратного вызова `listen`, чтобы мы знали, что наш сервер работает правильно.",
              "preselectedFileIndex": 1,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "database.js",
                  "codeLanguage": "javascript",
                  "content": "",
                  "solvedContent": null
                },
                {
                  "name": "app.js",
                  "codeLanguage": "javascript",
                  "content": "",
                  "solvedContent": "const express = require('express');\nconst app = express();\nconst port = 3000;\n\napp.listen(port, function() {\n  console.log(`App is listening on port ${port}`);\n});"
                }
              ],
              "hints": [],
              "httpOptions": {
                "method": "GET",
                "path": "/books",
                "body": null
              }
            }
          },
          {
            "title": "Lesson #6",
            "id": 132067,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Далее мы добавим middleware для разбора JSON тел в входящих запросах.\n\n1. Вызови `app.use` и передай в него `express.json()`, чтобы разбирать тела всех входящих запросов и помещать разобранные данные в `req.body`.",
              "preselectedFileIndex": 1,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "database.js",
                  "codeLanguage": "javascript",
                  "content": "",
                  "solvedContent": null
                },
                {
                  "name": "app.js",
                  "codeLanguage": "javascript",
                  "content": "const express = require('express');\nconst app = express();\nconst port = 3000;\n\napp.listen(port, function() {\n  console.log(`App is listening on port ${port}`);\n});",
                  "solvedContent": "const express = require('express');\nconst app = express();\nconst port = 3000;\n\napp.use(express.json());\n\napp.listen(port, function() {\n  console.log(`App is listening on port ${port}`);\n});"
                }
              ],
              "hints": [],
              "httpOptions": {
                "method": "GET",
                "path": "/books",
                "body": null
              }
            }
          },
          {
            "title": "Lesson #1",
            "id": 132062,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Чтобы работать с данными, мы настроим нашу базу данных SQLite.\n\n1. В `database.js` импортируй модуль `better-sqlite3`, используя `require(\"better-sqlite3'\")`. Присвой полученный объект константе с именем `Database`.\n2. Создай новую базу данных SQLite с именем `/tmp/quiz.db`, вызвав `new Database(\"/tmp/books.db\")`. Сохрани объект базы данных в константу с именем `db`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "database.js",
                  "codeLanguage": "javascript",
                  "content": "",
                  "solvedContent": "const Database = require('better-sqlite3');\nconst db = new Database('/tmp/books.db');"
                },
                {
                  "name": "app.js",
                  "codeLanguage": "javascript",
                  "content": "const express = require('express');\nconst app = express();\nconst port = 3000;\n\napp.use(express.json());\n\napp.listen(port, function() {\n  console.log(`App is listening on port ${port}`);\n});",
                  "solvedContent": null
                }
              ],
              "hints": [],
              "httpOptions": {
                "method": "GET",
                "path": "/books",
                "body": null
              }
            }
          },
          {
            "title": "Lesson #2",
            "id": 132063,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Теперь давай создадим таблицу для хранения наших книг.\n\n1. Используй метод `db.exec`, чтобы выполнить SQL-команду создания таблицы.\n2. Создай таблицу `questions` только в том случае, если она еще не существует. Таблица `books` должна иметь следующие столбцы:\n- `id`: целое число, первичный ключ, автоинкремент\n- `title`: строка, не может быть null\n- `author`: строка, не может быть null\n- `year`: целое число",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "database.js",
                  "codeLanguage": "javascript",
                  "content": "const Database = require('better-sqlite3');\nconst db = new Database('/tmp/books.db');",
                  "solvedContent": "const Database = require('better-sqlite3');\nconst db = new Database('/tmp/books.db');\n\ndb.exec(`\n    CREATE TABLE IF NOT EXISTS books (\n      id INTEGER PRIMARY KEY AUTOINCREMENT,\n      title TEXT NOT NULL,\n      author TEXT NOT NULL,\n      year INTEGER\n    )\n`);"
                },
                {
                  "name": "app.js",
                  "codeLanguage": "javascript",
                  "content": "const express = require('express');\nconst app = express();\nconst port = 3000;\n\napp.use(express.json());\n\napp.listen(port, function() {\n  console.log(`App is listening on port ${port}`);\n});",
                  "solvedContent": null
                }
              ],
              "hints": [],
              "httpOptions": {
                "method": "GET",
                "path": "/books",
                "body": null
              }
            }
          },
          {
            "title": "Lesson #3",
            "id": 132064,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Давайте добавим несколько примеров записей в нашу таблицу книг.\n\n1. Используя `db.exec`, добавь в базу данных как минимум три книги.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "database.js",
                  "codeLanguage": "javascript",
                  "content": "const Database = require('better-sqlite3');\nconst db = new Database('/tmp/books.db');\n\ndb.exec(`\n    CREATE TABLE IF NOT EXISTS books (\n      id INTEGER PRIMARY KEY AUTOINCREMENT,\n      title TEXT NOT NULL,\n      author TEXT NOT NULL,\n      year INTEGER\n    )\n`);\n",
                  "solvedContent": "const Database = require('better-sqlite3');\nconst db = new Database('/tmp/books.db');\n\ndb.exec(`\n    CREATE TABLE IF NOT EXISTS books (\n      id INTEGER PRIMARY KEY AUTOINCREMENT,\n      title TEXT NOT NULL,\n      author TEXT NOT NULL,\n      year INTEGER\n    )\n`);\n\ndb.exec(`\n  INSERT INTO books (title, author, year)\n    VALUES \n    ('1984', 'George Orwell', 1949),\n    ('Brave New World', 'Aldous Huxley', 1932),\n    ('Fahrenheit 451', 'Ray Bradbury', 1953)\n`);"
                },
                {
                  "name": "app.js",
                  "codeLanguage": "javascript",
                  "content": "const express = require('express');\nconst app = express();\nconst port = 3000;\n\napp.use(express.json());\n\napp.listen(port, function() {\n  console.log(`App is listening on port ${port}`);\n});",
                  "solvedContent": null
                }
              ],
              "hints": [],
              "httpOptions": {
                "method": "GET",
                "path": "/books",
                "body": null
              }
            }
          },
          {
            "title": "Lesson #4",
            "id": 132065,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Наконец, давай убедимся, что мы можем использовать наше подключение к базе данных в других файлах.\n\n1. Используя `module.exports`, экспортируй `db` в конце файла.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "database.js",
                  "codeLanguage": "javascript",
                  "content": "const Database = require('better-sqlite3');\nconst db = new Database('/tmp/books.db');\n\ndb.exec(`\n    CREATE TABLE IF NOT EXISTS books (\n      id INTEGER PRIMARY KEY AUTOINCREMENT,\n      title TEXT NOT NULL,\n      author TEXT NOT NULL,\n      year INTEGER\n    )\n`);\n\ndb.exec(`\n  INSERT INTO books (title, author, year)\n    VALUES \n    ('1984', 'George Orwell', 1949),\n    ('Brave New World', 'Aldous Huxley', 1932),\n    ('Fahrenheit 451', 'Ray Bradbury', 1953)\n`);",
                  "solvedContent": "const Database = require('better-sqlite3');\nconst db = new Database('/tmp/books.db');\n\ndb.exec(`\n    CREATE TABLE IF NOT EXISTS books (\n      id INTEGER PRIMARY KEY AUTOINCREMENT,\n      title TEXT NOT NULL,\n      author TEXT NOT NULL,\n      year INTEGER\n    )\n`);\n\ndb.exec(`\n  INSERT INTO books (title, author, year)\n    VALUES \n    ('1984', 'George Orwell', 1949),\n    ('Brave New World', 'Aldous Huxley', 1932),\n    ('Fahrenheit 451', 'Ray Bradbury', 1953)\n`);\n\nmodule.exports = db;"
                },
                {
                  "name": "app.js",
                  "codeLanguage": "javascript",
                  "content": "const express = require('express');\nconst app = express();\nconst port = 3000;\n\napp.use(express.json());\n\napp.listen(port, function() {\n  console.log(`App is listening on port ${port}`);\n});",
                  "solvedContent": null
                }
              ],
              "hints": [],
              "httpOptions": {
                "method": "GET",
                "path": "/books",
                "body": null
              }
            }
          },
          {
            "title": "Lesson #5",
            "id": 132066,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Давайте используем базу данных, которую мы создали в нашем приложении.\n\n1. Импортируй объект `db`, который мы экспортировали в `database.js`, в начале файла `app.js`. Сохрани импортированную базу данных в переменной с именем `db`.",
              "preselectedFileIndex": 1,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "database.js",
                  "codeLanguage": "javascript",
                  "content": "const Database = require('better-sqlite3');\nconst db = new Database('/tmp/books.db');\n\ndb.exec(`\n    CREATE TABLE IF NOT EXISTS books (\n      id INTEGER PRIMARY KEY AUTOINCREMENT,\n      title TEXT NOT NULL,\n      author TEXT NOT NULL,\n      year INTEGER\n    )\n`);\n\ndb.exec(`\n  INSERT INTO books (title, author, year)\n    VALUES \n    ('1984', 'George Orwell', 1949),\n    ('Brave New World', 'Aldous Huxley', 1932),\n    ('Fahrenheit 451', 'Ray Bradbury', 1953)\n`);\n\nmodule.exports = db;",
                  "solvedContent": null
                },
                {
                  "name": "app.js",
                  "codeLanguage": "javascript",
                  "content": "const express = require('express');\nconst app = express();\nconst port = 3000;\n\napp.use(express.json());\n\napp.listen(port, function() {\n  console.log(`App is listening on port ${port}`);\n});",
                  "solvedContent": "const express = require('express');\nconst db = require('./database');\n\nconst app = express();\nconst port = 3000;\n\napp.use(express.json());\n\napp.listen(port, function() {\n  console.log(`App is listening on port ${port}`);\n});"
                }
              ],
              "hints": [],
              "httpOptions": {
                "method": "GET",
                "path": "/books",
                "body": null
              }
            }
          },
          {
            "title": "Lesson #8",
            "id": 132069,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Далее, давай создадим endpoint для получения всех книг.\n\n1. Используй `app.get`, чтобы создать новый маршрут GET для пути `/books`.\n2. Внутри обработчика маршрута используй импортированную `db`, чтобы выбрать все записи из таблицы `books`.\n3. Ответь объектом JSON, содержащим книги, и установи код состояния 200.",
              "preselectedFileIndex": 1,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "database.js",
                  "codeLanguage": "javascript",
                  "content": "const Database = require('better-sqlite3');\nconst db = new Database('/tmp/books.db');\n\ndb.exec(`\n    CREATE TABLE IF NOT EXISTS books (\n      id INTEGER PRIMARY KEY AUTOINCREMENT,\n      title TEXT NOT NULL,\n      author TEXT NOT NULL,\n      year INTEGER\n    )\n`);\n\ndb.exec(`\n  INSERT INTO books (title, author, year)\n    VALUES \n    ('1984', 'George Orwell', 1949),\n    ('Brave New World', 'Aldous Huxley', 1932),\n    ('Fahrenheit 451', 'Ray Bradbury', 1953)\n`);\n\nmodule.exports = db;",
                  "solvedContent": null
                },
                {
                  "name": "app.js",
                  "codeLanguage": "javascript",
                  "content": "const express = require('express');\nconst db = require('./database');\n\nconst app = express();\nconst port = 3000;\n\napp.use(express.json());\n\napp.listen(port, function() {\n  console.log(`App is listening on port ${port}`);\n});",
                  "solvedContent": "const express = require('express');\nconst db = require('./database');\n\nconst app = express();\nconst port = 3000;\n\napp.use(express.json());\n\napp.listen(port, function() {\n  console.log(`App is listening on port ${port}`);\n});\n\napp.get('/books', (req, res) => {\n  const rows = db.prepare('SELECT * FROM books').all();\n  res.status(200).json({\n    books: rows\n  });\n});"
                }
              ],
              "hints": [],
              "httpOptions": {
                "method": "GET",
                "path": "/books",
                "body": null
              }
            }
          },
          {
            "title": "Lesson #9",
            "id": 132070,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Теперь давай создадим endpoint для получения одной книги.\n\n1. Используй `app.get`, чтобы создать новый маршрут GET для пути `/books/:id`.\n2. Внутри обработчика маршрута деструктурируй `id` из `req.params`.\n3. Используй импортированную `db`, чтобы выбрать запись из таблицы `books` с совпадающим `id`.\n4. Ответь JSON объектом, содержащим книгу, и установи код состояния 200.",
              "preselectedFileIndex": 1,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "database.js",
                  "codeLanguage": "javascript",
                  "content": "const Database = require('better-sqlite3');\nconst db = new Database('/tmp/books.db');\n\ndb.exec(`\n    CREATE TABLE IF NOT EXISTS books (\n      id INTEGER PRIMARY KEY AUTOINCREMENT,\n      title TEXT NOT NULL,\n      author TEXT NOT NULL,\n      year INTEGER\n    )\n`);\n\ndb.exec(`\n  INSERT INTO books (title, author, year)\n    VALUES \n    ('1984', 'George Orwell', 1949),\n    ('Brave New World', 'Aldous Huxley', 1932),\n    ('Fahrenheit 451', 'Ray Bradbury', 1953)\n`);\n\nmodule.exports = db;",
                  "solvedContent": null
                },
                {
                  "name": "app.js",
                  "codeLanguage": "javascript",
                  "content": "const express = require('express');\nconst db = require('./database');\n\nconst app = express();\nconst port = 3000;\n\napp.use(express.json());\n\napp.listen(port, function() {\n  console.log(`App is listening on port ${port}`);\n});\n\napp.get('/books', (req, res) => {\n  const rows = db.prepare('SELECT * FROM books').all();\n  res.status(200).json({\n    books: rows\n  });\n});",
                  "solvedContent": "const express = require('express');\nconst db = require('./database');\n\nconst app = express();\nconst port = 3000;\n\napp.use(express.json());\n\napp.listen(port, function() {\n  console.log(`App is listening on port ${port}`);\n});\n\napp.get('/books', (req, res) => {\n  const rows = db.prepare('SELECT * FROM books').all();\n  res.status(200).json({\n    books: rows\n  });\n});\n\napp.get('/books/:id', (req, res) => {\n  const { id } = req.params;\n  const book = db.prepare('SELECT * FROM books WHERE id = ?').get(id);\n  \n  res.status(200).json({\n    book: book\n  });\n});\n"
                }
              ],
              "hints": [],
              "httpOptions": {
                "method": "GET",
                "path": "/books/1",
                "body": null
              }
            }
          },
          {
            "title": "Lesson #10",
            "id": 132071,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Теперь давай создадим endpoint для добавления новой книги.\n\n1. Используй `app.post`, чтобы создать новый POST маршрут для пути `/books`.\n2. Внутри обработчика маршрута деструктурируй `title`, `author` и `year` из `req.body`.\n3. Вставь новую строку в таблицу книг, используя предоставленные `title`, `author` и `year`.\n4. Ответь со статусом 201 и JSON объектом, содержащим ключ `\"bookId\"`, который хранит id новой книги.",
              "preselectedFileIndex": 1,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "database.js",
                  "codeLanguage": "javascript",
                  "content": "const Database = require('better-sqlite3');\nconst db = new Database('/tmp/books.db');\n\ndb.exec(`\n    CREATE TABLE IF NOT EXISTS books (\n      id INTEGER PRIMARY KEY AUTOINCREMENT,\n      title TEXT NOT NULL,\n      author TEXT NOT NULL,\n      year INTEGER\n    )\n`);\n\ndb.exec(`\n  INSERT INTO books (title, author, year)\n    VALUES \n    ('1984', 'George Orwell', 1949),\n    ('Brave New World', 'Aldous Huxley', 1932),\n    ('Fahrenheit 451', 'Ray Bradbury', 1953)\n`);\n\nmodule.exports = db;",
                  "solvedContent": null
                },
                {
                  "name": "app.js",
                  "codeLanguage": "javascript",
                  "content": "const express = require('express');\nconst db = require('./database');\n\nconst app = express();\nconst port = 3000;\n\napp.use(express.json());\n\napp.listen(port, function() {\n  console.log(`App is listening on port ${port}`);\n});\n\napp.get('/books', (req, res) => {\n  const rows = db.prepare('SELECT * FROM books').all();\n  res.status(200).json({\n    books: rows\n  });\n});\n\napp.get('/books/:id', (req, res) => {\n  const { id } = req.params;\n  const book = db.prepare('SELECT * FROM books WHERE id = ?').get(id);\n  \n  res.status(200).json({\n    book: book\n  });\n});\n",
                  "solvedContent": "const express = require('express');\nconst db = require('./database');\n\nconst app = express();\nconst port = 3000;\n\napp.use(express.json());\n\napp.listen(port, function() {\n  console.log(`App is listening on port ${port}`);\n});\n\napp.get('/books', (req, res) => {\n  const rows = db.prepare('SELECT * FROM books').all();\n  res.status(200).json({\n    books: rows\n  });\n});\n\napp.get('/books/:id', (req, res) => {\n  const { id } = req.params;\n  const book = db.prepare('SELECT * FROM books WHERE id = ?').get(id);\n  \n  res.status(200).json({\n    book: book\n  });\n});\n\napp.post('/books', (req, res) => {\n  const { title, author, year } = req.body;\n\n  const insert = db.prepare('INSERT INTO books (title, author, year) VALUES (?, ?, ?)');\n  const result = insert.run(title, author, year);\n\n  res.status(201).json({\n    bookId: result.lastInsertRowid\n  });\n});"
                }
              ],
              "hints": [],
              "httpOptions": {
                "method": "POST",
                "path": "/books",
                "body": "{\n  \"title\": \"My Book\",\n  \"author\": \"Me\",\n  \"year\": 2024\n}"
              }
            }
          }
        ]
      }
    ]
  }
}