{
  "tutorial": {
    "id": 2652,
    "version": 5,
    "type": "challenges",
    "isNew": false,
    "codeLanguage": "python",
    "title": "Списки",
    "descriptionContent": "Задания на основе списков",
    "shortDescriptionContent": "",
    "showInTrack": true,
    "iconBanner": null,
    "chapters": [
      {
        "id": 14670,
        "title": "Планирование питания",
        "type": "challengeLevel0",
        "lessons": [
          {
            "title": "Meal Planning",
            "id": 129698,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Вы решаете планировать свои ежедневные приемы пищи, используя списки в Python.\n\n1. В переменной `meals` создайте список, содержащий ваши приемы пищи на завтрак, обед и ужин в следующем порядке: `\"omelet\"`, `\"salad\"`, и `\"chicken\"`.\n2. Измените первый оператор `print`, чтобы включить меню обеда.\n3. Друг зашел с пиццей! Измените значение ужина в списке `meals` (последнее значение) на `\"pizza\"`.\n4. Измените второй оператор `print`, чтобы включить текущий пункт меню ужина!",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "meals = \n\nprint(f\"Lunch menu: {}\")\n\nprint(f\"Dinner menu: {}\")",
                  "solvedContent": "meals = [\"omelet\", \"salad\", \"chicken\"]\n\nprint(f\"Lunch menu: {meals[1]}\")\nmeals[2] = \"pizza\"\nprint(f\"Dinner menu: {meals[2]}\")"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 14671,
        "title": "Замены в волейболе",
        "type": "challengeLevel0",
        "lessons": [
          {
            "title": "Volleyball Subs",
            "id": 129699,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Настало время турнира для вашей волейбольной лиги, но многие из ваших товарищей по команде уехали из города на длинные выходные. Похоже, нам придется сделать несколько замен!\n\n1. Используйте операцию со списком, чтобы заменить `\"Iliana\"` на `\"Jack\"` ( `sub_1` ).\n2. Замените `\"Anders\"` на `\"Celeste\"` ( `sub_2` ).\n3. Замените `\"Gabrielle\"` на `\"Mary\"` ( `sub_3` ).\n\nВремя матча. Вперед, команда!",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "players = [\"Iliana\", \"Samuel\", \"Anders\", \"Teresa\", \"Gabrielle\", \"Alejandro\"]\nsub1 = \"Jack\"\nsub2 = \"Celeste\"\nsub3 = \"Mary\"\n\n",
                  "solvedContent": "players = [\"Iliana\", \"Samuel\", \"Anders\", \"Teresa\", \"Gabrielle\", \"Alejandro\"]\nsub1 = \"Jack\"\nsub2 = \"Celeste\"\nsub3 = \"Mary\"\n\nplayers[0] = sub1\nplayers[2] = sub2\nplayers[4] = sub3"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 14672,
        "title": "Напоминания о списке покупок",
        "type": "challengeLevel0",
        "lessons": [
          {
            "title": "Shopping List Reminders",
            "id": 129700,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Давай используем циклы `for`, чтобы не забыть про наш список `shopping_list`!\n\n1. Для каждого элемента выведи напоминание в следующем формате: `\"Не забудь купить <...>!\"`.\n2. Замени `<...>` значением текущего элемента списка покупок в твоем цикле.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "shopping_list = [\"dish soap\", \"kleenex\", \"batteries\", \"aluminum foil\", \"pet food\", \"toothpaste\", \"lightbulbs\"]\n\n",
                  "solvedContent": "shopping_list = [\"dish soap\", \"kleenex\", \"batteries\", \"aluminum foil\", \"pet food\", \"toothpaste\", \"lightbulbs\"]\n\nfor item in shopping_list:\n print(f\"Don't forget to buy {item}!\")"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 14673,
        "title": "Индекс влажности леса",
        "type": "challengeLevel0",
        "lessons": [
          {
            "title": "Forest Humidity Index",
            "id": 129701,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Габ - географ, изучающий уровень влажности в лесах. Габ собрал данные об уровне влажности из 50 участков леса и хочет узнать, какие самые высокие и низкие уровни влажности в лесу. Используя `min()` и `max()`, найди и выведи эти уровни из списка `humidity` для Габа.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "humidity = [77.78, 65.51, 74.42, 80.48, 71.71, 68.39, 65.10, 71.26, 75.95, 81.29, 71.54, 80.85, 84.45, 84.23, 83.18, 68.59, 80.83, 84.72, 78.23, 74.44, 83.20, 74.90, 80.59, 75.09, 82.46, 67.96, 77.65, 69.51, 74.57, 72.98, 66.01, 67.89, 82.52, 65.15, 70.07, 66.84, 74.74, 82.16, 73.73, 82.23, 66.47, 68.70, 71.28, 67.42, 82.87, 66.41, 80.43, 83.42, 74.70, 83.97]",
                  "solvedContent": "humidity = [77.78, 65.51, 74.42, 80.48, 71.71, 68.39, 65.10, 71.26, 75.95, 81.29, 71.54, 80.85, 84.45, 84.23, 83.18, 68.59, 80.83, 84.72, 78.23, 74.44, 83.20, 74.90, 80.59, 75.09, 82.46, 67.96, 77.65, 69.51, 74.57, 72.98, 66.01, 67.89, 82.52, 65.15, 70.07, 66.84, 74.74, 82.16, 73.73, 82.23, 66.47, 68.70, 71.28, 67.42, 82.87, 66.41, 80.43, 83.42, 74.70, 83.97]\r\nprint(min(humidity))\r\nprint(max(humidity))"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 14674,
        "title": "Дисквалифицированный участник",
        "type": "challengeLevel0",
        "lessons": [
          {
            "title": "Disqualified Participant",
            "id": 129702,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "У нас есть ежемесячный турнир, и мы записываем имя чемпиона в список `champions`. Недавно мы узнали, что постоянный участник `\"Tooti3\"` жульничал. Нам нужно проверить, выигрывал ли `\"Tooti3\"` какие-либо турниры, и удалить его из списка. Узнай, сколько раз `\"Tooti3\"` появляется в списке `champions`, используя `count()`, затем выведи результат в консоль.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "champions = [\"Miracle+\", \"Tooti3\", \"Orustat\", \"Emkay\", \"mizuhana\", \"CaptainSpark\", \"NichMercs\", \"mizuhana\", \"dabian\", \"Cyle\",  \"Tooti3\", \"Flaker\"]",
                  "solvedContent": "champions = [\"Miracle+\", \"Tooti3\", \"Orustat\", \"Emkay\", \"mizuhana\", \"CaptainSpark\", \"NichMercs\", \"mizuhana\", \"dabian\", \"Cyle\",  \"Tooti3\", \"Flaker\"]\r\nprint(champions.count(\"Tooti3\"))"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 14675,
        "title": "Сберегательный счет",
        "type": "challengeLevel0",
        "lessons": [
          {
            "title": "Savings Account",
            "id": 129703,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Джо записывает, сколько денег он откладывал каждый месяц, в список под названием `savings`. Помоги Джо вычислить его общие сбережения за год, используя `sum()`, и выведи результат в консоль.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "savings = [122, 50, 102, 103, 79, 46, 107, 9, 13, 91, 193, 4]",
                  "solvedContent": "savings = [122, 50, 102, 103, 79, 46, 107, 9, 13, 91, 193, 4]\r\nprint(sum(savings))"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 13970,
        "title": "Фильтрация крупных снятий",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "Filtering Large Withdrawals",
            "id": 124070,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Чтобы лучше понять свои привычки в расходах, вы хотите иметь возможность просматривать все снятия, превышающие или равные установленному порогу снятия.\n\n1. Пройдитесь в цикле по `withdrawals`.\n2. Если сумма снятия больше или равна `withdrawal_threshold`, добавьте её в список `large_withdrawals`.\n4. В конце выведите количество элементов в итоговом списке `large_withdrawals`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "withdrawals = [25, 195, 6, 34, 18, 99, 110, 7, 87, 38, 101, 77, 250]\nwithdrawal_threshold = 100\nlarge_withdrawals = []\n\n",
                  "solvedContent": "withdrawals = [25, 195, 6, 34, 18, 99, 110, 7, 87, 38, 101, 77, 250]\nwithdrawal_threshold = 100\nlarge_withdrawals = []\n\nfor withdrawal in withdrawals:\n if withdrawal >= withdrawal_threshold:\n  large_withdrawals.append(withdrawal)\n\nprint(len(large_withdrawals))"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 13951,
        "title": "Сортировка",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "Sorting",
            "id": 123980,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Списки `students_1E` и `students_1F` содержат имена учеников классов `1E` и `1F` соответственно. Из-за некоторой реструктуризации школы ученики из обоих классов будут объединены. Объедини `students_1F` с `students_1E` и отсортируй их имена в алфавитном порядке. Выведи объединенный список в консоль.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "students_1E = [\"Leslie\", \"Shyanne\", \"Cayden\", \"Karla\", \"Monika\", \"Abigale\", \"Tristen\", \"Salena\", \"Rosalie\", \"Francisca\", \"Harris\"]\r\nstudents_1F = [\"Mackenzie\", \"Trey\", \"Dashawn\", \"Jamia\", \"Emilio\", \"Desean\", \"Lucero\", \"Lilly\", \"Justice\", \"Cale\"]",
                  "solvedContent": "students_1E = [\"Leslie\", \"Shyanne\", \"Cayden\", \"Karla\", \"Monika\", \"Abigale\", \"Tristen\", \"Salena\", \"Rosalie\", \"Francisca\", \"Harris\"]\r\nstudents_1F = [\"Mackenzie\", \"Trey\", \"Dashawn\", \"Jamia\", \"Emilio\", \"Desean\", \"Lucero\", \"Lilly\", \"Justice\", \"Cale\"]\r\nstudents_1E += students_1F\r\nstudents_1E.sort()\r\nprint(students_1E)"
                }
              ],
              "hints": []
            }
          }
        ]
      }
    ]
  }
}