{
  "tutorial": {
    "id": 1779,
    "version": 10,
    "type": "guidedProjectOptional",
    "isNew": false,
    "codeLanguage": "javascript",
    "title": "Воспроизведи снова",
    "descriptionContent": "Используй объекты и методы объектов, чтобы имитировать потоковую платформу",
    "shortDescriptionContent": "",
    "showInTrack": true,
    "iconBanner": "tutorial-1779-icon-banner.svg",
    "chapters": [
      {
        "id": 11743,
        "title": "Воспроизведи снова",
        "type": "practiceLevel3",
        "lessons": [
          {
            "title": "Starter code",
            "id": 107846,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Наш стриминговый сервис производит собственное шоу. Давай добавим несколько методов, чтобы начать стриминг и увеличить количество `\"views\"`.\n\nМы уже добавили немного кода, чтобы помочь тебе начать.\n\nМы определили объект с именем `show` с двумя свойствами: `name` и `views`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const show = {\r\n  name: \"Pick and Shorty\",\r\n  views: 10\r\n};",
                  "solvedContent": null
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Play it",
            "id": 107579,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Во-первых, начнем с создания метода.\n\n1. Дай объекту `show` метод под названием `play`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const show = {\r\n  name: \"Pick and Shorty\",\r\n  views: 10\r\n};",
                  "solvedContent": "const show = {\r\n  name: \"Pick and Shorty\",\r\n  views: 10,\r\n  play: function() {}\r\n};"
                }
              ],
              "hints": [
                {
                  "title": "Hint",
                  "content": "Use `play: function ( ) { }` to create a method in `show` object. \nRemember to add a comma after `views`, before the method."
                }
              ]
            }
          },
          {
            "title": "Getting properties with \"this\"",
            "id": 107575,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Давайте также получим название шоу внутри функции.\n\n1. Создайте `const showName` внутри метода `play` и установите его равным свойству `name` объекта.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const show = {\n name: \"Pick and Shorty\",\n views: 10,\n play : function () {\n\n }\n};",
                  "solvedContent": "const show = {\n name: \"Pick and Shorty\",\n views: 10,\n play : function () {\n  const showName = this.name;\n }\n};"
                }
              ],
              "hints": [
                {
                  "title": "Hint",
                  "content": "Use `this` keyword to refer to the show's name inside an object."
                }
              ]
            }
          },
          {
            "title": "Displaying properties",
            "id": 107580,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Теперь, когда у нас есть название шоу в функции, давайте отобразим его в консоли.\n\n1. Внутри метода `play` выведите на экран предложение `\"Now Playing \"`, за которым следует значение переменной `showName`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const show = {\n  name: \"Pick and Shorty\",\n  views: 10,\n  play: function() {\n    const showName = this.name;\n  }\n};",
                  "solvedContent": "const show = {\n  name: \"Pick and Shorty\",\n  views: 10,\n  play: function() {\n    const showName = this.name;\n    console.log(\"Now Playing \" + showName);\n  }\n};"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Calling a method",
            "id": 107569,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Теперь, когда наш метод установлен, давайте вызовем метод и запустим шоу.\n\n1. Вызови метод `play` объекта `show` ниже объекта.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const show = {\n  name: \"Pick and Shorty\",\n  views: 10,\n  play: function() {\n    const showName = this.name;\n    console.log(\"Now Playing \" + showName);\n  }\n};",
                  "solvedContent": "const show = {\n  name: \"Pick and Shorty\",\n  views: 10,\n  play: function() {\n    const showName = this.name;\n    console.log(\"Now Playing \" + showName);\n  }\n};\nshow.play();"
                }
              ],
              "hints": [
                {
                  "title": "Hint",
                  "content": "To call a method, the syntax is : `objectName.methodName()`."
                }
              ]
            }
          },
          {
            "title": "Add views",
            "id": 107581,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Но только играть недостаточно. Нам нужно добавить просмотры тоже!\n\n1. Дай объекту `show` второй метод под названием `addViews`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const show = {\n  name: \"Pick and Shorty\",\n  views: 10,\n  play: function() {\n    const showName = this.name;\n    console.log(\"Now Playing \" + showName);\n  }\n};\nshow.play();",
                  "solvedContent": "const show = {\n  name: \"Pick and Shorty\",\n  views: 10,\n  play: function() {\n    const showName = this.name;\n    console.log(\"Now Playing \" + showName);\n  },\n  addViews: function() {}\n};\nshow.play();"
                }
              ],
              "hints": [
                {
                  "title": "Hint",
                  "content": "To create a method, the syntax is : `methodName : function ( ) { }`. \nRemember to add a comma `,` before the new method."
                }
              ]
            }
          },
          {
            "title": "Adding a parameter",
            "id": 107577,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Далее мы добавим параметр в метод `addViews`. Этот параметр будет передавать количество просмотров.\n\n1. Измени метод `addViews`, чтобы он принимал параметр `numberViews`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const show = {\n  name: \"Pick and Shorty\",\n  views: 10,\n  play: function() {\n    const showName = this.name;\n    console.log(\"Now Playing \" + showName);\n  },\n  addViews: function() {}\n};\nshow.play();",
                  "solvedContent": "const show = {\n  name: \"Pick and Shorty\",\n  views: 10,\n  play: function() {\n    const showName = this.name;\n    console.log(\"Now Playing \" + showName);\n  },\n  addViews: function(numberViews) {}\n};\nshow.play();"
                }
              ],
              "hints": [
                {
                  "title": "Hint",
                  "content": "Specify parameters inside the parentheses after the `function` keyword. "
                }
              ]
            }
          },
          {
            "title": "Updating properties with \"this\"",
            "id": 107567,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Значение, переданное как `numberViews`, должно быть добавлено к свойству `views`.\n\n1. Внутри метода `addViews` используйте самоприсваивание, чтобы увеличить значение свойства `views` на `numberViews`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const show = {\n  name: \"Pick and Shorty\",\n  views: 10,\n  play: function() {\n    const showName = this.name;\n    console.log(\"Now Playing \" + showName);\n  },\n  addViews: function(numberViews) {}\n};\nshow.play();",
                  "solvedContent": "const show = {\n  name: \"Pick and Shorty\",\n  views: 10,\n  play: function() {\n    const showName = this.name;\n    console.log(\"Now Playing \" + showName);\n  },\n  addViews: function(numberViews) {\n    this.views = this.views + numberViews;\n  }\n};\nshow.play();"
                }
              ],
              "hints": [
                {
                  "title": "Hint",
                  "content": "Access an object's property using `this`, like `this.views`."
                }
              ]
            }
          },
          {
            "title": "Calling a method",
            "id": 107570,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "После того как мы воспроизведем шоу, количество `views` должно увеличиться на `1`.\n\n1. Добавь строку после `show.play();`, чтобы вызвать `addViews`, передав `1` в качестве аргумента.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const show = {\n  name: \"Pick and Shorty\",\n  views: 10,\n  play: function() {\n    const showName = this.name;\n    console.log(\"Now Playing \" + showName);\n  },\n  addViews: function(numberViews) {\n    this.views = this.views + numberViews;\n  }\n};\nshow.play();",
                  "solvedContent": "const show = {\n  name: \"Pick and Shorty\",\n  views: 10,\n  play: function() {\n    const showName = this.name;\n    console.log(\"Now Playing \" + showName);\n  },\n  addViews: function(numberViews) {\n    this.views = this.views + numberViews;\n  }\n};\nshow.play();\nshow.addViews(1);"
                }
              ],
              "hints": [
                {
                  "title": "Hint",
                  "content": "To pass a value while calling a method, the syntax is : `objectName.methodName(value1, value2...)`."
                }
              ]
            }
          },
          {
            "title": "Returning a value",
            "id": 107578,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Мы также вернем общее количество просмотров.\n\n1. Добавь строку для возврата `this.views` в конце `addViews`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const show = {\n  name: \"Pick and Shorty\",\n  views: 10,\n  play: function() {\n    const showName = this.name;\n    console.log(\"Now Playing \" + showName);\n  },\n  addViews: function(numberViews) {\n    this.views = this.views + numberViews;\n  }\n};\nshow.play();\nshow.addViews(1);",
                  "solvedContent": "const show = {\n  name: \"Pick and Shorty\",\n  views: 10,\n  play: function() {\n    const showName = this.name;\n    console.log(\"Now Playing \" + showName);\n  },\n  addViews: function(numberViews) {\n    this.views = this.views + numberViews;\n    return this.views;\n  }\n};\nshow.play();\nshow.addViews(1);"
                }
              ],
              "hints": [
                {
                  "title": "Hint",
                  "content": "Use the `return` keyword to return values. "
                }
              ]
            }
          },
          {
            "title": "Displaying return value",
            "id": 107572,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Давайте проверим, работает ли `addViews` так, как мы ожидаем.\n\n1. Отредактируй код и помести `show.addViews(1)` внутрь оператора `console.log()`, чтобы отобразить возвращаемое значение.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "const show = {\n  name: \"Pick and Shorty\",\n  views: 10,\n  play: function() {\n    const showName = this.name;\n    console.log(\"Now Playing \" + showName);\n  },\n  addViews: function(numberViews) {\n    this.views = this.views + numberViews;\n    return this.views;\n  }\n};\nshow.play();\nshow.addViews(1);",
                  "solvedContent": "const show = {\n  name: \"Pick and Shorty\",\n  views: 10,\n  play: function() {\n    const showName = this.name;\n    console.log(\"Now Playing \" + showName);\n  },\n  addViews: function(numberViews) {\n    this.views = this.views + numberViews;\n    return this.views;\n  }\n};\nshow.play();\nconsole.log(show.addViews(1));"
                }
              ],
              "hints": []
            }
          }
        ]
      }
    ]
  }
}