{
  "tutorial": {
    "id": 3138,
    "version": 3,
    "type": "guidedProject",
    "isNew": true,
    "codeLanguage": "node",
    "title": "Пиксельная сетка - Часть 1",
    "descriptionContent": "Создайте приложение для совместного рисования, которое позволит вашим пользователям проявить креативность. В первой части вы настроите начальную серверную часть.",
    "shortDescriptionContent": "",
    "showInTrack": true,
    "iconBanner": "tutorial-3138-icon-banner.svg",
    "chapters": [
      {
        "id": 15457,
        "title": "Глава №1",
        "type": "practiceLevel3",
        "lessons": [
          {
            "title": "Lesson #1",
            "id": 135904,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Добро пожаловать в проект **Pixel Grid**. Мы создадим back-end и front-end для приложения для совместного рисования, которое позволит вашим пользователям проявить креативность. Back-end будет хранить сетку 20 x 20 пикселей и цвет каждого пикселя. Front-end будет использовать API back-end для отображения сетки и обновления значений пикселей на основе ввода пользователя.\n\nНачнем с настройки back-end, используя сервер Express.\n\n1. Объявите переменную `express` и подключите модуль `express`.\n2. Объявите переменную `app` и инициализируйте ее, вызвав функцию `express`.\n3. Объявите переменную `PORT` и присвойте ей значение `3000`.\n4. Используйте функцию `listen` на `app`, чтобы приложение слушало порт, указанный в переменной `PORT`.\n5. Выведите сообщение в консоль внутри обратного вызова функции `listen`, чтобы мы знали, что наш сервер работает правильно.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "app.js",
                  "codeLanguage": "javascript",
                  "content": "",
                  "solvedContent": "const express = require(\"express\");\nconst app = express();\nconst PORT = 3000;\n\napp.listen(PORT, () => {\n  console.log(`Server is running on port ${PORT}`);\n});"
                },
                {
                  "name": "database.js",
                  "codeLanguage": "javascript",
                  "content": "",
                  "solvedContent": null
                }
              ],
              "hints": [],
              "httpOptions": {
                "method": "GET",
                "path": "/",
                "body": null
              }
            }
          },
          {
            "title": "Lesson #2",
            "id": 135905,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Мы будем сохранять рисунки наших пользователей в базе данных SQLite. Для этой цели мы будем использовать библиотеку `better-sqlite3`.\n\n1. В файле `database.js` импортируй модуль `better-sqlite3`, используя `require(\"better-sqlite3\")`. Присвой полученный объект константе с именем `Database`.\n2. Создай новую базу данных SQLite с именем `grid.db`, вызвав `new Database(\"/tmp/grid.db\")`. Сохрани объект базы данных в константу с именем `db`.",
              "preselectedFileIndex": 1,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "app.js",
                  "codeLanguage": "javascript",
                  "content": "const express = require(\"express\");\nconst app = express();\nconst PORT = 3000;\n\napp.listen(PORT, () => {\n  console.log(`Server is running on port ${PORT}`);\n});\n",
                  "solvedContent": null
                },
                {
                  "name": "database.js",
                  "codeLanguage": "javascript",
                  "content": "",
                  "solvedContent": "const Database = require(\"better-sqlite3\");\nconst db = new Database(\"/tmp/grid.db\");\n"
                }
              ],
              "hints": [],
              "httpOptions": {
                "method": "GET",
                "path": "/",
                "body": null
              }
            }
          },
          {
            "title": "Lesson #3",
            "id": 135906,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "После настройки базы данных мы создадим таблицу `grid` для хранения данных сетки. Каждая запись в этой таблице будет представлять один пиксель. Нам нужны столбцы для координат `x` и `y`, а также для цвета, который должен отображать пиксель.\n\n1. Используй метод `db.exec` для выполнения SQL-команды.\n2. В качестве аргумента метода `db.exec` добавь SQL-команду для создания таблицы `grid` со следующими столбцами:\n   - `x`: int\n   - `y`: int\n   - `color`: text\n3. Чтобы избежать добавления все большего количества пикселей в базу данных каждый раз при выполнении файла `database.js`, измени SQL-команду так, чтобы таблица создавалась только в том случае, если она еще не существует.",
              "preselectedFileIndex": 1,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "app.js",
                  "codeLanguage": "javascript",
                  "content": "const express = require(\"express\");\nconst app = express();\nconst PORT = 3000;\n\napp.listen(PORT, () => {\n  console.log(`Server is running on port ${PORT}`);\n});\n",
                  "solvedContent": null
                },
                {
                  "name": "database.js",
                  "codeLanguage": "javascript",
                  "content": "const Database = require(\"better-sqlite3\");\nconst db = new Database(\"/tmp/grid.db\");\n",
                  "solvedContent": "const Database = require(\"better-sqlite3\");\nconst db = new Database(\"/tmp/grid.db\");\n\ndb.exec(`\n  CREATE TABLE IF NOT EXISTS grid (\n    x INT,\n    y INT,\n    color TEXT\n  )\n`);\n"
                }
              ],
              "hints": [],
              "httpOptions": {
                "method": "GET",
                "path": "/",
                "body": null
              }
            }
          },
          {
            "title": "Lesson #5",
            "id": 135908,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Чтобы подключение к базе данных можно было использовать в других файлах, нам нужно его экспортировать.\n\n1. Используя `module.exports`, экспортируй `db` в конце файла.",
              "preselectedFileIndex": 1,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "app.js",
                  "codeLanguage": "javascript",
                  "content": "const express = require(\"express\");\nconst app = express();\nconst PORT = 3000;\n\napp.listen(PORT, () => {\n  console.log(`Server is running on port ${PORT}`);\n});\n",
                  "solvedContent": null
                },
                {
                  "name": "database.js",
                  "codeLanguage": "javascript",
                  "content": "const Database = require(\"better-sqlite3\");\nconst db = new Database(\"/tmp/grid.db\");\n\ndb.exec(`\n  CREATE TABLE IF NOT EXISTS grid (\n    x INT,\n    y INT,\n    color TEXT\n  )\n`);\n",
                  "solvedContent": "const Database = require(\"better-sqlite3\");\nconst db = new Database(\"/tmp/grid.db\");\n\ndb.exec(`\n  CREATE TABLE IF NOT EXISTS grid (\n    x INT,\n    y INT,\n    color TEXT\n  )\n`);\n\nmodule.exports = db;\n"
                }
              ],
              "hints": [],
              "httpOptions": {
                "method": "GET",
                "path": "/",
                "body": null
              }
            }
          },
          {
            "title": "Lesson #6",
            "id": 135909,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "В нашем приложении Express мы подключимся к базе данных SQLite, используя файл `database.js`.\n\n1. Импортируй модуль `db`, который ты экспортировал из файла базы данных, с помощью оператора `require` в файле приложения.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "app.js",
                  "codeLanguage": "javascript",
                  "content": "const express = require(\"express\");\nconst app = express();\nconst PORT = 3000;\n\napp.listen(PORT, () => {\n  console.log(`Server is running on port ${PORT}`);\n});\n",
                  "solvedContent": "const express = require(\"express\");\nconst db = require(\"./database\");\nconst app = express();\nconst PORT = 3000;\n\napp.listen(PORT, () => {\n  console.log(`Server is running on port ${PORT}`);\n});\n"
                },
                {
                  "name": "database.js",
                  "codeLanguage": "javascript",
                  "content": "const Database = require(\"better-sqlite3\");\nconst db = new Database(\"/tmp/grid.db\");\n\ndb.exec(`\n  CREATE TABLE IF NOT EXISTS grid (\n    x INT,\n    y INT,\n    color TEXT\n  )\n`);\n\nmodule.exports = db;\n",
                  "solvedContent": null
                }
              ],
              "hints": [],
              "httpOptions": {
                "method": "GET",
                "path": "/",
                "body": null
              }
            }
          },
          {
            "title": "Lesson #4",
            "id": 135907,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Мы можем получить доступ к базе данных, и таблица сетки готова. Далее мы заполним таблицу некоторыми стандартными точками сетки в качестве начальных данных. Конечно, нам нужно будет заполнять таблицу только если она еще пуста.\n\n1. Чтобы проверить, нужно ли заполнять таблицу начальными данными, используйте SQL-запрос для подсчета количества существующих строк в таблице и сохраните возвращаемое значение в константе, например, `rowCount`.\n2. Создайте сетку из 400 объектов точек сетки. Каждый объект должен иметь свойства *x* и *y*, представляющие координаты, и свойство *color*.\n   - Используйте два вложенных цикла `for` для создания сетки из 400 объектов.\n   - Внешний цикл должен представлять строки (значения x от `0` до `19`).\n   - Внутренний цикл должен представлять столбцы (значения y от `0` до `19`).\n   - Каждый объект сетки должен иметь цвет \"white\".\n   - Сохраните все эти объекты в одном массиве.\n3. Вставьте сетку в базу данных, если в таблице сетки еще нет строк.\n   - Подготовьте оператор `INSERT INTO`, например, `INSERT INTO grid (x, y, color) VALUES (?, ?, ?)`.\n   - Используйте `db.transaction`, чтобы сгруппировать все вставки для повышения производительности и надежности.\n   - Запустите определенную транзакцию и передайте ей массив объектов сетки, чтобы вставить все 400 точек сетки в базу данных за одну операцию.",
              "preselectedFileIndex": 1,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "app.js",
                  "codeLanguage": "javascript",
                  "content": "const express = require(\"express\");\nconst db = require(\"./database\");\nconst app = express();\nconst PORT = 3000;\n\napp.listen(PORT, () => {\n  console.log(`Server is running on port ${PORT}`);\n});\n",
                  "solvedContent": null
                },
                {
                  "name": "database.js",
                  "codeLanguage": "javascript",
                  "content": "const Database = require(\"better-sqlite3\");\nconst db = new Database(\"/tmp/grid.db\");\n\ndb.exec(`\n  CREATE TABLE IF NOT EXISTS grid (\n    x INT,\n    y INT,\n    color TEXT\n  )\n`);\n\nmodule.exports = db;\n",
                  "solvedContent": "const Database = require(\"better-sqlite3\");\nconst db = new Database(\"/tmp/grid.db\");\n\ndb.exec(`\n  CREATE TABLE IF NOT EXISTS grid (\n    x INT,\n    y INT,\n    color TEXT\n  )\n`);\n\nconst rowCount = db.prepare(\"SELECT COUNT(*) AS count FROM grid\").get().count;\n\nif (rowCount === 0) {\n  const grid = [];\n  for (let x = 0; x < 20; x++) {\n    for (let y = 0; y < 20; y++) {\n      grid.push({ x, y, color: \"white\" });\n    }\n  }\n\n  const insertStatement = db.prepare(\n    `INSERT INTO grid (x, y, color) VALUES (?, ?, ?)`,\n  );\n  const insertTransaction = db.transaction((rows) => {\n    for (const row of rows) {\n      insertStatement.run(row.x, row.y, row.color);\n    }\n  });\n\n  insertTransaction(grid);\n}\n\nmodule.exports = db;\n"
                }
              ],
              "hints": [],
              "httpOptions": {
                "method": "GET",
                "path": "/",
                "body": null
              }
            }
          },
          {
            "title": "Lesson #7",
            "id": 135910,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Далее давай настроим маршрут `\"/grid\"` для получения данных сетки, чтобы фронтенд мог получить доступ к данным из базы данных. Мы будем использовать этот endpoint для извлечения всех строк из нашей таблицы сетки и отправки их в виде JSON-ответа.\n\n1. Определи новый endpoint `\"/grid\"`.\n2. Внутри маршрута напиши SQL-команду `SELECT` с использованием `db.prepare(\"SELECT ...\").all()`, чтобы извлечь все строки сетки.\n3. Отправь извлеченные строки обратно в виде JSON-ответа в свойстве *grid*. Убедись, что статус установлен на `200`.\n4. Используй блок `try-catch` для обработки возможных ошибок. Если возникнет ошибка, установи статус `500` и отправь обратно JSON-ответ со свойством *message*, которое сообщает клиенту о возникшей проблеме.\n\nВ следующей части проекта мы будем использовать этот endpoint для отображения сетки.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "app.js",
                  "codeLanguage": "javascript",
                  "content": "const express = require(\"express\");\nconst db = require(\"./database\");\nconst app = express();\nconst PORT = 3000;\n\n\napp.listen(PORT, () => {\n  console.log(`Server is running on port ${PORT}`);\n});\n",
                  "solvedContent": "const express = require(\"express\");\nconst db = require(\"./database\");\nconst app = express();\nconst PORT = 3000;\n\napp.get(\"/grid\", (req, res) => {\n  try {\n    const rows = db.prepare(\"SELECT * FROM grid\").all();\n    res.status(200).json({ grid: rows });\n  } catch (error) {\n    res.status(500).json({ message: \"Error fetching grid data\", error });\n  }\n});\n\napp.listen(PORT, () => {\n  console.log(`Server is running on port ${PORT}`);\n});\n"
                },
                {
                  "name": "database.js",
                  "codeLanguage": "javascript",
                  "content": "const Database = require(\"better-sqlite3\");\nconst db = new Database(\"/tmp/grid.db\");\n\ndb.exec(`\n  CREATE TABLE IF NOT EXISTS grid (\n    x INT,\n    y INT,\n    color TEXT\n  )\n`);\n\nconst rowCount = db.prepare(\"SELECT COUNT(*) AS count FROM grid\").get().count;\n\nif (rowCount === 0) {\n  const grid = [];\n  for (let x = 0; x < 20; x++) {\n    for (let y = 0; y < 20; y++) {\n      grid.push({ x, y, color: \"white\" });\n    }\n  }\n\n  const insertStatement = db.prepare(\n    `INSERT INTO grid (x, y, color) VALUES (?, ?, ?)`,\n  );\n  const insertTransaction = db.transaction((rows) => {\n    for (const row of rows) {\n      insertStatement.run(row.x, row.y, row.color);\n    }\n  });\n\n  insertTransaction(grid);\n}\n\nmodule.exports = db;\n",
                  "solvedContent": null
                }
              ],
              "hints": [],
              "httpOptions": {
                "method": "GET",
                "path": "/grid",
                "body": null
              }
            }
          },
          {
            "title": "Lesson #7 - Copy",
            "id": 135937,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Прежде чем мы сможем перейти к front-end, нам нужно разрешить CORS, что означает *Cross-Origin Resource Sharing*. CORS — это механизм, который позволяет серверу принимать запросы с другого домена, обеспечивая безопасное взаимодействие между серверами и front-end клиентами, размещенными на разных источниках. Нам понадобится CORS, потому что back-end будет размещен на другом домене, чем front-end, что браузеры по умолчанию ограничивают по соображениям безопасности.\n\nИмпортируя пакет CORS, мы можем разрешить CORS и включить кросс-доменные запросы на нашем сервере.\n\n1. Подключите пакет `\"cors\"` и присвойте его переменной с именем `cors`.\n2. Заставьте приложение использовать импортированный middleware `cors`, вызвав `app.use` и передав функцию `cors()` в качестве параметра.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "app.js",
                  "codeLanguage": "javascript",
                  "content": "const express = require(\"express\");\nconst db = require(\"./database\");\nconst app = express();\nconst PORT = 3000;\n\napp.get(\"/grid\", (req, res) => {\n  try {\n    const rows = db.prepare(\"SELECT * FROM grid\").all();\n    res.status(200).json({ grid: rows });\n  } catch (error) {\n    res.status(500).json({ message: \"Error fetching grid data\", error });\n  }\n});\n\napp.listen(PORT, () => {\n  console.log(`Server is running on port ${PORT}`);\n});\n",
                  "solvedContent": "const express = require(\"express\");\nconst cors = require(\"cors\");\nconst db = require(\"./database\");\nconst app = express();\nconst PORT = 3000;\n\napp.use(cors());\n\napp.get(\"/grid\", (req, res) => {\n  try {\n    const rows = db.prepare(\"SELECT * FROM grid\").all();\n    res.status(200).json({ grid: rows });\n  } catch (error) {\n    res.status(500).json({ message: \"Error fetching grid data\", error });\n  }\n});\n\napp.listen(PORT, () => {\n  console.log(`Server is running on port ${PORT}`);\n});\n"
                },
                {
                  "name": "database.js",
                  "codeLanguage": "javascript",
                  "content": "const Database = require(\"better-sqlite3\");\nconst db = new Database(\"/tmp/grid.db\");\n\ndb.exec(`\n  CREATE TABLE IF NOT EXISTS grid (\n    x INT,\n    y INT,\n    color TEXT\n  )\n`);\n\nconst rowCount = db.prepare(\"SELECT COUNT(*) AS count FROM grid\").get().count;\n\nif (rowCount === 0) {\n  const grid = [];\n  for (let x = 0; x < 20; x++) {\n    for (let y = 0; y < 20; y++) {\n      grid.push({ x, y, color: \"white\" });\n    }\n  }\n\n  const insertStatement = db.prepare(\n    `INSERT INTO grid (x, y, color) VALUES (?, ?, ?)`,\n  );\n  const insertTransaction = db.transaction((rows) => {\n    for (const row of rows) {\n      insertStatement.run(row.x, row.y, row.color);\n    }\n  });\n\n  insertTransaction(grid);\n}\n\nmodule.exports = db;\n",
                  "solvedContent": null
                }
              ],
              "hints": [],
              "httpOptions": {
                "method": "GET",
                "path": "/grid",
                "body": null
              }
            }
          }
        ]
      }
    ]
  }
}