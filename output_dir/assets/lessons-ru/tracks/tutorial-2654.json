{
  "tutorial": {
    "id": 2654,
    "version": 5,
    "type": "challenges",
    "isNew": false,
    "codeLanguage": "python",
    "title": "Строки и операции со списками",
    "descriptionContent": "Задачи на основе операций со строками и списками",
    "shortDescriptionContent": "",
    "showInTrack": true,
    "iconBanner": null,
    "chapters": [
      {
        "id": 14682,
        "title": "Списки студентов",
        "type": "challengeLevel0",
        "lessons": [
          {
            "title": "Students Lists",
            "id": 129710,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Учитель хочет создать список с именами всех учеников в своем классе. Он получил длинную строку, содержащую все имена, каждое имя разделено запятой `,`.\n\nПомоги ему создать список `names_list`, который хранит отдельные имена, разделенные запятой. Затем выведи список.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "student_names = \"Samantha,Mcgrath,Peyton,Kerim,Nadia,Sandra,Sarah,Alex\"",
                  "solvedContent": "student_names = \"Samantha,Mcgrath,Peyton,Kerim,Nadia,Sandra,Sarah,Alex\"\nnames_list = student_names.split(\",\");\nprint(names_list)"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 14683,
        "title": "Изменение технологического стека",
        "type": "challengeLevel0",
        "lessons": [
          {
            "title": "Tech Stack Change",
            "id": 129711,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Ты работаешь разработчиком программного обеспечения и решил использовать определенный набор технологий программирования для своего следующего приложения. В последнюю минуту по просьбе клиента ты согласился использовать React вместо Angular.\n\n1. Переприсвой `tech_stack` и используй строковую операцию, чтобы заменить \"Angular\" на \"React\".\n2. Создай переменную `tech_stack_list`, которая хранит имена из `tech_stack` в виде списка.\n3. Выведи `tech_stack_list`",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "tech_stack = \"Angular Node Mongo Express\"",
                  "solvedContent": "tech_stack = \"Angular Node Mongo Express\"\ntech_stack = tech_stack.replace(\"Angular\", \"React\")\ntech_stack_list = tech_stack.split()\nprint(tech_stack_list)"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 14684,
        "title": "Самые продаваемые DVD",
        "type": "challengeLevel0",
        "lessons": [
          {
            "title": "Top Selling DVDs",
            "id": 129712,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Магазин проката DVD хочет обновить свой веб-сайт, добавив заголовок, в котором перечислены их самые продаваемые фильмы.\n\n1. Создай новую переменную `new_top_movies`, которая заменяет значение `\"Trapped\"` из `old_top_movies` на `\"Moonfall\"`. Имей в виду, что названия чувствительны к регистру.\n2. Выведи новый список.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "old_top_movies = \"The Power of the Dog - Trapped - Tenet\"\n",
                  "solvedContent": "old_top_movies = \"The Power of the Dog - Trapped - Tenet\"\nnew_top_movies = old_top_movies.replace(\"Trapped\", \"Moonfall\")\nprint(new_top_movies)\n"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 14685,
        "title": "Рекомендуемый список фильмов",
        "type": "challengeLevel0",
        "lessons": [
          {
            "title": "Recommended List of Movies",
            "id": 129713,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Сайты о фильмах рекомендуют фильмы на основе рейтингов, популярности, персонализированных опций и т.д. Давайте используем списковые включения, чтобы рекомендовать фильмы с рейтингом выше 4.\n\n1. Напиши списковое включение и присвой его переменной `recommended`.\n2. Списковое включение должно перебирать каждый элемент в списке `ratings`.\n3. Напиши выражение внутри спискового включения, чтобы проверить, больше ли рейтинг 4. Результатом должен быть список булевых значений.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "ratings = [4.3, 3.1, 5, 1.1]\r\n\r\nrecommended =\r\n\r\nprint(recommended)",
                  "solvedContent": "ratings = [4.3, 3.1, 5, 1.1]\r\n\r\nrecommended = [rating > 4 for rating in ratings]\r\nprint(recommended)"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 14686,
        "title": "Добавление Https:// перед сайтами",
        "type": "challengeLevel0",
        "lessons": [
          {
            "title": "Adding https:// Before Sites",
            "id": 129714,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Замечал, как браузеры автоматически добавляют `\"https://\"` к URL сайта? Давай используем списковое включение, чтобы добавить `\"https://\"` к списку сайтов в `websites`.\n\n1. Создай функцию `add_https`, которая принимает `site` в качестве параметра. Функция должна возвращать `\"https://\"` добавленный к параметру `site`.\n2. После функции создай переменную `auto_add`, которая будет хранить списковое включение.\n3. Списковое включение должно перебирать каждый элемент в списке `websites`.\n3. Напиши выражение внутри спискового включения, которое вызывает функцию `add_https` для элементов списка.\n4. Выведи `auto_add`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "websites = [\"mimo.com\", \"coding.com\", \"food.org\"]",
                  "solvedContent": "websites = [\"mimo.com\", \"coding.com\", \"food.org\"]\r\n\r\ndef add_https(site):\r\n    return \"https://\" + site\r\n\r\nauto_add = [add_https(site) for site in websites]\r\n    \r\nprint(auto_add)"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 14687,
        "title": "Удаление ненужной информации",
        "type": "challengeLevel0",
        "lessons": [
          {
            "title": "Deleting Unnecessary Information",
            "id": 129715,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Иногда мы храним в базах данных информацию, которая нам не нужна. Например, в данном словаре `product` нам не нужен ключ `color` и его значение.\n\n1. Удали ключ `color` вместе с его значением из словаря `product`, используя правильное ключевое слово.\n2. Выведи `product`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "product = {\r\n 'name': 'pencil',\r\n 'type': 'stationery',\r\n 'price': 1.99,\r\n 'color': 'blue',\r\n 'availability': False\r\n}",
                  "solvedContent": "product = {\r\n 'name': 'pencil',\r\n 'type': 'stationery',\r\n 'price': 1.99,\r\n 'color': 'blue',\r\n 'availability': False\r\n}\r\n\r\ndel product['color']\r\n\r\nprint(product)"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 13973,
        "title": "Цветочный магазин Джульетты",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "Juliette's Flower Shop",
            "id": 124075,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Джульетта владеет цветочным магазином. Магазин уже предлагает скидку 5% для всех клиентов в честь 3-й годовщины магазина.\n\nНедавно у Джульетты родился ребенок 15 июля. По этому случаю она решила дать еще большую скидку 10% для всех клиентов, родившихся в этот же день. У нее есть строка, содержащая эти дни рождения в формате DD-MM, которые разделены с помощью `|`.\n\n1. Создайте переменную `birthdays_list` и сохраните в ней даты рождения как элементы списка из `birthdays_string`.\n2. Пройдитесь циклом по `birthdays_list` и проверьте, является ли дата `\"15-07\"`. Если да, переназначьте `special_discount`, чтобы **заменить** `5%` на `10%`.\n3. Выведите `special_discount` за пределами цикла в конце.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "birthdays_string = \"23-09|25-04|05-09|15-07|01-06\"\nspecial_discount = \"You are eligible for a 5% discount\"\n",
                  "solvedContent": "birthdays_string = \"23-09|25-04|05-09|15-07|01-06\"\nspecial_discount = \"You are eligible for a 5% discount\"\nbirthdays_list = birthdays_string.split(\"|\")\n\nfor birthday in birthdays_list:\n if (birthday == \"15-07\"):\n  special_discount = special_discount.replace(\"5%\", \"10%\")\n\nprint(special_discount)"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 13976,
        "title": "Проверка оценок",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "Grade Check",
            "id": 124079,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Инструктор курса получил оценки студента в строковом формате. Оценки разделены с помощью `-`. Она хочет вычислить сумму всех этих оценок и проверить, прошел ли студент.\n\n1. Создай переменную `grades_list` и сохрани в ней оценки, которые ты извлечешь из `grades_string`, в виде списка элементов.\n2. Пройдись циклом по `grades_list`, преобразуй каждый элемент в целое число, а затем добавь его к `total_grade`.\n\nУбедись, что ты выполняешь эти операции **до** оператора печати.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "grades_string = \"88-77-59-63\"\ntotal_grade = 0\n\nprint(total_grade)",
                  "solvedContent": "grades_string = \"88-77-59-63\"\ntotal_grade = 0\ngrades_list = grades_string.split(\"-\")\n\nfor grade in grades_list:\n grade = int(grade)\n total_grade += grade\n\nprint(total_grade)"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 13837,
        "title": "Фильтрация результатов поиска",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "Filtering search results",
            "id": 123319,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Поисковые системы, стриминговые сайты и т.д. фильтруют результаты поиска по ключевым словам. Давайте используем генератор списков, чтобы отфильтровать список так, чтобы результат отображал только элементы списка с ключевым словом.\n\n1. Сохрани генератор списков в переменной `results`.\n2. Пройдись по каждому элементу списка в генераторе списков. Выражение не будет содержать никаких операций.\n3. Добавь оператор `if` в генератор списков, который проверяет, есть ли в элементе списка `\"cats\"`.\n4. Выведи `results`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "archive = [\"Amazing cats\", \"Top 10 Dances\", \"Breaking news\", \"How to: Tips\", \"cats dance\"]\r\n\r\nresults =",
                  "solvedContent": "archive = [\"Amazing cats\", \"Top 10 Dances\", \"Breaking news\", \"How to: Tips\", \"cats dance\"]\r\n\r\nresults = [result for result in archive if result.count(\"cats\") > 0]\r\n\r\nprint(results)"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 13839,
        "title": "Очистка списка задач",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "Clear a task list",
            "id": 123321,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Давайте используем срезы, чтобы очистить простой список задач.\n\n1. Удалите `grocery` и `laundry` из списка `daily_tasks`, используя ключевое слово `del` и срезы.\n2. Выведите `daily_tasks`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "daily_tasks = ['grocery', 'laundry', 'dusting']",
                  "solvedContent": "daily_tasks = ['grocery', 'laundry', 'dusting']\r\ndel daily_tasks[1::-1]\r\nprint(daily_tasks)"
                }
              ],
              "hints": []
            }
          }
        ]
      }
    ]
  }
}