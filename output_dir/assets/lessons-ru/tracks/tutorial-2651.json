{
  "tutorial": {
    "id": 2651,
    "version": 4,
    "type": "challenges",
    "isNew": false,
    "codeLanguage": "python",
    "title": "Управление потоком",
    "descriptionContent": "Задания на основе управления потоком",
    "shortDescriptionContent": "",
    "showInTrack": true,
    "iconBanner": null,
    "chapters": [
      {
        "id": 14664,
        "title": "Прочитанные и непрочитанные уведомления",
        "type": "challengeLevel0",
        "lessons": [
          {
            "title": "Read and Unread Notifications",
            "id": 129692,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Мы выведем количество прочитанных или непрочитанных уведомлений, которые получил пользователь.\n\n1. Если `unread` не равен `0`, выведите `You have {unread} unread messages`. Используйте f-string, чтобы отобразить значение `unread` внутри строки.\n2. Иначе выведите `No unread messages. Check your {read} read messages`. Используйте f-string, чтобы отобразить значение `read` внутри строки.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "read = 5\r\nunread = 4",
                  "solvedContent": "read = 5\r\nunread = 4\r\nif unread != 0:\r\n print(f\"You have {unread} unread messages\")\r\nelse:\r\n print(f\"No unread messages. Check your {read} read messages\")"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 14665,
        "title": "Проверка пароля",
        "type": "challengeLevel0",
        "lessons": [
          {
            "title": "Password Checker",
            "id": 129693,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Давайте проверим, правильный ли пароль, используя Python.\n\n1. Если `actualPass` равен `enteredPass`, выведите `Login successful`.\n2. Иначе, выведите `Incorrect credentials. Please try again`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "actualPass = \"abc123\"\r\nenteredPass = \"Abc123\"",
                  "solvedContent": "actualPass = \"abc123\"\r\nenteredPass = \"Abc123\"\r\nif actualPass == enteredPass:\r\n print(\"Login successful\")\r\nelse:\r\n print(\"Incorrect credentials. Please try again\")"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 14666,
        "title": "Проверка входа",
        "type": "challengeLevel0",
        "lessons": [
          {
            "title": "Entry Check",
            "id": 129694,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Вход в определенные заведения, такие как клуб, зависит от достижения возрастного ограничения и наличия брони. Давайте напишем программу на Python, чтобы проверить, может ли человек войти.\n\n1. Если `age` больше или равно `18` и `hasReservation` равно `True`, установите `result` в `True`.\n2. Выведите `Entry granted: `, за которым следует результат. Например, если результат `False`, то выведите `Entry granted: False`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "age = 21\r\nhasReservation = True\r\nresult = False",
                  "solvedContent": "age = 21\r\nhasReservation = True\r\nresult = False\r\nif age >= 18 and hasReservation:\r\n result = True\r\n\r\nprint(f\"Entry granted: {result}\")"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 14667,
        "title": "Инвентарь магазина рубашек",
        "type": "challengeLevel0",
        "lessons": [
          {
            "title": "Shirt Store Inventory",
            "id": 129695,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Создайте простую программу учета для магазина рубашек. Программа должна увеличивать переменную `sales` на 1 и уменьшать переменную `inventory` на 1, когда продается рубашка.\n\n1. Между инициализацией переменных и операторами вывода увеличьте значение переменной `sales` на `1` с помощью оператора.\n2. Уменьшите значение переменной `inventory` на `1` с помощью оператора.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "sales = 0\r\ninventory = 10\r\n\r\n\r\nprint(f'Sales: {sales}')\r\nprint(f'Inventory: {inventory}')",
                  "solvedContent": "sales = 0\r\ninventory = 10\r\nsales += 1\r\ninventory -= 1\r\nprint(f'Sales: {sales}')\r\nprint(f'Inventory: {inventory}')"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 14668,
        "title": "Останови бота",
        "type": "challengeLevel0",
        "lessons": [
          {
            "title": "Stop the Bot",
            "id": 129696,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Создай программу, которая трижды напомнит нам остановить бота.\n\n1. Напиши цикл `while`, который выводит `\"Reminder: Stop the bot!\"`, когда `reminder_count` меньше `3`.\n2. После оператора вывода увеличь значение `reminder_count` на `1`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "reminder_count = 0\r\n\r\nprint(\"Reminder: Stop the bot!\")",
                  "solvedContent": "reminder_count = 0\r\nwhile reminder_count < 3:\r\n print(\"Reminder: Stop the bot!\")\r\n reminder_count += 1"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 14669,
        "title": "Проверка цикла",
        "type": "challengeLevel0",
        "lessons": [
          {
            "title": "Loop Check",
            "id": 129697,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Мы написали оператор `print`, чтобы узнать, что программа вошла в цикл. Однако программа зациклилась бесконечно, исправь это, прежде чем она сломает наш компьютер!\n\n1. В цикле `while` измени значение переменной `loop` так, чтобы `\"Entered the loop!\"` выводилось только один раз.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "loop = True\r\nwhile loop:\r\n print(\"Entered the loop!\")\r\n \r\n",
                  "solvedContent": "loop = True\r\nwhile loop:\r\n print(\"Entered the loop!\")\r\n loop = False"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 13091,
        "title": "Блэкджек",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "Blackjack",
            "id": 118060,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Мы напишем простую версию BlackJack на Python. В этой версии есть два игрока, которые получают по две карты каждый.\n\n`p1card1` и `p1card2` хранят значения карт для первого игрока.\n\n`p2card1` и `p2card2` хранят значения карт для второго игрока.\n\n`p1check` хранит сумму карт первого игрока, а `p2check` хранит то же самое для второго игрока.\n\n1. Сначала мы проверим, равны ли какие-либо значения или больше `21`.\n    - Если `p1check` или `p2check` равно `21`, установите `status` на `blackjack`.\n    - Иначе, если `p1check` больше `21`, установите `status` на `P1 lose`.\n    - Иначе, если `p2check` больше `21`, установите `status` на `P2 lose`.\n    - Иначе выведите `Checking player cards...`.\n2. Во-вторых, мы сравним оба значения.\n    - Если `p1check` больше `p2check` и меньше или равно `21`, установите `winner` на `P1`.\n    - Иначе, если `p2check` больше `p1check` и меньше или равно `21`, установите `winner` на `P2`.\n    - Иначе выведите `Draw`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "p1card1 = 10\r\np1card2 = 1\r\np2card1 = 10\r\np2card2 = 11\r\nstatus = \"\"\r\nwinner = \"\"\r\np1check = p1card1 + p1card2\r\np2check = p2card1 + p2card2\r\nprint(status)\r\nprint(\"Winner: \" + winner)",
                  "solvedContent": "p1card1 = 10\r\np1card2 = 1\r\np2card1 = 10\r\np2card2 = 11\r\nstatus = \"\"\r\nwinner = \"\"\r\np1check = p1card1 + p1card2\r\np2check = p2card1 + p2card2\r\n\r\nif p1check == 21 or p2check == 21:\r\n status = \"blackjack\"\r\nelif p1check > 21:\r\n status = \"P1 lose\"\r\nelif p2check > 21:\r\n status = \"P2 lose\"\r\nelse:\r\n print(\"Checking player cards...\")\r\n\r\nif p1check > p2check and p1check <= 21:\r\n winner = \"P1\"\r\nelif p1check < p2check and p2check <= 21:\r\n winner = \"P2\"\r\nelse:\r\n print(\"Draw\")\r\n\r\nprint(status)\r\nprint(\"Winner: \" + winner)"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 13094,
        "title": "Проверка хранилища",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "Storage check",
            "id": 118063,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Мы напишем программу на Python, которая отображает сообщение в зависимости от объема хранилища и введенного пин-кода.\n\n1. Если `stored` меньше `limit` и `enteredPin` равен `correctPin`, выведите `{stored} GB cloud storage used. Limit is {limit} GB`. Используйте f-string для отображения значения `stored` и `limit`.\n2. Если `stored` равен `limit` и `enteredPin` равен `correctPin`, выведите `Cloud Storage limit reached`.\n3. Если `enteredPin` не равен `correctPin`, выведите `Pin not correct`.\n4. В противном случае выведите `System error`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "stored = 40\r\nlimit = 50\r\nenteredPin = 4351\r\ncorrectPin = 4351",
                  "solvedContent": "stored = 40\r\nlimit = 50\r\nenteredPin = 4351\r\ncorrectPin = 4351\r\nif stored < limit and enteredPin == correctPin:\r\n print(f\"{stored} GB cloud storage used. Limit is {limit} GB\")\r\nelif stored == limit and enteredPin == correctPin:\r\n print(\"Cloud Storage limit reached\")\r\nelif enteredPin != correctPin:\r\n print(\"Pin not correct\")\r\nelse:\r\n print(\"System error\")"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 13093,
        "title": "Отчет о здоровье",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "Health report",
            "id": 118062,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Мы напишем программу на Python для проверки артериального давления и вывода результата соответственно.\n\n1. Если `bpUpper` равен `120`, а `bpLower` равен `80`, установить `result` в `normal`.\n2. Если `bpUpper` меньше `120` или `bpLower` меньше 80, установить `result` в `low`.\n3. В противном случае установить `result` в `high`.\n4. Вывести результат за пределами условных блоков.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "bpUpper = 118\r\nbpLower = 70\r\nresult = \"\"",
                  "solvedContent": "bpUpper = 118\r\nbpLower = 70\r\nresult = \"\"\r\nif bpUpper == 120 and bpLower == 80:\r\n result = \"normal\"\r\nelif bpUpper < 120 or bpLower < 80:\r\n result = \"low\"\r\nelse:\r\n result = \"high\"\r\n\r\nprint(\"BP \" + result)"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 13090,
        "title": "Автоматическое освещение",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "Automatic lighting",
            "id": 118059,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Мы напишем программу на Python для создания автоматической системы освещения.\n\n1. Если объект присутствует и свет увеличен, то установите `brightness` на `full`.\n2. Если объект присутствует, но свет не увеличен, то установите `brightness` на `dim`.\n3. В противном случае установите яркость на `off`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "objectPresent = True\r\nincreasedLight = False\r\nprint(\"Light brightness: \" + brightness)",
                  "solvedContent": "objectPresent = True\r\nincreasedLight = False\r\nbrightness = \"\"\r\nif objectPresent and increasedLight:\r\n brightness = \"full\"\r\nelif objectPresent and not increasedLight:\r\n brightness = \"dim\"\r\nelse:\r\n brightness = \"off\"\r\n\r\nprint(\"Light brightness: \" + brightness)"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 13089,
        "title": "Проверка батареи",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "Battery checker",
            "id": 118058,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Наш телефон отображает разные сообщения в зависимости от процента заряда батареи. Давайте напишем программу на Python, чтобы информировать пользователей о состоянии их батареи.\n\n1. Если `percentage` меньше `10`, вывести `Phone will shut down soon`.\n2. Если `percentage` больше или равен `10` и меньше `20`, вывести `Low Battery`.\n3. В противном случае вывести значение процента, за которым следует `%`. Например, если процент равен `61`, вывести `61%`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "percentage = 49",
                  "solvedContent": "percentage = 49\r\nif percentage < 10:\r\n print(\"Phone will shut down soon\")\r\nelif percentage >= 10 and percentage < 20:\r\n print(\"Low Battery\")\r\nelse:\r\n print(f\"{percentage}%\")"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 13086,
        "title": "Налоговый калькулятор",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "Tax calculator",
            "id": 118055,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Давайте напишем программу на Python, которая вычисляет налог.\n\n1. Если `income` меньше `40000`, налог будет `income * 0.1`.\n2. Если `income` больше или равен `40000` и меньше `170000`, налог будет `income * 0.22`.\n3. Если `income` больше или равен `170000` и меньше `540000`, налог будет `income * 0.32`.\n4. Иначе налог будет `income * 0.37`.\n5. После условных операторов выведите значение `tax`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "income = 44000\r\ntax = 0",
                  "solvedContent": "income = 44000\r\ntax = 0\r\nif income < 40000:\r\n tax = income * 0.1\r\nelif income >= 40000 and income < 170000:\r\n tax = income * 0.22\r\nelif income >= 170000 and income < 540000:\r\n tax = income * 0.32\r\nelse:\r\n tax = income * 0.37\r\n\r\nprint(f\"Tax: {tax}\")"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 13815,
        "title": "Для в диапазоне",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "For in range",
            "id": 123251,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Мы создаем часы, которые звонят каждый час.\n\n1. Напиши цикл `for`, используя `range()`, который будет повторяться 12 раз для 12 часов на часах.\n2. Внутри цикла `for` выведи на экран `\"Ring\"`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "",
                  "solvedContent": "for i in range(12):\r\n print(\"Ring\")"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 13814,
        "title": "Цикл while",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "While loop",
            "id": 123250,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Создайте программу для аттракциона \"американские горки\". Доступно только 10 мест, мы хотим программу, которая выводит количество людей на аттракционе, чтобы убедиться, что он не перегружен.\n\n1. Напишите условие для цикла while так, чтобы значение переменной `counter` выводилось от `1` до `10`.\n2. После вывода значения переменной `counter`, используйте оператор для увеличения её значения на `1`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "counter = 1\r\n\r\nwhile : \r\n  print(counter)\r\n",
                  "solvedContent": "counter = 1\r\n\r\nwhile counter <= 10: \r\n  print(counter)\r\n  counter += 1"
                }
              ],
              "hints": []
            }
          }
        ]
      }
    ]
  }
}