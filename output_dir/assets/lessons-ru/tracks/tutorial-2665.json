{
  "tutorial": {
    "id": 2665,
    "version": 6,
    "type": "guidedProject",
    "isNew": false,
    "codeLanguage": "python",
    "title": "Вытяни карту - Часть 1",
    "descriptionContent": "В проекте \"Draw a Card\" ты создашь виртуальную колоду карт. Перемешай их, а затем отображай одну за другой, используя ASCII art.",
    "shortDescriptionContent": "",
    "showInTrack": true,
    "iconBanner": "tutorial-2665-icon-banner.svg",
    "chapters": [
      {
        "id": 14640,
        "title": "Глава №1",
        "type": "practiceLevel3",
        "lessons": [
          {
            "title": "Lesson #1",
            "id": 129484,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Добро пожаловать в проект **Draw a Card**, где мы будем работать с цифровыми картами.\n\nДавайте начнем с первого шага — создания колоды карт. В стандартной колоде есть 4 масти и 13 рангов. Давайте создадим эти списки.\n\n1. Создайте список `suits` и добавьте 4 разные масти в виде строк: `[\"♥\", \"♦\", \"♣\", \"♠\"]`.\n2. Создайте список `ranks` и добавьте 13 разных рангов в виде строк: `[\"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"J\", \"Q\", \"K\", \"A\"]`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "",
                  "solvedContent": "suits = [\"♥\", \"♦\", \"♣\", \"♠\"]\nranks = [\"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"J\", \"Q\", \"K\", \"A\"]"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Lesson #2",
            "id": 129485,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Далее мы объединяем масти и ранги, чтобы создать колоду из 52 уникальных карт. Мы будем использовать кортежи для представления каждой карты.\n\n1. Создай пустой список с именем `deck`, который будет содержать все карты.\n2. Используй цикл for для перебора каждой масти, а внутри него другой цикл for для перебора каждого ранга.\n3. Добавь каждую комбинацию масти и ранга в виде кортежа в список deck.\n4. Выведи на экран deck, чтобы показать все комбинации карт.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "suits = [\"♥\", \"♦\", \"♣\", \"♠\"]\nranks = [\"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"J\", \"Q\", \"K\", \"A\"]",
                  "solvedContent": "suits = [\"♥\", \"♦\", \"♣\", \"♠\"]\nranks = [\"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"J\", \"Q\", \"K\", \"A\"]\ndeck = []\n\nfor suit in suits:\n  for rank in ranks:\n    deck.append((suit, rank))\n\nprint(deck)"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Lesson #3",
            "id": 129486,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Карты должны быть вытянуты случайным образом. Для этого нам нужно перемешать колоду.\n\n1. Импортируй модуль `random` в начале своего Python-скрипта.\n2. Используй `random.shuffle(deck)`, чтобы перемешать колоду.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "suits = [\"♥\", \"♦\", \"♣\", \"♠\"]\nranks = [\"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"J\", \"Q\", \"K\", \"A\"]\ndeck = []\n\nfor suit in suits:\n  for rank in ranks:\n    deck.append((suit, rank))\n\nprint(deck)",
                  "solvedContent": "import random\n\nsuits = [\"♥\", \"♦\", \"♣\", \"♠\"]\nranks = [\"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"J\", \"Q\", \"K\", \"A\"]\ndeck = []\n\nfor suit in suits:\n  for rank in ranks:\n    deck.append((suit, rank))\n\nprint(deck)\nrandom.shuffle(deck)"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Lesson #4",
            "id": 129487,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Теперь у нас есть код, который генерирует колоду и перемешивает её. Давайте поместим код создания колоды в функцию, чтобы сделать его многократно используемым.\n\n1. Создайте функцию под названием `create_deck`, которая не принимает параметров.\n   - Переместите весь ваш код, за исключением оператора импорта, внутрь вновь созданной функции.\n   - Пусть функция возвращает `deck`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "import random\n\nsuits = [\"♥\", \"♦\", \"♣\", \"♠\"]\nranks = [\"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"J\", \"Q\", \"K\", \"A\"]\ndeck = []\n\nfor suit in suits:\n  for rank in ranks:\n    deck.append((suit, rank))\n\nprint(deck)\nrandom.shuffle(deck)",
                  "solvedContent": "import random\n\ndef create_deck():\n  suits = [\"♥\", \"♦\", \"♣\", \"♠\"]\n  ranks = [\"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"J\", \"Q\", \"K\", \"A\"]\n  deck = []\n\n  for suit in suits:\n    for rank in ranks:\n      deck.append((suit, rank))\n\n  return deck"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Lesson #5",
            "id": 129488,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Давайте создадим функцию для вытягивания карты из колоды.\n\n1. Определите новую функцию с именем `draw_card`, которая принимает параметр `deck`.\n2. Внутри `draw_card` создайте переменную `hand` и присвойте ей значение последнего элемента в списке `deck`.\n3. Затем удалите последний элемент из `deck`. Поскольку мы только что вытянули его, мы должны удалить его из колоды.\n4. Верните кортеж, где первое значение должно быть `hand`, а второе — обновленный `deck`.\n5. Обе переменные, которые вы возвращаете в составе кортежа, должны быть списками. Один должен содержать один элемент, другой — 51.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "import random\n\ndef create_deck():\n  suits = [\"♥\", \"♦\", \"♣\", \"♠\"]\n  ranks = [\"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"J\", \"Q\", \"K\", \"A\"]\n  deck = []\n\n  for suit in suits:\n    for rank in ranks:\n      deck.append((suit, rank))\n\n  return deck",
                  "solvedContent": "import random\n\ndef draw_card(deck):\n  hand = deck.pop()\n  return [hand], deck\n\ndef create_deck():\n  suits = [\"♥\", \"♦\", \"♣\", \"♠\"]\n  ranks = [\"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"J\", \"Q\", \"K\", \"A\"]\n  deck = []\n\n  for suit in suits:\n    for rank in ranks:\n      deck.append((suit, rank))\n\n  return deck"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Lesson #6",
            "id": 129489,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Пора использовать эти функции.\n\n1. Вне определений ваших функций создайте переменную `deck` и установите её равной возвращаемому значению функции `create_deck`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "import random\n\ndef draw_card(deck):\n  hand = deck.pop()\n  return [hand], deck\n\ndef create_deck():\n  suits = [\"♥\", \"♦\", \"♣\", \"♠\"]\n  ranks = [\"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"J\", \"Q\", \"K\", \"A\"]\n  deck = []\n\n  for suit in suits:\n    for rank in ranks:\n      deck.append((suit, rank))\n\n  return deck",
                  "solvedContent": "import random\n\ndef draw_card(deck):\n  hand = deck.pop()\n  return [hand], deck\n\ndef create_deck():\n  suits = [\"♥\", \"♦\", \"♣\", \"♠\"]\n  ranks = [\"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"J\", \"Q\", \"K\", \"A\"]\n  deck = []\n\n  for suit in suits:\n    for rank in ranks:\n      deck.append((suit, rank))\n\n  return deck\n\ndeck = create_deck()"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Lesson #6 - Copy",
            "id": 129491,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Тяни карты, пока колода не опустеет.\n\n1. Создай цикл `while`, который продолжается, пока в колоде остаются карты.\n2. Внутри цикла вызови `draw_card(deck)`, чтобы вытянуть карту и обновить колоду.\n3. Создай две переменные, `hand` и `deck`, которым присвой значение, возвращаемое `draw_card`.\n4. В каждой итерации цикла выводи на экран вытянутую карту.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "import random\n\ndef draw_card(deck):\n  hand = deck.pop()\n  return [hand], deck\n\ndef create_deck():\n  suits = [\"♥\", \"♦\", \"♣\", \"♠\"]\n  ranks = [\"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"J\", \"Q\", \"K\", \"A\"]\n  deck = []\n\n  for suit in suits:\n    for rank in ranks:\n      deck.append((suit, rank))\n\n  return deck\n\ndeck = create_deck()",
                  "solvedContent": "import random\n\ndef draw_card(deck):\n  hand = deck.pop()\n  return [hand], deck\n\ndef create_deck():\n  suits = [\"♥\", \"♦\", \"♣\", \"♠\"]\n  ranks = [\"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"J\", \"Q\", \"K\", \"A\"]\n  deck = []\n\n  for suit in suits:\n    for rank in ranks:\n      deck.append((suit, rank))\n\n  return deck\n\ndeck = create_deck()\nwhile len(deck) > 0:\n  hand, deck = draw_card(deck)\n  print(hand[0])"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Lesson #6 - Copy - Copy",
            "id": 129493,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Давайте сделаем наш скрипт более интерактивным и позволим пользователю решать, когда вытянуть следующую карту.\n\n1. В начале блока вашего цикла `while` добавьте функцию `input`, чтобы подождать, пока пользователь нажмет Enter перед тем, как вытянуть карту.\n   - Добавьте что-то вроде `\"Press Enter to draw the next card\"` в качестве приглашения для ввода.\n   - Вам не нужно сохранять ввод где-либо, так как он нам не нужен. Функция `input` будет ждать, пока не будет нажата клавиша Enter, после чего цикл `while` продолжит выполнение и вытянет следующую карту.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "import random\n\ndef draw_card(deck):\n  hand = deck.pop()\n  return [hand], deck\n\ndef create_deck():\n  suits = [\"♥\", \"♦\", \"♣\", \"♠\"]\n  ranks = [\"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"J\", \"Q\", \"K\", \"A\"]\n  deck = []\n\n  for suit in suits:\n    for rank in ranks:\n      deck.append((suit, rank))\n\n  return deck\n\ndeck = create_deck()\nwhile len(deck) > 0:\n  hand, deck = draw_card(deck)\n  print(hand[0])",
                  "solvedContent": "import random\n\ndef draw_card(deck):\n  hand = deck.pop()\n  return [hand], deck\n\ndef create_deck():\n  suits = [\"♥\", \"♦\", \"♣\", \"♠\"]\n  ranks = [\"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"J\", \"Q\", \"K\", \"A\"]\n  deck = []\n\n  for suit in suits:\n    for rank in ranks:\n      deck.append((suit, rank))\n\n  return deck\n\ndeck = create_deck()\nwhile len(deck) > 0:\n  input(\"Press Enter to draw the next card\")\n  hand, deck = draw_card(deck)\n  print(hand[0])"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Lesson #6 - Copy - Copy",
            "id": 129492,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "После того как у нас закончатся карты, мы хотим сообщить, что карт больше нет.\n\n1. Выведите сообщение после завершения цикла: 'We are out of cards'.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "import random\n\ndef draw_card(deck):\n  hand = deck.pop()\n  return [hand], deck\n\ndef create_deck():\n  suits = [\"♥\", \"♦\", \"♣\", \"♠\"]\n  ranks = [\"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"J\", \"Q\", \"K\", \"A\"]\n  deck = []\n\n  for suit in suits:\n    for rank in ranks:\n      deck.append((suit, rank))\n\n  return deck\n\ndeck = create_deck()\nwhile len(deck) > 0:\n  input(\"Press Enter to draw the next card\")\n  hand, deck = draw_card(deck)\n  print(hand[0])",
                  "solvedContent": "import random\n\ndef draw_card(deck):\n  hand = deck.pop()\n  return [hand], deck\n\ndef create_deck():\n  suits = [\"♥\", \"♦\", \"♣\", \"♠\"]\n  ranks = [\"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"J\", \"Q\", \"K\", \"A\"]\n  deck = []\n\n  for suit in suits:\n    for rank in ranks:\n      deck.append((suit, rank))\n\n  return deck\n\ndeck = create_deck()\nwhile len(deck) > 0:\n  input(\"Press Enter to draw the next card\")\n  hand, deck = draw_card(deck)\n  print(hand[0])\n\nprint(\"We are out of cards\")"
                }
              ],
              "hints": []
            }
          }
        ]
      }
    ]
  }
}