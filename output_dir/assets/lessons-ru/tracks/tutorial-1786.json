{
  "tutorial": {
    "id": 1786,
    "version": 9,
    "type": "guidedProjectOptional",
    "isNew": false,
    "codeLanguage": "javascript",
    "title": "Приключенческая игра",
    "descriptionContent": "Используй свои знания о переопределении методов, чтобы смоделировать взаимодействие персонажей в игре",
    "shortDescriptionContent": "",
    "showInTrack": true,
    "iconBanner": "tutorial-1786-icon-banner.svg",
    "chapters": [
      {
        "id": 11785,
        "title": "Приключенческая игра",
        "type": "practiceLevel3",
        "lessons": [
          {
            "title": "Create a class",
            "id": 108520,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Джо занимается разработкой приключенческой игры. Он отвечает за персонажей-людей и пиратов. Давайте поможем ему в настройке поведения персонажей.\n\nНачнем с создания класса для наших персонажей.\n\n1. Создай класс `Human` для представления всех персонажей.\n2. Добавь ему пустой конструктор.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "",
                  "solvedContent": "class Human {\n  constructor() {}\n}"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Class Properties",
            "id": 108521,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Давайте добавим свойство к нашему определенному классу, чтобы мы могли определить, кто наши персонажи.\n\n1. Добавь параметр `name` в свой конструктор.\n2. Дай классу `Human` свойство `name` и установи его значение равным параметру `name`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "class Human {\n  constructor() {}\n}",
                  "solvedContent": "class Human {\n  constructor(name) {\n    this.name = name;\n  }\n}"
                }
              ],
              "hints": [
                {
                  "title": "Hint",
                  "content": "The syntax for adding a property to a class is:\n```JS\nclass className {\n   constructor(property){\n     this.property = property;\n    }\n}\n```"
                }
              ]
            }
          },
          {
            "title": "Class Methods",
            "id": 108522,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Поскольку это многопользовательская игра, мы хотим, чтобы персонажи взаимодействовали друг с другом. Давайте создадим метод, который будет за это отвечать.\n\n1. Создай метод `say`, который принимает параметр `stuff`.\n2. Добавь оператор, который отображает `stuff`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "class Human {\n  constructor(name) {\n    this.name = name;\n  }\n}",
                  "solvedContent": "class Human {\n  constructor(name) {\n    this.name = name;\n  }\n  say(stuff) {\n    console.log(stuff);\n  }\n}"
                }
              ],
              "hints": [
                {
                  "title": "Hint",
                  "content": "The syntax for adding a method to a class is:\n```JS\nclass className {\n   constructor(){}\n   method(parameter){\n   }\n}"
                }
              ]
            }
          },
          {
            "title": "Display contents",
            "id": 108524,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Чтобы лучше отслеживать диалог между персонажами, мы хотим отображать их имя, чтобы знать, кто говорит.\n\n1. Обнови `say`, чтобы он отображал имя пользователя, а также то, что пользователь говорит. Например, для пользователя `\"Joe\"`, который говорит `\"hi\"`, мы должны увидеть:\n\n```\nJoe: hi\n```",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "class Human {\n  constructor(name) {\n    this.name = name;\n  }\n  say(stuff) {\n    console.log(stuff);\n  }\n}",
                  "solvedContent": "class Human {\n  constructor(name) {\n    this.name = name;\n  }\n  say(stuff) {\n    console.log(this.name + \": \" + stuff);\n  }\n}"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Pirate",
            "id": 108525,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Далее мы будем работать над персонажем пирата. Давайте начнем с создания класса для пиратов.\n\n1. Создайте класс `Pirate` как прямое расширение класса `Human`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "class Human {\n  constructor(name) {\n    this.name = name;\n  }\n  say(stuff) {\n    console.log(this.name + \": \" + stuff);\n  }\n}",
                  "solvedContent": "class Human {\n  constructor(name) {\n    this.name = name;\n  }\n  say(stuff) {\n    console.log(this.name + \": \" + stuff);\n  }\n}\nclass Pirate extends Human {}"
                }
              ],
              "hints": [
                {
                  "title": "Hint",
                  "content": "The syntax for creating an extended class is:\n```JS\nclass className extends extendedClass {\n}\n```"
                }
              ]
            }
          },
          {
            "title": "Override",
            "id": 108526,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Далее мы будем работать над кастомизацией нашего класса `Pirate`.\n\n1. Переопредели метод `say` в классе `Pirate`.\n2. Используй `super`, чтобы добавить функциональность метода `say` суперкласса как часть переопределения.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "class Human {\n  constructor(name) {\n    this.name = name;\n  }\n  say(stuff) {\n    console.log(this.name + \": \" + stuff);\n  }\n}\nclass Pirate extends Human {}",
                  "solvedContent": "class Human {\n  constructor(name) {\n    this.name = name;\n  }\n  say(stuff) {\n    console.log(this.name + \": \" + stuff);\n  }\n}\nclass Pirate extends Human {\n  say(stuff) {\n   super.say(stuff);\n  }\n}"
                }
              ],
              "hints": [
                {
                  "title": "Hint",
                  "content": "To override a method, you should redefine it again in one of its extended class.\n```JS\nclass extendedClass {\n   method(parameter){\n    }\n}\n\nclass className extends extendedClass {\n  method(parameter){\n   }\n}\n```"
                }
              ]
            }
          },
          {
            "title": "Yarr!",
            "id": 108528,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Каждый раз, когда пират что-то говорит, он заканчивает фразой `\"Yarr!\"`. Давайте обновим наш метод `say`, чтобы отразить эту особенность.\n\n1. Добавьте строку для отображения свойства `name` вместе с `\"Yarr!\"`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "class Human {\n  constructor(name) {\n    this.name = name;\n  }\n  say(stuff) {\n    console.log(this.name + \": \" + stuff);\n  }\n}\nclass Pirate extends Human {\n  say(stuff) {\n    super.say(stuff);\n  }\n}",
                  "solvedContent": "class Human {\n  constructor(name) {\n    this.name = name;\n  }\n  say(stuff) {\n    console.log(this.name + \": \" + stuff);\n  }\n}\nclass Pirate extends Human {\n  say(stuff) {\n    super.say(stuff);\n    console.log(this.name + \": Yarr!\");\n  }\n}"
                }
              ],
              "hints": [
                {
                  "title": "Hint",
                  "content": "For a pirate 'John' saying 'I am the captain', we should read :\n\n'John: I am the captain '\n'John: Yarr!'"
                }
              ]
            }
          },
          {
            "title": "Frances",
            "id": 108529,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Давайте создадим нашего первого персонажа.\n\n1. Создайте переменную с именем `human`.\n2. Создайте экземпляр `Human` с именем `\"Frances\"` и сохраните его в переменной.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "class Human {\n  constructor(name) {\n    this.name = name;\n  }\n  say(stuff) {\n    console.log(this.name + \": \" + stuff);\n  }\n}\nclass Pirate extends Human {\n  say(stuff) {\n    super.say(stuff);\n    console.log(this.name + \": Yarr!\");\n  }\n}",
                  "solvedContent": "class Human {\n  constructor(name) {\n    this.name = name;\n  }\n  say(stuff) {\n    console.log(this.name + \": \" + stuff);\n  }\n}\nclass Pirate extends Human {\n  say(stuff) {\n    super.say(stuff);\n    console.log(this.name + \": Yarr!\");\n  }\n}\nconst human = new Human(\"Frances\");"
                }
              ],
              "hints": [
                {
                  "title": "Hint",
                  "content": "The syntax for adding an instance of a class is:\n```JS\nconst instance = new className();\n```"
                }
              ]
            }
          },
          {
            "title": "Long John",
            "id": 108530,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Теперь давай создадим нашего первого пирата.\n\n1. Далее, создай переменную с именем `pirate`.\n2. Создай экземпляр `Pirate` с именем `\"Long John\"` и сохрани его в переменной.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "class Human {\n  constructor(name) {\n    this.name = name;\n  }\n  say(stuff) {\n    console.log(this.name + \": \" + stuff);\n  }\n}\nclass Pirate extends Human {\n  say(stuff) {\n    super.say(stuff);\n    console.log(this.name + \": Yarr!\");\n  }\n}\nconst human = new Human(\"Frances\");",
                  "solvedContent": "class Human {\n  constructor(name) {\n    this.name = name;\n  }\n  say(stuff) {\n    console.log(this.name + \": \" + stuff);\n  }\n}\nclass Pirate extends Human {\n  say(stuff) {\n    super.say(stuff);\n    console.log(this.name + \": Yarr!\");\n  }\n}\nconst human = new Human(\"Frances\");\nconst pirate = new Pirate(\"Long John\");"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Frances says",
            "id": 108531,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Теперь давай заставим персонажей общаться друг с другом.\n\n1. Используй метод, чтобы Франчес сказал `\"G'day, Sir!\"`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "class Human {\n  constructor(name) {\n    this.name = name;\n  }\n  say(stuff) {\n    console.log(this.name + \": \" + stuff);\n  }\n}\nclass Pirate extends Human {\n  say(stuff) {\n    super.say(stuff);\n    console.log(this.name + \": Yarr!\");\n  }\n}\nconst human = new Human(\"Frances\");\nconst pirate = new Pirate(\"Long John\");",
                  "solvedContent": "class Human {\n  constructor(name) {\n    this.name = name;\n  }\n  say(stuff) {\n    console.log(this.name + \": \" + stuff);\n  }\n}\nclass Pirate extends Human {\n  say(stuff) {\n    super.say(stuff);\n    console.log(this.name + \": Yarr!\");\n  }\n}\nconst human = new Human(\"Frances\");\nconst pirate = new Pirate(\"Long John\");\nhuman.say(\"Good day, Sir!\");"
                }
              ],
              "hints": [
                {
                  "title": "Hint",
                  "content": "The syntax for using a method is:\n```JS\n    instance.method(value)\n```"
                }
              ]
            }
          },
          {
            "title": "Long John says",
            "id": 108532,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Давай ответим на приветствие Франсес.\n\n1. Используй метод, чтобы твой пират ответил `\"Ahoy!\"`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "class Human {\n  constructor(name) {\n    this.name = name;\n  }\n  say(stuff) {\n    console.log(this.name + \": \" + stuff);\n  }\n}\nclass Pirate extends Human {\n  say(stuff) {\n    super.say(stuff);\n    console.log(this.name + \": Yarr!\");\n  }\n}\nconst human = new Human(\"Frances\");\nconst pirate = new Pirate(\"Long John\");\nhuman.say(\"Good day, sir!\");",
                  "solvedContent": "class Human {\n  constructor(name) {\n    this.name = name;\n  }\n  say(stuff) {\n    console.log(this.name + \": \" + stuff);\n  }\n}\nclass Pirate extends Human {\n  say(stuff) {\n    super.say(stuff);\n    console.log(this.name + \": Yarr!\");\n  }\n}\nconst human = new Human(\"Frances\");\nconst pirate = new Pirate(\"Long John\");\nhuman.say(\"Good day, sir!\");\npirate.say(\"Ahoy!\");"
                }
              ],
              "hints": []
            }
          }
        ]
      }
    ]
  }
}