{
  "tutorial": {
    "id": 1798,
    "version": 11,
    "type": "challenges",
    "isNew": false,
    "codeLanguage": "javascript",
    "title": "Классы в JavaScript",
    "descriptionContent": "Челленджи — это более сложные упражнения, которые проверят твои навыки.",
    "shortDescriptionContent": "",
    "showInTrack": true,
    "iconBanner": "tutorial-1798-icon-banner.svg",
    "chapters": [
      {
        "id": 11990,
        "title": "Экземпляр Car",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "Car Instance",
            "id": 109261,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Используя класс `Car` из предыдущего задания, давай создадим новый экземпляр этого класса.\n\n1. Создай новый объект под названием `myCar` и укажи, что это автомобиль, построенный в `2021` году, с двигателем `V8`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "index.js",
                  "codeLanguage": "javascript",
                  "content": "class Car {\r\n constructor(year, engine) {\r\n  this.year = year;\r\n  this.engine = engine;\r\n }\r\n}",
                  "solvedContent": "class Car {\r\n constructor(year, engine) {\r\n  this.year = year;\r\n  this.engine = engine;\r\n }\r\n}\r\nconst myCar = new Car(2021, 'V8');"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 11986,
        "title": "Детали автомобиля Old Timer",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "Old Timer Car Details",
            "id": 109259,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Давайте продолжим с предыдущего задания, используя класс `Car`.\n\n1. Создайте экземпляр класса `Car`. Назовите экземпляр `oldTimer`. Этот автомобиль был построен в `1980` году и имеет `diesel` двигатель.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "index.js",
                  "codeLanguage": "javascript",
                  "content": "class Car {\r\n constructor(year, engine) {\r\n  this.year = year;\r\n  this.engine = engine;\r\n }\r\n}\r\nconst myCar = new Car(2021, 'V8');",
                  "solvedContent": "class Car {\r\n constructor(year, engine) {\r\n  this.year = year;\r\n  this.engine = engine;\r\n }\r\n}\r\nconst myCar = new Car(2021, 'V8');\r\nconst oldTimer = new Car(1980, 'diesel');"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 11987,
        "title": "Класс Vehicle",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "Vehicle Class",
            "id": 109258,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Давайте создадим совершенно новый класс.\n\n1. Создай класс под названием `Vehicle`.\n2. Напиши код для класса `Vehicle`, чтобы он принимал три параметра в конструкторе: `year`, `mileage`, `speed`.\n3. Присвой параметры соответствующим свойствам внутри конструктора, используя ключевое слово `this`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "index.js",
                  "codeLanguage": "javascript",
                  "content": "class Vehicle",
                  "solvedContent": "class Vehicle {\n constructor(year, mileage, speed) {\n  this.year = year;\n  this.mileage = mileage;\n  this.speed = speed;\n }\n}"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 11984,
        "title": "Наследование свойств",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "Inheriting properties",
            "id": 109255,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Давайте создадим еще один класс, который наследует свойства от суперкласса.\n\n1. Создайте новый класс и назовите его: `Boat`.\n2. Напишите код для класса `Boat`, чтобы он наследовал все свойства класса `Vehicle`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "index.js",
                  "codeLanguage": "javascript",
                  "content": "class Vehicle {\r\n constructor(year, mileage, speed) {\r\n  this.year = year;\r\n  this.mileage = mileage;\r\n  this.speed = speed;\r\n }\r\n}\r\nclass {\r\n\r\n\r\n\r\n}",
                  "solvedContent": "class Vehicle {\r\n constructor(year, mileage, speed) {\r\n  this.year = year;\r\n  this.mileage = mileage;\r\n  this.speed = speed;\r\n }\r\n}\r\nclass Boat extends Vehicle {\r\n constructor(year, mileage, speed) {\r\n  super(year, mileage, speed);\r\n }\r\n}"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 11982,
        "title": "Добавить метод в класс",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "Add method to a class",
            "id": 109256,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Давайте добавим метод в класс.\n\n1. Обнови супер-класс `Vehicle`, добавив метод с именем `turnOn`. Внутри метода `turnOn` запусти `console.log(\"It's on!\")`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "index.js",
                  "codeLanguage": "javascript",
                  "content": "class Vehicle {\n constructor(year, mileage, speed) {\n  this.year = year;\n  this.mileage = mileage;\n  this.speed = speed;\n }\n}\nclass Boat extends Vehicle {\n constructor(year, mileage, speed) {\n  super(year, mileage, speed);\n }\n}\n",
                  "solvedContent": "class Vehicle {\n constructor(year, mileage, speed) {\n  this.year = year;\n  this.mileage = mileage;\n  this.speed = speed;\n }\n turnOn() {\n  console.log(\"It's on!\");\n }\n}\nclass Boat extends Vehicle {\n constructor(year, mileage, speed) {\n  super(year, mileage, speed);\n }\n}\n"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 11983,
        "title": "Переопределение метода в подклассе",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "Overriding method in method in sub-class",
            "id": 109262,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "В суперклассе есть один метод. Теперь давай переопределим этот метод в подклассе.\n\n1. Обнови подкласс `Boat`, добавив метод с именем `turnOn`.\n2. Внутри метода `turnOn` используй `console.log()`, чтобы отобразить свойство `this.message`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "index.js",
                  "codeLanguage": "javascript",
                  "content": "class Vehicle {\n constructor(year, mileage, speed) {\n  this.year = year;\n  this.mileage = mileage;\n  this.speed = speed;\n }\n turnOn() {\n  console.log(\"It's on!\");\n }\n}\nclass Boat extends Vehicle {\n constructor(year, mileage, speed) {\n  super(year, mileage, speed);\n  this.message = \"Sailing!\";\n }\n}",
                  "solvedContent": "class Vehicle {\n constructor(year, mileage, speed) {\n  this.year = year;\n  this.mileage = mileage;\n  this.speed = speed;\n }\n turnOn() {\n  console.log(\"It's on!\");\n }\n}\nclass Boat extends Vehicle {\n constructor(year, mileage, speed) {\n  super(year, mileage, speed);\n  this.message = \"Sailing!\";\n }\n turnOn() {\n  console.log(this.message);\n }\n}"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 11991,
        "title": "Космическая стратегическая игра 1",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "Space strategy game",
            "id": 109254,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Мы создаем стратегическую игру о космосе. Нам нужно написать код для класса `Character`, затем расширить его с помощью `Earthling`, а затем расширить этот подкласс еще одним, названным `Builder`.\n\n1. Добавьте в класс `Character` один параметр, `health`.\n2. Сделайте так, чтобы подкласс `Earthling` наследовал параметр `health` от `Character`.\n3. Добавьте новый параметр в `Earthling` и назовите его: `iq`.\n4. Создайте подкласс под названием `Builder` и унаследуйте все свойства от класса `Earthling`.\n5. Добавьте один параметр в класс `Builder`. Назовите параметр: `tool`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "index.js",
                  "codeLanguage": "javascript",
                  "content": "class Character {\n}\nclass Earthling extends Character {\n constructor(health) {}\n}",
                  "solvedContent": "class Character {\n constructor(health) {\n  this.health = health;\n }\n}\nclass Earthling extends Character {\n constructor(health, iq) {\n  super(health);\n  this.iq = iq;\n }\n}\nclass Builder extends Earthling {\n constructor(health, iq, tool) {\n  super(health, iq);\n  this.tool = tool;\n }\n}"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 11985,
        "title": "Космическая стратегическая игра 2",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "Challenge #8: Hard",
            "id": 109253,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Мы все еще разрабатываем нашу космическую стратегическую игру. Нам нужно написать код для класса `Vehicle`, а затем создать два подкласса: `Spaceship` и `MoonBuggy`.\n\n1. Включите один параметр, `fuel`, в класс `Vehicle`.\n2. Сделайте так, чтобы подкласс `Spaceship` наследовал параметр `fuel` от `Vehicle`.\n3. Добавьте новый параметр в `Spaceship` и назовите его `speed`.\n4. Создайте подкласс под названием `MoonBuggy`, который наследует параметр `fuel` от `Vehicle`.\n5. Добавьте параметр `doors` в класс `MoonBuggy`. Нам нужны двери на луноходе, в конце концов.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "index.js",
                  "codeLanguage": "javascript",
                  "content": "class Vehicle {\n\n}\nclass Spaceship extends Vehicle {\n\n}",
                  "solvedContent": "class Vehicle {\n constructor(fuel) {\n  this.fuel = fuel;\n }\n}\nclass Spaceship extends Vehicle {\n constructor(fuel, speed) {\n  super(fuel);\n  this.speed = speed;\n }\n}\nclass MoonBuggy extends Vehicle {\n constructor(fuel, doors) {\n  super(fuel);\n  this.doors = doors;\n }\n}"
                }
              ],
              "hints": []
            }
          }
        ]
      },
      {
        "id": 11989,
        "title": "Космическая стратегическая игра 3",
        "type": "challengeLevel2",
        "lessons": [
          {
            "title": "Challenge #9: Hard",
            "id": 109263,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Мы расширяем классы в нашей космической стратегической игре, добавляя некоторые поведения в виде методов.\n\n1. В `Vehicle` добавь новую функциональность. Назови её `turnOn` и сделай так, чтобы она выводила в `console.log` эту строку: `Engine on`.\n2. В подклассе `Spaceship` унаследуй функциональность метода `turnOn`, а затем расширь её, добавив вывод в консоль `Hyperspace engine on`.\n3. Создай новый `Vehicle`, назови его `firstPrototype` и установи его значение `fuel` на `100`.\n4. Создай новый объект `Spaceship` с именем `endeavor` и установи его значение `fuel` на `100` и скорость на `fast`.\n5. Вызови метод `turnOn` на `firstPrototype`.\n6. Вызови метод `turnOn` на `endeavor`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "index.js",
                  "codeLanguage": "javascript",
                  "content": "class Vehicle {\n constructor(fuel) {\n  this.fuel = fuel;\n }\n\n}\nclass Spaceship extends Vehicle {\n constructor(fuel, speed) {\n  super(fuel);\n  this.speed = speed;\n }\n\n}\n\n\n\n",
                  "solvedContent": "class Vehicle {\n constructor(fuel) {\n  this.fuel = fuel;\n }\n turnOn() {\n  console.log('Engine on');\n }\n}\nclass Spaceship extends Vehicle {\n constructor(fuel, speed) {\n  super(fuel);\n  this.speed = speed;\n }\n turnOn() {\n  super.turnOn();\n  console.log('Hyperspace engine on');\n }\n}\nconst firstPrototype = new Vehicle(100);\nconst endeavor = new Spaceship(100, 'fast');\nfirstPrototype.turnOn();\nendeavor.turnOn();"
                }
              ],
              "hints": []
            }
          }
        ]
      }
    ]
  }
}