{
  "tutorial": {
    "id": 2156,
    "version": 5,
    "type": "guidedProjectOptional",
    "isNew": false,
    "codeLanguage": "javascript",
    "title": "Случайный день на работе",
    "descriptionContent": "Аналогия обещаний JavaScript на примере случайного рабочего дня",
    "shortDescriptionContent": "",
    "showInTrack": true,
    "iconBanner": "tutorial-2156-icon-banner.svg",
    "chapters": [
      {
        "id": 13482,
        "title": "Случайный день на работе",
        "type": "practiceLevel3",
        "lessons": [
          {
            "title": "Order from Boss I",
            "id": 121197,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Каждый день нас просят выполнять какие-то задачи на работе. Давайте создадим программу, которая показывает случайный рабочий день. К концу проекта мы поймем, что promises очень актуальны в нашей повседневной жизни!\n\nКак работники, мы обычно получаем указания от наших начальников. Давайте создадим функцию, чтобы имитировать действие получения указаний от наших начальников.\n\n1. Напишите функцию `orderFromBoss()`, которая возвращает `Promise`.\n2. Используйте функцию с параметрами `resolve` и `reject` в `Promise`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "",
                  "solvedContent": "function orderFromBoss() {\r\n  return new Promise(function(resolve, reject) {});\r\n}"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Order from Boss II",
            "id": 121207,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Заказы от начальства должны содержать какие-то инструкции. Иначе мы не будем знать, что они хотят, чтобы мы сделали!\n\n1. Внутри функции promise создайте переменную `isCodeDone` и установите значение `false`.\n2. Выведите ```Finish the code, it's an order!``` используя `console.log()`.\n3. Установите `isCodeDone` в качестве параметра для `resolve()`.\n\nОбычно мы не можем отказать нашим начальникам, так что давайте оставим `reject` неиспользованным.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "function orderFromBoss() {\r\n  return new Promise(function(resolve, reject) {});\r\n}",
                  "solvedContent": "function orderFromBoss() {\r\n  return new Promise(function(resolve, reject) {\r\n    let isCodeDone = false;\r\n    console.log(\"Finish the code, it's an order!\");\r\n    resolve(isCodeDone);\r\n  });\r\n}"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Coding I",
            "id": 121198,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Далее давай создадим функцию для тебя, программист!\n\n1. Напиши функцию `coding()`, которая принимает параметр `isCodeDone` и возвращает `Promise`.\n2. Используй функцию с параметрами `resolve` и `reject` в качестве параметра `Promise`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "function orderFromBoss() {\r\n  return new Promise(function(resolve, reject) {\r\n    let isCodeDone = false;\r\n    console.log(\"Finish the code, it's an order!\");\r\n    resolve(isCodeDone);\r\n  });\r\n}",
                  "solvedContent": "function orderFromBoss() {\r\n  return new Promise(function(resolve, reject) {\r\n    let isCodeDone = false;\r\n    console.log(\"Finish the code, it's an order!\");\r\n    resolve(isCodeDone);\r\n  });\r\n}\r\n\r\nfunction coding(isCodeDone) {\r\n  return new Promise(function(resolve, reject) {});\r\n}"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Coding II",
            "id": 121208,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Кодерам нужно писать код только тогда, когда у них есть задача. Давайте изменим функцию `coding()`, чтобы это отразить.\n\n1. Внутри функции promise `coding()` проверь, является ли `isCodeDone` `false`.\n2. Если `isCodeDone` равно `false`, выведи `Working...` с помощью `console.log()`.\n3. Затем установи `isCodeDone` в `true` и передай `isCodeDone` как параметр для `resolve()`.\n4. Если `isCodeDone` равно `true`, передай ```\"No instructions from boss yet.\"``` как параметр для `reject()`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "function orderFromBoss() {\r\n  return new Promise(function(resolve, reject) {\r\n    let isCodeDone = false;\r\n    console.log(\"Finish the code, it's an order!\");\r\n    resolve(isCodeDone);\r\n  });\r\n}\r\n\r\nfunction coding(isCodeDone) {\r\n  return new Promise(function(resolve, reject) {});\r\n}",
                  "solvedContent": "function orderFromBoss() {\r\n  return new Promise(function(resolve, reject) {\r\n    let isCodeDone = false;\r\n    console.log(\"Finish the code, it's an order!\");\r\n    resolve(isCodeDone);\r\n  });\r\n}\r\n\r\nfunction coding(isCodeDone) {\r\n  return new Promise(function(resolve, reject) {\r\n    if (!isCodeDone) {\r\n      console.log(\"Working...\");\r\n      isCodeDone = true;\r\n      resolve(isCodeDone);\r\n    } else {\r\n      reject(\"No instructions from boss yet.\");\r\n    }\r\n  });\r\n}"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Performance Review I",
            "id": 121199,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Когда мы закончим нашу работу, наши начальники захотят оценить нашу производительность.\n\n1. Напиши функцию `performanceReview()`, которая принимает параметр `isCodeDone` и возвращает `Promise`.\n2. Используй функцию с параметрами `resolve` и `reject` в качестве параметра `Promise`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "function orderFromBoss() {\r\n  return new Promise(function(resolve, reject) {\r\n    let isCodeDone = false;\r\n    console.log(\"Finish the code, it's an order!\");\r\n    resolve(isCodeDone);\r\n  });\r\n}\r\n\r\nfunction coding(isCodeDone) {\r\n  return new Promise(function(resolve, reject) {\r\n    if (!isCodeDone) {\r\n      console.log(\"Working...\");\r\n      isCodeDone = true;\r\n      resolve(isCodeDone);\r\n    } else {\r\n      reject(\"No instructions from boss yet.\");\r\n    }\r\n  });\r\n}",
                  "solvedContent": "function orderFromBoss() {\r\n  return new Promise(function(resolve, reject) {\r\n    let isCodeDone = false;\r\n    console.log(\"Finish the code, it's an order!\");\r\n    resolve(isCodeDone);\r\n  });\r\n}\r\n\r\nfunction coding(isCodeDone) {\r\n  return new Promise(function(resolve, reject) {\r\n    if (!isCodeDone) {\r\n      console.log(\"Working...\");\r\n      isCodeDone = true;\r\n      resolve(isCodeDone);\r\n    } else {\r\n      reject(\"No instructions from boss yet.\");\r\n    }\r\n  });\r\n}\r\n\r\nfunction performanceReview(isCodeDone) {\r\n  return new Promise(function(resolve, reject) {});\r\n}"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Performance Review II",
            "id": 121209,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Наши начальники оценили нашу работу, но мы не можем улучшить себя, если отзыв не будет с нами поделён. Давайте изменим `performanceReview()`, чтобы это сделать.\n\n1. Внутри функции-промиса `performanceReview()` проверь, является ли `isCodeDone` `true`.\n2. Если `isCodeDone` `true`, установи `\"You kept your promise and finished the code. You're getting promoted!\"` в качестве параметра для `resolve()`.\n3. Если `isCodeDone` `false`, установи `\"You broke your promise, how can I trust you with bigger responsibilities?\"` в качестве параметра для `reject()`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "function orderFromBoss() {\r\n  return new Promise(function(resolve, reject) {\r\n    let isCodeDone = false;\r\n    console.log(\"Finish the code, it's an order!\");\r\n    resolve(isCodeDone);\r\n  });\r\n}\r\n\r\nfunction coding(isCodeDone) {\r\n  return new Promise(function(resolve, reject) {\r\n    if (!isCodeDone) {\r\n      console.log(\"Working...\");\r\n      isCodeDone = true;\r\n      resolve(isCodeDone);\r\n    } else {\r\n      reject(\"No instructions from boss yet.\");\r\n    }\r\n  });\r\n}\r\n\r\nfunction performanceReview(isCodeDone) {\r\n  return new Promise(function(resolve, reject) {});\r\n}",
                  "solvedContent": "function orderFromBoss() {\r\n  return new Promise(function(resolve, reject) {\r\n    let isCodeDone = false;\r\n    console.log(\"Finish the code, it's an order!\");\r\n    resolve(isCodeDone);\r\n  });\r\n}\r\n\r\nfunction coding(isCodeDone) {\r\n  return new Promise(function(resolve, reject) {\r\n    if (!isCodeDone) {\r\n      console.log(\"Working...\");\r\n      isCodeDone = true;\r\n      resolve(isCodeDone);\r\n    } else {\r\n      reject(\"No instructions from boss yet.\");\r\n    }\r\n  });\r\n}\r\n\r\nfunction performanceReview(isCodeDone) {\r\n  return new Promise(function(resolve, reject) {\r\n    if (isCodeDone) {\r\n      resolve(\r\n        \"You kept your promise and finished the code. You're getting promoted!\"\r\n        );\r\n    } else {\r\n      reject(\r\n        \"You broke your promise, how can I trust you with bigger responsibilities?\"\r\n        );\r\n    }\r\n  });\r\n}"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Random Day at Work I",
            "id": 121200,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Теперь, когда все сценарии уже реализованы, давайте объединим их, чтобы сформировать рабочий день. Поскольку в реальной жизни события не всегда происходят одно за другим, мы также должны сделать функцию асинхронной.\n\n1. Напиши асинхронную функцию `randomDayAtWork()`.\n2. Вызови `orderFromBoss()` и сохрани результат в переменной `instruction`.\n3. Вызови `coding()` с использованием `instruction` в качестве параметра и сохрани результат в переменной `work`.\n4. Вызови `performanceReview()` с использованием `work` в качестве параметра и сохрани результат в переменной `review`.\n5. Выведи значение `review` с помощью `console.log()`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "function orderFromBoss() {\r\n  return new Promise(function(resolve, reject) {\r\n    let isCodeDone = false;\r\n    console.log(\"Finish the code, it's an order!\");\r\n    resolve(isCodeDone);\r\n  });\r\n}\r\n\r\nfunction coding(isCodeDone) {\r\n  return new Promise(function(resolve, reject) {\r\n    if (!isCodeDone) {\r\n      console.log(\"Working...\");\r\n      isCodeDone = true;\r\n      resolve(isCodeDone);\r\n    } else {\r\n      reject(\"No instructions from boss yet.\");\r\n    }\r\n  });\r\n}\r\n\r\nfunction performanceReview(isCodeDone) {\r\n  return new Promise(function(resolve, reject) {\r\n    if (isCodeDone) {\r\n      resolve(\r\n        \"You kept your promise and finished the code. You're getting promoted!\"\r\n        );\r\n    } else {\r\n      reject(\r\n        \"You broke your promise, how can I trust you with bigger responsibilities?\"\r\n        );\r\n    }\r\n  });\r\n}",
                  "solvedContent": "function orderFromBoss() {\r\n  return new Promise(function(resolve, reject) {\r\n    let isCodeDone = false;\r\n    console.log(\"Finish the code, it's an order!\");\r\n    resolve(isCodeDone);\r\n  });\r\n}\r\n\r\nfunction coding(isCodeDone) {\r\n  return new Promise(function(resolve, reject) {\r\n    if (!isCodeDone) {\r\n      console.log(\"Working...\");\r\n      isCodeDone = true;\r\n      resolve(isCodeDone);\r\n    } else {\r\n      reject(\"No instructions from boss yet.\");\r\n    }\r\n  });\r\n}\r\n\r\nfunction performanceReview(isCodeDone) {\r\n  return new Promise(function(resolve, reject) {\r\n    if (isCodeDone) {\r\n      resolve(\r\n        \"You kept your promise and finished the code. You're getting promoted!\"\r\n        );\r\n    } else {\r\n      reject(\r\n        \"You broke your promise, how can I trust you with bigger responsibilities?\"\r\n        );\r\n    }\r\n  });\r\n}\r\nasync function randomDayAtWork() {\r\n  const instruction = orderFromBoss();\r\n  const work = coding(instruction);\r\n  const review = performanceReview(work);\r\n  console.log(review);\r\n}"
                }
              ],
              "hints": [
                {
                  "title": "Hint",
                  "content": "You can make your functions asynchronous by adding the `async` keyword before defining the function. The syntax is:\n```\nasync function myAsyncFunc(){\n\n//code here\n\n}\n```"
                }
              ]
            }
          },
          {
            "title": "Random Day at Work II",
            "id": 121210,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Как ты знаешь, иногда работа не готова для нас, и нам нужно подождать. Например, мы должны дождаться приказа от нашего начальника, прежде чем начать что-то делать!\n\n1. Добавь ключевое слово `await` к вызовам функций в функции `randomDayAtWork()`, чтобы убедиться, что они будут вызываться только после завершения выполнения предыдущей.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "function orderFromBoss() {\r\n  return new Promise(function(resolve, reject) {\r\n    let isCodeDone = false;\r\n    console.log(\"Finish the code, it's an order!\");\r\n    resolve(isCodeDone);\r\n  });\r\n}\r\n\r\nfunction coding(isCodeDone) {\r\n  return new Promise(function(resolve, reject) {\r\n    if (!isCodeDone) {\r\n      console.log(\"Working...\");\r\n      isCodeDone = true;\r\n      resolve(isCodeDone);\r\n    } else {\r\n      reject(\"No instructions from boss yet.\");\r\n    }\r\n  });\r\n}\r\n\r\nfunction performanceReview(isCodeDone) {\r\n  return new Promise(function(resolve, reject) {\r\n    if (isCodeDone) {\r\n      resolve(\r\n        \"You kept your promise and finished the code. You're getting promoted!\"\r\n        );\r\n    } else {\r\n      reject(\r\n        \"You broke your promise, how can I trust you with bigger responsibilities?\"\r\n        );\r\n    }\r\n  });\r\n}\r\nasync function randomDayAtWork() {\r\n  const instruction = orderFromBoss();\r\n  const work = coding(instruction);\r\n  const review = performanceReview(work);\r\n  console.log(review);\r\n}",
                  "solvedContent": "function orderFromBoss() {\r\n  return new Promise(function(resolve, reject) {\r\n    let isCodeDone = false;\r\n    console.log(\"Finish the code, it's an order!\");\r\n    resolve(isCodeDone);\r\n  });\r\n}\r\n\r\nfunction coding(isCodeDone) {\r\n  return new Promise(function(resolve, reject) {\r\n    if (!isCodeDone) {\r\n      console.log(\"Working...\");\r\n      isCodeDone = true;\r\n      resolve(isCodeDone);\r\n    } else {\r\n      reject(\"No instructions from boss yet.\");\r\n    }\r\n  });\r\n}\r\n\r\nfunction performanceReview(isCodeDone) {\r\n  return new Promise(function(resolve, reject) {\r\n    if (isCodeDone) {\r\n      resolve(\r\n        \"You kept your promise and finished the code. You're getting promoted!\"\r\n        );\r\n    } else {\r\n      reject(\r\n        \"You broke your promise, how can I trust you with bigger responsibilities?\"\r\n        );\r\n    }\r\n  });\r\n}\r\nasync function randomDayAtWork() {\r\n  const instruction = await orderFromBoss();\r\n  const work = await coding(instruction);\r\n  const review = await performanceReview(work);\r\n  console.log(review);\r\n}"
                }
              ],
              "hints": [
                {
                  "title": "Hint",
                  "content": "`await` should be before the function call.\n\n```\nawait myFunc();\n```"
                }
              ]
            }
          },
          {
            "title": "Random Day at Work III",
            "id": 121201,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Отлично! Последний шаг — проверить, выполнены ли promises. Promises не всегда выполняются, поэтому мы должны **попробовать** выполнить функции, которые написали ранее, и **поймать** ошибки, которые могут возникнуть при попытке выполнения кода.\n\n1. Используй `try`, чтобы запустить код внутри `randomDayAtWork()`.\n2. После блока `try` в `randomDayAtWork()` напиши `catch` с `error` в качестве параметра.\n3. В блоке `catch` выведи `error` с помощью `console.log`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "function orderFromBoss() {\r\n  return new Promise(function(resolve, reject) {\r\n    let isCodeDone = false;\r\n    console.log(\"Finish the code, it's an order!\");\r\n    resolve(isCodeDone);\r\n  });\r\n}\r\n\r\nfunction coding(isCodeDone) {\r\n  return new Promise(function(resolve, reject) {\r\n    if (!isCodeDone) {\r\n      console.log(\"Working...\");\r\n      isCodeDone = true;\r\n      resolve(isCodeDone);\r\n    } else {\r\n      reject(\"No instructions from boss yet.\");\r\n    }\r\n  });\r\n}\r\n\r\nfunction performanceReview(isCodeDone) {\r\n  return new Promise(function(resolve, reject) {\r\n    if (isCodeDone) {\r\n      resolve(\r\n        \"You kept your promise and finished the code. You're getting promoted!\"\r\n        );\r\n    } else {\r\n      reject(\r\n        \"You broke your promise, how can I trust you with bigger responsibilities?\"\r\n        );\r\n    }\r\n  });\r\n}\r\nasync function randomDayAtWork() {\r\n  const instruction = await orderFromBoss();\r\n  const work = await coding(instruction);\r\n  const review = await performanceReview(work);\r\n  console.log(review);\r\n}",
                  "solvedContent": "function orderFromBoss() {\r\n  return new Promise(function(resolve, reject) {\r\n    let isCodeDone = false;\r\n    console.log(\"Finish the code, it's an order!\");\r\n    resolve(isCodeDone);\r\n  });\r\n}\r\n\r\nfunction coding(isCodeDone) {\r\n  return new Promise(function(resolve, reject) {\r\n    if (!isCodeDone) {\r\n      console.log(\"Working...\");\r\n      isCodeDone = true;\r\n      resolve(isCodeDone);\r\n    } else {\r\n      reject(\"No instructions from boss yet.\");\r\n    }\r\n  });\r\n}\r\n\r\nfunction performanceReview(isCodeDone) {\r\n  return new Promise(function(resolve, reject) {\r\n    if (isCodeDone) {\r\n      resolve(\r\n        \"You kept your promise and finished the code. You're getting promoted!\"\r\n        );\r\n    } else {\r\n      reject(\r\n        \"You broke your promise, how can I trust you with bigger responsibilities?\"\r\n        );\r\n    }\r\n  });\r\n}\r\nasync function randomDayAtWork() {\r\n  try {\r\n    const instruction = await orderFromBoss();\r\n    const work = await coding(instruction);\r\n    const review = await performanceReview(work);\r\n    console.log(review);\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n}"
                }
              ],
              "hints": [
                {
                  "title": "Hint",
                  "content": "The syntax for `try-catch` is as below:\n\n```\ntry {\n\n// code to try\n\n} catch(error) {\n\n//code to run when an error happens\n\n}\n```"
                }
              ]
            }
          },
          {
            "title": "Execute randomDayAtWork()!",
            "id": 121202,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Все наши функции готовы, но они не будут выполняться, если мы ничего с этим не сделаем! Давай вызовем функцию, которая начинает новый случайный день на работе.\n\n1. В конце кода вызови `randomDayAtWork()`",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.js",
                  "codeLanguage": "javascript",
                  "content": "function orderFromBoss() {\r\n  return new Promise(function(resolve, reject) {\r\n    let isCodeDone = false;\r\n    console.log(\"Finish the code, it's an order!\");\r\n    resolve(isCodeDone);\r\n  });\r\n}\r\n\r\nfunction coding(isCodeDone) {\r\n  return new Promise(function(resolve, reject) {\r\n    if (!isCodeDone) {\r\n      console.log(\"Working...\");\r\n      isCodeDone = true;\r\n      resolve(isCodeDone);\r\n    } else {\r\n      reject(\"No instructions from boss yet.\");\r\n    }\r\n  });\r\n}\r\n\r\nfunction performanceReview(isCodeDone) {\r\n  return new Promise(function(resolve, reject) {\r\n    if (isCodeDone) {\r\n      resolve(\r\n        \"You kept your promise and finished the code. You're getting promoted!\"\r\n        );\r\n    } else {\r\n      reject(\r\n        \"You broke your promise, how can I trust you with bigger responsibilities?\"\r\n        );\r\n    }\r\n  });\r\n}\r\nasync function randomDayAtWork() {\r\n  try {\r\n    const instruction = await orderFromBoss();\r\n    const work = await coding(instruction);\r\n    const review = await performanceReview(work);\r\n    console.log(review);\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n}",
                  "solvedContent": "function orderFromBoss() {\r\n  return new Promise(function(resolve, reject) {\r\n    let isCodeDone = false;\r\n    console.log(\"Finish the code, it's an order!\");\r\n    resolve(isCodeDone);\r\n  });\r\n}\r\n\r\nfunction coding(isCodeDone) {\r\n  return new Promise(function(resolve, reject) {\r\n    if (!isCodeDone) {\r\n      console.log(\"Working...\");\r\n      isCodeDone = true;\r\n      resolve(isCodeDone);\r\n    } else {\r\n      reject(\"No instructions from boss yet.\");\r\n    }\r\n  });\r\n}\r\n\r\nfunction performanceReview(isCodeDone) {\r\n  return new Promise(function(resolve, reject) {\r\n    if (isCodeDone) {\r\n      resolve(\r\n        \"You kept your promise and finished the code. You're getting promoted!\"\r\n        );\r\n    } else {\r\n      reject(\r\n        \"You broke your promise, how can I trust you with bigger responsibilities?\"\r\n        );\r\n    }\r\n  });\r\n}\r\nasync function randomDayAtWork() {\r\n  try {\r\n    const instruction = await orderFromBoss();\r\n    const work = await coding(instruction);\r\n    const review = await performanceReview(work);\r\n    console.log(review);\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n}\r\nrandomDayAtWork();"
                }
              ],
              "hints": []
            }
          }
        ]
      }
    ]
  }
}