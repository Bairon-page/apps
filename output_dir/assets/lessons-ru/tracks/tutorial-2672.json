{
  "tutorial": {
    "id": 2672,
    "version": 4,
    "type": "guidedProject",
    "isNew": false,
    "codeLanguage": "python",
    "title": "Библиотека - Часть 2",
    "descriptionContent": "Расширь свой проект до полноценной библиотечной системы, которая организует и хранит все твои книги",
    "shortDescriptionContent": "",
    "showInTrack": true,
    "iconBanner": "tutorial-2672-icon-banner.svg",
    "chapters": [
      {
        "id": 14647,
        "title": "Глава №1",
        "type": "practiceLevel3",
        "lessons": [
          {
            "title": "Lesson #1",
            "id": 129544,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Во второй части проекта **Library** мы введем библиотеку, которая будет содержать все книги.\n\n1. Создайте новый класс с именем `Library`.\n2. Определите конструктор этого класса и внутри инициализируйте `self.books` как пустой список.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "class Book:\n\n  def __init__(self, title, author):\n    self.title = title\n    self.author = author\n    self.available = True\n\n  def checkout(self):\n    if self.available:\n      self.available = False\n      return True\n    else:\n      return False\n\n  def return_book(self):\n    self.available = True\n\n  def display_info(self):\n    print(\n        f\"Title: {self.title}\\nAuthor: {self.author}\\nAvailable: {'Yes' if self.available else 'No'}\"\n    )\n\nbook1 = Book(\"Dracula\", \"Bram Stoker\")\nbook2 = Book(\"1984\", \"George Orwell\")\nbook3 = Book(\"Frankenstein\", \"Mary Shelley\")\nbooks = [book1, book2, book3]\n\nfor book in books:\n  book.display_info()",
                  "solvedContent": "class Book:\n\n  def __init__(self, title, author):\n    self.title = title\n    self.author = author\n    self.available = True\n\n  def checkout(self):\n    if self.available:\n      self.available = False\n      return True\n    else:\n      return False\n\n  def return_book(self):\n    self.available = True\n\n  def display_info(self):\n    print(\n        f\"Title: {self.title}\\nAuthor: {self.author}\\nAvailable: {'Yes' if self.available else 'No'}\"\n    )\n\nbook1 = Book(\"Dracula\", \"Bram Stoker\")\nbook2 = Book(\"1984\", \"George Orwell\")\nbook3 = Book(\"Frankenstein\", \"Mary Shelley\")\nbooks = [book1, book2, book3]\n\nfor book in books:\n  book.display_info()\n\nclass Library:\n\n  def __init__(self):\n    self.books = []"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Lesson #2",
            "id": 129545,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Далее давай создадим метод внутри класса `Library` для добавления книг в библиотеку.\n\n1. Определи метод `add_book` внутри класса `Library`, который принимает `book` в качестве аргумента и добавляет его в список `books`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "class Book:\n\n  def __init__(self, title, author):\n    self.title = title\n    self.author = author\n    self.available = True\n\n  def checkout(self):\n    if self.available:\n      self.available = False\n      return True\n    else:\n      return False\n\n  def return_book(self):\n    self.available = True\n\n  def display_info(self):\n    print(\n        f\"Title: {self.title}\\nAuthor: {self.author}\\nAvailable: {'Yes' if self.available else 'No'}\"\n    )\n\nbook1 = Book(\"Dracula\", \"Bram Stoker\")\nbook2 = Book(\"1984\", \"George Orwell\")\nbook3 = Book(\"Frankenstein\", \"Mary Shelley\")\nbooks = [book1, book2, book3]\n\nfor book in books:\n  book.display_info()\n\nclass Library:\n\n  def __init__(self):\n    self.books = []",
                  "solvedContent": "class Book:\n\n  def __init__(self, title, author):\n    self.title = title\n    self.author = author\n    self.available = True\n\n  def checkout(self):\n    if self.available:\n      self.available = False\n      return True\n    else:\n      return False\n\n  def return_book(self):\n    self.available = True\n\n  def display_info(self):\n    print(\n        f\"Title: {self.title}\\nAuthor: {self.author}\\nAvailable: {'Yes' if self.available else 'No'}\"\n    )\n\nbook1 = Book(\"Dracula\", \"Bram Stoker\")\nbook2 = Book(\"1984\", \"George Orwell\")\nbook3 = Book(\"Frankenstein\", \"Mary Shelley\")\nbooks = [book1, book2, book3]\n\nfor book in books:\n  book.display_info()\n\nclass Library:\n\n  def __init__(self):\n    self.books = []\n\n  def add_book(self, book):\n    self.books.append(book)"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Lesson #3",
            "id": 129546,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Нам также нужно показать книги нашим пользователям.\n\n1. Создай метод `display_books`.\n   - Этот метод должен выводить на экран все книги из списка `books`.\n   - Используй метод `display_info` в классе `Book`, чтобы вывести детали книги при вызове `display_books`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "class Book:\n\n  def __init__(self, title, author):\n    self.title = title\n    self.author = author\n    self.available = True\n\n  def checkout(self):\n    if self.available:\n      self.available = False\n      return True\n    else:\n      return False\n\n  def return_book(self):\n    self.available = True\n\n  def display_info(self):\n    print(\n        f\"Title: {self.title}\\nAuthor: {self.author}\\nAvailable: {'Yes' if self.available else 'No'}\"\n    )\n\nbook1 = Book(\"Dracula\", \"Bram Stoker\")\nbook2 = Book(\"1984\", \"George Orwell\")\nbook3 = Book(\"Frankenstein\", \"Mary Shelley\")\nbooks = [book1, book2, book3]\n\nfor book in books:\n  book.display_info()\n\nclass Library:\n\n  def __init__(self):\n    self.books = []\n\n  def add_book(self, book):\n    self.books.append(book)",
                  "solvedContent": "class Book:\n\n  def __init__(self, title, author):\n    self.title = title\n    self.author = author\n    self.available = True\n\n  def checkout(self):\n    if self.available:\n      self.available = False\n      return True\n    else:\n      return False\n\n  def return_book(self):\n    self.available = True\n\n  def display_info(self):\n    print(\n        f\"Title: {self.title}\\nAuthor: {self.author}\\nAvailable: {'Yes' if self.available else 'No'}\"\n    )\n\nbook1 = Book(\"Dracula\", \"Bram Stoker\")\nbook2 = Book(\"1984\", \"George Orwell\")\nbook3 = Book(\"Frankenstein\", \"Mary Shelley\")\nbooks = [book1, book2, book3]\n\nfor book in books:\n  book.display_info()\n\nclass Library:\n\n  def __init__(self):\n    self.books = []\n\n  def add_book(self, book):\n    self.books.append(book)\n\n  def display_books(self):\n    for book in self.books:\n      book.display_info()"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Lesson #4",
            "id": 129547,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Наконец, давай создадим метод внутри `Library`, который позволит пользователям находить книгу по её названию.\n\n1. Определи метод `get_book_by_title` внутри класса `Library`.\n   - Этот метод должен принимать `title` в качестве аргумента, проходить по каждому элементу в списке `books` и возвращать первый объект `book`, где `book.title` совпадает с `title`.\n   - Он должен возвращать `None`, если совпадение не найдено.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "class Book:\n\n  def __init__(self, title, author):\n    self.title = title\n    self.author = author\n    self.available = True\n\n  def checkout(self):\n    if self.available:\n      self.available = False\n      return True\n    else:\n      return False\n\n  def return_book(self):\n    self.available = True\n\n  def display_info(self):\n    print(\n        f\"Title: {self.title}\\nAuthor: {self.author}\\nAvailable: {'Yes' if self.available else 'No'}\"\n    )\n\nbook1 = Book(\"Dracula\", \"Bram Stoker\")\nbook2 = Book(\"1984\", \"George Orwell\")\nbook3 = Book(\"Frankenstein\", \"Mary Shelley\")\nbooks = [book1, book2, book3]\n\nfor book in books:\n  book.display_info()\n\nclass Library:\n\n  def __init__(self):\n    self.books = []\n\n  def add_book(self, book):\n    self.books.append(book)\n\n  def display_books(self):\n    for book in self.books:\n      book.display_info()",
                  "solvedContent": "class Book:\n\n  def __init__(self, title, author):\n    self.title = title\n    self.author = author\n    self.available = True\n\n  def checkout(self):\n    if self.available:\n      self.available = False\n      return True\n    else:\n      return False\n\n  def return_book(self):\n    self.available = True\n\n  def display_info(self):\n    print(\n        f\"Title: {self.title}\\nAuthor: {self.author}\\nAvailable: {'Yes' if self.available else 'No'}\"\n    )\n\nbook1 = Book(\"Dracula\", \"Bram Stoker\")\nbook2 = Book(\"1984\", \"George Orwell\")\nbook3 = Book(\"Frankenstein\", \"Mary Shelley\")\nbooks = [book1, book2, book3]\n\nfor book in books:\n  book.display_info()\n\nclass Library:\n\n  def __init__(self):\n    self.books = []\n\n  def add_book(self, book):\n    self.books.append(book)\n\n  def display_books(self):\n    for book in self.books:\n      book.display_info()\n\n  def get_book_by_title(self, title):\n    for book in self.books:\n      if book.title.lower() == title.lower():\n        return book\n    return None"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Lesson #5",
            "id": 129548,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Теперь давай создадим экземпляр класса `Library` и добавим несколько книг.\n\n1. Сначала создай экземпляр класса `Library` и присвой его переменной с именем `library`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "class Book:\n\n  def __init__(self, title, author):\n    self.title = title\n    self.author = author\n    self.available = True\n\n  def checkout(self):\n    if self.available:\n      self.available = False\n      return True\n    else:\n      return False\n\n  def return_book(self):\n    self.available = True\n\n  def display_info(self):\n    print(\n        f\"Title: {self.title}\\nAuthor: {self.author}\\nAvailable: {'Yes' if self.available else 'No'}\"\n    )\n\nbook1 = Book(\"Dracula\", \"Bram Stoker\")\nbook2 = Book(\"1984\", \"George Orwell\")\nbook3 = Book(\"Frankenstein\", \"Mary Shelley\")\nbooks = [book1, book2, book3]\n\nfor book in books:\n  book.display_info()\n\nclass Library:\n\n  def __init__(self):\n    self.books = []\n\n  def add_book(self, book):\n    self.books.append(book)\n\n  def display_books(self):\n    for book in self.books:\n      book.display_info()\n\n  def get_book_by_title(self, title):\n    for book in self.books:\n      if book.title.lower() == title.lower():\n        return book\n    return None",
                  "solvedContent": "class Book:\n\n  def __init__(self, title, author):\n    self.title = title\n    self.author = author\n    self.available = True\n\n  def checkout(self):\n    if self.available:\n      self.available = False\n      return True\n    else:\n      return False\n\n  def return_book(self):\n    self.available = True\n\n  def display_info(self):\n    print(\n        f\"Title: {self.title}\\nAuthor: {self.author}\\nAvailable: {'Yes' if self.available else 'No'}\"\n    )\n\nbook1 = Book(\"Dracula\", \"Bram Stoker\")\nbook2 = Book(\"1984\", \"George Orwell\")\nbook3 = Book(\"Frankenstein\", \"Mary Shelley\")\nbooks = [book1, book2, book3]\n\nfor book in books:\n  book.display_info()\n\nclass Library:\n\n  def __init__(self):\n    self.books = []\n\n  def add_book(self, book):\n    self.books.append(book)\n\n  def display_books(self):\n    for book in self.books:\n      book.display_info()\n\n  def get_book_by_title(self, title):\n    for book in self.books:\n      if book.title.lower() == title.lower():\n        return book\n    return None\n\nlibrary = Library()"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Lesson #6",
            "id": 129549,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Теперь, когда у нас есть экземпляр класса `Library`, давайте добавим книги в библиотеку, используя наш новый метод `add_book`.\n\n1. Удалите список `books` и цикл `for`, который отображает информацию о книгах.\n2. Затем вызовите `add_book` на объекте `library` три раза, чтобы добавить все три ранее созданные книги в библиотеку.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "class Book:\n\n  def __init__(self, title, author):\n    self.title = title\n    self.author = author\n    self.available = True\n\n  def checkout(self):\n    if self.available:\n      self.available = False\n      return True\n    else:\n      return False\n\n  def return_book(self):\n    self.available = True\n\n  def display_info(self):\n    print(\n        f\"Title: {self.title}\\nAuthor: {self.author}\\nAvailable: {'Yes' if self.available else 'No'}\"\n    )\n\nbook1 = Book(\"Dracula\", \"Bram Stoker\")\nbook2 = Book(\"1984\", \"George Orwell\")\nbook3 = Book(\"Frankenstein\", \"Mary Shelley\")\nbooks = [book1, book2, book3]\n\nfor book in books:\n  book.display_info()\n\nclass Library:\n\n  def __init__(self):\n    self.books = []\n\n  def add_book(self, book):\n    self.books.append(book)\n\n  def display_books(self):\n    for book in self.books:\n      book.display_info()\n\n  def get_book_by_title(self, title):\n    for book in self.books:\n      if book.title.lower() == title.lower():\n        return book\n    return None\n\nlibrary = Library()",
                  "solvedContent": "class Book:\n\n  def __init__(self, title, author):\n    self.title = title\n    self.author = author\n    self.available = True\n\n  def checkout(self):\n    if self.available:\n      self.available = False\n      return True\n    else:\n      return False\n\n  def return_book(self):\n    self.available = True\n\n  def display_info(self):\n    print(\n        f\"Title: {self.title}\\nAuthor: {self.author}\\nAvailable: {'Yes' if self.available else 'No'}\"\n    )\n\nbook1 = Book(\"Dracula\", \"Bram Stoker\")\nbook2 = Book(\"1984\", \"George Orwell\")\nbook3 = Book(\"Frankenstein\", \"Mary Shelley\")\n\nclass Library:\n\n  def __init__(self):\n    self.books = []\n\n  def add_book(self, book):\n    self.books.append(book)\n\n  def display_books(self):\n    for book in self.books:\n      book.display_info()\n\n  def get_book_by_title(self, title):\n    for book in self.books:\n      if book.title.lower() == title.lower():\n        return book\n    return None\n\nlibrary = Library()\n\nlibrary.add_book(book1)\nlibrary.add_book(book2)\nlibrary.add_book(book3)"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Lesson #6 - Copy",
            "id": 129550,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Мы только что удалили операторы print. Давайте теперь вернем их с помощью нашего `library`.\n\n1. Вызови `display_books` на экземпляре `library` в самом конце скрипта, чтобы снова отобразить все книги.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "class Book:\n\n  def __init__(self, title, author):\n    self.title = title\n    self.author = author\n    self.available = True\n\n  def checkout(self):\n    if self.available:\n      self.available = False\n      return True\n    else:\n      return False\n\n  def return_book(self):\n    self.available = True\n\n  def display_info(self):\n    print(\n        f\"Title: {self.title}\\nAuthor: {self.author}\\nAvailable: {'Yes' if self.available else 'No'}\"\n    )\n\nbook1 = Book(\"Dracula\", \"Bram Stoker\")\nbook2 = Book(\"1984\", \"George Orwell\")\nbook3 = Book(\"Frankenstein\", \"Mary Shelley\")\n\nclass Library:\n\n  def __init__(self):\n    self.books = []\n\n  def add_book(self, book):\n    self.books.append(book)\n\n  def display_books(self):\n    for book in self.books:\n      book.display_info()\n\n  def get_book_by_title(self, title):\n    for book in self.books:\n      if book.title.lower() == title.lower():\n        return book\n    return None\n\nlibrary = Library()\n\nlibrary.add_book(book1)\nlibrary.add_book(book2)\nlibrary.add_book(book3)",
                  "solvedContent": "class Book:\n\n  def __init__(self, title, author):\n    self.title = title\n    self.author = author\n    self.available = True\n\n  def checkout(self):\n    if self.available:\n      self.available = False\n      return True\n    else:\n      return False\n\n  def return_book(self):\n    self.available = True\n\n  def display_info(self):\n    print(\n        f\"Title: {self.title}\\nAuthor: {self.author}\\nAvailable: {'Yes' if self.available else 'No'}\"\n    )\n\nbook1 = Book(\"Dracula\", \"Bram Stoker\")\nbook2 = Book(\"1984\", \"George Orwell\")\nbook3 = Book(\"Frankenstein\", \"Mary Shelley\")\n\nclass Library:\n\n  def __init__(self):\n    self.books = []\n\n  def add_book(self, book):\n    self.books.append(book)\n\n  def display_books(self):\n    for book in self.books:\n      book.display_info()\n\n  def get_book_by_title(self, title):\n    for book in self.books:\n      if book.title.lower() == title.lower():\n        return book\n    return None\n\nlibrary = Library()\n\nlibrary.add_book(book1)\nlibrary.add_book(book2)\nlibrary.add_book(book3)\n\nlibrary.display_books()"
                }
              ],
              "hints": []
            }
          }
        ]
      }
    ]
  }
}