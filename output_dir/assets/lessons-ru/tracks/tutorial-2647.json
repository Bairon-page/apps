{
  "tutorial": {
    "id": 2647,
    "version": 4,
    "type": "guidedProjectOptional",
    "isNew": false,
    "codeLanguage": "node",
    "title": "Калькулятор",
    "descriptionContent": "Используй Node.JS и Express для создания калькулятора",
    "shortDescriptionContent": "",
    "showInTrack": true,
    "iconBanner": "tutorial-2647-icon-banner.svg",
    "chapters": [
      {
        "id": 14610,
        "title": "Глава №1",
        "type": "practiceLevel3",
        "lessons": [
          {
            "title": "Lesson #1",
            "id": 129327,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "В этом проекте мы создадим простой сервер калькулятора с использованием Express.js.\n\nДавайте начнем с настройки нашего express сервера. Пока мы не получим полезный ответ. Не удивляйся.\n\n1. Объяви переменную `express` и подключи модуль `express`.\n2. Объяви переменную `app` и инициализируй ее, вызвав функцию `express`.\n3. Объяви переменную `port` и присвой ей значение `3000`.\n4. Используй функцию `listen` на `app`, чтобы приложение слушало порт, указанный в переменной `port`.\n5. Выведи сообщение в консоль внутри callback функции `listen`, чтобы мы знали, что наш сервер работает правильно.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "app.js",
                  "codeLanguage": "javascript",
                  "content": "",
                  "solvedContent": "const express = require('express');\nconst app = express();\nconst port = 3000;\n\napp.listen(port, () => {\n  console.log(`Calculator server running on port ${port}`);\n});"
                }
              ],
              "hints": [],
              "httpOptions": {
                "method": "GET",
                "path": "/",
                "body": null
              }
            }
          },
          {
            "title": "Lesson #2",
            "id": 129329,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Теперь давай создадим маршруты для нашего калькулятора.\n\nНачнем с маршрута для сложения. Этот маршрут будет складывать два числа, переданных в качестве параметров запроса.\n\n1. Поможем Express разобрать тело нашего запроса, добавив `app.use(express.json());` перед тем, как мы напишем первый маршрут.\n2. Создай обработчик маршрута для `POST` запроса на `/add`. В функции обратного вызова получи параметры запроса `a` и `b` из `req.body`.\n3. Вычисли результат сложения `a` и `b`. Убедись, что сначала преобразовал их в числа, используя `parseFloat`.\n4. Ответь JSON объектом, содержащим ключ `\"result\"`, который хранит результат в качестве значения.\n5. Установи код состояния на `200`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "app.js",
                  "codeLanguage": "javascript",
                  "content": "const express = require('express');\nconst app = express();\nconst port = 3000;\n\napp.listen(port, () => {\n  console.log(`Calculator server running on port ${port}`);\n});",
                  "solvedContent": "const express = require('express');\nconst app = express();\nconst port = 3000;\n\napp.listen(port, () => {\n  console.log(`Calculator server running on port ${port}`);\n});\n\napp.use(express.json());\n\napp.post('/add', (req, res) => {\n  const { a, b } = req.body;\n  const result = parseFloat(a) + parseFloat(b);\n  res.status(200).json({ result: result });\n});"
                }
              ],
              "hints": [],
              "httpOptions": {
                "method": "POST",
                "path": "/add",
                "body": "{\"a\": 1, \"b\": 2}"
              }
            }
          },
          {
            "title": "Lesson #3",
            "id": 129330,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Отличная работа! Теперь давай сделаем то же самое для вычитания.\n\n1. Создай обработчик маршрута для `POST` запросов к `/subtract`. Используй те же шаги, что и для маршрута сложения, но на этот раз вычти `b` из `a`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "app.js",
                  "codeLanguage": "javascript",
                  "content": "const express = require('express');\nconst app = express();\nconst port = 3000;\n\napp.listen(port, () => {\n  console.log(`Calculator server running on port ${port}`);\n});\n\napp.use(express.json());\n\napp.post('/add', (req, res) => {\n  const { a, b } = req.body;\n  const result = parseFloat(a) + parseFloat(b);\n  res.status(200).json({ result: result });\n});",
                  "solvedContent": "const express = require('express');\nconst app = express();\nconst port = 3000;\n\napp.listen(port, () => {\n  console.log(`Calculator server running on port ${port}`);\n});\n\napp.use(express.json());\n\napp.post('/add', (req, res) => {\n  const { a, b } = req.body;\n  const result = parseFloat(a) + parseFloat(b);\n  res.status(200).json({ result: result });\n});\n\napp.post('/subtract', (req, res) => {\n  const { a, b } = req.body;\n  const result = parseFloat(a) - parseFloat(b);\n  res.status(200).json({ result: result });\n});"
                }
              ],
              "hints": [],
              "httpOptions": {
                "method": "POST",
                "path": "/subtract",
                "body": "{\"a\": 10, \"b\": 19}"
              }
            }
          },
          {
            "title": "Lesson #4",
            "id": 129331,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Далее, давай создадим маршрут для умножения.\n\n1. Создай обработчик маршрута для `POST` запросов на `/multiply`.\n2. В колбэке получи значения для `a` и `b` из `req.body`.\n3. Умножь `a` и `b`, чтобы получить результат.\n4. Верни результат так же, как ты делал в других маршрутах.\n5. И не забудь установить код состояния на `200`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "app.js",
                  "codeLanguage": "javascript",
                  "content": "const express = require('express');\nconst app = express();\nconst port = 3000;\n\napp.listen(port, () => {\n  console.log(`Calculator server running on port ${port}`);\n});\n\napp.use(express.json());\n\napp.post('/add', (req, res) => {\n  const { a, b } = req.body;\n  const result = parseFloat(a) + parseFloat(b);\n  res.status(200).json({ result: result });\n});\n\napp.post('/subtract', (req, res) => {\n  const { a, b } = req.body;\n  const result = parseFloat(a) - parseFloat(b);\n  res.status(200).json({ result: result });\n});",
                  "solvedContent": "const express = require('express');\nconst app = express();\nconst port = 3000;\n\napp.listen(port, () => {\n  console.log(`Calculator server running on port ${port}`);\n});\n\napp.use(express.json());\n\napp.post('/add', (req, res) => {\n  const { a, b } = req.body;\n  const result = parseFloat(a) + parseFloat(b);\n  res.status(200).json({ result: result });\n});\n\napp.post('/subtract', (req, res) => {\n  const { a, b } = req.body;\n  const result = parseFloat(a) - parseFloat(b);\n  res.status(200).json({ result: result });\n});\n\napp.post('/multiply', (req, res) => {\n  const { a, b } = req.body;\n  const result = parseFloat(a) * parseFloat(b);\n  res.status(200).json({ result: result });\n});"
                }
              ],
              "hints": [],
              "httpOptions": {
                "method": "POST",
                "path": "/multiply",
                "body": "{\"a\": -1, \"b\": -5}"
              }
            }
          },
          {
            "title": "Lesson #5",
            "id": 129332,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Наконец, давай создадим маршрут для деления. Однако, нужно быть осторожным с делением, потому что мы не можем делить на ноль.\n\n1. Создай обработчик маршрута для `POST` запросов к `/divide`.\n2. В колбэке получи значения `a` и `b` из `req.body`.\n3. Проверь, равен ли `b` нулю. Если да, ответь с кодом состояния 400 и JSON объектом, содержащим сообщение об ошибке.\n4. Если `b` не равен нулю, раздели `a` на `b`, чтобы получить результат, и ответь с JSON объектом, содержащим результат. Здесь мы хотим установить код состояния на `200`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "app.js",
                  "codeLanguage": "javascript",
                  "content": "const express = require('express');\nconst app = express();\nconst port = 3000;\n\napp.listen(port, () => {\n  console.log(`Calculator server running on port ${port}`);\n});\n\napp.use(express.json());\n\napp.post('/add', (req, res) => {\n  const { a, b } = req.body;\n  const result = parseFloat(a) + parseFloat(b);\n  res.status(200).json({ result: result });\n});\n\napp.post('/subtract', (req, res) => {\n  const { a, b } = req.body;\n  const result = parseFloat(a) - parseFloat(b);\n  res.status(200).json({ result: result });\n});\n\napp.post('/multiply', (req, res) => {\n  const { a, b } = req.body;\n  const result = parseFloat(a) * parseFloat(b);\n  res.status(200).json({ result: result });\n});",
                  "solvedContent": "const express = require('express');\nconst app = express();\nconst port = 3000;\n\napp.listen(port, () => {\n  console.log(`Calculator server running on port ${port}`);\n});\n\napp.use(express.json());\n\napp.post('/add', (req, res) => {\n  const { a, b } = req.body;\n  const result = parseFloat(a) + parseFloat(b);\n  res.status(200).json({ result: result });\n});\n\napp.post('/subtract', (req, res) => {\n  const { a, b } = req.body;\n  const result = parseFloat(a) - parseFloat(b);\n  res.status(200).json({ result: result });\n});\n\napp.post('/multiply', (req, res) => {\n  const { a, b } = req.body;\n  const result = parseFloat(a) * parseFloat(b);\n  res.status(200).json({ result: result });\n});\n\napp.post('/divide', (req, res) => {\n  const { a, b } = req.body;\n  if (parseFloat(b) === 0) {\n    res.status(400).json({ error: 'Division by zero is not allowed' });\n  } else {\n    const result = parseFloat(a) / parseFloat(b);\n    res.status(200).json({ result: result });\n  }\n});"
                }
              ],
              "hints": [],
              "httpOptions": {
                "method": "POST",
                "path": "/divide",
                "body": "{\"a\": 10, \"b\": 5}"
              }
            }
          }
        ]
      }
    ]
  }
}