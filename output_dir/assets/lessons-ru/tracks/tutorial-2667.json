{
  "tutorial": {
    "id": 2667,
    "version": 7,
    "type": "guidedProject",
    "isNew": false,
    "codeLanguage": "python",
    "title": "API Star Wars - Часть 1",
    "descriptionContent": "Отправляйся в галактику с проектом, который обращается к Star Wars API для получения персонажей из обширной вселенной Star Wars.",
    "shortDescriptionContent": "",
    "showInTrack": true,
    "iconBanner": "tutorial-2667-icon-banner.svg",
    "chapters": [
      {
        "id": 14642,
        "title": "Глава №1",
        "type": "practiceLevel3",
        "lessons": [
          {
            "title": "Lesson #1",
            "id": 129499,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Добро пожаловать в проект **Star Wars API**, где мы будем использовать внешнее API для получения данных с удаленного сервера и их отображения.\n\n1. Для начала импортируй библиотеку `requests`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "",
                  "solvedContent": "import requests"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Lesson #2",
            "id": 129500,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Мы планируем получить данные из REST API. У этого API есть несколько конечных точек. Давайте сначала вызовем конечную точку people.\n\n1. Создайте переменную с именем `option` и присвойте ей значение `\"people\"`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "import requests",
                  "solvedContent": "import requests\n\noption = \"people\""
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Lesson #3",
            "id": 129501,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Давайте соберем url. Мы будем использовать endpoint `/people`. Но мы хотим быть гибкими, чтобы иметь возможность заменить его в любое время. Вот почему мы используем f-string для его составления.\n\n1. Создайте новую переменную с именем `url` и присвойте ей следующий f-string: `f\"https://swapi.mimo.dev/api/{option}/\"`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "import requests\n\noption = \"people\"",
                  "solvedContent": "import requests\n\noption = \"people\"\nurl = f\"https://swapi.mimo.dev/api/{option}/\""
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Lesson #4",
            "id": 129502,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Пора отправить запрос к API endpoint.\n\n1. Добавь `requests.get(url)` и сохрани возвращенный объект ответа в переменной с именем `response`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "import requests\n\noption = \"people\"\nurl = f\"https://swapi.mimo.dev/api/{option}/\"",
                  "solvedContent": "import requests\n\noption = \"people\"\nurl = f\"https://swapi.mimo.dev/api/{option}/\"\nresponse = requests.get(url)"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Lesson #5",
            "id": 129503,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Нам нужно правильно обрабатывать HTTP ошибки, которые могут возникнуть, если наш запрос не удался. Для этой цели мы будем использовать метод `raise_for_status`.\n\n1. Вызови метод `raise_for_status` на объекте `response`, чтобы вызвать исключение, если HTTP запрос вернул неуспешный статус-код.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "import requests\n\noption = \"people\"\nurl = f\"https://swapi.mimo.dev/api/{option}/\"\nresponse = requests.get(url)",
                  "solvedContent": "import requests\n\noption = \"people\"\nurl = f\"https://swapi.mimo.dev/api/{option}/\"\nresponse = requests.get(url)\nresponse.raise_for_status()"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Lesson #6",
            "id": 129504,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Теперь, когда мы убедились, что наш запрос был успешным, пора разобрать JSON-ответ.\n\n1. Вызови метод `.json()` на `response` и сохрани его возвращаемое значение в переменной с именем `data`.\n2. Выведи сообщение, указывающее количество сущностей, которые были успешно получены, подсчитав длину списка, сохраненного в переменной `data`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "import requests\n\noption = \"people\"\nurl = f\"https://swapi.mimo.dev/api/{option}/\"\nresponse = requests.get(url)\nresponse.raise_for_status()",
                  "solvedContent": "import requests\n\noption = \"people\"\nurl = f\"https://swapi.mimo.dev/api/{option}/\"\nresponse = requests.get(url)\nresponse.raise_for_status()\n\ndata = response.json()\nprint(f\"Successfully fetched {len(data)} entities\")"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Lesson #7",
            "id": 129505,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Наконец, давайте добавим блок try-except, чтобы обработать любые HTTP ошибки, которые могли возникнуть во время нашего запроса.\n\n1. Переместите код обработки HTTP запроса и ответа внутрь блока `try`.\n   - Оставьте оператор импорта, переменные `option` и `url` снаружи.\n   - Остальное должно быть внутри блока `try`.\n2. Внутри блока `except` поймайте `requests.HTTPError` как `e` и выведите сообщение об ошибке, информирующее об ошибке `e`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "import requests\n\noption = \"people\"\nurl = f\"https://swapi.mimo.dev/api/{option}/\"\nresponse = requests.get(url)\nresponse.raise_for_status()\n\ndata = response.json()\nprint(f\"Successfully fetched {len(data)} entities\")",
                  "solvedContent": "import requests\n\noption = \"people\"\nurl = f\"https://swapi.mimo.dev/api/{option}/\"\ntry:\n  response = requests.get(url)\n  response.raise_for_status()\n\n  data = response.json()\n  print(f\"Successfully fetched {len(data)} entities\")\nexcept requests.HTTPError as e:\n  print(f\"Error fetching data: {e}\")"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Lesson #9",
            "id": 129507,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "У нас есть полученные данные. Теперь давайте добавим код, чтобы красиво отобразить эти данные.\n\n1. После блока try-except добавьте оператор `if`, который проверяет, есть ли у `data` значения.\n   - В блоке if выполните итерацию по списку `data`.\n   - Элементы `data` — это словари. Для каждого из них выведите значение ключа `name`.\n2. Добавьте оператор `else`, чтобы вывести `Unable to download data`, если `data` пуст.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "import requests\n\noption = \"people\"\nurl = f\"https://swapi.mimo.dev/api/{option}/\"\ntry:\n  response = requests.get(url)\n  response.raise_for_status()\n\n  data = response.json()\n  print(f\"Successfully fetched {len(data)} entities\")\nexcept requests.HTTPError as e:\n  print(f\"Error fetching data: {e}\")",
                  "solvedContent": "import requests\n\noption = \"people\"\nurl = f\"https://swapi.mimo.dev/api/{option}/\"\ntry:\n  response = requests.get(url)\n  response.raise_for_status()\n\n  data = response.json()\n  print(f\"Successfully fetched {len(data)} entities\")\nexcept requests.HTTPError as e:\n  print(f\"Error fetching data: {e}\")\n\nif data:\n  for entity in data:\n    print(entity[\"name\"])\nelse:\n  print(\"Unable to download data\")"
                }
              ],
              "hints": []
            }
          }
        ]
      }
    ]
  }
}