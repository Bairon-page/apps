{
  "tutorial": {
    "id": 2664,
    "version": 5,
    "type": "guidedProject",
    "isNew": false,
    "codeLanguage": "python",
    "title": "Система заказа еды - Часть 2",
    "descriptionContent": "Расширь свою систему заказов еды, чтобы включить в нее мир вкусов! В этой части мы добавляем разнообразные кухни, превращая твою систему в глобальную гастрономическую точку назначения.",
    "shortDescriptionContent": "",
    "showInTrack": true,
    "iconBanner": "tutorial-2664-icon-banner.svg",
    "chapters": [
      {
        "id": 14639,
        "title": "Глава №1",
        "type": "practiceLevel3",
        "lessons": [
          {
            "title": "Lesson #1",
            "id": 129477,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Добро пожаловать обратно в проект **Food Order System**! Теперь мы дадим нашим пользователям возможность выбирать между разными кухнями. Сначала давайте добавим еще одно меню еды. В этом примере мы добавим меню индийской кухни.\n\n1. Ниже `italian_food` определите `indian_food` как список и заполните его строками, представляющими индийские блюда. Добавьте как минимум 4 строковых элемента в список `indian_food`, такие как `\"Curry\"`, `\"Chutney\"`, `\"Samosa\"` и `\"Naan\"`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "italian_food = [\n  \"Pasta Bolognese\",\n  \"Pepperoni pizza\",\n  \"Margherita pizza\",\n  \"Lasagna\"\n]\n\ndef find_meal(name, menu):\n  return name if name in menu else None\n\ndef select_meal(name):\n  return find_meal(name, italian_food)\n\ndef display_available_meals():\n  print(\"Available Italian Meals:\")\n  for meal in italian_food:\n    print(meal)\n\ndef create_summary(name, amount):\n  order = select_meal(name)\n  if order:\n    return f\"You ordered {amount} {name}\"\n  else:\n    return \"Meal not found\"\n\nprint(\"Welcome to the Food Order System!\")\ndisplay_available_meals()\nname_input = input(\"Enter the name of the meal you want to order: \")\namount_input = int(input(\"Enter the quantity you want to order: \"))\n\nresult = create_summary(name_input, amount_input)\nprint(result)",
                  "solvedContent": "italian_food = [\n  \"Pasta Bolognese\",\n  \"Pepperoni pizza\",\n  \"Margherita pizza\",\n  \"Lasagna\"\n]\n\nindian_food = [\n  \"Curry\",\n  \"Chutney\",\n  \"Samosa\",\n  \"Naan\"\n]\n\ndef find_meal(name, menu):\n  return name if name in menu else None\n\ndef select_meal(name):\n  return find_meal(name, italian_food)\n\ndef display_available_meals():\n  print(\"Available Italian Meals:\")\n  for meal in italian_food:\n    print(meal)\n\ndef create_summary(name, amount):\n  order = select_meal(name)\n  if order:\n    return f\"You ordered {amount} {name}\"\n  else:\n    return \"Meal not found\"\n\nprint(\"Welcome to the Food Order System!\")\ndisplay_available_meals()\nname_input = input(\"Enter the name of the meal you want to order: \")\namount_input = int(input(\"Enter the quantity you want to order: \"))\n\nresult = create_summary(name_input, amount_input)\nprint(result)"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Lesson #1 - Copy",
            "id": 129482,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Давайте сначала позволим нашим пользователям выбрать кухню, из которой они хотят выбрать блюдо.\n\n1. После приветственного сообщения, которое вы выводите, перед другими операторами `input`, добавьте новый `input`.\n   - Спросите, какой тип кухни пользователь хочет выбрать.\n   - Сохраните ввод пользователя в переменной с именем `type_input`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "italian_food = [\n  \"Pasta Bolognese\",\n  \"Pepperoni pizza\",\n  \"Margherita pizza\",\n  \"Lasagna\"\n]\n\nindian_food = [\n  \"Curry\",\n  \"Chutney\",\n  \"Samosa\",\n  \"Naan\"\n]\n\ndef find_meal(name, menu):\n  return name if name in menu else None\n\ndef select_meal(name):\n  return find_meal(name, italian_food)\n\ndef display_available_meals():\n  print(\"Available Italian Meals:\")\n  for meal in italian_food:\n    print(meal)\n\ndef create_summary(name, amount):\n  order = select_meal(name)\n  if order:\n    return f\"You ordered {amount} {name}\"\n  else:\n    return \"Meal not found\"\n\nprint(\"Welcome to the Food Order System!\")\ndisplay_available_meals()\nname_input = input(\"Enter the name of the meal you want to order: \")\namount_input = int(input(\"Enter the quantity you want to order: \"))\n\nresult = create_summary(name_input, amount_input)\nprint(result)",
                  "solvedContent": "italian_food = [\n  \"Pasta Bolognese\",\n  \"Pepperoni pizza\",\n  \"Margherita pizza\",\n  \"Lasagna\"\n]\n\nindian_food = [\n  \"Curry\",\n  \"Chutney\",\n  \"Samosa\",\n  \"Naan\"\n]\n\ndef find_meal(name, menu):\n  return name if name in menu else None\n\ndef select_meal(name):\n  return find_meal(name, italian_food)\n\ndef display_available_meals():\n  print(\"Available Italian Meals:\")\n  for meal in italian_food:\n    print(meal)\n\ndef create_summary(name, amount):\n  order = select_meal(name)\n  if order:\n    return f\"You ordered {amount} {name}\"\n  else:\n    return \"Meal not found\"\n\nprint(\"Welcome to the Food Order System!\")\ntype_input = input(\"Enter the type of food you want to order: \") \ndisplay_available_meals()\nname_input = input(\"Enter the name of the meal you want to order: \")\namount_input = int(input(\"Enter the quantity you want to order: \"))\n\nresult = create_summary(name_input, amount_input)\nprint(result)"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Lesson #1 - Copy - Copy",
            "id": 129483,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Теперь у нас есть разные кухни, поэтому мы должны отображать только выбранную. Для этого измените функцию `display_available_meals`.\n\n1. Передайте параметр с именем `food_type` в функцию.\n2. Используйте оператор `if`, чтобы сравнить, равен ли переданный аргумент `\"Italian\"`.\n3. Добавьте оператор `elif`, чтобы проверить, равен ли переданный аргумент `\"Indian\"`.\n4. Добавьте оператор `else`.\n5. Переместите код, который у вас был раньше, в блок `if`, чтобы отобразить `\"Available Italian Meals\"`, а затем пройдитесь по списку, чтобы напечатать все отдельные блюда.\n6. Сделайте то же самое для блока `elif`, но для индийских блюд.\n7. В блоке `else` напечатайте `\"Invalid food type\"`.\n8. Наконец, передайте ввод пользователя, который мы сохранили в `type_input`, когда вызываете функцию `display_available_meals`.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "italian_food = [\n  \"Pasta Bolognese\",\n  \"Pepperoni pizza\",\n  \"Margherita pizza\",\n  \"Lasagna\"\n]\n\nindian_food = [\n  \"Curry\",\n  \"Chutney\",\n  \"Samosa\",\n  \"Naan\"\n]\n\ndef find_meal(name, menu):\n  return name if name in menu else None\n\ndef select_meal(name):\n  return find_meal(name, italian_food)\n\ndef display_available_meals():\n  print(\"Available Italian Meals:\")\n  for meal in italian_food:\n    print(meal)\n\ndef create_summary(name, amount):\n  order = select_meal(name)\n  if order:\n    return f\"You ordered {amount} {name}\"\n  else:\n    return \"Meal not found\"\n\nprint(\"Welcome to the Food Order System!\")\ntype_input = input(\"Enter the type of food you want to order: \") \ndisplay_available_meals()\nname_input = input(\"Enter the name of the meal you want to order: \")\namount_input = int(input(\"Enter the quantity you want to order: \"))\n\nresult = create_summary(name_input, amount_input)\nprint(result)",
                  "solvedContent": "italian_food = [\n  \"Pasta Bolognese\",\n  \"Pepperoni pizza\",\n  \"Margherita pizza\",\n  \"Lasagna\"\n]\n\nindian_food = [\n  \"Curry\",\n  \"Chutney\",\n  \"Samosa\",\n  \"Naan\"\n]\n\ndef find_meal(name, menu):\n  return name if name in menu else None\n\ndef select_meal(name):\n  return find_meal(name, italian_food)\n\ndef display_available_meals(food_type):\n  if food_type == \"Italian\":\n    print(\"Available Italian Meals:\")\n    for meal in italian_food:\n      print(meal)\n  elif food_type == \"Indian\":\n    print(\"Available Indian Meals:\")\n    for meal in indian_food:\n      print(meal)\n  else:\n    print(\"Invalid food type\")\n\ndef create_summary(name, amount):\n  order = select_meal(name)\n  if order:\n    return f\"You ordered {amount} {name}\"\n  else:\n    return \"Meal not found\"\n\nprint(\"Welcome to the Food Order System!\")\ntype_input = input(\"Enter the type of food you want to order: \") \ndisplay_available_meals(type_input)\nname_input = input(\"Enter the name of the meal you want to order: \")\namount_input = int(input(\"Enter the quantity you want to order: \"))\n\nresult = create_summary(name_input, amount_input)\nprint(result)"
                }
              ],
              "hints": []
            }
          },
          {
            "title": "Lesson #2",
            "id": 129478,
            "contentType": "executableFiles",
            "images": [],
            "executableContent": {
              "instructions": "Наконец, нам нужно обновить нашу функцию `select_meal`, чтобы пользователи могли выбрать блюдо, которое им нравится.\n\n1. Добавь второй параметр под названием `food_type` в функцию.\n2. Подобно тому, что мы делали раньше, добавь блок `if`, `elif` и `else`.\n3. Условие блока `if` должно проверять, равна ли переданная переменная `food_type` значению `\"Italian\"`.\n4. Условие блока `elif` должно проверять, равна ли переданная переменная `food_type` значению `\"Indian\"`.\n5. Перемести уже существующий код в блок `if`, чтобы получить и вернуть итальянскую еду через `return find_meal(name, italian_food)`.\n6. Сделай то же самое для блока `elif`, но для индийской еды.\n7. Верни `None` в блоке `else`.\n8. Нам нужно добавить еще один параметр в `create_summary`, который мы можем назвать `food_type`.\n9. При вызове `create_summary` передай переменную `type_input` как `food_type`.\n10. При вызове `select_meal` внутри `create_summary`, передай полученный параметр дальше.",
              "preselectedFileIndex": 0,
              "hasVisualOutput": false,
              "files": [
                {
                  "name": "script.py",
                  "codeLanguage": "python",
                  "content": "italian_food = [\n  \"Pasta Bolognese\",\n  \"Pepperoni pizza\",\n  \"Margherita pizza\",\n  \"Lasagna\"\n]\n\nindian_food = [\n  \"Curry\",\n  \"Chutney\",\n  \"Samosa\",\n  \"Naan\"\n]\n\ndef find_meal(name, menu):\n  return name if name in menu else None\n\ndef select_meal(name):\n  return find_meal(name, italian_food)\n\ndef display_available_meals(food_type):\n  if food_type == \"Italian\":\n    print(\"Available Italian Meals:\")\n    for meal in italian_food:\n      print(meal)\n  elif food_type == \"Indian\":\n    print(\"Available Indian Meals:\")\n    for meal in indian_food:\n      print(meal)\n  else:\n    print(\"Invalid food type\")\n\ndef create_summary(name, amount):\n  order = select_meal(name)\n  if order:\n    return f\"You ordered {amount} {name}\"\n  else:\n    return \"Meal not found\"\n\nprint(\"Welcome to the Food Order System!\")\ntype_input = input(\"Enter the type of food you want to order: \") \ndisplay_available_meals(type_input)\nname_input = input(\"Enter the name of the meal you want to order: \")\namount_input = int(input(\"Enter the quantity you want to order: \"))\n\nresult = create_summary(name_input, amount_input)\nprint(result)",
                  "solvedContent": "italian_food = [\n  \"Pasta Bolognese\",\n  \"Pepperoni pizza\",\n  \"Margherita pizza\",\n  \"Lasagna\"\n]\n\nindian_food = [\n  \"Curry\",\n  \"Chutney\",\n  \"Samosa\",\n  \"Naan\"\n]\n\ndef find_meal(name, menu):\n  return name if name in menu else None\n\ndef select_meal(name, food_type):\n  if food_type == \"Italian\":\n    return find_meal(name, italian_food)\n  elif food_type == \"Indian\":\n    return find_meal(name, indian_food)\n  else:\n    return None \n\n\ndef display_available_meals(food_type):\n  if food_type == \"Italian\":\n    print(\"Available Italian Meals:\")\n    for meal in italian_food:\n      print(meal)\n  elif food_type == \"Indian\":\n    print(\"Available Indian Meals:\")\n    for meal in indian_food:\n      print(meal)\n  else:\n    print(\"Invalid food type\")\n\ndef create_summary(name, amount, food_type):\n  order = select_meal(name, food_type)\n  if order:\n    return f\"You ordered {amount} {name}\"\n  else:\n    return \"Meal not found\"\n\nprint(\"Welcome to the Food Order System!\")\ntype_input = input(\"Enter the type of food you want to order: \") \ndisplay_available_meals(type_input)\nname_input = input(\"Enter the name of the meal you want to order: \")\namount_input = int(input(\"Enter the quantity you want to order: \"))\n\nresult = create_summary(name_input, amount_input, type_input)\nprint(result)"
                }
              ],
              "hints": []
            }
          }
        ]
      }
    ]
  }
}