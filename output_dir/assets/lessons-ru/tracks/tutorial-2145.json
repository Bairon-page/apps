{
  "tutorial": {
    "id": 2145,
    "version": 4,
    "type": "course",
    "isNew": false,
    "codeLanguage": "javascript",
    "title": "Синхронность и асинхронность в JS",
    "descriptionContent": "Введение в асинхронный JavaScript. Изучение асинхронных и синхронных Callbacks.",
    "shortDescriptionContent": "",
    "showInTrack": true,
    "iconBanner": null,
    "chapters": [
      {
        "id": 13415,
        "title": "Синхронный и асинхронный JavaScript",
        "type": "practiceLevel1",
        "lessons": [
          {
            "title": "Intro",
            "id": 120557,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p><em>Синхронность</em> — это термин, который мы используем, чтобы говорить о коде, инструкции которого выполняются одна за другой.</p><p>До сих пор мы использовали синхронный JavaScript в нашем коде. Давайте узнаем больше об этом синхронном коде!</p></body></html>"
          },
          {
            "title": "Synchronous JavaScript",
            "id": 120566,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>В <strong>синхронном</strong> коде одна строка кода выполняется только после того, как завершится предыдущая.</p><p>Синхронный код может замедлить наши программы. Здесь нам нужно дождаться вычисления 6000 простых чисел, чтобы получить последний вывод в консоль.</p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;We're calculating the first 6000 prime numbers.&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;Waiting...&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" arr = [\" /><text value=\"2\" class=\"number\" /><text value=\"];\" /><text type=\"break\" /><text value=\"let\" class=\"keyword\" /><text value=\" number = \" /><text value=\"3\" class=\"number\" /><text value=\";\" /><text type=\"break\" /><text value=\"while\" class=\"keyword\" /><text value=\" (arr.length &lt; \" /><text value=\"6000\" class=\"number\" /><text value=\") {\" /><text type=\"break\" /><text value=\" \" /><text value=\"for\" class=\"keyword\" /><text value=\" (\" /><text value=\"let\" class=\"keyword\" /><text value=\" i = \" /><text value=\"2\" class=\"number\" /><text value=\"; i &lt; number; i++) {\" /><text type=\"break\" /><text value=\"  \" /><text value=\"if\" class=\"keyword\" /><text value=\" (number % i === \" /><text value=\"0\" class=\"number\" /><text value=\") {\" /><text type=\"break\" /><text value=\"   number++;\" /><text type=\"break\" /><text value=\"   \" /><text value=\"break\" class=\"keyword\" /><text value=\";\" /><text type=\"break\" /><text value=\"  }\" /><text type=\"break\" /><text value=\"  \" /><text value=\"if\" class=\"keyword\" /><text value=\" (i === number - \" /><text value=\"1\" class=\"number\" /><text value=\") {\" /><text type=\"break\" /><text value=\"   arr.push(number);\" /><text type=\"break\" /><text value=\"   number++;\" /><text type=\"break\" /><text value=\"   \" /><text value=\"break\" class=\"keyword\" /><text value=\";\" /><text type=\"break\" /><text value=\"  }\" /><text type=\"break\" /><text value=\" }\" /><text type=\"break\" /><text value=\"}\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"`We finished calculating the first \" /><text value=\"${arr.length}\" class=\"subst\" /><text value=\" prime numbers.`\" /><text value=\");\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;We had to wait for this line to print.&quot;\" class=\"string\" /><text value=\");\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"399\" endIndex=\"453\" /></options></interaction></interactions><output><content><text value=\"We're calculating the first 6000 prime numbers.\" /><text type=\"break\" /><text value=\"Waiting...\" /><text type=\"break\" /><text value=\"We finished calculating the first 6000 prime numbers.\" /><text type=\"break\" /><text value=\"We had to wait for this line to print.\" /></content></output></code><p visible-if=\"wrong\">Обязательно выбери <code>console.log(\"We had to wait for this line to print.\");</code>.</p></body></html>"
          },
          {
            "title": "Synchronous JavaScript 2",
            "id": 120567,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>С синхронным кодом, чем дольше выполняется операция, тем дольше нам приходится ждать выполнения следующей строки кода.</p><p>Здесь мы вычислим первые <code>12000</code> простых чисел, что займет больше времени и приведет к более длительной задержке.</p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;We're calculating the first 12000 prime numbers.&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;Waiting...&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" arr = [\" /><text value=\"2\" class=\"number\" /><text value=\"];\" /><text type=\"break\" /><text value=\"let\" class=\"keyword\" /><text value=\" number = \" /><text value=\"3\" class=\"number\" /><text value=\";\" /><text type=\"break\" /><text value=\"while\" class=\"keyword\" /><text value=\" (arr.length &lt; \" /><text value=\"12000\" class=\"number\" /><text value=\") {\" /><text type=\"break\" /><text value=\" \" /><text value=\"for\" class=\"keyword\" /><text value=\" (\" /><text value=\"let\" class=\"keyword\" /><text value=\" i = \" /><text value=\"2\" class=\"number\" /><text value=\"; i &lt; number; i++) {\" /><text type=\"break\" /><text value=\"  \" /><text value=\"if\" class=\"keyword\" /><text value=\" (number % i === \" /><text value=\"0\" class=\"number\" /><text value=\") {\" /><text type=\"break\" /><text value=\"   number++;\" /><text type=\"break\" /><text value=\"   \" /><text value=\"break\" class=\"keyword\" /><text value=\";\" /><text type=\"break\" /><text value=\"  }\" /><text type=\"break\" /><text value=\"  \" /><text value=\"if\" class=\"keyword\" /><text value=\" (i === number - \" /><text value=\"1\" class=\"number\" /><text value=\") {\" /><text type=\"break\" /><text value=\"   arr.push(number);\" /><text type=\"break\" /><text value=\"   number++;\" /><text type=\"break\" /><text value=\"   \" /><text value=\"break\" class=\"keyword\" /><text value=\";\" /><text type=\"break\" /><text value=\"  }\" /><text type=\"break\" /><text value=\" }\" /><text type=\"break\" /><text value=\"}\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"`We finished calculating the first \" /><text value=\"${arr.length}\" class=\"subst\" /><text value=\" prime numbers.`\" /><text value=\");\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;We had to wait even longer for this line to print.&quot;\" class=\"string\" /><text value=\");\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"145\" endIndex=\"150\" /></options></interaction></interactions><output><content><text value=\"We're calculating the first 12000 prime numbers.\" /><text type=\"break\" /><text value=\"Waiting...\" /><text type=\"break\" /><text value=\"We finished calculating the first 12000 prime numbers.\" /><text type=\"break\" /><text value=\"We had to wait even longer for this line to print.\" /></content></output></code><p visible-if=\"wrong\">Обязательно выбери <code>12000</code>.</p></body></html>"
          },
          {
            "title": "Asynchronous JS 1",
            "id": 120570,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p><strong>Асинхронный</strong> код не ждет завершения предыдущей инструкции.</p><p>Здесь, даже если мы включим оператор print в последней строке кода, мы увидим сообщение <em>до того</em>, как вычисление завершится.</p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"function\" class=\"keyword\" /><text value=\" \" /><text value=\"asyncExample\" class=\"title\" /><text value=\"(\" /><text value=\"\" class=\"params\" /><text value=\") \" /><text value=\"{\" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;We're calculating the first 10,000 prime numbers.&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\" \" /><text value=\"const\" class=\"keyword\" /><text value=\" arr = [\" /><text value=\"2\" class=\"number\" /><text value=\"];\" /><text type=\"break\" /><text value=\" \" /><text value=\"let\" class=\"keyword\" /><text value=\" number = \" /><text value=\"3\" class=\"number\" /><text value=\";\" /><text type=\"break\" /><text value=\" \" /><text value=\"while\" class=\"keyword\" /><text value=\" (arr.length &lt; \" /><text value=\"10000\" class=\"number\" /><text value=\") {\" /><text type=\"break\" /><text value=\"  \" /><text value=\"for\" class=\"keyword\" /><text value=\" (\" /><text value=\"let\" class=\"keyword\" /><text value=\" i = \" /><text value=\"2\" class=\"number\" /><text value=\"; i &lt; number; i++) {\" /><text type=\"break\" /><text value=\"   \" /><text value=\"if\" class=\"keyword\" /><text value=\" (number % i === \" /><text value=\"0\" class=\"number\" /><text value=\") {\" /><text type=\"break\" /><text value=\"    number++;\" /><text type=\"break\" /><text value=\"    \" /><text value=\"break\" class=\"keyword\" /><text value=\";\" /><text type=\"break\" /><text value=\"   }\" /><text type=\"break\" /><text value=\"   \" /><text value=\"if\" class=\"keyword\" /><text value=\" (i === number - \" /><text value=\"1\" class=\"number\" /><text value=\") {\" /><text type=\"break\" /><text value=\"    arr.push(number);\" /><text type=\"break\" /><text value=\"    number++;\" /><text type=\"break\" /><text value=\"    \" /><text value=\"break\" class=\"keyword\" /><text value=\";\" /><text type=\"break\" /><text value=\"   }\" /><text type=\"break\" /><text value=\"  }\" /><text type=\"break\" /><text value=\" }\" /><text type=\"break\" /><text value=\" \" /><text value=\"return\" class=\"keyword\" /><text value=\" \" /><text value=\"Promise\" class=\"built_in\" /><text value=\".resolve(arr);\" /><text type=\"break\" /><text value=\"}\" /><text type=\"break\" /><text value=\"asyncExample().then(\" /><text value=\"function\" class=\"keyword\" /><text value=\"(\" /><text value=\"value\" class=\"params\" /><text value=\") \" /><text value=\"{\" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"`We calculated the first \" /><text value=\"${value.length}\" class=\"subst\" /><text value=\" prime numbers`\" /><text value=\");\" /><text type=\"break\" /><text value=\"});\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;This line is printed during the calculation.&quot;\" class=\"string\" /><text value=\");\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"483\" endIndex=\"543\" /></options></interaction></interactions><output><content><text value=\"We're calculating the first 10,000 prime numbers.\" /><text type=\"break\" /><text value=\"This line is printed during the calculation.\" /><text type=\"break\" /><text value=\"We calculated the first 10000 prime numbers\" /></content></output></code><p visible-if=\"wrong\">Обязательно выбери <code>console.log(\"This line is printed during the calculation.\");</code>.</p></body></html>"
          },
          {
            "title": "Asynchronous JavaScript 2",
            "id": 120571,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Асинхронный код полезен для обработки длительных задач. Сложные вычисления и получение данных с сервера могут занять время.</p><p>Асинхронность позволяет нам выполнять другие задачи, пока мы ждем. Какое утверждение появится последним?</p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" asyncExample = fetch(\" /><text value=\"&quot;https://exampleAPI.data/1&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\"asyncExample.then(\" /><text value=\"res\" class=\"params\" /><text value=\" =&gt;\" /><text value=\" res.json()).then(\" /><text value=\"data\" class=\"params\" /><text value=\" =&gt;\" /><text value=\" {\" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"`This is our data: \" /><text value=\"${data}\" class=\"subst\" /><text value=\"`\" /><text value=\");\" /><text type=\"break\" /><text value=\"});\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;Waiting for the data...&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;Continue to use the page while the request is processing.&quot;\" class=\"string\" /><text value=\");\" /></content><output><content><text value=\"Waiting for the data...\" /><text type=\"break\" /><text value=\"Continue to use the page while the request is processing.\" /><text type=\"break\" /><text value=\"This is our data: Success!\" /></content></output></code><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\"><code>This is our data: Success!</code></item><item value=\"2\" correct=\"false\"><code>Waiting for the data...</code></item><item value=\"3\" correct=\"false\"><code>Продолжайте использовать страницу, пока запрос обрабатывается</code></item></selection><p visible-if=\"wrong\"><code>This is our data: Success!</code>.</p></body></html>"
          },
          {
            "title": "Question: Synchronous JavaScript",
            "id": 120710,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Что такое <strong>синхронный</strong> код?</p><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\">Код, который выполняется последовательно</item><item value=\"2\" correct=\"false\">Код, который выполняется одновременно с другим кодом</item></selection><p visible-if=\"wrong\">Код, который выполняется последовательно.</p></body></html>"
          },
          {
            "title": "Question: Synchronous JavaScript 2",
            "id": 120711,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Какова одна из причин, по которой синхронный код может быть неэффективным?</p><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\">Каждая строка кода должна ждать завершения предыдущей строки</item><item value=\"2\" correct=\"false\">Несколько строк кода могут выполняться одновременно</item></selection><p visible-if=\"wrong\">Каждая строка кода должна ждать завершения предыдущей строки.</p></body></html>"
          },
          {
            "title": "Question: Asynchronous Javascript",
            "id": 120712,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Что такое <strong>асинхронный</strong> код?</p><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\">Код, который может выполняться одновременно с другим кодом</item><item value=\"2\" correct=\"false\">Код, который выполняется последовательно</item></selection><p visible-if=\"wrong\">Код, который может выполняться одновременно с другим кодом.</p></body></html>"
          },
          {
            "title": "Question: Asynchronous JavaScript 1",
            "id": 120713,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>В чем преимущество асинхронного кода?</p><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\">Мы можем выполнять несколько действий, ожидая завершения предыдущего действия</item><item value=\"2\" correct=\"false\">Это всегда требует больше строк кода, чем синхронный код</item></selection><p visible-if=\"wrong\">Мы можем выполнять несколько действий, ожидая завершения предыдущего действия.</p></body></html>"
          },
          {
            "title": "Question: Asynchronous JavaScript 2",
            "id": 120838,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Как мы можем распознать, что этот код является асинхронным?</p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"function\" class=\"keyword\" /><text value=\" \" /><text value=\"asyncExample\" class=\"title\" /><text value=\"(\" /><text value=\"\" class=\"params\" /><text value=\") \" /><text value=\"{\" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;We're calculating the first 10,000 prime numbers.&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;Waiting...&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\" \" /><text value=\"const\" class=\"keyword\" /><text value=\" arr = [\" /><text value=\"2\" class=\"number\" /><text value=\"];\" /><text type=\"break\" /><text value=\" \" /><text value=\"let\" class=\"keyword\" /><text value=\" number = \" /><text value=\"3\" class=\"number\" /><text value=\";\" /><text type=\"break\" /><text value=\" \" /><text value=\"while\" class=\"keyword\" /><text value=\" (arr.length &lt; \" /><text value=\"10000\" class=\"number\" /><text value=\") {\" /><text type=\"break\" /><text value=\"  \" /><text value=\"for\" class=\"keyword\" /><text value=\" (\" /><text value=\"let\" class=\"keyword\" /><text value=\" i = \" /><text value=\"2\" class=\"number\" /><text value=\"; i &lt; number; i++) {\" /><text type=\"break\" /><text value=\"   \" /><text value=\"if\" class=\"keyword\" /><text value=\" (number % i === \" /><text value=\"0\" class=\"number\" /><text value=\") {\" /><text type=\"break\" /><text value=\"    number++;\" /><text type=\"break\" /><text value=\"    \" /><text value=\"break\" class=\"keyword\" /><text value=\";\" /><text type=\"break\" /><text value=\"   }\" /><text type=\"break\" /><text value=\"   \" /><text value=\"if\" class=\"keyword\" /><text value=\" (i === number - \" /><text value=\"1\" class=\"number\" /><text value=\") {\" /><text type=\"break\" /><text value=\"    arr.push(number);\" /><text type=\"break\" /><text value=\"    number++;\" /><text type=\"break\" /><text value=\"    \" /><text value=\"break\" class=\"keyword\" /><text value=\";\" /><text type=\"break\" /><text value=\"   }\" /><text type=\"break\" /><text value=\"  }\" /><text type=\"break\" /><text value=\" }\" /><text type=\"break\" /><text value=\" \" /><text value=\"return\" class=\"keyword\" /><text value=\" \" /><text value=\"Promise\" class=\"built_in\" /><text value=\".resolve(arr);\" /><text type=\"break\" /><text value=\"}\" /><text type=\"break\" /><text value=\"asyncExample().then(\" /><text value=\"function\" class=\"keyword\" /><text value=\"(\" /><text value=\"value\" class=\"params\" /><text value=\") \" /><text value=\"{\" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"`We calculated the first \" /><text value=\"${value.length}\" class=\"subst\" /><text value=\" prime numbers`\" /><text value=\");\" /><text type=\"break\" /><text value=\"});\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;This line printed during the calculation.&quot;\" class=\"string\" /><text value=\");\" /></content><output><content><text value=\"We're calculating the first 10,000 prime numbers.\" /><text type=\"break\" /><text value=\"Waiting...\" /><text type=\"break\" /><text value=\"This line printed during the calculation.\" /><text type=\"break\" /><text value=\"We calculated the first 10000 prime numbers\" /></content></output></code><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\">Он продолжает выполняться и выводить в консоль во время вычисления</item><item value=\"2\" correct=\"false\">Он использует цикл while</item></selection><p visible-if=\"wrong\">Он продолжает выполняться и выводить в консоль во время вычисления.</p></body></html>"
          },
          {
            "title": "Question: Asynchronous JavaScript 3",
            "id": 120714,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Какое одно реальное применение асинхронного кода?</p><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\">Продолжение выполнения кода во время выполнения сложных вычислений</item><item value=\"2\" correct=\"false\">Ожидание выполнения следующей строки кода, пока выполняется сложный расчет</item></selection><p visible-if=\"wrong\">Продолжение выполнения кода во время выполнения сложных вычислений.</p></body></html>"
          },
          {
            "title": "Example: Synchronous JavaScript",
            "id": 120716,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Заверши цикл <code>for</code>, чтобы этот синхронный код умножал каждый элемент массива на <code>5</code>, а затем выводил сообщение \"Finish\".</p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" arr = [\" /><text value=\"1\" class=\"number\" /><text value=\", \" /><text value=\"2\" class=\"number\" /><text value=\", \" /><text value=\"3\" class=\"number\" /><text value=\", \" /><text value=\"4\" class=\"number\" /><text value=\", \" /><text value=\"5\" class=\"number\" /><text value=\"];\" /><text type=\"break\" /><text value=\"for\" class=\"keyword\" /><text value=\" (\" /><text value=\"let\" class=\"keyword\" /><text value=\" i = \" /><text value=\"0\" class=\"number\" /><text value=\"; i &lt; arr.length; i++) {\" /><text type=\"break\" /><text value=\" arr[i] *= \" /><text value=\"5\" class=\"number\" /><text value=\";\" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(arr[i]);\" /><text type=\"break\" /><text value=\"}\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;Finished!&quot;\" class=\"string\" /><text value=\");\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"29\" endIndex=\"32\" /><option startIndex=\"106\" endIndex=\"113\" /><option startIndex=\"113\" endIndex=\"114\" /><option startIndex=\"114\" endIndex=\"117\" /></options></interaction></interactions><output><content><text value=\"5\" /><text type=\"break\" /><text value=\"10\" /><text type=\"break\" /><text value=\"15\" /><text type=\"break\" /><text value=\"20\" /><text type=\"break\" /><text value=\"25\" /><text type=\"break\" /><text value=\"Finished!\" /></content></output></code><p visible-if=\"wrong\">Обязательно выбери <code>for</code>, затем <code>console</code>, а затем <code>.</code>, <code>log</code>.</p></body></html>"
          },
          {
            "title": "MCQ w/Code 1",
            "id": 120721,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Как мы узнаем, что этот код является синхронным?</p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" arr = [\" /><text value=\"10\" class=\"number\" /><text value=\", \" /><text value=\"8\" class=\"number\" /><text value=\", \" /><text value=\"4\" class=\"number\" /><text value=\", \" /><text value=\"2\" class=\"number\" /><text value=\", \" /><text value=\"0\" class=\"number\" /><text value=\"];\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;Start loop!&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\"for\" class=\"keyword\" /><text value=\" (\" /><text value=\"let\" class=\"keyword\" /><text value=\" i = \" /><text value=\"0\" class=\"number\" /><text value=\"; i &lt; arr.length; i++) {\" /><text type=\"break\" /><text value=\" arr[i] /= \" /><text value=\"2\" class=\"number\" /><text value=\";\" /><text type=\"break\" /><text value=\"}\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;The operation is complete&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(arr);\" /><text type=\"break\" /></content><output><content><text value=\"Start loop!\" /><text type=\"break\" /><text value=\"The operation is complete\" /><text type=\"break\" /><text value=\"[ 5, 4, 2, 1, 0 ]\" /></content></output></code><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\">Каждая итерация цикла завершается до того, как выполняется код вне цикла</item><item value=\"2\" correct=\"false\">Код выполняется сразу</item></selection><p visible-if=\"wrong\">Каждая итерация цикла завершается до того, как выполняется код вне цикла.</p></body></html>"
          },
          {
            "title": "MCQ w/Code 2",
            "id": 120722,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Почему мы знаем, что этот код асинхронный?</p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"async\" class=\"keyword\" /><text value=\" \" /><text value=\"function\" class=\"keyword\" /><text value=\" \" /><text value=\"example\" class=\"title\" /><text value=\"(\" /><text value=\"\" class=\"params\" /><text value=\") \" /><text value=\"{\" /><text type=\"break\" /><text value=\" \" /><text value=\"const\" class=\"keyword\" /><text value=\" promise = \" /><text value=\"new\" class=\"keyword\" /><text value=\" \" /><text value=\"Promise\" class=\"built_in\" /><text value=\"(\" /><text value=\"(\" /><text value=\"resolve\" class=\"params\" /><text value=\") =&gt;\" /><text value=\" {\" /><text type=\"break\" /><text value=\"  setTimeout(\" /><text value=\"()\" class=\"params\" /><text value=\" =&gt;\" /><text value=\" resolve(\" /><text value=\"&quot;The operation is finished&quot;\" class=\"string\" /><text value=\"), \" /><text value=\"1500\" class=\"number\" /><text value=\");\" /><text type=\"break\" /><text value=\" });\" /><text type=\"break\" /><text value=\" \" /><text value=\"const\" class=\"keyword\" /><text value=\" output = \" /><text value=\"await\" class=\"keyword\" /><text value=\" promise;\" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(output);\" /><text type=\"break\" /><text value=\"}\" /><text type=\"break\" /><text value=\"example();\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;Hello&quot;\" class=\"string\" /><text value=\");\" /></content><output><content><text value=\"Hello\" /><text type=\"break\" /><text value=\"The operation is finished\" /></content></output></code><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\">Потому что последнее сообщение консоли будет отображаться первым в консоли</item><item value=\"2\" correct=\"false\">Потому что <code>\"Hello\"</code> не будет отображаться</item></selection><p visible-if=\"wrong\">Потому что последнее сообщение консоли будет отображаться первым в консоли.</p></body></html>"
          }
        ]
      },
      {
        "id": 13416,
        "title": "Callbacks и синхронный JS",
        "type": "practiceLevel1",
        "lessons": [
          {
            "title": "Intro",
            "id": 120558,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Вы уже сталкивались и использовали функции <strong>callback</strong> в синхронном JavaScript, возможно, не осознавая этого.</p><p>Но давай узнаем больше об этих callbacks!</p></body></html>"
          },
          {
            "title": "Callback Function Definition",
            "id": 120574,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Функция обратного вызова — это обычная функция, которую мы передаем в другую функцию, а затем вызываем для выполнения задачи.</p><p>Здесь мы передаем функцию <code>logResult</code> в нашу функцию <code>add</code>, чтобы показать результат вычисления.</p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"function\" class=\"keyword\" /><text value=\" \" /><text value=\"add\" class=\"title\" /><text value=\"(\" /><text value=\"number1, number2, callback\" class=\"params\" /><text value=\") \" /><text value=\"{\" /><text type=\"break\" /><text value=\" \" /><text value=\"let\" class=\"keyword\" /><text value=\" result = number1 + number2;\" /><text type=\"break\" /><text value=\" callback(result);\" /><text type=\"break\" /><text value=\"}\" /><text type=\"break\" /><text type=\"break\" /><text value=\"function\" class=\"keyword\" /><text value=\" \" /><text value=\"logResult\" class=\"title\" /><text value=\"(\" /><text value=\"result\" class=\"params\" /><text value=\") \" /><text value=\"{\" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"`The result is: \" /><text value=\"${result}\" class=\"subst\" /><text value=\"`\" /><text value=\");\" /><text type=\"break\" /><text value=\"}\" /><text type=\"break\" /><text value=\"add(\" /><text value=\"2\" class=\"number\" /><text value=\", \" /><text value=\"3\" class=\"number\" /><text value=\", logResult);\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"181\" endIndex=\"190\" /></options></interaction></interactions><output><content><text value=\"The result is: 5\" /></content></output></code><p visible-if=\"wrong\">Обязательно выбери <code>logResult</code>.</p></body></html>"
          },
          {
            "title": ".map()",
            "id": 120575,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Ты уже использовал callback функции в методах, таких как <code>.map()</code>.</p><p>Здесь мы передаем функцию <code>callback</code> методу массива <code>.map()</code>. В ней мы возвращаем <code>num</code>, умноженное на <code>2</code>. Действие повторяется для всех элементов массива.</p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" arr = [\" /><text value=\"1\" class=\"number\" /><text value=\", \" /><text value=\"2\" class=\"number\" /><text value=\", \" /><text value=\"3\" class=\"number\" /><text value=\", \" /><text value=\"4\" class=\"number\" /><text value=\", \" /><text value=\"5\" class=\"number\" /><text value=\"];\" /><text type=\"break\" /><text type=\"break\" /><text value=\"function\" class=\"keyword\" /><text value=\" \" /><text value=\"callback\" class=\"title\" /><text value=\"(\" /><text value=\"num\" class=\"params\" /><text value=\") \" /><text value=\"{\" /><text type=\"break\" /><text value=\" \" /><text value=\"return\" class=\"keyword\" /><text value=\" num * \" /><text value=\"2\" class=\"number\" /><text value=\";\" /><text type=\"break\" /><text value=\"}\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" newArray = arr.map(callback);\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(newArray);\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;This code is synchronous.&quot;\" class=\"string\" /><text value=\");\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"95\" endIndex=\"98\" /><option startIndex=\"99\" endIndex=\"107\" /></options></interaction></interactions><output><content><text value=\"[ 2, 4, 6, 8, 10 ]\" /><text type=\"break\" /><text value=\"This code is synchronous.\" /></content></output></code><p visible-if=\"wrong\">Обязательно выбери <code>map</code>, а затем <code>callback</code>.</p></body></html>"
          },
          {
            "title": ".map() 2",
            "id": 120576,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Метод <code>.map()</code> является синхронным. Он выполняется полностью перед тем, как будет запущена следующая строка кода.</p><p>Здесь мы можем увидеть все умноженные числа в консоли перед последним оператором печати.</p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" arr = [\" /><text value=\"1\" class=\"number\" /><text value=\", \" /><text value=\"2\" class=\"number\" /><text value=\", \" /><text value=\"3\" class=\"number\" /><text value=\", \" /><text value=\"4\" class=\"number\" /><text value=\", \" /><text value=\"5\" class=\"number\" /><text value=\"];\" /><text type=\"break\" /><text type=\"break\" /><text value=\"function\" class=\"keyword\" /><text value=\" \" /><text value=\"callback\" class=\"title\" /><text value=\"(\" /><text value=\"num\" class=\"params\" /><text value=\") \" /><text value=\"{\" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(num * \" /><text value=\"2\" class=\"number\" /><text value=\");\" /><text type=\"break\" /><text value=\"}\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" newArray = arr.map(callback);\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;This code is synchronous.&quot;\" class=\"string\" /><text value=\");\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"116\" endIndex=\"123\" /><option startIndex=\"123\" endIndex=\"124\" /><option startIndex=\"124\" endIndex=\"127\" /></options></interaction></interactions><output><content><text value=\"2\" /><text type=\"break\" /><text value=\"4\" /><text type=\"break\" /><text value=\"6\" /><text type=\"break\" /><text value=\"8\" /><text type=\"break\" /><text value=\"10\" /><text type=\"break\" /><text value=\"This code is synchronous.\" /></content></output></code><p visible-if=\"wrong\">Обязательно выбери <code>console</code>, затем <code>.</code>, и наконец <code>log</code>.</p></body></html>"
          },
          {
            "title": ".filter()",
            "id": 120577,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Ты, возможно, также помнишь <code>.filter()</code>. Это еще один callback, который ты использовал, не зная об этом!</p><p>Здесь мы передаем функцию <code>callback</code> методу <code>.filter()</code>, чтобы вернуть все четные числа из оригинального массива.</p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" arr = [\" /><text value=\"1\" class=\"number\" /><text value=\", \" /><text value=\"2\" class=\"number\" /><text value=\", \" /><text value=\"3\" class=\"number\" /><text value=\", \" /><text value=\"4\" class=\"number\" /><text value=\", \" /><text value=\"5\" class=\"number\" /><text value=\", \" /><text value=\"6\" class=\"number\" /><text value=\", \" /><text value=\"7\" class=\"number\" /><text value=\", \" /><text value=\"8\" class=\"number\" /><text value=\", \" /><text value=\"9\" class=\"number\" /><text value=\", \" /><text value=\"10\" class=\"number\" /><text value=\"];\" /><text type=\"break\" /><text type=\"break\" /><text value=\"function\" class=\"keyword\" /><text value=\" \" /><text value=\"callback\" class=\"title\" /><text value=\"(\" /><text value=\"num\" class=\"params\" /><text value=\") \" /><text value=\"{\" /><text type=\"break\" /><text value=\" \" /><text value=\"return\" class=\"keyword\" /><text value=\" num % \" /><text value=\"2\" class=\"number\" /><text value=\" === \" /><text value=\"0\" class=\"number\" /><text value=\";\" /><text type=\"break\" /><text value=\"}\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" evenNumArray = arr.filter(callback);\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(evenNumArray);\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;This code is also synchronous.&quot;\" class=\"string\" /><text value=\");\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"121\" endIndex=\"127\" /><option startIndex=\"128\" endIndex=\"136\" /></options></interaction></interactions><output><content><text value=\"[ 2, 4, 6, 8, 10 ]\" /><text type=\"break\" /><text value=\"This code is also synchronous.\" /></content></output></code><p visible-if=\"wrong\">Обязательно выбери <code>filter</code>, а затем <code>callback</code>.</p></body></html>"
          },
          {
            "title": ".filter() 2",
            "id": 120578,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Снова мы видим пример синхронного метода JavaScript, который использует функцию обратного вызова. Передай <code>callback</code> в метод <code>filter</code>.</p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" arr = [\" /><text value=\"1\" class=\"number\" /><text value=\", \" /><text value=\"2\" class=\"number\" /><text value=\", \" /><text value=\"3\" class=\"number\" /><text value=\", \" /><text value=\"4\" class=\"number\" /><text value=\", \" /><text value=\"5\" class=\"number\" /><text value=\", \" /><text value=\"6\" class=\"number\" /><text value=\", \" /><text value=\"7\" class=\"number\" /><text value=\", \" /><text value=\"8\" class=\"number\" /><text value=\", \" /><text value=\"9\" class=\"number\" /><text value=\", \" /><text value=\"10\" class=\"number\" /><text value=\"];\" /><text type=\"break\" /><text type=\"break\" /><text value=\"function\" class=\"keyword\" /><text value=\" \" /><text value=\"callback\" class=\"title\" /><text value=\"(\" /><text value=\"num\" class=\"params\" /><text value=\") \" /><text value=\"{\" /><text type=\"break\" /><text value=\" \" /><text value=\"return\" class=\"keyword\" /><text value=\" num % \" /><text value=\"2\" class=\"number\" /><text value=\" === \" /><text value=\"0\" class=\"number\" /><text value=\";\" /><text type=\"break\" /><text value=\"}\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" evenNumArray = arr.filter(callback);\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(evenNumArray);\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;This code is also synchronous.&quot;\" class=\"string\" /><text value=\");\" /></content><interactions><interaction type=\"validatedInput\" isDefault=\"true\" startIndex=\"128\" endIndex=\"136\" /></interactions><output><content><text value=\"[ 2, 4, 6, 8, 10 ]\" /><text type=\"break\" /><text value=\"This code is also synchronous.\" /></content></output></code><p visible-if=\"wrong\">Обязательно выбери <code>callback</code>.</p></body></html>"
          },
          {
            "title": ".map()/.filter()",
            "id": 120583,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Вы могли видеть эти методы, написанные в другой форме, например, с использованием современных стрелочных функций ES6.</p><p>Стрелочная функция просто использует компактный синтаксис для написания callback, но это то же самое поведение.</p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" arr = [\" /><text value=\"1\" class=\"number\" /><text value=\", \" /><text value=\"2\" class=\"number\" /><text value=\", \" /><text value=\"3\" class=\"number\" /><text value=\", \" /><text value=\"4\" class=\"number\" /><text value=\", \" /><text value=\"5\" class=\"number\" /><text value=\"];\" /><text type=\"break\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" newArray = arr.map(\" /><text value=\"(\" /><text value=\"num\" class=\"params\" /><text value=\") =&gt;\" /><text value=\" num * \" /><text value=\"2\" class=\"number\" /><text value=\");\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(newArray);\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;This code uses an ES6 arrow function.&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;This code is synchronous.&quot;\" class=\"string\" /><text value=\");\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"61\" endIndex=\"63\" /><option startIndex=\"55\" endIndex=\"60\" /></options></interaction></interactions><output><content><text value=\"[ 2, 4, 6, 8, 10 ]\" /><text type=\"break\" /><text value=\"This code uses an ES6 arrow function.\" /><text type=\"break\" /><text value=\"This code is synchronous.\" /></content></output></code><p visible-if=\"wrong\">Обязательно выбери <code>(num)</code>, а затем <code>=&gt;</code>.</p></body></html>"
          },
          {
            "title": "Question: Callback Function Definition",
            "id": 120726,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Функция обратного вызова всегда вызывается внутри другой функции.</p><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\">True</item><item value=\"2\" correct=\"false\">Ложь</item></selection><p visible-if=\"wrong\">Обязательно выбери True.</p></body></html>"
          },
          {
            "title": "Question: .map()",
            "id": 120727,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p><code>.map()</code> — это метод JavaScript, который выполняется асинхронно.</p><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\">Ложь</item><item value=\"2\" correct=\"false\">True</item></selection><p visible-if=\"wrong\">Обязательно выбери Ложь.</p></body></html>"
          },
          {
            "title": "Question: .filter()",
            "id": 120729,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Какое утверждение является точным в отношении методов <code>.filter()</code> и <code>.map()</code>?</p><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\">Они выполняются синхронно</item><item value=\"2\" correct=\"false\">Они выполняются асинхронно</item></selection><p visible-if=\"wrong\">Они выполняются синхронно.</p></body></html>"
          },
          {
            "title": "Question: .filter() 2",
            "id": 120730,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Методы JavaScript иногда требуют функции обратного вызова во время их выполнения.</p><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\">True</item><item value=\"2\" correct=\"false\">Ложь</item></selection><p visible-if=\"wrong\">Обязательно выбери True.</p></body></html>"
          },
          {
            "title": "Question: .map()/.filter()",
            "id": 120731,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Какое утверждение верно в отношении callback функций в JavaScript?</p><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\">Они могут быть написаны с использованием ES6 arrow functions</item><item value=\"2\" correct=\"false\">Их никогда нельзя написать с помощью ES6 arrow functions</item></selection><p visible-if=\"wrong\">Они могут быть написаны с использованием ES6 arrow functions.</p></body></html>"
          },
          {
            "title": "Question: .filter()/Callback",
            "id": 120839,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Что такое функция обратного вызова в этом синхронном коде?</p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" arr = [\" /><text value=\"11\" class=\"number\" /><text value=\", \" /><text value=\"12\" class=\"number\" /><text value=\", \" /><text value=\"13\" class=\"number\" /><text value=\", \" /><text value=\"14\" class=\"number\" /><text value=\", \" /><text value=\"15\" class=\"number\" /><text value=\", \" /><text value=\"16\" class=\"number\" /><text value=\", \" /><text value=\"17\" class=\"number\" /><text value=\", \" /><text value=\"18\" class=\"number\" /><text value=\", \" /><text value=\"19\" class=\"number\" /><text value=\", \" /><text value=\"20\" class=\"number\" /><text value=\"];\" /><text type=\"break\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" evenArray = \" /><text value=\"(\" /><text value=\"num\" class=\"params\" /><text value=\") =&gt;\" /><text value=\" num % \" /><text value=\"2\" class=\"number\" /><text value=\" === \" /><text value=\"0\" class=\"number\" /><text value=\";\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" newArray = arr.filter(evenArray);\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(newArray);\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;This code is synchronous.&quot;\" class=\"string\" /><text value=\");\" /></content><output><content><text value=\"[ 12, 14, 16, 18, 20 ]\" /><text type=\"break\" /><text value=\"This code is synchronous.\" /></content></output></code><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\"><code>evenArray</code></item><item value=\"2\" correct=\"false\"><code>newArray</code></item></selection><p visible-if=\"wrong\">Обязательно выбери <code>evenArray</code>.</p></body></html>"
          },
          {
            "title": "Example: .map()",
            "id": 120734,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Вызови метод <code>.map</code> с <code>makePositive</code> в качестве callback.</p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" arr = [\" /><text value=\"-1\" class=\"number\" /><text value=\", \" /><text value=\"-2\" class=\"number\" /><text value=\", \" /><text value=\"-3\" class=\"number\" /><text value=\", \" /><text value=\"-4\" class=\"number\" /><text value=\", \" /><text value=\"-5\" class=\"number\" /><text value=\"];\" /><text type=\"break\" /><text type=\"break\" /><text value=\"function\" class=\"keyword\" /><text value=\" \" /><text value=\"makePositive\" class=\"title\" /><text value=\"(\" /><text value=\"num\" class=\"params\" /><text value=\") \" /><text value=\"{\" /><text type=\"break\" /><text value=\" \" /><text value=\"return\" class=\"keyword\" /><text value=\" num * \" /><text value=\"-1\" class=\"number\" /><text value=\";\" /><text type=\"break\" /><text value=\"}\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" positiveArray = arr.map(makePositive);\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(positiveArray);\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;This code is synchronous.&quot;\" class=\"string\" /><text value=\");\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"106\" endIndex=\"109\" /><option startIndex=\"109\" endIndex=\"110\" /><option startIndex=\"110\" endIndex=\"113\" /><option startIndex=\"113\" endIndex=\"128\" /></options></interaction></interactions><output><content><text value=\"[ 1, 2, 3, 4, 5 ]\" /><text type=\"break\" /><text value=\"This code is synchronous.\" /></content></output></code><p visible-if=\"wrong\">Обязательно выбери <code>arr</code>, затем <code>.</code>, а затем <code>map</code>, <code>(makePositive);</code>.</p></body></html>"
          }
        ]
      },
      {
        "id": 13417,
        "title": "Callbacks и асинхронный JS",
        "type": "practiceLevel1",
        "lessons": [
          {
            "title": "Intro",
            "id": 120559,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Мы видели функции обратного вызова в синхронном JavaScript. Теперь давайте посмотрим на настраиваемые обратные вызовы и обратные вызовы в асинхронном коде.</p></body></html>"
          },
          {
            "title": "Callback Functions",
            "id": 120654,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Помни, что функция обратного вызова — это функция, которую мы передаем в другую функцию и затем вызываем для выполнения задачи.</p><p>Мы видели, что методы JavaScript, такие как <code>.map()</code> и <code>.filter()</code>, предназначены для принятия функции обратного вызова.</p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" arr = [\" /><text value=\"1\" class=\"number\" /><text value=\", \" /><text value=\"2\" class=\"number\" /><text value=\", \" /><text value=\"3\" class=\"number\" /><text value=\", \" /><text value=\"4\" class=\"number\" /><text value=\", \" /><text value=\"5\" class=\"number\" /><text value=\"];\" /><text type=\"break\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" newArray = arr.map(\" /><text value=\"(\" /><text value=\"num\" class=\"params\" /><text value=\") =&gt;\" /><text value=\" num * \" /><text value=\"2\" class=\"number\" /><text value=\");\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(newArray);\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;This code is synchronous.&quot;\" class=\"string\" /><text value=\");\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"47\" endIndex=\"50\" /><option startIndex=\"50\" endIndex=\"51\" /><option startIndex=\"51\" endIndex=\"54\" /></options></interaction></interactions><output><content><text value=\"[ 2, 4, 6, 8, 10 ]\" /><text type=\"break\" /><text value=\"This code is synchronous.\" /></content></output></code><p visible-if=\"wrong\">Обязательно выбери <code>arr</code>, затем <code>.</code>, и наконец <code>map</code>.</p></body></html>"
          },
          {
            "title": "Callback Functions II",
            "id": 120835,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Мы также можем настроить наши собственные функции для принятия и выполнения callback.</p><p>Здесь мы можем передать функцию <code>sayGoodbye</code>, которая отображает <code>\"Goodbye\"</code>, в функцию <code>greet()</code>.</p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"function\" class=\"keyword\" /><text value=\" \" /><text value=\"greet\" class=\"title\" /><text value=\"(\" /><text value=\"name, callback\" class=\"params\" /><text value=\") \" /><text value=\"{\" /><text type=\"break\" /><text value=\"  \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"`Hello, \" /><text value=\"${name}\" class=\"subst\" /><text value=\"!`\" /><text value=\");\" /><text type=\"break\" /><text value=\"  callback();\" /><text type=\"break\" /><text value=\"}\" /><text type=\"break\" /><text type=\"break\" /><text value=\"function\" class=\"keyword\" /><text value=\" \" /><text value=\"sayGoodbye\" class=\"title\" /><text value=\"(\" /><text value=\"\" class=\"params\" /><text value=\") \" /><text value=\"{\" /><text type=\"break\" /><text value=\"  \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;Goodbye!&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\"}\" /><text type=\"break\" /><text type=\"break\" /><text value=\"greet(\" /><text value=\"&quot;Teresa&quot;\" class=\"string\" /><text value=\", sayGoodbye);\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"154\" endIndex=\"164\" /><option startIndex=\"138\" endIndex=\"143\" /></options></interaction></interactions><output><content><text value=\"Hello, Teresa!\" /><text type=\"break\" /><text value=\"Goodbye!\" /></content></output></code><p visible-if=\"wrong\">Обязательно выбери <code>greet</code>, а затем <code>sayGoodbye</code>.</p></body></html>"
          },
          {
            "title": "Customizing Callbacks",
            "id": 120655,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Мы можем настроить callback, чтобы он делал все, что нам нужно.</p><p>Давай вызовем функцию <code>doSomeMath</code> с параметром <code>input</code>, установленным в <code>2</code>, и параметром <code>callback</code>, установленным в <code>multiplyCallback</code>.</p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"function\" class=\"keyword\" /><text value=\" \" /><text value=\"multiplyCallback\" class=\"title\" /><text value=\"(\" /><text value=\"num\" class=\"params\" /><text value=\") \" /><text value=\"{\" /><text type=\"break\" /><text value=\" \" /><text value=\"const\" class=\"keyword\" /><text value=\" result = num * \" /><text value=\"2\" class=\"number\" /><text value=\";\" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"`The input doubled is equal to \" /><text value=\"${result}\" class=\"subst\" /><text value=\"`\" /><text value=\");\" /><text type=\"break\" /><text value=\"}\" /><text type=\"break\" /><text type=\"break\" /><text value=\"function\" class=\"keyword\" /><text value=\" \" /><text value=\"doSomeMath\" class=\"title\" /><text value=\"(\" /><text value=\"input, callback\" class=\"params\" /><text value=\") \" /><text value=\"{\" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;We are doubling the input number.&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\" callback(input);\" /><text type=\"break\" /><text value=\"}\" /><text type=\"break\" /><text value=\"doSomeMath(\" /><text value=\"2\" class=\"number\" /><text value=\", multiplyCallback);\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"228\" endIndex=\"238\" /><option startIndex=\"238\" endIndex=\"239\" /><option startIndex=\"239\" endIndex=\"241\" /><option startIndex=\"242\" endIndex=\"258\" /><option startIndex=\"258\" endIndex=\"259\" /></options></interaction></interactions><output><content><text value=\"We are doubling the input number.\" /><text type=\"break\" /><text value=\"The input doubled is equal to 4\" /></content></output></code><p visible-if=\"wrong\">Обязательно выбери <code>doSomeMath</code>, затем <code>(</code>, а затем <code>2,</code>, <code>multiplyCallback</code>, <code>)</code>.</p></body></html>"
          },
          {
            "title": "Asynchronous Callback",
            "id": 120723,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Мы также можем использовать callback функции в асинхронных методах JavaScript. Передай callback в асинхронный метод <code>setTimeout()</code>.</p><p>Позже ты узнаешь больше об этом методе, а пока сосредоточься на выводе в консоль.</p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"function\" class=\"keyword\" /><text value=\" \" /><text value=\"callbackFunc\" class=\"title\" /><text value=\"(\" /><text value=\"\" class=\"params\" /><text value=\") \" /><text value=\"{\" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;Executed last because we're using asynchronous code.&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\"}\" /><text type=\"break\" /><text value=\"setTimeout(callbackFunc, \" /><text value=\"1500\" class=\"number\" /><text value=\");\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"'Executed first'\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"'Executed second'\" class=\"string\" /><text value=\");\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"109\" endIndex=\"121\" /></options></interaction></interactions><output><content><text value=\"Executed first\" /><text type=\"break\" /><text value=\"Executed second\" /><text type=\"break\" /><text value=\"Executed last because we're using asynchronous code.\" /></content></output></code><p visible-if=\"wrong\">Обязательно выбери <code>callbackFunc</code>.</p></body></html>"
          },
          {
            "title": "Asynchronous Callback 2",
            "id": 120656,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Мы можем использовать синхронность и асинхронность вместе. Здесь мы связываем операции в цепочку, которые будут происходить одна за другой.</p><p> Затем выполните нашу настроенную функцию как callback асинхронно.</p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" word = \" /><text value=\"&quot;enola&quot;\" class=\"string\" /><text value=\";\" /><text type=\"break\" /><text value=\"function\" class=\"keyword\" /><text value=\" \" /><text value=\"reverseCallback\" class=\"title\" /><text value=\"(\" /><text value=\"\" class=\"params\" /><text value=\") \" /><text value=\"{\" /><text type=\"break\" /><text value=\" \" /><text value=\"const\" class=\"keyword\" /><text value=\" result = word.split(\" /><text value=\"&quot;&quot;\" class=\"string\" /><text value=\").reverse().join(\" /><text value=\"&quot;&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"`The string reversed is: &quot;\" /><text value=\"${result}\" class=\"subst\" /><text value=\"&quot;`\" /><text value=\");\" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;Executed last because we're using asynchronous code.&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\"}\" /><text type=\"break\" /><text value=\"setTimeout(reverseCallback, \" /><text value=\"1500\" class=\"number\" /><text value=\");\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"'Executed first'\" class=\"string\" /><text value=\");\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"238\" endIndex=\"253\" /></options></interaction></interactions><output><content><text value=\"Executed first\" /><text type=\"break\" /><text value=\"The string reversed is: &quot;alone&quot;\" /><text type=\"break\" /><text value=\"Executed last because we're using asynchronous code.\" /></content></output></code><p visible-if=\"wrong\">Обязательно выбери <code>reverseCallback</code>.</p></body></html>"
          },
          {
            "title": "Asynchronous JS History",
            "id": 120652,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Хотя пользовательские callbacks могут быть полезными, слишком большое количество callbacks приводит к глубокой вложенности.</p><p>Глубоко вложенный код нежелателен, потому что его трудно понять и поддерживать. Скоро ты узнаешь синтаксис, который поможет это упростить.</p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"func1(\" /><text value=\"&quot;one&quot;\" class=\"string\" /><text value=\", () =&gt; {\" /><text type=\"break\" /><text value=\" func2(\" /><text value=\"&quot;two&quot;\" class=\"string\" /><text value=\", () =&gt; {\" /><text type=\"break\" /><text value=\"  func3(\" /><text value=\"&quot;three&quot;\" class=\"string\" /><text value=\", () =&gt; {\" /><text type=\"break\" /><text value=\"   \" /><text value=\"// etc...\" class=\"comment\" /><text type=\"break\" /><text value=\"  });\" /><text type=\"break\" /><text value=\" });\" /><text type=\"break\" /><text value=\"});\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"0\" endIndex=\"5\" /><option startIndex=\"22\" endIndex=\"27\" /><option startIndex=\"45\" endIndex=\"50\" /></options></interaction></interactions></code><p visible-if=\"wrong\">Обязательно выбери <code>func1</code>, затем <code>func2</code>, и наконец <code>func3</code>.</p></body></html>"
          },
          {
            "title": "Question: Asynhchronous JS History",
            "id": 120744,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Какова распространенная проблема использования только callbacks для реализации асинхронного JavaScript кода?</p><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\">Мы можем получить сильно вложенный код</item><item value=\"2\" correct=\"false\">Мы не можем использовать callbacks с тех пор, как был введен ES8</item></selection><p visible-if=\"wrong\">Мы можем получить сильно вложенный код.</p></body></html>"
          },
          {
            "title": "Question: Callback Functions",
            "id": 120746,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Какая особенность у функций обратного вызова?</p><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\">Они всегда вызываются внутри другой функции</item><item value=\"2\" correct=\"false\">Их можно вызвать только один раз</item></selection><p visible-if=\"wrong\">Они всегда вызываются внутри другой функции.</p></body></html>"
          },
          {
            "title": "Question: Customizing Callbacks",
            "id": 120747,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Что верно относительно callback функций?</p><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\">Мы можем настроить их так, чтобы они делали все, что нам нужно</item><item value=\"2\" correct=\"false\">Они ограничены математическими операциями</item></selection><p visible-if=\"wrong\">Мы можем настроить их так, чтобы они делали все, что нам нужно.</p></body></html>"
          },
          {
            "title": "Question: Asynchronous Callback",
            "id": 120748,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Что является точным в отношении callback функций?</p><selection iscode=\"false\" multiple=\"multiple\"><item value=\"1\" correct=\"true\">Мы можем использовать их с асинхронным кодом</item><item value=\"2\" correct=\"false\">Мы не можем использовать их с асинхронным кодом</item></selection><p visible-if=\"wrong\">Мы можем использовать их с асинхронным кодом.</p></body></html>"
          },
          {
            "title": "Example: Callback Functions/ES6",
            "id": 120753,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Заверши функцию обратного вызова, которую мы передаем в <code>sayHello</code>.</p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"const\" class=\"keyword\" /><text value=\" sayHello = \" /><text value=\"(\" /><text value=\"name, callback\" class=\"params\" /><text value=\") =&gt;\" /><text value=\" {\" /><text type=\"break\" /><text value=\"  \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"`Hello, \" /><text value=\"${name}\" class=\"subst\" /><text value=\"!`\" /><text value=\");\" /><text type=\"break\" /><text value=\"  callback();\" /><text type=\"break\" /><text value=\"};\" /><text type=\"break\" /><text type=\"break\" /><text value=\"const\" class=\"keyword\" /><text value=\" sayGoodbye = \" /><text value=\"()\" class=\"params\" /><text value=\" =&gt;\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;Goodbye!&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text type=\"break\" /><text value=\"sayHello(\" /><text value=\"&quot;Jon&quot;\" class=\"string\" /><text value=\", sayGoodbye);\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"75\" endIndex=\"86\" /><option startIndex=\"97\" endIndex=\"107\" /><option startIndex=\"158\" endIndex=\"168\" /></options></interaction></interactions><output><content><text value=\"Hello, Jon!\" /><text type=\"break\" /><text value=\"Goodbye!\" /></content></output></code><p visible-if=\"wrong\">Обязательно выбери <code>callback();</code>, затем <code>sayGoodbye</code>, и наконец <code>sayGoodbye</code>.</p></body></html>"
          },
          {
            "title": "Example: Customizing Callbacks",
            "id": 120754,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Заверши вызов <code>doSomeMath()</code>, передав настроенную callback функцию во второй параметр.</p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"function\" class=\"keyword\" /><text value=\" \" /><text value=\"multiplyCallback\" class=\"title\" /><text value=\"(\" /><text value=\"num\" class=\"params\" /><text value=\") \" /><text value=\"{\" /><text type=\"break\" /><text value=\" \" /><text value=\"const\" class=\"keyword\" /><text value=\" result = num * \" /><text value=\"2\" class=\"number\" /><text value=\";\" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"`The input doubled is equal to \" /><text value=\"${result}\" class=\"subst\" /><text value=\"`\" /><text value=\");\" /><text type=\"break\" /><text value=\"}\" /><text type=\"break\" /><text type=\"break\" /><text value=\"function\" class=\"keyword\" /><text value=\" \" /><text value=\"doSomeMath\" class=\"title\" /><text value=\"(\" /><text value=\"input, callback\" class=\"params\" /><text value=\") \" /><text value=\"{\" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;We are doubling the input number.&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\" callback(input);\" /><text type=\"break\" /><text value=\"}\" /><text type=\"break\" /><text value=\"doSomeMath(\" /><text value=\"2\" class=\"number\" /><text value=\", multiplyCallback);\" /></content><interactions><interaction type=\"fillTheGap\" isDefault=\"true\"><options><option startIndex=\"242\" endIndex=\"258\" /></options></interaction></interactions><output><content><text value=\"We are doubling the input number.\" /><text type=\"break\" /><text value=\"The input doubled is equal to 4\" /></content></output></code><p visible-if=\"wrong\">Обязательно выбери <code>multiplyCallback</code>.</p></body></html>"
          },
          {
            "title": "Example: Asynchronous Callback",
            "id": 120755,
            "contentType": "interactive",
            "images": [],
            "interactiveContent": "<!DOCTYPE html ><html><body><p>Передай callback-функцию в <code>setTimeout()</code>, чтобы завершить этот асинхронный код.</p><code version=\"2\" codelang=\"javascript\" name=\"script.js\" visible-if=\"always\"><content><text value=\"function\" class=\"keyword\" /><text value=\" \" /><text value=\"callbackFunc\" class=\"title\" /><text value=\"(\" /><text value=\"\" class=\"params\" /><text value=\") \" /><text value=\"{\" /><text type=\"break\" /><text value=\" \" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"&quot;Executed last because we're using asynchronous code.&quot;\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\"}\" /><text type=\"break\" /><text value=\"setTimeout(callbackFunc, \" /><text value=\"1500\" class=\"number\" /><text value=\");\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"'Executed first'\" class=\"string\" /><text value=\");\" /><text type=\"break\" /><text value=\"console\" class=\"built_in\" /><text value=\".log(\" /><text value=\"'Executed second'\" class=\"string\" /><text value=\");\" /></content><interactions><interaction type=\"validatedInput\" isDefault=\"true\" startIndex=\"109\" endIndex=\"121\" /></interactions></code><p visible-if=\"wrong\">Обязательно выбери <code>callbackFunc</code>.</p></body></html>"
          }
        ]
      }
    ]
  }
}